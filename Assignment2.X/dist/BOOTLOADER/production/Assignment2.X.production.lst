

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 15 17:38:36 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  0167A2                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  0167A2  0006               	dw	6
   241  0167A4  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  0167A6  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  0167A7  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  0167A8  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  0167A9  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  0167AA  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  0167AB  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  0167D8                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  0167D8  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  0167DA  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  0167DC  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  0167DE  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  016772                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  016772  0006               	dw	6
   283  016774  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  016776  0080               	dw	128
   287  016778  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  01677A  0005               	dw	5
   291  01677C  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC32                     __pmediumconst:
   295                           	opt stack 0
   296  00FC32  00                 	db	0
   297  00FC33                     _InitList:
   298                           	opt stack 0
   299  00FC33  1100               	dw	4352
   300  00FC35  0080               	dw	128
   301  00FC37  012C               	dw	300
   302  00FC39  B100               	dw	45312
   303  00FC3B  0002               	dw	2
   304  00FC3D  0035               	dw	53
   305  00FC3F  0036               	dw	54
   306  00FC41  B200               	dw	45568
   307  00FC43  0002               	dw	2
   308  00FC45  0035               	dw	53
   309  00FC47  0036               	dw	54
   310  00FC49  B300               	dw	45824
   311  00FC4B  0002               	dw	2
   312  00FC4D  0035               	dw	53
   313  00FC4F  0036               	dw	54
   314  00FC51  0002               	dw	2
   315  00FC53  0035               	dw	53
   316  00FC55  0036               	dw	54
   317  00FC57  B400               	dw	46080
   318  00FC59  0000               	dw	0
   319  00FC5B  C000               	dw	49152
   320  00FC5D  00A2               	dw	162
   321  00FC5F  0002               	dw	2
   322  00FC61  0084               	dw	132
   323  00FC63  C100               	dw	49408
   324  00FC65  00C5               	dw	197
   325  00FC67  C200               	dw	49664
   326  00FC69  000D               	dw	13
   327  00FC6B  0000               	dw	0
   328  00FC6D  C300               	dw	49920
   329  00FC6F  008D               	dw	141
   330  00FC71  002A               	dw	42
   331  00FC73  C400               	dw	50176
   332  00FC75  008D               	dw	141
   333  00FC77  00EE               	dw	238
   334  00FC79  C500               	dw	50432
   335  00FC7B  000A               	dw	10
   336  00FC7D  3600               	dw	13824
   337  00FC7F  00C8               	dw	200
   338  00FC81  E000               	dw	57344
   339  00FC83  0012               	dw	18
   340  00FC85  001C               	dw	28
   341  00FC87  0010               	dw	16
   342  00FC89  0018               	dw	24
   343  00FC8B  0033               	dw	51
   344  00FC8D  002C               	dw	44
   345  00FC8F  0025               	dw	37
   346  00FC91  0028               	dw	40
   347  00FC93  0028               	dw	40
   348  00FC95  0027               	dw	39
   349  00FC97  002F               	dw	47
   350  00FC99  003C               	dw	60
   351  00FC9B  0000               	dw	0
   352  00FC9D  0003               	dw	3
   353  00FC9F  0003               	dw	3
   354  00FCA1  0010               	dw	16
   355  00FCA3  0080               	dw	128
   356  00FCA5  0078               	dw	120
   357  00FCA7  E100               	dw	57600
   358  00FCA9  0012               	dw	18
   359  00FCAB  001C               	dw	28
   360  00FCAD  0010               	dw	16
   361  00FCAF  0018               	dw	24
   362  00FCB1  002D               	dw	45
   363  00FCB3  0028               	dw	40
   364  00FCB5  0023               	dw	35
   365  00FCB7  0028               	dw	40
   366  00FCB9  0028               	dw	40
   367  00FCBB  0026               	dw	38
   368  00FCBD  002F               	dw	47
   369  00FCBF  003B               	dw	59
   370  00FCC1  0000               	dw	0
   371  00FCC3  0003               	dw	3
   372  00FCC5  0003               	dw	3
   373  00FCC7  0010               	dw	16
   374  00FCC9  3A00               	dw	14848
   375  00FCCB  0005               	dw	5
   376  00FCCD  2A00               	dw	10752
   377  00FCCF  0000               	dw	0
   378  00FCD1  0002               	dw	2
   379  00FCD3  0000               	dw	0
   380  00FCD5  0081               	dw	129
   381  00FCD7  2B00               	dw	11008
   382  00FCD9  0000               	dw	0
   383  00FCDB  0003               	dw	3
   384  00FCDD  0000               	dw	0
   385  00FCDF  00A2               	dw	162
   386  00FCE1  2900               	dw	10496
   387  00FCE3  2C00               	dw	11264
   388  00FCE5                     __end_of_InitList:
   389                           	opt stack 0
   390  00FCE5                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FCE5  0002               	dw	2
   393  00FCE7  0004               	dw	4
   394  00FCE9  0008               	dw	8
   395  00FCEB  0010               	dw	16
   396  00FCED  0020               	dw	32
   397  00FCEF  0040               	dw	64
   398  00FCF1  0080               	dw	128
   399  00FCF3  0100               	dw	256
   400  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FCF5                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FCF5  00                 	db	0
   405  00FCF6  01                 	db	1
   406  00FCF7  02                 	db	2
   407  00FCF8  00                 	db	0
   408  00FCF9  01                 	db	1
   409  00FCFA  00                 	db	0
   410  00FCFB  01                 	db	1
   411  00FCFC  00                 	db	0
   412  00FCFD  02                 	db	2
   413  00FCFE  02                 	db	2
   414  00FCFF  00                 	db	0
   415  00FD00  00                 	db	0
   416  00FD01  03                 	db	3
   417  00FD02  03                 	db	3
   418  00FD03  03                 	db	3
   419  00FD04  00                 	db	0
   420  00FD05                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD05                     _dpowers:
   423                           	opt stack 0
   424  00FD05  0001               	dw	1
   425  00FD07  000A               	dw	10
   426  00FD09  0064               	dw	100
   427  00FD0B  03E8               	dw	1000
   428  00FD0D  2710               	dw	10000
   429  00FD0F                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD0F                     _MASKS:
   432                           	opt stack 0
   433  00FD0F  00                 	db	0
   434  00FD10  01                 	db	1
   435  00FD11  03                 	db	3
   436  00FD12  07                 	db	7
   437  00FD13  0F                 	db	15
   438  00FD14  1F                 	db	31
   439  00FD15  3F                 	db	63
   440  00FD16  7F                 	db	127
   441  00FD17  FF                 	db	255
   442  00FD18                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD18                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD18  00                 	db	0
   447  00FD19  02                 	db	2
   448  00FD1A  01                 	db	1
   449  00FD1B  03                 	db	3
   450  00FD1C                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD1C                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD1C  01                 	db	1
   455  00FD1D  04                 	db	4
   456  00FD1E  10                 	db	16
   457  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1F                     _Font5x7:
   460                           	opt stack 0
   461  00FD1F  00                 	db	0
   462  00FD20  00                 	db	0
   463  00FD21  00                 	db	0
   464  00FD22  00                 	db	0
   465  00FD23  00                 	db	0
   466  00FD24  00                 	db	0
   467  00FD25  00                 	db	0
   468  00FD26  5F                 	db	95
   469  00FD27  00                 	db	0
   470  00FD28  00                 	db	0
   471  00FD29  00                 	db	0
   472  00FD2A  07                 	db	7
   473  00FD2B  00                 	db	0
   474  00FD2C  07                 	db	7
   475  00FD2D  00                 	db	0
   476  00FD2E  14                 	db	20
   477  00FD2F  7F                 	db	127
   478  00FD30  14                 	db	20
   479  00FD31  7F                 	db	127
   480  00FD32  14                 	db	20
   481  00FD33  24                 	db	36
   482  00FD34  2A                 	db	42
   483  00FD35  7F                 	db	127
   484  00FD36  2A                 	db	42
   485  00FD37  12                 	db	18
   486  00FD38  23                 	db	35
   487  00FD39  13                 	db	19
   488  00FD3A  08                 	db	8
   489  00FD3B  64                 	db	100
   490  00FD3C  62                 	db	98
   491  00FD3D  36                 	db	54
   492  00FD3E  49                 	db	73
   493  00FD3F  55                 	db	85
   494  00FD40  22                 	db	34
   495  00FD41  50                 	db	80
   496  00FD42  00                 	db	0
   497  00FD43  05                 	db	5
   498  00FD44  03                 	db	3
   499  00FD45  00                 	db	0
   500  00FD46  00                 	db	0
   501  00FD47  00                 	db	0
   502  00FD48  1C                 	db	28
   503  00FD49  22                 	db	34
   504  00FD4A  41                 	db	65
   505  00FD4B  00                 	db	0
   506  00FD4C  00                 	db	0
   507  00FD4D  41                 	db	65
   508  00FD4E  22                 	db	34
   509  00FD4F  1C                 	db	28
   510  00FD50  00                 	db	0
   511  00FD51  08                 	db	8
   512  00FD52  2A                 	db	42
   513  00FD53  1C                 	db	28
   514  00FD54  2A                 	db	42
   515  00FD55  08                 	db	8
   516  00FD56  08                 	db	8
   517  00FD57  08                 	db	8
   518  00FD58  3E                 	db	62
   519  00FD59  08                 	db	8
   520  00FD5A  08                 	db	8
   521  00FD5B  00                 	db	0
   522  00FD5C  50                 	db	80
   523  00FD5D  30                 	db	48
   524  00FD5E  00                 	db	0
   525  00FD5F  00                 	db	0
   526  00FD60  08                 	db	8
   527  00FD61  08                 	db	8
   528  00FD62  08                 	db	8
   529  00FD63  08                 	db	8
   530  00FD64  08                 	db	8
   531  00FD65  00                 	db	0
   532  00FD66  60                 	db	96
   533  00FD67  60                 	db	96
   534  00FD68  00                 	db	0
   535  00FD69  00                 	db	0
   536  00FD6A  20                 	db	32
   537  00FD6B  10                 	db	16
   538  00FD6C  08                 	db	8
   539  00FD6D  04                 	db	4
   540  00FD6E  02                 	db	2
   541  00FD6F  3E                 	db	62
   542  00FD70  51                 	db	81
   543  00FD71  49                 	db	73
   544  00FD72  45                 	db	69
   545  00FD73  3E                 	db	62
   546  00FD74  00                 	db	0
   547  00FD75  42                 	db	66
   548  00FD76  7F                 	db	127
   549  00FD77  40                 	db	64
   550  00FD78  00                 	db	0
   551  00FD79  42                 	db	66
   552  00FD7A  61                 	db	97
   553  00FD7B  51                 	db	81
   554  00FD7C  49                 	db	73
   555  00FD7D  46                 	db	70
   556  00FD7E  21                 	db	33
   557  00FD7F  41                 	db	65
   558  00FD80  45                 	db	69
   559  00FD81  4B                 	db	75
   560  00FD82  31                 	db	49
   561  00FD83  18                 	db	24
   562  00FD84  14                 	db	20
   563  00FD85  12                 	db	18
   564  00FD86  7F                 	db	127
   565  00FD87  10                 	db	16
   566  00FD88  27                 	db	39
   567  00FD89  45                 	db	69
   568  00FD8A  45                 	db	69
   569  00FD8B  45                 	db	69
   570  00FD8C  39                 	db	57
   571  00FD8D  3C                 	db	60
   572  00FD8E  4A                 	db	74
   573  00FD8F  49                 	db	73
   574  00FD90  49                 	db	73
   575  00FD91  30                 	db	48
   576  00FD92  01                 	db	1
   577  00FD93  71                 	db	113
   578  00FD94  09                 	db	9
   579  00FD95  05                 	db	5
   580  00FD96  03                 	db	3
   581  00FD97  36                 	db	54
   582  00FD98  49                 	db	73
   583  00FD99  49                 	db	73
   584  00FD9A  49                 	db	73
   585  00FD9B  36                 	db	54
   586  00FD9C  06                 	db	6
   587  00FD9D  49                 	db	73
   588  00FD9E  49                 	db	73
   589  00FD9F  29                 	db	41
   590  00FDA0  1E                 	db	30
   591  00FDA1  00                 	db	0
   592  00FDA2  36                 	db	54
   593  00FDA3  36                 	db	54
   594  00FDA4  00                 	db	0
   595  00FDA5  00                 	db	0
   596  00FDA6  00                 	db	0
   597  00FDA7  56                 	db	86
   598  00FDA8  36                 	db	54
   599  00FDA9  00                 	db	0
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  14                 	db	20
   604  00FDAE  22                 	db	34
   605  00FDAF  41                 	db	65
   606  00FDB0  14                 	db	20
   607  00FDB1  14                 	db	20
   608  00FDB2  14                 	db	20
   609  00FDB3  14                 	db	20
   610  00FDB4  14                 	db	20
   611  00FDB5  41                 	db	65
   612  00FDB6  22                 	db	34
   613  00FDB7  14                 	db	20
   614  00FDB8  08                 	db	8
   615  00FDB9  00                 	db	0
   616  00FDBA  02                 	db	2
   617  00FDBB  01                 	db	1
   618  00FDBC  51                 	db	81
   619  00FDBD  09                 	db	9
   620  00FDBE  06                 	db	6
   621  00FDBF  32                 	db	50
   622  00FDC0  49                 	db	73
   623  00FDC1  79                 	db	121
   624  00FDC2  41                 	db	65
   625  00FDC3  3E                 	db	62
   626  00FDC4  7E                 	db	126
   627  00FDC5  11                 	db	17
   628  00FDC6  11                 	db	17
   629  00FDC7  11                 	db	17
   630  00FDC8  7E                 	db	126
   631  00FDC9  7F                 	db	127
   632  00FDCA  49                 	db	73
   633  00FDCB  49                 	db	73
   634  00FDCC  49                 	db	73
   635  00FDCD  36                 	db	54
   636  00FDCE  3E                 	db	62
   637  00FDCF  41                 	db	65
   638  00FDD0  41                 	db	65
   639  00FDD1  41                 	db	65
   640  00FDD2  22                 	db	34
   641  00FDD3  7F                 	db	127
   642  00FDD4  41                 	db	65
   643  00FDD5  41                 	db	65
   644  00FDD6  22                 	db	34
   645  00FDD7  1C                 	db	28
   646  00FDD8  7F                 	db	127
   647  00FDD9  49                 	db	73
   648  00FDDA  49                 	db	73
   649  00FDDB  49                 	db	73
   650  00FDDC  41                 	db	65
   651  00FDDD  7F                 	db	127
   652  00FDDE  09                 	db	9
   653  00FDDF  09                 	db	9
   654  00FDE0  01                 	db	1
   655  00FDE1  01                 	db	1
   656  00FDE2  3E                 	db	62
   657  00FDE3  41                 	db	65
   658  00FDE4  41                 	db	65
   659  00FDE5  51                 	db	81
   660  00FDE6  32                 	db	50
   661  00FDE7  7F                 	db	127
   662  00FDE8  08                 	db	8
   663  00FDE9  08                 	db	8
   664  00FDEA  08                 	db	8
   665  00FDEB  7F                 	db	127
   666  00FDEC  00                 	db	0
   667  00FDED  41                 	db	65
   668  00FDEE  7F                 	db	127
   669  00FDEF  41                 	db	65
   670  00FDF0  00                 	db	0
   671  00FDF1  20                 	db	32
   672  00FDF2  40                 	db	64
   673  00FDF3  41                 	db	65
   674  00FDF4  3F                 	db	63
   675  00FDF5  01                 	db	1
   676  00FDF6  7F                 	db	127
   677  00FDF7  08                 	db	8
   678  00FDF8  14                 	db	20
   679  00FDF9  22                 	db	34
   680  00FDFA  41                 	db	65
   681  00FDFB  7F                 	db	127
   682  00FDFC  40                 	db	64
   683  00FDFD  40                 	db	64
   684  00FDFE  40                 	db	64
   685  00FDFF  40                 	db	64
   686  00FE00  7F                 	db	127
   687  00FE01  02                 	db	2
   688  00FE02  04                 	db	4
   689  00FE03  02                 	db	2
   690  00FE04  7F                 	db	127
   691  00FE05  7F                 	db	127
   692  00FE06  04                 	db	4
   693  00FE07  08                 	db	8
   694  00FE08  10                 	db	16
   695  00FE09  7F                 	db	127
   696  00FE0A  3E                 	db	62
   697  00FE0B  41                 	db	65
   698  00FE0C  41                 	db	65
   699  00FE0D  41                 	db	65
   700  00FE0E  3E                 	db	62
   701  00FE0F  7F                 	db	127
   702  00FE10  09                 	db	9
   703  00FE11  09                 	db	9
   704  00FE12  09                 	db	9
   705  00FE13  06                 	db	6
   706  00FE14  3E                 	db	62
   707  00FE15  41                 	db	65
   708  00FE16  51                 	db	81
   709  00FE17  21                 	db	33
   710  00FE18  5E                 	db	94
   711  00FE19  7F                 	db	127
   712  00FE1A  09                 	db	9
   713  00FE1B  19                 	db	25
   714  00FE1C  29                 	db	41
   715  00FE1D  46                 	db	70
   716  00FE1E  46                 	db	70
   717  00FE1F  49                 	db	73
   718  00FE20  49                 	db	73
   719  00FE21  49                 	db	73
   720  00FE22  31                 	db	49
   721  00FE23  01                 	db	1
   722  00FE24  01                 	db	1
   723  00FE25  7F                 	db	127
   724  00FE26  01                 	db	1
   725  00FE27  01                 	db	1
   726  00FE28  3F                 	db	63
   727  00FE29  40                 	db	64
   728  00FE2A  40                 	db	64
   729  00FE2B  40                 	db	64
   730  00FE2C  3F                 	db	63
   731  00FE2D  1F                 	db	31
   732  00FE2E  20                 	db	32
   733  00FE2F  40                 	db	64
   734  00FE30  20                 	db	32
   735  00FE31  1F                 	db	31
   736  00FE32  7F                 	db	127
   737  00FE33  20                 	db	32
   738  00FE34  18                 	db	24
   739  00FE35  20                 	db	32
   740  00FE36  7F                 	db	127
   741  00FE37  63                 	db	99
   742  00FE38  14                 	db	20
   743  00FE39  08                 	db	8
   744  00FE3A  14                 	db	20
   745  00FE3B  63                 	db	99
   746  00FE3C  03                 	db	3
   747  00FE3D  04                 	db	4
   748  00FE3E  78                 	db	120
   749  00FE3F  04                 	db	4
   750  00FE40  03                 	db	3
   751  00FE41  61                 	db	97
   752  00FE42  51                 	db	81
   753  00FE43  49                 	db	73
   754  00FE44  45                 	db	69
   755  00FE45  43                 	db	67
   756  00FE46  00                 	db	0
   757  00FE47  00                 	db	0
   758  00FE48  7F                 	db	127
   759  00FE49  41                 	db	65
   760  00FE4A  41                 	db	65
   761  00FE4B  02                 	db	2
   762  00FE4C  04                 	db	4
   763  00FE4D  08                 	db	8
   764  00FE4E  10                 	db	16
   765  00FE4F  20                 	db	32
   766  00FE50  41                 	db	65
   767  00FE51  41                 	db	65
   768  00FE52  7F                 	db	127
   769  00FE53  00                 	db	0
   770  00FE54  00                 	db	0
   771  00FE55  04                 	db	4
   772  00FE56  02                 	db	2
   773  00FE57  01                 	db	1
   774  00FE58  02                 	db	2
   775  00FE59  04                 	db	4
   776  00FE5A  40                 	db	64
   777  00FE5B  40                 	db	64
   778  00FE5C  40                 	db	64
   779  00FE5D  40                 	db	64
   780  00FE5E  40                 	db	64
   781  00FE5F  00                 	db	0
   782  00FE60  01                 	db	1
   783  00FE61  02                 	db	2
   784  00FE62  04                 	db	4
   785  00FE63  00                 	db	0
   786  00FE64  20                 	db	32
   787  00FE65  54                 	db	84
   788  00FE66  54                 	db	84
   789  00FE67  54                 	db	84
   790  00FE68  78                 	db	120
   791  00FE69  7F                 	db	127
   792  00FE6A  48                 	db	72
   793  00FE6B  44                 	db	68
   794  00FE6C  44                 	db	68
   795  00FE6D  38                 	db	56
   796  00FE6E  38                 	db	56
   797  00FE6F  44                 	db	68
   798  00FE70  44                 	db	68
   799  00FE71  44                 	db	68
   800  00FE72  20                 	db	32
   801  00FE73  38                 	db	56
   802  00FE74  44                 	db	68
   803  00FE75  44                 	db	68
   804  00FE76  48                 	db	72
   805  00FE77  7F                 	db	127
   806  00FE78  38                 	db	56
   807  00FE79  54                 	db	84
   808  00FE7A  54                 	db	84
   809  00FE7B  54                 	db	84
   810  00FE7C  18                 	db	24
   811  00FE7D  08                 	db	8
   812  00FE7E  7E                 	db	126
   813  00FE7F  09                 	db	9
   814  00FE80  01                 	db	1
   815  00FE81  02                 	db	2
   816  00FE82  08                 	db	8
   817  00FE83  14                 	db	20
   818  00FE84  54                 	db	84
   819  00FE85  54                 	db	84
   820  00FE86  3C                 	db	60
   821  00FE87  7F                 	db	127
   822  00FE88  08                 	db	8
   823  00FE89  04                 	db	4
   824  00FE8A  04                 	db	4
   825  00FE8B  78                 	db	120
   826  00FE8C  00                 	db	0
   827  00FE8D  44                 	db	68
   828  00FE8E  7D                 	db	125
   829  00FE8F  40                 	db	64
   830  00FE90  00                 	db	0
   831  00FE91  20                 	db	32
   832  00FE92  40                 	db	64
   833  00FE93  44                 	db	68
   834  00FE94  3D                 	db	61
   835  00FE95  00                 	db	0
   836  00FE96  00                 	db	0
   837  00FE97  7F                 	db	127
   838  00FE98  10                 	db	16
   839  00FE99  28                 	db	40
   840  00FE9A  44                 	db	68
   841  00FE9B  00                 	db	0
   842  00FE9C  41                 	db	65
   843  00FE9D  7F                 	db	127
   844  00FE9E  40                 	db	64
   845  00FE9F  00                 	db	0
   846  00FEA0  7C                 	db	124
   847  00FEA1  04                 	db	4
   848  00FEA2  18                 	db	24
   849  00FEA3  04                 	db	4
   850  00FEA4  78                 	db	120
   851  00FEA5  7C                 	db	124
   852  00FEA6  08                 	db	8
   853  00FEA7  04                 	db	4
   854  00FEA8  04                 	db	4
   855  00FEA9  78                 	db	120
   856  00FEAA  38                 	db	56
   857  00FEAB  44                 	db	68
   858  00FEAC  44                 	db	68
   859  00FEAD  44                 	db	68
   860  00FEAE  38                 	db	56
   861  00FEAF  7C                 	db	124
   862  00FEB0  14                 	db	20
   863  00FEB1  14                 	db	20
   864  00FEB2  14                 	db	20
   865  00FEB3  08                 	db	8
   866  00FEB4  08                 	db	8
   867  00FEB5  14                 	db	20
   868  00FEB6  14                 	db	20
   869  00FEB7  18                 	db	24
   870  00FEB8  7C                 	db	124
   871  00FEB9  7C                 	db	124
   872  00FEBA  08                 	db	8
   873  00FEBB  04                 	db	4
   874  00FEBC  04                 	db	4
   875  00FEBD  08                 	db	8
   876  00FEBE  48                 	db	72
   877  00FEBF  54                 	db	84
   878  00FEC0  54                 	db	84
   879  00FEC1  54                 	db	84
   880  00FEC2  20                 	db	32
   881  00FEC3  04                 	db	4
   882  00FEC4  3F                 	db	63
   883  00FEC5  44                 	db	68
   884  00FEC6  40                 	db	64
   885  00FEC7  20                 	db	32
   886  00FEC8  3C                 	db	60
   887  00FEC9  40                 	db	64
   888  00FECA  40                 	db	64
   889  00FECB  20                 	db	32
   890  00FECC  7C                 	db	124
   891  00FECD  1C                 	db	28
   892  00FECE  20                 	db	32
   893  00FECF  40                 	db	64
   894  00FED0  20                 	db	32
   895  00FED1  1C                 	db	28
   896  00FED2  3C                 	db	60
   897  00FED3  40                 	db	64
   898  00FED4  30                 	db	48
   899  00FED5  40                 	db	64
   900  00FED6  3C                 	db	60
   901  00FED7  44                 	db	68
   902  00FED8  28                 	db	40
   903  00FED9  10                 	db	16
   904  00FEDA  28                 	db	40
   905  00FEDB  44                 	db	68
   906  00FEDC  0C                 	db	12
   907  00FEDD  50                 	db	80
   908  00FEDE  50                 	db	80
   909  00FEDF  50                 	db	80
   910  00FEE0  3C                 	db	60
   911  00FEE1  44                 	db	68
   912  00FEE2  64                 	db	100
   913  00FEE3  54                 	db	84
   914  00FEE4  4C                 	db	76
   915  00FEE5  44                 	db	68
   916  00FEE6  00                 	db	0
   917  00FEE7  08                 	db	8
   918  00FEE8  36                 	db	54
   919  00FEE9  41                 	db	65
   920  00FEEA  00                 	db	0
   921  00FEEB  00                 	db	0
   922  00FEEC  00                 	db	0
   923  00FEED  7F                 	db	127
   924  00FEEE  00                 	db	0
   925  00FEEF  00                 	db	0
   926  00FEF0  00                 	db	0
   927  00FEF1  41                 	db	65
   928  00FEF2  36                 	db	54
   929  00FEF3  08                 	db	8
   930  00FEF4  00                 	db	0
   931  00FEF5  08                 	db	8
   932  00FEF6  08                 	db	8
   933  00FEF7  2A                 	db	42
   934  00FEF8  1C                 	db	28
   935  00FEF9  08                 	db	8
   936  00FEFA  08                 	db	8
   937  00FEFB  1C                 	db	28
   938  00FEFC  2A                 	db	42
   939  00FEFD  08                 	db	8
   940  00FEFE  08                 	db	8
   941  00FEFF                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FEFF                     _PortG_Property:
   944                           	opt stack 0
   945  00FEFF  FC00               	dw	64512
   946  00FF01                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF01                     _PortF_Property:
   949                           	opt stack 0
   950  00FF01  0FFF               	dw	4095
   951  00FF03                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF03                     _PortE_Property:
   954                           	opt stack 0
   955  00FF03  0000               	dw	0
   956  00FF05                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF05                     _PortD_Property:
   959                           	opt stack 0
   960  00FF05  FFFF               	dw	65535
   961  00FF07                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF07                     _PortC_Property:
   964                           	opt stack 0
   965  00FF07  FFF0               	dw	65520
   966  00FF09                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF09                     _PortB_Property:
   969                           	opt stack 0
   970  00FF09  FF00               	dw	65280
   971  00FF0B                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF0B                     _PortA_Property:
   974                           	opt stack 0
   975  00FF0B  00FF               	dw	255
   976  00FF0D                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF0D                     STR_12:
  1045  00FF0D  43                 	db	67	;'C'
  1046  00FF0E  6C                 	db	108	;'l'
  1047  00FF0F  6F                 	db	111	;'o'
  1048  00FF10  73                 	db	115	;'s'
  1049  00FF11  65                 	db	101	;'e'
  1050  00FF12  73                 	db	115	;'s'
  1051  00FF13  74                 	db	116	;'t'
  1052  00FF14  20                 	db	32
  1053  00FF15  57                 	db	87	;'W'
  1054  00FF16  61                 	db	97	;'a'
  1055  00FF17  6C                 	db	108	;'l'
  1056  00FF18  6C                 	db	108	;'l'
  1057  00FF19  3A                 	db	58	;':'
  1058  00FF1A  25                 	db	37
  1059  00FF1B  75                 	db	117	;'u'
  1060  00FF1C  0A                 	db	10
  1061  00FF1D  43                 	db	67	;'C'
  1062  00FF1E  6C                 	db	108	;'l'
  1063  00FF1F  6F                 	db	111	;'o'
  1064  00FF20  73                 	db	115	;'s'
  1065  00FF21  65                 	db	101	;'e'
  1066  00FF22  73                 	db	115	;'s'
  1067  00FF23  74                 	db	116	;'t'
  1068  00FF24  20                 	db	32
  1069  00FF25  41                 	db	65	;'A'
  1070  00FF26  6E                 	db	110	;'n'
  1071  00FF27  67                 	db	103	;'g'
  1072  00FF28  6C                 	db	108	;'l'
  1073  00FF29  65                 	db	101	;'e'
  1074  00FF2A  3A                 	db	58	;':'
  1075  00FF2B  25                 	db	37
  1076  00FF2C  64                 	db	100	;'d'
  1077  00FF2D  0A                 	db	10
  1078  00FF2E  4C                 	db	76	;'L'
  1079  00FF2F  65                 	db	101	;'e'
  1080  00FF30  66                 	db	102	;'f'
  1081  00FF31  74                 	db	116	;'t'
  1082  00FF32  20                 	db	32
  1083  00FF33  42                 	db	66	;'B'
  1084  00FF34  75                 	db	117	;'u'
  1085  00FF35  6D                 	db	109	;'m'
  1086  00FF36  70                 	db	112	;'p'
  1087  00FF37  3A                 	db	58	;':'
  1088  00FF38  25                 	db	37
  1089  00FF39  75                 	db	117	;'u'
  1090  00FF3A  0A                 	db	10
  1091  00FF3B  52                 	db	82	;'R'
  1092  00FF3C  69                 	db	105	;'i'
  1093  00FF3D  67                 	db	103	;'g'
  1094  00FF3E  68                 	db	104	;'h'
  1095  00FF3F  74                 	db	116	;'t'
  1096  00FF40  42                 	db	66	;'B'
  1097  00FF41  75                 	db	117	;'u'
  1098  00FF42  6D                 	db	109	;'m'
  1099  00FF43  70                 	db	112	;'p'
  1100  00FF44  3A                 	db	58	;':'
  1101  00FF45  25                 	db	37
  1102  00FF46  75                 	db	117	;'u'
  1103  00FF47  0A                 	db	10
  1104  00FF48  41                 	db	65	;'A'
  1105  00FF49  6E                 	db	110	;'n'
  1106  00FF4A  67                 	db	103	;'g'
  1107  00FF4B  6C                 	db	108	;'l'
  1108  00FF4C  65                 	db	101	;'e'
  1109  00FF4D  54                 	db	84	;'T'
  1110  00FF4E  6F                 	db	111	;'o'
  1111  00FF4F  54                 	db	84	;'T'
  1112  00FF50  75                 	db	117	;'u'
  1113  00FF51  72                 	db	114	;'r'
  1114  00FF52  6E                 	db	110	;'n'
  1115  00FF53  3A                 	db	58	;':'
  1116  00FF54  20                 	db	32
  1117  00FF55  25                 	db	37
  1118  00FF56  64                 	db	100	;'d'
  1119  00FF57  0A                 	db	10
  1120  00FF58  00                 	db	0
  1121  00FF59                     STR_2:
  1122  00FF59  43                 	db	67	;'C'
  1123  00FF5A  6C                 	db	108	;'l'
  1124  00FF5B  6F                 	db	111	;'o'
  1125  00FF5C  73                 	db	115	;'s'
  1126  00FF5D  65                 	db	101	;'e'
  1127  00FF5E  73                 	db	115	;'s'
  1128  00FF5F  74                 	db	116	;'t'
  1129  00FF60  20                 	db	32
  1130  00FF61  57                 	db	87	;'W'
  1131  00FF62  61                 	db	97	;'a'
  1132  00FF63  6C                 	db	108	;'l'
  1133  00FF64  6C                 	db	108	;'l'
  1134  00FF65  3A                 	db	58	;':'
  1135  00FF66  25                 	db	37
  1136  00FF67  75                 	db	117	;'u'
  1137  00FF68  0A                 	db	10
  1138  00FF69  43                 	db	67	;'C'
  1139  00FF6A  6C                 	db	108	;'l'
  1140  00FF6B  6F                 	db	111	;'o'
  1141  00FF6C  73                 	db	115	;'s'
  1142  00FF6D  65                 	db	101	;'e'
  1143  00FF6E  73                 	db	115	;'s'
  1144  00FF6F  74                 	db	116	;'t'
  1145  00FF70  20                 	db	32
  1146  00FF71  41                 	db	65	;'A'
  1147  00FF72  6E                 	db	110	;'n'
  1148  00FF73  67                 	db	103	;'g'
  1149  00FF74  6C                 	db	108	;'l'
  1150  00FF75  65                 	db	101	;'e'
  1151  00FF76  3A                 	db	58	;':'
  1152  00FF77  25                 	db	37
  1153  00FF78  64                 	db	100	;'d'
  1154  00FF79  0A                 	db	10
  1155  00FF7A  4C                 	db	76	;'L'
  1156  00FF7B  65                 	db	101	;'e'
  1157  00FF7C  66                 	db	102	;'f'
  1158  00FF7D  74                 	db	116	;'t'
  1159  00FF7E  20                 	db	32
  1160  00FF7F  42                 	db	66	;'B'
  1161  00FF80  75                 	db	117	;'u'
  1162  00FF81  6D                 	db	109	;'m'
  1163  00FF82  70                 	db	112	;'p'
  1164  00FF83  3A                 	db	58	;':'
  1165  00FF84  25                 	db	37
  1166  00FF85  75                 	db	117	;'u'
  1167  00FF86  0A                 	db	10
  1168  00FF87  52                 	db	82	;'R'
  1169  00FF88  69                 	db	105	;'i'
  1170  00FF89  67                 	db	103	;'g'
  1171  00FF8A  68                 	db	104	;'h'
  1172  00FF8B  74                 	db	116	;'t'
  1173  00FF8C  42                 	db	66	;'B'
  1174  00FF8D  75                 	db	117	;'u'
  1175  00FF8E  6D                 	db	109	;'m'
  1176  00FF8F  70                 	db	112	;'p'
  1177  00FF90  3A                 	db	58	;':'
  1178  00FF91  25                 	db	37
  1179  00FF92  75                 	db	117	;'u'
  1180  00FF93  0A                 	db	10
  1181  00FF94  00                 	db	0
  1182  00FF95                     STR_6:
  1183  00FF95  54                 	db	84	;'T'
  1184  00FF96  6F                 	db	111	;'o'
  1185  00FF97  74                 	db	116	;'t'
  1186  00FF98  61                 	db	97	;'a'
  1187  00FF99  6C                 	db	108	;'l'
  1188  00FF9A  20                 	db	32
  1189  00FF9B  44                 	db	68	;'D'
  1190  00FF9C  69                 	db	105	;'i'
  1191  00FF9D  73                 	db	115	;'s'
  1192  00FF9E  74                 	db	116	;'t'
  1193  00FF9F  61                 	db	97	;'a'
  1194  00FFA0  6E                 	db	110	;'n'
  1195  00FFA1  63                 	db	99	;'c'
  1196  00FFA2  65                 	db	101	;'e'
  1197  00FFA3  3A                 	db	58	;':'
  1198  00FFA4  25                 	db	37
  1199  00FFA5  75                 	db	117	;'u'
  1200  00FFA6  0A                 	db	10
  1201  00FFA7  4C                 	db	76	;'L'
  1202  00FFA8  65                 	db	101	;'e'
  1203  00FFA9  66                 	db	102	;'f'
  1204  00FFAA  74                 	db	116	;'t'
  1205  00FFAB  20                 	db	32
  1206  00FFAC  42                 	db	66	;'B'
  1207  00FFAD  75                 	db	117	;'u'
  1208  00FFAE  6D                 	db	109	;'m'
  1209  00FFAF  70                 	db	112	;'p'
  1210  00FFB0  3A                 	db	58	;':'
  1211  00FFB1  25                 	db	37
  1212  00FFB2  75                 	db	117	;'u'
  1213  00FFB3  0A                 	db	10
  1214  00FFB4  52                 	db	82	;'R'
  1215  00FFB5  69                 	db	105	;'i'
  1216  00FFB6  67                 	db	103	;'g'
  1217  00FFB7  68                 	db	104	;'h'
  1218  00FFB8  74                 	db	116	;'t'
  1219  00FFB9  20                 	db	32
  1220  00FFBA  42                 	db	66	;'B'
  1221  00FFBB  75                 	db	117	;'u'
  1222  00FFBC  6D                 	db	109	;'m'
  1223  00FFBD  70                 	db	112	;'p'
  1224  00FFBE  3A                 	db	58	;':'
  1225  00FFBF  25                 	db	37
  1226  00FFC0  75                 	db	117	;'u'
  1227  00FFC1  0A                 	db	10
  1228  00FFC2  00                 	db	0
  1229  00FFC3                     STR_15:
  1230  00FFC3  20                 	db	32
  1231  00FFC4  20                 	db	32
  1232  00FFC5  20                 	db	32
  1233  00FFC6  20                 	db	32
  1234  00FFC7  20                 	db	32
  1235  00FFC8  20                 	db	32
  1236  00FFC9  20                 	db	32
  1237  00FFCA  20                 	db	32
  1238  00FFCB  20                 	db	32
  1239  00FFCC  20                 	db	32
  1240  00FFCD  20                 	db	32
  1241  00FFCE  20                 	db	32
  1242  00FFCF  20                 	db	32
  1243  00FFD0  20                 	db	32
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  20                 	db	32
  1247  00FFD4  20                 	db	32
  1248  00FFD5  20                 	db	32
  1249  00FFD6  0A                 	db	10
  1250  00FFD7  00                 	db	0
  1251  00FFD8                     STR_14:
  1252  00FFD8  50                 	db	80	;'P'
  1253  00FFD9  6C                 	db	108	;'l'
  1254  00FFDA  65                 	db	101	;'e'
  1255  00FFDB  61                 	db	97	;'a'
  1256  00FFDC  73                 	db	115	;'s'
  1257  00FFDD  65                 	db	101	;'e'
  1258  00FFDE  20                 	db	32
  1259  00FFDF  73                 	db	115	;'s'
  1260  00FFE0  65                 	db	101	;'e'
  1261  00FFE1  6C                 	db	108	;'l'
  1262  00FFE2  65                 	db	101	;'e'
  1263  00FFE3  63                 	db	99	;'c'
  1264  00FFE4  74                 	db	116	;'t'
  1265  00FFE5  20                 	db	32
  1266  00FFE6  6D                 	db	109	;'m'
  1267  00FFE7  6F                 	db	111	;'o'
  1268  00FFE8  64                 	db	100	;'d'
  1269  00FFE9  65                 	db	101	;'e'
  1270  00FFEA  2E                 	db	46
  1271  00FFEB  0A                 	db	10
  1272  00FFEC  00                 	db	0
  1273  00FFED                     STR_10:
  1274  00FFED  44                 	db	68	;'D'
  1275  00FFEE  69                 	db	105	;'i'
  1276  00FFEF  73                 	db	115	;'s'
  1277  00FFF0  74                 	db	116	;'t'
  1278  00FFF1  61                 	db	97	;'a'
  1279  00FFF2  6E                 	db	110	;'n'
  1280  00FFF3  63                 	db	99	;'c'
  1281  00FFF4  65                 	db	101	;'e'
  1282  00FFF5  3A                 	db	58	;':'
  1283  00FFF6  20                 	db	32
  1284  00FFF7  25                 	db	37
  1285  00FFF8  64                 	db	100	;'d'
  1286  00FFF9  0A                 	db	10
  1287  00FFFA  00                 	db	0
  1288  00FFFB                     STR_1:
  1289  00FFFB  25                 	db	37
  1290  00FFFC  63                 	db	99	;'c'
  1291  00FFFD  00                 	db	0
  1292  0000                     
  1293                           ; #config settings
  1294  00FFFE  00                 	db	0	; dummy byte at the end
  1295  0000                     
  1296                           	psect	cinit
  1297  0145E4                     __pcinit:
  1298                           	opt stack 0
  1299  0145E4                     start_initialization:
  1300                           	opt stack 0
  1301  0145E4                     __initialization:
  1302                           	opt stack 0
  1303                           
  1304                           ; Initialize objects allocated to BANK3 (12 bytes)
  1305                           ; load TBLPTR registers with __pidataBANK3
  1306  0145E4  0E72               	movlw	low __pidataBANK3
  1307  0145E6  6EF6               	movwf	tblptrl,c
  1308  0145E8  0E67               	movlw	high __pidataBANK3
  1309  0145EA  6EF7               	movwf	tblptrh,c
  1310  0145EC  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1311  0145EE  6EF8               	movwf	tblptru,c
  1312  0145F0  EE03  F0E8         	lfsr	0,__pdataBANK3
  1313  0145F4  EE10 F00C          	lfsr	1,12
  1314  0145F8                     copy_data0:
  1315  0145F8  0009               	tblrd		*+
  1316  0145FA  CFF5 FFEE          	movff	tablat,postinc0
  1317  0145FE  50E5               	movf	postdec1,w,c
  1318  014600  50E1               	movf	fsr1l,w,c
  1319  014602  E1FA               	bnz	copy_data0
  1320                           
  1321                           ; Initialize objects allocated to BANK0 (7 bytes)
  1322                           ; load TBLPTR registers with __pidataBANK0
  1323  014604  0ED8               	movlw	low __pidataBANK0
  1324  014606  6EF6               	movwf	tblptrl,c
  1325  014608  0E67               	movlw	high __pidataBANK0
  1326  01460A  6EF7               	movwf	tblptrh,c
  1327  01460C  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1328  01460E  6EF8               	movwf	tblptru,c
  1329  014610  EE00  F0F9         	lfsr	0,__pdataBANK0
  1330  014614  EE10 F007          	lfsr	1,7
  1331  014618                     copy_data1:
  1332  014618  0009               	tblrd		*+
  1333  01461A  CFF5 FFEE          	movff	tablat,postinc0
  1334  01461E  50E5               	movf	postdec1,w,c
  1335  014620  50E1               	movf	fsr1l,w,c
  1336  014622  E1FA               	bnz	copy_data1
  1337                           
  1338                           ; Initialize objects allocated to COMRAM (10 bytes)
  1339                           ; load TBLPTR registers with __pidataCOMRAM
  1340  014624  0EA2               	movlw	low __pidataCOMRAM
  1341  014626  6EF6               	movwf	tblptrl,c
  1342  014628  0E67               	movlw	high __pidataCOMRAM
  1343  01462A  6EF7               	movwf	tblptrh,c
  1344  01462C  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1345  01462E  6EF8               	movwf	tblptru,c
  1346  014630  EE00  F047         	lfsr	0,__pdataCOMRAM
  1347  014634  EE10 F00A          	lfsr	1,10
  1348  014638                     copy_data2:
  1349  014638  0009               	tblrd		*+
  1350  01463A  CFF5 FFEE          	movff	tablat,postinc0
  1351  01463E  50E5               	movf	postdec1,w,c
  1352  014640  50E1               	movf	fsr1l,w,c
  1353  014642  E1FA               	bnz	copy_data2
  1354                           
  1355                           ; Clear objects allocated to BIGRAM (300 bytes)
  1356  014644  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1357  014648  EE11 F02C          	lfsr	1,300
  1358  01464C                     clear_0:
  1359  01464C  6AEE               	clrf	postinc0,c
  1360  01464E  50E5               	movf	postdec1,w,c
  1361  014650  50E1               	movf	fsr1l,w,c
  1362  014652  E1FC               	bnz	clear_0
  1363  014654  50E2               	movf	fsr1h,w,c
  1364  014656  E1FA               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to BANK4 (170 bytes)
  1367  014658  EE04  F000         	lfsr	0,__pbssBANK4
  1368  01465C  0EAA               	movlw	170
  1369  01465E                     clear_1:
  1370  01465E  6AEE               	clrf	postinc0,c
  1371  014660  06E8               	decf	wreg,f,c
  1372  014662  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Clear objects allocated to BANK3 (232 bytes)
  1375  014664  EE03  F000         	lfsr	0,__pbssBANK3
  1376  014668  0EE8               	movlw	232
  1377  01466A                     clear_2:
  1378  01466A  6AEE               	clrf	postinc0,c
  1379  01466C  06E8               	decf	wreg,f,c
  1380  01466E  E1FD               	bnz	clear_2
  1381                           
  1382                           ; Clear objects allocated to BANK0 (90 bytes)
  1383  014670  EE00  F060         	lfsr	0,__pbssBANK0
  1384  014674  0E5A               	movlw	90
  1385  014676                     clear_3:
  1386  014676  6AEE               	clrf	postinc0,c
  1387  014678  06E8               	decf	wreg,f,c
  1388  01467A  E1FD               	bnz	clear_3
  1389                           
  1390                           ; Clear objects allocated to COMRAM (30 bytes)
  1391  01467C  EE00  F029         	lfsr	0,__pbssCOMRAM
  1392  014680  0E1E               	movlw	30
  1393  014682                     clear_4:
  1394  014682  6AEE               	clrf	postinc0,c
  1395  014684  06E8               	decf	wreg,f,c
  1396  014686  E1FD               	bnz	clear_4
  1397  014688                     end_of_initialization:
  1398                           	opt stack 0
  1399  014688                     __end_of__initialization:
  1400                           	opt stack 0
  1401  014688  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1402  01468A  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1403  01468C  0100               	movlb	0
  1404  01468E  EF7D  F09D         	goto	_main	;jump to C main() function
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssCOMRAM
  1416  000029                     __pbssCOMRAM:
  1417                           	opt stack 0
  1418  000029                     _COUNTER:
  1419                           	opt stack 0
  1420  000029                     	ds	2
  1421  00002B                     HMI_GRender@a:
  1422                           	opt stack 0
  1423  00002B                     	ds	2
  1424  00002D                     SPI_Send9@dat:
  1425                           	opt stack 0
  1426  00002D                     	ds	2
  1427  00002F                     _iRDropCaster:
  1428                           	opt stack 0
  1429  00002F                     	ds	1
  1430  000030                     _iRVirtualWall:
  1431                           	opt stack 0
  1432  000030                     	ds	1
  1433  000031                     _iRCliffR:
  1434                           	opt stack 0
  1435  000031                     	ds	1
  1436  000032                     _iRCliffFR:
  1437                           	opt stack 0
  1438  000032                     	ds	1
  1439  000033                     _iRCliffFL:
  1440                           	opt stack 0
  1441  000033                     	ds	1
  1442  000034                     _iRCliffL:
  1443                           	opt stack 0
  1444  000034                     	ds	1
  1445  000035                     _iRWall:
  1446                           	opt stack 0
  1447  000035                     	ds	1
  1448  000036                     _iRBumpDrop:
  1449                           	opt stack 0
  1450  000036                     	ds	1
  1451  000037                     _iRScriptIndex:
  1452                           	opt stack 0
  1453  000037                     	ds	1
  1454  000038                     _u:
  1455                           	opt stack 0
  1456  000038                     	ds	1
  1457  000039                     _j:
  1458                           	opt stack 0
  1459  000039                     	ds	1
  1460  00003A                     _i:
  1461                           	opt stack 0
  1462  00003A                     	ds	1
  1463  00003B                     rand@screw:
  1464                           	opt stack 0
  1465  00003B                     	ds	1
  1466  00003C                     _ADC_Initialised:
  1467                           	opt stack 0
  1468  00003C                     	ds	1
  1469  00003D                     OutSeg@a:
  1470                           	opt stack 0
  1471  00003D                     	ds	1
  1472  00003E                     OutSeg@segset:
  1473                           	opt stack 0
  1474  00003E                     	ds	1
  1475  00003F                     OutSeg@cur:
  1476                           	opt stack 0
  1477  00003F                     	ds	1
  1478  000040                     _I2C1T:
  1479                           	opt stack 0
  1480  000040                     	ds	7
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  000047                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  000047                     _gCursor:
  1495                           	opt stack 0
  1496  000047                     	ds	4
  1497  00004B                     _Bus_State:
  1498                           	opt stack 0
  1499  00004B                     	ds	1
  1500  00004C                     	ds	1
  1501  00004D                     	ds	1
  1502  00004E                     	ds	1
  1503  00004F                     _l:
  1504                           	opt stack 0
  1505  00004F                     	ds	1
  1506  000050                     _w:
  1507                           	opt stack 0
  1508  000050                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK0
  1520  000060                     __pbssBANK0:
  1521                           	opt stack 0
  1522  000060                     _gISR:
  1523                           	opt stack 0
  1524  000060                     	ds	3
  1525  000063                     _lQueue:
  1526                           	opt stack 0
  1527  000063                     	ds	3
  1528  000066                     _lStepFunction:
  1529                           	opt stack 0
  1530  000066                     	ds	3
  1531  000069                     _dist:
  1532                           	opt stack 0
  1533  000069                     	ds	2
  1534  00006B                     _angleToClosestWall:
  1535                           	opt stack 0
  1536  00006B                     	ds	2
  1537  00006D                     _IRValue:
  1538                           	opt stack 0
  1539  00006D                     	ds	2
  1540  00006F                     _Stepstomin:
  1541                           	opt stack 0
  1542  00006F                     	ds	2
  1543  000071                     _StepRotate:
  1544                           	opt stack 0
  1545  000071                     	ds	2
  1546  000073                     _angleTotal:
  1547                           	opt stack 0
  1548  000073                     	ds	2
  1549  000075                     _distanceTotal:
  1550                           	opt stack 0
  1551  000075                     	ds	2
  1552  000077                     _iRAngle:
  1553                           	opt stack 0
  1554  000077                     	ds	2
  1555  000079                     _iRDistance:
  1556                           	opt stack 0
  1557  000079                     	ds	2
  1558  00007B                     _pShiftVal:
  1559                           	opt stack 0
  1560  00007B                     	ds	2
  1561  00007D                     _val:
  1562                           	opt stack 0
  1563  00007D                     	ds	2
  1564  00007F                     _lMotor:
  1565                           	opt stack 0
  1566  00007F                     	ds	2
  1567  000081                     _lCurrent:
  1568                           	opt stack 0
  1569  000081                     	ds	2
  1570  000083                     _gBackcolour:
  1571                           	opt stack 0
  1572  000083                     	ds	2
  1573  000085                     _iRDropLeft:
  1574                           	opt stack 0
  1575  000085                     	ds	1
  1576  000086                     _iRDropRight:
  1577                           	opt stack 0
  1578  000086                     	ds	1
  1579  000087                     _iRBumpLeft:
  1580                           	opt stack 0
  1581  000087                     	ds	1
  1582  000088                     _iRBumpRight:
  1583                           	opt stack 0
  1584  000088                     	ds	1
  1585  000089                     Event_TestButton@j:
  1586                           	opt stack 0
  1587  000089                     	ds	1
  1588  00008A                     Timer2_Init@PRE:
  1589                           	opt stack 0
  1590  00008A                     	ds	1
  1591  00008B                     Timer2_Init@INDEX:
  1592                           	opt stack 0
  1593  00008B                     	ds	1
  1594  00008C                     Timer0_Init@PRE:
  1595                           	opt stack 0
  1596  00008C                     	ds	1
  1597  00008D                     _INDEX:
  1598                           	opt stack 0
  1599  00008D                     	ds	1
  1600  00008E                     _lBufferY:
  1601                           	opt stack 0
  1602  00008E                     	ds	1
  1603  00008F                     _lBufferX:
  1604                           	opt stack 0
  1605  00008F                     	ds	1
  1606  000090                     _clearall:
  1607                           	opt stack 0
  1608  000090                     	ds	1
  1609  000091                     _PortE:
  1610                           	opt stack 0
  1611  000091                     	ds	10
  1612  00009B                     _PortD:
  1613                           	opt stack 0
  1614  00009B                     	ds	10
  1615  0000A5                     _PortC:
  1616                           	opt stack 0
  1617  0000A5                     	ds	10
  1618  0000AF                     _Stepper:
  1619                           	opt stack 0
  1620  0000AF                     	ds	6
  1621  0000B5                     _ADC_AN0:
  1622                           	opt stack 0
  1623  0000B5                     	ds	5
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	dataBANK0
  1635  0000F9                     __pdataBANK0:
  1636                           	opt stack 0
  1637  0000F9                     _TimerX:
  1638                           	opt stack 0
  1639  0000F9                     	ds	2
  1640  0000FB                     _MinDist:
  1641                           	opt stack 0
  1642  0000FB                     	ds	2
  1643  0000FD                     _gForecolour:
  1644                           	opt stack 0
  1645  0000FD                     	ds	2
  1646  0000FF                     _change:
  1647                           	opt stack 0
  1648  0000FF                     	ds	1
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1h	equ	0xFE2
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	bssBANK3
  1660  000300                     __pbssBANK3:
  1661                           	opt stack 0
  1662  000300                     _lCBuffer:
  1663                           	opt stack 0
  1664  000300                     	ds	30
  1665  00031E                     _iRAngleSS:
  1666                           	opt stack 0
  1667  00031E                     	ds	4
  1668  000322                     _iRDistanceSS:
  1669                           	opt stack 0
  1670  000322                     	ds	4
  1671  000326                     Timer2_Init@DIV:
  1672                           	opt stack 0
  1673  000326                     	ds	4
  1674  00032A                     Timer0_Init@DIV:
  1675                           	opt stack 0
  1676  00032A                     	ds	4
  1677  00032E                     _I2C2_More:
  1678                           	opt stack 0
  1679  00032E                     	ds	3
  1680  000331                     _I2C1_More:
  1681                           	opt stack 0
  1682  000331                     	ds	3
  1683  000334                     _I2C2_Done:
  1684                           	opt stack 0
  1685  000334                     	ds	3
  1686  000337                     _I2C1_Done:
  1687                           	opt stack 0
  1688  000337                     	ds	3
  1689  00033A                     _mode:
  1690                           	opt stack 0
  1691  00033A                     	ds	2
  1692  00033C                     _dip:
  1693                           	opt stack 0
  1694  00033C                     	ds	2
  1695  00033E                     _HMIBoard:
  1696                           	opt stack 0
  1697  00033E                     	ds	58
  1698  000378                     _SPI1:
  1699                           	opt stack 0
  1700  000378                     	ds	11
  1701  000383                     _SPI2:
  1702                           	opt stack 0
  1703  000383                     	ds	11
  1704  00038E                     _DIPSwitch:
  1705                           	opt stack 0
  1706  00038E                     	ds	10
  1707  000398                     _TestButton:
  1708                           	opt stack 0
  1709  000398                     	ds	10
  1710  0003A2                     _PortG:
  1711                           	opt stack 0
  1712  0003A2                     	ds	10
  1713  0003AC                     _PortB:
  1714                           	opt stack 0
  1715  0003AC                     	ds	10
  1716  0003B6                     _PortA:
  1717                           	opt stack 0
  1718  0003B6                     	ds	10
  1719  0003C0                     _PortF:
  1720                           	opt stack 0
  1721  0003C0                     	ds	10
  1722  0003CA                     _I2C2T:
  1723                           	opt stack 0
  1724  0003CA                     	ds	7
  1725  0003D1                     _ADC_AN3:
  1726                           	opt stack 0
  1727  0003D1                     	ds	5
  1728  0003D6                     _ADC_AN2:
  1729                           	opt stack 0
  1730  0003D6                     	ds	5
  1731  0003DB                     _ADC_AN1:
  1732                           	opt stack 0
  1733  0003DB                     	ds	5
  1734  0003E0                     LCD_DrawRectangle@p4:
  1735                           	opt stack 0
  1736  0003E0                     	ds	4
  1737  0003E4                     LCD_DrawRectangle@p2:
  1738                           	opt stack 0
  1739  0003E4                     	ds	4
  1740                           tblptru	equ	0xFF8
  1741                           tblptrh	equ	0xFF7
  1742                           tblptrl	equ	0xFF6
  1743                           tablat	equ	0xFF5
  1744                           postinc0	equ	0xFEE
  1745                           wreg	equ	0xFE8
  1746                           postdec1	equ	0xFE5
  1747                           fsr1h	equ	0xFE2
  1748                           fsr1l	equ	0xFE1
  1749                           
  1750                           	psect	dataBANK3
  1751  0003E8                     __pdataBANK3:
  1752                           	opt stack 0
  1753  0003E8                     Console_Render@F6956:
  1754                           	opt stack 0
  1755  0003E8                     	ds	4
  1756  0003EC                     _gLineSize:
  1757                           	opt stack 0
  1758  0003EC                     	ds	4
  1759  0003F0                     _gCharSize:
  1760                           	opt stack 0
  1761  0003F0                     	ds	4
  1762                           tblptru	equ	0xFF8
  1763                           tblptrh	equ	0xFF7
  1764                           tblptrl	equ	0xFF6
  1765                           tablat	equ	0xFF5
  1766                           postinc0	equ	0xFEE
  1767                           wreg	equ	0xFE8
  1768                           postdec1	equ	0xFE5
  1769                           fsr1h	equ	0xFE2
  1770                           fsr1l	equ	0xFE1
  1771                           
  1772                           	psect	bssBANK4
  1773  000400                     __pbssBANK4:
  1774                           	opt stack 0
  1775  000400                     _iRScriptStack:
  1776                           	opt stack 0
  1777  000400                     	ds	100
  1778  000464                     Console_MakeField@Fill:
  1779                           	opt stack 0
  1780  000464                     	ds	70
  1781                           tblptru	equ	0xFF8
  1782                           tblptrh	equ	0xFF7
  1783                           tblptrl	equ	0xFF6
  1784                           tablat	equ	0xFF5
  1785                           postinc0	equ	0xFEE
  1786                           wreg	equ	0xFE8
  1787                           postdec1	equ	0xFE5
  1788                           fsr1h	equ	0xFE2
  1789                           fsr1l	equ	0xFE1
  1790                           
  1791                           	psect	bssBIGRAM
  1792  0004AA                     __pbssBIGRAM:
  1793                           	opt stack 0
  1794  0004AA                     _lBuffer:
  1795                           	opt stack 0
  1796  0004AA                     	ds	300
  1797                           tblptru	equ	0xFF8
  1798                           tblptrh	equ	0xFF7
  1799                           tblptrl	equ	0xFF6
  1800                           tablat	equ	0xFF5
  1801                           postinc0	equ	0xFEE
  1802                           wreg	equ	0xFE8
  1803                           postdec1	equ	0xFE5
  1804                           fsr1h	equ	0xFE2
  1805                           fsr1l	equ	0xFE1
  1806                           
  1807                           	psect	cstackBANK3
  1808  0003F4                     __pcstackBANK3:
  1809                           	opt stack 0
  1810  0003F4                     ??_findClosestWall:
  1811  0003F4                     ??_mode1:
  1812                           
  1813                           ; 1 bytes @ 0x0
  1814  0003F4                     	ds	2
  1815  0003F6                     mode1@moveto:
  1816                           	opt stack 0
  1817  0003F6                     _findClosestWall$15600:
  1818                           	opt stack 0
  1819                           
  1820                           ; 4 bytes @ 0x2
  1821  0003F6                     	ds	2
  1822  0003F8                     _mode1$15601:
  1823                           	opt stack 0
  1824                           
  1825                           ; 4 bytes @ 0x4
  1826  0003F8                     	ds	4
  1827  0003FC                     ??_main:
  1828                           
  1829                           ; 1 bytes @ 0x8
  1830  0003FC                     	ds	2
  1831                           tblptru	equ	0xFF8
  1832                           tblptrh	equ	0xFF7
  1833                           tblptrl	equ	0xFF6
  1834                           tablat	equ	0xFF5
  1835                           postinc0	equ	0xFEE
  1836                           wreg	equ	0xFE8
  1837                           postdec1	equ	0xFE5
  1838                           fsr1h	equ	0xFE2
  1839                           fsr1l	equ	0xFE1
  1840                           
  1841                           	psect	cstackBANK2
  1842  000200                     __pcstackBANK2:
  1843                           	opt stack 0
  1844  000200                     irobot_query_and_update@TXArray:
  1845                           	opt stack 0
  1846                           
  1847                           ; 256 bytes @ 0x0
  1848  000200                     	ds	256
  1849                           tblptru	equ	0xFF8
  1850                           tblptrh	equ	0xFF7
  1851                           tblptrl	equ	0xFF6
  1852                           tablat	equ	0xFF5
  1853                           postinc0	equ	0xFEE
  1854                           wreg	equ	0xFE8
  1855                           postdec1	equ	0xFE5
  1856                           fsr1h	equ	0xFE2
  1857                           fsr1l	equ	0xFE1
  1858                           
  1859                           	psect	cstackBANK1
  1860  000100                     __pcstackBANK1:
  1861                           	opt stack 0
  1862  000100                     ??___fltol:
  1863  000100                     Port_SetType@Output:
  1864                           	opt stack 0
  1865  000100                     Button_Init@pInput:
  1866                           	opt stack 0
  1867  000100                     irobot_query_and_update@RXArray:
  1868                           	opt stack 0
  1869                           
  1870                           ; 256 bytes @ 0x0
  1871  000100                     	ds	1
  1872  000101                     Port_Init@pInput:
  1873                           	opt stack 0
  1874                           
  1875                           ; 2 bytes @ 0x1
  1876  000101                     	ds	1
  1877  000102                     Button_Init@pThreshold:
  1878                           	opt stack 0
  1879                           
  1880                           ; 2 bytes @ 0x2
  1881  000102                     	ds	1
  1882  000103                     Port_Init@pPort:
  1883                           	opt stack 0
  1884                           
  1885                           ; 1 bytes @ 0x3
  1886  000103                     	ds	1
  1887  000104                     ??_Port_Init:
  1888  000104                     Button_Init@pInitIO:
  1889                           	opt stack 0
  1890                           
  1891                           ; 3 bytes @ 0x4
  1892  000104                     	ds	2
  1893  000106                     Port_Init@i:
  1894                           	opt stack 0
  1895                           
  1896                           ; 1 bytes @ 0x6
  1897  000106                     	ds	1
  1898  000107                     Button_Init@pGetState:
  1899                           	opt stack 0
  1900                           
  1901                           ; 3 bytes @ 0x7
  1902  000107                     	ds	3
  1903  00010A                     Button_Init@pFunction:
  1904                           	opt stack 0
  1905                           
  1906                           ; 3 bytes @ 0xA
  1907  00010A                     	ds	246
  1908                           tblptru	equ	0xFF8
  1909                           tblptrh	equ	0xFF7
  1910                           tblptrl	equ	0xFF6
  1911                           tablat	equ	0xFF5
  1912                           postinc0	equ	0xFEE
  1913                           wreg	equ	0xFE8
  1914                           postdec1	equ	0xFE5
  1915                           fsr1h	equ	0xFE2
  1916                           fsr1l	equ	0xFE1
  1917                           
  1918                           	psect	cstackBANK0
  1919  0000BA                     __pcstackBANK0:
  1920                           	opt stack 0
  1921  0000BA                     ??_Console_ClearCursor:
  1922  0000BA                     ??_ADC_SetChannel:
  1923  0000BA                     ??_ADC_ConversionTime:
  1924  0000BA                     ??_ADC_SetupIO:
  1925  0000BA                     ??_sort_iRBumpDrop:
  1926  0000BA                     ?_load_iRScriptStack:
  1927                           	opt stack 0
  1928  0000BA                     ??_Console_Init:
  1929  0000BA                     ??_Console_NewLine:
  1930  0000BA                     ??_Console_FormFeed:
  1931  0000BA                     ??_HMI_SetButton:
  1932  0000BA                     ?_GetPortProperties:
  1933                           	opt stack 0
  1934  0000BA                     ?_GetPortPORT:
  1935                           	opt stack 0
  1936  0000BA                     ?_GetPortTRIS:
  1937                           	opt stack 0
  1938  0000BA                     ?_twos_complement_of:
  1939                           	opt stack 0
  1940  0000BA                     ?___wmul:
  1941                           	opt stack 0
  1942  0000BA                     ?___awdiv:
  1943                           	opt stack 0
  1944  0000BA                     ?___lwdiv:
  1945                           	opt stack 0
  1946  0000BA                     ?___fldiv:
  1947                           	opt stack 0
  1948  0000BA                     ?___lldiv:
  1949                           	opt stack 0
  1950  0000BA                     ?___xxtofl:
  1951                           	opt stack 0
  1952  0000BA                     Mode_Set@pMode:
  1953                           	opt stack 0
  1954  0000BA                     ToSegment@pCHR:
  1955                           	opt stack 0
  1956  0000BA                     HMI_SetBar@pValue:
  1957                           	opt stack 0
  1958  0000BA                     ADC_ClockDivision@pDivide:
  1959                           	opt stack 0
  1960  0000BA                     get_packet_size@packetID:
  1961                           	opt stack 0
  1962  0000BA                     eusart_putch@eusartSendChar:
  1963                           	opt stack 0
  1964  0000BA                     Port_GetPin@pInput:
  1965                           	opt stack 0
  1966  0000BA                     Port_GetQuad@pInput:
  1967                           	opt stack 0
  1968  0000BA                     SPI_DisableISR@pInput:
  1969                           	opt stack 0
  1970  0000BA                     SPI_DCS@pInput:
  1971                           	opt stack 0
  1972  0000BA                     SPI_Send@pInput:
  1973                           	opt stack 0
  1974  0000BA                     Byte_SetBit@pInput:
  1975                           	opt stack 0
  1976  0000BA                     Byte_GetBit@pInput:
  1977                           	opt stack 0
  1978  0000BA                     Byte_SetZone@pInput:
  1979                           	opt stack 0
  1980  0000BA                     Byte_GetZone@pInput:
  1981                           	opt stack 0
  1982  0000BA                     Byte_SetByte@pInput:
  1983                           	opt stack 0
  1984  0000BA                     delay_ms@ms:
  1985                           	opt stack 0
  1986  0000BA                     delay_us@us:
  1987                           	opt stack 0
  1988  0000BA                     reverse@input:
  1989                           	opt stack 0
  1990  0000BA                     twos_complement_of@complementValue:
  1991                           	opt stack 0
  1992  0000BA                     ___wmul@multiplier:
  1993                           	opt stack 0
  1994  0000BA                     ___awdiv@dividend:
  1995                           	opt stack 0
  1996  0000BA                     ___lwdiv@dividend:
  1997                           	opt stack 0
  1998  0000BA                     MXK_Queue@pCallback:
  1999                           	opt stack 0
  2000  0000BA                     Timer0_Start@pFunction:
  2001                           	opt stack 0
  2002  0000BA                     ___lldiv@dividend:
  2003                           	opt stack 0
  2004  0000BA                     ___fldiv@b:
  2005                           	opt stack 0
  2006  0000BA                     ___xxtofl@val:
  2007                           	opt stack 0
  2008                           
  2009                           ; 4 bytes @ 0x0
  2010  0000BA                     	ds	1
  2011  0000BB                     ADC_SetChannel@pChannel:
  2012                           	opt stack 0
  2013  0000BB                     ADC_ClockDivision@reg:
  2014                           	opt stack 0
  2015  0000BB                     ADC_ConversionTime@pCount:
  2016                           	opt stack 0
  2017  0000BB                     rx_assign@packetIDValue:
  2018                           	opt stack 0
  2019  0000BB                     irobot_song_play@songNumber:
  2020                           	opt stack 0
  2021  0000BB                     HMI_SetSegments@pString:
  2022                           	opt stack 0
  2023                           
  2024                           ; 2 bytes @ 0x1
  2025  0000BB                     	ds	1
  2026  0000BC                     GetPortProperties@pInput:
  2027                           	opt stack 0
  2028  0000BC                     GetPortPORT@pInput:
  2029                           	opt stack 0
  2030  0000BC                     GetPortTRIS@pInput:
  2031                           	opt stack 0
  2032  0000BC                     Port_GetPin@pPin:
  2033                           	opt stack 0
  2034  0000BC                     Port_GetQuad@pQuad:
  2035                           	opt stack 0
  2036  0000BC                     SPI_Send@pData:
  2037                           	opt stack 0
  2038  0000BC                     Byte_SetBit@pBit:
  2039                           	opt stack 0
  2040  0000BC                     Byte_GetBit@pBit:
  2041                           	opt stack 0
  2042  0000BC                     Byte_SetZone@pMax:
  2043                           	opt stack 0
  2044  0000BC                     Byte_GetZone@pMax:
  2045                           	opt stack 0
  2046  0000BC                     Byte_SetByte@pValue:
  2047                           	opt stack 0
  2048  0000BC                     Console_Init@x:
  2049                           	opt stack 0
  2050  0000BC                     Console_FormFeed@x:
  2051                           	opt stack 0
  2052  0000BC                     ADC_SetupIO@pChannel:
  2053                           	opt stack 0
  2054  0000BC                     ADC_ClockDivision@unfound:
  2055                           	opt stack 0
  2056  0000BC                     rx_assign@byteNumber:
  2057                           	opt stack 0
  2058  0000BC                     reverse@length:
  2059                           	opt stack 0
  2060  0000BC                     ADC_Start@pInput:
  2061                           	opt stack 0
  2062  0000BC                     ___wmul@multiplicand:
  2063                           	opt stack 0
  2064  0000BC                     ___awdiv@divisor:
  2065                           	opt stack 0
  2066  0000BC                     ___lwdiv@divisor:
  2067                           	opt stack 0
  2068  0000BC                     delay_ms@u:
  2069                           	opt stack 0
  2070  0000BC                     delay_us@u:
  2071                           	opt stack 0
  2072  0000BC                     HMI_SetButton@reindex:
  2073                           	opt stack 0
  2074                           
  2075                           ; 4 bytes @ 0x2
  2076  0000BC                     	ds	1
  2077  0000BD                     ??_Port_GetPin:
  2078  0000BD                     ??_Port_GetQuad:
  2079  0000BD                     ??_Byte_GetBit:
  2080  0000BD                     ??_rx_assign:
  2081  0000BD                     LCD_Write@mode:
  2082                           	opt stack 0
  2083  0000BD                     Byte_SetBit@pValue:
  2084                           	opt stack 0
  2085  0000BD                     Byte_SetZone@pChunk:
  2086                           	opt stack 0
  2087  0000BD                     Byte_GetZone@pChunk:
  2088                           	opt stack 0
  2089  0000BD                     Console_Init@y:
  2090                           	opt stack 0
  2091  0000BD                     Console_FormFeed@y:
  2092                           	opt stack 0
  2093  0000BD                     OutSeg@pSegment:
  2094                           	opt stack 0
  2095  0000BD                     ADC_SetupIO@MASK:
  2096                           	opt stack 0
  2097  0000BD                     Motor_Move@pMotor:
  2098                           	opt stack 0
  2099                           
  2100                           ; 2 bytes @ 0x3
  2101  0000BD                     	ds	1
  2102  0000BE                     ??_Byte_SetBit:
  2103  0000BE                     ??_Console_IncrementCursor:
  2104  0000BE                     ??_OutSeg:
  2105  0000BE                     ??_ADC_Start:
  2106  0000BE                     ??___xxtofl:
  2107  0000BE                     LCD_Write@value:
  2108                           	opt stack 0
  2109  0000BE                     Byte_GetBit@Output:
  2110                           	opt stack 0
  2111  0000BE                     Byte_SetZone@pChunkSize:
  2112                           	opt stack 0
  2113  0000BE                     Byte_GetZone@pChunkSize:
  2114                           	opt stack 0
  2115  0000BE                     reverse@tempVar:
  2116                           	opt stack 0
  2117  0000BE                     ___awdiv@counter:
  2118                           	opt stack 0
  2119  0000BE                     ___lwdiv@counter:
  2120                           	opt stack 0
  2121  0000BE                     HMI_SetSegments@in:
  2122                           	opt stack 0
  2123  0000BE                     ADC_Init@pInput:
  2124                           	opt stack 0
  2125  0000BE                     ___wmul@product:
  2126                           	opt stack 0
  2127  0000BE                     ___lldiv@divisor:
  2128                           	opt stack 0
  2129  0000BE                     ___fldiv@a:
  2130                           	opt stack 0
  2131                           
  2132                           ; 4 bytes @ 0x4
  2133  0000BE                     	ds	1
  2134  0000BF                     ??_Byte_GetZone:
  2135  0000BF                     ?_Console_MakeField:
  2136                           	opt stack 0
  2137  0000BF                     Set_Addr_Window@ys:
  2138                           	opt stack 0
  2139  0000BF                     Set_Rotation@m:
  2140                           	opt stack 0
  2141  0000BF                     Port_GetPin@Output:
  2142                           	opt stack 0
  2143  0000BF                     Port_GetQuad@Output:
  2144                           	opt stack 0
  2145  0000BF                     Byte_SetZone@pValue:
  2146                           	opt stack 0
  2147  0000BF                     rx_assign@packetID:
  2148                           	opt stack 0
  2149  0000BF                     ___awdiv@sign:
  2150                           	opt stack 0
  2151  0000BF                     LCD_Word_Write@value:
  2152                           	opt stack 0
  2153  0000BF                     reverse@iterator:
  2154                           	opt stack 0
  2155  0000BF                     Motor_Move@pDelta:
  2156                           	opt stack 0
  2157  0000BF                     ___lwdiv@quotient:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x5
  2161  0000BF                     	ds	1
  2162  0000C0                     ?_irobot_query_and_update:
  2163                           	opt stack 0
  2164  0000C0                     ??_Byte_SetZone:
  2165  0000C0                     Set_Addr_Window@xe:
  2166                           	opt stack 0
  2167  0000C0                     Set_Rotation@rotation:
  2168                           	opt stack 0
  2169  0000C0                     Byte_GetZone@MASK:
  2170                           	opt stack 0
  2171  0000C0                     OutSeg@pInput:
  2172                           	opt stack 0
  2173  0000C0                     HMI_SetButton@pValue:
  2174                           	opt stack 0
  2175  0000C0                     ADC_Init@pChannel:
  2176                           	opt stack 0
  2177  0000C0                     MXK_BlockSwitchTo@CUR:
  2178                           	opt stack 0
  2179  0000C0                     MXK_SwitchTo@CUR:
  2180                           	opt stack 0
  2181  0000C0                     ___awdiv@quotient:
  2182                           	opt stack 0
  2183                           
  2184                           ; 2 bytes @ 0x6
  2185  0000C0                     	ds	1
  2186  0000C1                     ??_Console_MakeField:
  2187  0000C1                     ?___lwmod:
  2188                           	opt stack 0
  2189  0000C1                     Set_Addr_Window@ye:
  2190                           	opt stack 0
  2191  0000C1                     Byte_GetZone@Offset:
  2192                           	opt stack 0
  2193  0000C1                     OutSeg@out:
  2194                           	opt stack 0
  2195  0000C1                     HMI_SetButton@v:
  2196                           	opt stack 0
  2197  0000C1                     MXK_BlockSwitchTo@pModule:
  2198                           	opt stack 0
  2199  0000C1                     MXK_SwitchTo@pModule:
  2200                           	opt stack 0
  2201  0000C1                     ___lwmod@dividend:
  2202                           	opt stack 0
  2203                           
  2204                           ; 2 bytes @ 0x7
  2205  0000C1                     	ds	1
  2206  0000C2                     ??___fldiv:
  2207  0000C2                     ??_Console_Tab:
  2208  0000C2                     Set_Addr_Window@xs:
  2209                           	opt stack 0
  2210  0000C2                     Byte_GetZone@Output:
  2211                           	opt stack 0
  2212  0000C2                     ___xxtofl@sign:
  2213                           	opt stack 0
  2214  0000C2                     HMI_Render@a:
  2215                           	opt stack 0
  2216  0000C2                     ___lldiv@quotient:
  2217                           	opt stack 0
  2218                           
  2219                           ; 4 bytes @ 0x8
  2220  0000C2                     	ds	1
  2221  0000C3                     Byte_SetZone@Offset:
  2222                           	opt stack 0
  2223  0000C3                     ___xxtofl@exp:
  2224                           	opt stack 0
  2225  0000C3                     LCD_Fill@pColour:
  2226                           	opt stack 0
  2227  0000C3                     LCD_FillRectangle@pColour:
  2228                           	opt stack 0
  2229  0000C3                     Byte_GetPair@pInput:
  2230                           	opt stack 0
  2231  0000C3                     Console_MakeField@Index:
  2232                           	opt stack 0
  2233  0000C3                     ___lwmod@divisor:
  2234                           	opt stack 0
  2235                           
  2236                           ; 2 bytes @ 0x9
  2237  0000C3                     	ds	1
  2238  0000C4                     ??_load_iRScriptStack:
  2239  0000C4                     Byte_SetZone@MASK:
  2240                           	opt stack 0
  2241  0000C4                     ___xxtofl@arg:
  2242                           	opt stack 0
  2243                           
  2244                           ; 4 bytes @ 0xA
  2245  0000C4                     	ds	1
  2246  0000C5                     LCD_Fill@i:
  2247                           	opt stack 0
  2248  0000C5                     Byte_GetPair@pPair:
  2249                           	opt stack 0
  2250  0000C5                     Console_MakeField@pInput:
  2251                           	opt stack 0
  2252  0000C5                     ___lwmod@counter:
  2253                           	opt stack 0
  2254  0000C5                     Byte_SetPair@pInput:
  2255                           	opt stack 0
  2256  0000C5                     Byte_SetQuad@pInput:
  2257                           	opt stack 0
  2258  0000C5                     LCD_FillRectangle@pPoint:
  2259                           	opt stack 0
  2260                           
  2261                           ; 4 bytes @ 0xB
  2262  0000C5                     	ds	1
  2263  0000C6                     LCD_Fill@j:
  2264                           	opt stack 0
  2265  0000C6                     ___lldiv@counter:
  2266                           	opt stack 0
  2267  0000C6                     ___fldiv@sign:
  2268                           	opt stack 0
  2269  0000C6                     Word_GetPair@pInput:
  2270                           	opt stack 0
  2271  0000C6                     itos@input:
  2272                           	opt stack 0
  2273  0000C6                     Console_MakeField@Column:
  2274                           	opt stack 0
  2275  0000C6                     load_iRScriptStack@loadByte:
  2276                           	opt stack 0
  2277                           
  2278                           ; 2 bytes @ 0xC
  2279  0000C6                     	ds	1
  2280  0000C7                     Byte_SetPair@pPair:
  2281                           	opt stack 0
  2282  0000C7                     Byte_SetQuad@pQuad:
  2283                           	opt stack 0
  2284  0000C7                     Console_Tab@t:
  2285                           	opt stack 0
  2286  0000C7                     Timer0_Init@pFrequency:
  2287                           	opt stack 0
  2288  0000C7                     Timer2_Init@pFrequency:
  2289                           	opt stack 0
  2290  0000C7                     ___fldiv@rem:
  2291                           	opt stack 0
  2292                           
  2293                           ; 4 bytes @ 0xD
  2294  0000C7                     	ds	1
  2295  0000C8                     ?___flmul:
  2296                           	opt stack 0
  2297  0000C8                     Byte_SetPair@pValue:
  2298                           	opt stack 0
  2299  0000C8                     Byte_SetQuad@pValue:
  2300                           	opt stack 0
  2301  0000C8                     Word_GetPair@pPair:
  2302                           	opt stack 0
  2303  0000C8                     Console_Tab@i:
  2304                           	opt stack 0
  2305  0000C8                     load_iRScriptStack@bytesToLoad:
  2306                           	opt stack 0
  2307  0000C8                     itos@destination:
  2308                           	opt stack 0
  2309  0000C8                     _Console_MakeField$10974:
  2310                           	opt stack 0
  2311  0000C8                     ___flmul@b:
  2312                           	opt stack 0
  2313                           
  2314                           ; 4 bytes @ 0xE
  2315  0000C8                     	ds	1
  2316  0000C9                     Console_Tab@c:
  2317                           	opt stack 0
  2318  0000C9                     load_iRScriptStack@i:
  2319                           	opt stack 0
  2320  0000C9                     Port_SetPin@pInput:
  2321                           	opt stack 0
  2322  0000C9                     Port_Set@pInput:
  2323                           	opt stack 0
  2324  0000C9                     SPI_MinSpeed@pInput:
  2325                           	opt stack 0
  2326  0000C9                     SPI_MaxSpeed@pInput:
  2327                           	opt stack 0
  2328  0000C9                     Word_SetPair@pInput:
  2329                           	opt stack 0
  2330  0000C9                     PortProperty_Valid@pInput:
  2331                           	opt stack 0
  2332  0000C9                     LCD_FillRectangle@pSize:
  2333                           	opt stack 0
  2334                           
  2335                           ; 4 bytes @ 0xF
  2336  0000C9                     	ds	1
  2337  0000CA                     ??_irobot_query_and_update:
  2338  0000CA                     ??_Console_PrintChar:
  2339  0000CA                     Console_MakeField@x:
  2340                           	opt stack 0
  2341  0000CA                     irobot_leds@LEDBit:
  2342                           	opt stack 0
  2343  0000CA                     itos@Data:
  2344                           	opt stack 0
  2345  0000CA                     irobot_move@moveSpeed:
  2346                           	opt stack 0
  2347                           
  2348                           ; 2 bytes @ 0x10
  2349  0000CA                     	ds	1
  2350  0000CB                     ??_Timer2_Init:
  2351  0000CB                     ??_Timer0_Init:
  2352  0000CB                     Port_SetPin@pPin:
  2353                           	opt stack 0
  2354  0000CB                     Port_Set@pValue:
  2355                           	opt stack 0
  2356  0000CB                     Word_SetPair@pPair:
  2357                           	opt stack 0
  2358  0000CB                     PortProperty_Valid@pPinDrive:
  2359                           	opt stack 0
  2360  0000CB                     Console_MakeField@y:
  2361                           	opt stack 0
  2362  0000CB                     irobot_leds@powerColour:
  2363                           	opt stack 0
  2364  0000CB                     ___fldiv@new_exp:
  2365                           	opt stack 0
  2366                           
  2367                           ; 2 bytes @ 0x11
  2368  0000CB                     	ds	1
  2369  0000CC                     ??_Port_Set:
  2370  0000CC                     Port_SetPin@pValue:
  2371                           	opt stack 0
  2372  0000CC                     Word_SetPair@pValue:
  2373                           	opt stack 0
  2374  0000CC                     PortProperty_Valid@pPin:
  2375                           	opt stack 0
  2376  0000CC                     irobot_leds@powerLuminosity:
  2377                           	opt stack 0
  2378  0000CC                     LCD_DrawField@pField:
  2379                           	opt stack 0
  2380  0000CC                     itos@Length:
  2381                           	opt stack 0
  2382  0000CC                     irobot_move@moveTurnRadius:
  2383                           	opt stack 0
  2384  0000CC                     Timer2_Init@RDIV:
  2385                           	opt stack 0
  2386  0000CC                     ___flmul@a:
  2387                           	opt stack 0
  2388                           
  2389                           ; 4 bytes @ 0x12
  2390  0000CC                     	ds	1
  2391  0000CD                     ??_PortProperty_Valid:
  2392  0000CD                     ??_LCD_FillRectangle:
  2393  0000CD                     Port_SetPin@Type:
  2394                           	opt stack 0
  2395  0000CD                     Console_PrintChar@pInput:
  2396                           	opt stack 0
  2397  0000CD                     irobot_leds@isScript:
  2398                           	opt stack 0
  2399  0000CD                     Timer0_Init@pCPUClock:
  2400                           	opt stack 0
  2401  0000CD                     ___fldiv@grs:
  2402                           	opt stack 0
  2403                           
  2404                           ; 4 bytes @ 0x13
  2405  0000CD                     	ds	1
  2406  0000CE                     ??_irobot_move:
  2407  0000CE                     LED_Set@pValue:
  2408                           	opt stack 0
  2409  0000CE                     putch@c:
  2410                           	opt stack 0
  2411  0000CE                     irobot_led_power_on@powerOnColour:
  2412                           	opt stack 0
  2413  0000CE                     Port_TogglePin@pInput:
  2414                           	opt stack 0
  2415  0000CE                     itos@Out:
  2416                           	opt stack 0
  2417  0000CE                     LCD_DrawField@pPoint:
  2418                           	opt stack 0
  2419                           
  2420                           ; 4 bytes @ 0x14
  2421  0000CE                     	ds	1
  2422  0000CF                     ?_printf:
  2423                           	opt stack 0
  2424  0000CF                     LCD_FillRectangle@i:
  2425                           	opt stack 0
  2426  0000CF                     LED_Set@pLED:
  2427                           	opt stack 0
  2428  0000CF                     irobot_query_and_update@packetIDs:
  2429                           	opt stack 0
  2430  0000CF                     printf@f:
  2431                           	opt stack 0
  2432  0000CF                     PortProperty_Valid@Errors:
  2433                           	opt stack 0
  2434                           
  2435                           ; 16 bytes @ 0x15
  2436  0000CF                     	ds	1
  2437  0000D0                     ??___flmul:
  2438  0000D0                     LCD_FillRectangle@j:
  2439                           	opt stack 0
  2440  0000D0                     Port_TogglePin@pPin:
  2441                           	opt stack 0
  2442  0000D0                     HMI_SetNumber@pInput:
  2443                           	opt stack 0
  2444  0000D0                     Timer2_Init@pCPUClock:
  2445                           	opt stack 0
  2446                           
  2447                           ; 4 bytes @ 0x16
  2448  0000D0                     	ds	1
  2449  0000D1                     Port_TogglePin@Value:
  2450                           	opt stack 0
  2451  0000D1                     irobot_query_and_update@streamSize:
  2452                           	opt stack 0
  2453  0000D1                     ___fldiv@bexp:
  2454                           	opt stack 0
  2455  0000D1                     Timer0_Init@DIVIDE:
  2456                           	opt stack 0
  2457                           
  2458                           ; 4 bytes @ 0x17
  2459  0000D1                     	ds	1
  2460  0000D2                     LED_Toggle@pLED:
  2461                           	opt stack 0
  2462  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2463                           	opt stack 0
  2464  0000D2                     irobot_move@isScript:
  2465                           	opt stack 0
  2466  0000D2                     ___fldiv@aexp:
  2467                           	opt stack 0
  2468  0000D2                     LCD_DrawField@pSize:
  2469                           	opt stack 0
  2470                           
  2471                           ; 4 bytes @ 0x18
  2472  0000D2                     	ds	1
  2473  0000D3                     Event_DIPSwitch@pState:
  2474                           	opt stack 0
  2475  0000D3                     Event_TestButton@pState:
  2476                           	opt stack 0
  2477  0000D3                     irobot_query_and_update@packetVariable:
  2478                           	opt stack 0
  2479  0000D3                     irobot_stop_motion@isScript:
  2480                           	opt stack 0
  2481  0000D3                     irobot_move_straight@straightSpeed:
  2482                           	opt stack 0
  2483                           
  2484                           ; 2 bytes @ 0x19
  2485  0000D3                     	ds	1
  2486  0000D4                     Event_DIPSwitch@Bar:
  2487                           	opt stack 0
  2488  0000D4                     irobot_query_and_update@j:
  2489                           	opt stack 0
  2490  0000D4                     ___flmul@sign:
  2491                           	opt stack 0
  2492  0000D4                     Timer2_Init@DIVIDE:
  2493                           	opt stack 0
  2494                           
  2495                           ; 4 bytes @ 0x1A
  2496  0000D4                     	ds	1
  2497  0000D5                     irobot_query_and_update@startIndex:
  2498                           	opt stack 0
  2499  0000D5                     ___flmul@aexp:
  2500                           	opt stack 0
  2501  0000D5                     Button_Poll@pButton:
  2502                           	opt stack 0
  2503  0000D5                     Motor_Speed@pMotor:
  2504                           	opt stack 0
  2505                           
  2506                           ; 2 bytes @ 0x1B
  2507  0000D5                     	ds	1
  2508  0000D6                     ??_LCD_DrawField:
  2509  0000D6                     irobot_query_and_update@i:
  2510                           	opt stack 0
  2511  0000D6                     ___flmul@grs:
  2512                           	opt stack 0
  2513                           
  2514                           ; 4 bytes @ 0x1C
  2515  0000D6                     	ds	1
  2516  0000D7                     Button_Poll@pIncrement:
  2517                           	opt stack 0
  2518  0000D7                     Motor_Speed@pFrequency:
  2519                           	opt stack 0
  2520  0000D7                     irobot_rotate@rotateAngle:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x1D
  2524  0000D7                     	ds	1
  2525  0000D8                     ??_Button_Poll:
  2526  0000D8                     LCD_DrawField@count:
  2527                           	opt stack 0
  2528                           
  2529                           ; 2 bytes @ 0x1E
  2530  0000D8                     	ds	1
  2531  0000D9                     irobot_rotate@rotateSpeed:
  2532                           	opt stack 0
  2533                           
  2534                           ; 2 bytes @ 0x1F
  2535  0000D9                     	ds	1
  2536  0000DA                     LCD_DrawField@xmax:
  2537                           	opt stack 0
  2538  0000DA                     ___flmul@bexp:
  2539                           	opt stack 0
  2540                           
  2541                           ; 1 bytes @ 0x20
  2542  0000DA                     	ds	1
  2543  0000DB                     ??_printf:
  2544  0000DB                     ??_irobot_rotate:
  2545  0000DB                     LCD_DrawField@ymax:
  2546                           	opt stack 0
  2547  0000DB                     ___flmul@prod:
  2548                           	opt stack 0
  2549                           
  2550                           ; 4 bytes @ 0x21
  2551  0000DB                     	ds	1
  2552  0000DC                     LCD_DrawField@i:
  2553                           	opt stack 0
  2554  0000DC                     irobot_rotate@isScript:
  2555                           	opt stack 0
  2556  0000DC                     printf@prec:
  2557                           	opt stack 0
  2558  0000DC                     Port_Set@TypeRequired:
  2559                           	opt stack 0
  2560                           
  2561                           ; 2 bytes @ 0x22
  2562  0000DC                     	ds	1
  2563  0000DD                     ??_Console_Render:
  2564  0000DD                     Button_Poll@Pin:
  2565                           	opt stack 0
  2566  0000DD                     printf@flag:
  2567                           	opt stack 0
  2568  0000DD                     irobot_rotate@angleTotal:
  2569                           	opt stack 0
  2570                           
  2571                           ; 2 bytes @ 0x23
  2572  0000DD                     	ds	1
  2573  0000DE                     Port_Set@TypeActual:
  2574                           	opt stack 0
  2575  0000DE                     printf@ap:
  2576                           	opt stack 0
  2577                           
  2578                           ; 2 bytes @ 0x24
  2579  0000DE                     	ds	1
  2580  0000DF                     PortProperty_Valid@Pair:
  2581                           	opt stack 0
  2582  0000DF                     Console_Render@temp:
  2583                           	opt stack 0
  2584  0000DF                     irobot_rotate@rotateDirection:
  2585                           	opt stack 0
  2586  0000DF                     ___flmul@temp:
  2587                           	opt stack 0
  2588                           
  2589                           ; 2 bytes @ 0x25
  2590  0000DF                     	ds	1
  2591  0000E0                     Port_Set@Type:
  2592                           	opt stack 0
  2593  0000E0                     Port_CheckPairType@pInput:
  2594                           	opt stack 0
  2595  0000E0                     Port_SetPinType@pInput:
  2596                           	opt stack 0
  2597  0000E0                     printf@val:
  2598                           	opt stack 0
  2599  0000E0                     Console_Render@lCursor:
  2600                           	opt stack 0
  2601                           
  2602                           ; 4 bytes @ 0x26
  2603  0000E0                     	ds	1
  2604  0000E1                     ?_ADC_Voltage:
  2605                           	opt stack 0
  2606  0000E1                     ADC_Voltage@pInput:
  2607                           	opt stack 0
  2608                           
  2609                           ; 2 bytes @ 0x27
  2610  0000E1                     	ds	1
  2611  0000E2                     Port_CheckPairType@pPair:
  2612                           	opt stack 0
  2613  0000E2                     Port_SetPinType@pPin:
  2614                           	opt stack 0
  2615  0000E2                     printf@c:
  2616                           	opt stack 0
  2617                           
  2618                           ; 1 bytes @ 0x28
  2619  0000E2                     	ds	1
  2620  0000E3                     Port_CheckPairType@pDrive:
  2621                           	opt stack 0
  2622  0000E3                     Port_SetPinType@pType:
  2623                           	opt stack 0
  2624                           
  2625                           ; 1 bytes @ 0x29
  2626  0000E3                     	ds	1
  2627  0000E4                     Port_CheckPairType@Pin1:
  2628                           	opt stack 0
  2629  0000E4                     Port_SetPinType@Output:
  2630                           	opt stack 0
  2631  0000E4                     Console_Render@x:
  2632                           	opt stack 0
  2633                           
  2634                           ; 1 bytes @ 0x2A
  2635  0000E4                     	ds	1
  2636  0000E5                     ??_ADC_Voltage:
  2637  0000E5                     Port_CheckPairType@Pin2:
  2638                           	opt stack 0
  2639  0000E5                     Console_Render@y:
  2640                           	opt stack 0
  2641  0000E5                     Port_SetPinType@Props:
  2642                           	opt stack 0
  2643                           
  2644                           ; 2 bytes @ 0x2B
  2645  0000E5                     	ds	1
  2646  0000E6                     Port_CheckPairType@Output:
  2647                           	opt stack 0
  2648  0000E6                     mode2@dist:
  2649                           	opt stack 0
  2650                           
  2651                           ; 2 bytes @ 0x2C
  2652  0000E6                     	ds	1
  2653  0000E7                     LED_Init@pLED:
  2654                           	opt stack 0
  2655  0000E7                     Port_CheckPairType@Props:
  2656                           	opt stack 0
  2657  0000E7                     Motor_Init@pMotor:
  2658                           	opt stack 0
  2659  0000E7                     SPI_Init@pClock:
  2660                           	opt stack 0
  2661  0000E7                     ADC_Voltage@max:
  2662                           	opt stack 0
  2663                           
  2664                           ; 4 bytes @ 0x2D
  2665  0000E7                     	ds	2
  2666  0000E9                     Port_CheckQuadType@pInput:
  2667                           	opt stack 0
  2668  0000E9                     Motor_Init@pAddress:
  2669                           	opt stack 0
  2670                           
  2671                           ; 2 bytes @ 0x2F
  2672  0000E9                     	ds	2
  2673  0000EB                     Port_CheckQuadType@pQuad:
  2674                           	opt stack 0
  2675  0000EB                     SPI_Init@pChannel:
  2676                           	opt stack 0
  2677  0000EB                     ADC_Voltage@ref:
  2678                           	opt stack 0
  2679                           
  2680                           ; 4 bytes @ 0x31
  2681  0000EB                     	ds	1
  2682  0000EC                     Port_CheckQuadType@pDrive:
  2683                           	opt stack 0
  2684  0000EC                     SPI_Init@pMode:
  2685                           	opt stack 0
  2686                           
  2687                           ; 1 bytes @ 0x32
  2688  0000EC                     	ds	1
  2689  0000ED                     Port_CheckQuadType@Pair1:
  2690                           	opt stack 0
  2691  0000ED                     SPI_Init@pInput:
  2692                           	opt stack 0
  2693                           
  2694                           ; 2 bytes @ 0x33
  2695  0000ED                     	ds	1
  2696  0000EE                     Port_CheckQuadType@Pair2:
  2697                           	opt stack 0
  2698                           
  2699                           ; 1 bytes @ 0x34
  2700  0000EE                     	ds	1
  2701  0000EF                     ??_LCD_Init:
  2702  0000EF                     Port_CheckQuadType@Output:
  2703                           	opt stack 0
  2704  0000EF                     ADC_Voltage@output:
  2705                           	opt stack 0
  2706                           
  2707                           ; 4 bytes @ 0x35
  2708  0000EF                     	ds	1
  2709  0000F0                     Port_CheckPortType@pInput:
  2710                           	opt stack 0
  2711  0000F0                     Port_SetQuadType@pInput:
  2712                           	opt stack 0
  2713                           
  2714                           ; 2 bytes @ 0x36
  2715  0000F0                     	ds	1
  2716  0000F1                     LCD_Init@i:
  2717                           	opt stack 0
  2718                           
  2719                           ; 2 bytes @ 0x37
  2720  0000F1                     	ds	1
  2721  0000F2                     Port_CheckPortType@pDrive:
  2722                           	opt stack 0
  2723  0000F2                     Port_SetQuadType@pQuad:
  2724                           	opt stack 0
  2725                           
  2726                           ; 1 bytes @ 0x38
  2727  0000F2                     	ds	1
  2728  0000F3                     ?___fltol:
  2729                           	opt stack 0
  2730  0000F3                     Port_CheckPortType@Output:
  2731                           	opt stack 0
  2732  0000F3                     Port_SetQuadType@pType:
  2733                           	opt stack 0
  2734  0000F3                     ___fltol@f1:
  2735                           	opt stack 0
  2736                           
  2737                           ; 4 bytes @ 0x39
  2738  0000F3                     	ds	1
  2739  0000F4                     Port_SetQuadType@Output:
  2740                           	opt stack 0
  2741  0000F4                     Port_SetType@pInput:
  2742                           	opt stack 0
  2743                           
  2744                           ; 2 bytes @ 0x3A
  2745  0000F4                     	ds	1
  2746  0000F5                     HMI_Init@in:
  2747                           	opt stack 0
  2748                           
  2749                           ; 2 bytes @ 0x3B
  2750  0000F5                     	ds	1
  2751  0000F6                     Port_SetType@pType:
  2752                           	opt stack 0
  2753                           
  2754                           ; 1 bytes @ 0x3C
  2755  0000F6                     	ds	1
  2756  0000F7                     ??_Port_SetType:
  2757  0000F7                     ___fltol@sign1:
  2758                           	opt stack 0
  2759                           
  2760                           ; 1 bytes @ 0x3D
  2761  0000F7                     	ds	1
  2762  0000F8                     ___fltol@exp1:
  2763                           	opt stack 0
  2764                           
  2765                           ; 1 bytes @ 0x3E
  2766  0000F8                     	ds	1
  2767  0000F9                     tblptru	equ	0xFF8
  2768                           tblptrh	equ	0xFF7
  2769                           tblptrl	equ	0xFF6
  2770                           tablat	equ	0xFF5
  2771                           postinc0	equ	0xFEE
  2772                           wreg	equ	0xFE8
  2773                           postdec1	equ	0xFE5
  2774                           fsr1h	equ	0xFE2
  2775                           fsr1l	equ	0xFE1
  2776                           
  2777                           ; 1 bytes @ 0x3F
  2778                           
  2779                           	psect	cstackCOMRAM
  2780  000001                     __pcstackCOMRAM:
  2781                           	opt stack 0
  2782  000001                     i2Byte_SetBit@pInput:
  2783                           	opt stack 0
  2784  000001                     i2Byte_GetZone@pInput:
  2785                           	opt stack 0
  2786  000001                     i2delay_us@us:
  2787                           	opt stack 0
  2788  000001                     i2MXK_Queue@pCallback:
  2789                           	opt stack 0
  2790                           
  2791                           ; 3 bytes @ 0x0
  2792  000001                     	ds	2
  2793  000003                     i2Byte_SetBit@pBit:
  2794                           	opt stack 0
  2795  000003                     i2Byte_GetZone@pMax:
  2796                           	opt stack 0
  2797  000003                     i2delay_us@u:
  2798                           	opt stack 0
  2799                           
  2800                           ; 4 bytes @ 0x2
  2801  000003                     	ds	1
  2802  000004                     i2Byte_SetBit@pValue:
  2803                           	opt stack 0
  2804  000004                     i2Byte_GetZone@pChunk:
  2805                           	opt stack 0
  2806                           
  2807                           ; 1 bytes @ 0x3
  2808  000004                     	ds	1
  2809  000005                     ??i2_Byte_SetBit:
  2810  000005                     i2Byte_GetZone@pChunkSize:
  2811                           	opt stack 0
  2812                           
  2813                           ; 1 bytes @ 0x4
  2814  000005                     	ds	1
  2815  000006                     ??i2_Byte_GetZone:
  2816                           
  2817                           ; 1 bytes @ 0x5
  2818  000006                     	ds	1
  2819  000007                     i2Byte_GetZone@MASK:
  2820                           	opt stack 0
  2821  000007                     i2MXK_SwitchTo@CUR:
  2822                           	opt stack 0
  2823                           
  2824                           ; 1 bytes @ 0x6
  2825  000007                     	ds	1
  2826  000008                     i2Byte_GetZone@Offset:
  2827                           	opt stack 0
  2828  000008                     i2MXK_SwitchTo@pModule:
  2829                           	opt stack 0
  2830                           
  2831                           ; 1 bytes @ 0x7
  2832  000008                     	ds	1
  2833  000009                     i2Byte_GetZone@Output:
  2834                           	opt stack 0
  2835                           
  2836                           ; 1 bytes @ 0x8
  2837  000009                     	ds	1
  2838  00000A                     i2Byte_GetPair@pInput:
  2839                           	opt stack 0
  2840                           
  2841                           ; 2 bytes @ 0x9
  2842  00000A                     	ds	2
  2843  00000C                     i2Byte_GetPair@pPair:
  2844                           	opt stack 0
  2845                           
  2846                           ; 1 bytes @ 0xB
  2847  00000C                     	ds	1
  2848  00000D                     i2Word_GetPair@pInput:
  2849                           	opt stack 0
  2850                           
  2851                           ; 2 bytes @ 0xC
  2852  00000D                     	ds	2
  2853  00000F                     i2Word_GetPair@pPair:
  2854                           	opt stack 0
  2855                           
  2856                           ; 1 bytes @ 0xE
  2857  00000F                     	ds	1
  2858  000010                     i2Port_SetPin@pInput:
  2859                           	opt stack 0
  2860                           
  2861                           ; 2 bytes @ 0xF
  2862  000010                     	ds	2
  2863  000012                     i2Port_SetPin@pPin:
  2864                           	opt stack 0
  2865                           
  2866                           ; 1 bytes @ 0x11
  2867  000012                     	ds	1
  2868  000013                     i2Port_SetPin@pValue:
  2869                           	opt stack 0
  2870                           
  2871                           ; 1 bytes @ 0x12
  2872  000013                     	ds	1
  2873  000014                     i2Port_SetPin@Type:
  2874                           	opt stack 0
  2875                           
  2876                           ; 1 bytes @ 0x13
  2877  000014                     	ds	1
  2878  000015                     
  2879                           ; 1 bytes @ 0x14
  2880  000015                     	ds	2
  2881  000017                     ??_ISR_Function:
  2882                           
  2883                           ; 1 bytes @ 0x16
  2884  000017                     	ds	18
  2885                           tblptru	equ	0xFF8
  2886                           tblptrh	equ	0xFF7
  2887                           tblptrl	equ	0xFF6
  2888                           tablat	equ	0xFF5
  2889                           postinc0	equ	0xFEE
  2890                           wreg	equ	0xFE8
  2891                           postdec1	equ	0xFE5
  2892                           fsr1h	equ	0xFE2
  2893                           fsr1l	equ	0xFE1
  2894                           
  2895 ;;
  2896 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2897 ;;
  2898 ;; *************** function _main *****************
  2899 ;; Defined at:
  2900 ;;		line 355 in file "main.c"
  2901 ;; Parameters:    Size  Location     Type
  2902 ;;		None
  2903 ;; Auto vars:     Size  Location     Type
  2904 ;;		None
  2905 ;; Return value:  Size  Location     Type
  2906 ;;                  1    wreg      void 
  2907 ;; Registers used:
  2908 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2909 ;; Tracked objects:
  2910 ;;		On entry : 0/0
  2911 ;;		On exit  : 0/0
  2912 ;;		Unchanged: 0/0
  2913 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2917 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;Total ram usage:        2 bytes
  2919 ;; Hardware stack levels required when called:   18
  2920 ;; This function calls:
  2921 ;;		_Console_Render
  2922 ;;		_HMI_Poll
  2923 ;;		_MXK_Dequeue
  2924 ;;		_MXK_Release
  2925 ;;		_MXK_SwitchTo
  2926 ;;		_getMode
  2927 ;;		_init
  2928 ;;		_mode1
  2929 ;;		_mode2
  2930 ;;		_mode3
  2931 ;;		_mode4
  2932 ;;		_printf
  2933 ;; This function is called by:
  2934 ;;		Startup code after reset
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text0
  2939  013AFA                     __ptext0:
  2940                           	opt stack 0
  2941  013AFA                     _main:
  2942                           	opt stack 13
  2943                           
  2944                           ;main.c: 356: init();
  2945                           
  2946                           ;incstack = 0
  2947  013AFA  EC48  F0A4         	call	_init	;wreg free
  2948  013AFE                     l2411:
  2949                           
  2950                           ;main.c: 358: getMode();
  2951  013AFE  ECC5  F0A0         	call	_getMode	;wreg free
  2952                           
  2953                           ;main.c: 359: switch (mode) {
  2954  013B02  D053               	goto	l2412
  2955  013B04                     
  2956                           ;main.c: 361: mode1();
  2957  013B04  EC9F  F086         	call	_mode1	;wreg free
  2958                           
  2959                           ;main.c: 362: break;
  2960  013B08  D7FA               	goto	l2411
  2961  013B0A                     
  2962                           ;main.c: 364: mode2();
  2963  013B0A  EC0A  F09D         	call	_mode2	;wreg free
  2964                           
  2965                           ;main.c: 365: break;
  2966  013B0E  D7F7               	goto	l2411
  2967  013B10                     
  2968                           ;main.c: 367: mode3();
  2969  013B10  EC55  F0B3         	call	_mode3	;wreg free
  2970                           
  2971                           ;main.c: 368: break;
  2972  013B14  D7F4               	goto	l2411
  2973  013B16                     
  2974                           ;main.c: 370: mode4();
  2975  013B16  EC5C  F09A         	call	_mode4	;wreg free
  2976                           
  2977                           ;main.c: 371: break;
  2978  013B1A  D7F1               	goto	l2411
  2979  013B1C                     
  2980                           ;main.c: 373: if (MXK_SwitchTo(eMXK_HMI)) {
  2981  013B1C  0E01               	movlw	1
  2982  013B1E  EC9E  F0AF         	call	_MXK_SwitchTo
  2983  013B22  0900               	iorlw	0
  2984  013B24  B4D8               	btfsc	status,2,c
  2985  013B26  D7EB               	goto	l2411
  2986                           
  2987                           ;main.c: 374: printf("%c", (char)35);
  2988  013B28  0EFB               	movlw	low STR_1
  2989  013B2A  0100               	movlb	0	; () banked
  2990  013B2C  6FCF               	movwf	printf@f& (0+255),b
  2991  013B2E  0EFF               	movlw	high STR_1
  2992  013B30  0100               	movlb	0	; () banked
  2993  013B32  6FD0               	movwf	(printf@f+1)& (0+255),b
  2994  013B34  0E00               	movlw	0
  2995  013B36  0100               	movlb	0	; () banked
  2996  013B38  6FD2               	movwf	(?_printf+3)& (0+255),b
  2997  013B3A  0E23               	movlw	35
  2998  013B3C  6FD1               	movwf	(?_printf+2)& (0+255),b
  2999  013B3E  ECB4  F092         	call	_printf	;wreg free
  3000                           
  3001                           ;main.c: 375: printf("Please select mode.\n");
  3002  013B42  0ED8               	movlw	low STR_14
  3003  013B44  0100               	movlb	0	; () banked
  3004  013B46  6FCF               	movwf	printf@f& (0+255),b
  3005  013B48  0EFF               	movlw	high STR_14
  3006  013B4A  0100               	movlb	0	; () banked
  3007  013B4C  6FD0               	movwf	(printf@f+1)& (0+255),b
  3008  013B4E  ECB4  F092         	call	_printf	;wreg free
  3009                           
  3010                           ;main.c: 376: printf("                   \n");
  3011  013B52  0EC3               	movlw	low STR_15
  3012  013B54  0100               	movlb	0	; () banked
  3013  013B56  6FCF               	movwf	printf@f& (0+255),b
  3014  013B58  0EFF               	movlw	high STR_15
  3015  013B5A  0100               	movlb	0	; () banked
  3016  013B5C  6FD0               	movwf	(printf@f+1)& (0+255),b
  3017  013B5E  ECB4  F092         	call	_printf	;wreg free
  3018                           
  3019                           ;main.c: 377: printf("                   \n");
  3020  013B62  0EC3               	movlw	low STR_15
  3021  013B64  0100               	movlb	0	; () banked
  3022  013B66  6FCF               	movwf	printf@f& (0+255),b
  3023  013B68  0EFF               	movlw	high STR_15
  3024  013B6A  0100               	movlb	0	; () banked
  3025  013B6C  6FD0               	movwf	(printf@f+1)& (0+255),b
  3026  013B6E  ECB4  F092         	call	_printf	;wreg free
  3027                           
  3028                           ;main.c: 378: printf("                   \n");
  3029  013B72  0EC3               	movlw	low STR_15
  3030  013B74  0100               	movlb	0	; () banked
  3031  013B76  6FCF               	movwf	printf@f& (0+255),b
  3032  013B78  0EFF               	movlw	high STR_15
  3033  013B7A  0100               	movlb	0	; () banked
  3034  013B7C  6FD0               	movwf	(printf@f+1)& (0+255),b
  3035  013B7E  ECB4  F092         	call	_printf	;wreg free
  3036                           
  3037                           ;main.c: 379: printf("                   \n");
  3038  013B82  0EC3               	movlw	low STR_15
  3039  013B84  0100               	movlb	0	; () banked
  3040  013B86  6FCF               	movwf	printf@f& (0+255),b
  3041  013B88  0EFF               	movlw	high STR_15
  3042  013B8A  0100               	movlb	0	; () banked
  3043  013B8C  6FD0               	movwf	(printf@f+1)& (0+255),b
  3044  013B8E  ECB4  F092         	call	_printf	;wreg free
  3045                           
  3046                           ;main.c: 380: Console_Render();
  3047  013B92  ECC8  F08F         	call	_Console_Render	;wreg free
  3048                           
  3049                           ;main.c: 381: HMI_Poll();
  3050  013B96  EC94  F0AA         	call	_HMI_Poll	;wreg free
  3051                           
  3052                           ;main.c: 382: if (MXK_Release())
  3053  013B9A  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3054  013B9E  0900               	iorlw	0
  3055  013BA0  B4D8               	btfsc	status,2,c
  3056  013BA2  D7AD               	goto	l2411
  3057                           
  3058                           ;main.c: 383: MXK_Dequeue();
  3059  013BA4  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3060                           
  3061                           ;main.c: 384: }
  3062                           ;main.c: 385: }
  3063  013BA8  D7AA               	goto	l2411
  3064  013BAA                     l2412:
  3065  013BAA  C33A  F3FC         	movff	_mode,??_main
  3066  013BAE  C33B  F3FD         	movff	_mode+1,??_main+1
  3067                           
  3068                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3069                           ; Switch size 1, requested type "space"
  3070                           ; Number of cases is 1, Range of values is 0 to 0
  3071                           ; switch strategies available:
  3072                           ; Name         Instructions Cycles
  3073                           ; simple_byte            4     3 (average)
  3074                           ;	Chosen strategy is simple_byte
  3075  013BB2  0103               	movlb	3	; () banked
  3076  013BB4  51FD               	movf	(??_main+1)& (0+255),w,b
  3077  013BB6  0A00               	xorlw	0	; case 0
  3078  013BB8  A4D8               	btfss	status,2,c
  3079  013BBA  D7B0               	goto	l2418
  3080                           
  3081                           ; BSR set to: 3
  3082                           ; Switch size 1, requested type "space"
  3083                           ; Number of cases is 4, Range of values is 1 to 4
  3084                           ; switch strategies available:
  3085                           ; Name         Instructions Cycles
  3086                           ; simple_byte           13     7 (average)
  3087                           ;	Chosen strategy is simple_byte
  3088  013BBC  0103               	movlb	3	; () banked
  3089  013BBE  51FC               	movf	??_main& (0+255),w,b
  3090  013BC0  0A01               	xorlw	1	; case 1
  3091  013BC2  B4D8               	btfsc	status,2,c
  3092  013BC4  D79F               	goto	l2413
  3093  013BC6  0A03               	xorlw	3	; case 2
  3094  013BC8  B4D8               	btfsc	status,2,c
  3095  013BCA  D79F               	goto	l2415
  3096  013BCC  0A01               	xorlw	1	; case 3
  3097  013BCE  B4D8               	btfsc	status,2,c
  3098  013BD0  D79F               	goto	l2416
  3099  013BD2  0A07               	xorlw	7	; case 4
  3100  013BD4  B4D8               	btfsc	status,2,c
  3101  013BD6  D79F               	goto	l2417
  3102  013BD8  D7A1               	goto	l2418
  3103  013BDA                     __end_of_main:
  3104                           	opt stack 0
  3105                           tblptru	equ	0xFF8
  3106                           tblptrh	equ	0xFF7
  3107                           tblptrl	equ	0xFF6
  3108                           tablat	equ	0xFF5
  3109                           postinc0	equ	0xFEE
  3110                           wreg	equ	0xFE8
  3111                           postdec1	equ	0xFE5
  3112                           fsr1h	equ	0xFE2
  3113                           fsr1l	equ	0xFE1
  3114                           status	equ	0xFD8
  3115                           
  3116 ;; *************** function _mode4 *****************
  3117 ;; Defined at:
  3118 ;;		line 325 in file "main.c"
  3119 ;; Parameters:    Size  Location     Type
  3120 ;;		None
  3121 ;; Auto vars:     Size  Location     Type
  3122 ;;		None
  3123 ;; Return value:  Size  Location     Type
  3124 ;;                  1    wreg      void 
  3125 ;; Registers used:
  3126 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3127 ;; Tracked objects:
  3128 ;;		On entry : 0/0
  3129 ;;		On exit  : 0/0
  3130 ;;		Unchanged: 0/0
  3131 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3132 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3133 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3134 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3135 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;Total ram usage:        0 bytes
  3137 ;; Hardware stack levels used:    1
  3138 ;; Hardware stack levels required when called:   17
  3139 ;; This function calls:
  3140 ;;		_Console_Render
  3141 ;;		_MXK_Dequeue
  3142 ;;		_MXK_Release
  3143 ;;		_MXK_SwitchTo
  3144 ;;		_delay_ms
  3145 ;;		_findClosestWall
  3146 ;;		_irobot_move_straight
  3147 ;;		_irobot_song_play
  3148 ;;		_irobot_stop_motion
  3149 ;;		_printf
  3150 ;;		_safeToGo
  3151 ;;		_update_bump_and_cliff
  3152 ;;		_update_distance
  3153 ;; This function is called by:
  3154 ;;		_main
  3155 ;; This function uses a non-reentrant model
  3156 ;;
  3157                           
  3158                           	psect	text1
  3159  0134B8                     __ptext1:
  3160                           	opt stack 0
  3161  0134B8                     _mode4:
  3162                           	opt stack 13
  3163                           
  3164                           ;main.c: 326: safeToGo();
  3165                           
  3166                           ; BSR set to: 3
  3167                           ;incstack = 0
  3168  0134B8  EC5D  F0AE         	call	_safeToGo	;wreg free
  3169                           
  3170                           ;main.c: 327: while (!iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDropLeft) {
  3171  0134BC  D07D               	goto	l2399
  3172  0134BE                     
  3173                           ;main.c: 328: findClosestWall();
  3174  0134BE  EC53  F082         	call	_findClosestWall	;wreg free
  3175                           
  3176                           ;main.c: 329: delay_ms(80);
  3177  0134C2  0E00               	movlw	0
  3178  0134C4  0100               	movlb	0	; () banked
  3179  0134C6  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3180  0134C8  0E50               	movlw	80
  3181  0134CA  6FBA               	movwf	delay_ms@ms& (0+255),b
  3182  0134CC  ECA7  F0AB         	call	_delay_ms	;wreg free
  3183                           
  3184                           ;main.c: 330: irobot_move_straight(200);
  3185  0134D0  0E00               	movlw	0
  3186  0134D2  0100               	movlb	0	; () banked
  3187  0134D4  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3188  0134D6  0EC8               	movlw	200
  3189  0134D8  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3190  0134DA  ECF5  F0B2         	call	_irobot_move_straight	;wreg free
  3191                           
  3192                           ;main.c: 331: dist = 0;
  3193  0134DE  0E00               	movlw	0
  3194  0134E0  0100               	movlb	0	; () banked
  3195  0134E2  6F6A               	movwf	(_dist+1)& (0+255),b
  3196  0134E4  0E00               	movlw	0
  3197  0134E6  6F69               	movwf	_dist& (0+255),b
  3198                           
  3199                           ;main.c: 332: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3200  0134E8  D00C               	goto	l2393
  3201  0134EA                     
  3202                           ; BSR set to: 0
  3203                           ;main.c: 333: update_distance();
  3204                           
  3205                           ; BSR set to: 0
  3206  0134EA  EC74  F0B3         	call	_update_distance	;wreg free
  3207                           
  3208                           ;main.c: 334: dist += iRDistance;
  3209  0134EE  0100               	movlb	0	; () banked
  3210  0134F0  5179               	movf	_iRDistance& (0+255),w,b
  3211  0134F2  0100               	movlb	0	; () banked
  3212  0134F4  2769               	addwf	_dist& (0+255),f,b
  3213  0134F6  0100               	movlb	0	; () banked
  3214  0134F8  517A               	movf	(_iRDistance+1)& (0+255),w,b
  3215  0134FA  0100               	movlb	0	; () banked
  3216  0134FC  236A               	addwfc	(_dist+1)& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 335: update_bump_and_cliff();
  3220  0134FE  EC99  F0B0         	call	_update_bump_and_cliff	;wreg free
  3221  013502                     l2393:
  3222  013502  0100               	movlb	0	; () banked
  3223  013504  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3224  013506  D008               	goto	u14280
  3225  013508  0E2C               	movlw	44
  3226  01350A  0100               	movlb	0	; () banked
  3227  01350C  5D69               	subwf	_dist& (0+255),w,b
  3228  01350E  0E01               	movlw	1
  3229  013510  0100               	movlb	0	; () banked
  3230  013512  596A               	subwfb	(_dist+1)& (0+255),w,b
  3231  013514  B0D8               	btfsc	status,0,c
  3232  013516  D010               	goto	u14320
  3233  013518                     u14280:
  3234                           
  3235                           ; BSR set to: 0
  3236  013518  0100               	movlb	0	; () banked
  3237  01351A  5187               	movf	_iRBumpLeft& (0+255),w,b
  3238  01351C  A4D8               	btfss	status,2,c
  3239  01351E  D00C               	goto	u14320
  3240                           
  3241                           ; BSR set to: 0
  3242  013520  0100               	movlb	0	; () banked
  3243  013522  5188               	movf	_iRBumpRight& (0+255),w,b
  3244  013524  A4D8               	btfss	status,2,c
  3245  013526  D008               	goto	u14320
  3246                           
  3247                           ; BSR set to: 0
  3248  013528  0100               	movlb	0	; () banked
  3249  01352A  5186               	movf	_iRDropRight& (0+255),w,b
  3250  01352C  A4D8               	btfss	status,2,c
  3251  01352E  D004               	goto	u14320
  3252                           
  3253                           ; BSR set to: 0
  3254  013530  0100               	movlb	0	; () banked
  3255  013532  5185               	movf	_iRDropLeft& (0+255),w,b
  3256  013534  B4D8               	btfsc	status,2,c
  3257  013536  D7D9               	goto	l2394
  3258  013538                     u14320:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 336: }
  3262                           ;main.c: 338: irobot_stop_motion(0);
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267  013538  0E00               	movlw	0
  3268  01353A  EC13  F0AF         	call	_irobot_stop_motion
  3269                           
  3270                           ;main.c: 339: if (MXK_SwitchTo(eMXK_HMI)) {
  3271  01353E  0E01               	movlw	1
  3272  013540  EC9E  F0AF         	call	_MXK_SwitchTo
  3273  013544  0900               	iorlw	0
  3274  013546  B4D8               	btfsc	status,2,c
  3275  013548  D037               	goto	l2399
  3276                           
  3277                           ;main.c: 340: printf("%c", (char)35);
  3278  01354A  0EFB               	movlw	low STR_1
  3279  01354C  0100               	movlb	0	; () banked
  3280  01354E  6FCF               	movwf	printf@f& (0+255),b
  3281  013550  0EFF               	movlw	high STR_1
  3282  013552  0100               	movlb	0	; () banked
  3283  013554  6FD0               	movwf	(printf@f+1)& (0+255),b
  3284  013556  0E00               	movlw	0
  3285  013558  0100               	movlb	0	; () banked
  3286  01355A  6FD2               	movwf	(?_printf+3)& (0+255),b
  3287  01355C  0E23               	movlw	35
  3288  01355E  6FD1               	movwf	(?_printf+2)& (0+255),b
  3289  013560  ECB4  F092         	call	_printf	;wreg free
  3290                           
  3291                           ;main.c: 341: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3292  013564  0E0D               	movlw	low STR_12
  3293  013566  0100               	movlb	0	; () banked
  3294  013568  6FCF               	movwf	printf@f& (0+255),b
  3295  01356A  0EFF               	movlw	high STR_12
  3296  01356C  0100               	movlb	0	; () banked
  3297  01356E  6FD0               	movwf	(printf@f+1)& (0+255),b
  3298  013570  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3299  013574  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3300  013578  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3301  01357C  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3302  013580  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3303  013584  0100               	movlb	0	; () banked
  3304  013586  6BD6               	clrf	(?_printf+7)& (0+255),b
  3305  013588  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3306  01358C  0100               	movlb	0	; () banked
  3307  01358E  6BD8               	clrf	(?_printf+9)& (0+255),b
  3308  013590  0EBD               	movlw	189
  3309  013592  0100               	movlb	0	; () banked
  3310  013594  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3311  013596  0100               	movlb	0	; () banked
  3312  013598  6FD9               	movwf	(?_printf+10)& (0+255),b
  3313  01359A  0EFF               	movlw	255
  3314  01359C  0100               	movlb	0	; () banked
  3315  01359E  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3316  0135A0  0100               	movlb	0	; () banked
  3317  0135A2  6FDA               	movwf	(?_printf+11)& (0+255),b
  3318  0135A4  ECB4  F092         	call	_printf	;wreg free
  3319                           
  3320                           ;main.c: 342: Console_Render();
  3321  0135A8  ECC8  F08F         	call	_Console_Render	;wreg free
  3322                           
  3323                           ;main.c: 343: if (MXK_Release())
  3324  0135AC  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3325  0135B0  0900               	iorlw	0
  3326  0135B2  A4D8               	btfss	status,2,c
  3327                           
  3328                           ;main.c: 344: MXK_Dequeue();
  3329  0135B4  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3330  0135B8                     l2399:
  3331  0135B8  0100               	movlb	0	; () banked
  3332  0135BA  5187               	movf	_iRBumpLeft& (0+255),w,b
  3333  0135BC  A4D8               	btfss	status,2,c
  3334  0135BE  D00C               	goto	u14380
  3335                           
  3336                           ; BSR set to: 0
  3337  0135C0  0100               	movlb	0	; () banked
  3338  0135C2  5188               	movf	_iRBumpRight& (0+255),w,b
  3339  0135C4  A4D8               	btfss	status,2,c
  3340  0135C6  D008               	goto	u14380
  3341                           
  3342                           ; BSR set to: 0
  3343  0135C8  0100               	movlb	0	; () banked
  3344  0135CA  5186               	movf	_iRDropRight& (0+255),w,b
  3345  0135CC  A4D8               	btfss	status,2,c
  3346  0135CE  D004               	goto	u14380
  3347                           
  3348                           ; BSR set to: 0
  3349  0135D0  0100               	movlb	0	; () banked
  3350  0135D2  5185               	movf	_iRDropLeft& (0+255),w,b
  3351  0135D4  B4D8               	btfsc	status,2,c
  3352  0135D6  D773               	goto	l2392
  3353  0135D8                     u14380:
  3354                           
  3355                           ; BSR set to: 0
  3356                           ;main.c: 345: }
  3357                           ;main.c: 346: }
  3358                           ;main.c: 347: irobot_song_play(0);
  3359                           
  3360                           ; BSR set to: 0
  3361                           
  3362                           ; BSR set to: 0
  3363  0135D8  0E00               	movlw	0
  3364  0135DA  EC60  F0B3         	call	_irobot_song_play
  3365                           
  3366                           ;main.c: 348: irobot_stop_motion(0);
  3367  0135DE  0E00               	movlw	0
  3368  0135E0  EC13  F0AF         	call	_irobot_stop_motion
  3369  0135E4  0100               	movlb	0	; () banked
  3370  0135E6  51AF               	movf	_Stepper& (0+255),w,b
  3371  0135E8  0100               	movlb	0	; () banked
  3372  0135EA  11B0               	iorwf	(_Stepper+1)& (0+255),w,b
  3373  0135EC  B4D8               	btfsc	status,2,c
  3374  0135EE  0012               	return	
  3375  0135F0  D7F9               	goto	l2404
  3376  0135F2                     __end_of_mode4:
  3377                           	opt stack 0
  3378                           tblptru	equ	0xFF8
  3379                           tblptrh	equ	0xFF7
  3380                           tblptrl	equ	0xFF6
  3381                           tablat	equ	0xFF5
  3382                           postinc0	equ	0xFEE
  3383                           wreg	equ	0xFE8
  3384                           postdec1	equ	0xFE5
  3385                           fsr1h	equ	0xFE2
  3386                           fsr1l	equ	0xFE1
  3387                           status	equ	0xFD8
  3388                           
  3389 ;; *************** function _findClosestWall *****************
  3390 ;; Defined at:
  3391 ;;		line 151 in file "main.c"
  3392 ;; Parameters:    Size  Location     Type
  3393 ;;		None
  3394 ;; Auto vars:     Size  Location     Type
  3395 ;;		None
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3405 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3406 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3407 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3408 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3409 ;;Total ram usage:        6 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:   13
  3412 ;; This function calls:
  3413 ;;		_ADC_Start
  3414 ;;		_ADC_Voltage
  3415 ;;		_Console_Render
  3416 ;;		_HMI_Render
  3417 ;;		_HMI_SetNumber
  3418 ;;		_MXK_Dequeue
  3419 ;;		_MXK_Release
  3420 ;;		_MXK_SwitchTo
  3421 ;;		_Motor_Move
  3422 ;;		_Motor_Speed
  3423 ;;		___fldiv
  3424 ;;		___flmul
  3425 ;;		___fltol
  3426 ;;		___xxtofl
  3427 ;;		_delay_ms
  3428 ;;		_irobot_rotate
  3429 ;;		_printf
  3430 ;; This function is called by:
  3431 ;;		_mode4
  3432 ;; This function uses a non-reentrant model
  3433 ;;
  3434                           
  3435                           	psect	text2
  3436  0104A6                     __ptext2:
  3437                           	opt stack 0
  3438  0104A6                     _findClosestWall:
  3439                           	opt stack 16
  3440                           
  3441                           ;main.c: 152: StepRotate = 401;
  3442                           
  3443                           ; BSR set to: 0
  3444                           ;incstack = 0
  3445  0104A6  0E01               	movlw	1
  3446  0104A8  0100               	movlb	0	; () banked
  3447  0104AA  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3448  0104AC  0E91               	movlw	145
  3449  0104AE  6F71               	movwf	_StepRotate& (0+255),b
  3450                           
  3451                           ;main.c: 153: MinDist = 1000;
  3452  0104B0  0E03               	movlw	3
  3453  0104B2  0100               	movlb	0	; () banked
  3454  0104B4  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3455  0104B6  0EE8               	movlw	232
  3456  0104B8  6FFB               	movwf	_MinDist& (0+255),b
  3457                           
  3458                           ;main.c: 154: Stepstomin = 0;
  3459  0104BA  0E00               	movlw	0
  3460  0104BC  0100               	movlb	0	; () banked
  3461  0104BE  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3462  0104C0  0E00               	movlw	0
  3463  0104C2  6F6F               	movwf	_Stepstomin& (0+255),b
  3464                           
  3465                           ;main.c: 155: angleToClosestWall = 1000;
  3466  0104C4  0E03               	movlw	3
  3467  0104C6  0100               	movlb	0	; () banked
  3468  0104C8  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3469  0104CA  0EE8               	movlw	232
  3470  0104CC  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3471                           
  3472                           ;main.c: 156: IRValue = 0;
  3473  0104CE  0E00               	movlw	0
  3474  0104D0  0100               	movlb	0	; () banked
  3475  0104D2  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3476  0104D4  0E00               	movlw	0
  3477  0104D6  6F6D               	movwf	_IRValue& (0+255),b
  3478                           
  3479                           ;main.c: 157: TimerX = 8;
  3480  0104D8  0E00               	movlw	0
  3481  0104DA  0100               	movlb	0	; () banked
  3482  0104DC  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3483  0104DE  0E08               	movlw	8
  3484  0104E0  6FF9               	movwf	_TimerX& (0+255),b
  3485                           
  3486                           ;main.c: 158: while (StepRotate > 0) {
  3487  0104E2  D15A               	goto	l2343
  3488  0104E4                     
  3489                           ; BSR set to: 0
  3490                           ;main.c: 159: StepRotate--;
  3491                           
  3492                           ; BSR set to: 0
  3493  0104E4  0100               	movlb	0	; () banked
  3494  0104E6  0771               	decf	_StepRotate& (0+255),f,b
  3495  0104E8  A0D8               	btfss	status,0,c
  3496  0104EA  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3497                           
  3498                           ; BSR set to: 0
  3499                           ;main.c: 160: ADC_Start(&ADC_AN0);
  3500  0104EC  0EB5               	movlw	low _ADC_AN0
  3501  0104EE  0100               	movlb	0	; () banked
  3502  0104F0  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3503  0104F2  0E00               	movlw	high _ADC_AN0
  3504  0104F4  0100               	movlb	0	; () banked
  3505  0104F6  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3506  0104F8  EC30  F0A8         	call	_ADC_Start	;wreg free
  3507                           
  3508                           ;main.c: 161: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3509  0104FC  0EB5               	movlw	low _ADC_AN0
  3510  0104FE  0100               	movlb	0	; () banked
  3511  010500  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3512  010502  0E00               	movlw	high _ADC_AN0
  3513  010504  0100               	movlb	0	; () banked
  3514  010506  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3515  010508  ECED  F09D         	call	_ADC_Voltage	;wreg free
  3516  01050C  C0E1  F3F6         	movff	?_ADC_Voltage,_findClosestWall$15600
  3517  010510  C0E2  F3F7         	movff	?_ADC_Voltage+1,_findClosestWall$15600+1
  3518  010514  C0E3  F3F8         	movff	?_ADC_Voltage+2,_findClosestWall$15600+2
  3519  010518  C0E4  F3F9         	movff	?_ADC_Voltage+3,_findClosestWall$15600+3
  3520                           
  3521                           ;main.c: 161: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3522  01051C  C3F6  F0BE         	movff	_findClosestWall$15600,___fldiv@a
  3523  010520  C3F7  F0BF         	movff	_findClosestWall$15600+1,___fldiv@a+1
  3524  010524  C3F8  F0C0         	movff	_findClosestWall$15600+2,___fldiv@a+2
  3525  010528  C3F9  F0C1         	movff	_findClosestWall$15600+3,___fldiv@a+3
  3526  01052C  0E00               	movlw	0
  3527  01052E  0100               	movlb	0	; () banked
  3528  010530  6FBA               	movwf	___fldiv@b& (0+255),b
  3529  010532  0E00               	movlw	0
  3530  010534  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3531  010536  0E6C               	movlw	108
  3532  010538  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3533  01053A  0E42               	movlw	66
  3534  01053C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3535  01053E  EC89  F088         	call	___fldiv	;wreg free
  3536  010542  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3537  010546  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3538  01054A  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3539  01054E  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3540  010552  EC8C  F09B         	call	___fltol	;wreg free
  3541  010556  C0F3  F06D         	movff	?___fltol,_IRValue
  3542  01055A  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3543                           
  3544                           ;main.c: 162: if (MXK_SwitchTo(eMXK_HMI)) {
  3545  01055E  0E01               	movlw	1
  3546  010560  EC9E  F0AF         	call	_MXK_SwitchTo
  3547  010564  0900               	iorlw	0
  3548  010566  B4D8               	btfsc	status,2,c
  3549  010568  D00E               	goto	l2332
  3550                           
  3551                           ;main.c: 163: HMI_SetNumber(IRValue);
  3552  01056A  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3553  01056E  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3554  010572  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
  3555                           
  3556                           ;main.c: 164: HMI_Render();
  3557  010576  ECFF  F0AF         	call	_HMI_Render	;wreg free
  3558                           
  3559                           ;main.c: 165: if (MXK_Release())
  3560  01057A  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3561  01057E  0900               	iorlw	0
  3562  010580  A4D8               	btfss	status,2,c
  3563                           
  3564                           ;main.c: 166: MXK_Dequeue();
  3565  010582  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3566  010586                     l2332:
  3567                           
  3568                           ;main.c: 167: }
  3569                           ;main.c: 168: if (IRValue < MinDist) {
  3570  010586  0100               	movlb	0	; () banked
  3571  010588  51FB               	movf	_MinDist& (0+255),w,b
  3572  01058A  0100               	movlb	0	; () banked
  3573  01058C  5D6D               	subwf	_IRValue& (0+255),w,b
  3574  01058E  0100               	movlb	0	; () banked
  3575  010590  516E               	movf	(_IRValue+1)& (0+255),w,b
  3576  010592  0A80               	xorlw	128
  3577  010594  0103               	movlb	3	; () banked
  3578  010596  6FF4               	movwf	??_findClosestWall& (0+255),b
  3579  010598  0100               	movlb	0	; () banked
  3580  01059A  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3581  01059C  0A80               	xorlw	128
  3582  01059E  0103               	movlb	3	; () banked
  3583  0105A0  59F4               	subwfb	??_findClosestWall& (0+255),w,b
  3584  0105A2  B0D8               	btfsc	status,0,c
  3585  0105A4  D008               	goto	l2333
  3586                           
  3587                           ; BSR set to: 3
  3588                           ;main.c: 169: MinDist = IRValue;
  3589  0105A6  C06D  F0FB         	movff	_IRValue,_MinDist
  3590  0105AA  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3591                           
  3592                           ;main.c: 170: Stepstomin = StepRotate;
  3593  0105AE  C071  F06F         	movff	_StepRotate,_Stepstomin
  3594  0105B2  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3595  0105B6                     l2333:
  3596                           
  3597                           ; BSR set to: 3
  3598                           ;main.c: 171: }
  3599                           ;main.c: 172: if (MXK_SwitchTo(eMXK_Motor)) {
  3600                           
  3601                           ; BSR set to: 3
  3602  0105B6  0E08               	movlw	8
  3603  0105B8  EC9E  F0AF         	call	_MXK_SwitchTo
  3604  0105BC  0900               	iorlw	0
  3605  0105BE  B4D8               	btfsc	status,2,c
  3606  0105C0  D01F               	goto	l2335
  3607                           
  3608                           ;main.c: 173: Motor_Speed(&Stepper, (100));
  3609  0105C2  0EAF               	movlw	low _Stepper
  3610  0105C4  0100               	movlb	0	; () banked
  3611  0105C6  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3612  0105C8  0E00               	movlw	high _Stepper
  3613  0105CA  0100               	movlb	0	; () banked
  3614  0105CC  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3615  0105CE  0E00               	movlw	0
  3616  0105D0  0100               	movlb	0	; () banked
  3617  0105D2  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3618  0105D4  0E64               	movlw	100
  3619  0105D6  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3620  0105D8  ECB2  F0B1         	call	_Motor_Speed	;wreg free
  3621                           
  3622                           ;main.c: 174: Motor_Move(&Stepper, -1);
  3623  0105DC  0EAF               	movlw	low _Stepper
  3624  0105DE  0100               	movlb	0	; () banked
  3625  0105E0  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3626  0105E2  0E00               	movlw	high _Stepper
  3627  0105E4  0100               	movlb	0	; () banked
  3628  0105E6  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3629  0105E8  0EFF               	movlw	255
  3630  0105EA  0100               	movlb	0	; () banked
  3631  0105EC  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3632  0105EE  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3633  0105F0  ECB6  F0B0         	call	_Motor_Move	;wreg free
  3634                           
  3635                           ;main.c: 175: if (MXK_Release())
  3636  0105F4  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3637  0105F8  0900               	iorlw	0
  3638  0105FA  A4D8               	btfss	status,2,c
  3639                           
  3640                           ;main.c: 176: MXK_Dequeue();
  3641  0105FC  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3642  010600                     l2335:
  3643                           
  3644                           ;main.c: 177: }
  3645                           ;main.c: 178: TimerX = 10;
  3646  010600  0E00               	movlw	0
  3647  010602  0100               	movlb	0	; () banked
  3648  010604  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3649  010606  0E0A               	movlw	10
  3650  010608  6FF9               	movwf	_TimerX& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 179: if (TimerX > 0) {
  3654  01060A  0100               	movlb	0	; () banked
  3655  01060C  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3656  01060E  D063               	goto	u13930
  3657  010610  0100               	movlb	0	; () banked
  3658  010612  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3659  010614  E156               	bnz	l16428
  3660  010616  0100               	movlb	0	; () banked
  3661  010618  05F9               	decf	_TimerX& (0+255),w,b
  3662  01061A  B0D8               	btfsc	status,0,c
  3663  01061C  D052               	goto	l2337
  3664  01061E  D05B               	goto	u13930
  3665  010620                     l16410:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;main.c: 181: ADC_Start(&ADC_AN0);
  3669  010620  0EB5               	movlw	low _ADC_AN0
  3670  010622  0100               	movlb	0	; () banked
  3671  010624  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3672  010626  0E00               	movlw	high _ADC_AN0
  3673  010628  0100               	movlb	0	; () banked
  3674  01062A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3675  01062C  EC30  F0A8         	call	_ADC_Start	;wreg free
  3676                           
  3677                           ;main.c: 182: if (MXK_SwitchTo(eMXK_HMI)) {
  3678  010630  0E01               	movlw	1
  3679  010632  EC9E  F0AF         	call	_MXK_SwitchTo
  3680  010636  0900               	iorlw	0
  3681  010638  B4D8               	btfsc	status,2,c
  3682  01063A  D00E               	goto	l2340
  3683                           
  3684                           ;main.c: 183: HMI_SetNumber(IRValue);
  3685  01063C  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3686  010640  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3687  010644  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
  3688                           
  3689                           ;main.c: 184: HMI_Render();
  3690  010648  ECFF  F0AF         	call	_HMI_Render	;wreg free
  3691                           
  3692                           ;main.c: 185: if (MXK_Release())
  3693  01064C  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3694  010650  0900               	iorlw	0
  3695  010652  A4D8               	btfss	status,2,c
  3696                           
  3697                           ;main.c: 186: MXK_Dequeue();
  3698  010654  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3699  010658                     l2340:
  3700                           
  3701                           ;main.c: 187: }
  3702                           ;main.c: 188: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3703  010658  0EB5               	movlw	low _ADC_AN0
  3704  01065A  0100               	movlb	0	; () banked
  3705  01065C  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3706  01065E  0E00               	movlw	high _ADC_AN0
  3707  010660  0100               	movlb	0	; () banked
  3708  010662  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3709  010664  ECED  F09D         	call	_ADC_Voltage	;wreg free
  3710  010668  C0E1  F3F6         	movff	?_ADC_Voltage,_findClosestWall$15600
  3711  01066C  C0E2  F3F7         	movff	?_ADC_Voltage+1,_findClosestWall$15600+1
  3712  010670  C0E3  F3F8         	movff	?_ADC_Voltage+2,_findClosestWall$15600+2
  3713  010674  C0E4  F3F9         	movff	?_ADC_Voltage+3,_findClosestWall$15600+3
  3714                           
  3715                           ;main.c: 187: }
  3716                           ;main.c: 188: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3717  010678  C3F6  F0BE         	movff	_findClosestWall$15600,___fldiv@a
  3718  01067C  C3F7  F0BF         	movff	_findClosestWall$15600+1,___fldiv@a+1
  3719  010680  C3F8  F0C0         	movff	_findClosestWall$15600+2,___fldiv@a+2
  3720  010684  C3F9  F0C1         	movff	_findClosestWall$15600+3,___fldiv@a+3
  3721  010688  0E00               	movlw	0
  3722  01068A  0100               	movlb	0	; () banked
  3723  01068C  6FBA               	movwf	___fldiv@b& (0+255),b
  3724  01068E  0E00               	movlw	0
  3725  010690  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3726  010692  0E6C               	movlw	108
  3727  010694  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3728  010696  0E42               	movlw	66
  3729  010698  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3730  01069A  EC89  F088         	call	___fldiv	;wreg free
  3731  01069E  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3732  0106A2  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3733  0106A6  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3734  0106AA  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3735  0106AE  EC8C  F09B         	call	___fltol	;wreg free
  3736  0106B2  C0F3  F06D         	movff	?___fltol,_IRValue
  3737  0106B6  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3738                           
  3739                           ;main.c: 189: TimerX--;
  3740  0106BA  0100               	movlb	0	; () banked
  3741  0106BC  07F9               	decf	_TimerX& (0+255),f,b
  3742  0106BE  A0D8               	btfss	status,0,c
  3743  0106C0  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3744  0106C2                     l2337:
  3745  0106C2                     l16428:
  3746                           
  3747                           ; BSR set to: 0
  3748  0106C2  0100               	movlb	0	; () banked
  3749  0106C4  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3750  0106C6  D007               	goto	u13930
  3751  0106C8  0100               	movlb	0	; () banked
  3752  0106CA  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3753  0106CC  E1A9               	bnz	l16410
  3754  0106CE  0100               	movlb	0	; () banked
  3755  0106D0  05F9               	decf	_TimerX& (0+255),w,b
  3756  0106D2  B0D8               	btfsc	status,0,c
  3757  0106D4  D7A5               	goto	l2338
  3758  0106D6                     u13930:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 190: }
  3762                           ;main.c: 191: }
  3763                           ;main.c: 192: angleToClosestWall = Stepstomin * 0.67;
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ; BSR set to: 0
  3768  0106D6  0E1F               	movlw	31
  3769  0106D8  0100               	movlb	0	; () banked
  3770  0106DA  6FCC               	movwf	___flmul@a& (0+255),b
  3771  0106DC  0E85               	movlw	133
  3772  0106DE  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3773  0106E0  0E2B               	movlw	43
  3774  0106E2  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3775  0106E4  0E3F               	movlw	63
  3776  0106E6  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3777  0106E8  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3778  0106EC  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3779  0106F0  0100               	movlb	0	; () banked
  3780  0106F2  0E00               	movlw	0
  3781  0106F4  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3782  0106F6  0EFF               	movlw	-1
  3783  0106F8  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3784  0106FA  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3785  0106FC  0E01               	movlw	1
  3786  0106FE  ECCD  F091         	call	___xxtofl
  3787  010702  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3788  010706  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3789  01070A  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3790  01070E  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3791  010712  EC00  F080         	call	___flmul	;wreg free
  3792  010716  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3793  01071A  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3794  01071E  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3795  010722  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3796  010726  EC8C  F09B         	call	___fltol	;wreg free
  3797  01072A  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3798  01072E  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3799                           
  3800                           ;main.c: 193: if (MXK_SwitchTo(eMXK_HMI)) {
  3801  010732  0E01               	movlw	1
  3802  010734  EC9E  F0AF         	call	_MXK_SwitchTo
  3803  010738  0900               	iorlw	0
  3804  01073A  B4D8               	btfsc	status,2,c
  3805  01073C  D02D               	goto	l2343
  3806                           
  3807                           ;main.c: 194: printf("%c", (char)35);
  3808  01073E  0EFB               	movlw	low STR_1
  3809  010740  0100               	movlb	0	; () banked
  3810  010742  6FCF               	movwf	printf@f& (0+255),b
  3811  010744  0EFF               	movlw	high STR_1
  3812  010746  0100               	movlb	0	; () banked
  3813  010748  6FD0               	movwf	(printf@f+1)& (0+255),b
  3814  01074A  0E00               	movlw	0
  3815  01074C  0100               	movlb	0	; () banked
  3816  01074E  6FD2               	movwf	(?_printf+3)& (0+255),b
  3817  010750  0E23               	movlw	35
  3818  010752  6FD1               	movwf	(?_printf+2)& (0+255),b
  3819  010754  ECB4  F092         	call	_printf	;wreg free
  3820                           
  3821                           ;main.c: 195: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3822  010758  0E59               	movlw	low STR_2
  3823  01075A  0100               	movlb	0	; () banked
  3824  01075C  6FCF               	movwf	printf@f& (0+255),b
  3825  01075E  0EFF               	movlw	high STR_2
  3826  010760  0100               	movlb	0	; () banked
  3827  010762  6FD0               	movwf	(printf@f+1)& (0+255),b
  3828  010764  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3829  010768  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3830  01076C  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3831  010770  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3832  010774  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3833  010778  0100               	movlb	0	; () banked
  3834  01077A  6BD6               	clrf	(?_printf+7)& (0+255),b
  3835  01077C  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3836  010780  0100               	movlb	0	; () banked
  3837  010782  6BD8               	clrf	(?_printf+9)& (0+255),b
  3838  010784  ECB4  F092         	call	_printf	;wreg free
  3839                           
  3840                           ;main.c: 196: Console_Render();
  3841  010788  ECC8  F08F         	call	_Console_Render	;wreg free
  3842                           
  3843                           ;main.c: 197: if (MXK_Release())
  3844  01078C  ECCC  F0B2         	call	_MXK_Release	;wreg free
  3845  010790  0900               	iorlw	0
  3846  010792  A4D8               	btfss	status,2,c
  3847                           
  3848                           ;main.c: 198: MXK_Dequeue();
  3849  010794  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  3850  010798                     l2343:
  3851  010798  0100               	movlb	0	; () banked
  3852  01079A  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3853  01079C  D007               	goto	u13960
  3854  01079E  0100               	movlb	0	; () banked
  3855  0107A0  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3856  0107A2  E103               	bnz	u13961
  3857  0107A4  0100               	movlb	0	; () banked
  3858  0107A6  0571               	decf	_StepRotate& (0+255),w,b
  3859  0107A8  B0D8               	btfsc	status,0,c
  3860  0107AA                     u13961:
  3861  0107AA  D69C               	goto	l2330
  3862  0107AC                     u13960:
  3863                           
  3864                           ; BSR set to: 0
  3865                           ;main.c: 199: }
  3866                           ;main.c: 200: }
  3867                           ;main.c: 201: Motor_Speed(&Stepper, (200));
  3868                           
  3869                           ; BSR set to: 0
  3870  0107AC  0EAF               	movlw	low _Stepper
  3871  0107AE  0100               	movlb	0	; () banked
  3872  0107B0  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3873  0107B2  0E00               	movlw	high _Stepper
  3874  0107B4  0100               	movlb	0	; () banked
  3875  0107B6  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3876  0107B8  0E00               	movlw	0
  3877  0107BA  0100               	movlb	0	; () banked
  3878  0107BC  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3879  0107BE  0EC8               	movlw	200
  3880  0107C0  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3881  0107C2  ECB2  F0B1         	call	_Motor_Speed	;wreg free
  3882                           
  3883                           ;main.c: 202: Motor_Move(&Stepper, 400);
  3884  0107C6  0EAF               	movlw	low _Stepper
  3885  0107C8  0100               	movlb	0	; () banked
  3886  0107CA  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3887  0107CC  0E00               	movlw	high _Stepper
  3888  0107CE  0100               	movlb	0	; () banked
  3889  0107D0  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3890  0107D2  0E01               	movlw	1
  3891  0107D4  0100               	movlb	0	; () banked
  3892  0107D6  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3893  0107D8  0E90               	movlw	144
  3894  0107DA  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3895  0107DC  ECB6  F0B0         	call	_Motor_Move	;wreg free
  3896                           
  3897                           ;main.c: 203: angleToClosestWall = angleToClosestWall - 67;
  3898  0107E0  0EBD               	movlw	189
  3899  0107E2  0100               	movlb	0	; () banked
  3900  0107E4  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3901  0107E6  0100               	movlb	0	; () banked
  3902  0107E8  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3903  0107EA  0EFF               	movlw	255
  3904  0107EC  0100               	movlb	0	; () banked
  3905  0107EE  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3906  0107F0  0100               	movlb	0	; () banked
  3907  0107F2  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3908                           
  3909                           ; BSR set to: 0
  3910                           ;main.c: 204: if(angleToClosestWall < 0) {
  3911  0107F4  0100               	movlb	0	; () banked
  3912  0107F6  AF6C               	btfss	(_angleToClosestWall+1)& (0+255),7,b
  3913  0107F8  D027               	goto	l2345
  3914                           
  3915                           ; BSR set to: 0
  3916                           ;main.c: 205: angleToClosestWall = angleToClosestWall + (2*angleToClosestWall);
  3917  0107FA  C06B  F3F4         	movff	_angleToClosestWall,??_findClosestWall
  3918  0107FE  C06C  F3F5         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3919  010802  90D8               	bcf	status,0,c
  3920  010804  0103               	movlb	3	; () banked
  3921  010806  37F4               	rlcf	??_findClosestWall& (0+255),f,b
  3922  010808  37F5               	rlcf	(??_findClosestWall+1)& (0+255),f,b
  3923  01080A  0100               	movlb	0	; () banked
  3924  01080C  516B               	movf	_angleToClosestWall& (0+255),w,b
  3925  01080E  0103               	movlb	3	; () banked
  3926  010810  25F4               	addwf	??_findClosestWall& (0+255),w,b
  3927  010812  0100               	movlb	0	; () banked
  3928  010814  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3929  010816  0100               	movlb	0	; () banked
  3930  010818  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  3931  01081A  0103               	movlb	3	; () banked
  3932  01081C  21F5               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3933  01081E  0100               	movlb	0	; () banked
  3934  010820  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3935                           
  3936                           ;main.c: 206: angleToClosestWall = 270 - angleToClosestWall;
  3937  010822  C06B  F3F4         	movff	_angleToClosestWall,??_findClosestWall
  3938  010826  C06C  F3F5         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3939  01082A  0103               	movlb	3	; () banked
  3940  01082C  1FF4               	comf	??_findClosestWall& (0+255),f,b
  3941  01082E  1FF5               	comf	(??_findClosestWall+1)& (0+255),f,b
  3942  010830  4BF4               	infsnz	??_findClosestWall& (0+255),f,b
  3943  010832  2BF5               	incf	(??_findClosestWall+1)& (0+255),f,b
  3944  010834  0E0E               	movlw	14
  3945  010836  0103               	movlb	3	; () banked
  3946  010838  25F4               	addwf	??_findClosestWall& (0+255),w,b
  3947  01083A  0100               	movlb	0	; () banked
  3948  01083C  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3949  01083E  0E01               	movlw	1
  3950  010840  0103               	movlb	3	; () banked
  3951  010842  21F5               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3952  010844  0100               	movlb	0	; () banked
  3953  010846  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3954  010848                     l2345:
  3955                           
  3956                           ; BSR set to: 0
  3957                           ;main.c: 207: }
  3958                           ;main.c: 208: if (MXK_SwitchTo(eMXK_HMI)) {
  3959                           
  3960                           ; BSR set to: 0
  3961  010848  0E01               	movlw	1
  3962  01084A  EC9E  F0AF         	call	_MXK_SwitchTo
  3963  01084E  0900               	iorlw	0
  3964  010850  B4D8               	btfsc	status,2,c
  3965  010852  D02D               	goto	l2347
  3966                           
  3967                           ;main.c: 209: printf("%c", (char)35);
  3968  010854  0EFB               	movlw	low STR_1
  3969  010856  0100               	movlb	0	; () banked
  3970  010858  6FCF               	movwf	printf@f& (0+255),b
  3971  01085A  0EFF               	movlw	high STR_1
  3972  01085C  0100               	movlb	0	; () banked
  3973  01085E  6FD0               	movwf	(printf@f+1)& (0+255),b
  3974  010860  0E00               	movlw	0
  3975  010862  0100               	movlb	0	; () banked
  3976  010864  6FD2               	movwf	(?_printf+3)& (0+255),b
  3977  010866  0E23               	movlw	35
  3978  010868  6FD1               	movwf	(?_printf+2)& (0+255),b
  3979  01086A  ECB4  F092         	call	_printf	;wreg free
  3980                           
  3981                           ;main.c: 210: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3982  01086E  0E59               	movlw	low STR_2
  3983  010870  0100               	movlb	0	; () banked
  3984  010872  6FCF               	movwf	printf@f& (0+255),b
  3985  010874  0EFF               	movlw	high STR_2
  3986  010876  0100               	movlb	0	; () banked
  3987  010878  6FD0               	movwf	(printf@f+1)& (0+255),b
  3988  01087A  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3989  01087E  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3990  010882  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3991  010886  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3992  01088A  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3993  01088E  0100               	movlb	0	; () banked
  3994  010890  6BD6               	clrf	(?_printf+7)& (0+255),b
  3995  010892  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3996  010896  0100               	movlb	0	; () banked
  3997  010898  6BD8               	clrf	(?_printf+9)& (0+255),b
  3998  01089A  ECB4  F092         	call	_printf	;wreg free
  3999                           
  4000                           ;main.c: 211: Console_Render();
  4001  01089E  ECC8  F08F         	call	_Console_Render	;wreg free
  4002                           
  4003                           ;main.c: 212: if (MXK_Release())
  4004  0108A2  ECCC  F0B2         	call	_MXK_Release	;wreg free
  4005  0108A6  0900               	iorlw	0
  4006  0108A8  A4D8               	btfss	status,2,c
  4007                           
  4008                           ;main.c: 213: MXK_Dequeue();
  4009  0108AA  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  4010  0108AE                     l2347:
  4011                           
  4012                           ;main.c: 214: }
  4013                           ;main.c: 215: delay_ms(1000);
  4014  0108AE  0E03               	movlw	3
  4015  0108B0  0100               	movlb	0	; () banked
  4016  0108B2  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4017  0108B4  0EE8               	movlw	232
  4018  0108B6  6FBA               	movwf	delay_ms@ms& (0+255),b
  4019  0108B8  ECA7  F0AB         	call	_delay_ms	;wreg free
  4020                           
  4021                           ;main.c: 216: if(!(angleToClosestWall > 63 && angleToClosestWall < 72)){
  4022  0108BC  0100               	movlb	0	; () banked
  4023  0108BE  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4024  0108C0  D013               	goto	u14010
  4025  0108C2  0100               	movlb	0	; () banked
  4026  0108C4  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4027  0108C6  E105               	bnz	u14000
  4028  0108C8  0E40               	movlw	64
  4029  0108CA  0100               	movlb	0	; () banked
  4030  0108CC  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4031  0108CE  A0D8               	btfss	status,0,c
  4032  0108D0  D00B               	goto	u14010
  4033  0108D2                     u14000:
  4034                           
  4035                           ; BSR set to: 0
  4036  0108D2  0100               	movlb	0	; () banked
  4037  0108D4  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  4038  0108D6  0012               	return	
  4039  0108D8  0100               	movlb	0	; () banked
  4040  0108DA  516C               	movf	(_angleToClosestWall+1)& (0+255),w,b
  4041  0108DC  E105               	bnz	l16466
  4042  0108DE  0E48               	movlw	72
  4043  0108E0  0100               	movlb	0	; () banked
  4044  0108E2  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  4045  0108E4  A0D8               	btfss	status,0,c
  4046  0108E6  0012               	return	
  4047  0108E8                     u14010:
  4048  0108E8                     l16466:
  4049                           
  4050                           ; BSR set to: 0
  4051                           ;main.c: 217: irobot_rotate(0, 270 - angleToClosestWall, 200);
  4052  0108E8  C06B  F3F4         	movff	_angleToClosestWall,??_findClosestWall
  4053  0108EC  C06C  F3F5         	movff	_angleToClosestWall+1,??_findClosestWall+1
  4054  0108F0  0103               	movlb	3	; () banked
  4055  0108F2  1FF4               	comf	??_findClosestWall& (0+255),f,b
  4056  0108F4  1FF5               	comf	(??_findClosestWall+1)& (0+255),f,b
  4057  0108F6  4BF4               	infsnz	??_findClosestWall& (0+255),f,b
  4058  0108F8  2BF5               	incf	(??_findClosestWall+1)& (0+255),f,b
  4059  0108FA  0E0E               	movlw	14
  4060  0108FC  0103               	movlb	3	; () banked
  4061  0108FE  25F4               	addwf	??_findClosestWall& (0+255),w,b
  4062  010900  0100               	movlb	0	; () banked
  4063  010902  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4064  010904  0E01               	movlw	1
  4065  010906  0103               	movlb	3	; () banked
  4066  010908  21F5               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  4067  01090A  0100               	movlb	0	; () banked
  4068  01090C  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4069  01090E  0E00               	movlw	0
  4070  010910  0100               	movlb	0	; () banked
  4071  010912  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4072  010914  0EC8               	movlw	200
  4073  010916  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4074  010918  0E00               	movlw	0
  4075  01091A  EC49  F0A3         	call	_irobot_rotate
  4076  01091E  0012               	return	
  4077  010920                     __end_of_findClosestWall:
  4078                           	opt stack 0
  4079                           tblptru	equ	0xFF8
  4080                           tblptrh	equ	0xFF7
  4081                           tblptrl	equ	0xFF6
  4082                           tablat	equ	0xFF5
  4083                           postinc0	equ	0xFEE
  4084                           wreg	equ	0xFE8
  4085                           postdec1	equ	0xFE5
  4086                           fsr1h	equ	0xFE2
  4087                           fsr1l	equ	0xFE1
  4088                           status	equ	0xFD8
  4089                           
  4090 ;; *************** function _mode3 *****************
  4091 ;; Defined at:
  4092 ;;		line 316 in file "main.c"
  4093 ;; Parameters:    Size  Location     Type
  4094 ;;		None
  4095 ;; Auto vars:     Size  Location     Type
  4096 ;;		None
  4097 ;; Return value:  Size  Location     Type
  4098 ;;                  1    wreg      void 
  4099 ;; Registers used:
  4100 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4101 ;; Tracked objects:
  4102 ;;		On entry : 0/0
  4103 ;;		On exit  : 0/0
  4104 ;;		Unchanged: 0/0
  4105 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4106 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4107 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4108 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4109 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4110 ;;Total ram usage:        0 bytes
  4111 ;; Hardware stack levels used:    1
  4112 ;; Hardware stack levels required when called:   17
  4113 ;; This function calls:
  4114 ;;		_move_and_rotate
  4115 ;;		_safeToGo
  4116 ;; This function is called by:
  4117 ;;		_main
  4118 ;; This function uses a non-reentrant model
  4119 ;;
  4120                           
  4121                           	psect	text3
  4122  0166AA                     __ptext3:
  4123                           	opt stack 0
  4124  0166AA                     _mode3:
  4125                           	opt stack 13
  4126                           
  4127                           ;main.c: 317: safeToGo();
  4128                           
  4129                           ;incstack = 0
  4130  0166AA  EC5D  F0AE         	call	_safeToGo	;wreg free
  4131                           
  4132                           ;main.c: 318: move_and_rotate();
  4133  0166AE  EC72  F0A8         	call	_move_and_rotate	;wreg free
  4134                           
  4135                           ;main.c: 319: move_and_rotate();
  4136  0166B2  EC72  F0A8         	call	_move_and_rotate	;wreg free
  4137                           
  4138                           ;main.c: 320: move_and_rotate();
  4139  0166B6  EC72  F0A8         	call	_move_and_rotate	;wreg free
  4140                           
  4141                           ;main.c: 321: move_and_rotate();
  4142  0166BA  EC72  F0A8         	call	_move_and_rotate	;wreg free
  4143  0166BE  0012               	return		;funcret
  4144  0166C0                     __end_of_mode3:
  4145                           	opt stack 0
  4146                           tblptru	equ	0xFF8
  4147                           tblptrh	equ	0xFF7
  4148                           tblptrl	equ	0xFF6
  4149                           tablat	equ	0xFF5
  4150                           postinc0	equ	0xFEE
  4151                           wreg	equ	0xFE8
  4152                           postdec1	equ	0xFE5
  4153                           fsr1h	equ	0xFE2
  4154                           fsr1l	equ	0xFE1
  4155                           status	equ	0xFD8
  4156                           
  4157 ;; *************** function _move_and_rotate *****************
  4158 ;; Defined at:
  4159 ;;		line 137 in file "main.c"
  4160 ;; Parameters:    Size  Location     Type
  4161 ;;		None
  4162 ;; Auto vars:     Size  Location     Type
  4163 ;;		None
  4164 ;; Return value:  Size  Location     Type
  4165 ;;                  1    wreg      void 
  4166 ;; Registers used:
  4167 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4168 ;; Tracked objects:
  4169 ;;		On entry : 0/0
  4170 ;;		On exit  : 0/0
  4171 ;;		Unchanged: 0/0
  4172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4174 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4175 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4176 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;Total ram usage:        0 bytes
  4178 ;; Hardware stack levels used:    1
  4179 ;; Hardware stack levels required when called:   12
  4180 ;; This function calls:
  4181 ;;		_delay_ms
  4182 ;;		_irobot_move_straight
  4183 ;;		_irobot_rotate
  4184 ;;		_irobot_stop_motion
  4185 ;;		_update_distance
  4186 ;; This function is called by:
  4187 ;;		_mode3
  4188 ;; This function uses a non-reentrant model
  4189 ;;
  4190                           
  4191                           	psect	text4
  4192  0150E4                     __ptext4:
  4193                           	opt stack 0
  4194  0150E4                     _move_and_rotate:
  4195                           	opt stack 17
  4196                           
  4197                           ;main.c: 138: dist = 0;
  4198                           
  4199                           ;incstack = 0
  4200  0150E4  0E00               	movlw	0
  4201  0150E6  0100               	movlb	0	; () banked
  4202  0150E8  6F6A               	movwf	(_dist+1)& (0+255),b
  4203  0150EA  0E00               	movlw	0
  4204  0150EC  6F69               	movwf	_dist& (0+255),b
  4205                           
  4206                           ; BSR set to: 0
  4207                           ;main.c: 139: irobot_move_straight(100);
  4208  0150EE  0E00               	movlw	0
  4209  0150F0  0100               	movlb	0	; () banked
  4210  0150F2  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4211  0150F4  0E64               	movlw	100
  4212  0150F6  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4213  0150F8  ECF5  F0B2         	call	_irobot_move_straight	;wreg free
  4214                           
  4215                           ;main.c: 140: while (dist < 1000) {
  4216  0150FC  D00A               	goto	l2323
  4217  0150FE                     
  4218                           ;main.c: 141: update_distance();
  4219  0150FE  EC74  F0B3         	call	_update_distance	;wreg free
  4220                           
  4221                           ;main.c: 142: dist += iRDistance;
  4222  015102  0100               	movlb	0	; () banked
  4223  015104  5179               	movf	_iRDistance& (0+255),w,b
  4224  015106  0100               	movlb	0	; () banked
  4225  015108  2769               	addwf	_dist& (0+255),f,b
  4226  01510A  0100               	movlb	0	; () banked
  4227  01510C  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4228  01510E  0100               	movlb	0	; () banked
  4229  015110  236A               	addwfc	(_dist+1)& (0+255),f,b
  4230  015112                     l2323:
  4231                           
  4232                           ; BSR set to: 0
  4233  015112  0100               	movlb	0	; () banked
  4234  015114  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4235  015116  D7F3               	goto	l2324
  4236  015118  0EE8               	movlw	232
  4237  01511A  0100               	movlb	0	; () banked
  4238  01511C  5D69               	subwf	_dist& (0+255),w,b
  4239  01511E  0E03               	movlw	3
  4240  015120  0100               	movlb	0	; () banked
  4241  015122  596A               	subwfb	(_dist+1)& (0+255),w,b
  4242  015124  A0D8               	btfss	status,0,c
  4243  015126  D7EB               	goto	l2324
  4244                           
  4245                           ; BSR set to: 0
  4246                           ;main.c: 143: }
  4247                           ;main.c: 144: irobot_stop_motion(0);
  4248                           
  4249                           ; BSR set to: 0
  4250  015128  0E00               	movlw	0
  4251  01512A  EC13  F0AF         	call	_irobot_stop_motion
  4252                           
  4253                           ;main.c: 145: delay_ms(100);
  4254  01512E  0E00               	movlw	0
  4255  015130  0100               	movlb	0	; () banked
  4256  015132  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4257  015134  0E64               	movlw	100
  4258  015136  6FBA               	movwf	delay_ms@ms& (0+255),b
  4259  015138  ECA7  F0AB         	call	_delay_ms	;wreg free
  4260                           
  4261                           ;main.c: 146: irobot_rotate(0, 67, 200);
  4262  01513C  0E00               	movlw	0
  4263  01513E  0100               	movlb	0	; () banked
  4264  015140  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4265  015142  0E43               	movlw	67
  4266  015144  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4267  015146  0E00               	movlw	0
  4268  015148  0100               	movlb	0	; () banked
  4269  01514A  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4270  01514C  0EC8               	movlw	200
  4271  01514E  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4272  015150  0E00               	movlw	0
  4273  015152  EC49  F0A3         	call	_irobot_rotate
  4274                           
  4275                           ;main.c: 147: delay_ms(100);
  4276  015156  0E00               	movlw	0
  4277  015158  0100               	movlb	0	; () banked
  4278  01515A  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4279  01515C  0E64               	movlw	100
  4280  01515E  6FBA               	movwf	delay_ms@ms& (0+255),b
  4281  015160  ECA7  F0AB         	call	_delay_ms	;wreg free
  4282  015164  0012               	return		;funcret
  4283  015166                     __end_of_move_and_rotate:
  4284                           	opt stack 0
  4285                           tblptru	equ	0xFF8
  4286                           tblptrh	equ	0xFF7
  4287                           tblptrl	equ	0xFF6
  4288                           tablat	equ	0xFF5
  4289                           postinc0	equ	0xFEE
  4290                           wreg	equ	0xFE8
  4291                           postdec1	equ	0xFE5
  4292                           fsr1h	equ	0xFE2
  4293                           fsr1l	equ	0xFE1
  4294                           status	equ	0xFD8
  4295                           
  4296 ;; *************** function _irobot_rotate *****************
  4297 ;; Defined at:
  4298 ;;		line 279 in file "Library/iRobotSerial.c"
  4299 ;; Parameters:    Size  Location     Type
  4300 ;;  isScript        1    wreg     unsigned char 
  4301 ;;  rotateAngle     2   29[BANK0 ] short 
  4302 ;;  rotateSpeed     2   31[BANK0 ] short 
  4303 ;; Auto vars:     Size  Location     Type
  4304 ;;  isScript        1   34[BANK0 ] unsigned char 
  4305 ;;  rotateDirect    2   37[BANK0 ] short 
  4306 ;;  angleTotal      2   35[BANK0 ] short 
  4307 ;; Return value:  Size  Location     Type
  4308 ;;                  1    wreg      void 
  4309 ;; Registers used:
  4310 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4311 ;; Tracked objects:
  4312 ;;		On entry : 0/0
  4313 ;;		On exit  : 0/0
  4314 ;;		Unchanged: 0/0
  4315 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4316 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4317 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4318 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4319 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4320 ;;Total ram usage:       10 bytes
  4321 ;; Hardware stack levels used:    1
  4322 ;; Hardware stack levels required when called:   11
  4323 ;; This function calls:
  4324 ;;		_irobot_move
  4325 ;;		_irobot_stop_motion
  4326 ;;		_update_angle
  4327 ;; This function is called by:
  4328 ;;		_move_and_rotate
  4329 ;;		_findClosestWall
  4330 ;;		_irobot_rotate_to
  4331 ;; This function uses a non-reentrant model
  4332 ;;
  4333                           
  4334                           	psect	text5
  4335  014692                     __ptext5:
  4336                           	opt stack 0
  4337  014692                     _irobot_rotate:
  4338                           	opt stack 17
  4339                           
  4340                           ;incstack = 0
  4341                           ;irobot_rotate@isScript stored from wreg
  4342  014692  0100               	movlb	0	; () banked
  4343  014694  6FDC               	movwf	irobot_rotate@isScript& (0+255),b
  4344                           
  4345                           ;iRobotSerial.c: 280: INT16 angleTotal = 0;
  4346  014696  0E00               	movlw	0
  4347  014698  0100               	movlb	0	; () banked
  4348  01469A  6FDE               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4349  01469C  0E00               	movlw	0
  4350  01469E  6FDD               	movwf	irobot_rotate@angleTotal& (0+255),b
  4351                           
  4352                           ; BSR set to: 0
  4353                           ;iRobotSerial.c: 281: INT16 rotateDirection;
  4354                           ;iRobotSerial.c: 283: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateDire
      +                          ction = iR_CONST_CW);
  4355  0146A0  0100               	movlb	0	; () banked
  4356  0146A2  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4357  0146A4  D00D               	goto	l2156
  4358  0146A6  0100               	movlb	0	; () banked
  4359  0146A8  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4360  0146AA  E104               	bnz	u11090
  4361  0146AC  0100               	movlb	0	; () banked
  4362  0146AE  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4363  0146B0  A0D8               	btfss	status,0,c
  4364  0146B2  D006               	goto	l2156
  4365  0146B4                     u11090:
  4366                           
  4367                           ; BSR set to: 0
  4368  0146B4  0E00               	movlw	0
  4369  0146B6  0100               	movlb	0	; () banked
  4370  0146B8  6FE0               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4371  0146BA  0E01               	movlw	1
  4372  0146BC  6FDF               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4373  0146BE  D003               	goto	l2158
  4374  0146C0                     l2156:
  4375                           
  4376                           ; BSR set to: 0
  4377  0146C0  0100               	movlb	0	; () banked
  4378  0146C2  69DF               	setf	irobot_rotate@rotateDirection& (0+255),b
  4379  0146C4  69E0               	setf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4380  0146C6                     l2158:
  4381                           
  4382                           ; BSR set to: 0
  4383                           ;iRobotSerial.c: 284: if (isScript) {
  4384                           
  4385                           ; BSR set to: 0
  4386  0146C6  0100               	movlb	0	; () banked
  4387  0146C8  51DC               	movf	irobot_rotate@isScript& (0+255),w,b
  4388  0146CA  0100               	movlb	0	; () banked
  4389  0146CC  B4D8               	btfsc	status,2,c
  4390  0146CE  D00C               	goto	l2159
  4391                           
  4392                           ; BSR set to: 0
  4393                           ;iRobotSerial.c: 285: irobot_move(1, rotateSpeed, rotateDirection);
  4394  0146D0  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4395  0146D4  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4396  0146D8  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4397  0146DC  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4398  0146E0  0E01               	movlw	1
  4399  0146E2  EC9A  F0A2         	call	_irobot_move
  4400                           
  4401                           ;iRobotSerial.c: 286: }
  4402  0146E6  0012               	return	
  4403  0146E8                     l2159:
  4404                           
  4405                           ;iRobotSerial.c: 287: else {
  4406                           ;iRobotSerial.c: 288: irobot_move(0, rotateSpeed, rotateDirection);
  4407  0146E8  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4408  0146EC  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4409  0146F0  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4410  0146F4  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4411  0146F8  0E00               	movlw	0
  4412  0146FA  EC9A  F0A2         	call	_irobot_move
  4413                           
  4414                           ;iRobotSerial.c: 289: while (angleTotal < rotateAngle) {
  4415  0146FE  D00A               	goto	l2161
  4416  014700                     
  4417                           ;iRobotSerial.c: 290: update_angle();
  4418  014700  EC7D  F0B3         	call	_update_angle	;wreg free
  4419                           
  4420                           ;iRobotSerial.c: 291: angleTotal += iRAngle;
  4421  014704  0100               	movlb	0	; () banked
  4422  014706  5177               	movf	_iRAngle& (0+255),w,b
  4423  014708  0100               	movlb	0	; () banked
  4424  01470A  27DD               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4425  01470C  0100               	movlb	0	; () banked
  4426  01470E  5178               	movf	(_iRAngle+1)& (0+255),w,b
  4427  014710  0100               	movlb	0	; () banked
  4428  014712  23DE               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4429  014714                     l2161:
  4430                           
  4431                           ; BSR set to: 0
  4432  014714  0100               	movlb	0	; () banked
  4433  014716  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4434  014718  0100               	movlb	0	; () banked
  4435  01471A  5DDD               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4436  01471C  0100               	movlb	0	; () banked
  4437  01471E  51DE               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4438  014720  0A80               	xorlw	128
  4439  014722  0100               	movlb	0	; () banked
  4440  014724  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4441  014726  0100               	movlb	0	; () banked
  4442  014728  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4443  01472A  0A80               	xorlw	128
  4444  01472C  0100               	movlb	0	; () banked
  4445  01472E  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4446  014730  A0D8               	btfss	status,0,c
  4447  014732  D7E6               	goto	l2162
  4448                           
  4449                           ; BSR set to: 0
  4450                           ;iRobotSerial.c: 292: }
  4451                           ;iRobotSerial.c: 293: irobot_stop_motion(0);
  4452                           
  4453                           ; BSR set to: 0
  4454  014734  0E00               	movlw	0
  4455  014736  EC13  F0AF         	call	_irobot_stop_motion
  4456  01473A  0012               	return	
  4457  01473C                     __end_of_irobot_rotate:
  4458                           	opt stack 0
  4459                           tblptru	equ	0xFF8
  4460                           tblptrh	equ	0xFF7
  4461                           tblptrl	equ	0xFF6
  4462                           tablat	equ	0xFF5
  4463                           postinc0	equ	0xFEE
  4464                           wreg	equ	0xFE8
  4465                           postdec1	equ	0xFE5
  4466                           fsr1h	equ	0xFE2
  4467                           fsr1l	equ	0xFE1
  4468                           status	equ	0xFD8
  4469                           
  4470 ;; *************** function _mode2 *****************
  4471 ;; Defined at:
  4472 ;;		line 292 in file "main.c"
  4473 ;; Parameters:    Size  Location     Type
  4474 ;;		None
  4475 ;; Auto vars:     Size  Location     Type
  4476 ;;  dist            2   44[BANK0 ] int 
  4477 ;; Return value:  Size  Location     Type
  4478 ;;                  1    wreg      void 
  4479 ;; Registers used:
  4480 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4481 ;; Tracked objects:
  4482 ;;		On entry : 0/0
  4483 ;;		On exit  : 0/0
  4484 ;;		Unchanged: 0/0
  4485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4486 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4487 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4490 ;;Total ram usage:        2 bytes
  4491 ;; Hardware stack levels used:    1
  4492 ;; Hardware stack levels required when called:   17
  4493 ;; This function calls:
  4494 ;;		_Console_Render
  4495 ;;		_MXK_Dequeue
  4496 ;;		_MXK_Release
  4497 ;;		_MXK_SwitchTo
  4498 ;;		_irobot_move_straight
  4499 ;;		_irobot_stop_motion
  4500 ;;		_printf
  4501 ;;		_safeToGo
  4502 ;;		_update_distance
  4503 ;; This function is called by:
  4504 ;;		_main
  4505 ;; This function uses a non-reentrant model
  4506 ;;
  4507                           
  4508                           	psect	text6
  4509  013A14                     __ptext6:
  4510                           	opt stack 0
  4511  013A14                     _mode2:
  4512                           	opt stack 13
  4513                           
  4514                           ;main.c: 293: safeToGo();
  4515                           
  4516                           ;incstack = 0
  4517  013A14  EC5D  F0AE         	call	_safeToGo	;wreg free
  4518                           
  4519                           ;main.c: 294: if (MXK_SwitchTo(eMXK_HMI)) {
  4520  013A18  0E01               	movlw	1
  4521  013A1A  EC9E  F0AF         	call	_MXK_SwitchTo
  4522  013A1E  0900               	iorlw	0
  4523  013A20  B4D8               	btfsc	status,2,c
  4524  013A22  0012               	return	
  4525                           
  4526                           ;main.c: 295: printf("%c", (char)35);
  4527  013A24  0EFB               	movlw	low STR_1
  4528  013A26  0100               	movlb	0	; () banked
  4529  013A28  6FCF               	movwf	printf@f& (0+255),b
  4530  013A2A  0EFF               	movlw	high STR_1
  4531  013A2C  0100               	movlb	0	; () banked
  4532  013A2E  6FD0               	movwf	(printf@f+1)& (0+255),b
  4533  013A30  0E00               	movlw	0
  4534  013A32  0100               	movlb	0	; () banked
  4535  013A34  6FD2               	movwf	(?_printf+3)& (0+255),b
  4536  013A36  0E23               	movlw	35
  4537  013A38  6FD1               	movwf	(?_printf+2)& (0+255),b
  4538  013A3A  ECB4  F092         	call	_printf	;wreg free
  4539                           
  4540                           ;main.c: 296: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4541  013A3E  0E95               	movlw	low STR_6
  4542  013A40  0100               	movlb	0	; () banked
  4543  013A42  6FCF               	movwf	printf@f& (0+255),b
  4544  013A44  0EFF               	movlw	high STR_6
  4545  013A46  0100               	movlb	0	; () banked
  4546  013A48  6FD0               	movwf	(printf@f+1)& (0+255),b
  4547  013A4A  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4548  013A4E  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4549  013A52  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4550  013A56  0100               	movlb	0	; () banked
  4551  013A58  6BD4               	clrf	(?_printf+5)& (0+255),b
  4552  013A5A  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4553  013A5E  0100               	movlb	0	; () banked
  4554  013A60  6BD6               	clrf	(?_printf+7)& (0+255),b
  4555  013A62  ECB4  F092         	call	_printf	;wreg free
  4556                           
  4557                           ;main.c: 297: Console_Render();
  4558  013A66  ECC8  F08F         	call	_Console_Render	;wreg free
  4559                           
  4560                           ;main.c: 299: int dist = 0;
  4561  013A6A  0E00               	movlw	0
  4562  013A6C  0100               	movlb	0	; () banked
  4563  013A6E  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4564  013A70  0E00               	movlw	0
  4565  013A72  6FE6               	movwf	mode2@dist& (0+255),b
  4566                           
  4567                           ; BSR set to: 0
  4568                           ;main.c: 300: irobot_move_straight(200);
  4569  013A74  0E00               	movlw	0
  4570  013A76  0100               	movlb	0	; () banked
  4571  013A78  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4572  013A7A  0EC8               	movlw	200
  4573  013A7C  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4574  013A7E  ECF5  F0B2         	call	_irobot_move_straight	;wreg free
  4575                           
  4576                           ;main.c: 301: while (dist < 5000) {
  4577  013A82  D025               	goto	l2381
  4578  013A84                     
  4579                           ;main.c: 302: update_distance();
  4580  013A84  EC74  F0B3         	call	_update_distance	;wreg free
  4581                           
  4582                           ;main.c: 303: dist += iRDistance;
  4583  013A88  0100               	movlb	0	; () banked
  4584  013A8A  5179               	movf	_iRDistance& (0+255),w,b
  4585  013A8C  0100               	movlb	0	; () banked
  4586  013A8E  27E6               	addwf	mode2@dist& (0+255),f,b
  4587  013A90  0100               	movlb	0	; () banked
  4588  013A92  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4589  013A94  0100               	movlb	0	; () banked
  4590  013A96  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4591                           
  4592                           ; BSR set to: 0
  4593                           ;main.c: 304: printf("%c", (char)35);
  4594  013A98  0EFB               	movlw	low STR_1
  4595  013A9A  0100               	movlb	0	; () banked
  4596  013A9C  6FCF               	movwf	printf@f& (0+255),b
  4597  013A9E  0EFF               	movlw	high STR_1
  4598  013AA0  0100               	movlb	0	; () banked
  4599  013AA2  6FD0               	movwf	(printf@f+1)& (0+255),b
  4600  013AA4  0E00               	movlw	0
  4601  013AA6  0100               	movlb	0	; () banked
  4602  013AA8  6FD2               	movwf	(?_printf+3)& (0+255),b
  4603  013AAA  0E23               	movlw	35
  4604  013AAC  6FD1               	movwf	(?_printf+2)& (0+255),b
  4605  013AAE  ECB4  F092         	call	_printf	;wreg free
  4606                           
  4607                           ;main.c: 305: printf("Distance: %d\n", dist);
  4608  013AB2  0EED               	movlw	low STR_10
  4609  013AB4  0100               	movlb	0	; () banked
  4610  013AB6  6FCF               	movwf	printf@f& (0+255),b
  4611  013AB8  0EFF               	movlw	high STR_10
  4612  013ABA  0100               	movlb	0	; () banked
  4613  013ABC  6FD0               	movwf	(printf@f+1)& (0+255),b
  4614  013ABE  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4615  013AC2  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4616  013AC6  ECB4  F092         	call	_printf	;wreg free
  4617                           
  4618                           ;main.c: 306: Console_Render();
  4619  013ACA  ECC8  F08F         	call	_Console_Render	;wreg free
  4620  013ACE                     l2381:
  4621  013ACE  0100               	movlb	0	; () banked
  4622  013AD0  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4623  013AD2  D7D8               	goto	l2382
  4624  013AD4  0E88               	movlw	136
  4625  013AD6  0100               	movlb	0	; () banked
  4626  013AD8  5DE6               	subwf	mode2@dist& (0+255),w,b
  4627  013ADA  0E13               	movlw	19
  4628  013ADC  0100               	movlb	0	; () banked
  4629  013ADE  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4630  013AE0  A0D8               	btfss	status,0,c
  4631  013AE2  D7D0               	goto	l2382
  4632                           
  4633                           ; BSR set to: 0
  4634                           ;main.c: 307: }
  4635                           ;main.c: 308: irobot_stop_motion(0);
  4636                           
  4637                           ; BSR set to: 0
  4638  013AE4  0E00               	movlw	0
  4639  013AE6  EC13  F0AF         	call	_irobot_stop_motion
  4640                           
  4641                           ;main.c: 310: if (MXK_Release())
  4642  013AEA  ECCC  F0B2         	call	_MXK_Release	;wreg free
  4643  013AEE  0900               	iorlw	0
  4644  013AF0  B4D8               	btfsc	status,2,c
  4645  013AF2  0012               	return	
  4646                           
  4647                           ;main.c: 311: MXK_Dequeue();
  4648  013AF4  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  4649  013AF8  0012               	return	
  4650  013AFA                     __end_of_mode2:
  4651                           	opt stack 0
  4652                           tblptru	equ	0xFF8
  4653                           tblptrh	equ	0xFF7
  4654                           tblptrl	equ	0xFF6
  4655                           tablat	equ	0xFF5
  4656                           postinc0	equ	0xFEE
  4657                           wreg	equ	0xFE8
  4658                           postdec1	equ	0xFE5
  4659                           fsr1h	equ	0xFE2
  4660                           fsr1l	equ	0xFE1
  4661                           status	equ	0xFD8
  4662                           
  4663 ;; *************** function _irobot_move_straight *****************
  4664 ;; Defined at:
  4665 ;;		line 313 in file "Library/iRobotSerial.c"
  4666 ;; Parameters:    Size  Location     Type
  4667 ;;  straightSpee    2   25[BANK0 ] short 
  4668 ;; Auto vars:     Size  Location     Type
  4669 ;;		None
  4670 ;; Return value:  Size  Location     Type
  4671 ;;                  1    wreg      void 
  4672 ;; Registers used:
  4673 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4674 ;; Tracked objects:
  4675 ;;		On entry : 0/0
  4676 ;;		On exit  : 0/0
  4677 ;;		Unchanged: 0/0
  4678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4679 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4682 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4683 ;;Total ram usage:        2 bytes
  4684 ;; Hardware stack levels used:    1
  4685 ;; Hardware stack levels required when called:    9
  4686 ;; This function calls:
  4687 ;;		_irobot_move
  4688 ;; This function is called by:
  4689 ;;		_move_and_rotate
  4690 ;;		_mode2
  4691 ;;		_mode4
  4692 ;; This function uses a non-reentrant model
  4693 ;;
  4694                           
  4695                           	psect	text7
  4696  0165EA                     __ptext7:
  4697                           	opt stack 0
  4698  0165EA                     _irobot_move_straight:
  4699                           	opt stack 20
  4700                           
  4701                           ;iRobotSerial.c: 314: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4702                           
  4703                           ;incstack = 0
  4704  0165EA  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4705  0165EE  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4706  0165F2  0E7F               	movlw	127
  4707  0165F4  0100               	movlb	0	; () banked
  4708  0165F6  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4709  0165F8  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4710  0165FA  0E00               	movlw	0
  4711  0165FC  EC9A  F0A2         	call	_irobot_move
  4712  016600  0012               	return		;funcret
  4713  016602                     __end_of_irobot_move_straight:
  4714                           	opt stack 0
  4715                           tblptru	equ	0xFF8
  4716                           tblptrh	equ	0xFF7
  4717                           tblptrl	equ	0xFF6
  4718                           tablat	equ	0xFF5
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           fsr1h	equ	0xFE2
  4723                           fsr1l	equ	0xFE1
  4724                           status	equ	0xFD8
  4725                           
  4726 ;; *************** function _mode1 *****************
  4727 ;; Defined at:
  4728 ;;		line 222 in file "main.c"
  4729 ;; Parameters:    Size  Location     Type
  4730 ;;		None
  4731 ;; Auto vars:     Size  Location     Type
  4732 ;;  moveto          2    2[BANK3 ] int 
  4733 ;; Return value:  Size  Location     Type
  4734 ;;                  1    wreg      void 
  4735 ;; Registers used:
  4736 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4737 ;; Tracked objects:
  4738 ;;		On entry : 0/0
  4739 ;;		On exit  : 0/0
  4740 ;;		Unchanged: 0/0
  4741 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4743 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4744 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4745 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4746 ;;Total ram usage:        8 bytes
  4747 ;; Hardware stack levels used:    1
  4748 ;; Hardware stack levels required when called:   17
  4749 ;; This function calls:
  4750 ;;		_ADC_Start
  4751 ;;		_ADC_Voltage
  4752 ;;		_Console_Render
  4753 ;;		_HMI_Render
  4754 ;;		_HMI_SetNumber
  4755 ;;		_MXK_Dequeue
  4756 ;;		_MXK_Release
  4757 ;;		_MXK_SwitchTo
  4758 ;;		_Motor_Move
  4759 ;;		_Motor_Speed
  4760 ;;		___fldiv
  4761 ;;		___fltol
  4762 ;;		_printf
  4763 ;;		_safeToGo
  4764 ;; This function is called by:
  4765 ;;		_main
  4766 ;; This function uses a non-reentrant model
  4767 ;;
  4768                           
  4769                           	psect	text8
  4770  010D3E                     __ptext8:
  4771                           	opt stack 0
  4772  010D3E                     _mode1:
  4773                           	opt stack 13
  4774                           
  4775                           ;main.c: 223: safeToGo();
  4776                           
  4777                           ;incstack = 0
  4778  010D3E  EC5D  F0AE         	call	_safeToGo	;wreg free
  4779                           
  4780                           ;main.c: 224: if (MXK_SwitchTo(eMXK_HMI)) {
  4781  010D42  0E01               	movlw	1
  4782  010D44  EC9E  F0AF         	call	_MXK_SwitchTo
  4783  010D48  0900               	iorlw	0
  4784  010D4A  B4D8               	btfsc	status,2,c
  4785  010D4C  D029               	goto	l2355
  4786                           
  4787                           ;main.c: 225: printf("%c", (char)35);
  4788  010D4E  0EFB               	movlw	low STR_1
  4789  010D50  0100               	movlb	0	; () banked
  4790  010D52  6FCF               	movwf	printf@f& (0+255),b
  4791  010D54  0EFF               	movlw	high STR_1
  4792  010D56  0100               	movlb	0	; () banked
  4793  010D58  6FD0               	movwf	(printf@f+1)& (0+255),b
  4794  010D5A  0E00               	movlw	0
  4795  010D5C  0100               	movlb	0	; () banked
  4796  010D5E  6FD2               	movwf	(?_printf+3)& (0+255),b
  4797  010D60  0E23               	movlw	35
  4798  010D62  6FD1               	movwf	(?_printf+2)& (0+255),b
  4799  010D64  ECB4  F092         	call	_printf	;wreg free
  4800                           
  4801                           ;main.c: 226: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4802  010D68  0E95               	movlw	low STR_6
  4803  010D6A  0100               	movlb	0	; () banked
  4804  010D6C  6FCF               	movwf	printf@f& (0+255),b
  4805  010D6E  0EFF               	movlw	high STR_6
  4806  010D70  0100               	movlb	0	; () banked
  4807  010D72  6FD0               	movwf	(printf@f+1)& (0+255),b
  4808  010D74  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4809  010D78  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4810  010D7C  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4811  010D80  0100               	movlb	0	; () banked
  4812  010D82  6BD4               	clrf	(?_printf+5)& (0+255),b
  4813  010D84  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4814  010D88  0100               	movlb	0	; () banked
  4815  010D8A  6BD6               	clrf	(?_printf+7)& (0+255),b
  4816  010D8C  ECB4  F092         	call	_printf	;wreg free
  4817                           
  4818                           ;main.c: 227: Console_Render();
  4819  010D90  ECC8  F08F         	call	_Console_Render	;wreg free
  4820                           
  4821                           ;main.c: 228: if (MXK_Release())
  4822  010D94  ECCC  F0B2         	call	_MXK_Release	;wreg free
  4823  010D98  0900               	iorlw	0
  4824  010D9A  A4D8               	btfss	status,2,c
  4825                           
  4826                           ;main.c: 229: MXK_Dequeue();
  4827  010D9C  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  4828  010DA0                     l2355:
  4829                           
  4830                           ;main.c: 230: }
  4831                           ;main.c: 231: StepRotate = 0;
  4832  010DA0  0E00               	movlw	0
  4833  010DA2  0100               	movlb	0	; () banked
  4834  010DA4  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4835  010DA6  0E00               	movlw	0
  4836  010DA8  6F71               	movwf	_StepRotate& (0+255),b
  4837                           
  4838                           ; BSR set to: 0
  4839                           ;main.c: 232: MinDist = 1000;
  4840  010DAA  0E03               	movlw	3
  4841  010DAC  0100               	movlb	0	; () banked
  4842  010DAE  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4843  010DB0  0EE8               	movlw	232
  4844  010DB2  6FFB               	movwf	_MinDist& (0+255),b
  4845                           
  4846                           ; BSR set to: 0
  4847                           ;main.c: 233: Stepstomin = 0;
  4848  010DB4  0E00               	movlw	0
  4849  010DB6  0100               	movlb	0	; () banked
  4850  010DB8  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4851  010DBA  0E00               	movlw	0
  4852  010DBC  6F6F               	movwf	_Stepstomin& (0+255),b
  4853                           
  4854                           ; BSR set to: 0
  4855                           ;main.c: 234: IRValue = 0;
  4856  010DBE  0E00               	movlw	0
  4857  010DC0  0100               	movlb	0	; () banked
  4858  010DC2  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4859  010DC4  0E00               	movlw	0
  4860  010DC6  6F6D               	movwf	_IRValue& (0+255),b
  4861                           
  4862                           ; BSR set to: 0
  4863                           ;main.c: 235: TimerX = 8;
  4864  010DC8  0E00               	movlw	0
  4865  010DCA  0100               	movlb	0	; () banked
  4866  010DCC  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4867  010DCE  0E08               	movlw	8
  4868  010DD0  6FF9               	movwf	_TimerX& (0+255),b
  4869                           
  4870                           ;main.c: 236: while (StepRotate < 400) {
  4871  010DD2  D0F9               	goto	u14180
  4872  010DD4                     
  4873                           ; BSR set to: 0
  4874                           ;main.c: 237: StepRotate++;
  4875                           
  4876                           ; BSR set to: 0
  4877  010DD4  0100               	movlb	0	; () banked
  4878  010DD6  4B71               	infsnz	_StepRotate& (0+255),f,b
  4879  010DD8  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4880                           
  4881                           ; BSR set to: 0
  4882                           ;main.c: 238: ADC_Start(&ADC_AN0);
  4883  010DDA  0EB5               	movlw	low _ADC_AN0
  4884  010DDC  0100               	movlb	0	; () banked
  4885  010DDE  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4886  010DE0  0E00               	movlw	high _ADC_AN0
  4887  010DE2  0100               	movlb	0	; () banked
  4888  010DE4  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4889  010DE6  EC30  F0A8         	call	_ADC_Start	;wreg free
  4890                           
  4891                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4892  010DEA  0EB5               	movlw	low _ADC_AN0
  4893  010DEC  0100               	movlb	0	; () banked
  4894  010DEE  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4895  010DF0  0E00               	movlw	high _ADC_AN0
  4896  010DF2  0100               	movlb	0	; () banked
  4897  010DF4  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4898  010DF6  ECED  F09D         	call	_ADC_Voltage	;wreg free
  4899  010DFA  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15601
  4900  010DFE  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15601+1
  4901  010E02  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15601+2
  4902  010E06  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15601+3
  4903                           
  4904                           ;main.c: 239: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4905  010E0A  C3F8  F0BE         	movff	_mode1$15601,___fldiv@a
  4906  010E0E  C3F9  F0BF         	movff	_mode1$15601+1,___fldiv@a+1
  4907  010E12  C3FA  F0C0         	movff	_mode1$15601+2,___fldiv@a+2
  4908  010E16  C3FB  F0C1         	movff	_mode1$15601+3,___fldiv@a+3
  4909  010E1A  0E00               	movlw	0
  4910  010E1C  0100               	movlb	0	; () banked
  4911  010E1E  6FBA               	movwf	___fldiv@b& (0+255),b
  4912  010E20  0E00               	movlw	0
  4913  010E22  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4914  010E24  0E6C               	movlw	108
  4915  010E26  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4916  010E28  0E42               	movlw	66
  4917  010E2A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4918  010E2C  EC89  F088         	call	___fldiv	;wreg free
  4919  010E30  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4920  010E34  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4921  010E38  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4922  010E3C  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4923  010E40  EC8C  F09B         	call	___fltol	;wreg free
  4924  010E44  C0F3  F06D         	movff	?___fltol,_IRValue
  4925  010E48  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4926                           
  4927                           ;main.c: 240: if (MXK_SwitchTo(eMXK_HMI)) {
  4928  010E4C  0E01               	movlw	1
  4929  010E4E  EC9E  F0AF         	call	_MXK_SwitchTo
  4930  010E52  0900               	iorlw	0
  4931  010E54  B4D8               	btfsc	status,2,c
  4932  010E56  D00E               	goto	l2359
  4933                           
  4934                           ;main.c: 241: HMI_SetNumber(IRValue);
  4935  010E58  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4936  010E5C  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4937  010E60  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
  4938                           
  4939                           ;main.c: 242: HMI_Render();
  4940  010E64  ECFF  F0AF         	call	_HMI_Render	;wreg free
  4941                           
  4942                           ;main.c: 243: if (MXK_Release())
  4943  010E68  ECCC  F0B2         	call	_MXK_Release	;wreg free
  4944  010E6C  0900               	iorlw	0
  4945  010E6E  A4D8               	btfss	status,2,c
  4946                           
  4947                           ;main.c: 244: MXK_Dequeue();
  4948  010E70  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  4949  010E74                     l2359:
  4950                           
  4951                           ;main.c: 245: }
  4952                           ;main.c: 246: if (IRValue < MinDist) {
  4953  010E74  0100               	movlb	0	; () banked
  4954  010E76  51FB               	movf	_MinDist& (0+255),w,b
  4955  010E78  0100               	movlb	0	; () banked
  4956  010E7A  5D6D               	subwf	_IRValue& (0+255),w,b
  4957  010E7C  0100               	movlb	0	; () banked
  4958  010E7E  516E               	movf	(_IRValue+1)& (0+255),w,b
  4959  010E80  0A80               	xorlw	128
  4960  010E82  0103               	movlb	3	; () banked
  4961  010E84  6FF4               	movwf	??_mode1& (0+255),b
  4962  010E86  0100               	movlb	0	; () banked
  4963  010E88  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4964  010E8A  0A80               	xorlw	128
  4965  010E8C  0103               	movlb	3	; () banked
  4966  010E8E  59F4               	subwfb	??_mode1& (0+255),w,b
  4967  010E90  B0D8               	btfsc	status,0,c
  4968  010E92  D008               	goto	l2360
  4969                           
  4970                           ; BSR set to: 3
  4971                           ;main.c: 247: MinDist = IRValue;
  4972  010E94  C06D  F0FB         	movff	_IRValue,_MinDist
  4973  010E98  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4974                           
  4975                           ;main.c: 248: Stepstomin = StepRotate;
  4976  010E9C  C071  F06F         	movff	_StepRotate,_Stepstomin
  4977  010EA0  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4978  010EA4                     l2360:
  4979                           
  4980                           ; BSR set to: 3
  4981                           ;main.c: 249: }
  4982                           ;main.c: 250: if (MXK_SwitchTo(eMXK_Motor)) {
  4983                           
  4984                           ; BSR set to: 3
  4985  010EA4  0E08               	movlw	8
  4986  010EA6  EC9E  F0AF         	call	_MXK_SwitchTo
  4987  010EAA  0900               	iorlw	0
  4988  010EAC  B4D8               	btfsc	status,2,c
  4989  010EAE  D020               	goto	l2362
  4990                           
  4991                           ;main.c: 251: Motor_Speed(&Stepper, (50));
  4992  010EB0  0EAF               	movlw	low _Stepper
  4993  010EB2  0100               	movlb	0	; () banked
  4994  010EB4  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4995  010EB6  0E00               	movlw	high _Stepper
  4996  010EB8  0100               	movlb	0	; () banked
  4997  010EBA  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4998  010EBC  0E00               	movlw	0
  4999  010EBE  0100               	movlb	0	; () banked
  5000  010EC0  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5001  010EC2  0E32               	movlw	50
  5002  010EC4  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5003  010EC6  ECB2  F0B1         	call	_Motor_Speed	;wreg free
  5004                           
  5005                           ;main.c: 252: Motor_Move(&Stepper, 1);
  5006  010ECA  0EAF               	movlw	low _Stepper
  5007  010ECC  0100               	movlb	0	; () banked
  5008  010ECE  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5009  010ED0  0E00               	movlw	high _Stepper
  5010  010ED2  0100               	movlb	0	; () banked
  5011  010ED4  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5012  010ED6  0E00               	movlw	0
  5013  010ED8  0100               	movlb	0	; () banked
  5014  010EDA  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  5015  010EDC  0E01               	movlw	1
  5016  010EDE  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  5017  010EE0  ECB6  F0B0         	call	_Motor_Move	;wreg free
  5018                           
  5019                           ;main.c: 253: if (MXK_Release())
  5020  010EE4  ECCC  F0B2         	call	_MXK_Release	;wreg free
  5021  010EE8  0900               	iorlw	0
  5022  010EEA  A4D8               	btfss	status,2,c
  5023                           
  5024                           ;main.c: 254: MXK_Dequeue();
  5025  010EEC  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  5026  010EF0                     l2362:
  5027                           
  5028                           ;main.c: 255: }
  5029                           ;main.c: 256: TimerX = 10;
  5030  010EF0  0E00               	movlw	0
  5031  010EF2  0100               	movlb	0	; () banked
  5032  010EF4  6FFA               	movwf	(_TimerX+1)& (0+255),b
  5033  010EF6  0E0A               	movlw	10
  5034  010EF8  6FF9               	movwf	_TimerX& (0+255),b
  5035                           
  5036                           ; BSR set to: 0
  5037                           ;main.c: 257: if (TimerX > 0) {
  5038  010EFA  0100               	movlb	0	; () banked
  5039  010EFC  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5040  010EFE  D063               	goto	u14180
  5041  010F00  0100               	movlb	0	; () banked
  5042  010F02  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5043  010F04  E156               	bnz	l16588
  5044  010F06  0100               	movlb	0	; () banked
  5045  010F08  05F9               	decf	_TimerX& (0+255),w,b
  5046  010F0A  B0D8               	btfsc	status,0,c
  5047  010F0C  D052               	goto	l2364
  5048  010F0E  D05B               	goto	u14180
  5049  010F10                     l16570:
  5050                           
  5051                           ; BSR set to: 0
  5052                           ;main.c: 259: ADC_Start(&ADC_AN0);
  5053  010F10  0EB5               	movlw	low _ADC_AN0
  5054  010F12  0100               	movlb	0	; () banked
  5055  010F14  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5056  010F16  0E00               	movlw	high _ADC_AN0
  5057  010F18  0100               	movlb	0	; () banked
  5058  010F1A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5059  010F1C  EC30  F0A8         	call	_ADC_Start	;wreg free
  5060                           
  5061                           ;main.c: 260: if (MXK_SwitchTo(eMXK_HMI)) {
  5062  010F20  0E01               	movlw	1
  5063  010F22  EC9E  F0AF         	call	_MXK_SwitchTo
  5064  010F26  0900               	iorlw	0
  5065  010F28  B4D8               	btfsc	status,2,c
  5066  010F2A  D00E               	goto	l2367
  5067                           
  5068                           ;main.c: 261: HMI_SetNumber(IRValue);
  5069  010F2C  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5070  010F30  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5071  010F34  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
  5072                           
  5073                           ;main.c: 262: HMI_Render();
  5074  010F38  ECFF  F0AF         	call	_HMI_Render	;wreg free
  5075                           
  5076                           ;main.c: 263: if (MXK_Release())
  5077  010F3C  ECCC  F0B2         	call	_MXK_Release	;wreg free
  5078  010F40  0900               	iorlw	0
  5079  010F42  A4D8               	btfss	status,2,c
  5080                           
  5081                           ;main.c: 264: MXK_Dequeue();
  5082  010F44  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  5083  010F48                     l2367:
  5084                           
  5085                           ;main.c: 265: }
  5086                           ;main.c: 266: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5087  010F48  0EB5               	movlw	low _ADC_AN0
  5088  010F4A  0100               	movlb	0	; () banked
  5089  010F4C  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5090  010F4E  0E00               	movlw	high _ADC_AN0
  5091  010F50  0100               	movlb	0	; () banked
  5092  010F52  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5093  010F54  ECED  F09D         	call	_ADC_Voltage	;wreg free
  5094  010F58  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15601
  5095  010F5C  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15601+1
  5096  010F60  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15601+2
  5097  010F64  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15601+3
  5098                           
  5099                           ;main.c: 265: }
  5100                           ;main.c: 266: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5101  010F68  C3F8  F0BE         	movff	_mode1$15601,___fldiv@a
  5102  010F6C  C3F9  F0BF         	movff	_mode1$15601+1,___fldiv@a+1
  5103  010F70  C3FA  F0C0         	movff	_mode1$15601+2,___fldiv@a+2
  5104  010F74  C3FB  F0C1         	movff	_mode1$15601+3,___fldiv@a+3
  5105  010F78  0E00               	movlw	0
  5106  010F7A  0100               	movlb	0	; () banked
  5107  010F7C  6FBA               	movwf	___fldiv@b& (0+255),b
  5108  010F7E  0E00               	movlw	0
  5109  010F80  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5110  010F82  0E6C               	movlw	108
  5111  010F84  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5112  010F86  0E42               	movlw	66
  5113  010F88  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5114  010F8A  EC89  F088         	call	___fldiv	;wreg free
  5115  010F8E  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5116  010F92  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5117  010F96  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5118  010F9A  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5119  010F9E  EC8C  F09B         	call	___fltol	;wreg free
  5120  010FA2  C0F3  F06D         	movff	?___fltol,_IRValue
  5121  010FA6  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5122                           
  5123                           ;main.c: 267: TimerX--;
  5124  010FAA  0100               	movlb	0	; () banked
  5125  010FAC  07F9               	decf	_TimerX& (0+255),f,b
  5126  010FAE  A0D8               	btfss	status,0,c
  5127  010FB0  07FA               	decf	(_TimerX+1)& (0+255),f,b
  5128  010FB2                     l2364:
  5129  010FB2                     l16588:
  5130                           
  5131                           ; BSR set to: 0
  5132  010FB2  0100               	movlb	0	; () banked
  5133  010FB4  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  5134  010FB6  D007               	goto	u14180
  5135  010FB8  0100               	movlb	0	; () banked
  5136  010FBA  51FA               	movf	(_TimerX+1)& (0+255),w,b
  5137  010FBC  E1A9               	bnz	l16570
  5138  010FBE  0100               	movlb	0	; () banked
  5139  010FC0  05F9               	decf	_TimerX& (0+255),w,b
  5140  010FC2  B0D8               	btfsc	status,0,c
  5141  010FC4  D7A5               	goto	l2365
  5142  010FC6                     u14180:
  5143                           
  5144                           ; BSR set to: 0
  5145                           
  5146                           ; BSR set to: 0
  5147                           
  5148                           ; BSR set to: 0
  5149                           
  5150                           ; BSR set to: 0
  5151  010FC6  0100               	movlb	0	; () banked
  5152  010FC8  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  5153  010FCA  D704               	goto	l2357
  5154  010FCC  0E90               	movlw	144
  5155  010FCE  0100               	movlb	0	; () banked
  5156  010FD0  5D71               	subwf	_StepRotate& (0+255),w,b
  5157  010FD2  0E01               	movlw	1
  5158  010FD4  0100               	movlb	0	; () banked
  5159  010FD6  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  5160  010FD8  A0D8               	btfss	status,0,c
  5161  010FDA  D6FC               	goto	l2357
  5162                           
  5163                           ; BSR set to: 0
  5164                           ;main.c: 268: }
  5165                           ;main.c: 269: }
  5166                           ;main.c: 270: }
  5167                           ;main.c: 271: if (MXK_SwitchTo(eMXK_Motor)) {
  5168                           
  5169                           ; BSR set to: 0
  5170  010FDC  0E08               	movlw	8
  5171  010FDE  EC9E  F0AF         	call	_MXK_SwitchTo
  5172  010FE2  0900               	iorlw	0
  5173  010FE4  B4D8               	btfsc	status,2,c
  5174  010FE6  D08A               	goto	l2372
  5175                           
  5176                           ;main.c: 272: Motor_Speed(&Stepper, (50));
  5177  010FE8  0EAF               	movlw	low _Stepper
  5178  010FEA  0100               	movlb	0	; () banked
  5179  010FEC  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5180  010FEE  0E00               	movlw	high _Stepper
  5181  010FF0  0100               	movlb	0	; () banked
  5182  010FF2  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5183  010FF4  0E00               	movlw	0
  5184  010FF6  0100               	movlb	0	; () banked
  5185  010FF8  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5186  010FFA  0E32               	movlw	50
  5187  010FFC  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5188  010FFE  ECB2  F0B1         	call	_Motor_Speed	;wreg free
  5189                           
  5190                           ;main.c: 273: int moveto = 400 - Stepstomin;
  5191  011002  C06F  F3F4         	movff	_Stepstomin,??_mode1
  5192  011006  C070  F3F5         	movff	_Stepstomin+1,??_mode1+1
  5193  01100A  0103               	movlb	3	; () banked
  5194  01100C  1FF4               	comf	??_mode1& (0+255),f,b
  5195  01100E  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  5196  011010  4BF4               	infsnz	??_mode1& (0+255),f,b
  5197  011012  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  5198  011014  0E90               	movlw	144
  5199  011016  0103               	movlb	3	; () banked
  5200  011018  25F4               	addwf	??_mode1& (0+255),w,b
  5201  01101A  0103               	movlb	3	; () banked
  5202  01101C  6FF6               	movwf	mode1@moveto& (0+255),b
  5203  01101E  0E01               	movlw	1
  5204  011020  0103               	movlb	3	; () banked
  5205  011022  21F5               	addwfc	(??_mode1+1)& (0+255),w,b
  5206  011024  0103               	movlb	3	; () banked
  5207  011026  6FF7               	movwf	(mode1@moveto+1)& (0+255),b
  5208                           
  5209                           ; BSR set to: 3
  5210                           ;main.c: 275: Motor_Move(&Stepper, (-moveto));
  5211  011028  0EAF               	movlw	low _Stepper
  5212  01102A  0100               	movlb	0	; () banked
  5213  01102C  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5214  01102E  0E00               	movlw	high _Stepper
  5215  011030  0100               	movlb	0	; () banked
  5216  011032  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5217  011034  C3F6  F3F4         	movff	mode1@moveto,??_mode1
  5218  011038  C3F7  F3F5         	movff	mode1@moveto+1,??_mode1+1
  5219  01103C  0103               	movlb	3	; () banked
  5220  01103E  1FF4               	comf	??_mode1& (0+255),f,b
  5221  011040  1FF5               	comf	(??_mode1+1)& (0+255),f,b
  5222  011042  4BF4               	infsnz	??_mode1& (0+255),f,b
  5223  011044  2BF5               	incf	(??_mode1+1)& (0+255),f,b
  5224  011046  C3F4  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5225  01104A  C3F5  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5226  01104E  ECB6  F0B0         	call	_Motor_Move	;wreg free
  5227                           
  5228                           ;main.c: 276: if (MXK_Release())
  5229  011052  ECCC  F0B2         	call	_MXK_Release	;wreg free
  5230  011056  0900               	iorlw	0
  5231  011058  B4D8               	btfsc	status,2,c
  5232  01105A  D050               	goto	l2372
  5233                           
  5234                           ;main.c: 277: MXK_Dequeue();
  5235  01105C  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  5236                           
  5237                           ;main.c: 278: }
  5238                           ;main.c: 279: while (Stepper.mDelta > 0) {
  5239  011060  D04D               	goto	l2372
  5240  011062                     l16604:
  5241                           
  5242                           ;main.c: 280: ADC_Start(&ADC_AN0);
  5243  011062  0EB5               	movlw	low _ADC_AN0
  5244  011064  0100               	movlb	0	; () banked
  5245  011066  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5246  011068  0E00               	movlw	high _ADC_AN0
  5247  01106A  0100               	movlb	0	; () banked
  5248  01106C  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5249  01106E  EC30  F0A8         	call	_ADC_Start	;wreg free
  5250                           
  5251                           ;main.c: 281: if (MXK_SwitchTo(eMXK_HMI)) {
  5252  011072  0E01               	movlw	1
  5253  011074  EC9E  F0AF         	call	_MXK_SwitchTo
  5254  011078  0900               	iorlw	0
  5255  01107A  B4D8               	btfsc	status,2,c
  5256  01107C  D00E               	goto	l2375
  5257                           
  5258                           ;main.c: 282: HMI_SetNumber(IRValue);
  5259  01107E  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5260  011082  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5261  011086  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
  5262                           
  5263                           ;main.c: 283: HMI_Render();
  5264  01108A  ECFF  F0AF         	call	_HMI_Render	;wreg free
  5265                           
  5266                           ;main.c: 284: if (MXK_Release())
  5267  01108E  ECCC  F0B2         	call	_MXK_Release	;wreg free
  5268  011092  0900               	iorlw	0
  5269  011094  A4D8               	btfss	status,2,c
  5270                           
  5271                           ;main.c: 285: MXK_Dequeue();
  5272  011096  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
  5273  01109A                     l2375:
  5274                           
  5275                           ;main.c: 286: }
  5276                           ;main.c: 287: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5277  01109A  0EB5               	movlw	low _ADC_AN0
  5278  01109C  0100               	movlb	0	; () banked
  5279  01109E  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5280  0110A0  0E00               	movlw	high _ADC_AN0
  5281  0110A2  0100               	movlb	0	; () banked
  5282  0110A4  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5283  0110A6  ECED  F09D         	call	_ADC_Voltage	;wreg free
  5284  0110AA  C0E1  F3F8         	movff	?_ADC_Voltage,_mode1$15601
  5285  0110AE  C0E2  F3F9         	movff	?_ADC_Voltage+1,_mode1$15601+1
  5286  0110B2  C0E3  F3FA         	movff	?_ADC_Voltage+2,_mode1$15601+2
  5287  0110B6  C0E4  F3FB         	movff	?_ADC_Voltage+3,_mode1$15601+3
  5288                           
  5289                           ;main.c: 286: }
  5290                           ;main.c: 287: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5291  0110BA  C3F8  F0BE         	movff	_mode1$15601,___fldiv@a
  5292  0110BE  C3F9  F0BF         	movff	_mode1$15601+1,___fldiv@a+1
  5293  0110C2  C3FA  F0C0         	movff	_mode1$15601+2,___fldiv@a+2
  5294  0110C6  C3FB  F0C1         	movff	_mode1$15601+3,___fldiv@a+3
  5295  0110CA  0E00               	movlw	0
  5296  0110CC  0100               	movlb	0	; () banked
  5297  0110CE  6FBA               	movwf	___fldiv@b& (0+255),b
  5298  0110D0  0E00               	movlw	0
  5299  0110D2  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5300  0110D4  0E6C               	movlw	108
  5301  0110D6  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5302  0110D8  0E42               	movlw	66
  5303  0110DA  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5304  0110DC  EC89  F088         	call	___fldiv	;wreg free
  5305  0110E0  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5306  0110E4  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5307  0110E8  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5308  0110EC  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5309  0110F0  EC8C  F09B         	call	___fltol	;wreg free
  5310  0110F4  C0F3  F06D         	movff	?___fltol,_IRValue
  5311  0110F8  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5312  0110FC                     l2372:
  5313  0110FC  0100               	movlb	0	; () banked
  5314  0110FE  BFB0               	btfsc	(_Stepper+1)& (0+255),7,b
  5315  011100  0012               	return	
  5316  011102  0100               	movlb	0	; () banked
  5317  011104  51B0               	movf	(_Stepper+1)& (0+255),w,b
  5318  011106  E1AD               	bnz	l16604
  5319  011108  0100               	movlb	0	; () banked
  5320  01110A  05AF               	decf	_Stepper& (0+255),w,b
  5321  01110C  A0D8               	btfss	status,0,c
  5322  01110E  0012               	return	
  5323  011110  D7A8               	goto	l2373
  5324  011112                     __end_of_mode1:
  5325                           	opt stack 0
  5326                           tblptru	equ	0xFF8
  5327                           tblptrh	equ	0xFF7
  5328                           tblptrl	equ	0xFF6
  5329                           tablat	equ	0xFF5
  5330                           postinc0	equ	0xFEE
  5331                           wreg	equ	0xFE8
  5332                           postdec1	equ	0xFE5
  5333                           fsr1h	equ	0xFE2
  5334                           fsr1l	equ	0xFE1
  5335                           status	equ	0xFD8
  5336                           
  5337 ;; *************** function _safeToGo *****************
  5338 ;; Defined at:
  5339 ;;		line 122 in file "main.c"
  5340 ;; Parameters:    Size  Location     Type
  5341 ;;		None
  5342 ;; Auto vars:     Size  Location     Type
  5343 ;;		None
  5344 ;; Return value:  Size  Location     Type
  5345 ;;                  1    wreg      void 
  5346 ;; Registers used:
  5347 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5348 ;; Tracked objects:
  5349 ;;		On entry : 0/0
  5350 ;;		On exit  : 0/0
  5351 ;;		Unchanged: 0/0
  5352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5353 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5354 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5355 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5356 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5357 ;;Total ram usage:        0 bytes
  5358 ;; Hardware stack levels used:    1
  5359 ;; Hardware stack levels required when called:   16
  5360 ;; This function calls:
  5361 ;;		_HMI_Poll
  5362 ;;		_irobot_song_play
  5363 ;;		_irobot_stop_motion
  5364 ;;		_update_angle
  5365 ;;		_update_bump_and_cliff
  5366 ;;		_update_distance
  5367 ;; This function is called by:
  5368 ;;		_mode1
  5369 ;;		_mode2
  5370 ;;		_mode3
  5371 ;;		_mode4
  5372 ;; This function uses a non-reentrant model
  5373 ;;
  5374                           
  5375                           	psect	text9
  5376  015CBA                     __ptext9:
  5377                           	opt stack 0
  5378  015CBA                     _safeToGo:
  5379                           	opt stack 13
  5380                           
  5381                           ;main.c: 123: update_bump_and_cliff();
  5382                           
  5383                           ; BSR set to: 0
  5384                           ;incstack = 0
  5385  015CBA  EC99  F0B0         	call	_update_bump_and_cliff	;wreg free
  5386                           
  5387                           ;main.c: 124: update_distance();
  5388  015CBE  EC74  F0B3         	call	_update_distance	;wreg free
  5389                           
  5390                           ;main.c: 125: update_angle();
  5391  015CC2  EC7D  F0B3         	call	_update_angle	;wreg free
  5392                           
  5393                           ;main.c: 126: if (iRBumpLeft || iRBumpRight) {
  5394  015CC6  0100               	movlb	0	; () banked
  5395  015CC8  5187               	movf	_iRBumpLeft& (0+255),w,b
  5396  015CCA  A4D8               	btfss	status,2,c
  5397  015CCC  D004               	goto	u11440
  5398                           
  5399                           ; BSR set to: 0
  5400  015CCE  0100               	movlb	0	; () banked
  5401  015CD0  5188               	movf	_iRBumpRight& (0+255),w,b
  5402  015CD2  B4D8               	btfsc	status,2,c
  5403  015CD4  D006               	goto	l2316
  5404  015CD6                     u11440:
  5405                           
  5406                           ; BSR set to: 0
  5407                           ;main.c: 127: irobot_song_play(0);
  5408                           
  5409                           ; BSR set to: 0
  5410  015CD6  0E00               	movlw	0
  5411  015CD8  EC60  F0B3         	call	_irobot_song_play
  5412                           
  5413                           ;main.c: 128: irobot_stop_motion(0);
  5414  015CDC  0E00               	movlw	0
  5415  015CDE  EC13  F0AF         	call	_irobot_stop_motion
  5416  015CE2                     l2316:
  5417                           
  5418                           ;main.c: 129: }
  5419                           ;main.c: 130: if (angleTotal > 83) {
  5420  015CE2  0100               	movlb	0	; () banked
  5421  015CE4  BF74               	btfsc	(_angleTotal+1)& (0+255),7,b
  5422  015CE6  D00B               	goto	l2319
  5423  015CE8  0100               	movlb	0	; () banked
  5424  015CEA  5174               	movf	(_angleTotal+1)& (0+255),w,b
  5425  015CEC  E105               	bnz	u11450
  5426  015CEE  0E54               	movlw	84
  5427  015CF0  0100               	movlb	0	; () banked
  5428  015CF2  5D73               	subwf	_angleTotal& (0+255),w,b
  5429  015CF4  A0D8               	btfss	status,0,c
  5430  015CF6  D003               	goto	l2319
  5431  015CF8                     u11450:
  5432                           
  5433                           ; BSR set to: 0
  5434                           ;main.c: 131: irobot_stop_motion(0);
  5435  015CF8  0E00               	movlw	0
  5436  015CFA  EC13  F0AF         	call	_irobot_stop_motion
  5437  015CFE                     l2319:
  5438                           
  5439                           ;main.c: 132: }
  5440                           ;main.c: 133: HMI_Poll();
  5441  015CFE  EC94  F0AA         	call	_HMI_Poll	;wreg free
  5442  015D02  0012               	return		;funcret
  5443  015D04                     __end_of_safeToGo:
  5444                           	opt stack 0
  5445                           tblptru	equ	0xFF8
  5446                           tblptrh	equ	0xFF7
  5447                           tblptrl	equ	0xFF6
  5448                           tablat	equ	0xFF5
  5449                           postinc0	equ	0xFEE
  5450                           wreg	equ	0xFE8
  5451                           postdec1	equ	0xFE5
  5452                           fsr1h	equ	0xFE2
  5453                           fsr1l	equ	0xFE1
  5454                           status	equ	0xFD8
  5455                           
  5456 ;; *************** function _update_distance *****************
  5457 ;; Defined at:
  5458 ;;		line 325 in file "Library/iRobotSerial.c"
  5459 ;; Parameters:    Size  Location     Type
  5460 ;;		None
  5461 ;; Auto vars:     Size  Location     Type
  5462 ;;		None
  5463 ;; Return value:  Size  Location     Type
  5464 ;;                  1    wreg      void 
  5465 ;; Registers used:
  5466 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5467 ;; Tracked objects:
  5468 ;;		On entry : 0/0
  5469 ;;		On exit  : 0/0
  5470 ;;		Unchanged: 0/0
  5471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5472 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5475 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5476 ;;Total ram usage:        0 bytes
  5477 ;; Hardware stack levels used:    1
  5478 ;; Hardware stack levels required when called:   10
  5479 ;; This function calls:
  5480 ;;		_irobot_query_and_update
  5481 ;; This function is called by:
  5482 ;;		_safeToGo
  5483 ;;		_move_and_rotate
  5484 ;;		_mode2
  5485 ;;		_mode4
  5486 ;; This function uses a non-reentrant model
  5487 ;;
  5488                           
  5489                           	psect	text10
  5490  0166E8                     __ptext10:
  5491                           	opt stack 0
  5492  0166E8                     _update_distance:
  5493                           	opt stack 19
  5494                           
  5495                           ;iRobotSerial.c: 326: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5496                           
  5497                           ;incstack = 0
  5498  0166E8  0E00               	movlw	0
  5499  0166EA  0100               	movlb	0	; () banked
  5500  0166EC  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5501  0166EE  0E13               	movlw	19
  5502  0166F0  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5503  0166F2  0E01               	movlw	1
  5504  0166F4  EC0D  F096         	call	_irobot_query_and_update
  5505  0166F8  0012               	return		;funcret
  5506  0166FA                     __end_of_update_distance:
  5507                           	opt stack 0
  5508                           tblptru	equ	0xFF8
  5509                           tblptrh	equ	0xFF7
  5510                           tblptrl	equ	0xFF6
  5511                           tablat	equ	0xFF5
  5512                           postinc0	equ	0xFEE
  5513                           wreg	equ	0xFE8
  5514                           postdec1	equ	0xFE5
  5515                           fsr1h	equ	0xFE2
  5516                           fsr1l	equ	0xFE1
  5517                           status	equ	0xFD8
  5518                           
  5519 ;; *************** function _update_bump_and_cliff *****************
  5520 ;; Defined at:
  5521 ;;		line 318 in file "Library/iRobotSerial.c"
  5522 ;; Parameters:    Size  Location     Type
  5523 ;;		None
  5524 ;; Auto vars:     Size  Location     Type
  5525 ;;		None
  5526 ;; Return value:  Size  Location     Type
  5527 ;;                  1    wreg      void 
  5528 ;; Registers used:
  5529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5530 ;; Tracked objects:
  5531 ;;		On entry : 0/0
  5532 ;;		On exit  : 0/0
  5533 ;;		Unchanged: 0/0
  5534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5538 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5539 ;;Total ram usage:        0 bytes
  5540 ;; Hardware stack levels used:    1
  5541 ;; Hardware stack levels required when called:   10
  5542 ;; This function calls:
  5543 ;;		_irobot_query_and_update
  5544 ;; This function is called by:
  5545 ;;		_safeToGo
  5546 ;;		_mode4
  5547 ;; This function uses a non-reentrant model
  5548 ;;
  5549                           
  5550                           	psect	text11
  5551  016132                     __ptext11:
  5552                           	opt stack 0
  5553  016132                     _update_bump_and_cliff:
  5554                           	opt stack 19
  5555                           
  5556                           ;iRobotSerial.c: 319: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5557                           ;iRobotSerial.c: 320: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5558                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5559                           
  5560                           ;incstack = 0
  5561  016132  0E00               	movlw	0
  5562  016134  0100               	movlb	0	; () banked
  5563  016136  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5564  016138  0E07               	movlw	7
  5565  01613A  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5566  01613C  0E00               	movlw	0
  5567  01613E  0100               	movlb	0	; () banked
  5568  016140  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5569  016142  0E09               	movlw	9
  5570  016144  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5571  016146  0E00               	movlw	0
  5572  016148  0100               	movlb	0	; () banked
  5573  01614A  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5574  01614C  0E0A               	movlw	10
  5575  01614E  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5576  016150  0E00               	movlw	0
  5577  016152  0100               	movlb	0	; () banked
  5578  016154  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5579  016156  0E0B               	movlw	11
  5580  016158  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5581  01615A  0E00               	movlw	0
  5582  01615C  0100               	movlb	0	; () banked
  5583  01615E  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5584  016160  0E0C               	movlw	12
  5585  016162  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5586  016164  0E05               	movlw	5
  5587  016166  EC0D  F096         	call	_irobot_query_and_update
  5588  01616A  0012               	return		;funcret
  5589  01616C                     __end_of_update_bump_and_cliff:
  5590                           	opt stack 0
  5591                           tblptru	equ	0xFF8
  5592                           tblptrh	equ	0xFF7
  5593                           tblptrl	equ	0xFF6
  5594                           tablat	equ	0xFF5
  5595                           postinc0	equ	0xFEE
  5596                           wreg	equ	0xFE8
  5597                           postdec1	equ	0xFE5
  5598                           fsr1h	equ	0xFE2
  5599                           fsr1l	equ	0xFE1
  5600                           status	equ	0xFD8
  5601                           
  5602 ;; *************** function _update_angle *****************
  5603 ;; Defined at:
  5604 ;;		line 330 in file "Library/iRobotSerial.c"
  5605 ;; Parameters:    Size  Location     Type
  5606 ;;		None
  5607 ;; Auto vars:     Size  Location     Type
  5608 ;;		None
  5609 ;; Return value:  Size  Location     Type
  5610 ;;                  1    wreg      void 
  5611 ;; Registers used:
  5612 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5613 ;; Tracked objects:
  5614 ;;		On entry : 0/0
  5615 ;;		On exit  : 0/0
  5616 ;;		Unchanged: 0/0
  5617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5622 ;;Total ram usage:        0 bytes
  5623 ;; Hardware stack levels used:    1
  5624 ;; Hardware stack levels required when called:   10
  5625 ;; This function calls:
  5626 ;;		_irobot_query_and_update
  5627 ;; This function is called by:
  5628 ;;		_irobot_rotate
  5629 ;;		_safeToGo
  5630 ;; This function uses a non-reentrant model
  5631 ;;
  5632                           
  5633                           	psect	text12
  5634  0166FA                     __ptext12:
  5635                           	opt stack 0
  5636  0166FA                     _update_angle:
  5637                           	opt stack 18
  5638                           
  5639                           ;iRobotSerial.c: 331: irobot_query_and_update(1, iR_PKT_ANGLE);
  5640                           
  5641                           ;incstack = 0
  5642  0166FA  0E00               	movlw	0
  5643  0166FC  0100               	movlb	0	; () banked
  5644  0166FE  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5645  016700  0E14               	movlw	20
  5646  016702  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5647  016704  0E01               	movlw	1
  5648  016706  EC0D  F096         	call	_irobot_query_and_update
  5649  01670A  0012               	return		;funcret
  5650  01670C                     __end_of_update_angle:
  5651                           	opt stack 0
  5652                           tblptru	equ	0xFF8
  5653                           tblptrh	equ	0xFF7
  5654                           tblptrl	equ	0xFF6
  5655                           tablat	equ	0xFF5
  5656                           postinc0	equ	0xFEE
  5657                           wreg	equ	0xFE8
  5658                           postdec1	equ	0xFE5
  5659                           fsr1h	equ	0xFE2
  5660                           fsr1l	equ	0xFE1
  5661                           status	equ	0xFD8
  5662                           
  5663 ;; *************** function _irobot_query_and_update *****************
  5664 ;; Defined at:
  5665 ;;		line 130 in file "Library/iRobotSerial.c"
  5666 ;; Parameters:    Size  Location     Type
  5667 ;;  numberOfPack    1    wreg     unsigned char 
  5668 ;; Auto vars:     Size  Location     Type
  5669 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5670 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5671 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5672 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5673 ;;		 -> ?_irobot_query_and_update(1), 
  5674 ;;  i               1   28[BANK0 ] unsigned char 
  5675 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5676 ;;  j               1   26[BANK0 ] unsigned char 
  5677 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5678 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5679 ;; Return value:  Size  Location     Type
  5680 ;;                  1    wreg      void 
  5681 ;; Registers used:
  5682 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5683 ;; Tracked objects:
  5684 ;;		On entry : 0/0
  5685 ;;		On exit  : 0/0
  5686 ;;		Unchanged: 0/0
  5687 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5688 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5689 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5690 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5691 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5692 ;;Total ram usage:      535 bytes
  5693 ;; Hardware stack levels used:    1
  5694 ;; Hardware stack levels required when called:    9
  5695 ;; This function calls:
  5696 ;;		_eusart_getch
  5697 ;;		_eusart_putch
  5698 ;;		_get_packet_size
  5699 ;;		_rx_assign
  5700 ;; This function is called by:
  5701 ;;		_update_bump_and_cliff
  5702 ;;		_update_distance
  5703 ;;		_update_angle
  5704 ;; This function uses a non-reentrant model
  5705 ;;
  5706                           
  5707                           	psect	text13
  5708  012C1A                     __ptext13:
  5709                           	opt stack 0
  5710  012C1A                     _irobot_query_and_update:
  5711                           	opt stack 19
  5712                           
  5713                           ;incstack = 0
  5714                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5715  012C1A  0100               	movlb	0	; () banked
  5716  012C1C  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5717                           
  5718                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5719  012C1E  0E00               	movlw	0
  5720  012C20  0100               	movlb	0	; () banked
  5721  012C22  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5722  012C24  0E00               	movlw	0
  5723  012C26  0100               	movlb	0	; () banked
  5724  012C28  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5725                           
  5726                           ;iRobotSerial.c: 132: va_list packetIDs;
  5727                           ;iRobotSerial.c: 133: *packetIDs = __va_start();
  5728  012C2A  0EC0               	movlw	low ?_irobot_query_and_update
  5729  012C2C  0100               	movlb	0	; () banked
  5730  012C2E  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5731  012C30  0E00               	movlw	high ?_irobot_query_and_update
  5732  012C32  0100               	movlb	0	; () banked
  5733  012C34  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5734                           
  5735                           ; BSR set to: 0
  5736                           ;iRobotSerial.c: 134: eusart_putch(iR_QUERY_LIST);
  5737  012C36  0E95               	movlw	149
  5738  012C38  EC9D  F0B3         	call	_eusart_putch
  5739                           
  5740                           ;iRobotSerial.c: 135: eusart_putch(numberOfPacketRequests);
  5741  012C3C  0100               	movlb	0	; () banked
  5742  012C3E  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5743  012C40  EC9D  F0B3         	call	_eusart_putch
  5744                           
  5745                           ;iRobotSerial.c: 136: for (i = 0; i < numberOfPacketRequests; i++) {
  5746  012C44  0E00               	movlw	0
  5747  012C46  0100               	movlb	0	; () banked
  5748  012C48  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5749  012C4A  D023               	goto	l2095
  5750  012C4C                     
  5751                           ; BSR set to: 0
  5752                           ;iRobotSerial.c: 137: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5753                           
  5754                           ; BSR set to: 0
  5755  012C4C  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5756  012C50  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5757  012C54  50DF               	movf	indf2,w,c
  5758  012C56  0100               	movlb	0	; () banked
  5759  012C58  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5760                           
  5761                           ; BSR set to: 0
  5762  012C5A  0E02               	movlw	2
  5763  012C5C  0100               	movlb	0	; () banked
  5764  012C5E  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5765  012C60  0E00               	movlw	0
  5766  012C62  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5767                           
  5768                           ; BSR set to: 0
  5769                           ;iRobotSerial.c: 138: streamSize += get_packet_size(packetVariable);
  5770  012C64  0100               	movlb	0	; () banked
  5771  012C66  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5772  012C68  EC11  F0AC         	call	_get_packet_size
  5773  012C6C  0100               	movlb	0	; () banked
  5774  012C6E  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5775                           
  5776                           ; BSR set to: 0
  5777                           ;iRobotSerial.c: 139: TXArray[i] = packetVariable;
  5778  012C70  0100               	movlb	0	; () banked
  5779  012C72  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5780  012C74  0D01               	mullw	1
  5781  012C76  0E00               	movlw	low irobot_query_and_update@TXArray
  5782  012C78  24F3               	addwf	prodl,w,c
  5783  012C7A  6ED9               	movwf	fsr2l,c
  5784  012C7C  0E02               	movlw	high irobot_query_and_update@TXArray
  5785  012C7E  20F4               	addwfc	prodh,w,c
  5786  012C80  6EDA               	movwf	fsr2h,c
  5787  012C82  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5788                           
  5789                           ; BSR set to: 0
  5790                           ;iRobotSerial.c: 140: eusart_putch(packetVariable);
  5791  012C86  0100               	movlb	0	; () banked
  5792  012C88  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5793  012C8A  EC9D  F0B3         	call	_eusart_putch
  5794  012C8E  0100               	movlb	0	; () banked
  5795  012C90  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5796  012C92                     l2095:
  5797                           
  5798                           ; BSR set to: 0
  5799                           
  5800                           ; BSR set to: 0
  5801  012C92  0100               	movlb	0	; () banked
  5802  012C94  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5803  012C96  0100               	movlb	0	; () banked
  5804  012C98  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5805  012C9A  A0D8               	btfss	status,0,c
  5806  012C9C  D7D7               	goto	l2096
  5807                           
  5808                           ; BSR set to: 0
  5809                           ;iRobotSerial.c: 141: }
  5810                           ;iRobotSerial.c: 142: ;
  5811                           ;iRobotSerial.c: 144: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  5812                           
  5813                           ; BSR set to: 0
  5814  012C9E  0E00               	movlw	0
  5815  012CA0  0100               	movlb	0	; () banked
  5816  012CA2  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5817  012CA4  D00E               	goto	l2098
  5818  012CA6                     
  5819                           ; BSR set to: 0
  5820                           
  5821                           ; BSR set to: 0
  5822  012CA6  0100               	movlb	0	; () banked
  5823  012CA8  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5824  012CAA  0D01               	mullw	1
  5825  012CAC  0E00               	movlw	low irobot_query_and_update@RXArray
  5826  012CAE  24F3               	addwf	prodl,w,c
  5827  012CB0  6ED9               	movwf	fsr2l,c
  5828  012CB2  0E01               	movlw	high irobot_query_and_update@RXArray
  5829  012CB4  20F4               	addwfc	prodh,w,c
  5830  012CB6  6EDA               	movwf	fsr2h,c
  5831  012CB8  ECE0  F0B3         	call	_eusart_getch	;wreg free
  5832  012CBC  6EDF               	movwf	indf2,c
  5833  012CBE  0100               	movlb	0	; () banked
  5834  012CC0  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5835  012CC2                     l2098:
  5836                           
  5837                           ; BSR set to: 0
  5838                           
  5839                           ; BSR set to: 0
  5840  012CC2  0100               	movlb	0	; () banked
  5841  012CC4  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5842  012CC6  0100               	movlb	0	; () banked
  5843  012CC8  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5844  012CCA  A0D8               	btfss	status,0,c
  5845  012CCC  D7EC               	goto	l2099
  5846                           
  5847                           ; BSR set to: 0
  5848                           ;iRobotSerial.c: 146: for (i = 0; i < numberOfPacketRequests; i++) {
  5849                           
  5850                           ; BSR set to: 0
  5851  012CCE  0E00               	movlw	0
  5852  012CD0  0100               	movlb	0	; () banked
  5853  012CD2  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5854  012CD4  D05E               	goto	l2101
  5855  012CD6                     l2102:
  5856                           
  5857                           ; BSR set to: 0
  5858                           ;iRobotSerial.c: 147: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  5859  012CD6  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5860  012CDA  D021               	goto	l2103
  5861  012CDC                     
  5862                           ; BSR set to: 0
  5863                           ;iRobotSerial.c: 148: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5864                           
  5865                           ; BSR set to: 0
  5866  012CDC  0100               	movlb	0	; () banked
  5867  012CDE  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5868  012CE0  0D01               	mullw	1
  5869  012CE2  0E00               	movlw	low irobot_query_and_update@RXArray
  5870  012CE4  24F3               	addwf	prodl,w,c
  5871  012CE6  6ED9               	movwf	fsr2l,c
  5872  012CE8  0E01               	movlw	high irobot_query_and_update@RXArray
  5873  012CEA  20F4               	addwfc	prodh,w,c
  5874  012CEC  6EDA               	movwf	fsr2h,c
  5875  012CEE  50DF               	movf	indf2,w,c
  5876  012CF0  0100               	movlb	0	; () banked
  5877  012CF2  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5878  012CF4  0100               	movlb	0	; () banked
  5879  012CF6  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5880  012CF8  0800               	sublw	0
  5881  012CFA  0100               	movlb	0	; () banked
  5882  012CFC  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5883  012CFE  0100               	movlb	0	; () banked
  5884  012D00  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5885  012D02  0100               	movlb	0	; () banked
  5886  012D04  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5887  012D06  0D01               	mullw	1
  5888  012D08  0E00               	movlw	low irobot_query_and_update@TXArray
  5889  012D0A  24F3               	addwf	prodl,w,c
  5890  012D0C  6ED9               	movwf	fsr2l,c
  5891  012D0E  0E02               	movlw	high irobot_query_and_update@TXArray
  5892  012D10  20F4               	addwfc	prodh,w,c
  5893  012D12  6EDA               	movwf	fsr2h,c
  5894  012D14  50DF               	movf	indf2,w,c
  5895  012D16  EC92  F09C         	call	_rx_assign
  5896  012D1A  0100               	movlb	0	; () banked
  5897  012D1C  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5898  012D1E                     l2103:
  5899                           
  5900                           ; BSR set to: 0
  5901                           
  5902                           ; BSR set to: 0
  5903  012D1E  0100               	movlb	0	; () banked
  5904  012D20  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5905  012D22  0D01               	mullw	1
  5906  012D24  0E00               	movlw	low irobot_query_and_update@TXArray
  5907  012D26  24F3               	addwf	prodl,w,c
  5908  012D28  6ED9               	movwf	fsr2l,c
  5909  012D2A  0E02               	movlw	high irobot_query_and_update@TXArray
  5910  012D2C  20F4               	addwfc	prodh,w,c
  5911  012D2E  6EDA               	movwf	fsr2h,c
  5912  012D30  50DF               	movf	indf2,w,c
  5913  012D32  EC11  F0AC         	call	_get_packet_size
  5914  012D36  0100               	movlb	0	; () banked
  5915  012D38  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5916  012D3A  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5917  012D3C  0100               	movlb	0	; () banked
  5918  012D3E  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5919  012D40  0100               	movlb	0	; () banked
  5920  012D42  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5921  012D44  0E00               	movlw	0
  5922  012D46  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5923  012D48  0100               	movlb	0	; () banked
  5924  012D4A  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5925  012D4C  0100               	movlb	0	; () banked
  5926  012D4E  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5927  012D50  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5928  012D52  0100               	movlb	0	; () banked
  5929  012D54  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5930  012D56  0100               	movlb	0	; () banked
  5931  012D58  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5932  012D5A  0100               	movlb	0	; () banked
  5933  012D5C  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5934  012D5E  0A80               	xorlw	128
  5935  012D60  0100               	movlb	0	; () banked
  5936  012D62  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5937  012D64  0100               	movlb	0	; () banked
  5938  012D66  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5939  012D68  0A80               	xorlw	128
  5940  012D6A  0100               	movlb	0	; () banked
  5941  012D6C  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5942  012D6E  A0D8               	btfss	status,0,c
  5943  012D70  D7B5               	goto	l2104
  5944                           
  5945                           ; BSR set to: 0
  5946                           ;iRobotSerial.c: 149: }
  5947                           ;iRobotSerial.c: 150: startIndex += get_packet_size(TXArray[i]);
  5948                           
  5949                           ; BSR set to: 0
  5950  012D72  0100               	movlb	0	; () banked
  5951  012D74  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5952  012D76  0D01               	mullw	1
  5953  012D78  0E00               	movlw	low irobot_query_and_update@TXArray
  5954  012D7A  24F3               	addwf	prodl,w,c
  5955  012D7C  6ED9               	movwf	fsr2l,c
  5956  012D7E  0E02               	movlw	high irobot_query_and_update@TXArray
  5957  012D80  20F4               	addwfc	prodh,w,c
  5958  012D82  6EDA               	movwf	fsr2h,c
  5959  012D84  50DF               	movf	indf2,w,c
  5960  012D86  EC11  F0AC         	call	_get_packet_size
  5961  012D8A  0100               	movlb	0	; () banked
  5962  012D8C  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5963                           
  5964                           ; BSR set to: 0
  5965  012D8E  0100               	movlb	0	; () banked
  5966  012D90  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5967  012D92                     l2101:
  5968                           
  5969                           ; BSR set to: 0
  5970                           
  5971                           ; BSR set to: 0
  5972  012D92  0100               	movlb	0	; () banked
  5973  012D94  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5974  012D96  0100               	movlb	0	; () banked
  5975  012D98  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5976  012D9A  B0D8               	btfsc	status,0,c
  5977  012D9C  0012               	return	
  5978  012D9E  D79B               	goto	l2102
  5979  012DA0                     __end_of_irobot_query_and_update:
  5980                           	opt stack 0
  5981                           tblptru	equ	0xFF8
  5982                           tblptrh	equ	0xFF7
  5983                           tblptrl	equ	0xFF6
  5984                           tablat	equ	0xFF5
  5985                           prodh	equ	0xFF4
  5986                           prodl	equ	0xFF3
  5987                           postinc0	equ	0xFEE
  5988                           wreg	equ	0xFE8
  5989                           postdec1	equ	0xFE5
  5990                           fsr1h	equ	0xFE2
  5991                           fsr1l	equ	0xFE1
  5992                           indf2	equ	0xFDF
  5993                           fsr2h	equ	0xFDA
  5994                           fsr2l	equ	0xFD9
  5995                           status	equ	0xFD8
  5996                           
  5997 ;; *************** function _rx_assign *****************
  5998 ;; Defined at:
  5999 ;;		line 74 in file "Library/iRobotSerial.c"
  6000 ;; Parameters:    Size  Location     Type
  6001 ;;  packetID        1    wreg     unsigned char 
  6002 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  6003 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  6004 ;; Auto vars:     Size  Location     Type
  6005 ;;  packetID        1    5[BANK0 ] unsigned char 
  6006 ;; Return value:  Size  Location     Type
  6007 ;;                  1    wreg      void 
  6008 ;; Registers used:
  6009 ;;		wreg, status,2, status,0, cstack
  6010 ;; Tracked objects:
  6011 ;;		On entry : 0/0
  6012 ;;		On exit  : 0/0
  6013 ;;		Unchanged: 0/0
  6014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6015 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6017 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6018 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6019 ;;Total ram usage:        5 bytes
  6020 ;; Hardware stack levels used:    1
  6021 ;; Hardware stack levels required when called:    8
  6022 ;; This function calls:
  6023 ;;		_sort_iRBumpDrop
  6024 ;; This function is called by:
  6025 ;;		_irobot_query_and_update
  6026 ;; This function uses a non-reentrant model
  6027 ;;
  6028                           
  6029                           	psect	text14
  6030  013924                     __ptext14:
  6031                           	opt stack 0
  6032  013924                     _rx_assign:
  6033                           	opt stack 19
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;incstack = 0
  6037                           ;rx_assign@packetID stored from wreg
  6038  013924  0100               	movlb	0	; () banked
  6039  013926  6FBF               	movwf	rx_assign@packetID& (0+255),b
  6040                           
  6041                           ;iRobotSerial.c: 75: switch (packetID) {
  6042  013928  D057               	goto	l2035
  6043  01392A                     l2036:
  6044                           
  6045                           ; BSR set to: 0
  6046  01392A  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  6047                           
  6048                           ; BSR set to: 0
  6049  01392E  EC60  F0A7         	call	_sort_iRBumpDrop	;wreg free
  6050  013932  0012               	return	
  6051  013934                     l2038:
  6052                           
  6053                           ; BSR set to: 0
  6054  013934  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  6055  013938  0012               	return	
  6056  01393A                     l2039:
  6057                           
  6058                           ; BSR set to: 0
  6059  01393A  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  6060  01393E  0012               	return	
  6061  013940                     l2040:
  6062                           
  6063                           ; BSR set to: 0
  6064  013940  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  6065  013944  0012               	return	
  6066  013946                     l2041:
  6067                           
  6068                           ; BSR set to: 0
  6069  013946  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  6070  01394A  0012               	return	
  6071  01394C                     l2042:
  6072                           
  6073                           ; BSR set to: 0
  6074  01394C  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  6075  013950  0012               	return	
  6076  013952                     l2043:
  6077                           
  6078                           ; BSR set to: 0
  6079  013952  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  6080  013956  0012               	return	
  6081  013958                     
  6082                           ; BSR set to: 0
  6083                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  6084                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  6085                           
  6086                           ; BSR set to: 0
  6087  013958  0100               	movlb	0	; () banked
  6088  01395A  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6089  01395C  0100               	movlb	0	; () banked
  6090  01395E  A4D8               	btfss	status,2,c
  6091  013960  D005               	goto	l2046
  6092                           
  6093                           ; BSR set to: 0
  6094  013962  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  6095  013966  0103               	movlb	3	; () banked
  6096  013968  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  6097  01396A  0012               	return	
  6098  01396C                     l2046:
  6099                           
  6100                           ; BSR set to: 0
  6101  01396C  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  6102  013970  0103               	movlb	3	; () banked
  6103  013972  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  6104                           
  6105                           ; BSR set to: 3
  6106  013974  0103               	movlb	3	; () banked
  6107  013976  5122               	movf	_iRDistanceSS& (0+255),w,b
  6108  013978  0100               	movlb	0	; () banked
  6109  01397A  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6110  01397C  6BBD               	clrf	??_rx_assign& (0+255),b
  6111  01397E  0103               	movlb	3	; () banked
  6112  013980  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  6113  013982  0100               	movlb	0	; () banked
  6114  013984  25BD               	addwf	??_rx_assign& (0+255),w,b
  6115  013986  0100               	movlb	0	; () banked
  6116  013988  6F79               	movwf	_iRDistance& (0+255),b
  6117  01398A  0103               	movlb	3	; () banked
  6118  01398C  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  6119  01398E  0100               	movlb	0	; () banked
  6120  013990  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6121  013992  0100               	movlb	0	; () banked
  6122  013994  6F7A               	movwf	(_iRDistance+1)& (0+255),b
  6123                           
  6124                           ; BSR set to: 0
  6125  013996  0012               	return	
  6126  013998                     
  6127                           ; BSR set to: 0
  6128                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  6129                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  6130                           
  6131                           ; BSR set to: 0
  6132  013998  0100               	movlb	0	; () banked
  6133  01399A  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  6134  01399C  0100               	movlb	0	; () banked
  6135  01399E  A4D8               	btfss	status,2,c
  6136  0139A0  D005               	goto	l2051
  6137                           
  6138                           ; BSR set to: 0
  6139  0139A2  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6140  0139A6  0103               	movlb	3	; () banked
  6141  0139A8  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6142  0139AA  0012               	return	
  6143  0139AC                     l2051:
  6144                           
  6145                           ; BSR set to: 0
  6146  0139AC  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6147  0139B0  0103               	movlb	3	; () banked
  6148  0139B2  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6149                           
  6150                           ; BSR set to: 3
  6151  0139B4  0103               	movlb	3	; () banked
  6152  0139B6  511E               	movf	_iRAngleSS& (0+255),w,b
  6153  0139B8  0100               	movlb	0	; () banked
  6154  0139BA  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6155  0139BC  6BBD               	clrf	??_rx_assign& (0+255),b
  6156  0139BE  0103               	movlb	3	; () banked
  6157  0139C0  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6158  0139C2  0100               	movlb	0	; () banked
  6159  0139C4  25BD               	addwf	??_rx_assign& (0+255),w,b
  6160  0139C6  0100               	movlb	0	; () banked
  6161  0139C8  6F77               	movwf	_iRAngle& (0+255),b
  6162  0139CA  0103               	movlb	3	; () banked
  6163  0139CC  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6164  0139CE  0100               	movlb	0	; () banked
  6165  0139D0  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6166  0139D2  0100               	movlb	0	; () banked
  6167  0139D4  6F78               	movwf	(_iRAngle+1)& (0+255),b
  6168                           
  6169                           ; BSR set to: 0
  6170                           ;iRobotSerial.c: 89: }
  6171                           
  6172                           ; BSR set to: 0
  6173  0139D6  0012               	return	
  6174  0139D8                     l2035:
  6175                           
  6176                           ; BSR set to: 0
  6177  0139D8  0100               	movlb	0	; () banked
  6178  0139DA  51BF               	movf	rx_assign@packetID& (0+255),w,b
  6179                           
  6180                           ; Switch size 1, requested type "space"
  6181                           ; Number of cases is 9, Range of values is 7 to 20
  6182                           ; switch strategies available:
  6183                           ; Name         Instructions Cycles
  6184                           ; simple_byte           28    15 (average)
  6185                           ;	Chosen strategy is simple_byte
  6186  0139DC  0A07               	xorlw	7	; case 7
  6187  0139DE  B4D8               	btfsc	status,2,c
  6188  0139E0  D7A4               	goto	l2036
  6189  0139E2  0A0F               	xorlw	15	; case 8
  6190  0139E4  B4D8               	btfsc	status,2,c
  6191  0139E6  D7A6               	goto	l2038
  6192  0139E8  0A01               	xorlw	1	; case 9
  6193  0139EA  B4D8               	btfsc	status,2,c
  6194  0139EC  D7A6               	goto	l2039
  6195  0139EE  0A03               	xorlw	3	; case 10
  6196  0139F0  B4D8               	btfsc	status,2,c
  6197  0139F2  D7A6               	goto	l2040
  6198  0139F4  0A01               	xorlw	1	; case 11
  6199  0139F6  B4D8               	btfsc	status,2,c
  6200  0139F8  D7A6               	goto	l2041
  6201  0139FA  0A07               	xorlw	7	; case 12
  6202  0139FC  B4D8               	btfsc	status,2,c
  6203  0139FE  D7A6               	goto	l2042
  6204  013A00  0A01               	xorlw	1	; case 13
  6205  013A02  B4D8               	btfsc	status,2,c
  6206  013A04  D7A6               	goto	l2043
  6207  013A06  0A1E               	xorlw	30	; case 19
  6208  013A08  B4D8               	btfsc	status,2,c
  6209  013A0A  D7A6               	goto	l2044
  6210  013A0C  0A07               	xorlw	7	; case 20
  6211  013A0E  A4D8               	btfss	status,2,c
  6212  013A10  0012               	return	
  6213  013A12  D7C2               	goto	l2049
  6214  013A14                     __end_of_rx_assign:
  6215                           	opt stack 0
  6216                           tblptru	equ	0xFF8
  6217                           tblptrh	equ	0xFF7
  6218                           tblptrl	equ	0xFF6
  6219                           tablat	equ	0xFF5
  6220                           prodh	equ	0xFF4
  6221                           prodl	equ	0xFF3
  6222                           postinc0	equ	0xFEE
  6223                           wreg	equ	0xFE8
  6224                           postdec1	equ	0xFE5
  6225                           fsr1h	equ	0xFE2
  6226                           fsr1l	equ	0xFE1
  6227                           indf2	equ	0xFDF
  6228                           fsr2h	equ	0xFDA
  6229                           fsr2l	equ	0xFD9
  6230                           status	equ	0xFD8
  6231                           
  6232 ;; *************** function _sort_iRBumpDrop *****************
  6233 ;; Defined at:
  6234 ;;		line 92 in file "Library/iRobotSerial.c"
  6235 ;; Parameters:    Size  Location     Type
  6236 ;;		None
  6237 ;; Auto vars:     Size  Location     Type
  6238 ;;		None
  6239 ;; Return value:  Size  Location     Type
  6240 ;;                  1    wreg      void 
  6241 ;; Registers used:
  6242 ;;		wreg, status,2, status,0
  6243 ;; Tracked objects:
  6244 ;;		On entry : 0/0
  6245 ;;		On exit  : 0/0
  6246 ;;		Unchanged: 0/0
  6247 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6250 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6251 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6252 ;;Total ram usage:        1 bytes
  6253 ;; Hardware stack levels used:    1
  6254 ;; Hardware stack levels required when called:    7
  6255 ;; This function calls:
  6256 ;;		Nothing
  6257 ;; This function is called by:
  6258 ;;		_rx_assign
  6259 ;; This function uses a non-reentrant model
  6260 ;;
  6261                           
  6262                           	psect	text15
  6263  014EC0                     __ptext15:
  6264                           	opt stack 0
  6265  014EC0                     _sort_iRBumpDrop:
  6266                           	opt stack 19
  6267                           
  6268                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6269                           
  6270                           ;incstack = 0
  6271  014EC0  A036               	btfss	_iRBumpDrop,0,c
  6272  014EC2  D002               	goto	l2058
  6273  014EC4  0E01               	movlw	1
  6274  014EC6  D001               	goto	L1
  6275  014EC8                     l2058:
  6276                           
  6277                           ; BSR set to: 0
  6278  014EC8  0E00               	movlw	0
  6279  014ECA                     L1:
  6280  014ECA  0100               	movlb	0	; () banked
  6281  014ECC  6F88               	movwf	_iRBumpRight& (0+255),b
  6282                           
  6283                           ; BSR set to: 0
  6284                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  6285                           
  6286                           ; BSR set to: 0
  6287  014ECE  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6288  014ED2  0100               	movlb	0	; () banked
  6289  014ED4  90D8               	bcf	status,0,c
  6290  014ED6  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6291  014ED8  0100               	movlb	0	; () banked
  6292  014EDA  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6293  014EDC  D002               	goto	l2062
  6294                           
  6295                           ; BSR set to: 0
  6296  014EDE  0E01               	movlw	1
  6297  014EE0  D001               	goto	L2
  6298  014EE2                     l2062:
  6299                           
  6300                           ; BSR set to: 0
  6301                           
  6302                           ; BSR set to: 0
  6303  014EE2  0E00               	movlw	0
  6304  014EE4                     L2:
  6305  014EE4  0100               	movlb	0	; () banked
  6306  014EE6  6F87               	movwf	_iRBumpLeft& (0+255),b
  6307                           
  6308                           ; BSR set to: 0
  6309                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  6310                           
  6311                           ; BSR set to: 0
  6312  014EE8  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6313  014EEC  0100               	movlb	0	; () banked
  6314  014EEE  90D8               	bcf	status,0,c
  6315  014EF0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6316  014EF2  0100               	movlb	0	; () banked
  6317  014EF4  90D8               	bcf	status,0,c
  6318  014EF6  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6319  014EF8  0100               	movlb	0	; () banked
  6320  014EFA  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6321  014EFC  D002               	goto	l2066
  6322                           
  6323                           ; BSR set to: 0
  6324  014EFE  0E01               	movlw	1
  6325  014F00  D001               	goto	L3
  6326  014F02                     l2066:
  6327                           
  6328                           ; BSR set to: 0
  6329                           
  6330                           ; BSR set to: 0
  6331  014F02  0E00               	movlw	0
  6332  014F04                     L3:
  6333  014F04  0100               	movlb	0	; () banked
  6334  014F06  6F86               	movwf	_iRDropRight& (0+255),b
  6335                           
  6336                           ; BSR set to: 0
  6337                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  6338                           
  6339                           ; BSR set to: 0
  6340  014F08  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6341  014F0C  0100               	movlb	0	; () banked
  6342  014F0E  90D8               	bcf	status,0,c
  6343  014F10  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6344  014F12  0100               	movlb	0	; () banked
  6345  014F14  90D8               	bcf	status,0,c
  6346  014F16  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6347  014F18  0100               	movlb	0	; () banked
  6348  014F1A  90D8               	bcf	status,0,c
  6349  014F1C  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6350  014F1E  0100               	movlb	0	; () banked
  6351  014F20  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6352  014F22  D002               	goto	l2070
  6353                           
  6354                           ; BSR set to: 0
  6355  014F24  0E01               	movlw	1
  6356  014F26  D001               	goto	L4
  6357  014F28                     l2070:
  6358                           
  6359                           ; BSR set to: 0
  6360                           
  6361                           ; BSR set to: 0
  6362  014F28  0E00               	movlw	0
  6363  014F2A                     L4:
  6364  014F2A  0100               	movlb	0	; () banked
  6365  014F2C  6F85               	movwf	_iRDropLeft& (0+255),b
  6366                           
  6367                           ; BSR set to: 0
  6368                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6369                           
  6370                           ; BSR set to: 0
  6371  014F2E  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6372  014F32  0100               	movlb	0	; () banked
  6373  014F34  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6374  014F36  0E0F               	movlw	15
  6375  014F38  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6376  014F3A  0100               	movlb	0	; () banked
  6377  014F3C  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6378  014F3E  D003               	goto	l2074
  6379                           
  6380                           ; BSR set to: 0
  6381  014F40  0E01               	movlw	1
  6382  014F42  6E2F               	movwf	_iRDropCaster,c
  6383  014F44  0012               	return	
  6384  014F46                     l2074:
  6385                           
  6386                           ; BSR set to: 0
  6387                           
  6388                           ; BSR set to: 0
  6389  014F46  0E00               	movlw	0
  6390  014F48  6E2F               	movwf	_iRDropCaster,c
  6391  014F4A  0012               	return	
  6392  014F4C                     __end_of_sort_iRBumpDrop:
  6393                           	opt stack 0
  6394                           tblptru	equ	0xFF8
  6395                           tblptrh	equ	0xFF7
  6396                           tblptrl	equ	0xFF6
  6397                           tablat	equ	0xFF5
  6398                           prodh	equ	0xFF4
  6399                           prodl	equ	0xFF3
  6400                           postinc0	equ	0xFEE
  6401                           wreg	equ	0xFE8
  6402                           postdec1	equ	0xFE5
  6403                           fsr1h	equ	0xFE2
  6404                           fsr1l	equ	0xFE1
  6405                           indf2	equ	0xFDF
  6406                           fsr2h	equ	0xFDA
  6407                           fsr2l	equ	0xFD9
  6408                           status	equ	0xFD8
  6409                           
  6410 ;; *************** function _get_packet_size *****************
  6411 ;; Defined at:
  6412 ;;		line 60 in file "Library/iRobotSerial.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  packetID        1    wreg     unsigned char 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  packetID        1    0[BANK0 ] unsigned char 
  6417 ;; Return value:  Size  Location     Type
  6418 ;;                  1    wreg      unsigned char 
  6419 ;; Registers used:
  6420 ;;		wreg, status,2, status,0
  6421 ;; Tracked objects:
  6422 ;;		On entry : 0/0
  6423 ;;		On exit  : 0/0
  6424 ;;		Unchanged: 0/0
  6425 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6426 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6427 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6428 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6429 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6430 ;;Total ram usage:        1 bytes
  6431 ;; Hardware stack levels used:    1
  6432 ;; Hardware stack levels required when called:    7
  6433 ;; This function calls:
  6434 ;;		Nothing
  6435 ;; This function is called by:
  6436 ;;		_irobot_query_and_update
  6437 ;; This function uses a non-reentrant model
  6438 ;;
  6439                           
  6440                           	psect	text16
  6441  015822                     __ptext16:
  6442                           	opt stack 0
  6443  015822                     _get_packet_size:
  6444                           	opt stack 20
  6445                           
  6446                           ; BSR set to: 0
  6447                           ;incstack = 0
  6448                           ;get_packet_size@packetID stored from wreg
  6449  015822  0100               	movlb	0	; () banked
  6450  015824  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6451                           
  6452                           ;iRobotSerial.c: 61: switch (packetID) {
  6453  015826  D012               	goto	l2021
  6454  015828  0E01               	movlw	1
  6455  01582A  0012               	return	
  6456  01582C  0E01               	movlw	1
  6457  01582E  0012               	return	
  6458  015830  0E01               	movlw	1
  6459  015832  0012               	return	
  6460  015834  0E01               	movlw	1
  6461  015836  0012               	return	
  6462  015838  0E01               	movlw	1
  6463  01583A  0012               	return	
  6464  01583C  0E01               	movlw	1
  6465  01583E  0012               	return	
  6466  015840  0E01               	movlw	1
  6467  015842  0012               	return	
  6468  015844  0E02               	movlw	2
  6469  015846  0012               	return	
  6470  015848  0E02               	movlw	2
  6471                           
  6472                           ;iRobotSerial.c: 71: }
  6473  01584A  0012               	return	
  6474  01584C                     l2021:
  6475  01584C  0100               	movlb	0	; () banked
  6476  01584E  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6477                           
  6478                           ; Switch size 1, requested type "space"
  6479                           ; Number of cases is 9, Range of values is 7 to 20
  6480                           ; switch strategies available:
  6481                           ; Name         Instructions Cycles
  6482                           ; simple_byte           28    15 (average)
  6483                           ;	Chosen strategy is simple_byte
  6484  015850  0A07               	xorlw	7	; case 7
  6485  015852  B4D8               	btfsc	status,2,c
  6486  015854  D7E9               	goto	l2022
  6487  015856  0A0F               	xorlw	15	; case 8
  6488  015858  B4D8               	btfsc	status,2,c
  6489  01585A  D7E8               	goto	l2024
  6490  01585C  0A01               	xorlw	1	; case 9
  6491  01585E  B4D8               	btfsc	status,2,c
  6492  015860  D7E7               	goto	l2025
  6493  015862  0A03               	xorlw	3	; case 10
  6494  015864  B4D8               	btfsc	status,2,c
  6495  015866  D7E6               	goto	l2026
  6496  015868  0A01               	xorlw	1	; case 11
  6497  01586A  B4D8               	btfsc	status,2,c
  6498  01586C  D7E5               	goto	l2027
  6499  01586E  0A07               	xorlw	7	; case 12
  6500  015870  B4D8               	btfsc	status,2,c
  6501  015872  D7E4               	goto	l2028
  6502  015874  0A01               	xorlw	1	; case 13
  6503  015876  B4D8               	btfsc	status,2,c
  6504  015878  D7E3               	goto	l2029
  6505  01587A  0A1E               	xorlw	30	; case 19
  6506  01587C  B4D8               	btfsc	status,2,c
  6507  01587E  D7E2               	goto	l2030
  6508  015880  0A07               	xorlw	7	; case 20
  6509  015882  A4D8               	btfss	status,2,c
  6510  015884  0012               	return	
  6511  015886  D7E0               	goto	l2031
  6512  015888                     __end_of_get_packet_size:
  6513                           	opt stack 0
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1h	equ	0xFE2
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           fsr2h	equ	0xFDA
  6527                           fsr2l	equ	0xFD9
  6528                           status	equ	0xFD8
  6529                           
  6530 ;; *************** function _eusart_getch *****************
  6531 ;; Defined at:
  6532 ;;		line 125 in file "Library/iRobotSerial.c"
  6533 ;; Parameters:    Size  Location     Type
  6534 ;;		None
  6535 ;; Auto vars:     Size  Location     Type
  6536 ;;		None
  6537 ;; Return value:  Size  Location     Type
  6538 ;;                  1    wreg      unsigned char 
  6539 ;; Registers used:
  6540 ;;		wreg, status,2
  6541 ;; Tracked objects:
  6542 ;;		On entry : 0/0
  6543 ;;		On exit  : 0/0
  6544 ;;		Unchanged: 0/0
  6545 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6546 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;Total ram usage:        0 bytes
  6551 ;; Hardware stack levels used:    1
  6552 ;; Hardware stack levels required when called:    7
  6553 ;; This function calls:
  6554 ;;		Nothing
  6555 ;; This function is called by:
  6556 ;;		_irobot_query_and_update
  6557 ;; This function uses a non-reentrant model
  6558 ;;
  6559                           
  6560                           	psect	text17
  6561  0167C0                     __ptext17:
  6562                           	opt stack 0
  6563  0167C0                     _eusart_getch:
  6564                           	opt stack 20
  6565                           
  6566                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6567                           
  6568                           ;incstack = 0
  6569  0167C0  AA9E               	btfss	3998,5,c	;volatile
  6570  0167C2  D7FE               	goto	_eusart_getch
  6571                           
  6572                           ;iRobotSerial.c: 127: return RCREG1;
  6573  0167C4  50AF               	movf	4015,w,c	;volatile
  6574  0167C6  0012               	return	
  6575  0167C8                     __end_of_eusart_getch:
  6576                           	opt stack 0
  6577                           tblptru	equ	0xFF8
  6578                           tblptrh	equ	0xFF7
  6579                           tblptrl	equ	0xFF6
  6580                           tablat	equ	0xFF5
  6581                           prodh	equ	0xFF4
  6582                           prodl	equ	0xFF3
  6583                           postinc0	equ	0xFEE
  6584                           wreg	equ	0xFE8
  6585                           postdec1	equ	0xFE5
  6586                           fsr1h	equ	0xFE2
  6587                           fsr1l	equ	0xFE1
  6588                           indf2	equ	0xFDF
  6589                           fsr2h	equ	0xFDA
  6590                           fsr2l	equ	0xFD9
  6591                           status	equ	0xFD8
  6592                           
  6593 ;; *************** function _irobot_stop_motion *****************
  6594 ;; Defined at:
  6595 ;;		line 298 in file "Library/iRobotSerial.c"
  6596 ;; Parameters:    Size  Location     Type
  6597 ;;  isScript        1    wreg     unsigned char 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;  isScript        1   25[BANK0 ] unsigned char 
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6609 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6610 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6612 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6613 ;;Total ram usage:        1 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    9
  6616 ;; This function calls:
  6617 ;;		_irobot_move
  6618 ;; This function is called by:
  6619 ;;		_irobot_rotate
  6620 ;;		_safeToGo
  6621 ;;		_move_and_rotate
  6622 ;;		_mode2
  6623 ;;		_mode4
  6624 ;;		_irobot_move_to_simple
  6625 ;;		_irobot_rotate_to
  6626 ;; This function uses a non-reentrant model
  6627 ;;
  6628                           
  6629                           	psect	text18
  6630  015E26                     __ptext18:
  6631                           	opt stack 0
  6632  015E26                     _irobot_stop_motion:
  6633                           	opt stack 19
  6634                           
  6635                           ;incstack = 0
  6636                           ;irobot_stop_motion@isScript stored from wreg
  6637  015E26  0100               	movlb	0	; () banked
  6638  015E28  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6639                           
  6640                           ;iRobotSerial.c: 299: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6641  015E2A  0100               	movlb	0	; () banked
  6642  015E2C  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6643  015E2E  0100               	movlb	0	; () banked
  6644  015E30  B4D8               	btfsc	status,2,c
  6645  015E32  D00E               	goto	l2168
  6646                           
  6647                           ; BSR set to: 0
  6648  015E34  0E00               	movlw	0
  6649  015E36  0100               	movlb	0	; () banked
  6650  015E38  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6651  015E3A  0E00               	movlw	0
  6652  015E3C  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6653  015E3E  0E00               	movlw	0
  6654  015E40  0100               	movlb	0	; () banked
  6655  015E42  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6656  015E44  0E00               	movlw	0
  6657  015E46  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6658  015E48  0E01               	movlw	1
  6659  015E4A  EC9A  F0A2         	call	_irobot_move
  6660  015E4E  0012               	return	
  6661  015E50                     l2168:
  6662  015E50  0E00               	movlw	0
  6663  015E52  0100               	movlb	0	; () banked
  6664  015E54  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6665  015E56  0E00               	movlw	0
  6666  015E58  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6667  015E5A  0E00               	movlw	0
  6668  015E5C  0100               	movlb	0	; () banked
  6669  015E5E  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6670  015E60  0E00               	movlw	0
  6671  015E62  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6672  015E64  0E00               	movlw	0
  6673  015E66  EC9A  F0A2         	call	_irobot_move
  6674  015E6A  0012               	return	
  6675  015E6C                     __end_of_irobot_stop_motion:
  6676                           	opt stack 0
  6677                           tblptru	equ	0xFF8
  6678                           tblptrh	equ	0xFF7
  6679                           tblptrl	equ	0xFF6
  6680                           tablat	equ	0xFF5
  6681                           prodh	equ	0xFF4
  6682                           prodl	equ	0xFF3
  6683                           postinc0	equ	0xFEE
  6684                           wreg	equ	0xFE8
  6685                           postdec1	equ	0xFE5
  6686                           fsr1h	equ	0xFE2
  6687                           fsr1l	equ	0xFE1
  6688                           indf2	equ	0xFDF
  6689                           fsr2h	equ	0xFDA
  6690                           fsr2l	equ	0xFD9
  6691                           status	equ	0xFD8
  6692                           
  6693 ;; *************** function _irobot_move *****************
  6694 ;; Defined at:
  6695 ;;		line 219 in file "Library/iRobotSerial.c"
  6696 ;; Parameters:    Size  Location     Type
  6697 ;;  isScript        1    wreg     unsigned char 
  6698 ;;  moveSpeed       2   16[BANK0 ] short 
  6699 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6700 ;; Auto vars:     Size  Location     Type
  6701 ;;  isScript        1   24[BANK0 ] unsigned char 
  6702 ;; Return value:  Size  Location     Type
  6703 ;;                  1    wreg      void 
  6704 ;; Registers used:
  6705 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6706 ;; Tracked objects:
  6707 ;;		On entry : 0/0
  6708 ;;		On exit  : 0/0
  6709 ;;		Unchanged: 0/0
  6710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6711 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6713 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6714 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;Total ram usage:        9 bytes
  6716 ;; Hardware stack levels used:    1
  6717 ;; Hardware stack levels required when called:    8
  6718 ;; This function calls:
  6719 ;;		_eusart_putch
  6720 ;;		_load_iRScriptStack
  6721 ;;		_twos_complement_of
  6722 ;; This function is called by:
  6723 ;;		_irobot_rotate
  6724 ;;		_irobot_stop_motion
  6725 ;;		_irobot_move_straight
  6726 ;;		_irobot_move_to_simple
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text19
  6731  014534                     __ptext19:
  6732                           	opt stack 0
  6733  014534                     _irobot_move:
  6734                           	opt stack 19
  6735                           
  6736                           ;incstack = 0
  6737                           ;irobot_move@isScript stored from wreg
  6738  014534  0100               	movlb	0	; () banked
  6739  014536  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6740                           
  6741                           ;iRobotSerial.c: 220: moveSpeed = twos_complement_of(moveSpeed);
  6742  014538  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6743  01453C  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6744  014540  EC7C  F0AF         	call	_twos_complement_of	;wreg free
  6745  014544  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6746  014548  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6747                           
  6748                           ;iRobotSerial.c: 221: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6749  01454C  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6750  014550  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6751  014554  EC7C  F0AF         	call	_twos_complement_of	;wreg free
  6752  014558  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6753  01455C  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6754                           
  6755                           ;iRobotSerial.c: 223: if (isScript) {
  6756  014560  0100               	movlb	0	; () banked
  6757  014562  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6758  014564  0100               	movlb	0	; () banked
  6759  014566  B4D8               	btfsc	status,2,c
  6760  014568  D029               	goto	l2139
  6761                           
  6762                           ; BSR set to: 0
  6763                           ;iRobotSerial.c: 224: load_iRScriptStack(5, iR_DRIVE,
  6764                           ;iRobotSerial.c: 225: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6765                           ;iRobotSerial.c: 226: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6766  01456A  0E00               	movlw	0
  6767  01456C  0100               	movlb	0	; () banked
  6768  01456E  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6769  014570  0E89               	movlw	137
  6770  014572  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6771  014574  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6772  014578  0100               	movlb	0	; () banked
  6773  01457A  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6774  01457C  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6775  01457E  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6776  014580  0100               	movlb	0	; () banked
  6777  014582  51CE               	movf	??_irobot_move& (0+255),w,b
  6778  014584  0100               	movlb	0	; () banked
  6779  014586  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6780  014588  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6781  01458A  0100               	movlb	0	; () banked
  6782  01458C  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6783  01458E  0100               	movlb	0	; () banked
  6784  014590  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6785  014592  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6786  014594  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6787  014598  0100               	movlb	0	; () banked
  6788  01459A  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6789  01459C  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6790  01459E  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6791  0145A0  0100               	movlb	0	; () banked
  6792  0145A2  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6793  0145A4  0100               	movlb	0	; () banked
  6794  0145A6  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6795  0145A8  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6796  0145AA  0100               	movlb	0	; () banked
  6797  0145AC  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6798  0145AE  0100               	movlb	0	; () banked
  6799  0145B0  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6800  0145B2  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6801  0145B4  0E05               	movlw	5
  6802  0145B6  EC72  F0AB         	call	_load_iRScriptStack
  6803                           
  6804                           ;iRobotSerial.c: 227: }
  6805  0145BA  0012               	return	
  6806  0145BC                     l2139:
  6807                           
  6808                           ;iRobotSerial.c: 228: else{
  6809                           ;iRobotSerial.c: 229: eusart_putch(iR_DRIVE);
  6810  0145BC  0E89               	movlw	137
  6811  0145BE  EC9D  F0B3         	call	_eusart_putch
  6812                           
  6813                           ;iRobotSerial.c: 230: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6814  0145C2  0100               	movlb	0	; () banked
  6815  0145C4  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6816  0145C6  EC9D  F0B3         	call	_eusart_putch
  6817                           
  6818                           ;iRobotSerial.c: 231: eusart_putch(((moveSpeed) & 0xFF));
  6819  0145CA  0100               	movlb	0	; () banked
  6820  0145CC  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6821  0145CE  EC9D  F0B3         	call	_eusart_putch
  6822                           
  6823                           ;iRobotSerial.c: 232: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6824  0145D2  0100               	movlb	0	; () banked
  6825  0145D4  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6826  0145D6  EC9D  F0B3         	call	_eusart_putch
  6827                           
  6828                           ;iRobotSerial.c: 233: eusart_putch(((moveTurnRadius) & 0xFF));
  6829  0145DA  0100               	movlb	0	; () banked
  6830  0145DC  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6831  0145DE  EC9D  F0B3         	call	_eusart_putch
  6832  0145E2  0012               	return	
  6833  0145E4                     __end_of_irobot_move:
  6834                           	opt stack 0
  6835                           tblptru	equ	0xFF8
  6836                           tblptrh	equ	0xFF7
  6837                           tblptrl	equ	0xFF6
  6838                           tablat	equ	0xFF5
  6839                           prodh	equ	0xFF4
  6840                           prodl	equ	0xFF3
  6841                           postinc0	equ	0xFEE
  6842                           wreg	equ	0xFE8
  6843                           postdec1	equ	0xFE5
  6844                           fsr1h	equ	0xFE2
  6845                           fsr1l	equ	0xFE1
  6846                           indf2	equ	0xFDF
  6847                           fsr2h	equ	0xFDA
  6848                           fsr2l	equ	0xFD9
  6849                           status	equ	0xFD8
  6850                           
  6851 ;; *************** function _twos_complement_of *****************
  6852 ;; Defined at:
  6853 ;;		line 166 in file "Library/iRobotSerial.c"
  6854 ;; Parameters:    Size  Location     Type
  6855 ;;  complementVa    2    0[BANK0 ] short 
  6856 ;; Auto vars:     Size  Location     Type
  6857 ;;		None
  6858 ;; Return value:  Size  Location     Type
  6859 ;;                  2    0[BANK0 ] unsigned short 
  6860 ;; Registers used:
  6861 ;;		wreg, status,2, status,0
  6862 ;; Tracked objects:
  6863 ;;		On entry : 0/0
  6864 ;;		On exit  : 0/0
  6865 ;;		Unchanged: 0/0
  6866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6867 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6868 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6869 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6870 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6871 ;;Total ram usage:        2 bytes
  6872 ;; Hardware stack levels used:    1
  6873 ;; Hardware stack levels required when called:    7
  6874 ;; This function calls:
  6875 ;;		Nothing
  6876 ;; This function is called by:
  6877 ;;		_irobot_move
  6878 ;;		_irobot_angle_wait
  6879 ;;		_irobot_distance_wait
  6880 ;; This function uses a non-reentrant model
  6881 ;;
  6882                           
  6883                           	psect	text20
  6884  015EF8                     __ptext20:
  6885                           	opt stack 0
  6886  015EF8                     _twos_complement_of:
  6887                           	opt stack 19
  6888                           
  6889                           ;iRobotSerial.c: 167: if (complementValue < 0) {
  6890                           
  6891                           ;incstack = 0
  6892  015EF8  0100               	movlb	0	; () banked
  6893  015EFA  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6894  015EFC  D01A               	goto	l2110
  6895                           
  6896                           ; BSR set to: 0
  6897                           ;iRobotSerial.c: 168: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6898  015EFE  0100               	movlb	0	; () banked
  6899  015F00  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6900  015F02  D007               	goto	u9470
  6901  015F04  0100               	movlb	0	; () banked
  6902  015F06  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6903  015F08  E10A               	bnz	l2112
  6904  015F0A  0100               	movlb	0	; () banked
  6905  015F0C  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6906  015F0E  B0D8               	btfsc	status,0,c
  6907  015F10  D006               	goto	l2112
  6908  015F12                     u9470:
  6909                           
  6910                           ; BSR set to: 0
  6911  015F12  0100               	movlb	0	; () banked
  6912  015F14  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6913  015F16  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6914  015F18  B0D8               	btfsc	status,0,c
  6915  015F1A  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6916  015F1C  D004               	goto	l2114
  6917  015F1E                     l2112:
  6918                           
  6919                           ; BSR set to: 0
  6920  015F1E  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6921  015F22  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6922  015F26                     l2114:
  6923                           
  6924                           ; BSR set to: 0
  6925                           ;iRobotSerial.c: 169: complementValue = ~complementValue;
  6926                           
  6927                           ; BSR set to: 0
  6928  015F26  0100               	movlb	0	; () banked
  6929  015F28  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6930  015F2A  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6931                           
  6932                           ;iRobotSerial.c: 170: complementValue += 1;
  6933  015F2C  0100               	movlb	0	; () banked
  6934  015F2E  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6935  015F30  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6936  015F32                     l2110:
  6937                           
  6938                           ; BSR set to: 0
  6939                           ;iRobotSerial.c: 171: }
  6940                           ;iRobotSerial.c: 172: return complementValue;
  6941                           
  6942                           ; BSR set to: 0
  6943  015F32  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6944  015F36  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6945  015F3A  0012               	return	
  6946  015F3C                     __end_of_twos_complement_of:
  6947                           	opt stack 0
  6948                           tblptru	equ	0xFF8
  6949                           tblptrh	equ	0xFF7
  6950                           tblptrl	equ	0xFF6
  6951                           tablat	equ	0xFF5
  6952                           prodh	equ	0xFF4
  6953                           prodl	equ	0xFF3
  6954                           postinc0	equ	0xFEE
  6955                           wreg	equ	0xFE8
  6956                           postdec1	equ	0xFE5
  6957                           fsr1h	equ	0xFE2
  6958                           fsr1l	equ	0xFE1
  6959                           indf2	equ	0xFDF
  6960                           fsr2h	equ	0xFDA
  6961                           fsr2l	equ	0xFD9
  6962                           status	equ	0xFD8
  6963                           
  6964 ;; *************** function _irobot_song_play *****************
  6965 ;; Defined at:
  6966 ;;		line 273 in file "Library/iRobotSerial.c"
  6967 ;; Parameters:    Size  Location     Type
  6968 ;;  songNumber      1    wreg     unsigned char 
  6969 ;; Auto vars:     Size  Location     Type
  6970 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6971 ;; Return value:  Size  Location     Type
  6972 ;;                  1    wreg      void 
  6973 ;; Registers used:
  6974 ;;		wreg, status,2, cstack
  6975 ;; Tracked objects:
  6976 ;;		On entry : 0/0
  6977 ;;		On exit  : 0/0
  6978 ;;		Unchanged: 0/0
  6979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6981 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6983 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6984 ;;Total ram usage:        1 bytes
  6985 ;; Hardware stack levels used:    1
  6986 ;; Hardware stack levels required when called:    8
  6987 ;; This function calls:
  6988 ;;		_eusart_putch
  6989 ;; This function is called by:
  6990 ;;		_safeToGo
  6991 ;;		_mode4
  6992 ;; This function uses a non-reentrant model
  6993 ;;
  6994                           
  6995                           	psect	text21
  6996  0166C0                     __ptext21:
  6997                           	opt stack 0
  6998  0166C0                     _irobot_song_play:
  6999                           	opt stack 20
  7000                           
  7001                           ; BSR set to: 0
  7002                           ;incstack = 0
  7003                           ;irobot_song_play@songNumber stored from wreg
  7004  0166C0  0100               	movlb	0	; () banked
  7005  0166C2  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  7006                           
  7007                           ;iRobotSerial.c: 274: eusart_putch(iR_SONG_PLAY);
  7008  0166C4  0E8D               	movlw	141
  7009  0166C6  EC9D  F0B3         	call	_eusart_putch
  7010                           
  7011                           ;iRobotSerial.c: 275: eusart_putch(songNumber);
  7012  0166CA  0100               	movlb	0	; () banked
  7013  0166CC  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  7014  0166CE  EC9D  F0B3         	call	_eusart_putch
  7015  0166D2  0012               	return		;funcret
  7016  0166D4                     __end_of_irobot_song_play:
  7017                           	opt stack 0
  7018                           tblptru	equ	0xFF8
  7019                           tblptrh	equ	0xFF7
  7020                           tblptrl	equ	0xFF6
  7021                           tablat	equ	0xFF5
  7022                           prodh	equ	0xFF4
  7023                           prodl	equ	0xFF3
  7024                           postinc0	equ	0xFEE
  7025                           wreg	equ	0xFE8
  7026                           postdec1	equ	0xFE5
  7027                           fsr1h	equ	0xFE2
  7028                           fsr1l	equ	0xFE1
  7029                           indf2	equ	0xFDF
  7030                           fsr2h	equ	0xFDA
  7031                           fsr2l	equ	0xFD9
  7032                           status	equ	0xFD8
  7033                           
  7034 ;; *************** function _printf *****************
  7035 ;; Defined at:
  7036 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  7039 ;;		 -> STR_18(21), STR_17(21), STR_16(21), STR_15(21), 
  7040 ;;		 -> STR_14(21), STR_13(3), STR_12(76), STR_11(3), 
  7041 ;;		 -> STR_10(14), STR_9(3), STR_8(46), STR_7(3), 
  7042 ;;		 -> STR_6(46), STR_5(3), STR_4(60), STR_3(3), 
  7043 ;;		 -> STR_2(60), STR_1(3), 
  7044 ;; Auto vars:     Size  Location     Type
  7045 ;;  tmpval          4    0        struct .
  7046 ;;  cp              3    0        PTR const unsigned char 
  7047 ;;  val             2   38[BANK0 ] unsigned int 
  7048 ;;  ap              2   36[BANK0 ] PTR void [1]
  7049 ;;		 -> ?_printf(2), 
  7050 ;;  len             2    0        unsigned int 
  7051 ;;  c               1   40[BANK0 ] char 
  7052 ;;  flag            1   35[BANK0 ] unsigned char 
  7053 ;;  prec            1   34[BANK0 ] char 
  7054 ;; Return value:  Size  Location     Type
  7055 ;;                  2   21[BANK0 ] int 
  7056 ;; Registers used:
  7057 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7058 ;; Tracked objects:
  7059 ;;		On entry : 0/0
  7060 ;;		On exit  : 0/0
  7061 ;;		Unchanged: 0/0
  7062 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7063 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7064 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7065 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7066 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7067 ;;Total ram usage:       20 bytes
  7068 ;; Hardware stack levels used:    1
  7069 ;; Hardware stack levels required when called:   12
  7070 ;; This function calls:
  7071 ;;		___lwdiv
  7072 ;;		___lwmod
  7073 ;;		_putch
  7074 ;; This function is called by:
  7075 ;;		_findClosestWall
  7076 ;;		_mode1
  7077 ;;		_mode2
  7078 ;;		_mode4
  7079 ;;		_main
  7080 ;; This function uses a non-reentrant model
  7081 ;;
  7082                           
  7083                           	psect	text22
  7084  012568                     __ptext22:
  7085                           	opt stack 0
  7086  012568                     _printf:
  7087                           	opt stack 18
  7088                           
  7089                           ;doprnt.c: 466: va_list ap;
  7090                           ;doprnt.c: 499: signed char c;
  7091                           ;doprnt.c: 506: signed char prec;
  7092                           ;doprnt.c: 508: unsigned char flag;
  7093                           ;doprnt.c: 523: union {
  7094                           ;doprnt.c: 524: unsigned long vd;
  7095                           ;doprnt.c: 525: double integ;
  7096                           ;doprnt.c: 526: } tmpval;
  7097                           ;doprnt.c: 528: unsigned int val;
  7098                           ;doprnt.c: 529: unsigned len;
  7099                           ;doprnt.c: 530: const char * cp;
  7100                           ;doprnt.c: 533: *ap = __va_start();
  7101                           
  7102                           ;incstack = 0
  7103  012568  0ED1               	movlw	low (?_printf+2)
  7104  01256A  0100               	movlb	0	; () banked
  7105  01256C  6FDE               	movwf	printf@ap& (0+255),b
  7106  01256E  0E00               	movlw	high (?_printf+2)
  7107  012570  0100               	movlb	0	; () banked
  7108  012572  6FDF               	movwf	(printf@ap+1)& (0+255),b
  7109                           
  7110                           ;doprnt.c: 536: while(c = *f++) {
  7111  012574  D0C9               	goto	u11190
  7112  012576                     
  7113                           ; BSR set to: 0
  7114                           ;doprnt.c: 538: if(c != '%')
  7115                           
  7116                           ; BSR set to: 0
  7117  012576  0E25               	movlw	37
  7118  012578  0100               	movlb	0	; () banked
  7119  01257A  19E2               	xorwf	printf@c& (0+255),w,b
  7120  01257C  B4D8               	btfsc	status,2,c
  7121  01257E  D005               	goto	l2435
  7122                           
  7123                           ; BSR set to: 0
  7124                           ;doprnt.c: 540: {
  7125                           ;doprnt.c: 541: (putch(c) );
  7126  012580  0100               	movlb	0	; () banked
  7127  012582  51E2               	movf	printf@c& (0+255),w,b
  7128  012584  EC8F  F0B3         	call	_putch
  7129                           
  7130                           ;doprnt.c: 542: continue;
  7131  012588  D0BF               	goto	u11190
  7132  01258A                     l2435:
  7133                           
  7134                           ;doprnt.c: 543: }
  7135                           ;doprnt.c: 548: flag = 0;
  7136  01258A  0E00               	movlw	0
  7137  01258C  0100               	movlb	0	; () banked
  7138  01258E  6FDD               	movwf	printf@flag& (0+255),b
  7139                           
  7140                           ;doprnt.c: 635: switch(c = *f++) {
  7141  012590  D014               	goto	l2436
  7142  012592                     
  7143                           ; BSR set to: 0
  7144                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7145                           
  7146                           ; BSR set to: 0
  7147  012592  C0DE  FFD9         	movff	printf@ap,fsr2l
  7148  012596  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7149  01259A  50DF               	movf	indf2,w,c
  7150  01259C  0100               	movlb	0	; () banked
  7151  01259E  6FE2               	movwf	printf@c& (0+255),b
  7152                           
  7153                           ; BSR set to: 0
  7154  0125A0  0E02               	movlw	2
  7155  0125A2  0100               	movlb	0	; () banked
  7156  0125A4  27DE               	addwf	printf@ap& (0+255),f,b
  7157  0125A6  0E00               	movlw	0
  7158  0125A8  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7159  0125AA                     
  7160                           ; BSR set to: 0
  7161                           ;doprnt.c: 809: (putch(c) );
  7162                           
  7163                           ; BSR set to: 0
  7164  0125AA  0100               	movlb	0	; () banked
  7165  0125AC  51E2               	movf	printf@c& (0+255),w,b
  7166  0125AE  EC8F  F0B3         	call	_putch
  7167                           
  7168                           ;doprnt.c: 810: continue;
  7169  0125B2  D0AA               	goto	u11190
  7170  0125B4                     
  7171                           ;doprnt.c: 818: flag |= 0x40;
  7172  0125B4  0100               	movlb	0	; () banked
  7173  0125B6  8DDD               	bsf	printf@flag& (0+255),6,b
  7174                           
  7175                           ; BSR set to: 0
  7176                           ;doprnt.c: 822: }
  7177                           
  7178                           ;doprnt.c: 819: break;
  7179  0125B8  D01E               	goto	l2441
  7180  0125BA                     l2436:
  7181                           
  7182                           ; BSR set to: 0
  7183                           
  7184                           ; BSR set to: 0
  7185  0125BA  C0CF  FFF6         	movff	printf@f,tblptrl
  7186  0125BE  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7187  0125C2  0100               	movlb	0	; () banked
  7188  0125C4  4BCF               	infsnz	printf@f& (0+255),f,b
  7189  0125C6  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7190  0125C8                     	if	0	;tblptru may be non-zero
  7191  0125C8                     	endif
  7192  0125C8                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7193  0125C8  0E00               	movlw	low (__mediumconst shr (0+16))
  7194  0125CA  6EF8               	movwf	tblptru,c
  7195  0125CC                     	endif
  7196  0125CC  0008               	tblrd		*
  7197  0125CE  CFF5 F0E2          	movff	tablat,printf@c
  7198  0125D2  0100               	movlb	0	; () banked
  7199  0125D4  51E2               	movf	printf@c& (0+255),w,b
  7200                           
  7201                           ; Switch size 1, requested type "space"
  7202                           ; Number of cases is 5, Range of values is 0 to 117
  7203                           ; switch strategies available:
  7204                           ; Name         Instructions Cycles
  7205                           ; simple_byte           16     9 (average)
  7206                           ;	Chosen strategy is simple_byte
  7207  0125D6  0A00               	xorlw	0	; case 0
  7208  0125D8  B4D8               	btfsc	status,2,c
  7209  0125DA  0012               	return	
  7210  0125DC  0A63               	xorlw	99	; case 99
  7211  0125DE  B4D8               	btfsc	status,2,c
  7212  0125E0  D7D8               	goto	l2442
  7213  0125E2  0A07               	xorlw	7	; case 100
  7214  0125E4  B4D8               	btfsc	status,2,c
  7215  0125E6  D007               	goto	l2441
  7216  0125E8  0A0D               	xorlw	13	; case 105
  7217  0125EA  B4D8               	btfsc	status,2,c
  7218  0125EC  D004               	goto	l2441
  7219  0125EE  0A1C               	xorlw	28	; case 117
  7220  0125F0  B4D8               	btfsc	status,2,c
  7221  0125F2  D7E0               	goto	l2444
  7222  0125F4  D7DA               	goto	l2443
  7223  0125F6                     l2441:
  7224                           
  7225                           ; BSR set to: 0
  7226                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7227  0125F6  0100               	movlb	0	; () banked
  7228  0125F8  BDDD               	btfsc	printf@flag& (0+255),6,b
  7229  0125FA  D019               	goto	l2445
  7230                           
  7231                           ; BSR set to: 0
  7232                           ;doprnt.c: 1253: {
  7233                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7234  0125FC  C0DE  FFD9         	movff	printf@ap,fsr2l
  7235  012600  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7236  012604  CFDE F0E0          	movff	postinc2,printf@val
  7237  012608  CFDD F0E1          	movff	postdec2,printf@val+1
  7238                           
  7239                           ; BSR set to: 0
  7240  01260C  0E02               	movlw	2
  7241  01260E  0100               	movlb	0	; () banked
  7242  012610  27DE               	addwf	printf@ap& (0+255),f,b
  7243  012612  0E00               	movlw	0
  7244  012614  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7245                           
  7246                           ; BSR set to: 0
  7247                           ;doprnt.c: 1261: if((int)val < 0) {
  7248  012616  0100               	movlb	0	; () banked
  7249  012618  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7250  01261A  D016               	goto	l2447
  7251                           
  7252                           ; BSR set to: 0
  7253                           ;doprnt.c: 1262: flag |= 0x03;
  7254  01261C  0E03               	movlw	3
  7255  01261E  0100               	movlb	0	; () banked
  7256  012620  13DD               	iorwf	printf@flag& (0+255),f,b
  7257                           
  7258                           ; BSR set to: 0
  7259                           ;doprnt.c: 1263: val = -val;
  7260  012622  0100               	movlb	0	; () banked
  7261  012624  6DE0               	negf	printf@val& (0+255),b
  7262  012626  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7263  012628  B0D8               	btfsc	status,0,c
  7264  01262A  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7265                           
  7266                           ; BSR set to: 0
  7267                           ;doprnt.c: 1264: }
  7268                           ;doprnt.c: 1266: }
  7269  01262C  D00D               	goto	l2447
  7270  01262E                     l2445:
  7271                           
  7272                           ; BSR set to: 0
  7273                           ;doprnt.c: 1268: else
  7274                           ;doprnt.c: 1273: {
  7275                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7276                           
  7277                           ; BSR set to: 0
  7278  01262E  C0DE  FFD9         	movff	printf@ap,fsr2l
  7279  012632  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7280  012636  CFDE F0E0          	movff	postinc2,printf@val
  7281  01263A  CFDD F0E1          	movff	postdec2,printf@val+1
  7282                           
  7283                           ; BSR set to: 0
  7284  01263E  0E02               	movlw	2
  7285  012640  0100               	movlb	0	; () banked
  7286  012642  27DE               	addwf	printf@ap& (0+255),f,b
  7287  012644  0E00               	movlw	0
  7288  012646  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7289  012648                     l2447:
  7290                           
  7291                           ; BSR set to: 0
  7292                           ;doprnt.c: 1287: }
  7293                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7294                           
  7295                           ; BSR set to: 0
  7296  012648  0E01               	movlw	1
  7297  01264A  0100               	movlb	0	; () banked
  7298  01264C  6FE2               	movwf	printf@c& (0+255),b
  7299  01264E                     l14326:
  7300                           
  7301                           ; BSR set to: 0
  7302  01264E  0E05               	movlw	5
  7303  012650  0100               	movlb	0	; () banked
  7304  012652  19E2               	xorwf	printf@c& (0+255),w,b
  7305  012654  B4D8               	btfsc	status,2,c
  7306  012656  D019               	goto	u11170
  7307                           
  7308                           ; BSR set to: 0
  7309                           ;doprnt.c: 1306: if(val < dpowers[c])
  7310                           
  7311                           ; BSR set to: 0
  7312                           
  7313                           ; BSR set to: 0
  7314  012658  0100               	movlb	0	; () banked
  7315  01265A  51E2               	movf	printf@c& (0+255),w,b
  7316  01265C  0D02               	mullw	2
  7317  01265E  0E05               	movlw	low _dpowers
  7318  012660  24F3               	addwf	prodl,w,c
  7319  012662  6EF6               	movwf	tblptrl,c
  7320  012664  0EFD               	movlw	high _dpowers
  7321  012666  20F4               	addwfc	prodh,w,c
  7322  012668  6EF7               	movwf	tblptrh,c
  7323  01266A                     	if	1	;There are 3 active tblptr bytes
  7324  01266A  6AF8               	clrf	tblptru,c
  7325  01266C  0E00               	movlw	low (__mediumconst shr (0+16))
  7326  01266E  22F8               	addwfc	tblptru,f,c
  7327  012670                     	endif
  7328  012670  0009               	tblrd		*+
  7329  012672  50F5               	movf	tablat,w,c
  7330  012674  0100               	movlb	0	; () banked
  7331  012676  5DE0               	subwf	printf@val& (0+255),w,b
  7332  012678  0009               	tblrd		*+
  7333  01267A  50F5               	movf	tablat,w,c
  7334  01267C  0100               	movlb	0	; () banked
  7335  01267E  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7336  012680  A0D8               	btfss	status,0,c
  7337  012682  D003               	goto	u11170
  7338                           
  7339                           ; BSR set to: 0
  7340                           
  7341                           ; BSR set to: 0
  7342                           
  7343                           ; BSR set to: 0
  7344                           ;doprnt.c: 1307: break;
  7345  012684  0100               	movlb	0	; () banked
  7346  012686  2BE2               	incf	printf@c& (0+255),f,b
  7347  012688  D7E2               	goto	l14326
  7348  01268A                     u11170:
  7349                           
  7350                           ; BSR set to: 0
  7351                           ;doprnt.c: 1422: {
  7352                           ;doprnt.c: 1438: if(flag & 0x03)
  7353                           
  7354                           ; BSR set to: 0
  7355  01268A  C0DD  F0DB         	movff	printf@flag,??_printf
  7356  01268E  0E03               	movlw	3
  7357  012690  0100               	movlb	0	; () banked
  7358  012692  17DB               	andwf	??_printf& (0+255),f,b
  7359  012694  B4D8               	btfsc	status,2,c
  7360  012696  D003               	goto	l2451
  7361                           
  7362                           ; BSR set to: 0
  7363                           ;doprnt.c: 1439: (putch('-') );
  7364  012698  0E2D               	movlw	45
  7365  01269A  EC8F  F0B3         	call	_putch
  7366  01269E                     l2451:
  7367                           
  7368                           ;doprnt.c: 1469: }
  7369                           ;doprnt.c: 1472: prec = c;
  7370  01269E  C0E2  F0DC         	movff	printf@c,printf@prec
  7371                           
  7372                           ;doprnt.c: 1474: while(prec--) {
  7373  0126A2  D02C               	goto	l2452
  7374  0126A4                     
  7375                           ;doprnt.c: 1478: {
  7376                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7377  0126A4  0100               	movlb	0	; () banked
  7378  0126A6  51DC               	movf	printf@prec& (0+255),w,b
  7379  0126A8  0D02               	mullw	2
  7380  0126AA  0E05               	movlw	low _dpowers
  7381  0126AC  24F3               	addwf	prodl,w,c
  7382  0126AE  6EF6               	movwf	tblptrl,c
  7383  0126B0  0EFD               	movlw	high _dpowers
  7384  0126B2  20F4               	addwfc	prodh,w,c
  7385  0126B4  6EF7               	movwf	tblptrh,c
  7386  0126B6                     	if	1	;There are 3 active tblptr bytes
  7387  0126B6  6AF8               	clrf	tblptru,c
  7388  0126B8  0E00               	movlw	low (__mediumconst shr (0+16))
  7389  0126BA  22F8               	addwfc	tblptru,f,c
  7390  0126BC                     	endif
  7391  0126BC  0009               	tblrd		*+
  7392  0126BE  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7393  0126C2  000A               	tblrd		*-
  7394  0126C4  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7395  0126C8  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7396  0126CC  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7397  0126D0  EC6F  F0A9         	call	___lwdiv	;wreg free
  7398  0126D4  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7399  0126D8  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7400  0126DC  0E00               	movlw	0
  7401  0126DE  0100               	movlb	0	; () banked
  7402  0126E0  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7403  0126E2  0E0A               	movlw	10
  7404  0126E4  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7405  0126E6  ECDA  F0AC         	call	___lwmod	;wreg free
  7406  0126EA  0100               	movlb	0	; () banked
  7407  0126EC  51C1               	movf	?___lwmod& (0+255),w,b
  7408  0126EE  0F30               	addlw	48
  7409  0126F0  0100               	movlb	0	; () banked
  7410  0126F2  6FE2               	movwf	printf@c& (0+255),b
  7411                           
  7412                           ; BSR set to: 0
  7413                           ;doprnt.c: 1523: }
  7414                           ;doprnt.c: 1524: (putch(c) );
  7415  0126F4  0100               	movlb	0	; () banked
  7416  0126F6  51E2               	movf	printf@c& (0+255),w,b
  7417  0126F8  EC8F  F0B3         	call	_putch
  7418  0126FC                     l2452:
  7419  0126FC  0100               	movlb	0	; () banked
  7420  0126FE  07DC               	decf	printf@prec& (0+255),f,b
  7421  012700  0100               	movlb	0	; () banked
  7422  012702  29DC               	incf	printf@prec& (0+255),w,b
  7423  012704  A4D8               	btfss	status,2,c
  7424  012706  D7CE               	goto	l2453
  7425  012708                     u11190:
  7426                           
  7427                           ; BSR set to: 0
  7428                           
  7429                           ; BSR set to: 0
  7430  012708  C0CF  FFF6         	movff	printf@f,tblptrl
  7431  01270C  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7432  012710  0100               	movlb	0	; () banked
  7433  012712  4BCF               	infsnz	printf@f& (0+255),f,b
  7434  012714  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7435  012716                     	if	0	;tblptru may be non-zero
  7436  012716                     	endif
  7437  012716                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7438  012716  0E00               	movlw	low (__mediumconst shr (0+16))
  7439  012718  6EF8               	movwf	tblptru,c
  7440  01271A                     	endif
  7441  01271A  0008               	tblrd		*
  7442  01271C  CFF5 F0E2          	movff	tablat,printf@c
  7443  012720  0100               	movlb	0	; () banked
  7444  012722  51E2               	movf	printf@c& (0+255),w,b
  7445  012724  B4D8               	btfsc	status,2,c
  7446  012726  0012               	return	
  7447  012728  D726               	goto	l2434
  7448  01272A                     __end_of_printf:
  7449                           	opt stack 0
  7450                           tblptru	equ	0xFF8
  7451                           tblptrh	equ	0xFF7
  7452                           tblptrl	equ	0xFF6
  7453                           tablat	equ	0xFF5
  7454                           prodh	equ	0xFF4
  7455                           prodl	equ	0xFF3
  7456                           postinc0	equ	0xFEE
  7457                           wreg	equ	0xFE8
  7458                           postdec1	equ	0xFE5
  7459                           fsr1h	equ	0xFE2
  7460                           fsr1l	equ	0xFE1
  7461                           indf2	equ	0xFDF
  7462                           postinc2	equ	0xFDE
  7463                           postdec2	equ	0xFDD
  7464                           fsr2h	equ	0xFDA
  7465                           fsr2l	equ	0xFD9
  7466                           status	equ	0xFD8
  7467                           
  7468 ;; *************** function _putch *****************
  7469 ;; Defined at:
  7470 ;;		line 454 in file "Library/Console.c"
  7471 ;; Parameters:    Size  Location     Type
  7472 ;;  c               1    wreg     unsigned char 
  7473 ;; Auto vars:     Size  Location     Type
  7474 ;;  c               1   20[BANK0 ] unsigned char 
  7475 ;; Return value:  Size  Location     Type
  7476 ;;                  1    wreg      void 
  7477 ;; Registers used:
  7478 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7479 ;; Tracked objects:
  7480 ;;		On entry : 0/0
  7481 ;;		On exit  : 0/0
  7482 ;;		Unchanged: 0/0
  7483 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7484 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7485 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7486 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7487 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7488 ;;Total ram usage:        1 bytes
  7489 ;; Hardware stack levels used:    1
  7490 ;; Hardware stack levels required when called:   11
  7491 ;; This function calls:
  7492 ;;		_Console_PrintChar
  7493 ;; This function is called by:
  7494 ;;		_printf
  7495 ;; This function uses a non-reentrant model
  7496 ;;
  7497                           
  7498                           	psect	text23
  7499  01671E                     __ptext23:
  7500                           	opt stack 0
  7501  01671E                     _putch:
  7502                           	opt stack 18
  7503                           
  7504                           ; BSR set to: 0
  7505                           ;incstack = 0
  7506                           ;putch@c stored from wreg
  7507  01671E  0100               	movlb	0	; () banked
  7508  016720  6FCE               	movwf	putch@c& (0+255),b
  7509                           
  7510                           ;Console.c: 456: Console_PrintChar(c);
  7511  016722  0100               	movlb	0	; () banked
  7512  016724  51CE               	movf	putch@c& (0+255),w,b
  7513  016726  EC75  F094         	call	_Console_PrintChar
  7514  01672A  0012               	return		;funcret
  7515  01672C                     __end_of_putch:
  7516                           	opt stack 0
  7517                           tblptru	equ	0xFF8
  7518                           tblptrh	equ	0xFF7
  7519                           tblptrl	equ	0xFF6
  7520                           tablat	equ	0xFF5
  7521                           prodh	equ	0xFF4
  7522                           prodl	equ	0xFF3
  7523                           postinc0	equ	0xFEE
  7524                           wreg	equ	0xFE8
  7525                           postdec1	equ	0xFE5
  7526                           fsr1h	equ	0xFE2
  7527                           fsr1l	equ	0xFE1
  7528                           indf2	equ	0xFDF
  7529                           postinc2	equ	0xFDE
  7530                           postdec2	equ	0xFDD
  7531                           fsr2h	equ	0xFDA
  7532                           fsr2l	equ	0xFD9
  7533                           status	equ	0xFD8
  7534                           
  7535 ;; *************** function _Console_PrintChar *****************
  7536 ;; Defined at:
  7537 ;;		line 322 in file "Library/Console.c"
  7538 ;; Parameters:    Size  Location     Type
  7539 ;;  pInput          1    wreg     unsigned char 
  7540 ;; Auto vars:     Size  Location     Type
  7541 ;;  pInput          1   19[BANK0 ] unsigned char 
  7542 ;; Return value:  Size  Location     Type
  7543 ;;                  1    wreg      void 
  7544 ;; Registers used:
  7545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7546 ;; Tracked objects:
  7547 ;;		On entry : 0/0
  7548 ;;		On exit  : 0/0
  7549 ;;		Unchanged: 0/0
  7550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7551 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7553 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7554 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7555 ;;Total ram usage:        4 bytes
  7556 ;; Hardware stack levels used:    1
  7557 ;; Hardware stack levels required when called:   10
  7558 ;; This function calls:
  7559 ;;		_Console_Backspace
  7560 ;;		_Console_FormFeed
  7561 ;;		_Console_IncrementCursor
  7562 ;;		_Console_NewLine
  7563 ;;		_Console_ResetCursor
  7564 ;;		_Console_Tab
  7565 ;; This function is called by:
  7566 ;;		_putch
  7567 ;;		_Console_PrintString
  7568 ;; This function uses a non-reentrant model
  7569 ;;
  7570                           
  7571                           	psect	text24
  7572  0128EA                     __ptext24:
  7573                           	opt stack 0
  7574  0128EA                     _Console_PrintChar:
  7575                           	opt stack 18
  7576                           
  7577                           ;incstack = 0
  7578                           ;Console_PrintChar@pInput stored from wreg
  7579  0128EA  0100               	movlb	0	; () banked
  7580  0128EC  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7581                           
  7582                           ;Console.c: 324: switch(pInput)
  7583  0128EE  D0B1               	goto	l1036
  7584  0128F0                     
  7585                           ;Console.c: 327: case '\n':
  7586                           ;Console.c: 328: Console_NewLine();
  7587  0128F0  ECE6  F0A5         	call	_Console_NewLine	;wreg free
  7588                           
  7589                           ;Console.c: 329: return;
  7590  0128F4  0012               	return	
  7591  0128F6                     
  7592                           ;Console.c: 331: Console_Backspace();
  7593  0128F6  EC0B  F0AD         	call	_Console_Backspace	;wreg free
  7594                           
  7595                           ;Console.c: 332: return;
  7596  0128FA  0012               	return	
  7597  0128FC                     
  7598                           ;Console.c: 334: Console_FormFeed();
  7599  0128FC  EC19  F0A7         	call	_Console_FormFeed	;wreg free
  7600                           
  7601                           ;Console.c: 335: return;
  7602  012900  0012               	return	
  7603  012902                     
  7604                           ;Console.c: 337: Console_Tab();
  7605  012902  EC64  F0A0         	call	_Console_Tab	;wreg free
  7606                           
  7607                           ;Console.c: 338: return;
  7608  012906  0012               	return	
  7609  012908                     
  7610                           ;Console.c: 340: Console_IncrementCursor();
  7611  012908  EC44  F0AC         	call	_Console_IncrementCursor	;wreg free
  7612                           
  7613                           ;Console.c: 341: return;
  7614  01290C  0012               	return	
  7615  01290E                     
  7616                           ;Console.c: 343: Console_ResetCursor();
  7617  01290E  EC46  F0B2         	call	_Console_ResetCursor	;wreg free
  7618                           
  7619                           ;Console.c: 344: return;
  7620  012912  0012               	return	
  7621  012914                     
  7622                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7623                           
  7624                           ;Console.c: 349: default:
  7625  012914  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7626  012918  0E7F               	movlw	127
  7627  01291A  0100               	movlb	0	; () banked
  7628  01291C  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7629  01291E  0100               	movlb	0	; () banked
  7630  012920  518E               	movf	_lBufferY& (0+255),w,b
  7631  012922  0D14               	mullw	20
  7632  012924  0EAA               	movlw	low _lBuffer
  7633  012926  0100               	movlb	0	; () banked
  7634  012928  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7635  01292A  0E04               	movlw	high _lBuffer
  7636  01292C  0100               	movlb	0	; () banked
  7637  01292E  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7638  012930  50F3               	movf	prodl,w,c
  7639  012932  0100               	movlb	0	; () banked
  7640  012934  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7641  012936  50F4               	movf	prodh,w,c
  7642  012938  0100               	movlb	0	; () banked
  7643  01293A  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7644  01293C  0100               	movlb	0	; () banked
  7645  01293E  518F               	movf	_lBufferX& (0+255),w,b
  7646  012940  0D01               	mullw	1
  7647  012942  50F3               	movf	prodl,w,c
  7648  012944  0100               	movlb	0	; () banked
  7649  012946  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7650  012948  6ED9               	movwf	fsr2l,c
  7651  01294A  50F4               	movf	prodh,w,c
  7652  01294C  0100               	movlb	0	; () banked
  7653  01294E  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7654  012950  6EDA               	movwf	fsr2h,c
  7655  012952  50DF               	movf	indf2,w,c
  7656  012954  0B7F               	andlw	127
  7657  012956  0100               	movlb	0	; () banked
  7658  012958  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7659  01295A  B4D8               	btfsc	status,2,c
  7660  01295C  D02E               	goto	l1047
  7661                           
  7662                           ; BSR set to: 0
  7663                           ;Console.c: 351: {
  7664                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7665  01295E  0E01               	movlw	1
  7666  012960  0100               	movlb	0	; () banked
  7667  012962  6FFF               	movwf	_change& (0+255),b
  7668                           
  7669                           ; BSR set to: 0
  7670  012964  0100               	movlb	0	; () banked
  7671  012966  518E               	movf	_lBufferY& (0+255),w,b
  7672  012968  0D14               	mullw	20
  7673  01296A  0EAA               	movlw	low _lBuffer
  7674  01296C  0100               	movlb	0	; () banked
  7675  01296E  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7676  012970  0E04               	movlw	high _lBuffer
  7677  012972  0100               	movlb	0	; () banked
  7678  012974  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7679  012976  50F3               	movf	prodl,w,c
  7680  012978  0100               	movlb	0	; () banked
  7681  01297A  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7682  01297C  50F4               	movf	prodh,w,c
  7683  01297E  0100               	movlb	0	; () banked
  7684  012980  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7685  012982  0100               	movlb	0	; () banked
  7686  012984  518F               	movf	_lBufferX& (0+255),w,b
  7687  012986  0D01               	mullw	1
  7688  012988  50F3               	movf	prodl,w,c
  7689  01298A  0100               	movlb	0	; () banked
  7690  01298C  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7691  01298E  6ED9               	movwf	fsr2l,c
  7692  012990  50F4               	movf	prodh,w,c
  7693  012992  0100               	movlb	0	; () banked
  7694  012994  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7695  012996  6EDA               	movwf	fsr2h,c
  7696  012998  0100               	movlb	0	; () banked
  7697  01299A  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7698  01299C  0980               	iorlw	128
  7699  01299E  6EDF               	movwf	indf2,c
  7700                           
  7701                           ; BSR set to: 0
  7702                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7703  0129A0  0100               	movlb	0	; () banked
  7704  0129A2  518E               	movf	_lBufferY& (0+255),w,b
  7705  0129A4  0D02               	mullw	2
  7706  0129A6  0E00               	movlw	low _lCBuffer
  7707  0129A8  24F3               	addwf	prodl,w,c
  7708  0129AA  6ED9               	movwf	fsr2l,c
  7709  0129AC  0E03               	movlw	high _lCBuffer
  7710  0129AE  20F4               	addwfc	prodh,w,c
  7711  0129B0  6EDA               	movwf	fsr2h,c
  7712  0129B2  C0FD  FFDE         	movff	_gForecolour,postinc2
  7713  0129B6  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7714  0129BA                     l1047:
  7715                           
  7716                           ; BSR set to: 0
  7717                           ;Console.c: 354: }
  7718                           ;Console.c: 368: if(Console_IncrementCursor())
  7719                           
  7720                           ; BSR set to: 0
  7721  0129BA  EC44  F0AC         	call	_Console_IncrementCursor	;wreg free
  7722  0129BE  0900               	iorlw	0
  7723  0129C0  B4D8               	btfsc	status,2,c
  7724  0129C2  0012               	return	
  7725                           
  7726                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7727  0129C4  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7728  0129C8  0E7F               	movlw	127
  7729  0129CA  0100               	movlb	0	; () banked
  7730  0129CC  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7731  0129CE  0100               	movlb	0	; () banked
  7732  0129D0  518E               	movf	_lBufferY& (0+255),w,b
  7733  0129D2  0D14               	mullw	20
  7734  0129D4  0EAA               	movlw	low _lBuffer
  7735  0129D6  0100               	movlb	0	; () banked
  7736  0129D8  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7737  0129DA  0E04               	movlw	high _lBuffer
  7738  0129DC  0100               	movlb	0	; () banked
  7739  0129DE  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7740  0129E0  50F3               	movf	prodl,w,c
  7741  0129E2  0100               	movlb	0	; () banked
  7742  0129E4  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7743  0129E6  50F4               	movf	prodh,w,c
  7744  0129E8  0100               	movlb	0	; () banked
  7745  0129EA  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7746  0129EC  0100               	movlb	0	; () banked
  7747  0129EE  518F               	movf	_lBufferX& (0+255),w,b
  7748  0129F0  0D01               	mullw	1
  7749  0129F2  50F3               	movf	prodl,w,c
  7750  0129F4  0100               	movlb	0	; () banked
  7751  0129F6  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7752  0129F8  6ED9               	movwf	fsr2l,c
  7753  0129FA  50F4               	movf	prodh,w,c
  7754  0129FC  0100               	movlb	0	; () banked
  7755  0129FE  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7756  012A00  6EDA               	movwf	fsr2h,c
  7757  012A02  50DF               	movf	indf2,w,c
  7758  012A04  0B7F               	andlw	127
  7759  012A06  0100               	movlb	0	; () banked
  7760  012A08  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7761  012A0A  B4D8               	btfsc	status,2,c
  7762  012A0C  0012               	return	
  7763                           
  7764                           ; BSR set to: 0
  7765                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7766  012A0E  0E01               	movlw	1
  7767  012A10  0100               	movlb	0	; () banked
  7768  012A12  6FFF               	movwf	_change& (0+255),b
  7769                           
  7770                           ; BSR set to: 0
  7771  012A14  0100               	movlb	0	; () banked
  7772  012A16  518E               	movf	_lBufferY& (0+255),w,b
  7773  012A18  0D14               	mullw	20
  7774  012A1A  0EAA               	movlw	low _lBuffer
  7775  012A1C  0100               	movlb	0	; () banked
  7776  012A1E  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7777  012A20  0E04               	movlw	high _lBuffer
  7778  012A22  0100               	movlb	0	; () banked
  7779  012A24  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7780  012A26  50F3               	movf	prodl,w,c
  7781  012A28  0100               	movlb	0	; () banked
  7782  012A2A  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7783  012A2C  50F4               	movf	prodh,w,c
  7784  012A2E  0100               	movlb	0	; () banked
  7785  012A30  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7786  012A32  0100               	movlb	0	; () banked
  7787  012A34  518F               	movf	_lBufferX& (0+255),w,b
  7788  012A36  0D01               	mullw	1
  7789  012A38  50F3               	movf	prodl,w,c
  7790  012A3A  0100               	movlb	0	; () banked
  7791  012A3C  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7792  012A3E  6ED9               	movwf	fsr2l,c
  7793  012A40  50F4               	movf	prodh,w,c
  7794  012A42  0100               	movlb	0	; () banked
  7795  012A44  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7796  012A46  6EDA               	movwf	fsr2h,c
  7797  012A48  0100               	movlb	0	; () banked
  7798  012A4A  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7799  012A4C  0980               	iorlw	128
  7800  012A4E  6EDF               	movwf	indf2,c
  7801                           
  7802                           ; BSR set to: 0
  7803                           ;Console.c: 372: };
  7804                           
  7805                           ; BSR set to: 0
  7806                           ;Console.c: 371: return;
  7807                           
  7808                           ; BSR set to: 0
  7809                           
  7810                           ; BSR set to: 0
  7811  012A50  0012               	return	
  7812  012A52                     l1036:
  7813                           
  7814                           ; BSR set to: 0
  7815  012A52  0100               	movlb	0	; () banked
  7816  012A54  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7817                           
  7818                           ; Switch size 1, requested type "space"
  7819                           ; Number of cases is 8, Range of values is 7 to 35
  7820                           ; switch strategies available:
  7821                           ; Name         Instructions Cycles
  7822                           ; simple_byte           25    13 (average)
  7823                           ;	Chosen strategy is simple_byte
  7824  012A56  0A07               	xorlw	7	; case 7
  7825  012A58  B4D8               	btfsc	status,2,c
  7826  012A5A  D756               	goto	l1043
  7827  012A5C  0A0F               	xorlw	15	; case 8
  7828  012A5E  B4D8               	btfsc	status,2,c
  7829  012A60  D74A               	goto	l1040
  7830  012A62  0A01               	xorlw	1	; case 9
  7831  012A64  B4D8               	btfsc	status,2,c
  7832  012A66  D74D               	goto	l1042
  7833  012A68  0A03               	xorlw	3	; case 10
  7834  012A6A  B4D8               	btfsc	status,2,c
  7835  012A6C  D741               	goto	l1037
  7836  012A6E  0A06               	xorlw	6	; case 12
  7837  012A70  B4D8               	btfsc	status,2,c
  7838  012A72  D744               	goto	l1041
  7839  012A74  0A01               	xorlw	1	; case 13
  7840  012A76  B4D8               	btfsc	status,2,c
  7841  012A78  D73B               	goto	l1037
  7842  012A7A  0A2D               	xorlw	45	; case 32
  7843  012A7C  B4D8               	btfsc	status,2,c
  7844  012A7E  D74A               	goto	l1045
  7845  012A80  0A03               	xorlw	3	; case 35
  7846  012A82  B4D8               	btfsc	status,2,c
  7847  012A84  D744               	goto	l1044
  7848  012A86  D746               	goto	l1045
  7849  012A88                     __end_of_Console_PrintChar:
  7850                           	opt stack 0
  7851                           tblptru	equ	0xFF8
  7852                           tblptrh	equ	0xFF7
  7853                           tblptrl	equ	0xFF6
  7854                           tablat	equ	0xFF5
  7855                           prodh	equ	0xFF4
  7856                           prodl	equ	0xFF3
  7857                           postinc0	equ	0xFEE
  7858                           wreg	equ	0xFE8
  7859                           postdec1	equ	0xFE5
  7860                           fsr1h	equ	0xFE2
  7861                           fsr1l	equ	0xFE1
  7862                           indf2	equ	0xFDF
  7863                           postinc2	equ	0xFDE
  7864                           postdec2	equ	0xFDD
  7865                           fsr2h	equ	0xFDA
  7866                           fsr2l	equ	0xFD9
  7867                           status	equ	0xFD8
  7868                           
  7869 ;; *************** function _Console_Tab *****************
  7870 ;; Defined at:
  7871 ;;		line 260 in file "Library/Console.c"
  7872 ;; Parameters:    Size  Location     Type
  7873 ;;		None
  7874 ;; Auto vars:     Size  Location     Type
  7875 ;;  c               1   15[BANK0 ] unsigned char 
  7876 ;;  i               1   14[BANK0 ] unsigned char 
  7877 ;;  t               1   13[BANK0 ] unsigned char 
  7878 ;; Return value:  Size  Location     Type
  7879 ;;                  1    wreg      void 
  7880 ;; Registers used:
  7881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7882 ;; Tracked objects:
  7883 ;;		On entry : 0/0
  7884 ;;		On exit  : 0/0
  7885 ;;		Unchanged: 0/0
  7886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7888 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7889 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7890 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7891 ;;Total ram usage:        8 bytes
  7892 ;; Hardware stack levels used:    1
  7893 ;; Hardware stack levels required when called:    9
  7894 ;; This function calls:
  7895 ;;		_Console_ClearCursor
  7896 ;;		_Console_IncrementCursor
  7897 ;;		___awdiv
  7898 ;; This function is called by:
  7899 ;;		_Console_PrintChar
  7900 ;; This function uses a non-reentrant model
  7901 ;;
  7902                           
  7903                           	psect	text25
  7904  0140C8                     __ptext25:
  7905                           	opt stack 0
  7906  0140C8                     _Console_Tab:
  7907                           	opt stack 18
  7908                           
  7909                           ;Console.c: 262: UINT8 i = 0;
  7910                           
  7911                           ;incstack = 0
  7912  0140C8  0E00               	movlw	0
  7913  0140CA  0100               	movlb	0	; () banked
  7914  0140CC  6FC8               	movwf	Console_Tab@i& (0+255),b
  7915                           
  7916                           ; BSR set to: 0
  7917                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7918  0140CE  0EFA               	movlw	250
  7919  0140D0  2447               	addwf	_gCursor,w,c
  7920  0140D2  0100               	movlb	0	; () banked
  7921  0140D4  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7922  0140D6  0EFF               	movlw	255
  7923  0140D8  2048               	addwfc	_gCursor+1,w,c
  7924  0140DA  0100               	movlb	0	; () banked
  7925  0140DC  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7926  0140DE  0E00               	movlw	0
  7927  0140E0  0100               	movlb	0	; () banked
  7928  0140E2  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7929  0140E4  0E06               	movlw	6
  7930  0140E6  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7931  0140E8  EC25  F0A1         	call	___awdiv	;wreg free
  7932  0140EC  0100               	movlb	0	; () banked
  7933  0140EE  51BA               	movf	?___awdiv& (0+255),w,b
  7934  0140F0  0100               	movlb	0	; () banked
  7935  0140F2  6FC9               	movwf	Console_Tab@c& (0+255),b
  7936                           
  7937                           ; BSR set to: 0
  7938                           ;Console.c: 264: UINT8 t = c/4;
  7939  0140F4  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7940  0140F8  0100               	movlb	0	; () banked
  7941  0140FA  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7942  0140FC  0E00               	movlw	0
  7943  0140FE  0100               	movlb	0	; () banked
  7944  014100  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7945  014102  0E04               	movlw	4
  7946  014104  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7947  014106  EC25  F0A1         	call	___awdiv	;wreg free
  7948  01410A  0100               	movlb	0	; () banked
  7949  01410C  51BA               	movf	?___awdiv& (0+255),w,b
  7950  01410E  0100               	movlb	0	; () banked
  7951  014110  6FC7               	movwf	Console_Tab@t& (0+255),b
  7952                           
  7953                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7954  014112  0E00               	movlw	0
  7955  014114  0100               	movlb	0	; () banked
  7956  014116  6FC8               	movwf	Console_Tab@i& (0+255),b
  7957  014118  D006               	goto	l1009
  7958  01411A                     
  7959                           ; BSR set to: 0
  7960                           ;Console.c: 266: {
  7961                           ;Console.c: 267: Console_ClearCursor();
  7962                           
  7963                           ; BSR set to: 0
  7964  01411A  ECBF  F0AF         	call	_Console_ClearCursor	;wreg free
  7965                           
  7966                           ;Console.c: 268: Console_IncrementCursor();
  7967  01411E  EC44  F0AC         	call	_Console_IncrementCursor	;wreg free
  7968  014122  0100               	movlb	0	; () banked
  7969  014124  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7970  014126                     l1009:
  7971                           
  7972                           ; BSR set to: 0
  7973                           
  7974                           ; BSR set to: 0
  7975  014126  0100               	movlb	0	; () banked
  7976  014128  51C7               	movf	Console_Tab@t& (0+255),w,b
  7977  01412A  0D04               	mullw	4
  7978  01412C  1EF3               	comf	prodl,f,c
  7979  01412E  1EF4               	comf	prodh,f,c
  7980  014130  4AF3               	infsnz	prodl,f,c
  7981  014132  2AF4               	incf	prodh,f,c
  7982  014134  0100               	movlb	0	; () banked
  7983  014136  51C9               	movf	Console_Tab@c& (0+255),w,b
  7984  014138  0100               	movlb	0	; () banked
  7985  01413A  6FC2               	movwf	??_Console_Tab& (0+255),b
  7986  01413C  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7987  01413E  50F3               	movf	prodl,w,c
  7988  014140  0100               	movlb	0	; () banked
  7989  014142  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7990  014144  50F4               	movf	prodh,w,c
  7991  014146  0100               	movlb	0	; () banked
  7992  014148  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7993  01414A  0100               	movlb	0	; () banked
  7994  01414C  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7995  01414E  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7996  014150  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7997  014152  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7998  014154  0E04               	movlw	4
  7999  014156  0100               	movlb	0	; () banked
  8000  014158  27C2               	addwf	??_Console_Tab& (0+255),f,b
  8001  01415A  0E00               	movlw	0
  8002  01415C  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  8003  01415E  0100               	movlb	0	; () banked
  8004  014160  51C8               	movf	Console_Tab@i& (0+255),w,b
  8005  014162  0100               	movlb	0	; () banked
  8006  014164  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  8007  014166  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  8008  014168  0100               	movlb	0	; () banked
  8009  01416A  51C2               	movf	??_Console_Tab& (0+255),w,b
  8010  01416C  0100               	movlb	0	; () banked
  8011  01416E  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  8012  014170  0100               	movlb	0	; () banked
  8013  014172  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  8014  014174  0A80               	xorlw	128
  8015  014176  0100               	movlb	0	; () banked
  8016  014178  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  8017  01417A  0100               	movlb	0	; () banked
  8018  01417C  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  8019  01417E  0A80               	xorlw	128
  8020  014180  0100               	movlb	0	; () banked
  8021  014182  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  8022  014184  B0D8               	btfsc	status,0,c
  8023  014186  0012               	return	
  8024  014188  D7C8               	goto	l1010
  8025  01418A                     __end_of_Console_Tab:
  8026                           	opt stack 0
  8027                           tblptru	equ	0xFF8
  8028                           tblptrh	equ	0xFF7
  8029                           tblptrl	equ	0xFF6
  8030                           tablat	equ	0xFF5
  8031                           prodh	equ	0xFF4
  8032                           prodl	equ	0xFF3
  8033                           postinc0	equ	0xFEE
  8034                           wreg	equ	0xFE8
  8035                           postdec1	equ	0xFE5
  8036                           fsr1h	equ	0xFE2
  8037                           fsr1l	equ	0xFE1
  8038                           indf2	equ	0xFDF
  8039                           postinc2	equ	0xFDE
  8040                           postdec2	equ	0xFDD
  8041                           fsr2h	equ	0xFDA
  8042                           fsr2l	equ	0xFD9
  8043                           status	equ	0xFD8
  8044                           
  8045 ;; *************** function ___awdiv *****************
  8046 ;; Defined at:
  8047 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  8048 ;; Parameters:    Size  Location     Type
  8049 ;;  dividend        2    0[BANK0 ] int 
  8050 ;;  divisor         2    2[BANK0 ] int 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;  quotient        2    6[BANK0 ] int 
  8053 ;;  sign            1    5[BANK0 ] unsigned char 
  8054 ;;  counter         1    4[BANK0 ] unsigned char 
  8055 ;; Return value:  Size  Location     Type
  8056 ;;                  2    0[BANK0 ] int 
  8057 ;; Registers used:
  8058 ;;		wreg, status,2, status,0
  8059 ;; Tracked objects:
  8060 ;;		On entry : 0/0
  8061 ;;		On exit  : 0/0
  8062 ;;		Unchanged: 0/0
  8063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8064 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8067 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8068 ;;Total ram usage:        8 bytes
  8069 ;; Hardware stack levels used:    1
  8070 ;; Hardware stack levels required when called:    7
  8071 ;; This function calls:
  8072 ;;		Nothing
  8073 ;; This function is called by:
  8074 ;;		_Console_Tab
  8075 ;; This function uses a non-reentrant model
  8076 ;;
  8077                           
  8078                           	psect	text26
  8079  01424A                     __ptext26:
  8080                           	opt stack 0
  8081  01424A                     ___awdiv:
  8082                           	opt stack 19
  8083                           
  8084                           ; BSR set to: 0
  8085                           ;incstack = 0
  8086  01424A  0E00               	movlw	0
  8087  01424C  0100               	movlb	0	; () banked
  8088  01424E  6FBF               	movwf	___awdiv@sign& (0+255),b
  8089                           
  8090                           ; BSR set to: 0
  8091  014250  0100               	movlb	0	; () banked
  8092  014252  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8093  014254  D008               	goto	l2624
  8094                           
  8095                           ; BSR set to: 0
  8096  014256  0100               	movlb	0	; () banked
  8097  014258  6DBC               	negf	___awdiv@divisor& (0+255),b
  8098  01425A  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  8099  01425C  B0D8               	btfsc	status,0,c
  8100  01425E  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  8101                           
  8102                           ; BSR set to: 0
  8103  014260  0E01               	movlw	1
  8104  014262  0100               	movlb	0	; () banked
  8105  014264  6FBF               	movwf	___awdiv@sign& (0+255),b
  8106  014266                     l2624:
  8107                           
  8108                           ; BSR set to: 0
  8109                           
  8110                           ; BSR set to: 0
  8111  014266  0100               	movlb	0	; () banked
  8112  014268  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  8113  01426A  D008               	goto	l2625
  8114                           
  8115                           ; BSR set to: 0
  8116  01426C  0100               	movlb	0	; () banked
  8117  01426E  6DBA               	negf	___awdiv@dividend& (0+255),b
  8118  014270  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  8119  014272  B0D8               	btfsc	status,0,c
  8120  014274  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  8121                           
  8122                           ; BSR set to: 0
  8123  014276  0E01               	movlw	1
  8124  014278  0100               	movlb	0	; () banked
  8125  01427A  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  8126  01427C                     l2625:
  8127                           
  8128                           ; BSR set to: 0
  8129                           
  8130                           ; BSR set to: 0
  8131  01427C  0E00               	movlw	0
  8132  01427E  0100               	movlb	0	; () banked
  8133  014280  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  8134  014282  0E00               	movlw	0
  8135  014284  6FC0               	movwf	___awdiv@quotient& (0+255),b
  8136                           
  8137                           ; BSR set to: 0
  8138  014286  0100               	movlb	0	; () banked
  8139  014288  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8140  01428A  0100               	movlb	0	; () banked
  8141  01428C  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8142  01428E  B4D8               	btfsc	status,2,c
  8143  014290  D02C               	goto	l2632
  8144                           
  8145                           ; BSR set to: 0
  8146  014292  0E01               	movlw	1
  8147  014294  0100               	movlb	0	; () banked
  8148  014296  6FBE               	movwf	___awdiv@counter& (0+255),b
  8149  014298  D006               	goto	l2627
  8150  01429A                     
  8151                           ; BSR set to: 0
  8152                           
  8153                           ; BSR set to: 0
  8154  01429A  0100               	movlb	0	; () banked
  8155  01429C  90D8               	bcf	status,0,c
  8156  01429E  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  8157  0142A0  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8158  0142A2  0100               	movlb	0	; () banked
  8159  0142A4  2BBE               	incf	___awdiv@counter& (0+255),f,b
  8160  0142A6                     l2627:
  8161                           
  8162                           ; BSR set to: 0
  8163                           
  8164                           ; BSR set to: 0
  8165  0142A6  0100               	movlb	0	; () banked
  8166  0142A8  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8167  0142AA  D7F7               	goto	l2628
  8168  0142AC                     u9290:
  8169                           
  8170                           ; BSR set to: 0
  8171                           
  8172                           ; BSR set to: 0
  8173                           
  8174                           ; BSR set to: 0
  8175  0142AC  0100               	movlb	0	; () banked
  8176  0142AE  90D8               	bcf	status,0,c
  8177  0142B0  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  8178  0142B2  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8179                           
  8180                           ; BSR set to: 0
  8181  0142B4  0100               	movlb	0	; () banked
  8182  0142B6  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8183  0142B8  0100               	movlb	0	; () banked
  8184  0142BA  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  8185  0142BC  0100               	movlb	0	; () banked
  8186  0142BE  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8187  0142C0  0100               	movlb	0	; () banked
  8188  0142C2  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8189  0142C4  A0D8               	btfss	status,0,c
  8190  0142C6  D00A               	goto	l2631
  8191                           
  8192                           ; BSR set to: 0
  8193  0142C8  0100               	movlb	0	; () banked
  8194  0142CA  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8195  0142CC  0100               	movlb	0	; () banked
  8196  0142CE  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  8197  0142D0  0100               	movlb	0	; () banked
  8198  0142D2  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8199  0142D4  0100               	movlb	0	; () banked
  8200  0142D6  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8201                           
  8202                           ; BSR set to: 0
  8203  0142D8  0100               	movlb	0	; () banked
  8204  0142DA  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  8205  0142DC                     l2631:
  8206                           
  8207                           ; BSR set to: 0
  8208                           
  8209                           ; BSR set to: 0
  8210  0142DC  0100               	movlb	0	; () banked
  8211  0142DE  90D8               	bcf	status,0,c
  8212  0142E0  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8213  0142E2  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  8214                           
  8215                           ; BSR set to: 0
  8216  0142E4  0100               	movlb	0	; () banked
  8217  0142E6  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8218  0142E8  D7E1               	goto	u9290
  8219  0142EA                     l2632:
  8220                           
  8221                           ; BSR set to: 0
  8222                           
  8223                           ; BSR set to: 0
  8224                           
  8225                           ; BSR set to: 0
  8226  0142EA  0100               	movlb	0	; () banked
  8227  0142EC  51BF               	movf	___awdiv@sign& (0+255),w,b
  8228  0142EE  0100               	movlb	0	; () banked
  8229  0142F0  B4D8               	btfsc	status,2,c
  8230  0142F2  D005               	goto	l2633
  8231                           
  8232                           ; BSR set to: 0
  8233  0142F4  0100               	movlb	0	; () banked
  8234  0142F6  6DC0               	negf	___awdiv@quotient& (0+255),b
  8235  0142F8  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8236  0142FA  B0D8               	btfsc	status,0,c
  8237  0142FC  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8238  0142FE                     l2633:
  8239                           
  8240                           ; BSR set to: 0
  8241                           
  8242                           ; BSR set to: 0
  8243  0142FE  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8244  014302  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8245  014306  0012               	return	
  8246  014308                     __end_of___awdiv:
  8247                           	opt stack 0
  8248                           tblptru	equ	0xFF8
  8249                           tblptrh	equ	0xFF7
  8250                           tblptrl	equ	0xFF6
  8251                           tablat	equ	0xFF5
  8252                           prodh	equ	0xFF4
  8253                           prodl	equ	0xFF3
  8254                           postinc0	equ	0xFEE
  8255                           wreg	equ	0xFE8
  8256                           postdec1	equ	0xFE5
  8257                           fsr1h	equ	0xFE2
  8258                           fsr1l	equ	0xFE1
  8259                           indf2	equ	0xFDF
  8260                           postinc2	equ	0xFDE
  8261                           postdec2	equ	0xFDD
  8262                           fsr2h	equ	0xFDA
  8263                           fsr2l	equ	0xFD9
  8264                           status	equ	0xFD8
  8265                           
  8266 ;; *************** function _Console_IncrementCursor *****************
  8267 ;; Defined at:
  8268 ;;		line 243 in file "Library/Console.c"
  8269 ;; Parameters:    Size  Location     Type
  8270 ;;		None
  8271 ;; Auto vars:     Size  Location     Type
  8272 ;;		None
  8273 ;; Return value:  Size  Location     Type
  8274 ;;                  1    wreg      unsigned char 
  8275 ;; Registers used:
  8276 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8277 ;; Tracked objects:
  8278 ;;		On entry : 0/0
  8279 ;;		On exit  : 0/0
  8280 ;;		Unchanged: 0/0
  8281 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8282 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8283 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8284 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8285 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8286 ;;Total ram usage:        2 bytes
  8287 ;; Hardware stack levels used:    1
  8288 ;; Hardware stack levels required when called:    8
  8289 ;; This function calls:
  8290 ;;		_Console_FormFeed
  8291 ;;		_Console_NewLine
  8292 ;; This function is called by:
  8293 ;;		_Console_Tab
  8294 ;;		_Console_PrintChar
  8295 ;; This function uses a non-reentrant model
  8296 ;;
  8297                           
  8298                           	psect	text27
  8299  015888                     __ptext27:
  8300                           	opt stack 0
  8301  015888                     _Console_IncrementCursor:
  8302                           	opt stack 18
  8303                           
  8304                           ;Console.c: 246: lBufferX += 1;
  8305                           
  8306                           ; BSR set to: 0
  8307                           ;incstack = 0
  8308  015888  0100               	movlb	0	; () banked
  8309  01588A  2B8F               	incf	_lBufferX& (0+255),f,b
  8310                           
  8311                           ; BSR set to: 0
  8312                           ;Console.c: 248: gCursor.x += 6;
  8313  01588C  0E06               	movlw	6
  8314  01588E  2647               	addwf	_gCursor,f,c
  8315  015890  0E00               	movlw	0
  8316  015892  2248               	addwfc	_gCursor+1,f,c
  8317                           
  8318                           ; BSR set to: 0
  8319                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8320  015894  0E06               	movlw	6
  8321  015896  2447               	addwf	_gCursor,w,c
  8322  015898  0100               	movlb	0	; () banked
  8323  01589A  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8324  01589C  0E00               	movlw	0
  8325  01589E  2048               	addwfc	_gCursor+1,w,c
  8326  0158A0  0100               	movlb	0	; () banked
  8327  0158A2  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8328  0158A4  0100               	movlb	0	; () banked
  8329  0158A6  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8330  0158A8  D009               	goto	l1004
  8331  0158AA  0100               	movlb	0	; () banked
  8332  0158AC  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8333  0158AE  E104               	bnz	u9150
  8334  0158B0  0E80               	movlw	128
  8335  0158B2  0100               	movlb	0	; () banked
  8336  0158B4  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8337  0158B6  B0D8               	btfsc	status,0,c
  8338  0158B8                     u9150:
  8339                           
  8340                           ; BSR set to: 0
  8341                           ;Console.c: 250: Console_NewLine();
  8342  0158B8  ECE6  F0A5         	call	_Console_NewLine	;wreg free
  8343  0158BC                     l1004:
  8344                           
  8345                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8346  0158BC  0E08               	movlw	8
  8347  0158BE  2449               	addwf	_gCursor+2,w,c
  8348  0158C0  0100               	movlb	0	; () banked
  8349  0158C2  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8350  0158C4  0E00               	movlw	0
  8351  0158C6  204A               	addwfc	_gCursor+3,w,c
  8352  0158C8  0100               	movlb	0	; () banked
  8353  0158CA  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8354  0158CC  0100               	movlb	0	; () banked
  8355  0158CE  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8356  0158D0  D00C               	goto	l1005
  8357  0158D2  0100               	movlb	0	; () banked
  8358  0158D4  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8359  0158D6  E105               	bnz	u9160
  8360  0158D8  0E80               	movlw	128
  8361  0158DA  0100               	movlb	0	; () banked
  8362  0158DC  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8363  0158DE  A0D8               	btfss	status,0,c
  8364  0158E0  D004               	goto	l1005
  8365  0158E2                     u9160:
  8366                           
  8367                           ; BSR set to: 0
  8368                           ;Console.c: 252: {
  8369                           ;Console.c: 253: Console_FormFeed();
  8370  0158E2  EC19  F0A7         	call	_Console_FormFeed	;wreg free
  8371                           
  8372                           ;Console.c: 254: return 1;
  8373  0158E6  0E01               	movlw	1
  8374  0158E8  0012               	return	
  8375  0158EA                     l1005:
  8376                           
  8377                           ;Console.c: 255: }
  8378                           ;Console.c: 257: return 0;
  8379  0158EA  0E00               	movlw	0
  8380  0158EC  0012               	return	
  8381  0158EE                     __end_of_Console_IncrementCursor:
  8382                           	opt stack 0
  8383                           tblptru	equ	0xFF8
  8384                           tblptrh	equ	0xFF7
  8385                           tblptrl	equ	0xFF6
  8386                           tablat	equ	0xFF5
  8387                           prodh	equ	0xFF4
  8388                           prodl	equ	0xFF3
  8389                           postinc0	equ	0xFEE
  8390                           wreg	equ	0xFE8
  8391                           postdec1	equ	0xFE5
  8392                           fsr1h	equ	0xFE2
  8393                           fsr1l	equ	0xFE1
  8394                           indf2	equ	0xFDF
  8395                           postinc2	equ	0xFDE
  8396                           postdec2	equ	0xFDD
  8397                           fsr2h	equ	0xFDA
  8398                           fsr2l	equ	0xFD9
  8399                           status	equ	0xFD8
  8400                           
  8401 ;; *************** function _Console_NewLine *****************
  8402 ;; Defined at:
  8403 ;;		line 175 in file "Library/Console.c"
  8404 ;; Parameters:    Size  Location     Type
  8405 ;;		None
  8406 ;; Auto vars:     Size  Location     Type
  8407 ;;		None
  8408 ;; Return value:  Size  Location     Type
  8409 ;;                  1    wreg      void 
  8410 ;; Registers used:
  8411 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8412 ;; Tracked objects:
  8413 ;;		On entry : 0/0
  8414 ;;		On exit  : 0/0
  8415 ;;		Unchanged: 0/0
  8416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8419 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8420 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8421 ;;Total ram usage:        2 bytes
  8422 ;; Hardware stack levels used:    1
  8423 ;; Hardware stack levels required when called:    7
  8424 ;; This function calls:
  8425 ;;		Nothing
  8426 ;; This function is called by:
  8427 ;;		_Console_IncrementCursor
  8428 ;;		_Console_PrintChar
  8429 ;; This function uses a non-reentrant model
  8430 ;;
  8431                           
  8432                           	psect	text28
  8433  014BCC                     __ptext28:
  8434                           	opt stack 0
  8435  014BCC                     _Console_NewLine:
  8436                           	opt stack 18
  8437                           
  8438                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8439                           
  8440                           ;incstack = 0
  8441  014BCC  D03E               	goto	l983
  8442  014BCE                     
  8443                           ;Console.c: 179: {
  8444                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8445  014BCE  0100               	movlb	0	; () banked
  8446  014BD0  518E               	movf	_lBufferY& (0+255),w,b
  8447  014BD2  0D14               	mullw	20
  8448  014BD4  0EAA               	movlw	low _lBuffer
  8449  014BD6  0100               	movlb	0	; () banked
  8450  014BD8  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8451  014BDA  0E04               	movlw	high _lBuffer
  8452  014BDC  0100               	movlb	0	; () banked
  8453  014BDE  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8454  014BE0  50F3               	movf	prodl,w,c
  8455  014BE2  0100               	movlb	0	; () banked
  8456  014BE4  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8457  014BE6  50F4               	movf	prodh,w,c
  8458  014BE8  0100               	movlb	0	; () banked
  8459  014BEA  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8460  014BEC  0100               	movlb	0	; () banked
  8461  014BEE  518F               	movf	_lBufferX& (0+255),w,b
  8462  014BF0  0D01               	mullw	1
  8463  014BF2  50F3               	movf	prodl,w,c
  8464  014BF4  0100               	movlb	0	; () banked
  8465  014BF6  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8466  014BF8  6ED9               	movwf	fsr2l,c
  8467  014BFA  50F4               	movf	prodh,w,c
  8468  014BFC  0100               	movlb	0	; () banked
  8469  014BFE  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8470  014C00  6EDA               	movwf	fsr2h,c
  8471  014C02  50DF               	movf	indf2,w,c
  8472  014C04  B4D8               	btfsc	status,2,c
  8473  014C06  D01F               	goto	l985
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8477  014C08  0E01               	movlw	1
  8478  014C0A  0100               	movlb	0	; () banked
  8479  014C0C  6FFF               	movwf	_change& (0+255),b
  8480                           
  8481                           ; BSR set to: 0
  8482  014C0E  0100               	movlb	0	; () banked
  8483  014C10  518E               	movf	_lBufferY& (0+255),w,b
  8484  014C12  0D14               	mullw	20
  8485  014C14  0EAA               	movlw	low _lBuffer
  8486  014C16  0100               	movlb	0	; () banked
  8487  014C18  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8488  014C1A  0E04               	movlw	high _lBuffer
  8489  014C1C  0100               	movlb	0	; () banked
  8490  014C1E  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8491  014C20  50F3               	movf	prodl,w,c
  8492  014C22  0100               	movlb	0	; () banked
  8493  014C24  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8494  014C26  50F4               	movf	prodh,w,c
  8495  014C28  0100               	movlb	0	; () banked
  8496  014C2A  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8497  014C2C  0100               	movlb	0	; () banked
  8498  014C2E  518F               	movf	_lBufferX& (0+255),w,b
  8499  014C30  0D01               	mullw	1
  8500  014C32  50F3               	movf	prodl,w,c
  8501  014C34  0100               	movlb	0	; () banked
  8502  014C36  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8503  014C38  6ED9               	movwf	fsr2l,c
  8504  014C3A  50F4               	movf	prodh,w,c
  8505  014C3C  0100               	movlb	0	; () banked
  8506  014C3E  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8507  014C40  6EDA               	movwf	fsr2h,c
  8508  014C42  0E80               	movlw	128
  8509  014C44  6EDF               	movwf	indf2,c
  8510  014C46                     l985:
  8511                           
  8512                           ; BSR set to: 0
  8513                           ;Console.c: 182: lBufferX ++;
  8514                           
  8515                           ; BSR set to: 0
  8516  014C46  0100               	movlb	0	; () banked
  8517  014C48  2B8F               	incf	_lBufferX& (0+255),f,b
  8518  014C4A                     l983:
  8519                           
  8520                           ; BSR set to: 0
  8521  014C4A  0E13               	movlw	19
  8522  014C4C  0100               	movlb	0	; () banked
  8523  014C4E  658F               	cpfsgt	_lBufferX& (0+255),b
  8524  014C50  D7BE               	goto	l984
  8525                           
  8526                           ; BSR set to: 0
  8527                           ;Console.c: 183: }
  8528                           ;Console.c: 185: lBufferX = 0;
  8529                           
  8530                           ; BSR set to: 0
  8531  014C52  0E00               	movlw	0
  8532  014C54  0100               	movlb	0	; () banked
  8533  014C56  6F8F               	movwf	_lBufferX& (0+255),b
  8534                           
  8535                           ; BSR set to: 0
  8536                           ;Console.c: 186: lBufferY ++;
  8537  014C58  0100               	movlb	0	; () banked
  8538  014C5A  2B8E               	incf	_lBufferY& (0+255),f,b
  8539                           
  8540                           ; BSR set to: 0
  8541                           ;Console.c: 188: gCursor.y += 8;
  8542  014C5C  0E08               	movlw	8
  8543  014C5E  2649               	addwf	_gCursor+2,f,c
  8544  014C60  0E00               	movlw	0
  8545  014C62  224A               	addwfc	_gCursor+3,f,c
  8546                           
  8547                           ; BSR set to: 0
  8548                           ;Console.c: 189: gCursor.x = 6;
  8549  014C64  0E00               	movlw	0
  8550  014C66  6E48               	movwf	_gCursor+1,c
  8551  014C68  0E06               	movlw	6
  8552  014C6A  6E47               	movwf	_gCursor,c
  8553                           
  8554                           ; BSR set to: 0
  8555  014C6C  0012               	return		;funcret
  8556  014C6E                     __end_of_Console_NewLine:
  8557                           	opt stack 0
  8558                           tblptru	equ	0xFF8
  8559                           tblptrh	equ	0xFF7
  8560                           tblptrl	equ	0xFF6
  8561                           tablat	equ	0xFF5
  8562                           prodh	equ	0xFF4
  8563                           prodl	equ	0xFF3
  8564                           postinc0	equ	0xFEE
  8565                           wreg	equ	0xFE8
  8566                           postdec1	equ	0xFE5
  8567                           fsr1h	equ	0xFE2
  8568                           fsr1l	equ	0xFE1
  8569                           indf2	equ	0xFDF
  8570                           postinc2	equ	0xFDE
  8571                           postdec2	equ	0xFDD
  8572                           fsr2h	equ	0xFDA
  8573                           fsr2l	equ	0xFD9
  8574                           status	equ	0xFD8
  8575                           
  8576 ;; *************** function _Console_FormFeed *****************
  8577 ;; Defined at:
  8578 ;;		line 192 in file "Library/Console.c"
  8579 ;; Parameters:    Size  Location     Type
  8580 ;;		None
  8581 ;; Auto vars:     Size  Location     Type
  8582 ;;  y               1    3[BANK0 ] unsigned char 
  8583 ;;  x               1    2[BANK0 ] unsigned char 
  8584 ;; Return value:  Size  Location     Type
  8585 ;;                  1    wreg      void 
  8586 ;; Registers used:
  8587 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8588 ;; Tracked objects:
  8589 ;;		On entry : 0/0
  8590 ;;		On exit  : 0/0
  8591 ;;		Unchanged: 0/0
  8592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8593 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8594 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8595 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8596 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8597 ;;Total ram usage:        4 bytes
  8598 ;; Hardware stack levels used:    1
  8599 ;; Hardware stack levels required when called:    7
  8600 ;; This function calls:
  8601 ;;		Nothing
  8602 ;; This function is called by:
  8603 ;;		_Console_IncrementCursor
  8604 ;;		_Console_PrintChar
  8605 ;; This function uses a non-reentrant model
  8606 ;;
  8607                           
  8608                           	psect	text29
  8609  014E32                     __ptext29:
  8610                           	opt stack 0
  8611  014E32                     _Console_FormFeed:
  8612                           	opt stack 18
  8613                           
  8614                           ;Console.c: 195: lBufferX = 0;
  8615                           
  8616                           ; BSR set to: 0
  8617                           ;incstack = 0
  8618  014E32  0E00               	movlw	0
  8619  014E34  0100               	movlb	0	; () banked
  8620  014E36  6F8F               	movwf	_lBufferX& (0+255),b
  8621                           
  8622                           ;Console.c: 196: lBufferY = 0;
  8623  014E38  0E00               	movlw	0
  8624  014E3A  0100               	movlb	0	; () banked
  8625  014E3C  6F8E               	movwf	_lBufferY& (0+255),b
  8626                           
  8627                           ;Console.c: 197: UINT8 x, y;
  8628                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8629  014E3E  0E00               	movlw	0
  8630  014E40  0100               	movlb	0	; () banked
  8631  014E42  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8632  014E44                     l12272:
  8633                           
  8634                           ; BSR set to: 0
  8635  014E44  0E0E               	movlw	14
  8636  014E46  0100               	movlb	0	; () banked
  8637  014E48  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8638  014E4A  D001               	goto	l990
  8639  014E4C  D02D               	goto	u9010
  8640  014E4E                     l990:
  8641                           
  8642                           ; BSR set to: 0
  8643                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8644                           
  8645                           ; BSR set to: 0
  8646  014E4E  0E00               	movlw	0
  8647  014E50  0100               	movlb	0	; () banked
  8648  014E52  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8649  014E54                     l12278:
  8650                           
  8651                           ; BSR set to: 0
  8652  014E54  0E13               	movlw	19
  8653  014E56  0100               	movlb	0	; () banked
  8654  014E58  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8655  014E5A  D001               	goto	l992
  8656  014E5C  D022               	goto	u9000
  8657  014E5E                     l992:
  8658                           
  8659                           ; BSR set to: 0
  8660                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8661                           
  8662                           ; BSR set to: 0
  8663  014E5E  0E01               	movlw	1
  8664  014E60  0100               	movlb	0	; () banked
  8665  014E62  6FFF               	movwf	_change& (0+255),b
  8666                           
  8667                           ; BSR set to: 0
  8668  014E64  0100               	movlb	0	; () banked
  8669  014E66  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8670  014E68  0D14               	mullw	20
  8671  014E6A  0EAA               	movlw	low _lBuffer
  8672  014E6C  0100               	movlb	0	; () banked
  8673  014E6E  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8674  014E70  0E04               	movlw	high _lBuffer
  8675  014E72  0100               	movlb	0	; () banked
  8676  014E74  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8677  014E76  50F3               	movf	prodl,w,c
  8678  014E78  0100               	movlb	0	; () banked
  8679  014E7A  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8680  014E7C  50F4               	movf	prodh,w,c
  8681  014E7E  0100               	movlb	0	; () banked
  8682  014E80  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8683  014E82  0100               	movlb	0	; () banked
  8684  014E84  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8685  014E86  0D01               	mullw	1
  8686  014E88  50F3               	movf	prodl,w,c
  8687  014E8A  0100               	movlb	0	; () banked
  8688  014E8C  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8689  014E8E  6ED9               	movwf	fsr2l,c
  8690  014E90  50F4               	movf	prodh,w,c
  8691  014E92  0100               	movlb	0	; () banked
  8692  014E94  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8693  014E96  6EDA               	movwf	fsr2h,c
  8694  014E98  0E80               	movlw	128
  8695  014E9A  6EDF               	movwf	indf2,c
  8696                           
  8697                           ; BSR set to: 0
  8698  014E9C  0100               	movlb	0	; () banked
  8699  014E9E  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8700  014EA0  D7D9               	goto	l12278
  8701  014EA2                     u9000:
  8702                           
  8703                           ; BSR set to: 0
  8704                           
  8705                           ; BSR set to: 0
  8706  014EA2  0100               	movlb	0	; () banked
  8707  014EA4  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8708  014EA6  D7CE               	goto	l12272
  8709  014EA8                     u9010:
  8710                           
  8711                           ; BSR set to: 0
  8712                           ;Console.c: 204: clearall = 1;
  8713                           
  8714                           ; BSR set to: 0
  8715  014EA8  0E01               	movlw	1
  8716  014EAA  0100               	movlb	0	; () banked
  8717  014EAC  6F90               	movwf	_clearall& (0+255),b
  8718                           
  8719                           ;Console.c: 205: gCursor.x = 6;
  8720  014EAE  0E00               	movlw	0
  8721  014EB0  6E48               	movwf	_gCursor+1,c
  8722  014EB2  0E06               	movlw	6
  8723  014EB4  6E47               	movwf	_gCursor,c
  8724                           
  8725                           ;Console.c: 206: gCursor.y = 6;
  8726  014EB6  0E00               	movlw	0
  8727  014EB8  6E4A               	movwf	_gCursor+3,c
  8728  014EBA  0E06               	movlw	6
  8729  014EBC  6E49               	movwf	_gCursor+2,c
  8730                           
  8731                           ; BSR set to: 0
  8732  014EBE  0012               	return		;funcret
  8733  014EC0                     __end_of_Console_FormFeed:
  8734                           	opt stack 0
  8735                           tblptru	equ	0xFF8
  8736                           tblptrh	equ	0xFF7
  8737                           tblptrl	equ	0xFF6
  8738                           tablat	equ	0xFF5
  8739                           prodh	equ	0xFF4
  8740                           prodl	equ	0xFF3
  8741                           postinc0	equ	0xFEE
  8742                           wreg	equ	0xFE8
  8743                           postdec1	equ	0xFE5
  8744                           fsr1h	equ	0xFE2
  8745                           fsr1l	equ	0xFE1
  8746                           indf2	equ	0xFDF
  8747                           postinc2	equ	0xFDE
  8748                           postdec2	equ	0xFDD
  8749                           fsr2h	equ	0xFDA
  8750                           fsr2l	equ	0xFD9
  8751                           status	equ	0xFD8
  8752                           
  8753 ;; *************** function _Console_ResetCursor *****************
  8754 ;; Defined at:
  8755 ;;		line 297 in file "Library/Console.c"
  8756 ;; Parameters:    Size  Location     Type
  8757 ;;		None
  8758 ;; Auto vars:     Size  Location     Type
  8759 ;;		None
  8760 ;; Return value:  Size  Location     Type
  8761 ;;                  1    wreg      void 
  8762 ;; Registers used:
  8763 ;;		wreg, status,2
  8764 ;; Tracked objects:
  8765 ;;		On entry : 0/0
  8766 ;;		On exit  : 0/0
  8767 ;;		Unchanged: 0/0
  8768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8769 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8772 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8773 ;;Total ram usage:        0 bytes
  8774 ;; Hardware stack levels used:    1
  8775 ;; Hardware stack levels required when called:    7
  8776 ;; This function calls:
  8777 ;;		Nothing
  8778 ;; This function is called by:
  8779 ;;		_Console_PrintChar
  8780 ;; This function uses a non-reentrant model
  8781 ;;
  8782                           
  8783                           	psect	text30
  8784  01648C                     __ptext30:
  8785                           	opt stack 0
  8786  01648C                     _Console_ResetCursor:
  8787                           	opt stack 20
  8788                           
  8789                           ;Console.c: 299: gCursor.x = 6;
  8790                           
  8791                           ; BSR set to: 0
  8792                           ;incstack = 0
  8793  01648C  0E00               	movlw	0
  8794  01648E  6E48               	movwf	_gCursor+1,c
  8795  016490  0E06               	movlw	6
  8796  016492  6E47               	movwf	_gCursor,c
  8797                           
  8798                           ;Console.c: 300: gCursor.y = 6;
  8799  016494  0E00               	movlw	0
  8800  016496  6E4A               	movwf	_gCursor+3,c
  8801  016498  0E06               	movlw	6
  8802  01649A  6E49               	movwf	_gCursor+2,c
  8803                           
  8804                           ;Console.c: 303: lBufferX = 0;
  8805  01649C  0E00               	movlw	0
  8806  01649E  0100               	movlb	0	; () banked
  8807  0164A0  6F8F               	movwf	_lBufferX& (0+255),b
  8808                           
  8809                           ;Console.c: 304: lBufferY = 0;
  8810  0164A2  0E00               	movlw	0
  8811  0164A4  0100               	movlb	0	; () banked
  8812  0164A6  6F8E               	movwf	_lBufferY& (0+255),b
  8813                           
  8814                           ; BSR set to: 0
  8815  0164A8  0012               	return		;funcret
  8816  0164AA                     __end_of_Console_ResetCursor:
  8817                           	opt stack 0
  8818                           tblptru	equ	0xFF8
  8819                           tblptrh	equ	0xFF7
  8820                           tblptrl	equ	0xFF6
  8821                           tablat	equ	0xFF5
  8822                           prodh	equ	0xFF4
  8823                           prodl	equ	0xFF3
  8824                           postinc0	equ	0xFEE
  8825                           wreg	equ	0xFE8
  8826                           postdec1	equ	0xFE5
  8827                           fsr1h	equ	0xFE2
  8828                           fsr1l	equ	0xFE1
  8829                           indf2	equ	0xFDF
  8830                           postinc2	equ	0xFDE
  8831                           postdec2	equ	0xFDD
  8832                           fsr2h	equ	0xFDA
  8833                           fsr2l	equ	0xFD9
  8834                           status	equ	0xFD8
  8835                           
  8836 ;; *************** function _Console_Backspace *****************
  8837 ;; Defined at:
  8838 ;;		line 209 in file "Library/Console.c"
  8839 ;; Parameters:    Size  Location     Type
  8840 ;;		None
  8841 ;; Auto vars:     Size  Location     Type
  8842 ;;		None
  8843 ;; Return value:  Size  Location     Type
  8844 ;;                  1    wreg      void 
  8845 ;; Registers used:
  8846 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8847 ;; Tracked objects:
  8848 ;;		On entry : 0/0
  8849 ;;		On exit  : 0/0
  8850 ;;		Unchanged: 0/0
  8851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8856 ;;Total ram usage:        0 bytes
  8857 ;; Hardware stack levels used:    1
  8858 ;; Hardware stack levels required when called:    8
  8859 ;; This function calls:
  8860 ;;		_Console_ClearCursor
  8861 ;; This function is called by:
  8862 ;;		_Console_PrintChar
  8863 ;; This function uses a non-reentrant model
  8864 ;;
  8865                           
  8866                           	psect	text31
  8867  015A16                     __ptext31:
  8868                           	opt stack 0
  8869  015A16                     _Console_Backspace:
  8870                           	opt stack 19
  8871                           
  8872                           ;Console.c: 211: if (lBufferX > 0)
  8873                           
  8874                           ; BSR set to: 0
  8875                           ;incstack = 0
  8876  015A16  0100               	movlb	0	; () banked
  8877  015A18  518F               	movf	_lBufferX& (0+255),w,b
  8878  015A1A  B4D8               	btfsc	status,2,c
  8879  015A1C  D007               	goto	l997
  8880                           
  8881                           ; BSR set to: 0
  8882                           ;Console.c: 212: {
  8883                           ;Console.c: 213: gCursor.x -= 6;
  8884  015A1E  0EFA               	movlw	250
  8885  015A20  2647               	addwf	_gCursor,f,c
  8886  015A22  0EFF               	movlw	255
  8887  015A24  2248               	addwfc	_gCursor+1,f,c
  8888                           
  8889                           ; BSR set to: 0
  8890                           ;Console.c: 216: lBufferX --;
  8891  015A26  0100               	movlb	0	; () banked
  8892  015A28  078F               	decf	_lBufferX& (0+255),f,b
  8893                           
  8894                           ;Console.c: 218: }
  8895  015A2A  D020               	goto	l1000
  8896  015A2C                     l997:
  8897                           
  8898                           ; BSR set to: 0
  8899                           ;Console.c: 219: else if (lBufferY > 0)
  8900                           
  8901                           ; BSR set to: 0
  8902  015A2C  0100               	movlb	0	; () banked
  8903  015A2E  518E               	movf	_lBufferY& (0+255),w,b
  8904  015A30  B4D8               	btfsc	status,2,c
  8905  015A32  D00E               	goto	l999
  8906                           
  8907                           ; BSR set to: 0
  8908                           ;Console.c: 220: {
  8909                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8910  015A34  0E00               	movlw	0
  8911  015A36  6E48               	movwf	_gCursor+1,c
  8912  015A38  0E72               	movlw	114
  8913  015A3A  6E47               	movwf	_gCursor,c
  8914                           
  8915                           ; BSR set to: 0
  8916                           ;Console.c: 222: gCursor.y -= 8;
  8917  015A3C  0EF8               	movlw	248
  8918  015A3E  2649               	addwf	_gCursor+2,f,c
  8919  015A40  0EFF               	movlw	255
  8920  015A42  224A               	addwfc	_gCursor+3,f,c
  8921                           
  8922                           ; BSR set to: 0
  8923                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8924  015A44  0E13               	movlw	19
  8925  015A46  0100               	movlb	0	; () banked
  8926  015A48  6F8F               	movwf	_lBufferX& (0+255),b
  8927                           
  8928                           ; BSR set to: 0
  8929                           ;Console.c: 226: lBufferY --;
  8930  015A4A  0100               	movlb	0	; () banked
  8931  015A4C  078E               	decf	_lBufferY& (0+255),f,b
  8932                           
  8933                           ;Console.c: 228: }
  8934  015A4E  D00E               	goto	l1000
  8935  015A50                     l999:
  8936                           
  8937                           ; BSR set to: 0
  8938                           ;Console.c: 229: else
  8939                           ;Console.c: 230: {
  8940                           ;Console.c: 231: gCursor.x = 6;
  8941                           
  8942                           ; BSR set to: 0
  8943  015A50  0E00               	movlw	0
  8944  015A52  6E48               	movwf	_gCursor+1,c
  8945  015A54  0E06               	movlw	6
  8946  015A56  6E47               	movwf	_gCursor,c
  8947                           
  8948                           ;Console.c: 232: gCursor.y = 6;
  8949  015A58  0E00               	movlw	0
  8950  015A5A  6E4A               	movwf	_gCursor+3,c
  8951  015A5C  0E06               	movlw	6
  8952  015A5E  6E49               	movwf	_gCursor+2,c
  8953                           
  8954                           ;Console.c: 235: lBufferX = 0;
  8955  015A60  0E00               	movlw	0
  8956  015A62  0100               	movlb	0	; () banked
  8957  015A64  6F8F               	movwf	_lBufferX& (0+255),b
  8958                           
  8959                           ;Console.c: 236: lBufferY = 0;
  8960  015A66  0E00               	movlw	0
  8961  015A68  0100               	movlb	0	; () banked
  8962  015A6A  6F8E               	movwf	_lBufferY& (0+255),b
  8963  015A6C                     l1000:
  8964                           
  8965                           ; BSR set to: 0
  8966                           ;Console.c: 238: }
  8967                           ;Console.c: 240: Console_ClearCursor();
  8968                           
  8969                           ; BSR set to: 0
  8970                           
  8971                           ; BSR set to: 0
  8972  015A6C  ECBF  F0AF         	call	_Console_ClearCursor	;wreg free
  8973  015A70  0012               	return		;funcret
  8974  015A72                     __end_of_Console_Backspace:
  8975                           	opt stack 0
  8976                           tblptru	equ	0xFF8
  8977                           tblptrh	equ	0xFF7
  8978                           tblptrl	equ	0xFF6
  8979                           tablat	equ	0xFF5
  8980                           prodh	equ	0xFF4
  8981                           prodl	equ	0xFF3
  8982                           postinc0	equ	0xFEE
  8983                           wreg	equ	0xFE8
  8984                           postdec1	equ	0xFE5
  8985                           fsr1h	equ	0xFE2
  8986                           fsr1l	equ	0xFE1
  8987                           indf2	equ	0xFDF
  8988                           postinc2	equ	0xFDE
  8989                           postdec2	equ	0xFDD
  8990                           fsr2h	equ	0xFDA
  8991                           fsr2l	equ	0xFD9
  8992                           status	equ	0xFD8
  8993                           
  8994 ;; *************** function _Console_ClearCursor *****************
  8995 ;; Defined at:
  8996 ;;		line 308 in file "Library/Console.c"
  8997 ;; Parameters:    Size  Location     Type
  8998 ;;		None
  8999 ;; Auto vars:     Size  Location     Type
  9000 ;;		None
  9001 ;; Return value:  Size  Location     Type
  9002 ;;                  1    wreg      void 
  9003 ;; Registers used:
  9004 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9005 ;; Tracked objects:
  9006 ;;		On entry : 0/0
  9007 ;;		On exit  : 0/0
  9008 ;;		Unchanged: 0/0
  9009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9012 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9013 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9014 ;;Total ram usage:        2 bytes
  9015 ;; Hardware stack levels used:    1
  9016 ;; Hardware stack levels required when called:    7
  9017 ;; This function calls:
  9018 ;;		Nothing
  9019 ;; This function is called by:
  9020 ;;		_Console_Backspace
  9021 ;;		_Console_Tab
  9022 ;; This function uses a non-reentrant model
  9023 ;;
  9024                           
  9025                           	psect	text32
  9026  015F7E                     __ptext32:
  9027                           	opt stack 0
  9028  015F7E                     _Console_ClearCursor:
  9029                           	opt stack 19
  9030                           
  9031                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  9032                           
  9033                           ;incstack = 0
  9034  015F7E  0E01               	movlw	1
  9035  015F80  0100               	movlb	0	; () banked
  9036  015F82  6FFF               	movwf	_change& (0+255),b
  9037                           
  9038                           ; BSR set to: 0
  9039  015F84  0100               	movlb	0	; () banked
  9040  015F86  518E               	movf	_lBufferY& (0+255),w,b
  9041  015F88  0D14               	mullw	20
  9042  015F8A  0EAA               	movlw	low _lBuffer
  9043  015F8C  0100               	movlb	0	; () banked
  9044  015F8E  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  9045  015F90  0E04               	movlw	high _lBuffer
  9046  015F92  0100               	movlb	0	; () banked
  9047  015F94  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  9048  015F96  50F3               	movf	prodl,w,c
  9049  015F98  0100               	movlb	0	; () banked
  9050  015F9A  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  9051  015F9C  50F4               	movf	prodh,w,c
  9052  015F9E  0100               	movlb	0	; () banked
  9053  015FA0  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  9054  015FA2  0100               	movlb	0	; () banked
  9055  015FA4  518F               	movf	_lBufferX& (0+255),w,b
  9056  015FA6  0D01               	mullw	1
  9057  015FA8  50F3               	movf	prodl,w,c
  9058  015FAA  0100               	movlb	0	; () banked
  9059  015FAC  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  9060  015FAE  6ED9               	movwf	fsr2l,c
  9061  015FB0  50F4               	movf	prodh,w,c
  9062  015FB2  0100               	movlb	0	; () banked
  9063  015FB4  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  9064  015FB6  6EDA               	movwf	fsr2h,c
  9065  015FB8  0E80               	movlw	128
  9066  015FBA  6EDF               	movwf	indf2,c
  9067                           
  9068                           ; BSR set to: 0
  9069  015FBC  0012               	return		;funcret
  9070  015FBE                     __end_of_Console_ClearCursor:
  9071                           	opt stack 0
  9072                           tblptru	equ	0xFF8
  9073                           tblptrh	equ	0xFF7
  9074                           tblptrl	equ	0xFF6
  9075                           tablat	equ	0xFF5
  9076                           prodh	equ	0xFF4
  9077                           prodl	equ	0xFF3
  9078                           postinc0	equ	0xFEE
  9079                           wreg	equ	0xFE8
  9080                           postdec1	equ	0xFE5
  9081                           fsr1h	equ	0xFE2
  9082                           fsr1l	equ	0xFE1
  9083                           indf2	equ	0xFDF
  9084                           postinc2	equ	0xFDE
  9085                           postdec2	equ	0xFDD
  9086                           fsr2h	equ	0xFDA
  9087                           fsr2l	equ	0xFD9
  9088                           status	equ	0xFD8
  9089                           
  9090 ;; *************** function ___fltol *****************
  9091 ;; Defined at:
  9092 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  9093 ;; Parameters:    Size  Location     Type
  9094 ;;  f1              4   57[BANK0 ] void 
  9095 ;; Auto vars:     Size  Location     Type
  9096 ;;  exp1            1   62[BANK0 ] unsigned char 
  9097 ;;  sign1           1   61[BANK0 ] unsigned char 
  9098 ;; Return value:  Size  Location     Type
  9099 ;;                  4   57[BANK0 ] long 
  9100 ;; Registers used:
  9101 ;;		wreg, status,2, status,0
  9102 ;; Tracked objects:
  9103 ;;		On entry : 0/0
  9104 ;;		On exit  : 0/0
  9105 ;;		Unchanged: 0/0
  9106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9107 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9108 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9109 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9110 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9111 ;;Total ram usage:       10 bytes
  9112 ;; Hardware stack levels used:    1
  9113 ;; Hardware stack levels required when called:    7
  9114 ;; This function calls:
  9115 ;;		Nothing
  9116 ;; This function is called by:
  9117 ;;		_findClosestWall
  9118 ;;		_mode1
  9119 ;; This function uses a non-reentrant model
  9120 ;;
  9121                           
  9122                           	psect	text33
  9123  013718                     __ptext33:
  9124                           	opt stack 0
  9125  013718                     ___fltol:
  9126                           	opt stack 21
  9127                           
  9128                           ; BSR set to: 0
  9129                           ;incstack = 0
  9130  013718  0100               	movlb	0	; () banked
  9131  01371A  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  9132  01371C  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  9133  01371E  0100               	movlb	0	; () banked
  9134  013720  6FF8               	movwf	___fltol@exp1& (0+255),b
  9135  013722  0100               	movlb	0	; () banked
  9136  013724  51F8               	movf	___fltol@exp1& (0+255),w,b
  9137  013726  A4D8               	btfss	status,2,c
  9138  013728  D00A               	goto	l2686
  9139                           
  9140                           ; BSR set to: 0
  9141  01372A  0E00               	movlw	0
  9142  01372C  0100               	movlb	0	; () banked
  9143  01372E  6FF3               	movwf	?___fltol& (0+255),b
  9144  013730  0E00               	movlw	0
  9145  013732  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9146  013734  0E00               	movlw	0
  9147  013736  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9148  013738  0E00               	movlw	0
  9149  01373A  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152  01373C  0012               	return	
  9153  01373E                     l2686:
  9154                           
  9155                           ; BSR set to: 0
  9156                           
  9157                           ; BSR set to: 0
  9158  01373E  C0F3  F100         	movff	___fltol@f1,??___fltol
  9159  013742  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  9160  013746  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  9161  01374A  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  9162  01374E  0E20               	movlw	32
  9163  013750  D006               	goto	u11220
  9164  013752                     u11225:
  9165  013752  0101               	movlb	1	; () banked
  9166  013754  90D8               	bcf	status,0,c
  9167  013756  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  9168  013758  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  9169  01375A  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  9170  01375C  3300               	rrcf	??___fltol& (0+255),f,b
  9171  01375E                     u11220:
  9172  01375E  2EE8               	decfsz	wreg,f,c
  9173  013760  D7F8               	goto	u11225
  9174  013762  0101               	movlb	1	; () banked
  9175  013764  5100               	movf	??___fltol& (0+255),w,b
  9176  013766  0100               	movlb	0	; () banked
  9177  013768  6FF7               	movwf	___fltol@sign1& (0+255),b
  9178                           
  9179                           ; BSR set to: 0
  9180  01376A  0100               	movlb	0	; () banked
  9181  01376C  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  9182                           
  9183                           ; BSR set to: 0
  9184  01376E  0EFF               	movlw	255
  9185  013770  0100               	movlb	0	; () banked
  9186  013772  17F3               	andwf	___fltol@f1& (0+255),f,b
  9187  013774  0EFF               	movlw	255
  9188  013776  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  9189  013778  0EFF               	movlw	255
  9190  01377A  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  9191  01377C  0E00               	movlw	0
  9192  01377E  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  9193                           
  9194                           ; BSR set to: 0
  9195  013780  0E96               	movlw	150
  9196  013782  0100               	movlb	0	; () banked
  9197  013784  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  9198                           
  9199                           ; BSR set to: 0
  9200  013786  0100               	movlb	0	; () banked
  9201  013788  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  9202  01378A  D01A               	goto	l2688
  9203                           
  9204                           ; BSR set to: 0
  9205  01378C  0100               	movlb	0	; () banked
  9206  01378E  51F8               	movf	___fltol@exp1& (0+255),w,b
  9207  013790  0A80               	xorlw	128
  9208  013792  0F97               	addlw	151
  9209  013794  B0D8               	btfsc	status,0,c
  9210  013796  D00A               	goto	l2689
  9211                           
  9212                           ; BSR set to: 0
  9213  013798  0E00               	movlw	0
  9214  01379A  0100               	movlb	0	; () banked
  9215  01379C  6FF3               	movwf	?___fltol& (0+255),b
  9216  01379E  0E00               	movlw	0
  9217  0137A0  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9218  0137A2  0E00               	movlw	0
  9219  0137A4  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9220  0137A6  0E00               	movlw	0
  9221  0137A8  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9222                           
  9223                           ; BSR set to: 0
  9224  0137AA  0012               	return	
  9225  0137AC                     l2689:
  9226                           
  9227                           ; BSR set to: 0
  9228                           
  9229                           ; BSR set to: 0
  9230                           
  9231                           ; BSR set to: 0
  9232  0137AC  0100               	movlb	0	; () banked
  9233  0137AE  90D8               	bcf	status,0,c
  9234  0137B0  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9235  0137B2  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9236  0137B4  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9237  0137B6  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9238                           
  9239                           ; BSR set to: 0
  9240  0137B8  0100               	movlb	0	; () banked
  9241  0137BA  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9242  0137BC  D7F7               	goto	l2689
  9243                           
  9244                           ; BSR set to: 0
  9245  0137BE  D01B               	goto	u11260
  9246  0137C0                     l2688:
  9247                           
  9248                           ; BSR set to: 0
  9249                           
  9250                           ; BSR set to: 0
  9251  0137C0  0E1F               	movlw	31
  9252  0137C2  0100               	movlb	0	; () banked
  9253  0137C4  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9254  0137C6  D012               	goto	l2694
  9255                           
  9256                           ; BSR set to: 0
  9257  0137C8  0E00               	movlw	0
  9258  0137CA  0100               	movlb	0	; () banked
  9259  0137CC  6FF3               	movwf	?___fltol& (0+255),b
  9260  0137CE  0E00               	movlw	0
  9261  0137D0  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9262  0137D2  0E00               	movlw	0
  9263  0137D4  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9264  0137D6  0E00               	movlw	0
  9265  0137D8  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9266                           
  9267                           ; BSR set to: 0
  9268  0137DA  0012               	return	
  9269  0137DC                     
  9270                           ; BSR set to: 0
  9271                           
  9272                           ; BSR set to: 0
  9273  0137DC  0100               	movlb	0	; () banked
  9274  0137DE  90D8               	bcf	status,0,c
  9275  0137E0  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9276  0137E2  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9277  0137E4  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9278  0137E6  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9279  0137E8  0100               	movlb	0	; () banked
  9280  0137EA  07F8               	decf	___fltol@exp1& (0+255),f,b
  9281  0137EC                     l2694:
  9282                           
  9283                           ; BSR set to: 0
  9284                           
  9285                           ; BSR set to: 0
  9286  0137EC  0100               	movlb	0	; () banked
  9287  0137EE  51F8               	movf	___fltol@exp1& (0+255),w,b
  9288  0137F0  0100               	movlb	0	; () banked
  9289  0137F2  A4D8               	btfss	status,2,c
  9290  0137F4  D7F3               	goto	l2695
  9291  0137F6                     u11260:
  9292                           
  9293                           ; BSR set to: 0
  9294                           
  9295                           ; BSR set to: 0
  9296                           
  9297                           ; BSR set to: 0
  9298  0137F6  0100               	movlb	0	; () banked
  9299  0137F8  51F7               	movf	___fltol@sign1& (0+255),w,b
  9300  0137FA  0100               	movlb	0	; () banked
  9301  0137FC  B4D8               	btfsc	status,2,c
  9302  0137FE  D009               	goto	l2697
  9303                           
  9304                           ; BSR set to: 0
  9305  013800  0100               	movlb	0	; () banked
  9306  013802  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9307  013804  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9308  013806  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9309  013808  6DF3               	negf	___fltol@f1& (0+255),b
  9310  01380A  0E00               	movlw	0
  9311  01380C  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9312  01380E  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9313  013810  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9314  013812                     l2697:
  9315                           
  9316                           ; BSR set to: 0
  9317                           
  9318                           ; BSR set to: 0
  9319  013812  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9320  013816  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9321  01381A  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9322  01381E  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9323  013822  0012               	return	
  9324  013824                     __end_of___fltol:
  9325                           	opt stack 0
  9326                           tblptru	equ	0xFF8
  9327                           tblptrh	equ	0xFF7
  9328                           tblptrl	equ	0xFF6
  9329                           tablat	equ	0xFF5
  9330                           prodh	equ	0xFF4
  9331                           prodl	equ	0xFF3
  9332                           postinc0	equ	0xFEE
  9333                           wreg	equ	0xFE8
  9334                           postdec1	equ	0xFE5
  9335                           fsr1h	equ	0xFE2
  9336                           fsr1l	equ	0xFE1
  9337                           indf2	equ	0xFDF
  9338                           postinc2	equ	0xFDE
  9339                           postdec2	equ	0xFDD
  9340                           fsr2h	equ	0xFDA
  9341                           fsr2l	equ	0xFD9
  9342                           status	equ	0xFD8
  9343                           
  9344 ;; *************** function _Motor_Speed *****************
  9345 ;; Defined at:
  9346 ;;		line 117 in file "Library/Motor.c"
  9347 ;; Parameters:    Size  Location     Type
  9348 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9349 ;;		 -> Stepper(6), 
  9350 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9351 ;; Auto vars:     Size  Location     Type
  9352 ;;		None
  9353 ;; Return value:  Size  Location     Type
  9354 ;;                  1    wreg      unsigned char 
  9355 ;; Registers used:
  9356 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9357 ;; Tracked objects:
  9358 ;;		On entry : 0/0
  9359 ;;		On exit  : 0/0
  9360 ;;		Unchanged: 0/0
  9361 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9362 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9363 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9364 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9365 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9366 ;;Total ram usage:        4 bytes
  9367 ;; Hardware stack levels used:    1
  9368 ;; Hardware stack levels required when called:    9
  9369 ;; This function calls:
  9370 ;;		_Timer0_Init
  9371 ;; This function is called by:
  9372 ;;		_findClosestWall
  9373 ;;		_mode1
  9374 ;; This function uses a non-reentrant model
  9375 ;;
  9376                           
  9377                           	psect	text34
  9378  016364                     __ptext34:
  9379                           	opt stack 0
  9380  016364                     _Motor_Speed:
  9381                           	opt stack 19
  9382                           
  9383                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9384                           
  9385                           ; BSR set to: 0
  9386                           ;incstack = 0
  9387  016364  0100               	movlb	0	; () banked
  9388  016366  EE20 F002          	lfsr	2,2
  9389  01636A  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9390  01636C  26D9               	addwf	fsr2l,f,c
  9391  01636E  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9392  016370  22DA               	addwfc	fsr2h,f,c
  9393  016372  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9394  016376  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9395                           
  9396                           ; BSR set to: 0
  9397                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9398  01637A  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9399  01637E  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9400  016382  0100               	movlb	0	; () banked
  9401  016384  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9402  016386  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9403  016388  ECFC  F098         	call	_Timer0_Init	;wreg free
  9404  01638C  0012               	return	
  9405  01638E                     __end_of_Motor_Speed:
  9406                           	opt stack 0
  9407                           tblptru	equ	0xFF8
  9408                           tblptrh	equ	0xFF7
  9409                           tblptrl	equ	0xFF6
  9410                           tablat	equ	0xFF5
  9411                           prodh	equ	0xFF4
  9412                           prodl	equ	0xFF3
  9413                           postinc0	equ	0xFEE
  9414                           wreg	equ	0xFE8
  9415                           postdec1	equ	0xFE5
  9416                           fsr1h	equ	0xFE2
  9417                           fsr1l	equ	0xFE1
  9418                           indf2	equ	0xFDF
  9419                           postinc2	equ	0xFDE
  9420                           postdec2	equ	0xFDD
  9421                           fsr2h	equ	0xFDA
  9422                           fsr2l	equ	0xFD9
  9423                           status	equ	0xFD8
  9424                           
  9425 ;; *************** function _Motor_Move *****************
  9426 ;; Defined at:
  9427 ;;		line 51 in file "Library/Motor.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9430 ;;		 -> Stepper(6), 
  9431 ;;  pDelta          2    5[BANK0 ] short 
  9432 ;; Auto vars:     Size  Location     Type
  9433 ;;		None
  9434 ;; Return value:  Size  Location     Type
  9435 ;;                  1    wreg      unsigned char 
  9436 ;; Registers used:
  9437 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9438 ;; Tracked objects:
  9439 ;;		On entry : 0/0
  9440 ;;		On exit  : 0/0
  9441 ;;		Unchanged: 0/0
  9442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9443 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9444 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9445 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9446 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9447 ;;Total ram usage:        6 bytes
  9448 ;; Hardware stack levels used:    1
  9449 ;; Hardware stack levels required when called:    8
  9450 ;; This function calls:
  9451 ;;		_Timer0_Start
  9452 ;; This function is called by:
  9453 ;;		_findClosestWall
  9454 ;;		_mode1
  9455 ;; This function uses a non-reentrant model
  9456 ;;
  9457                           
  9458                           	psect	text35
  9459  01616C                     __ptext35:
  9460                           	opt stack 0
  9461  01616C                     _Motor_Move:
  9462                           	opt stack 20
  9463                           
  9464                           ;Motor.c: 54: lMotor = pMotor;
  9465                           
  9466                           ;incstack = 0
  9467  01616C  C0BD  F07F         	movff	Motor_Move@pMotor,_lMotor
  9468  016170  C0BE  F080         	movff	Motor_Move@pMotor+1,_lMotor+1
  9469                           
  9470                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9471  016174  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9472  016178  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9473  01617C  50DE               	movf	postinc2,w,c
  9474  01617E  10DE               	iorwf	postinc2,w,c
  9475  016180  A4D8               	btfss	status,2,c
  9476  016182  0012               	return	
  9477                           
  9478                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9479                           
  9480                           ;Motor.c: 59: return 0;
  9481                           ;	Return value of _Motor_Move is never used
  9482  016184  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9483  016188  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9484  01618C  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9485  016190  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9486                           
  9487                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9488  016194  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9489  016198  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9490  01619C  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9491  0161A0  ECF0  F0B1         	call	_Timer0_Start	;wreg free
  9492  0161A4  0012               	return	
  9493  0161A6                     __end_of_Motor_Move:
  9494                           	opt stack 0
  9495                           tblptru	equ	0xFF8
  9496                           tblptrh	equ	0xFF7
  9497                           tblptrl	equ	0xFF6
  9498                           tablat	equ	0xFF5
  9499                           prodh	equ	0xFF4
  9500                           prodl	equ	0xFF3
  9501                           postinc0	equ	0xFEE
  9502                           wreg	equ	0xFE8
  9503                           postdec1	equ	0xFE5
  9504                           fsr1h	equ	0xFE2
  9505                           fsr1l	equ	0xFE1
  9506                           indf2	equ	0xFDF
  9507                           postinc2	equ	0xFDE
  9508                           postdec2	equ	0xFDD
  9509                           fsr2h	equ	0xFDA
  9510                           fsr2l	equ	0xFD9
  9511                           status	equ	0xFD8
  9512                           
  9513 ;; *************** function _Timer0_Start *****************
  9514 ;; Defined at:
  9515 ;;		line 75 in file "Library/Timer0.c"
  9516 ;; Parameters:    Size  Location     Type
  9517 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9518 ;;		 -> Absolute function(1), Motor_Step(1), 
  9519 ;; Auto vars:     Size  Location     Type
  9520 ;;		None
  9521 ;; Return value:  Size  Location     Type
  9522 ;;                  1    wreg      void 
  9523 ;; Registers used:
  9524 ;;		wreg, status,2, status,0
  9525 ;; Tracked objects:
  9526 ;;		On entry : 0/0
  9527 ;;		On exit  : 0/0
  9528 ;;		Unchanged: 0/0
  9529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9530 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9533 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9534 ;;Total ram usage:        3 bytes
  9535 ;; Hardware stack levels used:    1
  9536 ;; Hardware stack levels required when called:    7
  9537 ;; This function calls:
  9538 ;;		Nothing
  9539 ;; This function is called by:
  9540 ;;		_Motor_Move
  9541 ;; This function uses a non-reentrant model
  9542 ;;
  9543                           
  9544                           	psect	text36
  9545  0163E0                     __ptext36:
  9546                           	opt stack 0
  9547  0163E0                     _Timer0_Start:
  9548                           	opt stack 20
  9549                           
  9550                           ;Timer0.c: 77: gISR = pFunction;
  9551                           
  9552                           ;incstack = 0
  9553  0163E0  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9554  0163E4  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9555  0163E8  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9556                           
  9557                           ;Timer0.c: 78: TMR0 = COUNTER;
  9558  0163EC  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9559  0163F0  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9560                           
  9561                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9562  0163F4  50D5               	movf	4053,w,c	;volatile
  9563  0163F6  0100               	movlb	0	; () banked
  9564  0163F8  198D               	xorwf	_INDEX& (0+255),w,b
  9565  0163FA  0BF8               	andlw	-8
  9566  0163FC  198D               	xorwf	_INDEX& (0+255),w,b
  9567  0163FE  6ED5               	movwf	4053,c	;volatile
  9568                           
  9569                           ; BSR set to: 0
  9570                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9571  016400  94F2               	bcf	intcon,2,c	;volatile
  9572                           
  9573                           ; BSR set to: 0
  9574                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9575  016402  8AF2               	bsf	intcon,5,c	;volatile
  9576                           
  9577                           ; BSR set to: 0
  9578  016404  0012               	return		;funcret
  9579  016406                     __end_of_Timer0_Start:
  9580                           	opt stack 0
  9581                           tblptru	equ	0xFF8
  9582                           tblptrh	equ	0xFF7
  9583                           tblptrl	equ	0xFF6
  9584                           tablat	equ	0xFF5
  9585                           prodh	equ	0xFF4
  9586                           prodl	equ	0xFF3
  9587                           intcon	equ	0xFF2
  9588                           postinc0	equ	0xFEE
  9589                           wreg	equ	0xFE8
  9590                           postdec1	equ	0xFE5
  9591                           fsr1h	equ	0xFE2
  9592                           fsr1l	equ	0xFE1
  9593                           indf2	equ	0xFDF
  9594                           postinc2	equ	0xFDE
  9595                           postdec2	equ	0xFDD
  9596                           fsr2h	equ	0xFDA
  9597                           fsr2l	equ	0xFD9
  9598                           status	equ	0xFD8
  9599                           
  9600 ;; *************** function _HMI_Render *****************
  9601 ;; Defined at:
  9602 ;;		line 138 in file "HMI.c"
  9603 ;; Parameters:    Size  Location     Type
  9604 ;;		None
  9605 ;; Auto vars:     Size  Location     Type
  9606 ;;  a               2    8[BANK0 ] unsigned short 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  1    wreg      void 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9616 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9617 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9618 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9619 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9620 ;;Total ram usage:        2 bytes
  9621 ;; Hardware stack levels used:    1
  9622 ;; Hardware stack levels required when called:    9
  9623 ;; This function calls:
  9624 ;;		_OutSeg
  9625 ;; This function is called by:
  9626 ;;		_findClosestWall
  9627 ;;		_mode1
  9628 ;; This function uses a non-reentrant model
  9629 ;;
  9630                           
  9631                           	psect	text37
  9632  015FFE                     __ptext37:
  9633                           	opt stack 0
  9634  015FFE                     _HMI_Render:
  9635                           	opt stack 19
  9636                           
  9637                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9638                           
  9639                           ; BSR set to: 0
  9640                           ;incstack = 0
  9641  015FFE  0E00               	movlw	0
  9642  016000  0100               	movlb	0	; () banked
  9643  016002  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9644  016004  0E00               	movlw	0
  9645  016006  6FC2               	movwf	HMI_Render@a& (0+255),b
  9646  016008                     l14122:
  9647                           
  9648                           ; BSR set to: 0
  9649  016008  0100               	movlb	0	; () banked
  9650  01600A  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9651  01600C  E116               	bnz	l1158
  9652  01600E  0E08               	movlw	8
  9653  016010  0100               	movlb	0	; () banked
  9654  016012  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9655  016014  B0D8               	btfsc	status,0,c
  9656  016016  0012               	return	
  9657                           
  9658                           ; BSR set to: 0
  9659                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9660                           
  9661                           ; BSR set to: 0
  9662                           
  9663                           ; BSR set to: 0
  9664  016018  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9665  01601C  0E3E               	movlw	low _HMIBoard
  9666  01601E  0100               	movlb	0	; () banked
  9667  016020  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9668  016022  6ED9               	movwf	fsr2l,c
  9669  016024  0E03               	movlw	high _HMIBoard
  9670  016026  0100               	movlb	0	; () banked
  9671  016028  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9672  01602A  6EDA               	movwf	fsr2h,c
  9673  01602C  50DF               	movf	indf2,w,c
  9674  01602E  ECB3  F0A8         	call	_OutSeg
  9675  016032  0100               	movlb	0	; () banked
  9676  016034  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9677  016036  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9678  016038  D7E7               	goto	l14122
  9679  01603A                     l1158:
  9680                           
  9681                           ; BSR set to: 0
  9682  01603A  0012               	return		;funcret
  9683  01603C                     __end_of_HMI_Render:
  9684                           	opt stack 0
  9685                           tblptru	equ	0xFF8
  9686                           tblptrh	equ	0xFF7
  9687                           tblptrl	equ	0xFF6
  9688                           tablat	equ	0xFF5
  9689                           prodh	equ	0xFF4
  9690                           prodl	equ	0xFF3
  9691                           intcon	equ	0xFF2
  9692                           postinc0	equ	0xFEE
  9693                           wreg	equ	0xFE8
  9694                           postdec1	equ	0xFE5
  9695                           fsr1h	equ	0xFE2
  9696                           fsr1l	equ	0xFE1
  9697                           indf2	equ	0xFDF
  9698                           postinc2	equ	0xFDE
  9699                           postdec2	equ	0xFDD
  9700                           fsr2h	equ	0xFDA
  9701                           fsr2l	equ	0xFD9
  9702                           status	equ	0xFD8
  9703                           
  9704 ;; *************** function _OutSeg *****************
  9705 ;; Defined at:
  9706 ;;		line 54 in file "HMI.c"
  9707 ;; Parameters:    Size  Location     Type
  9708 ;;  pInput          1    wreg     unsigned char 
  9709 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9710 ;; Auto vars:     Size  Location     Type
  9711 ;;  pInput          1    6[BANK0 ] unsigned char 
  9712 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9713 ;; Return value:  Size  Location     Type
  9714 ;;                  1    wreg      void 
  9715 ;; Registers used:
  9716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9717 ;; Tracked objects:
  9718 ;;		On entry : 0/0
  9719 ;;		On exit  : 0/0
  9720 ;;		Unchanged: 0/0
  9721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9722 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9723 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9725 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9726 ;;Total ram usage:        5 bytes
  9727 ;; Hardware stack levels used:    1
  9728 ;; Hardware stack levels required when called:    8
  9729 ;; This function calls:
  9730 ;;		_SPI_Send
  9731 ;; This function is called by:
  9732 ;;		_HMI_Render
  9733 ;;		_HMI_GRender
  9734 ;; This function uses a non-reentrant model
  9735 ;;
  9736                           
  9737                           	psect	text38
  9738  015166                     __ptext38:
  9739                           	opt stack 0
  9740  015166                     _OutSeg:
  9741                           	opt stack 19
  9742                           
  9743                           ; BSR set to: 0
  9744                           ;incstack = 0
  9745                           ;OutSeg@pInput stored from wreg
  9746  015166  0100               	movlb	0	; () banked
  9747  015168  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9748                           
  9749                           ;HMI.c: 58: static UINT8 cur;
  9750                           ;HMI.c: 59: volatile UINT8 out;
  9751                           ;HMI.c: 60: static UINT8 segset;
  9752                           ;HMI.c: 61: static UINT8 a;
  9753                           ;HMI.c: 83: if (pSegment <= 8)
  9754  01516A  0E09               	movlw	9
  9755  01516C  0100               	movlb	0	; () banked
  9756  01516E  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9757  015170  0012               	return	
  9758                           
  9759                           ; BSR set to: 0
  9760                           ;HMI.c: 84: {
  9761                           ;HMI.c: 85: cur = pInput;
  9762  015172  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9763                           
  9764                           ; BSR set to: 0
  9765                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9766  015176  0E00               	movlw	0
  9767  015178  6E3D               	movwf	OutSeg@a,c
  9768  01517A                     l13512:
  9769                           
  9770                           ; BSR set to: 0
  9771  01517A  0E07               	movlw	7
  9772  01517C  643D               	cpfsgt	OutSeg@a,c
  9773  01517E  D001               	goto	l1146
  9774  015180  D027               	goto	u10100
  9775  015182                     l1146:
  9776                           
  9777                           ;HMI.c: 87: {
  9778                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9779                           
  9780                           ; BSR set to: 0
  9781  015182  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9782  015186  0E01               	movlw	1
  9783  015188  0100               	movlb	0	; () banked
  9784  01518A  17BE               	andwf	??_OutSeg& (0+255),f,b
  9785  01518C  0E06               	movlw	6
  9786  01518E  0100               	movlb	0	; () banked
  9787  015190  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9788  015192                     u10095:
  9789  015192  0100               	movlb	0	; () banked
  9790  015194  90D8               	bcf	status,0,c
  9791  015196  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9792  015198  0100               	movlb	0	; () banked
  9793  01519A  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9794  01519C  D7FA               	goto	u10095
  9795  01519E  0100               	movlb	0	; () banked
  9796  0151A0  51BE               	movf	??_OutSeg& (0+255),w,b
  9797  0151A2  6E3E               	movwf	OutSeg@segset,c
  9798                           
  9799                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9800  0151A4  0100               	movlb	0	; () banked
  9801  0151A6  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9802  0151A8  42E8               	rrncf	wreg,f,c
  9803  0151AA  0BF8               	andlw	248
  9804  0151AC  103D               	iorwf	OutSeg@a,w,c
  9805  0151AE  103E               	iorwf	OutSeg@segset,w,c
  9806  0151B0  0100               	movlb	0	; () banked
  9807  0151B2  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9808                           
  9809                           ;HMI.c: 90: cur >>= 1;
  9810  0151B4  90D8               	bcf	status,0,c
  9811  0151B6  323F               	rrcf	OutSeg@cur,f,c
  9812                           
  9813                           ; BSR set to: 0
  9814                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9815  0151B8  0E78               	movlw	low _SPI1
  9816  0151BA  0100               	movlb	0	; () banked
  9817  0151BC  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9818  0151BE  0E03               	movlw	high _SPI1
  9819  0151C0  0100               	movlb	0	; () banked
  9820  0151C2  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9821  0151C4  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9822  0151C8  EC06  F0AB         	call	_SPI_Send	;wreg free
  9823  0151CC  2A3D               	incf	OutSeg@a,f,c
  9824  0151CE  D7D5               	goto	l13512
  9825  0151D0                     u10100:
  9826                           
  9827                           ;HMI.c: 96: }
  9828                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9829  0151D0  0E78               	movlw	low _SPI1
  9830  0151D2  0100               	movlb	0	; () banked
  9831  0151D4  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9832  0151D6  0E03               	movlw	high _SPI1
  9833  0151D8  0100               	movlb	0	; () banked
  9834  0151DA  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9835  0151DC  0E00               	movlw	0
  9836  0151DE  0100               	movlb	0	; () banked
  9837  0151E0  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9838  0151E2  EC06  F0AB         	call	_SPI_Send	;wreg free
  9839  0151E6  0012               	return	
  9840  0151E8                     __end_of_OutSeg:
  9841                           	opt stack 0
  9842                           tblptru	equ	0xFF8
  9843                           tblptrh	equ	0xFF7
  9844                           tblptrl	equ	0xFF6
  9845                           tablat	equ	0xFF5
  9846                           prodh	equ	0xFF4
  9847                           prodl	equ	0xFF3
  9848                           intcon	equ	0xFF2
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           postdec1	equ	0xFE5
  9852                           fsr1h	equ	0xFE2
  9853                           fsr1l	equ	0xFE1
  9854                           indf2	equ	0xFDF
  9855                           postinc2	equ	0xFDE
  9856                           postdec2	equ	0xFDD
  9857                           fsr2h	equ	0xFDA
  9858                           fsr2l	equ	0xFD9
  9859                           status	equ	0xFD8
  9860                           
  9861 ;; *************** function _Console_Render *****************
  9862 ;; Defined at:
  9863 ;;		line 377 in file "Library/Console.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;  lCursor         4   38[BANK0 ] struct Point
  9868 ;;  y               1   43[BANK0 ] unsigned char 
  9869 ;;  x               1   42[BANK0 ] unsigned char 
  9870 ;;  temp            1   37[BANK0 ] unsigned char 
  9871 ;;  Temp            2    0        unsigned short 
  9872 ;; Return value:  Size  Location     Type
  9873 ;;                  1    wreg      void 
  9874 ;; Registers used:
  9875 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9876 ;; Tracked objects:
  9877 ;;		On entry : 0/0
  9878 ;;		On exit  : 0/0
  9879 ;;		Unchanged: 0/0
  9880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9883 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9884 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9885 ;;Total ram usage:        9 bytes
  9886 ;; Hardware stack levels used:    1
  9887 ;; Hardware stack levels required when called:   11
  9888 ;; This function calls:
  9889 ;;		_Console_MakeField
  9890 ;;		_LCD_DrawField
  9891 ;;		_LCD_FillRectangle
  9892 ;; This function is called by:
  9893 ;;		_findClosestWall
  9894 ;;		_mode1
  9895 ;;		_mode2
  9896 ;;		_mode4
  9897 ;;		_main
  9898 ;; This function uses a non-reentrant model
  9899 ;;
  9900                           
  9901                           	psect	text39
  9902  011F90                     __ptext39:
  9903                           	opt stack 0
  9904  011F90                     _Console_Render:
  9905                           	opt stack 17
  9906                           
  9907                           ;Console.c: 379: Colour Temp;
  9908                           ;Console.c: 380: if (change)
  9909                           
  9910                           ;incstack = 0
  9911  011F90  0100               	movlb	0	; () banked
  9912  011F92  51FF               	movf	_change& (0+255),w,b
  9913  011F94  B4D8               	btfsc	status,2,c
  9914  011F96  0012               	return	
  9915                           
  9916                           ; BSR set to: 0
  9917                           ;Console.c: 381: {
  9918                           ;Console.c: 382: UINT8 x, y, temp;
  9919                           ;Console.c: 383: Point lCursor = {6,6};
  9920  011F98  C3E8  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9921  011F9C  C3E9  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9922  011FA0  C3EA  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9923  011FA4  C3EB  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9924                           
  9925                           ; BSR set to: 0
  9926                           ;Console.c: 385: if (clearall)
  9927  011FA8  0100               	movlb	0	; () banked
  9928  011FAA  5190               	movf	_clearall& (0+255),w,b
  9929  011FAC  B4D8               	btfsc	status,2,c
  9930  011FAE  D005               	goto	l1056
  9931                           
  9932                           ; BSR set to: 0
  9933                           ;Console.c: 386: {
  9934                           ;Console.c: 389: temp = lBufferY;
  9935  011FB0  C08E  F0DF         	movff	_lBufferY,Console_Render@temp
  9936                           
  9937                           ; BSR set to: 0
  9938                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9939  011FB4  0E0F               	movlw	15
  9940  011FB6  0100               	movlb	0	; () banked
  9941  011FB8  6F8E               	movwf	_lBufferY& (0+255),b
  9942  011FBA                     l1056:
  9943                           
  9944                           ; BSR set to: 0
  9945                           ;Console.c: 391: }
  9946                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9947  011FBA  0E00               	movlw	0
  9948  011FBC  0100               	movlb	0	; () banked
  9949  011FBE  6FE5               	movwf	Console_Render@y& (0+255),b
  9950  011FC0  D0DF               	goto	l1057
  9951  011FC2                     
  9952                           ; BSR set to: 0
  9953                           ;Console.c: 394: {
  9954                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9955                           
  9956                           ; BSR set to: 0
  9957  011FC2  0100               	movlb	0	; () banked
  9958  011FC4  51E5               	movf	Console_Render@y& (0+255),w,b
  9959  011FC6  0D02               	mullw	2
  9960  011FC8  0E00               	movlw	low _lCBuffer
  9961  011FCA  24F3               	addwf	prodl,w,c
  9962  011FCC  6ED9               	movwf	fsr2l,c
  9963  011FCE  0E03               	movlw	high _lCBuffer
  9964  011FD0  20F4               	addwfc	prodh,w,c
  9965  011FD2  6EDA               	movwf	fsr2h,c
  9966  011FD4  CFDE F0FD          	movff	postinc2,_gForecolour
  9967  011FD8  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9971  011FDC  0E00               	movlw	0
  9972  011FDE  0100               	movlb	0	; () banked
  9973  011FE0  6FE4               	movwf	Console_Render@x& (0+255),b
  9974  011FE2                     l14086:
  9975                           
  9976                           ; BSR set to: 0
  9977  011FE2  0E13               	movlw	19
  9978  011FE4  0100               	movlb	0	; () banked
  9979  011FE6  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9980  011FE8  D001               	goto	l1059
  9981  011FEA  D0BE               	goto	u10900
  9982  011FEC                     l1059:
  9983                           
  9984                           ; BSR set to: 0
  9985                           ;Console.c: 397: {
  9986                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9987                           
  9988                           ; BSR set to: 0
  9989  011FEC  0100               	movlb	0	; () banked
  9990  011FEE  51E5               	movf	Console_Render@y& (0+255),w,b
  9991  011FF0  0D14               	mullw	20
  9992  011FF2  0EAA               	movlw	low _lBuffer
  9993  011FF4  0100               	movlb	0	; () banked
  9994  011FF6  6FDD               	movwf	??_Console_Render& (0+255),b
  9995  011FF8  0E04               	movlw	high _lBuffer
  9996  011FFA  0100               	movlb	0	; () banked
  9997  011FFC  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9998  011FFE  50F3               	movf	prodl,w,c
  9999  012000  0100               	movlb	0	; () banked
 10000  012002  27DD               	addwf	??_Console_Render& (0+255),f,b
 10001  012004  50F4               	movf	prodh,w,c
 10002  012006  0100               	movlb	0	; () banked
 10003  012008  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10004  01200A  0100               	movlb	0	; () banked
 10005  01200C  51E4               	movf	Console_Render@x& (0+255),w,b
 10006  01200E  0D01               	mullw	1
 10007  012010  50F3               	movf	prodl,w,c
 10008  012012  0100               	movlb	0	; () banked
 10009  012014  25DD               	addwf	??_Console_Render& (0+255),w,b
 10010  012016  6ED9               	movwf	fsr2l,c
 10011  012018  50F4               	movf	prodh,w,c
 10012  01201A  0100               	movlb	0	; () banked
 10013  01201C  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10014  01201E  6EDA               	movwf	fsr2h,c
 10015  012020  AEDF               	btfss	indf2,7,c
 10016  012022  D09A               	goto	l1063
 10017                           
 10018                           ; BSR set to: 0
 10019                           ;Console.c: 399: {
 10020                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 10021  012024  0100               	movlb	0	; () banked
 10022  012026  51E5               	movf	Console_Render@y& (0+255),w,b
 10023  012028  0D14               	mullw	20
 10024  01202A  0EAA               	movlw	low _lBuffer
 10025  01202C  0100               	movlb	0	; () banked
 10026  01202E  6FDD               	movwf	??_Console_Render& (0+255),b
 10027  012030  0E04               	movlw	high _lBuffer
 10028  012032  0100               	movlb	0	; () banked
 10029  012034  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10030  012036  50F3               	movf	prodl,w,c
 10031  012038  0100               	movlb	0	; () banked
 10032  01203A  27DD               	addwf	??_Console_Render& (0+255),f,b
 10033  01203C  50F4               	movf	prodh,w,c
 10034  01203E  0100               	movlb	0	; () banked
 10035  012040  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10036  012042  0100               	movlb	0	; () banked
 10037  012044  51E4               	movf	Console_Render@x& (0+255),w,b
 10038  012046  0D01               	mullw	1
 10039  012048  50F3               	movf	prodl,w,c
 10040  01204A  0100               	movlb	0	; () banked
 10041  01204C  25DD               	addwf	??_Console_Render& (0+255),w,b
 10042  01204E  6ED9               	movwf	fsr2l,c
 10043  012050  50F4               	movf	prodh,w,c
 10044  012052  0100               	movlb	0	; () banked
 10045  012054  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10046  012056  6EDA               	movwf	fsr2h,c
 10047  012058  0E7F               	movlw	127
 10048  01205A  16DF               	andwf	indf2,f,c
 10049                           
 10050                           ;Console.c: 401: if (lBuffer[y][x])
 10051  01205C  0100               	movlb	0	; () banked
 10052  01205E  51E5               	movf	Console_Render@y& (0+255),w,b
 10053  012060  0D14               	mullw	20
 10054  012062  0EAA               	movlw	low _lBuffer
 10055  012064  0100               	movlb	0	; () banked
 10056  012066  6FDD               	movwf	??_Console_Render& (0+255),b
 10057  012068  0E04               	movlw	high _lBuffer
 10058  01206A  0100               	movlb	0	; () banked
 10059  01206C  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10060  01206E  50F3               	movf	prodl,w,c
 10061  012070  0100               	movlb	0	; () banked
 10062  012072  27DD               	addwf	??_Console_Render& (0+255),f,b
 10063  012074  50F4               	movf	prodh,w,c
 10064  012076  0100               	movlb	0	; () banked
 10065  012078  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10066  01207A  0100               	movlb	0	; () banked
 10067  01207C  51E4               	movf	Console_Render@x& (0+255),w,b
 10068  01207E  0D01               	mullw	1
 10069  012080  50F3               	movf	prodl,w,c
 10070  012082  0100               	movlb	0	; () banked
 10071  012084  25DD               	addwf	??_Console_Render& (0+255),w,b
 10072  012086  6ED9               	movwf	fsr2l,c
 10073  012088  50F4               	movf	prodh,w,c
 10074  01208A  0100               	movlb	0	; () banked
 10075  01208C  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10076  01208E  6EDA               	movwf	fsr2h,c
 10077  012090  50DF               	movf	indf2,w,c
 10078  012092  B4D8               	btfsc	status,2,c
 10079  012094  D04A               	goto	l1062
 10080                           
 10081                           ; BSR set to: 0
 10082                           ;Console.c: 402: {
 10083                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 10084  012096  C083  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
 10085  01209A  C084  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 10086  01209E  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10087  0120A2  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10088  0120A6  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10089  0120AA  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10090  0120AE  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10091  0120B2  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10092  0120B6  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10093  0120BA  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10094  0120BE  ECE6  F0A9         	call	_LCD_FillRectangle	;wreg free
 10095                           
 10096                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 10097  0120C2  0100               	movlb	0	; () banked
 10098  0120C4  51E5               	movf	Console_Render@y& (0+255),w,b
 10099  0120C6  0D14               	mullw	20
 10100  0120C8  0EAA               	movlw	low _lBuffer
 10101  0120CA  0100               	movlb	0	; () banked
 10102  0120CC  6FDD               	movwf	??_Console_Render& (0+255),b
 10103  0120CE  0E04               	movlw	high _lBuffer
 10104  0120D0  0100               	movlb	0	; () banked
 10105  0120D2  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10106  0120D4  50F3               	movf	prodl,w,c
 10107  0120D6  0100               	movlb	0	; () banked
 10108  0120D8  27DD               	addwf	??_Console_Render& (0+255),f,b
 10109  0120DA  50F4               	movf	prodh,w,c
 10110  0120DC  0100               	movlb	0	; () banked
 10111  0120DE  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10112  0120E0  0100               	movlb	0	; () banked
 10113  0120E2  51E4               	movf	Console_Render@x& (0+255),w,b
 10114  0120E4  0D01               	mullw	1
 10115  0120E6  50F3               	movf	prodl,w,c
 10116  0120E8  0100               	movlb	0	; () banked
 10117  0120EA  25DD               	addwf	??_Console_Render& (0+255),w,b
 10118  0120EC  6ED9               	movwf	fsr2l,c
 10119  0120EE  50F4               	movf	prodh,w,c
 10120  0120F0  0100               	movlb	0	; () banked
 10121  0120F2  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10122  0120F4  6EDA               	movwf	fsr2h,c
 10123  0120F6  50DF               	movf	indf2,w,c
 10124  0120F8  EC9A  F09F         	call	_Console_MakeField
 10125  0120FC  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
 10126  012100  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 10127  012104  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 10128  012108  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 10129  01210C  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 10130  012110  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 10131  012114  C3F0  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 10132  012118  C3F1  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 10133  01211C  C3F2  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 10134  012120  C3F3  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 10135  012124  EC94  F0A5         	call	_LCD_DrawField	;wreg free
 10136                           
 10137                           ;Console.c: 405: }
 10138  012128  D017               	goto	l1063
 10139  01212A                     l1062:
 10140                           
 10141                           ;Console.c: 406: else
 10142                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10143  01212A  0E00               	movlw	0
 10144  01212C  0100               	movlb	0	; () banked
 10145  01212E  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10146  012130  0E00               	movlw	0
 10147  012132  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10148  012134  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10149  012138  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10150  01213C  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10151  012140  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10152  012144  C3F0  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10153  012148  C3F1  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10154  01214C  C3F2  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10155  012150  C3F3  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10156  012154  ECE6  F0A9         	call	_LCD_FillRectangle	;wreg free
 10157  012158                     l1063:
 10158                           
 10159                           ;Console.c: 408: }
 10160                           ;Console.c: 409: lCursor.x += (5 + 1);
 10161  012158  0E06               	movlw	6
 10162  01215A  0100               	movlb	0	; () banked
 10163  01215C  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 10164  01215E  0E00               	movlw	0
 10165  012160  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10166                           
 10167                           ; BSR set to: 0
 10168  012162  0100               	movlb	0	; () banked
 10169  012164  2BE4               	incf	Console_Render@x& (0+255),f,b
 10170  012166  D73D               	goto	l14086
 10171  012168                     u10900:
 10172                           
 10173                           ; BSR set to: 0
 10174                           ;Console.c: 410: }
 10175                           ;Console.c: 411: lCursor.y += (7 + 1);
 10176                           
 10177                           ; BSR set to: 0
 10178  012168  0E08               	movlw	8
 10179  01216A  0100               	movlb	0	; () banked
 10180  01216C  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10181  01216E  0E00               	movlw	0
 10182  012170  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10183                           
 10184                           ; BSR set to: 0
 10185                           ;Console.c: 412: lCursor.x = 6;
 10186  012172  0E00               	movlw	0
 10187  012174  0100               	movlb	0	; () banked
 10188  012176  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10189  012178  0E06               	movlw	6
 10190  01217A  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 10191                           
 10192                           ; BSR set to: 0
 10193  01217C  0100               	movlb	0	; () banked
 10194  01217E  2BE5               	incf	Console_Render@y& (0+255),f,b
 10195  012180                     l1057:
 10196                           
 10197                           ; BSR set to: 0
 10198                           
 10199                           ; BSR set to: 0
 10200  012180  0100               	movlb	0	; () banked
 10201  012182  51E5               	movf	Console_Render@y& (0+255),w,b
 10202  012184  0100               	movlb	0	; () banked
 10203  012186  5D8E               	subwf	_lBufferY& (0+255),w,b
 10204  012188  B0D8               	btfsc	status,0,c
 10205  01218A  D71B               	goto	l1058
 10206                           
 10207                           ; BSR set to: 0
 10208                           ;Console.c: 413: }
 10209                           ;Console.c: 415: if (clearall)
 10210                           
 10211                           ; BSR set to: 0
 10212  01218C  0100               	movlb	0	; () banked
 10213  01218E  5190               	movf	_clearall& (0+255),w,b
 10214  012190  B4D8               	btfsc	status,2,c
 10215  012192  0012               	return	
 10216                           
 10217                           ; BSR set to: 0
 10218                           ;Console.c: 416: {
 10219                           ;Console.c: 417: clearall = 0;
 10220  012194  0E00               	movlw	0
 10221  012196  0100               	movlb	0	; () banked
 10222  012198  6F90               	movwf	_clearall& (0+255),b
 10223                           
 10224                           ; BSR set to: 0
 10225                           ;Console.c: 418: lBufferY = temp;
 10226  01219A  C0DF  F08E         	movff	Console_Render@temp,_lBufferY
 10227                           
 10228                           ; BSR set to: 0
 10229  01219E  0012               	return	
 10230  0121A0                     __end_of_Console_Render:
 10231                           	opt stack 0
 10232                           tblptru	equ	0xFF8
 10233                           tblptrh	equ	0xFF7
 10234                           tblptrl	equ	0xFF6
 10235                           tablat	equ	0xFF5
 10236                           prodh	equ	0xFF4
 10237                           prodl	equ	0xFF3
 10238                           intcon	equ	0xFF2
 10239                           postinc0	equ	0xFEE
 10240                           wreg	equ	0xFE8
 10241                           postdec1	equ	0xFE5
 10242                           fsr1h	equ	0xFE2
 10243                           fsr1l	equ	0xFE1
 10244                           indf2	equ	0xFDF
 10245                           postinc2	equ	0xFDE
 10246                           postdec2	equ	0xFDD
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _LCD_FillRectangle *****************
 10252 ;; Defined at:
 10253 ;;		line 318 in file "Library/LCD.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;  pColour         2    9[BANK0 ] unsigned short 
 10256 ;;  pPoint          4   11[BANK0 ] struct Point
 10257 ;;  pSize           4   15[BANK0 ] struct Point
 10258 ;; Auto vars:     Size  Location     Type
 10259 ;;  j               1   22[BANK0 ] unsigned char 
 10260 ;;  i               1   21[BANK0 ] unsigned char 
 10261 ;; Return value:  Size  Location     Type
 10262 ;;                  1    wreg      void 
 10263 ;; Registers used:
 10264 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10265 ;; Tracked objects:
 10266 ;;		On entry : 0/0
 10267 ;;		On exit  : 0/0
 10268 ;;		Unchanged: 0/0
 10269 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10270 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10272 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10273 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10274 ;;Total ram usage:       14 bytes
 10275 ;; Hardware stack levels used:    1
 10276 ;; Hardware stack levels required when called:   10
 10277 ;; This function calls:
 10278 ;;		_LCD_Word_Write
 10279 ;;		_Set_Addr_Window
 10280 ;; This function is called by:
 10281 ;;		_Console_Render
 10282 ;;		_Console_ClearLine
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           	psect	text40
 10287  0153CC                     __ptext40:
 10288                           	opt stack 0
 10289  0153CC                     _LCD_FillRectangle:
 10290                           	opt stack 17
 10291                           
 10292                           ;LCD.c: 320: UINT8 i = 0x00;
 10293                           
 10294                           ; BSR set to: 0
 10295                           ;incstack = 0
 10296  0153CC  0E00               	movlw	0
 10297  0153CE  0100               	movlb	0	; () banked
 10298  0153D0  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10299                           
 10300                           ;LCD.c: 321: UINT8 j = 0x00;
 10301  0153D2  0E00               	movlw	0
 10302  0153D4  0100               	movlb	0	; () banked
 10303  0153D6  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10304                           
 10305                           ; BSR set to: 0
 10306                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10307  0153D8  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10308  0153DC  0100               	movlb	0	; () banked
 10309  0153DE  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10310  0153E0  0100               	movlb	0	; () banked
 10311  0153E2  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10312  0153E4  0100               	movlb	0	; () banked
 10313  0153E6  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10314  0153E8  0100               	movlb	0	; () banked
 10315  0153EA  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10316  0153EC  0100               	movlb	0	; () banked
 10317  0153EE  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10318  0153F0  0100               	movlb	0	; () banked
 10319  0153F2  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10320  0153F4  0100               	movlb	0	; () banked
 10321  0153F6  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10322  0153F8  0100               	movlb	0	; () banked
 10323  0153FA  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10324  0153FC  0100               	movlb	0	; () banked
 10325  0153FE  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10326  015400  0100               	movlb	0	; () banked
 10327  015402  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10328  015404  0100               	movlb	0	; () banked
 10329  015406  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10330  015408  EC9E  F0A3         	call	_Set_Addr_Window
 10331                           
 10332                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10333  01540C  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10334  015410                     l13248:
 10335  015410  0100               	movlb	0	; () banked
 10336  015412  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10337  015414  0100               	movlb	0	; () banked
 10338  015416  B4D8               	btfsc	status,2,c
 10339  015418  0012               	return	
 10340                           
 10341                           ; BSR set to: 0
 10342                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10343                           
 10344                           ; BSR set to: 0
 10345  01541A  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10346  01541E                     l13252:
 10347                           
 10348                           ; BSR set to: 0
 10349  01541E  0100               	movlb	0	; () banked
 10350  015420  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10351  015422  0100               	movlb	0	; () banked
 10352  015424  B4D8               	btfsc	status,2,c
 10353  015426  D009               	goto	u9870
 10354                           
 10355                           ; BSR set to: 0
 10356                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10357                           
 10358                           ; BSR set to: 0
 10359                           
 10360                           ; BSR set to: 0
 10361  015428  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10362  01542C  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10363  015430  EC64  F0B2         	call	_LCD_Word_Write	;wreg free
 10364  015434  0100               	movlb	0	; () banked
 10365  015436  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10366  015438  D7F2               	goto	l13252
 10367  01543A                     u9870:
 10368                           
 10369                           ; BSR set to: 0
 10370                           
 10371                           ; BSR set to: 0
 10372  01543A  0100               	movlb	0	; () banked
 10373  01543C  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10374  01543E  D7E8               	goto	l13248
 10375  015440                     __end_of_LCD_FillRectangle:
 10376                           	opt stack 0
 10377                           tblptru	equ	0xFF8
 10378                           tblptrh	equ	0xFF7
 10379                           tblptrl	equ	0xFF6
 10380                           tablat	equ	0xFF5
 10381                           prodh	equ	0xFF4
 10382                           prodl	equ	0xFF3
 10383                           intcon	equ	0xFF2
 10384                           postinc0	equ	0xFEE
 10385                           wreg	equ	0xFE8
 10386                           postdec1	equ	0xFE5
 10387                           fsr1h	equ	0xFE2
 10388                           fsr1l	equ	0xFE1
 10389                           indf2	equ	0xFDF
 10390                           postinc2	equ	0xFDE
 10391                           postdec2	equ	0xFDD
 10392                           fsr2h	equ	0xFDA
 10393                           fsr2l	equ	0xFD9
 10394                           status	equ	0xFD8
 10395                           
 10396 ;; *************** function _LCD_DrawField *****************
 10397 ;; Defined at:
 10398 ;;		line 393 in file "Library/LCD.c"
 10399 ;; Parameters:    Size  Location     Type
 10400 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10401 ;;		 -> Console_MakeField@Fill(70), 
 10402 ;;  pPoint          4   20[BANK0 ] struct Point
 10403 ;;  pSize           4   24[BANK0 ] struct Point
 10404 ;; Auto vars:     Size  Location     Type
 10405 ;;  count           2   30[BANK0 ] unsigned short 
 10406 ;;  i               1   34[BANK0 ] unsigned char 
 10407 ;;  ymax            1   33[BANK0 ] unsigned char 
 10408 ;;  xmax            1   32[BANK0 ] unsigned char 
 10409 ;; Return value:  Size  Location     Type
 10410 ;;                  1    wreg      void 
 10411 ;; Registers used:
 10412 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10413 ;; Tracked objects:
 10414 ;;		On entry : 0/0
 10415 ;;		On exit  : 0/0
 10416 ;;		Unchanged: 0/0
 10417 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10418 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10419 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10420 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10421 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10422 ;;Total ram usage:       17 bytes
 10423 ;; Hardware stack levels used:    1
 10424 ;; Hardware stack levels required when called:   10
 10425 ;; This function calls:
 10426 ;;		_LCD_Word_Write
 10427 ;;		_Set_Addr_Window
 10428 ;;		___wmul
 10429 ;; This function is called by:
 10430 ;;		_Console_Render
 10431 ;; This function uses a non-reentrant model
 10432 ;;
 10433                           
 10434                           	psect	text41
 10435  014B28                     __ptext41:
 10436                           	opt stack 0
 10437  014B28                     _LCD_DrawField:
 10438                           	opt stack 17
 10439                           
 10440                           ;LCD.c: 396: UINT8 i = 0x00;
 10441                           
 10442                           ; BSR set to: 0
 10443                           ;incstack = 0
 10444  014B28  0E00               	movlw	0
 10445  014B2A  0100               	movlb	0	; () banked
 10446  014B2C  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10447                           
 10448                           ; BSR set to: 0
 10449                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10450  014B2E  0100               	movlb	0	; () banked
 10451  014B30  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10452  014B32  0100               	movlb	0	; () banked
 10453  014B34  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10454  014B36  0100               	movlb	0	; () banked
 10455  014B38  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10459  014B3A  0100               	movlb	0	; () banked
 10460  014B3C  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10461  014B3E  0100               	movlb	0	; () banked
 10462  014B40  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10463  014B42  0100               	movlb	0	; () banked
 10464  014B44  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10465                           
 10466                           ; BSR set to: 0
 10467                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10468  014B46  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10469  014B4A  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10470  014B4E  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10471  014B52  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10472  014B56  ECD3  F0B0         	call	___wmul	;wreg free
 10473  014B5A  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10474  014B5E  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10475                           
 10476                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10477  014B62  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10478  014B66  0100               	movlb	0	; () banked
 10479  014B68  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10480  014B6A  0100               	movlb	0	; () banked
 10481  014B6C  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10482  014B6E  0100               	movlb	0	; () banked
 10483  014B70  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10484  014B72  0100               	movlb	0	; () banked
 10485  014B74  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10486  014B76  0100               	movlb	0	; () banked
 10487  014B78  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10488  014B7A  EC9E  F0A3         	call	_Set_Addr_Window
 10489                           
 10490                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10491  014B7E  0E00               	movlw	0
 10492  014B80  0100               	movlb	0	; () banked
 10493  014B82  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10494  014B84  D013               	goto	l183
 10495  014B86                     
 10496                           ; BSR set to: 0
 10497                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10498                           
 10499                           ; BSR set to: 0
 10500  014B86  0100               	movlb	0	; () banked
 10501  014B88  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10502  014B8A  0D02               	mullw	2
 10503  014B8C  50F3               	movf	prodl,w,c
 10504  014B8E  0100               	movlb	0	; () banked
 10505  014B90  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10506  014B92  6ED9               	movwf	fsr2l,c
 10507  014B94  50F4               	movf	prodh,w,c
 10508  014B96  0100               	movlb	0	; () banked
 10509  014B98  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10510  014B9A  6EDA               	movwf	fsr2h,c
 10511  014B9C  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10512  014BA0  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10513  014BA4  EC64  F0B2         	call	_LCD_Word_Write	;wreg free
 10514  014BA8  0100               	movlb	0	; () banked
 10515  014BAA  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10516  014BAC                     l183:
 10517                           
 10518                           ; BSR set to: 0
 10519                           
 10520                           ; BSR set to: 0
 10521  014BAC  0100               	movlb	0	; () banked
 10522  014BAE  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10523  014BB0  0100               	movlb	0	; () banked
 10524  014BB2  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10525  014BB4  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10526  014BB6  0100               	movlb	0	; () banked
 10527  014BB8  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10528  014BBA  0100               	movlb	0	; () banked
 10529  014BBC  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10530  014BBE  0100               	movlb	0	; () banked
 10531  014BC0  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10532  014BC2  0100               	movlb	0	; () banked
 10533  014BC4  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10534  014BC6  B0D8               	btfsc	status,0,c
 10535  014BC8  0012               	return	
 10536  014BCA  D7DD               	goto	l184
 10537  014BCC                     __end_of_LCD_DrawField:
 10538                           	opt stack 0
 10539                           tblptru	equ	0xFF8
 10540                           tblptrh	equ	0xFF7
 10541                           tblptrl	equ	0xFF6
 10542                           tablat	equ	0xFF5
 10543                           prodh	equ	0xFF4
 10544                           prodl	equ	0xFF3
 10545                           intcon	equ	0xFF2
 10546                           postinc0	equ	0xFEE
 10547                           wreg	equ	0xFE8
 10548                           postdec1	equ	0xFE5
 10549                           fsr1h	equ	0xFE2
 10550                           fsr1l	equ	0xFE1
 10551                           indf2	equ	0xFDF
 10552                           postinc2	equ	0xFDE
 10553                           postdec2	equ	0xFDD
 10554                           fsr2h	equ	0xFDA
 10555                           fsr2l	equ	0xFD9
 10556                           status	equ	0xFD8
 10557                           
 10558 ;; *************** function ___wmul *****************
 10559 ;; Defined at:
 10560 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10561 ;; Parameters:    Size  Location     Type
 10562 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10563 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10564 ;; Auto vars:     Size  Location     Type
 10565 ;;  product         2    4[BANK0 ] unsigned int 
 10566 ;; Return value:  Size  Location     Type
 10567 ;;                  2    0[BANK0 ] unsigned int 
 10568 ;; Registers used:
 10569 ;;		wreg, status,2, status,0, prodl, prodh
 10570 ;; Tracked objects:
 10571 ;;		On entry : 0/0
 10572 ;;		On exit  : 0/0
 10573 ;;		Unchanged: 0/0
 10574 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10575 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10576 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10577 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10578 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10579 ;;Total ram usage:        6 bytes
 10580 ;; Hardware stack levels used:    1
 10581 ;; Hardware stack levels required when called:    7
 10582 ;; This function calls:
 10583 ;;		Nothing
 10584 ;; This function is called by:
 10585 ;;		_LCD_DrawField
 10586 ;; This function uses a non-reentrant model
 10587 ;;
 10588                           
 10589                           	psect	text42
 10590  0161A6                     __ptext42:
 10591                           	opt stack 0
 10592  0161A6                     ___wmul:
 10593                           	opt stack 19
 10594                           
 10595                           ; BSR set to: 0
 10596                           ;incstack = 0
 10597  0161A6  0100               	movlb	0	; () banked
 10598  0161A8  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10599  0161AA  0100               	movlb	0	; () banked
 10600  0161AC  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10601  0161AE  CFF3 F0BE          	movff	prodl,___wmul@product
 10602  0161B2  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10603  0161B6  0100               	movlb	0	; () banked
 10604  0161B8  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10605  0161BA  0100               	movlb	0	; () banked
 10606  0161BC  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10607  0161BE  50F3               	movf	prodl,w,c
 10608  0161C0  0100               	movlb	0	; () banked
 10609  0161C2  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10610  0161C4  0100               	movlb	0	; () banked
 10611  0161C6  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10612  0161C8  0100               	movlb	0	; () banked
 10613  0161CA  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10614  0161CC  50F3               	movf	prodl,w,c
 10615  0161CE  0100               	movlb	0	; () banked
 10616  0161D0  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10617                           
 10618                           ; BSR set to: 0
 10619  0161D2  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10620  0161D6  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10621  0161DA  0012               	return	
 10622  0161DC                     __end_of___wmul:
 10623                           	opt stack 0
 10624                           tblptru	equ	0xFF8
 10625                           tblptrh	equ	0xFF7
 10626                           tblptrl	equ	0xFF6
 10627                           tablat	equ	0xFF5
 10628                           prodh	equ	0xFF4
 10629                           prodl	equ	0xFF3
 10630                           intcon	equ	0xFF2
 10631                           postinc0	equ	0xFEE
 10632                           wreg	equ	0xFE8
 10633                           postdec1	equ	0xFE5
 10634                           fsr1h	equ	0xFE2
 10635                           fsr1l	equ	0xFE1
 10636                           indf2	equ	0xFDF
 10637                           postinc2	equ	0xFDE
 10638                           postdec2	equ	0xFDD
 10639                           fsr2h	equ	0xFDA
 10640                           fsr2l	equ	0xFD9
 10641                           status	equ	0xFD8
 10642                           
 10643 ;; *************** function _Console_MakeField *****************
 10644 ;; Defined at:
 10645 ;;		line 435 in file "Library/Console.c"
 10646 ;; Parameters:    Size  Location     Type
 10647 ;;  pInput          1    wreg     unsigned char 
 10648 ;; Auto vars:     Size  Location     Type
 10649 ;;  pInput          1   11[BANK0 ] unsigned char 
 10650 ;;  y               1   17[BANK0 ] unsigned char 
 10651 ;;  x               1   16[BANK0 ] unsigned char 
 10652 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10653 ;;		 -> Font5x7(480), 
 10654 ;;  Index           2    9[BANK0 ] unsigned short 
 10655 ;; Return value:  Size  Location     Type
 10656 ;;                  2    5[BANK0 ] PTR unsigned short 
 10657 ;; Registers used:
 10658 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10659 ;; Tracked objects:
 10660 ;;		On entry : 0/0
 10661 ;;		On exit  : 0/0
 10662 ;;		Unchanged: 0/0
 10663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10665 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10667 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10668 ;;Total ram usage:       13 bytes
 10669 ;; Hardware stack levels used:    1
 10670 ;; Hardware stack levels required when called:    8
 10671 ;; This function calls:
 10672 ;;		_Byte_GetBit
 10673 ;; This function is called by:
 10674 ;;		_Console_Render
 10675 ;; This function uses a non-reentrant model
 10676 ;;
 10677                           
 10678                           	psect	text43
 10679  013F34                     __ptext43:
 10680                           	opt stack 0
 10681  013F34                     _Console_MakeField:
 10682                           	opt stack 19
 10683                           
 10684                           ; BSR set to: 0
 10685                           ;incstack = 0
 10686                           ;Console_MakeField@pInput stored from wreg
 10687  013F34  0100               	movlb	0	; () banked
 10688  013F36  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10689                           
 10690                           ;Console.c: 437: static Colour Fill[7][5];
 10691                           ;Console.c: 438: pInput -= 32;
 10692  013F38  0E20               	movlw	32
 10693  013F3A  0100               	movlb	0	; () banked
 10694  013F3C  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10698  013F3E  0100               	movlb	0	; () banked
 10699  013F40  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10700  013F42  0D05               	mullw	5
 10701  013F44  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10702  013F48  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10703                           
 10704                           ; BSR set to: 0
 10705                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10706  013F4C  0E1F               	movlw	low _Font5x7
 10707  013F4E  0100               	movlb	0	; () banked
 10708  013F50  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10709  013F52  0100               	movlb	0	; () banked
 10710  013F54  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10711  013F56  0EFD               	movlw	high _Font5x7
 10712  013F58  0100               	movlb	0	; () banked
 10713  013F5A  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10714  013F5C  0100               	movlb	0	; () banked
 10715  013F5E  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10716                           
 10717                           ; BSR set to: 0
 10718                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10719  013F60  0E00               	movlw	0
 10720  013F62  0100               	movlb	0	; () banked
 10721  013F64  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10722  013F66                     l13474:
 10723                           
 10724                           ; BSR set to: 0
 10725  013F66  0E04               	movlw	4
 10726  013F68  0100               	movlb	0	; () banked
 10727  013F6A  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10728  013F6C  D001               	goto	l1077
 10729  013F6E  D043               	goto	u10060
 10730  013F70                     l1077:
 10731                           
 10732                           ; BSR set to: 0
 10733                           ;Console.c: 444: {
 10734                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10735                           
 10736                           ; BSR set to: 0
 10737  013F70  0E00               	movlw	0
 10738  013F72  0100               	movlb	0	; () banked
 10739  013F74  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10740  013F76                     l13480:
 10741                           
 10742                           ; BSR set to: 0
 10743  013F76  0E06               	movlw	6
 10744  013F78  0100               	movlb	0	; () banked
 10745  013F7A  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10746  013F7C  D001               	goto	l1079
 10747  013F7E  D035               	goto	u10050
 10748  013F80                     l1079:
 10749                           
 10750                           ; BSR set to: 0
 10751                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10752                           
 10753                           ; BSR set to: 0
 10754  013F80  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10755  013F84  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10756  013F88  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10757  013F8C  EC09  F0B1         	call	_Byte_GetBit	;wreg free
 10758  013F90  0900               	iorlw	0
 10759  013F92  A4D8               	btfss	status,2,c
 10760  013F94  D005               	goto	l1082
 10761  013F96  C083  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10762  013F9A  C084  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10763  013F9E  D004               	goto	l1084
 10764  013FA0                     l1082:
 10765  013FA0  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10766  013FA4  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10767  013FA8                     l1084:
 10768  013FA8  0100               	movlb	0	; () banked
 10769  013FAA  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10770  013FAC  0D0A               	mullw	10
 10771  013FAE  0E64               	movlw	low Console_MakeField@Fill
 10772  013FB0  0100               	movlb	0	; () banked
 10773  013FB2  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10774  013FB4  0E04               	movlw	high Console_MakeField@Fill
 10775  013FB6  0100               	movlb	0	; () banked
 10776  013FB8  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10777  013FBA  50F3               	movf	prodl,w,c
 10778  013FBC  0100               	movlb	0	; () banked
 10779  013FBE  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10780  013FC0  50F4               	movf	prodh,w,c
 10781  013FC2  0100               	movlb	0	; () banked
 10782  013FC4  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10783  013FC6  0100               	movlb	0	; () banked
 10784  013FC8  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10785  013FCA  0D02               	mullw	2
 10786  013FCC  50F3               	movf	prodl,w,c
 10787  013FCE  0100               	movlb	0	; () banked
 10788  013FD0  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10789  013FD2  6ED9               	movwf	fsr2l,c
 10790  013FD4  50F4               	movf	prodh,w,c
 10791  013FD6  0100               	movlb	0	; () banked
 10792  013FD8  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10793  013FDA  6EDA               	movwf	fsr2h,c
 10794  013FDC  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10795  013FE0  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10796                           
 10797                           ; BSR set to: 0
 10798  013FE4  0100               	movlb	0	; () banked
 10799  013FE6  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10800  013FE8  D7C6               	goto	l13480
 10801  013FEA                     u10050:
 10802                           
 10803                           ; BSR set to: 0
 10804                           ;Console.c: 447: Column += 1;
 10805                           
 10806                           ; BSR set to: 0
 10807  013FEA  0100               	movlb	0	; () banked
 10808  013FEC  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10809  013FEE  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10810  013FF0  0100               	movlb	0	; () banked
 10811  013FF2  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10812  013FF4  D7B8               	goto	l13474
 10813  013FF6                     u10060:
 10814                           
 10815                           ; BSR set to: 0
 10816                           ;Console.c: 448: }
 10817                           ;Console.c: 449: return (ColourPtr)Fill;
 10818                           
 10819                           ; BSR set to: 0
 10820  013FF6  0E64               	movlw	low Console_MakeField@Fill
 10821  013FF8  0100               	movlb	0	; () banked
 10822  013FFA  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10823  013FFC  0E04               	movlw	high Console_MakeField@Fill
 10824  013FFE  0100               	movlb	0	; () banked
 10825  014000  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10826  014002  0012               	return	
 10827  014004                     __end_of_Console_MakeField:
 10828                           	opt stack 0
 10829                           tblptru	equ	0xFF8
 10830                           tblptrh	equ	0xFF7
 10831                           tblptrl	equ	0xFF6
 10832                           tablat	equ	0xFF5
 10833                           prodh	equ	0xFF4
 10834                           prodl	equ	0xFF3
 10835                           intcon	equ	0xFF2
 10836                           postinc0	equ	0xFEE
 10837                           wreg	equ	0xFE8
 10838                           postdec1	equ	0xFE5
 10839                           fsr1h	equ	0xFE2
 10840                           fsr1l	equ	0xFE1
 10841                           indf2	equ	0xFDF
 10842                           postinc2	equ	0xFDE
 10843                           postdec2	equ	0xFDD
 10844                           fsr2h	equ	0xFDA
 10845                           fsr2l	equ	0xFD9
 10846                           status	equ	0xFD8
 10847                           
 10848 ;; *************** function _Byte_GetBit *****************
 10849 ;; Defined at:
 10850 ;;		line 38 in file "Library/Types.c"
 10851 ;; Parameters:    Size  Location     Type
 10852 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10853 ;;		 -> Font5x7(480), 
 10854 ;;  pBit            1    2[BANK0 ] unsigned char 
 10855 ;; Auto vars:     Size  Location     Type
 10856 ;;  Output          1    4[BANK0 ] unsigned char 
 10857 ;; Return value:  Size  Location     Type
 10858 ;;                  1    wreg      unsigned char 
 10859 ;; Registers used:
 10860 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10861 ;; Tracked objects:
 10862 ;;		On entry : 0/0
 10863 ;;		On exit  : 0/0
 10864 ;;		Unchanged: 0/0
 10865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10866 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10867 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;Total ram usage:        5 bytes
 10871 ;; Hardware stack levels used:    1
 10872 ;; Hardware stack levels required when called:    7
 10873 ;; This function calls:
 10874 ;;		Nothing
 10875 ;; This function is called by:
 10876 ;;		_Console_MakeField
 10877 ;;		_Word_GetBit
 10878 ;; This function uses a non-reentrant model
 10879 ;;
 10880                           
 10881                           	psect	text44
 10882  016212                     __ptext44:
 10883                           	opt stack 0
 10884  016212                     _Byte_GetBit:
 10885                           	opt stack 19
 10886                           
 10887                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10888                           
 10889                           ; BSR set to: 0
 10890                           ;incstack = 0
 10891  016212  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10892  016216  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10893  01621A                     	if	0	;tblptru may be non-zero
 10894  01621A                     	endif
 10895  01621A                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10896  01621A  0E00               	movlw	low (__mediumconst shr (0+16))
 10897  01621C  6EF8               	movwf	tblptru,c
 10898  01621E                     	endif
 10899  01621E  0008               	tblrd		*
 10900  016220  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10901                           
 10902                           ;Types.c: 42: Output >>= pBit;
 10903  016224  0100               	movlb	0	; () banked
 10904  016226  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10905  016228  0100               	movlb	0	; () banked
 10906  01622A  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10907  01622C  D003               	goto	u9660
 10908  01622E                     u9665:
 10909  01622E  0100               	movlb	0	; () banked
 10910  016230  90D8               	bcf	status,0,c
 10911  016232  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10912  016234                     u9660:
 10913  016234  0100               	movlb	0	; () banked
 10914  016236  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10915  016238  D7FA               	goto	u9665
 10916                           
 10917                           ;Types.c: 43: Output &= 1;
 10918  01623A  0E01               	movlw	1
 10919  01623C  0100               	movlb	0	; () banked
 10920  01623E  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10921                           
 10922                           ; BSR set to: 0
 10923                           ;Types.c: 44: return Output;
 10924  016240  0100               	movlb	0	; () banked
 10925  016242  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10926  016244  0012               	return	
 10927  016246                     __end_of_Byte_GetBit:
 10928                           	opt stack 0
 10929                           tblptru	equ	0xFF8
 10930                           tblptrh	equ	0xFF7
 10931                           tblptrl	equ	0xFF6
 10932                           tablat	equ	0xFF5
 10933                           prodh	equ	0xFF4
 10934                           prodl	equ	0xFF3
 10935                           intcon	equ	0xFF2
 10936                           postinc0	equ	0xFEE
 10937                           wreg	equ	0xFE8
 10938                           postdec1	equ	0xFE5
 10939                           fsr1h	equ	0xFE2
 10940                           fsr1l	equ	0xFE1
 10941                           indf2	equ	0xFDF
 10942                           postinc2	equ	0xFDE
 10943                           postdec2	equ	0xFDD
 10944                           fsr2h	equ	0xFDA
 10945                           fsr2l	equ	0xFD9
 10946                           status	equ	0xFD8
 10947                           
 10948 ;; *************** function _ADC_Voltage *****************
 10949 ;; Defined at:
 10950 ;;		line 259 in file "Library/ADC.c"
 10951 ;; Parameters:    Size  Location     Type
 10952 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10953 ;;		 -> ADC_AN0(5), 
 10954 ;; Auto vars:     Size  Location     Type
 10955 ;;  output          4   53[BANK0 ] float 
 10956 ;;  ref             4   49[BANK0 ] const float 
 10957 ;;  max             4   45[BANK0 ] const float 
 10958 ;; Return value:  Size  Location     Type
 10959 ;;                  4   39[BANK0 ] float 
 10960 ;; Registers used:
 10961 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10962 ;; Tracked objects:
 10963 ;;		On entry : 0/0
 10964 ;;		On exit  : 0/0
 10965 ;;		Unchanged: 0/0
 10966 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10967 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10968 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10969 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10970 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10971 ;;Total ram usage:       18 bytes
 10972 ;; Hardware stack levels used:    1
 10973 ;; Hardware stack levels required when called:    8
 10974 ;; This function calls:
 10975 ;;		___fldiv
 10976 ;;		___flmul
 10977 ;;		___xxtofl
 10978 ;; This function is called by:
 10979 ;;		_findClosestWall
 10980 ;;		_mode1
 10981 ;; This function uses a non-reentrant model
 10982 ;;
 10983                           
 10984                           	psect	text45
 10985  013BDA                     __ptext45:
 10986                           	opt stack 0
 10987  013BDA                     _ADC_Voltage:
 10988                           	opt stack 20
 10989                           
 10990                           ;ADC.c: 261: const float max = 1024;
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;incstack = 0
 10994  013BDA  0E00               	movlw	0
 10995  013BDC  0100               	movlb	0	; () banked
 10996  013BDE  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10997  013BE0  0E00               	movlw	0
 10998  013BE2  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10999  013BE4  0E80               	movlw	128
 11000  013BE6  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 11001  013BE8  0E44               	movlw	68
 11002  013BEA  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 11003                           
 11004                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 11005  013BEC  0E33               	movlw	51
 11006  013BEE  0100               	movlb	0	; () banked
 11007  013BF0  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 11008  013BF2  0E33               	movlw	51
 11009  013BF4  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 11010  013BF6  0E53               	movlw	83
 11011  013BF8  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 11012  013BFA  0E40               	movlw	64
 11013  013BFC  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 11014                           
 11015                           ; BSR set to: 0
 11016                           ;ADC.c: 263: float output = pInput->mValue;
 11017  013BFE  0100               	movlb	0	; () banked
 11018  013C00  EE20 F001          	lfsr	2,1
 11019  013C04  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 11020  013C06  26D9               	addwf	fsr2l,f,c
 11021  013C08  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 11022  013C0A  22DA               	addwfc	fsr2h,f,c
 11023  013C0C  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 11024  013C10  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 11025  013C14  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 11026  013C18  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 11027  013C1C  0100               	movlb	0	; () banked
 11028  013C1E  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 11029  013C20  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 11030  013C22  0E00               	movlw	0
 11031  013C24  ECCD  F091         	call	___xxtofl
 11032  013C28  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 11033  013C2C  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 11034  013C30  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 11035  013C34  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 11036                           
 11037                           ;ADC.c: 265: output /= max;
 11038  013C38  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 11039  013C3C  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 11040  013C40  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 11041  013C44  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 11042  013C48  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 11043  013C4C  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 11044  013C50  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 11045  013C54  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 11046  013C58  EC89  F088         	call	___fldiv	;wreg free
 11047  013C5C  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 11048  013C60  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 11049  013C64  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 11050  013C68  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 11051                           
 11052                           ;ADC.c: 266: output *= ref;
 11053  013C6C  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 11054  013C70  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 11055  013C74  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 11056  013C78  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 11057  013C7C  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 11058  013C80  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 11059  013C84  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 11060  013C88  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 11061  013C8C  EC00  F080         	call	___flmul	;wreg free
 11062  013C90  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 11063  013C94  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 11064  013C98  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 11065  013C9C  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 11066                           
 11067                           ;ADC.c: 268: return output + (float)0.000;
 11068  013CA0  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 11069  013CA4  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 11070  013CA8  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 11071  013CAC  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 11072  013CB0  0012               	return	
 11073  013CB2                     __end_of_ADC_Voltage:
 11074                           	opt stack 0
 11075                           tblptru	equ	0xFF8
 11076                           tblptrh	equ	0xFF7
 11077                           tblptrl	equ	0xFF6
 11078                           tablat	equ	0xFF5
 11079                           prodh	equ	0xFF4
 11080                           prodl	equ	0xFF3
 11081                           intcon	equ	0xFF2
 11082                           postinc0	equ	0xFEE
 11083                           wreg	equ	0xFE8
 11084                           postdec1	equ	0xFE5
 11085                           fsr1h	equ	0xFE2
 11086                           fsr1l	equ	0xFE1
 11087                           indf2	equ	0xFDF
 11088                           postinc2	equ	0xFDE
 11089                           postdec2	equ	0xFDD
 11090                           fsr2h	equ	0xFDA
 11091                           fsr2l	equ	0xFD9
 11092                           status	equ	0xFD8
 11093                           
 11094 ;; *************** function ___xxtofl *****************
 11095 ;; Defined at:
 11096 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 11097 ;; Parameters:    Size  Location     Type
 11098 ;;  sign            1    wreg     unsigned char 
 11099 ;;  val             4    0[BANK0 ] long 
 11100 ;; Auto vars:     Size  Location     Type
 11101 ;;  sign            1    8[BANK0 ] unsigned char 
 11102 ;;  arg             4   10[BANK0 ] unsigned long 
 11103 ;;  exp             1    9[BANK0 ] unsigned char 
 11104 ;; Return value:  Size  Location     Type
 11105 ;;                  4    0[BANK0 ] unsigned char 
 11106 ;; Registers used:
 11107 ;;		wreg, status,2, status,0
 11108 ;; Tracked objects:
 11109 ;;		On entry : 0/0
 11110 ;;		On exit  : 0/0
 11111 ;;		Unchanged: 0/0
 11112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11113 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11114 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11115 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11116 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11117 ;;Total ram usage:       14 bytes
 11118 ;; Hardware stack levels used:    1
 11119 ;; Hardware stack levels required when called:    7
 11120 ;; This function calls:
 11121 ;;		Nothing
 11122 ;; This function is called by:
 11123 ;;		_ADC_Voltage
 11124 ;;		_findClosestWall
 11125 ;; This function uses a non-reentrant model
 11126 ;;
 11127                           
 11128                           	psect	text46
 11129  01239A                     __ptext46:
 11130                           	opt stack 0
 11131  01239A                     ___xxtofl:
 11132                           	opt stack 21
 11133                           
 11134                           ;incstack = 0
 11135                           ;___xxtofl@sign stored from wreg
 11136  01239A  0100               	movlb	0	; () banked
 11137  01239C  6FC2               	movwf	___xxtofl@sign& (0+255),b
 11138  01239E  0100               	movlb	0	; () banked
 11139  0123A0  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11140  0123A2  0100               	movlb	0	; () banked
 11141  0123A4  B4D8               	btfsc	status,2,c
 11142  0123A6  D01E               	goto	l3010
 11143                           
 11144                           ; BSR set to: 0
 11145  0123A8  0100               	movlb	0	; () banked
 11146  0123AA  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11147  0123AC  D01B               	goto	l3010
 11148                           
 11149                           ; BSR set to: 0
 11150  0123AE  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 11151  0123B2  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 11152  0123B6  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 11153  0123BA  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 11154  0123BE  0100               	movlb	0	; () banked
 11155  0123C0  1FBE               	comf	??___xxtofl& (0+255),f,b
 11156  0123C2  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 11157  0123C4  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 11158  0123C6  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 11159  0123C8  2BBE               	incf	??___xxtofl& (0+255),f,b
 11160  0123CA  0E00               	movlw	0
 11161  0123CC  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 11162  0123CE  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 11163  0123D0  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 11164  0123D2  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 11165  0123D6  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 11166  0123DA  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 11167  0123DE  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 11168  0123E2  D008               	goto	l3011
 11169  0123E4                     l3010:
 11170                           
 11171                           ; BSR set to: 0
 11172  0123E4  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 11173  0123E8  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 11174  0123EC  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 11175  0123F0  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 11176  0123F4                     l3011:
 11177                           
 11178                           ; BSR set to: 0
 11179                           
 11180                           ; BSR set to: 0
 11181  0123F4  0100               	movlb	0	; () banked
 11182  0123F6  51BA               	movf	___xxtofl@val& (0+255),w,b
 11183  0123F8  0100               	movlb	0	; () banked
 11184  0123FA  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 11185  0123FC  0100               	movlb	0	; () banked
 11186  0123FE  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 11187  012400  0100               	movlb	0	; () banked
 11188  012402  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 11189  012404  A4D8               	btfss	status,2,c
 11190  012406  D00A               	goto	l3012
 11191                           
 11192                           ; BSR set to: 0
 11193  012408  0E00               	movlw	0
 11194  01240A  0100               	movlb	0	; () banked
 11195  01240C  6FBA               	movwf	?___xxtofl& (0+255),b
 11196  01240E  0E00               	movlw	0
 11197  012410  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 11198  012412  0E00               	movlw	0
 11199  012414  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 11200  012416  0E00               	movlw	0
 11201  012418  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 11202                           
 11203                           ; BSR set to: 0
 11204  01241A  0012               	return	
 11205  01241C                     l3012:
 11206                           
 11207                           ; BSR set to: 0
 11208                           
 11209                           ; BSR set to: 0
 11210  01241C  0E96               	movlw	150
 11211  01241E  0100               	movlb	0	; () banked
 11212  012420  6FC3               	movwf	___xxtofl@exp& (0+255),b
 11213  012422  D008               	goto	l3014
 11214  012424                     
 11215                           ; BSR set to: 0
 11216                           
 11217                           ; BSR set to: 0
 11218  012424  0100               	movlb	0	; () banked
 11219  012426  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11220  012428  0100               	movlb	0	; () banked
 11221  01242A  90D8               	bcf	status,0,c
 11222  01242C  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11223  01242E  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11224  012430  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11225  012432  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11226  012434                     l3014:
 11227                           
 11228                           ; BSR set to: 0
 11229                           
 11230                           ; BSR set to: 0
 11231  012434  0E00               	movlw	0
 11232  012436  0100               	movlb	0	; () banked
 11233  012438  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11234  01243A  0100               	movlb	0	; () banked
 11235  01243C  6FBE               	movwf	??___xxtofl& (0+255),b
 11236  01243E  0E00               	movlw	0
 11237  012440  0100               	movlb	0	; () banked
 11238  012442  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11239  012444  0100               	movlb	0	; () banked
 11240  012446  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11241  012448  0E00               	movlw	0
 11242  01244A  0100               	movlb	0	; () banked
 11243  01244C  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11244  01244E  0100               	movlb	0	; () banked
 11245  012450  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11246  012452  0EFE               	movlw	254
 11247  012454  0100               	movlb	0	; () banked
 11248  012456  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11249  012458  0100               	movlb	0	; () banked
 11250  01245A  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11251  01245C  0100               	movlb	0	; () banked
 11252  01245E  51BE               	movf	??___xxtofl& (0+255),w,b
 11253  012460  0100               	movlb	0	; () banked
 11254  012462  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11255  012464  0100               	movlb	0	; () banked
 11256  012466  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11257  012468  0100               	movlb	0	; () banked
 11258  01246A  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11259  01246C  B4D8               	btfsc	status,2,c
 11260  01246E  D010               	goto	l3017
 11261  012470  D7D9               	goto	l3015
 11262  012472                     
 11263                           ; BSR set to: 0
 11264                           
 11265                           ; BSR set to: 0
 11266  012472  0100               	movlb	0	; () banked
 11267  012474  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11268                           
 11269                           ; BSR set to: 0
 11270  012476  0E01               	movlw	1
 11271  012478  0100               	movlb	0	; () banked
 11272  01247A  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11273  01247C  0E00               	movlw	0
 11274  01247E  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11275  012480  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11276  012482  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11277                           
 11278                           ; BSR set to: 0
 11279  012484  0100               	movlb	0	; () banked
 11280  012486  90D8               	bcf	status,0,c
 11281  012488  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11282  01248A  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11283  01248C  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11284  01248E  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11285  012490                     l3017:
 11286                           
 11287                           ; BSR set to: 0
 11288  012490  0E00               	movlw	0
 11289  012492  0100               	movlb	0	; () banked
 11290  012494  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11291  012496  0100               	movlb	0	; () banked
 11292  012498  6FBE               	movwf	??___xxtofl& (0+255),b
 11293  01249A  0E00               	movlw	0
 11294  01249C  0100               	movlb	0	; () banked
 11295  01249E  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11296  0124A0  0100               	movlb	0	; () banked
 11297  0124A2  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11298  0124A4  0E00               	movlw	0
 11299  0124A6  0100               	movlb	0	; () banked
 11300  0124A8  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11301  0124AA  0100               	movlb	0	; () banked
 11302  0124AC  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11303  0124AE  0EFF               	movlw	255
 11304  0124B0  0100               	movlb	0	; () banked
 11305  0124B2  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11306  0124B4  0100               	movlb	0	; () banked
 11307  0124B6  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11308  0124B8  0100               	movlb	0	; () banked
 11309  0124BA  51BE               	movf	??___xxtofl& (0+255),w,b
 11310  0124BC  0100               	movlb	0	; () banked
 11311  0124BE  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11312  0124C0  0100               	movlb	0	; () banked
 11313  0124C2  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11314  0124C4  0100               	movlb	0	; () banked
 11315  0124C6  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11316  0124C8  B4D8               	btfsc	status,2,c
 11317  0124CA  D009               	goto	l3020
 11318  0124CC  D7D2               	goto	l3018
 11319  0124CE                     
 11320                           ; BSR set to: 0
 11321                           
 11322                           ; BSR set to: 0
 11323  0124CE  0100               	movlb	0	; () banked
 11324  0124D0  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11325  0124D2  0100               	movlb	0	; () banked
 11326  0124D4  90D8               	bcf	status,0,c
 11327  0124D6  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11328  0124D8  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11329  0124DA  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11330  0124DC  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11331  0124DE                     l3020:
 11332                           
 11333                           ; BSR set to: 0
 11334                           
 11335                           ; BSR set to: 0
 11336  0124DE  0100               	movlb	0	; () banked
 11337  0124E0  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11338  0124E2  D004               	goto	u10690
 11339                           
 11340                           ; BSR set to: 0
 11341  0124E4  0E02               	movlw	2
 11342  0124E6  0100               	movlb	0	; () banked
 11343  0124E8  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11344  0124EA  D7F1               	goto	l3021
 11345  0124EC                     u10690:
 11346                           
 11347                           ; BSR set to: 0
 11348                           
 11349                           ; BSR set to: 0
 11350  0124EC  0100               	movlb	0	; () banked
 11351  0124EE  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11352  0124F0  D009               	goto	l3025
 11353                           
 11354                           ; BSR set to: 0
 11355  0124F2  0EFF               	movlw	255
 11356  0124F4  0100               	movlb	0	; () banked
 11357  0124F6  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11358  0124F8  0EFF               	movlw	255
 11359  0124FA  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11360  0124FC  0E7F               	movlw	127
 11361  0124FE  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11362  012500  0EFF               	movlw	255
 11363  012502  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11364  012504                     l3025:
 11365                           
 11366                           ; BSR set to: 0
 11367  012504  0100               	movlb	0	; () banked
 11368  012506  90D8               	bcf	status,0,c
 11369  012508  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11370  01250A  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11371  01250E  0100               	movlb	0	; () banked
 11372  012510  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11373  012512  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11374  012514  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11375  012516  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11376  01251A  0100               	movlb	0	; () banked
 11377  01251C  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11378  01251E  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11379  012520  6BBE               	clrf	??___xxtofl& (0+255),b
 11380  012522  0100               	movlb	0	; () banked
 11381  012524  51BE               	movf	??___xxtofl& (0+255),w,b
 11382  012526  0100               	movlb	0	; () banked
 11383  012528  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11384  01252A  0100               	movlb	0	; () banked
 11385  01252C  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11386  01252E  0100               	movlb	0	; () banked
 11387  012530  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11388  012532  0100               	movlb	0	; () banked
 11389  012534  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11390  012536  0100               	movlb	0	; () banked
 11391  012538  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11392  01253A  0100               	movlb	0	; () banked
 11393  01253C  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11394  01253E  0100               	movlb	0	; () banked
 11395  012540  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11396                           
 11397                           ; BSR set to: 0
 11398  012542  0100               	movlb	0	; () banked
 11399  012544  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11400  012546  0100               	movlb	0	; () banked
 11401  012548  B4D8               	btfsc	status,2,c
 11402  01254A  D005               	goto	l3026
 11403                           
 11404                           ; BSR set to: 0
 11405  01254C  0100               	movlb	0	; () banked
 11406  01254E  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11407  012550  D002               	goto	l3026
 11408                           
 11409                           ; BSR set to: 0
 11410  012552  0100               	movlb	0	; () banked
 11411  012554  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11412  012556                     l3026:
 11413                           
 11414                           ; BSR set to: 0
 11415                           
 11416                           ; BSR set to: 0
 11417  012556  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11418  01255A  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11419  01255E  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11420  012562  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11421  012566  0012               	return	
 11422  012568                     __end_of___xxtofl:
 11423                           	opt stack 0
 11424                           tblptru	equ	0xFF8
 11425                           tblptrh	equ	0xFF7
 11426                           tblptrl	equ	0xFF6
 11427                           tablat	equ	0xFF5
 11428                           prodh	equ	0xFF4
 11429                           prodl	equ	0xFF3
 11430                           intcon	equ	0xFF2
 11431                           postinc0	equ	0xFEE
 11432                           wreg	equ	0xFE8
 11433                           postdec1	equ	0xFE5
 11434                           fsr1h	equ	0xFE2
 11435                           fsr1l	equ	0xFE1
 11436                           indf2	equ	0xFDF
 11437                           postinc2	equ	0xFDE
 11438                           postdec2	equ	0xFDD
 11439                           fsr2h	equ	0xFDA
 11440                           fsr2l	equ	0xFD9
 11441                           status	equ	0xFD8
 11442                           
 11443 ;; *************** function ___flmul *****************
 11444 ;; Defined at:
 11445 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11446 ;; Parameters:    Size  Location     Type
 11447 ;;  b               4   14[BANK0 ] unsigned char 
 11448 ;;  a               4   18[BANK0 ] unsigned char 
 11449 ;; Auto vars:     Size  Location     Type
 11450 ;;  prod            4   33[BANK0 ] struct .
 11451 ;;  grs             4   28[BANK0 ] unsigned long 
 11452 ;;  temp            2   37[BANK0 ] struct .
 11453 ;;  bexp            1   32[BANK0 ] unsigned char 
 11454 ;;  aexp            1   27[BANK0 ] unsigned char 
 11455 ;;  sign            1   26[BANK0 ] unsigned char 
 11456 ;; Return value:  Size  Location     Type
 11457 ;;                  4   14[BANK0 ] unsigned char 
 11458 ;; Registers used:
 11459 ;;		wreg, status,2, status,0, prodl, prodh
 11460 ;; Tracked objects:
 11461 ;;		On entry : 0/0
 11462 ;;		On exit  : 0/0
 11463 ;;		Unchanged: 0/0
 11464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11465 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11466 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11467 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11468 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11469 ;;Total ram usage:       25 bytes
 11470 ;; Hardware stack levels used:    1
 11471 ;; Hardware stack levels required when called:    7
 11472 ;; This function calls:
 11473 ;;		Nothing
 11474 ;; This function is called by:
 11475 ;;		_ADC_Voltage
 11476 ;;		_findClosestWall
 11477 ;; This function uses a non-reentrant model
 11478 ;;
 11479                           
 11480                           	psect	text47
 11481  010000                     __ptext47:
 11482                           	opt stack 0
 11483  010000                     ___flmul:
 11484                           	opt stack 21
 11485                           
 11486                           ; BSR set to: 0
 11487                           ;incstack = 0
 11488  010000  0100               	movlb	0	; () banked
 11489  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11490  010004  0B80               	andlw	128
 11491  010006  0100               	movlb	0	; () banked
 11492  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11493  01000A  0100               	movlb	0	; () banked
 11494  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11495  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11496  010010  0100               	movlb	0	; () banked
 11497  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11498                           
 11499                           ; BSR set to: 0
 11500  010014  0100               	movlb	0	; () banked
 11501  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11502  010018  D002               	goto	l2981
 11503                           
 11504                           ; BSR set to: 0
 11505  01001A  0100               	movlb	0	; () banked
 11506  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11507  01001E                     l2981:
 11508                           
 11509                           ; BSR set to: 0
 11510                           
 11511                           ; BSR set to: 0
 11512  01001E  0100               	movlb	0	; () banked
 11513  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11514  010022  0100               	movlb	0	; () banked
 11515  010024  B4D8               	btfsc	status,2,c
 11516  010026  D010               	goto	l2982
 11517                           
 11518                           ; BSR set to: 0
 11519  010028  0100               	movlb	0	; () banked
 11520  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11521  01002C  A4D8               	btfss	status,2,c
 11522  01002E  D009               	goto	l2983
 11523                           
 11524                           ; BSR set to: 0
 11525  010030  0E00               	movlw	0
 11526  010032  0100               	movlb	0	; () banked
 11527  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11528  010036  0E00               	movlw	0
 11529  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11530  01003A  0E00               	movlw	0
 11531  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11532  01003E  0E00               	movlw	0
 11533  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11534  010042                     l2983:
 11535                           
 11536                           ; BSR set to: 0
 11537                           
 11538                           ; BSR set to: 0
 11539  010042  0100               	movlb	0	; () banked
 11540  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11541  010046  D009               	goto	l2984
 11542  010048                     l2982:
 11543                           
 11544                           ; BSR set to: 0
 11545                           
 11546                           ; BSR set to: 0
 11547  010048  0E00               	movlw	0
 11548  01004A  0100               	movlb	0	; () banked
 11549  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11550  01004E  0E00               	movlw	0
 11551  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11552  010052  0E00               	movlw	0
 11553  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11554  010056  0E00               	movlw	0
 11555  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11556  01005A                     l2984:
 11557                           
 11558                           ; BSR set to: 0
 11559                           
 11560                           ; BSR set to: 0
 11561  01005A  0100               	movlb	0	; () banked
 11562  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11563  01005E  0B80               	andlw	128
 11564  010060  0100               	movlb	0	; () banked
 11565  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11566                           
 11567                           ; BSR set to: 0
 11568  010064  0100               	movlb	0	; () banked
 11569  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11570  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11571  01006A  0100               	movlb	0	; () banked
 11572  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11573                           
 11574                           ; BSR set to: 0
 11575  01006E  0100               	movlb	0	; () banked
 11576  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11577  010072  D002               	goto	l2985
 11578                           
 11579                           ; BSR set to: 0
 11580  010074  0100               	movlb	0	; () banked
 11581  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11582  010078                     l2985:
 11583                           
 11584                           ; BSR set to: 0
 11585                           
 11586                           ; BSR set to: 0
 11587  010078  0100               	movlb	0	; () banked
 11588  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11589  01007C  0100               	movlb	0	; () banked
 11590  01007E  B4D8               	btfsc	status,2,c
 11591  010080  D010               	goto	l2986
 11592                           
 11593                           ; BSR set to: 0
 11594  010082  0100               	movlb	0	; () banked
 11595  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11596  010086  A4D8               	btfss	status,2,c
 11597  010088  D009               	goto	l2987
 11598                           
 11599                           ; BSR set to: 0
 11600  01008A  0E00               	movlw	0
 11601  01008C  0100               	movlb	0	; () banked
 11602  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11603  010090  0E00               	movlw	0
 11604  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11605  010094  0E00               	movlw	0
 11606  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11607  010098  0E00               	movlw	0
 11608  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11609  01009C                     l2987:
 11610                           
 11611                           ; BSR set to: 0
 11612                           
 11613                           ; BSR set to: 0
 11614  01009C  0100               	movlb	0	; () banked
 11615  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11616  0100A0  D009               	goto	l2988
 11617  0100A2                     l2986:
 11618                           
 11619                           ; BSR set to: 0
 11620                           
 11621                           ; BSR set to: 0
 11622  0100A2  0E00               	movlw	0
 11623  0100A4  0100               	movlb	0	; () banked
 11624  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11625  0100A8  0E00               	movlw	0
 11626  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11627  0100AC  0E00               	movlw	0
 11628  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11629  0100B0  0E00               	movlw	0
 11630  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11631  0100B4                     l2988:
 11632                           
 11633                           ; BSR set to: 0
 11634  0100B4  0100               	movlb	0	; () banked
 11635  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11636  0100B8  0100               	movlb	0	; () banked
 11637  0100BA  B4D8               	btfsc	status,2,c
 11638  0100BC  D005               	goto	u10510
 11639                           
 11640                           ; BSR set to: 0
 11641  0100BE  0100               	movlb	0	; () banked
 11642  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11643  0100C2  0100               	movlb	0	; () banked
 11644  0100C4  A4D8               	btfss	status,2,c
 11645  0100C6  D00A               	goto	l2989
 11646  0100C8                     u10510:
 11647                           
 11648                           ; BSR set to: 0
 11649                           
 11650                           ; BSR set to: 0
 11651  0100C8  0E00               	movlw	0
 11652  0100CA  0100               	movlb	0	; () banked
 11653  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11654  0100CE  0E00               	movlw	0
 11655  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11656  0100D2  0E00               	movlw	0
 11657  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11658  0100D6  0E00               	movlw	0
 11659  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11660                           
 11661                           ; BSR set to: 0
 11662  0100DA  0012               	return	
 11663  0100DC                     l2989:
 11664                           
 11665                           ; BSR set to: 0
 11666                           
 11667                           ; BSR set to: 0
 11668  0100DC  0100               	movlb	0	; () banked
 11669  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11670  0100E0  0100               	movlb	0	; () banked
 11671  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11672  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11673  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11674                           
 11675                           ; BSR set to: 0
 11676  0100EC  0100               	movlb	0	; () banked
 11677  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11678  0100F0  0100               	movlb	0	; () banked
 11679  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11680  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11681  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11682  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11683                           
 11684                           ; BSR set to: 0
 11685  0100FA  0100               	movlb	0	; () banked
 11686  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11687  0100FE  0100               	movlb	0	; () banked
 11688  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11689  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11690  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11691  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11692  010108  0100               	movlb	0	; () banked
 11693  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11694  01010C  0100               	movlb	0	; () banked
 11695  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11696  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11697  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11698                           
 11699                           ; BSR set to: 0
 11700  010118  0100               	movlb	0	; () banked
 11701  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11702  01011C  0100               	movlb	0	; () banked
 11703  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11704  010120  0E00               	movlw	0
 11705  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11706  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11707  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11708                           
 11709                           ; BSR set to: 0
 11710  010128  0100               	movlb	0	; () banked
 11711  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11712  01012C  0100               	movlb	0	; () banked
 11713  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11714  010130  0E00               	movlw	0
 11715  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11716  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11717  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11718  010138  0100               	movlb	0	; () banked
 11719  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11720  01013C  0100               	movlb	0	; () banked
 11721  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11722  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11723  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11724                           
 11725                           ; BSR set to: 0
 11726  010148  0100               	movlb	0	; () banked
 11727  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11728  01014C  0100               	movlb	0	; () banked
 11729  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11730  010150  0E00               	movlw	0
 11731  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11732  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11733  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11734                           
 11735                           ; BSR set to: 0
 11736  010158  0100               	movlb	0	; () banked
 11737  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11738  01015C  0100               	movlb	0	; () banked
 11739  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11740  010160  0E00               	movlw	0
 11741  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11742  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11743  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11744                           
 11745                           ; BSR set to: 0
 11746  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11747  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11748  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11749  010174  0100               	movlb	0	; () banked
 11750  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11751                           
 11752                           ; BSR set to: 0
 11753  010178  0100               	movlb	0	; () banked
 11754  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11755  01017C  0100               	movlb	0	; () banked
 11756  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11757  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11758  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11759                           
 11760                           ; BSR set to: 0
 11761  010188  0100               	movlb	0	; () banked
 11762  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11763  01018C  0100               	movlb	0	; () banked
 11764  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11765  010190  0100               	movlb	0	; () banked
 11766  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11767  010194  0100               	movlb	0	; () banked
 11768  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11769  010198  0E00               	movlw	0
 11770  01019A  0100               	movlb	0	; () banked
 11771  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11772  01019E  0E00               	movlw	0
 11773  0101A0  0100               	movlb	0	; () banked
 11774  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11775                           
 11776                           ; BSR set to: 0
 11777  0101A4  0100               	movlb	0	; () banked
 11778  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11779  0101A8  0100               	movlb	0	; () banked
 11780  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11781  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11782  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11783                           
 11784                           ; BSR set to: 0
 11785  0101B4  0100               	movlb	0	; () banked
 11786  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11787  0101B8  0100               	movlb	0	; () banked
 11788  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11789  0101BC  0100               	movlb	0	; () banked
 11790  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11791  0101C0  0100               	movlb	0	; () banked
 11792  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11793  0101C4  0E00               	movlw	0
 11794  0101C6  0100               	movlb	0	; () banked
 11795  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11796  0101CA  0E00               	movlw	0
 11797  0101CC  0100               	movlb	0	; () banked
 11798  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11799                           
 11800                           ; BSR set to: 0
 11801  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11802  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11803  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11804  0101DC  0100               	movlb	0	; () banked
 11805  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11806  0101E0  0100               	movlb	0	; () banked
 11807  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11808  0101E4  0100               	movlb	0	; () banked
 11809  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11810  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11811  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11812                           
 11813                           ; BSR set to: 0
 11814  0101F0  0100               	movlb	0	; () banked
 11815  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11816  0101F4  0100               	movlb	0	; () banked
 11817  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11818  0101F8  0100               	movlb	0	; () banked
 11819  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11820  0101FC  0100               	movlb	0	; () banked
 11821  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11822  010200  0E00               	movlw	0
 11823  010202  0100               	movlb	0	; () banked
 11824  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11825  010206  0E00               	movlw	0
 11826  010208  0100               	movlb	0	; () banked
 11827  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11828                           
 11829                           ; BSR set to: 0
 11830  01020C  0100               	movlb	0	; () banked
 11831  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11832  010210  0100               	movlb	0	; () banked
 11833  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11834  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11835  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11836  01021C  0100               	movlb	0	; () banked
 11837  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11838  010220  0100               	movlb	0	; () banked
 11839  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11840  010224  0100               	movlb	0	; () banked
 11841  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11842  010228  0100               	movlb	0	; () banked
 11843  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11844  01022C  0E00               	movlw	0
 11845  01022E  0100               	movlb	0	; () banked
 11846  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11847  010232  0E00               	movlw	0
 11848  010234  0100               	movlb	0	; () banked
 11849  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11850                           
 11851                           ; BSR set to: 0
 11852  010238  0100               	movlb	0	; () banked
 11853  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11854  01023C  0100               	movlb	0	; () banked
 11855  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11856  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11857  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11858                           
 11859                           ; BSR set to: 0
 11860  010248  0100               	movlb	0	; () banked
 11861  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11862  01024C  0100               	movlb	0	; () banked
 11863  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11864  010250  0100               	movlb	0	; () banked
 11865  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11866  010254  0100               	movlb	0	; () banked
 11867  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11868  010258  0E00               	movlw	0
 11869  01025A  0100               	movlb	0	; () banked
 11870  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11871  01025E  0E00               	movlw	0
 11872  010260  0100               	movlb	0	; () banked
 11873  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11874  010264  0100               	movlb	0	; () banked
 11875  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11876  010268  0100               	movlb	0	; () banked
 11877  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11878  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11879  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11880                           
 11881                           ; BSR set to: 0
 11882  010274  0100               	movlb	0	; () banked
 11883  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11884  010278  0100               	movlb	0	; () banked
 11885  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11886  01027C  0100               	movlb	0	; () banked
 11887  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11888  010280  0100               	movlb	0	; () banked
 11889  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11890  010284  0100               	movlb	0	; () banked
 11891  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11892  010288  0100               	movlb	0	; () banked
 11893  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11894  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11895  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11896  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11897  010298  0100               	movlb	0	; () banked
 11898  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11899  01029C  0100               	movlb	0	; () banked
 11900  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11901  0102A0  0100               	movlb	0	; () banked
 11902  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11903  0102A4  0100               	movlb	0	; () banked
 11904  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11905  0102A8  0100               	movlb	0	; () banked
 11906  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11907  0102AC  0100               	movlb	0	; () banked
 11908  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11909  0102B0  0100               	movlb	0	; () banked
 11910  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11911  0102B4  0100               	movlb	0	; () banked
 11912  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11913  0102B8  0100               	movlb	0	; () banked
 11914  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11915                           
 11916                           ; BSR set to: 0
 11917  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11918  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11919  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11920  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11921  0102CC  0E19               	movlw	25
 11922  0102CE  D006               	goto	u10520
 11923  0102D0                     u10525:
 11924  0102D0  0100               	movlb	0	; () banked
 11925  0102D2  90D8               	bcf	status,0,c
 11926  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11927  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11928  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11929  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11930  0102DC                     u10520:
 11931  0102DC  2EE8               	decfsz	wreg,f,c
 11932  0102DE  D7F8               	goto	u10525
 11933  0102E0  0100               	movlb	0	; () banked
 11934  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11935  0102E4  0100               	movlb	0	; () banked
 11936  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11937  0102E8  0100               	movlb	0	; () banked
 11938  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11939  0102EC  0100               	movlb	0	; () banked
 11940  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11941  0102F0  0100               	movlb	0	; () banked
 11942  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11943  0102F4  0100               	movlb	0	; () banked
 11944  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11945  0102F8  0100               	movlb	0	; () banked
 11946  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11947  0102FC  0100               	movlb	0	; () banked
 11948  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11949                           
 11950                           ; BSR set to: 0
 11951  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11952  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11953  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11954  01030C  0100               	movlb	0	; () banked
 11955  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11956                           
 11957                           ; BSR set to: 0
 11958  010310  0100               	movlb	0	; () banked
 11959  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11960  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11961  010318  0100               	movlb	0	; () banked
 11962  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11963  01031C  0100               	movlb	0	; () banked
 11964  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11965  010320  0E00               	movlw	0
 11966  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11967  010324  0E82               	movlw	130
 11968  010326  0100               	movlb	0	; () banked
 11969  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11970  01032A  0100               	movlb	0	; () banked
 11971  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11972  01032E  0EFF               	movlw	255
 11973  010330  0100               	movlb	0	; () banked
 11974  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11975  010334  0100               	movlb	0	; () banked
 11976  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11977  010338  D015               	goto	l2993
 11978  01033A                     
 11979                           ; BSR set to: 0
 11980                           
 11981                           ; BSR set to: 0
 11982  01033A  0100               	movlb	0	; () banked
 11983  01033C  90D8               	bcf	status,0,c
 11984  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11985  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11986  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11987  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11988                           
 11989                           ; BSR set to: 0
 11990  010346  0100               	movlb	0	; () banked
 11991  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11992  01034A  D002               	goto	l2995
 11993                           
 11994                           ; BSR set to: 0
 11995  01034C  0100               	movlb	0	; () banked
 11996  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11997  010350                     l2995:
 11998                           
 11999                           ; BSR set to: 0
 12000  010350  0100               	movlb	0	; () banked
 12001  010352  90D8               	bcf	status,0,c
 12002  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 12003  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 12004  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 12005  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 12006  01035C  0100               	movlb	0	; () banked
 12007  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 12008  010360  A0D8               	btfss	status,0,c
 12009  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 12010  010364                     l2993:
 12011                           
 12012                           ; BSR set to: 0
 12013                           
 12014                           ; BSR set to: 0
 12015  010364  0100               	movlb	0	; () banked
 12016  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 12017  010368  D7E8               	goto	l2994
 12018                           
 12019                           ; BSR set to: 0
 12020                           
 12021                           ; BSR set to: 0
 12022  01036A  0E00               	movlw	0
 12023  01036C  0100               	movlb	0	; () banked
 12024  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 12025                           
 12026                           ; BSR set to: 0
 12027  010370  0100               	movlb	0	; () banked
 12028  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 12029  010374  D024               	goto	l3000
 12030                           
 12031                           ; BSR set to: 0
 12032  010376  0EFF               	movlw	255
 12033  010378  0100               	movlb	0	; () banked
 12034  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 12035  01037C  0100               	movlb	0	; () banked
 12036  01037E  6FD0               	movwf	??___flmul& (0+255),b
 12037  010380  0EFF               	movlw	255
 12038  010382  0100               	movlb	0	; () banked
 12039  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 12040  010386  0100               	movlb	0	; () banked
 12041  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 12042  01038A  0EFF               	movlw	255
 12043  01038C  0100               	movlb	0	; () banked
 12044  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 12045  010390  0100               	movlb	0	; () banked
 12046  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 12047  010394  0E7F               	movlw	127
 12048  010396  0100               	movlb	0	; () banked
 12049  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 12050  01039A  0100               	movlb	0	; () banked
 12051  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 12052  01039E  0100               	movlb	0	; () banked
 12053  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 12054  0103A2  0100               	movlb	0	; () banked
 12055  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 12056  0103A6  0100               	movlb	0	; () banked
 12057  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 12058  0103AA  0100               	movlb	0	; () banked
 12059  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 12060  0103AE  A4D8               	btfss	status,2,c
 12061  0103B0  D003               	goto	u10570
 12062                           
 12063                           ; BSR set to: 0
 12064                           
 12065                           ; BSR set to: 0
 12066  0103B2  0100               	movlb	0	; () banked
 12067  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 12068  0103B6  D003               	goto	l3000
 12069  0103B8                     u10570:
 12070                           
 12071                           ; BSR set to: 0
 12072  0103B8  0E01               	movlw	1
 12073  0103BA  0100               	movlb	0	; () banked
 12074  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 12075  0103BE                     l3000:
 12076                           
 12077                           ; BSR set to: 0
 12078                           
 12079                           ; BSR set to: 0
 12080                           
 12081                           ; BSR set to: 0
 12082  0103BE  0100               	movlb	0	; () banked
 12083  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 12084  0103C2  0100               	movlb	0	; () banked
 12085  0103C4  B4D8               	btfsc	status,2,c
 12086  0103C6  D023               	goto	l3002
 12087                           
 12088                           ; BSR set to: 0
 12089  0103C8  0E01               	movlw	1
 12090  0103CA  0100               	movlb	0	; () banked
 12091  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 12092  0103CE  0E00               	movlw	0
 12093  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12094  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12095  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12096                           
 12097                           ; BSR set to: 0
 12098  0103D6  0100               	movlb	0	; () banked
 12099  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 12100  0103DA  D019               	goto	l3002
 12101                           
 12102                           ; BSR set to: 0
 12103  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 12104  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 12105  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 12106  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 12107  0103EC  0100               	movlb	0	; () banked
 12108  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 12109  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 12110  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 12111  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 12112  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 12113  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 12114  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 12115  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 12116  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 12117                           
 12118                           ; BSR set to: 0
 12119  010408  0100               	movlb	0	; () banked
 12120  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 12121  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 12122  01040E                     l3002:
 12123                           
 12124                           ; BSR set to: 0
 12125                           
 12126                           ; BSR set to: 0
 12127                           
 12128                           ; BSR set to: 0
 12129  01040E  0100               	movlb	0	; () banked
 12130  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12131  010412  D010               	goto	l3003
 12132  010414  0100               	movlb	0	; () banked
 12133  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12134  010418  E104               	bnz	u10600
 12135  01041A  0100               	movlb	0	; () banked
 12136  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 12137  01041E  A0D8               	btfss	status,0,c
 12138  010420  D009               	goto	l3003
 12139  010422                     u10600:
 12140                           
 12141                           ; BSR set to: 0
 12142  010422  0E00               	movlw	0
 12143  010424  0100               	movlb	0	; () banked
 12144  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 12145  010428  0E00               	movlw	0
 12146  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12147  01042C  0E80               	movlw	128
 12148  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12149  010430  0E7F               	movlw	127
 12150  010432  D02B               	goto	L5
 12151  010434                     l3003:
 12152                           
 12153                           ; BSR set to: 0
 12154                           
 12155                           ; BSR set to: 0
 12156  010434  0100               	movlb	0	; () banked
 12157  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12158  010438  D007               	goto	u10610
 12159  01043A  0100               	movlb	0	; () banked
 12160  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12161  01043E  E111               	bnz	l3005
 12162  010440  0100               	movlb	0	; () banked
 12163  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 12164  010444  B0D8               	btfsc	status,0,c
 12165  010446  D00D               	goto	l3005
 12166  010448                     u10610:
 12167                           
 12168                           ; BSR set to: 0
 12169  010448  0E00               	movlw	0
 12170  01044A  0100               	movlb	0	; () banked
 12171  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 12172  01044E  0E00               	movlw	0
 12173  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12174  010452  0E00               	movlw	0
 12175  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12176  010456  0E00               	movlw	0
 12177  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12178  01045A  0E00               	movlw	0
 12179  01045C  0100               	movlb	0	; () banked
 12180  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 12181  010460  D015               	goto	l3006
 12182  010462                     l3005:
 12183                           
 12184                           ; BSR set to: 0
 12185  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 12186                           
 12187                           ; BSR set to: 0
 12188  010466  0EFF               	movlw	255
 12189  010468  0100               	movlb	0	; () banked
 12190  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 12191  01046C  0EFF               	movlw	255
 12192  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 12193  010470  0E7F               	movlw	127
 12194  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 12195  010474  0E00               	movlw	0
 12196  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 12197                           
 12198                           ; BSR set to: 0
 12199  010478  0100               	movlb	0	; () banked
 12200  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 12201  01047C  D002               	goto	l3007
 12202                           
 12203                           ; BSR set to: 0
 12204  01047E  0100               	movlb	0	; () banked
 12205  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 12206  010482                     l3007:
 12207                           
 12208                           ; BSR set to: 0
 12209                           
 12210                           ; BSR set to: 0
 12211  010482  0100               	movlb	0	; () banked
 12212  010484  90D8               	bcf	status,0,c
 12213  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 12214  010488  0100               	movlb	0	; () banked
 12215  01048A                     L5:
 12216  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12217  01048C                     l3006:
 12218                           
 12219                           ; BSR set to: 0
 12220                           
 12221                           ; BSR set to: 0
 12222                           
 12223                           ; BSR set to: 0
 12224  01048C  0100               	movlb	0	; () banked
 12225  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12226  010490  0100               	movlb	0	; () banked
 12227  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12228                           
 12229                           ; BSR set to: 0
 12230  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12231  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12232  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12233  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12234  0104A4  0012               	return	
 12235  0104A6                     __end_of___flmul:
 12236                           	opt stack 0
 12237                           tblptru	equ	0xFF8
 12238                           tblptrh	equ	0xFF7
 12239                           tblptrl	equ	0xFF6
 12240                           tablat	equ	0xFF5
 12241                           prodh	equ	0xFF4
 12242                           prodl	equ	0xFF3
 12243                           intcon	equ	0xFF2
 12244                           postinc0	equ	0xFEE
 12245                           wreg	equ	0xFE8
 12246                           postdec1	equ	0xFE5
 12247                           fsr1h	equ	0xFE2
 12248                           fsr1l	equ	0xFE1
 12249                           indf2	equ	0xFDF
 12250                           postinc2	equ	0xFDE
 12251                           postdec2	equ	0xFDD
 12252                           fsr2h	equ	0xFDA
 12253                           fsr2l	equ	0xFD9
 12254                           status	equ	0xFD8
 12255                           
 12256 ;; *************** function ___fldiv *****************
 12257 ;; Defined at:
 12258 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12259 ;; Parameters:    Size  Location     Type
 12260 ;;  b               4    0[BANK0 ] unsigned char 
 12261 ;;  a               4    4[BANK0 ] unsigned char 
 12262 ;; Auto vars:     Size  Location     Type
 12263 ;;  grs             4   19[BANK0 ] unsigned long 
 12264 ;;  rem             4   13[BANK0 ] unsigned long 
 12265 ;;  new_exp         2   17[BANK0 ] int 
 12266 ;;  aexp            1   24[BANK0 ] unsigned char 
 12267 ;;  bexp            1   23[BANK0 ] unsigned char 
 12268 ;;  sign            1   12[BANK0 ] unsigned char 
 12269 ;; Return value:  Size  Location     Type
 12270 ;;                  4    0[BANK0 ] unsigned char 
 12271 ;; Registers used:
 12272 ;;		wreg, status,2, status,0
 12273 ;; Tracked objects:
 12274 ;;		On entry : 0/0
 12275 ;;		On exit  : 0/0
 12276 ;;		Unchanged: 0/0
 12277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12278 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12279 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12280 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12281 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12282 ;;Total ram usage:       25 bytes
 12283 ;; Hardware stack levels used:    1
 12284 ;; Hardware stack levels required when called:    7
 12285 ;; This function calls:
 12286 ;;		Nothing
 12287 ;; This function is called by:
 12288 ;;		_ADC_Voltage
 12289 ;;		_findClosestWall
 12290 ;;		_mode1
 12291 ;; This function uses a non-reentrant model
 12292 ;;
 12293                           
 12294                           	psect	text48
 12295  011112                     __ptext48:
 12296                           	opt stack 0
 12297  011112                     ___fldiv:
 12298                           	opt stack 21
 12299                           
 12300                           ; BSR set to: 0
 12301                           ;incstack = 0
 12302  011112  0100               	movlb	0	; () banked
 12303  011114  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12304  011116  0B80               	andlw	128
 12305  011118  0100               	movlb	0	; () banked
 12306  01111A  6FC6               	movwf	___fldiv@sign& (0+255),b
 12307  01111C  0100               	movlb	0	; () banked
 12308  01111E  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12309  011120  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12310  011122  0100               	movlb	0	; () banked
 12311  011124  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12312                           
 12313                           ; BSR set to: 0
 12314  011126  0100               	movlb	0	; () banked
 12315  011128  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12316  01112A  D002               	goto	l2947
 12317                           
 12318                           ; BSR set to: 0
 12319  01112C  0100               	movlb	0	; () banked
 12320  01112E  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12321  011130                     l2947:
 12322                           
 12323                           ; BSR set to: 0
 12324                           
 12325                           ; BSR set to: 0
 12326  011130  0100               	movlb	0	; () banked
 12327  011132  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12328  011134  0100               	movlb	0	; () banked
 12329  011136  B4D8               	btfsc	status,2,c
 12330  011138  D012               	goto	l2948
 12331                           
 12332                           ; BSR set to: 0
 12333  01113A  0100               	movlb	0	; () banked
 12334  01113C  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12335  01113E  A4D8               	btfss	status,2,c
 12336  011140  D009               	goto	l2949
 12337                           
 12338                           ; BSR set to: 0
 12339  011142  0E00               	movlw	0
 12340  011144  0100               	movlb	0	; () banked
 12341  011146  6FBA               	movwf	___fldiv@b& (0+255),b
 12342  011148  0E00               	movlw	0
 12343  01114A  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12344  01114C  0E00               	movlw	0
 12345  01114E  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12346  011150  0E00               	movlw	0
 12347  011152  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12348  011154                     l2949:
 12349                           
 12350                           ; BSR set to: 0
 12351                           
 12352                           ; BSR set to: 0
 12353  011154  0100               	movlb	0	; () banked
 12354  011156  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12355                           
 12356                           ; BSR set to: 0
 12357  011158  0E00               	movlw	0
 12358  01115A  0100               	movlb	0	; () banked
 12359  01115C  D008               	goto	L6
 12360  01115E                     l2948:
 12361                           
 12362                           ; BSR set to: 0
 12363                           
 12364                           ; BSR set to: 0
 12365  01115E  0E00               	movlw	0
 12366  011160  0100               	movlb	0	; () banked
 12367  011162  6FBA               	movwf	___fldiv@b& (0+255),b
 12368  011164  0E00               	movlw	0
 12369  011166  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12370  011168  0E00               	movlw	0
 12371  01116A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12372  01116C  0E00               	movlw	0
 12373  01116E                     L6:
 12374  01116E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12375                           
 12376                           ; BSR set to: 0
 12377                           
 12378                           ; BSR set to: 0
 12379  011170  0100               	movlb	0	; () banked
 12380  011172  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12381  011174  0B80               	andlw	128
 12382  011176  0100               	movlb	0	; () banked
 12383  011178  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12384                           
 12385                           ; BSR set to: 0
 12386  01117A  0100               	movlb	0	; () banked
 12387  01117C  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12388  01117E  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12389  011180  0100               	movlb	0	; () banked
 12390  011182  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12391                           
 12392                           ; BSR set to: 0
 12393  011184  0100               	movlb	0	; () banked
 12394  011186  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12395  011188  D002               	goto	l2951
 12396                           
 12397                           ; BSR set to: 0
 12398  01118A  0100               	movlb	0	; () banked
 12399  01118C  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12400  01118E                     l2951:
 12401                           
 12402                           ; BSR set to: 0
 12403                           
 12404                           ; BSR set to: 0
 12405  01118E  0100               	movlb	0	; () banked
 12406  011190  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12407  011192  0100               	movlb	0	; () banked
 12408  011194  B4D8               	btfsc	status,2,c
 12409  011196  D012               	goto	l2952
 12410                           
 12411                           ; BSR set to: 0
 12412  011198  0100               	movlb	0	; () banked
 12413  01119A  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12414  01119C  A4D8               	btfss	status,2,c
 12415  01119E  D009               	goto	l2953
 12416                           
 12417                           ; BSR set to: 0
 12418  0111A0  0E00               	movlw	0
 12419  0111A2  0100               	movlb	0	; () banked
 12420  0111A4  6FBE               	movwf	___fldiv@a& (0+255),b
 12421  0111A6  0E00               	movlw	0
 12422  0111A8  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12423  0111AA  0E00               	movlw	0
 12424  0111AC  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12425  0111AE  0E00               	movlw	0
 12426  0111B0  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12427  0111B2                     l2953:
 12428                           
 12429                           ; BSR set to: 0
 12430                           
 12431                           ; BSR set to: 0
 12432  0111B2  0100               	movlb	0	; () banked
 12433  0111B4  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12434                           
 12435                           ; BSR set to: 0
 12436  0111B6  0E00               	movlw	0
 12437  0111B8  0100               	movlb	0	; () banked
 12438  0111BA  D008               	goto	L7
 12439  0111BC                     l2952:
 12440                           
 12441                           ; BSR set to: 0
 12442                           
 12443                           ; BSR set to: 0
 12444  0111BC  0E00               	movlw	0
 12445  0111BE  0100               	movlb	0	; () banked
 12446  0111C0  6FBE               	movwf	___fldiv@a& (0+255),b
 12447  0111C2  0E00               	movlw	0
 12448  0111C4  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12449  0111C6  0E00               	movlw	0
 12450  0111C8  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12451  0111CA  0E00               	movlw	0
 12452  0111CC                     L7:
 12453  0111CC  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12454                           
 12455                           ; BSR set to: 0
 12456                           
 12457                           ; BSR set to: 0
 12458  0111CE  0100               	movlb	0	; () banked
 12459  0111D0  51BE               	movf	___fldiv@a& (0+255),w,b
 12460  0111D2  0100               	movlb	0	; () banked
 12461  0111D4  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12462  0111D6  0100               	movlb	0	; () banked
 12463  0111D8  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12464  0111DA  0100               	movlb	0	; () banked
 12465  0111DC  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12466  0111DE  A4D8               	btfss	status,2,c
 12467  0111E0  D017               	goto	l2955
 12468                           
 12469                           ; BSR set to: 0
 12470  0111E2  0E00               	movlw	0
 12471  0111E4  0100               	movlb	0	; () banked
 12472  0111E6  6FBA               	movwf	___fldiv@b& (0+255),b
 12473  0111E8  0E00               	movlw	0
 12474  0111EA  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12475  0111EC  0E00               	movlw	0
 12476  0111EE  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12477  0111F0  0E00               	movlw	0
 12478  0111F2  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12479                           
 12480                           ; BSR set to: 0
 12481  0111F4  0100               	movlb	0	; () banked
 12482  0111F6  0E80               	movlw	128
 12483  0111F8  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12484  0111FA  0E7F               	movlw	127
 12485  0111FC  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12486                           
 12487                           ; BSR set to: 0
 12488  0111FE  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12489  011202  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12490  011206  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12491  01120A  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12492                           
 12493                           ; BSR set to: 0
 12494  01120E  0012               	return	
 12495  011210                     l2955:
 12496                           
 12497                           ; BSR set to: 0
 12498                           
 12499                           ; BSR set to: 0
 12500  011210  0100               	movlb	0	; () banked
 12501  011212  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12502  011214  0100               	movlb	0	; () banked
 12503  011216  A4D8               	btfss	status,2,c
 12504  011218  D012               	goto	l2957
 12505                           
 12506                           ; BSR set to: 0
 12507  01121A  0E00               	movlw	0
 12508  01121C  0100               	movlb	0	; () banked
 12509  01121E  6FBA               	movwf	___fldiv@b& (0+255),b
 12510  011220  0E00               	movlw	0
 12511  011222  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12512  011224  0E00               	movlw	0
 12513  011226  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12514  011228  0E00               	movlw	0
 12515  01122A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12516                           
 12517                           ; BSR set to: 0
 12518  01122C  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12519  011230  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12520  011234  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12521  011238  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12522                           
 12523                           ; BSR set to: 0
 12524  01123C  0012               	return	
 12525  01123E                     l2957:
 12526                           
 12527                           ; BSR set to: 0
 12528                           
 12529                           ; BSR set to: 0
 12530  01123E  0100               	movlb	0	; () banked
 12531  011240  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12532  011242  0100               	movlb	0	; () banked
 12533  011244  6FC2               	movwf	??___fldiv& (0+255),b
 12534  011246  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12535  011248  0100               	movlb	0	; () banked
 12536  01124A  1FC2               	comf	??___fldiv& (0+255),f,b
 12537  01124C  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12538  01124E  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12539  011250  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12540  011252  0100               	movlb	0	; () banked
 12541  011254  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12542  011256  0100               	movlb	0	; () banked
 12543  011258  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12544  01125A  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12545  01125C  0100               	movlb	0	; () banked
 12546  01125E  51C2               	movf	??___fldiv& (0+255),w,b
 12547  011260  0100               	movlb	0	; () banked
 12548  011262  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12549  011264  0100               	movlb	0	; () banked
 12550  011266  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12551  011268  0100               	movlb	0	; () banked
 12552  01126A  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12553  01126C  0E7F               	movlw	127
 12554  01126E  0100               	movlb	0	; () banked
 12555  011270  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12556  011272  0100               	movlb	0	; () banked
 12557  011274  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12558  011276  0E00               	movlw	0
 12559  011278  0100               	movlb	0	; () banked
 12560  01127A  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12561  01127C  0100               	movlb	0	; () banked
 12562  01127E  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12563                           
 12564                           ; BSR set to: 0
 12565  011280  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12566  011284  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12567  011288  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12568  01128C  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12569                           
 12570                           ; BSR set to: 0
 12571  011290  0E00               	movlw	0
 12572  011292  0100               	movlb	0	; () banked
 12573  011294  6FBA               	movwf	___fldiv@b& (0+255),b
 12574  011296  0E00               	movlw	0
 12575  011298  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12576  01129A  0E00               	movlw	0
 12577  01129C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12578  01129E  0E00               	movlw	0
 12579  0112A0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12580                           
 12581                           ; BSR set to: 0
 12582  0112A2  0E00               	movlw	0
 12583  0112A4  0100               	movlb	0	; () banked
 12584  0112A6  6FCD               	movwf	___fldiv@grs& (0+255),b
 12585  0112A8  0E00               	movlw	0
 12586  0112AA  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12587  0112AC  0E00               	movlw	0
 12588  0112AE  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12589  0112B0  0E00               	movlw	0
 12590  0112B2  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12591                           
 12592                           ; BSR set to: 0
 12593  0112B4  0E00               	movlw	0
 12594  0112B6  0100               	movlb	0	; () banked
 12595  0112B8  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12596  0112BA  D042               	goto	l2958
 12597  0112BC                     
 12598                           ; BSR set to: 0
 12599                           
 12600                           ; BSR set to: 0
 12601  0112BC  0100               	movlb	0	; () banked
 12602  0112BE  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12603  0112C0  0100               	movlb	0	; () banked
 12604  0112C2  B4D8               	btfsc	status,2,c
 12605  0112C4  D017               	goto	l2960
 12606                           
 12607                           ; BSR set to: 0
 12608  0112C6  0100               	movlb	0	; () banked
 12609  0112C8  90D8               	bcf	status,0,c
 12610  0112CA  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12611  0112CC  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12612  0112CE  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12613  0112D0  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12614  0112D2  0100               	movlb	0	; () banked
 12615  0112D4  90D8               	bcf	status,0,c
 12616  0112D6  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12617  0112D8  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12618  0112DA  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12619  0112DC  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12620                           
 12621                           ; BSR set to: 0
 12622  0112DE  0100               	movlb	0	; () banked
 12623  0112E0  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12624  0112E2  D002               	goto	l2961
 12625                           
 12626                           ; BSR set to: 0
 12627  0112E4  0100               	movlb	0	; () banked
 12628  0112E6  81BA               	bsf	___fldiv@b& (0+255),0,b
 12629  0112E8                     l2961:
 12630                           
 12631                           ; BSR set to: 0
 12632  0112E8  0100               	movlb	0	; () banked
 12633  0112EA  90D8               	bcf	status,0,c
 12634  0112EC  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12635  0112EE  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12636  0112F0  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12637  0112F2  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12638  0112F4                     l2960:
 12639                           
 12640                           ; BSR set to: 0
 12641                           
 12642                           ; BSR set to: 0
 12643  0112F4  0100               	movlb	0	; () banked
 12644  0112F6  51BE               	movf	___fldiv@a& (0+255),w,b
 12645  0112F8  0100               	movlb	0	; () banked
 12646  0112FA  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12647  0112FC  0100               	movlb	0	; () banked
 12648  0112FE  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12649  011300  0100               	movlb	0	; () banked
 12650  011302  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12651  011304  0100               	movlb	0	; () banked
 12652  011306  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12653  011308  0100               	movlb	0	; () banked
 12654  01130A  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12655  01130C  0100               	movlb	0	; () banked
 12656  01130E  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12657  011310  0100               	movlb	0	; () banked
 12658  011312  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12659  011314  A0D8               	btfss	status,0,c
 12660  011316  D012               	goto	l2962
 12661                           
 12662                           ; BSR set to: 0
 12663  011318  0100               	movlb	0	; () banked
 12664  01131A  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12665                           
 12666                           ; BSR set to: 0
 12667  01131C  0100               	movlb	0	; () banked
 12668  01131E  51BE               	movf	___fldiv@a& (0+255),w,b
 12669  011320  0100               	movlb	0	; () banked
 12670  011322  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12671  011324  0100               	movlb	0	; () banked
 12672  011326  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12673  011328  0100               	movlb	0	; () banked
 12674  01132A  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12675  01132C  0100               	movlb	0	; () banked
 12676  01132E  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12677  011330  0100               	movlb	0	; () banked
 12678  011332  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12679  011334  0100               	movlb	0	; () banked
 12680  011336  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12681  011338  0100               	movlb	0	; () banked
 12682  01133A  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12683  01133C                     l2962:
 12684                           
 12685                           ; BSR set to: 0
 12686                           
 12687                           ; BSR set to: 0
 12688  01133C  0100               	movlb	0	; () banked
 12689  01133E  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12690  011340                     l2958:
 12691                           
 12692                           ; BSR set to: 0
 12693  011340  0E19               	movlw	25
 12694  011342  0100               	movlb	0	; () banked
 12695  011344  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12696  011346  D7BA               	goto	l2959
 12697                           
 12698                           ; BSR set to: 0
 12699                           
 12700                           ; BSR set to: 0
 12701  011348  0100               	movlb	0	; () banked
 12702  01134A  51C7               	movf	___fldiv@rem& (0+255),w,b
 12703  01134C  0100               	movlb	0	; () banked
 12704  01134E  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12705  011350  0100               	movlb	0	; () banked
 12706  011352  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12707  011354  0100               	movlb	0	; () banked
 12708  011356  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12709  011358  B4D8               	btfsc	status,2,c
 12710  01135A  D018               	goto	l2965
 12711                           
 12712                           ; BSR set to: 0
 12713  01135C  0100               	movlb	0	; () banked
 12714  01135E  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12715                           
 12716                           ; BSR set to: 0
 12717  011360  D015               	goto	l2965
 12718  011362                     
 12719                           ; BSR set to: 0
 12720                           
 12721                           ; BSR set to: 0
 12722  011362  0100               	movlb	0	; () banked
 12723  011364  90D8               	bcf	status,0,c
 12724  011366  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12725  011368  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12726  01136A  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12727  01136C  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12728                           
 12729                           ; BSR set to: 0
 12730  01136E  0100               	movlb	0	; () banked
 12731  011370  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12732  011372  D002               	goto	l2967
 12733                           
 12734                           ; BSR set to: 0
 12735  011374  0100               	movlb	0	; () banked
 12736  011376  81BA               	bsf	___fldiv@b& (0+255),0,b
 12737  011378                     l2967:
 12738                           
 12739                           ; BSR set to: 0
 12740  011378  0100               	movlb	0	; () banked
 12741  01137A  90D8               	bcf	status,0,c
 12742  01137C  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12743  01137E  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12744  011380  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12745  011382  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12746  011384  0100               	movlb	0	; () banked
 12747  011386  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12748  011388  A0D8               	btfss	status,0,c
 12749  01138A  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12750  01138C                     l2965:
 12751                           
 12752                           ; BSR set to: 0
 12753                           
 12754                           ; BSR set to: 0
 12755  01138C  0100               	movlb	0	; () banked
 12756  01138E  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12757  011390  D7E8               	goto	l2966
 12758                           
 12759                           ; BSR set to: 0
 12760                           
 12761                           ; BSR set to: 0
 12762  011392  0E00               	movlw	0
 12763  011394  0100               	movlb	0	; () banked
 12764  011396  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12765                           
 12766                           ; BSR set to: 0
 12767  011398  0100               	movlb	0	; () banked
 12768  01139A  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12769  01139C  D024               	goto	l2972
 12770                           
 12771                           ; BSR set to: 0
 12772  01139E  0EFF               	movlw	255
 12773  0113A0  0100               	movlb	0	; () banked
 12774  0113A2  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12775  0113A4  0100               	movlb	0	; () banked
 12776  0113A6  6FC2               	movwf	??___fldiv& (0+255),b
 12777  0113A8  0EFF               	movlw	255
 12778  0113AA  0100               	movlb	0	; () banked
 12779  0113AC  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12780  0113AE  0100               	movlb	0	; () banked
 12781  0113B0  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12782  0113B2  0EFF               	movlw	255
 12783  0113B4  0100               	movlb	0	; () banked
 12784  0113B6  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12785  0113B8  0100               	movlb	0	; () banked
 12786  0113BA  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12787  0113BC  0E7F               	movlw	127
 12788  0113BE  0100               	movlb	0	; () banked
 12789  0113C0  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12790  0113C2  0100               	movlb	0	; () banked
 12791  0113C4  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12792  0113C6  0100               	movlb	0	; () banked
 12793  0113C8  51C2               	movf	??___fldiv& (0+255),w,b
 12794  0113CA  0100               	movlb	0	; () banked
 12795  0113CC  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12796  0113CE  0100               	movlb	0	; () banked
 12797  0113D0  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12798  0113D2  0100               	movlb	0	; () banked
 12799  0113D4  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12800  0113D6  A4D8               	btfss	status,2,c
 12801  0113D8  D003               	goto	u10380
 12802                           
 12803                           ; BSR set to: 0
 12804                           
 12805                           ; BSR set to: 0
 12806  0113DA  0100               	movlb	0	; () banked
 12807  0113DC  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12808  0113DE  D003               	goto	l2972
 12809  0113E0                     u10380:
 12810                           
 12811                           ; BSR set to: 0
 12812  0113E0  0E01               	movlw	1
 12813  0113E2  0100               	movlb	0	; () banked
 12814  0113E4  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12815  0113E6                     l2972:
 12816                           
 12817                           ; BSR set to: 0
 12818                           
 12819                           ; BSR set to: 0
 12820                           
 12821                           ; BSR set to: 0
 12822  0113E6  0100               	movlb	0	; () banked
 12823  0113E8  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12824  0113EA  0100               	movlb	0	; () banked
 12825  0113EC  B4D8               	btfsc	status,2,c
 12826  0113EE  D023               	goto	l2974
 12827                           
 12828                           ; BSR set to: 0
 12829  0113F0  0E01               	movlw	1
 12830  0113F2  0100               	movlb	0	; () banked
 12831  0113F4  27BA               	addwf	___fldiv@b& (0+255),f,b
 12832  0113F6  0E00               	movlw	0
 12833  0113F8  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12834  0113FA  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12835  0113FC  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12836                           
 12837                           ; BSR set to: 0
 12838  0113FE  0100               	movlb	0	; () banked
 12839  011400  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12840  011402  D019               	goto	l2974
 12841                           
 12842                           ; BSR set to: 0
 12843  011404  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12844  011408  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12845  01140C  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12846  011410  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12847  011414  0100               	movlb	0	; () banked
 12848  011416  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12849  011418  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12850  01141A  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12851  01141C  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12852  01141E  33C2               	rrcf	??___fldiv& (0+255),f,b
 12853  011420  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12854  011424  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12855  011428  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12856  01142C  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12857                           
 12858                           ; BSR set to: 0
 12859  011430  0100               	movlb	0	; () banked
 12860  011432  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12861  011434  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12862  011436                     l2974:
 12863                           
 12864                           ; BSR set to: 0
 12865                           
 12866                           ; BSR set to: 0
 12867                           
 12868                           ; BSR set to: 0
 12869  011436  0100               	movlb	0	; () banked
 12870  011438  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12871  01143A  D014               	goto	l2975
 12872  01143C  0100               	movlb	0	; () banked
 12873  01143E  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12874  011440  E104               	bnz	u10410
 12875  011442  0100               	movlb	0	; () banked
 12876  011444  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12877  011446  A0D8               	btfss	status,0,c
 12878  011448  D00D               	goto	l2975
 12879  01144A                     u10410:
 12880                           
 12881                           ; BSR set to: 0
 12882  01144A  0E00               	movlw	0
 12883  01144C  0100               	movlb	0	; () banked
 12884  01144E  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12885  011450  69CB               	setf	___fldiv@new_exp& (0+255),b
 12886  011452  0E00               	movlw	0
 12887  011454  0100               	movlb	0	; () banked
 12888  011456  6FBA               	movwf	___fldiv@b& (0+255),b
 12889  011458  0E00               	movlw	0
 12890  01145A  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12891  01145C  0E00               	movlw	0
 12892  01145E  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12893  011460  0E00               	movlw	0
 12894  011462  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12895  011464                     l2975:
 12896                           
 12897                           ; BSR set to: 0
 12898                           
 12899                           ; BSR set to: 0
 12900  011464  0100               	movlb	0	; () banked
 12901  011466  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12902  011468  D007               	goto	u10420
 12903  01146A  0100               	movlb	0	; () banked
 12904  01146C  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12905  01146E  E115               	bnz	l13740
 12906  011470  0100               	movlb	0	; () banked
 12907  011472  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12908  011474  B0D8               	btfsc	status,0,c
 12909  011476  D011               	goto	l2976
 12910  011478                     u10420:
 12911                           
 12912                           ; BSR set to: 0
 12913  011478  0E00               	movlw	0
 12914  01147A  0100               	movlb	0	; () banked
 12915  01147C  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12916  01147E  0E00               	movlw	0
 12917  011480  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12918  011482  0E00               	movlw	0
 12919  011484  0100               	movlb	0	; () banked
 12920  011486  6FBA               	movwf	___fldiv@b& (0+255),b
 12921  011488  0E00               	movlw	0
 12922  01148A  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12923  01148C  0E00               	movlw	0
 12924  01148E  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12925  011490  0E00               	movlw	0
 12926  011492  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12927  011494  0E00               	movlw	0
 12928  011496  0100               	movlb	0	; () banked
 12929  011498  6FC6               	movwf	___fldiv@sign& (0+255),b
 12930  01149A                     l2976:
 12931  01149A                     l13740:
 12932                           
 12933                           ; BSR set to: 0
 12934  01149A  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12935                           
 12936                           ; BSR set to: 0
 12937  01149E  0100               	movlb	0	; () banked
 12938  0114A0  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12939  0114A2  D003               	goto	l2977
 12940                           
 12941                           ; BSR set to: 0
 12942  0114A4  0100               	movlb	0	; () banked
 12943  0114A6  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12944  0114A8  D002               	goto	l2978
 12945  0114AA                     l2977:
 12946                           
 12947                           ; BSR set to: 0
 12948                           
 12949                           ; BSR set to: 0
 12950  0114AA  0100               	movlb	0	; () banked
 12951  0114AC  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12952  0114AE                     l2978:
 12953                           
 12954                           ; BSR set to: 0
 12955                           
 12956                           ; BSR set to: 0
 12957  0114AE  0100               	movlb	0	; () banked
 12958  0114B0  90D8               	bcf	status,0,c
 12959  0114B2  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12960  0114B4  0100               	movlb	0	; () banked
 12961  0114B6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12962                           
 12963                           ; BSR set to: 0
 12964  0114B8  0100               	movlb	0	; () banked
 12965  0114BA  51C6               	movf	___fldiv@sign& (0+255),w,b
 12966  0114BC  0100               	movlb	0	; () banked
 12967  0114BE  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12968                           
 12969                           ; BSR set to: 0
 12970  0114C0  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12971  0114C4  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12972  0114C8  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12973  0114CC  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12974  0114D0  0012               	return	
 12975  0114D2                     __end_of___fldiv:
 12976                           	opt stack 0
 12977                           tblptru	equ	0xFF8
 12978                           tblptrh	equ	0xFF7
 12979                           tblptrl	equ	0xFF6
 12980                           tablat	equ	0xFF5
 12981                           prodh	equ	0xFF4
 12982                           prodl	equ	0xFF3
 12983                           intcon	equ	0xFF2
 12984                           postinc0	equ	0xFEE
 12985                           wreg	equ	0xFE8
 12986                           postdec1	equ	0xFE5
 12987                           fsr1h	equ	0xFE2
 12988                           fsr1l	equ	0xFE1
 12989                           indf2	equ	0xFDF
 12990                           postinc2	equ	0xFDE
 12991                           postdec2	equ	0xFDD
 12992                           fsr2h	equ	0xFDA
 12993                           fsr2l	equ	0xFD9
 12994                           status	equ	0xFD8
 12995                           
 12996 ;; *************** function _init *****************
 12997 ;; Defined at:
 12998 ;;		line 65 in file "main.c"
 12999 ;; Parameters:    Size  Location     Type
 13000 ;;		None
 13001 ;; Auto vars:     Size  Location     Type
 13002 ;;		None
 13003 ;; Return value:  Size  Location     Type
 13004 ;;                  1    wreg      void 
 13005 ;; Registers used:
 13006 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 13007 ;; Tracked objects:
 13008 ;;		On entry : 0/0
 13009 ;;		On exit  : 0/0
 13010 ;;		Unchanged: 0/0
 13011 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13016 ;;Total ram usage:        0 bytes
 13017 ;; Hardware stack levels used:    1
 13018 ;; Hardware stack levels required when called:   17
 13019 ;; This function calls:
 13020 ;;		_ADC_Init
 13021 ;;		_ADC_Start
 13022 ;;		_Console_Init
 13023 ;;		_HMI_Init
 13024 ;;		_ISR_Enable
 13025 ;;		_LCD_Init
 13026 ;;		_MXK_BlockSwitchTo
 13027 ;;		_MXK_Dequeue
 13028 ;;		_MXK_Init
 13029 ;;		_MXK_Release
 13030 ;;		_Motor_Init
 13031 ;;		_delay_ms
 13032 ;;		_eusart_init
 13033 ;;		_irobot_init
 13034 ;;		_irobot_init_song_0
 13035 ;;		_irobot_led_power_on
 13036 ;; This function is called by:
 13037 ;;		_main
 13038 ;; This function uses a non-reentrant model
 13039 ;;
 13040                           
 13041                           	psect	text49
 13042  014890                     __ptext49:
 13043                           	opt stack 0
 13044  014890                     _init:
 13045                           	opt stack 13
 13046                           
 13047                           ;main.c: 67: MXK_Init();
 13048                           
 13049                           ; BSR set to: 0
 13050                           ;incstack = 0
 13051  014890  ECD0  F096         	call	_MXK_Init	;wreg free
 13052                           
 13053                           ;main.c: 70: ISR_Enable();
 13054  014894  ECD6  F0B3         	call	_ISR_Enable	;wreg free
 13055                           
 13056                           ;main.c: 73: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 13057  014898  0E01               	movlw	1
 13058  01489A  EC3D  F0B0         	call	_MXK_BlockSwitchTo
 13059  01489E  0900               	iorlw	0
 13060  0148A0  B4D8               	btfsc	status,2,c
 13061  0148A2  D00C               	goto	l2301
 13062                           
 13063                           ;main.c: 74: Console_Init();
 13064  0148A4  ECA6  F0A7         	call	_Console_Init	;wreg free
 13065                           
 13066                           ;main.c: 75: HMI_Init();
 13067  0148A8  ECD0  F090         	call	_HMI_Init	;wreg free
 13068                           
 13069                           ;main.c: 76: LCD_Init();
 13070  0148AC  EC90  F097         	call	_LCD_Init	;wreg free
 13071                           
 13072                           ;main.c: 77: if (MXK_Release())
 13073  0148B0  ECCC  F0B2         	call	_MXK_Release	;wreg free
 13074  0148B4  0900               	iorlw	0
 13075  0148B6  A4D8               	btfss	status,2,c
 13076                           
 13077                           ;main.c: 78: MXK_Dequeue();
 13078  0148B8  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
 13079  0148BC                     l2301:
 13080                           
 13081                           ;main.c: 79: }
 13082                           ;main.c: 82: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 13083  0148BC  0E08               	movlw	8
 13084  0148BE  EC3D  F0B0         	call	_MXK_BlockSwitchTo
 13085  0148C2  0900               	iorlw	0
 13086  0148C4  B4D8               	btfsc	status,2,c
 13087  0148C6  D013               	goto	l2303
 13088                           
 13089                           ;main.c: 83: Motor_Init(&Stepper, 0b1000);
 13090  0148C8  0EAF               	movlw	low _Stepper
 13091  0148CA  0100               	movlb	0	; () banked
 13092  0148CC  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 13093  0148CE  0E00               	movlw	high _Stepper
 13094  0148D0  0100               	movlb	0	; () banked
 13095  0148D2  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 13096  0148D4  0E00               	movlw	0
 13097  0148D6  0100               	movlb	0	; () banked
 13098  0148D8  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 13099  0148DA  0E08               	movlw	8
 13100  0148DC  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 13101  0148DE  ECC5  F09E         	call	_Motor_Init	;wreg free
 13102                           
 13103                           ;main.c: 84: if (MXK_Release())
 13104  0148E2  ECCC  F0B2         	call	_MXK_Release	;wreg free
 13105  0148E6  0900               	iorlw	0
 13106  0148E8  A4D8               	btfss	status,2,c
 13107                           
 13108                           ;main.c: 85: MXK_Dequeue();
 13109  0148EA  EC1E  F0B0         	call	_MXK_Dequeue	;wreg free
 13110  0148EE                     l2303:
 13111                           
 13112                           ;main.c: 86: }
 13113                           ;main.c: 89: ADC_Init(&ADC_AN0, eADC_Ch0);
 13114  0148EE  0EB5               	movlw	low _ADC_AN0
 13115  0148F0  0100               	movlb	0	; () banked
 13116  0148F2  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 13117  0148F4  0E00               	movlw	high _ADC_AN0
 13118  0148F6  0100               	movlb	0	; () banked
 13119  0148F8  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 13120  0148FA  0E00               	movlw	0
 13121  0148FC  0100               	movlb	0	; () banked
 13122  0148FE  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 13123  014900  EC32  F0A9         	call	_ADC_Init	;wreg free
 13124                           
 13125                           ;main.c: 90: float ADC_Voltage(ADCPtr plnput);
 13126                           ;main.c: 91: ADC_Start(&ADC_AN0);
 13127  014904  0EB5               	movlw	low _ADC_AN0
 13128  014906  0100               	movlb	0	; () banked
 13129  014908  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 13130  01490A  0E00               	movlw	high _ADC_AN0
 13131  01490C  0100               	movlb	0	; () banked
 13132  01490E  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 13133  014910  EC30  F0A8         	call	_ADC_Start	;wreg free
 13134                           
 13135                           ;main.c: 93: eusart_init();
 13136  014914  EC55  F0B2         	call	_eusart_init	;wreg free
 13137                           
 13138                           ;main.c: 94: irobot_init();
 13139  014918  EC96  F0B3         	call	_irobot_init	;wreg free
 13140                           
 13141                           ;main.c: 96: irobot_led_power_on(0xA);
 13142  01491C  0E0A               	movlw	10
 13143  01491E  ECBE  F0B2         	call	_irobot_led_power_on
 13144                           
 13145                           ;main.c: 97: irobot_init_song_0();
 13146  014922  EC36  F0B2         	call	_irobot_init_song_0	;wreg free
 13147                           
 13148                           ;main.c: 98: delay_ms(20);
 13149  014926  0E00               	movlw	0
 13150  014928  0100               	movlb	0	; () banked
 13151  01492A  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 13152  01492C  0E14               	movlw	20
 13153  01492E  6FBA               	movwf	delay_ms@ms& (0+255),b
 13154  014930  ECA7  F0AB         	call	_delay_ms	;wreg free
 13155  014934  0012               	return		;funcret
 13156  014936                     __end_of_init:
 13157                           	opt stack 0
 13158                           tblptru	equ	0xFF8
 13159                           tblptrh	equ	0xFF7
 13160                           tblptrl	equ	0xFF6
 13161                           tablat	equ	0xFF5
 13162                           prodh	equ	0xFF4
 13163                           prodl	equ	0xFF3
 13164                           intcon	equ	0xFF2
 13165                           postinc0	equ	0xFEE
 13166                           wreg	equ	0xFE8
 13167                           postdec1	equ	0xFE5
 13168                           fsr1h	equ	0xFE2
 13169                           fsr1l	equ	0xFE1
 13170                           indf2	equ	0xFDF
 13171                           postinc2	equ	0xFDE
 13172                           postdec2	equ	0xFDD
 13173                           fsr2h	equ	0xFDA
 13174                           fsr2l	equ	0xFD9
 13175                           status	equ	0xFD8
 13176                           
 13177 ;; *************** function _irobot_led_power_on *****************
 13178 ;; Defined at:
 13179 ;;		line 303 in file "Library/iRobotSerial.c"
 13180 ;; Parameters:    Size  Location     Type
 13181 ;;  powerOnColou    1    wreg     unsigned char 
 13182 ;; Auto vars:     Size  Location     Type
 13183 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 13184 ;; Return value:  Size  Location     Type
 13185 ;;                  1    wreg      void 
 13186 ;; Registers used:
 13187 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13188 ;; Tracked objects:
 13189 ;;		On entry : 0/0
 13190 ;;		On exit  : 0/0
 13191 ;;		Unchanged: 0/0
 13192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13193 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13194 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13196 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13197 ;;Total ram usage:        1 bytes
 13198 ;; Hardware stack levels used:    1
 13199 ;; Hardware stack levels required when called:    9
 13200 ;; This function calls:
 13201 ;;		_irobot_leds
 13202 ;; This function is called by:
 13203 ;;		_init
 13204 ;; This function uses a non-reentrant model
 13205 ;;
 13206                           
 13207                           	psect	text50
 13208  01657C                     __ptext50:
 13209                           	opt stack 0
 13210  01657C                     _irobot_led_power_on:
 13211                           	opt stack 20
 13212                           
 13213                           ;incstack = 0
 13214                           ;irobot_led_power_on@powerOnColour stored from wreg
 13215  01657C  0100               	movlb	0	; () banked
 13216  01657E  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13217                           
 13218                           ;iRobotSerial.c: 304: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13219  016580  0E00               	movlw	0
 13220  016582  0100               	movlb	0	; () banked
 13221  016584  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13222  016586  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13223  01658A  0EFF               	movlw	255
 13224  01658C  0100               	movlb	0	; () banked
 13225  01658E  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13226  016590  0E00               	movlw	0
 13227  016592  EC66  F0AD         	call	_irobot_leds
 13228  016596  0012               	return		;funcret
 13229  016598                     __end_of_irobot_led_power_on:
 13230                           	opt stack 0
 13231                           tblptru	equ	0xFF8
 13232                           tblptrh	equ	0xFF7
 13233                           tblptrl	equ	0xFF6
 13234                           tablat	equ	0xFF5
 13235                           prodh	equ	0xFF4
 13236                           prodl	equ	0xFF3
 13237                           intcon	equ	0xFF2
 13238                           postinc0	equ	0xFEE
 13239                           wreg	equ	0xFE8
 13240                           postdec1	equ	0xFE5
 13241                           fsr1h	equ	0xFE2
 13242                           fsr1l	equ	0xFE1
 13243                           indf2	equ	0xFDF
 13244                           postinc2	equ	0xFDE
 13245                           postdec2	equ	0xFDD
 13246                           fsr2h	equ	0xFDA
 13247                           fsr2l	equ	0xFD9
 13248                           status	equ	0xFD8
 13249                           
 13250 ;; *************** function _irobot_leds *****************
 13251 ;; Defined at:
 13252 ;;		line 238 in file "Library/iRobotSerial.c"
 13253 ;; Parameters:    Size  Location     Type
 13254 ;;  isScript        1    wreg     unsigned char 
 13255 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13256 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13257 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13258 ;; Auto vars:     Size  Location     Type
 13259 ;;  isScript        1   19[BANK0 ] unsigned char 
 13260 ;; Return value:  Size  Location     Type
 13261 ;;                  1    wreg      void 
 13262 ;; Registers used:
 13263 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13264 ;; Tracked objects:
 13265 ;;		On entry : 0/0
 13266 ;;		On exit  : 0/0
 13267 ;;		Unchanged: 0/0
 13268 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13269 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13270 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13271 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13272 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13273 ;;Total ram usage:        4 bytes
 13274 ;; Hardware stack levels used:    1
 13275 ;; Hardware stack levels required when called:    8
 13276 ;; This function calls:
 13277 ;;		_eusart_putch
 13278 ;;		_load_iRScriptStack
 13279 ;; This function is called by:
 13280 ;;		_irobot_led_power_on
 13281 ;;		_irobot_led_power_off
 13282 ;; This function uses a non-reentrant model
 13283 ;;
 13284                           
 13285                           	psect	text51
 13286  015ACC                     __ptext51:
 13287                           	opt stack 0
 13288  015ACC                     _irobot_leds:
 13289                           	opt stack 20
 13290                           
 13291                           ;incstack = 0
 13292                           ;irobot_leds@isScript stored from wreg
 13293  015ACC  0100               	movlb	0	; () banked
 13294  015ACE  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13295                           
 13296                           ;iRobotSerial.c: 239: if (isScript) {
 13297  015AD0  0100               	movlb	0	; () banked
 13298  015AD2  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13299  015AD4  0100               	movlb	0	; () banked
 13300  015AD6  B4D8               	btfsc	status,2,c
 13301  015AD8  D015               	goto	l2144
 13302                           
 13303                           ; BSR set to: 0
 13304                           ;iRobotSerial.c: 240: load_iRScriptStack(4, iR_LEDS,
 13305                           ;iRobotSerial.c: 241: LEDBit, powerColour, powerLuminosity);
 13306  015ADA  0E00               	movlw	0
 13307  015ADC  0100               	movlb	0	; () banked
 13308  015ADE  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13309  015AE0  0E8B               	movlw	139
 13310  015AE2  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13311  015AE4  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13312  015AE8  0100               	movlb	0	; () banked
 13313  015AEA  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13314  015AEC  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13315  015AF0  0100               	movlb	0	; () banked
 13316  015AF2  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13317  015AF4  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13318  015AF8  0100               	movlb	0	; () banked
 13319  015AFA  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13320  015AFC  0E04               	movlw	4
 13321  015AFE  EC72  F0AB         	call	_load_iRScriptStack
 13322                           
 13323                           ;iRobotSerial.c: 242: }
 13324  015B02  0012               	return	
 13325  015B04                     l2144:
 13326                           
 13327                           ;iRobotSerial.c: 243: else{
 13328                           ;iRobotSerial.c: 244: eusart_putch(iR_LEDS);
 13329  015B04  0E8B               	movlw	139
 13330  015B06  EC9D  F0B3         	call	_eusart_putch
 13331                           
 13332                           ;iRobotSerial.c: 245: eusart_putch(LEDBit);
 13333  015B0A  0100               	movlb	0	; () banked
 13334  015B0C  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13335  015B0E  EC9D  F0B3         	call	_eusart_putch
 13336                           
 13337                           ;iRobotSerial.c: 246: eusart_putch(powerColour);
 13338  015B12  0100               	movlb	0	; () banked
 13339  015B14  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13340  015B16  EC9D  F0B3         	call	_eusart_putch
 13341                           
 13342                           ;iRobotSerial.c: 247: eusart_putch(powerLuminosity);
 13343  015B1A  0100               	movlb	0	; () banked
 13344  015B1C  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13345  015B1E  EC9D  F0B3         	call	_eusart_putch
 13346  015B22  0012               	return	
 13347  015B24                     __end_of_irobot_leds:
 13348                           	opt stack 0
 13349                           tblptru	equ	0xFF8
 13350                           tblptrh	equ	0xFF7
 13351                           tblptrl	equ	0xFF6
 13352                           tablat	equ	0xFF5
 13353                           prodh	equ	0xFF4
 13354                           prodl	equ	0xFF3
 13355                           intcon	equ	0xFF2
 13356                           postinc0	equ	0xFEE
 13357                           wreg	equ	0xFE8
 13358                           postdec1	equ	0xFE5
 13359                           fsr1h	equ	0xFE2
 13360                           fsr1l	equ	0xFE1
 13361                           indf2	equ	0xFDF
 13362                           postinc2	equ	0xFDE
 13363                           postdec2	equ	0xFDD
 13364                           fsr2h	equ	0xFDA
 13365                           fsr2l	equ	0xFD9
 13366                           status	equ	0xFD8
 13367                           
 13368 ;; *************** function _load_iRScriptStack *****************
 13369 ;; Defined at:
 13370 ;;		line 175 in file "Library/iRobotSerial.c"
 13371 ;; Parameters:    Size  Location     Type
 13372 ;;  bytesToLoad     1    wreg     unsigned char 
 13373 ;; Auto vars:     Size  Location     Type
 13374 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13375 ;;  i               1   15[BANK0 ] unsigned char 
 13376 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13377 ;;		 -> ?_load_iRScriptStack(1), 
 13378 ;; Return value:  Size  Location     Type
 13379 ;;                  1    wreg      void 
 13380 ;; Registers used:
 13381 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13382 ;; Tracked objects:
 13383 ;;		On entry : 0/0
 13384 ;;		On exit  : 0/0
 13385 ;;		Unchanged: 0/0
 13386 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13387 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13390 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13391 ;;Total ram usage:       16 bytes
 13392 ;; Hardware stack levels used:    1
 13393 ;; Hardware stack levels required when called:    7
 13394 ;; This function calls:
 13395 ;;		Nothing
 13396 ;; This function is called by:
 13397 ;;		_irobot_move
 13398 ;;		_irobot_leds
 13399 ;;		_irobot_angle_wait
 13400 ;;		_irobot_distance_wait
 13401 ;; This function uses a non-reentrant model
 13402 ;;
 13403                           
 13404                           	psect	text52
 13405  0156E4                     __ptext52:
 13406                           	opt stack 0
 13407  0156E4                     _load_iRScriptStack:
 13408                           	opt stack 19
 13409                           
 13410                           ;incstack = 0
 13411                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13412  0156E4  0100               	movlb	0	; () banked
 13413  0156E6  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13414                           
 13415                           ;iRobotSerial.c: 176: va_list loadByte;
 13416                           ;iRobotSerial.c: 177: *loadByte = __va_start();
 13417  0156E8  0EBA               	movlw	low ?_load_iRScriptStack
 13418  0156EA  0100               	movlb	0	; () banked
 13419  0156EC  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13420  0156EE  0E00               	movlw	high ?_load_iRScriptStack
 13421  0156F0  0100               	movlb	0	; () banked
 13422  0156F2  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13423                           
 13424                           ;iRobotSerial.c: 178: for (UINT8 i = 0; i < bytesToLoad; i++) {
 13425  0156F4  0E00               	movlw	0
 13426  0156F6  0100               	movlb	0	; () banked
 13427  0156F8  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13428  0156FA  D01F               	goto	l2118
 13429  0156FC                     
 13430                           ; BSR set to: 0
 13431                           ;iRobotSerial.c: 179: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13432                           
 13433                           ; BSR set to: 0
 13434  0156FC  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13435  015700  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13436  015704  0100               	movlb	0	; () banked
 13437  015706  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13438  015708  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13439  01570C  0100               	movlb	0	; () banked
 13440  01570E  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13441  015710  0100               	movlb	0	; () banked
 13442  015712  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13443  015714  0E00               	movlw	0
 13444  015716  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13445  015718  0E00               	movlw	low _iRScriptStack
 13446  01571A  0100               	movlb	0	; () banked
 13447  01571C  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13448  01571E  6EE1               	movwf	fsr1l,c
 13449  015720  0E04               	movlw	high _iRScriptStack
 13450  015722  0100               	movlb	0	; () banked
 13451  015724  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13452  015726  6EE2               	movwf	fsr1h,c
 13453  015728  CFDF FFE7          	movff	indf2,indf1
 13454                           
 13455                           ; BSR set to: 0
 13456  01572C  0E02               	movlw	2
 13457  01572E  0100               	movlb	0	; () banked
 13458  015730  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13459  015732  0E00               	movlw	0
 13460  015734  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13461                           
 13462                           ; BSR set to: 0
 13463  015736  0100               	movlb	0	; () banked
 13464  015738  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13465  01573A                     l2118:
 13466                           
 13467                           ; BSR set to: 0
 13468                           
 13469                           ; BSR set to: 0
 13470  01573A  0100               	movlb	0	; () banked
 13471  01573C  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13472  01573E  0100               	movlb	0	; () banked
 13473  015740  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13474  015742  A0D8               	btfss	status,0,c
 13475  015744  D7DB               	goto	l2119
 13476                           
 13477                           ; BSR set to: 0
 13478                           ;iRobotSerial.c: 180: }
 13479                           ;iRobotSerial.c: 181: ;
 13480                           ;iRobotSerial.c: 182: iRScriptIndex += bytesToLoad;
 13481                           
 13482                           ; BSR set to: 0
 13483  015746  0100               	movlb	0	; () banked
 13484  015748  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13485  01574A  2637               	addwf	_iRScriptIndex,f,c
 13486                           
 13487                           ; BSR set to: 0
 13488  01574C  0012               	return		;funcret
 13489  01574E                     __end_of_load_iRScriptStack:
 13490                           	opt stack 0
 13491                           tblptru	equ	0xFF8
 13492                           tblptrh	equ	0xFF7
 13493                           tblptrl	equ	0xFF6
 13494                           tablat	equ	0xFF5
 13495                           prodh	equ	0xFF4
 13496                           prodl	equ	0xFF3
 13497                           intcon	equ	0xFF2
 13498                           postinc0	equ	0xFEE
 13499                           wreg	equ	0xFE8
 13500                           indf1	equ	0xFE7
 13501                           postdec1	equ	0xFE5
 13502                           fsr1h	equ	0xFE2
 13503                           fsr1l	equ	0xFE1
 13504                           indf2	equ	0xFDF
 13505                           postinc2	equ	0xFDE
 13506                           postdec2	equ	0xFDD
 13507                           fsr2h	equ	0xFDA
 13508                           fsr2l	equ	0xFD9
 13509                           status	equ	0xFD8
 13510                           
 13511 ;; *************** function _irobot_init_song_0 *****************
 13512 ;; Defined at:
 13513 ;;		line 251 in file "Library/iRobotSerial.c"
 13514 ;; Parameters:    Size  Location     Type
 13515 ;;		None
 13516 ;; Auto vars:     Size  Location     Type
 13517 ;;		None
 13518 ;; Return value:  Size  Location     Type
 13519 ;;                  1    wreg      void 
 13520 ;; Registers used:
 13521 ;;		wreg, cstack
 13522 ;; Tracked objects:
 13523 ;;		On entry : 0/0
 13524 ;;		On exit  : 0/0
 13525 ;;		Unchanged: 0/0
 13526 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13527 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13528 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13529 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13530 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13531 ;;Total ram usage:        0 bytes
 13532 ;; Hardware stack levels used:    1
 13533 ;; Hardware stack levels required when called:    8
 13534 ;; This function calls:
 13535 ;;		_eusart_putch
 13536 ;; This function is called by:
 13537 ;;		_init
 13538 ;; This function uses a non-reentrant model
 13539 ;;
 13540                           
 13541                           	psect	text53
 13542  01646C                     __ptext53:
 13543                           	opt stack 0
 13544  01646C                     _irobot_init_song_0:
 13545                           	opt stack 21
 13546                           
 13547                           ;iRobotSerial.c: 252: eusart_putch(iR_SONG_INIT);
 13548                           
 13549                           ; BSR set to: 0
 13550                           ;incstack = 0
 13551  01646C  0E8C               	movlw	140
 13552  01646E  EC9D  F0B3         	call	_eusart_putch
 13553                           
 13554                           ;iRobotSerial.c: 253: eusart_putch(0);
 13555  016472  0E00               	movlw	0
 13556  016474  EC9D  F0B3         	call	_eusart_putch
 13557                           
 13558                           ;iRobotSerial.c: 254: eusart_putch(1);
 13559  016478  0E01               	movlw	1
 13560  01647A  EC9D  F0B3         	call	_eusart_putch
 13561                           
 13562                           ;iRobotSerial.c: 255: eusart_putch(60);
 13563  01647E  0E3C               	movlw	60
 13564  016480  EC9D  F0B3         	call	_eusart_putch
 13565                           
 13566                           ;iRobotSerial.c: 256: eusart_putch(4);
 13567  016484  0E04               	movlw	4
 13568  016486  EC9D  F0B3         	call	_eusart_putch
 13569  01648A  0012               	return		;funcret
 13570  01648C                     __end_of_irobot_init_song_0:
 13571                           	opt stack 0
 13572                           tblptru	equ	0xFF8
 13573                           tblptrh	equ	0xFF7
 13574                           tblptrl	equ	0xFF6
 13575                           tablat	equ	0xFF5
 13576                           prodh	equ	0xFF4
 13577                           prodl	equ	0xFF3
 13578                           intcon	equ	0xFF2
 13579                           postinc0	equ	0xFEE
 13580                           wreg	equ	0xFE8
 13581                           indf1	equ	0xFE7
 13582                           postdec1	equ	0xFE5
 13583                           fsr1h	equ	0xFE2
 13584                           fsr1l	equ	0xFE1
 13585                           indf2	equ	0xFDF
 13586                           postinc2	equ	0xFDE
 13587                           postdec2	equ	0xFDD
 13588                           fsr2h	equ	0xFDA
 13589                           fsr2l	equ	0xFD9
 13590                           status	equ	0xFD8
 13591                           
 13592 ;; *************** function _irobot_init *****************
 13593 ;; Defined at:
 13594 ;;		line 197 in file "Library/iRobotSerial.c"
 13595 ;; Parameters:    Size  Location     Type
 13596 ;;		None
 13597 ;; Auto vars:     Size  Location     Type
 13598 ;;		None
 13599 ;; Return value:  Size  Location     Type
 13600 ;;                  1    wreg      void 
 13601 ;; Registers used:
 13602 ;;		wreg, cstack
 13603 ;; Tracked objects:
 13604 ;;		On entry : 0/0
 13605 ;;		On exit  : 0/0
 13606 ;;		Unchanged: 0/0
 13607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;Total ram usage:        0 bytes
 13613 ;; Hardware stack levels used:    1
 13614 ;; Hardware stack levels required when called:    8
 13615 ;; This function calls:
 13616 ;;		_eusart_putch
 13617 ;; This function is called by:
 13618 ;;		_init
 13619 ;; This function uses a non-reentrant model
 13620 ;;
 13621                           
 13622                           	psect	text54
 13623  01672C                     __ptext54:
 13624                           	opt stack 0
 13625  01672C                     _irobot_init:
 13626                           	opt stack 21
 13627                           
 13628                           ;iRobotSerial.c: 198: eusart_putch(iR_START);
 13629                           
 13630                           ;incstack = 0
 13631  01672C  0E80               	movlw	128
 13632  01672E  EC9D  F0B3         	call	_eusart_putch
 13633                           
 13634                           ;iRobotSerial.c: 199: eusart_putch(iR_FULL_MODE);
 13635  016732  0E84               	movlw	132
 13636  016734  EC9D  F0B3         	call	_eusart_putch
 13637  016738  0012               	return		;funcret
 13638  01673A                     __end_of_irobot_init:
 13639                           	opt stack 0
 13640                           tblptru	equ	0xFF8
 13641                           tblptrh	equ	0xFF7
 13642                           tblptrl	equ	0xFF6
 13643                           tablat	equ	0xFF5
 13644                           prodh	equ	0xFF4
 13645                           prodl	equ	0xFF3
 13646                           intcon	equ	0xFF2
 13647                           postinc0	equ	0xFEE
 13648                           wreg	equ	0xFE8
 13649                           indf1	equ	0xFE7
 13650                           postdec1	equ	0xFE5
 13651                           fsr1h	equ	0xFE2
 13652                           fsr1l	equ	0xFE1
 13653                           indf2	equ	0xFDF
 13654                           postinc2	equ	0xFDE
 13655                           postdec2	equ	0xFDD
 13656                           fsr2h	equ	0xFDA
 13657                           fsr2l	equ	0xFD9
 13658                           status	equ	0xFD8
 13659                           
 13660 ;; *************** function _eusart_putch *****************
 13661 ;; Defined at:
 13662 ;;		line 120 in file "Library/iRobotSerial.c"
 13663 ;; Parameters:    Size  Location     Type
 13664 ;;  eusartSendCh    1    wreg     unsigned char 
 13665 ;; Auto vars:     Size  Location     Type
 13666 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13667 ;; Return value:  Size  Location     Type
 13668 ;;                  1    wreg      void 
 13669 ;; Registers used:
 13670 ;;		wreg
 13671 ;; Tracked objects:
 13672 ;;		On entry : 0/0
 13673 ;;		On exit  : 0/0
 13674 ;;		Unchanged: 0/0
 13675 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13676 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13677 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13678 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13679 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13680 ;;Total ram usage:        1 bytes
 13681 ;; Hardware stack levels used:    1
 13682 ;; Hardware stack levels required when called:    7
 13683 ;; This function calls:
 13684 ;;		Nothing
 13685 ;; This function is called by:
 13686 ;;		_irobot_query_and_update
 13687 ;;		_irobot_init
 13688 ;;		_irobot_move
 13689 ;;		_irobot_leds
 13690 ;;		_irobot_init_song_0
 13691 ;;		_irobot_song_play
 13692 ;;		_irobot_script_play
 13693 ;; This function uses a non-reentrant model
 13694 ;;
 13695                           
 13696                           	psect	text55
 13697  01673A                     __ptext55:
 13698                           	opt stack 0
 13699  01673A                     _eusart_putch:
 13700                           	opt stack 20
 13701                           
 13702                           ;incstack = 0
 13703                           ;eusart_putch@eusartSendChar stored from wreg
 13704  01673A  0100               	movlb	0	; () banked
 13705  01673C  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13706  01673E                     
 13707                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13708  01673E  A2AD               	btfss	4013,1,c	;volatile
 13709  016740  D7FE               	goto	l12712
 13710                           
 13711                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13712  016742  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13713  016746  0012               	return		;funcret
 13714  016748                     __end_of_eusart_putch:
 13715                           	opt stack 0
 13716                           tblptru	equ	0xFF8
 13717                           tblptrh	equ	0xFF7
 13718                           tblptrl	equ	0xFF6
 13719                           tablat	equ	0xFF5
 13720                           prodh	equ	0xFF4
 13721                           prodl	equ	0xFF3
 13722                           intcon	equ	0xFF2
 13723                           postinc0	equ	0xFEE
 13724                           wreg	equ	0xFE8
 13725                           indf1	equ	0xFE7
 13726                           postdec1	equ	0xFE5
 13727                           fsr1h	equ	0xFE2
 13728                           fsr1l	equ	0xFE1
 13729                           indf2	equ	0xFDF
 13730                           postinc2	equ	0xFDE
 13731                           postdec2	equ	0xFDD
 13732                           fsr2h	equ	0xFDA
 13733                           fsr2l	equ	0xFD9
 13734                           status	equ	0xFD8
 13735                           
 13736 ;; *************** function _eusart_init *****************
 13737 ;; Defined at:
 13738 ;;		line 103 in file "Library/iRobotSerial.c"
 13739 ;; Parameters:    Size  Location     Type
 13740 ;;		None
 13741 ;; Auto vars:     Size  Location     Type
 13742 ;;		None
 13743 ;; Return value:  Size  Location     Type
 13744 ;;                  1    wreg      void 
 13745 ;; Registers used:
 13746 ;;		wreg, status,2
 13747 ;; Tracked objects:
 13748 ;;		On entry : 0/0
 13749 ;;		On exit  : 0/0
 13750 ;;		Unchanged: 0/0
 13751 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13756 ;;Total ram usage:        0 bytes
 13757 ;; Hardware stack levels used:    1
 13758 ;; Hardware stack levels required when called:    7
 13759 ;; This function calls:
 13760 ;;		Nothing
 13761 ;; This function is called by:
 13762 ;;		_init
 13763 ;; This function uses a non-reentrant model
 13764 ;;
 13765                           
 13766                           	psect	text56
 13767  0164AA                     __ptext56:
 13768                           	opt stack 0
 13769  0164AA                     _eusart_init:
 13770                           	opt stack 22
 13771                           
 13772                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13773                           
 13774                           ;incstack = 0
 13775  0164AA  9C94               	bcf	3988,6,c	;volatile
 13776                           
 13777                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13778  0164AC  8E94               	bsf	3988,7,c	;volatile
 13779                           
 13780                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13781  0164AE  0E24               	movlw	36
 13782  0164B0  6EAD               	movwf	4013,c	;volatile
 13783                           
 13784                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13785  0164B2  0E98               	movlw	152
 13786  0164B4  6EAC               	movwf	4012,c	;volatile
 13787                           
 13788                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13789  0164B6  9A7E               	bcf	3966,5,c	;volatile
 13790                           
 13791                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13792  0164B8  987E               	bcf	3966,4,c	;volatile
 13793                           
 13794                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13795  0164BA  927E               	bcf	3966,1,c	;volatile
 13796                           
 13797                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13798  0164BC  907E               	bcf	3966,0,c	;volatile
 13799                           
 13800                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13801  0164BE  84AD               	bsf	4013,2,c	;volatile
 13802                           
 13803                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13804  0164C0  967E               	bcf	3966,3,c	;volatile
 13805                           
 13806                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13807  0164C2  0E33               	movlw	51
 13808  0164C4  6EB0               	movwf	4016,c	;volatile
 13809  0164C6  0012               	return		;funcret
 13810  0164C8                     __end_of_eusart_init:
 13811                           	opt stack 0
 13812                           tblptru	equ	0xFF8
 13813                           tblptrh	equ	0xFF7
 13814                           tblptrl	equ	0xFF6
 13815                           tablat	equ	0xFF5
 13816                           prodh	equ	0xFF4
 13817                           prodl	equ	0xFF3
 13818                           intcon	equ	0xFF2
 13819                           postinc0	equ	0xFEE
 13820                           wreg	equ	0xFE8
 13821                           indf1	equ	0xFE7
 13822                           postdec1	equ	0xFE5
 13823                           fsr1h	equ	0xFE2
 13824                           fsr1l	equ	0xFE1
 13825                           indf2	equ	0xFDF
 13826                           postinc2	equ	0xFDE
 13827                           postdec2	equ	0xFDD
 13828                           fsr2h	equ	0xFDA
 13829                           fsr2l	equ	0xFD9
 13830                           status	equ	0xFD8
 13831                           
 13832 ;; *************** function _Motor_Init *****************
 13833 ;; Defined at:
 13834 ;;		line 26 in file "Library/Motor.c"
 13835 ;; Parameters:    Size  Location     Type
 13836 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13837 ;;		 -> Stepper(6), 
 13838 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13839 ;; Auto vars:     Size  Location     Type
 13840 ;;		None
 13841 ;; Return value:  Size  Location     Type
 13842 ;;                  1    wreg      void 
 13843 ;; Registers used:
 13844 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13845 ;; Tracked objects:
 13846 ;;		On entry : 0/0
 13847 ;;		On exit  : 0/0
 13848 ;;		Unchanged: 0/0
 13849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13850 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13853 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13854 ;;Total ram usage:        4 bytes
 13855 ;; Hardware stack levels used:    1
 13856 ;; Hardware stack levels required when called:   12
 13857 ;; This function calls:
 13858 ;;		_Port_SetPin
 13859 ;;		_Port_SetPinType
 13860 ;;		_Timer0_Init
 13861 ;; This function is called by:
 13862 ;;		_init
 13863 ;; This function uses a non-reentrant model
 13864 ;;
 13865                           
 13866                           	psect	text57
 13867  013D8A                     __ptext57:
 13868                           	opt stack 0
 13869  013D8A                     _Motor_Init:
 13870                           	opt stack 17
 13871                           
 13872                           ;Motor.c: 28: pMotor->mDelta = 0;
 13873                           
 13874                           ;incstack = 0
 13875  013D8A  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13876  013D8E  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13877  013D92  0E00               	movlw	0
 13878  013D94  6EDE               	movwf	postinc2,c
 13879  013D96  0E00               	movlw	0
 13880  013D98  6EDD               	movwf	postdec2,c
 13881                           
 13882                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13883  013D9A  0100               	movlb	0	; () banked
 13884  013D9C  EE20 F002          	lfsr	2,2
 13885  013DA0  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13886  013DA2  26D9               	addwf	fsr2l,f,c
 13887  013DA4  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13888  013DA6  22DA               	addwfc	fsr2h,f,c
 13889  013DA8  0E00               	movlw	0
 13890  013DAA  6EDE               	movwf	postinc2,c
 13891  013DAC  0E00               	movlw	0
 13892  013DAE  6EDD               	movwf	postdec2,c
 13893                           
 13894                           ; BSR set to: 0
 13895                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13896  013DB0  0100               	movlb	0	; () banked
 13897  013DB2  EE20 F004          	lfsr	2,4
 13898  013DB6  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13899  013DB8  26D9               	addwf	fsr2l,f,c
 13900  013DBA  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13901  013DBC  22DA               	addwfc	fsr2h,f,c
 13902  013DBE  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13903  013DC2  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13904                           
 13905                           ; BSR set to: 0
 13906                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13907  013DC6  0E91               	movlw	low _PortE
 13908  013DC8  0100               	movlb	0	; () banked
 13909  013DCA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13910  013DCC  0E00               	movlw	high _PortE
 13911  013DCE  0100               	movlb	0	; () banked
 13912  013DD0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13913  013DD2  0E00               	movlw	0
 13914  013DD4  0100               	movlb	0	; () banked
 13915  013DD6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13916  013DD8  0E03               	movlw	3
 13917  013DDA  0100               	movlb	0	; () banked
 13918  013DDC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13919  013DDE  EC95  F093         	call	_Port_SetPinType	;wreg free
 13920                           
 13921                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13922  013DE2  0E91               	movlw	low _PortE
 13923  013DE4  0100               	movlb	0	; () banked
 13924  013DE6  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13925  013DE8  0E00               	movlw	high _PortE
 13926  013DEA  0100               	movlb	0	; () banked
 13927  013DEC  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13928  013DEE  0E01               	movlw	1
 13929  013DF0  0100               	movlb	0	; () banked
 13930  013DF2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13931  013DF4  0E03               	movlw	3
 13932  013DF6  0100               	movlb	0	; () banked
 13933  013DF8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13934  013DFA  EC95  F093         	call	_Port_SetPinType	;wreg free
 13935                           
 13936                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13937  013DFE  0E91               	movlw	low _PortE
 13938  013E00  0100               	movlb	0	; () banked
 13939  013E02  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13940  013E04  0E00               	movlw	high _PortE
 13941  013E06  0100               	movlb	0	; () banked
 13942  013E08  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13943  013E0A  0E00               	movlw	0
 13944  013E0C  0100               	movlb	0	; () banked
 13945  013E0E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13946  013E10  0E00               	movlw	0
 13947  013E12  0100               	movlb	0	; () banked
 13948  013E14  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13949  013E16  EC02  F0A0         	call	_Port_SetPin	;wreg free
 13950                           
 13951                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13952  013E1A  0E91               	movlw	low _PortE
 13953  013E1C  0100               	movlb	0	; () banked
 13954  013E1E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13955  013E20  0E00               	movlw	high _PortE
 13956  013E22  0100               	movlb	0	; () banked
 13957  013E24  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13958  013E26  0E01               	movlw	1
 13959  013E28  0100               	movlb	0	; () banked
 13960  013E2A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13961  013E2C  0E00               	movlw	0
 13962  013E2E  0100               	movlb	0	; () banked
 13963  013E30  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13964  013E32  EC02  F0A0         	call	_Port_SetPin	;wreg free
 13965                           
 13966                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13967  013E36  0EF2               	movlw	low _Motor_Step
 13968  013E38  0100               	movlb	0	; () banked
 13969  013E3A  6F66               	movwf	_lStepFunction& (0+255),b
 13970  013E3C  0E35               	movlw	high _Motor_Step
 13971  013E3E  0100               	movlb	0	; () banked
 13972  013E40  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13973  013E42  0E01               	movlw	low (_Motor_Step shr (0+16))
 13974  013E44  0100               	movlb	0	; () banked
 13975  013E46  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13976                           
 13977                           ; BSR set to: 0
 13978                           ;Motor.c: 39: Timer0_Init(1000);
 13979  013E48  0EE8               	movlw	232
 13980  013E4A  0100               	movlb	0	; () banked
 13981  013E4C  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13982  013E4E  0E03               	movlw	3
 13983  013E50  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13984  013E52  0E00               	movlw	0
 13985  013E54  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13986  013E56  0E00               	movlw	0
 13987  013E58  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13988  013E5A  ECFC  F098         	call	_Timer0_Init	;wreg free
 13989  013E5E  0012               	return		;funcret
 13990  013E60                     __end_of_Motor_Init:
 13991                           	opt stack 0
 13992                           tblptru	equ	0xFF8
 13993                           tblptrh	equ	0xFF7
 13994                           tblptrl	equ	0xFF6
 13995                           tablat	equ	0xFF5
 13996                           prodh	equ	0xFF4
 13997                           prodl	equ	0xFF3
 13998                           intcon	equ	0xFF2
 13999                           postinc0	equ	0xFEE
 14000                           wreg	equ	0xFE8
 14001                           indf1	equ	0xFE7
 14002                           postdec1	equ	0xFE5
 14003                           fsr1h	equ	0xFE2
 14004                           fsr1l	equ	0xFE1
 14005                           indf2	equ	0xFDF
 14006                           postinc2	equ	0xFDE
 14007                           postdec2	equ	0xFDD
 14008                           fsr2h	equ	0xFDA
 14009                           fsr2l	equ	0xFD9
 14010                           status	equ	0xFD8
 14011                           
 14012 ;; *************** function _Timer0_Init *****************
 14013 ;; Defined at:
 14014 ;;		line 25 in file "Library/Timer0.c"
 14015 ;; Parameters:    Size  Location     Type
 14016 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 14017 ;; Auto vars:     Size  Location     Type
 14018 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 14019 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 14020 ;; Return value:  Size  Location     Type
 14021 ;;                  1    wreg      void 
 14022 ;; Registers used:
 14023 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14024 ;; Tracked objects:
 14025 ;;		On entry : 0/0
 14026 ;;		On exit  : 0/0
 14027 ;;		Unchanged: 0/0
 14028 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14029 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14030 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14031 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14032 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14033 ;;Total ram usage:       14 bytes
 14034 ;; Hardware stack levels used:    1
 14035 ;; Hardware stack levels required when called:    8
 14036 ;; This function calls:
 14037 ;;		_Timer0_Clear
 14038 ;;		___lldiv
 14039 ;; This function is called by:
 14040 ;;		_Motor_Init
 14041 ;;		_Motor_Speed
 14042 ;; This function uses a non-reentrant model
 14043 ;;
 14044                           
 14045                           	psect	text58
 14046  0131F8                     __ptext58:
 14047                           	opt stack 0
 14048  0131F8                     _Timer0_Init:
 14049                           	opt stack 19
 14050                           
 14051                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 14052                           
 14053                           ;incstack = 0
 14054  0131F8  0E80               	movlw	128
 14055  0131FA  0100               	movlb	0	; () banked
 14056  0131FC  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 14057  0131FE  0E8D               	movlw	141
 14058  013200  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 14059  013202  0E5B               	movlw	91
 14060  013204  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 14061  013206  0E00               	movlw	0
 14062  013208  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 14063                           
 14064                           ; BSR set to: 0
 14065                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 14066                           ;Timer0.c: 31: static UINT8 PRE = 0;
 14067                           ;Timer0.c: 32: static UINT32 DIV = 0;
 14068                           ;Timer0.c: 34: UINT32 DIVIDE;
 14069                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 14070  01320A  9ED5               	bcf	4053,7,c	;volatile
 14071                           
 14072                           ; BSR set to: 0
 14073                           ;Timer0.c: 38: if (pFrequency == 0)
 14074  01320C  0100               	movlb	0	; () banked
 14075  01320E  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 14076  013210  0100               	movlb	0	; () banked
 14077  013212  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 14078  013214  0100               	movlb	0	; () banked
 14079  013216  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 14080  013218  0100               	movlb	0	; () banked
 14081  01321A  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 14082  01321C  B4D8               	btfsc	status,2,c
 14083  01321E  0012               	return	
 14084                           
 14085                           ; BSR set to: 0
 14086                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 14087                           
 14088                           ; BSR set to: 0
 14089                           ;Timer0.c: 39: return;
 14090  013220  96D5               	bcf	4053,3,c	;volatile
 14091                           
 14092                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 14093  013222  9CD5               	bcf	4053,6,c	;volatile
 14094                           
 14095                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 14096  013224  9AD5               	bcf	4053,5,c	;volatile
 14097                           
 14098                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 14099  013226  98D5               	bcf	4053,4,c	;volatile
 14100                           
 14101                           ; BSR set to: 0
 14102                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 14103  013228  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 14104  01322C  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 14105  013230  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 14106  013234  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 14107  013238  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 14108  01323C  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 14109  013240  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 14110  013244  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 14111  013248  EC84  F0A1         	call	___lldiv	;wreg free
 14112  01324C  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 14113  013250  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 14114  013254  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 14115  013258  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 14116                           
 14117                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 14118  01325C  D00C               	goto	l1787
 14119  01325E                     l13542:
 14120                           
 14121                           ;Timer0.c: 50: {
 14122                           ;Timer0.c: 51: INDEX ++;
 14123  01325E  0100               	movlb	0	; () banked
 14124  013260  2B8D               	incf	_INDEX& (0+255),f,b
 14125                           
 14126                           ; BSR set to: 0
 14127                           ;Timer0.c: 52: if (INDEX >= 3)
 14128  013262  0E02               	movlw	2
 14129  013264  0100               	movlb	0	; () banked
 14130  013266  658D               	cpfsgt	_INDEX& (0+255),b
 14131  013268  D001               	goto	l1785
 14132  01326A  D02F               	goto	u10140
 14133  01326C                     l1785:
 14134                           
 14135                           ; BSR set to: 0
 14136                           ;Timer0.c: 56: if (INDEX >= 8)
 14137                           
 14138                           ; BSR set to: 0
 14139  01326C  0E07               	movlw	7
 14140  01326E  0100               	movlb	0	; () banked
 14141  013270  658D               	cpfsgt	_INDEX& (0+255),b
 14142  013272  D001               	goto	l1787
 14143  013274  0012               	return	
 14144  013276                     l1787:
 14145                           
 14146                           ; BSR set to: 0
 14147                           
 14148                           ; BSR set to: 0
 14149  013276  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 14150  01327A  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 14151  01327E  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 14152  013282  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 14153  013286  0100               	movlb	0	; () banked
 14154  013288  518D               	movf	_INDEX& (0+255),w,b
 14155  01328A  0D02               	mullw	2
 14156  01328C  0EE5               	movlw	low Timer0_Init@PRESCALE
 14157  01328E  24F3               	addwf	prodl,w,c
 14158  013290  6EF6               	movwf	tblptrl,c
 14159  013292  0EFC               	movlw	high Timer0_Init@PRESCALE
 14160  013294  20F4               	addwfc	prodh,w,c
 14161  013296  6EF7               	movwf	tblptrh,c
 14162  013298                     	if	1	;There are 3 active tblptr bytes
 14163  013298  6AF8               	clrf	tblptru,c
 14164  01329A  0E00               	movlw	low (__mediumconst shr (0+16))
 14165  01329C  22F8               	addwfc	tblptru,f,c
 14166  01329E                     	endif
 14167  01329E  0009               	tblrd		*+
 14168  0132A0  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 14169  0132A4  0009               	tblrd		*+
 14170  0132A6  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 14171  0132AA  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 14172  0132AE  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 14173  0132B2  0100               	movlb	0	; () banked
 14174  0132B4  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14175  0132B6  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14176  0132B8  EC84  F0A1         	call	___lldiv	;wreg free
 14177  0132BC  0100               	movlb	0	; () banked
 14178  0132BE  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 14179  0132C0  E1CE               	bnz	l13542
 14180  0132C2  0100               	movlb	0	; () banked
 14181  0132C4  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 14182  0132C6  B0D8               	btfsc	status,0,c
 14183  0132C8  D7CA               	goto	l1784
 14184  0132CA                     u10140:
 14185                           
 14186                           ; BSR set to: 0
 14187                           ;Timer0.c: 58: }
 14188                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 14189                           
 14190                           ; BSR set to: 0
 14191  0132CA  0100               	movlb	0	; () banked
 14192  0132CC  518D               	movf	_INDEX& (0+255),w,b
 14193  0132CE  0D02               	mullw	2
 14194  0132D0  0EE5               	movlw	low Timer0_Init@PRESCALE
 14195  0132D2  24F3               	addwf	prodl,w,c
 14196  0132D4  6EF6               	movwf	tblptrl,c
 14197  0132D6  0EFC               	movlw	high Timer0_Init@PRESCALE
 14198  0132D8  20F4               	addwfc	prodh,w,c
 14199  0132DA  6EF7               	movwf	tblptrh,c
 14200  0132DC                     	if	1	;There are 3 active tblptr bytes
 14201  0132DC  6AF8               	clrf	tblptru,c
 14202  0132DE  0E00               	movlw	low (__mediumconst shr (0+16))
 14203  0132E0  22F8               	addwfc	tblptru,f,c
 14204  0132E2                     	endif
 14205  0132E2  0008               	tblrd		*
 14206  0132E4  CFF5 F08C          	movff	tablat,Timer0_Init@PRE
 14207                           
 14208                           ; BSR set to: 0
 14209                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 14210  0132E8  0EFF               	movlw	255
 14211  0132EA  0100               	movlb	0	; () banked
 14212  0132EC  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 14213  0132EE  0103               	movlb	3	; () banked
 14214  0132F0  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 14215  0132F2  0EFF               	movlw	255
 14216  0132F4  0100               	movlb	0	; () banked
 14217  0132F6  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14218  0132F8  0103               	movlb	3	; () banked
 14219  0132FA  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14220  0132FC  0EFF               	movlw	255
 14221  0132FE  0100               	movlb	0	; () banked
 14222  013300  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14223  013302  0103               	movlb	3	; () banked
 14224  013304  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14225  013306  0EFF               	movlw	255
 14226  013308  0100               	movlb	0	; () banked
 14227  01330A  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14228  01330C  0103               	movlb	3	; () banked
 14229  01330E  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14230                           
 14231                           ; BSR set to: 3
 14232                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14233  013310  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14234  013314  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14235  013318  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14236  01331C  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14237  013320  0100               	movlb	0	; () banked
 14238  013322  518C               	movf	Timer0_Init@PRE& (0+255),w,b
 14239  013324  0100               	movlb	0	; () banked
 14240  013326  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14241  013328  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14242  01332A  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14243  01332C  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14244  01332E  EC84  F0A1         	call	___lldiv	;wreg free
 14245  013332  0100               	movlb	0	; () banked
 14246  013334  1FBA               	comf	?___lldiv& (0+255),f,b
 14247  013336  0100               	movlb	0	; () banked
 14248  013338  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14249  01333A  0100               	movlb	0	; () banked
 14250  01333C  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14251  01333E  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14252  013340  0EFF               	movlw	255
 14253  013342  0100               	movlb	0	; () banked
 14254  013344  25BA               	addwf	?___lldiv& (0+255),w,b
 14255  013346  6E29               	movwf	_COUNTER,c
 14256  013348  0EFF               	movlw	255
 14257  01334A  0100               	movlb	0	; () banked
 14258  01334C  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14259  01334E  6E2A               	movwf	_COUNTER+1,c
 14260                           
 14261                           ; BSR set to: 0
 14262                           ;Timer0.c: 68: Timer0_Clear();
 14263  013350  ECBF  F0B3         	call	_Timer0_Clear	;wreg free
 14264                           
 14265                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14266  013354  8ED5               	bsf	4053,7,c	;volatile
 14267  013356  0012               	return		;funcret
 14268  013358                     __end_of_Timer0_Init:
 14269                           	opt stack 0
 14270                           tblptru	equ	0xFF8
 14271                           tblptrh	equ	0xFF7
 14272                           tblptrl	equ	0xFF6
 14273                           tablat	equ	0xFF5
 14274                           prodh	equ	0xFF4
 14275                           prodl	equ	0xFF3
 14276                           intcon	equ	0xFF2
 14277                           postinc0	equ	0xFEE
 14278                           wreg	equ	0xFE8
 14279                           indf1	equ	0xFE7
 14280                           postdec1	equ	0xFE5
 14281                           fsr1h	equ	0xFE2
 14282                           fsr1l	equ	0xFE1
 14283                           indf2	equ	0xFDF
 14284                           postinc2	equ	0xFDE
 14285                           postdec2	equ	0xFDD
 14286                           fsr2h	equ	0xFDA
 14287                           fsr2l	equ	0xFD9
 14288                           status	equ	0xFD8
 14289                           
 14290 ;; *************** function _Timer0_Clear *****************
 14291 ;; Defined at:
 14292 ;;		line 20 in file "Library/Timer0.c"
 14293 ;; Parameters:    Size  Location     Type
 14294 ;;		None
 14295 ;; Auto vars:     Size  Location     Type
 14296 ;;		None
 14297 ;; Return value:  Size  Location     Type
 14298 ;;                  1    wreg      void 
 14299 ;; Registers used:
 14300 ;;		None
 14301 ;; Tracked objects:
 14302 ;;		On entry : 0/0
 14303 ;;		On exit  : 0/0
 14304 ;;		Unchanged: 0/0
 14305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14307 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14309 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14310 ;;Total ram usage:        0 bytes
 14311 ;; Hardware stack levels used:    1
 14312 ;; Hardware stack levels required when called:    7
 14313 ;; This function calls:
 14314 ;;		Nothing
 14315 ;; This function is called by:
 14316 ;;		_Timer0_Init
 14317 ;; This function uses a non-reentrant model
 14318 ;;
 14319                           
 14320                           	psect	text59
 14321  01677E                     __ptext59:
 14322                           	opt stack 0
 14323  01677E                     _Timer0_Clear:
 14324                           	opt stack 19
 14325                           
 14326                           ;Timer0.c: 22: TMR0 = COUNTER;
 14327                           
 14328                           ;incstack = 0
 14329  01677E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14330  016782  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14331                           
 14332                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14333  016786  94F2               	bcf	intcon,2,c	;volatile
 14334  016788  0012               	return		;funcret
 14335  01678A                     __end_of_Timer0_Clear:
 14336                           	opt stack 0
 14337                           tblptru	equ	0xFF8
 14338                           tblptrh	equ	0xFF7
 14339                           tblptrl	equ	0xFF6
 14340                           tablat	equ	0xFF5
 14341                           prodh	equ	0xFF4
 14342                           prodl	equ	0xFF3
 14343                           intcon	equ	0xFF2
 14344                           postinc0	equ	0xFEE
 14345                           wreg	equ	0xFE8
 14346                           indf1	equ	0xFE7
 14347                           postdec1	equ	0xFE5
 14348                           fsr1h	equ	0xFE2
 14349                           fsr1l	equ	0xFE1
 14350                           indf2	equ	0xFDF
 14351                           postinc2	equ	0xFDE
 14352                           postdec2	equ	0xFDD
 14353                           fsr2h	equ	0xFDA
 14354                           fsr2l	equ	0xFD9
 14355                           status	equ	0xFD8
 14356                           
 14357 ;; *************** function _MXK_Init *****************
 14358 ;; Defined at:
 14359 ;;		line 33 in file "Library/MXK.c"
 14360 ;; Parameters:    Size  Location     Type
 14361 ;;		None
 14362 ;; Auto vars:     Size  Location     Type
 14363 ;;		None
 14364 ;; Return value:  Size  Location     Type
 14365 ;;                  1    wreg      void 
 14366 ;; Registers used:
 14367 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14368 ;; Tracked objects:
 14369 ;;		On entry : 0/0
 14370 ;;		On exit  : 0/0
 14371 ;;		Unchanged: 0/0
 14372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14373 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14374 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14376 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14377 ;;Total ram usage:        0 bytes
 14378 ;; Hardware stack levels used:    1
 14379 ;; Hardware stack levels required when called:   16
 14380 ;; This function calls:
 14381 ;;		_LED_Init
 14382 ;;		_Port_Init
 14383 ;;		_Port_SetPin
 14384 ;;		_Port_SetPinType
 14385 ;;		_Port_SetQuadType
 14386 ;;		_Port_SetType
 14387 ;;		_delay_ms
 14388 ;; This function is called by:
 14389 ;;		_init
 14390 ;; This function uses a non-reentrant model
 14391 ;;
 14392                           
 14393                           	psect	text60
 14394  012DA0                     __ptext60:
 14395                           	opt stack 0
 14396  012DA0                     _MXK_Init:
 14397                           	opt stack 13
 14398                           
 14399                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14400                           
 14401                           ;incstack = 0
 14402  012DA0  0E01               	movlw	1
 14403  012DA2  6E4B               	movwf	_Bus_State,c
 14404                           
 14405                           ;MXK.c: 36: lQueue = (Function)0;
 14406  012DA4  0E00               	movlw	0
 14407  012DA6  0100               	movlb	0	; () banked
 14408  012DA8  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14409  012DAA  0E00               	movlw	0
 14410  012DAC  0100               	movlb	0	; () banked
 14411  012DAE  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14412  012DB0  0E00               	movlw	0
 14413  012DB2  0100               	movlb	0	; () banked
 14414  012DB4  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14415                           
 14416                           ; BSR set to: 0
 14417                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14418  012DB6  0EB6               	movlw	low _PortA
 14419  012DB8  0101               	movlb	1	; () banked
 14420  012DBA  6F01               	movwf	Port_Init@pInput& (0+255),b
 14421  012DBC  0E03               	movlw	high _PortA
 14422  012DBE  0101               	movlb	1	; () banked
 14423  012DC0  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14424  012DC2  0E00               	movlw	0
 14425  012DC4  0101               	movlb	1	; () banked
 14426  012DC6  6F03               	movwf	Port_Init@pPort& (0+255),b
 14427  012DC8  EC44  F095         	call	_Port_Init	;wreg free
 14428                           
 14429                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14430  012DCC  0EAC               	movlw	low _PortB
 14431  012DCE  0101               	movlb	1	; () banked
 14432  012DD0  6F01               	movwf	Port_Init@pInput& (0+255),b
 14433  012DD2  0E03               	movlw	high _PortB
 14434  012DD4  0101               	movlb	1	; () banked
 14435  012DD6  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14436  012DD8  0E01               	movlw	1
 14437  012DDA  0101               	movlb	1	; () banked
 14438  012DDC  6F03               	movwf	Port_Init@pPort& (0+255),b
 14439  012DDE  EC44  F095         	call	_Port_Init	;wreg free
 14440                           
 14441                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14442  012DE2  0EA5               	movlw	low _PortC
 14443  012DE4  0101               	movlb	1	; () banked
 14444  012DE6  6F01               	movwf	Port_Init@pInput& (0+255),b
 14445  012DE8  0E00               	movlw	high _PortC
 14446  012DEA  0101               	movlb	1	; () banked
 14447  012DEC  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14448  012DEE  0E02               	movlw	2
 14449  012DF0  0101               	movlb	1	; () banked
 14450  012DF2  6F03               	movwf	Port_Init@pPort& (0+255),b
 14451  012DF4  EC44  F095         	call	_Port_Init	;wreg free
 14452                           
 14453                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14454  012DF8  0E9B               	movlw	low _PortD
 14455  012DFA  0101               	movlb	1	; () banked
 14456  012DFC  6F01               	movwf	Port_Init@pInput& (0+255),b
 14457  012DFE  0E00               	movlw	high _PortD
 14458  012E00  0101               	movlb	1	; () banked
 14459  012E02  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14460  012E04  0E03               	movlw	3
 14461  012E06  0101               	movlb	1	; () banked
 14462  012E08  6F03               	movwf	Port_Init@pPort& (0+255),b
 14463  012E0A  EC44  F095         	call	_Port_Init	;wreg free
 14464                           
 14465                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14466  012E0E  0E91               	movlw	low _PortE
 14467  012E10  0101               	movlb	1	; () banked
 14468  012E12  6F01               	movwf	Port_Init@pInput& (0+255),b
 14469  012E14  0E00               	movlw	high _PortE
 14470  012E16  0101               	movlb	1	; () banked
 14471  012E18  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14472  012E1A  0E04               	movlw	4
 14473  012E1C  0101               	movlb	1	; () banked
 14474  012E1E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14475  012E20  EC44  F095         	call	_Port_Init	;wreg free
 14476                           
 14477                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14478  012E24  0EC0               	movlw	low _PortF
 14479  012E26  0101               	movlb	1	; () banked
 14480  012E28  6F01               	movwf	Port_Init@pInput& (0+255),b
 14481  012E2A  0E03               	movlw	high _PortF
 14482  012E2C  0101               	movlb	1	; () banked
 14483  012E2E  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14484  012E30  0E05               	movlw	5
 14485  012E32  0101               	movlb	1	; () banked
 14486  012E34  6F03               	movwf	Port_Init@pPort& (0+255),b
 14487  012E36  EC44  F095         	call	_Port_Init	;wreg free
 14488                           
 14489                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14490  012E3A  0EA2               	movlw	low _PortG
 14491  012E3C  0101               	movlb	1	; () banked
 14492  012E3E  6F01               	movwf	Port_Init@pInput& (0+255),b
 14493  012E40  0E03               	movlw	high _PortG
 14494  012E42  0101               	movlb	1	; () banked
 14495  012E44  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14496  012E46  0E06               	movlw	6
 14497  012E48  0101               	movlb	1	; () banked
 14498  012E4A  6F03               	movwf	Port_Init@pPort& (0+255),b
 14499  012E4C  EC44  F095         	call	_Port_Init	;wreg free
 14500                           
 14501                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14502  012E50  0EC0               	movlw	low _PortF
 14503  012E52  0100               	movlb	0	; () banked
 14504  012E54  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14505  012E56  0E03               	movlw	high _PortF
 14506  012E58  0100               	movlb	0	; () banked
 14507  012E5A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14508  012E5C  0E05               	movlw	5
 14509  012E5E  0100               	movlb	0	; () banked
 14510  012E60  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14511  012E62  0E00               	movlw	0
 14512  012E64  0100               	movlb	0	; () banked
 14513  012E66  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14514  012E68  EC95  F093         	call	_Port_SetPinType	;wreg free
 14515                           
 14516                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14517  012E6C  0EAC               	movlw	low _PortB
 14518  012E6E  0100               	movlb	0	; () banked
 14519  012E70  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14520  012E72  0E03               	movlw	high _PortB
 14521  012E74  0100               	movlb	0	; () banked
 14522  012E76  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14523  012E78  0E00               	movlw	0
 14524  012E7A  0100               	movlb	0	; () banked
 14525  012E7C  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14526  012E7E  0E00               	movlw	0
 14527  012E80  0100               	movlb	0	; () banked
 14528  012E82  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14529  012E84  EC88  F08D         	call	_Port_SetQuadType	;wreg free
 14530                           
 14531                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14532  012E88  0EC0               	movlw	low _PortF
 14533  012E8A  0100               	movlb	0	; () banked
 14534  012E8C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14535  012E8E  0E03               	movlw	high _PortF
 14536  012E90  0100               	movlb	0	; () banked
 14537  012E92  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14538  012E94  0E06               	movlw	6
 14539  012E96  0100               	movlb	0	; () banked
 14540  012E98  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14541  012E9A  0E03               	movlw	3
 14542  012E9C  0100               	movlb	0	; () banked
 14543  012E9E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14544  012EA0  EC95  F093         	call	_Port_SetPinType	;wreg free
 14545                           
 14546                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14547  012EA4  0EA2               	movlw	low _PortG
 14548  012EA6  0100               	movlb	0	; () banked
 14549  012EA8  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14550  012EAA  0E03               	movlw	high _PortG
 14551  012EAC  0100               	movlb	0	; () banked
 14552  012EAE  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14553  012EB0  0E03               	movlw	3
 14554  012EB2  0100               	movlb	0	; () banked
 14555  012EB4  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14556  012EB6  ECB3  F08E         	call	_Port_SetType	;wreg free
 14557                           
 14558                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14559  012EBA  0EA2               	movlw	low _PortG
 14560  012EBC  0100               	movlb	0	; () banked
 14561  012EBE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14562  012EC0  0E03               	movlw	high _PortG
 14563  012EC2  0100               	movlb	0	; () banked
 14564  012EC4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14565  012EC6  0E04               	movlw	4
 14566  012EC8  0100               	movlb	0	; () banked
 14567  012ECA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14568  012ECC  0E00               	movlw	0
 14569  012ECE  0100               	movlb	0	; () banked
 14570  012ED0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14571  012ED2  EC02  F0A0         	call	_Port_SetPin	;wreg free
 14572                           
 14573                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14574  012ED6  0EC0               	movlw	low _PortF
 14575  012ED8  0100               	movlb	0	; () banked
 14576  012EDA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14577  012EDC  0E03               	movlw	high _PortF
 14578  012EDE  0100               	movlb	0	; () banked
 14579  012EE0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14580  012EE2  0E06               	movlw	6
 14581  012EE4  0100               	movlb	0	; () banked
 14582  012EE6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14583  012EE8  0E01               	movlw	1
 14584  012EEA  0100               	movlb	0	; () banked
 14585  012EEC  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14586  012EEE  EC02  F0A0         	call	_Port_SetPin	;wreg free
 14587                           
 14588                           ;MXK.c: 55: LED_Init(eLED1);
 14589  012EF2  0E00               	movlw	0
 14590  012EF4  ECA9  F0AC         	call	_LED_Init
 14591                           
 14592                           ;MXK.c: 56: LED_Init(eLED2);
 14593  012EF8  0E01               	movlw	1
 14594  012EFA  ECA9  F0AC         	call	_LED_Init
 14595                           
 14596                           ;MXK.c: 58: PIR1 = 0;
 14597  012EFE  0E00               	movlw	0
 14598  012F00  6E9E               	movwf	3998,c	;volatile
 14599                           
 14600                           ;MXK.c: 59: PIR2 = 0;
 14601  012F02  0E00               	movlw	0
 14602  012F04  6EA1               	movwf	4001,c	;volatile
 14603                           
 14604                           ;MXK.c: 60: PIR3 = 0;
 14605  012F06  0E00               	movlw	0
 14606  012F08  6EA4               	movwf	4004,c	;volatile
 14607                           
 14608                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14609  012F0A  8E9B               	bsf	3995,7,c	;volatile
 14610                           
 14611                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14612  012F0C  8C9B               	bsf	3995,6,c	;volatile
 14613                           
 14614                           ;MXK.c: 66: delay_ms(100);
 14615  012F0E  0E00               	movlw	0
 14616  012F10  0100               	movlb	0	; () banked
 14617  012F12  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14618  012F14  0E64               	movlw	100
 14619  012F16  6FBA               	movwf	delay_ms@ms& (0+255),b
 14620  012F18  ECA7  F0AB         	call	_delay_ms	;wreg free
 14621                           
 14622                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14623  012F1C  8ED0               	bsf	4048,7,c	;volatile
 14624  012F1E  0012               	return		;funcret
 14625  012F20                     __end_of_MXK_Init:
 14626                           	opt stack 0
 14627                           tblptru	equ	0xFF8
 14628                           tblptrh	equ	0xFF7
 14629                           tblptrl	equ	0xFF6
 14630                           tablat	equ	0xFF5
 14631                           prodh	equ	0xFF4
 14632                           prodl	equ	0xFF3
 14633                           intcon	equ	0xFF2
 14634                           postinc0	equ	0xFEE
 14635                           wreg	equ	0xFE8
 14636                           indf1	equ	0xFE7
 14637                           postdec1	equ	0xFE5
 14638                           fsr1h	equ	0xFE2
 14639                           fsr1l	equ	0xFE1
 14640                           indf2	equ	0xFDF
 14641                           postinc2	equ	0xFDE
 14642                           postdec2	equ	0xFDD
 14643                           fsr2h	equ	0xFDA
 14644                           fsr2l	equ	0xFD9
 14645                           status	equ	0xFD8
 14646                           
 14647 ;; *************** function _Port_Init *****************
 14648 ;; Defined at:
 14649 ;;		line 150 in file "Library/Port.c"
 14650 ;; Parameters:    Size  Location     Type
 14651 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14652 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14653 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14654 ;;  pPort           1    3[BANK1 ] enum E6786
 14655 ;; Auto vars:     Size  Location     Type
 14656 ;;  i               1    6[BANK1 ] unsigned char 
 14657 ;; Return value:  Size  Location     Type
 14658 ;;                  1    wreg      void 
 14659 ;; Registers used:
 14660 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14661 ;; Tracked objects:
 14662 ;;		On entry : 0/0
 14663 ;;		On exit  : 0/0
 14664 ;;		Unchanged: 0/0
 14665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14666 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14667 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14668 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14669 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14670 ;;Total ram usage:        6 bytes
 14671 ;; Hardware stack levels used:    1
 14672 ;; Hardware stack levels required when called:   15
 14673 ;; This function calls:
 14674 ;;		_GetPortPORT
 14675 ;;		_GetPortProperties
 14676 ;;		_GetPortTRIS
 14677 ;;		_Port_Set
 14678 ;;		_Port_SetPinType
 14679 ;;		_Port_SetType
 14680 ;;		_Word_GetPair
 14681 ;; This function is called by:
 14682 ;;		_MXK_Init
 14683 ;; This function uses a non-reentrant model
 14684 ;;
 14685                           
 14686                           	psect	text61
 14687  012A88                     __ptext61:
 14688                           	opt stack 0
 14689  012A88                     _Port_Init:
 14690                           	opt stack 13
 14691                           
 14692                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14693                           
 14694                           ;incstack = 0
 14695  012A88  0101               	movlb	1	; () banked
 14696  012A8A  5103               	movf	Port_Init@pPort& (0+255),w,b
 14697  012A8C  ECEE  F0A4         	call	_GetPortProperties
 14698  012A90  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14699  012A94  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14700  012A98  0100               	movlb	0	; () banked
 14701  012A9A  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14702  012A9E  0100               	movlb	0	; () banked
 14703  012AA0  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14704                           
 14705                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14706  012AA4  0101               	movlb	1	; () banked
 14707  012AA6  5103               	movf	Port_Init@pPort& (0+255),w,b
 14708  012AA8  EC41  F0A5         	call	_GetPortPORT
 14709  012AAC  0101               	movlb	1	; () banked
 14710  012AAE  EE20 F006          	lfsr	2,6
 14711  012AB2  5101               	movf	Port_Init@pInput& (0+255),w,b
 14712  012AB4  26D9               	addwf	fsr2l,f,c
 14713  012AB6  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14714  012AB8  22DA               	addwfc	fsr2h,f,c
 14715  012ABA  0100               	movlb	0	; () banked
 14716  012ABC  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14717  012AC0  0100               	movlb	0	; () banked
 14718  012AC2  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14719                           
 14720                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14721  012AC6  0101               	movlb	1	; () banked
 14722  012AC8  5103               	movf	Port_Init@pPort& (0+255),w,b
 14723  012ACA  EC41  F0A5         	call	_GetPortPORT
 14724  012ACE  0101               	movlb	1	; () banked
 14725  012AD0  EE20 F004          	lfsr	2,4
 14726  012AD4  5101               	movf	Port_Init@pInput& (0+255),w,b
 14727  012AD6  26D9               	addwf	fsr2l,f,c
 14728  012AD8  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14729  012ADA  22DA               	addwfc	fsr2h,f,c
 14730  012ADC  0100               	movlb	0	; () banked
 14731  012ADE  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14732  012AE2  0100               	movlb	0	; () banked
 14733  012AE4  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14734                           
 14735                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14736  012AE8  0101               	movlb	1	; () banked
 14737  012AEA  5103               	movf	Port_Init@pPort& (0+255),w,b
 14738  012AEC  EC9B  F0A4         	call	_GetPortTRIS
 14739  012AF0  0101               	movlb	1	; () banked
 14740  012AF2  EE20 F002          	lfsr	2,2
 14741  012AF6  5101               	movf	Port_Init@pInput& (0+255),w,b
 14742  012AF8  26D9               	addwf	fsr2l,f,c
 14743  012AFA  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14744  012AFC  22DA               	addwfc	fsr2h,f,c
 14745  012AFE  0100               	movlb	0	; () banked
 14746  012B00  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14747  012B04  0100               	movlb	0	; () banked
 14748  012B06  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14749                           
 14750                           ; BSR set to: 0
 14751                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14752  012B0A  0101               	movlb	1	; () banked
 14753  012B0C  EE20 F004          	lfsr	2,4
 14754  012B10  5101               	movf	Port_Init@pInput& (0+255),w,b
 14755  012B12  26D9               	addwf	fsr2l,f,c
 14756  012B14  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14757  012B16  22DA               	addwfc	fsr2h,f,c
 14758  012B18  CFDE F104          	movff	postinc2,??_Port_Init
 14759  012B1C  CFDD F105          	movff	postdec2,??_Port_Init+1
 14760  012B20  C104  FFD9         	movff	??_Port_Init,fsr2l
 14761  012B24  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14762  012B28  0E00               	movlw	0
 14763  012B2A  6EDF               	movwf	indf2,c
 14764                           
 14765                           ; BSR set to: 1
 14766                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14767  012B2C  0101               	movlb	1	; () banked
 14768  012B2E  EE20 F002          	lfsr	2,2
 14769  012B32  5101               	movf	Port_Init@pInput& (0+255),w,b
 14770  012B34  26D9               	addwf	fsr2l,f,c
 14771  012B36  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14772  012B38  22DA               	addwfc	fsr2h,f,c
 14773  012B3A  CFDE F104          	movff	postinc2,??_Port_Init
 14774  012B3E  CFDD F105          	movff	postdec2,??_Port_Init+1
 14775  012B42  C104  FFD9         	movff	??_Port_Init,fsr2l
 14776  012B46  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14777  012B4A  0EFF               	movlw	255
 14778  012B4C  6EDF               	movwf	indf2,c
 14779                           
 14780                           ; BSR set to: 1
 14781                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14782  012B4E  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14783  012B52  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14784  012B56  0E00               	movlw	0
 14785  012B58  0100               	movlb	0	; () banked
 14786  012B5A  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14787  012B5C  ECB3  F08E         	call	_Port_SetType	;wreg free
 14788                           
 14789                           ;Port.c: 166: UINT8 i;
 14790                           ;Port.c: 167: for (i=0; i<8; i++)
 14791  012B60  0E00               	movlw	0
 14792  012B62  0101               	movlb	1	; () banked
 14793  012B64  6F06               	movwf	Port_Init@i& (0+255),b
 14794  012B66                     l14044:
 14795                           
 14796                           ; BSR set to: 1
 14797  012B66  0E07               	movlw	7
 14798  012B68  0101               	movlb	1	; () banked
 14799  012B6A  6506               	cpfsgt	Port_Init@i& (0+255),b
 14800  012B6C  D031               	goto	l403
 14801  012B6E  D04B               	goto	u10840
 14802  012B70                     
 14803                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14804                           
 14805                           ; BSR set to: 1
 14806  012B70  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14807  012B74  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14808  012B78  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14809  012B7C  0E03               	movlw	3
 14810  012B7E  0100               	movlb	0	; () banked
 14811  012B80  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14812  012B82  EC95  F093         	call	_Port_SetPinType	;wreg free
 14813                           
 14814                           ;Port.c: 173: break;
 14815  012B86  D03C               	goto	l405
 14816  012B88                     
 14817                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14818  012B88  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14819  012B8C  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14820  012B90  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14821  012B94  0E02               	movlw	2
 14822  012B96  0100               	movlb	0	; () banked
 14823  012B98  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14824  012B9A  EC95  F093         	call	_Port_SetPinType	;wreg free
 14825                           
 14826                           ;Port.c: 176: break;
 14827  012B9E  D030               	goto	l405
 14828  012BA0                     
 14829                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14830  012BA0  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14831  012BA4  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14832  012BA8  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14833  012BAC  0E01               	movlw	1
 14834  012BAE  0100               	movlb	0	; () banked
 14835  012BB0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14836  012BB2  EC95  F093         	call	_Port_SetPinType	;wreg free
 14837                           
 14838                           ;Port.c: 179: break;
 14839  012BB6  D024               	goto	l405
 14840  012BB8                     
 14841                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14842  012BB8  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14843  012BBC  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14844  012BC0  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14845  012BC4  0E00               	movlw	0
 14846  012BC6  0100               	movlb	0	; () banked
 14847  012BC8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14848  012BCA  EC95  F093         	call	_Port_SetPinType	;wreg free
 14849                           
 14850                           ;Port.c: 183: }
 14851                           
 14852                           ;Port.c: 182: break;
 14853  012BCE  D018               	goto	l405
 14854  012BD0                     l403:
 14855  012BD0  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14856  012BD4  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14857  012BD8  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14858  012BDC  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14859  012BE0  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14860  012BE4  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 14861                           
 14862                           ; Switch size 1, requested type "space"
 14863                           ; Number of cases is 4, Range of values is 0 to 3
 14864                           ; switch strategies available:
 14865                           ; Name         Instructions Cycles
 14866                           ; simple_byte           13     7 (average)
 14867                           ;	Chosen strategy is simple_byte
 14868  012BE8  0A00               	xorlw	0	; case 0
 14869  012BEA  B4D8               	btfsc	status,2,c
 14870  012BEC  D7C1               	goto	l404
 14871  012BEE  0A01               	xorlw	1	; case 1
 14872  012BF0  B4D8               	btfsc	status,2,c
 14873  012BF2  D7D6               	goto	l407
 14874  012BF4  0A03               	xorlw	3	; case 2
 14875  012BF6  B4D8               	btfsc	status,2,c
 14876  012BF8  D7C7               	goto	l406
 14877  012BFA  0A01               	xorlw	1	; case 3
 14878  012BFC  B4D8               	btfsc	status,2,c
 14879  012BFE  D7DC               	goto	l408
 14880  012C00                     l405:
 14881  012C00  0101               	movlb	1	; () banked
 14882  012C02  2B06               	incf	Port_Init@i& (0+255),f,b
 14883  012C04  D7B0               	goto	l14044
 14884  012C06                     u10840:
 14885                           
 14886                           ; BSR set to: 1
 14887                           ;Port.c: 184: }
 14888                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14889                           
 14890                           ; BSR set to: 1
 14891  012C06  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14892  012C0A  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14893  012C0E  0E00               	movlw	0
 14894  012C10  0100               	movlb	0	; () banked
 14895  012C12  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14896  012C14  EC69  F08A         	call	_Port_Set	;wreg free
 14897  012C18  0012               	return		;funcret
 14898  012C1A                     __end_of_Port_Init:
 14899                           	opt stack 0
 14900                           tblptru	equ	0xFF8
 14901                           tblptrh	equ	0xFF7
 14902                           tblptrl	equ	0xFF6
 14903                           tablat	equ	0xFF5
 14904                           prodh	equ	0xFF4
 14905                           prodl	equ	0xFF3
 14906                           intcon	equ	0xFF2
 14907                           postinc0	equ	0xFEE
 14908                           wreg	equ	0xFE8
 14909                           indf1	equ	0xFE7
 14910                           postdec1	equ	0xFE5
 14911                           fsr1h	equ	0xFE2
 14912                           fsr1l	equ	0xFE1
 14913                           indf2	equ	0xFDF
 14914                           postinc2	equ	0xFDE
 14915                           postdec2	equ	0xFDD
 14916                           fsr2h	equ	0xFDA
 14917                           fsr2l	equ	0xFD9
 14918                           status	equ	0xFD8
 14919                           
 14920 ;; *************** function _Port_SetType *****************
 14921 ;; Defined at:
 14922 ;;		line 513 in file "Library/Port.c"
 14923 ;; Parameters:    Size  Location     Type
 14924 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14925 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14926 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14927 ;;  pType           1   60[BANK0 ] enum E6795
 14928 ;; Auto vars:     Size  Location     Type
 14929 ;;  Output          1    0[BANK1 ] enum E6475
 14930 ;; Return value:  Size  Location     Type
 14931 ;;                  1    wreg      enum E6475
 14932 ;; Registers used:
 14933 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14934 ;; Tracked objects:
 14935 ;;		On entry : 0/0
 14936 ;;		On exit  : 0/0
 14937 ;;		Unchanged: 0/0
 14938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14939 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14940 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14941 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14942 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14943 ;;Total ram usage:        6 bytes
 14944 ;; Hardware stack levels used:    1
 14945 ;; Hardware stack levels required when called:   14
 14946 ;; This function calls:
 14947 ;;		_Port_CheckPortType
 14948 ;;		_Word_SetPair
 14949 ;; This function is called by:
 14950 ;;		_Port_Init
 14951 ;;		_MXK_Init
 14952 ;; This function uses a non-reentrant model
 14953 ;;
 14954                           
 14955                           	psect	text62
 14956  011D66                     __ptext62:
 14957                           	opt stack 0
 14958  011D66                     _Port_SetType:
 14959                           	opt stack 14
 14960                           
 14961                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14962                           
 14963                           ;incstack = 0
 14964  011D66  0E05               	movlw	5
 14965  011D68  0101               	movlb	1	; () banked
 14966  011D6A  6F00               	movwf	Port_SetType@Output& (0+255),b
 14967                           
 14968                           ;Port.c: 517: switch (pType)
 14969  011D6C  D07A               	goto	l509
 14970  011D6E                     
 14971                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14972                           
 14973                           ; BSR set to: 1
 14974  011D6E  0100               	movlb	0	; () banked
 14975  011D70  EE20 F002          	lfsr	2,2
 14976  011D74  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14977  011D76  26D9               	addwf	fsr2l,f,c
 14978  011D78  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14979  011D7A  22DA               	addwfc	fsr2h,f,c
 14980  011D7C  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14981  011D80  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14982  011D84  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14983  011D88  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14984  011D8C  0EFF               	movlw	255
 14985  011D8E  D067               	goto	L10
 14986  011D90                     
 14987                           ; BSR set to: 0
 14988                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14989                           
 14990                           ; BSR set to: 0
 14991  011D90  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14992  011D94  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14993  011D98  0E01               	movlw	1
 14994  011D9A  0100               	movlb	0	; () banked
 14995  011D9C  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14996  011D9E  ECA7  F0AE         	call	_Port_CheckPortType	;wreg free
 14997  011DA2  0101               	movlb	1	; () banked
 14998  011DA4  6F00               	movwf	Port_SetType@Output& (0+255),b
 14999  011DA6  0101               	movlb	1	; () banked
 15000  011DA8  5100               	movf	Port_SetType@Output& (0+255),w,b
 15001  011DAA  A4D8               	btfss	status,2,c
 15002  011DAC  0012               	return	
 15003                           
 15004                           ; BSR set to: 1
 15005                           ;Port.c: 527: {
 15006                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 15007  011DAE  0100               	movlb	0	; () banked
 15008  011DB0  EE20 F002          	lfsr	2,2
 15009  011DB4  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15010  011DB6  26D9               	addwf	fsr2l,f,c
 15011  011DB8  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15012  011DBA  22DA               	addwfc	fsr2h,f,c
 15013  011DBC  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15014  011DC0  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15015  011DC4  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15016  011DC8  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15017  011DCC  0E00               	movlw	0
 15018  011DCE  6EDF               	movwf	indf2,c
 15019                           
 15020                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 15021  011DD0  0100               	movlb	0	; () banked
 15022  011DD2  EE20 F004          	lfsr	2,4
 15023  011DD6  D036               	goto	L21
 15024  011DD8                     
 15025                           ; BSR set to: 0
 15026                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 15027                           
 15028                           ; BSR set to: 0
 15029  011DD8  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15030  011DDC  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15031  011DE0  0E02               	movlw	2
 15032  011DE2  0100               	movlb	0	; () banked
 15033  011DE4  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15034  011DE6  ECA7  F0AE         	call	_Port_CheckPortType	;wreg free
 15035  011DEA  0101               	movlb	1	; () banked
 15036  011DEC  6F00               	movwf	Port_SetType@Output& (0+255),b
 15037  011DEE  0101               	movlb	1	; () banked
 15038  011DF0  5100               	movf	Port_SetType@Output& (0+255),w,b
 15039  011DF2  A4D8               	btfss	status,2,c
 15040  011DF4  0012               	return	
 15041                           
 15042                           ; BSR set to: 1
 15043                           ;Port.c: 538: {
 15044                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 15045  011DF6  0100               	movlb	0	; () banked
 15046  011DF8  EE20 F002          	lfsr	2,2
 15047  011DFC  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15048  011DFE  26D9               	addwf	fsr2l,f,c
 15049  011E00  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15050  011E02  22DA               	addwfc	fsr2h,f,c
 15051  011E04  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15052  011E08  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15053  011E0C  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15054  011E10  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15055  011E14  0EFF               	movlw	255
 15056  011E16  6EDF               	movwf	indf2,c
 15057                           
 15058                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 15059  011E18  0100               	movlb	0	; () banked
 15060  011E1A  EE20 F004          	lfsr	2,4
 15061  011E1E  D7AA               	goto	L11
 15062  011E20                     
 15063                           ; BSR set to: 0
 15064                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 15065                           
 15066                           ; BSR set to: 0
 15067  011E20  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 15068  011E24  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 15069  011E28  0E00               	movlw	0
 15070  011E2A  0100               	movlb	0	; () banked
 15071  011E2C  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 15072  011E2E  ECA7  F0AE         	call	_Port_CheckPortType	;wreg free
 15073  011E32  0101               	movlb	1	; () banked
 15074  011E34  6F00               	movwf	Port_SetType@Output& (0+255),b
 15075  011E36  0101               	movlb	1	; () banked
 15076  011E38  5100               	movf	Port_SetType@Output& (0+255),w,b
 15077  011E3A  A4D8               	btfss	status,2,c
 15078  011E3C  0012               	return	
 15079                           
 15080                           ; BSR set to: 1
 15081                           ;Port.c: 549: {
 15082                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 15083  011E3E  0100               	movlb	0	; () banked
 15084  011E40  EE20 F002          	lfsr	2,2
 15085  011E44                     L21:
 15086  011E44  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 15087  011E46  26D9               	addwf	fsr2l,f,c
 15088  011E48  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 15089  011E4A  22DA               	addwfc	fsr2h,f,c
 15090  011E4C  CFDE F0F7          	movff	postinc2,??_Port_SetType
 15091  011E50  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 15092  011E54  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 15093  011E58  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 15094  011E5C  0E00               	movlw	0
 15095  011E5E                     L10:
 15096  011E5E  6EDF               	movwf	indf2,c
 15097                           
 15098                           ;Port.c: 552: }
 15099  011E60  D00E               	goto	l511
 15100  011E62                     l509:
 15101                           
 15102                           ; BSR set to: 0
 15103  011E62  0100               	movlb	0	; () banked
 15104  011E64  51F6               	movf	Port_SetType@pType& (0+255),w,b
 15105                           
 15106                           ; Switch size 1, requested type "space"
 15107                           ; Number of cases is 4, Range of values is 0 to 3
 15108                           ; switch strategies available:
 15109                           ; Name         Instructions Cycles
 15110                           ; simple_byte           13     7 (average)
 15111                           ;	Chosen strategy is simple_byte
 15112  011E66  0A00               	xorlw	0	; case 0
 15113  011E68  B4D8               	btfsc	status,2,c
 15114  011E6A  D781               	goto	l510
 15115  011E6C  0A01               	xorlw	1	; case 1
 15116  011E6E  B4D8               	btfsc	status,2,c
 15117  011E70  D78F               	goto	l512
 15118  011E72  0A03               	xorlw	3	; case 2
 15119  011E74  B4D8               	btfsc	status,2,c
 15120  011E76  D7B0               	goto	l516
 15121  011E78  0A01               	xorlw	1	; case 3
 15122  011E7A  B4D8               	btfsc	status,2,c
 15123  011E7C  D7D1               	goto	l519
 15124  011E7E                     l511:
 15125                           
 15126                           ; BSR set to: 0
 15127                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 15128                           
 15129                           ; BSR set to: 0
 15130  011E7E  0E08               	movlw	8
 15131  011E80  0100               	movlb	0	; () banked
 15132  011E82  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15133  011E84  0100               	movlb	0	; () banked
 15134  011E86  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15135  011E88  0E00               	movlw	0
 15136  011E8A  0100               	movlb	0	; () banked
 15137  011E8C  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15138  011E8E  0100               	movlb	0	; () banked
 15139  011E90  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15140  011E92  0E00               	movlw	0
 15141  011E94  0100               	movlb	0	; () banked
 15142  011E96  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15143  011E98  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15144  011E9C  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15145                           
 15146                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 15147  011EA0  0E08               	movlw	8
 15148  011EA2  0100               	movlb	0	; () banked
 15149  011EA4  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15150  011EA6  0100               	movlb	0	; () banked
 15151  011EA8  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15152  011EAA  0E00               	movlw	0
 15153  011EAC  0100               	movlb	0	; () banked
 15154  011EAE  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15155  011EB0  0100               	movlb	0	; () banked
 15156  011EB2  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15157  011EB4  0E01               	movlw	1
 15158  011EB6  0100               	movlb	0	; () banked
 15159  011EB8  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15160  011EBA  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15161  011EBE  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15162                           
 15163                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 15164  011EC2  0E08               	movlw	8
 15165  011EC4  0100               	movlb	0	; () banked
 15166  011EC6  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15167  011EC8  0100               	movlb	0	; () banked
 15168  011ECA  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15169  011ECC  0E00               	movlw	0
 15170  011ECE  0100               	movlb	0	; () banked
 15171  011ED0  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15172  011ED2  0100               	movlb	0	; () banked
 15173  011ED4  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15174  011ED6  0E02               	movlw	2
 15175  011ED8  0100               	movlb	0	; () banked
 15176  011EDA  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15177  011EDC  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15178  011EE0  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15179                           
 15180                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 15181  011EE4  0E08               	movlw	8
 15182  011EE6  0100               	movlb	0	; () banked
 15183  011EE8  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15184  011EEA  0100               	movlb	0	; () banked
 15185  011EEC  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15186  011EEE  0E00               	movlw	0
 15187  011EF0  0100               	movlb	0	; () banked
 15188  011EF2  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15189  011EF4  0100               	movlb	0	; () banked
 15190  011EF6  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15191  011EF8  0E03               	movlw	3
 15192  011EFA  0100               	movlb	0	; () banked
 15193  011EFC  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15194  011EFE  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15195  011F02  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15196                           
 15197                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 15198  011F06  0E08               	movlw	8
 15199  011F08  0100               	movlb	0	; () banked
 15200  011F0A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15201  011F0C  0100               	movlb	0	; () banked
 15202  011F0E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15203  011F10  0E00               	movlw	0
 15204  011F12  0100               	movlb	0	; () banked
 15205  011F14  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15206  011F16  0100               	movlb	0	; () banked
 15207  011F18  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15208  011F1A  0E04               	movlw	4
 15209  011F1C  0100               	movlb	0	; () banked
 15210  011F1E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15211  011F20  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15212  011F24  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15213                           
 15214                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 15215  011F28  0E08               	movlw	8
 15216  011F2A  0100               	movlb	0	; () banked
 15217  011F2C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15218  011F2E  0100               	movlb	0	; () banked
 15219  011F30  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15220  011F32  0E00               	movlw	0
 15221  011F34  0100               	movlb	0	; () banked
 15222  011F36  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15223  011F38  0100               	movlb	0	; () banked
 15224  011F3A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15225  011F3C  0E05               	movlw	5
 15226  011F3E  0100               	movlb	0	; () banked
 15227  011F40  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15228  011F42  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15229  011F46  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15230                           
 15231                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15232  011F4A  0E08               	movlw	8
 15233  011F4C  0100               	movlb	0	; () banked
 15234  011F4E  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15235  011F50  0100               	movlb	0	; () banked
 15236  011F52  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15237  011F54  0E00               	movlw	0
 15238  011F56  0100               	movlb	0	; () banked
 15239  011F58  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15240  011F5A  0100               	movlb	0	; () banked
 15241  011F5C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15242  011F5E  0E06               	movlw	6
 15243  011F60  0100               	movlb	0	; () banked
 15244  011F62  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15245  011F64  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15246  011F68  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15247                           
 15248                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15249  011F6C  0E08               	movlw	8
 15250  011F6E  0100               	movlb	0	; () banked
 15251  011F70  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15252  011F72  0100               	movlb	0	; () banked
 15253  011F74  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15254  011F76  0E00               	movlw	0
 15255  011F78  0100               	movlb	0	; () banked
 15256  011F7A  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15257  011F7C  0100               	movlb	0	; () banked
 15258  011F7E  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15259  011F80  0E07               	movlw	7
 15260  011F82  0100               	movlb	0	; () banked
 15261  011F84  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15262  011F86  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15263  011F8A  EC36  F0AF         	call	_Word_SetPair	;wreg free
 15264  011F8E  0012               	return	
 15265  011F90                     __end_of_Port_SetType:
 15266                           	opt stack 0
 15267                           tblptru	equ	0xFF8
 15268                           tblptrh	equ	0xFF7
 15269                           tblptrl	equ	0xFF6
 15270                           tablat	equ	0xFF5
 15271                           prodh	equ	0xFF4
 15272                           prodl	equ	0xFF3
 15273                           intcon	equ	0xFF2
 15274                           postinc0	equ	0xFEE
 15275                           wreg	equ	0xFE8
 15276                           indf1	equ	0xFE7
 15277                           postdec1	equ	0xFE5
 15278                           fsr1h	equ	0xFE2
 15279                           fsr1l	equ	0xFE1
 15280                           indf2	equ	0xFDF
 15281                           postinc2	equ	0xFDE
 15282                           postdec2	equ	0xFDD
 15283                           fsr2h	equ	0xFDA
 15284                           fsr2l	equ	0xFD9
 15285                           status	equ	0xFD8
 15286                           
 15287 ;; *************** function _Port_CheckPortType *****************
 15288 ;; Defined at:
 15289 ;;		line 138 in file "Library/Port.c"
 15290 ;; Parameters:    Size  Location     Type
 15291 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15292 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15293 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15294 ;;  pDrive          1   56[BANK0 ] enum E6469
 15295 ;; Auto vars:     Size  Location     Type
 15296 ;;  Output          1   57[BANK0 ] enum E6475
 15297 ;; Return value:  Size  Location     Type
 15298 ;;                  1    wreg      enum E6475
 15299 ;; Registers used:
 15300 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15301 ;; Tracked objects:
 15302 ;;		On entry : 0/0
 15303 ;;		On exit  : 0/0
 15304 ;;		Unchanged: 0/0
 15305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15306 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15307 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15309 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15310 ;;Total ram usage:        4 bytes
 15311 ;; Hardware stack levels used:    1
 15312 ;; Hardware stack levels required when called:   13
 15313 ;; This function calls:
 15314 ;;		_Port_CheckQuadType
 15315 ;; This function is called by:
 15316 ;;		_Port_SetType
 15317 ;; This function uses a non-reentrant model
 15318 ;;
 15319                           
 15320                           	psect	text63
 15321  015D4E                     __ptext63:
 15322                           	opt stack 0
 15323  015D4E                     _Port_CheckPortType:
 15324                           	opt stack 14
 15325                           
 15326                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15327                           
 15328                           ;incstack = 0
 15329  015D4E  0E05               	movlw	5
 15330  015D50  0100               	movlb	0	; () banked
 15331  015D52  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15332                           
 15333                           ; BSR set to: 0
 15334                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15335  015D54  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15336  015D58  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15337  015D5C  0E00               	movlw	0
 15338  015D5E  0100               	movlb	0	; () banked
 15339  015D60  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15340  015D62  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15341  015D66  EC39  F0AD         	call	_Port_CheckQuadType	;wreg free
 15342  015D6A  0100               	movlb	0	; () banked
 15343  015D6C  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15344  015D6E  0100               	movlb	0	; () banked
 15345  015D70  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15346  015D72  A4D8               	btfss	status,2,c
 15347  015D74  D00D               	goto	l397
 15348                           
 15349                           ; BSR set to: 0
 15350                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15351  015D76  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15352  015D7A  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15353  015D7E  0E01               	movlw	1
 15354  015D80  0100               	movlb	0	; () banked
 15355  015D82  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15356  015D84  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15357  015D88  EC39  F0AD         	call	_Port_CheckQuadType	;wreg free
 15358  015D8C  0100               	movlb	0	; () banked
 15359  015D8E  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15360  015D90                     l397:
 15361                           
 15362                           ; BSR set to: 0
 15363                           ;Port.c: 146: return Output;
 15364                           
 15365                           ; BSR set to: 0
 15366  015D90  0100               	movlb	0	; () banked
 15367  015D92  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15368  015D94  0012               	return	
 15369  015D96                     __end_of_Port_CheckPortType:
 15370                           	opt stack 0
 15371                           tblptru	equ	0xFF8
 15372                           tblptrh	equ	0xFF7
 15373                           tblptrl	equ	0xFF6
 15374                           tablat	equ	0xFF5
 15375                           prodh	equ	0xFF4
 15376                           prodl	equ	0xFF3
 15377                           intcon	equ	0xFF2
 15378                           postinc0	equ	0xFEE
 15379                           wreg	equ	0xFE8
 15380                           indf1	equ	0xFE7
 15381                           postdec1	equ	0xFE5
 15382                           fsr1h	equ	0xFE2
 15383                           fsr1l	equ	0xFE1
 15384                           indf2	equ	0xFDF
 15385                           postinc2	equ	0xFDE
 15386                           postdec2	equ	0xFDD
 15387                           fsr2h	equ	0xFDA
 15388                           fsr2l	equ	0xFD9
 15389                           status	equ	0xFD8
 15390                           
 15391 ;; *************** function _Port_Set *****************
 15392 ;; Defined at:
 15393 ;;		line 570 in file "Library/Port.c"
 15394 ;; Parameters:    Size  Location     Type
 15395 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15396 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15397 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15398 ;;  pValue          1   17[BANK0 ] unsigned char 
 15399 ;; Auto vars:     Size  Location     Type
 15400 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15401 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15402 ;;  Type            1   38[BANK0 ] enum E6795
 15403 ;; Return value:  Size  Location     Type
 15404 ;;                  1    wreg      void 
 15405 ;; Registers used:
 15406 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15407 ;; Tracked objects:
 15408 ;;		On entry : 0/0
 15409 ;;		On exit  : 0/0
 15410 ;;		Unchanged: 0/0
 15411 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15412 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15413 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15414 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15415 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15416 ;;Total ram usage:       24 bytes
 15417 ;; Hardware stack levels used:    1
 15418 ;; Hardware stack levels required when called:   10
 15419 ;; This function calls:
 15420 ;;		_Byte_SetByte
 15421 ;;		_Word_GetPair
 15422 ;; This function is called by:
 15423 ;;		_Port_Init
 15424 ;;		_Port_Toggle
 15425 ;; This function uses a non-reentrant model
 15426 ;;
 15427                           
 15428                           	psect	text64
 15429  0114D2                     __ptext64:
 15430                           	opt stack 0
 15431  0114D2                     _Port_Set:
 15432                           	opt stack 17
 15433                           
 15434                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15435                           
 15436                           ; BSR set to: 0
 15437                           ;incstack = 0
 15438  0114D2  0E08               	movlw	8
 15439  0114D4  0100               	movlb	0	; () banked
 15440  0114D6  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15441  0114D8  0100               	movlb	0	; () banked
 15442  0114DA  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15443  0114DC  0E00               	movlw	0
 15444  0114DE  0100               	movlb	0	; () banked
 15445  0114E0  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15446  0114E2  0100               	movlb	0	; () banked
 15447  0114E4  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15448  0114E6  0E00               	movlw	0
 15449  0114E8  0100               	movlb	0	; () banked
 15450  0114EA  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15451  0114EC  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15452  0114F0  0100               	movlb	0	; () banked
 15453  0114F2  6FE0               	movwf	Port_Set@Type& (0+255),b
 15454                           
 15455                           ; BSR set to: 0
 15456                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15457  0114F4  0100               	movlb	0	; () banked
 15458  0114F6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15459  0114F8  0100               	movlb	0	; () banked
 15460  0114FA  6FCC               	movwf	??_Port_Set& (0+255),b
 15461  0114FC  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15462  0114FE  0E0E               	movlw	14
 15463  011500                     u9935:
 15464  011500  90D8               	bcf	status,0,c
 15465  011502  0100               	movlb	0	; () banked
 15466  011504  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15467  011506  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15468  011508  2EE8               	decfsz	wreg,f,c
 15469  01150A  D7FA               	goto	u9935
 15470  01150C  0100               	movlb	0	; () banked
 15471  01150E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15472  011510  0100               	movlb	0	; () banked
 15473  011512  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15474  011514  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15475  011516  0E0C               	movlw	12
 15476  011518                     u9945:
 15477  011518  90D8               	bcf	status,0,c
 15478  01151A  0100               	movlb	0	; () banked
 15479  01151C  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15480  01151E  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15481  011520  2EE8               	decfsz	wreg,f,c
 15482  011522  D7FA               	goto	u9945
 15483  011524  0100               	movlb	0	; () banked
 15484  011526  51E0               	movf	Port_Set@Type& (0+255),w,b
 15485  011528  0100               	movlb	0	; () banked
 15486  01152A  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15487  01152C  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15488  01152E  0E0A               	movlw	10
 15489  011530                     u9955:
 15490  011530  90D8               	bcf	status,0,c
 15491  011532  0100               	movlb	0	; () banked
 15492  011534  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15493  011536  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15494  011538  2EE8               	decfsz	wreg,f,c
 15495  01153A  D7FA               	goto	u9955
 15496  01153C  0100               	movlb	0	; () banked
 15497  01153E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15498  011540  0100               	movlb	0	; () banked
 15499  011542  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15500  011544  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15501  011546  0100               	movlb	0	; () banked
 15502  011548  51E0               	movf	Port_Set@Type& (0+255),w,b
 15503  01154A  0100               	movlb	0	; () banked
 15504  01154C  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15505  01154E  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15506  011550  0E06               	movlw	6
 15507  011552                     u9965:
 15508  011552  90D8               	bcf	status,0,c
 15509  011554  0100               	movlb	0	; () banked
 15510  011556  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15511  011558  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15512  01155A  2EE8               	decfsz	wreg,f,c
 15513  01155C  D7FA               	goto	u9965
 15514  01155E  0100               	movlb	0	; () banked
 15515  011560  51E0               	movf	Port_Set@Type& (0+255),w,b
 15516  011562  0100               	movlb	0	; () banked
 15517  011564  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15518  011566  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15519  011568  0100               	movlb	0	; () banked
 15520  01156A  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15521  01156C  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15522  01156E  0EF0               	movlw	240
 15523  011570  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15524  011572  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15525  011574  0B0F               	andlw	15
 15526  011576  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15527  011578  0EF0               	movlw	240
 15528  01157A  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15529  01157C  0100               	movlb	0	; () banked
 15530  01157E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15531  011580  0100               	movlb	0	; () banked
 15532  011582  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15533  011584  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15534  011586  0100               	movlb	0	; () banked
 15535  011588  90D8               	bcf	status,0,c
 15536  01158A  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15537  01158C  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15538  01158E  0100               	movlb	0	; () banked
 15539  011590  90D8               	bcf	status,0,c
 15540  011592  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15541  011594  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15542  011596  0100               	movlb	0	; () banked
 15543  011598  51E0               	movf	Port_Set@Type& (0+255),w,b
 15544  01159A  0100               	movlb	0	; () banked
 15545  01159C  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15546  01159E  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15547  0115A0  0100               	movlb	0	; () banked
 15548  0115A2  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15549  0115A4  0100               	movlb	0	; () banked
 15550  0115A6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15551  0115A8  0100               	movlb	0	; () banked
 15552  0115AA  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15553  0115AC  0100               	movlb	0	; () banked
 15554  0115AE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15555  0115B0  0100               	movlb	0	; () banked
 15556  0115B2  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15557  0115B4  0100               	movlb	0	; () banked
 15558  0115B6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15559  0115B8  0100               	movlb	0	; () banked
 15560  0115BA  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15561  0115BC  0100               	movlb	0	; () banked
 15562  0115BE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15563  0115C0  0100               	movlb	0	; () banked
 15564  0115C2  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15565  0115C4  0100               	movlb	0	; () banked
 15566  0115C6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15567  0115C8  0100               	movlb	0	; () banked
 15568  0115CA  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15569  0115CC  0100               	movlb	0	; () banked
 15570  0115CE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15571  0115D0  0100               	movlb	0	; () banked
 15572  0115D2  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15573  0115D4  0100               	movlb	0	; () banked
 15574  0115D6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15575  0115D8  0100               	movlb	0	; () banked
 15576  0115DA  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15577  0115DC  0100               	movlb	0	; () banked
 15578  0115DE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15579  0115E0  0100               	movlb	0	; () banked
 15580  0115E2  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15581  0115E4  0100               	movlb	0	; () banked
 15582  0115E6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15583  0115E8  0100               	movlb	0	; () banked
 15584  0115EA  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15585  0115EC  0100               	movlb	0	; () banked
 15586  0115EE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15587  0115F0  0100               	movlb	0	; () banked
 15588  0115F2  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15589  0115F4  0100               	movlb	0	; () banked
 15590  0115F6  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15591  0115F8  0100               	movlb	0	; () banked
 15592  0115FA  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15593  0115FC  0100               	movlb	0	; () banked
 15594  0115FE  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15595  011600  0100               	movlb	0	; () banked
 15596  011602  51CC               	movf	??_Port_Set& (0+255),w,b
 15597  011604  0100               	movlb	0	; () banked
 15598  011606  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15599  011608  0100               	movlb	0	; () banked
 15600  01160A  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15601  01160C  0100               	movlb	0	; () banked
 15602  01160E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15603  011610  0100               	movlb	0	; () banked
 15604  011612  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15605  011614  0100               	movlb	0	; () banked
 15606  011616  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15607                           
 15608                           ; BSR set to: 0
 15609                           ;Port.c: 574: UINT16 TypeActual = Type;
 15610  011618  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15611  01161C  0100               	movlb	0	; () banked
 15612  01161E  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15613                           
 15614                           ; BSR set to: 0
 15615                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15616  011620  0E08               	movlw	8
 15617  011622  0100               	movlb	0	; () banked
 15618  011624  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15619  011626  0100               	movlb	0	; () banked
 15620  011628  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15621  01162A  0E00               	movlw	0
 15622  01162C  0100               	movlb	0	; () banked
 15623  01162E  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15624  011630  0100               	movlb	0	; () banked
 15625  011632  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15626  011634  0E01               	movlw	1
 15627  011636  0100               	movlb	0	; () banked
 15628  011638  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15629  01163A  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15630  01163E  0100               	movlb	0	; () banked
 15631  011640  6FCC               	movwf	??_Port_Set& (0+255),b
 15632  011642  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15633  011644  0100               	movlb	0	; () banked
 15634  011646  90D8               	bcf	status,0,c
 15635  011648  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15636  01164A  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15637  01164C  0100               	movlb	0	; () banked
 15638  01164E  90D8               	bcf	status,0,c
 15639  011650  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15640  011652  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15641  011654  0100               	movlb	0	; () banked
 15642  011656  51CC               	movf	??_Port_Set& (0+255),w,b
 15643  011658  0100               	movlb	0	; () banked
 15644  01165A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15645  01165C  0100               	movlb	0	; () banked
 15646  01165E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15647  011660  0100               	movlb	0	; () banked
 15648  011662  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15649                           
 15650                           ; BSR set to: 0
 15651                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15652  011664  0E08               	movlw	8
 15653  011666  0100               	movlb	0	; () banked
 15654  011668  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15655  01166A  0100               	movlb	0	; () banked
 15656  01166C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15657  01166E  0E00               	movlw	0
 15658  011670  0100               	movlb	0	; () banked
 15659  011672  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15660  011674  0100               	movlb	0	; () banked
 15661  011676  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15662  011678  0E02               	movlw	2
 15663  01167A  0100               	movlb	0	; () banked
 15664  01167C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15665  01167E  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15666  011682  0100               	movlb	0	; () banked
 15667  011684  6FCC               	movwf	??_Port_Set& (0+255),b
 15668  011686  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15669  011688  0100               	movlb	0	; () banked
 15670  01168A  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15671  01168C  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15672  01168E  0EF0               	movlw	240
 15673  011690  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15674  011692  51CC               	movf	??_Port_Set& (0+255),w,b
 15675  011694  0B0F               	andlw	15
 15676  011696  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15677  011698  0EF0               	movlw	240
 15678  01169A  17CC               	andwf	??_Port_Set& (0+255),f,b
 15679  01169C  0100               	movlb	0	; () banked
 15680  01169E  51CC               	movf	??_Port_Set& (0+255),w,b
 15681  0116A0  0100               	movlb	0	; () banked
 15682  0116A2  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15683  0116A4  0100               	movlb	0	; () banked
 15684  0116A6  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15685  0116A8  0100               	movlb	0	; () banked
 15686  0116AA  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15687                           
 15688                           ; BSR set to: 0
 15689                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15690  0116AC  0E08               	movlw	8
 15691  0116AE  0100               	movlb	0	; () banked
 15692  0116B0  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15693  0116B2  0100               	movlb	0	; () banked
 15694  0116B4  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15695  0116B6  0E00               	movlw	0
 15696  0116B8  0100               	movlb	0	; () banked
 15697  0116BA  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15698  0116BC  0100               	movlb	0	; () banked
 15699  0116BE  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15700  0116C0  0E03               	movlw	3
 15701  0116C2  0100               	movlb	0	; () banked
 15702  0116C4  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15703  0116C6  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15704  0116CA  0100               	movlb	0	; () banked
 15705  0116CC  6FCC               	movwf	??_Port_Set& (0+255),b
 15706  0116CE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15707  0116D0  0E06               	movlw	6
 15708  0116D2                     u9975:
 15709  0116D2  90D8               	bcf	status,0,c
 15710  0116D4  0100               	movlb	0	; () banked
 15711  0116D6  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15712  0116D8  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15713  0116DA  2EE8               	decfsz	wreg,f,c
 15714  0116DC  D7FA               	goto	u9975
 15715  0116DE  0100               	movlb	0	; () banked
 15716  0116E0  51CC               	movf	??_Port_Set& (0+255),w,b
 15717  0116E2  0100               	movlb	0	; () banked
 15718  0116E4  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15719  0116E6  0100               	movlb	0	; () banked
 15720  0116E8  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15721  0116EA  0100               	movlb	0	; () banked
 15722  0116EC  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15723                           
 15724                           ; BSR set to: 0
 15725                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15726  0116EE  0E08               	movlw	8
 15727  0116F0  0100               	movlb	0	; () banked
 15728  0116F2  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15729  0116F4  0100               	movlb	0	; () banked
 15730  0116F6  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15731  0116F8  0E00               	movlw	0
 15732  0116FA  0100               	movlb	0	; () banked
 15733  0116FC  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15734  0116FE  0100               	movlb	0	; () banked
 15735  011700  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15736  011702  0E04               	movlw	4
 15737  011704  0100               	movlb	0	; () banked
 15738  011706  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15739  011708  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15740  01170C  0100               	movlb	0	; () banked
 15741  01170E  6FCC               	movwf	??_Port_Set& (0+255),b
 15742  011710  0100               	movlb	0	; () banked
 15743  011712  51CC               	movf	??_Port_Set& (0+255),w,b
 15744  011714  0100               	movlb	0	; () banked
 15745  011716  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15746  011718  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15747  01171A  0100               	movlb	0	; () banked
 15748  01171C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15749  01171E  0100               	movlb	0	; () banked
 15750  011720  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15751  011722  0100               	movlb	0	; () banked
 15752  011724  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15753  011726  0100               	movlb	0	; () banked
 15754  011728  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15755                           
 15756                           ; BSR set to: 0
 15757                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15758  01172A  0E08               	movlw	8
 15759  01172C  0100               	movlb	0	; () banked
 15760  01172E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15761  011730  0100               	movlb	0	; () banked
 15762  011732  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15763  011734  0E00               	movlw	0
 15764  011736  0100               	movlb	0	; () banked
 15765  011738  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15766  01173A  0100               	movlb	0	; () banked
 15767  01173C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15768  01173E  0E05               	movlw	5
 15769  011740  0100               	movlb	0	; () banked
 15770  011742  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15771  011744  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15772  011748  0100               	movlb	0	; () banked
 15773  01174A  6FCC               	movwf	??_Port_Set& (0+255),b
 15774  01174C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15775  01174E  0E0A               	movlw	10
 15776  011750                     u9985:
 15777  011750  90D8               	bcf	status,0,c
 15778  011752  0100               	movlb	0	; () banked
 15779  011754  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15780  011756  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15781  011758  2EE8               	decfsz	wreg,f,c
 15782  01175A  D7FA               	goto	u9985
 15783  01175C  0100               	movlb	0	; () banked
 15784  01175E  51CC               	movf	??_Port_Set& (0+255),w,b
 15785  011760  0100               	movlb	0	; () banked
 15786  011762  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15787  011764  0100               	movlb	0	; () banked
 15788  011766  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15789  011768  0100               	movlb	0	; () banked
 15790  01176A  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15791                           
 15792                           ; BSR set to: 0
 15793                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15794  01176C  0E08               	movlw	8
 15795  01176E  0100               	movlb	0	; () banked
 15796  011770  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15797  011772  0100               	movlb	0	; () banked
 15798  011774  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15799  011776  0E00               	movlw	0
 15800  011778  0100               	movlb	0	; () banked
 15801  01177A  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15802  01177C  0100               	movlb	0	; () banked
 15803  01177E  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15804  011780  0E06               	movlw	6
 15805  011782  0100               	movlb	0	; () banked
 15806  011784  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15807  011786  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15808  01178A  0100               	movlb	0	; () banked
 15809  01178C  6FCC               	movwf	??_Port_Set& (0+255),b
 15810  01178E  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15811  011790  0E0C               	movlw	12
 15812  011792                     u9995:
 15813  011792  90D8               	bcf	status,0,c
 15814  011794  0100               	movlb	0	; () banked
 15815  011796  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15816  011798  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15817  01179A  2EE8               	decfsz	wreg,f,c
 15818  01179C  D7FA               	goto	u9995
 15819  01179E  0100               	movlb	0	; () banked
 15820  0117A0  51CC               	movf	??_Port_Set& (0+255),w,b
 15821  0117A2  0100               	movlb	0	; () banked
 15822  0117A4  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15823  0117A6  0100               	movlb	0	; () banked
 15824  0117A8  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15825  0117AA  0100               	movlb	0	; () banked
 15826  0117AC  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15827                           
 15828                           ; BSR set to: 0
 15829                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15830  0117AE  0E08               	movlw	8
 15831  0117B0  0100               	movlb	0	; () banked
 15832  0117B2  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15833  0117B4  0100               	movlb	0	; () banked
 15834  0117B6  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15835  0117B8  0E00               	movlw	0
 15836  0117BA  0100               	movlb	0	; () banked
 15837  0117BC  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15838  0117BE  0100               	movlb	0	; () banked
 15839  0117C0  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15840  0117C2  0E07               	movlw	7
 15841  0117C4  0100               	movlb	0	; () banked
 15842  0117C6  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15843  0117C8  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 15844  0117CC  0100               	movlb	0	; () banked
 15845  0117CE  6FCC               	movwf	??_Port_Set& (0+255),b
 15846  0117D0  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15847  0117D2  0E0E               	movlw	14
 15848  0117D4                     u10005:
 15849  0117D4  90D8               	bcf	status,0,c
 15850  0117D6  0100               	movlb	0	; () banked
 15851  0117D8  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15852  0117DA  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15853  0117DC  2EE8               	decfsz	wreg,f,c
 15854  0117DE  D7FA               	goto	u10005
 15855  0117E0  0100               	movlb	0	; () banked
 15856  0117E2  51CC               	movf	??_Port_Set& (0+255),w,b
 15857  0117E4  0100               	movlb	0	; () banked
 15858  0117E6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15859  0117E8  0100               	movlb	0	; () banked
 15860  0117EA  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15861  0117EC  0100               	movlb	0	; () banked
 15862  0117EE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15863                           
 15864                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15865  0117F0  0100               	movlb	0	; () banked
 15866  0117F2  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15867  0117F4  0100               	movlb	0	; () banked
 15868  0117F6  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15869  0117F8  E148               	bnz	l528
 15870  0117FA  0100               	movlb	0	; () banked
 15871  0117FC  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15872  0117FE  0100               	movlb	0	; () banked
 15873  011800  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15874  011802  A4D8               	btfss	status,2,c
 15875  011804  0012               	return	
 15876  011806  D032               	goto	l526
 15877  011808                     
 15878                           ; BSR set to: 0
 15879                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15880                           
 15881                           ; BSR set to: 0
 15882  011808  0100               	movlb	0	; () banked
 15883  01180A  EE20 F002          	lfsr	2,2
 15884  01180E  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15885  011810  26D9               	addwf	fsr2l,f,c
 15886  011812  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15887  011814  22DA               	addwfc	fsr2h,f,c
 15888  011816  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15889  01181A  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15890  01181E  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15891  011822  ECA4  F0B3         	call	_Byte_SetByte	;wreg free
 15892                           
 15893                           ;Port.c: 594: break;
 15894  011826  0012               	return	
 15895  011828                     
 15896                           ;Port.c: 597: pValue = ~pValue;
 15897  011828  0100               	movlb	0	; () banked
 15898  01182A  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15899                           
 15900                           ; BSR set to: 0
 15901                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15902  01182C  0100               	movlb	0	; () banked
 15903  01182E  EE20 F002          	lfsr	2,2
 15904  011832  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15905  011834  26D9               	addwf	fsr2l,f,c
 15906  011836  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15907  011838  22DA               	addwfc	fsr2h,f,c
 15908  01183A  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15909  01183E  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15910  011842  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15911  011846  ECA4  F0B3         	call	_Byte_SetByte	;wreg free
 15912                           
 15913                           ;Port.c: 599: break;
 15914  01184A  0012               	return	
 15915  01184C                     
 15916                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15917  01184C  0100               	movlb	0	; () banked
 15918  01184E  EE20 F004          	lfsr	2,4
 15919  011852  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15920  011854  26D9               	addwf	fsr2l,f,c
 15921  011856  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15922  011858  22DA               	addwfc	fsr2h,f,c
 15923  01185A  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15924  01185E  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15925  011862  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15926  011866  ECA4  F0B3         	call	_Byte_SetByte	;wreg free
 15927                           
 15928                           ;Port.c: 606: }
 15929                           
 15930                           ;Port.c: 605: break;
 15931                           
 15932                           ;Port.c: 604: default:
 15933                           
 15934                           ;Port.c: 603: break;
 15935  01186A  0012               	return	
 15936  01186C                     l526:
 15937  01186C  0100               	movlb	0	; () banked
 15938  01186E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15939                           
 15940                           ; Switch size 1, requested type "space"
 15941                           ; Number of cases is 4, Range of values is 0 to 3
 15942                           ; switch strategies available:
 15943                           ; Name         Instructions Cycles
 15944                           ; simple_byte           13     7 (average)
 15945                           ;	Chosen strategy is simple_byte
 15946  011870  0A00               	xorlw	0	; case 0
 15947  011872  B4D8               	btfsc	status,2,c
 15948  011874  0012               	return	
 15949  011876  0A01               	xorlw	1	; case 1
 15950  011878  B4D8               	btfsc	status,2,c
 15951  01187A  D7C6               	goto	l529
 15952  01187C  0A03               	xorlw	3	; case 2
 15953  01187E  B4D8               	btfsc	status,2,c
 15954  011880  D7D3               	goto	l531
 15955  011882  0A01               	xorlw	1	; case 3
 15956  011884  A4D8               	btfss	status,2,c
 15957                           
 15958                           ; BSR set to: 0
 15959                           
 15960                           ; BSR set to: 0
 15961                           ;Port.c: 607: }
 15962  011886  0012               	return	
 15963  011888  D7E1               	goto	l532
 15964  01188A                     l528:
 15965  01188A  0012               	return		;funcret
 15966  01188C                     __end_of_Port_Set:
 15967                           	opt stack 0
 15968                           tblptru	equ	0xFF8
 15969                           tblptrh	equ	0xFF7
 15970                           tblptrl	equ	0xFF6
 15971                           tablat	equ	0xFF5
 15972                           prodh	equ	0xFF4
 15973                           prodl	equ	0xFF3
 15974                           intcon	equ	0xFF2
 15975                           postinc0	equ	0xFEE
 15976                           wreg	equ	0xFE8
 15977                           indf1	equ	0xFE7
 15978                           postdec1	equ	0xFE5
 15979                           fsr1h	equ	0xFE2
 15980                           fsr1l	equ	0xFE1
 15981                           indf2	equ	0xFDF
 15982                           postinc2	equ	0xFDE
 15983                           postdec2	equ	0xFDD
 15984                           fsr2h	equ	0xFDA
 15985                           fsr2l	equ	0xFD9
 15986                           status	equ	0xFD8
 15987                           
 15988 ;; *************** function _Byte_SetByte *****************
 15989 ;; Defined at:
 15990 ;;		line 110 in file "Library/Types.c"
 15991 ;; Parameters:    Size  Location     Type
 15992 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15993 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15994 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15995 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15996 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15997 ;;		 -> NULL(0), 
 15998 ;;  pValue          1    2[BANK0 ] unsigned char 
 15999 ;; Auto vars:     Size  Location     Type
 16000 ;;		None
 16001 ;; Return value:  Size  Location     Type
 16002 ;;                  1    wreg      void 
 16003 ;; Registers used:
 16004 ;;		fsr2l, fsr2h
 16005 ;; Tracked objects:
 16006 ;;		On entry : 0/0
 16007 ;;		On exit  : 0/0
 16008 ;;		Unchanged: 0/0
 16009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16010 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16013 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16014 ;;Total ram usage:        3 bytes
 16015 ;; Hardware stack levels used:    1
 16016 ;; Hardware stack levels required when called:    7
 16017 ;; This function calls:
 16018 ;;		Nothing
 16019 ;; This function is called by:
 16020 ;;		_Port_Set
 16021 ;;		_I2C_Init
 16022 ;; This function uses a non-reentrant model
 16023 ;;
 16024                           
 16025                           	psect	text65
 16026  016748                     __ptext65:
 16027                           	opt stack 0
 16028  016748                     _Byte_SetByte:
 16029                           	opt stack 19
 16030                           
 16031                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 16032                           
 16033                           ;incstack = 0
 16034  016748  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 16035  01674C  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 16036  016750  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 16037  016754  0012               	return		;funcret
 16038  016756                     __end_of_Byte_SetByte:
 16039                           	opt stack 0
 16040                           tblptru	equ	0xFF8
 16041                           tblptrh	equ	0xFF7
 16042                           tblptrl	equ	0xFF6
 16043                           tablat	equ	0xFF5
 16044                           prodh	equ	0xFF4
 16045                           prodl	equ	0xFF3
 16046                           intcon	equ	0xFF2
 16047                           postinc0	equ	0xFEE
 16048                           wreg	equ	0xFE8
 16049                           indf1	equ	0xFE7
 16050                           postdec1	equ	0xFE5
 16051                           fsr1h	equ	0xFE2
 16052                           fsr1l	equ	0xFE1
 16053                           indf2	equ	0xFDF
 16054                           postinc2	equ	0xFDE
 16055                           postdec2	equ	0xFDD
 16056                           fsr2h	equ	0xFDA
 16057                           fsr2l	equ	0xFD9
 16058                           status	equ	0xFD8
 16059                           
 16060 ;; *************** function _GetPortTRIS *****************
 16061 ;; Defined at:
 16062 ;;		line 67 in file "Library/Port.c"
 16063 ;; Parameters:    Size  Location     Type
 16064 ;;  pInput          1    wreg     enum E6786
 16065 ;; Auto vars:     Size  Location     Type
 16066 ;;  pInput          1    2[BANK0 ] enum E6786
 16067 ;; Return value:  Size  Location     Type
 16068 ;;                  2    0[BANK0 ] PTR struct Byte
 16069 ;; Registers used:
 16070 ;;		wreg, status,2, status,0
 16071 ;; Tracked objects:
 16072 ;;		On entry : 0/0
 16073 ;;		On exit  : 0/0
 16074 ;;		Unchanged: 0/0
 16075 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16076 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16077 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16078 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16079 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16080 ;;Total ram usage:        3 bytes
 16081 ;; Hardware stack levels used:    1
 16082 ;; Hardware stack levels required when called:    7
 16083 ;; This function calls:
 16084 ;;		Nothing
 16085 ;; This function is called by:
 16086 ;;		_Port_Init
 16087 ;; This function uses a non-reentrant model
 16088 ;;
 16089                           
 16090                           	psect	text66
 16091  014936                     __ptext66:
 16092                           	opt stack 0
 16093  014936                     _GetPortTRIS:
 16094                           	opt stack 20
 16095                           
 16096                           ;incstack = 0
 16097                           ;GetPortTRIS@pInput stored from wreg
 16098  014936  0100               	movlb	0	; () banked
 16099  014938  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 16100                           
 16101                           ;Port.c: 69: switch (pInput)
 16102  01493A  D038               	goto	l363
 16103  01493C                     
 16104                           ;Port.c: 72: return (BytePtr)&TRISA;
 16105  01493C  0E92               	movlw	146
 16106  01493E  0100               	movlb	0	; () banked
 16107  014940  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16108  014942  0E0F               	movlw	15
 16109  014944  0100               	movlb	0	; () banked
 16110  014946  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16111                           
 16112                           ; BSR set to: 0
 16113  014948  0012               	return	
 16114  01494A                     
 16115                           ; BSR set to: 0
 16116                           ;Port.c: 74: return (BytePtr)&TRISB;
 16117                           
 16118                           ; BSR set to: 0
 16119  01494A  0E93               	movlw	147
 16120  01494C  0100               	movlb	0	; () banked
 16121  01494E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16122  014950  0E0F               	movlw	15
 16123  014952  0100               	movlb	0	; () banked
 16124  014954  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16125                           
 16126                           ; BSR set to: 0
 16127  014956  0012               	return	
 16128  014958                     
 16129                           ; BSR set to: 0
 16130                           ;Port.c: 76: return (BytePtr)&TRISC;
 16131                           
 16132                           ; BSR set to: 0
 16133  014958  0E94               	movlw	148
 16134  01495A  0100               	movlb	0	; () banked
 16135  01495C  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16136  01495E  0E0F               	movlw	15
 16137  014960  0100               	movlb	0	; () banked
 16138  014962  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16139                           
 16140                           ; BSR set to: 0
 16141  014964  0012               	return	
 16142  014966                     
 16143                           ; BSR set to: 0
 16144                           ;Port.c: 78: return (BytePtr)&TRISD;
 16145                           
 16146                           ; BSR set to: 0
 16147  014966  0E95               	movlw	149
 16148  014968  0100               	movlb	0	; () banked
 16149  01496A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16150  01496C  0E0F               	movlw	15
 16151  01496E  0100               	movlb	0	; () banked
 16152  014970  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16153                           
 16154                           ; BSR set to: 0
 16155  014972  0012               	return	
 16156  014974                     
 16157                           ; BSR set to: 0
 16158                           ;Port.c: 80: return (BytePtr)&TRISE;
 16159                           
 16160                           ; BSR set to: 0
 16161  014974  0E96               	movlw	150
 16162  014976  0100               	movlb	0	; () banked
 16163  014978  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16164  01497A  0E0F               	movlw	15
 16165  01497C  0100               	movlb	0	; () banked
 16166  01497E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16167                           
 16168                           ; BSR set to: 0
 16169  014980  0012               	return	
 16170  014982                     
 16171                           ; BSR set to: 0
 16172                           ;Port.c: 82: return (BytePtr)&TRISF;
 16173                           
 16174                           ; BSR set to: 0
 16175  014982  0E97               	movlw	151
 16176  014984  0100               	movlb	0	; () banked
 16177  014986  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16178  014988  0E0F               	movlw	15
 16179  01498A  0100               	movlb	0	; () banked
 16180  01498C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16181                           
 16182                           ; BSR set to: 0
 16183  01498E  0012               	return	
 16184  014990                     
 16185                           ; BSR set to: 0
 16186                           ;Port.c: 84: return (BytePtr)&TRISG;
 16187                           
 16188                           ; BSR set to: 0
 16189  014990  0E98               	movlw	152
 16190  014992  0100               	movlb	0	; () banked
 16191  014994  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16192  014996  0E0F               	movlw	15
 16193  014998  0100               	movlb	0	; () banked
 16194  01499A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16195                           
 16196                           ; BSR set to: 0
 16197  01499C  0012               	return	
 16198  01499E                     
 16199                           ; BSR set to: 0
 16200                           ;Port.c: 86: return (void*)0;
 16201                           
 16202                           ; BSR set to: 0
 16203  01499E  0E00               	movlw	0
 16204  0149A0  0100               	movlb	0	; () banked
 16205  0149A2  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16206  0149A4  0E00               	movlw	0
 16207  0149A6  0100               	movlb	0	; () banked
 16208  0149A8  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16209                           
 16210                           ; BSR set to: 0
 16211                           ;Port.c: 87: }
 16212                           
 16213                           ; BSR set to: 0
 16214  0149AA  0012               	return	
 16215  0149AC                     l363:
 16216                           
 16217                           ; BSR set to: 0
 16218  0149AC  0100               	movlb	0	; () banked
 16219  0149AE  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16220                           
 16221                           ; Switch size 1, requested type "space"
 16222                           ; Number of cases is 7, Range of values is 0 to 6
 16223                           ; switch strategies available:
 16224                           ; Name         Instructions Cycles
 16225                           ; simple_byte           22    12 (average)
 16226                           ;	Chosen strategy is simple_byte
 16227  0149B0  0A00               	xorlw	0	; case 0
 16228  0149B2  B4D8               	btfsc	status,2,c
 16229  0149B4  D7C3               	goto	l364
 16230  0149B6  0A01               	xorlw	1	; case 1
 16231  0149B8  B4D8               	btfsc	status,2,c
 16232  0149BA  D7C7               	goto	l366
 16233  0149BC  0A03               	xorlw	3	; case 2
 16234  0149BE  B4D8               	btfsc	status,2,c
 16235  0149C0  D7CB               	goto	l367
 16236  0149C2  0A01               	xorlw	1	; case 3
 16237  0149C4  B4D8               	btfsc	status,2,c
 16238  0149C6  D7CF               	goto	l368
 16239  0149C8  0A07               	xorlw	7	; case 4
 16240  0149CA  B4D8               	btfsc	status,2,c
 16241  0149CC  D7D3               	goto	l369
 16242  0149CE  0A01               	xorlw	1	; case 5
 16243  0149D0  B4D8               	btfsc	status,2,c
 16244  0149D2  D7D7               	goto	l370
 16245  0149D4  0A03               	xorlw	3	; case 6
 16246  0149D6  B4D8               	btfsc	status,2,c
 16247  0149D8  D7DB               	goto	l371
 16248  0149DA  D7E1               	goto	l372
 16249  0149DC                     __end_of_GetPortTRIS:
 16250                           	opt stack 0
 16251                           tblptru	equ	0xFF8
 16252                           tblptrh	equ	0xFF7
 16253                           tblptrl	equ	0xFF6
 16254                           tablat	equ	0xFF5
 16255                           prodh	equ	0xFF4
 16256                           prodl	equ	0xFF3
 16257                           intcon	equ	0xFF2
 16258                           postinc0	equ	0xFEE
 16259                           wreg	equ	0xFE8
 16260                           indf1	equ	0xFE7
 16261                           postdec1	equ	0xFE5
 16262                           fsr1h	equ	0xFE2
 16263                           fsr1l	equ	0xFE1
 16264                           indf2	equ	0xFDF
 16265                           postinc2	equ	0xFDE
 16266                           postdec2	equ	0xFDD
 16267                           fsr2h	equ	0xFDA
 16268                           fsr2l	equ	0xFD9
 16269                           status	equ	0xFD8
 16270                           
 16271 ;; *************** function _GetPortProperties *****************
 16272 ;; Defined at:
 16273 ;;		line 21 in file "Library/Port.c"
 16274 ;; Parameters:    Size  Location     Type
 16275 ;;  pInput          1    wreg     enum E6786
 16276 ;; Auto vars:     Size  Location     Type
 16277 ;;  pInput          1    2[BANK0 ] enum E6786
 16278 ;; Return value:  Size  Location     Type
 16279 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16280 ;; Registers used:
 16281 ;;		wreg, status,2, status,0
 16282 ;; Tracked objects:
 16283 ;;		On entry : 0/0
 16284 ;;		On exit  : 0/0
 16285 ;;		Unchanged: 0/0
 16286 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16287 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16288 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16289 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16290 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16291 ;;Total ram usage:        3 bytes
 16292 ;; Hardware stack levels used:    1
 16293 ;; Hardware stack levels required when called:    7
 16294 ;; This function calls:
 16295 ;;		Nothing
 16296 ;; This function is called by:
 16297 ;;		_Port_Init
 16298 ;; This function uses a non-reentrant model
 16299 ;;
 16300                           
 16301                           	psect	text67
 16302  0149DC                     __ptext67:
 16303                           	opt stack 0
 16304  0149DC                     _GetPortProperties:
 16305                           	opt stack 20
 16306                           
 16307                           ; BSR set to: 0
 16308                           ;incstack = 0
 16309                           ;GetPortProperties@pInput stored from wreg
 16310  0149DC  0100               	movlb	0	; () banked
 16311  0149DE  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16312                           
 16313                           ;Port.c: 23: switch (pInput)
 16314  0149E0  D038               	goto	l337
 16315  0149E2                     
 16316                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16317  0149E2  0E0B               	movlw	low _PortA_Property
 16318  0149E4  0100               	movlb	0	; () banked
 16319  0149E6  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16320  0149E8  0EFF               	movlw	high _PortA_Property
 16321  0149EA  0100               	movlb	0	; () banked
 16322  0149EC  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16323                           
 16324                           ; BSR set to: 0
 16325  0149EE  0012               	return	
 16326  0149F0                     
 16327                           ; BSR set to: 0
 16328                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16329                           
 16330                           ; BSR set to: 0
 16331  0149F0  0E09               	movlw	low _PortB_Property
 16332  0149F2  0100               	movlb	0	; () banked
 16333  0149F4  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16334  0149F6  0EFF               	movlw	high _PortB_Property
 16335  0149F8  0100               	movlb	0	; () banked
 16336  0149FA  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16337                           
 16338                           ; BSR set to: 0
 16339  0149FC  0012               	return	
 16340  0149FE                     
 16341                           ; BSR set to: 0
 16342                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16343                           
 16344                           ; BSR set to: 0
 16345  0149FE  0E07               	movlw	low _PortC_Property
 16346  014A00  0100               	movlb	0	; () banked
 16347  014A02  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16348  014A04  0EFF               	movlw	high _PortC_Property
 16349  014A06  0100               	movlb	0	; () banked
 16350  014A08  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16351                           
 16352                           ; BSR set to: 0
 16353  014A0A  0012               	return	
 16354  014A0C                     
 16355                           ; BSR set to: 0
 16356                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16357                           
 16358                           ; BSR set to: 0
 16359  014A0C  0E05               	movlw	low _PortD_Property
 16360  014A0E  0100               	movlb	0	; () banked
 16361  014A10  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16362  014A12  0EFF               	movlw	high _PortD_Property
 16363  014A14  0100               	movlb	0	; () banked
 16364  014A16  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16365                           
 16366                           ; BSR set to: 0
 16367  014A18  0012               	return	
 16368  014A1A                     
 16369                           ; BSR set to: 0
 16370                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16371                           
 16372                           ; BSR set to: 0
 16373  014A1A  0E03               	movlw	low _PortE_Property
 16374  014A1C  0100               	movlb	0	; () banked
 16375  014A1E  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16376  014A20  0EFF               	movlw	high _PortE_Property
 16377  014A22  0100               	movlb	0	; () banked
 16378  014A24  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16379                           
 16380                           ; BSR set to: 0
 16381  014A26  0012               	return	
 16382  014A28                     
 16383                           ; BSR set to: 0
 16384                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16385                           
 16386                           ; BSR set to: 0
 16387  014A28  0E01               	movlw	low _PortF_Property
 16388  014A2A  0100               	movlb	0	; () banked
 16389  014A2C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16390  014A2E  0EFF               	movlw	high _PortF_Property
 16391  014A30  0100               	movlb	0	; () banked
 16392  014A32  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16393                           
 16394                           ; BSR set to: 0
 16395  014A34  0012               	return	
 16396  014A36                     
 16397                           ; BSR set to: 0
 16398                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16399                           
 16400                           ; BSR set to: 0
 16401  014A36  0EFF               	movlw	low _PortG_Property
 16402  014A38  0100               	movlb	0	; () banked
 16403  014A3A  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16404  014A3C  0EFE               	movlw	high _PortG_Property
 16405  014A3E  0100               	movlb	0	; () banked
 16406  014A40  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16407                           
 16408                           ; BSR set to: 0
 16409  014A42  0012               	return	
 16410  014A44                     
 16411                           ; BSR set to: 0
 16412                           ;Port.c: 40: return (void*)0;
 16413                           
 16414                           ; BSR set to: 0
 16415  014A44  0E00               	movlw	0
 16416  014A46  0100               	movlb	0	; () banked
 16417  014A48  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16418  014A4A  0E00               	movlw	0
 16419  014A4C  0100               	movlb	0	; () banked
 16420  014A4E  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16421                           
 16422                           ; BSR set to: 0
 16423                           ;Port.c: 41: }
 16424                           
 16425                           ; BSR set to: 0
 16426  014A50  0012               	return	
 16427  014A52                     l337:
 16428                           
 16429                           ; BSR set to: 0
 16430  014A52  0100               	movlb	0	; () banked
 16431  014A54  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16432                           
 16433                           ; Switch size 1, requested type "space"
 16434                           ; Number of cases is 7, Range of values is 0 to 6
 16435                           ; switch strategies available:
 16436                           ; Name         Instructions Cycles
 16437                           ; simple_byte           22    12 (average)
 16438                           ;	Chosen strategy is simple_byte
 16439  014A56  0A00               	xorlw	0	; case 0
 16440  014A58  B4D8               	btfsc	status,2,c
 16441  014A5A  D7C3               	goto	l338
 16442  014A5C  0A01               	xorlw	1	; case 1
 16443  014A5E  B4D8               	btfsc	status,2,c
 16444  014A60  D7C7               	goto	l340
 16445  014A62  0A03               	xorlw	3	; case 2
 16446  014A64  B4D8               	btfsc	status,2,c
 16447  014A66  D7CB               	goto	l341
 16448  014A68  0A01               	xorlw	1	; case 3
 16449  014A6A  B4D8               	btfsc	status,2,c
 16450  014A6C  D7CF               	goto	l342
 16451  014A6E  0A07               	xorlw	7	; case 4
 16452  014A70  B4D8               	btfsc	status,2,c
 16453  014A72  D7D3               	goto	l343
 16454  014A74  0A01               	xorlw	1	; case 5
 16455  014A76  B4D8               	btfsc	status,2,c
 16456  014A78  D7D7               	goto	l344
 16457  014A7A  0A03               	xorlw	3	; case 6
 16458  014A7C  B4D8               	btfsc	status,2,c
 16459  014A7E  D7DB               	goto	l345
 16460  014A80  D7E1               	goto	l346
 16461  014A82                     __end_of_GetPortProperties:
 16462                           	opt stack 0
 16463                           tblptru	equ	0xFF8
 16464                           tblptrh	equ	0xFF7
 16465                           tblptrl	equ	0xFF6
 16466                           tablat	equ	0xFF5
 16467                           prodh	equ	0xFF4
 16468                           prodl	equ	0xFF3
 16469                           intcon	equ	0xFF2
 16470                           postinc0	equ	0xFEE
 16471                           wreg	equ	0xFE8
 16472                           indf1	equ	0xFE7
 16473                           postdec1	equ	0xFE5
 16474                           fsr1h	equ	0xFE2
 16475                           fsr1l	equ	0xFE1
 16476                           indf2	equ	0xFDF
 16477                           postinc2	equ	0xFDE
 16478                           postdec2	equ	0xFDD
 16479                           fsr2h	equ	0xFDA
 16480                           fsr2l	equ	0xFD9
 16481                           status	equ	0xFD8
 16482                           
 16483 ;; *************** function _GetPortPORT *****************
 16484 ;; Defined at:
 16485 ;;		line 44 in file "Library/Port.c"
 16486 ;; Parameters:    Size  Location     Type
 16487 ;;  pInput          1    wreg     enum E6786
 16488 ;; Auto vars:     Size  Location     Type
 16489 ;;  pInput          1    2[BANK0 ] enum E6786
 16490 ;; Return value:  Size  Location     Type
 16491 ;;                  2    0[BANK0 ] PTR struct Byte
 16492 ;; Registers used:
 16493 ;;		wreg, status,2, status,0
 16494 ;; Tracked objects:
 16495 ;;		On entry : 0/0
 16496 ;;		On exit  : 0/0
 16497 ;;		Unchanged: 0/0
 16498 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16499 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16502 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16503 ;;Total ram usage:        3 bytes
 16504 ;; Hardware stack levels used:    1
 16505 ;; Hardware stack levels required when called:    7
 16506 ;; This function calls:
 16507 ;;		Nothing
 16508 ;; This function is called by:
 16509 ;;		_Port_Init
 16510 ;; This function uses a non-reentrant model
 16511 ;;
 16512                           
 16513                           	psect	text68
 16514  014A82                     __ptext68:
 16515                           	opt stack 0
 16516  014A82                     _GetPortPORT:
 16517                           	opt stack 20
 16518                           
 16519                           ; BSR set to: 0
 16520                           ;incstack = 0
 16521                           ;GetPortPORT@pInput stored from wreg
 16522  014A82  0100               	movlb	0	; () banked
 16523  014A84  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16524                           
 16525                           ;Port.c: 46: switch (pInput)
 16526  014A86  D038               	goto	l350
 16527  014A88                     
 16528                           ;Port.c: 49: return (BytePtr)&PORTA;
 16529  014A88  0E80               	movlw	128
 16530  014A8A  0100               	movlb	0	; () banked
 16531  014A8C  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16532  014A8E  0E0F               	movlw	15
 16533  014A90  0100               	movlb	0	; () banked
 16534  014A92  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16535                           
 16536                           ; BSR set to: 0
 16537  014A94  0012               	return	
 16538  014A96                     
 16539                           ; BSR set to: 0
 16540                           ;Port.c: 51: return (BytePtr)&PORTB;
 16541                           
 16542                           ; BSR set to: 0
 16543  014A96  0E81               	movlw	129
 16544  014A98  0100               	movlb	0	; () banked
 16545  014A9A  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16546  014A9C  0E0F               	movlw	15
 16547  014A9E  0100               	movlb	0	; () banked
 16548  014AA0  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16549                           
 16550                           ; BSR set to: 0
 16551  014AA2  0012               	return	
 16552  014AA4                     
 16553                           ; BSR set to: 0
 16554                           ;Port.c: 53: return (BytePtr)&PORTC;
 16555                           
 16556                           ; BSR set to: 0
 16557  014AA4  0E82               	movlw	130
 16558  014AA6  0100               	movlb	0	; () banked
 16559  014AA8  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16560  014AAA  0E0F               	movlw	15
 16561  014AAC  0100               	movlb	0	; () banked
 16562  014AAE  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16563                           
 16564                           ; BSR set to: 0
 16565  014AB0  0012               	return	
 16566  014AB2                     
 16567                           ; BSR set to: 0
 16568                           ;Port.c: 55: return (BytePtr)&PORTD;
 16569                           
 16570                           ; BSR set to: 0
 16571  014AB2  0E83               	movlw	131
 16572  014AB4  0100               	movlb	0	; () banked
 16573  014AB6  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16574  014AB8  0E0F               	movlw	15
 16575  014ABA  0100               	movlb	0	; () banked
 16576  014ABC  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16577                           
 16578                           ; BSR set to: 0
 16579  014ABE  0012               	return	
 16580  014AC0                     
 16581                           ; BSR set to: 0
 16582                           ;Port.c: 57: return (BytePtr)&PORTE;
 16583                           
 16584                           ; BSR set to: 0
 16585  014AC0  0E84               	movlw	132
 16586  014AC2  0100               	movlb	0	; () banked
 16587  014AC4  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16588  014AC6  0E0F               	movlw	15
 16589  014AC8  0100               	movlb	0	; () banked
 16590  014ACA  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16591                           
 16592                           ; BSR set to: 0
 16593  014ACC  0012               	return	
 16594  014ACE                     
 16595                           ; BSR set to: 0
 16596                           ;Port.c: 59: return (BytePtr)&PORTF;
 16597                           
 16598                           ; BSR set to: 0
 16599  014ACE  0E85               	movlw	133
 16600  014AD0  0100               	movlb	0	; () banked
 16601  014AD2  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16602  014AD4  0E0F               	movlw	15
 16603  014AD6  0100               	movlb	0	; () banked
 16604  014AD8  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16605                           
 16606                           ; BSR set to: 0
 16607  014ADA  0012               	return	
 16608  014ADC                     
 16609                           ; BSR set to: 0
 16610                           ;Port.c: 61: return (BytePtr)&PORTG;
 16611                           
 16612                           ; BSR set to: 0
 16613  014ADC  0E86               	movlw	134
 16614  014ADE  0100               	movlb	0	; () banked
 16615  014AE0  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16616  014AE2  0E0F               	movlw	15
 16617  014AE4  0100               	movlb	0	; () banked
 16618  014AE6  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16619                           
 16620                           ; BSR set to: 0
 16621  014AE8  0012               	return	
 16622  014AEA                     
 16623                           ; BSR set to: 0
 16624                           ;Port.c: 63: return (void*)0;
 16625                           
 16626                           ; BSR set to: 0
 16627  014AEA  0E00               	movlw	0
 16628  014AEC  0100               	movlb	0	; () banked
 16629  014AEE  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16630  014AF0  0E00               	movlw	0
 16631  014AF2  0100               	movlb	0	; () banked
 16632  014AF4  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;Port.c: 64: }
 16636                           
 16637                           ; BSR set to: 0
 16638  014AF6  0012               	return	
 16639  014AF8                     l350:
 16640                           
 16641                           ; BSR set to: 0
 16642  014AF8  0100               	movlb	0	; () banked
 16643  014AFA  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16644                           
 16645                           ; Switch size 1, requested type "space"
 16646                           ; Number of cases is 7, Range of values is 0 to 6
 16647                           ; switch strategies available:
 16648                           ; Name         Instructions Cycles
 16649                           ; simple_byte           22    12 (average)
 16650                           ;	Chosen strategy is simple_byte
 16651  014AFC  0A00               	xorlw	0	; case 0
 16652  014AFE  B4D8               	btfsc	status,2,c
 16653  014B00  D7C3               	goto	l351
 16654  014B02  0A01               	xorlw	1	; case 1
 16655  014B04  B4D8               	btfsc	status,2,c
 16656  014B06  D7C7               	goto	l353
 16657  014B08  0A03               	xorlw	3	; case 2
 16658  014B0A  B4D8               	btfsc	status,2,c
 16659  014B0C  D7CB               	goto	l354
 16660  014B0E  0A01               	xorlw	1	; case 3
 16661  014B10  B4D8               	btfsc	status,2,c
 16662  014B12  D7CF               	goto	l355
 16663  014B14  0A07               	xorlw	7	; case 4
 16664  014B16  B4D8               	btfsc	status,2,c
 16665  014B18  D7D3               	goto	l356
 16666  014B1A  0A01               	xorlw	1	; case 5
 16667  014B1C  B4D8               	btfsc	status,2,c
 16668  014B1E  D7D7               	goto	l357
 16669  014B20  0A03               	xorlw	3	; case 6
 16670  014B22  B4D8               	btfsc	status,2,c
 16671  014B24  D7DB               	goto	l358
 16672  014B26  D7E1               	goto	l359
 16673  014B28                     __end_of_GetPortPORT:
 16674                           	opt stack 0
 16675                           tblptru	equ	0xFF8
 16676                           tblptrh	equ	0xFF7
 16677                           tblptrl	equ	0xFF6
 16678                           tablat	equ	0xFF5
 16679                           prodh	equ	0xFF4
 16680                           prodl	equ	0xFF3
 16681                           intcon	equ	0xFF2
 16682                           postinc0	equ	0xFEE
 16683                           wreg	equ	0xFE8
 16684                           indf1	equ	0xFE7
 16685                           postdec1	equ	0xFE5
 16686                           fsr1h	equ	0xFE2
 16687                           fsr1l	equ	0xFE1
 16688                           indf2	equ	0xFDF
 16689                           postinc2	equ	0xFDE
 16690                           postdec2	equ	0xFDD
 16691                           fsr2h	equ	0xFDA
 16692                           fsr2l	equ	0xFD9
 16693                           status	equ	0xFD8
 16694                           
 16695 ;; *************** function _LED_Init *****************
 16696 ;; Defined at:
 16697 ;;		line 15 in file "Library/LED.c"
 16698 ;; Parameters:    Size  Location     Type
 16699 ;;  pLED            1    wreg     enum E6739
 16700 ;; Auto vars:     Size  Location     Type
 16701 ;;  pLED            1   45[BANK0 ] enum E6739
 16702 ;; Return value:  Size  Location     Type
 16703 ;;                  1    wreg      void 
 16704 ;; Registers used:
 16705 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16706 ;; Tracked objects:
 16707 ;;		On entry : 0/0
 16708 ;;		On exit  : 0/0
 16709 ;;		Unchanged: 0/0
 16710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16712 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16714 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;Total ram usage:        1 bytes
 16716 ;; Hardware stack levels used:    1
 16717 ;; Hardware stack levels required when called:   12
 16718 ;; This function calls:
 16719 ;;		_LED_Set
 16720 ;;		_Port_SetPinType
 16721 ;; This function is called by:
 16722 ;;		_MXK_Init
 16723 ;; This function uses a non-reentrant model
 16724 ;;
 16725                           
 16726                           	psect	text69
 16727  015952                     __ptext69:
 16728                           	opt stack 0
 16729  015952                     _LED_Init:
 16730                           	opt stack 16
 16731                           
 16732                           ; BSR set to: 0
 16733                           ;incstack = 0
 16734                           ;LED_Init@pLED stored from wreg
 16735  015952  0100               	movlb	0	; () banked
 16736  015954  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16737                           
 16738                           ;LED.c: 17: switch (pLED)
 16739  015956  D01E               	goto	l220
 16740  015958                     
 16741                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16742  015958  0EA5               	movlw	low _PortC
 16743  01595A  0100               	movlb	0	; () banked
 16744  01595C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16745  01595E  0E00               	movlw	high _PortC
 16746  015960  0100               	movlb	0	; () banked
 16747  015962  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16748  015964  0E00               	movlw	0
 16749  015966  0100               	movlb	0	; () banked
 16750  015968  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16751  01596A  0E03               	movlw	3
 16752  01596C  0100               	movlb	0	; () banked
 16753  01596E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16754  015970  EC95  F093         	call	_Port_SetPinType	;wreg free
 16755                           
 16756                           ;LED.c: 21: break;
 16757  015974  D017               	goto	l222
 16758  015976                     
 16759                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16760  015976  0EA5               	movlw	low _PortC
 16761  015978  0100               	movlb	0	; () banked
 16762  01597A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16763  01597C  0E00               	movlw	high _PortC
 16764  01597E  0100               	movlb	0	; () banked
 16765  015980  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16766  015982  0E01               	movlw	1
 16767  015984  0100               	movlb	0	; () banked
 16768  015986  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16769  015988  0E03               	movlw	3
 16770  01598A  0100               	movlb	0	; () banked
 16771  01598C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16772  01598E  EC95  F093         	call	_Port_SetPinType	;wreg free
 16773                           
 16774                           ;LED.c: 25: }
 16775                           
 16776                           ;LED.c: 24: break;
 16777  015992  D008               	goto	l222
 16778  015994                     l220:
 16779  015994  0100               	movlb	0	; () banked
 16780  015996  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16781                           
 16782                           ; Switch size 1, requested type "space"
 16783                           ; Number of cases is 2, Range of values is 0 to 1
 16784                           ; switch strategies available:
 16785                           ; Name         Instructions Cycles
 16786                           ; simple_byte            7     4 (average)
 16787                           ;	Chosen strategy is simple_byte
 16788  015998  0A00               	xorlw	0	; case 0
 16789  01599A  B4D8               	btfsc	status,2,c
 16790  01599C  D7DD               	goto	l221
 16791  01599E  0A01               	xorlw	1	; case 1
 16792  0159A0  B4D8               	btfsc	status,2,c
 16793  0159A2  D7E9               	goto	l223
 16794  0159A4                     l222:
 16795                           
 16796                           ;LED.c: 26: LED_Set(pLED, 0);
 16797                           
 16798                           ; BSR set to: 0
 16799  0159A4  0E00               	movlw	0
 16800  0159A6  0100               	movlb	0	; () banked
 16801  0159A8  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16802  0159AA  0100               	movlb	0	; () banked
 16803  0159AC  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16804  0159AE  ECE7  F0AD         	call	_LED_Set
 16805  0159B2  0012               	return		;funcret
 16806  0159B4                     __end_of_LED_Init:
 16807                           	opt stack 0
 16808                           tblptru	equ	0xFF8
 16809                           tblptrh	equ	0xFF7
 16810                           tblptrl	equ	0xFF6
 16811                           tablat	equ	0xFF5
 16812                           prodh	equ	0xFF4
 16813                           prodl	equ	0xFF3
 16814                           intcon	equ	0xFF2
 16815                           postinc0	equ	0xFEE
 16816                           wreg	equ	0xFE8
 16817                           indf1	equ	0xFE7
 16818                           postdec1	equ	0xFE5
 16819                           fsr1h	equ	0xFE2
 16820                           fsr1l	equ	0xFE1
 16821                           indf2	equ	0xFDF
 16822                           postinc2	equ	0xFDE
 16823                           postdec2	equ	0xFDD
 16824                           fsr2h	equ	0xFDA
 16825                           fsr2l	equ	0xFD9
 16826                           status	equ	0xFD8
 16827                           
 16828 ;; *************** function _LED_Set *****************
 16829 ;; Defined at:
 16830 ;;		line 33 in file "Library/LED.c"
 16831 ;; Parameters:    Size  Location     Type
 16832 ;;  pLED            1    wreg     enum E6739
 16833 ;;  pValue          1   20[BANK0 ] unsigned char 
 16834 ;; Auto vars:     Size  Location     Type
 16835 ;;  pLED            1   21[BANK0 ] enum E6739
 16836 ;; Return value:  Size  Location     Type
 16837 ;;                  1    wreg      void 
 16838 ;; Registers used:
 16839 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16840 ;; Tracked objects:
 16841 ;;		On entry : 0/0
 16842 ;;		On exit  : 0/0
 16843 ;;		Unchanged: 0/0
 16844 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16845 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16846 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16847 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16848 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16849 ;;Total ram usage:        2 bytes
 16850 ;; Hardware stack levels used:    1
 16851 ;; Hardware stack levels required when called:   11
 16852 ;; This function calls:
 16853 ;;		_Port_SetPin
 16854 ;; This function is called by:
 16855 ;;		_LED_Init
 16856 ;;		_SYSTEM_Initialize
 16857 ;; This function uses a non-reentrant model
 16858 ;;
 16859                           
 16860                           	psect	text70
 16861  015BCE                     __ptext70:
 16862                           	opt stack 0
 16863  015BCE                     _LED_Set:
 16864                           	opt stack 16
 16865                           
 16866                           ;incstack = 0
 16867                           ;LED_Set@pLED stored from wreg
 16868  015BCE  0100               	movlb	0	; () banked
 16869  015BD0  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16870                           
 16871                           ;LED.c: 35: switch (pLED)
 16872  015BD2  D01C               	goto	l227
 16873  015BD4                     
 16874                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16875  015BD4  0EA5               	movlw	low _PortC
 16876  015BD6  0100               	movlb	0	; () banked
 16877  015BD8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16878  015BDA  0E00               	movlw	high _PortC
 16879  015BDC  0100               	movlb	0	; () banked
 16880  015BDE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16881  015BE0  0E00               	movlw	0
 16882  015BE2  0100               	movlb	0	; () banked
 16883  015BE4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16884  015BE6  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16885  015BEA  EC02  F0A0         	call	_Port_SetPin	;wreg free
 16886                           
 16887                           ;LED.c: 39: break;
 16888  015BEE  0012               	return	
 16889  015BF0                     
 16890                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16891  015BF0  0EA5               	movlw	low _PortC
 16892  015BF2  0100               	movlb	0	; () banked
 16893  015BF4  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16894  015BF6  0E00               	movlw	high _PortC
 16895  015BF8  0100               	movlb	0	; () banked
 16896  015BFA  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16897  015BFC  0E01               	movlw	1
 16898  015BFE  0100               	movlb	0	; () banked
 16899  015C00  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16900  015C02  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16901  015C06  EC02  F0A0         	call	_Port_SetPin	;wreg free
 16902                           
 16903                           ;LED.c: 43: }
 16904                           
 16905                           ;LED.c: 42: break;
 16906  015C0A  0012               	return	
 16907  015C0C                     l227:
 16908  015C0C  0100               	movlb	0	; () banked
 16909  015C0E  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16910                           
 16911                           ; Switch size 1, requested type "space"
 16912                           ; Number of cases is 2, Range of values is 0 to 1
 16913                           ; switch strategies available:
 16914                           ; Name         Instructions Cycles
 16915                           ; simple_byte            7     4 (average)
 16916                           ;	Chosen strategy is simple_byte
 16917  015C10  0A00               	xorlw	0	; case 0
 16918  015C12  B4D8               	btfsc	status,2,c
 16919  015C14  D7DF               	goto	l228
 16920  015C16  0A01               	xorlw	1	; case 1
 16921  015C18  A4D8               	btfss	status,2,c
 16922  015C1A  0012               	return	
 16923  015C1C  D7E9               	goto	l230
 16924  015C1E                     __end_of_LED_Set:
 16925                           	opt stack 0
 16926                           tblptru	equ	0xFF8
 16927                           tblptrh	equ	0xFF7
 16928                           tblptrl	equ	0xFF6
 16929                           tablat	equ	0xFF5
 16930                           prodh	equ	0xFF4
 16931                           prodl	equ	0xFF3
 16932                           intcon	equ	0xFF2
 16933                           postinc0	equ	0xFEE
 16934                           wreg	equ	0xFE8
 16935                           indf1	equ	0xFE7
 16936                           postdec1	equ	0xFE5
 16937                           fsr1h	equ	0xFE2
 16938                           fsr1l	equ	0xFE1
 16939                           indf2	equ	0xFDF
 16940                           postinc2	equ	0xFDE
 16941                           postdec2	equ	0xFDD
 16942                           fsr2h	equ	0xFDA
 16943                           fsr2l	equ	0xFD9
 16944                           status	equ	0xFD8
 16945                           
 16946 ;; *************** function _MXK_Dequeue *****************
 16947 ;; Defined at:
 16948 ;;		line 153 in file "Library/MXK.c"
 16949 ;; Parameters:    Size  Location     Type
 16950 ;;		None
 16951 ;; Auto vars:     Size  Location     Type
 16952 ;;		None
 16953 ;; Return value:  Size  Location     Type
 16954 ;;                  1    wreg      void 
 16955 ;; Registers used:
 16956 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16957 ;; Tracked objects:
 16958 ;;		On entry : 0/0
 16959 ;;		On exit  : 0/0
 16960 ;;		Unchanged: 0/0
 16961 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16962 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16963 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16964 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16965 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16966 ;;Total ram usage:        0 bytes
 16967 ;; Hardware stack levels used:    1
 16968 ;; Hardware stack levels required when called:   12
 16969 ;; This function calls:
 16970 ;;		Absolute function
 16971 ;;		_Motor_Step
 16972 ;; This function is called by:
 16973 ;;		_init
 16974 ;;		_findClosestWall
 16975 ;;		_mode1
 16976 ;;		_mode2
 16977 ;;		_mode4
 16978 ;;		_main
 16979 ;; This function uses a non-reentrant model
 16980 ;;
 16981                           
 16982                           	psect	text71
 16983  01603C                     __ptext71:
 16984                           	opt stack 0
 16985  01603C                     _MXK_Dequeue:
 16986                           	opt stack 16
 16987                           
 16988                           ;MXK.c: 155: if (lQueue)
 16989                           
 16990                           ;incstack = 0
 16991  01603C  0100               	movlb	0	; () banked
 16992  01603E  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16993  016040  0100               	movlb	0	; () banked
 16994  016042  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16995  016044  0100               	movlb	0	; () banked
 16996  016046  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16997  016048  B4D8               	btfsc	status,2,c
 16998  01604A  D00D               	goto	u13849
 16999                           
 17000                           ; BSR set to: 0
 17001                           ;MXK.c: 156: lQueue();
 17002  01604C  D801               	call	u13848
 17003  01604E  D00B               	goto	u13849
 17004  016050                     u13848:
 17005  016050  0005               	push	
 17006  016052  6EFA               	movwf	pclath,c
 17007  016054  0100               	movlb	0	; () banked
 17008  016056  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17009  016058  6EFD               	movwf	tosl,c
 17010  01605A  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 17011  01605C  6EFE               	movwf	tosh,c
 17012  01605E  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 17013  016060  6EFF               	movwf	tosu,c
 17014  016062  50FA               	movf	pclath,w,c
 17015  016064  0012               	return		;indir
 17016  016066                     u13849:
 17017                           
 17018                           ;MXK.c: 157: lQueue = 0;
 17019  016066  0E00               	movlw	0
 17020  016068  0100               	movlb	0	; () banked
 17021  01606A  6F63               	movwf	_lQueue& (0+255),b	;volatile
 17022  01606C  0E00               	movlw	0
 17023  01606E  0100               	movlb	0	; () banked
 17024  016070  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 17025  016072  0E00               	movlw	0
 17026  016074  0100               	movlb	0	; () banked
 17027  016076  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 17028                           
 17029                           ; BSR set to: 0
 17030  016078  0012               	return		;funcret
 17031  01607A                     __end_of_MXK_Dequeue:
 17032                           	opt stack 0
 17033                           tosu	equ	0xFFF
 17034                           tosh	equ	0xFFE
 17035                           tosl	equ	0xFFD
 17036                           pclath	equ	0xFFA
 17037                           tblptru	equ	0xFF8
 17038                           tblptrh	equ	0xFF7
 17039                           tblptrl	equ	0xFF6
 17040                           tablat	equ	0xFF5
 17041                           prodh	equ	0xFF4
 17042                           prodl	equ	0xFF3
 17043                           intcon	equ	0xFF2
 17044                           postinc0	equ	0xFEE
 17045                           wreg	equ	0xFE8
 17046                           indf1	equ	0xFE7
 17047                           postdec1	equ	0xFE5
 17048                           fsr1h	equ	0xFE2
 17049                           fsr1l	equ	0xFE1
 17050                           indf2	equ	0xFDF
 17051                           postinc2	equ	0xFDE
 17052                           postdec2	equ	0xFDD
 17053                           fsr2h	equ	0xFDA
 17054                           fsr2l	equ	0xFD9
 17055                           status	equ	0xFD8
 17056                           
 17057 ;; *************** function _Motor_Step *****************
 17058 ;; Defined at:
 17059 ;;		line 75 in file "Library/Motor.c"
 17060 ;; Parameters:    Size  Location     Type
 17061 ;;		None
 17062 ;; Auto vars:     Size  Location     Type
 17063 ;;		None
 17064 ;; Return value:  Size  Location     Type
 17065 ;;                  1    wreg      void 
 17066 ;; Registers used:
 17067 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17068 ;; Tracked objects:
 17069 ;;		On entry : 0/0
 17070 ;;		On exit  : 0/0
 17071 ;;		Unchanged: 0/0
 17072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17073 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17074 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17075 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17077 ;;Total ram usage:        2 bytes
 17078 ;; Hardware stack levels used:    1
 17079 ;; Hardware stack levels required when called:   11
 17080 ;; This function calls:
 17081 ;;		_MXK_Queue
 17082 ;;		_MXK_Release
 17083 ;;		_MXK_SwitchTo
 17084 ;;		_Port_SetPin
 17085 ;;		_Timer0_Restart
 17086 ;;		_Timer0_Stop
 17087 ;; This function is called by:
 17088 ;;		_Motor_Init
 17089 ;;		_MXK_Dequeue
 17090 ;;		_Timer0_ISR
 17091 ;; This function uses a non-reentrant model
 17092 ;;
 17093                           
 17094                           	psect	text72
 17095  0135F2                     __ptext72:
 17096                           	opt stack 0
 17097  0135F2                     _Motor_Step:
 17098                           	opt stack 0
 17099                           
 17100                           ; BSR set to: 0
 17101                           ;Skip over the trampoline to the duplicate function for level 2
 17102  0135F2  B251               	btfsc	btemp,1,c
 17103  0135F4  EF12  F09C         	goto	i2_Motor_Step
 17104  0135F8                     _Motor_Step$intlevel0:
 17105                           	opt stack 16
 17106                           
 17107                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 17108                           
 17109                           ;incstack = 0
 17110  0135F8  0100               	movlb	0	; () banked
 17111  0135FA  EE20 F004          	lfsr	2,4
 17112  0135FE  517F               	movf	_lMotor& (0+255),w,b
 17113  013600  26D9               	addwf	fsr2l,f,c
 17114  013602  5180               	movf	(_lMotor+1)& (0+255),w,b
 17115  013604  22DA               	addwfc	fsr2h,f,c
 17116  013606  50DF               	movf	indf2,w,c
 17117  013608  EC9E  F0AF         	call	_MXK_SwitchTo
 17118  01360C  0900               	iorlw	0
 17119  01360E  B4D8               	btfsc	status,2,c
 17120  013610  D07A               	goto	l1627
 17121                           
 17122                           ;Motor.c: 78: {
 17123                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 17124  013612  C07F  FFD9         	movff	_lMotor,fsr2l
 17125  013616  C080  FFDA         	movff	_lMotor+1,fsr2h
 17126  01361A  50DE               	movf	postinc2,w,c
 17127  01361C  10DE               	iorwf	postinc2,w,c
 17128  01361E  B4D8               	btfsc	status,2,c
 17129  013620  D06D               	goto	l1628
 17130                           
 17131                           ;Motor.c: 80: {
 17132                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 17133  013622  C07F  FFD9         	movff	_lMotor,fsr2l
 17134  013626  C080  FFDA         	movff	_lMotor+1,fsr2h
 17135  01362A  0E01               	movlw	1
 17136  01362C  BEDB               	btfsc	plusw2,7,c
 17137  01362E  D026               	goto	l1629
 17138  013630  0E01               	movlw	1
 17139  013632  50DB               	movf	plusw2,w,c
 17140  013634  E103               	bnz	u10170
 17141  013636  04DE               	decf	postinc2,w,c
 17142  013638  A0D8               	btfss	status,0,c
 17143  01363A  D020               	goto	l1629
 17144  01363C                     u10170:
 17145                           
 17146                           ;Motor.c: 83: {
 17147                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17148  01363C  C07F  FFD9         	movff	_lMotor,fsr2l
 17149  013640  C080  FFDA         	movff	_lMotor+1,fsr2h
 17150  013644  28DE               	incf	postinc2,w,c
 17151  013646  E104               	bnz	u10180
 17152  013648  0E7F               	movlw	127
 17153  01364A  18DE               	xorwf	postinc2,w,c
 17154  01364C  B4D8               	btfsc	status,2,c
 17155  01364E  D007               	goto	l1630
 17156  013650                     u10180:
 17157                           
 17158                           ;Motor.c: 85: lMotor->mDelta --;
 17159  013650  C07F  FFD9         	movff	_lMotor,fsr2l
 17160  013654  C080  FFDA         	movff	_lMotor+1,fsr2h
 17161  013658  06DE               	decf	postinc2,f,c
 17162  01365A  0E00               	movlw	0
 17163  01365C  5ADD               	subwfb	postdec2,f,c
 17164  01365E                     l1630:
 17165                           
 17166                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 17167  01365E  0E91               	movlw	low _PortE
 17168  013660  0100               	movlb	0	; () banked
 17169  013662  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17170  013664  0E00               	movlw	high _PortE
 17171  013666  0100               	movlb	0	; () banked
 17172  013668  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17173  01366A  0E00               	movlw	0
 17174  01366C  0100               	movlb	0	; () banked
 17175  01366E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17176  013670  0E01               	movlw	1
 17177  013672  0100               	movlb	0	; () banked
 17178  013674  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17179  013676  EC02  F0A0         	call	_Port_SetPin	;wreg free
 17180                           
 17181                           ;Motor.c: 88: }
 17182  01367A  D01F               	goto	l1631
 17183  01367C                     l1629:
 17184                           
 17185                           ;Motor.c: 89: else
 17186                           ;Motor.c: 90: {
 17187                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 17188  01367C  C07F  FFD9         	movff	_lMotor,fsr2l
 17189  013680  C080  FFDA         	movff	_lMotor+1,fsr2h
 17190  013684  04DE               	decf	postinc2,w,c
 17191  013686  E104               	bnz	u10190
 17192  013688  0E80               	movlw	128
 17193  01368A  18DE               	xorwf	postinc2,w,c
 17194  01368C  B4D8               	btfsc	status,2,c
 17195  01368E  D007               	goto	l1632
 17196  013690                     u10190:
 17197                           
 17198                           ;Motor.c: 92: lMotor->mDelta ++;
 17199  013690  C07F  FFD9         	movff	_lMotor,fsr2l
 17200  013694  C080  FFDA         	movff	_lMotor+1,fsr2h
 17201  013698  2ADE               	incf	postinc2,f,c
 17202  01369A  0E00               	movlw	0
 17203  01369C  22DD               	addwfc	postdec2,f,c
 17204  01369E                     l1632:
 17205                           
 17206                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 17207  01369E  0E91               	movlw	low _PortE
 17208  0136A0  0100               	movlb	0	; () banked
 17209  0136A2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17210  0136A4  0E00               	movlw	high _PortE
 17211  0136A6  0100               	movlb	0	; () banked
 17212  0136A8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17213  0136AA  0E00               	movlw	0
 17214  0136AC  0100               	movlb	0	; () banked
 17215  0136AE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17216  0136B0  0E00               	movlw	0
 17217  0136B2  0100               	movlb	0	; () banked
 17218  0136B4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17219  0136B6  EC02  F0A0         	call	_Port_SetPin	;wreg free
 17220  0136BA                     l1631:
 17221                           
 17222                           ;Motor.c: 95: }
 17223                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17224  0136BA  0E91               	movlw	low _PortE
 17225  0136BC  0100               	movlb	0	; () banked
 17226  0136BE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17227  0136C0  0E00               	movlw	high _PortE
 17228  0136C2  0100               	movlb	0	; () banked
 17229  0136C4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17230  0136C6  0E01               	movlw	1
 17231  0136C8  0100               	movlb	0	; () banked
 17232  0136CA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17233  0136CC  0E01               	movlw	1
 17234  0136CE  0100               	movlb	0	; () banked
 17235  0136D0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17236  0136D2  EC02  F0A0         	call	_Port_SetPin	;wreg free
 17237                           
 17238                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17239  0136D6  0E91               	movlw	low _PortE
 17240  0136D8  0100               	movlb	0	; () banked
 17241  0136DA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17242  0136DC  0E00               	movlw	high _PortE
 17243  0136DE  0100               	movlb	0	; () banked
 17244  0136E0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17245  0136E2  0E01               	movlw	1
 17246  0136E4  0100               	movlb	0	; () banked
 17247  0136E6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17248  0136E8  0E00               	movlw	0
 17249  0136EA  0100               	movlb	0	; () banked
 17250  0136EC  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17251  0136EE  EC02  F0A0         	call	_Port_SetPin	;wreg free
 17252                           
 17253                           ;Motor.c: 101: MXK_Release();
 17254  0136F2  ECCC  F0B2         	call	_MXK_Release	;wreg free
 17255                           
 17256                           ;Motor.c: 102: Timer0_Restart();
 17257  0136F6  ECC5  F0B3         	call	_Timer0_Restart	;wreg free
 17258                           
 17259                           ;Motor.c: 103: return;
 17260  0136FA  0012               	return	
 17261  0136FC                     l1628:
 17262                           
 17263                           ;Motor.c: 104: }
 17264                           ;Motor.c: 105: MXK_Release();
 17265  0136FC  ECCC  F0B2         	call	_MXK_Release	;wreg free
 17266                           
 17267                           ;Motor.c: 106: Timer0_Stop();
 17268  013700  ECF0  F0B3         	call	_Timer0_Stop	;wreg free
 17269                           
 17270                           ;Motor.c: 107: return;
 17271  013704  0012               	return	
 17272  013706                     l1627:
 17273                           
 17274                           ;Motor.c: 108: }
 17275                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17276  013706  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17277  01370A  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17278  01370E  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17279  013712  ECAB  F0B3         	call	_MXK_Queue	;wreg free
 17280  013716  0012               	return		;funcret
 17281  013718                     __end_of_Motor_Step:
 17282                           	opt stack 0
 17283                           tosu	equ	0xFFF
 17284                           tosh	equ	0xFFE
 17285                           tosl	equ	0xFFD
 17286                           pclath	equ	0xFFA
 17287                           tblptru	equ	0xFF8
 17288                           tblptrh	equ	0xFF7
 17289                           tblptrl	equ	0xFF6
 17290                           tablat	equ	0xFF5
 17291                           prodh	equ	0xFF4
 17292                           prodl	equ	0xFF3
 17293                           intcon	equ	0xFF2
 17294                           postinc0	equ	0xFEE
 17295                           wreg	equ	0xFE8
 17296                           indf1	equ	0xFE7
 17297                           postdec1	equ	0xFE5
 17298                           fsr1h	equ	0xFE2
 17299                           fsr1l	equ	0xFE1
 17300                           indf2	equ	0xFDF
 17301                           postinc2	equ	0xFDE
 17302                           postdec2	equ	0xFDD
 17303                           plusw2	equ	0xFDB
 17304                           fsr2h	equ	0xFDA
 17305                           fsr2l	equ	0xFD9
 17306                           status	equ	0xFD8
 17307                           
 17308 ;; *************** function _Timer0_Stop *****************
 17309 ;; Defined at:
 17310 ;;		line 89 in file "Library/Timer0.c"
 17311 ;; Parameters:    Size  Location     Type
 17312 ;;		None
 17313 ;; Auto vars:     Size  Location     Type
 17314 ;;		None
 17315 ;; Return value:  Size  Location     Type
 17316 ;;                  1    wreg      void 
 17317 ;; Registers used:
 17318 ;;		None
 17319 ;; Tracked objects:
 17320 ;;		On entry : 0/0
 17321 ;;		On exit  : 0/0
 17322 ;;		Unchanged: 0/0
 17323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;Total ram usage:        0 bytes
 17329 ;; Hardware stack levels used:    1
 17330 ;; Hardware stack levels required when called:    7
 17331 ;; This function calls:
 17332 ;;		Nothing
 17333 ;; This function is called by:
 17334 ;;		_Motor_Step
 17335 ;; This function uses a non-reentrant model
 17336 ;;
 17337                           
 17338                           	psect	text73
 17339  0167E0                     __ptext73:
 17340                           	opt stack 0
 17341  0167E0                     _Timer0_Stop:
 17342                           	opt stack 19
 17343                           
 17344                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17345                           
 17346                           ;incstack = 0
 17347  0167E0  9AF2               	bcf	intcon,5,c	;volatile
 17348                           
 17349                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17350  0167E2  94F2               	bcf	intcon,2,c	;volatile
 17351  0167E4  0012               	return		;funcret
 17352  0167E6                     __end_of_Timer0_Stop:
 17353                           	opt stack 0
 17354                           tosu	equ	0xFFF
 17355                           tosh	equ	0xFFE
 17356                           tosl	equ	0xFFD
 17357                           pclath	equ	0xFFA
 17358                           tblptru	equ	0xFF8
 17359                           tblptrh	equ	0xFF7
 17360                           tblptrl	equ	0xFF6
 17361                           tablat	equ	0xFF5
 17362                           prodh	equ	0xFF4
 17363                           prodl	equ	0xFF3
 17364                           intcon	equ	0xFF2
 17365                           postinc0	equ	0xFEE
 17366                           wreg	equ	0xFE8
 17367                           indf1	equ	0xFE7
 17368                           postdec1	equ	0xFE5
 17369                           fsr1h	equ	0xFE2
 17370                           fsr1l	equ	0xFE1
 17371                           indf2	equ	0xFDF
 17372                           postinc2	equ	0xFDE
 17373                           postdec2	equ	0xFDD
 17374                           plusw2	equ	0xFDB
 17375                           fsr2h	equ	0xFDA
 17376                           fsr2l	equ	0xFD9
 17377                           status	equ	0xFD8
 17378                           
 17379 ;; *************** function _Timer0_Restart *****************
 17380 ;; Defined at:
 17381 ;;		line 83 in file "Library/Timer0.c"
 17382 ;; Parameters:    Size  Location     Type
 17383 ;;		None
 17384 ;; Auto vars:     Size  Location     Type
 17385 ;;		None
 17386 ;; Return value:  Size  Location     Type
 17387 ;;                  1    wreg      void 
 17388 ;; Registers used:
 17389 ;;		None
 17390 ;; Tracked objects:
 17391 ;;		On entry : 0/0
 17392 ;;		On exit  : 0/0
 17393 ;;		Unchanged: 0/0
 17394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17399 ;;Total ram usage:        0 bytes
 17400 ;; Hardware stack levels used:    1
 17401 ;; Hardware stack levels required when called:    7
 17402 ;; This function calls:
 17403 ;;		Nothing
 17404 ;; This function is called by:
 17405 ;;		_Motor_Step
 17406 ;; This function uses a non-reentrant model
 17407 ;;
 17408                           
 17409                           	psect	text74
 17410  01678A                     __ptext74:
 17411                           	opt stack 0
 17412  01678A                     _Timer0_Restart:
 17413                           	opt stack 19
 17414                           
 17415                           ;Timer0.c: 85: TMR0 = COUNTER;
 17416                           
 17417                           ;incstack = 0
 17418  01678A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17419  01678E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17420                           
 17421                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17422  016792  8AF2               	bsf	intcon,5,c	;volatile
 17423  016794  0012               	return		;funcret
 17424  016796                     __end_of_Timer0_Restart:
 17425                           	opt stack 0
 17426                           tosu	equ	0xFFF
 17427                           tosh	equ	0xFFE
 17428                           tosl	equ	0xFFD
 17429                           pclath	equ	0xFFA
 17430                           tblptru	equ	0xFF8
 17431                           tblptrh	equ	0xFF7
 17432                           tblptrl	equ	0xFF6
 17433                           tablat	equ	0xFF5
 17434                           prodh	equ	0xFF4
 17435                           prodl	equ	0xFF3
 17436                           intcon	equ	0xFF2
 17437                           postinc0	equ	0xFEE
 17438                           wreg	equ	0xFE8
 17439                           indf1	equ	0xFE7
 17440                           postdec1	equ	0xFE5
 17441                           fsr1h	equ	0xFE2
 17442                           fsr1l	equ	0xFE1
 17443                           indf2	equ	0xFDF
 17444                           postinc2	equ	0xFDE
 17445                           postdec2	equ	0xFDD
 17446                           plusw2	equ	0xFDB
 17447                           fsr2h	equ	0xFDA
 17448                           fsr2l	equ	0xFD9
 17449                           status	equ	0xFD8
 17450                           
 17451 ;; *************** function _MXK_SwitchTo *****************
 17452 ;; Defined at:
 17453 ;;		line 105 in file "Library/MXK.c"
 17454 ;; Parameters:    Size  Location     Type
 17455 ;;  pModule         1    wreg     enum E6927
 17456 ;; Auto vars:     Size  Location     Type
 17457 ;;  pModule         1    7[BANK0 ] enum E6927
 17458 ;;  CUR             1    6[BANK0 ] unsigned char 
 17459 ;; Return value:  Size  Location     Type
 17460 ;;                  1    wreg      unsigned char 
 17461 ;; Registers used:
 17462 ;;		wreg, status,2, status,0, cstack
 17463 ;; Tracked objects:
 17464 ;;		On entry : 0/0
 17465 ;;		On exit  : 0/0
 17466 ;;		Unchanged: 0/0
 17467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17469 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17470 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17472 ;;Total ram usage:        2 bytes
 17473 ;; Hardware stack levels used:    1
 17474 ;; Hardware stack levels required when called:    8
 17475 ;; This function calls:
 17476 ;;		_delay_us
 17477 ;; This function is called by:
 17478 ;;		_Motor_Step
 17479 ;;		_findClosestWall
 17480 ;;		_mode1
 17481 ;;		_mode2
 17482 ;;		_mode4
 17483 ;;		_main
 17484 ;; This function uses a non-reentrant model
 17485 ;;
 17486                           
 17487                           	psect	text75
 17488  015F3C                     __ptext75:
 17489                           	opt stack 0
 17490  015F3C                     _MXK_SwitchTo:
 17491                           	opt stack 20
 17492                           
 17493                           ;incstack = 0
 17494                           ;MXK_SwitchTo@pModule stored from wreg
 17495  015F3C  0100               	movlb	0	; () banked
 17496  015F3E  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17497                           
 17498                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17499  015F40  5086               	movf	3974,w,c	;volatile
 17500  015F42  0B0F               	andlw	15
 17501  015F44  0100               	movlb	0	; () banked
 17502  015F46  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17503                           
 17504                           ; BSR set to: 0
 17505                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17506  015F48  504B               	movf	_Bus_State,w,c
 17507  015F4A  A4D8               	btfss	status,2,c
 17508  015F4C  D002               	goto	l1730
 17509                           
 17510                           ; BSR set to: 0
 17511                           ;MXK.c: 110: return 0;
 17512  015F4E  0E00               	movlw	0
 17513                           
 17514                           ; BSR set to: 0
 17515  015F50  0012               	return	
 17516  015F52                     l1730:
 17517                           
 17518                           ; BSR set to: 0
 17519                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17520                           
 17521                           ; BSR set to: 0
 17522  015F52  0E00               	movlw	0
 17523  015F54  6E4B               	movwf	_Bus_State,c
 17524                           
 17525                           ; BSR set to: 0
 17526                           ;MXK.c: 114: if (CUR != pModule)
 17527  015F56  0100               	movlb	0	; () banked
 17528  015F58  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17529  015F5A  0100               	movlb	0	; () banked
 17530  015F5C  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17531  015F5E  B4D8               	btfsc	status,2,c
 17532  015F60  D00C               	goto	l1732
 17533                           
 17534                           ; BSR set to: 0
 17535                           ;MXK.c: 115: {
 17536                           ;MXK.c: 116: PORTG &= ~(0xF);
 17537  015F62  0EF0               	movlw	240
 17538  015F64  1686               	andwf	3974,f,c	;volatile
 17539                           
 17540                           ;MXK.c: 117: PORTG |= pModule;
 17541  015F66  0100               	movlb	0	; () banked
 17542  015F68  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17543  015F6A  1286               	iorwf	3974,f,c	;volatile
 17544                           
 17545                           ; BSR set to: 0
 17546                           ;MXK.c: 120: delay_us(10);
 17547  015F6C  0E00               	movlw	0
 17548  015F6E  0100               	movlb	0	; () banked
 17549  015F70  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17550  015F72  0E0A               	movlw	10
 17551  015F74  6FBA               	movwf	delay_us@us& (0+255),b
 17552  015F76  ECBE  F0AD         	call	_delay_us	;wreg free
 17553  015F7A                     l1732:
 17554                           
 17555                           ;MXK.c: 121: }
 17556                           ;MXK.c: 122: return 1;
 17557  015F7A  0E01               	movlw	1
 17558  015F7C  0012               	return	
 17559  015F7E                     __end_of_MXK_SwitchTo:
 17560                           	opt stack 0
 17561                           tosu	equ	0xFFF
 17562                           tosh	equ	0xFFE
 17563                           tosl	equ	0xFFD
 17564                           pclath	equ	0xFFA
 17565                           tblptru	equ	0xFF8
 17566                           tblptrh	equ	0xFF7
 17567                           tblptrl	equ	0xFF6
 17568                           tablat	equ	0xFF5
 17569                           prodh	equ	0xFF4
 17570                           prodl	equ	0xFF3
 17571                           intcon	equ	0xFF2
 17572                           postinc0	equ	0xFEE
 17573                           wreg	equ	0xFE8
 17574                           indf1	equ	0xFE7
 17575                           postdec1	equ	0xFE5
 17576                           fsr1h	equ	0xFE2
 17577                           fsr1l	equ	0xFE1
 17578                           indf2	equ	0xFDF
 17579                           postinc2	equ	0xFDE
 17580                           postdec2	equ	0xFDD
 17581                           plusw2	equ	0xFDB
 17582                           fsr2h	equ	0xFDA
 17583                           fsr2l	equ	0xFD9
 17584                           status	equ	0xFD8
 17585                           
 17586 ;; *************** function _MXK_Release *****************
 17587 ;; Defined at:
 17588 ;;		line 130 in file "Library/MXK.c"
 17589 ;; Parameters:    Size  Location     Type
 17590 ;;		None
 17591 ;; Auto vars:     Size  Location     Type
 17592 ;;		None
 17593 ;; Return value:  Size  Location     Type
 17594 ;;                  1    wreg      unsigned char 
 17595 ;; Registers used:
 17596 ;;		wreg, status,2, status,0
 17597 ;; Tracked objects:
 17598 ;;		On entry : 0/0
 17599 ;;		On exit  : 0/0
 17600 ;;		Unchanged: 0/0
 17601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17603 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17605 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17606 ;;Total ram usage:        0 bytes
 17607 ;; Hardware stack levels used:    1
 17608 ;; Hardware stack levels required when called:    7
 17609 ;; This function calls:
 17610 ;;		Nothing
 17611 ;; This function is called by:
 17612 ;;		_Motor_Step
 17613 ;;		_init
 17614 ;;		_findClosestWall
 17615 ;;		_mode1
 17616 ;;		_mode2
 17617 ;;		_mode4
 17618 ;;		_main
 17619 ;; This function uses a non-reentrant model
 17620 ;;
 17621                           
 17622                           	psect	text76
 17623  016598                     __ptext76:
 17624                           	opt stack 0
 17625  016598                     _MXK_Release:
 17626                           	opt stack 21
 17627                           
 17628                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17629                           
 17630                           ;incstack = 0
 17631  016598  0E01               	movlw	1
 17632  01659A  6E4B               	movwf	_Bus_State,c
 17633                           
 17634                           ;MXK.c: 134: if (lQueue != 0)
 17635  01659C  0100               	movlb	0	; () banked
 17636  01659E  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17637  0165A0  0100               	movlb	0	; () banked
 17638  0165A2  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17639  0165A4  0100               	movlb	0	; () banked
 17640  0165A6  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17641  0165A8  B4D8               	btfsc	status,2,c
 17642  0165AA  D002               	goto	l1735
 17643                           
 17644                           ; BSR set to: 0
 17645                           ;MXK.c: 135: return 1;
 17646  0165AC  0E01               	movlw	1
 17647                           
 17648                           ; BSR set to: 0
 17649  0165AE  0012               	return	
 17650  0165B0                     l1735:
 17651                           
 17652                           ; BSR set to: 0
 17653                           ;MXK.c: 137: return 0;
 17654                           
 17655                           ; BSR set to: 0
 17656  0165B0  0E00               	movlw	0
 17657  0165B2  0012               	return	
 17658  0165B4                     __end_of_MXK_Release:
 17659                           	opt stack 0
 17660                           tosu	equ	0xFFF
 17661                           tosh	equ	0xFFE
 17662                           tosl	equ	0xFFD
 17663                           pclath	equ	0xFFA
 17664                           tblptru	equ	0xFF8
 17665                           tblptrh	equ	0xFF7
 17666                           tblptrl	equ	0xFF6
 17667                           tablat	equ	0xFF5
 17668                           prodh	equ	0xFF4
 17669                           prodl	equ	0xFF3
 17670                           intcon	equ	0xFF2
 17671                           postinc0	equ	0xFEE
 17672                           wreg	equ	0xFE8
 17673                           indf1	equ	0xFE7
 17674                           postdec1	equ	0xFE5
 17675                           fsr1h	equ	0xFE2
 17676                           fsr1l	equ	0xFE1
 17677                           indf2	equ	0xFDF
 17678                           postinc2	equ	0xFDE
 17679                           postdec2	equ	0xFDD
 17680                           plusw2	equ	0xFDB
 17681                           fsr2h	equ	0xFDA
 17682                           fsr2l	equ	0xFD9
 17683                           status	equ	0xFD8
 17684                           
 17685 ;; *************** function _MXK_Queue *****************
 17686 ;; Defined at:
 17687 ;;		line 144 in file "Library/MXK.c"
 17688 ;; Parameters:    Size  Location     Type
 17689 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17690 ;;		 -> Absolute function(1), Motor_Step(1), 
 17691 ;; Auto vars:     Size  Location     Type
 17692 ;;		None
 17693 ;; Return value:  Size  Location     Type
 17694 ;;                  1    wreg      void 
 17695 ;; Registers used:
 17696 ;;		wreg, status,2, status,0
 17697 ;; Tracked objects:
 17698 ;;		On entry : 0/0
 17699 ;;		On exit  : 0/0
 17700 ;;		Unchanged: 0/0
 17701 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17702 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17703 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17704 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17705 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17706 ;;Total ram usage:        3 bytes
 17707 ;; Hardware stack levels used:    1
 17708 ;; Hardware stack levels required when called:    7
 17709 ;; This function calls:
 17710 ;;		Nothing
 17711 ;; This function is called by:
 17712 ;;		_Motor_Step
 17713 ;; This function uses a non-reentrant model
 17714 ;;
 17715                           
 17716                           	psect	text77
 17717  016756                     __ptext77:
 17718                           	opt stack 0
 17719  016756                     _MXK_Queue:
 17720                           	opt stack 19
 17721                           
 17722                           ;MXK.c: 146: lQueue = pCallback;
 17723                           
 17724                           ; BSR set to: 0
 17725                           ;incstack = 0
 17726  016756  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17727  01675A  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17728  01675E  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17729  016762  0012               	return		;funcret
 17730  016764                     __end_of_MXK_Queue:
 17731                           	opt stack 0
 17732                           tosu	equ	0xFFF
 17733                           tosh	equ	0xFFE
 17734                           tosl	equ	0xFFD
 17735                           pclath	equ	0xFFA
 17736                           tblptru	equ	0xFF8
 17737                           tblptrh	equ	0xFF7
 17738                           tblptrl	equ	0xFF6
 17739                           tablat	equ	0xFF5
 17740                           prodh	equ	0xFF4
 17741                           prodl	equ	0xFF3
 17742                           intcon	equ	0xFF2
 17743                           postinc0	equ	0xFEE
 17744                           wreg	equ	0xFE8
 17745                           indf1	equ	0xFE7
 17746                           postdec1	equ	0xFE5
 17747                           fsr1h	equ	0xFE2
 17748                           fsr1l	equ	0xFE1
 17749                           indf2	equ	0xFDF
 17750                           postinc2	equ	0xFDE
 17751                           postdec2	equ	0xFDD
 17752                           plusw2	equ	0xFDB
 17753                           fsr2h	equ	0xFDA
 17754                           fsr2l	equ	0xFD9
 17755                           status	equ	0xFD8
 17756                           
 17757 ;; *************** function _MXK_BlockSwitchTo *****************
 17758 ;; Defined at:
 17759 ;;		line 82 in file "Library/MXK.c"
 17760 ;; Parameters:    Size  Location     Type
 17761 ;;  pModule         1    wreg     enum E6927
 17762 ;; Auto vars:     Size  Location     Type
 17763 ;;  pModule         1    7[BANK0 ] enum E6927
 17764 ;;  CUR             1    6[BANK0 ] unsigned char 
 17765 ;; Return value:  Size  Location     Type
 17766 ;;                  1    wreg      unsigned char 
 17767 ;; Registers used:
 17768 ;;		wreg, status,2, status,0, cstack
 17769 ;; Tracked objects:
 17770 ;;		On entry : 0/0
 17771 ;;		On exit  : 0/0
 17772 ;;		Unchanged: 0/0
 17773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17778 ;;Total ram usage:        2 bytes
 17779 ;; Hardware stack levels used:    1
 17780 ;; Hardware stack levels required when called:    8
 17781 ;; This function calls:
 17782 ;;		_delay_us
 17783 ;; This function is called by:
 17784 ;;		_init
 17785 ;; This function uses a non-reentrant model
 17786 ;;
 17787                           
 17788                           	psect	text78
 17789  01607A                     __ptext78:
 17790                           	opt stack 0
 17791  01607A                     _MXK_BlockSwitchTo:
 17792                           	opt stack 21
 17793                           
 17794                           ;incstack = 0
 17795                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17796  01607A  0100               	movlb	0	; () banked
 17797  01607C  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17798                           
 17799                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17800  01607E  5086               	movf	3974,w,c	;volatile
 17801  016080  0B0F               	andlw	15
 17802  016082  0100               	movlb	0	; () banked
 17803  016084  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17804  016086                     
 17805                           ; BSR set to: 0
 17806                           
 17807                           ; BSR set to: 0
 17808  016086  504B               	movf	_Bus_State,w,c
 17809  016088  B4D8               	btfsc	status,2,c
 17810  01608A  D7FD               	goto	l1724
 17811                           
 17812                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17813  01608C  0E00               	movlw	0
 17814  01608E  6E4B               	movwf	_Bus_State,c
 17815                           
 17816                           ;MXK.c: 90: if (CUR != pModule)
 17817  016090  0100               	movlb	0	; () banked
 17818  016092  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17819  016094  0100               	movlb	0	; () banked
 17820  016096  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17821  016098  B4D8               	btfsc	status,2,c
 17822  01609A  D00C               	goto	l1726
 17823                           
 17824                           ; BSR set to: 0
 17825                           ;MXK.c: 91: {
 17826                           ;MXK.c: 92: PORTG &= ~(0xF);
 17827  01609C  0EF0               	movlw	240
 17828  01609E  1686               	andwf	3974,f,c	;volatile
 17829                           
 17830                           ;MXK.c: 93: PORTG |= pModule;
 17831  0160A0  0100               	movlb	0	; () banked
 17832  0160A2  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17833  0160A4  1286               	iorwf	3974,f,c	;volatile
 17834                           
 17835                           ; BSR set to: 0
 17836                           ;MXK.c: 96: delay_us(10);
 17837  0160A6  0E00               	movlw	0
 17838  0160A8  0100               	movlb	0	; () banked
 17839  0160AA  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17840  0160AC  0E0A               	movlw	10
 17841  0160AE  6FBA               	movwf	delay_us@us& (0+255),b
 17842  0160B0  ECBE  F0AD         	call	_delay_us	;wreg free
 17843  0160B4                     l1726:
 17844                           
 17845                           ;MXK.c: 97: }
 17846                           ;MXK.c: 98: return 1;
 17847  0160B4  0E01               	movlw	1
 17848  0160B6  0012               	return	
 17849  0160B8                     __end_of_MXK_BlockSwitchTo:
 17850                           	opt stack 0
 17851                           tosu	equ	0xFFF
 17852                           tosh	equ	0xFFE
 17853                           tosl	equ	0xFFD
 17854                           pclath	equ	0xFFA
 17855                           tblptru	equ	0xFF8
 17856                           tblptrh	equ	0xFF7
 17857                           tblptrl	equ	0xFF6
 17858                           tablat	equ	0xFF5
 17859                           prodh	equ	0xFF4
 17860                           prodl	equ	0xFF3
 17861                           intcon	equ	0xFF2
 17862                           postinc0	equ	0xFEE
 17863                           wreg	equ	0xFE8
 17864                           indf1	equ	0xFE7
 17865                           postdec1	equ	0xFE5
 17866                           fsr1h	equ	0xFE2
 17867                           fsr1l	equ	0xFE1
 17868                           indf2	equ	0xFDF
 17869                           postinc2	equ	0xFDE
 17870                           postdec2	equ	0xFDD
 17871                           plusw2	equ	0xFDB
 17872                           fsr2h	equ	0xFDA
 17873                           fsr2l	equ	0xFD9
 17874                           status	equ	0xFD8
 17875                           
 17876 ;; *************** function _delay_us *****************
 17877 ;; Defined at:
 17878 ;;		line 255 in file "Library/Types.c"
 17879 ;; Parameters:    Size  Location     Type
 17880 ;;  us              2    0[BANK0 ] unsigned short 
 17881 ;; Auto vars:     Size  Location     Type
 17882 ;;  u               4    2[BANK0 ] unsigned long 
 17883 ;; Return value:  Size  Location     Type
 17884 ;;                  1    wreg      void 
 17885 ;; Registers used:
 17886 ;;		wreg, status,2, status,0
 17887 ;; Tracked objects:
 17888 ;;		On entry : 0/0
 17889 ;;		On exit  : 0/0
 17890 ;;		Unchanged: 0/0
 17891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17892 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17893 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17895 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17896 ;;Total ram usage:        6 bytes
 17897 ;; Hardware stack levels used:    1
 17898 ;; Hardware stack levels required when called:    7
 17899 ;; This function calls:
 17900 ;;		Nothing
 17901 ;; This function is called by:
 17902 ;;		_MXK_BlockSwitchTo
 17903 ;;		_MXK_SwitchTo
 17904 ;; This function uses a non-reentrant model
 17905 ;;
 17906                           
 17907                           	psect	text79
 17908  015B7C                     __ptext79:
 17909                           	opt stack 0
 17910  015B7C                     _delay_us:
 17911                           	opt stack 20
 17912                           
 17913                           ;Types.c: 256: unsigned long u;
 17914                           ;Types.c: 257: while (us--) {
 17915                           
 17916                           ;incstack = 0
 17917  015B7C  D01C               	goto	u9360
 17918  015B7E                     l12582:
 17919                           
 17920                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17921  015B7E  0E00               	movlw	0
 17922  015B80  0100               	movlb	0	; () banked
 17923  015B82  6FBC               	movwf	delay_us@u& (0+255),b
 17924  015B84  0E00               	movlw	0
 17925  015B86  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17926  015B88  0E00               	movlw	0
 17927  015B8A  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17928  015B8C  0E00               	movlw	0
 17929  015B8E  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17930  015B90                     l12584:
 17931                           
 17932                           ; BSR set to: 0
 17933  015B90  0100               	movlb	0	; () banked
 17934  015B92  51BC               	movf	delay_us@u& (0+255),w,b
 17935  015B94  0100               	movlb	0	; () banked
 17936  015B96  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17937  015B98  0100               	movlb	0	; () banked
 17938  015B9A  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17939  015B9C  0100               	movlb	0	; () banked
 17940  015B9E  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17941  015BA0  A4D8               	btfss	status,2,c
 17942  015BA2  D009               	goto	u9360
 17943                           
 17944                           ; BSR set to: 0
 17945                           
 17946                           ; BSR set to: 0
 17947  015BA4  F000               	nop		; ;# 
 17948  015BA6  0E01               	movlw	1
 17949  015BA8  0100               	movlb	0	; () banked
 17950  015BAA  27BC               	addwf	delay_us@u& (0+255),f,b
 17951  015BAC  0E00               	movlw	0
 17952  015BAE  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17953  015BB0  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17954  015BB2  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17955  015BB4  D7ED               	goto	l12584
 17956  015BB6                     u9360:
 17957                           
 17958                           ; BSR set to: 0
 17959                           
 17960                           ; BSR set to: 0
 17961  015BB6  0100               	movlb	0	; () banked
 17962  015BB8  07BA               	decf	delay_us@us& (0+255),f,b
 17963  015BBA  A0D8               	btfss	status,0,c
 17964  015BBC  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17965  015BBE  0100               	movlb	0	; () banked
 17966  015BC0  29BA               	incf	delay_us@us& (0+255),w,b
 17967  015BC2  E1DD               	bnz	l12582
 17968  015BC4  0100               	movlb	0	; () banked
 17969  015BC6  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17970  015BC8  B4D8               	btfsc	status,2,c
 17971  015BCA  0012               	return	
 17972  015BCC  D7D8               	goto	l832
 17973  015BCE                     __end_of_delay_us:
 17974                           	opt stack 0
 17975                           tosu	equ	0xFFF
 17976                           tosh	equ	0xFFE
 17977                           tosl	equ	0xFFD
 17978                           pclath	equ	0xFFA
 17979                           tblptru	equ	0xFF8
 17980                           tblptrh	equ	0xFF7
 17981                           tblptrl	equ	0xFF6
 17982                           tablat	equ	0xFF5
 17983                           prodh	equ	0xFF4
 17984                           prodl	equ	0xFF3
 17985                           intcon	equ	0xFF2
 17986                           postinc0	equ	0xFEE
 17987                           wreg	equ	0xFE8
 17988                           indf1	equ	0xFE7
 17989                           postdec1	equ	0xFE5
 17990                           fsr1h	equ	0xFE2
 17991                           fsr1l	equ	0xFE1
 17992                           indf2	equ	0xFDF
 17993                           postinc2	equ	0xFDE
 17994                           postdec2	equ	0xFDD
 17995                           plusw2	equ	0xFDB
 17996                           fsr2h	equ	0xFDA
 17997                           fsr2l	equ	0xFD9
 17998                           status	equ	0xFD8
 17999                           
 18000 ;; *************** function _LCD_Init *****************
 18001 ;; Defined at:
 18002 ;;		line 172 in file "Library/LCD.c"
 18003 ;; Parameters:    Size  Location     Type
 18004 ;;		None
 18005 ;; Auto vars:     Size  Location     Type
 18006 ;;  i               2   55[BANK0 ] unsigned short 
 18007 ;; Return value:  Size  Location     Type
 18008 ;;                  1    wreg      void 
 18009 ;; Registers used:
 18010 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18011 ;; Tracked objects:
 18012 ;;		On entry : 0/0
 18013 ;;		On exit  : 0/0
 18014 ;;		Unchanged: 0/0
 18015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18017 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18018 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18019 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18020 ;;Total ram usage:        4 bytes
 18021 ;; Hardware stack levels used:    1
 18022 ;; Hardware stack levels required when called:   15
 18023 ;; This function calls:
 18024 ;;		_Configure_GPIOs
 18025 ;;		_LCD_Fill
 18026 ;;		_LCD_Write
 18027 ;;		_Set_Rotation
 18028 ;;		_delay_ms
 18029 ;; This function is called by:
 18030 ;;		_init
 18031 ;; This function uses a non-reentrant model
 18032 ;;
 18033                           
 18034                           	psect	text80
 18035  012F20                     __ptext80:
 18036                           	opt stack 0
 18037  012F20                     _LCD_Init:
 18038                           	opt stack 14
 18039                           
 18040                           ;LCD.c: 174: UINT16 i;
 18041                           ;LCD.c: 175: Configure_GPIOs();
 18042                           
 18043                           ; BSR set to: 0
 18044                           ;incstack = 0
 18045  012F20  ECCE  F0AA         	call	_Configure_GPIOs	;wreg free
 18046                           
 18047                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 18048  012F24  0E00               	movlw	0
 18049  012F26  0100               	movlb	0	; () banked
 18050  012F28  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 18051  012F2A  0E00               	movlw	0
 18052  012F2C  6FF1               	movwf	LCD_Init@i& (0+255),b
 18053                           
 18054                           ; BSR set to: 0
 18055  012F2E  0100               	movlb	0	; () banked
 18056  012F30  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18057  012F32  E106               	bnz	u11280
 18058  012F34  0E59               	movlw	89
 18059  012F36  0100               	movlb	0	; () banked
 18060  012F38  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18061  012F3A  B0D8               	btfsc	status,0,c
 18062  012F3C  D08B               	goto	u11320
 18063  012F3E  D001               	goto	l85
 18064  012F40                     u11280:
 18065                           
 18066                           ; BSR set to: 0
 18067  012F40  D089               	goto	u11320
 18068  012F42                     l85:
 18069                           
 18070                           ; BSR set to: 0
 18071                           ;LCD.c: 178: {
 18072                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 18073                           
 18074                           ; BSR set to: 0
 18075  012F42  90D8               	bcf	status,0,c
 18076  012F44  0100               	movlb	0	; () banked
 18077  012F46  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18078  012F48  6EF6               	movwf	tblptrl,c
 18079  012F4A  0100               	movlb	0	; () banked
 18080  012F4C  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18081  012F4E  6EF7               	movwf	tblptrh,c
 18082  012F50  0E33               	movlw	low _InitList
 18083  012F52  26F6               	addwf	tblptrl,f,c
 18084  012F54  0EFC               	movlw	high _InitList
 18085  012F56  22F7               	addwfc	tblptrh,f,c
 18086  012F58                     	if	1	;There are 3 active tblptr bytes
 18087  012F58  6AF8               	clrf	tblptru,c
 18088  012F5A  0E00               	movlw	low (__mediumconst shr (0+16))
 18089  012F5C  22F8               	addwfc	tblptru,f,c
 18090  012F5E                     	endif
 18091  012F5E  0009               	tblrd		*+
 18092  012F60  0E80               	movlw	128
 18093  012F62  18F5               	xorwf	tablat,w,c
 18094  012F64  0009               	tblrd		*+
 18095  012F66  10F5               	iorwf	tablat,w,c
 18096  012F68  A4D8               	btfss	status,2,c
 18097  012F6A  D022               	goto	l87
 18098                           
 18099                           ; BSR set to: 0
 18100  012F6C  0100               	movlb	0	; () banked
 18101  012F6E  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18102  012F70  E11F               	bnz	l14410
 18103  012F72  0E58               	movlw	88
 18104  012F74  0100               	movlb	0	; () banked
 18105  012F76  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 18106  012F78  B0D8               	btfsc	status,0,c
 18107  012F7A  D01A               	goto	l87
 18108                           
 18109                           ; BSR set to: 0
 18110                           ;LCD.c: 180: delay_ms(InitList[++i]);
 18111  012F7C  0100               	movlb	0	; () banked
 18112  012F7E  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18113  012F80  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18114  012F82  90D8               	bcf	status,0,c
 18115  012F84  0100               	movlb	0	; () banked
 18116  012F86  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18117  012F88  6EF6               	movwf	tblptrl,c
 18118  012F8A  0100               	movlb	0	; () banked
 18119  012F8C  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18120  012F8E  6EF7               	movwf	tblptrh,c
 18121  012F90  0E33               	movlw	low _InitList
 18122  012F92  26F6               	addwf	tblptrl,f,c
 18123  012F94  0EFC               	movlw	high _InitList
 18124  012F96  22F7               	addwfc	tblptrh,f,c
 18125  012F98                     	if	1	;There are 3 active tblptr bytes
 18126  012F98  6AF8               	clrf	tblptru,c
 18127  012F9A  0E00               	movlw	low (__mediumconst shr (0+16))
 18128  012F9C  22F8               	addwfc	tblptru,f,c
 18129  012F9E                     	endif
 18130  012F9E  0009               	tblrd		*+
 18131  012FA0  CFF5 F0BA          	movff	tablat,delay_ms@ms
 18132  012FA4  000A               	tblrd		*-
 18133  012FA6  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 18134  012FAA  ECA7  F0AB         	call	_delay_ms	;wreg free
 18135  012FAE  D04B               	goto	l90
 18136  012FB0                     l87:
 18137  012FB0                     l14410:
 18138                           
 18139                           ;LCD.c: 181: else
 18140                           ;LCD.c: 182: {
 18141                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 18142  012FB0  90D8               	bcf	status,0,c
 18143  012FB2  0100               	movlb	0	; () banked
 18144  012FB4  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18145  012FB6  6EF6               	movwf	tblptrl,c
 18146  012FB8  0100               	movlb	0	; () banked
 18147  012FBA  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18148  012FBC  6EF7               	movwf	tblptrh,c
 18149  012FBE  0E33               	movlw	low _InitList
 18150  012FC0  26F6               	addwf	tblptrl,f,c
 18151  012FC2  0EFC               	movlw	high _InitList
 18152  012FC4  22F7               	addwfc	tblptrh,f,c
 18153  012FC6                     	if	1	;There are 3 active tblptr bytes
 18154  012FC6  6AF8               	clrf	tblptru,c
 18155  012FC8  0E00               	movlw	low (__mediumconst shr (0+16))
 18156  012FCA  22F8               	addwfc	tblptru,f,c
 18157  012FCC                     	endif
 18158  012FCC  0009               	tblrd		*+
 18159  012FCE  0E00               	movlw	0
 18160  012FD0  5EF5               	subwf	tablat,f,c
 18161  012FD2  0009               	tblrd		*+
 18162  012FD4  0E01               	movlw	1
 18163  012FD6  5AF5               	subwfb	tablat,f,c
 18164  012FD8  A0D8               	btfss	status,0,c
 18165  012FDA  D020               	goto	l89
 18166                           
 18167                           ; BSR set to: 0
 18168  012FDC  0E00               	movlw	0
 18169  012FDE  0100               	movlb	0	; () banked
 18170  012FE0  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18171  012FE2  90D8               	bcf	status,0,c
 18172  012FE4  0100               	movlb	0	; () banked
 18173  012FE6  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18174  012FE8  6EF6               	movwf	tblptrl,c
 18175  012FEA  0100               	movlb	0	; () banked
 18176  012FEC  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18177  012FEE  6EF7               	movwf	tblptrh,c
 18178  012FF0  0E33               	movlw	low _InitList
 18179  012FF2  26F6               	addwf	tblptrl,f,c
 18180  012FF4  0EFC               	movlw	high _InitList
 18181  012FF6  22F7               	addwfc	tblptrh,f,c
 18182  012FF8                     	if	1	;There are 3 active tblptr bytes
 18183  012FF8  6AF8               	clrf	tblptru,c
 18184  012FFA  0E00               	movlw	low (__mediumconst shr (0+16))
 18185  012FFC  22F8               	addwfc	tblptru,f,c
 18186  012FFE                     	endif
 18187  012FFE  0009               	tblrd		*+
 18188  013000  CFF5 F0EF          	movff	tablat,??_LCD_Init
 18189  013004  0009               	tblrd		*+
 18190  013006  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 18191  01300A  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 18192  01300E  0100               	movlb	0	; () banked
 18193  013010  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 18194  013012  0100               	movlb	0	; () banked
 18195  013014  51EF               	movf	??_LCD_Init& (0+255),w,b
 18196  013016  EC03  F0B2         	call	_LCD_Write
 18197  01301A  D015               	goto	l90
 18198  01301C                     l89:
 18199                           
 18200                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 18201  01301C  0E01               	movlw	1
 18202  01301E  0100               	movlb	0	; () banked
 18203  013020  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18204  013022  90D8               	bcf	status,0,c
 18205  013024  0100               	movlb	0	; () banked
 18206  013026  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18207  013028  6EF6               	movwf	tblptrl,c
 18208  01302A  0100               	movlb	0	; () banked
 18209  01302C  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18210  01302E  6EF7               	movwf	tblptrh,c
 18211  013030  0E33               	movlw	low _InitList
 18212  013032  26F6               	addwf	tblptrl,f,c
 18213  013034  0EFC               	movlw	high _InitList
 18214  013036  22F7               	addwfc	tblptrh,f,c
 18215  013038                     	if	1	;There are 3 active tblptr bytes
 18216  013038  6AF8               	clrf	tblptru,c
 18217  01303A  0E00               	movlw	low (__mediumconst shr (0+16))
 18218  01303C  22F8               	addwfc	tblptru,f,c
 18219  01303E                     	endif
 18220  01303E  0008               	tblrd		*
 18221  013040  50F5               	movf	tablat,w,c
 18222  013042  EC03  F0B2         	call	_LCD_Write
 18223  013046                     l90:
 18224  013046  0100               	movlb	0	; () banked
 18225  013048  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18226  01304A  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18227                           
 18228                           ; BSR set to: 0
 18229  01304C  0100               	movlb	0	; () banked
 18230  01304E  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18231  013050  E101               	bnz	l14420
 18232  013052  D770               	goto	L12
 18233  013054                     u11320:
 18234  013054                     l14420:
 18235                           
 18236                           ; BSR set to: 0
 18237                           ;LCD.c: 185: }
 18238                           ;LCD.c: 186: }
 18239                           ;LCD.c: 187: delay_ms(100);
 18240  013054  0E00               	movlw	0
 18241  013056  0100               	movlb	0	; () banked
 18242  013058  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18243  01305A  0E64               	movlw	100
 18244  01305C  6FBA               	movwf	delay_ms@ms& (0+255),b
 18245  01305E  ECA7  F0AB         	call	_delay_ms	;wreg free
 18246                           
 18247                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18248  013062  0E00               	movlw	0
 18249  013064  0100               	movlb	0	; () banked
 18250  013066  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18251  013068  0E29               	movlw	41
 18252  01306A  EC03  F0B2         	call	_LCD_Write
 18253                           
 18254                           ;LCD.c: 189: Set_Rotation(1);
 18255  01306E  0E01               	movlw	1
 18256  013070  EC85  F0A6         	call	_Set_Rotation
 18257                           
 18258                           ;LCD.c: 191: delay_ms(100);
 18259  013074  0E00               	movlw	0
 18260  013076  0100               	movlb	0	; () banked
 18261  013078  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18262  01307A  0E64               	movlw	100
 18263  01307C  6FBA               	movwf	delay_ms@ms& (0+255),b
 18264  01307E  ECA7  F0AB         	call	_delay_ms	;wreg free
 18265                           
 18266                           ;LCD.c: 192: LCD_Fill(0x0000);
 18267  013082  0E00               	movlw	0
 18268  013084  0100               	movlb	0	; () banked
 18269  013086  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18270  013088  0E00               	movlw	0
 18271  01308A  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18272  01308C  EC92  F0AD         	call	_LCD_Fill	;wreg free
 18273  013090  0012               	return		;funcret
 18274  013092                     __end_of_LCD_Init:
 18275                           	opt stack 0
 18276                           tosu	equ	0xFFF
 18277                           tosh	equ	0xFFE
 18278                           tosl	equ	0xFFD
 18279                           pclath	equ	0xFFA
 18280                           tblptru	equ	0xFF8
 18281                           tblptrh	equ	0xFF7
 18282                           tblptrl	equ	0xFF6
 18283                           tablat	equ	0xFF5
 18284                           prodh	equ	0xFF4
 18285                           prodl	equ	0xFF3
 18286                           intcon	equ	0xFF2
 18287                           postinc0	equ	0xFEE
 18288                           wreg	equ	0xFE8
 18289                           indf1	equ	0xFE7
 18290                           postdec1	equ	0xFE5
 18291                           fsr1h	equ	0xFE2
 18292                           fsr1l	equ	0xFE1
 18293                           indf2	equ	0xFDF
 18294                           postinc2	equ	0xFDE
 18295                           postdec2	equ	0xFDD
 18296                           plusw2	equ	0xFDB
 18297                           fsr2h	equ	0xFDA
 18298                           fsr2l	equ	0xFD9
 18299                           status	equ	0xFD8
 18300                           
 18301 ;; *************** function _Set_Rotation *****************
 18302 ;; Defined at:
 18303 ;;		line 248 in file "Library/LCD.c"
 18304 ;; Parameters:    Size  Location     Type
 18305 ;;  m               1    wreg     unsigned char 
 18306 ;; Auto vars:     Size  Location     Type
 18307 ;;  m               1    5[BANK0 ] unsigned char 
 18308 ;;  rotation        1    6[BANK0 ] unsigned char 
 18309 ;; Return value:  Size  Location     Type
 18310 ;;                  1    wreg      void 
 18311 ;; Registers used:
 18312 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18313 ;; Tracked objects:
 18314 ;;		On entry : 0/0
 18315 ;;		On exit  : 0/0
 18316 ;;		Unchanged: 0/0
 18317 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18318 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18319 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18320 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18321 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18322 ;;Total ram usage:        2 bytes
 18323 ;; Hardware stack levels used:    1
 18324 ;; Hardware stack levels required when called:    9
 18325 ;; This function calls:
 18326 ;;		_LCD_Write
 18327 ;; This function is called by:
 18328 ;;		_LCD_Init
 18329 ;; This function uses a non-reentrant model
 18330 ;;
 18331                           
 18332                           	psect	text81
 18333  014D0A                     __ptext81:
 18334                           	opt stack 0
 18335  014D0A                     _Set_Rotation:
 18336                           	opt stack 19
 18337                           
 18338                           ;incstack = 0
 18339                           ;Set_Rotation@m stored from wreg
 18340  014D0A  0100               	movlb	0	; () banked
 18341  014D0C  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18342                           
 18343                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18344  014D0E  0E00               	movlw	0
 18345  014D10  0100               	movlb	0	; () banked
 18346  014D12  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18347                           
 18348                           ; BSR set to: 0
 18349                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18350  014D14  0E00               	movlw	0
 18351  014D16  0100               	movlb	0	; () banked
 18352  014D18  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18353  014D1A  0E36               	movlw	54
 18354  014D1C  EC03  F0B2         	call	_LCD_Write
 18355                           
 18356                           ;LCD.c: 253: rotation = (m % 4);
 18357  014D20  0100               	movlb	0	; () banked
 18358  014D22  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18359  014D24  0B03               	andlw	3
 18360  014D26  0100               	movlb	0	; () banked
 18361  014D28  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18362                           
 18363                           ;LCD.c: 255: switch(rotation)
 18364  014D2A  D02C               	goto	l117
 18365  014D2C                     
 18366                           ; BSR set to: 0
 18367                           ;LCD.c: 258: {
 18368                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18369                           
 18370                           ; BSR set to: 0
 18371  014D2C  0E01               	movlw	1
 18372  014D2E  0100               	movlb	0	; () banked
 18373  014D30  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18374  014D32  0EC8               	movlw	200
 18375  014D34  EC03  F0B2         	call	_LCD_Write
 18376                           
 18377                           ;LCD.c: 260: w = 128;
 18378  014D38  0E80               	movlw	128
 18379  014D3A  6E50               	movwf	_w,c
 18380                           
 18381                           ;LCD.c: 261: l = 128;
 18382  014D3C  0E80               	movlw	128
 18383  014D3E  6E4F               	movwf	_l,c
 18384                           
 18385                           ;LCD.c: 262: break;
 18386  014D40  0012               	return	
 18387  014D42                     
 18388                           ;LCD.c: 265: {
 18389                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18390  014D42  0E01               	movlw	1
 18391  014D44  0100               	movlb	0	; () banked
 18392  014D46  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18393  014D48  0EA8               	movlw	168
 18394  014D4A  EC03  F0B2         	call	_LCD_Write
 18395                           
 18396                           ;LCD.c: 267: w = 128;
 18397  014D4E  0E80               	movlw	128
 18398  014D50  6E50               	movwf	_w,c
 18399                           
 18400                           ;LCD.c: 268: l = 128;
 18401  014D52  0E80               	movlw	128
 18402  014D54  6E4F               	movwf	_l,c
 18403                           
 18404                           ;LCD.c: 269: break;
 18405  014D56  0012               	return	
 18406  014D58                     
 18407                           ;LCD.c: 272: {
 18408                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18409  014D58  0E01               	movlw	1
 18410  014D5A  0100               	movlb	0	; () banked
 18411  014D5C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18412  014D5E  0E08               	movlw	8
 18413  014D60  EC03  F0B2         	call	_LCD_Write
 18414                           
 18415                           ;LCD.c: 274: w = 128;
 18416  014D64  0E80               	movlw	128
 18417  014D66  6E50               	movwf	_w,c
 18418                           
 18419                           ;LCD.c: 275: l = 128;
 18420  014D68  0E80               	movlw	128
 18421  014D6A  6E4F               	movwf	_l,c
 18422                           
 18423                           ;LCD.c: 276: break;
 18424  014D6C  0012               	return	
 18425  014D6E                     
 18426                           ;LCD.c: 279: {
 18427                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18428  014D6E  0E01               	movlw	1
 18429  014D70  0100               	movlb	0	; () banked
 18430  014D72  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18431  014D74  0E68               	movlw	104
 18432  014D76  EC03  F0B2         	call	_LCD_Write
 18433                           
 18434                           ;LCD.c: 281: w = 128;
 18435  014D7A  0E80               	movlw	128
 18436  014D7C  6E50               	movwf	_w,c
 18437                           
 18438                           ;LCD.c: 282: l = 128;
 18439  014D7E  0E80               	movlw	128
 18440  014D80  6E4F               	movwf	_l,c
 18441                           
 18442                           ;LCD.c: 284: }
 18443                           ;LCD.c: 285: }
 18444                           
 18445                           ;LCD.c: 283: break;
 18446  014D82  0012               	return	
 18447  014D84                     l117:
 18448  014D84  0100               	movlb	0	; () banked
 18449  014D86  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18450                           
 18451                           ; Switch size 1, requested type "space"
 18452                           ; Number of cases is 4, Range of values is 0 to 3
 18453                           ; switch strategies available:
 18454                           ; Name         Instructions Cycles
 18455                           ; simple_byte           13     7 (average)
 18456                           ;	Chosen strategy is simple_byte
 18457  014D88  0A00               	xorlw	0	; case 0
 18458  014D8A  B4D8               	btfsc	status,2,c
 18459  014D8C  D7CF               	goto	l118
 18460  014D8E  0A01               	xorlw	1	; case 1
 18461  014D90  B4D8               	btfsc	status,2,c
 18462  014D92  D7D7               	goto	l120
 18463  014D94  0A03               	xorlw	3	; case 2
 18464  014D96  B4D8               	btfsc	status,2,c
 18465  014D98  D7DF               	goto	l121
 18466  014D9A  0A01               	xorlw	1	; case 3
 18467  014D9C  A4D8               	btfss	status,2,c
 18468  014D9E  0012               	return	
 18469  014DA0  D7E6               	goto	l122
 18470  014DA2                     __end_of_Set_Rotation:
 18471                           	opt stack 0
 18472                           tosu	equ	0xFFF
 18473                           tosh	equ	0xFFE
 18474                           tosl	equ	0xFFD
 18475                           pclath	equ	0xFFA
 18476                           tblptru	equ	0xFF8
 18477                           tblptrh	equ	0xFF7
 18478                           tblptrl	equ	0xFF6
 18479                           tablat	equ	0xFF5
 18480                           prodh	equ	0xFF4
 18481                           prodl	equ	0xFF3
 18482                           intcon	equ	0xFF2
 18483                           postinc0	equ	0xFEE
 18484                           wreg	equ	0xFE8
 18485                           indf1	equ	0xFE7
 18486                           postdec1	equ	0xFE5
 18487                           fsr1h	equ	0xFE2
 18488                           fsr1l	equ	0xFE1
 18489                           indf2	equ	0xFDF
 18490                           postinc2	equ	0xFDE
 18491                           postdec2	equ	0xFDD
 18492                           plusw2	equ	0xFDB
 18493                           fsr2h	equ	0xFDA
 18494                           fsr2l	equ	0xFD9
 18495                           status	equ	0xFD8
 18496                           
 18497 ;; *************** function _LCD_Fill *****************
 18498 ;; Defined at:
 18499 ;;		line 287 in file "Library/LCD.c"
 18500 ;; Parameters:    Size  Location     Type
 18501 ;;  pColour         2    9[BANK0 ] unsigned short 
 18502 ;; Auto vars:     Size  Location     Type
 18503 ;;  j               1   12[BANK0 ] unsigned char 
 18504 ;;  i               1   11[BANK0 ] unsigned char 
 18505 ;; Return value:  Size  Location     Type
 18506 ;;                  1    wreg      void 
 18507 ;; Registers used:
 18508 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18509 ;; Tracked objects:
 18510 ;;		On entry : 0/0
 18511 ;;		On exit  : 0/0
 18512 ;;		Unchanged: 0/0
 18513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18514 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18515 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18516 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18517 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18518 ;;Total ram usage:        4 bytes
 18519 ;; Hardware stack levels used:    1
 18520 ;; Hardware stack levels required when called:   10
 18521 ;; This function calls:
 18522 ;;		_LCD_Word_Write
 18523 ;;		_Set_Addr_Window
 18524 ;; This function is called by:
 18525 ;;		_LCD_Init
 18526 ;; This function uses a non-reentrant model
 18527 ;;
 18528                           
 18529                           	psect	text82
 18530  015B24                     __ptext82:
 18531                           	opt stack 0
 18532  015B24                     _LCD_Fill:
 18533                           	opt stack 18
 18534                           
 18535                           ;LCD.c: 296: UINT8 i = 0x00;
 18536                           
 18537                           ;incstack = 0
 18538  015B24  0E00               	movlw	0
 18539  015B26  0100               	movlb	0	; () banked
 18540  015B28  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18541                           
 18542                           ;LCD.c: 297: UINT8 j = 0x00;
 18543  015B2A  0E00               	movlw	0
 18544  015B2C  0100               	movlb	0	; () banked
 18545  015B2E  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18546                           
 18547                           ; BSR set to: 0
 18548                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18549  015B30  0E00               	movlw	0
 18550  015B32  0100               	movlb	0	; () banked
 18551  015B34  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18552  015B36  0450               	decf	_w,w,c
 18553  015B38  0100               	movlb	0	; () banked
 18554  015B3A  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18555  015B3C  044F               	decf	_l,w,c
 18556  015B3E  0100               	movlb	0	; () banked
 18557  015B40  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18558  015B42  0E00               	movlw	0
 18559  015B44  EC9E  F0A3         	call	_Set_Addr_Window
 18560                           
 18561                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18562  015B48  C04F  F0C6         	movff	_l,LCD_Fill@j
 18563  015B4C                     l14004:
 18564  015B4C  0100               	movlb	0	; () banked
 18565  015B4E  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18566  015B50  0100               	movlb	0	; () banked
 18567  015B52  B4D8               	btfsc	status,2,c
 18568  015B54  0012               	return	
 18569                           
 18570                           ; BSR set to: 0
 18571                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18572                           
 18573                           ; BSR set to: 0
 18574  015B56  C050  F0C5         	movff	_w,LCD_Fill@i
 18575  015B5A                     l14008:
 18576                           
 18577                           ; BSR set to: 0
 18578  015B5A  0100               	movlb	0	; () banked
 18579  015B5C  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18580  015B5E  0100               	movlb	0	; () banked
 18581  015B60  B4D8               	btfsc	status,2,c
 18582  015B62  D009               	goto	u10810
 18583                           
 18584                           ; BSR set to: 0
 18585                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18586                           
 18587                           ; BSR set to: 0
 18588                           
 18589                           ; BSR set to: 0
 18590  015B64  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18591  015B68  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18592  015B6C  EC64  F0B2         	call	_LCD_Word_Write	;wreg free
 18593  015B70  0100               	movlb	0	; () banked
 18594  015B72  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18595  015B74  D7F2               	goto	l14008
 18596  015B76                     u10810:
 18597                           
 18598                           ; BSR set to: 0
 18599                           
 18600                           ; BSR set to: 0
 18601  015B76  0100               	movlb	0	; () banked
 18602  015B78  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18603  015B7A  D7E8               	goto	l14004
 18604  015B7C                     __end_of_LCD_Fill:
 18605                           	opt stack 0
 18606                           tosu	equ	0xFFF
 18607                           tosh	equ	0xFFE
 18608                           tosl	equ	0xFFD
 18609                           pclath	equ	0xFFA
 18610                           tblptru	equ	0xFF8
 18611                           tblptrh	equ	0xFF7
 18612                           tblptrl	equ	0xFF6
 18613                           tablat	equ	0xFF5
 18614                           prodh	equ	0xFF4
 18615                           prodl	equ	0xFF3
 18616                           intcon	equ	0xFF2
 18617                           postinc0	equ	0xFEE
 18618                           wreg	equ	0xFE8
 18619                           indf1	equ	0xFE7
 18620                           postdec1	equ	0xFE5
 18621                           fsr1h	equ	0xFE2
 18622                           fsr1l	equ	0xFE1
 18623                           indf2	equ	0xFDF
 18624                           postinc2	equ	0xFDE
 18625                           postdec2	equ	0xFDD
 18626                           plusw2	equ	0xFDB
 18627                           fsr2h	equ	0xFDA
 18628                           fsr2l	equ	0xFD9
 18629                           status	equ	0xFD8
 18630                           
 18631 ;; *************** function _Set_Addr_Window *****************
 18632 ;; Defined at:
 18633 ;;		line 214 in file "Library/LCD.c"
 18634 ;; Parameters:    Size  Location     Type
 18635 ;;  xs              1    wreg     unsigned char 
 18636 ;;  ys              1    5[BANK0 ] unsigned char 
 18637 ;;  xe              1    6[BANK0 ] unsigned char 
 18638 ;;  ye              1    7[BANK0 ] unsigned char 
 18639 ;; Auto vars:     Size  Location     Type
 18640 ;;  xs              1    8[BANK0 ] unsigned char 
 18641 ;; Return value:  Size  Location     Type
 18642 ;;                  1    wreg      void 
 18643 ;; Registers used:
 18644 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18645 ;; Tracked objects:
 18646 ;;		On entry : 0/0
 18647 ;;		On exit  : 0/0
 18648 ;;		Unchanged: 0/0
 18649 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18650 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18651 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18652 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18653 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18654 ;;Total ram usage:        4 bytes
 18655 ;; Hardware stack levels used:    1
 18656 ;; Hardware stack levels required when called:    9
 18657 ;; This function calls:
 18658 ;;		_LCD_Write
 18659 ;; This function is called by:
 18660 ;;		_LCD_Fill
 18661 ;;		_LCD_FillRectangle
 18662 ;;		_LCD_DrawField
 18663 ;;		_RAM_Address_Set
 18664 ;;		_LCD_DrawPixel
 18665 ;; This function uses a non-reentrant model
 18666 ;;
 18667                           
 18668                           	psect	text83
 18669  01473C                     __ptext83:
 18670                           	opt stack 0
 18671  01473C                     _Set_Addr_Window:
 18672                           	opt stack 17
 18673                           
 18674                           ; BSR set to: 0
 18675                           ;incstack = 0
 18676                           ;Set_Addr_Window@xs stored from wreg
 18677  01473C  0100               	movlb	0	; () banked
 18678  01473E  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18679                           
 18680                           ;LCD.c: 216: ys+=2;
 18681  014740  0E02               	movlw	2
 18682  014742  0100               	movlb	0	; () banked
 18683  014744  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18684                           
 18685                           ;LCD.c: 217: ye+=2;
 18686  014746  0E02               	movlw	2
 18687  014748  0100               	movlb	0	; () banked
 18688  01474A  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18689                           
 18690                           ;LCD.c: 218: xs+=3;
 18691  01474C  0E03               	movlw	3
 18692  01474E  0100               	movlb	0	; () banked
 18693  014750  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18694                           
 18695                           ;LCD.c: 219: xe+=3;
 18696  014752  0E03               	movlw	3
 18697  014754  0100               	movlb	0	; () banked
 18698  014756  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18699                           
 18700                           ; BSR set to: 0
 18701                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18702  014758  0E00               	movlw	0
 18703  01475A  0100               	movlb	0	; () banked
 18704  01475C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18705  01475E  0E2A               	movlw	42
 18706  014760  EC03  F0B2         	call	_LCD_Write
 18707                           
 18708                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18709  014764  0E01               	movlw	1
 18710  014766  0100               	movlb	0	; () banked
 18711  014768  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18712  01476A  0E00               	movlw	0
 18713  01476C  EC03  F0B2         	call	_LCD_Write
 18714                           
 18715                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18716  014770  0E01               	movlw	1
 18717  014772  0100               	movlb	0	; () banked
 18718  014774  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18719  014776  0100               	movlb	0	; () banked
 18720  014778  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18721  01477A  EC03  F0B2         	call	_LCD_Write
 18722                           
 18723                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18724  01477E  0E01               	movlw	1
 18725  014780  0100               	movlb	0	; () banked
 18726  014782  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18727  014784  0E00               	movlw	0
 18728  014786  EC03  F0B2         	call	_LCD_Write
 18729                           
 18730                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18731  01478A  0E01               	movlw	1
 18732  01478C  0100               	movlb	0	; () banked
 18733  01478E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18734  014790  0100               	movlb	0	; () banked
 18735  014792  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18736  014794  EC03  F0B2         	call	_LCD_Write
 18737                           
 18738                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18739  014798  0E00               	movlw	0
 18740  01479A  0100               	movlb	0	; () banked
 18741  01479C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18742  01479E  0E2B               	movlw	43
 18743  0147A0  EC03  F0B2         	call	_LCD_Write
 18744                           
 18745                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18746  0147A4  0E01               	movlw	1
 18747  0147A6  0100               	movlb	0	; () banked
 18748  0147A8  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18749  0147AA  0E00               	movlw	0
 18750  0147AC  EC03  F0B2         	call	_LCD_Write
 18751                           
 18752                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18753  0147B0  0E01               	movlw	1
 18754  0147B2  0100               	movlb	0	; () banked
 18755  0147B4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18756  0147B6  0100               	movlb	0	; () banked
 18757  0147B8  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18758  0147BA  EC03  F0B2         	call	_LCD_Write
 18759                           
 18760                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18761  0147BE  0E01               	movlw	1
 18762  0147C0  0100               	movlb	0	; () banked
 18763  0147C2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18764  0147C4  0E00               	movlw	0
 18765  0147C6  EC03  F0B2         	call	_LCD_Write
 18766                           
 18767                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18768  0147CA  0E01               	movlw	1
 18769  0147CC  0100               	movlb	0	; () banked
 18770  0147CE  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18771  0147D0  0100               	movlb	0	; () banked
 18772  0147D2  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18773  0147D4  EC03  F0B2         	call	_LCD_Write
 18774                           
 18775                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18776  0147D8  0E00               	movlw	0
 18777  0147DA  0100               	movlb	0	; () banked
 18778  0147DC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18779  0147DE  0E2C               	movlw	44
 18780  0147E0  EC03  F0B2         	call	_LCD_Write
 18781  0147E4  0012               	return		;funcret
 18782  0147E6                     __end_of_Set_Addr_Window:
 18783                           	opt stack 0
 18784                           tosu	equ	0xFFF
 18785                           tosh	equ	0xFFE
 18786                           tosl	equ	0xFFD
 18787                           pclath	equ	0xFFA
 18788                           tblptru	equ	0xFF8
 18789                           tblptrh	equ	0xFF7
 18790                           tblptrl	equ	0xFF6
 18791                           tablat	equ	0xFF5
 18792                           prodh	equ	0xFF4
 18793                           prodl	equ	0xFF3
 18794                           intcon	equ	0xFF2
 18795                           postinc0	equ	0xFEE
 18796                           wreg	equ	0xFE8
 18797                           indf1	equ	0xFE7
 18798                           postdec1	equ	0xFE5
 18799                           fsr1h	equ	0xFE2
 18800                           fsr1l	equ	0xFE1
 18801                           indf2	equ	0xFDF
 18802                           postinc2	equ	0xFDE
 18803                           postdec2	equ	0xFDD
 18804                           plusw2	equ	0xFDB
 18805                           fsr2h	equ	0xFDA
 18806                           fsr2l	equ	0xFD9
 18807                           status	equ	0xFD8
 18808                           
 18809 ;; *************** function _LCD_Word_Write *****************
 18810 ;; Defined at:
 18811 ;;		line 198 in file "Library/LCD.c"
 18812 ;; Parameters:    Size  Location     Type
 18813 ;;  value           2    5[BANK0 ] unsigned short 
 18814 ;; Auto vars:     Size  Location     Type
 18815 ;;		None
 18816 ;; Return value:  Size  Location     Type
 18817 ;;                  1    wreg      void 
 18818 ;; Registers used:
 18819 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18820 ;; Tracked objects:
 18821 ;;		On entry : 0/0
 18822 ;;		On exit  : 0/0
 18823 ;;		Unchanged: 0/0
 18824 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18825 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18826 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18827 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18828 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18829 ;;Total ram usage:        2 bytes
 18830 ;; Hardware stack levels used:    1
 18831 ;; Hardware stack levels required when called:    9
 18832 ;; This function calls:
 18833 ;;		_LCD_Write
 18834 ;; This function is called by:
 18835 ;;		_LCD_Fill
 18836 ;;		_LCD_FillRectangle
 18837 ;;		_LCD_DrawField
 18838 ;;		_LCD_DrawPixel
 18839 ;; This function uses a non-reentrant model
 18840 ;;
 18841                           
 18842                           	psect	text84
 18843  0164C8                     __ptext84:
 18844                           	opt stack 0
 18845  0164C8                     _LCD_Word_Write:
 18846                           	opt stack 17
 18847                           
 18848                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18849                           
 18850                           ;incstack = 0
 18851  0164C8  0E01               	movlw	1
 18852  0164CA  0100               	movlb	0	; () banked
 18853  0164CC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18854  0164CE  0100               	movlb	0	; () banked
 18855  0164D0  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18856  0164D2  EC03  F0B2         	call	_LCD_Write
 18857                           
 18858                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18859  0164D6  0E01               	movlw	1
 18860  0164D8  0100               	movlb	0	; () banked
 18861  0164DA  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18862  0164DC  0100               	movlb	0	; () banked
 18863  0164DE  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18864  0164E0  EC03  F0B2         	call	_LCD_Write
 18865  0164E4  0012               	return		;funcret
 18866  0164E6                     __end_of_LCD_Word_Write:
 18867                           	opt stack 0
 18868                           tosu	equ	0xFFF
 18869                           tosh	equ	0xFFE
 18870                           tosl	equ	0xFFD
 18871                           pclath	equ	0xFFA
 18872                           tblptru	equ	0xFF8
 18873                           tblptrh	equ	0xFF7
 18874                           tblptrl	equ	0xFF6
 18875                           tablat	equ	0xFF5
 18876                           prodh	equ	0xFF4
 18877                           prodl	equ	0xFF3
 18878                           intcon	equ	0xFF2
 18879                           postinc0	equ	0xFEE
 18880                           wreg	equ	0xFE8
 18881                           indf1	equ	0xFE7
 18882                           postdec1	equ	0xFE5
 18883                           fsr1h	equ	0xFE2
 18884                           fsr1l	equ	0xFE1
 18885                           indf2	equ	0xFDF
 18886                           postinc2	equ	0xFDE
 18887                           postdec2	equ	0xFDD
 18888                           plusw2	equ	0xFDB
 18889                           fsr2h	equ	0xFDA
 18890                           fsr2l	equ	0xFD9
 18891                           status	equ	0xFD8
 18892                           
 18893 ;; *************** function _LCD_Write *****************
 18894 ;; Defined at:
 18895 ;;		line 67 in file "Library/LCD.c"
 18896 ;; Parameters:    Size  Location     Type
 18897 ;;  value           1    wreg     unsigned char 
 18898 ;;  mode            1    3[BANK0 ] enum E6761
 18899 ;; Auto vars:     Size  Location     Type
 18900 ;;  value           1    4[BANK0 ] unsigned char 
 18901 ;; Return value:  Size  Location     Type
 18902 ;;                  1    wreg      void 
 18903 ;; Registers used:
 18904 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18905 ;; Tracked objects:
 18906 ;;		On entry : 0/0
 18907 ;;		On exit  : 0/0
 18908 ;;		Unchanged: 0/0
 18909 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18910 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18911 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18912 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18913 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18914 ;;Total ram usage:        2 bytes
 18915 ;; Hardware stack levels used:    1
 18916 ;; Hardware stack levels required when called:    8
 18917 ;; This function calls:
 18918 ;;		_Mode_Set
 18919 ;;		_SPI_Send
 18920 ;; This function is called by:
 18921 ;;		_LCD_Init
 18922 ;;		_LCD_Word_Write
 18923 ;;		_Set_Addr_Window
 18924 ;;		_Set_Rotation
 18925 ;;		_LCD_WriteCMD
 18926 ;;		_LCD_WriteData
 18927 ;;		_LCD_Data_Write
 18928 ;;		_LCD_Data_Write_4k
 18929 ;;		_Invert_Display
 18930 ;; This function uses a non-reentrant model
 18931 ;;
 18932                           
 18933                           	psect	text85
 18934  016406                     __ptext85:
 18935                           	opt stack 0
 18936  016406                     _LCD_Write:
 18937                           	opt stack 17
 18938                           
 18939                           ;incstack = 0
 18940                           ;LCD_Write@value stored from wreg
 18941  016406  0100               	movlb	0	; () banked
 18942  016408  6FBE               	movwf	LCD_Write@value& (0+255),b
 18943                           
 18944                           ;LCD.c: 89: Mode_Set(mode);
 18945  01640A  0100               	movlb	0	; () banked
 18946  01640C  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18947  01640E  EC86  F0B3         	call	_Mode_Set
 18948                           
 18949                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18950  016412  0E83               	movlw	low _SPI2
 18951  016414  0100               	movlb	0	; () banked
 18952  016416  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18953  016418  0E03               	movlw	high _SPI2
 18954  01641A  0100               	movlb	0	; () banked
 18955  01641C  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18956  01641E  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18957  016422  EC06  F0AB         	call	_SPI_Send	;wreg free
 18958  016426  0012               	return		;funcret
 18959  016428                     __end_of_LCD_Write:
 18960                           	opt stack 0
 18961                           tosu	equ	0xFFF
 18962                           tosh	equ	0xFFE
 18963                           tosl	equ	0xFFD
 18964                           pclath	equ	0xFFA
 18965                           tblptru	equ	0xFF8
 18966                           tblptrh	equ	0xFF7
 18967                           tblptrl	equ	0xFF6
 18968                           tablat	equ	0xFF5
 18969                           prodh	equ	0xFF4
 18970                           prodl	equ	0xFF3
 18971                           intcon	equ	0xFF2
 18972                           postinc0	equ	0xFEE
 18973                           wreg	equ	0xFE8
 18974                           indf1	equ	0xFE7
 18975                           postdec1	equ	0xFE5
 18976                           fsr1h	equ	0xFE2
 18977                           fsr1l	equ	0xFE1
 18978                           indf2	equ	0xFDF
 18979                           postinc2	equ	0xFDE
 18980                           postdec2	equ	0xFDD
 18981                           plusw2	equ	0xFDB
 18982                           fsr2h	equ	0xFDA
 18983                           fsr2l	equ	0xFD9
 18984                           status	equ	0xFD8
 18985                           
 18986 ;; *************** function _SPI_Send *****************
 18987 ;; Defined at:
 18988 ;;		line 226 in file "Library/SPI.c"
 18989 ;; Parameters:    Size  Location     Type
 18990 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18991 ;;		 -> SPI1(11), SPI2(11), 
 18992 ;;  pData           1    2[BANK0 ] unsigned char 
 18993 ;; Auto vars:     Size  Location     Type
 18994 ;;		None
 18995 ;; Return value:  Size  Location     Type
 18996 ;;                  1    wreg      unsigned char 
 18997 ;; Registers used:
 18998 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18999 ;; Tracked objects:
 19000 ;;		On entry : 0/0
 19001 ;;		On exit  : 0/0
 19002 ;;		Unchanged: 0/0
 19003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19004 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19005 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19007 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19008 ;;Total ram usage:        3 bytes
 19009 ;; Hardware stack levels used:    1
 19010 ;; Hardware stack levels required when called:    7
 19011 ;; This function calls:
 19012 ;;		Nothing
 19013 ;; This function is called by:
 19014 ;;		_LCD_Write
 19015 ;;		_OutSeg
 19016 ;; This function uses a non-reentrant model
 19017 ;;
 19018                           
 19019                           	psect	text86
 19020  01560C                     __ptext86:
 19021                           	opt stack 0
 19022  01560C                     _SPI_Send:
 19023                           	opt stack 19
 19024                           
 19025                           ;SPI.c: 253: switch (pInput->mChannel)
 19026                           
 19027                           ;incstack = 0
 19028  01560C  D026               	goto	l678
 19029  01560E                     
 19030                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 19031  01560E  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19032  015612  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19033  015616  0100               	movlb	0	; () banked
 19034  015618  94DF               	bcf	indf2,2,c
 19035                           
 19036                           ; BSR set to: 0
 19037                           ;SPI.c: 257: SSP1BUF = pData;
 19038  01561A  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 19039  01561E                     
 19040                           ; BSR set to: 0
 19041  01561E  A0C7               	btfss	4039,0,c	;volatile
 19042  015620  D7FE               	goto	l681
 19043                           
 19044                           ;SPI.c: 259: pData = SSP1BUF;
 19045  015622  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 19046                           
 19047                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 19048  015626  C0A9  FFD9         	movff	_PortC+4,fsr2l
 19049  01562A  C0AA  FFDA         	movff	_PortC+5,fsr2h
 19050  01562E  0100               	movlb	0	; () banked
 19051  015630  84DF               	bsf	indf2,2,c
 19052                           
 19053                           ; BSR set to: 0
 19054                           ;SPI.c: 261: return pData;
 19055                           ;	Return value of _SPI_Send is never used
 19056  015632  0012               	return	
 19057  015634                     
 19058                           ; BSR set to: 0
 19059                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 19060                           
 19061                           ; BSR set to: 0
 19062  015634  C09F  FFD9         	movff	_PortD+4,fsr2l
 19063  015638  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19064  01563C  0100               	movlb	0	; () banked
 19065  01563E  9EDF               	bcf	indf2,7,c
 19066                           
 19067                           ; BSR set to: 0
 19068                           ;SPI.c: 264: SSP2BUF = pData;
 19069  015640  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 19070  015644                     
 19071                           ; BSR set to: 0
 19072  015644  A06D               	btfss	3949,0,c	;volatile
 19073  015646  D7FE               	goto	l686
 19074                           
 19075                           ;SPI.c: 266: pData = SSP2BUF;
 19076  015648  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 19077                           
 19078                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 19079  01564C  C09F  FFD9         	movff	_PortD+4,fsr2l
 19080  015650  C0A0  FFDA         	movff	_PortD+5,fsr2h
 19081  015654  0100               	movlb	0	; () banked
 19082  015656  8EDF               	bsf	indf2,7,c
 19083                           
 19084                           ; BSR set to: 0
 19085                           ;SPI.c: 269: };
 19086                           
 19087                           ; BSR set to: 0
 19088                           ;SPI.c: 268: return pData;
 19089                           ;	Return value of _SPI_Send is never used
 19090  015658  0012               	return	
 19091  01565A                     l678:
 19092                           
 19093                           ; BSR set to: 0
 19094  01565A  0100               	movlb	0	; () banked
 19095  01565C  EE20 F002          	lfsr	2,2
 19096  015660  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 19097  015662  26D9               	addwf	fsr2l,f,c
 19098  015664  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 19099  015666  22DA               	addwfc	fsr2h,f,c
 19100  015668  50DF               	movf	indf2,w,c
 19101                           
 19102                           ; Switch size 1, requested type "space"
 19103                           ; Number of cases is 2, Range of values is 0 to 1
 19104                           ; switch strategies available:
 19105                           ; Name         Instructions Cycles
 19106                           ; simple_byte            7     4 (average)
 19107                           ;	Chosen strategy is simple_byte
 19108  01566A  0A00               	xorlw	0	; case 0
 19109  01566C  B4D8               	btfsc	status,2,c
 19110  01566E  D7CF               	goto	l679
 19111  015670  0A01               	xorlw	1	; case 1
 19112  015672  A4D8               	btfss	status,2,c
 19113  015674  0012               	return	
 19114  015676  D7DE               	goto	l684
 19115  015678                     __end_of_SPI_Send:
 19116                           	opt stack 0
 19117                           tosu	equ	0xFFF
 19118                           tosh	equ	0xFFE
 19119                           tosl	equ	0xFFD
 19120                           pclath	equ	0xFFA
 19121                           tblptru	equ	0xFF8
 19122                           tblptrh	equ	0xFF7
 19123                           tblptrl	equ	0xFF6
 19124                           tablat	equ	0xFF5
 19125                           prodh	equ	0xFF4
 19126                           prodl	equ	0xFF3
 19127                           intcon	equ	0xFF2
 19128                           postinc0	equ	0xFEE
 19129                           wreg	equ	0xFE8
 19130                           indf1	equ	0xFE7
 19131                           postdec1	equ	0xFE5
 19132                           fsr1h	equ	0xFE2
 19133                           fsr1l	equ	0xFE1
 19134                           indf2	equ	0xFDF
 19135                           postinc2	equ	0xFDE
 19136                           postdec2	equ	0xFDD
 19137                           plusw2	equ	0xFDB
 19138                           fsr2h	equ	0xFDA
 19139                           fsr2l	equ	0xFD9
 19140                           status	equ	0xFD8
 19141                           
 19142 ;; *************** function _Mode_Set *****************
 19143 ;; Defined at:
 19144 ;;		line 40 in file "Library/LCD.c"
 19145 ;; Parameters:    Size  Location     Type
 19146 ;;  pMode           1    wreg     enum E6761
 19147 ;; Auto vars:     Size  Location     Type
 19148 ;;  pMode           1    0[BANK0 ] enum E6761
 19149 ;; Return value:  Size  Location     Type
 19150 ;;                  1    wreg      void 
 19151 ;; Registers used:
 19152 ;;		wreg
 19153 ;; Tracked objects:
 19154 ;;		On entry : 0/0
 19155 ;;		On exit  : 0/0
 19156 ;;		Unchanged: 0/0
 19157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19158 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19159 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19161 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19162 ;;Total ram usage:        1 bytes
 19163 ;; Hardware stack levels used:    1
 19164 ;; Hardware stack levels required when called:    7
 19165 ;; This function calls:
 19166 ;;		Nothing
 19167 ;; This function is called by:
 19168 ;;		_LCD_Write
 19169 ;; This function uses a non-reentrant model
 19170 ;;
 19171                           
 19172                           	psect	text87
 19173  01670C                     __ptext87:
 19174                           	opt stack 0
 19175  01670C                     _Mode_Set:
 19176                           	opt stack 17
 19177                           
 19178                           ; BSR set to: 0
 19179                           ;incstack = 0
 19180                           ;Mode_Set@pMode stored from wreg
 19181  01670C  0100               	movlb	0	; () banked
 19182  01670E  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 19183                           
 19184                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19185  016710  0100               	movlb	0	; () banked
 19186  016712  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 19187  016714  D002               	bra	u9085
 19188  016716  9E85               	bcf	3973,7,c	;volatile
 19189  016718  D001               	bra	u9086
 19190  01671A                     u9085:
 19191  01671A  8E85               	bsf	3973,7,c	;volatile
 19192  01671C                     u9086:
 19193  01671C  0012               	return		;funcret
 19194  01671E                     __end_of_Mode_Set:
 19195                           	opt stack 0
 19196                           tosu	equ	0xFFF
 19197                           tosh	equ	0xFFE
 19198                           tosl	equ	0xFFD
 19199                           pclath	equ	0xFFA
 19200                           tblptru	equ	0xFF8
 19201                           tblptrh	equ	0xFF7
 19202                           tblptrl	equ	0xFF6
 19203                           tablat	equ	0xFF5
 19204                           prodh	equ	0xFF4
 19205                           prodl	equ	0xFF3
 19206                           intcon	equ	0xFF2
 19207                           postinc0	equ	0xFEE
 19208                           wreg	equ	0xFE8
 19209                           indf1	equ	0xFE7
 19210                           postdec1	equ	0xFE5
 19211                           fsr1h	equ	0xFE2
 19212                           fsr1l	equ	0xFE1
 19213                           indf2	equ	0xFDF
 19214                           postinc2	equ	0xFDE
 19215                           postdec2	equ	0xFDD
 19216                           plusw2	equ	0xFDB
 19217                           fsr2h	equ	0xFDA
 19218                           fsr2l	equ	0xFD9
 19219                           status	equ	0xFD8
 19220                           
 19221 ;; *************** function _Configure_GPIOs *****************
 19222 ;; Defined at:
 19223 ;;		line 46 in file "Library/LCD.c"
 19224 ;; Parameters:    Size  Location     Type
 19225 ;;		None
 19226 ;; Auto vars:     Size  Location     Type
 19227 ;;		None
 19228 ;; Return value:  Size  Location     Type
 19229 ;;                  1    wreg      void 
 19230 ;; Registers used:
 19231 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19232 ;; Tracked objects:
 19233 ;;		On entry : 0/0
 19234 ;;		On exit  : 0/0
 19235 ;;		Unchanged: 0/0
 19236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19240 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19241 ;;Total ram usage:        0 bytes
 19242 ;; Hardware stack levels used:    1
 19243 ;; Hardware stack levels required when called:   14
 19244 ;; This function calls:
 19245 ;;		_LCD_Reset
 19246 ;;		_Port_SetPinType
 19247 ;;		_SPI_Init
 19248 ;;		_SPI_MaxSpeed
 19249 ;; This function is called by:
 19250 ;;		_LCD_Init
 19251 ;; This function uses a non-reentrant model
 19252 ;;
 19253                           
 19254                           	psect	text88
 19255  01559C                     __ptext88:
 19256                           	opt stack 0
 19257  01559C                     _Configure_GPIOs:
 19258                           	opt stack 14
 19259                           
 19260                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19261                           
 19262                           ;incstack = 0
 19263  01559C  0EC0               	movlw	low _PortF
 19264  01559E  0100               	movlb	0	; () banked
 19265  0155A0  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19266  0155A2  0E03               	movlw	high _PortF
 19267  0155A4  0100               	movlb	0	; () banked
 19268  0155A6  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19269  0155A8  0E07               	movlw	7
 19270  0155AA  0100               	movlb	0	; () banked
 19271  0155AC  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19272  0155AE  0E03               	movlw	3
 19273  0155B0  0100               	movlb	0	; () banked
 19274  0155B2  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19275  0155B4  EC95  F093         	call	_Port_SetPinType	;wreg free
 19276                           
 19277                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19278  0155B8  0EC0               	movlw	low _PortF
 19279  0155BA  0100               	movlb	0	; () banked
 19280  0155BC  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19281  0155BE  0E03               	movlw	high _PortF
 19282  0155C0  0100               	movlb	0	; () banked
 19283  0155C2  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19284  0155C4  0E06               	movlw	6
 19285  0155C6  0100               	movlb	0	; () banked
 19286  0155C8  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19287  0155CA  0E03               	movlw	3
 19288  0155CC  0100               	movlb	0	; () banked
 19289  0155CE  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19290  0155D0  EC95  F093         	call	_Port_SetPinType	;wreg free
 19291                           
 19292                           ;LCD.c: 55: LCD_Reset();
 19293  0155D4  EC0F  F0AE         	call	_LCD_Reset	;wreg free
 19294                           
 19295                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19296  0155D8  0EC0               	movlw	192
 19297  0155DA  0100               	movlb	0	; () banked
 19298  0155DC  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19299  0155DE  0EC6               	movlw	198
 19300  0155E0  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19301  0155E2  0E2D               	movlw	45
 19302  0155E4  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19303  0155E6  0E00               	movlw	0
 19304  0155E8  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19305  0155EA  0E01               	movlw	1
 19306  0155EC  0100               	movlb	0	; () banked
 19307  0155EE  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19308  0155F0  0E01               	movlw	1
 19309  0155F2  0100               	movlb	0	; () banked
 19310  0155F4  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19311  0155F6  EC90  F084         	call	_SPI_Init	;wreg free
 19312                           
 19313                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19314  0155FA  0E83               	movlw	low _SPI2
 19315  0155FC  0100               	movlb	0	; () banked
 19316  0155FE  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19317  015600  0E03               	movlw	high _SPI2
 19318  015602  0100               	movlb	0	; () banked
 19319  015604  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19320  015606  EC20  F0AA         	call	_SPI_MaxSpeed	;wreg free
 19321  01560A  0012               	return		;funcret
 19322  01560C                     __end_of_Configure_GPIOs:
 19323                           	opt stack 0
 19324                           tosu	equ	0xFFF
 19325                           tosh	equ	0xFFE
 19326                           tosl	equ	0xFFD
 19327                           pclath	equ	0xFFA
 19328                           tblptru	equ	0xFF8
 19329                           tblptrh	equ	0xFF7
 19330                           tblptrl	equ	0xFF6
 19331                           tablat	equ	0xFF5
 19332                           prodh	equ	0xFF4
 19333                           prodl	equ	0xFF3
 19334                           intcon	equ	0xFF2
 19335                           postinc0	equ	0xFEE
 19336                           wreg	equ	0xFE8
 19337                           indf1	equ	0xFE7
 19338                           postdec1	equ	0xFE5
 19339                           fsr1h	equ	0xFE2
 19340                           fsr1l	equ	0xFE1
 19341                           indf2	equ	0xFDF
 19342                           postinc2	equ	0xFDE
 19343                           postdec2	equ	0xFDD
 19344                           plusw2	equ	0xFDB
 19345                           fsr2h	equ	0xFDA
 19346                           fsr2l	equ	0xFD9
 19347                           status	equ	0xFD8
 19348                           
 19349 ;; *************** function _SPI_MaxSpeed *****************
 19350 ;; Defined at:
 19351 ;;		line 201 in file "Library/SPI.c"
 19352 ;; Parameters:    Size  Location     Type
 19353 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19354 ;;		 -> SPI2(11), 
 19355 ;; Auto vars:     Size  Location     Type
 19356 ;;		None
 19357 ;; Return value:  Size  Location     Type
 19358 ;;                  1    wreg      void 
 19359 ;; Registers used:
 19360 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19361 ;; Tracked objects:
 19362 ;;		On entry : 0/0
 19363 ;;		On exit  : 0/0
 19364 ;;		Unchanged: 0/0
 19365 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19366 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19367 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19368 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19369 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19370 ;;Total ram usage:        2 bytes
 19371 ;; Hardware stack levels used:    1
 19372 ;; Hardware stack levels required when called:    9
 19373 ;; This function calls:
 19374 ;;		_Byte_SetBit
 19375 ;;		_Byte_SetQuad
 19376 ;; This function is called by:
 19377 ;;		_Configure_GPIOs
 19378 ;; This function uses a non-reentrant model
 19379 ;;
 19380                           
 19381                           	psect	text89
 19382  015440                     __ptext89:
 19383                           	opt stack 0
 19384  015440                     _SPI_MaxSpeed:
 19385                           	opt stack 18
 19386                           
 19387                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19388                           
 19389                           ;incstack = 0
 19390  015440  0100               	movlb	0	; () banked
 19391  015442  EE20 F006          	lfsr	2,6
 19392  015446  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19393  015448  26D9               	addwf	fsr2l,f,c
 19394  01544A  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19395  01544C  22DA               	addwfc	fsr2h,f,c
 19396  01544E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19397  015452  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19398  015456  0E05               	movlw	5
 19399  015458  0100               	movlb	0	; () banked
 19400  01545A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19401  01545C  0E00               	movlw	0
 19402  01545E  0100               	movlb	0	; () banked
 19403  015460  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19404  015462  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 19405                           
 19406                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19407  015466  0100               	movlb	0	; () banked
 19408  015468  EE20 F006          	lfsr	2,6
 19409  01546C  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19410  01546E  26D9               	addwf	fsr2l,f,c
 19411  015470  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19412  015472  22DA               	addwfc	fsr2h,f,c
 19413  015474  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19414  015478  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19415  01547C  0E00               	movlw	0
 19416  01547E  0100               	movlb	0	; () banked
 19417  015480  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19418  015482  0E00               	movlw	0
 19419  015484  0100               	movlb	0	; () banked
 19420  015486  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19421  015488  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 19422                           
 19423                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19424  01548C  0100               	movlb	0	; () banked
 19425  01548E  EE20 F006          	lfsr	2,6
 19426  015492  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19427  015494  26D9               	addwf	fsr2l,f,c
 19428  015496  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19429  015498  22DA               	addwfc	fsr2h,f,c
 19430  01549A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19431  01549E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19432  0154A2  0E05               	movlw	5
 19433  0154A4  0100               	movlb	0	; () banked
 19434  0154A6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19435  0154A8  0E01               	movlw	1
 19436  0154AA  0100               	movlb	0	; () banked
 19437  0154AC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19438  0154AE  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 19439  0154B2  0012               	return		;funcret
 19440  0154B4                     __end_of_SPI_MaxSpeed:
 19441                           	opt stack 0
 19442                           tosu	equ	0xFFF
 19443                           tosh	equ	0xFFE
 19444                           tosl	equ	0xFFD
 19445                           pclath	equ	0xFFA
 19446                           tblptru	equ	0xFF8
 19447                           tblptrh	equ	0xFF7
 19448                           tblptrl	equ	0xFF6
 19449                           tablat	equ	0xFF5
 19450                           prodh	equ	0xFF4
 19451                           prodl	equ	0xFF3
 19452                           intcon	equ	0xFF2
 19453                           postinc0	equ	0xFEE
 19454                           wreg	equ	0xFE8
 19455                           indf1	equ	0xFE7
 19456                           postdec1	equ	0xFE5
 19457                           fsr1h	equ	0xFE2
 19458                           fsr1l	equ	0xFE1
 19459                           indf2	equ	0xFDF
 19460                           postinc2	equ	0xFDE
 19461                           postdec2	equ	0xFDD
 19462                           plusw2	equ	0xFDB
 19463                           fsr2h	equ	0xFDA
 19464                           fsr2l	equ	0xFD9
 19465                           status	equ	0xFD8
 19466                           
 19467 ;; *************** function _LCD_Reset *****************
 19468 ;; Defined at:
 19469 ;;		line 95 in file "Library/LCD.c"
 19470 ;; Parameters:    Size  Location     Type
 19471 ;;		None
 19472 ;; Auto vars:     Size  Location     Type
 19473 ;;		None
 19474 ;; Return value:  Size  Location     Type
 19475 ;;                  1    wreg      void 
 19476 ;; Registers used:
 19477 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19478 ;; Tracked objects:
 19479 ;;		On entry : 0/0
 19480 ;;		On exit  : 0/0
 19481 ;;		Unchanged: 0/0
 19482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19486 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19487 ;;Total ram usage:        0 bytes
 19488 ;; Hardware stack levels used:    1
 19489 ;; Hardware stack levels required when called:   13
 19490 ;; This function calls:
 19491 ;;		_LED_Toggle
 19492 ;;		_Reset_High
 19493 ;;		_Reset_Low
 19494 ;;		_delay_ms
 19495 ;; This function is called by:
 19496 ;;		_Configure_GPIOs
 19497 ;; This function uses a non-reentrant model
 19498 ;;
 19499                           
 19500                           	psect	text90
 19501  015C1E                     __ptext90:
 19502                           	opt stack 0
 19503  015C1E                     _LCD_Reset:
 19504                           	opt stack 14
 19505                           
 19506                           ;LCD.c: 97: Reset_High();
 19507                           
 19508                           ;incstack = 0
 19509  015C1E  EC82  F0B2         	call	_Reset_High	;wreg free
 19510                           
 19511                           ;LCD.c: 98: LED_Toggle(eLED2);
 19512  015C22  0E01               	movlw	1
 19513  015C24  ECEF  F0AE         	call	_LED_Toggle
 19514                           
 19515                           ;LCD.c: 99: delay_ms(0x80);
 19516  015C28  0E00               	movlw	0
 19517  015C2A  0100               	movlb	0	; () banked
 19518  015C2C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19519  015C2E  0E80               	movlw	128
 19520  015C30  6FBA               	movwf	delay_ms@ms& (0+255),b
 19521  015C32  ECA7  F0AB         	call	_delay_ms	;wreg free
 19522                           
 19523                           ;LCD.c: 100: LED_Toggle(eLED2);
 19524  015C36  0E01               	movlw	1
 19525  015C38  ECEF  F0AE         	call	_LED_Toggle
 19526                           
 19527                           ;LCD.c: 101: Reset_Low();
 19528  015C3C  EC73  F0B2         	call	_Reset_Low	;wreg free
 19529                           
 19530                           ;LCD.c: 102: delay_ms(0x80);
 19531  015C40  0E00               	movlw	0
 19532  015C42  0100               	movlb	0	; () banked
 19533  015C44  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19534  015C46  0E80               	movlw	128
 19535  015C48  6FBA               	movwf	delay_ms@ms& (0+255),b
 19536  015C4A  ECA7  F0AB         	call	_delay_ms	;wreg free
 19537                           
 19538                           ;LCD.c: 103: LED_Toggle(eLED2);
 19539  015C4E  0E01               	movlw	1
 19540  015C50  ECEF  F0AE         	call	_LED_Toggle
 19541                           
 19542                           ;LCD.c: 104: Reset_High();
 19543  015C54  EC82  F0B2         	call	_Reset_High	;wreg free
 19544                           
 19545                           ;LCD.c: 105: delay_ms(0x80);
 19546  015C58  0E00               	movlw	0
 19547  015C5A  0100               	movlb	0	; () banked
 19548  015C5C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19549  015C5E  0E80               	movlw	128
 19550  015C60  6FBA               	movwf	delay_ms@ms& (0+255),b
 19551  015C62  ECA7  F0AB         	call	_delay_ms	;wreg free
 19552                           
 19553                           ;LCD.c: 106: LED_Toggle(eLED2);
 19554  015C66  0E01               	movlw	1
 19555  015C68  ECEF  F0AE         	call	_LED_Toggle
 19556  015C6C  0012               	return		;funcret
 19557  015C6E                     __end_of_LCD_Reset:
 19558                           	opt stack 0
 19559                           tosu	equ	0xFFF
 19560                           tosh	equ	0xFFE
 19561                           tosl	equ	0xFFD
 19562                           pclath	equ	0xFFA
 19563                           tblptru	equ	0xFF8
 19564                           tblptrh	equ	0xFF7
 19565                           tblptrl	equ	0xFF6
 19566                           tablat	equ	0xFF5
 19567                           prodh	equ	0xFF4
 19568                           prodl	equ	0xFF3
 19569                           intcon	equ	0xFF2
 19570                           postinc0	equ	0xFEE
 19571                           wreg	equ	0xFE8
 19572                           indf1	equ	0xFE7
 19573                           postdec1	equ	0xFE5
 19574                           fsr1h	equ	0xFE2
 19575                           fsr1l	equ	0xFE1
 19576                           indf2	equ	0xFDF
 19577                           postinc2	equ	0xFDE
 19578                           postdec2	equ	0xFDD
 19579                           plusw2	equ	0xFDB
 19580                           fsr2h	equ	0xFDA
 19581                           fsr2l	equ	0xFD9
 19582                           status	equ	0xFD8
 19583                           
 19584 ;; *************** function _delay_ms *****************
 19585 ;; Defined at:
 19586 ;;		line 240 in file "Library/Types.c"
 19587 ;; Parameters:    Size  Location     Type
 19588 ;;  ms              2    0[BANK0 ] unsigned short 
 19589 ;; Auto vars:     Size  Location     Type
 19590 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19591 ;; Return value:  Size  Location     Type
 19592 ;;                  1    wreg      void 
 19593 ;; Registers used:
 19594 ;;		wreg, status,2, status,0
 19595 ;; Tracked objects:
 19596 ;;		On entry : 0/0
 19597 ;;		On exit  : 0/0
 19598 ;;		Unchanged: 0/0
 19599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19600 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19601 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19603 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19604 ;;Total ram usage:        6 bytes
 19605 ;; Hardware stack levels used:    1
 19606 ;; Hardware stack levels required when called:    7
 19607 ;; This function calls:
 19608 ;;		Nothing
 19609 ;; This function is called by:
 19610 ;;		_LCD_Reset
 19611 ;;		_LCD_Init
 19612 ;;		_MXK_Init
 19613 ;;		_init
 19614 ;;		_move_and_rotate
 19615 ;;		_findClosestWall
 19616 ;;		_mode4
 19617 ;; This function uses a non-reentrant model
 19618 ;;
 19619                           
 19620                           	psect	text91
 19621  01574E                     __ptext91:
 19622                           	opt stack 0
 19623  01574E                     _delay_ms:
 19624                           	opt stack 21
 19625                           
 19626                           ;Types.c: 242: volatile unsigned long u;
 19627                           ;Types.c: 243: while (ms--)
 19628                           
 19629                           ;incstack = 0
 19630  01574E  D01F               	goto	u9560
 19631  015750                     l12804:
 19632                           
 19633                           ;Types.c: 244: {
 19634                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19635  015750  0E00               	movlw	0
 19636  015752  0100               	movlb	0	; () banked
 19637  015754  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19638  015756  0E00               	movlw	0
 19639  015758  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19640  01575A  0E00               	movlw	0
 19641  01575C  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19642  01575E  0E00               	movlw	0
 19643  015760  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19644  015762                     l12806:
 19645                           
 19646                           ; BSR set to: 0
 19647  015762  0100               	movlb	0	; () banked
 19648  015764  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19649  015766  0100               	movlb	0	; () banked
 19650  015768  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19651  01576A  E111               	bnz	l12812
 19652  01576C  0EB0               	movlw	176
 19653  01576E  0100               	movlb	0	; () banked
 19654  015770  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19655  015772  0E04               	movlw	4
 19656  015774  0100               	movlb	0	; () banked
 19657  015776  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19658  015778  B0D8               	btfsc	status,0,c
 19659  01577A  D009               	goto	u9560
 19660                           
 19661                           ; BSR set to: 0
 19662                           
 19663                           ; BSR set to: 0
 19664  01577C  F000               	nop		; ;# 
 19665  01577E  0E01               	movlw	1
 19666  015780  0100               	movlb	0	; () banked
 19667  015782  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19668  015784  0E00               	movlw	0
 19669  015786  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19670  015788  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19671  01578A  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19672  01578C  D7EA               	goto	l12806
 19673  01578E                     u9560:
 19674  01578E                     l12812:
 19675  01578E  0100               	movlb	0	; () banked
 19676  015790  07BA               	decf	delay_ms@ms& (0+255),f,b
 19677  015792  A0D8               	btfss	status,0,c
 19678  015794  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19679  015796  0100               	movlb	0	; () banked
 19680  015798  29BA               	incf	delay_ms@ms& (0+255),w,b
 19681  01579A  E1DA               	bnz	l12804
 19682  01579C  0100               	movlb	0	; () banked
 19683  01579E  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19684  0157A0  A4D8               	btfss	status,2,c
 19685  0157A2  D7D6               	goto	l824
 19686                           
 19687                           ; BSR set to: 0
 19688                           ;Types.c: 251: }
 19689                           ;Types.c: 252: }
 19690                           ;Types.c: 253: u = 0x8008;
 19691                           
 19692                           ; BSR set to: 0
 19693  0157A4  0E08               	movlw	8
 19694  0157A6  0100               	movlb	0	; () banked
 19695  0157A8  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19696  0157AA  0E80               	movlw	128
 19697  0157AC  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19698  0157AE  0E00               	movlw	0
 19699  0157B0  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19700  0157B2  0E00               	movlw	0
 19701  0157B4  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19702                           
 19703                           ; BSR set to: 0
 19704  0157B6  0012               	return		;funcret
 19705  0157B8                     __end_of_delay_ms:
 19706                           	opt stack 0
 19707                           tosu	equ	0xFFF
 19708                           tosh	equ	0xFFE
 19709                           tosl	equ	0xFFD
 19710                           pclath	equ	0xFFA
 19711                           tblptru	equ	0xFF8
 19712                           tblptrh	equ	0xFF7
 19713                           tblptrl	equ	0xFF6
 19714                           tablat	equ	0xFF5
 19715                           prodh	equ	0xFF4
 19716                           prodl	equ	0xFF3
 19717                           intcon	equ	0xFF2
 19718                           postinc0	equ	0xFEE
 19719                           wreg	equ	0xFE8
 19720                           indf1	equ	0xFE7
 19721                           postdec1	equ	0xFE5
 19722                           fsr1h	equ	0xFE2
 19723                           fsr1l	equ	0xFE1
 19724                           indf2	equ	0xFDF
 19725                           postinc2	equ	0xFDE
 19726                           postdec2	equ	0xFDD
 19727                           plusw2	equ	0xFDB
 19728                           fsr2h	equ	0xFDA
 19729                           fsr2l	equ	0xFD9
 19730                           status	equ	0xFD8
 19731                           
 19732 ;; *************** function _Reset_Low *****************
 19733 ;; Defined at:
 19734 ;;		line 32 in file "Library/LCD.c"
 19735 ;; Parameters:    Size  Location     Type
 19736 ;;		None
 19737 ;; Auto vars:     Size  Location     Type
 19738 ;;		None
 19739 ;; Return value:  Size  Location     Type
 19740 ;;                  1    wreg      void 
 19741 ;; Registers used:
 19742 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19743 ;; Tracked objects:
 19744 ;;		On entry : 0/0
 19745 ;;		On exit  : 0/0
 19746 ;;		Unchanged: 0/0
 19747 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19748 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19749 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19750 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19751 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19752 ;;Total ram usage:        0 bytes
 19753 ;; Hardware stack levels used:    1
 19754 ;; Hardware stack levels required when called:   11
 19755 ;; This function calls:
 19756 ;;		_Port_SetPin
 19757 ;; This function is called by:
 19758 ;;		_LCD_Reset
 19759 ;; This function uses a non-reentrant model
 19760 ;;
 19761                           
 19762                           	psect	text92
 19763  0164E6                     __ptext92:
 19764                           	opt stack 0
 19765  0164E6                     _Reset_Low:
 19766                           	opt stack 15
 19767                           
 19768                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19769                           
 19770                           ; BSR set to: 0
 19771                           ;incstack = 0
 19772  0164E6  0EC0               	movlw	low _PortF
 19773  0164E8  0100               	movlb	0	; () banked
 19774  0164EA  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19775  0164EC  0E03               	movlw	high _PortF
 19776  0164EE  0100               	movlb	0	; () banked
 19777  0164F0  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19778  0164F2  0E06               	movlw	6
 19779  0164F4  0100               	movlb	0	; () banked
 19780  0164F6  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19781  0164F8  0E01               	movlw	1
 19782  0164FA  0100               	movlb	0	; () banked
 19783  0164FC  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19784  0164FE  EC02  F0A0         	call	_Port_SetPin	;wreg free
 19785  016502  0012               	return		;funcret
 19786  016504                     __end_of_Reset_Low:
 19787                           	opt stack 0
 19788                           tosu	equ	0xFFF
 19789                           tosh	equ	0xFFE
 19790                           tosl	equ	0xFFD
 19791                           pclath	equ	0xFFA
 19792                           tblptru	equ	0xFF8
 19793                           tblptrh	equ	0xFF7
 19794                           tblptrl	equ	0xFF6
 19795                           tablat	equ	0xFF5
 19796                           prodh	equ	0xFF4
 19797                           prodl	equ	0xFF3
 19798                           intcon	equ	0xFF2
 19799                           postinc0	equ	0xFEE
 19800                           wreg	equ	0xFE8
 19801                           indf1	equ	0xFE7
 19802                           postdec1	equ	0xFE5
 19803                           fsr1h	equ	0xFE2
 19804                           fsr1l	equ	0xFE1
 19805                           indf2	equ	0xFDF
 19806                           postinc2	equ	0xFDE
 19807                           postdec2	equ	0xFDD
 19808                           plusw2	equ	0xFDB
 19809                           fsr2h	equ	0xFDA
 19810                           fsr2l	equ	0xFD9
 19811                           status	equ	0xFD8
 19812                           
 19813 ;; *************** function _Reset_High *****************
 19814 ;; Defined at:
 19815 ;;		line 36 in file "Library/LCD.c"
 19816 ;; Parameters:    Size  Location     Type
 19817 ;;		None
 19818 ;; Auto vars:     Size  Location     Type
 19819 ;;		None
 19820 ;; Return value:  Size  Location     Type
 19821 ;;                  1    wreg      void 
 19822 ;; Registers used:
 19823 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19824 ;; Tracked objects:
 19825 ;;		On entry : 0/0
 19826 ;;		On exit  : 0/0
 19827 ;;		Unchanged: 0/0
 19828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19830 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19831 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19832 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19833 ;;Total ram usage:        0 bytes
 19834 ;; Hardware stack levels used:    1
 19835 ;; Hardware stack levels required when called:   11
 19836 ;; This function calls:
 19837 ;;		_Port_SetPin
 19838 ;; This function is called by:
 19839 ;;		_LCD_Reset
 19840 ;; This function uses a non-reentrant model
 19841 ;;
 19842                           
 19843                           	psect	text93
 19844  016504                     __ptext93:
 19845                           	opt stack 0
 19846  016504                     _Reset_High:
 19847                           	opt stack 15
 19848                           
 19849                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19850                           
 19851                           ;incstack = 0
 19852  016504  0EC0               	movlw	low _PortF
 19853  016506  0100               	movlb	0	; () banked
 19854  016508  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19855  01650A  0E03               	movlw	high _PortF
 19856  01650C  0100               	movlb	0	; () banked
 19857  01650E  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19858  016510  0E06               	movlw	6
 19859  016512  0100               	movlb	0	; () banked
 19860  016514  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19861  016516  0E00               	movlw	0
 19862  016518  0100               	movlb	0	; () banked
 19863  01651A  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19864  01651C  EC02  F0A0         	call	_Port_SetPin	;wreg free
 19865  016520  0012               	return		;funcret
 19866  016522                     __end_of_Reset_High:
 19867                           	opt stack 0
 19868                           tosu	equ	0xFFF
 19869                           tosh	equ	0xFFE
 19870                           tosl	equ	0xFFD
 19871                           pclath	equ	0xFFA
 19872                           tblptru	equ	0xFF8
 19873                           tblptrh	equ	0xFF7
 19874                           tblptrl	equ	0xFF6
 19875                           tablat	equ	0xFF5
 19876                           prodh	equ	0xFF4
 19877                           prodl	equ	0xFF3
 19878                           intcon	equ	0xFF2
 19879                           postinc0	equ	0xFEE
 19880                           wreg	equ	0xFE8
 19881                           indf1	equ	0xFE7
 19882                           postdec1	equ	0xFE5
 19883                           fsr1h	equ	0xFE2
 19884                           fsr1l	equ	0xFE1
 19885                           indf2	equ	0xFDF
 19886                           postinc2	equ	0xFDE
 19887                           postdec2	equ	0xFDD
 19888                           plusw2	equ	0xFDB
 19889                           fsr2h	equ	0xFDA
 19890                           fsr2l	equ	0xFD9
 19891                           status	equ	0xFD8
 19892                           
 19893 ;; *************** function _ISR_Enable *****************
 19894 ;; Defined at:
 19895 ;;		line 27 in file "Library/ISR.c"
 19896 ;; Parameters:    Size  Location     Type
 19897 ;;		None
 19898 ;; Auto vars:     Size  Location     Type
 19899 ;;		None
 19900 ;; Return value:  Size  Location     Type
 19901 ;;                  1    wreg      void 
 19902 ;; Registers used:
 19903 ;;		None
 19904 ;; Tracked objects:
 19905 ;;		On entry : 0/0
 19906 ;;		On exit  : 0/0
 19907 ;;		Unchanged: 0/0
 19908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19912 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19913 ;;Total ram usage:        0 bytes
 19914 ;; Hardware stack levels used:    1
 19915 ;; Hardware stack levels required when called:    7
 19916 ;; This function calls:
 19917 ;;		Nothing
 19918 ;; This function is called by:
 19919 ;;		_init
 19920 ;; This function uses a non-reentrant model
 19921 ;;
 19922                           
 19923                           	psect	text94
 19924  0167AC                     __ptext94:
 19925                           	opt stack 0
 19926  0167AC                     _ISR_Enable:
 19927                           	opt stack 22
 19928                           
 19929                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19930                           
 19931                           ;incstack = 0
 19932  0167AC  8CF2               	bsf	intcon,6,c	;volatile
 19933                           
 19934                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19935  0167AE  8EF2               	bsf	intcon,7,c	;volatile
 19936                           
 19937                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19938  0167B0  88F2               	bsf	intcon,4,c	;volatile
 19939                           
 19940                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19941  0167B2  92F2               	bcf	intcon,1,c	;volatile
 19942  0167B4  0012               	return		;funcret
 19943  0167B6                     __end_of_ISR_Enable:
 19944                           	opt stack 0
 19945                           tosu	equ	0xFFF
 19946                           tosh	equ	0xFFE
 19947                           tosl	equ	0xFFD
 19948                           pclath	equ	0xFFA
 19949                           tblptru	equ	0xFF8
 19950                           tblptrh	equ	0xFF7
 19951                           tblptrl	equ	0xFF6
 19952                           tablat	equ	0xFF5
 19953                           prodh	equ	0xFF4
 19954                           prodl	equ	0xFF3
 19955                           intcon	equ	0xFF2
 19956                           postinc0	equ	0xFEE
 19957                           wreg	equ	0xFE8
 19958                           indf1	equ	0xFE7
 19959                           postdec1	equ	0xFE5
 19960                           fsr1h	equ	0xFE2
 19961                           fsr1l	equ	0xFE1
 19962                           indf2	equ	0xFDF
 19963                           postinc2	equ	0xFDE
 19964                           postdec2	equ	0xFDD
 19965                           plusw2	equ	0xFDB
 19966                           fsr2h	equ	0xFDA
 19967                           fsr2l	equ	0xFD9
 19968                           status	equ	0xFD8
 19969                           
 19970 ;; *************** function _HMI_Init *****************
 19971 ;; Defined at:
 19972 ;;		line 104 in file "HMI.c"
 19973 ;; Parameters:    Size  Location     Type
 19974 ;;		None
 19975 ;; Auto vars:     Size  Location     Type
 19976 ;;  in              2   59[BANK0 ] unsigned short 
 19977 ;; Return value:  Size  Location     Type
 19978 ;;                  1    wreg      void 
 19979 ;; Registers used:
 19980 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19981 ;; Tracked objects:
 19982 ;;		On entry : 0/0
 19983 ;;		On exit  : 0/0
 19984 ;;		Unchanged: 0/0
 19985 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19986 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19987 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19988 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19989 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19990 ;;Total ram usage:        2 bytes
 19991 ;; Hardware stack levels used:    1
 19992 ;; Hardware stack levels required when called:   16
 19993 ;; This function calls:
 19994 ;;		_Button_Init
 19995 ;;		_SPI_Init
 19996 ;;		_SPI_MinSpeed
 19997 ;; This function is called by:
 19998 ;;		_init
 19999 ;; This function uses a non-reentrant model
 20000 ;;
 20001                           
 20002                           	psect	text95
 20003  0121A0                     __ptext95:
 20004                           	opt stack 0
 20005  0121A0                     _HMI_Init:
 20006                           	opt stack 13
 20007                           
 20008                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 20009                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 20010                           
 20011                           ;incstack = 0
 20012  0121A0  0E6E               	movlw	low (_HMIBoard+48)
 20013  0121A2  0101               	movlb	1	; () banked
 20014  0121A4  6F00               	movwf	Button_Init@pInput& (0+255),b
 20015  0121A6  0E03               	movlw	high (_HMIBoard+48)
 20016  0121A8  0101               	movlb	1	; () banked
 20017  0121AA  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20018  0121AC  0E00               	movlw	0
 20019  0121AE  0101               	movlb	1	; () banked
 20020  0121B0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20021  0121B2  0E02               	movlw	2
 20022  0121B4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20023  0121B6  0EE6               	movlw	low _HMI_InitButtons
 20024  0121B8  0101               	movlb	1	; () banked
 20025  0121BA  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20026  0121BC  0E67               	movlw	high _HMI_InitButtons
 20027  0121BE  0101               	movlb	1	; () banked
 20028  0121C0  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20029  0121C2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20030  0121C4  0101               	movlb	1	; () banked
 20031  0121C6  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20032  0121C8  0E1A               	movlw	low _HMI_DIPSwitch
 20033  0121CA  0101               	movlb	1	; () banked
 20034  0121CC  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20035  0121CE  0E66               	movlw	high _HMI_DIPSwitch
 20036  0121D0  0101               	movlb	1	; () banked
 20037  0121D2  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20038  0121D4  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 20039  0121D6  0101               	movlb	1	; () banked
 20040  0121D8  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20041  0121DA  0E04               	movlw	low _Event_NULL
 20042  0121DC  0101               	movlb	1	; () banked
 20043  0121DE  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20044  0121E0  0E14               	movlw	high _Event_NULL
 20045  0121E2  0101               	movlb	1	; () banked
 20046  0121E4  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20047  0121E6  0E00               	movlw	low (_Event_NULL shr (0+16))
 20048  0121E8  0101               	movlb	1	; () banked
 20049  0121EA  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20050  0121EC  EC30  F09F         	call	_Button_Init	;wreg free
 20051                           
 20052                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 20053                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 20054  0121F0  0E50               	movlw	low (_HMIBoard+18)
 20055  0121F2  0101               	movlb	1	; () banked
 20056  0121F4  6F00               	movwf	Button_Init@pInput& (0+255),b
 20057  0121F6  0E03               	movlw	high (_HMIBoard+18)
 20058  0121F8  0101               	movlb	1	; () banked
 20059  0121FA  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20060  0121FC  0E00               	movlw	0
 20061  0121FE  0101               	movlb	1	; () banked
 20062  012200  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20063  012202  0E02               	movlw	2
 20064  012204  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20065  012206  0EE6               	movlw	low _HMI_InitButtons
 20066  012208  0101               	movlb	1	; () banked
 20067  01220A  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20068  01220C  0E67               	movlw	high _HMI_InitButtons
 20069  01220E  0101               	movlb	1	; () banked
 20070  012210  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20071  012212  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20072  012214  0101               	movlb	1	; () banked
 20073  012216  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20074  012218  0E7A               	movlw	low _HMI_LeftSwitch
 20075  01221A  0101               	movlb	1	; () banked
 20076  01221C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20077  01221E  0E66               	movlw	high _HMI_LeftSwitch
 20078  012220  0101               	movlb	1	; () banked
 20079  012222  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20080  012224  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 20081  012226  0101               	movlb	1	; () banked
 20082  012228  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20083  01222A  0E04               	movlw	low _Event_NULL
 20084  01222C  0101               	movlb	1	; () banked
 20085  01222E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20086  012230  0E14               	movlw	high _Event_NULL
 20087  012232  0101               	movlb	1	; () banked
 20088  012234  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20089  012236  0E00               	movlw	low (_Event_NULL shr (0+16))
 20090  012238  0101               	movlb	1	; () banked
 20091  01223A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20092  01223C  EC30  F09F         	call	_Button_Init	;wreg free
 20093                           
 20094                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 20095                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 20096  012240  0E46               	movlw	low (_HMIBoard+8)
 20097  012242  0101               	movlb	1	; () banked
 20098  012244  6F00               	movwf	Button_Init@pInput& (0+255),b
 20099  012246  0E03               	movlw	high (_HMIBoard+8)
 20100  012248  0101               	movlb	1	; () banked
 20101  01224A  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20102  01224C  0E00               	movlw	0
 20103  01224E  0101               	movlb	1	; () banked
 20104  012250  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20105  012252  0E02               	movlw	2
 20106  012254  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20107  012256  0EE6               	movlw	low _HMI_InitButtons
 20108  012258  0101               	movlb	1	; () banked
 20109  01225A  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20110  01225C  0E67               	movlw	high _HMI_InitButtons
 20111  01225E  0101               	movlb	1	; () banked
 20112  012260  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20113  012262  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20114  012264  0101               	movlb	1	; () banked
 20115  012266  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20116  012268  0E62               	movlw	low _HMI_RightSwitch
 20117  01226A  0101               	movlb	1	; () banked
 20118  01226C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20119  01226E  0E66               	movlw	high _HMI_RightSwitch
 20120  012270  0101               	movlb	1	; () banked
 20121  012272  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20122  012274  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 20123  012276  0101               	movlb	1	; () banked
 20124  012278  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20125  01227A  0E04               	movlw	low _Event_NULL
 20126  01227C  0101               	movlb	1	; () banked
 20127  01227E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20128  012280  0E14               	movlw	high _Event_NULL
 20129  012282  0101               	movlb	1	; () banked
 20130  012284  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20131  012286  0E00               	movlw	low (_Event_NULL shr (0+16))
 20132  012288  0101               	movlb	1	; () banked
 20133  01228A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20134  01228C  EC30  F09F         	call	_Button_Init	;wreg free
 20135                           
 20136                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 20137                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 20138  012290  0E5A               	movlw	low (_HMIBoard+28)
 20139  012292  0101               	movlb	1	; () banked
 20140  012294  6F00               	movwf	Button_Init@pInput& (0+255),b
 20141  012296  0E03               	movlw	high (_HMIBoard+28)
 20142  012298  0101               	movlb	1	; () banked
 20143  01229A  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20144  01229C  0E00               	movlw	0
 20145  01229E  0101               	movlb	1	; () banked
 20146  0122A0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20147  0122A2  0E02               	movlw	2
 20148  0122A4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20149  0122A6  0EE6               	movlw	low _HMI_InitButtons
 20150  0122A8  0101               	movlb	1	; () banked
 20151  0122AA  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20152  0122AC  0E67               	movlw	high _HMI_InitButtons
 20153  0122AE  0101               	movlb	1	; () banked
 20154  0122B0  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20155  0122B2  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20156  0122B4  0101               	movlb	1	; () banked
 20157  0122B6  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20158  0122B8  0E4A               	movlw	low _HMI_UpSwitch
 20159  0122BA  0101               	movlb	1	; () banked
 20160  0122BC  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20161  0122BE  0E66               	movlw	high _HMI_UpSwitch
 20162  0122C0  0101               	movlb	1	; () banked
 20163  0122C2  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20164  0122C4  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 20165  0122C6  0101               	movlb	1	; () banked
 20166  0122C8  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20167  0122CA  0E04               	movlw	low _Event_NULL
 20168  0122CC  0101               	movlb	1	; () banked
 20169  0122CE  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20170  0122D0  0E14               	movlw	high _Event_NULL
 20171  0122D2  0101               	movlb	1	; () banked
 20172  0122D4  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20173  0122D6  0E00               	movlw	low (_Event_NULL shr (0+16))
 20174  0122D8  0101               	movlb	1	; () banked
 20175  0122DA  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20176  0122DC  EC30  F09F         	call	_Button_Init	;wreg free
 20177                           
 20178                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 20179                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 20180  0122E0  0E64               	movlw	low (_HMIBoard+38)
 20181  0122E2  0101               	movlb	1	; () banked
 20182  0122E4  6F00               	movwf	Button_Init@pInput& (0+255),b
 20183  0122E6  0E03               	movlw	high (_HMIBoard+38)
 20184  0122E8  0101               	movlb	1	; () banked
 20185  0122EA  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20186  0122EC  0E00               	movlw	0
 20187  0122EE  0101               	movlb	1	; () banked
 20188  0122F0  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20189  0122F2  0E02               	movlw	2
 20190  0122F4  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20191  0122F6  0EE6               	movlw	low _HMI_InitButtons
 20192  0122F8  0101               	movlb	1	; () banked
 20193  0122FA  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20194  0122FC  0E67               	movlw	high _HMI_InitButtons
 20195  0122FE  0101               	movlb	1	; () banked
 20196  012300  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20197  012302  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20198  012304  0101               	movlb	1	; () banked
 20199  012306  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20200  012308  0E32               	movlw	low _HMI_DownSwitch
 20201  01230A  0101               	movlb	1	; () banked
 20202  01230C  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20203  01230E  0E66               	movlw	high _HMI_DownSwitch
 20204  012310  0101               	movlb	1	; () banked
 20205  012312  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20206  012314  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 20207  012316  0101               	movlb	1	; () banked
 20208  012318  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20209  01231A  0E04               	movlw	low _Event_NULL
 20210  01231C  0101               	movlb	1	; () banked
 20211  01231E  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20212  012320  0E14               	movlw	high _Event_NULL
 20213  012322  0101               	movlb	1	; () banked
 20214  012324  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20215  012326  0E00               	movlw	low (_Event_NULL shr (0+16))
 20216  012328  0101               	movlb	1	; () banked
 20217  01232A  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20218  01232C  EC30  F09F         	call	_Button_Init	;wreg free
 20219                           
 20220                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20221  012330  0EA0               	movlw	160
 20222  012332  0100               	movlb	0	; () banked
 20223  012334  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20224  012336  0E86               	movlw	134
 20225  012338  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20226  01233A  0E01               	movlw	1
 20227  01233C  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20228  01233E  0E00               	movlw	0
 20229  012340  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20230  012342  0E00               	movlw	0
 20231  012344  0100               	movlb	0	; () banked
 20232  012346  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20233  012348  0E02               	movlw	2
 20234  01234A  0100               	movlb	0	; () banked
 20235  01234C  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20236  01234E  EC90  F084         	call	_SPI_Init	;wreg free
 20237                           
 20238                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20239  012352  0E78               	movlw	low _SPI1
 20240  012354  0100               	movlb	0	; () banked
 20241  012356  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20242  012358  0E03               	movlw	high _SPI1
 20243  01235A  0100               	movlb	0	; () banked
 20244  01235C  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20245  01235E  EC5A  F0AA         	call	_SPI_MinSpeed	;wreg free
 20246                           
 20247                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20248  012362  0E00               	movlw	0
 20249  012364  0100               	movlb	0	; () banked
 20250  012366  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20251  012368  0E00               	movlw	0
 20252  01236A  6FF5               	movwf	HMI_Init@in& (0+255),b
 20253  01236C                     l14460:
 20254                           
 20255                           ; BSR set to: 0
 20256  01236C  0100               	movlb	0	; () banked
 20257  01236E  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20258  012370  E113               	bnz	l1153
 20259  012372  0E08               	movlw	8
 20260  012374  0100               	movlb	0	; () banked
 20261  012376  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20262  012378  B0D8               	btfsc	status,0,c
 20263  01237A  0012               	return	
 20264                           
 20265                           ; BSR set to: 0
 20266                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20267                           
 20268                           ; BSR set to: 0
 20269                           
 20270                           ; BSR set to: 0
 20271  01237C  0E3E               	movlw	low _HMIBoard
 20272  01237E  0100               	movlb	0	; () banked
 20273  012380  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20274  012382  6ED9               	movwf	fsr2l,c
 20275  012384  0E03               	movlw	high _HMIBoard
 20276  012386  0100               	movlb	0	; () banked
 20277  012388  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20278  01238A  6EDA               	movwf	fsr2h,c
 20279  01238C  0E00               	movlw	0
 20280  01238E  6EDF               	movwf	indf2,c
 20281                           
 20282                           ; BSR set to: 0
 20283  012390  0100               	movlb	0	; () banked
 20284  012392  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20285  012394  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20286  012396  D7EA               	goto	l14460
 20287  012398                     l1153:
 20288                           
 20289                           ; BSR set to: 0
 20290  012398  0012               	return		;funcret
 20291  01239A                     __end_of_HMI_Init:
 20292                           	opt stack 0
 20293                           tosu	equ	0xFFF
 20294                           tosh	equ	0xFFE
 20295                           tosl	equ	0xFFD
 20296                           pclath	equ	0xFFA
 20297                           tblptru	equ	0xFF8
 20298                           tblptrh	equ	0xFF7
 20299                           tblptrl	equ	0xFF6
 20300                           tablat	equ	0xFF5
 20301                           prodh	equ	0xFF4
 20302                           prodl	equ	0xFF3
 20303                           intcon	equ	0xFF2
 20304                           postinc0	equ	0xFEE
 20305                           wreg	equ	0xFE8
 20306                           indf1	equ	0xFE7
 20307                           postdec1	equ	0xFE5
 20308                           fsr1h	equ	0xFE2
 20309                           fsr1l	equ	0xFE1
 20310                           indf2	equ	0xFDF
 20311                           postinc2	equ	0xFDE
 20312                           postdec2	equ	0xFDD
 20313                           plusw2	equ	0xFDB
 20314                           fsr2h	equ	0xFDA
 20315                           fsr2l	equ	0xFD9
 20316                           status	equ	0xFD8
 20317                           
 20318 ;; *************** function _SPI_MinSpeed *****************
 20319 ;; Defined at:
 20320 ;;		line 190 in file "Library/SPI.c"
 20321 ;; Parameters:    Size  Location     Type
 20322 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20323 ;;		 -> SPI1(11), 
 20324 ;; Auto vars:     Size  Location     Type
 20325 ;;		None
 20326 ;; Return value:  Size  Location     Type
 20327 ;;                  1    wreg      void 
 20328 ;; Registers used:
 20329 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20330 ;; Tracked objects:
 20331 ;;		On entry : 0/0
 20332 ;;		On exit  : 0/0
 20333 ;;		Unchanged: 0/0
 20334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20335 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20338 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20339 ;;Total ram usage:        2 bytes
 20340 ;; Hardware stack levels used:    1
 20341 ;; Hardware stack levels required when called:    9
 20342 ;; This function calls:
 20343 ;;		_Byte_SetBit
 20344 ;;		_Byte_SetQuad
 20345 ;; This function is called by:
 20346 ;;		_HMI_Init
 20347 ;; This function uses a non-reentrant model
 20348 ;;
 20349                           
 20350                           	psect	text96
 20351  0154B4                     __ptext96:
 20352                           	opt stack 0
 20353  0154B4                     _SPI_MinSpeed:
 20354                           	opt stack 19
 20355                           
 20356                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20357                           
 20358                           ; BSR set to: 0
 20359                           ;incstack = 0
 20360  0154B4  0100               	movlb	0	; () banked
 20361  0154B6  EE20 F006          	lfsr	2,6
 20362  0154BA  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20363  0154BC  26D9               	addwf	fsr2l,f,c
 20364  0154BE  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20365  0154C0  22DA               	addwfc	fsr2h,f,c
 20366  0154C2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20367  0154C6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20368  0154CA  0E05               	movlw	5
 20369  0154CC  0100               	movlb	0	; () banked
 20370  0154CE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20371  0154D0  0E00               	movlw	0
 20372  0154D2  0100               	movlb	0	; () banked
 20373  0154D4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20374  0154D6  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20375                           
 20376                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20377  0154DA  0100               	movlb	0	; () banked
 20378  0154DC  EE20 F006          	lfsr	2,6
 20379  0154E0  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20380  0154E2  26D9               	addwf	fsr2l,f,c
 20381  0154E4  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20382  0154E6  22DA               	addwfc	fsr2h,f,c
 20383  0154E8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20384  0154EC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20385  0154F0  0E00               	movlw	0
 20386  0154F2  0100               	movlb	0	; () banked
 20387  0154F4  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20388  0154F6  0E02               	movlw	2
 20389  0154F8  0100               	movlb	0	; () banked
 20390  0154FA  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20391  0154FC  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 20392                           
 20393                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20394  015500  0100               	movlb	0	; () banked
 20395  015502  EE20 F006          	lfsr	2,6
 20396  015506  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20397  015508  26D9               	addwf	fsr2l,f,c
 20398  01550A  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20399  01550C  22DA               	addwfc	fsr2h,f,c
 20400  01550E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20401  015512  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20402  015516  0E05               	movlw	5
 20403  015518  0100               	movlb	0	; () banked
 20404  01551A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20405  01551C  0E01               	movlw	1
 20406  01551E  0100               	movlb	0	; () banked
 20407  015520  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20408  015522  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20409  015526  0012               	return		;funcret
 20410  015528                     __end_of_SPI_MinSpeed:
 20411                           	opt stack 0
 20412                           tosu	equ	0xFFF
 20413                           tosh	equ	0xFFE
 20414                           tosl	equ	0xFFD
 20415                           pclath	equ	0xFFA
 20416                           tblptru	equ	0xFF8
 20417                           tblptrh	equ	0xFF7
 20418                           tblptrl	equ	0xFF6
 20419                           tablat	equ	0xFF5
 20420                           prodh	equ	0xFF4
 20421                           prodl	equ	0xFF3
 20422                           intcon	equ	0xFF2
 20423                           postinc0	equ	0xFEE
 20424                           wreg	equ	0xFE8
 20425                           indf1	equ	0xFE7
 20426                           postdec1	equ	0xFE5
 20427                           fsr1h	equ	0xFE2
 20428                           fsr1l	equ	0xFE1
 20429                           indf2	equ	0xFDF
 20430                           postinc2	equ	0xFDE
 20431                           postdec2	equ	0xFDD
 20432                           plusw2	equ	0xFDB
 20433                           fsr2h	equ	0xFDA
 20434                           fsr2l	equ	0xFD9
 20435                           status	equ	0xFD8
 20436                           
 20437 ;; *************** function _SPI_Init *****************
 20438 ;; Defined at:
 20439 ;;		line 12 in file "Library/SPI.c"
 20440 ;; Parameters:    Size  Location     Type
 20441 ;;  pClock          4   45[BANK0 ] unsigned long 
 20442 ;;  pChannel        1   49[BANK0 ] enum E6744
 20443 ;;  pMode           1   50[BANK0 ] enum E6748
 20444 ;; Auto vars:     Size  Location     Type
 20445 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20446 ;;		 -> SPI1(11), SPI2(11), 
 20447 ;; Return value:  Size  Location     Type
 20448 ;;                  1    wreg      void 
 20449 ;; Registers used:
 20450 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20451 ;; Tracked objects:
 20452 ;;		On entry : 0/0
 20453 ;;		On exit  : 0/0
 20454 ;;		Unchanged: 0/0
 20455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20456 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20459 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20460 ;;Total ram usage:        8 bytes
 20461 ;; Hardware stack levels used:    1
 20462 ;; Hardware stack levels required when called:   12
 20463 ;; This function calls:
 20464 ;;		_Byte_SetBit
 20465 ;;		_Byte_SetQuad
 20466 ;;		_Port_SetPinType
 20467 ;;		_SPI_DCS
 20468 ;;		_SPI_DisableISR
 20469 ;;		_Timer2_Init
 20470 ;; This function is called by:
 20471 ;;		_Configure_GPIOs
 20472 ;;		_HMI_Init
 20473 ;; This function uses a non-reentrant model
 20474 ;;
 20475                           
 20476                           	psect	text97
 20477  010920                     __ptext97:
 20478                           	opt stack 0
 20479  010920                     _SPI_Init:
 20480                           	opt stack 15
 20481                           
 20482                           ;SPI.c: 14: SPIPtr pInput;
 20483                           ;SPI.c: 16: switch (pChannel)
 20484                           
 20485                           ;incstack = 0
 20486  010920  D00C               	goto	l597
 20487  010922                     
 20488                           ;SPI.c: 19: pInput = &SPI1;
 20489  010922  0E78               	movlw	low _SPI1
 20490  010924  0100               	movlb	0	; () banked
 20491  010926  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20492  010928  0E03               	movlw	high _SPI1
 20493  01092A  D004               	goto	L13
 20494  01092C                     
 20495                           ; BSR set to: 0
 20496                           ;SPI.c: 22: pInput = &SPI2;
 20497                           
 20498                           ; BSR set to: 0
 20499  01092C  0E83               	movlw	low _SPI2
 20500  01092E  0100               	movlb	0	; () banked
 20501  010930  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20502  010932  0E03               	movlw	high _SPI2
 20503  010934                     L13:
 20504  010934  0100               	movlb	0	; () banked
 20505  010936  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20506                           
 20507                           ; BSR set to: 0
 20508                           ;SPI.c: 24: };
 20509                           
 20510                           ;SPI.c: 23: break;
 20511  010938  D008               	goto	l599
 20512  01093A                     l597:
 20513                           
 20514                           ; BSR set to: 0
 20515  01093A  0100               	movlb	0	; () banked
 20516  01093C  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20517                           
 20518                           ; Switch size 1, requested type "space"
 20519                           ; Number of cases is 2, Range of values is 0 to 1
 20520                           ; switch strategies available:
 20521                           ; Name         Instructions Cycles
 20522                           ; simple_byte            7     4 (average)
 20523                           ;	Chosen strategy is simple_byte
 20524  01093E  0A00               	xorlw	0	; case 0
 20525  010940  B4D8               	btfsc	status,2,c
 20526  010942  D7EF               	goto	l598
 20527  010944  0A01               	xorlw	1	; case 1
 20528  010946  B4D8               	btfsc	status,2,c
 20529  010948  D7F1               	goto	l600
 20530  01094A                     l599:
 20531                           
 20532                           ; BSR set to: 0
 20533                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20534                           
 20535                           ; BSR set to: 0
 20536  01094A  0100               	movlb	0	; () banked
 20537  01094C  EE20 F002          	lfsr	2,2
 20538  010950  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20539  010952  26D9               	addwf	fsr2l,f,c
 20540  010954  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20541  010956  22DA               	addwfc	fsr2h,f,c
 20542  010958  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20543                           
 20544                           ;SPI.c: 35: switch (pChannel)
 20545  01095C  D0B1               	goto	l601
 20546  01095E                     
 20547                           ; BSR set to: 0
 20548                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20549                           
 20550                           ; BSR set to: 0
 20551  01095E  0EA5               	movlw	low _PortC
 20552  010960  0100               	movlb	0	; () banked
 20553  010962  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20554  010964  0E00               	movlw	high _PortC
 20555  010966  0100               	movlb	0	; () banked
 20556  010968  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20557  01096A  0E02               	movlw	2
 20558  01096C  0100               	movlb	0	; () banked
 20559  01096E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20560  010970  0E03               	movlw	3
 20561  010972  0100               	movlb	0	; () banked
 20562  010974  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20563  010976  EC95  F093         	call	_Port_SetPinType	;wreg free
 20564                           
 20565                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20566  01097A  0EA5               	movlw	low _PortC
 20567  01097C  0100               	movlb	0	; () banked
 20568  01097E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20569  010980  0E00               	movlw	high _PortC
 20570  010982  0100               	movlb	0	; () banked
 20571  010984  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20572  010986  0E03               	movlw	3
 20573  010988  0100               	movlb	0	; () banked
 20574  01098A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20575  01098C  0E03               	movlw	3
 20576  01098E  0100               	movlb	0	; () banked
 20577  010990  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20578  010992  EC95  F093         	call	_Port_SetPinType	;wreg free
 20579                           
 20580                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20581  010996  0EA5               	movlw	low _PortC
 20582  010998  0100               	movlb	0	; () banked
 20583  01099A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20584  01099C  0E00               	movlw	high _PortC
 20585  01099E  0100               	movlb	0	; () banked
 20586  0109A0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20587  0109A2  0E05               	movlw	5
 20588  0109A4  0100               	movlb	0	; () banked
 20589  0109A6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20590  0109A8  0E03               	movlw	3
 20591  0109AA  0100               	movlb	0	; () banked
 20592  0109AC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20593  0109AE  EC95  F093         	call	_Port_SetPinType	;wreg free
 20594                           
 20595                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20596  0109B2  0EA5               	movlw	low _PortC
 20597  0109B4  0100               	movlb	0	; () banked
 20598  0109B6  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20599  0109B8  0E00               	movlw	high _PortC
 20600  0109BA  0100               	movlb	0	; () banked
 20601  0109BC  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20602  0109BE  0E04               	movlw	4
 20603  0109C0  0100               	movlb	0	; () banked
 20604  0109C2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20605  0109C4  0E00               	movlw	0
 20606  0109C6  0100               	movlb	0	; () banked
 20607  0109C8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20608  0109CA  EC95  F093         	call	_Port_SetPinType	;wreg free
 20609                           
 20610                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20611  0109CE  0100               	movlb	0	; () banked
 20612  0109D0  EE20 F003          	lfsr	2,3
 20613  0109D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20614  0109D6  26D9               	addwf	fsr2l,f,c
 20615  0109D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20616  0109DA  22DA               	addwfc	fsr2h,f,c
 20617  0109DC  0EC7               	movlw	199
 20618  0109DE  6EDE               	movwf	postinc2,c
 20619  0109E0  0E0F               	movlw	15
 20620  0109E2  6EDD               	movwf	postdec2,c
 20621                           
 20622                           ; BSR set to: 0
 20623                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20624  0109E4  0100               	movlb	0	; () banked
 20625  0109E6  EE20 F006          	lfsr	2,6
 20626  0109EA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20627  0109EC  26D9               	addwf	fsr2l,f,c
 20628  0109EE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20629  0109F0  22DA               	addwfc	fsr2h,f,c
 20630  0109F2  0EC6               	movlw	198
 20631  0109F4  6EDE               	movwf	postinc2,c
 20632  0109F6  0E0F               	movlw	15
 20633  0109F8  6EDD               	movwf	postdec2,c
 20634                           
 20635                           ; BSR set to: 0
 20636                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20637  0109FA  0100               	movlb	0	; () banked
 20638  0109FC  EE20 F009          	lfsr	2,9
 20639  010A00  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20640  010A02  26D9               	addwf	fsr2l,f,c
 20641  010A04  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20642  010A06  22DA               	addwfc	fsr2h,f,c
 20643  010A08  0EC9               	movlw	201
 20644  010A0A  D056               	goto	L14
 20645  010A0C                     
 20646                           ; BSR set to: 0
 20647                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20648                           
 20649                           ; BSR set to: 0
 20650  010A0C  0E9B               	movlw	low _PortD
 20651  010A0E  0100               	movlb	0	; () banked
 20652  010A10  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20653  010A12  0E00               	movlw	high _PortD
 20654  010A14  0100               	movlb	0	; () banked
 20655  010A16  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20656  010A18  0E07               	movlw	7
 20657  010A1A  0100               	movlb	0	; () banked
 20658  010A1C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20659  010A1E  0E03               	movlw	3
 20660  010A20  0100               	movlb	0	; () banked
 20661  010A22  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20662  010A24  EC95  F093         	call	_Port_SetPinType	;wreg free
 20663                           
 20664                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20665  010A28  0E9B               	movlw	low _PortD
 20666  010A2A  0100               	movlb	0	; () banked
 20667  010A2C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20668  010A2E  0E00               	movlw	high _PortD
 20669  010A30  0100               	movlb	0	; () banked
 20670  010A32  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20671  010A34  0E06               	movlw	6
 20672  010A36  0100               	movlb	0	; () banked
 20673  010A38  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20674  010A3A  0E03               	movlw	3
 20675  010A3C  0100               	movlb	0	; () banked
 20676  010A3E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20677  010A40  EC95  F093         	call	_Port_SetPinType	;wreg free
 20678                           
 20679                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20680  010A44  0E9B               	movlw	low _PortD
 20681  010A46  0100               	movlb	0	; () banked
 20682  010A48  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20683  010A4A  0E00               	movlw	high _PortD
 20684  010A4C  0100               	movlb	0	; () banked
 20685  010A4E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20686  010A50  0E04               	movlw	4
 20687  010A52  0100               	movlb	0	; () banked
 20688  010A54  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20689  010A56  0E03               	movlw	3
 20690  010A58  0100               	movlb	0	; () banked
 20691  010A5A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20692  010A5C  EC95  F093         	call	_Port_SetPinType	;wreg free
 20693                           
 20694                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20695  010A60  0E9B               	movlw	low _PortD
 20696  010A62  0100               	movlb	0	; () banked
 20697  010A64  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20698  010A66  0E00               	movlw	high _PortD
 20699  010A68  0100               	movlb	0	; () banked
 20700  010A6A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20701  010A6C  0E05               	movlw	5
 20702  010A6E  0100               	movlb	0	; () banked
 20703  010A70  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20704  010A72  0E00               	movlw	0
 20705  010A74  0100               	movlb	0	; () banked
 20706  010A76  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20707  010A78  EC95  F093         	call	_Port_SetPinType	;wreg free
 20708                           
 20709                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20710  010A7C  0100               	movlb	0	; () banked
 20711  010A7E  EE20 F003          	lfsr	2,3
 20712  010A82  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20713  010A84  26D9               	addwf	fsr2l,f,c
 20714  010A86  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20715  010A88  22DA               	addwfc	fsr2h,f,c
 20716  010A8A  0E6D               	movlw	109
 20717  010A8C  6EDE               	movwf	postinc2,c
 20718  010A8E  0E0F               	movlw	15
 20719  010A90  6EDD               	movwf	postdec2,c
 20720                           
 20721                           ; BSR set to: 0
 20722                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20723  010A92  0100               	movlb	0	; () banked
 20724  010A94  EE20 F006          	lfsr	2,6
 20725  010A98  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20726  010A9A  26D9               	addwf	fsr2l,f,c
 20727  010A9C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20728  010A9E  22DA               	addwfc	fsr2h,f,c
 20729  010AA0  0E6C               	movlw	108
 20730  010AA2  6EDE               	movwf	postinc2,c
 20731  010AA4  0E0F               	movlw	15
 20732  010AA6  6EDD               	movwf	postdec2,c
 20733                           
 20734                           ; BSR set to: 0
 20735                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20736  010AA8  0100               	movlb	0	; () banked
 20737  010AAA  EE20 F009          	lfsr	2,9
 20738  010AAE  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20739  010AB0  26D9               	addwf	fsr2l,f,c
 20740  010AB2  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20741  010AB4  22DA               	addwfc	fsr2h,f,c
 20742  010AB6  0E6F               	movlw	111
 20743  010AB8                     L14:
 20744  010AB8  6EDE               	movwf	postinc2,c
 20745  010ABA  0E0F               	movlw	15
 20746  010ABC  6EDD               	movwf	postdec2,c
 20747                           
 20748                           ;SPI.c: 68: break;
 20749  010ABE  D009               	goto	l603
 20750  010AC0                     l601:
 20751                           
 20752                           ; BSR set to: 0
 20753                           
 20754                           ; BSR set to: 0
 20755  010AC0  0100               	movlb	0	; () banked
 20756  010AC2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20757                           
 20758                           ; Switch size 1, requested type "space"
 20759                           ; Number of cases is 2, Range of values is 0 to 1
 20760                           ; switch strategies available:
 20761                           ; Name         Instructions Cycles
 20762                           ; simple_byte            7     4 (average)
 20763                           ;	Chosen strategy is simple_byte
 20764  010AC4  0A00               	xorlw	0	; case 0
 20765  010AC6  B4D8               	btfsc	status,2,c
 20766  010AC8  D74A               	goto	l602
 20767  010ACA  0A01               	xorlw	1	; case 1
 20768  010ACC  A4D8               	btfss	status,2,c
 20769  010ACE  0012               	return	
 20770  010AD0  D79D               	goto	l604
 20771  010AD2                     l603:
 20772                           
 20773                           ; BSR set to: 0
 20774                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20775                           
 20776                           ; BSR set to: 0
 20777  010AD2  0100               	movlb	0	; () banked
 20778  010AD4  EE20 F006          	lfsr	2,6
 20779  010AD8  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20780  010ADA  26D9               	addwf	fsr2l,f,c
 20781  010ADC  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20782  010ADE  22DA               	addwfc	fsr2h,f,c
 20783  010AE0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20784  010AE4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20785  010AE8  0E05               	movlw	5
 20786  010AEA  0100               	movlb	0	; () banked
 20787  010AEC  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20788  010AEE  0E00               	movlw	0
 20789  010AF0  0100               	movlb	0	; () banked
 20790  010AF2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20791  010AF4  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20792                           
 20793                           ;SPI.c: 77: switch(pMode)
 20794  010AF8  D09C               	goto	l607
 20795  010AFA                     
 20796                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20797  010AFA  0100               	movlb	0	; () banked
 20798  010AFC  EE20 F006          	lfsr	2,6
 20799  010B00  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20800  010B02  26D9               	addwf	fsr2l,f,c
 20801  010B04  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20802  010B06  22DA               	addwfc	fsr2h,f,c
 20803  010B08  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20804  010B0C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20805  010B10  0E04               	movlw	4
 20806  010B12  0100               	movlb	0	; () banked
 20807  010B14  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20808  010B16  0E00               	movlw	0
 20809  010B18  0100               	movlb	0	; () banked
 20810  010B1A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20811  010B1C  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20812                           
 20813                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20814  010B20  0100               	movlb	0	; () banked
 20815  010B22  EE20 F003          	lfsr	2,3
 20816  010B26  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20817  010B28  26D9               	addwf	fsr2l,f,c
 20818  010B2A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20819  010B2C  22DA               	addwfc	fsr2h,f,c
 20820  010B2E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20821  010B32  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20822  010B36  0E06               	movlw	6
 20823  010B38  0100               	movlb	0	; () banked
 20824  010B3A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20825  010B3C  0E00               	movlw	0
 20826  010B3E  0100               	movlb	0	; () banked
 20827  010B40  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20828  010B42  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20829                           
 20830                           ;SPI.c: 82: break;
 20831  010B46  D084               	goto	l609
 20832  010B48                     
 20833                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20834  010B48  0100               	movlb	0	; () banked
 20835  010B4A  EE20 F006          	lfsr	2,6
 20836  010B4E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20837  010B50  26D9               	addwf	fsr2l,f,c
 20838  010B52  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20839  010B54  22DA               	addwfc	fsr2h,f,c
 20840  010B56  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20841  010B5A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20842  010B5E  0E04               	movlw	4
 20843  010B60  0100               	movlb	0	; () banked
 20844  010B62  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20845  010B64  0E00               	movlw	0
 20846  010B66  0100               	movlb	0	; () banked
 20847  010B68  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20848  010B6A  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20849                           
 20850                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20851  010B6E  0100               	movlb	0	; () banked
 20852  010B70  EE20 F003          	lfsr	2,3
 20853  010B74  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20854  010B76  26D9               	addwf	fsr2l,f,c
 20855  010B78  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20856  010B7A  22DA               	addwfc	fsr2h,f,c
 20857  010B7C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20858  010B80  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20859  010B84  0E06               	movlw	6
 20860  010B86  0100               	movlb	0	; () banked
 20861  010B88  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20862  010B8A  0E01               	movlw	1
 20863  010B8C  0100               	movlb	0	; () banked
 20864  010B8E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20865  010B90  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20866                           
 20867                           ;SPI.c: 86: break;
 20868  010B94  D05D               	goto	l609
 20869  010B96                     
 20870                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20871  010B96  0100               	movlb	0	; () banked
 20872  010B98  EE20 F006          	lfsr	2,6
 20873  010B9C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20874  010B9E  26D9               	addwf	fsr2l,f,c
 20875  010BA0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20876  010BA2  22DA               	addwfc	fsr2h,f,c
 20877  010BA4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20878  010BA8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20879  010BAC  0E04               	movlw	4
 20880  010BAE  0100               	movlb	0	; () banked
 20881  010BB0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20882  010BB2  0E01               	movlw	1
 20883  010BB4  0100               	movlb	0	; () banked
 20884  010BB6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20885  010BB8  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20886                           
 20887                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20888  010BBC  0100               	movlb	0	; () banked
 20889  010BBE  EE20 F003          	lfsr	2,3
 20890  010BC2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20891  010BC4  26D9               	addwf	fsr2l,f,c
 20892  010BC6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20893  010BC8  22DA               	addwfc	fsr2h,f,c
 20894  010BCA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20895  010BCE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20896  010BD2  0E06               	movlw	6
 20897  010BD4  0100               	movlb	0	; () banked
 20898  010BD6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20899  010BD8  0E00               	movlw	0
 20900  010BDA  0100               	movlb	0	; () banked
 20901  010BDC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20902  010BDE  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20903                           
 20904                           ;SPI.c: 90: break;
 20905  010BE2  D036               	goto	l609
 20906  010BE4                     
 20907                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20908  010BE4  0100               	movlb	0	; () banked
 20909  010BE6  EE20 F006          	lfsr	2,6
 20910  010BEA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20911  010BEC  26D9               	addwf	fsr2l,f,c
 20912  010BEE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20913  010BF0  22DA               	addwfc	fsr2h,f,c
 20914  010BF2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20915  010BF6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20916  010BFA  0E04               	movlw	4
 20917  010BFC  0100               	movlb	0	; () banked
 20918  010BFE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20919  010C00  0E01               	movlw	1
 20920  010C02  0100               	movlb	0	; () banked
 20921  010C04  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20922  010C06  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20923                           
 20924                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20925  010C0A  0100               	movlb	0	; () banked
 20926  010C0C  EE20 F003          	lfsr	2,3
 20927  010C10  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20928  010C12  26D9               	addwf	fsr2l,f,c
 20929  010C14  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20930  010C16  22DA               	addwfc	fsr2h,f,c
 20931  010C18  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20932  010C1C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20933  010C20  0E06               	movlw	6
 20934  010C22  0100               	movlb	0	; () banked
 20935  010C24  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20936  010C26  0E01               	movlw	1
 20937  010C28  0100               	movlb	0	; () banked
 20938  010C2A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20939  010C2C  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20940                           
 20941                           ;SPI.c: 94: break;
 20942  010C30  D00F               	goto	l609
 20943  010C32                     l607:
 20944  010C32  0100               	movlb	0	; () banked
 20945  010C34  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20946                           
 20947                           ; Switch size 1, requested type "space"
 20948                           ; Number of cases is 4, Range of values is 0 to 3
 20949                           ; switch strategies available:
 20950                           ; Name         Instructions Cycles
 20951                           ; simple_byte           13     7 (average)
 20952                           ;	Chosen strategy is simple_byte
 20953  010C36  0A00               	xorlw	0	; case 0
 20954  010C38  B4D8               	btfsc	status,2,c
 20955  010C3A  D75F               	goto	l608
 20956  010C3C  0A01               	xorlw	1	; case 1
 20957  010C3E  B4D8               	btfsc	status,2,c
 20958  010C40  D783               	goto	l610
 20959  010C42  0A03               	xorlw	3	; case 2
 20960  010C44  B4D8               	btfsc	status,2,c
 20961  010C46  D7A7               	goto	l611
 20962  010C48  0A01               	xorlw	1	; case 3
 20963  010C4A  A4D8               	btfss	status,2,c
 20964  010C4C  0012               	return	
 20965  010C4E  D7CA               	goto	l612
 20966  010C50                     l609:
 20967                           
 20968                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20969                           
 20970                           ; BSR set to: 0
 20971  010C50  0100               	movlb	0	; () banked
 20972  010C52  EE20 F006          	lfsr	2,6
 20973  010C56  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20974  010C58  26D9               	addwf	fsr2l,f,c
 20975  010C5A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20976  010C5C  22DA               	addwfc	fsr2h,f,c
 20977  010C5E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20978  010C62  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20979  010C66  0E07               	movlw	7
 20980  010C68  0100               	movlb	0	; () banked
 20981  010C6A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20982  010C6C  0E00               	movlw	0
 20983  010C6E  0100               	movlb	0	; () banked
 20984  010C70  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20985  010C72  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 20986                           
 20987                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20988  010C76  0100               	movlb	0	; () banked
 20989  010C78  EE20 F006          	lfsr	2,6
 20990  010C7C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20991  010C7E  26D9               	addwf	fsr2l,f,c
 20992  010C80  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20993  010C82  22DA               	addwfc	fsr2h,f,c
 20994  010C84  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20995  010C88  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20996  010C8C  0E06               	movlw	6
 20997  010C8E  0100               	movlb	0	; () banked
 20998  010C90  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20999  010C92  0E00               	movlw	0
 21000  010C94  0100               	movlb	0	; () banked
 21001  010C96  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21002  010C98  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 21003                           
 21004                           ;SPI.c: 106: Timer2_Init(pClock);
 21005  010C9C  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 21006  010CA0  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 21007  010CA4  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 21008  010CA8  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 21009  010CAC  ECAC  F099         	call	_Timer2_Init	;wreg free
 21010                           
 21011                           ;SPI.c: 112: SPI_DisableISR(pInput);
 21012  010CB0  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 21013  010CB4  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 21014  010CB8  ECDC  F0B1         	call	_SPI_DisableISR	;wreg free
 21015                           
 21016                           ;SPI.c: 116: switch (pChannel)
 21017  010CBC  D004               	goto	l614
 21018  010CBE                     l615:
 21019                           
 21020                           ; BSR set to: 0
 21021  010CBE  869F               	bsf	3999,3,c	;volatile
 21022  010CC0  D00B               	goto	l616
 21023  010CC2                     l617:
 21024                           
 21025                           ; BSR set to: 0
 21026  010CC2  8EA5               	bsf	4005,7,c	;volatile
 21027  010CC4  D009               	goto	l616
 21028  010CC6                     l614:
 21029                           
 21030                           ; BSR set to: 0
 21031  010CC6  0100               	movlb	0	; () banked
 21032  010CC8  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 21033                           
 21034                           ; Switch size 1, requested type "space"
 21035                           ; Number of cases is 2, Range of values is 0 to 1
 21036                           ; switch strategies available:
 21037                           ; Name         Instructions Cycles
 21038                           ; simple_byte            7     4 (average)
 21039                           ;	Chosen strategy is simple_byte
 21040  010CCA  0A00               	xorlw	0	; case 0
 21041  010CCC  B4D8               	btfsc	status,2,c
 21042  010CCE  D7F7               	goto	l615
 21043  010CD0  0A01               	xorlw	1	; case 1
 21044  010CD2  A4D8               	btfss	status,2,c
 21045  010CD4  0012               	return	
 21046  010CD6  D7F5               	goto	l617
 21047  010CD8                     l616:
 21048                           
 21049                           ; BSR set to: 0
 21050                           ;SPI.c: 124: SPI_DCS(pInput);
 21051                           
 21052                           ; BSR set to: 0
 21053  010CD8  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 21054  010CDC  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 21055  010CE0  EC3C  F0B1         	call	_SPI_DCS	;wreg free
 21056                           
 21057                           ;SPI.c: 126: pInput->mBusy = 0;
 21058  010CE4  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 21059  010CE8  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 21060  010CEC  0E00               	movlw	0
 21061  010CEE  6EDF               	movwf	indf2,c
 21062                           
 21063                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 21064  010CF0  0100               	movlb	0	; () banked
 21065  010CF2  EE20 F006          	lfsr	2,6
 21066  010CF6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21067  010CF8  26D9               	addwf	fsr2l,f,c
 21068  010CFA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21069  010CFC  22DA               	addwfc	fsr2h,f,c
 21070  010CFE  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 21071  010D02  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 21072  010D06  0E00               	movlw	0
 21073  010D08  0100               	movlb	0	; () banked
 21074  010D0A  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21075  010D0C  0E03               	movlw	3
 21076  010D0E  0100               	movlb	0	; () banked
 21077  010D10  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 21078  010D12  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 21079                           
 21080                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21081  010D16  0100               	movlb	0	; () banked
 21082  010D18  EE20 F006          	lfsr	2,6
 21083  010D1C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 21084  010D1E  26D9               	addwf	fsr2l,f,c
 21085  010D20  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 21086  010D22  22DA               	addwfc	fsr2h,f,c
 21087  010D24  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21088  010D28  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21089  010D2C  0E05               	movlw	5
 21090  010D2E  0100               	movlb	0	; () banked
 21091  010D30  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21092  010D32  0E01               	movlw	1
 21093  010D34  0100               	movlb	0	; () banked
 21094  010D36  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21095  010D38  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 21096  010D3C  0012               	return		;funcret
 21097  010D3E                     __end_of_SPI_Init:
 21098                           	opt stack 0
 21099                           tosu	equ	0xFFF
 21100                           tosh	equ	0xFFE
 21101                           tosl	equ	0xFFD
 21102                           pclath	equ	0xFFA
 21103                           tblptru	equ	0xFF8
 21104                           tblptrh	equ	0xFF7
 21105                           tblptrl	equ	0xFF6
 21106                           tablat	equ	0xFF5
 21107                           prodh	equ	0xFF4
 21108                           prodl	equ	0xFF3
 21109                           intcon	equ	0xFF2
 21110                           postinc0	equ	0xFEE
 21111                           wreg	equ	0xFE8
 21112                           indf1	equ	0xFE7
 21113                           postdec1	equ	0xFE5
 21114                           fsr1h	equ	0xFE2
 21115                           fsr1l	equ	0xFE1
 21116                           indf2	equ	0xFDF
 21117                           postinc2	equ	0xFDE
 21118                           postdec2	equ	0xFDD
 21119                           plusw2	equ	0xFDB
 21120                           fsr2h	equ	0xFDA
 21121                           fsr2l	equ	0xFD9
 21122                           status	equ	0xFD8
 21123                           
 21124 ;; *************** function _Timer2_Init *****************
 21125 ;; Defined at:
 21126 ;;		line 10 in file "Library/Timer2.c"
 21127 ;; Parameters:    Size  Location     Type
 21128 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 21129 ;; Auto vars:     Size  Location     Type
 21130 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 21131 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 21132 ;;  RDIV            4   18[BANK0 ] unsigned long 
 21133 ;; Return value:  Size  Location     Type
 21134 ;;                  1    wreg      void 
 21135 ;; Registers used:
 21136 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21137 ;; Tracked objects:
 21138 ;;		On entry : 0/0
 21139 ;;		On exit  : 0/0
 21140 ;;		Unchanged: 0/0
 21141 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21142 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21143 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21144 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21145 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21146 ;;Total ram usage:       17 bytes
 21147 ;; Hardware stack levels used:    1
 21148 ;; Hardware stack levels required when called:    8
 21149 ;; This function calls:
 21150 ;;		_Timer2_Clear
 21151 ;;		___lldiv
 21152 ;; This function is called by:
 21153 ;;		_SPI_Init
 21154 ;; This function uses a non-reentrant model
 21155 ;;
 21156                           
 21157                           	psect	text98
 21158  013358                     __ptext98:
 21159                           	opt stack 0
 21160  013358                     _Timer2_Init:
 21161                           	opt stack 18
 21162                           
 21163                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 21164                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 21165                           ;Timer2.c: 14: static UINT8 PRE = 0;
 21166                           ;Timer2.c: 15: static UINT32 DIV = 0;
 21167                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 21168                           
 21169                           ;incstack = 0
 21170  013358  0E00               	movlw	0
 21171  01335A  0100               	movlb	0	; () banked
 21172  01335C  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 21173  01335E  0E6C               	movlw	108
 21174  013360  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 21175  013362  0EDC               	movlw	220
 21176  013364  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 21177  013366  0E02               	movlw	2
 21178  013368  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 21179                           
 21180                           ; BSR set to: 0
 21181                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 21182                           ;Timer2.c: 20: pFrequency *= 2;
 21183  01336A  0100               	movlb	0	; () banked
 21184  01336C  90D8               	bcf	status,0,c
 21185  01336E  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 21186  013370  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 21187  013372  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 21188  013374  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 21189                           
 21190                           ; BSR set to: 0
 21191                           ;Timer2.c: 23: pCPUClock /= 4;
 21192  013376  0E02               	movlw	2
 21193  013378  0100               	movlb	0	; () banked
 21194  01337A  6FCB               	movwf	??_Timer2_Init& (0+255),b
 21195  01337C                     u9625:
 21196  01337C  90D8               	bcf	status,0,c
 21197  01337E  0100               	movlb	0	; () banked
 21198  013380  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 21199  013382  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 21200  013384  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 21201  013386  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 21202  013388  0100               	movlb	0	; () banked
 21203  01338A  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 21204  01338C  D7F7               	goto	u9625
 21205                           
 21206                           ; BSR set to: 0
 21207                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 21208  01338E  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 21209  013392  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 21210  013396  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 21211  01339A  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 21212  01339E  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 21213  0133A2  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 21214  0133A6  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 21215  0133AA  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 21216  0133AE  EC84  F0A1         	call	___lldiv	;wreg free
 21217  0133B2  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 21218  0133B6  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21219  0133BA  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21220  0133BE  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21221                           
 21222                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21223  0133C2  D010               	goto	l1828
 21224  0133C4                     l12886:
 21225                           
 21226                           ;Timer2.c: 28: {
 21227                           ;Timer2.c: 29: RDIV = 0;
 21228  0133C4  0E00               	movlw	0
 21229  0133C6  0100               	movlb	0	; () banked
 21230  0133C8  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21231  0133CA  0E00               	movlw	0
 21232  0133CC  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21233  0133CE  0E00               	movlw	0
 21234  0133D0  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21235  0133D2  0E00               	movlw	0
 21236  0133D4  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21237                           
 21238                           ; BSR set to: 0
 21239                           ;Timer2.c: 30: INDEX ++;
 21240  0133D6  0100               	movlb	0	; () banked
 21241  0133D8  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 21242                           
 21243                           ; BSR set to: 0
 21244                           ;Timer2.c: 31: if (INDEX >= 3)
 21245  0133DA  0E02               	movlw	2
 21246  0133DC  0100               	movlb	0	; () banked
 21247  0133DE  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21248  0133E0  D001               	goto	l1828
 21249  0133E2  D026               	goto	u9640
 21250  0133E4                     l1828:
 21251                           
 21252                           ; BSR set to: 0
 21253                           
 21254                           ; BSR set to: 0
 21255  0133E4  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21256  0133E8  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21257  0133EC  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21258  0133F0  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21259  0133F4  0100               	movlb	0	; () banked
 21260  0133F6  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21261  0133F8  0D01               	mullw	1
 21262  0133FA  0E1C               	movlw	low Timer2_Init@PRESCALE
 21263  0133FC  24F3               	addwf	prodl,w,c
 21264  0133FE  6EF6               	movwf	tblptrl,c
 21265  013400  0EFD               	movlw	high Timer2_Init@PRESCALE
 21266  013402  20F4               	addwfc	prodh,w,c
 21267  013404  6EF7               	movwf	tblptrh,c
 21268  013406                     	if	1	;There are 3 active tblptr bytes
 21269  013406  6AF8               	clrf	tblptru,c
 21270  013408  0E00               	movlw	low (__mediumconst shr (0+16))
 21271  01340A  22F8               	addwfc	tblptru,f,c
 21272  01340C                     	endif
 21273  01340C  0008               	tblrd		*
 21274  01340E  50F5               	movf	tablat,w,c
 21275  013410  0100               	movlb	0	; () banked
 21276  013412  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21277  013414  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21278  013416  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21279  013418  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21280  01341A  EC84  F0A1         	call	___lldiv	;wreg free
 21281  01341E  0100               	movlb	0	; () banked
 21282  013420  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21283  013422  0100               	movlb	0	; () banked
 21284  013424  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21285  013426  E1CE               	bnz	l12886
 21286  013428  0100               	movlb	0	; () banked
 21287  01342A  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21288  01342C  B0D8               	btfsc	status,0,c
 21289  01342E  D7CA               	goto	l1827
 21290  013430                     u9640:
 21291                           
 21292                           ; BSR set to: 0
 21293                           ;Timer2.c: 33: }
 21294                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21295                           
 21296                           ; BSR set to: 0
 21297  013430  50CA               	movf	4042,w,c	;volatile
 21298  013432  0100               	movlb	0	; () banked
 21299  013434  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21300  013436  0BFC               	andlw	-4
 21301  013438  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21302  01343A  6ECA               	movwf	4042,c	;volatile
 21303                           
 21304                           ; BSR set to: 0
 21305                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21306  01343C  84CA               	bsf	4042,2,c	;volatile
 21307                           
 21308                           ; BSR set to: 0
 21309                           ;Timer2.c: 44: Timer2_Clear();
 21310  01343E  ECE4  F0B3         	call	_Timer2_Clear	;wreg free
 21311                           
 21312                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21313  013442  0100               	movlb	0	; () banked
 21314  013444  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21315  013446  0D01               	mullw	1
 21316  013448  0E1C               	movlw	low Timer2_Init@PRESCALE
 21317  01344A  24F3               	addwf	prodl,w,c
 21318  01344C  6EF6               	movwf	tblptrl,c
 21319  01344E  0EFD               	movlw	high Timer2_Init@PRESCALE
 21320  013450  20F4               	addwfc	prodh,w,c
 21321  013452  6EF7               	movwf	tblptrh,c
 21322  013454                     	if	1	;There are 3 active tblptr bytes
 21323  013454  6AF8               	clrf	tblptru,c
 21324  013456  0E00               	movlw	low (__mediumconst shr (0+16))
 21325  013458  22F8               	addwfc	tblptru,f,c
 21326  01345A                     	endif
 21327  01345A  0008               	tblrd		*
 21328  01345C  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 21329                           
 21330                           ; BSR set to: 0
 21331                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21332  013460  0EFF               	movlw	255
 21333  013462  0100               	movlb	0	; () banked
 21334  013464  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21335  013466  0103               	movlb	3	; () banked
 21336  013468  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21337  01346A  0EFF               	movlw	255
 21338  01346C  0100               	movlb	0	; () banked
 21339  01346E  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21340  013470  0103               	movlb	3	; () banked
 21341  013472  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21342  013474  0EFF               	movlw	255
 21343  013476  0100               	movlb	0	; () banked
 21344  013478  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21345  01347A  0103               	movlb	3	; () banked
 21346  01347C  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21347  01347E  0EFF               	movlw	255
 21348  013480  0100               	movlb	0	; () banked
 21349  013482  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21350  013484  0103               	movlb	3	; () banked
 21351  013486  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21352                           
 21353                           ; BSR set to: 3
 21354                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21355  013488  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21356  01348C  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21357  013490  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21358  013494  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21359  013498  0100               	movlb	0	; () banked
 21360  01349A  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 21361  01349C  0100               	movlb	0	; () banked
 21362  01349E  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21363  0134A0  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21364  0134A2  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21365  0134A4  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21366  0134A6  EC84  F0A1         	call	___lldiv	;wreg free
 21367  0134AA  0100               	movlb	0	; () banked
 21368  0134AC  51BA               	movf	?___lldiv& (0+255),w,b
 21369  0134AE  0100               	movlb	0	; () banked
 21370  0134B0  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 21371                           
 21372                           ; BSR set to: 0
 21373                           ;Timer2.c: 49: PR2 = INDEX;
 21374  0134B2  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21375                           
 21376                           ; BSR set to: 0
 21377  0134B6  0012               	return		;funcret
 21378  0134B8                     __end_of_Timer2_Init:
 21379                           	opt stack 0
 21380                           tosu	equ	0xFFF
 21381                           tosh	equ	0xFFE
 21382                           tosl	equ	0xFFD
 21383                           pclath	equ	0xFFA
 21384                           tblptru	equ	0xFF8
 21385                           tblptrh	equ	0xFF7
 21386                           tblptrl	equ	0xFF6
 21387                           tablat	equ	0xFF5
 21388                           prodh	equ	0xFF4
 21389                           prodl	equ	0xFF3
 21390                           intcon	equ	0xFF2
 21391                           postinc0	equ	0xFEE
 21392                           wreg	equ	0xFE8
 21393                           indf1	equ	0xFE7
 21394                           postdec1	equ	0xFE5
 21395                           fsr1h	equ	0xFE2
 21396                           fsr1l	equ	0xFE1
 21397                           indf2	equ	0xFDF
 21398                           postinc2	equ	0xFDE
 21399                           postdec2	equ	0xFDD
 21400                           plusw2	equ	0xFDB
 21401                           fsr2h	equ	0xFDA
 21402                           fsr2l	equ	0xFD9
 21403                           status	equ	0xFD8
 21404                           
 21405 ;; *************** function ___lldiv *****************
 21406 ;; Defined at:
 21407 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21408 ;; Parameters:    Size  Location     Type
 21409 ;;  dividend        4    0[BANK0 ] unsigned long 
 21410 ;;  divisor         4    4[BANK0 ] unsigned long 
 21411 ;; Auto vars:     Size  Location     Type
 21412 ;;  quotient        4    8[BANK0 ] unsigned long 
 21413 ;;  counter         1   12[BANK0 ] unsigned char 
 21414 ;; Return value:  Size  Location     Type
 21415 ;;                  4    0[BANK0 ] unsigned long 
 21416 ;; Registers used:
 21417 ;;		wreg, status,2, status,0
 21418 ;; Tracked objects:
 21419 ;;		On entry : 0/0
 21420 ;;		On exit  : 0/0
 21421 ;;		Unchanged: 0/0
 21422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21423 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21424 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21425 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21426 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21427 ;;Total ram usage:       13 bytes
 21428 ;; Hardware stack levels used:    1
 21429 ;; Hardware stack levels required when called:    7
 21430 ;; This function calls:
 21431 ;;		Nothing
 21432 ;; This function is called by:
 21433 ;;		_Timer0_Init
 21434 ;;		_Timer2_Init
 21435 ;;		_rand_between
 21436 ;;		_I2C_Init
 21437 ;; This function uses a non-reentrant model
 21438 ;;
 21439                           
 21440                           	psect	text99
 21441  014308                     __ptext99:
 21442                           	opt stack 0
 21443  014308                     ___lldiv:
 21444                           	opt stack 19
 21445                           
 21446                           ; BSR set to: 0
 21447                           ;incstack = 0
 21448  014308  0E00               	movlw	0
 21449  01430A  0100               	movlb	0	; () banked
 21450  01430C  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21451  01430E  0E00               	movlw	0
 21452  014310  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21453  014312  0E00               	movlw	0
 21454  014314  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21455  014316  0E00               	movlw	0
 21456  014318  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21457                           
 21458                           ; BSR set to: 0
 21459  01431A  0100               	movlb	0	; () banked
 21460  01431C  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21461  01431E  0100               	movlb	0	; () banked
 21462  014320  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21463  014322  0100               	movlb	0	; () banked
 21464  014324  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21465  014326  0100               	movlb	0	; () banked
 21466  014328  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21467  01432A  B4D8               	btfsc	status,2,c
 21468  01432C  D042               	goto	l2812
 21469                           
 21470                           ; BSR set to: 0
 21471  01432E  0E01               	movlw	1
 21472  014330  0100               	movlb	0	; () banked
 21473  014332  6FC6               	movwf	___lldiv@counter& (0+255),b
 21474  014334  D008               	goto	l2807
 21475  014336                     
 21476                           ; BSR set to: 0
 21477                           
 21478                           ; BSR set to: 0
 21479  014336  0100               	movlb	0	; () banked
 21480  014338  90D8               	bcf	status,0,c
 21481  01433A  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21482  01433C  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21483  01433E  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21484  014340  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21485  014342  0100               	movlb	0	; () banked
 21486  014344  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21487  014346                     l2807:
 21488                           
 21489                           ; BSR set to: 0
 21490                           
 21491                           ; BSR set to: 0
 21492  014346  0100               	movlb	0	; () banked
 21493  014348  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21494  01434A  D7F5               	goto	l2808
 21495  01434C                     u9500:
 21496                           
 21497                           ; BSR set to: 0
 21498                           
 21499                           ; BSR set to: 0
 21500                           
 21501                           ; BSR set to: 0
 21502  01434C  0100               	movlb	0	; () banked
 21503  01434E  90D8               	bcf	status,0,c
 21504  014350  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21505  014352  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21506  014354  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21507  014356  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21508                           
 21509                           ; BSR set to: 0
 21510  014358  0100               	movlb	0	; () banked
 21511  01435A  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21512  01435C  0100               	movlb	0	; () banked
 21513  01435E  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21514  014360  0100               	movlb	0	; () banked
 21515  014362  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21516  014364  0100               	movlb	0	; () banked
 21517  014366  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21518  014368  0100               	movlb	0	; () banked
 21519  01436A  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21520  01436C  0100               	movlb	0	; () banked
 21521  01436E  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21522  014370  0100               	movlb	0	; () banked
 21523  014372  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21524  014374  0100               	movlb	0	; () banked
 21525  014376  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21526  014378  A0D8               	btfss	status,0,c
 21527  01437A  D012               	goto	l2811
 21528                           
 21529                           ; BSR set to: 0
 21530  01437C  0100               	movlb	0	; () banked
 21531  01437E  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21532  014380  0100               	movlb	0	; () banked
 21533  014382  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21534  014384  0100               	movlb	0	; () banked
 21535  014386  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21536  014388  0100               	movlb	0	; () banked
 21537  01438A  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21538  01438C  0100               	movlb	0	; () banked
 21539  01438E  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21540  014390  0100               	movlb	0	; () banked
 21541  014392  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21542  014394  0100               	movlb	0	; () banked
 21543  014396  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21544  014398  0100               	movlb	0	; () banked
 21545  01439A  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21546                           
 21547                           ; BSR set to: 0
 21548  01439C  0100               	movlb	0	; () banked
 21549  01439E  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21550  0143A0                     l2811:
 21551                           
 21552                           ; BSR set to: 0
 21553                           
 21554                           ; BSR set to: 0
 21555  0143A0  0100               	movlb	0	; () banked
 21556  0143A2  90D8               	bcf	status,0,c
 21557  0143A4  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21558  0143A6  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21559  0143A8  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21560  0143AA  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21561                           
 21562                           ; BSR set to: 0
 21563  0143AC  0100               	movlb	0	; () banked
 21564  0143AE  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21565  0143B0  D7CD               	goto	u9500
 21566  0143B2                     l2812:
 21567                           
 21568                           ; BSR set to: 0
 21569                           
 21570                           ; BSR set to: 0
 21571  0143B2  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21572  0143B6  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21573  0143BA  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21574  0143BE  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21575                           
 21576                           ; BSR set to: 0
 21577  0143C2  0012               	return		;funcret
 21578  0143C4                     __end_of___lldiv:
 21579                           	opt stack 0
 21580                           tosu	equ	0xFFF
 21581                           tosh	equ	0xFFE
 21582                           tosl	equ	0xFFD
 21583                           pclath	equ	0xFFA
 21584                           tblptru	equ	0xFF8
 21585                           tblptrh	equ	0xFF7
 21586                           tblptrl	equ	0xFF6
 21587                           tablat	equ	0xFF5
 21588                           prodh	equ	0xFF4
 21589                           prodl	equ	0xFF3
 21590                           intcon	equ	0xFF2
 21591                           postinc0	equ	0xFEE
 21592                           wreg	equ	0xFE8
 21593                           indf1	equ	0xFE7
 21594                           postdec1	equ	0xFE5
 21595                           fsr1h	equ	0xFE2
 21596                           fsr1l	equ	0xFE1
 21597                           indf2	equ	0xFDF
 21598                           postinc2	equ	0xFDE
 21599                           postdec2	equ	0xFDD
 21600                           plusw2	equ	0xFDB
 21601                           fsr2h	equ	0xFDA
 21602                           fsr2l	equ	0xFD9
 21603                           status	equ	0xFD8
 21604                           
 21605 ;; *************** function _Timer2_Clear *****************
 21606 ;; Defined at:
 21607 ;;		line 3 in file "Library/Timer2.c"
 21608 ;; Parameters:    Size  Location     Type
 21609 ;;		None
 21610 ;; Auto vars:     Size  Location     Type
 21611 ;;		None
 21612 ;; Return value:  Size  Location     Type
 21613 ;;                  1    wreg      void 
 21614 ;; Registers used:
 21615 ;;		None
 21616 ;; Tracked objects:
 21617 ;;		On entry : 0/0
 21618 ;;		On exit  : 0/0
 21619 ;;		Unchanged: 0/0
 21620 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21621 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21622 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21623 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21624 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21625 ;;Total ram usage:        0 bytes
 21626 ;; Hardware stack levels used:    1
 21627 ;; Hardware stack levels required when called:    7
 21628 ;; This function calls:
 21629 ;;		Nothing
 21630 ;; This function is called by:
 21631 ;;		_Timer2_Init
 21632 ;; This function uses a non-reentrant model
 21633 ;;
 21634                           
 21635                           	psect	text100
 21636  0167C8                     __ptext100:
 21637                           	opt stack 0
 21638  0167C8                     _Timer2_Clear:
 21639                           	opt stack 18
 21640                           
 21641                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21642                           
 21643                           ; BSR set to: 0
 21644                           ;incstack = 0
 21645  0167C8  929E               	bcf	3998,1,c	;volatile
 21646                           
 21647                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21648  0167CA  929D               	bcf	3997,1,c	;volatile
 21649                           
 21650                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21651  0167CC  929F               	bcf	3999,1,c	;volatile
 21652  0167CE  0012               	return		;funcret
 21653  0167D0                     __end_of_Timer2_Clear:
 21654                           	opt stack 0
 21655                           tosu	equ	0xFFF
 21656                           tosh	equ	0xFFE
 21657                           tosl	equ	0xFFD
 21658                           pclath	equ	0xFFA
 21659                           tblptru	equ	0xFF8
 21660                           tblptrh	equ	0xFF7
 21661                           tblptrl	equ	0xFF6
 21662                           tablat	equ	0xFF5
 21663                           prodh	equ	0xFF4
 21664                           prodl	equ	0xFF3
 21665                           intcon	equ	0xFF2
 21666                           postinc0	equ	0xFEE
 21667                           wreg	equ	0xFE8
 21668                           indf1	equ	0xFE7
 21669                           postdec1	equ	0xFE5
 21670                           fsr1h	equ	0xFE2
 21671                           fsr1l	equ	0xFE1
 21672                           indf2	equ	0xFDF
 21673                           postinc2	equ	0xFDE
 21674                           postdec2	equ	0xFDD
 21675                           plusw2	equ	0xFDB
 21676                           fsr2h	equ	0xFDA
 21677                           fsr2l	equ	0xFD9
 21678                           status	equ	0xFD8
 21679                           
 21680 ;; *************** function _SPI_DisableISR *****************
 21681 ;; Defined at:
 21682 ;;		line 181 in file "Library/SPI.c"
 21683 ;; Parameters:    Size  Location     Type
 21684 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21685 ;;		 -> SPI1(11), SPI2(11), 
 21686 ;; Auto vars:     Size  Location     Type
 21687 ;;		None
 21688 ;; Return value:  Size  Location     Type
 21689 ;;                  1    wreg      void 
 21690 ;; Registers used:
 21691 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21692 ;; Tracked objects:
 21693 ;;		On entry : 0/0
 21694 ;;		On exit  : 0/0
 21695 ;;		Unchanged: 0/0
 21696 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21697 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21698 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21699 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21700 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21701 ;;Total ram usage:        2 bytes
 21702 ;; Hardware stack levels used:    1
 21703 ;; Hardware stack levels required when called:    7
 21704 ;; This function calls:
 21705 ;;		Nothing
 21706 ;; This function is called by:
 21707 ;;		_SPI_Init
 21708 ;; This function uses a non-reentrant model
 21709 ;;
 21710                           
 21711                           	psect	text101
 21712  0163B8                     __ptext101:
 21713                           	opt stack 0
 21714  0163B8                     _SPI_DisableISR:
 21715                           	opt stack 19
 21716                           
 21717                           ;SPI.c: 183: switch (pInput->mChannel)
 21718                           
 21719                           ;incstack = 0
 21720  0163B8  D004               	goto	l654
 21721  0163BA                     l655:
 21722                           
 21723                           ; BSR set to: 0
 21724  0163BA  969D               	bcf	3997,3,c	;volatile
 21725  0163BC  0012               	return	
 21726  0163BE                     l657:
 21727                           
 21728                           ; BSR set to: 0
 21729  0163BE  9EA3               	bcf	4003,7,c	;volatile
 21730                           
 21731                           ; BSR set to: 0
 21732                           ;SPI.c: 188: };
 21733                           
 21734                           ; BSR set to: 0
 21735                           
 21736                           ;SPI.c: 187: default: return;
 21737  0163C0  0012               	return	
 21738  0163C2                     l654:
 21739                           
 21740                           ; BSR set to: 0
 21741  0163C2  0100               	movlb	0	; () banked
 21742  0163C4  EE20 F002          	lfsr	2,2
 21743  0163C8  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21744  0163CA  26D9               	addwf	fsr2l,f,c
 21745  0163CC  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21746  0163CE  22DA               	addwfc	fsr2h,f,c
 21747  0163D0  50DF               	movf	indf2,w,c
 21748                           
 21749                           ; Switch size 1, requested type "space"
 21750                           ; Number of cases is 2, Range of values is 0 to 1
 21751                           ; switch strategies available:
 21752                           ; Name         Instructions Cycles
 21753                           ; simple_byte            7     4 (average)
 21754                           ;	Chosen strategy is simple_byte
 21755  0163D2  0A00               	xorlw	0	; case 0
 21756  0163D4  B4D8               	btfsc	status,2,c
 21757  0163D6  D7F1               	goto	l655
 21758  0163D8  0A01               	xorlw	1	; case 1
 21759  0163DA  A4D8               	btfss	status,2,c
 21760  0163DC  0012               	return	
 21761  0163DE  D7EF               	goto	l657
 21762  0163E0                     __end_of_SPI_DisableISR:
 21763                           	opt stack 0
 21764                           tosu	equ	0xFFF
 21765                           tosh	equ	0xFFE
 21766                           tosl	equ	0xFFD
 21767                           pclath	equ	0xFFA
 21768                           tblptru	equ	0xFF8
 21769                           tblptrh	equ	0xFF7
 21770                           tblptrl	equ	0xFF6
 21771                           tablat	equ	0xFF5
 21772                           prodh	equ	0xFF4
 21773                           prodl	equ	0xFF3
 21774                           intcon	equ	0xFF2
 21775                           postinc0	equ	0xFEE
 21776                           wreg	equ	0xFE8
 21777                           indf1	equ	0xFE7
 21778                           postdec1	equ	0xFE5
 21779                           fsr1h	equ	0xFE2
 21780                           fsr1l	equ	0xFE1
 21781                           indf2	equ	0xFDF
 21782                           postinc2	equ	0xFDE
 21783                           postdec2	equ	0xFDD
 21784                           plusw2	equ	0xFDB
 21785                           fsr2h	equ	0xFDA
 21786                           fsr2l	equ	0xFD9
 21787                           status	equ	0xFD8
 21788                           
 21789 ;; *************** function _SPI_DCS *****************
 21790 ;; Defined at:
 21791 ;;		line 219 in file "Library/SPI.c"
 21792 ;; Parameters:    Size  Location     Type
 21793 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21794 ;;		 -> SPI1(11), SPI2(11), 
 21795 ;; Auto vars:     Size  Location     Type
 21796 ;;		None
 21797 ;; Return value:  Size  Location     Type
 21798 ;;                  1    wreg      void 
 21799 ;; Registers used:
 21800 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21801 ;; Tracked objects:
 21802 ;;		On entry : 0/0
 21803 ;;		On exit  : 0/0
 21804 ;;		Unchanged: 0/0
 21805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21806 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21807 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21808 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21809 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21810 ;;Total ram usage:        2 bytes
 21811 ;; Hardware stack levels used:    1
 21812 ;; Hardware stack levels required when called:    7
 21813 ;; This function calls:
 21814 ;;		Nothing
 21815 ;; This function is called by:
 21816 ;;		_SPI_Init
 21817 ;; This function uses a non-reentrant model
 21818 ;;
 21819                           
 21820                           	psect	text102
 21821  016278                     __ptext102:
 21822                           	opt stack 0
 21823  016278                     _SPI_DCS:
 21824                           	opt stack 19
 21825                           
 21826                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21827                           
 21828                           ; BSR set to: 0
 21829                           ;incstack = 0
 21830  016278  0100               	movlb	0	; () banked
 21831  01627A  EE20 F002          	lfsr	2,2
 21832  01627E  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21833  016280  26D9               	addwf	fsr2l,f,c
 21834  016282  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21835  016284  22DA               	addwfc	fsr2h,f,c
 21836  016286  50DF               	movf	indf2,w,c
 21837  016288  A4D8               	btfss	status,2,c
 21838  01628A  D007               	goto	l673
 21839                           
 21840                           ; BSR set to: 0
 21841                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21842  01628C  C0A9  FFD9         	movff	_PortC+4,fsr2l
 21843  016290  C0AA  FFDA         	movff	_PortC+5,fsr2h
 21844  016294  0100               	movlb	0	; () banked
 21845  016296  84DF               	bsf	indf2,2,c
 21846  016298  0012               	return	
 21847  01629A                     l673:
 21848                           
 21849                           ; BSR set to: 0
 21850                           ;SPI.c: 223: else
 21851                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21852                           
 21853                           ; BSR set to: 0
 21854  01629A  C09F  FFD9         	movff	_PortD+4,fsr2l
 21855  01629E  C0A0  FFDA         	movff	_PortD+5,fsr2h
 21856  0162A2  0100               	movlb	0	; () banked
 21857  0162A4  8EDF               	bsf	indf2,7,c
 21858  0162A6  0012               	return	
 21859  0162A8                     __end_of_SPI_DCS:
 21860                           	opt stack 0
 21861                           tosu	equ	0xFFF
 21862                           tosh	equ	0xFFE
 21863                           tosl	equ	0xFFD
 21864                           pclath	equ	0xFFA
 21865                           tblptru	equ	0xFF8
 21866                           tblptrh	equ	0xFF7
 21867                           tblptrl	equ	0xFF6
 21868                           tablat	equ	0xFF5
 21869                           prodh	equ	0xFF4
 21870                           prodl	equ	0xFF3
 21871                           intcon	equ	0xFF2
 21872                           postinc0	equ	0xFEE
 21873                           wreg	equ	0xFE8
 21874                           indf1	equ	0xFE7
 21875                           postdec1	equ	0xFE5
 21876                           fsr1h	equ	0xFE2
 21877                           fsr1l	equ	0xFE1
 21878                           indf2	equ	0xFDF
 21879                           postinc2	equ	0xFDE
 21880                           postdec2	equ	0xFDD
 21881                           plusw2	equ	0xFDB
 21882                           fsr2h	equ	0xFDA
 21883                           fsr2l	equ	0xFD9
 21884                           status	equ	0xFD8
 21885                           
 21886 ;; *************** function _Button_Init *****************
 21887 ;; Defined at:
 21888 ;;		line 18 in file "Library/Button.c"
 21889 ;; Parameters:    Size  Location     Type
 21890 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21891 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21892 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21893 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21894 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21895 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21896 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21897 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21898 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21899 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21900 ;; Auto vars:     Size  Location     Type
 21901 ;;		None
 21902 ;; Return value:  Size  Location     Type
 21903 ;;                  1    wreg      void 
 21904 ;; Registers used:
 21905 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21906 ;; Tracked objects:
 21907 ;;		On entry : 0/0
 21908 ;;		On exit  : 0/0
 21909 ;;		Unchanged: 0/0
 21910 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21911 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21912 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21913 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21914 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21915 ;;Total ram usage:       13 bytes
 21916 ;; Hardware stack levels used:    1
 21917 ;; Hardware stack levels required when called:   15
 21918 ;; This function calls:
 21919 ;;		_HMI_InitButtons
 21920 ;;		_MXK_InitDIPSwitch
 21921 ;;		_MXK_InitTestButton
 21922 ;; This function is called by:
 21923 ;;		_HMI_Init
 21924 ;;		_FunctInitButton
 21925 ;; This function uses a non-reentrant model
 21926 ;;
 21927                           
 21928                           	psect	text103
 21929  013E60                     __ptext103:
 21930                           	opt stack 0
 21931  013E60                     _Button_Init:
 21932                           	opt stack 13
 21933                           
 21934                           ;Button.c: 21: if(pInput==(void*)0)
 21935                           
 21936                           ; BSR set to: 0
 21937                           ;incstack = 0
 21938  013E60  0101               	movlb	1	; () banked
 21939  013E62  5100               	movf	Button_Init@pInput& (0+255),w,b
 21940  013E64  0101               	movlb	1	; () banked
 21941  013E66  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21942  013E68  B4D8               	btfsc	status,2,c
 21943  013E6A  0012               	return	
 21944                           
 21945                           ; BSR set to: 1
 21946                           ;Button.c: 23: if(pInitIO==(void*)0)
 21947                           
 21948                           ; BSR set to: 1
 21949                           
 21950                           ; BSR set to: 1
 21951                           ;Button.c: 22: return;
 21952  013E6C  0101               	movlb	1	; () banked
 21953  013E6E  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21954  013E70  0101               	movlb	1	; () banked
 21955  013E72  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21956  013E74  0101               	movlb	1	; () banked
 21957  013E76  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21958  013E78  B4D8               	btfsc	status,2,c
 21959  013E7A  0012               	return	
 21960                           
 21961                           ; BSR set to: 1
 21962                           ;Button.c: 25: if(pGetState==(void*)0)
 21963                           
 21964                           ; BSR set to: 1
 21965                           
 21966                           ; BSR set to: 1
 21967                           ;Button.c: 24: return;
 21968  013E7C  0101               	movlb	1	; () banked
 21969  013E7E  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21970  013E80  0101               	movlb	1	; () banked
 21971  013E82  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21972  013E84  0101               	movlb	1	; () banked
 21973  013E86  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21974  013E88  B4D8               	btfsc	status,2,c
 21975  013E8A  0012               	return	
 21976                           
 21977                           ; BSR set to: 1
 21978                           ;Button.c: 27: if(pFunction==(void*)0)
 21979                           
 21980                           ; BSR set to: 1
 21981                           
 21982                           ; BSR set to: 1
 21983                           ;Button.c: 26: return;
 21984  013E8C  0101               	movlb	1	; () banked
 21985  013E8E  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21986  013E90  0101               	movlb	1	; () banked
 21987  013E92  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21988  013E94  0101               	movlb	1	; () banked
 21989  013E96  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21990  013E98  B4D8               	btfsc	status,2,c
 21991  013E9A  0012               	return	
 21992                           
 21993                           ; BSR set to: 1
 21994                           ;Button.c: 30: if(pThreshold == 0)
 21995                           
 21996                           ; BSR set to: 1
 21997                           
 21998                           ; BSR set to: 1
 21999                           ;Button.c: 28: return;
 22000  013E9C  0101               	movlb	1	; () banked
 22001  013E9E  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 22002  013EA0  0101               	movlb	1	; () banked
 22003  013EA2  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 22004  013EA4  A4D8               	btfss	status,2,c
 22005  013EA6  D005               	goto	l8
 22006                           
 22007                           ; BSR set to: 1
 22008                           ;Button.c: 31: pThreshold = 1;
 22009  013EA8  0E00               	movlw	0
 22010  013EAA  0101               	movlb	1	; () banked
 22011  013EAC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 22012  013EAE  0E01               	movlw	1
 22013  013EB0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 22014  013EB2                     l8:
 22015                           
 22016                           ; BSR set to: 1
 22017                           ;Button.c: 34: pInput->mState = 0;
 22018                           
 22019                           ; BSR set to: 1
 22020  013EB2  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 22021  013EB6  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 22022  013EBA  0E00               	movlw	0
 22023  013EBC  6EDF               	movwf	indf2,c
 22024                           
 22025                           ; BSR set to: 1
 22026                           ;Button.c: 35: pInput->mCount = 0;
 22027  013EBE  0101               	movlb	1	; () banked
 22028  013EC0  EE20 F001          	lfsr	2,1
 22029  013EC4  5100               	movf	Button_Init@pInput& (0+255),w,b
 22030  013EC6  26D9               	addwf	fsr2l,f,c
 22031  013EC8  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22032  013ECA  22DA               	addwfc	fsr2h,f,c
 22033  013ECC  0E00               	movlw	0
 22034  013ECE  6EDF               	movwf	indf2,c
 22035                           
 22036                           ; BSR set to: 1
 22037                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 22038  013ED0  0101               	movlb	1	; () banked
 22039  013ED2  EE20 F002          	lfsr	2,2
 22040  013ED6  5100               	movf	Button_Init@pInput& (0+255),w,b
 22041  013ED8  26D9               	addwf	fsr2l,f,c
 22042  013EDA  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22043  013EDC  22DA               	addwfc	fsr2h,f,c
 22044  013EDE  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 22045  013EE2  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 22046                           
 22047                           ; BSR set to: 1
 22048                           ;Button.c: 37: pInput->mFunction = pFunction;
 22049  013EE6  0101               	movlb	1	; () banked
 22050  013EE8  EE20 F004          	lfsr	2,4
 22051  013EEC  5100               	movf	Button_Init@pInput& (0+255),w,b
 22052  013EEE  26D9               	addwf	fsr2l,f,c
 22053  013EF0  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22054  013EF2  22DA               	addwfc	fsr2h,f,c
 22055  013EF4  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 22056  013EF8  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 22057  013EFC  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 22058                           
 22059                           ; BSR set to: 1
 22060                           ;Button.c: 38: pInput->mGetState = pGetState;
 22061  013F00  0101               	movlb	1	; () banked
 22062  013F02  EE20 F007          	lfsr	2,7
 22063  013F06  5100               	movf	Button_Init@pInput& (0+255),w,b
 22064  013F08  26D9               	addwf	fsr2l,f,c
 22065  013F0A  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 22066  013F0C  22DA               	addwfc	fsr2h,f,c
 22067  013F0E  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 22068  013F12  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 22069  013F16  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 22070                           
 22071                           ; BSR set to: 1
 22072                           ;Button.c: 41: pInitIO();
 22073  013F1A  D801               	call	u10788
 22074  013F1C  0012               	return	
 22075  013F1E                     u10788:
 22076  013F1E  0005               	push	
 22077  013F20  6EFA               	movwf	pclath,c
 22078  013F22  0101               	movlb	1	; () banked
 22079  013F24  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 22080  013F26  6EFD               	movwf	tosl,c
 22081  013F28  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 22082  013F2A  6EFE               	movwf	tosh,c
 22083  013F2C  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 22084  013F2E  6EFF               	movwf	tosu,c
 22085  013F30  50FA               	movf	pclath,w,c
 22086  013F32  0012               	return		;indir
 22087  013F34                     __end_of_Button_Init:
 22088                           	opt stack 0
 22089                           tosu	equ	0xFFF
 22090                           tosh	equ	0xFFE
 22091                           tosl	equ	0xFFD
 22092                           pclath	equ	0xFFA
 22093                           tblptru	equ	0xFF8
 22094                           tblptrh	equ	0xFF7
 22095                           tblptrl	equ	0xFF6
 22096                           tablat	equ	0xFF5
 22097                           prodh	equ	0xFF4
 22098                           prodl	equ	0xFF3
 22099                           intcon	equ	0xFF2
 22100                           postinc0	equ	0xFEE
 22101                           wreg	equ	0xFE8
 22102                           indf1	equ	0xFE7
 22103                           postdec1	equ	0xFE5
 22104                           fsr1h	equ	0xFE2
 22105                           fsr1l	equ	0xFE1
 22106                           indf2	equ	0xFDF
 22107                           postinc2	equ	0xFDE
 22108                           postdec2	equ	0xFDD
 22109                           plusw2	equ	0xFDB
 22110                           fsr2h	equ	0xFDA
 22111                           fsr2l	equ	0xFD9
 22112                           status	equ	0xFD8
 22113                           
 22114 ;; *************** function _MXK_InitDIPSwitch *****************
 22115 ;; Defined at:
 22116 ;;		line 20 in file "Library/MXK.c"
 22117 ;; Parameters:    Size  Location     Type
 22118 ;;		None
 22119 ;; Auto vars:     Size  Location     Type
 22120 ;;		None
 22121 ;; Return value:  Size  Location     Type
 22122 ;;                  1    wreg      void 
 22123 ;; Registers used:
 22124 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22125 ;; Tracked objects:
 22126 ;;		On entry : 0/0
 22127 ;;		On exit  : 0/0
 22128 ;;		Unchanged: 0/0
 22129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22130 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22131 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22132 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22133 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22134 ;;Total ram usage:        0 bytes
 22135 ;; Hardware stack levels used:    1
 22136 ;; Hardware stack levels required when called:   14
 22137 ;; This function calls:
 22138 ;;		_Port_SetQuadType
 22139 ;; This function is called by:
 22140 ;;		_FunctInitButton
 22141 ;;		_Button_Init
 22142 ;; This function uses a non-reentrant model
 22143 ;;
 22144                           
 22145                           	psect	text104
 22146  016522                     __ptext104:
 22147                           	opt stack 0
 22148  016522                     _MXK_InitDIPSwitch:
 22149                           	opt stack 13
 22150                           
 22151                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 22152                           
 22153                           ;incstack = 0
 22154  016522  0E9B               	movlw	low _PortD
 22155  016524  0100               	movlb	0	; () banked
 22156  016526  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 22157  016528  0E00               	movlw	high _PortD
 22158  01652A  0100               	movlb	0	; () banked
 22159  01652C  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 22160  01652E  0E00               	movlw	0
 22161  016530  0100               	movlb	0	; () banked
 22162  016532  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 22163  016534  0E00               	movlw	0
 22164  016536  0100               	movlb	0	; () banked
 22165  016538  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 22166  01653A  EC88  F08D         	call	_Port_SetQuadType	;wreg free
 22167  01653E  0012               	return		;funcret
 22168  016540                     __end_of_MXK_InitDIPSwitch:
 22169                           	opt stack 0
 22170                           tosu	equ	0xFFF
 22171                           tosh	equ	0xFFE
 22172                           tosl	equ	0xFFD
 22173                           pclath	equ	0xFFA
 22174                           tblptru	equ	0xFF8
 22175                           tblptrh	equ	0xFF7
 22176                           tblptrl	equ	0xFF6
 22177                           tablat	equ	0xFF5
 22178                           prodh	equ	0xFF4
 22179                           prodl	equ	0xFF3
 22180                           intcon	equ	0xFF2
 22181                           postinc0	equ	0xFEE
 22182                           wreg	equ	0xFE8
 22183                           indf1	equ	0xFE7
 22184                           postdec1	equ	0xFE5
 22185                           fsr1h	equ	0xFE2
 22186                           fsr1l	equ	0xFE1
 22187                           indf2	equ	0xFDF
 22188                           postinc2	equ	0xFDE
 22189                           postdec2	equ	0xFDD
 22190                           plusw2	equ	0xFDB
 22191                           fsr2h	equ	0xFDA
 22192                           fsr2l	equ	0xFD9
 22193                           status	equ	0xFD8
 22194                           
 22195 ;; *************** function _HMI_InitButtons *****************
 22196 ;; Defined at:
 22197 ;;		line 21 in file "HMI.c"
 22198 ;; Parameters:    Size  Location     Type
 22199 ;;		None
 22200 ;; Auto vars:     Size  Location     Type
 22201 ;;		None
 22202 ;; Return value:  Size  Location     Type
 22203 ;;                  1    wreg      void 
 22204 ;; Registers used:
 22205 ;;		wreg, status,2
 22206 ;; Tracked objects:
 22207 ;;		On entry : 0/0
 22208 ;;		On exit  : 0/0
 22209 ;;		Unchanged: 0/0
 22210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22215 ;;Total ram usage:        0 bytes
 22216 ;; Hardware stack levels used:    1
 22217 ;; Hardware stack levels required when called:    7
 22218 ;; This function calls:
 22219 ;;		Nothing
 22220 ;; This function is called by:
 22221 ;;		_HMI_Init
 22222 ;;		_Button_Init
 22223 ;; This function uses a non-reentrant model
 22224 ;;
 22225                           
 22226                           	psect	text105
 22227  0167E6                     __ptext105:
 22228                           	opt stack 0
 22229  0167E6                     _HMI_InitButtons:
 22230                           	opt stack 20
 22231                           
 22232                           ;HMI.c: 23: TRISE = 0xFC;
 22233                           
 22234                           ;incstack = 0
 22235  0167E6  0EFC               	movlw	252
 22236  0167E8  6E96               	movwf	3990,c	;volatile
 22237  0167EA  0012               	return		;funcret
 22238  0167EC                     __end_of_HMI_InitButtons:
 22239                           	opt stack 0
 22240                           tosu	equ	0xFFF
 22241                           tosh	equ	0xFFE
 22242                           tosl	equ	0xFFD
 22243                           pclath	equ	0xFFA
 22244                           tblptru	equ	0xFF8
 22245                           tblptrh	equ	0xFF7
 22246                           tblptrl	equ	0xFF6
 22247                           tablat	equ	0xFF5
 22248                           prodh	equ	0xFF4
 22249                           prodl	equ	0xFF3
 22250                           intcon	equ	0xFF2
 22251                           postinc0	equ	0xFEE
 22252                           wreg	equ	0xFE8
 22253                           indf1	equ	0xFE7
 22254                           postdec1	equ	0xFE5
 22255                           fsr1h	equ	0xFE2
 22256                           fsr1l	equ	0xFE1
 22257                           indf2	equ	0xFDF
 22258                           postinc2	equ	0xFDE
 22259                           postdec2	equ	0xFDD
 22260                           plusw2	equ	0xFDB
 22261                           fsr2h	equ	0xFDA
 22262                           fsr2l	equ	0xFD9
 22263                           status	equ	0xFD8
 22264                           
 22265 ;; *************** function _MXK_InitTestButton *****************
 22266 ;; Defined at:
 22267 ;;		line 10 in file "Library/MXK.c"
 22268 ;; Parameters:    Size  Location     Type
 22269 ;;		None
 22270 ;; Auto vars:     Size  Location     Type
 22271 ;;		None
 22272 ;; Return value:  Size  Location     Type
 22273 ;;                  1    wreg      void 
 22274 ;; Registers used:
 22275 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22276 ;; Tracked objects:
 22277 ;;		On entry : 0/0
 22278 ;;		On exit  : 0/0
 22279 ;;		Unchanged: 0/0
 22280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22281 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22282 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22284 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22285 ;;Total ram usage:        0 bytes
 22286 ;; Hardware stack levels used:    1
 22287 ;; Hardware stack levels required when called:   12
 22288 ;; This function calls:
 22289 ;;		_Port_SetPinType
 22290 ;; This function is called by:
 22291 ;;		_FunctInitButton
 22292 ;;		_Button_Init
 22293 ;; This function uses a non-reentrant model
 22294 ;;
 22295                           
 22296                           	psect	text106
 22297  016540                     __ptext106:
 22298                           	opt stack 0
 22299  016540                     _MXK_InitTestButton:
 22300                           	opt stack 15
 22301                           
 22302                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22303                           
 22304                           ;incstack = 0
 22305  016540  0EAC               	movlw	low _PortB
 22306  016542  0100               	movlb	0	; () banked
 22307  016544  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22308  016546  0E03               	movlw	high _PortB
 22309  016548  0100               	movlb	0	; () banked
 22310  01654A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22311  01654C  0E04               	movlw	4
 22312  01654E  0100               	movlb	0	; () banked
 22313  016550  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22314  016552  0E00               	movlw	0
 22315  016554  0100               	movlb	0	; () banked
 22316  016556  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22317  016558  EC95  F093         	call	_Port_SetPinType	;wreg free
 22318  01655C  0012               	return		;funcret
 22319  01655E                     __end_of_MXK_InitTestButton:
 22320                           	opt stack 0
 22321                           tosu	equ	0xFFF
 22322                           tosh	equ	0xFFE
 22323                           tosl	equ	0xFFD
 22324                           pclath	equ	0xFFA
 22325                           tblptru	equ	0xFF8
 22326                           tblptrh	equ	0xFF7
 22327                           tblptrl	equ	0xFF6
 22328                           tablat	equ	0xFF5
 22329                           prodh	equ	0xFF4
 22330                           prodl	equ	0xFF3
 22331                           intcon	equ	0xFF2
 22332                           postinc0	equ	0xFEE
 22333                           wreg	equ	0xFE8
 22334                           indf1	equ	0xFE7
 22335                           postdec1	equ	0xFE5
 22336                           fsr1h	equ	0xFE2
 22337                           fsr1l	equ	0xFE1
 22338                           indf2	equ	0xFDF
 22339                           postinc2	equ	0xFDE
 22340                           postdec2	equ	0xFDD
 22341                           plusw2	equ	0xFDB
 22342                           fsr2h	equ	0xFDA
 22343                           fsr2l	equ	0xFD9
 22344                           status	equ	0xFD8
 22345                           
 22346 ;; *************** function _Port_SetPinType *****************
 22347 ;; Defined at:
 22348 ;;		line 189 in file "Library/Port.c"
 22349 ;; Parameters:    Size  Location     Type
 22350 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22351 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22352 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22353 ;;  pPin            1   40[BANK0 ] enum E6750
 22354 ;;  pType           1   41[BANK0 ] enum E6795
 22355 ;; Auto vars:     Size  Location     Type
 22356 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22357 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22358 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22359 ;;  Output          1   42[BANK0 ] enum E6475
 22360 ;; Return value:  Size  Location     Type
 22361 ;;                  1    wreg      enum E6475
 22362 ;; Registers used:
 22363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22364 ;; Tracked objects:
 22365 ;;		On entry : 0/0
 22366 ;;		On exit  : 0/0
 22367 ;;		Unchanged: 0/0
 22368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22369 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22370 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22372 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22373 ;;Total ram usage:        7 bytes
 22374 ;; Hardware stack levels used:    1
 22375 ;; Hardware stack levels required when called:   11
 22376 ;; This function calls:
 22377 ;;		_Byte_SetBit
 22378 ;;		_PortProperty_Valid
 22379 ;;		_Word_SetPair
 22380 ;; This function is called by:
 22381 ;;		_Configure_GPIOs
 22382 ;;		_LED_Init
 22383 ;;		_Port_Init
 22384 ;;		_SPI_Init
 22385 ;;		_Motor_Init
 22386 ;;		_MXK_InitTestButton
 22387 ;;		_MXK_Init
 22388 ;;		_I2C_Init
 22389 ;; This function uses a non-reentrant model
 22390 ;;
 22391                           
 22392                           	psect	text107
 22393  01272A                     __ptext107:
 22394                           	opt stack 0
 22395  01272A                     _Port_SetPinType:
 22396                           	opt stack 17
 22397                           
 22398                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22399                           
 22400                           ;incstack = 0
 22401  01272A  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22402  01272E  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22403  012732  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22404  012736  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22405                           
 22406                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22407  01273A  0E05               	movlw	5
 22408  01273C  0100               	movlb	0	; () banked
 22409  01273E  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22410                           
 22411                           ;Port.c: 193: switch (pType)
 22412  012740  D0B5               	goto	l412
 22413  012742                     
 22414                           ; BSR set to: 0
 22415                           ;Port.c: 197: {
 22416                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22417                           
 22418                           ; BSR set to: 0
 22419  012742  0100               	movlb	0	; () banked
 22420  012744  EE20 F002          	lfsr	2,2
 22421  012748  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22422  01274A  26D9               	addwf	fsr2l,f,c
 22423  01274C  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22424  01274E  22DA               	addwfc	fsr2h,f,c
 22425  012750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22426  012754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22427  012758  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22428  01275C  0E01               	movlw	1
 22429  01275E  0100               	movlb	0	; () banked
 22430  012760  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22431  012762  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22432                           
 22433                           ;Port.c: 203: break;
 22434  012766  D0B0               	goto	l414
 22435  012768                     
 22436                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22437  012768  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22438  01276C  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22439  012770  0E01               	movlw	1
 22440  012772  0100               	movlb	0	; () banked
 22441  012774  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22442  012776  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22443  01277A  ECF4  F0A8         	call	_PortProperty_Valid	;wreg free
 22444  01277E  0100               	movlb	0	; () banked
 22445  012780  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22446  012782  0100               	movlb	0	; () banked
 22447  012784  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22448  012786  A4D8               	btfss	status,2,c
 22449  012788  0012               	return	
 22450                           
 22451                           ; BSR set to: 0
 22452                           ;Port.c: 208: {
 22453                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22454  01278A  0100               	movlb	0	; () banked
 22455  01278C  EE20 F002          	lfsr	2,2
 22456  012790  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22457  012792  26D9               	addwf	fsr2l,f,c
 22458  012794  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22459  012796  22DA               	addwfc	fsr2h,f,c
 22460  012798  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22461  01279C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22462  0127A0  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22463  0127A4  0E00               	movlw	0
 22464  0127A6  0100               	movlb	0	; () banked
 22465  0127A8  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22466  0127AA  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22467                           
 22468                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22469  0127AE  0100               	movlb	0	; () banked
 22470  0127B0  EE20 F004          	lfsr	2,4
 22471  0127B4  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22472  0127B6  26D9               	addwf	fsr2l,f,c
 22473  0127B8  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22474  0127BA  22DA               	addwfc	fsr2h,f,c
 22475  0127BC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22476  0127C0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22477  0127C4  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22478  0127C8  0E00               	movlw	0
 22479  0127CA  0100               	movlb	0	; () banked
 22480  0127CC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22481  0127CE  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22482                           
 22483                           ;Port.c: 214: break;
 22484  0127D2  D07A               	goto	l414
 22485  0127D4                     
 22486                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22487                           
 22488                           ;Port.c: 218: case eTypeOutputOpenSource:
 22489  0127D4  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22490  0127D8  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22491  0127DC  0E02               	movlw	2
 22492  0127DE  0100               	movlb	0	; () banked
 22493  0127E0  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22494  0127E2  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22495  0127E6  ECF4  F0A8         	call	_PortProperty_Valid	;wreg free
 22496  0127EA  0100               	movlb	0	; () banked
 22497  0127EC  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22498  0127EE  0100               	movlb	0	; () banked
 22499  0127F0  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22500  0127F2  A4D8               	btfss	status,2,c
 22501  0127F4  0012               	return	
 22502                           
 22503                           ; BSR set to: 0
 22504                           ;Port.c: 220: {
 22505                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22506  0127F6  0100               	movlb	0	; () banked
 22507  0127F8  EE20 F002          	lfsr	2,2
 22508  0127FC  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22509  0127FE  26D9               	addwf	fsr2l,f,c
 22510  012800  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22511  012802  22DA               	addwfc	fsr2h,f,c
 22512  012804  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22513  012808  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22514  01280C  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22515  012810  0E01               	movlw	1
 22516  012812  0100               	movlb	0	; () banked
 22517  012814  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22518  012816  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22519                           
 22520                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22521  01281A  0100               	movlb	0	; () banked
 22522  01281C  EE20 F004          	lfsr	2,4
 22523  012820  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22524  012822  26D9               	addwf	fsr2l,f,c
 22525  012824  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22526  012826  22DA               	addwfc	fsr2h,f,c
 22527  012828  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22528  01282C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22529  012830  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22530  012834  0E01               	movlw	1
 22531  012836  0100               	movlb	0	; () banked
 22532  012838  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22533  01283A  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22534                           
 22535                           ;Port.c: 226: break;
 22536  01283E  D044               	goto	l414
 22537  012840                     
 22538                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22539                           
 22540                           ;Port.c: 230: case eTypeOutputPushPull:
 22541  012840  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22542  012844  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22543  012848  0E00               	movlw	0
 22544  01284A  0100               	movlb	0	; () banked
 22545  01284C  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22546  01284E  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22547  012852  ECF4  F0A8         	call	_PortProperty_Valid	;wreg free
 22548  012856  0100               	movlb	0	; () banked
 22549  012858  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22550  01285A  0100               	movlb	0	; () banked
 22551  01285C  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22552  01285E  A4D8               	btfss	status,2,c
 22553  012860  0012               	return	
 22554                           
 22555                           ; BSR set to: 0
 22556                           ;Port.c: 232: {
 22557                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22558  012862  0100               	movlb	0	; () banked
 22559  012864  EE20 F002          	lfsr	2,2
 22560  012868  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22561  01286A  26D9               	addwf	fsr2l,f,c
 22562  01286C  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22563  01286E  22DA               	addwfc	fsr2h,f,c
 22564  012870  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22565  012874  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22566  012878  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22567  01287C  0E00               	movlw	0
 22568  01287E  0100               	movlb	0	; () banked
 22569  012880  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22570  012882  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22571                           
 22572                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22573  012886  0100               	movlb	0	; () banked
 22574  012888  EE20 F004          	lfsr	2,4
 22575  01288C  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22576  01288E  26D9               	addwf	fsr2l,f,c
 22577  012890  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22578  012892  22DA               	addwfc	fsr2h,f,c
 22579  012894  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22580  012898  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22581  01289C  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22582  0128A0  0E00               	movlw	0
 22583  0128A2  0100               	movlb	0	; () banked
 22584  0128A4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22585  0128A6  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 22586                           
 22587                           ;Port.c: 239: }
 22588                           
 22589                           ;Port.c: 238: break;
 22590  0128AA  D00E               	goto	l414
 22591  0128AC                     l412:
 22592  0128AC  0100               	movlb	0	; () banked
 22593  0128AE  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22594                           
 22595                           ; Switch size 1, requested type "space"
 22596                           ; Number of cases is 4, Range of values is 0 to 3
 22597                           ; switch strategies available:
 22598                           ; Name         Instructions Cycles
 22599                           ; simple_byte           13     7 (average)
 22600                           ;	Chosen strategy is simple_byte
 22601  0128B0  0A00               	xorlw	0	; case 0
 22602  0128B2  B4D8               	btfsc	status,2,c
 22603  0128B4  D746               	goto	l413
 22604  0128B6  0A01               	xorlw	1	; case 1
 22605  0128B8  B4D8               	btfsc	status,2,c
 22606  0128BA  D756               	goto	l415
 22607  0128BC  0A03               	xorlw	3	; case 2
 22608  0128BE  B4D8               	btfsc	status,2,c
 22609  0128C0  D789               	goto	l417
 22610  0128C2  0A01               	xorlw	1	; case 3
 22611  0128C4  B4D8               	btfsc	status,2,c
 22612  0128C6  D7BC               	goto	l421
 22613  0128C8                     l414:
 22614                           
 22615                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22616                           
 22617                           ; BSR set to: 0
 22618  0128C8  0E08               	movlw	8
 22619  0128CA  0100               	movlb	0	; () banked
 22620  0128CC  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22621  0128CE  0100               	movlb	0	; () banked
 22622  0128D0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22623  0128D2  0E00               	movlw	0
 22624  0128D4  0100               	movlb	0	; () banked
 22625  0128D6  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22626  0128D8  0100               	movlb	0	; () banked
 22627  0128DA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22628  0128DC  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22629  0128E0  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22630  0128E4  EC36  F0AF         	call	_Word_SetPair	;wreg free
 22631  0128E8  0012               	return	
 22632  0128EA                     __end_of_Port_SetPinType:
 22633                           	opt stack 0
 22634                           tosu	equ	0xFFF
 22635                           tosh	equ	0xFFE
 22636                           tosl	equ	0xFFD
 22637                           pclath	equ	0xFFA
 22638                           tblptru	equ	0xFF8
 22639                           tblptrh	equ	0xFF7
 22640                           tblptrl	equ	0xFF6
 22641                           tablat	equ	0xFF5
 22642                           prodh	equ	0xFF4
 22643                           prodl	equ	0xFF3
 22644                           intcon	equ	0xFF2
 22645                           postinc0	equ	0xFEE
 22646                           wreg	equ	0xFE8
 22647                           indf1	equ	0xFE7
 22648                           postdec1	equ	0xFE5
 22649                           fsr1h	equ	0xFE2
 22650                           fsr1l	equ	0xFE1
 22651                           indf2	equ	0xFDF
 22652                           postinc2	equ	0xFDE
 22653                           postdec2	equ	0xFDD
 22654                           plusw2	equ	0xFDB
 22655                           fsr2h	equ	0xFDA
 22656                           fsr2l	equ	0xFD9
 22657                           status	equ	0xFD8
 22658                           
 22659 ;; *************** function _Port_SetQuadType *****************
 22660 ;; Defined at:
 22661 ;;		line 399 in file "Library/Port.c"
 22662 ;; Parameters:    Size  Location     Type
 22663 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22664 ;;		 -> PortB(10), PortD(10), 
 22665 ;;  pQuad           1   56[BANK0 ] enum E6776
 22666 ;;  pType           1   57[BANK0 ] enum E6795
 22667 ;; Auto vars:     Size  Location     Type
 22668 ;;  Output          1   58[BANK0 ] enum E6475
 22669 ;; Return value:  Size  Location     Type
 22670 ;;                  1    wreg      enum E6475
 22671 ;; Registers used:
 22672 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22673 ;; Tracked objects:
 22674 ;;		On entry : 0/0
 22675 ;;		On exit  : 0/0
 22676 ;;		Unchanged: 0/0
 22677 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22678 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22679 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22680 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22681 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22682 ;;Total ram usage:        5 bytes
 22683 ;; Hardware stack levels used:    1
 22684 ;; Hardware stack levels required when called:   13
 22685 ;; This function calls:
 22686 ;;		_Byte_SetQuad
 22687 ;;		_Port_CheckQuadType
 22688 ;;		_Word_SetPair
 22689 ;; This function is called by:
 22690 ;;		_MXK_InitDIPSwitch
 22691 ;;		_MXK_Init
 22692 ;; This function uses a non-reentrant model
 22693 ;;
 22694                           
 22695                           	psect	text108
 22696  011B10                     __ptext108:
 22697                           	opt stack 0
 22698  011B10                     _Port_SetQuadType:
 22699                           	opt stack 15
 22700                           
 22701                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22702                           
 22703                           ;incstack = 0
 22704  011B10  0E05               	movlw	5
 22705  011B12  0100               	movlb	0	; () banked
 22706  011B14  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22707                           
 22708                           ;Port.c: 403: switch (pType)
 22709  011B16  D0C7               	goto	l476
 22710  011B18                     
 22711                           ; BSR set to: 0
 22712                           ;Port.c: 407: {
 22713                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22714                           
 22715                           ; BSR set to: 0
 22716  011B18  0100               	movlb	0	; () banked
 22717  011B1A  EE20 F002          	lfsr	2,2
 22718  011B1E  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22719  011B20  26D9               	addwf	fsr2l,f,c
 22720  011B22  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22721  011B24  22DA               	addwfc	fsr2h,f,c
 22722  011B26  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22723  011B2A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22724  011B2E  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22725  011B32  0E0F               	movlw	15
 22726  011B34  0100               	movlb	0	; () banked
 22727  011B36  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22728  011B38  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22729                           
 22730                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22731  011B3C  0100               	movlb	0	; () banked
 22732  011B3E  EE20 F004          	lfsr	2,4
 22733  011B42  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22734  011B44  26D9               	addwf	fsr2l,f,c
 22735  011B46  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22736  011B48  22DA               	addwfc	fsr2h,f,c
 22737  011B4A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22738  011B4E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22739  011B52  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22740  011B56  0E00               	movlw	0
 22741  011B58  0100               	movlb	0	; () banked
 22742  011B5A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22743  011B5C  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22744                           
 22745                           ;Port.c: 413: }
 22746                           ;Port.c: 415: break;
 22747  011B60  D0B0               	goto	l478
 22748  011B62                     
 22749                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22750  011B62  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22751  011B66  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22752  011B6A  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22753  011B6E  0E03               	movlw	3
 22754  011B70  0100               	movlb	0	; () banked
 22755  011B72  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22756  011B74  EC39  F0AD         	call	_Port_CheckQuadType	;wreg free
 22757  011B78  0100               	movlb	0	; () banked
 22758  011B7A  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22759  011B7C  0100               	movlb	0	; () banked
 22760  011B7E  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22761  011B80  A4D8               	btfss	status,2,c
 22762  011B82  0012               	return	
 22763                           
 22764                           ; BSR set to: 0
 22765                           ;Port.c: 418: {
 22766                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22767  011B84  0100               	movlb	0	; () banked
 22768  011B86  EE20 F002          	lfsr	2,2
 22769  011B8A  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22770  011B8C  26D9               	addwf	fsr2l,f,c
 22771  011B8E  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22772  011B90  22DA               	addwfc	fsr2h,f,c
 22773  011B92  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22774  011B96  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22775  011B9A  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22776  011B9E  0E00               	movlw	0
 22777  011BA0  0100               	movlb	0	; () banked
 22778  011BA2  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22779  011BA4  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22780                           
 22781                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22782  011BA8  0100               	movlb	0	; () banked
 22783  011BAA  EE20 F004          	lfsr	2,4
 22784  011BAE  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22785  011BB0  26D9               	addwf	fsr2l,f,c
 22786  011BB2  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22787  011BB4  22DA               	addwfc	fsr2h,f,c
 22788  011BB6  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22789  011BBA  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22790  011BBE  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22791  011BC2  0E00               	movlw	0
 22792  011BC4  0100               	movlb	0	; () banked
 22793  011BC6  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22794  011BC8  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22795                           
 22796                           ;Port.c: 424: }
 22797  011BCC  D07A               	goto	l478
 22798  011BCE                     
 22799                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22800  011BCE  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22801  011BD2  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22802  011BD6  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22803  011BDA  0E03               	movlw	3
 22804  011BDC  0100               	movlb	0	; () banked
 22805  011BDE  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22806  011BE0  EC39  F0AD         	call	_Port_CheckQuadType	;wreg free
 22807  011BE4  0100               	movlb	0	; () banked
 22808  011BE6  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22809  011BE8  0100               	movlb	0	; () banked
 22810  011BEA  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22811  011BEC  A4D8               	btfss	status,2,c
 22812  011BEE  0012               	return	
 22813                           
 22814                           ; BSR set to: 0
 22815                           ;Port.c: 429: {
 22816                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22817  011BF0  0100               	movlb	0	; () banked
 22818  011BF2  EE20 F002          	lfsr	2,2
 22819  011BF6  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22820  011BF8  26D9               	addwf	fsr2l,f,c
 22821  011BFA  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22822  011BFC  22DA               	addwfc	fsr2h,f,c
 22823  011BFE  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22824  011C02  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22825  011C06  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22826  011C0A  0E0F               	movlw	15
 22827  011C0C  0100               	movlb	0	; () banked
 22828  011C0E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22829  011C10  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22830                           
 22831                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22832  011C14  0100               	movlb	0	; () banked
 22833  011C16  EE20 F004          	lfsr	2,4
 22834  011C1A  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22835  011C1C  26D9               	addwf	fsr2l,f,c
 22836  011C1E  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22837  011C20  22DA               	addwfc	fsr2h,f,c
 22838  011C22  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22839  011C26  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22840  011C2A  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22841  011C2E  0E0F               	movlw	15
 22842  011C30  0100               	movlb	0	; () banked
 22843  011C32  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22844  011C34  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22845                           
 22846                           ;Port.c: 435: }
 22847  011C38  D044               	goto	l478
 22848  011C3A                     
 22849                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22850  011C3A  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22851  011C3E  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22852  011C42  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22853  011C46  0E03               	movlw	3
 22854  011C48  0100               	movlb	0	; () banked
 22855  011C4A  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22856  011C4C  EC39  F0AD         	call	_Port_CheckQuadType	;wreg free
 22857  011C50  0100               	movlb	0	; () banked
 22858  011C52  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22859  011C54  0100               	movlb	0	; () banked
 22860  011C56  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22861  011C58  A4D8               	btfss	status,2,c
 22862  011C5A  0012               	return	
 22863                           
 22864                           ; BSR set to: 0
 22865                           ;Port.c: 440: {
 22866                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22867  011C5C  0100               	movlb	0	; () banked
 22868  011C5E  EE20 F002          	lfsr	2,2
 22869  011C62  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22870  011C64  26D9               	addwf	fsr2l,f,c
 22871  011C66  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22872  011C68  22DA               	addwfc	fsr2h,f,c
 22873  011C6A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22874  011C6E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22875  011C72  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22876  011C76  0E00               	movlw	0
 22877  011C78  0100               	movlb	0	; () banked
 22878  011C7A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22879  011C7C  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22880                           
 22881                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22882  011C80  0100               	movlb	0	; () banked
 22883  011C82  EE20 F004          	lfsr	2,4
 22884  011C86  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22885  011C88  26D9               	addwf	fsr2l,f,c
 22886  011C8A  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22887  011C8C  22DA               	addwfc	fsr2h,f,c
 22888  011C8E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22889  011C92  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22890  011C96  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22891  011C9A  0E00               	movlw	0
 22892  011C9C  0100               	movlb	0	; () banked
 22893  011C9E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22894  011CA0  EC25  F0B2         	call	_Byte_SetQuad	;wreg free
 22895                           
 22896                           ;Port.c: 446: }
 22897  011CA4  D00E               	goto	l478
 22898  011CA6                     l476:
 22899  011CA6  0100               	movlb	0	; () banked
 22900  011CA8  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22901                           
 22902                           ; Switch size 1, requested type "space"
 22903                           ; Number of cases is 4, Range of values is 0 to 3
 22904                           ; switch strategies available:
 22905                           ; Name         Instructions Cycles
 22906                           ; simple_byte           13     7 (average)
 22907                           ;	Chosen strategy is simple_byte
 22908  011CAA  0A00               	xorlw	0	; case 0
 22909  011CAC  B4D8               	btfsc	status,2,c
 22910  011CAE  D734               	goto	l477
 22911  011CB0  0A01               	xorlw	1	; case 1
 22912  011CB2  B4D8               	btfsc	status,2,c
 22913  011CB4  D756               	goto	l479
 22914  011CB6  0A03               	xorlw	3	; case 2
 22915  011CB8  B4D8               	btfsc	status,2,c
 22916  011CBA  D789               	goto	l483
 22917  011CBC  0A01               	xorlw	1	; case 3
 22918  011CBE  B4D8               	btfsc	status,2,c
 22919  011CC0  D7BC               	goto	l486
 22920  011CC2                     l478:
 22921                           
 22922                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22923                           
 22924                           ; BSR set to: 0
 22925  011CC2  0E08               	movlw	8
 22926  011CC4  0100               	movlb	0	; () banked
 22927  011CC6  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22928  011CC8  0100               	movlb	0	; () banked
 22929  011CCA  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22930  011CCC  0E00               	movlw	0
 22931  011CCE  0100               	movlb	0	; () banked
 22932  011CD0  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22933  011CD2  0100               	movlb	0	; () banked
 22934  011CD4  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22935  011CD6  0100               	movlb	0	; () banked
 22936  011CD8  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22937  011CDA  0D04               	mullw	4
 22938  011CDC  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22939  011CE0  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22940  011CE4  EC36  F0AF         	call	_Word_SetPair	;wreg free
 22941                           
 22942                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22943  011CE8  0E08               	movlw	8
 22944  011CEA  0100               	movlb	0	; () banked
 22945  011CEC  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22946  011CEE  0100               	movlb	0	; () banked
 22947  011CF0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22948  011CF2  0E00               	movlw	0
 22949  011CF4  0100               	movlb	0	; () banked
 22950  011CF6  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22951  011CF8  0100               	movlb	0	; () banked
 22952  011CFA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22953  011CFC  0100               	movlb	0	; () banked
 22954  011CFE  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22955  011D00  0D04               	mullw	4
 22956  011D02  28F3               	incf	prodl,w,c
 22957  011D04  0100               	movlb	0	; () banked
 22958  011D06  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22959  011D08  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22960  011D0C  EC36  F0AF         	call	_Word_SetPair	;wreg free
 22961                           
 22962                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22963  011D10  0E08               	movlw	8
 22964  011D12  0100               	movlb	0	; () banked
 22965  011D14  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22966  011D16  0100               	movlb	0	; () banked
 22967  011D18  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22968  011D1A  0E00               	movlw	0
 22969  011D1C  0100               	movlb	0	; () banked
 22970  011D1E  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22971  011D20  0100               	movlb	0	; () banked
 22972  011D22  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22973  011D24  0100               	movlb	0	; () banked
 22974  011D26  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22975  011D28  0D04               	mullw	4
 22976  011D2A  50F3               	movf	prodl,w,c
 22977  011D2C  0F02               	addlw	2
 22978  011D2E  0100               	movlb	0	; () banked
 22979  011D30  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22980  011D32  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22981  011D36  EC36  F0AF         	call	_Word_SetPair	;wreg free
 22982                           
 22983                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22984  011D3A  0E08               	movlw	8
 22985  011D3C  0100               	movlb	0	; () banked
 22986  011D3E  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22987  011D40  0100               	movlb	0	; () banked
 22988  011D42  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22989  011D44  0E00               	movlw	0
 22990  011D46  0100               	movlb	0	; () banked
 22991  011D48  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22992  011D4A  0100               	movlb	0	; () banked
 22993  011D4C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22994  011D4E  0100               	movlb	0	; () banked
 22995  011D50  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22996  011D52  0D04               	mullw	4
 22997  011D54  50F3               	movf	prodl,w,c
 22998  011D56  0F03               	addlw	3
 22999  011D58  0100               	movlb	0	; () banked
 23000  011D5A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 23001  011D5C  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 23002  011D60  EC36  F0AF         	call	_Word_SetPair	;wreg free
 23003  011D64  0012               	return	
 23004  011D66                     __end_of_Port_SetQuadType:
 23005                           	opt stack 0
 23006                           tosu	equ	0xFFF
 23007                           tosh	equ	0xFFE
 23008                           tosl	equ	0xFFD
 23009                           pclath	equ	0xFFA
 23010                           tblptru	equ	0xFF8
 23011                           tblptrh	equ	0xFF7
 23012                           tblptrl	equ	0xFF6
 23013                           tablat	equ	0xFF5
 23014                           prodh	equ	0xFF4
 23015                           prodl	equ	0xFF3
 23016                           intcon	equ	0xFF2
 23017                           postinc0	equ	0xFEE
 23018                           wreg	equ	0xFE8
 23019                           indf1	equ	0xFE7
 23020                           postdec1	equ	0xFE5
 23021                           fsr1h	equ	0xFE2
 23022                           fsr1l	equ	0xFE1
 23023                           indf2	equ	0xFDF
 23024                           postinc2	equ	0xFDE
 23025                           postdec2	equ	0xFDD
 23026                           plusw2	equ	0xFDB
 23027                           fsr2h	equ	0xFDA
 23028                           fsr2l	equ	0xFD9
 23029                           status	equ	0xFD8
 23030                           
 23031 ;; *************** function _Word_SetPair *****************
 23032 ;; Defined at:
 23033 ;;		line 149 in file "Library/Types.c"
 23034 ;; Parameters:    Size  Location     Type
 23035 ;;  pInput          2   15[BANK0 ] PTR struct Word
 23036 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23037 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23038 ;;  pPair           1   17[BANK0 ] unsigned char 
 23039 ;;  pValue          1   18[BANK0 ] unsigned char 
 23040 ;; Auto vars:     Size  Location     Type
 23041 ;;		None
 23042 ;; Return value:  Size  Location     Type
 23043 ;;                  1    wreg      void 
 23044 ;; Registers used:
 23045 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23046 ;; Tracked objects:
 23047 ;;		On entry : 0/0
 23048 ;;		On exit  : 0/0
 23049 ;;		Unchanged: 0/0
 23050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23051 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23054 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23055 ;;Total ram usage:        4 bytes
 23056 ;; Hardware stack levels used:    1
 23057 ;; Hardware stack levels required when called:    9
 23058 ;; This function calls:
 23059 ;;		_Byte_SetPair
 23060 ;; This function is called by:
 23061 ;;		_Port_SetPinType
 23062 ;;		_Port_SetQuadType
 23063 ;;		_Port_SetType
 23064 ;;		_Port_SetPairType
 23065 ;;		_PortProperty_Init
 23066 ;; This function uses a non-reentrant model
 23067 ;;
 23068                           
 23069                           	psect	text109
 23070  015E6C                     __ptext109:
 23071                           	opt stack 0
 23072  015E6C                     _Word_SetPair:
 23073                           	opt stack 18
 23074                           
 23075                           ;Types.c: 151: if (pPair >= 4)
 23076                           
 23077                           ;incstack = 0
 23078  015E6C  0E03               	movlw	3
 23079  015E6E  0100               	movlb	0	; () banked
 23080  015E70  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 23081  015E72  D014               	goto	l776
 23082                           
 23083                           ; BSR set to: 0
 23084                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 23085  015E74  0E01               	movlw	1
 23086  015E76  0100               	movlb	0	; () banked
 23087  015E78  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 23088  015E7A  0100               	movlb	0	; () banked
 23089  015E7C  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 23090  015E7E  0E00               	movlw	0
 23091  015E80  0100               	movlb	0	; () banked
 23092  015E82  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 23093  015E84  0100               	movlb	0	; () banked
 23094  015E86  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 23095  015E88  0100               	movlb	0	; () banked
 23096  015E8A  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 23097  015E8C  0FFC               	addlw	252
 23098  015E8E  0100               	movlb	0	; () banked
 23099  015E90  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 23100  015E92  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23101  015E96  EC14  F0B2         	call	_Byte_SetPair	;wreg free
 23102  015E9A  0012               	return	
 23103  015E9C                     l776:
 23104                           
 23105                           ;Types.c: 153: else
 23106                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 23107  015E9C  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 23108  015EA0  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 23109  015EA4  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 23110  015EA8  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 23111  015EAC  EC14  F0B2         	call	_Byte_SetPair	;wreg free
 23112  015EB0  0012               	return	
 23113  015EB2                     __end_of_Word_SetPair:
 23114                           	opt stack 0
 23115                           tosu	equ	0xFFF
 23116                           tosh	equ	0xFFE
 23117                           tosl	equ	0xFFD
 23118                           pclath	equ	0xFFA
 23119                           tblptru	equ	0xFF8
 23120                           tblptrh	equ	0xFF7
 23121                           tblptrl	equ	0xFF6
 23122                           tablat	equ	0xFF5
 23123                           prodh	equ	0xFF4
 23124                           prodl	equ	0xFF3
 23125                           intcon	equ	0xFF2
 23126                           postinc0	equ	0xFEE
 23127                           wreg	equ	0xFE8
 23128                           indf1	equ	0xFE7
 23129                           postdec1	equ	0xFE5
 23130                           fsr1h	equ	0xFE2
 23131                           fsr1l	equ	0xFE1
 23132                           indf2	equ	0xFDF
 23133                           postinc2	equ	0xFDE
 23134                           postdec2	equ	0xFDD
 23135                           plusw2	equ	0xFDB
 23136                           fsr2h	equ	0xFDA
 23137                           fsr2l	equ	0xFD9
 23138                           status	equ	0xFD8
 23139                           
 23140 ;; *************** function _Byte_SetPair *****************
 23141 ;; Defined at:
 23142 ;;		line 83 in file "Library/Types.c"
 23143 ;; Parameters:    Size  Location     Type
 23144 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23145 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23146 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23147 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 23148 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 23149 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 23150 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 23151 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 23152 ;;		 -> NULL(0), 
 23153 ;;  pPair           1   13[BANK0 ] unsigned char 
 23154 ;;  pValue          1   14[BANK0 ] unsigned char 
 23155 ;; Auto vars:     Size  Location     Type
 23156 ;;		None
 23157 ;; Return value:  Size  Location     Type
 23158 ;;                  1    wreg      void 
 23159 ;; Registers used:
 23160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23161 ;; Tracked objects:
 23162 ;;		On entry : 0/0
 23163 ;;		On exit  : 0/0
 23164 ;;		Unchanged: 0/0
 23165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23166 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23169 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23170 ;;Total ram usage:        4 bytes
 23171 ;; Hardware stack levels used:    1
 23172 ;; Hardware stack levels required when called:    8
 23173 ;; This function calls:
 23174 ;;		_Byte_SetZone
 23175 ;; This function is called by:
 23176 ;;		_Word_SetPair
 23177 ;;		_Port_SetPairType
 23178 ;;		_Port_SetPair
 23179 ;; This function uses a non-reentrant model
 23180 ;;
 23181                           
 23182                           	psect	text110
 23183  016428                     __ptext110:
 23184                           	opt stack 0
 23185  016428                     _Byte_SetPair:
 23186                           	opt stack 18
 23187                           
 23188                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 23189                           
 23190                           ;incstack = 0
 23191  016428  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 23192  01642C  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 23193  016430  0E04               	movlw	4
 23194  016432  0100               	movlb	0	; () banked
 23195  016434  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23196  016436  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 23197  01643A  0E02               	movlw	2
 23198  01643C  0100               	movlb	0	; () banked
 23199  01643E  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23200  016440  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 23201  016444  EC3F  F0A2         	call	_Byte_SetZone	;wreg free
 23202  016448  0012               	return		;funcret
 23203  01644A                     __end_of_Byte_SetPair:
 23204                           	opt stack 0
 23205                           tosu	equ	0xFFF
 23206                           tosh	equ	0xFFE
 23207                           tosl	equ	0xFFD
 23208                           pclath	equ	0xFFA
 23209                           tblptru	equ	0xFF8
 23210                           tblptrh	equ	0xFF7
 23211                           tblptrl	equ	0xFF6
 23212                           tablat	equ	0xFF5
 23213                           prodh	equ	0xFF4
 23214                           prodl	equ	0xFF3
 23215                           intcon	equ	0xFF2
 23216                           postinc0	equ	0xFEE
 23217                           wreg	equ	0xFE8
 23218                           indf1	equ	0xFE7
 23219                           postdec1	equ	0xFE5
 23220                           fsr1h	equ	0xFE2
 23221                           fsr1l	equ	0xFE1
 23222                           indf2	equ	0xFDF
 23223                           postinc2	equ	0xFDE
 23224                           postdec2	equ	0xFDD
 23225                           plusw2	equ	0xFDB
 23226                           fsr2h	equ	0xFDA
 23227                           fsr2l	equ	0xFD9
 23228                           status	equ	0xFD8
 23229                           
 23230 ;; *************** function _Port_CheckQuadType *****************
 23231 ;; Defined at:
 23232 ;;		line 126 in file "Library/Port.c"
 23233 ;; Parameters:    Size  Location     Type
 23234 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23235 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23236 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23237 ;;  pQuad           1   49[BANK0 ] enum E6776
 23238 ;;  pDrive          1   50[BANK0 ] enum E6469
 23239 ;; Auto vars:     Size  Location     Type
 23240 ;;  Output          1   53[BANK0 ] enum E6475
 23241 ;;  Pair2           1   52[BANK0 ] enum E6760
 23242 ;;  Pair1           1   51[BANK0 ] enum E6760
 23243 ;; Return value:  Size  Location     Type
 23244 ;;                  1    wreg      enum E6475
 23245 ;; Registers used:
 23246 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23247 ;; Tracked objects:
 23248 ;;		On entry : 0/0
 23249 ;;		On exit  : 0/0
 23250 ;;		Unchanged: 0/0
 23251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23253 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23255 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23256 ;;Total ram usage:        7 bytes
 23257 ;; Hardware stack levels used:    1
 23258 ;; Hardware stack levels required when called:   12
 23259 ;; This function calls:
 23260 ;;		_Port_CheckPairType
 23261 ;; This function is called by:
 23262 ;;		_Port_CheckPortType
 23263 ;;		_Port_SetQuadType
 23264 ;; This function uses a non-reentrant model
 23265 ;;
 23266                           
 23267                           	psect	text111
 23268  015A72                     __ptext111:
 23269                           	opt stack 0
 23270  015A72                     _Port_CheckQuadType:
 23271                           	opt stack 14
 23272                           
 23273                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23274                           
 23275                           ;incstack = 0
 23276  015A72  0E05               	movlw	5
 23277  015A74  0100               	movlb	0	; () banked
 23278  015A76  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23279                           
 23280                           ; BSR set to: 0
 23281                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23282  015A78  0100               	movlb	0	; () banked
 23283  015A7A  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23284  015A7C  0D02               	mullw	2
 23285  015A7E  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23286                           
 23287                           ; BSR set to: 0
 23288                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23289  015A82  0100               	movlb	0	; () banked
 23290  015A84  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23291  015A86  0D02               	mullw	2
 23292  015A88  28F3               	incf	prodl,w,c
 23293  015A8A  0100               	movlb	0	; () banked
 23294  015A8C  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23295                           
 23296                           ; BSR set to: 0
 23297                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23298  015A8E  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23299  015A92  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23300  015A96  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23301  015A9A  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23302  015A9E  ECDC  F0AB         	call	_Port_CheckPairType	;wreg free
 23303  015AA2  0100               	movlb	0	; () banked
 23304  015AA4  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23305  015AA6  0100               	movlb	0	; () banked
 23306  015AA8  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23307  015AAA  A4D8               	btfss	status,2,c
 23308  015AAC  D00C               	goto	l393
 23309                           
 23310                           ; BSR set to: 0
 23311                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23312  015AAE  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23313  015AB2  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23314  015AB6  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23315  015ABA  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23316  015ABE  ECDC  F0AB         	call	_Port_CheckPairType	;wreg free
 23317  015AC2  0100               	movlb	0	; () banked
 23318  015AC4  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23319  015AC6                     l393:
 23320                           
 23321                           ; BSR set to: 0
 23322                           ;Port.c: 136: return Output;
 23323                           
 23324                           ; BSR set to: 0
 23325  015AC6  0100               	movlb	0	; () banked
 23326  015AC8  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23327  015ACA  0012               	return	
 23328  015ACC                     __end_of_Port_CheckQuadType:
 23329                           	opt stack 0
 23330                           tosu	equ	0xFFF
 23331                           tosh	equ	0xFFE
 23332                           tosl	equ	0xFFD
 23333                           pclath	equ	0xFFA
 23334                           tblptru	equ	0xFF8
 23335                           tblptrh	equ	0xFF7
 23336                           tblptrl	equ	0xFF6
 23337                           tablat	equ	0xFF5
 23338                           prodh	equ	0xFF4
 23339                           prodl	equ	0xFF3
 23340                           intcon	equ	0xFF2
 23341                           postinc0	equ	0xFEE
 23342                           wreg	equ	0xFE8
 23343                           indf1	equ	0xFE7
 23344                           postdec1	equ	0xFE5
 23345                           fsr1h	equ	0xFE2
 23346                           fsr1l	equ	0xFE1
 23347                           indf2	equ	0xFDF
 23348                           postinc2	equ	0xFDE
 23349                           postdec2	equ	0xFDD
 23350                           plusw2	equ	0xFDB
 23351                           fsr2h	equ	0xFDA
 23352                           fsr2l	equ	0xFD9
 23353                           status	equ	0xFD8
 23354                           
 23355 ;; *************** function _Port_CheckPairType *****************
 23356 ;; Defined at:
 23357 ;;		line 112 in file "Library/Port.c"
 23358 ;; Parameters:    Size  Location     Type
 23359 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23360 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23361 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23362 ;;  pPair           1   40[BANK0 ] enum E6760
 23363 ;;  pDrive          1   41[BANK0 ] enum E6469
 23364 ;; Auto vars:     Size  Location     Type
 23365 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23366 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23367 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23368 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23369 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23370 ;;  Output          1   44[BANK0 ] enum E6475
 23371 ;;  Pin2            1   43[BANK0 ] enum E6750
 23372 ;;  Pin1            1   42[BANK0 ] enum E6750
 23373 ;; Return value:  Size  Location     Type
 23374 ;;                  1    wreg      enum E6475
 23375 ;; Registers used:
 23376 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23377 ;; Tracked objects:
 23378 ;;		On entry : 0/0
 23379 ;;		On exit  : 0/0
 23380 ;;		Unchanged: 0/0
 23381 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23382 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23383 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23384 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23385 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23386 ;;Total ram usage:        9 bytes
 23387 ;; Hardware stack levels used:    1
 23388 ;; Hardware stack levels required when called:   11
 23389 ;; This function calls:
 23390 ;;		_PortProperty_Valid
 23391 ;; This function is called by:
 23392 ;;		_Port_CheckQuadType
 23393 ;;		_Port_SetPairType
 23394 ;; This function uses a non-reentrant model
 23395 ;;
 23396                           
 23397                           	psect	text112
 23398  0157B8                     __ptext112:
 23399                           	opt stack 0
 23400  0157B8                     _Port_CheckPairType:
 23401                           	opt stack 14
 23402                           
 23403                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23404                           
 23405                           ; BSR set to: 0
 23406                           ;incstack = 0
 23407  0157B8  0E05               	movlw	5
 23408  0157BA  0100               	movlb	0	; () banked
 23409  0157BC  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23410                           
 23411                           ; BSR set to: 0
 23412                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23413  0157BE  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23414  0157C2  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23415  0157C6  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23416  0157CA  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23417                           
 23418                           ; BSR set to: 0
 23419                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23420  0157CE  0100               	movlb	0	; () banked
 23421  0157D0  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23422  0157D2  0D02               	mullw	2
 23423  0157D4  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23424                           
 23425                           ; BSR set to: 0
 23426                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23427  0157D8  0100               	movlb	0	; () banked
 23428  0157DA  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23429  0157DC  0D02               	mullw	2
 23430  0157DE  28F3               	incf	prodl,w,c
 23431  0157E0  0100               	movlb	0	; () banked
 23432  0157E2  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23433                           
 23434                           ; BSR set to: 0
 23435                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23436  0157E4  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23437  0157E8  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23438  0157EC  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23439  0157F0  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23440  0157F4  ECF4  F0A8         	call	_PortProperty_Valid	;wreg free
 23441  0157F8  0100               	movlb	0	; () banked
 23442  0157FA  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23443  0157FC  0100               	movlb	0	; () banked
 23444  0157FE  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23445  015800  A4D8               	btfss	status,2,c
 23446  015802  D00C               	goto	l389
 23447                           
 23448                           ; BSR set to: 0
 23449                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23450  015804  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23451  015808  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23452  01580C  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23453  015810  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23454  015814  ECF4  F0A8         	call	_PortProperty_Valid	;wreg free
 23455  015818  0100               	movlb	0	; () banked
 23456  01581A  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23457  01581C                     l389:
 23458                           
 23459                           ; BSR set to: 0
 23460                           ;Port.c: 124: return Output;
 23461                           
 23462                           ; BSR set to: 0
 23463  01581C  0100               	movlb	0	; () banked
 23464  01581E  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23465  015820  0012               	return	
 23466  015822                     __end_of_Port_CheckPairType:
 23467                           	opt stack 0
 23468                           tosu	equ	0xFFF
 23469                           tosh	equ	0xFFE
 23470                           tosl	equ	0xFFD
 23471                           pclath	equ	0xFFA
 23472                           tblptru	equ	0xFF8
 23473                           tblptrh	equ	0xFF7
 23474                           tblptrl	equ	0xFF6
 23475                           tablat	equ	0xFF5
 23476                           prodh	equ	0xFF4
 23477                           prodl	equ	0xFF3
 23478                           intcon	equ	0xFF2
 23479                           postinc0	equ	0xFEE
 23480                           wreg	equ	0xFE8
 23481                           indf1	equ	0xFE7
 23482                           postdec1	equ	0xFE5
 23483                           fsr1h	equ	0xFE2
 23484                           fsr1l	equ	0xFE1
 23485                           indf2	equ	0xFDF
 23486                           postinc2	equ	0xFDE
 23487                           postdec2	equ	0xFDD
 23488                           plusw2	equ	0xFDB
 23489                           fsr2h	equ	0xFDA
 23490                           fsr2l	equ	0xFD9
 23491                           status	equ	0xFD8
 23492                           
 23493 ;; *************** function _PortProperty_Valid *****************
 23494 ;; Defined at:
 23495 ;;		line 220 in file "Library/Types.c"
 23496 ;; Parameters:    Size  Location     Type
 23497 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23498 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23499 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23500 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23501 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23502 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23503 ;;  pPin            1   18[BANK0 ] unsigned char 
 23504 ;; Auto vars:     Size  Location     Type
 23505 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23506 ;;  Pair            1   37[BANK0 ] enum E6469
 23507 ;; Return value:  Size  Location     Type
 23508 ;;                  1    wreg      enum E6475
 23509 ;; Registers used:
 23510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23511 ;; Tracked objects:
 23512 ;;		On entry : 0/0
 23513 ;;		On exit  : 0/0
 23514 ;;		Unchanged: 0/0
 23515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23516 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23517 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23518 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23519 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23520 ;;Total ram usage:       23 bytes
 23521 ;; Hardware stack levels used:    1
 23522 ;; Hardware stack levels required when called:   10
 23523 ;; This function calls:
 23524 ;;		_Word_GetPair
 23525 ;; This function is called by:
 23526 ;;		_Port_CheckPairType
 23527 ;;		_Port_SetPinType
 23528 ;; This function uses a non-reentrant model
 23529 ;;
 23530                           
 23531                           	psect	text113
 23532  0151E8                     __ptext113:
 23533                           	opt stack 0
 23534  0151E8                     _PortProperty_Valid:
 23535                           	opt stack 17
 23536                           
 23537                           ;Types.c: 222: ePinDrive Pair;
 23538                           ;Types.c: 223: const ePinError Errors[4][4] =
 23539                           ;Types.c: 224: {
 23540                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23541                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23542                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23543                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23544                           ;Types.c: 230: };
 23545                           
 23546                           ; BSR set to: 0
 23547                           ;incstack = 0
 23548  0151E8  0EF5               	movlw	low PortProperty_Valid@F6830
 23549  0151EA  6EF6               	movwf	tblptrl,c
 23550  0151EC                     	if	1	;There is more than 1 active tblptr byte
 23551  0151EC  0EFC               	movlw	high PortProperty_Valid@F6830
 23552  0151EE  6EF7               	movwf	tblptrh,c
 23553  0151F0                     	endif
 23554  0151F0                     	if	1	;There are 3 active tblptr bytes
 23555  0151F0  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23556  0151F2  6EF8               	movwf	tblptru,c
 23557  0151F4                     	endif
 23558  0151F4  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23559  0151F8  0E0F               	movlw	15
 23560  0151FA                     u8880:
 23561  0151FA  0009               	tblrd		*+
 23562  0151FC  CFF5 FFDE          	movff	tablat,postinc2
 23563  015200  06E8               	decf	wreg,f,c
 23564  015202  E2FB               	bc	u8880
 23565                           
 23566                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23567  015204  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23568  015208  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23569  01520C  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23570  015210  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 23571  015214  0100               	movlb	0	; () banked
 23572  015216  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23573                           
 23574                           ; BSR set to: 0
 23575                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23576  015218  0E04               	movlw	4
 23577  01521A  0100               	movlb	0	; () banked
 23578  01521C  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23579  01521E  D020               	goto	l819
 23580                           
 23581                           ; BSR set to: 0
 23582  015220  0E04               	movlw	4
 23583  015222  0100               	movlb	0	; () banked
 23584  015224  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23585  015226  D01C               	goto	l819
 23586                           
 23587                           ; BSR set to: 0
 23588                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23589  015228  0100               	movlb	0	; () banked
 23590  01522A  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23591  01522C  0D04               	mullw	4
 23592  01522E  0ECF               	movlw	low PortProperty_Valid@Errors
 23593  015230  0100               	movlb	0	; () banked
 23594  015232  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23595  015234  0E00               	movlw	high PortProperty_Valid@Errors
 23596  015236  0100               	movlb	0	; () banked
 23597  015238  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23598  01523A  50F3               	movf	prodl,w,c
 23599  01523C  0100               	movlb	0	; () banked
 23600  01523E  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23601  015240  50F4               	movf	prodh,w,c
 23602  015242  0100               	movlb	0	; () banked
 23603  015244  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23604  015246  0100               	movlb	0	; () banked
 23605  015248  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23606  01524A  0D01               	mullw	1
 23607  01524C  50F3               	movf	prodl,w,c
 23608  01524E  0100               	movlb	0	; () banked
 23609  015250  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23610  015252  6ED9               	movwf	fsr2l,c
 23611  015254  50F4               	movf	prodh,w,c
 23612  015256  0100               	movlb	0	; () banked
 23613  015258  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23614  01525A  6EDA               	movwf	fsr2h,c
 23615  01525C  50DF               	movf	indf2,w,c
 23616                           
 23617                           ; BSR set to: 0
 23618  01525E  0012               	return	
 23619  015260                     l819:
 23620                           
 23621                           ; BSR set to: 0
 23622                           ;Types.c: 237: return ePinErrorState;
 23623                           
 23624                           ; BSR set to: 0
 23625  015260  0E05               	movlw	5
 23626  015262  0012               	return	
 23627  015264                     __end_of_PortProperty_Valid:
 23628                           	opt stack 0
 23629                           tosu	equ	0xFFF
 23630                           tosh	equ	0xFFE
 23631                           tosl	equ	0xFFD
 23632                           pclath	equ	0xFFA
 23633                           tblptru	equ	0xFF8
 23634                           tblptrh	equ	0xFF7
 23635                           tblptrl	equ	0xFF6
 23636                           tablat	equ	0xFF5
 23637                           prodh	equ	0xFF4
 23638                           prodl	equ	0xFF3
 23639                           intcon	equ	0xFF2
 23640                           postinc0	equ	0xFEE
 23641                           wreg	equ	0xFE8
 23642                           indf1	equ	0xFE7
 23643                           postdec1	equ	0xFE5
 23644                           fsr1h	equ	0xFE2
 23645                           fsr1l	equ	0xFE1
 23646                           indf2	equ	0xFDF
 23647                           postinc2	equ	0xFDE
 23648                           postdec2	equ	0xFDD
 23649                           plusw2	equ	0xFDB
 23650                           fsr2h	equ	0xFDA
 23651                           fsr2l	equ	0xFD9
 23652                           status	equ	0xFD8
 23653                           
 23654 ;; *************** function _Byte_SetQuad *****************
 23655 ;; Defined at:
 23656 ;;		line 101 in file "Library/Types.c"
 23657 ;; Parameters:    Size  Location     Type
 23658 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23659 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23660 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23661 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23662 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23663 ;;		 -> NULL(0), 
 23664 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23665 ;;  pValue          1   14[BANK0 ] unsigned char 
 23666 ;; Auto vars:     Size  Location     Type
 23667 ;;		None
 23668 ;; Return value:  Size  Location     Type
 23669 ;;                  1    wreg      void 
 23670 ;; Registers used:
 23671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23672 ;; Tracked objects:
 23673 ;;		On entry : 0/0
 23674 ;;		On exit  : 0/0
 23675 ;;		Unchanged: 0/0
 23676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23677 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23678 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23680 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23681 ;;Total ram usage:        4 bytes
 23682 ;; Hardware stack levels used:    1
 23683 ;; Hardware stack levels required when called:    8
 23684 ;; This function calls:
 23685 ;;		_Byte_SetZone
 23686 ;; This function is called by:
 23687 ;;		_Port_SetQuadType
 23688 ;;		_SPI_Init
 23689 ;;		_SPI_MinSpeed
 23690 ;;		_SPI_MaxSpeed
 23691 ;;		_Port_SetQuad
 23692 ;;		_Word_SetQuad
 23693 ;;		_I2C_Init
 23694 ;; This function uses a non-reentrant model
 23695 ;;
 23696                           
 23697                           	psect	text114
 23698  01644A                     __ptext114:
 23699                           	opt stack 0
 23700  01644A                     _Byte_SetQuad:
 23701                           	opt stack 19
 23702                           
 23703                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23704                           
 23705                           ; BSR set to: 0
 23706                           ;incstack = 0
 23707  01644A  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23708  01644E  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23709  016452  0E02               	movlw	2
 23710  016454  0100               	movlb	0	; () banked
 23711  016456  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23712  016458  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23713  01645C  0E04               	movlw	4
 23714  01645E  0100               	movlb	0	; () banked
 23715  016460  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23716  016462  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23717  016466  EC3F  F0A2         	call	_Byte_SetZone	;wreg free
 23718  01646A  0012               	return		;funcret
 23719  01646C                     __end_of_Byte_SetQuad:
 23720                           	opt stack 0
 23721                           tosu	equ	0xFFF
 23722                           tosh	equ	0xFFE
 23723                           tosl	equ	0xFFD
 23724                           pclath	equ	0xFFA
 23725                           tblptru	equ	0xFF8
 23726                           tblptrh	equ	0xFF7
 23727                           tblptrl	equ	0xFF6
 23728                           tablat	equ	0xFF5
 23729                           prodh	equ	0xFF4
 23730                           prodl	equ	0xFF3
 23731                           intcon	equ	0xFF2
 23732                           postinc0	equ	0xFEE
 23733                           wreg	equ	0xFE8
 23734                           indf1	equ	0xFE7
 23735                           postdec1	equ	0xFE5
 23736                           fsr1h	equ	0xFE2
 23737                           fsr1l	equ	0xFE1
 23738                           indf2	equ	0xFDF
 23739                           postinc2	equ	0xFDE
 23740                           postdec2	equ	0xFDD
 23741                           plusw2	equ	0xFDB
 23742                           fsr2h	equ	0xFDA
 23743                           fsr2l	equ	0xFD9
 23744                           status	equ	0xFD8
 23745                           
 23746 ;; *************** function _Byte_SetZone *****************
 23747 ;; Defined at:
 23748 ;;		line 47 in file "Library/Types.c"
 23749 ;; Parameters:    Size  Location     Type
 23750 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23751 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23752 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23753 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23754 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23755 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23756 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23757 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23758 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23759 ;;  pMax            1    2[BANK0 ] unsigned char 
 23760 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23761 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23762 ;;  pValue          1    5[BANK0 ] unsigned char 
 23763 ;; Auto vars:     Size  Location     Type
 23764 ;;  MASK            1   10[BANK0 ] unsigned char 
 23765 ;;  Offset          1    9[BANK0 ] unsigned char 
 23766 ;; Return value:  Size  Location     Type
 23767 ;;                  1    wreg      void 
 23768 ;; Registers used:
 23769 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23770 ;; Tracked objects:
 23771 ;;		On entry : 0/0
 23772 ;;		On exit  : 0/0
 23773 ;;		Unchanged: 0/0
 23774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23775 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23776 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23777 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23778 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23779 ;;Total ram usage:       11 bytes
 23780 ;; Hardware stack levels used:    1
 23781 ;; Hardware stack levels required when called:    7
 23782 ;; This function calls:
 23783 ;;		Nothing
 23784 ;; This function is called by:
 23785 ;;		_Byte_SetPair
 23786 ;;		_Byte_SetQuad
 23787 ;;		_Byte_SetTriple
 23788 ;; This function uses a non-reentrant model
 23789 ;;
 23790                           
 23791                           	psect	text115
 23792  01447E                     __ptext115:
 23793                           	opt stack 0
 23794  01447E                     _Byte_SetZone:
 23795                           	opt stack 18
 23796                           
 23797                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23798                           
 23799                           ;incstack = 0
 23800  01447E  0100               	movlb	0	; () banked
 23801  014480  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23802  014482  0D01               	mullw	1
 23803  014484  0E0F               	movlw	low _MASKS
 23804  014486  24F3               	addwf	prodl,w,c
 23805  014488  6EF6               	movwf	tblptrl,c
 23806  01448A  0EFD               	movlw	high _MASKS
 23807  01448C  20F4               	addwfc	prodh,w,c
 23808  01448E  6EF7               	movwf	tblptrh,c
 23809  014490                     	if	1	;There are 3 active tblptr bytes
 23810  014490  6AF8               	clrf	tblptru,c
 23811  014492  0E00               	movlw	low (__mediumconst shr (0+16))
 23812  014494  22F8               	addwfc	tblptru,f,c
 23813  014496                     	endif
 23814  014496  0008               	tblrd		*
 23815  014498  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23816                           
 23817                           ; BSR set to: 0
 23818                           ;Types.c: 50: UINT8 Offset = 0;
 23819  01449C  0E00               	movlw	0
 23820  01449E  0100               	movlb	0	; () banked
 23821  0144A0  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23822                           
 23823                           ;Types.c: 52: while (pChunk >= pMax)
 23824  0144A2  D006               	goto	l726
 23825  0144A4                     
 23826                           ; BSR set to: 0
 23827                           ;Types.c: 53: {
 23828                           ;Types.c: 54: pChunk -= pMax;
 23829                           
 23830                           ; BSR set to: 0
 23831  0144A4  0100               	movlb	0	; () banked
 23832  0144A6  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23833  0144A8  0100               	movlb	0	; () banked
 23834  0144AA  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23835                           
 23836                           ; BSR set to: 0
 23837                           ;Types.c: 55: Offset += 1;
 23838  0144AC  0100               	movlb	0	; () banked
 23839  0144AE  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23840  0144B0                     l726:
 23841                           
 23842                           ; BSR set to: 0
 23843                           
 23844                           ; BSR set to: 0
 23845  0144B0  0100               	movlb	0	; () banked
 23846  0144B2  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23847  0144B4  0100               	movlb	0	; () banked
 23848  0144B6  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23849  0144B8  B0D8               	btfsc	status,0,c
 23850  0144BA  D7F4               	goto	l727
 23851                           
 23852                           ; BSR set to: 0
 23853                           ;Types.c: 56: }
 23854                           ;Types.c: 57: pChunk *= pChunkSize;
 23855                           
 23856                           ; BSR set to: 0
 23857  0144BC  0100               	movlb	0	; () banked
 23858  0144BE  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23859  0144C0  0100               	movlb	0	; () banked
 23860  0144C2  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23861  0144C4  50F3               	movf	prodl,w,c
 23862  0144C6  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23863                           
 23864                           ; BSR set to: 0
 23865                           ;Types.c: 58: pChunk += Offset;
 23866  0144C8  0100               	movlb	0	; () banked
 23867  0144CA  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23868  0144CC  0100               	movlb	0	; () banked
 23869  0144CE  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23870                           
 23871                           ; BSR set to: 0
 23872                           ;Types.c: 60: pValue &= MASK;
 23873  0144D0  0100               	movlb	0	; () banked
 23874  0144D2  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23875  0144D4  0100               	movlb	0	; () banked
 23876  0144D6  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23877                           
 23878                           ; BSR set to: 0
 23879                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23880  0144D8  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23881  0144DC  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23882  0144E0  0100               	movlb	0	; () banked
 23883  0144E2  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23884  0144E4  D003               	goto	u8934
 23885  0144E6                     u8935:
 23886  0144E6  0100               	movlb	0	; () banked
 23887  0144E8  90D8               	bcf	status,0,c
 23888  0144EA  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23889  0144EC                     u8934:
 23890  0144EC  0100               	movlb	0	; () banked
 23891  0144EE  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23892  0144F0  D7FA               	goto	u8935
 23893  0144F2  0100               	movlb	0	; () banked
 23894  0144F4  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23895  0144F6  0AFF               	xorlw	255
 23896  0144F8  0100               	movlb	0	; () banked
 23897  0144FA  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23898  0144FC  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23899  014500  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23900  014504  0100               	movlb	0	; () banked
 23901  014506  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23902  014508  16DF               	andwf	indf2,f,c
 23903                           
 23904                           ; BSR set to: 0
 23905                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23906  01450A  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23907  01450E  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23908  014512  0100               	movlb	0	; () banked
 23909  014514  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23910  014516  D003               	goto	u8944
 23911  014518                     u8945:
 23912  014518  0100               	movlb	0	; () banked
 23913  01451A  90D8               	bcf	status,0,c
 23914  01451C  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23915  01451E                     u8944:
 23916  01451E  0100               	movlb	0	; () banked
 23917  014520  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23918  014522  D7FA               	goto	u8945
 23919  014524  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23920  014528  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23921  01452C  0100               	movlb	0	; () banked
 23922  01452E  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23923  014530  12DF               	iorwf	indf2,f,c
 23924                           
 23925                           ; BSR set to: 0
 23926  014532  0012               	return		;funcret
 23927  014534                     __end_of_Byte_SetZone:
 23928                           	opt stack 0
 23929                           tosu	equ	0xFFF
 23930                           tosh	equ	0xFFE
 23931                           tosl	equ	0xFFD
 23932                           pclath	equ	0xFFA
 23933                           tblptru	equ	0xFF8
 23934                           tblptrh	equ	0xFF7
 23935                           tblptrl	equ	0xFF6
 23936                           tablat	equ	0xFF5
 23937                           prodh	equ	0xFF4
 23938                           prodl	equ	0xFF3
 23939                           intcon	equ	0xFF2
 23940                           postinc0	equ	0xFEE
 23941                           wreg	equ	0xFE8
 23942                           indf1	equ	0xFE7
 23943                           postdec1	equ	0xFE5
 23944                           fsr1h	equ	0xFE2
 23945                           fsr1l	equ	0xFE1
 23946                           indf2	equ	0xFDF
 23947                           postinc2	equ	0xFDE
 23948                           postdec2	equ	0xFDD
 23949                           plusw2	equ	0xFDB
 23950                           fsr2h	equ	0xFDA
 23951                           fsr2l	equ	0xFD9
 23952                           status	equ	0xFD8
 23953                           
 23954 ;; *************** function _Console_Init *****************
 23955 ;; Defined at:
 23956 ;;		line 157 in file "Library/Console.c"
 23957 ;; Parameters:    Size  Location     Type
 23958 ;;		None
 23959 ;; Auto vars:     Size  Location     Type
 23960 ;;  y               1    3[BANK0 ] unsigned char 
 23961 ;;  x               1    2[BANK0 ] unsigned char 
 23962 ;; Return value:  Size  Location     Type
 23963 ;;                  1    wreg      void 
 23964 ;; Registers used:
 23965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23966 ;; Tracked objects:
 23967 ;;		On entry : 0/0
 23968 ;;		On exit  : 0/0
 23969 ;;		Unchanged: 0/0
 23970 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23972 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23973 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23974 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23975 ;;Total ram usage:        4 bytes
 23976 ;; Hardware stack levels used:    1
 23977 ;; Hardware stack levels required when called:    7
 23978 ;; This function calls:
 23979 ;;		Nothing
 23980 ;; This function is called by:
 23981 ;;		_init
 23982 ;; This function uses a non-reentrant model
 23983 ;;
 23984                           
 23985                           	psect	text116
 23986  014F4C                     __ptext116:
 23987                           	opt stack 0
 23988  014F4C                     _Console_Init:
 23989                           	opt stack 22
 23990                           
 23991                           ;Console.c: 160: lBufferX = 0;
 23992                           
 23993                           ; BSR set to: 0
 23994                           ;incstack = 0
 23995  014F4C  0E00               	movlw	0
 23996  014F4E  0100               	movlb	0	; () banked
 23997  014F50  6F8F               	movwf	_lBufferX& (0+255),b
 23998                           
 23999                           ;Console.c: 161: lBufferY = 0;
 24000  014F52  0E00               	movlw	0
 24001  014F54  0100               	movlb	0	; () banked
 24002  014F56  6F8E               	movwf	_lBufferY& (0+255),b
 24003                           
 24004                           ;Console.c: 163: UINT8 x, y;
 24005                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 24006  014F58  0E00               	movlw	0
 24007  014F5A  0100               	movlb	0	; () banked
 24008  014F5C  6FBC               	movwf	Console_Init@x& (0+255),b
 24009  014F5E                     l14432:
 24010                           
 24011                           ; BSR set to: 0
 24012  014F5E  0E13               	movlw	19
 24013  014F60  0100               	movlb	0	; () banked
 24014  014F62  65BC               	cpfsgt	Console_Init@x& (0+255),b
 24015  014F64  D001               	goto	l976
 24016  014F66  0012               	return	
 24017  014F68                     l976:
 24018                           
 24019                           ; BSR set to: 0
 24020                           ;Console.c: 165: {
 24021                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 24022                           
 24023                           ; BSR set to: 0
 24024  014F68  0E00               	movlw	0
 24025  014F6A  0100               	movlb	0	; () banked
 24026  014F6C  6FBD               	movwf	Console_Init@y& (0+255),b
 24027  014F6E                     l14438:
 24028                           
 24029                           ; BSR set to: 0
 24030  014F6E  0E0E               	movlw	14
 24031  014F70  0100               	movlb	0	; () banked
 24032  014F72  65BD               	cpfsgt	Console_Init@y& (0+255),b
 24033  014F74  D001               	goto	l978
 24034  014F76  D02C               	goto	u11350
 24035  014F78                     l978:
 24036                           
 24037                           ; BSR set to: 0
 24038                           ;Console.c: 167: {
 24039                           ;Console.c: 168: lBuffer[y][x] = '\0';
 24040                           
 24041                           ; BSR set to: 0
 24042  014F78  0100               	movlb	0	; () banked
 24043  014F7A  51BD               	movf	Console_Init@y& (0+255),w,b
 24044  014F7C  0D14               	mullw	20
 24045  014F7E  0EAA               	movlw	low _lBuffer
 24046  014F80  0100               	movlb	0	; () banked
 24047  014F82  6FBA               	movwf	??_Console_Init& (0+255),b
 24048  014F84  0E04               	movlw	high _lBuffer
 24049  014F86  0100               	movlb	0	; () banked
 24050  014F88  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 24051  014F8A  50F3               	movf	prodl,w,c
 24052  014F8C  0100               	movlb	0	; () banked
 24053  014F8E  27BA               	addwf	??_Console_Init& (0+255),f,b
 24054  014F90  50F4               	movf	prodh,w,c
 24055  014F92  0100               	movlb	0	; () banked
 24056  014F94  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 24057  014F96  0100               	movlb	0	; () banked
 24058  014F98  51BC               	movf	Console_Init@x& (0+255),w,b
 24059  014F9A  0D01               	mullw	1
 24060  014F9C  50F3               	movf	prodl,w,c
 24061  014F9E  0100               	movlb	0	; () banked
 24062  014FA0  25BA               	addwf	??_Console_Init& (0+255),w,b
 24063  014FA2  6ED9               	movwf	fsr2l,c
 24064  014FA4  50F4               	movf	prodh,w,c
 24065  014FA6  0100               	movlb	0	; () banked
 24066  014FA8  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 24067  014FAA  6EDA               	movwf	fsr2h,c
 24068  014FAC  0E00               	movlw	0
 24069  014FAE  6EDF               	movwf	indf2,c
 24070                           
 24071                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 24072  014FB0  0100               	movlb	0	; () banked
 24073  014FB2  51BD               	movf	Console_Init@y& (0+255),w,b
 24074  014FB4  0D02               	mullw	2
 24075  014FB6  0E00               	movlw	low _lCBuffer
 24076  014FB8  24F3               	addwf	prodl,w,c
 24077  014FBA  6ED9               	movwf	fsr2l,c
 24078  014FBC  0E03               	movlw	high _lCBuffer
 24079  014FBE  20F4               	addwfc	prodh,w,c
 24080  014FC0  6EDA               	movwf	fsr2h,c
 24081  014FC2  0EFF               	movlw	255
 24082  014FC4  6EDE               	movwf	postinc2,c
 24083  014FC6  0EFF               	movlw	255
 24084  014FC8  6EDD               	movwf	postdec2,c
 24085                           
 24086                           ; BSR set to: 0
 24087  014FCA  0100               	movlb	0	; () banked
 24088  014FCC  2BBD               	incf	Console_Init@y& (0+255),f,b
 24089  014FCE  D7CF               	goto	l14438
 24090  014FD0                     u11350:
 24091                           
 24092                           ; BSR set to: 0
 24093                           
 24094                           ; BSR set to: 0
 24095  014FD0  0100               	movlb	0	; () banked
 24096  014FD2  2BBC               	incf	Console_Init@x& (0+255),f,b
 24097  014FD4  D7C4               	goto	l14432
 24098  014FD6                     __end_of_Console_Init:
 24099                           	opt stack 0
 24100                           tosu	equ	0xFFF
 24101                           tosh	equ	0xFFE
 24102                           tosl	equ	0xFFD
 24103                           pclath	equ	0xFFA
 24104                           tblptru	equ	0xFF8
 24105                           tblptrh	equ	0xFF7
 24106                           tblptrl	equ	0xFF6
 24107                           tablat	equ	0xFF5
 24108                           prodh	equ	0xFF4
 24109                           prodl	equ	0xFF3
 24110                           intcon	equ	0xFF2
 24111                           postinc0	equ	0xFEE
 24112                           wreg	equ	0xFE8
 24113                           indf1	equ	0xFE7
 24114                           postdec1	equ	0xFE5
 24115                           fsr1h	equ	0xFE2
 24116                           fsr1l	equ	0xFE1
 24117                           indf2	equ	0xFDF
 24118                           postinc2	equ	0xFDE
 24119                           postdec2	equ	0xFDD
 24120                           plusw2	equ	0xFDB
 24121                           fsr2h	equ	0xFDA
 24122                           fsr2l	equ	0xFD9
 24123                           status	equ	0xFD8
 24124                           
 24125 ;; *************** function _ADC_Start *****************
 24126 ;; Defined at:
 24127 ;;		line 114 in file "Library/ADC.c"
 24128 ;; Parameters:    Size  Location     Type
 24129 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 24130 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24131 ;;		 -> NULL(0), 
 24132 ;; Auto vars:     Size  Location     Type
 24133 ;;		None
 24134 ;; Return value:  Size  Location     Type
 24135 ;;                  1    wreg      void 
 24136 ;; Registers used:
 24137 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24138 ;; Tracked objects:
 24139 ;;		On entry : 0/0
 24140 ;;		On exit  : 0/0
 24141 ;;		Unchanged: 0/0
 24142 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24143 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24144 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24145 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24146 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24147 ;;Total ram usage:        4 bytes
 24148 ;; Hardware stack levels used:    1
 24149 ;; Hardware stack levels required when called:    8
 24150 ;; This function calls:
 24151 ;;		_ADC_Off
 24152 ;;		_ADC_On
 24153 ;;		_ADC_SetChannel
 24154 ;; This function is called by:
 24155 ;;		_init
 24156 ;;		_findClosestWall
 24157 ;;		_mode1
 24158 ;;		_FunctADC
 24159 ;; This function uses a non-reentrant model
 24160 ;;
 24161                           
 24162                           	psect	text117
 24163  015060                     __ptext117:
 24164                           	opt stack 0
 24165  015060                     _ADC_Start:
 24166                           	opt stack 20
 24167                           
 24168                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24169                           
 24170                           ; BSR set to: 0
 24171                           ;incstack = 0
 24172  015060  B2C2               	btfsc	4034,1,c	;volatile
 24173  015062  0012               	return	
 24174  015064                     
 24175                           ;ADC.c: 128: {
 24176                           ;ADC.c: 129: ADC_Off();
 24177                           
 24178                           ;ADC.c: 127: for(;;)
 24179  015064  ECE8  F0B3         	call	_ADC_Off	;wreg free
 24180                           
 24181                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24182  015068  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 24183  01506C  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24184  015070  50DF               	movf	indf2,w,c
 24185  015072  ECDA  F0B2         	call	_ADC_SetChannel
 24186                           
 24187                           ;ADC.c: 131: ADC_On();
 24188  015076  ECF6  F0B3         	call	_ADC_On	;wreg free
 24189                           
 24190                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24191  01507A  82C2               	bsf	4034,1,c	;volatile
 24192  01507C  B2C2               	btfsc	4034,1,c	;volatile
 24193  01507E  D7FE               	goto	l1280
 24194                           
 24195                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24196  015080  50C3               	movf	4035,w,c	;volatile
 24197  015082  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 24198  015086  0100               	movlb	0	; () banked
 24199  015088  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 24200  01508A  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 24201  01508E  0100               	movlb	0	; () banked
 24202  015090  6BBE               	clrf	??_ADC_Start& (0+255),b
 24203  015092  0100               	movlb	0	; () banked
 24204  015094  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 24205  015096  0E00               	movlw	0
 24206  015098  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24207  01509A  0100               	movlb	0	; () banked
 24208  01509C  EE20 F001          	lfsr	2,1
 24209  0150A0  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24210  0150A2  26D9               	addwf	fsr2l,f,c
 24211  0150A4  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24212  0150A6  22DA               	addwfc	fsr2h,f,c
 24213  0150A8  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 24214  0150AC  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 24215                           
 24216                           ;ADC.c: 141: if (pInput->mNext == 0)
 24217  0150B0  0100               	movlb	0	; () banked
 24218  0150B2  EE20 F003          	lfsr	2,3
 24219  0150B6  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24220  0150B8  26D9               	addwf	fsr2l,f,c
 24221  0150BA  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24222  0150BC  22DA               	addwfc	fsr2h,f,c
 24223  0150BE  50DE               	movf	postinc2,w,c
 24224  0150C0  10DE               	iorwf	postinc2,w,c
 24225  0150C2  B4D8               	btfsc	status,2,c
 24226  0150C4  D00C               	goto	l1283
 24227                           
 24228                           ; BSR set to: 0
 24229                           ;ADC.c: 145: pInput = pInput->mNext;
 24230                           
 24231                           ; BSR set to: 0
 24232                           
 24233                           ; BSR set to: 0
 24234                           ;ADC.c: 142: break;
 24235  0150C6  0100               	movlb	0	; () banked
 24236  0150C8  EE20 F003          	lfsr	2,3
 24237  0150CC  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24238  0150CE  26D9               	addwf	fsr2l,f,c
 24239  0150D0  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24240  0150D2  22DA               	addwfc	fsr2h,f,c
 24241  0150D4  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24242  0150D8  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24243                           
 24244                           ;ADC.c: 146: }
 24245  0150DC  D7C3               	goto	l1276
 24246  0150DE                     l1283:
 24247                           
 24248                           ; BSR set to: 0
 24249                           ;ADC.c: 147: ADC_Off();
 24250                           
 24251                           ; BSR set to: 0
 24252  0150DE  ECE8  F0B3         	call	_ADC_Off	;wreg free
 24253  0150E2  0012               	return		;funcret
 24254  0150E4                     __end_of_ADC_Start:
 24255                           	opt stack 0
 24256                           tosu	equ	0xFFF
 24257                           tosh	equ	0xFFE
 24258                           tosl	equ	0xFFD
 24259                           pclath	equ	0xFFA
 24260                           tblptru	equ	0xFF8
 24261                           tblptrh	equ	0xFF7
 24262                           tblptrl	equ	0xFF6
 24263                           tablat	equ	0xFF5
 24264                           prodh	equ	0xFF4
 24265                           prodl	equ	0xFF3
 24266                           intcon	equ	0xFF2
 24267                           postinc0	equ	0xFEE
 24268                           wreg	equ	0xFE8
 24269                           indf1	equ	0xFE7
 24270                           postdec1	equ	0xFE5
 24271                           fsr1h	equ	0xFE2
 24272                           fsr1l	equ	0xFE1
 24273                           indf2	equ	0xFDF
 24274                           postinc2	equ	0xFDE
 24275                           postdec2	equ	0xFDD
 24276                           plusw2	equ	0xFDB
 24277                           fsr2h	equ	0xFDA
 24278                           fsr2l	equ	0xFD9
 24279                           status	equ	0xFD8
 24280                           
 24281 ;; *************** function _ADC_Init *****************
 24282 ;; Defined at:
 24283 ;;		line 19 in file "Library/ADC.c"
 24284 ;; Parameters:    Size  Location     Type
 24285 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24286 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24287 ;;  pChannel        1    6[BANK0 ] enum E6742
 24288 ;; Auto vars:     Size  Location     Type
 24289 ;;		None
 24290 ;; Return value:  Size  Location     Type
 24291 ;;                  1    wreg      void 
 24292 ;; Registers used:
 24293 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24294 ;; Tracked objects:
 24295 ;;		On entry : 0/0
 24296 ;;		On exit  : 0/0
 24297 ;;		Unchanged: 0/0
 24298 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24299 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24301 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24302 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24303 ;;Total ram usage:        3 bytes
 24304 ;; Hardware stack levels used:    1
 24305 ;; Hardware stack levels required when called:    9
 24306 ;; This function calls:
 24307 ;;		_ADC_Calibrate
 24308 ;;		_ADC_ClockDivision
 24309 ;;		_ADC_ConversionTime
 24310 ;;		_ADC_SetChannel
 24311 ;;		_ADC_SetupIO
 24312 ;; This function is called by:
 24313 ;;		_init
 24314 ;;		_FunctInitADC
 24315 ;; This function uses a non-reentrant model
 24316 ;;
 24317                           
 24318                           	psect	text118
 24319  015264                     __ptext118:
 24320                           	opt stack 0
 24321  015264                     _ADC_Init:
 24322                           	opt stack 20
 24323                           
 24324                           ;ADC.c: 21: if(pInput==(void*)0)
 24325                           
 24326                           ;incstack = 0
 24327  015264  0100               	movlb	0	; () banked
 24328  015266  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24329  015268  0100               	movlb	0	; () banked
 24330  01526A  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24331  01526C  B4D8               	btfsc	status,2,c
 24332  01526E  0012               	return	
 24333                           
 24334                           ; BSR set to: 0
 24335                           ;ADC.c: 25: lCurrent = pInput;
 24336                           
 24337                           ; BSR set to: 0
 24338                           
 24339                           ; BSR set to: 0
 24340                           ;ADC.c: 22: return;
 24341  015270  C0BE  F081         	movff	ADC_Init@pInput,_lCurrent
 24342  015274  C0BF  F082         	movff	ADC_Init@pInput+1,_lCurrent+1
 24343                           
 24344                           ; BSR set to: 0
 24345                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24346  015278  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24347  01527C  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24348  015280  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24349                           
 24350                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24351  015284  0100               	movlb	0	; () banked
 24352  015286  EE20 F003          	lfsr	2,3
 24353  01528A  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24354  01528C  26D9               	addwf	fsr2l,f,c
 24355  01528E  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24356  015290  22DA               	addwfc	fsr2h,f,c
 24357  015292  0E00               	movlw	0
 24358  015294  6EDE               	movwf	postinc2,c
 24359  015296  0E00               	movlw	0
 24360  015298  6EDD               	movwf	postdec2,c
 24361                           
 24362                           ;ADC.c: 29: pInput->mValue = 0;
 24363  01529A  0100               	movlb	0	; () banked
 24364  01529C  EE20 F001          	lfsr	2,1
 24365  0152A0  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24366  0152A2  26D9               	addwf	fsr2l,f,c
 24367  0152A4  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24368  0152A6  22DA               	addwfc	fsr2h,f,c
 24369  0152A8  0E00               	movlw	0
 24370  0152AA  6EDE               	movwf	postinc2,c
 24371  0152AC  0E00               	movlw	0
 24372  0152AE  6EDD               	movwf	postdec2,c
 24373                           
 24374                           ; BSR set to: 0
 24375                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24376  0152B0  0100               	movlb	0	; () banked
 24377  0152B2  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24378  0152B4  ECDA  F0B2         	call	_ADC_SetChannel
 24379                           
 24380                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24381  0152B8  9EC2               	bcf	4034,7,c	;volatile
 24382                           
 24383                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24384  0152BA  9CC2               	bcf	4034,6,c	;volatile
 24385                           
 24386                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24387  0152BC  8EC1               	bsf	4033,7,c	;volatile
 24388                           
 24389                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24390  0152BE  8CC1               	bsf	4033,6,c	;volatile
 24391                           
 24392                           ;ADC.c: 43: ADC_ConversionTime(12);
 24393  0152C0  0E0C               	movlw	12
 24394  0152C2  ECCB  F0AE         	call	_ADC_ConversionTime
 24395                           
 24396                           ;ADC.c: 47: ADC_ClockDivision(16);
 24397  0152C6  0E10               	movlw	16
 24398  0152C8  ECEB  F0A7         	call	_ADC_ClockDivision
 24399                           
 24400                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24401  0152CC  0100               	movlb	0	; () banked
 24402  0152CE  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24403  0152D0  EC23  F0B1         	call	_ADC_SetupIO
 24404                           
 24405                           ;ADC.c: 58: ADC_Initialised = 1;
 24406  0152D4  0E01               	movlw	1
 24407  0152D6  6E3C               	movwf	_ADC_Initialised,c
 24408                           
 24409                           ;ADC.c: 61: ADC_Calibrate();
 24410  0152D8  EC6A  F0B3         	call	_ADC_Calibrate	;wreg free
 24411  0152DC  0012               	return		;funcret
 24412  0152DE                     __end_of_ADC_Init:
 24413                           	opt stack 0
 24414                           tosu	equ	0xFFF
 24415                           tosh	equ	0xFFE
 24416                           tosl	equ	0xFFD
 24417                           pclath	equ	0xFFA
 24418                           tblptru	equ	0xFF8
 24419                           tblptrh	equ	0xFF7
 24420                           tblptrl	equ	0xFF6
 24421                           tablat	equ	0xFF5
 24422                           prodh	equ	0xFF4
 24423                           prodl	equ	0xFF3
 24424                           intcon	equ	0xFF2
 24425                           postinc0	equ	0xFEE
 24426                           wreg	equ	0xFE8
 24427                           indf1	equ	0xFE7
 24428                           postdec1	equ	0xFE5
 24429                           fsr1h	equ	0xFE2
 24430                           fsr1l	equ	0xFE1
 24431                           indf2	equ	0xFDF
 24432                           postinc2	equ	0xFDE
 24433                           postdec2	equ	0xFDD
 24434                           plusw2	equ	0xFDB
 24435                           fsr2h	equ	0xFDA
 24436                           fsr2l	equ	0xFD9
 24437                           status	equ	0xFD8
 24438                           
 24439 ;; *************** function _ADC_SetupIO *****************
 24440 ;; Defined at:
 24441 ;;		line 150 in file "Library/ADC.c"
 24442 ;; Parameters:    Size  Location     Type
 24443 ;;  pChannel        1    wreg     enum E6742
 24444 ;; Auto vars:     Size  Location     Type
 24445 ;;  pChannel        1    2[BANK0 ] enum E6742
 24446 ;;  MASK            1    3[BANK0 ] unsigned char 
 24447 ;; Return value:  Size  Location     Type
 24448 ;;                  1    wreg      void 
 24449 ;; Registers used:
 24450 ;;		wreg, status,2, status,0
 24451 ;; Tracked objects:
 24452 ;;		On entry : 0/0
 24453 ;;		On exit  : 0/0
 24454 ;;		Unchanged: 0/0
 24455 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24456 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24457 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24458 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24459 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24460 ;;Total ram usage:        4 bytes
 24461 ;; Hardware stack levels used:    1
 24462 ;; Hardware stack levels required when called:    7
 24463 ;; This function calls:
 24464 ;;		Nothing
 24465 ;; This function is called by:
 24466 ;;		_ADC_Init
 24467 ;; This function uses a non-reentrant model
 24468 ;;
 24469                           
 24470                           	psect	text119
 24471  016246                     __ptext119:
 24472                           	opt stack 0
 24473  016246                     _ADC_SetupIO:
 24474                           	opt stack 21
 24475                           
 24476                           ;incstack = 0
 24477                           ;ADC_SetupIO@pChannel stored from wreg
 24478  016246  0100               	movlb	0	; () banked
 24479  016248  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24480                           
 24481                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24482  01624A  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24483  01624E  0E01               	movlw	1
 24484  016250  0100               	movlb	0	; () banked
 24485  016252  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24486  016254  0100               	movlb	0	; () banked
 24487  016256  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24488  016258  D003               	goto	u11004
 24489  01625A                     u11005:
 24490  01625A  0100               	movlb	0	; () banked
 24491  01625C  90D8               	bcf	status,0,c
 24492  01625E  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24493  016260                     u11004:
 24494  016260  0100               	movlb	0	; () banked
 24495  016262  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24496  016264  D7FA               	goto	u11005
 24497  016266  0100               	movlb	0	; () banked
 24498  016268  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24499  01626A  0AFF               	xorlw	255
 24500  01626C  0100               	movlb	0	; () banked
 24501  01626E  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24502                           
 24503                           ;ADC.c: 153: ANCON0 &= MASK;
 24504  016270  0100               	movlb	0	; () banked
 24505  016272  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24506  016274  16C1               	andwf	4033,f,c	;volatile
 24507                           
 24508                           ; BSR set to: 0
 24509  016276  0012               	return		;funcret
 24510  016278                     __end_of_ADC_SetupIO:
 24511                           	opt stack 0
 24512                           tosu	equ	0xFFF
 24513                           tosh	equ	0xFFE
 24514                           tosl	equ	0xFFD
 24515                           pclath	equ	0xFFA
 24516                           tblptru	equ	0xFF8
 24517                           tblptrh	equ	0xFF7
 24518                           tblptrl	equ	0xFF6
 24519                           tablat	equ	0xFF5
 24520                           prodh	equ	0xFF4
 24521                           prodl	equ	0xFF3
 24522                           intcon	equ	0xFF2
 24523                           postinc0	equ	0xFEE
 24524                           wreg	equ	0xFE8
 24525                           indf1	equ	0xFE7
 24526                           postdec1	equ	0xFE5
 24527                           fsr1h	equ	0xFE2
 24528                           fsr1l	equ	0xFE1
 24529                           indf2	equ	0xFDF
 24530                           postinc2	equ	0xFDE
 24531                           postdec2	equ	0xFDD
 24532                           plusw2	equ	0xFDB
 24533                           fsr2h	equ	0xFDA
 24534                           fsr2l	equ	0xFD9
 24535                           status	equ	0xFD8
 24536                           
 24537 ;; *************** function _ADC_SetChannel *****************
 24538 ;; Defined at:
 24539 ;;		line 155 in file "Library/ADC.c"
 24540 ;; Parameters:    Size  Location     Type
 24541 ;;  pChannel        1    wreg     enum E6742
 24542 ;; Auto vars:     Size  Location     Type
 24543 ;;  pChannel        1    1[BANK0 ] enum E6742
 24544 ;; Return value:  Size  Location     Type
 24545 ;;                  1    wreg      void 
 24546 ;; Registers used:
 24547 ;;		wreg, status,2, status,0
 24548 ;; Tracked objects:
 24549 ;;		On entry : 0/0
 24550 ;;		On exit  : 0/0
 24551 ;;		Unchanged: 0/0
 24552 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24553 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24554 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24555 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24556 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24557 ;;Total ram usage:        2 bytes
 24558 ;; Hardware stack levels used:    1
 24559 ;; Hardware stack levels required when called:    7
 24560 ;; This function calls:
 24561 ;;		Nothing
 24562 ;; This function is called by:
 24563 ;;		_ADC_Init
 24564 ;;		_ADC_Start
 24565 ;;		_ADC_ISR
 24566 ;;		_ADC_Sample
 24567 ;; This function uses a non-reentrant model
 24568 ;;
 24569                           
 24570                           	psect	text120
 24571  0165B4                     __ptext120:
 24572                           	opt stack 0
 24573  0165B4                     _ADC_SetChannel:
 24574                           	opt stack 20
 24575                           
 24576                           ; BSR set to: 0
 24577                           ;incstack = 0
 24578                           ;ADC_SetChannel@pChannel stored from wreg
 24579  0165B4  0100               	movlb	0	; () banked
 24580  0165B6  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24581                           
 24582                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24583  0165B8  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24584  0165BC  0100               	movlb	0	; () banked
 24585  0165BE  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24586  0165C0  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24587  0165C2  50C2               	movf	4034,w,c	;volatile
 24588  0165C4  0100               	movlb	0	; () banked
 24589  0165C6  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24590  0165C8  0BC3               	andlw	-61
 24591  0165CA  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24592  0165CC  6EC2               	movwf	4034,c	;volatile
 24593                           
 24594                           ; BSR set to: 0
 24595  0165CE  0012               	return		;funcret
 24596  0165D0                     __end_of_ADC_SetChannel:
 24597                           	opt stack 0
 24598                           tosu	equ	0xFFF
 24599                           tosh	equ	0xFFE
 24600                           tosl	equ	0xFFD
 24601                           pclath	equ	0xFFA
 24602                           tblptru	equ	0xFF8
 24603                           tblptrh	equ	0xFF7
 24604                           tblptrl	equ	0xFF6
 24605                           tablat	equ	0xFF5
 24606                           prodh	equ	0xFF4
 24607                           prodl	equ	0xFF3
 24608                           intcon	equ	0xFF2
 24609                           postinc0	equ	0xFEE
 24610                           wreg	equ	0xFE8
 24611                           indf1	equ	0xFE7
 24612                           postdec1	equ	0xFE5
 24613                           fsr1h	equ	0xFE2
 24614                           fsr1l	equ	0xFE1
 24615                           indf2	equ	0xFDF
 24616                           postinc2	equ	0xFDE
 24617                           postdec2	equ	0xFDD
 24618                           plusw2	equ	0xFDB
 24619                           fsr2h	equ	0xFDA
 24620                           fsr2l	equ	0xFD9
 24621                           status	equ	0xFD8
 24622                           
 24623 ;; *************** function _ADC_ConversionTime *****************
 24624 ;; Defined at:
 24625 ;;		line 199 in file "Library/ADC.c"
 24626 ;; Parameters:    Size  Location     Type
 24627 ;;  pCount          1    wreg     unsigned char 
 24628 ;; Auto vars:     Size  Location     Type
 24629 ;;  pCount          1    1[BANK0 ] unsigned char 
 24630 ;; Return value:  Size  Location     Type
 24631 ;;                  1    wreg      void 
 24632 ;; Registers used:
 24633 ;;		wreg, status,2, status,0
 24634 ;; Tracked objects:
 24635 ;;		On entry : 0/0
 24636 ;;		On exit  : 0/0
 24637 ;;		Unchanged: 0/0
 24638 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24639 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24640 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24641 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24642 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24643 ;;Total ram usage:        2 bytes
 24644 ;; Hardware stack levels used:    1
 24645 ;; Hardware stack levels required when called:    7
 24646 ;; This function calls:
 24647 ;;		Nothing
 24648 ;; This function is called by:
 24649 ;;		_ADC_Init
 24650 ;; This function uses a non-reentrant model
 24651 ;;
 24652                           
 24653                           	psect	text121
 24654  015D96                     __ptext121:
 24655                           	opt stack 0
 24656  015D96                     _ADC_ConversionTime:
 24657                           	opt stack 21
 24658                           
 24659                           ; BSR set to: 0
 24660                           ;incstack = 0
 24661                           ;ADC_ConversionTime@pCount stored from wreg
 24662  015D96  0100               	movlb	0	; () banked
 24663  015D98  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24664                           
 24665                           ;ADC.c: 201: if (pCount == 10)
 24666  015D9A  0E0A               	movlw	10
 24667  015D9C  0100               	movlb	0	; () banked
 24668  015D9E  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24669  015DA0  B4D8               	btfsc	status,2,c
 24670  015DA2  D00A               	goto	u10970
 24671                           
 24672                           ; BSR set to: 0
 24673                           ;ADC.c: 203: else if (pCount == 14)
 24674                           
 24675                           ; BSR set to: 0
 24676                           
 24677                           ; BSR set to: 0
 24678                           ;ADC.c: 202: pCount -= 2;
 24679  015DA4  0E0E               	movlw	14
 24680  015DA6  0100               	movlb	0	; () banked
 24681  015DA8  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24682  015DAA  B4D8               	btfsc	status,2,c
 24683  015DAC  D005               	goto	u10970
 24684                           
 24685                           ; BSR set to: 0
 24686                           ;ADC.c: 205: else if (pCount == 18)
 24687                           
 24688                           ; BSR set to: 0
 24689                           
 24690                           ; BSR set to: 0
 24691                           ;ADC.c: 204: pCount -= 2;
 24692  015DAE  0E12               	movlw	18
 24693  015DB0  0100               	movlb	0	; () banked
 24694  015DB2  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24695  015DB4  A4D8               	btfss	status,2,c
 24696  015DB6  D003               	goto	l1313
 24697  015DB8                     u10970:
 24698                           
 24699                           ; BSR set to: 0
 24700                           ;ADC.c: 206: pCount -= 2;
 24701  015DB8  0E02               	movlw	2
 24702  015DBA  0100               	movlb	0	; () banked
 24703  015DBC  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24704  015DBE                     l1313:
 24705                           
 24706                           ; BSR set to: 0
 24707                           ;ADC.c: 208: pCount <<= 1;
 24708                           
 24709                           ; BSR set to: 0
 24710                           
 24711                           ; BSR set to: 0
 24712  015DBE  0100               	movlb	0	; () banked
 24713  015DC0  90D8               	bcf	status,0,c
 24714  015DC2  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24715                           
 24716                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24717  015DC4  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24718  015DC8  0100               	movlb	0	; () banked
 24719  015DCA  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24720  015DCC  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24721  015DCE  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24722  015DD0  50C1               	movf	4033,w,c	;volatile
 24723  015DD2  0100               	movlb	0	; () banked
 24724  015DD4  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24725  015DD6  0BC7               	andlw	-57
 24726  015DD8  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24727  015DDA  6EC1               	movwf	4033,c	;volatile
 24728                           
 24729                           ; BSR set to: 0
 24730  015DDC  0012               	return		;funcret
 24731  015DDE                     __end_of_ADC_ConversionTime:
 24732                           	opt stack 0
 24733                           tosu	equ	0xFFF
 24734                           tosh	equ	0xFFE
 24735                           tosl	equ	0xFFD
 24736                           pclath	equ	0xFFA
 24737                           tblptru	equ	0xFF8
 24738                           tblptrh	equ	0xFF7
 24739                           tblptrl	equ	0xFF6
 24740                           tablat	equ	0xFF5
 24741                           prodh	equ	0xFF4
 24742                           prodl	equ	0xFF3
 24743                           intcon	equ	0xFF2
 24744                           postinc0	equ	0xFEE
 24745                           wreg	equ	0xFE8
 24746                           indf1	equ	0xFE7
 24747                           postdec1	equ	0xFE5
 24748                           fsr1h	equ	0xFE2
 24749                           fsr1l	equ	0xFE1
 24750                           indf2	equ	0xFDF
 24751                           postinc2	equ	0xFDE
 24752                           postdec2	equ	0xFDD
 24753                           plusw2	equ	0xFDB
 24754                           fsr2h	equ	0xFDA
 24755                           fsr2l	equ	0xFD9
 24756                           status	equ	0xFD8
 24757                           
 24758 ;; *************** function _ADC_ClockDivision *****************
 24759 ;; Defined at:
 24760 ;;		line 159 in file "Library/ADC.c"
 24761 ;; Parameters:    Size  Location     Type
 24762 ;;  pDivide         1    wreg     unsigned char 
 24763 ;; Auto vars:     Size  Location     Type
 24764 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24765 ;;  unfound         1    2[BANK0 ] unsigned char 
 24766 ;;  reg             1    1[BANK0 ] unsigned char 
 24767 ;; Return value:  Size  Location     Type
 24768 ;;                  1    wreg      void 
 24769 ;; Registers used:
 24770 ;;		wreg, status,2, status,0
 24771 ;; Tracked objects:
 24772 ;;		On entry : 0/0
 24773 ;;		On exit  : 0/0
 24774 ;;		Unchanged: 0/0
 24775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24776 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24777 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24779 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24780 ;;Total ram usage:        3 bytes
 24781 ;; Hardware stack levels used:    1
 24782 ;; Hardware stack levels required when called:    7
 24783 ;; This function calls:
 24784 ;;		Nothing
 24785 ;; This function is called by:
 24786 ;;		_ADC_Init
 24787 ;; This function uses a non-reentrant model
 24788 ;;
 24789                           
 24790                           	psect	text122
 24791  014FD6                     __ptext122:
 24792                           	opt stack 0
 24793  014FD6                     _ADC_ClockDivision:
 24794                           	opt stack 21
 24795                           
 24796                           ; BSR set to: 0
 24797                           ;incstack = 0
 24798                           ;ADC_ClockDivision@pDivide stored from wreg
 24799  014FD6  0100               	movlb	0	; () banked
 24800  014FD8  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24801                           
 24802                           ;ADC.c: 161: UINT8 reg = 0;
 24803  014FDA  0E00               	movlw	0
 24804  014FDC  0100               	movlb	0	; () banked
 24805  014FDE  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24806                           
 24807                           ;ADC.c: 162: bool unfound = 1;
 24808  014FE0  0E01               	movlw	1
 24809  014FE2  D002               	goto	L15
 24810  014FE4                     
 24811                           ; BSR set to: 0
 24812                           ;ADC.c: 167: reg = 0;
 24813                           
 24814                           ; BSR set to: 0
 24815  014FE4  0E00               	movlw	0
 24816  014FE6  D00C               	goto	L20
 24817  014FE8                     L15:
 24818  014FE8  0100               	movlb	0	; () banked
 24819  014FEA  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24820                           
 24821                           ;ADC.c: 169: break;
 24822  014FEC  D02D               	goto	l1296
 24823  014FEE                     
 24824                           ; BSR set to: 0
 24825                           ;ADC.c: 171: reg = 0b100;
 24826                           
 24827                           ; BSR set to: 0
 24828  014FEE  0E04               	movlw	4
 24829  014FF0  D007               	goto	L20
 24830  014FF2                     
 24831                           ; BSR set to: 0
 24832                           ;ADC.c: 175: reg = 0b001;
 24833                           
 24834                           ; BSR set to: 0
 24835  014FF2  0E01               	movlw	1
 24836  014FF4  D005               	goto	L20
 24837  014FF6                     
 24838                           ; BSR set to: 0
 24839                           ;ADC.c: 179: reg = 0b101;
 24840                           
 24841                           ; BSR set to: 0
 24842  014FF6  0E05               	movlw	5
 24843  014FF8  D003               	goto	L20
 24844  014FFA                     
 24845                           ; BSR set to: 0
 24846                           ;ADC.c: 183: reg = 0b010;
 24847                           
 24848                           ; BSR set to: 0
 24849  014FFA  0E02               	movlw	2
 24850  014FFC  D001               	goto	L20
 24851  014FFE                     
 24852                           ; BSR set to: 0
 24853                           ;ADC.c: 187: reg = 0b110;
 24854                           
 24855                           ; BSR set to: 0
 24856  014FFE  0E06               	movlw	6
 24857  015000                     L20:
 24858  015000  0100               	movlb	0	; () banked
 24859  015002  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24860                           
 24861                           ;ADC.c: 188: unfound = 0;
 24862  015004  0E00               	movlw	0
 24863  015006  D7F0               	goto	L15
 24864  015008                     
 24865                           ; BSR set to: 0
 24866                           ;ADC.c: 191: if (pDivide > 2)
 24867                           
 24868                           ; BSR set to: 0
 24869  015008  0E02               	movlw	2
 24870  01500A  0100               	movlb	0	; () banked
 24871  01500C  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24872  01500E  D003               	goto	l1303
 24873                           
 24874                           ; BSR set to: 0
 24875                           ;ADC.c: 192: pDivide--;
 24876  015010  0100               	movlb	0	; () banked
 24877  015012  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24878  015014  D019               	goto	l1296
 24879  015016                     l1303:
 24880                           
 24881                           ; BSR set to: 0
 24882                           ;ADC.c: 193: else
 24883                           ;ADC.c: 194: pDivide = 2;
 24884                           
 24885                           ; BSR set to: 0
 24886  015016  0E02               	movlw	2
 24887  015018  0100               	movlb	0	; () banked
 24888  01501A  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24889                           
 24890                           ; BSR set to: 0
 24891                           ;ADC.c: 195: };
 24892  01501C  D015               	goto	l1296
 24893  01501E                     
 24894                           ; BSR set to: 0
 24895                           
 24896                           ; BSR set to: 0
 24897  01501E  0100               	movlb	0	; () banked
 24898  015020  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24899                           
 24900                           ; Switch size 1, requested type "space"
 24901                           ; Number of cases is 6, Range of values is 2 to 64
 24902                           ; switch strategies available:
 24903                           ; Name         Instructions Cycles
 24904                           ; simple_byte           19    10 (average)
 24905                           ;	Chosen strategy is simple_byte
 24906  015022  0A02               	xorlw	2	; case 2
 24907  015024  B4D8               	btfsc	status,2,c
 24908  015026  D7DE               	goto	l1295
 24909  015028  0A06               	xorlw	6	; case 4
 24910  01502A  B4D8               	btfsc	status,2,c
 24911  01502C  D7E0               	goto	l1297
 24912  01502E  0A0C               	xorlw	12	; case 8
 24913  015030  B4D8               	btfsc	status,2,c
 24914  015032  D7DF               	goto	l1298
 24915  015034  0A18               	xorlw	24	; case 16
 24916  015036  B4D8               	btfsc	status,2,c
 24917  015038  D7DE               	goto	l1299
 24918  01503A  0A30               	xorlw	48	; case 32
 24919  01503C  B4D8               	btfsc	status,2,c
 24920  01503E  D7DD               	goto	l1300
 24921  015040  0A60               	xorlw	96	; case 64
 24922  015042  B4D8               	btfsc	status,2,c
 24923  015044  D7DC               	goto	l1301
 24924  015046  D7E0               	goto	l1302
 24925  015048                     l1296:
 24926                           
 24927                           ; BSR set to: 0
 24928                           
 24929                           ; BSR set to: 0
 24930                           
 24931                           ; BSR set to: 0
 24932  015048  0100               	movlb	0	; () banked
 24933  01504A  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24934  01504C  0100               	movlb	0	; () banked
 24935  01504E  A4D8               	btfss	status,2,c
 24936  015050  D7E6               	goto	l1294
 24937                           
 24938                           ; BSR set to: 0
 24939                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24940                           
 24941                           ; BSR set to: 0
 24942  015052  50C1               	movf	4033,w,c	;volatile
 24943  015054  0100               	movlb	0	; () banked
 24944  015056  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24945  015058  0BF8               	andlw	-8
 24946  01505A  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24947  01505C  6EC1               	movwf	4033,c	;volatile
 24948                           
 24949                           ; BSR set to: 0
 24950  01505E  0012               	return		;funcret
 24951  015060                     __end_of_ADC_ClockDivision:
 24952                           	opt stack 0
 24953                           tosu	equ	0xFFF
 24954                           tosh	equ	0xFFE
 24955                           tosl	equ	0xFFD
 24956                           pclath	equ	0xFFA
 24957                           tblptru	equ	0xFF8
 24958                           tblptrh	equ	0xFF7
 24959                           tblptrl	equ	0xFF6
 24960                           tablat	equ	0xFF5
 24961                           prodh	equ	0xFF4
 24962                           prodl	equ	0xFF3
 24963                           intcon	equ	0xFF2
 24964                           postinc0	equ	0xFEE
 24965                           wreg	equ	0xFE8
 24966                           indf1	equ	0xFE7
 24967                           postdec1	equ	0xFE5
 24968                           fsr1h	equ	0xFE2
 24969                           fsr1l	equ	0xFE1
 24970                           indf2	equ	0xFDF
 24971                           postinc2	equ	0xFDE
 24972                           postdec2	equ	0xFDD
 24973                           plusw2	equ	0xFDB
 24974                           fsr2h	equ	0xFDA
 24975                           fsr2l	equ	0xFD9
 24976                           status	equ	0xFD8
 24977                           
 24978 ;; *************** function _ADC_Calibrate *****************
 24979 ;; Defined at:
 24980 ;;		line 63 in file "Library/ADC.c"
 24981 ;; Parameters:    Size  Location     Type
 24982 ;;		None
 24983 ;; Auto vars:     Size  Location     Type
 24984 ;;		None
 24985 ;; Return value:  Size  Location     Type
 24986 ;;                  1    wreg      void 
 24987 ;; Registers used:
 24988 ;;		cstack
 24989 ;; Tracked objects:
 24990 ;;		On entry : 0/0
 24991 ;;		On exit  : 0/0
 24992 ;;		Unchanged: 0/0
 24993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24997 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24998 ;;Total ram usage:        0 bytes
 24999 ;; Hardware stack levels used:    1
 25000 ;; Hardware stack levels required when called:    8
 25001 ;; This function calls:
 25002 ;;		_ADC_Off
 25003 ;;		_ADC_On
 25004 ;; This function is called by:
 25005 ;;		_ADC_Init
 25006 ;; This function uses a non-reentrant model
 25007 ;;
 25008                           
 25009                           	psect	text123
 25010  0166D4                     __ptext123:
 25011                           	opt stack 0
 25012  0166D4                     _ADC_Calibrate:
 25013                           	opt stack 20
 25014                           
 25015                           ;ADC.c: 65: ADC_On();
 25016                           
 25017                           ; BSR set to: 0
 25018                           ;incstack = 0
 25019  0166D4  ECF6  F0B3         	call	_ADC_On	;wreg free
 25020                           
 25021                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 25022  0166D8  8CC1               	bsf	4033,6,c	;volatile
 25023                           
 25024                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 25025  0166DA  82C2               	bsf	4034,1,c	;volatile
 25026  0166DC  B2C2               	btfsc	4034,1,c	;volatile
 25027  0166DE  D7FE               	goto	l1254
 25028                           
 25029                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 25030  0166E0  9CC1               	bcf	4033,6,c	;volatile
 25031                           
 25032                           ;ADC.c: 73: ADC_Off();
 25033  0166E2  ECE8  F0B3         	call	_ADC_Off	;wreg free
 25034  0166E6  0012               	return		;funcret
 25035  0166E8                     __end_of_ADC_Calibrate:
 25036                           	opt stack 0
 25037                           tosu	equ	0xFFF
 25038                           tosh	equ	0xFFE
 25039                           tosl	equ	0xFFD
 25040                           pclath	equ	0xFFA
 25041                           tblptru	equ	0xFF8
 25042                           tblptrh	equ	0xFF7
 25043                           tblptrl	equ	0xFF6
 25044                           tablat	equ	0xFF5
 25045                           prodh	equ	0xFF4
 25046                           prodl	equ	0xFF3
 25047                           intcon	equ	0xFF2
 25048                           postinc0	equ	0xFEE
 25049                           wreg	equ	0xFE8
 25050                           indf1	equ	0xFE7
 25051                           postdec1	equ	0xFE5
 25052                           fsr1h	equ	0xFE2
 25053                           fsr1l	equ	0xFE1
 25054                           indf2	equ	0xFDF
 25055                           postinc2	equ	0xFDE
 25056                           postdec2	equ	0xFDD
 25057                           plusw2	equ	0xFDB
 25058                           fsr2h	equ	0xFDA
 25059                           fsr2l	equ	0xFD9
 25060                           status	equ	0xFD8
 25061                           
 25062 ;; *************** function _ADC_On *****************
 25063 ;; Defined at:
 25064 ;;		line 85 in file "Library/ADC.c"
 25065 ;; Parameters:    Size  Location     Type
 25066 ;;		None
 25067 ;; Auto vars:     Size  Location     Type
 25068 ;;		None
 25069 ;; Return value:  Size  Location     Type
 25070 ;;                  1    wreg      void 
 25071 ;; Registers used:
 25072 ;;		None
 25073 ;; Tracked objects:
 25074 ;;		On entry : 0/0
 25075 ;;		On exit  : 0/0
 25076 ;;		Unchanged: 0/0
 25077 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25078 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25079 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25080 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25081 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25082 ;;Total ram usage:        0 bytes
 25083 ;; Hardware stack levels used:    1
 25084 ;; Hardware stack levels required when called:    7
 25085 ;; This function calls:
 25086 ;;		Nothing
 25087 ;; This function is called by:
 25088 ;;		_ADC_Calibrate
 25089 ;;		_ADC_Start
 25090 ;;		_ADC_ISR
 25091 ;;		_ADC_Sample
 25092 ;; This function uses a non-reentrant model
 25093 ;;
 25094                           
 25095                           	psect	text124
 25096  0167EC                     __ptext124:
 25097                           	opt stack 0
 25098  0167EC                     _ADC_On:
 25099                           	opt stack 20
 25100                           
 25101                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 25102                           
 25103                           ;incstack = 0
 25104  0167EC  80C2               	bsf	4034,0,c	;volatile
 25105                           
 25106                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 25107  0167EE  9C9E               	bcf	3998,6,c	;volatile
 25108  0167F0  0012               	return		;funcret
 25109  0167F2                     __end_of_ADC_On:
 25110                           	opt stack 0
 25111                           tosu	equ	0xFFF
 25112                           tosh	equ	0xFFE
 25113                           tosl	equ	0xFFD
 25114                           pclath	equ	0xFFA
 25115                           tblptru	equ	0xFF8
 25116                           tblptrh	equ	0xFF7
 25117                           tblptrl	equ	0xFF6
 25118                           tablat	equ	0xFF5
 25119                           prodh	equ	0xFF4
 25120                           prodl	equ	0xFF3
 25121                           intcon	equ	0xFF2
 25122                           postinc0	equ	0xFEE
 25123                           wreg	equ	0xFE8
 25124                           indf1	equ	0xFE7
 25125                           postdec1	equ	0xFE5
 25126                           fsr1h	equ	0xFE2
 25127                           fsr1l	equ	0xFE1
 25128                           indf2	equ	0xFDF
 25129                           postinc2	equ	0xFDE
 25130                           postdec2	equ	0xFDD
 25131                           plusw2	equ	0xFDB
 25132                           fsr2h	equ	0xFDA
 25133                           fsr2l	equ	0xFD9
 25134                           status	equ	0xFD8
 25135                           
 25136 ;; *************** function _ADC_Off *****************
 25137 ;; Defined at:
 25138 ;;		line 94 in file "Library/ADC.c"
 25139 ;; Parameters:    Size  Location     Type
 25140 ;;		None
 25141 ;; Auto vars:     Size  Location     Type
 25142 ;;		None
 25143 ;; Return value:  Size  Location     Type
 25144 ;;                  1    wreg      void 
 25145 ;; Registers used:
 25146 ;;		None
 25147 ;; Tracked objects:
 25148 ;;		On entry : 0/0
 25149 ;;		On exit  : 0/0
 25150 ;;		Unchanged: 0/0
 25151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25152 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25155 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25156 ;;Total ram usage:        0 bytes
 25157 ;; Hardware stack levels used:    1
 25158 ;; Hardware stack levels required when called:    7
 25159 ;; This function calls:
 25160 ;;		Nothing
 25161 ;; This function is called by:
 25162 ;;		_ADC_Calibrate
 25163 ;;		_ADC_Start
 25164 ;;		_ADC_ISR
 25165 ;;		_ADC_Sample
 25166 ;; This function uses a non-reentrant model
 25167 ;;
 25168                           
 25169                           	psect	text125
 25170  0167D0                     __ptext125:
 25171                           	opt stack 0
 25172  0167D0                     _ADC_Off:
 25173                           	opt stack 20
 25174                           
 25175                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 25176                           
 25177                           ;incstack = 0
 25178  0167D0  90C2               	bcf	4034,0,c	;volatile
 25179                           
 25180                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 25181  0167D2  9C9E               	bcf	3998,6,c	;volatile
 25182                           
 25183                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 25184  0167D4  9C9D               	bcf	3997,6,c	;volatile
 25185  0167D6  0012               	return		;funcret
 25186  0167D8                     __end_of_ADC_Off:
 25187                           	opt stack 0
 25188                           tosu	equ	0xFFF
 25189                           tosh	equ	0xFFE
 25190                           tosl	equ	0xFFD
 25191                           pclath	equ	0xFFA
 25192                           tblptru	equ	0xFF8
 25193                           tblptrh	equ	0xFF7
 25194                           tblptrl	equ	0xFF6
 25195                           tablat	equ	0xFF5
 25196                           prodh	equ	0xFF4
 25197                           prodl	equ	0xFF3
 25198                           intcon	equ	0xFF2
 25199                           postinc0	equ	0xFEE
 25200                           wreg	equ	0xFE8
 25201                           indf1	equ	0xFE7
 25202                           postdec1	equ	0xFE5
 25203                           fsr1h	equ	0xFE2
 25204                           fsr1l	equ	0xFE1
 25205                           indf2	equ	0xFDF
 25206                           postinc2	equ	0xFDE
 25207                           postdec2	equ	0xFDD
 25208                           plusw2	equ	0xFDB
 25209                           fsr2h	equ	0xFDA
 25210                           fsr2l	equ	0xFD9
 25211                           status	equ	0xFD8
 25212                           
 25213 ;; *************** function _getMode *****************
 25214 ;; Defined at:
 25215 ;;		line 105 in file "main.c"
 25216 ;; Parameters:    Size  Location     Type
 25217 ;;		None
 25218 ;; Auto vars:     Size  Location     Type
 25219 ;;		None
 25220 ;; Return value:  Size  Location     Type
 25221 ;;                  1    wreg      void 
 25222 ;; Registers used:
 25223 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25224 ;; Tracked objects:
 25225 ;;		On entry : 0/0
 25226 ;;		On exit  : 0/0
 25227 ;;		Unchanged: 0/0
 25228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25229 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25230 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25232 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25233 ;;Total ram usage:        0 bytes
 25234 ;; Hardware stack levels used:    1
 25235 ;; Hardware stack levels required when called:   16
 25236 ;; This function calls:
 25237 ;;		_HMI_DIPSwitch
 25238 ;;		_HMI_DownSwitch
 25239 ;;		_HMI_LeftSwitch
 25240 ;;		_HMI_Poll
 25241 ;;		_HMI_RightSwitch
 25242 ;;		_HMI_UpSwitch
 25243 ;;		_MXK_DIPSwitch
 25244 ;;		_MXK_TestButton
 25245 ;; This function is called by:
 25246 ;;		_main
 25247 ;; This function uses a non-reentrant model
 25248 ;;
 25249                           
 25250                           	psect	text126
 25251  01418A                     __ptext126:
 25252                           	opt stack 0
 25253  01418A                     _getMode:
 25254                           	opt stack 14
 25255                           
 25256                           ;main.c: 106: HMI_Poll();
 25257                           
 25258                           ;incstack = 0
 25259  01418A  EC94  F0AA         	call	_HMI_Poll	;wreg free
 25260                           
 25261                           ;main.c: 107: mode = 0;
 25262  01418E  0E00               	movlw	0
 25263  014190  0103               	movlb	3	; () banked
 25264  014192  6F3B               	movwf	(_mode+1)& (0+255),b
 25265  014194  0E00               	movlw	0
 25266  014196  6F3A               	movwf	_mode& (0+255),b
 25267                           
 25268                           ; BSR set to: 3
 25269                           ;main.c: 108: if (HMIBoard.mUp.mGetState()) {
 25270  014198  EE23  F061         	lfsr	2,_HMIBoard+35
 25271  01419C  D801               	call	u11918
 25272  01419E  D00A               	goto	u11919
 25273  0141A0                     u11918:
 25274  0141A0  0005               	push	
 25275  0141A2  6EFA               	movwf	pclath,c
 25276  0141A4  50DE               	movf	postinc2,w,c
 25277  0141A6  6EFD               	movwf	tosl,c
 25278  0141A8  50DE               	movf	postinc2,w,c
 25279  0141AA  6EFE               	movwf	tosh,c
 25280  0141AC  50DE               	movf	postinc2,w,c
 25281  0141AE  6EFF               	movwf	tosu,c
 25282  0141B0  50FA               	movf	pclath,w,c
 25283  0141B2  0012               	return		;indir
 25284  0141B4                     u11919:
 25285  0141B4  0900               	iorlw	0
 25286  0141B6  B4D8               	btfsc	status,2,c
 25287  0141B8  D005               	goto	l2309
 25288                           
 25289                           ;main.c: 109: mode = 1;
 25290  0141BA  0E00               	movlw	0
 25291  0141BC  0103               	movlb	3	; () banked
 25292  0141BE  6F3B               	movwf	(_mode+1)& (0+255),b
 25293  0141C0  0E01               	movlw	1
 25294  0141C2  6F3A               	movwf	_mode& (0+255),b
 25295  0141C4                     l2309:
 25296                           
 25297                           ;main.c: 110: }
 25298                           ;main.c: 111: if (HMIBoard.mRight.mGetState()) {
 25299                           
 25300                           ; BSR set to: 3
 25301  0141C4  EE23  F04D         	lfsr	2,_HMIBoard+15
 25302  0141C8  D801               	call	u11938
 25303  0141CA  D00A               	goto	u11939
 25304  0141CC                     u11938:
 25305  0141CC  0005               	push	
 25306  0141CE  6EFA               	movwf	pclath,c
 25307  0141D0  50DE               	movf	postinc2,w,c
 25308  0141D2  6EFD               	movwf	tosl,c
 25309  0141D4  50DE               	movf	postinc2,w,c
 25310  0141D6  6EFE               	movwf	tosh,c
 25311  0141D8  50DE               	movf	postinc2,w,c
 25312  0141DA  6EFF               	movwf	tosu,c
 25313  0141DC  50FA               	movf	pclath,w,c
 25314  0141DE  0012               	return		;indir
 25315  0141E0                     u11939:
 25316  0141E0  0900               	iorlw	0
 25317  0141E2  B4D8               	btfsc	status,2,c
 25318  0141E4  D005               	goto	l2310
 25319                           
 25320                           ;main.c: 112: mode = 2;
 25321  0141E6  0E00               	movlw	0
 25322  0141E8  0103               	movlb	3	; () banked
 25323  0141EA  6F3B               	movwf	(_mode+1)& (0+255),b
 25324  0141EC  0E02               	movlw	2
 25325  0141EE  6F3A               	movwf	_mode& (0+255),b
 25326  0141F0                     l2310:
 25327                           
 25328                           ;main.c: 113: }
 25329                           ;main.c: 114: if (HMIBoard.mDown.mGetState()) {
 25330                           
 25331                           ; BSR set to: 3
 25332  0141F0  EE23  F06B         	lfsr	2,_HMIBoard+45
 25333  0141F4  D801               	call	u11958
 25334  0141F6  D00A               	goto	u11959
 25335  0141F8                     u11958:
 25336  0141F8  0005               	push	
 25337  0141FA  6EFA               	movwf	pclath,c
 25338  0141FC  50DE               	movf	postinc2,w,c
 25339  0141FE  6EFD               	movwf	tosl,c
 25340  014200  50DE               	movf	postinc2,w,c
 25341  014202  6EFE               	movwf	tosh,c
 25342  014204  50DE               	movf	postinc2,w,c
 25343  014206  6EFF               	movwf	tosu,c
 25344  014208  50FA               	movf	pclath,w,c
 25345  01420A  0012               	return		;indir
 25346  01420C                     u11959:
 25347  01420C  0900               	iorlw	0
 25348  01420E  B4D8               	btfsc	status,2,c
 25349  014210  D005               	goto	l2311
 25350                           
 25351                           ;main.c: 115: mode = 3;
 25352  014212  0E00               	movlw	0
 25353  014214  0103               	movlb	3	; () banked
 25354  014216  6F3B               	movwf	(_mode+1)& (0+255),b
 25355  014218  0E03               	movlw	3
 25356  01421A  6F3A               	movwf	_mode& (0+255),b
 25357  01421C                     l2311:
 25358                           
 25359                           ;main.c: 116: }
 25360                           ;main.c: 117: if (HMIBoard.mLeft.mGetState()) {
 25361                           
 25362                           ; BSR set to: 3
 25363  01421C  EE23  F057         	lfsr	2,_HMIBoard+25
 25364  014220  D801               	call	u11978
 25365  014222  D00A               	goto	u11979
 25366  014224                     u11978:
 25367  014224  0005               	push	
 25368  014226  6EFA               	movwf	pclath,c
 25369  014228  50DE               	movf	postinc2,w,c
 25370  01422A  6EFD               	movwf	tosl,c
 25371  01422C  50DE               	movf	postinc2,w,c
 25372  01422E  6EFE               	movwf	tosh,c
 25373  014230  50DE               	movf	postinc2,w,c
 25374  014232  6EFF               	movwf	tosu,c
 25375  014234  50FA               	movf	pclath,w,c
 25376  014236  0012               	return		;indir
 25377  014238                     u11979:
 25378  014238  0900               	iorlw	0
 25379  01423A  B4D8               	btfsc	status,2,c
 25380  01423C  0012               	return	
 25381                           
 25382                           ;main.c: 118: mode = 4;
 25383  01423E  0E00               	movlw	0
 25384  014240  0103               	movlb	3	; () banked
 25385  014242  6F3B               	movwf	(_mode+1)& (0+255),b
 25386  014244  0E04               	movlw	4
 25387  014246  6F3A               	movwf	_mode& (0+255),b
 25388  014248  0012               	return	
 25389  01424A                     __end_of_getMode:
 25390                           	opt stack 0
 25391                           tosu	equ	0xFFF
 25392                           tosh	equ	0xFFE
 25393                           tosl	equ	0xFFD
 25394                           pclath	equ	0xFFA
 25395                           tblptru	equ	0xFF8
 25396                           tblptrh	equ	0xFF7
 25397                           tblptrl	equ	0xFF6
 25398                           tablat	equ	0xFF5
 25399                           prodh	equ	0xFF4
 25400                           prodl	equ	0xFF3
 25401                           intcon	equ	0xFF2
 25402                           postinc0	equ	0xFEE
 25403                           wreg	equ	0xFE8
 25404                           indf1	equ	0xFE7
 25405                           postdec1	equ	0xFE5
 25406                           fsr1h	equ	0xFE2
 25407                           fsr1l	equ	0xFE1
 25408                           indf2	equ	0xFDF
 25409                           postinc2	equ	0xFDE
 25410                           postdec2	equ	0xFDD
 25411                           plusw2	equ	0xFDB
 25412                           fsr2h	equ	0xFDA
 25413                           fsr2l	equ	0xFD9
 25414                           status	equ	0xFD8
 25415                           
 25416 ;; *************** function _HMI_Poll *****************
 25417 ;; Defined at:
 25418 ;;		line 252 in file "HMI.c"
 25419 ;; Parameters:    Size  Location     Type
 25420 ;;		None
 25421 ;; Auto vars:     Size  Location     Type
 25422 ;;		None
 25423 ;; Return value:  Size  Location     Type
 25424 ;;                  1    wreg      void 
 25425 ;; Registers used:
 25426 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25427 ;; Tracked objects:
 25428 ;;		On entry : 0/0
 25429 ;;		On exit  : 0/0
 25430 ;;		Unchanged: 0/0
 25431 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25432 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25433 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25434 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25435 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25436 ;;Total ram usage:        0 bytes
 25437 ;; Hardware stack levels used:    1
 25438 ;; Hardware stack levels required when called:   15
 25439 ;; This function calls:
 25440 ;;		_Button_Poll
 25441 ;; This function is called by:
 25442 ;;		_getMode
 25443 ;;		_safeToGo
 25444 ;;		_main
 25445 ;; This function uses a non-reentrant model
 25446 ;;
 25447                           
 25448                           	psect	text127
 25449  015528                     __ptext127:
 25450                           	opt stack 0
 25451  015528                     _HMI_Poll:
 25452                           	opt stack 13
 25453                           
 25454                           ;HMI.c: 254: TRISE = 0xFC;
 25455                           
 25456                           ;incstack = 0
 25457  015528  0EFC               	movlw	252
 25458  01552A  6E96               	movwf	3990,c	;volatile
 25459                           
 25460                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25461  01552C  0E6E               	movlw	low (_HMIBoard+48)
 25462  01552E  0100               	movlb	0	; () banked
 25463  015530  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25464  015532  0E03               	movlw	high (_HMIBoard+48)
 25465  015534  0100               	movlb	0	; () banked
 25466  015536  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25467  015538  0E01               	movlw	1
 25468  01553A  0100               	movlb	0	; () banked
 25469  01553C  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25470  01553E  EC49  F098         	call	_Button_Poll	;wreg free
 25471                           
 25472                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25473  015542  0E50               	movlw	low (_HMIBoard+18)
 25474  015544  0100               	movlb	0	; () banked
 25475  015546  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25476  015548  0E03               	movlw	high (_HMIBoard+18)
 25477  01554A  0100               	movlb	0	; () banked
 25478  01554C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25479  01554E  0E01               	movlw	1
 25480  015550  0100               	movlb	0	; () banked
 25481  015552  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25482  015554  EC49  F098         	call	_Button_Poll	;wreg free
 25483                           
 25484                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25485  015558  0E46               	movlw	low (_HMIBoard+8)
 25486  01555A  0100               	movlb	0	; () banked
 25487  01555C  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25488  01555E  0E03               	movlw	high (_HMIBoard+8)
 25489  015560  0100               	movlb	0	; () banked
 25490  015562  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25491  015564  0E01               	movlw	1
 25492  015566  0100               	movlb	0	; () banked
 25493  015568  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25494  01556A  EC49  F098         	call	_Button_Poll	;wreg free
 25495                           
 25496                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25497  01556E  0E5A               	movlw	low (_HMIBoard+28)
 25498  015570  0100               	movlb	0	; () banked
 25499  015572  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25500  015574  0E03               	movlw	high (_HMIBoard+28)
 25501  015576  0100               	movlb	0	; () banked
 25502  015578  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25503  01557A  0E01               	movlw	1
 25504  01557C  0100               	movlb	0	; () banked
 25505  01557E  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25506  015580  EC49  F098         	call	_Button_Poll	;wreg free
 25507                           
 25508                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25509  015584  0E64               	movlw	low (_HMIBoard+38)
 25510  015586  0100               	movlb	0	; () banked
 25511  015588  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25512  01558A  0E03               	movlw	high (_HMIBoard+38)
 25513  01558C  0100               	movlb	0	; () banked
 25514  01558E  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25515  015590  0E01               	movlw	1
 25516  015592  0100               	movlb	0	; () banked
 25517  015594  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25518  015596  EC49  F098         	call	_Button_Poll	;wreg free
 25519  01559A  0012               	return		;funcret
 25520  01559C                     __end_of_HMI_Poll:
 25521                           	opt stack 0
 25522                           tosu	equ	0xFFF
 25523                           tosh	equ	0xFFE
 25524                           tosl	equ	0xFFD
 25525                           pclath	equ	0xFFA
 25526                           tblptru	equ	0xFF8
 25527                           tblptrh	equ	0xFF7
 25528                           tblptrl	equ	0xFF6
 25529                           tablat	equ	0xFF5
 25530                           prodh	equ	0xFF4
 25531                           prodl	equ	0xFF3
 25532                           intcon	equ	0xFF2
 25533                           postinc0	equ	0xFEE
 25534                           wreg	equ	0xFE8
 25535                           indf1	equ	0xFE7
 25536                           postdec1	equ	0xFE5
 25537                           fsr1h	equ	0xFE2
 25538                           fsr1l	equ	0xFE1
 25539                           indf2	equ	0xFDF
 25540                           postinc2	equ	0xFDE
 25541                           postdec2	equ	0xFDD
 25542                           plusw2	equ	0xFDB
 25543                           fsr2h	equ	0xFDA
 25544                           fsr2l	equ	0xFD9
 25545                           status	equ	0xFD8
 25546                           
 25547 ;; *************** function _Button_Poll *****************
 25548 ;; Defined at:
 25549 ;;		line 57 in file "Library/Button.c"
 25550 ;; Parameters:    Size  Location     Type
 25551 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25552 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25553 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25554 ;; Auto vars:     Size  Location     Type
 25555 ;;  Pin             1   35[BANK0 ] unsigned char 
 25556 ;; Return value:  Size  Location     Type
 25557 ;;                  1    wreg      unsigned char 
 25558 ;; Registers used:
 25559 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25560 ;; Tracked objects:
 25561 ;;		On entry : 0/0
 25562 ;;		On exit  : 0/0
 25563 ;;		Unchanged: 0/0
 25564 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25565 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25566 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25567 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25568 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25569 ;;Total ram usage:        9 bytes
 25570 ;; Hardware stack levels used:    1
 25571 ;; Hardware stack levels required when called:   14
 25572 ;; This function calls:
 25573 ;;		_Event_DIPSwitch
 25574 ;;		_Event_NULL
 25575 ;;		_Event_TestButton
 25576 ;;		_HMI_DIPSwitch
 25577 ;;		_HMI_DownSwitch
 25578 ;;		_HMI_LeftSwitch
 25579 ;;		_HMI_RightSwitch
 25580 ;;		_HMI_UpSwitch
 25581 ;;		_MXK_DIPSwitch
 25582 ;;		_MXK_TestButton
 25583 ;; This function is called by:
 25584 ;;		_HMI_Poll
 25585 ;;		_MXK_Poll
 25586 ;; This function uses a non-reentrant model
 25587 ;;
 25588                           
 25589                           	psect	text128
 25590  013092                     __ptext128:
 25591                           	opt stack 0
 25592  013092                     _Button_Poll:
 25593                           	opt stack 13
 25594                           
 25595                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25596                           
 25597                           ;incstack = 0
 25598  013092  0100               	movlb	0	; () banked
 25599  013094  EE20 F007          	lfsr	2,7
 25600  013098  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25601  01309A  26D9               	addwf	fsr2l,f,c
 25602  01309C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25603  01309E  22DA               	addwfc	fsr2h,f,c
 25604  0130A0  D801               	call	u9798
 25605  0130A2  D00A               	goto	u9799
 25606  0130A4                     u9798:
 25607  0130A4  0005               	push	
 25608  0130A6  6EFA               	movwf	pclath,c
 25609  0130A8  50DE               	movf	postinc2,w,c
 25610  0130AA  6EFD               	movwf	tosl,c
 25611  0130AC  50DE               	movf	postinc2,w,c
 25612  0130AE  6EFE               	movwf	tosh,c
 25613  0130B0  50DE               	movf	postinc2,w,c
 25614  0130B2  6EFF               	movwf	tosu,c
 25615  0130B4  50FA               	movf	pclath,w,c
 25616  0130B6  0012               	return		;indir
 25617  0130B8                     u9799:
 25618  0130B8  0100               	movlb	0	; () banked
 25619  0130BA  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25620                           
 25621                           ; BSR set to: 0
 25622                           ;Button.c: 61: if (pButton->mState == Pin)
 25623  0130BC  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25624  0130C0  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25625  0130C4  0100               	movlb	0	; () banked
 25626  0130C6  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25627  0130C8  18DE               	xorwf	postinc2,w,c
 25628  0130CA  A4D8               	btfss	status,2,c
 25629  0130CC  D021               	goto	l11
 25630                           
 25631                           ; BSR set to: 0
 25632                           ;Button.c: 62: {
 25633                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25634  0130CE  0100               	movlb	0	; () banked
 25635  0130D0  EE20 F001          	lfsr	2,1
 25636  0130D4  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25637  0130D6  26D9               	addwf	fsr2l,f,c
 25638  0130D8  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25639  0130DA  22DA               	addwfc	fsr2h,f,c
 25640  0130DC  0100               	movlb	0	; () banked
 25641  0130DE  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25642  0130E0  5CDE               	subwf	postinc2,w,c
 25643  0130E2  B0D8               	btfsc	status,0,c
 25644  0130E4  D00A               	goto	l12
 25645                           
 25646                           ; BSR set to: 0
 25647                           ;Button.c: 66: pButton->mCount = 0;
 25648  0130E6  0100               	movlb	0	; () banked
 25649  0130E8  EE20 F001          	lfsr	2,1
 25650  0130EC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25651  0130EE  26D9               	addwf	fsr2l,f,c
 25652  0130F0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25653  0130F2  22DA               	addwfc	fsr2h,f,c
 25654  0130F4  0E00               	movlw	0
 25655  0130F6  6EDF               	movwf	indf2,c
 25656  0130F8  0012               	return	
 25657  0130FA                     l12:
 25658                           
 25659                           ; BSR set to: 0
 25660                           ;Button.c: 67: else
 25661                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25662                           
 25663                           ; BSR set to: 0
 25664  0130FA  0100               	movlb	0	; () banked
 25665  0130FC  EE20 F001          	lfsr	2,1
 25666  013100  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25667  013102  26D9               	addwf	fsr2l,f,c
 25668  013104  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25669  013106  22DA               	addwfc	fsr2h,f,c
 25670  013108  0100               	movlb	0	; () banked
 25671  01310A  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25672  01310C  5EDF               	subwf	indf2,f,c
 25673                           
 25674                           ; BSR set to: 0
 25675                           ;Button.c: 69: }
 25676  01310E  0012               	return	
 25677  013110                     l11:
 25678                           
 25679                           ; BSR set to: 0
 25680                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25681                           
 25682                           ; BSR set to: 0
 25683  013110  0100               	movlb	0	; () banked
 25684  013112  EE20 F001          	lfsr	2,1
 25685  013116  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25686  013118  26D9               	addwf	fsr2l,f,c
 25687  01311A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25688  01311C  22DA               	addwfc	fsr2h,f,c
 25689  01311E  50DF               	movf	indf2,w,c
 25690  013120  0100               	movlb	0	; () banked
 25691  013122  6FD8               	movwf	??_Button_Poll& (0+255),b
 25692  013124  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25693  013126  0100               	movlb	0	; () banked
 25694  013128  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25695  01312A  0100               	movlb	0	; () banked
 25696  01312C  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25697  01312E  0E00               	movlw	0
 25698  013130  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25699  013132  0100               	movlb	0	; () banked
 25700  013134  EE20 F001          	lfsr	2,1
 25701  013138  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25702  01313A  26D9               	addwf	fsr2l,f,c
 25703  01313C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25704  01313E  22DA               	addwfc	fsr2h,f,c
 25705  013140  50DF               	movf	indf2,w,c
 25706  013142  0100               	movlb	0	; () banked
 25707  013144  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25708  013146  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25709  013148  0100               	movlb	0	; () banked
 25710  01314A  51D8               	movf	??_Button_Poll& (0+255),w,b
 25711  01314C  0100               	movlb	0	; () banked
 25712  01314E  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25713  013150  0100               	movlb	0	; () banked
 25714  013152  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25715  013154  0A80               	xorlw	128
 25716  013156  0100               	movlb	0	; () banked
 25717  013158  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25718  01315A  0100               	movlb	0	; () banked
 25719  01315C  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25720  01315E  0A80               	xorlw	128
 25721  013160  0100               	movlb	0	; () banked
 25722  013162  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25723  013164  B0D8               	btfsc	status,0,c
 25724  013166  0012               	return	
 25725                           
 25726                           ; BSR set to: 0
 25727                           ;Button.c: 73: {
 25728                           ;Button.c: 75: pButton->mCount += pIncrement;
 25729  013168  0100               	movlb	0	; () banked
 25730  01316A  EE20 F001          	lfsr	2,1
 25731  01316E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25732  013170  26D9               	addwf	fsr2l,f,c
 25733  013172  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25734  013174  22DA               	addwfc	fsr2h,f,c
 25735  013176  0100               	movlb	0	; () banked
 25736  013178  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25737  01317A  26DF               	addwf	indf2,f,c
 25738                           
 25739                           ; BSR set to: 0
 25740                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25741  01317C  0100               	movlb	0	; () banked
 25742  01317E  EE20 F002          	lfsr	2,2
 25743  013182  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25744  013184  26D9               	addwf	fsr2l,f,c
 25745  013186  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25746  013188  22DA               	addwfc	fsr2h,f,c
 25747  01318A  0100               	movlb	0	; () banked
 25748  01318C  EE10 F001          	lfsr	1,1
 25749  013190  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25750  013192  26E1               	addwf	fsr1l,f,c
 25751  013194  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25752  013196  22E2               	addwfc	fsr1h,f,c
 25753  013198  50E7               	movf	indf1,w,c
 25754  01319A  0100               	movlb	0	; () banked
 25755  01319C  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25756  01319E  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25757  0131A0  50DE               	movf	postinc2,w,c
 25758  0131A2  0100               	movlb	0	; () banked
 25759  0131A4  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25760  0131A6  50DE               	movf	postinc2,w,c
 25761  0131A8  0100               	movlb	0	; () banked
 25762  0131AA  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25763  0131AC  A0D8               	btfss	status,0,c
 25764  0131AE  0012               	return	
 25765                           
 25766                           ; BSR set to: 0
 25767                           ;Button.c: 77: {
 25768                           ;Button.c: 79: pButton->mState = Pin;
 25769  0131B0  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25770  0131B4  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25771  0131B8  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25772                           
 25773                           ; BSR set to: 0
 25774                           ;Button.c: 80: pButton->mCount = 0;
 25775  0131BC  0100               	movlb	0	; () banked
 25776  0131BE  EE20 F001          	lfsr	2,1
 25777  0131C2  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25778  0131C4  26D9               	addwf	fsr2l,f,c
 25779  0131C6  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25780  0131C8  22DA               	addwfc	fsr2h,f,c
 25781  0131CA  0E00               	movlw	0
 25782  0131CC  6EDF               	movwf	indf2,c
 25783                           
 25784                           ; BSR set to: 0
 25785                           ;Button.c: 83: pButton->mFunction(Pin);
 25786  0131CE  0100               	movlb	0	; () banked
 25787  0131D0  EE20 F004          	lfsr	2,4
 25788  0131D4  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25789  0131D6  26D9               	addwf	fsr2l,f,c
 25790  0131D8  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25791  0131DA  22DA               	addwfc	fsr2h,f,c
 25792  0131DC  D801               	call	u9848
 25793  0131DE  0012               	return	
 25794  0131E0                     u9848:
 25795  0131E0  0005               	push	
 25796  0131E2  6EFA               	movwf	pclath,c
 25797  0131E4  50DE               	movf	postinc2,w,c
 25798  0131E6  6EFD               	movwf	tosl,c
 25799  0131E8  50DE               	movf	postinc2,w,c
 25800  0131EA  6EFE               	movwf	tosh,c
 25801  0131EC  50DE               	movf	postinc2,w,c
 25802  0131EE  6EFF               	movwf	tosu,c
 25803  0131F0  50FA               	movf	pclath,w,c
 25804  0131F2  0100               	movlb	0	; () banked
 25805  0131F4  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25806  0131F6  0012               	return		;indir
 25807  0131F8                     __end_of_Button_Poll:
 25808                           	opt stack 0
 25809                           tosu	equ	0xFFF
 25810                           tosh	equ	0xFFE
 25811                           tosl	equ	0xFFD
 25812                           pclath	equ	0xFFA
 25813                           tblptru	equ	0xFF8
 25814                           tblptrh	equ	0xFF7
 25815                           tblptrl	equ	0xFF6
 25816                           tablat	equ	0xFF5
 25817                           prodh	equ	0xFF4
 25818                           prodl	equ	0xFF3
 25819                           intcon	equ	0xFF2
 25820                           postinc0	equ	0xFEE
 25821                           wreg	equ	0xFE8
 25822                           indf1	equ	0xFE7
 25823                           postdec1	equ	0xFE5
 25824                           fsr1h	equ	0xFE2
 25825                           fsr1l	equ	0xFE1
 25826                           indf2	equ	0xFDF
 25827                           postinc2	equ	0xFDE
 25828                           postdec2	equ	0xFDD
 25829                           plusw2	equ	0xFDB
 25830                           fsr2h	equ	0xFDA
 25831                           fsr2l	equ	0xFD9
 25832                           status	equ	0xFD8
 25833                           
 25834 ;; *************** function _MXK_DIPSwitch *****************
 25835 ;; Defined at:
 25836 ;;		line 24 in file "Library/MXK.c"
 25837 ;; Parameters:    Size  Location     Type
 25838 ;;		None
 25839 ;; Auto vars:     Size  Location     Type
 25840 ;;		None
 25841 ;; Return value:  Size  Location     Type
 25842 ;;                  1    wreg      unsigned char 
 25843 ;; Registers used:
 25844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25845 ;; Tracked objects:
 25846 ;;		On entry : 0/0
 25847 ;;		On exit  : 0/0
 25848 ;;		Unchanged: 0/0
 25849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25854 ;;Total ram usage:        0 bytes
 25855 ;; Hardware stack levels used:    1
 25856 ;; Hardware stack levels required when called:    8
 25857 ;; This function calls:
 25858 ;;		_Port_GetQuad
 25859 ;; This function is called by:
 25860 ;;		_FunctInitButton
 25861 ;;		_Button_Poll
 25862 ;;		_getMode
 25863 ;; This function uses a non-reentrant model
 25864 ;;
 25865                           
 25866                           	psect	text129
 25867  016602                     __ptext129:
 25868                           	opt stack 0
 25869  016602                     _MXK_DIPSwitch:
 25870                           	opt stack 18
 25871                           
 25872                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25873                           
 25874                           ;incstack = 0
 25875  016602  0E9B               	movlw	low _PortD
 25876  016604  0100               	movlb	0	; () banked
 25877  016606  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25878  016608  0E00               	movlw	high _PortD
 25879  01660A  0100               	movlb	0	; () banked
 25880  01660C  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25881  01660E  0E00               	movlw	0
 25882  016610  0100               	movlb	0	; () banked
 25883  016612  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25884  016614  EC82  F0AE         	call	_Port_GetQuad
 25885  016618  0012               	return	
 25886  01661A                     __end_of_MXK_DIPSwitch:
 25887                           	opt stack 0
 25888                           tosu	equ	0xFFF
 25889                           tosh	equ	0xFFE
 25890                           tosl	equ	0xFFD
 25891                           pclath	equ	0xFFA
 25892                           tblptru	equ	0xFF8
 25893                           tblptrh	equ	0xFF7
 25894                           tblptrl	equ	0xFF6
 25895                           tablat	equ	0xFF5
 25896                           prodh	equ	0xFF4
 25897                           prodl	equ	0xFF3
 25898                           intcon	equ	0xFF2
 25899                           postinc0	equ	0xFEE
 25900                           wreg	equ	0xFE8
 25901                           indf1	equ	0xFE7
 25902                           postdec1	equ	0xFE5
 25903                           fsr1h	equ	0xFE2
 25904                           fsr1l	equ	0xFE1
 25905                           indf2	equ	0xFDF
 25906                           postinc2	equ	0xFDE
 25907                           postdec2	equ	0xFDD
 25908                           plusw2	equ	0xFDB
 25909                           fsr2h	equ	0xFDA
 25910                           fsr2l	equ	0xFD9
 25911                           status	equ	0xFD8
 25912                           
 25913 ;; *************** function _HMI_DIPSwitch *****************
 25914 ;; Defined at:
 25915 ;;		line 47 in file "HMI.c"
 25916 ;; Parameters:    Size  Location     Type
 25917 ;;		None
 25918 ;; Auto vars:     Size  Location     Type
 25919 ;;		None
 25920 ;; Return value:  Size  Location     Type
 25921 ;;                  1    wreg      unsigned char 
 25922 ;; Registers used:
 25923 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25924 ;; Tracked objects:
 25925 ;;		On entry : 0/0
 25926 ;;		On exit  : 0/0
 25927 ;;		Unchanged: 0/0
 25928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25929 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25930 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25932 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25933 ;;Total ram usage:        0 bytes
 25934 ;; Hardware stack levels used:    1
 25935 ;; Hardware stack levels required when called:    8
 25936 ;; This function calls:
 25937 ;;		_Port_GetQuad
 25938 ;; This function is called by:
 25939 ;;		_HMI_Init
 25940 ;;		_Button_Poll
 25941 ;;		_getMode
 25942 ;; This function uses a non-reentrant model
 25943 ;;
 25944                           
 25945                           	psect	text130
 25946  01661A                     __ptext130:
 25947                           	opt stack 0
 25948  01661A                     _HMI_DIPSwitch:
 25949                           	opt stack 18
 25950                           
 25951                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25952                           
 25953                           ;incstack = 0
 25954  01661A  0E91               	movlw	low _PortE
 25955  01661C  0100               	movlb	0	; () banked
 25956  01661E  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25957  016620  0E00               	movlw	high _PortE
 25958  016622  0100               	movlb	0	; () banked
 25959  016624  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25960  016626  0E00               	movlw	0
 25961  016628  0100               	movlb	0	; () banked
 25962  01662A  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25963  01662C  EC82  F0AE         	call	_Port_GetQuad	;wreg free
 25964  016630  0012               	return	
 25965  016632                     __end_of_HMI_DIPSwitch:
 25966                           	opt stack 0
 25967                           tosu	equ	0xFFF
 25968                           tosh	equ	0xFFE
 25969                           tosl	equ	0xFFD
 25970                           pclath	equ	0xFFA
 25971                           tblptru	equ	0xFF8
 25972                           tblptrh	equ	0xFF7
 25973                           tblptrl	equ	0xFF6
 25974                           tablat	equ	0xFF5
 25975                           prodh	equ	0xFF4
 25976                           prodl	equ	0xFF3
 25977                           intcon	equ	0xFF2
 25978                           postinc0	equ	0xFEE
 25979                           wreg	equ	0xFE8
 25980                           indf1	equ	0xFE7
 25981                           postdec1	equ	0xFE5
 25982                           fsr1h	equ	0xFE2
 25983                           fsr1l	equ	0xFE1
 25984                           indf2	equ	0xFDF
 25985                           postinc2	equ	0xFDE
 25986                           postdec2	equ	0xFDD
 25987                           plusw2	equ	0xFDB
 25988                           fsr2h	equ	0xFDA
 25989                           fsr2l	equ	0xFD9
 25990                           status	equ	0xFD8
 25991                           
 25992 ;; *************** function _HMI_DownSwitch *****************
 25993 ;; Defined at:
 25994 ;;		line 42 in file "HMI.c"
 25995 ;; Parameters:    Size  Location     Type
 25996 ;;		None
 25997 ;; Auto vars:     Size  Location     Type
 25998 ;;		None
 25999 ;; Return value:  Size  Location     Type
 26000 ;;                  1    wreg      unsigned char 
 26001 ;; Registers used:
 26002 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26003 ;; Tracked objects:
 26004 ;;		On entry : 0/0
 26005 ;;		On exit  : 0/0
 26006 ;;		Unchanged: 0/0
 26007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26008 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26009 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26010 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26011 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26012 ;;Total ram usage:        0 bytes
 26013 ;; Hardware stack levels used:    1
 26014 ;; Hardware stack levels required when called:    8
 26015 ;; This function calls:
 26016 ;;		_Port_GetPin
 26017 ;; This function is called by:
 26018 ;;		_HMI_Init
 26019 ;;		_Button_Poll
 26020 ;;		_getMode
 26021 ;; This function uses a non-reentrant model
 26022 ;;
 26023                           
 26024                           	psect	text131
 26025  016632                     __ptext131:
 26026                           	opt stack 0
 26027  016632                     _HMI_DownSwitch:
 26028                           	opt stack 18
 26029                           
 26030                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 26031                           
 26032                           ;incstack = 0
 26033  016632  0E91               	movlw	low _PortE
 26034  016634  0100               	movlb	0	; () banked
 26035  016636  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26036  016638  0E00               	movlw	high _PortE
 26037  01663A  0100               	movlb	0	; () banked
 26038  01663C  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26039  01663E  0E06               	movlw	6
 26040  016640  0100               	movlb	0	; () banked
 26041  016642  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26042  016644  EC59  F0AF         	call	_Port_GetPin	;wreg free
 26043  016648  0012               	return	
 26044  01664A                     __end_of_HMI_DownSwitch:
 26045                           	opt stack 0
 26046                           tosu	equ	0xFFF
 26047                           tosh	equ	0xFFE
 26048                           tosl	equ	0xFFD
 26049                           pclath	equ	0xFFA
 26050                           tblptru	equ	0xFF8
 26051                           tblptrh	equ	0xFF7
 26052                           tblptrl	equ	0xFF6
 26053                           tablat	equ	0xFF5
 26054                           prodh	equ	0xFF4
 26055                           prodl	equ	0xFF3
 26056                           intcon	equ	0xFF2
 26057                           postinc0	equ	0xFEE
 26058                           wreg	equ	0xFE8
 26059                           indf1	equ	0xFE7
 26060                           postdec1	equ	0xFE5
 26061                           fsr1h	equ	0xFE2
 26062                           fsr1l	equ	0xFE1
 26063                           indf2	equ	0xFDF
 26064                           postinc2	equ	0xFDE
 26065                           postdec2	equ	0xFDD
 26066                           plusw2	equ	0xFDB
 26067                           fsr2h	equ	0xFDA
 26068                           fsr2l	equ	0xFD9
 26069                           status	equ	0xFD8
 26070                           
 26071 ;; *************** function _HMI_UpSwitch *****************
 26072 ;; Defined at:
 26073 ;;		line 37 in file "HMI.c"
 26074 ;; Parameters:    Size  Location     Type
 26075 ;;		None
 26076 ;; Auto vars:     Size  Location     Type
 26077 ;;		None
 26078 ;; Return value:  Size  Location     Type
 26079 ;;                  1    wreg      unsigned char 
 26080 ;; Registers used:
 26081 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26082 ;; Tracked objects:
 26083 ;;		On entry : 0/0
 26084 ;;		On exit  : 0/0
 26085 ;;		Unchanged: 0/0
 26086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26091 ;;Total ram usage:        0 bytes
 26092 ;; Hardware stack levels used:    1
 26093 ;; Hardware stack levels required when called:    8
 26094 ;; This function calls:
 26095 ;;		_Port_GetPin
 26096 ;; This function is called by:
 26097 ;;		_HMI_Init
 26098 ;;		_Button_Poll
 26099 ;;		_getMode
 26100 ;; This function uses a non-reentrant model
 26101 ;;
 26102                           
 26103                           	psect	text132
 26104  01664A                     __ptext132:
 26105                           	opt stack 0
 26106  01664A                     _HMI_UpSwitch:
 26107                           	opt stack 18
 26108                           
 26109                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 26110                           
 26111                           ;incstack = 0
 26112  01664A  0E91               	movlw	low _PortE
 26113  01664C  0100               	movlb	0	; () banked
 26114  01664E  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26115  016650  0E00               	movlw	high _PortE
 26116  016652  0100               	movlb	0	; () banked
 26117  016654  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26118  016656  0E07               	movlw	7
 26119  016658  0100               	movlb	0	; () banked
 26120  01665A  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26121  01665C  EC59  F0AF         	call	_Port_GetPin	;wreg free
 26122  016660  0012               	return	
 26123  016662                     __end_of_HMI_UpSwitch:
 26124                           	opt stack 0
 26125                           tosu	equ	0xFFF
 26126                           tosh	equ	0xFFE
 26127                           tosl	equ	0xFFD
 26128                           pclath	equ	0xFFA
 26129                           tblptru	equ	0xFF8
 26130                           tblptrh	equ	0xFF7
 26131                           tblptrl	equ	0xFF6
 26132                           tablat	equ	0xFF5
 26133                           prodh	equ	0xFF4
 26134                           prodl	equ	0xFF3
 26135                           intcon	equ	0xFF2
 26136                           postinc0	equ	0xFEE
 26137                           wreg	equ	0xFE8
 26138                           indf1	equ	0xFE7
 26139                           postdec1	equ	0xFE5
 26140                           fsr1h	equ	0xFE2
 26141                           fsr1l	equ	0xFE1
 26142                           indf2	equ	0xFDF
 26143                           postinc2	equ	0xFDE
 26144                           postdec2	equ	0xFDD
 26145                           plusw2	equ	0xFDB
 26146                           fsr2h	equ	0xFDA
 26147                           fsr2l	equ	0xFD9
 26148                           status	equ	0xFD8
 26149                           
 26150 ;; *************** function _HMI_RightSwitch *****************
 26151 ;; Defined at:
 26152 ;;		line 32 in file "HMI.c"
 26153 ;; Parameters:    Size  Location     Type
 26154 ;;		None
 26155 ;; Auto vars:     Size  Location     Type
 26156 ;;		None
 26157 ;; Return value:  Size  Location     Type
 26158 ;;                  1    wreg      unsigned char 
 26159 ;; Registers used:
 26160 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26161 ;; Tracked objects:
 26162 ;;		On entry : 0/0
 26163 ;;		On exit  : 0/0
 26164 ;;		Unchanged: 0/0
 26165 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26166 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26167 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26168 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26169 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26170 ;;Total ram usage:        0 bytes
 26171 ;; Hardware stack levels used:    1
 26172 ;; Hardware stack levels required when called:    8
 26173 ;; This function calls:
 26174 ;;		_Port_GetPin
 26175 ;; This function is called by:
 26176 ;;		_HMI_Init
 26177 ;;		_Button_Poll
 26178 ;;		_getMode
 26179 ;; This function uses a non-reentrant model
 26180 ;;
 26181                           
 26182                           	psect	text133
 26183  016662                     __ptext133:
 26184                           	opt stack 0
 26185  016662                     _HMI_RightSwitch:
 26186                           	opt stack 18
 26187                           
 26188                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 26189                           
 26190                           ;incstack = 0
 26191  016662  0E91               	movlw	low _PortE
 26192  016664  0100               	movlb	0	; () banked
 26193  016666  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26194  016668  0E00               	movlw	high _PortE
 26195  01666A  0100               	movlb	0	; () banked
 26196  01666C  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26197  01666E  0E04               	movlw	4
 26198  016670  0100               	movlb	0	; () banked
 26199  016672  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26200  016674  EC59  F0AF         	call	_Port_GetPin	;wreg free
 26201  016678  0012               	return	
 26202  01667A                     __end_of_HMI_RightSwitch:
 26203                           	opt stack 0
 26204                           tosu	equ	0xFFF
 26205                           tosh	equ	0xFFE
 26206                           tosl	equ	0xFFD
 26207                           pclath	equ	0xFFA
 26208                           tblptru	equ	0xFF8
 26209                           tblptrh	equ	0xFF7
 26210                           tblptrl	equ	0xFF6
 26211                           tablat	equ	0xFF5
 26212                           prodh	equ	0xFF4
 26213                           prodl	equ	0xFF3
 26214                           intcon	equ	0xFF2
 26215                           postinc0	equ	0xFEE
 26216                           wreg	equ	0xFE8
 26217                           indf1	equ	0xFE7
 26218                           postdec1	equ	0xFE5
 26219                           fsr1h	equ	0xFE2
 26220                           fsr1l	equ	0xFE1
 26221                           indf2	equ	0xFDF
 26222                           postinc2	equ	0xFDE
 26223                           postdec2	equ	0xFDD
 26224                           plusw2	equ	0xFDB
 26225                           fsr2h	equ	0xFDA
 26226                           fsr2l	equ	0xFD9
 26227                           status	equ	0xFD8
 26228                           
 26229 ;; *************** function _HMI_LeftSwitch *****************
 26230 ;; Defined at:
 26231 ;;		line 27 in file "HMI.c"
 26232 ;; Parameters:    Size  Location     Type
 26233 ;;		None
 26234 ;; Auto vars:     Size  Location     Type
 26235 ;;		None
 26236 ;; Return value:  Size  Location     Type
 26237 ;;                  1    wreg      unsigned char 
 26238 ;; Registers used:
 26239 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26240 ;; Tracked objects:
 26241 ;;		On entry : 0/0
 26242 ;;		On exit  : 0/0
 26243 ;;		Unchanged: 0/0
 26244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26245 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26246 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26248 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26249 ;;Total ram usage:        0 bytes
 26250 ;; Hardware stack levels used:    1
 26251 ;; Hardware stack levels required when called:    8
 26252 ;; This function calls:
 26253 ;;		_Port_GetPin
 26254 ;; This function is called by:
 26255 ;;		_HMI_Init
 26256 ;;		_Button_Poll
 26257 ;;		_getMode
 26258 ;; This function uses a non-reentrant model
 26259 ;;
 26260                           
 26261                           	psect	text134
 26262  01667A                     __ptext134:
 26263                           	opt stack 0
 26264  01667A                     _HMI_LeftSwitch:
 26265                           	opt stack 18
 26266                           
 26267                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26268                           
 26269                           ;incstack = 0
 26270  01667A  0E91               	movlw	low _PortE
 26271  01667C  0100               	movlb	0	; () banked
 26272  01667E  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26273  016680  0E00               	movlw	high _PortE
 26274  016682  0100               	movlb	0	; () banked
 26275  016684  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26276  016686  0E05               	movlw	5
 26277  016688  0100               	movlb	0	; () banked
 26278  01668A  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26279  01668C  EC59  F0AF         	call	_Port_GetPin	;wreg free
 26280  016690  0012               	return	
 26281  016692                     __end_of_HMI_LeftSwitch:
 26282                           	opt stack 0
 26283                           tosu	equ	0xFFF
 26284                           tosh	equ	0xFFE
 26285                           tosl	equ	0xFFD
 26286                           pclath	equ	0xFFA
 26287                           tblptru	equ	0xFF8
 26288                           tblptrh	equ	0xFF7
 26289                           tblptrl	equ	0xFF6
 26290                           tablat	equ	0xFF5
 26291                           prodh	equ	0xFF4
 26292                           prodl	equ	0xFF3
 26293                           intcon	equ	0xFF2
 26294                           postinc0	equ	0xFEE
 26295                           wreg	equ	0xFE8
 26296                           indf1	equ	0xFE7
 26297                           postdec1	equ	0xFE5
 26298                           fsr1h	equ	0xFE2
 26299                           fsr1l	equ	0xFE1
 26300                           indf2	equ	0xFDF
 26301                           postinc2	equ	0xFDE
 26302                           postdec2	equ	0xFDD
 26303                           plusw2	equ	0xFDB
 26304                           fsr2h	equ	0xFDA
 26305                           fsr2l	equ	0xFD9
 26306                           status	equ	0xFD8
 26307                           
 26308 ;; *************** function _MXK_TestButton *****************
 26309 ;; Defined at:
 26310 ;;		line 14 in file "Library/MXK.c"
 26311 ;; Parameters:    Size  Location     Type
 26312 ;;		None
 26313 ;; Auto vars:     Size  Location     Type
 26314 ;;		None
 26315 ;; Return value:  Size  Location     Type
 26316 ;;                  1    wreg      unsigned char 
 26317 ;; Registers used:
 26318 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26319 ;; Tracked objects:
 26320 ;;		On entry : 0/0
 26321 ;;		On exit  : 0/0
 26322 ;;		Unchanged: 0/0
 26323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26324 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26325 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26326 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26327 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26328 ;;Total ram usage:        0 bytes
 26329 ;; Hardware stack levels used:    1
 26330 ;; Hardware stack levels required when called:    8
 26331 ;; This function calls:
 26332 ;;		_Port_GetPin
 26333 ;; This function is called by:
 26334 ;;		_FunctInitButton
 26335 ;;		_Button_Poll
 26336 ;;		_getMode
 26337 ;; This function uses a non-reentrant model
 26338 ;;
 26339                           
 26340                           	psect	text135
 26341  016692                     __ptext135:
 26342                           	opt stack 0
 26343  016692                     _MXK_TestButton:
 26344                           	opt stack 18
 26345                           
 26346                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26347                           
 26348                           ;incstack = 0
 26349  016692  0EAC               	movlw	low _PortB
 26350  016694  0100               	movlb	0	; () banked
 26351  016696  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26352  016698  0E03               	movlw	high _PortB
 26353  01669A  0100               	movlb	0	; () banked
 26354  01669C  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26355  01669E  0E04               	movlw	4
 26356  0166A0  0100               	movlb	0	; () banked
 26357  0166A2  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26358  0166A4  EC59  F0AF         	call	_Port_GetPin	;wreg free
 26359  0166A8  0012               	return	
 26360  0166AA                     __end_of_MXK_TestButton:
 26361                           	opt stack 0
 26362                           tosu	equ	0xFFF
 26363                           tosh	equ	0xFFE
 26364                           tosl	equ	0xFFD
 26365                           pclath	equ	0xFFA
 26366                           tblptru	equ	0xFF8
 26367                           tblptrh	equ	0xFF7
 26368                           tblptrl	equ	0xFF6
 26369                           tablat	equ	0xFF5
 26370                           prodh	equ	0xFF4
 26371                           prodl	equ	0xFF3
 26372                           intcon	equ	0xFF2
 26373                           postinc0	equ	0xFEE
 26374                           wreg	equ	0xFE8
 26375                           indf1	equ	0xFE7
 26376                           postdec1	equ	0xFE5
 26377                           fsr1h	equ	0xFE2
 26378                           fsr1l	equ	0xFE1
 26379                           indf2	equ	0xFDF
 26380                           postinc2	equ	0xFDE
 26381                           postdec2	equ	0xFDD
 26382                           plusw2	equ	0xFDB
 26383                           fsr2h	equ	0xFDA
 26384                           fsr2l	equ	0xFD9
 26385                           status	equ	0xFD8
 26386                           
 26387 ;; *************** function _Port_GetQuad *****************
 26388 ;; Defined at:
 26389 ;;		line 498 in file "Library/Port.c"
 26390 ;; Parameters:    Size  Location     Type
 26391 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26392 ;;		 -> PortE(10), PortD(10), 
 26393 ;;  pQuad           1    2[BANK0 ] enum E6776
 26394 ;; Auto vars:     Size  Location     Type
 26395 ;;  Output          1    5[BANK0 ] unsigned char 
 26396 ;; Return value:  Size  Location     Type
 26397 ;;                  1    wreg      unsigned char 
 26398 ;; Registers used:
 26399 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26400 ;; Tracked objects:
 26401 ;;		On entry : 0/0
 26402 ;;		On exit  : 0/0
 26403 ;;		Unchanged: 0/0
 26404 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26405 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26406 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26407 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26408 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26409 ;;Total ram usage:        6 bytes
 26410 ;; Hardware stack levels used:    1
 26411 ;; Hardware stack levels required when called:    7
 26412 ;; This function calls:
 26413 ;;		Nothing
 26414 ;; This function is called by:
 26415 ;;		_HMI_DIPSwitch
 26416 ;;		_MXK_DIPSwitch
 26417 ;;		_Port_ToggleQuad
 26418 ;; This function uses a non-reentrant model
 26419 ;;
 26420                           
 26421                           	psect	text136
 26422  015D04                     __ptext136:
 26423                           	opt stack 0
 26424  015D04                     _Port_GetQuad:
 26425                           	opt stack 18
 26426                           
 26427                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26428                           
 26429                           ;incstack = 0
 26430  015D04  0100               	movlb	0	; () banked
 26431  015D06  EE20 F006          	lfsr	2,6
 26432  015D0A  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26433  015D0C  26D9               	addwf	fsr2l,f,c
 26434  015D0E  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26435  015D10  22DA               	addwfc	fsr2h,f,c
 26436  015D12  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26437  015D16  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26438  015D1A  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26439  015D1E  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26440  015D22  50DF               	movf	indf2,w,c
 26441  015D24  0100               	movlb	0	; () banked
 26442  015D26  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26443                           
 26444                           ; BSR set to: 0
 26445                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26446  015D28  0100               	movlb	0	; () banked
 26447  015D2A  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26448  015D2C  0D04               	mullw	4
 26449  015D2E  28F3               	incf	prodl,w,c
 26450  015D30  0100               	movlb	0	; () banked
 26451  015D32  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26452  015D34  D003               	goto	u9340
 26453  015D36                     u9345:
 26454  015D36  0100               	movlb	0	; () banked
 26455  015D38  90D8               	bcf	status,0,c
 26456  015D3A  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26457  015D3C                     u9340:
 26458  015D3C  0100               	movlb	0	; () banked
 26459  015D3E  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26460  015D40  D7FA               	goto	u9345
 26461                           
 26462                           ;Port.c: 502: Output &= 0xF;
 26463  015D42  0E0F               	movlw	15
 26464  015D44  0100               	movlb	0	; () banked
 26465  015D46  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26466                           
 26467                           ; BSR set to: 0
 26468                           ;Port.c: 503: return Output;
 26469  015D48  0100               	movlb	0	; () banked
 26470  015D4A  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26471  015D4C  0012               	return	
 26472  015D4E                     __end_of_Port_GetQuad:
 26473                           	opt stack 0
 26474                           tosu	equ	0xFFF
 26475                           tosh	equ	0xFFE
 26476                           tosl	equ	0xFFD
 26477                           pclath	equ	0xFFA
 26478                           tblptru	equ	0xFF8
 26479                           tblptrh	equ	0xFF7
 26480                           tblptrl	equ	0xFF6
 26481                           tablat	equ	0xFF5
 26482                           prodh	equ	0xFF4
 26483                           prodl	equ	0xFF3
 26484                           intcon	equ	0xFF2
 26485                           postinc0	equ	0xFEE
 26486                           wreg	equ	0xFE8
 26487                           indf1	equ	0xFE7
 26488                           postdec1	equ	0xFE5
 26489                           fsr1h	equ	0xFE2
 26490                           fsr1l	equ	0xFE1
 26491                           indf2	equ	0xFDF
 26492                           postinc2	equ	0xFDE
 26493                           postdec2	equ	0xFDD
 26494                           plusw2	equ	0xFDB
 26495                           fsr2h	equ	0xFDA
 26496                           fsr2l	equ	0xFD9
 26497                           status	equ	0xFD8
 26498                           
 26499 ;; *************** function _Event_DIPSwitch *****************
 26500 ;; Defined at:
 26501 ;;		line 22 in file "Events.c"
 26502 ;; Parameters:    Size  Location     Type
 26503 ;;  pState          1    wreg     unsigned char 
 26504 ;; Auto vars:     Size  Location     Type
 26505 ;;  pState          1   25[BANK0 ] unsigned char 
 26506 ;;  Bar             1   26[BANK0 ] unsigned char 
 26507 ;; Return value:  Size  Location     Type
 26508 ;;                  1    wreg      void 
 26509 ;; Registers used:
 26510 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26511 ;; Tracked objects:
 26512 ;;		On entry : 0/0
 26513 ;;		On exit  : 0/0
 26514 ;;		Unchanged: 0/0
 26515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26517 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26519 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26520 ;;Total ram usage:        2 bytes
 26521 ;; Hardware stack levels used:    1
 26522 ;; Hardware stack levels required when called:   13
 26523 ;; This function calls:
 26524 ;;		_HMI_GetBar
 26525 ;;		_HMI_SetBar
 26526 ;;		_LED_Toggle
 26527 ;; This function is called by:
 26528 ;;		_FunctInitButton
 26529 ;;		_Button_Poll
 26530 ;; This function uses a non-reentrant model
 26531 ;;
 26532                           
 26533                           	psect	text137
 26534  016308                     __ptext137:
 26535                           	opt stack 0
 26536  016308                     _Event_DIPSwitch:
 26537                           	opt stack 13
 26538                           
 26539                           ; BSR set to: 0
 26540                           ;incstack = 0
 26541                           ;Event_DIPSwitch@pState stored from wreg
 26542  016308  0100               	movlb	0	; () banked
 26543  01630A  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26544                           
 26545                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26546  01630C  ECF9  F0B3         	call	_HMI_GetBar	;wreg free
 26547  016310  0100               	movlb	0	; () banked
 26548  016312  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26549                           
 26550                           ; BSR set to: 0
 26551                           ;Events.c: 25: Bar &= 0x0F;
 26552  016314  0E0F               	movlw	15
 26553  016316  0100               	movlb	0	; () banked
 26554  016318  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26555                           
 26556                           ; BSR set to: 0
 26557                           ;Events.c: 26: pState <<= 4;
 26558  01631A  0100               	movlb	0	; () banked
 26559  01631C  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26560  01631E  0EF0               	movlw	240
 26561  016320  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26562                           
 26563                           ; BSR set to: 0
 26564                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26565  016322  0100               	movlb	0	; () banked
 26566  016324  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26567  016326  0100               	movlb	0	; () banked
 26568  016328  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26569  01632A  ECDB  F0B3         	call	_HMI_SetBar
 26570                           
 26571                           ;Events.c: 32: LED_Toggle(eLED1);
 26572  01632E  0E00               	movlw	0
 26573  016330  ECEF  F0AE         	call	_LED_Toggle
 26574  016334  0012               	return		;funcret
 26575  016336                     __end_of_Event_DIPSwitch:
 26576                           	opt stack 0
 26577                           tosu	equ	0xFFF
 26578                           tosh	equ	0xFFE
 26579                           tosl	equ	0xFFD
 26580                           pclath	equ	0xFFA
 26581                           tblptru	equ	0xFF8
 26582                           tblptrh	equ	0xFF7
 26583                           tblptrl	equ	0xFF6
 26584                           tablat	equ	0xFF5
 26585                           prodh	equ	0xFF4
 26586                           prodl	equ	0xFF3
 26587                           intcon	equ	0xFF2
 26588                           postinc0	equ	0xFEE
 26589                           wreg	equ	0xFE8
 26590                           indf1	equ	0xFE7
 26591                           postdec1	equ	0xFE5
 26592                           fsr1h	equ	0xFE2
 26593                           fsr1l	equ	0xFE1
 26594                           indf2	equ	0xFDF
 26595                           postinc2	equ	0xFDE
 26596                           postdec2	equ	0xFDD
 26597                           plusw2	equ	0xFDB
 26598                           fsr2h	equ	0xFDA
 26599                           fsr2l	equ	0xFD9
 26600                           status	equ	0xFD8
 26601                           
 26602 ;; *************** function _Event_NULL *****************
 26603 ;; Defined at:
 26604 ;;		line 9 in file "Events.c"
 26605 ;; Parameters:    Size  Location     Type
 26606 ;;  pState          1    wreg     unsigned char 
 26607 ;; Auto vars:     Size  Location     Type
 26608 ;;  pState          1    0[COMRAM] unsigned char 
 26609 ;; Return value:  Size  Location     Type
 26610 ;;                  1    wreg      void 
 26611 ;; Registers used:
 26612 ;;		wreg
 26613 ;; Tracked objects:
 26614 ;;		On entry : 0/0
 26615 ;;		On exit  : 0/0
 26616 ;;		Unchanged: 0/0
 26617 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26618 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26619 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26620 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26621 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26622 ;;Total ram usage:        0 bytes
 26623 ;; Hardware stack levels used:    1
 26624 ;; Hardware stack levels required when called:    7
 26625 ;; This function calls:
 26626 ;;		Nothing
 26627 ;; This function is called by:
 26628 ;;		_HMI_Init
 26629 ;;		_Button_Poll
 26630 ;; This function uses a non-reentrant model
 26631 ;;
 26632                           
 26633                           	psect	text138
 26634  001404                     __ptext138:
 26635                           	opt stack 0
 26636  001404                     _Event_NULL:
 26637                           	opt stack 19
 26638                           
 26639                           ;incstack = 0
 26640  001404  0012               	return		;funcret
 26641  001406                     __end_of_Event_NULL:
 26642                           	opt stack 0
 26643                           tosu	equ	0xFFF
 26644                           tosh	equ	0xFFE
 26645                           tosl	equ	0xFFD
 26646                           pclath	equ	0xFFA
 26647                           tblptru	equ	0xFF8
 26648                           tblptrh	equ	0xFF7
 26649                           tblptrl	equ	0xFF6
 26650                           tablat	equ	0xFF5
 26651                           prodh	equ	0xFF4
 26652                           prodl	equ	0xFF3
 26653                           intcon	equ	0xFF2
 26654                           postinc0	equ	0xFEE
 26655                           wreg	equ	0xFE8
 26656                           indf1	equ	0xFE7
 26657                           postdec1	equ	0xFE5
 26658                           fsr1h	equ	0xFE2
 26659                           fsr1l	equ	0xFE1
 26660                           indf2	equ	0xFDF
 26661                           postinc2	equ	0xFDE
 26662                           postdec2	equ	0xFDD
 26663                           plusw2	equ	0xFDB
 26664                           fsr2h	equ	0xFDA
 26665                           fsr2l	equ	0xFD9
 26666                           status	equ	0xFD8
 26667                           
 26668 ;; *************** function _Event_TestButton *****************
 26669 ;; Defined at:
 26670 ;;		line 52 in file "Events.c"
 26671 ;; Parameters:    Size  Location     Type
 26672 ;;  pState          1    wreg     unsigned char 
 26673 ;; Auto vars:     Size  Location     Type
 26674 ;;  pState          1   25[BANK0 ] unsigned char 
 26675 ;; Return value:  Size  Location     Type
 26676 ;;                  1    wreg      void 
 26677 ;; Registers used:
 26678 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26679 ;; Tracked objects:
 26680 ;;		On entry : 0/0
 26681 ;;		On exit  : 0/0
 26682 ;;		Unchanged: 0/0
 26683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26684 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26685 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26687 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26688 ;;Total ram usage:        1 bytes
 26689 ;; Hardware stack levels used:    1
 26690 ;; Hardware stack levels required when called:   13
 26691 ;; This function calls:
 26692 ;;		_HMI_SetButton
 26693 ;;		_HMI_SetNumber
 26694 ;;		_LED_Toggle
 26695 ;; This function is called by:
 26696 ;;		_FunctInitButton
 26697 ;;		_Button_Poll
 26698 ;; This function uses a non-reentrant model
 26699 ;;
 26700                           
 26701                           	psect	text139
 26702  0160F6                     __ptext139:
 26703                           	opt stack 0
 26704  0160F6                     _Event_TestButton:
 26705                           	opt stack 13
 26706                           
 26707                           ;incstack = 0
 26708                           ;Event_TestButton@pState stored from wreg
 26709  0160F6  0100               	movlb	0	; () banked
 26710  0160F8  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26711                           
 26712                           ;Events.c: 56: static UINT8 j = 0;
 26713                           ;Events.c: 60: if (pState == 0)
 26714  0160FA  0100               	movlb	0	; () banked
 26715  0160FC  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26716  0160FE  0100               	movlb	0	; () banked
 26717  016100  A4D8               	btfss	status,2,c
 26718  016102  D013               	goto	l1873
 26719                           
 26720                           ; BSR set to: 0
 26721                           ;Events.c: 61: {
 26722                           ;Events.c: 62: j++;
 26723  016104  0100               	movlb	0	; () banked
 26724  016106  2B89               	incf	Event_TestButton@j& (0+255),f,b
 26725                           
 26726                           ; BSR set to: 0
 26727                           ;Events.c: 63: val += j;
 26728  016108  0100               	movlb	0	; () banked
 26729  01610A  5189               	movf	Event_TestButton@j& (0+255),w,b
 26730  01610C  0100               	movlb	0	; () banked
 26731  01610E  277D               	addwf	_val& (0+255),f,b
 26732  016110  0E00               	movlw	0
 26733  016112  237E               	addwfc	(_val+1)& (0+255),f,b
 26734                           
 26735                           ; BSR set to: 0
 26736                           ;Events.c: 64: HMI_SetNumber( val );
 26737  016114  C07D  F0D0         	movff	_val,HMI_SetNumber@pInput
 26738  016118  C07E  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26739  01611C  ECC7  F0B1         	call	_HMI_SetNumber	;wreg free
 26740                           
 26741                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26742  016120  0100               	movlb	0	; () banked
 26743  016122  5189               	movf	Event_TestButton@j& (0+255),w,b
 26744  016124  0B03               	andlw	3
 26745  016126  ECD1  F0A6         	call	_HMI_SetButton
 26746  01612A                     l1873:
 26747                           
 26748                           ;Events.c: 68: }
 26749                           ;Events.c: 72: LED_Toggle(eLED1);
 26750  01612A  0E00               	movlw	0
 26751  01612C  ECEF  F0AE         	call	_LED_Toggle
 26752  016130  0012               	return		;funcret
 26753  016132                     __end_of_Event_TestButton:
 26754                           	opt stack 0
 26755                           tosu	equ	0xFFF
 26756                           tosh	equ	0xFFE
 26757                           tosl	equ	0xFFD
 26758                           pclath	equ	0xFFA
 26759                           tblptru	equ	0xFF8
 26760                           tblptrh	equ	0xFF7
 26761                           tblptrl	equ	0xFF6
 26762                           tablat	equ	0xFF5
 26763                           prodh	equ	0xFF4
 26764                           prodl	equ	0xFF3
 26765                           intcon	equ	0xFF2
 26766                           postinc0	equ	0xFEE
 26767                           wreg	equ	0xFE8
 26768                           indf1	equ	0xFE7
 26769                           postdec1	equ	0xFE5
 26770                           fsr1h	equ	0xFE2
 26771                           fsr1l	equ	0xFE1
 26772                           indf2	equ	0xFDF
 26773                           postinc2	equ	0xFDE
 26774                           postdec2	equ	0xFDD
 26775                           plusw2	equ	0xFDB
 26776                           fsr2h	equ	0xFDA
 26777                           fsr2l	equ	0xFD9
 26778                           status	equ	0xFD8
 26779                           
 26780 ;; *************** function _HMI_SetNumber *****************
 26781 ;; Defined at:
 26782 ;;		line 221 in file "HMI.c"
 26783 ;; Parameters:    Size  Location     Type
 26784 ;;  pInput          2   22[BANK0 ] int 
 26785 ;; Auto vars:     Size  Location     Type
 26786 ;;		None
 26787 ;; Return value:  Size  Location     Type
 26788 ;;                  1    wreg      void 
 26789 ;; Registers used:
 26790 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26791 ;; Tracked objects:
 26792 ;;		On entry : 0/0
 26793 ;;		On exit  : 0/0
 26794 ;;		Unchanged: 0/0
 26795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26796 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26797 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26800 ;;Total ram usage:        2 bytes
 26801 ;; Hardware stack levels used:    1
 26802 ;; Hardware stack levels required when called:    9
 26803 ;; This function calls:
 26804 ;;		_HMI_SetSegments
 26805 ;;		_itos
 26806 ;; This function is called by:
 26807 ;;		_Event_TestButton
 26808 ;;		_findClosestWall
 26809 ;;		_mode1
 26810 ;;		_Event_HMI_UpButton
 26811 ;;		_Event_HMI_DownButton
 26812 ;; This function uses a non-reentrant model
 26813 ;;
 26814                           
 26815                           	psect	text140
 26816  01638E                     __ptext140:
 26817                           	opt stack 0
 26818  01638E                     _HMI_SetNumber:
 26819                           	opt stack 16
 26820                           
 26821                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26822                           
 26823                           ;incstack = 0
 26824  01638E  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26825  016392  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26826  016396  0E3E               	movlw	low _HMIBoard
 26827  016398  0100               	movlb	0	; () banked
 26828  01639A  6FC8               	movwf	itos@destination& (0+255),b
 26829  01639C  0E03               	movlw	high _HMIBoard
 26830  01639E  0100               	movlb	0	; () banked
 26831  0163A0  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26832  0163A2  EC59  F09E         	call	_itos	;wreg free
 26833                           
 26834                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26835  0163A6  0E3E               	movlw	low _HMIBoard
 26836  0163A8  0100               	movlb	0	; () banked
 26837  0163AA  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26838  0163AC  0E03               	movlw	high _HMIBoard
 26839  0163AE  0100               	movlb	0	; () banked
 26840  0163B0  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26841  0163B2  ECE2  F0A1         	call	_HMI_SetSegments	;wreg free
 26842  0163B6  0012               	return		;funcret
 26843  0163B8                     __end_of_HMI_SetNumber:
 26844                           	opt stack 0
 26845                           tosu	equ	0xFFF
 26846                           tosh	equ	0xFFE
 26847                           tosl	equ	0xFFD
 26848                           pclath	equ	0xFFA
 26849                           tblptru	equ	0xFF8
 26850                           tblptrh	equ	0xFF7
 26851                           tblptrl	equ	0xFF6
 26852                           tablat	equ	0xFF5
 26853                           prodh	equ	0xFF4
 26854                           prodl	equ	0xFF3
 26855                           intcon	equ	0xFF2
 26856                           postinc0	equ	0xFEE
 26857                           wreg	equ	0xFE8
 26858                           indf1	equ	0xFE7
 26859                           postdec1	equ	0xFE5
 26860                           fsr1h	equ	0xFE2
 26861                           fsr1l	equ	0xFE1
 26862                           indf2	equ	0xFDF
 26863                           postinc2	equ	0xFDE
 26864                           postdec2	equ	0xFDD
 26865                           plusw2	equ	0xFDB
 26866                           fsr2h	equ	0xFDA
 26867                           fsr2l	equ	0xFD9
 26868                           status	equ	0xFD8
 26869                           
 26870 ;; *************** function _itos *****************
 26871 ;; Defined at:
 26872 ;;		line 369 in file "Library/Types.c"
 26873 ;; Parameters:    Size  Location     Type
 26874 ;;  input           2   12[BANK0 ] unsigned short 
 26875 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26876 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26877 ;; Auto vars:     Size  Location     Type
 26878 ;;  Out             2   20[BANK0 ] unsigned short 
 26879 ;;  Length          2   18[BANK0 ] unsigned short 
 26880 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26881 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26882 ;; Return value:  Size  Location     Type
 26883 ;;                  1    wreg      void 
 26884 ;; Registers used:
 26885 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26886 ;; Tracked objects:
 26887 ;;		On entry : 0/0
 26888 ;;		On exit  : 0/0
 26889 ;;		Unchanged: 0/0
 26890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26891 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26892 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26894 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26895 ;;Total ram usage:       10 bytes
 26896 ;; Hardware stack levels used:    1
 26897 ;; Hardware stack levels required when called:    8
 26898 ;; This function calls:
 26899 ;;		___lwdiv
 26900 ;;		___lwmod
 26901 ;;		_reverse
 26902 ;; This function is called by:
 26903 ;;		_HMI_SetNumber
 26904 ;; This function uses a non-reentrant model
 26905 ;;
 26906                           
 26907                           	psect	text141
 26908  013CB2                     __ptext141:
 26909                           	opt stack 0
 26910  013CB2                     _itos:
 26911                           	opt stack 16
 26912                           
 26913                           ;Types.c: 371: UINT16 Out = input;
 26914                           
 26915                           ;incstack = 0
 26916  013CB2  C0C6  F0CE         	movff	itos@input,itos@Out
 26917  013CB6  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26918                           
 26919                           ;Types.c: 372: UINT16 Length = 0;
 26920  013CBA  0E00               	movlw	0
 26921  013CBC  0100               	movlb	0	; () banked
 26922  013CBE  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26923  013CC0  0E00               	movlw	0
 26924  013CC2  6FCC               	movwf	itos@Length& (0+255),b
 26925                           
 26926                           ; BSR set to: 0
 26927                           ;Types.c: 373: char *Data = destination;
 26928  013CC4  C0C8  F0CA         	movff	itos@destination,itos@Data
 26929  013CC8  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26930                           
 26931                           ; BSR set to: 0
 26932                           ;Types.c: 374: if(Out == 0)
 26933  013CCC  0100               	movlb	0	; () banked
 26934  013CCE  51CE               	movf	itos@Out& (0+255),w,b
 26935  013CD0  0100               	movlb	0	; () banked
 26936  013CD2  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26937  013CD4  A4D8               	btfss	status,2,c
 26938  013CD6  D034               	goto	l929
 26939                           
 26940                           ; BSR set to: 0
 26941                           ;Types.c: 375: {
 26942                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26943  013CD8  C0CA  FFD9         	movff	itos@Data,fsr2l
 26944  013CDC  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26945  013CE0  0E30               	movlw	48
 26946  013CE2  6EDF               	movwf	indf2,c
 26947                           
 26948                           ; BSR set to: 0
 26949                           ;Types.c: 377: Length = 1;
 26950  013CE4  0E00               	movlw	0
 26951  013CE6  0100               	movlb	0	; () banked
 26952  013CE8  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26953  013CEA  0E01               	movlw	1
 26954  013CEC  6FCC               	movwf	itos@Length& (0+255),b
 26955                           
 26956                           ;Types.c: 378: }
 26957  013CEE  D040               	goto	l928
 26958  013CF0                     
 26959                           ; BSR set to: 0
 26960                           ;Types.c: 382: {
 26961                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26962                           
 26963                           ; BSR set to: 0
 26964  013CF0  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26965  013CF4  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26966  013CF8  0E00               	movlw	0
 26967  013CFA  0100               	movlb	0	; () banked
 26968  013CFC  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26969  013CFE  0E0A               	movlw	10
 26970  013D00  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26971  013D02  ECDA  F0AC         	call	___lwmod	;wreg free
 26972  013D06  0100               	movlb	0	; () banked
 26973  013D08  51C1               	movf	?___lwmod& (0+255),w,b
 26974  013D0A  0F30               	addlw	48
 26975  013D0C  C0CA  FFD9         	movff	itos@Data,fsr2l
 26976  013D10  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26977  013D14  6EDF               	movwf	indf2,c
 26978                           
 26979                           ; BSR set to: 0
 26980                           ;Types.c: 384: Out /= 10;
 26981  013D16  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26982  013D1A  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26983  013D1E  0E00               	movlw	0
 26984  013D20  0100               	movlb	0	; () banked
 26985  013D22  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26986  013D24  0E0A               	movlw	10
 26987  013D26  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26988  013D28  EC6F  F0A9         	call	___lwdiv	;wreg free
 26989  013D2C  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26990  013D30  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26991                           
 26992                           ;Types.c: 385: Length ++;
 26993  013D34  0100               	movlb	0	; () banked
 26994  013D36  4BCC               	infsnz	itos@Length& (0+255),f,b
 26995  013D38  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26996                           
 26997                           ; BSR set to: 0
 26998                           ;Types.c: 386: Data++;
 26999  013D3A  0100               	movlb	0	; () banked
 27000  013D3C  4BCA               	infsnz	itos@Data& (0+255),f,b
 27001  013D3E  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 27002  013D40                     l929:
 27003                           
 27004                           ; BSR set to: 0
 27005                           
 27006                           ; BSR set to: 0
 27007  013D40  0100               	movlb	0	; () banked
 27008  013D42  51CE               	movf	itos@Out& (0+255),w,b
 27009  013D44  0100               	movlb	0	; () banked
 27010  013D46  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 27011  013D48  B4D8               	btfsc	status,2,c
 27012  013D4A  D008               	goto	u9140
 27013                           
 27014                           ; BSR set to: 0
 27015  013D4C  0100               	movlb	0	; () banked
 27016  013D4E  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27017  013D50  E105               	bnz	l12406
 27018  013D52  0E06               	movlw	6
 27019  013D54  0100               	movlb	0	; () banked
 27020  013D56  5DCC               	subwf	itos@Length& (0+255),w,b
 27021  013D58  A0D8               	btfss	status,0,c
 27022  013D5A  D7CA               	goto	l930
 27023  013D5C                     u9140:
 27024  013D5C                     l12406:
 27025                           
 27026                           ; BSR set to: 0
 27027                           ;Types.c: 387: }
 27028                           ;Types.c: 388: reverse(destination, Length);
 27029  013D5C  C0C8  F0BA         	movff	itos@destination,reverse@input
 27030  013D60  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 27031  013D64  C0CC  F0BC         	movff	itos@Length,reverse@length
 27032  013D68  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 27033  013D6C  EC3C  F0AB         	call	_reverse	;wreg free
 27034  013D70                     l928:
 27035                           
 27036                           ;Types.c: 389: }
 27037                           ;Types.c: 390: destination[Length] = '\0';
 27038  013D70  0100               	movlb	0	; () banked
 27039  013D72  51CC               	movf	itos@Length& (0+255),w,b
 27040  013D74  0100               	movlb	0	; () banked
 27041  013D76  25C8               	addwf	itos@destination& (0+255),w,b
 27042  013D78  6ED9               	movwf	fsr2l,c
 27043  013D7A  0100               	movlb	0	; () banked
 27044  013D7C  51CD               	movf	(itos@Length+1)& (0+255),w,b
 27045  013D7E  0100               	movlb	0	; () banked
 27046  013D80  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 27047  013D82  6EDA               	movwf	fsr2h,c
 27048  013D84  0E00               	movlw	0
 27049  013D86  6EDF               	movwf	indf2,c
 27050                           
 27051                           ; BSR set to: 0
 27052  013D88  0012               	return		;funcret
 27053  013D8A                     __end_of_itos:
 27054                           	opt stack 0
 27055                           tosu	equ	0xFFF
 27056                           tosh	equ	0xFFE
 27057                           tosl	equ	0xFFD
 27058                           pclath	equ	0xFFA
 27059                           tblptru	equ	0xFF8
 27060                           tblptrh	equ	0xFF7
 27061                           tblptrl	equ	0xFF6
 27062                           tablat	equ	0xFF5
 27063                           prodh	equ	0xFF4
 27064                           prodl	equ	0xFF3
 27065                           intcon	equ	0xFF2
 27066                           postinc0	equ	0xFEE
 27067                           wreg	equ	0xFE8
 27068                           indf1	equ	0xFE7
 27069                           postdec1	equ	0xFE5
 27070                           fsr1h	equ	0xFE2
 27071                           fsr1l	equ	0xFE1
 27072                           indf2	equ	0xFDF
 27073                           postinc2	equ	0xFDE
 27074                           postdec2	equ	0xFDD
 27075                           plusw2	equ	0xFDB
 27076                           fsr2h	equ	0xFDA
 27077                           fsr2l	equ	0xFD9
 27078                           status	equ	0xFD8
 27079                           
 27080 ;; *************** function _reverse *****************
 27081 ;; Defined at:
 27082 ;;		line 357 in file "Library/Types.c"
 27083 ;; Parameters:    Size  Location     Type
 27084 ;;  input           2    0[BANK0 ] PTR unsigned char 
 27085 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27086 ;;  length          2    2[BANK0 ] unsigned short 
 27087 ;; Auto vars:     Size  Location     Type
 27088 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 27089 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27090 ;;  tempVar         1    4[BANK0 ] unsigned char 
 27091 ;; Return value:  Size  Location     Type
 27092 ;;                  1    wreg      void 
 27093 ;; Registers used:
 27094 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 27095 ;; Tracked objects:
 27096 ;;		On entry : 0/0
 27097 ;;		On exit  : 0/0
 27098 ;;		Unchanged: 0/0
 27099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27100 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27101 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27102 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27103 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27104 ;;Total ram usage:        7 bytes
 27105 ;; Hardware stack levels used:    1
 27106 ;; Hardware stack levels required when called:    7
 27107 ;; This function calls:
 27108 ;;		Nothing
 27109 ;; This function is called by:
 27110 ;;		_itos
 27111 ;; This function uses a non-reentrant model
 27112 ;;
 27113                           
 27114                           	psect	text142
 27115  015678                     __ptext142:
 27116                           	opt stack 0
 27117  015678                     _reverse:
 27118                           	opt stack 16
 27119                           
 27120                           ;Types.c: 359: char tempVar,
 27121                           ;Types.c: 360: *iterator = input + length;
 27122                           
 27123                           ; BSR set to: 0
 27124                           ;incstack = 0
 27125  015678  0100               	movlb	0	; () banked
 27126  01567A  51BC               	movf	reverse@length& (0+255),w,b
 27127  01567C  0100               	movlb	0	; () banked
 27128  01567E  25BA               	addwf	reverse@input& (0+255),w,b
 27129  015680  0100               	movlb	0	; () banked
 27130  015682  6FBF               	movwf	reverse@iterator& (0+255),b
 27131  015684  0100               	movlb	0	; () banked
 27132  015686  51BD               	movf	(reverse@length+1)& (0+255),w,b
 27133  015688  0100               	movlb	0	; () banked
 27134  01568A  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 27135  01568C  0100               	movlb	0	; () banked
 27136  01568E  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 27137                           
 27138                           ;Types.c: 362: while ( --iterator > input )
 27139  015690  D01A               	goto	l921
 27140  015692                     
 27141                           ; BSR set to: 0
 27142                           ;Types.c: 363: {
 27143                           ;Types.c: 364: tempVar = *input;
 27144                           
 27145                           ; BSR set to: 0
 27146  015692  C0BA  FFD9         	movff	reverse@input,fsr2l
 27147  015696  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 27148  01569A  50DF               	movf	indf2,w,c
 27149  01569C  0100               	movlb	0	; () banked
 27150  01569E  6FBE               	movwf	reverse@tempVar& (0+255),b
 27151                           
 27152                           ; BSR set to: 0
 27153                           ;Types.c: 365: *input++=*iterator;
 27154  0156A0  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27155  0156A4  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27156  0156A8  C0BA  FFE1         	movff	reverse@input,fsr1l
 27157  0156AC  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 27158  0156B0  CFDF FFE7          	movff	indf2,indf1
 27159                           
 27160                           ; BSR set to: 0
 27161  0156B4  0100               	movlb	0	; () banked
 27162  0156B6  4BBA               	infsnz	reverse@input& (0+255),f,b
 27163  0156B8  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 27164                           
 27165                           ; BSR set to: 0
 27166                           ;Types.c: 366: *iterator=tempVar;
 27167  0156BA  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27168  0156BE  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27169  0156C2  C0BE  FFDF         	movff	reverse@tempVar,indf2
 27170  0156C6                     l921:
 27171                           
 27172                           ; BSR set to: 0
 27173                           
 27174                           ; BSR set to: 0
 27175  0156C6  0100               	movlb	0	; () banked
 27176  0156C8  07BF               	decf	reverse@iterator& (0+255),f,b
 27177  0156CA  A0D8               	btfss	status,0,c
 27178  0156CC  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 27179  0156CE  0100               	movlb	0	; () banked
 27180  0156D0  51BF               	movf	reverse@iterator& (0+255),w,b
 27181  0156D2  0100               	movlb	0	; () banked
 27182  0156D4  5DBA               	subwf	reverse@input& (0+255),w,b
 27183  0156D6  0100               	movlb	0	; () banked
 27184  0156D8  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 27185  0156DA  0100               	movlb	0	; () banked
 27186  0156DC  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 27187  0156DE  B0D8               	btfsc	status,0,c
 27188  0156E0  0012               	return	
 27189  0156E2  D7D7               	goto	l922
 27190  0156E4                     __end_of_reverse:
 27191                           	opt stack 0
 27192                           tosu	equ	0xFFF
 27193                           tosh	equ	0xFFE
 27194                           tosl	equ	0xFFD
 27195                           pclath	equ	0xFFA
 27196                           tblptru	equ	0xFF8
 27197                           tblptrh	equ	0xFF7
 27198                           tblptrl	equ	0xFF6
 27199                           tablat	equ	0xFF5
 27200                           prodh	equ	0xFF4
 27201                           prodl	equ	0xFF3
 27202                           intcon	equ	0xFF2
 27203                           postinc0	equ	0xFEE
 27204                           wreg	equ	0xFE8
 27205                           indf1	equ	0xFE7
 27206                           postdec1	equ	0xFE5
 27207                           fsr1h	equ	0xFE2
 27208                           fsr1l	equ	0xFE1
 27209                           indf2	equ	0xFDF
 27210                           postinc2	equ	0xFDE
 27211                           postdec2	equ	0xFDD
 27212                           plusw2	equ	0xFDB
 27213                           fsr2h	equ	0xFDA
 27214                           fsr2l	equ	0xFD9
 27215                           status	equ	0xFD8
 27216                           
 27217 ;; *************** function ___lwmod *****************
 27218 ;; Defined at:
 27219 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27220 ;; Parameters:    Size  Location     Type
 27221 ;;  dividend        2    7[BANK0 ] unsigned int 
 27222 ;;  divisor         2    9[BANK0 ] unsigned int 
 27223 ;; Auto vars:     Size  Location     Type
 27224 ;;  counter         1   11[BANK0 ] unsigned char 
 27225 ;; Return value:  Size  Location     Type
 27226 ;;                  2    7[BANK0 ] unsigned int 
 27227 ;; Registers used:
 27228 ;;		wreg, status,2, status,0
 27229 ;; Tracked objects:
 27230 ;;		On entry : 0/0
 27231 ;;		On exit  : 0/0
 27232 ;;		Unchanged: 0/0
 27233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27234 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27237 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27238 ;;Total ram usage:        5 bytes
 27239 ;; Hardware stack levels used:    1
 27240 ;; Hardware stack levels required when called:    7
 27241 ;; This function calls:
 27242 ;;		Nothing
 27243 ;; This function is called by:
 27244 ;;		_itos
 27245 ;;		_printf
 27246 ;; This function uses a non-reentrant model
 27247 ;;
 27248                           
 27249                           	psect	text143
 27250  0159B4                     __ptext143:
 27251                           	opt stack 0
 27252  0159B4                     ___lwmod:
 27253                           	opt stack 22
 27254                           
 27255                           ; BSR set to: 0
 27256                           ;incstack = 0
 27257  0159B4  0100               	movlb	0	; () banked
 27258  0159B6  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27259  0159B8  0100               	movlb	0	; () banked
 27260  0159BA  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27261  0159BC  B4D8               	btfsc	status,2,c
 27262  0159BE  D026               	goto	l2875
 27263                           
 27264                           ; BSR set to: 0
 27265  0159C0  0E01               	movlw	1
 27266  0159C2  0100               	movlb	0	; () banked
 27267  0159C4  6FC5               	movwf	___lwmod@counter& (0+255),b
 27268  0159C6  D006               	goto	l2870
 27269  0159C8                     
 27270                           ; BSR set to: 0
 27271                           
 27272                           ; BSR set to: 0
 27273  0159C8  0100               	movlb	0	; () banked
 27274  0159CA  90D8               	bcf	status,0,c
 27275  0159CC  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27276  0159CE  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27277  0159D0  0100               	movlb	0	; () banked
 27278  0159D2  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27279  0159D4                     l2870:
 27280                           
 27281                           ; BSR set to: 0
 27282                           
 27283                           ; BSR set to: 0
 27284  0159D4  0100               	movlb	0	; () banked
 27285  0159D6  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27286  0159D8  D7F7               	goto	l2871
 27287  0159DA                     u9060:
 27288                           
 27289                           ; BSR set to: 0
 27290                           
 27291                           ; BSR set to: 0
 27292                           
 27293                           ; BSR set to: 0
 27294  0159DA  0100               	movlb	0	; () banked
 27295  0159DC  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27296  0159DE  0100               	movlb	0	; () banked
 27297  0159E0  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27298  0159E2  0100               	movlb	0	; () banked
 27299  0159E4  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27300  0159E6  0100               	movlb	0	; () banked
 27301  0159E8  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27302  0159EA  A0D8               	btfss	status,0,c
 27303  0159EC  D008               	goto	l2874
 27304                           
 27305                           ; BSR set to: 0
 27306  0159EE  0100               	movlb	0	; () banked
 27307  0159F0  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27308  0159F2  0100               	movlb	0	; () banked
 27309  0159F4  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27310  0159F6  0100               	movlb	0	; () banked
 27311  0159F8  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27312  0159FA  0100               	movlb	0	; () banked
 27313  0159FC  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27314  0159FE                     l2874:
 27315                           
 27316                           ; BSR set to: 0
 27317                           
 27318                           ; BSR set to: 0
 27319  0159FE  0100               	movlb	0	; () banked
 27320  015A00  90D8               	bcf	status,0,c
 27321  015A02  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27322  015A04  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27323                           
 27324                           ; BSR set to: 0
 27325  015A06  0100               	movlb	0	; () banked
 27326  015A08  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27327  015A0A  D7E7               	goto	u9060
 27328  015A0C                     l2875:
 27329                           
 27330                           ; BSR set to: 0
 27331                           
 27332                           ; BSR set to: 0
 27333  015A0C  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27334  015A10  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27335                           
 27336                           ; BSR set to: 0
 27337  015A14  0012               	return		;funcret
 27338  015A16                     __end_of___lwmod:
 27339                           	opt stack 0
 27340                           tosu	equ	0xFFF
 27341                           tosh	equ	0xFFE
 27342                           tosl	equ	0xFFD
 27343                           pclath	equ	0xFFA
 27344                           tblptru	equ	0xFF8
 27345                           tblptrh	equ	0xFF7
 27346                           tblptrl	equ	0xFF6
 27347                           tablat	equ	0xFF5
 27348                           prodh	equ	0xFF4
 27349                           prodl	equ	0xFF3
 27350                           intcon	equ	0xFF2
 27351                           postinc0	equ	0xFEE
 27352                           wreg	equ	0xFE8
 27353                           indf1	equ	0xFE7
 27354                           postdec1	equ	0xFE5
 27355                           fsr1h	equ	0xFE2
 27356                           fsr1l	equ	0xFE1
 27357                           indf2	equ	0xFDF
 27358                           postinc2	equ	0xFDE
 27359                           postdec2	equ	0xFDD
 27360                           plusw2	equ	0xFDB
 27361                           fsr2h	equ	0xFDA
 27362                           fsr2l	equ	0xFD9
 27363                           status	equ	0xFD8
 27364                           
 27365 ;; *************** function ___lwdiv *****************
 27366 ;; Defined at:
 27367 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27368 ;; Parameters:    Size  Location     Type
 27369 ;;  dividend        2    0[BANK0 ] unsigned int 
 27370 ;;  divisor         2    2[BANK0 ] unsigned int 
 27371 ;; Auto vars:     Size  Location     Type
 27372 ;;  quotient        2    5[BANK0 ] unsigned int 
 27373 ;;  counter         1    4[BANK0 ] unsigned char 
 27374 ;; Return value:  Size  Location     Type
 27375 ;;                  2    0[BANK0 ] unsigned int 
 27376 ;; Registers used:
 27377 ;;		wreg, status,2, status,0
 27378 ;; Tracked objects:
 27379 ;;		On entry : 0/0
 27380 ;;		On exit  : 0/0
 27381 ;;		Unchanged: 0/0
 27382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27383 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27384 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27386 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27387 ;;Total ram usage:        7 bytes
 27388 ;; Hardware stack levels used:    1
 27389 ;; Hardware stack levels required when called:    7
 27390 ;; This function calls:
 27391 ;;		Nothing
 27392 ;; This function is called by:
 27393 ;;		_itos
 27394 ;;		_printf
 27395 ;; This function uses a non-reentrant model
 27396 ;;
 27397                           
 27398                           	psect	text144
 27399  0152DE                     __ptext144:
 27400                           	opt stack 0
 27401  0152DE                     ___lwdiv:
 27402                           	opt stack 22
 27403                           
 27404                           ; BSR set to: 0
 27405                           ;incstack = 0
 27406  0152DE  0E00               	movlw	0
 27407  0152E0  0100               	movlb	0	; () banked
 27408  0152E2  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27409  0152E4  0E00               	movlw	0
 27410  0152E6  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27411                           
 27412                           ; BSR set to: 0
 27413  0152E8  0100               	movlb	0	; () banked
 27414  0152EA  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27415  0152EC  0100               	movlb	0	; () banked
 27416  0152EE  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27417  0152F0  B4D8               	btfsc	status,2,c
 27418  0152F2  D02C               	goto	l2865
 27419                           
 27420                           ; BSR set to: 0
 27421  0152F4  0E01               	movlw	1
 27422  0152F6  0100               	movlb	0	; () banked
 27423  0152F8  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27424  0152FA  D006               	goto	l2860
 27425  0152FC                     
 27426                           ; BSR set to: 0
 27427                           
 27428                           ; BSR set to: 0
 27429  0152FC  0100               	movlb	0	; () banked
 27430  0152FE  90D8               	bcf	status,0,c
 27431  015300  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27432  015302  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27433  015304  0100               	movlb	0	; () banked
 27434  015306  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27435  015308                     l2860:
 27436                           
 27437                           ; BSR set to: 0
 27438                           
 27439                           ; BSR set to: 0
 27440  015308  0100               	movlb	0	; () banked
 27441  01530A  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27442  01530C  D7F7               	goto	l2861
 27443  01530E                     u9030:
 27444                           
 27445                           ; BSR set to: 0
 27446                           
 27447                           ; BSR set to: 0
 27448                           
 27449                           ; BSR set to: 0
 27450  01530E  0100               	movlb	0	; () banked
 27451  015310  90D8               	bcf	status,0,c
 27452  015312  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27453  015314  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27454                           
 27455                           ; BSR set to: 0
 27456  015316  0100               	movlb	0	; () banked
 27457  015318  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27458  01531A  0100               	movlb	0	; () banked
 27459  01531C  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27460  01531E  0100               	movlb	0	; () banked
 27461  015320  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27462  015322  0100               	movlb	0	; () banked
 27463  015324  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27464  015326  A0D8               	btfss	status,0,c
 27465  015328  D00A               	goto	l2864
 27466                           
 27467                           ; BSR set to: 0
 27468  01532A  0100               	movlb	0	; () banked
 27469  01532C  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27470  01532E  0100               	movlb	0	; () banked
 27471  015330  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27472  015332  0100               	movlb	0	; () banked
 27473  015334  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27474  015336  0100               	movlb	0	; () banked
 27475  015338  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27476                           
 27477                           ; BSR set to: 0
 27478  01533A  0100               	movlb	0	; () banked
 27479  01533C  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27480  01533E                     l2864:
 27481                           
 27482                           ; BSR set to: 0
 27483                           
 27484                           ; BSR set to: 0
 27485  01533E  0100               	movlb	0	; () banked
 27486  015340  90D8               	bcf	status,0,c
 27487  015342  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27488  015344  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27489                           
 27490                           ; BSR set to: 0
 27491  015346  0100               	movlb	0	; () banked
 27492  015348  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27493  01534A  D7E1               	goto	u9030
 27494  01534C                     l2865:
 27495                           
 27496                           ; BSR set to: 0
 27497                           
 27498                           ; BSR set to: 0
 27499  01534C  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27500  015350  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27501                           
 27502                           ; BSR set to: 0
 27503  015354  0012               	return		;funcret
 27504  015356                     __end_of___lwdiv:
 27505                           	opt stack 0
 27506                           tosu	equ	0xFFF
 27507                           tosh	equ	0xFFE
 27508                           tosl	equ	0xFFD
 27509                           pclath	equ	0xFFA
 27510                           tblptru	equ	0xFF8
 27511                           tblptrh	equ	0xFF7
 27512                           tblptrl	equ	0xFF6
 27513                           tablat	equ	0xFF5
 27514                           prodh	equ	0xFF4
 27515                           prodl	equ	0xFF3
 27516                           intcon	equ	0xFF2
 27517                           postinc0	equ	0xFEE
 27518                           wreg	equ	0xFE8
 27519                           indf1	equ	0xFE7
 27520                           postdec1	equ	0xFE5
 27521                           fsr1h	equ	0xFE2
 27522                           fsr1l	equ	0xFE1
 27523                           indf2	equ	0xFDF
 27524                           postinc2	equ	0xFDE
 27525                           postdec2	equ	0xFDD
 27526                           plusw2	equ	0xFDB
 27527                           fsr2h	equ	0xFDA
 27528                           fsr2l	equ	0xFD9
 27529                           status	equ	0xFD8
 27530                           
 27531 ;; *************** function _HMI_SetSegments *****************
 27532 ;; Defined at:
 27533 ;;		line 226 in file "HMI.c"
 27534 ;; Parameters:    Size  Location     Type
 27535 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27536 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27537 ;; Auto vars:     Size  Location     Type
 27538 ;;  in              2    4[BANK0 ] unsigned short 
 27539 ;; Return value:  Size  Location     Type
 27540 ;;                  1    wreg      void 
 27541 ;; Registers used:
 27542 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27543 ;; Tracked objects:
 27544 ;;		On entry : 0/0
 27545 ;;		On exit  : 0/0
 27546 ;;		Unchanged: 0/0
 27547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27548 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27549 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27550 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27551 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27552 ;;Total ram usage:        5 bytes
 27553 ;; Hardware stack levels used:    1
 27554 ;; Hardware stack levels required when called:    8
 27555 ;; This function calls:
 27556 ;;		_ToSegment
 27557 ;; This function is called by:
 27558 ;;		_HMI_SetNumber
 27559 ;; This function uses a non-reentrant model
 27560 ;;
 27561                           
 27562                           	psect	text145
 27563  0143C4                     __ptext145:
 27564                           	opt stack 0
 27565  0143C4                     _HMI_SetSegments:
 27566                           	opt stack 16
 27567                           
 27568                           ;HMI.c: 228: UINT16 in=0;
 27569                           
 27570                           ; BSR set to: 0
 27571                           ;incstack = 0
 27572  0143C4  0E00               	movlw	0
 27573  0143C6  0100               	movlb	0	; () banked
 27574  0143C8  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27575  0143CA  0E00               	movlw	0
 27576  0143CC  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27577                           
 27578                           ;HMI.c: 229: while(*pString)
 27579  0143CE  D038               	goto	l1202
 27580  0143D0                     
 27581                           ; BSR set to: 0
 27582                           ;HMI.c: 230: {
 27583                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27584                           
 27585                           ; BSR set to: 0
 27586  0143D0  0E3E               	movlw	low _HMIBoard
 27587  0143D2  0100               	movlb	0	; () banked
 27588  0143D4  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27589  0143D6  6ED9               	movwf	fsr2l,c
 27590  0143D8  0E03               	movlw	high _HMIBoard
 27591  0143DA  0100               	movlb	0	; () banked
 27592  0143DC  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27593  0143DE  6EDA               	movwf	fsr2h,c
 27594  0143E0  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27595  0143E4  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27596  0143E8  50E7               	movf	indf1,w,c
 27597  0143EA  EC46  F08C         	call	_ToSegment
 27598  0143EE  6EDF               	movwf	indf2,c
 27599                           
 27600                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27601  0143F0  0E3E               	movlw	low _HMIBoard
 27602  0143F2  0100               	movlb	0	; () banked
 27603  0143F4  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27604  0143F6  6ED9               	movwf	fsr2l,c
 27605  0143F8  0E03               	movlw	high _HMIBoard
 27606  0143FA  0100               	movlb	0	; () banked
 27607  0143FC  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27608  0143FE  6EDA               	movwf	fsr2h,c
 27609  014400  0E80               	movlw	128
 27610  014402  18DE               	xorwf	postinc2,w,c
 27611  014404  A4D8               	btfss	status,2,c
 27612  014406  D00E               	goto	l1201
 27613                           
 27614                           ; BSR set to: 0
 27615                           ;HMI.c: 234: {
 27616                           ;HMI.c: 235: in--;
 27617  014408  0100               	movlb	0	; () banked
 27618  01440A  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27619  01440C  A0D8               	btfss	status,0,c
 27620  01440E  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27621                           
 27622                           ; BSR set to: 0
 27623                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27624  014410  0E3E               	movlw	low _HMIBoard
 27625  014412  0100               	movlb	0	; () banked
 27626  014414  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27627  014416  6ED9               	movwf	fsr2l,c
 27628  014418  0E03               	movlw	high _HMIBoard
 27629  01441A  0100               	movlb	0	; () banked
 27630  01441C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27631  01441E  6EDA               	movwf	fsr2h,c
 27632  014420  0E00               	movlw	0
 27633  014422  8EDB               	bsf	plusw2,7,c
 27634  014424                     l1201:
 27635                           
 27636                           ; BSR set to: 0
 27637                           ;HMI.c: 237: }
 27638                           ;HMI.c: 239: pString++;
 27639                           
 27640                           ; BSR set to: 0
 27641  014424  0100               	movlb	0	; () banked
 27642  014426  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27643  014428  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27644                           
 27645                           ; BSR set to: 0
 27646                           ;HMI.c: 240: in++;
 27647  01442A  0100               	movlb	0	; () banked
 27648  01442C  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27649  01442E  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27650                           
 27651                           ; BSR set to: 0
 27652                           ;HMI.c: 241: if (in>=6)
 27653  014430  0100               	movlb	0	; () banked
 27654  014432  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27655  014434  E11A               	bnz	l12458
 27656  014436  0E06               	movlw	6
 27657  014438  0100               	movlb	0	; () banked
 27658  01443A  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27659  01443C  B0D8               	btfsc	status,0,c
 27660  01443E  D015               	goto	l1204
 27661  014440                     l1202:
 27662                           
 27663                           ; BSR set to: 0
 27664                           
 27665                           ; BSR set to: 0
 27666                           
 27667                           ; BSR set to: 0
 27668  014440  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27669  014444  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27670  014448  50DF               	movf	indf2,w,c
 27671  01444A  B4D8               	btfsc	status,2,c
 27672  01444C  D00E               	goto	l1204
 27673  01444E  D7C0               	goto	l1200
 27674  014450                     
 27675                           ; BSR set to: 0
 27676                           ;HMI.c: 245: {
 27677                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27678                           
 27679                           ; BSR set to: 0
 27680  014450  0E3E               	movlw	low _HMIBoard
 27681  014452  0100               	movlb	0	; () banked
 27682  014454  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27683  014456  6ED9               	movwf	fsr2l,c
 27684  014458  0E03               	movlw	high _HMIBoard
 27685  01445A  0100               	movlb	0	; () banked
 27686  01445C  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27687  01445E  6EDA               	movwf	fsr2h,c
 27688  014460  0E00               	movlw	0
 27689  014462  6EDF               	movwf	indf2,c
 27690                           
 27691                           ; BSR set to: 0
 27692                           ;HMI.c: 247: in++;
 27693  014464  0100               	movlb	0	; () banked
 27694  014466  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27695  014468  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27696  01446A                     l1204:
 27697  01446A                     l12458:
 27698                           
 27699                           ; BSR set to: 0
 27700  01446A  0100               	movlb	0	; () banked
 27701  01446C  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27702  01446E  E106               	bnz	l1207
 27703  014470  0E06               	movlw	6
 27704  014472  0100               	movlb	0	; () banked
 27705  014474  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27706  014476  B0D8               	btfsc	status,0,c
 27707  014478  0012               	return	
 27708  01447A  D7EA               	goto	l1205
 27709  01447C                     l1207:
 27710                           
 27711                           ; BSR set to: 0
 27712  01447C  0012               	return		;funcret
 27713  01447E                     __end_of_HMI_SetSegments:
 27714                           	opt stack 0
 27715                           tosu	equ	0xFFF
 27716                           tosh	equ	0xFFE
 27717                           tosl	equ	0xFFD
 27718                           pclath	equ	0xFFA
 27719                           tblptru	equ	0xFF8
 27720                           tblptrh	equ	0xFF7
 27721                           tblptrl	equ	0xFF6
 27722                           tablat	equ	0xFF5
 27723                           prodh	equ	0xFF4
 27724                           prodl	equ	0xFF3
 27725                           intcon	equ	0xFF2
 27726                           postinc0	equ	0xFEE
 27727                           wreg	equ	0xFE8
 27728                           indf1	equ	0xFE7
 27729                           postdec1	equ	0xFE5
 27730                           fsr1h	equ	0xFE2
 27731                           fsr1l	equ	0xFE1
 27732                           indf2	equ	0xFDF
 27733                           postinc2	equ	0xFDE
 27734                           postdec2	equ	0xFDD
 27735                           plusw2	equ	0xFDB
 27736                           fsr2h	equ	0xFDA
 27737                           fsr2l	equ	0xFD9
 27738                           status	equ	0xFD8
 27739                           
 27740 ;; *************** function _ToSegment *****************
 27741 ;; Defined at:
 27742 ;;		line 284 in file "Library/Types.c"
 27743 ;; Parameters:    Size  Location     Type
 27744 ;;  pCHR            1    wreg     unsigned char 
 27745 ;; Auto vars:     Size  Location     Type
 27746 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27747 ;; Return value:  Size  Location     Type
 27748 ;;                  1    wreg      unsigned char 
 27749 ;; Registers used:
 27750 ;;		wreg, status,2, status,0
 27751 ;; Tracked objects:
 27752 ;;		On entry : 0/0
 27753 ;;		On exit  : 0/0
 27754 ;;		Unchanged: 0/0
 27755 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27756 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27757 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27758 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27759 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27760 ;;Total ram usage:        1 bytes
 27761 ;; Hardware stack levels used:    1
 27762 ;; Hardware stack levels required when called:    7
 27763 ;; This function calls:
 27764 ;;		Nothing
 27765 ;; This function is called by:
 27766 ;;		_HMI_SetSegments
 27767 ;; This function uses a non-reentrant model
 27768 ;;
 27769                           
 27770                           	psect	text146
 27771  01188C                     __ptext146:
 27772                           	opt stack 0
 27773  01188C                     _ToSegment:
 27774                           	opt stack 16
 27775                           
 27776                           ; BSR set to: 0
 27777                           ;incstack = 0
 27778                           ;ToSegment@pCHR stored from wreg
 27779  01188C  0100               	movlb	0	; () banked
 27780  01188E  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27781                           
 27782                           ;Types.c: 286: switch(pCHR)
 27783  011890  D07E               	goto	l853
 27784  011892  0E3F               	movlw	63
 27785  011894  0012               	return	
 27786  011896  0E06               	movlw	6
 27787  011898  0012               	return	
 27788  01189A  0E5B               	movlw	91
 27789  01189C  0012               	return	
 27790  01189E  0E4F               	movlw	79
 27791  0118A0  0012               	return	
 27792  0118A2  0E66               	movlw	102
 27793  0118A4  0012               	return	
 27794  0118A6  0E6D               	movlw	109
 27795  0118A8  0012               	return	
 27796  0118AA  0E7D               	movlw	125
 27797  0118AC  0012               	return	
 27798  0118AE  0E07               	movlw	7
 27799  0118B0  0012               	return	
 27800  0118B2  0E7F               	movlw	127
 27801  0118B4  0012               	return	
 27802  0118B6  0E6F               	movlw	111
 27803  0118B8  0012               	return	
 27804  0118BA  0E5F               	movlw	95
 27805  0118BC  0012               	return	
 27806  0118BE  0E7C               	movlw	124
 27807  0118C0  0012               	return	
 27808  0118C2  0E58               	movlw	88
 27809  0118C4  0012               	return	
 27810  0118C6  0E5E               	movlw	94
 27811  0118C8  0012               	return	
 27812  0118CA  0E7B               	movlw	123
 27813  0118CC  0012               	return	
 27814  0118CE  0E71               	movlw	113
 27815  0118D0  0012               	return	
 27816  0118D2  0E6F               	movlw	111
 27817  0118D4  0012               	return	
 27818  0118D6  0E74               	movlw	116
 27819  0118D8  0012               	return	
 27820  0118DA  0E04               	movlw	4
 27821  0118DC  0012               	return	
 27822  0118DE  0E0E               	movlw	14
 27823  0118E0  0012               	return	
 27824  0118E2  0E7A               	movlw	122
 27825  0118E4  0012               	return	
 27826  0118E6  0E06               	movlw	6
 27827  0118E8  0012               	return	
 27828  0118EA  0E14               	movlw	20
 27829  0118EC  0012               	return	
 27830  0118EE  0E54               	movlw	84
 27831  0118F0  0012               	return	
 27832  0118F2  0E5C               	movlw	92
 27833  0118F4  0012               	return	
 27834  0118F6  0E73               	movlw	115
 27835  0118F8  0012               	return	
 27836  0118FA  0E67               	movlw	103
 27837  0118FC  0012               	return	
 27838  0118FE  0E50               	movlw	80
 27839  011900  0012               	return	
 27840  011902  0E6D               	movlw	109
 27841  011904  0012               	return	
 27842  011906  0E78               	movlw	120
 27843  011908  0012               	return	
 27844  01190A  0E1C               	movlw	28
 27845  01190C  0012               	return	
 27846  01190E  0E62               	movlw	98
 27847  011910  0012               	return	
 27848  011912  0E2A               	movlw	42
 27849  011914  0012               	return	
 27850  011916  0E64               	movlw	100
 27851  011918  0012               	return	
 27852  01191A  0E6E               	movlw	110
 27853  01191C  0012               	return	
 27854  01191E  0E5B               	movlw	91
 27855  011920  0012               	return	
 27856  011922  0E77               	movlw	119
 27857  011924  0012               	return	
 27858  011926  0E7F               	movlw	127
 27859  011928  0012               	return	
 27860  01192A  0E39               	movlw	57
 27861  01192C  0012               	return	
 27862  01192E  0E3F               	movlw	63
 27863  011930  0012               	return	
 27864  011932  0E79               	movlw	121
 27865  011934  0012               	return	
 27866  011936  0E71               	movlw	113
 27867  011938  0012               	return	
 27868  01193A  0E3D               	movlw	61
 27869  01193C  0012               	return	
 27870  01193E  0E76               	movlw	118
 27871  011940  0012               	return	
 27872  011942  0E06               	movlw	6
 27873  011944  0012               	return	
 27874  011946  0E1E               	movlw	30
 27875  011948  0012               	return	
 27876  01194A  0E57               	movlw	87
 27877  01194C  0012               	return	
 27878  01194E  0E38               	movlw	56
 27879  011950  0012               	return	
 27880  011952  0E76               	movlw	118
 27881  011954  0012               	return	
 27882  011956  0E76               	movlw	118
 27883  011958  0012               	return	
 27884  01195A  0E3F               	movlw	63
 27885  01195C  0012               	return	
 27886  01195E  0E73               	movlw	115
 27887  011960  0012               	return	
 27888  011962  0E3F               	movlw	63
 27889  011964  0012               	return	
 27890  011966  0E77               	movlw	119
 27891  011968  0012               	return	
 27892  01196A  0E6D               	movlw	109
 27893  01196C  0012               	return	
 27894  01196E  0E31               	movlw	49
 27895  011970  0012               	return	
 27896  011972  0E3E               	movlw	62
 27897  011974  0012               	return	
 27898  011976  0E3E               	movlw	62
 27899  011978  0012               	return	
 27900  01197A  0E7E               	movlw	126
 27901  01197C  0012               	return	
 27902  01197E  0E76               	movlw	118
 27903  011980  0012               	return	
 27904  011982  0E66               	movlw	102
 27905  011984  0012               	return	
 27906  011986  0E5B               	movlw	91
 27907  011988  0012               	return	
 27908  01198A  0E80               	movlw	128
 27909  01198C  0012               	return	
 27910  01198E                     l853:
 27911  01198E  0100               	movlb	0	; () banked
 27912  011990  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27913                           
 27914                           ; Switch size 1, requested type "space"
 27915                           ; Number of cases is 63, Range of values is 46 to 122
 27916                           ; switch strategies available:
 27917                           ; Name         Instructions Cycles
 27918                           ; simple_byte          190    96 (average)
 27919                           ;	Chosen strategy is simple_byte
 27920  011992  0A2E               	xorlw	46	; case 46
 27921  011994  B4D8               	btfsc	status,2,c
 27922  011996  D7F9               	goto	l917
 27923  011998  0A1E               	xorlw	30	; case 48
 27924  01199A  B4D8               	btfsc	status,2,c
 27925  01199C  D77A               	goto	l854
 27926  01199E  0A01               	xorlw	1	; case 49
 27927  0119A0  B4D8               	btfsc	status,2,c
 27928  0119A2  D779               	goto	l856
 27929  0119A4  0A03               	xorlw	3	; case 50
 27930  0119A6  B4D8               	btfsc	status,2,c
 27931  0119A8  D778               	goto	l857
 27932  0119AA  0A01               	xorlw	1	; case 51
 27933  0119AC  B4D8               	btfsc	status,2,c
 27934  0119AE  D777               	goto	l858
 27935  0119B0  0A07               	xorlw	7	; case 52
 27936  0119B2  B4D8               	btfsc	status,2,c
 27937  0119B4  D776               	goto	l859
 27938  0119B6  0A01               	xorlw	1	; case 53
 27939  0119B8  B4D8               	btfsc	status,2,c
 27940  0119BA  D775               	goto	l860
 27941  0119BC  0A03               	xorlw	3	; case 54
 27942  0119BE  B4D8               	btfsc	status,2,c
 27943  0119C0  D774               	goto	l861
 27944  0119C2  0A01               	xorlw	1	; case 55
 27945  0119C4  B4D8               	btfsc	status,2,c
 27946  0119C6  D773               	goto	l862
 27947  0119C8  0A0F               	xorlw	15	; case 56
 27948  0119CA  B4D8               	btfsc	status,2,c
 27949  0119CC  D772               	goto	l863
 27950  0119CE  0A01               	xorlw	1	; case 57
 27951  0119D0  B4D8               	btfsc	status,2,c
 27952  0119D2  D771               	goto	l864
 27953  0119D4  0A78               	xorlw	120	; case 65
 27954  0119D6  B4D8               	btfsc	status,2,c
 27955  0119D8  D7A4               	goto	l891
 27956  0119DA  0A03               	xorlw	3	; case 66
 27957  0119DC  B4D8               	btfsc	status,2,c
 27958  0119DE  D7A3               	goto	l892
 27959  0119E0  0A01               	xorlw	1	; case 67
 27960  0119E2  B4D8               	btfsc	status,2,c
 27961  0119E4  D7A2               	goto	l893
 27962  0119E6  0A07               	xorlw	7	; case 68
 27963  0119E8  B4D8               	btfsc	status,2,c
 27964  0119EA  D7A1               	goto	l894
 27965  0119EC  0A01               	xorlw	1	; case 69
 27966  0119EE  B4D8               	btfsc	status,2,c
 27967  0119F0  D7A0               	goto	l895
 27968  0119F2  0A03               	xorlw	3	; case 70
 27969  0119F4  B4D8               	btfsc	status,2,c
 27970  0119F6  D79F               	goto	l896
 27971  0119F8  0A01               	xorlw	1	; case 71
 27972  0119FA  B4D8               	btfsc	status,2,c
 27973  0119FC  D79E               	goto	l897
 27974  0119FE  0A0F               	xorlw	15	; case 72
 27975  011A00  B4D8               	btfsc	status,2,c
 27976  011A02  D79D               	goto	l898
 27977  011A04  0A01               	xorlw	1	; case 73
 27978  011A06  B4D8               	btfsc	status,2,c
 27979  011A08  D79C               	goto	l899
 27980  011A0A  0A03               	xorlw	3	; case 74
 27981  011A0C  B4D8               	btfsc	status,2,c
 27982  011A0E  D79B               	goto	l900
 27983  011A10  0A01               	xorlw	1	; case 75
 27984  011A12  B4D8               	btfsc	status,2,c
 27985  011A14  D79A               	goto	l901
 27986  011A16  0A07               	xorlw	7	; case 76
 27987  011A18  B4D8               	btfsc	status,2,c
 27988  011A1A  D799               	goto	l902
 27989  011A1C  0A01               	xorlw	1	; case 77
 27990  011A1E  B4D8               	btfsc	status,2,c
 27991  011A20  D798               	goto	l903
 27992  011A22  0A03               	xorlw	3	; case 78
 27993  011A24  B4D8               	btfsc	status,2,c
 27994  011A26  D797               	goto	l904
 27995  011A28  0A01               	xorlw	1	; case 79
 27996  011A2A  B4D8               	btfsc	status,2,c
 27997  011A2C  D796               	goto	l905
 27998  011A2E  0A1F               	xorlw	31	; case 80
 27999  011A30  B4D8               	btfsc	status,2,c
 28000  011A32  D795               	goto	l906
 28001  011A34  0A01               	xorlw	1	; case 81
 28002  011A36  B4D8               	btfsc	status,2,c
 28003  011A38  D794               	goto	l907
 28004  011A3A  0A03               	xorlw	3	; case 82
 28005  011A3C  B4D8               	btfsc	status,2,c
 28006  011A3E  D793               	goto	l908
 28007  011A40  0A01               	xorlw	1	; case 83
 28008  011A42  B4D8               	btfsc	status,2,c
 28009  011A44  D792               	goto	l909
 28010  011A46  0A07               	xorlw	7	; case 84
 28011  011A48  B4D8               	btfsc	status,2,c
 28012  011A4A  D791               	goto	l910
 28013  011A4C  0A01               	xorlw	1	; case 85
 28014  011A4E  B4D8               	btfsc	status,2,c
 28015  011A50  D790               	goto	l911
 28016  011A52  0A03               	xorlw	3	; case 86
 28017  011A54  B4D8               	btfsc	status,2,c
 28018  011A56  D78F               	goto	l912
 28019  011A58  0A01               	xorlw	1	; case 87
 28020  011A5A  B4D8               	btfsc	status,2,c
 28021  011A5C  D78E               	goto	l913
 28022  011A5E  0A0F               	xorlw	15	; case 88
 28023  011A60  B4D8               	btfsc	status,2,c
 28024  011A62  D78D               	goto	l914
 28025  011A64  0A01               	xorlw	1	; case 89
 28026  011A66  B4D8               	btfsc	status,2,c
 28027  011A68  D78C               	goto	l915
 28028  011A6A  0A03               	xorlw	3	; case 90
 28029  011A6C  B4D8               	btfsc	status,2,c
 28030  011A6E  D78B               	goto	l916
 28031  011A70  0A3B               	xorlw	59	; case 97
 28032  011A72  B4D8               	btfsc	status,2,c
 28033  011A74  D722               	goto	l865
 28034  011A76  0A03               	xorlw	3	; case 98
 28035  011A78  B4D8               	btfsc	status,2,c
 28036  011A7A  D721               	goto	l866
 28037  011A7C  0A01               	xorlw	1	; case 99
 28038  011A7E  B4D8               	btfsc	status,2,c
 28039  011A80  D720               	goto	l867
 28040  011A82  0A07               	xorlw	7	; case 100
 28041  011A84  B4D8               	btfsc	status,2,c
 28042  011A86  D71F               	goto	l868
 28043  011A88  0A01               	xorlw	1	; case 101
 28044  011A8A  B4D8               	btfsc	status,2,c
 28045  011A8C  D71E               	goto	l869
 28046  011A8E  0A03               	xorlw	3	; case 102
 28047  011A90  B4D8               	btfsc	status,2,c
 28048  011A92  D71D               	goto	l870
 28049  011A94  0A01               	xorlw	1	; case 103
 28050  011A96  B4D8               	btfsc	status,2,c
 28051  011A98  D71C               	goto	l871
 28052  011A9A  0A0F               	xorlw	15	; case 104
 28053  011A9C  B4D8               	btfsc	status,2,c
 28054  011A9E  D71B               	goto	l872
 28055  011AA0  0A01               	xorlw	1	; case 105
 28056  011AA2  B4D8               	btfsc	status,2,c
 28057  011AA4  D71A               	goto	l873
 28058  011AA6  0A03               	xorlw	3	; case 106
 28059  011AA8  B4D8               	btfsc	status,2,c
 28060  011AAA  D719               	goto	l874
 28061  011AAC  0A01               	xorlw	1	; case 107
 28062  011AAE  B4D8               	btfsc	status,2,c
 28063  011AB0  D718               	goto	l875
 28064  011AB2  0A07               	xorlw	7	; case 108
 28065  011AB4  B4D8               	btfsc	status,2,c
 28066  011AB6  D717               	goto	l876
 28067  011AB8  0A01               	xorlw	1	; case 109
 28068  011ABA  B4D8               	btfsc	status,2,c
 28069  011ABC  D716               	goto	l877
 28070  011ABE  0A03               	xorlw	3	; case 110
 28071  011AC0  B4D8               	btfsc	status,2,c
 28072  011AC2  D715               	goto	l878
 28073  011AC4  0A01               	xorlw	1	; case 111
 28074  011AC6  B4D8               	btfsc	status,2,c
 28075  011AC8  D714               	goto	l879
 28076  011ACA  0A1F               	xorlw	31	; case 112
 28077  011ACC  B4D8               	btfsc	status,2,c
 28078  011ACE  D713               	goto	l880
 28079  011AD0  0A01               	xorlw	1	; case 113
 28080  011AD2  B4D8               	btfsc	status,2,c
 28081  011AD4  D712               	goto	l881
 28082  011AD6  0A03               	xorlw	3	; case 114
 28083  011AD8  B4D8               	btfsc	status,2,c
 28084  011ADA  D711               	goto	l882
 28085  011ADC  0A01               	xorlw	1	; case 115
 28086  011ADE  B4D8               	btfsc	status,2,c
 28087  011AE0  D710               	goto	l883
 28088  011AE2  0A07               	xorlw	7	; case 116
 28089  011AE4  B4D8               	btfsc	status,2,c
 28090  011AE6  D70F               	goto	l884
 28091  011AE8  0A01               	xorlw	1	; case 117
 28092  011AEA  B4D8               	btfsc	status,2,c
 28093  011AEC  D70E               	goto	l885
 28094  011AEE  0A03               	xorlw	3	; case 118
 28095  011AF0  B4D8               	btfsc	status,2,c
 28096  011AF2  D70D               	goto	l886
 28097  011AF4  0A01               	xorlw	1	; case 119
 28098  011AF6  B4D8               	btfsc	status,2,c
 28099  011AF8  D70C               	goto	l887
 28100  011AFA  0A0F               	xorlw	15	; case 120
 28101  011AFC  B4D8               	btfsc	status,2,c
 28102  011AFE  D70B               	goto	l888
 28103  011B00  0A01               	xorlw	1	; case 121
 28104  011B02  B4D8               	btfsc	status,2,c
 28105  011B04  D70A               	goto	l889
 28106  011B06  0A03               	xorlw	3	; case 122
 28107  011B08  B4D8               	btfsc	status,2,c
 28108  011B0A  D709               	goto	l890
 28109                           
 28110                           ;Types.c: 354: return 0;
 28111                           
 28112                           ; BSR set to: 0
 28113  011B0C  0E00               	movlw	0
 28114  011B0E  0012               	return	
 28115  011B10                     __end_of_ToSegment:
 28116                           	opt stack 0
 28117                           tosu	equ	0xFFF
 28118                           tosh	equ	0xFFE
 28119                           tosl	equ	0xFFD
 28120                           pclath	equ	0xFFA
 28121                           tblptru	equ	0xFF8
 28122                           tblptrh	equ	0xFF7
 28123                           tblptrl	equ	0xFF6
 28124                           tablat	equ	0xFF5
 28125                           prodh	equ	0xFF4
 28126                           prodl	equ	0xFF3
 28127                           intcon	equ	0xFF2
 28128                           postinc0	equ	0xFEE
 28129                           wreg	equ	0xFE8
 28130                           indf1	equ	0xFE7
 28131                           postdec1	equ	0xFE5
 28132                           fsr1h	equ	0xFE2
 28133                           fsr1l	equ	0xFE1
 28134                           indf2	equ	0xFDF
 28135                           postinc2	equ	0xFDE
 28136                           postdec2	equ	0xFDD
 28137                           plusw2	equ	0xFDB
 28138                           fsr2h	equ	0xFDA
 28139                           fsr2l	equ	0xFD9
 28140                           status	equ	0xFD8
 28141                           
 28142 ;; *************** function _HMI_SetButton *****************
 28143 ;; Defined at:
 28144 ;;		line 186 in file "HMI.c"
 28145 ;; Parameters:    Size  Location     Type
 28146 ;;  pValue          1    wreg     unsigned char 
 28147 ;; Auto vars:     Size  Location     Type
 28148 ;;  pValue          1    6[BANK0 ] unsigned char 
 28149 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 28150 ;;  v               1    7[BANK0 ] unsigned char 
 28151 ;; Return value:  Size  Location     Type
 28152 ;;                  1    wreg      void 
 28153 ;; Registers used:
 28154 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28155 ;; Tracked objects:
 28156 ;;		On entry : 0/0
 28157 ;;		On exit  : 0/0
 28158 ;;		Unchanged: 0/0
 28159 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28160 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28161 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28162 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28163 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28164 ;;Total ram usage:        8 bytes
 28165 ;; Hardware stack levels used:    1
 28166 ;; Hardware stack levels required when called:    7
 28167 ;; This function calls:
 28168 ;;		Nothing
 28169 ;; This function is called by:
 28170 ;;		_Event_TestButton
 28171 ;; This function uses a non-reentrant model
 28172 ;;
 28173                           
 28174                           	psect	text147
 28175  014DA2                     __ptext147:
 28176                           	opt stack 0
 28177  014DA2                     _HMI_SetButton:
 28178                           	opt stack 18
 28179                           
 28180                           ;incstack = 0
 28181                           ;HMI_SetButton@pValue stored from wreg
 28182  014DA2  0100               	movlb	0	; () banked
 28183  014DA4  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 28184                           
 28185                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 28186  014DA6  0E18               	movlw	low HMI_SetButton@F7213
 28187  014DA8  6EF6               	movwf	tblptrl,c
 28188  014DAA                     	if	1	;There is more than 1 active tblptr byte
 28189  014DAA  0EFD               	movlw	high HMI_SetButton@F7213
 28190  014DAC  6EF7               	movwf	tblptrh,c
 28191  014DAE                     	endif
 28192  014DAE                     	if	1	;There are 3 active tblptr bytes
 28193  014DAE  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 28194  014DB0  6EF8               	movwf	tblptru,c
 28195  014DB2                     	endif
 28196  014DB2  0009               	tblrd		*+
 28197  014DB4  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 28198  014DB8  0009               	tblrd		*+
 28199  014DBA  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 28200  014DBE  0009               	tblrd		*+
 28201  014DC0  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 28202  014DC4  000A               	tblrd		*-
 28203  014DC6  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 28204                           
 28205                           ;HMI.c: 189: UINT8 v = 0b00010001;
 28206  014DCA  0E11               	movlw	17
 28207  014DCC  0100               	movlb	0	; () banked
 28208  014DCE  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28209                           
 28210                           ; BSR set to: 0
 28211                           ;HMI.c: 190: pValue &= 3;
 28212  014DD0  0E03               	movlw	3
 28213  014DD2  0100               	movlb	0	; () banked
 28214  014DD4  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 28215                           
 28216                           ; BSR set to: 0
 28217                           ;HMI.c: 191: v = v << reindex[pValue];
 28218  014DD6  0100               	movlb	0	; () banked
 28219  014DD8  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28220  014DDA  0D01               	mullw	1
 28221  014DDC  0EBC               	movlw	low HMI_SetButton@reindex
 28222  014DDE  24F3               	addwf	prodl,w,c
 28223  014DE0  6ED9               	movwf	fsr2l,c
 28224  014DE2  0E00               	movlw	high HMI_SetButton@reindex
 28225  014DE4  20F4               	addwfc	prodh,w,c
 28226  014DE6  6EDA               	movwf	fsr2h,c
 28227  014DE8  50DF               	movf	indf2,w,c
 28228  014DEA  0100               	movlb	0	; () banked
 28229  014DEC  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28230  014DEE  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28231  014DF2  0100               	movlb	0	; () banked
 28232  014DF4  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28233  014DF6  D003               	goto	u9414
 28234  014DF8                     u9415:
 28235  014DF8  0100               	movlb	0	; () banked
 28236  014DFA  90D8               	bcf	status,0,c
 28237  014DFC  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28238  014DFE                     u9414:
 28239  014DFE  0100               	movlb	0	; () banked
 28240  014E00  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28241  014E02  D7FA               	goto	u9415
 28242  014E04  0100               	movlb	0	; () banked
 28243  014E06  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28244  014E08  0100               	movlb	0	; () banked
 28245  014E0A  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28246                           
 28247                           ; BSR set to: 0
 28248                           ;HMI.c: 192: v = v >> 4;
 28249  014E0C  0100               	movlb	0	; () banked
 28250  014E0E  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28251  014E10  0B0F               	andlw	15
 28252  014E12  0100               	movlb	0	; () banked
 28253  014E14  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28254                           
 28255                           ; BSR set to: 0
 28256                           ;HMI.c: 193: v = v & 0x0F;
 28257  014E16  0100               	movlb	0	; () banked
 28258  014E18  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28259  014E1A  0B0F               	andlw	15
 28260  014E1C  0100               	movlb	0	; () banked
 28261  014E1E  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28262                           
 28263                           ; BSR set to: 0
 28264                           ;HMI.c: 194: HMIBoard.pButton = v;
 28265  014E20  0103               	movlb	3	; () banked
 28266  014E22  5144               	movf	(_HMIBoard+6)& (0+255),w,b
 28267  014E24  0100               	movlb	0	; () banked
 28268  014E26  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28269  014E28  0BF0               	andlw	-16
 28270  014E2A  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28271  014E2C  0103               	movlb	3	; () banked
 28272  014E2E  6F44               	movwf	(_HMIBoard+6)& (0+255),b
 28273                           
 28274                           ; BSR set to: 3
 28275  014E30  0012               	return		;funcret
 28276  014E32                     __end_of_HMI_SetButton:
 28277                           	opt stack 0
 28278                           tosu	equ	0xFFF
 28279                           tosh	equ	0xFFE
 28280                           tosl	equ	0xFFD
 28281                           pclath	equ	0xFFA
 28282                           tblptru	equ	0xFF8
 28283                           tblptrh	equ	0xFF7
 28284                           tblptrl	equ	0xFF6
 28285                           tablat	equ	0xFF5
 28286                           prodh	equ	0xFF4
 28287                           prodl	equ	0xFF3
 28288                           intcon	equ	0xFF2
 28289                           postinc0	equ	0xFEE
 28290                           wreg	equ	0xFE8
 28291                           indf1	equ	0xFE7
 28292                           postdec1	equ	0xFE5
 28293                           fsr1h	equ	0xFE2
 28294                           fsr1l	equ	0xFE1
 28295                           indf2	equ	0xFDF
 28296                           postinc2	equ	0xFDE
 28297                           postdec2	equ	0xFDD
 28298                           plusw2	equ	0xFDB
 28299                           fsr2h	equ	0xFDA
 28300                           fsr2l	equ	0xFD9
 28301                           status	equ	0xFD8
 28302                           
 28303 ;; *************** function _LED_Toggle *****************
 28304 ;; Defined at:
 28305 ;;		line 50 in file "Library/LED.c"
 28306 ;; Parameters:    Size  Location     Type
 28307 ;;  pLED            1    wreg     enum E6739
 28308 ;; Auto vars:     Size  Location     Type
 28309 ;;  pLED            1   24[BANK0 ] enum E6739
 28310 ;; Return value:  Size  Location     Type
 28311 ;;                  1    wreg      void 
 28312 ;; Registers used:
 28313 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28314 ;; Tracked objects:
 28315 ;;		On entry : 0/0
 28316 ;;		On exit  : 0/0
 28317 ;;		Unchanged: 0/0
 28318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28320 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28322 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28323 ;;Total ram usage:        1 bytes
 28324 ;; Hardware stack levels used:    1
 28325 ;; Hardware stack levels required when called:   12
 28326 ;; This function calls:
 28327 ;;		_Port_TogglePin
 28328 ;; This function is called by:
 28329 ;;		_LCD_Reset
 28330 ;;		_Event_DIPSwitch
 28331 ;;		_Event_TestButton
 28332 ;;		_Event_ADCSequenceComplete
 28333 ;;		_Event_HMI_DIPSwitch
 28334 ;;		_Event_HMI_LeftButton
 28335 ;;		_Event_HMI_RightButton
 28336 ;;		_Event_HMI_UpButton
 28337 ;;		_Event_HMI_DownButton
 28338 ;; This function uses a non-reentrant model
 28339 ;;
 28340                           
 28341                           	psect	text148
 28342  015DDE                     __ptext148:
 28343                           	opt stack 0
 28344  015DDE                     _LED_Toggle:
 28345                           	opt stack 13
 28346                           
 28347                           ; BSR set to: 3
 28348                           ;incstack = 0
 28349                           ;LED_Toggle@pLED stored from wreg
 28350  015DDE  0100               	movlb	0	; () banked
 28351  015DE0  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28352                           
 28353                           ;LED.c: 52: switch (pLED)
 28354  015DE2  D018               	goto	l234
 28355  015DE4                     
 28356                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28357  015DE4  0EA5               	movlw	low _PortC
 28358  015DE6  0100               	movlb	0	; () banked
 28359  015DE8  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28360  015DEA  0E00               	movlw	high _PortC
 28361  015DEC  0100               	movlb	0	; () banked
 28362  015DEE  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28363  015DF0  0E00               	movlw	0
 28364  015DF2  0100               	movlb	0	; () banked
 28365  015DF4  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28366  015DF6  EC54  F0B1         	call	_Port_TogglePin	;wreg free
 28367                           
 28368                           ;LED.c: 56: break;
 28369  015DFA  0012               	return	
 28370  015DFC                     
 28371                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28372  015DFC  0EA5               	movlw	low _PortC
 28373  015DFE  0100               	movlb	0	; () banked
 28374  015E00  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28375  015E02  0E00               	movlw	high _PortC
 28376  015E04  0100               	movlb	0	; () banked
 28377  015E06  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28378  015E08  0E01               	movlw	1
 28379  015E0A  0100               	movlb	0	; () banked
 28380  015E0C  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28381  015E0E  EC54  F0B1         	call	_Port_TogglePin	;wreg free
 28382                           
 28383                           ;LED.c: 60: }
 28384                           
 28385                           ;LED.c: 59: break;
 28386  015E12  0012               	return	
 28387  015E14                     l234:
 28388  015E14  0100               	movlb	0	; () banked
 28389  015E16  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28390                           
 28391                           ; Switch size 1, requested type "space"
 28392                           ; Number of cases is 2, Range of values is 0 to 1
 28393                           ; switch strategies available:
 28394                           ; Name         Instructions Cycles
 28395                           ; simple_byte            7     4 (average)
 28396                           ;	Chosen strategy is simple_byte
 28397  015E18  0A00               	xorlw	0	; case 0
 28398  015E1A  B4D8               	btfsc	status,2,c
 28399  015E1C  D7E3               	goto	l235
 28400  015E1E  0A01               	xorlw	1	; case 1
 28401  015E20  A4D8               	btfss	status,2,c
 28402  015E22  0012               	return	
 28403  015E24  D7EB               	goto	l237
 28404  015E26                     __end_of_LED_Toggle:
 28405                           	opt stack 0
 28406                           tosu	equ	0xFFF
 28407                           tosh	equ	0xFFE
 28408                           tosl	equ	0xFFD
 28409                           pclath	equ	0xFFA
 28410                           tblptru	equ	0xFF8
 28411                           tblptrh	equ	0xFF7
 28412                           tblptrl	equ	0xFF6
 28413                           tablat	equ	0xFF5
 28414                           prodh	equ	0xFF4
 28415                           prodl	equ	0xFF3
 28416                           intcon	equ	0xFF2
 28417                           postinc0	equ	0xFEE
 28418                           wreg	equ	0xFE8
 28419                           indf1	equ	0xFE7
 28420                           postdec1	equ	0xFE5
 28421                           fsr1h	equ	0xFE2
 28422                           fsr1l	equ	0xFE1
 28423                           indf2	equ	0xFDF
 28424                           postinc2	equ	0xFDE
 28425                           postdec2	equ	0xFDD
 28426                           plusw2	equ	0xFDB
 28427                           fsr2h	equ	0xFDA
 28428                           fsr2l	equ	0xFD9
 28429                           status	equ	0xFD8
 28430                           
 28431 ;; *************** function _Port_TogglePin *****************
 28432 ;; Defined at:
 28433 ;;		line 278 in file "Library/Port.c"
 28434 ;; Parameters:    Size  Location     Type
 28435 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28436 ;;		 -> PortC(10), 
 28437 ;;  pPin            1   22[BANK0 ] enum E6750
 28438 ;; Auto vars:     Size  Location     Type
 28439 ;;  Value           1   23[BANK0 ] unsigned char 
 28440 ;; Return value:  Size  Location     Type
 28441 ;;                  1    wreg      void 
 28442 ;; Registers used:
 28443 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28444 ;; Tracked objects:
 28445 ;;		On entry : 0/0
 28446 ;;		On exit  : 0/0
 28447 ;;		Unchanged: 0/0
 28448 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28449 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28450 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28451 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28452 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28453 ;;Total ram usage:        4 bytes
 28454 ;; Hardware stack levels used:    1
 28455 ;; Hardware stack levels required when called:   11
 28456 ;; This function calls:
 28457 ;;		_Port_GetPin
 28458 ;;		_Port_SetPin
 28459 ;; This function is called by:
 28460 ;;		_LED_Toggle
 28461 ;; This function uses a non-reentrant model
 28462 ;;
 28463                           
 28464                           	psect	text149
 28465  0162A8                     __ptext149:
 28466                           	opt stack 0
 28467  0162A8                     _Port_TogglePin:
 28468                           	opt stack 13
 28469                           
 28470                           ;Port.c: 280: UINT8 Value;
 28471                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28472                           
 28473                           ;incstack = 0
 28474  0162A8  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28475  0162AC  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28476  0162B0  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28477  0162B4  EC59  F0AF         	call	_Port_GetPin	;wreg free
 28478  0162B8  0100               	movlb	0	; () banked
 28479  0162BA  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28480                           
 28481                           ; BSR set to: 0
 28482                           ;Port.c: 282: Value ^= 0x01;
 28483  0162BC  0E01               	movlw	1
 28484  0162BE  0100               	movlb	0	; () banked
 28485  0162C0  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28486                           
 28487                           ; BSR set to: 0
 28488                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28489  0162C2  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28490  0162C6  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28491  0162CA  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28492  0162CE  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28493  0162D2  EC02  F0A0         	call	_Port_SetPin	;wreg free
 28494  0162D6  0012               	return		;funcret
 28495  0162D8                     __end_of_Port_TogglePin:
 28496                           	opt stack 0
 28497                           tosu	equ	0xFFF
 28498                           tosh	equ	0xFFE
 28499                           tosl	equ	0xFFD
 28500                           pclath	equ	0xFFA
 28501                           tblptru	equ	0xFF8
 28502                           tblptrh	equ	0xFF7
 28503                           tblptrl	equ	0xFF6
 28504                           tablat	equ	0xFF5
 28505                           prodh	equ	0xFF4
 28506                           prodl	equ	0xFF3
 28507                           intcon	equ	0xFF2
 28508                           postinc0	equ	0xFEE
 28509                           wreg	equ	0xFE8
 28510                           indf1	equ	0xFE7
 28511                           postdec1	equ	0xFE5
 28512                           fsr1h	equ	0xFE2
 28513                           fsr1l	equ	0xFE1
 28514                           indf2	equ	0xFDF
 28515                           postinc2	equ	0xFDE
 28516                           postdec2	equ	0xFDD
 28517                           plusw2	equ	0xFDB
 28518                           fsr2h	equ	0xFDA
 28519                           fsr2l	equ	0xFD9
 28520                           status	equ	0xFD8
 28521                           
 28522 ;; *************** function _Port_SetPin *****************
 28523 ;; Defined at:
 28524 ;;		line 247 in file "Library/Port.c"
 28525 ;; Parameters:    Size  Location     Type
 28526 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28527 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28528 ;;  pPin            1   17[BANK0 ] enum E6750
 28529 ;;  pValue          1   18[BANK0 ] unsigned char 
 28530 ;; Auto vars:     Size  Location     Type
 28531 ;;  Type            1   19[BANK0 ] enum E6795
 28532 ;; Return value:  Size  Location     Type
 28533 ;;                  1    wreg      void 
 28534 ;; Registers used:
 28535 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28536 ;; Tracked objects:
 28537 ;;		On entry : 0/0
 28538 ;;		On exit  : 0/0
 28539 ;;		Unchanged: 0/0
 28540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28541 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28542 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28544 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28545 ;;Total ram usage:        5 bytes
 28546 ;; Hardware stack levels used:    1
 28547 ;; Hardware stack levels required when called:   10
 28548 ;; This function calls:
 28549 ;;		_Byte_SetBit
 28550 ;;		_Word_GetPair
 28551 ;; This function is called by:
 28552 ;;		_Reset_Low
 28553 ;;		_Reset_High
 28554 ;;		_LED_Set
 28555 ;;		_Port_TogglePin
 28556 ;;		_Motor_Init
 28557 ;;		_Motor_Step
 28558 ;;		_MXK_Init
 28559 ;; This function uses a non-reentrant model
 28560 ;;
 28561                           
 28562                           	psect	text150
 28563  014004                     __ptext150:
 28564                           	opt stack 0
 28565  014004                     _Port_SetPin:
 28566                           	opt stack 13
 28567                           
 28568                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28569                           
 28570                           ;incstack = 0
 28571  014004  0E08               	movlw	8
 28572  014006  0100               	movlb	0	; () banked
 28573  014008  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28574  01400A  0100               	movlb	0	; () banked
 28575  01400C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28576  01400E  0E00               	movlw	0
 28577  014010  0100               	movlb	0	; () banked
 28578  014012  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28579  014014  0100               	movlb	0	; () banked
 28580  014016  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28581  014018  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28582  01401C  EC5C  F0B0         	call	_Word_GetPair	;wreg free
 28583  014020  0100               	movlb	0	; () banked
 28584  014022  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28585                           
 28586                           ;Port.c: 250: switch (Type)
 28587  014024  D042               	goto	l427
 28588  014026                     
 28589                           ; BSR set to: 0
 28590                           ;Port.c: 256: pValue &= 1;
 28591                           
 28592                           ; BSR set to: 0
 28593  014026  0E01               	movlw	1
 28594  014028  0100               	movlb	0	; () banked
 28595  01402A  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28596                           
 28597                           ; BSR set to: 0
 28598                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28599  01402C  0100               	movlb	0	; () banked
 28600  01402E  EE20 F002          	lfsr	2,2
 28601  014032  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28602  014034  26D9               	addwf	fsr2l,f,c
 28603  014036  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28604  014038  22DA               	addwfc	fsr2h,f,c
 28605  01403A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28606  01403E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28607  014042  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28608  014046  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28609  01404A  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 28610                           
 28611                           ;Port.c: 258: break;
 28612  01404E  0012               	return	
 28613  014050                     
 28614                           ;Port.c: 261: pValue &= 1;
 28615  014050  0E01               	movlw	1
 28616  014052  0100               	movlb	0	; () banked
 28617  014054  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28618                           
 28619                           ;Port.c: 262: pValue ^= 1;
 28620  014056  0E01               	movlw	1
 28621  014058  0100               	movlb	0	; () banked
 28622  01405A  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28623                           
 28624                           ; BSR set to: 0
 28625                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28626  01405C  0100               	movlb	0	; () banked
 28627  01405E  EE20 F002          	lfsr	2,2
 28628  014062  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28629  014064  26D9               	addwf	fsr2l,f,c
 28630  014066  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28631  014068  22DA               	addwfc	fsr2h,f,c
 28632  01406A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28633  01406E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28634  014072  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28635  014076  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28636  01407A  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 28637                           
 28638                           ;Port.c: 264: break;
 28639  01407E  0012               	return	
 28640  014080                     
 28641                           ;Port.c: 266: pValue &= 1;
 28642  014080  0E01               	movlw	1
 28643  014082  0100               	movlb	0	; () banked
 28644  014084  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28645                           
 28646                           ; BSR set to: 0
 28647                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28648  014086  0100               	movlb	0	; () banked
 28649  014088  EE20 F004          	lfsr	2,4
 28650  01408C  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28651  01408E  26D9               	addwf	fsr2l,f,c
 28652  014090  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28653  014092  22DA               	addwfc	fsr2h,f,c
 28654  014094  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28655  014098  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28656  01409C  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28657  0140A0  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28658  0140A4  EC77  F0AC         	call	_Byte_SetBit	;wreg free
 28659                           
 28660                           ;Port.c: 269: }
 28661                           
 28662                           ;Port.c: 268: break;
 28663  0140A8  0012               	return	
 28664  0140AA                     l427:
 28665  0140AA  0100               	movlb	0	; () banked
 28666  0140AC  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28667                           
 28668                           ; Switch size 1, requested type "space"
 28669                           ; Number of cases is 4, Range of values is 0 to 3
 28670                           ; switch strategies available:
 28671                           ; Name         Instructions Cycles
 28672                           ; simple_byte           13     7 (average)
 28673                           ;	Chosen strategy is simple_byte
 28674  0140AE  0A00               	xorlw	0	; case 0
 28675  0140B0  B4D8               	btfsc	status,2,c
 28676  0140B2  0012               	return	
 28677  0140B4  0A01               	xorlw	1	; case 1
 28678  0140B6  B4D8               	btfsc	status,2,c
 28679  0140B8  D7B6               	goto	l430
 28680  0140BA  0A03               	xorlw	3	; case 2
 28681  0140BC  B4D8               	btfsc	status,2,c
 28682  0140BE  D7C8               	goto	l432
 28683  0140C0  0A01               	xorlw	1	; case 3
 28684  0140C2  A4D8               	btfss	status,2,c
 28685  0140C4  0012               	return	
 28686  0140C6  D7DC               	goto	l433
 28687  0140C8                     __end_of_Port_SetPin:
 28688                           	opt stack 0
 28689                           tosu	equ	0xFFF
 28690                           tosh	equ	0xFFE
 28691                           tosl	equ	0xFFD
 28692                           pclath	equ	0xFFA
 28693                           tblptru	equ	0xFF8
 28694                           tblptrh	equ	0xFF7
 28695                           tblptrl	equ	0xFF6
 28696                           tablat	equ	0xFF5
 28697                           prodh	equ	0xFF4
 28698                           prodl	equ	0xFF3
 28699                           intcon	equ	0xFF2
 28700                           postinc0	equ	0xFEE
 28701                           wreg	equ	0xFE8
 28702                           indf1	equ	0xFE7
 28703                           postdec1	equ	0xFE5
 28704                           fsr1h	equ	0xFE2
 28705                           fsr1l	equ	0xFE1
 28706                           indf2	equ	0xFDF
 28707                           postinc2	equ	0xFDE
 28708                           postdec2	equ	0xFDD
 28709                           plusw2	equ	0xFDB
 28710                           fsr2h	equ	0xFDA
 28711                           fsr2l	equ	0xFD9
 28712                           status	equ	0xFD8
 28713                           
 28714 ;; *************** function _Word_GetPair *****************
 28715 ;; Defined at:
 28716 ;;		line 156 in file "Library/Types.c"
 28717 ;; Parameters:    Size  Location     Type
 28718 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28719 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28720 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28721 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28722 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28723 ;;  pPair           1   14[BANK0 ] unsigned char 
 28724 ;; Auto vars:     Size  Location     Type
 28725 ;;		None
 28726 ;; Return value:  Size  Location     Type
 28727 ;;                  1    wreg      unsigned char 
 28728 ;; Registers used:
 28729 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28730 ;; Tracked objects:
 28731 ;;		On entry : 0/0
 28732 ;;		On exit  : 0/0
 28733 ;;		Unchanged: 0/0
 28734 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28735 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28736 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28737 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28738 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28739 ;;Total ram usage:        3 bytes
 28740 ;; Hardware stack levels used:    1
 28741 ;; Hardware stack levels required when called:    9
 28742 ;; This function calls:
 28743 ;;		_Byte_GetPair
 28744 ;; This function is called by:
 28745 ;;		_Port_Init
 28746 ;;		_Port_SetPin
 28747 ;;		_Port_Set
 28748 ;;		_PortProperty_Valid
 28749 ;;		_Port_SetPair
 28750 ;;		_Port_SetQuad
 28751 ;; This function uses a non-reentrant model
 28752 ;;
 28753                           
 28754                           	psect	text151
 28755  0160B8                     __ptext151:
 28756                           	opt stack 0
 28757  0160B8                     _Word_GetPair:
 28758                           	opt stack 13
 28759                           
 28760                           ;Types.c: 158: if (pPair >= 4)
 28761                           
 28762                           ;incstack = 0
 28763  0160B8  0E03               	movlw	3
 28764  0160BA  0100               	movlb	0	; () banked
 28765  0160BC  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28766  0160BE  D012               	goto	l781
 28767                           
 28768                           ; BSR set to: 0
 28769                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28770  0160C0  0E01               	movlw	1
 28771  0160C2  0100               	movlb	0	; () banked
 28772  0160C4  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28773  0160C6  0100               	movlb	0	; () banked
 28774  0160C8  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28775  0160CA  0E00               	movlw	0
 28776  0160CC  0100               	movlb	0	; () banked
 28777  0160CE  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28778  0160D0  0100               	movlb	0	; () banked
 28779  0160D2  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28780  0160D4  0100               	movlb	0	; () banked
 28781  0160D6  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28782  0160D8  0FFC               	addlw	252
 28783  0160DA  0100               	movlb	0	; () banked
 28784  0160DC  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28785  0160DE  ECAF  F0B2         	call	_Byte_GetPair	;wreg free
 28786  0160E2  0012               	return	
 28787  0160E4                     l781:
 28788                           
 28789                           ;Types.c: 160: else
 28790                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28791  0160E4  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28792  0160E8  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28793  0160EC  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28794  0160F0  ECAF  F0B2         	call	_Byte_GetPair	;wreg free
 28795  0160F4  0012               	return	
 28796  0160F6                     __end_of_Word_GetPair:
 28797                           	opt stack 0
 28798                           tosu	equ	0xFFF
 28799                           tosh	equ	0xFFE
 28800                           tosl	equ	0xFFD
 28801                           pclath	equ	0xFFA
 28802                           tblptru	equ	0xFF8
 28803                           tblptrh	equ	0xFF7
 28804                           tblptrl	equ	0xFF6
 28805                           tablat	equ	0xFF5
 28806                           prodh	equ	0xFF4
 28807                           prodl	equ	0xFF3
 28808                           intcon	equ	0xFF2
 28809                           postinc0	equ	0xFEE
 28810                           wreg	equ	0xFE8
 28811                           indf1	equ	0xFE7
 28812                           postdec1	equ	0xFE5
 28813                           fsr1h	equ	0xFE2
 28814                           fsr1l	equ	0xFE1
 28815                           indf2	equ	0xFDF
 28816                           postinc2	equ	0xFDE
 28817                           postdec2	equ	0xFDD
 28818                           plusw2	equ	0xFDB
 28819                           fsr2h	equ	0xFDA
 28820                           fsr2l	equ	0xFD9
 28821                           status	equ	0xFD8
 28822                           
 28823 ;; *************** function _Byte_GetPair *****************
 28824 ;; Defined at:
 28825 ;;		line 87 in file "Library/Types.c"
 28826 ;; Parameters:    Size  Location     Type
 28827 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28828 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28829 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28830 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28831 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28832 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28833 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28834 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28835 ;;		 -> NULL(0), 
 28836 ;;  pPair           1   11[BANK0 ] unsigned char 
 28837 ;; Auto vars:     Size  Location     Type
 28838 ;;		None
 28839 ;; Return value:  Size  Location     Type
 28840 ;;                  1    wreg      unsigned char 
 28841 ;; Registers used:
 28842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28843 ;; Tracked objects:
 28844 ;;		On entry : 0/0
 28845 ;;		On exit  : 0/0
 28846 ;;		Unchanged: 0/0
 28847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28848 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28851 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28852 ;;Total ram usage:        3 bytes
 28853 ;; Hardware stack levels used:    1
 28854 ;; Hardware stack levels required when called:    8
 28855 ;; This function calls:
 28856 ;;		_Byte_GetZone
 28857 ;; This function is called by:
 28858 ;;		_Word_GetPair
 28859 ;; This function uses a non-reentrant model
 28860 ;;
 28861                           
 28862                           	psect	text152
 28863  01655E                     __ptext152:
 28864                           	opt stack 0
 28865  01655E                     _Byte_GetPair:
 28866                           	opt stack 13
 28867                           
 28868                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28869                           
 28870                           ;incstack = 0
 28871  01655E  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28872  016562  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28873  016566  0E04               	movlw	4
 28874  016568  0100               	movlb	0	; () banked
 28875  01656A  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28876  01656C  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28877  016570  0E02               	movlw	2
 28878  016572  0100               	movlb	0	; () banked
 28879  016574  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28880  016576  EC37  F0A6         	call	_Byte_GetZone	;wreg free
 28881  01657A  0012               	return	
 28882  01657C                     __end_of_Byte_GetPair:
 28883                           	opt stack 0
 28884                           tosu	equ	0xFFF
 28885                           tosh	equ	0xFFE
 28886                           tosl	equ	0xFFD
 28887                           pclath	equ	0xFFA
 28888                           tblptru	equ	0xFF8
 28889                           tblptrh	equ	0xFF7
 28890                           tblptrl	equ	0xFF6
 28891                           tablat	equ	0xFF5
 28892                           prodh	equ	0xFF4
 28893                           prodl	equ	0xFF3
 28894                           intcon	equ	0xFF2
 28895                           postinc0	equ	0xFEE
 28896                           wreg	equ	0xFE8
 28897                           indf1	equ	0xFE7
 28898                           postdec1	equ	0xFE5
 28899                           fsr1h	equ	0xFE2
 28900                           fsr1l	equ	0xFE1
 28901                           indf2	equ	0xFDF
 28902                           postinc2	equ	0xFDE
 28903                           postdec2	equ	0xFDD
 28904                           plusw2	equ	0xFDB
 28905                           fsr2h	equ	0xFDA
 28906                           fsr2l	equ	0xFD9
 28907                           status	equ	0xFD8
 28908                           
 28909 ;; *************** function _Byte_GetZone *****************
 28910 ;; Defined at:
 28911 ;;		line 64 in file "Library/Types.c"
 28912 ;; Parameters:    Size  Location     Type
 28913 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28914 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28915 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28916 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28917 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28918 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28919 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28920 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28921 ;;		 -> NULL(0), 
 28922 ;;  pMax            1    2[BANK0 ] unsigned char 
 28923 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28924 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28925 ;; Auto vars:     Size  Location     Type
 28926 ;;  Output          1    8[BANK0 ] unsigned char 
 28927 ;;  Offset          1    7[BANK0 ] unsigned char 
 28928 ;;  MASK            1    6[BANK0 ] unsigned char 
 28929 ;; Return value:  Size  Location     Type
 28930 ;;                  1    wreg      unsigned char 
 28931 ;; Registers used:
 28932 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28933 ;; Tracked objects:
 28934 ;;		On entry : 0/0
 28935 ;;		On exit  : 0/0
 28936 ;;		Unchanged: 0/0
 28937 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28938 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28939 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28940 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28941 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28942 ;;Total ram usage:        9 bytes
 28943 ;; Hardware stack levels used:    1
 28944 ;; Hardware stack levels required when called:    7
 28945 ;; This function calls:
 28946 ;;		Nothing
 28947 ;; This function is called by:
 28948 ;;		_Byte_GetPair
 28949 ;;		_Byte_GetTriple
 28950 ;;		_Byte_GetQuad
 28951 ;; This function uses a non-reentrant model
 28952 ;;
 28953                           
 28954                           	psect	text153
 28955  014C6E                     __ptext153:
 28956                           	opt stack 0
 28957  014C6E                     _Byte_GetZone:
 28958                           	opt stack 13
 28959                           
 28960                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28961                           
 28962                           ;incstack = 0
 28963  014C6E  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28964  014C72  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28965  014C76  0E00               	movlw	low (__mediumconst shr (0+16))
 28966  014C78  6EF8               	movwf	tblptru,c
 28967  014C7A  0E0F               	movlw	(high __ramtop+-1)
 28968  014C7C  64F7               	cpfsgt	tblptrh,c
 28969  014C7E  D003               	bra	u8827
 28970  014C80  0008               	tblrd		*
 28971  014C82  50F5               	movf	tablat,w,c
 28972  014C84  D005               	bra	u8820
 28973  014C86                     u8827:
 28974  014C86  CFF6 FFE9          	movff	tblptrl,fsr0l
 28975  014C8A  CFF7 FFEA          	movff	tblptrh,fsr0h
 28976  014C8E  50EF               	movf	indf0,w,c
 28977  014C90                     u8820:
 28978  014C90  0100               	movlb	0	; () banked
 28979  014C92  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28980                           
 28981                           ; BSR set to: 0
 28982                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28983  014C94  0100               	movlb	0	; () banked
 28984  014C96  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28985  014C98  0D01               	mullw	1
 28986  014C9A  0E0F               	movlw	low _MASKS
 28987  014C9C  24F3               	addwf	prodl,w,c
 28988  014C9E  6EF6               	movwf	tblptrl,c
 28989  014CA0  0EFD               	movlw	high _MASKS
 28990  014CA2  20F4               	addwfc	prodh,w,c
 28991  014CA4  6EF7               	movwf	tblptrh,c
 28992  014CA6                     	if	1	;There are 3 active tblptr bytes
 28993  014CA6  6AF8               	clrf	tblptru,c
 28994  014CA8  0E00               	movlw	low (__mediumconst shr (0+16))
 28995  014CAA  22F8               	addwfc	tblptru,f,c
 28996  014CAC                     	endif
 28997  014CAC  0008               	tblrd		*
 28998  014CAE  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28999                           
 29000                           ; BSR set to: 0
 29001                           ;Types.c: 68: UINT8 Offset = 0;
 29002  014CB2  0E00               	movlw	0
 29003  014CB4  0100               	movlb	0	; () banked
 29004  014CB6  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 29005                           
 29006                           ;Types.c: 70: while (pChunk >= pMax)
 29007  014CB8  D006               	goto	l732
 29008  014CBA                     
 29009                           ; BSR set to: 0
 29010                           ;Types.c: 71: {
 29011                           ;Types.c: 72: pChunk -= pMax;
 29012                           
 29013                           ; BSR set to: 0
 29014  014CBA  0100               	movlb	0	; () banked
 29015  014CBC  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29016  014CBE  0100               	movlb	0	; () banked
 29017  014CC0  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 29018                           
 29019                           ; BSR set to: 0
 29020                           ;Types.c: 73: Offset += 1;
 29021  014CC2  0100               	movlb	0	; () banked
 29022  014CC4  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 29023  014CC6                     l732:
 29024                           
 29025                           ; BSR set to: 0
 29026                           
 29027                           ; BSR set to: 0
 29028  014CC6  0100               	movlb	0	; () banked
 29029  014CC8  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 29030  014CCA  0100               	movlb	0	; () banked
 29031  014CCC  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 29032  014CCE  B0D8               	btfsc	status,0,c
 29033  014CD0  D7F4               	goto	l733
 29034                           
 29035                           ; BSR set to: 0
 29036                           ;Types.c: 74: }
 29037                           ;Types.c: 75: pChunk *= pChunkSize;
 29038                           
 29039                           ; BSR set to: 0
 29040  014CD2  0100               	movlb	0	; () banked
 29041  014CD4  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 29042  014CD6  0100               	movlb	0	; () banked
 29043  014CD8  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 29044  014CDA  50F3               	movf	prodl,w,c
 29045  014CDC  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 29046                           
 29047                           ; BSR set to: 0
 29048                           ;Types.c: 76: pChunk += Offset;
 29049  014CDE  0100               	movlb	0	; () banked
 29050  014CE0  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 29051  014CE2  0100               	movlb	0	; () banked
 29052  014CE4  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 29053                           
 29054                           ; BSR set to: 0
 29055                           ;Types.c: 78: Output >>= pChunk;
 29056  014CE6  0100               	movlb	0	; () banked
 29057  014CE8  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 29058  014CEA  0100               	movlb	0	; () banked
 29059  014CEC  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 29060  014CEE  D003               	goto	u8840
 29061  014CF0                     u8845:
 29062  014CF0  0100               	movlb	0	; () banked
 29063  014CF2  90D8               	bcf	status,0,c
 29064  014CF4  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 29065  014CF6                     u8840:
 29066  014CF6  0100               	movlb	0	; () banked
 29067  014CF8  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 29068  014CFA  D7FA               	goto	u8845
 29069                           
 29070                           ;Types.c: 79: Output &= MASK;
 29071  014CFC  0100               	movlb	0	; () banked
 29072  014CFE  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 29073  014D00  0100               	movlb	0	; () banked
 29074  014D02  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 29075                           
 29076                           ; BSR set to: 0
 29077                           ;Types.c: 80: return Output;
 29078  014D04  0100               	movlb	0	; () banked
 29079  014D06  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 29080  014D08  0012               	return	
 29081  014D0A                     __end_of_Byte_GetZone:
 29082                           	opt stack 0
 29083                           tosu	equ	0xFFF
 29084                           tosh	equ	0xFFE
 29085                           tosl	equ	0xFFD
 29086                           pclath	equ	0xFFA
 29087                           tblptru	equ	0xFF8
 29088                           tblptrh	equ	0xFF7
 29089                           tblptrl	equ	0xFF6
 29090                           tablat	equ	0xFF5
 29091                           prodh	equ	0xFF4
 29092                           prodl	equ	0xFF3
 29093                           intcon	equ	0xFF2
 29094                           indf0	equ	0xFEF
 29095                           postinc0	equ	0xFEE
 29096                           fsr0h	equ	0xFEA
 29097                           fsr0l	equ	0xFE9
 29098                           wreg	equ	0xFE8
 29099                           indf1	equ	0xFE7
 29100                           postdec1	equ	0xFE5
 29101                           fsr1h	equ	0xFE2
 29102                           fsr1l	equ	0xFE1
 29103                           indf2	equ	0xFDF
 29104                           postinc2	equ	0xFDE
 29105                           postdec2	equ	0xFDD
 29106                           plusw2	equ	0xFDB
 29107                           fsr2h	equ	0xFDA
 29108                           fsr2l	equ	0xFD9
 29109                           status	equ	0xFD8
 29110                           
 29111 ;; *************** function _Byte_SetBit *****************
 29112 ;; Defined at:
 29113 ;;		line 32 in file "Library/Types.c"
 29114 ;; Parameters:    Size  Location     Type
 29115 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 29116 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29117 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29118 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29119 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29120 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29121 ;;		 -> NULL(0), 
 29122 ;;  pBit            1    2[BANK0 ] unsigned char 
 29123 ;;  pValue          1    3[BANK0 ] unsigned char 
 29124 ;; Auto vars:     Size  Location     Type
 29125 ;;		None
 29126 ;; Return value:  Size  Location     Type
 29127 ;;                  1    wreg      void 
 29128 ;; Registers used:
 29129 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29130 ;; Tracked objects:
 29131 ;;		On entry : 0/0
 29132 ;;		On exit  : 0/0
 29133 ;;		Unchanged: 0/0
 29134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29137 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29138 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29139 ;;Total ram usage:        7 bytes
 29140 ;; Hardware stack levels used:    1
 29141 ;; Hardware stack levels required when called:    7
 29142 ;; This function calls:
 29143 ;;		Nothing
 29144 ;; This function is called by:
 29145 ;;		_Port_SetPinType
 29146 ;;		_Port_SetPin
 29147 ;;		_SPI_Init
 29148 ;;		_SPI_MinSpeed
 29149 ;;		_SPI_MaxSpeed
 29150 ;;		_Word_SetBit
 29151 ;;		_I2C_Init
 29152 ;; This function uses a non-reentrant model
 29153 ;;
 29154                           
 29155                           	psect	text154
 29156  0158EE                     __ptext154:
 29157                           	opt stack 0
 29158  0158EE                     _Byte_SetBit:
 29159                           	opt stack 15
 29160                           
 29161                           ;Types.c: 34: pValue &= 1;
 29162                           
 29163                           ; BSR set to: 0
 29164                           ;incstack = 0
 29165  0158EE  0E01               	movlw	1
 29166  0158F0  0100               	movlb	0	; () banked
 29167  0158F2  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 29168                           
 29169                           ; BSR set to: 0
 29170                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29171  0158F4  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29172  0158F8  0E01               	movlw	1
 29173  0158FA  0100               	movlb	0	; () banked
 29174  0158FC  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 29175  0158FE  0100               	movlb	0	; () banked
 29176  015900  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29177  015902  D003               	goto	u8864
 29178  015904                     u8865:
 29179  015904  0100               	movlb	0	; () banked
 29180  015906  90D8               	bcf	status,0,c
 29181  015908  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29182  01590A                     u8864:
 29183  01590A  0100               	movlb	0	; () banked
 29184  01590C  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29185  01590E  D7FA               	goto	u8865
 29186  015910  0100               	movlb	0	; () banked
 29187  015912  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29188  015914  0AFF               	xorlw	255
 29189  015916  0100               	movlb	0	; () banked
 29190  015918  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 29191  01591A  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29192  01591E  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29193  015922  0100               	movlb	0	; () banked
 29194  015924  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 29195  015926  16DF               	andwf	indf2,f,c
 29196                           
 29197                           ; BSR set to: 0
 29198                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29199  015928  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29200  01592C  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 29201  015930  0100               	movlb	0	; () banked
 29202  015932  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29203  015934  D003               	goto	u8874
 29204  015936                     u8875:
 29205  015936  0100               	movlb	0	; () banked
 29206  015938  90D8               	bcf	status,0,c
 29207  01593A  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29208  01593C                     u8874:
 29209  01593C  0100               	movlb	0	; () banked
 29210  01593E  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29211  015940  D7FA               	goto	u8875
 29212  015942  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29213  015946  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29214  01594A  0100               	movlb	0	; () banked
 29215  01594C  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29216  01594E  12DF               	iorwf	indf2,f,c
 29217                           
 29218                           ; BSR set to: 0
 29219  015950  0012               	return		;funcret
 29220  015952                     __end_of_Byte_SetBit:
 29221                           	opt stack 0
 29222                           tosu	equ	0xFFF
 29223                           tosh	equ	0xFFE
 29224                           tosl	equ	0xFFD
 29225                           pclath	equ	0xFFA
 29226                           tblptru	equ	0xFF8
 29227                           tblptrh	equ	0xFF7
 29228                           tblptrl	equ	0xFF6
 29229                           tablat	equ	0xFF5
 29230                           prodh	equ	0xFF4
 29231                           prodl	equ	0xFF3
 29232                           intcon	equ	0xFF2
 29233                           indf0	equ	0xFEF
 29234                           postinc0	equ	0xFEE
 29235                           fsr0h	equ	0xFEA
 29236                           fsr0l	equ	0xFE9
 29237                           wreg	equ	0xFE8
 29238                           indf1	equ	0xFE7
 29239                           postdec1	equ	0xFE5
 29240                           fsr1h	equ	0xFE2
 29241                           fsr1l	equ	0xFE1
 29242                           indf2	equ	0xFDF
 29243                           postinc2	equ	0xFDE
 29244                           postdec2	equ	0xFDD
 29245                           plusw2	equ	0xFDB
 29246                           fsr2h	equ	0xFDA
 29247                           fsr2l	equ	0xFD9
 29248                           status	equ	0xFD8
 29249                           
 29250 ;; *************** function _Port_GetPin *****************
 29251 ;; Defined at:
 29252 ;;		line 271 in file "Library/Port.c"
 29253 ;; Parameters:    Size  Location     Type
 29254 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29255 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29256 ;;  pPin            1    2[BANK0 ] enum E6750
 29257 ;; Auto vars:     Size  Location     Type
 29258 ;;  Output          1    5[BANK0 ] unsigned char 
 29259 ;; Return value:  Size  Location     Type
 29260 ;;                  1    wreg      unsigned char 
 29261 ;; Registers used:
 29262 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29263 ;; Tracked objects:
 29264 ;;		On entry : 0/0
 29265 ;;		On exit  : 0/0
 29266 ;;		Unchanged: 0/0
 29267 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29268 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29269 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29270 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29271 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29272 ;;Total ram usage:        6 bytes
 29273 ;; Hardware stack levels used:    1
 29274 ;; Hardware stack levels required when called:    7
 29275 ;; This function calls:
 29276 ;;		Nothing
 29277 ;; This function is called by:
 29278 ;;		_Port_TogglePin
 29279 ;;		_HMI_LeftSwitch
 29280 ;;		_HMI_RightSwitch
 29281 ;;		_HMI_UpSwitch
 29282 ;;		_HMI_DownSwitch
 29283 ;;		_MXK_TestButton
 29284 ;; This function uses a non-reentrant model
 29285 ;;
 29286                           
 29287                           	psect	text155
 29288  015EB2                     __ptext155:
 29289                           	opt stack 0
 29290  015EB2                     _Port_GetPin:
 29291                           	opt stack 18
 29292                           
 29293                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29294                           
 29295                           ; BSR set to: 0
 29296                           ;incstack = 0
 29297  015EB2  0100               	movlb	0	; () banked
 29298  015EB4  EE20 F006          	lfsr	2,6
 29299  015EB8  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29300  015EBA  26D9               	addwf	fsr2l,f,c
 29301  015EBC  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29302  015EBE  22DA               	addwfc	fsr2h,f,c
 29303  015EC0  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29304  015EC4  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29305  015EC8  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29306  015ECC  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29307  015ED0  50DF               	movf	indf2,w,c
 29308  015ED2  0100               	movlb	0	; () banked
 29309  015ED4  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29310                           
 29311                           ; BSR set to: 0
 29312                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29313  015ED6  0100               	movlb	0	; () banked
 29314  015ED8  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29315  015EDA  0100               	movlb	0	; () banked
 29316  015EDC  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29317  015EDE  D003               	goto	u8910
 29318  015EE0                     u8915:
 29319  015EE0  0100               	movlb	0	; () banked
 29320  015EE2  90D8               	bcf	status,0,c
 29321  015EE4  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29322  015EE6                     u8910:
 29323  015EE6  0100               	movlb	0	; () banked
 29324  015EE8  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29325  015EEA  D7FA               	goto	u8915
 29326                           
 29327                           ;Port.c: 275: Output &= 1;
 29328  015EEC  0E01               	movlw	1
 29329  015EEE  0100               	movlb	0	; () banked
 29330  015EF0  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29331                           
 29332                           ; BSR set to: 0
 29333                           ;Port.c: 276: return Output;
 29334  015EF2  0100               	movlb	0	; () banked
 29335  015EF4  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29336  015EF6  0012               	return	
 29337  015EF8                     __end_of_Port_GetPin:
 29338                           	opt stack 0
 29339                           tosu	equ	0xFFF
 29340                           tosh	equ	0xFFE
 29341                           tosl	equ	0xFFD
 29342                           pclath	equ	0xFFA
 29343                           tblptru	equ	0xFF8
 29344                           tblptrh	equ	0xFF7
 29345                           tblptrl	equ	0xFF6
 29346                           tablat	equ	0xFF5
 29347                           prodh	equ	0xFF4
 29348                           prodl	equ	0xFF3
 29349                           intcon	equ	0xFF2
 29350                           indf0	equ	0xFEF
 29351                           postinc0	equ	0xFEE
 29352                           fsr0h	equ	0xFEA
 29353                           fsr0l	equ	0xFE9
 29354                           wreg	equ	0xFE8
 29355                           indf1	equ	0xFE7
 29356                           postdec1	equ	0xFE5
 29357                           fsr1h	equ	0xFE2
 29358                           fsr1l	equ	0xFE1
 29359                           indf2	equ	0xFDF
 29360                           postinc2	equ	0xFDE
 29361                           postdec2	equ	0xFDD
 29362                           plusw2	equ	0xFDB
 29363                           fsr2h	equ	0xFDA
 29364                           fsr2l	equ	0xFD9
 29365                           status	equ	0xFD8
 29366                           
 29367 ;; *************** function _HMI_SetBar *****************
 29368 ;; Defined at:
 29369 ;;		line 205 in file "HMI.c"
 29370 ;; Parameters:    Size  Location     Type
 29371 ;;  pValue          1    wreg     unsigned char 
 29372 ;; Auto vars:     Size  Location     Type
 29373 ;;  pValue          1    0[BANK0 ] unsigned char 
 29374 ;; Return value:  Size  Location     Type
 29375 ;;                  1    wreg      void 
 29376 ;; Registers used:
 29377 ;;		wreg
 29378 ;; Tracked objects:
 29379 ;;		On entry : 0/0
 29380 ;;		On exit  : 0/0
 29381 ;;		Unchanged: 0/0
 29382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29383 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29386 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29387 ;;Total ram usage:        1 bytes
 29388 ;; Hardware stack levels used:    1
 29389 ;; Hardware stack levels required when called:    7
 29390 ;; This function calls:
 29391 ;;		Nothing
 29392 ;; This function is called by:
 29393 ;;		_Event_DIPSwitch
 29394 ;;		_Event_HMI_DIPSwitch
 29395 ;;		_Event_HMI_LeftButton
 29396 ;;		_Event_HMI_RightButton
 29397 ;; This function uses a non-reentrant model
 29398 ;;
 29399                           
 29400                           	psect	text156
 29401  0167B6                     __ptext156:
 29402                           	opt stack 0
 29403  0167B6                     _HMI_SetBar:
 29404                           	opt stack 18
 29405                           
 29406                           ; BSR set to: 0
 29407                           ;incstack = 0
 29408                           ;HMI_SetBar@pValue stored from wreg
 29409  0167B6  0100               	movlb	0	; () banked
 29410  0167B8  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29411                           
 29412                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29413  0167BA  C0BA  F345         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29414  0167BE  0012               	return		;funcret
 29415  0167C0                     __end_of_HMI_SetBar:
 29416                           	opt stack 0
 29417                           tosu	equ	0xFFF
 29418                           tosh	equ	0xFFE
 29419                           tosl	equ	0xFFD
 29420                           pclath	equ	0xFFA
 29421                           tblptru	equ	0xFF8
 29422                           tblptrh	equ	0xFF7
 29423                           tblptrl	equ	0xFF6
 29424                           tablat	equ	0xFF5
 29425                           prodh	equ	0xFF4
 29426                           prodl	equ	0xFF3
 29427                           intcon	equ	0xFF2
 29428                           indf0	equ	0xFEF
 29429                           postinc0	equ	0xFEE
 29430                           fsr0h	equ	0xFEA
 29431                           fsr0l	equ	0xFE9
 29432                           wreg	equ	0xFE8
 29433                           indf1	equ	0xFE7
 29434                           postdec1	equ	0xFE5
 29435                           fsr1h	equ	0xFE2
 29436                           fsr1l	equ	0xFE1
 29437                           indf2	equ	0xFDF
 29438                           postinc2	equ	0xFDE
 29439                           postdec2	equ	0xFDD
 29440                           plusw2	equ	0xFDB
 29441                           fsr2h	equ	0xFDA
 29442                           fsr2l	equ	0xFD9
 29443                           status	equ	0xFD8
 29444                           
 29445 ;; *************** function _HMI_GetBar *****************
 29446 ;; Defined at:
 29447 ;;		line 209 in file "HMI.c"
 29448 ;; Parameters:    Size  Location     Type
 29449 ;;		None
 29450 ;; Auto vars:     Size  Location     Type
 29451 ;;		None
 29452 ;; Return value:  Size  Location     Type
 29453 ;;                  1    wreg      unsigned char 
 29454 ;; Registers used:
 29455 ;;		wreg, status,2
 29456 ;; Tracked objects:
 29457 ;;		On entry : 0/0
 29458 ;;		On exit  : 0/0
 29459 ;;		Unchanged: 0/0
 29460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29465 ;;Total ram usage:        0 bytes
 29466 ;; Hardware stack levels used:    1
 29467 ;; Hardware stack levels required when called:    7
 29468 ;; This function calls:
 29469 ;;		Nothing
 29470 ;; This function is called by:
 29471 ;;		_Event_DIPSwitch
 29472 ;;		_Event_HMI_DIPSwitch
 29473 ;; This function uses a non-reentrant model
 29474 ;;
 29475                           
 29476                           	psect	text157
 29477  0167F2                     __ptext157:
 29478                           	opt stack 0
 29479  0167F2                     _HMI_GetBar:
 29480                           	opt stack 18
 29481                           
 29482                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29483                           
 29484                           ;incstack = 0
 29485  0167F2  0103               	movlb	3	; () banked
 29486  0167F4  5145               	movf	(_HMIBoard+7)& (0+255),w,b
 29487  0167F6  0012               	return	
 29488  0167F8                     __end_of_HMI_GetBar:
 29489                           	opt stack 0
 29490                           tosu	equ	0xFFF
 29491                           tosh	equ	0xFFE
 29492                           tosl	equ	0xFFD
 29493                           pclath	equ	0xFFA
 29494                           tblptru	equ	0xFF8
 29495                           tblptrh	equ	0xFF7
 29496                           tblptrl	equ	0xFF6
 29497                           tablat	equ	0xFF5
 29498                           prodh	equ	0xFF4
 29499                           prodl	equ	0xFF3
 29500                           intcon	equ	0xFF2
 29501                           indf0	equ	0xFEF
 29502                           postinc0	equ	0xFEE
 29503                           fsr0h	equ	0xFEA
 29504                           fsr0l	equ	0xFE9
 29505                           wreg	equ	0xFE8
 29506                           indf1	equ	0xFE7
 29507                           postdec1	equ	0xFE5
 29508                           fsr1h	equ	0xFE2
 29509                           fsr1l	equ	0xFE1
 29510                           indf2	equ	0xFDF
 29511                           postinc2	equ	0xFDE
 29512                           postdec2	equ	0xFDD
 29513                           plusw2	equ	0xFDB
 29514                           fsr2h	equ	0xFDA
 29515                           fsr2l	equ	0xFD9
 29516                           status	equ	0xFD8
 29517                           
 29518 ;; *************** function _ISR_Function *****************
 29519 ;; Defined at:
 29520 ;;		line 38 in file "Library/ISR.c"
 29521 ;; Parameters:    Size  Location     Type
 29522 ;;		None
 29523 ;; Auto vars:     Size  Location     Type
 29524 ;;		None
 29525 ;; Return value:  Size  Location     Type
 29526 ;;                  1    wreg      void 
 29527 ;; Registers used:
 29528 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29529 ;; Tracked objects:
 29530 ;;		On entry : 0/0
 29531 ;;		On exit  : 0/0
 29532 ;;		Unchanged: 0/0
 29533 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29534 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29535 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29536 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29537 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29538 ;;Total ram usage:       18 bytes
 29539 ;; Hardware stack levels used:    1
 29540 ;; Hardware stack levels required when called:    6
 29541 ;; This function calls:
 29542 ;;		_Timer0_ISR
 29543 ;; This function is called by:
 29544 ;;		Interrupt level 2
 29545 ;; This function uses a non-reentrant model
 29546 ;;
 29547                           
 29548                           	psect	intcode
 29549  001408                     __pintcode:
 29550                           	opt stack 0
 29551  001408                     _ISR_Function:
 29552                           	opt stack 13
 29553                           
 29554                           ; BSR set to: 3
 29555                           ;incstack = 0
 29556  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29557  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29558  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29559  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29560  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29561  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29562  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29563  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29564  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29565  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29566  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29567  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29568  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29569  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29570  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29571  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29572  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29573  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29574  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29575                           
 29576                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29577  001452  92F2               	bcf	intcon,1,c	;volatile
 29578                           
 29579                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29580  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29581  001456  AAF2               	btfss	intcon,5,c	;volatile
 29582  001458  D002               	goto	i2l1590
 29583                           
 29584                           ;ISR.c: 68: Timer0_ISR();
 29585  00145A  EC9B  F0B1         	call	_Timer0_ISR	;wreg free
 29586  00145E                     i2l1590:
 29587  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29588  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29589  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29590  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29591  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29592  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29593  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29594  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29595  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29596  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29597  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29598  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29599  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29600  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29601  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29602  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29603  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29604  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29605  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29606  0014A8  0011               	retfie		f
 29607  0014AA                     __end_of_ISR_Function:
 29608                           	opt stack 0
 29609                           tosu	equ	0xFFF
 29610                           tosh	equ	0xFFE
 29611                           tosl	equ	0xFFD
 29612                           pclatu	equ	0xFFB
 29613                           pclath	equ	0xFFA
 29614                           tblptru	equ	0xFF8
 29615                           tblptrh	equ	0xFF7
 29616                           tblptrl	equ	0xFF6
 29617                           tablat	equ	0xFF5
 29618                           prodh	equ	0xFF4
 29619                           prodl	equ	0xFF3
 29620                           intcon	equ	0xFF2
 29621                           indf0	equ	0xFEF
 29622                           postinc0	equ	0xFEE
 29623                           fsr0h	equ	0xFEA
 29624                           fsr0l	equ	0xFE9
 29625                           wreg	equ	0xFE8
 29626                           indf1	equ	0xFE7
 29627                           postdec1	equ	0xFE5
 29628                           fsr1h	equ	0xFE2
 29629                           fsr1l	equ	0xFE1
 29630                           indf2	equ	0xFDF
 29631                           postinc2	equ	0xFDE
 29632                           postdec2	equ	0xFDD
 29633                           plusw2	equ	0xFDB
 29634                           fsr2h	equ	0xFDA
 29635                           fsr2l	equ	0xFD9
 29636                           status	equ	0xFD8
 29637                           
 29638 ;; *************** function _Timer0_ISR *****************
 29639 ;; Defined at:
 29640 ;;		line 94 in file "Library/Timer0.c"
 29641 ;; Parameters:    Size  Location     Type
 29642 ;;		None
 29643 ;; Auto vars:     Size  Location     Type
 29644 ;;		None
 29645 ;; Return value:  Size  Location     Type
 29646 ;;                  1    wreg      void 
 29647 ;; Registers used:
 29648 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29649 ;; Tracked objects:
 29650 ;;		On entry : 0/0
 29651 ;;		On exit  : 0/0
 29652 ;;		Unchanged: 0/0
 29653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29654 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29657 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29658 ;;Total ram usage:        0 bytes
 29659 ;; Hardware stack levels used:    1
 29660 ;; Hardware stack levels required when called:    5
 29661 ;; This function calls:
 29662 ;;		Absolute function
 29663 ;;		i2_Motor_Step
 29664 ;;		i2_Timer0_Stop
 29665 ;; This function is called by:
 29666 ;;		_ISR_Function
 29667 ;; This function uses a non-reentrant model
 29668 ;;
 29669                           
 29670                           	psect	text159
 29671  016336                     __ptext159:
 29672                           	opt stack 0
 29673  016336                     _Timer0_ISR:
 29674                           	opt stack 13
 29675                           
 29676                           ;Timer0.c: 96: Timer0_Stop();
 29677                           
 29678                           ;incstack = 0
 29679  016336  ECFC  F0B3         	call	i2_Timer0_Stop	;wreg free
 29680                           
 29681                           ;Timer0.c: 99: if (gISR != 0)
 29682  01633A  0100               	movlb	0	; () banked
 29683  01633C  5160               	movf	_gISR& (0+255),w,b
 29684  01633E  0100               	movlb	0	; () banked
 29685  016340  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29686  016342  0100               	movlb	0	; () banked
 29687  016344  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29688  016346  B4D8               	btfsc	status,2,c
 29689  016348  0012               	return	
 29690                           
 29691                           ; BSR set to: 0
 29692                           ;Timer0.c: 100: gISR();
 29693  01634A  D801               	call	i2u1403_48
 29694  01634C  0012               	return	
 29695  01634E                     i2u1403_48:
 29696  01634E  0005               	push	
 29697  016350  6EFA               	movwf	pclath,c
 29698  016352  0100               	movlb	0	; () banked
 29699  016354  5160               	movf	_gISR& (0+255),w,b
 29700  016356  6EFD               	movwf	tosl,c
 29701  016358  5161               	movf	(_gISR+1)& (0+255),w,b
 29702  01635A  6EFE               	movwf	tosh,c
 29703  01635C  5162               	movf	(_gISR+2)& (0+255),w,b
 29704  01635E  6EFF               	movwf	tosu,c
 29705  016360  50FA               	movf	pclath,w,c
 29706  016362  0012               	return		;indir
 29707  016364                     __end_of_Timer0_ISR:
 29708                           	opt stack 0
 29709                           tosu	equ	0xFFF
 29710                           tosh	equ	0xFFE
 29711                           tosl	equ	0xFFD
 29712                           pclatu	equ	0xFFB
 29713                           pclath	equ	0xFFA
 29714                           tblptru	equ	0xFF8
 29715                           tblptrh	equ	0xFF7
 29716                           tblptrl	equ	0xFF6
 29717                           tablat	equ	0xFF5
 29718                           prodh	equ	0xFF4
 29719                           prodl	equ	0xFF3
 29720                           intcon	equ	0xFF2
 29721                           indf0	equ	0xFEF
 29722                           postinc0	equ	0xFEE
 29723                           fsr0h	equ	0xFEA
 29724                           fsr0l	equ	0xFE9
 29725                           wreg	equ	0xFE8
 29726                           indf1	equ	0xFE7
 29727                           postdec1	equ	0xFE5
 29728                           fsr1h	equ	0xFE2
 29729                           fsr1l	equ	0xFE1
 29730                           indf2	equ	0xFDF
 29731                           postinc2	equ	0xFDE
 29732                           postdec2	equ	0xFDD
 29733                           plusw2	equ	0xFDB
 29734                           fsr2h	equ	0xFDA
 29735                           fsr2l	equ	0xFD9
 29736                           status	equ	0xFD8
 29737                           
 29738 ;; *************** function i2_Motor_Step *****************
 29739 ;; Defined at:
 29740 ;;		line 75 in file "Library/Motor.c"
 29741 ;; Parameters:    Size  Location     Type
 29742 ;;		None
 29743 ;; Auto vars:     Size  Location     Type
 29744 ;;		None
 29745 ;; Return value:  Size  Location     Type
 29746 ;;                  1    wreg      void 
 29747 ;; Registers used:
 29748 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29749 ;; Tracked objects:
 29750 ;;		On entry : 0/0
 29751 ;;		On exit  : 0/0
 29752 ;;		Unchanged: 0/0
 29753 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29754 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29755 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29756 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29757 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29758 ;;Total ram usage:        2 bytes
 29759 ;; Hardware stack levels used:    1
 29760 ;; Hardware stack levels required when called:    4
 29761 ;; This function calls:
 29762 ;;		i2_MXK_Queue
 29763 ;;		i2_MXK_Release
 29764 ;;		i2_MXK_SwitchTo
 29765 ;;		i2_Port_SetPin
 29766 ;;		i2_Timer0_Restart
 29767 ;;		i2_Timer0_Stop
 29768 ;; This function is called by:
 29769 ;; This function uses a non-reentrant model
 29770 ;;
 29771                           
 29772                           	psect	text160
 29773  013824                     __ptext160:
 29774                           	opt stack 0
 29775  013824                     i2_Motor_Step:
 29776                           	opt stack 13
 29777                           
 29778                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29779                           
 29780                           ;incstack = 0
 29781  013824  0100               	movlb	0	; () banked
 29782  013826  EE20 F004          	lfsr	2,4
 29783  01382A  517F               	movf	_lMotor& (0+255),w,b
 29784  01382C  26D9               	addwf	fsr2l,f,c
 29785  01382E  5180               	movf	(_lMotor+1)& (0+255),w,b
 29786  013830  22DA               	addwfc	fsr2h,f,c
 29787  013832  50DF               	movf	indf2,w,c
 29788  013834  ECEE  F0B0         	call	i2_MXK_SwitchTo
 29789  013838  0900               	iorlw	0
 29790  01383A  B4D8               	btfsc	status,2,c
 29791  01383C  D06A               	goto	i2l1627
 29792                           
 29793                           ;Motor.c: 78: {
 29794                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29795  01383E  C07F  FFD9         	movff	_lMotor,fsr2l
 29796  013842  C080  FFDA         	movff	_lMotor+1,fsr2h
 29797  013846  50DE               	movf	postinc2,w,c
 29798  013848  10DE               	iorwf	postinc2,w,c
 29799  01384A  B4D8               	btfsc	status,2,c
 29800  01384C  D05D               	goto	i2l1628
 29801                           
 29802                           ;Motor.c: 80: {
 29803                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29804  01384E  C07F  FFD9         	movff	_lMotor,fsr2l
 29805  013852  C080  FFDA         	movff	_lMotor+1,fsr2h
 29806  013856  0E01               	movlw	1
 29807  013858  BEDB               	btfsc	plusw2,7,c
 29808  01385A  D022               	goto	i2l1629
 29809  01385C  0E01               	movlw	1
 29810  01385E  50DB               	movf	plusw2,w,c
 29811  013860  E103               	bnz	i2u742_40
 29812  013862  04DE               	decf	postinc2,w,c
 29813  013864  A0D8               	btfss	status,0,c
 29814  013866  D01C               	goto	i2l1629
 29815  013868                     i2u742_40:
 29816                           
 29817                           ;Motor.c: 83: {
 29818                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29819  013868  C07F  FFD9         	movff	_lMotor,fsr2l
 29820  01386C  C080  FFDA         	movff	_lMotor+1,fsr2h
 29821  013870  28DE               	incf	postinc2,w,c
 29822  013872  E104               	bnz	i2u743_40
 29823  013874  0E7F               	movlw	127
 29824  013876  18DE               	xorwf	postinc2,w,c
 29825  013878  B4D8               	btfsc	status,2,c
 29826  01387A  D007               	goto	i2l1630
 29827  01387C                     i2u743_40:
 29828                           
 29829                           ;Motor.c: 85: lMotor->mDelta --;
 29830  01387C  C07F  FFD9         	movff	_lMotor,fsr2l
 29831  013880  C080  FFDA         	movff	_lMotor+1,fsr2h
 29832  013884  06DE               	decf	postinc2,f,c
 29833  013886  0E00               	movlw	0
 29834  013888  5ADD               	subwfb	postdec2,f,c
 29835  01388A                     i2l1630:
 29836                           
 29837                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29838  01388A  0E91               	movlw	low _PortE
 29839  01388C  6E10               	movwf	i2Port_SetPin@pInput,c
 29840  01388E  0E00               	movlw	high _PortE
 29841  013890  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29842  013892  0E00               	movlw	0
 29843  013894  6E12               	movwf	i2Port_SetPin@pPin,c
 29844  013896  0E01               	movlw	1
 29845  013898  6E13               	movwf	i2Port_SetPin@pValue,c
 29846  01389A  ECF3  F0A3         	call	i2_Port_SetPin	;wreg free
 29847                           
 29848                           ;Motor.c: 88: }
 29849  01389E  D01B               	goto	i2l1631
 29850  0138A0                     i2l1629:
 29851                           
 29852                           ;Motor.c: 89: else
 29853                           ;Motor.c: 90: {
 29854                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29855  0138A0  C07F  FFD9         	movff	_lMotor,fsr2l
 29856  0138A4  C080  FFDA         	movff	_lMotor+1,fsr2h
 29857  0138A8  04DE               	decf	postinc2,w,c
 29858  0138AA  E104               	bnz	i2u744_40
 29859  0138AC  0E80               	movlw	128
 29860  0138AE  18DE               	xorwf	postinc2,w,c
 29861  0138B0  B4D8               	btfsc	status,2,c
 29862  0138B2  D007               	goto	i2l1632
 29863  0138B4                     i2u744_40:
 29864                           
 29865                           ;Motor.c: 92: lMotor->mDelta ++;
 29866  0138B4  C07F  FFD9         	movff	_lMotor,fsr2l
 29867  0138B8  C080  FFDA         	movff	_lMotor+1,fsr2h
 29868  0138BC  2ADE               	incf	postinc2,f,c
 29869  0138BE  0E00               	movlw	0
 29870  0138C0  22DD               	addwfc	postdec2,f,c
 29871  0138C2                     i2l1632:
 29872                           
 29873                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29874  0138C2  0E91               	movlw	low _PortE
 29875  0138C4  6E10               	movwf	i2Port_SetPin@pInput,c
 29876  0138C6  0E00               	movlw	high _PortE
 29877  0138C8  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29878  0138CA  0E00               	movlw	0
 29879  0138CC  6E12               	movwf	i2Port_SetPin@pPin,c
 29880  0138CE  0E00               	movlw	0
 29881  0138D0  6E13               	movwf	i2Port_SetPin@pValue,c
 29882  0138D2  ECF3  F0A3         	call	i2_Port_SetPin	;wreg free
 29883  0138D6                     i2l1631:
 29884                           
 29885                           ;Motor.c: 95: }
 29886                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29887  0138D6  0E91               	movlw	low _PortE
 29888  0138D8  6E10               	movwf	i2Port_SetPin@pInput,c
 29889  0138DA  0E00               	movlw	high _PortE
 29890  0138DC  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29891  0138DE  0E01               	movlw	1
 29892  0138E0  6E12               	movwf	i2Port_SetPin@pPin,c
 29893  0138E2  0E01               	movlw	1
 29894  0138E4  6E13               	movwf	i2Port_SetPin@pValue,c
 29895  0138E6  ECF3  F0A3         	call	i2_Port_SetPin	;wreg free
 29896                           
 29897                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29898  0138EA  0E91               	movlw	low _PortE
 29899  0138EC  6E10               	movwf	i2Port_SetPin@pInput,c
 29900  0138EE  0E00               	movlw	high _PortE
 29901  0138F0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29902  0138F2  0E01               	movlw	1
 29903  0138F4  6E12               	movwf	i2Port_SetPin@pPin,c
 29904  0138F6  0E00               	movlw	0
 29905  0138F8  6E13               	movwf	i2Port_SetPin@pValue,c
 29906  0138FA  ECF3  F0A3         	call	i2_Port_SetPin	;wreg free
 29907                           
 29908                           ;Motor.c: 101: MXK_Release();
 29909  0138FE  ECFF  F0B3         	call	i2_MXK_Release	;wreg free
 29910                           
 29911                           ;Motor.c: 102: Timer0_Restart();
 29912  013902  ECCB  F0B3         	call	i2_Timer0_Restart	;wreg free
 29913                           
 29914                           ;Motor.c: 103: return;
 29915  013906  0012               	return	
 29916  013908                     i2l1628:
 29917                           
 29918                           ;Motor.c: 104: }
 29919                           ;Motor.c: 105: MXK_Release();
 29920  013908  ECFF  F0B3         	call	i2_MXK_Release	;wreg free
 29921                           
 29922                           ;Motor.c: 106: Timer0_Stop();
 29923  01390C  ECFC  F0B3         	call	i2_Timer0_Stop	;wreg free
 29924                           
 29925                           ;Motor.c: 107: return;
 29926  013910  0012               	return	
 29927  013912                     i2l1627:
 29928                           
 29929                           ;Motor.c: 108: }
 29930                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29931  013912  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29932  013916  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29933  01391A  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29934  01391E  ECB2  F0B3         	call	i2_MXK_Queue	;wreg free
 29935  013922  0012               	return		;funcret
 29936  013924                     __end_ofi2_Motor_Step:
 29937                           	opt stack 0
 29938                           tosu	equ	0xFFF
 29939                           tosh	equ	0xFFE
 29940                           tosl	equ	0xFFD
 29941                           pclatu	equ	0xFFB
 29942                           pclath	equ	0xFFA
 29943                           tblptru	equ	0xFF8
 29944                           tblptrh	equ	0xFF7
 29945                           tblptrl	equ	0xFF6
 29946                           tablat	equ	0xFF5
 29947                           prodh	equ	0xFF4
 29948                           prodl	equ	0xFF3
 29949                           intcon	equ	0xFF2
 29950                           indf0	equ	0xFEF
 29951                           postinc0	equ	0xFEE
 29952                           fsr0h	equ	0xFEA
 29953                           fsr0l	equ	0xFE9
 29954                           wreg	equ	0xFE8
 29955                           indf1	equ	0xFE7
 29956                           postdec1	equ	0xFE5
 29957                           fsr1h	equ	0xFE2
 29958                           fsr1l	equ	0xFE1
 29959                           indf2	equ	0xFDF
 29960                           postinc2	equ	0xFDE
 29961                           postdec2	equ	0xFDD
 29962                           plusw2	equ	0xFDB
 29963                           fsr2h	equ	0xFDA
 29964                           fsr2l	equ	0xFD9
 29965                           status	equ	0xFD8
 29966                           
 29967 ;; *************** function i2_Timer0_Stop *****************
 29968 ;; Defined at:
 29969 ;;		line 89 in file "Library/Timer0.c"
 29970 ;; Parameters:    Size  Location     Type
 29971 ;;		None
 29972 ;; Auto vars:     Size  Location     Type
 29973 ;;		None
 29974 ;; Return value:  Size  Location     Type
 29975 ;;                  1    wreg      void 
 29976 ;; Registers used:
 29977 ;;		None
 29978 ;; Tracked objects:
 29979 ;;		On entry : 0/0
 29980 ;;		On exit  : 0/0
 29981 ;;		Unchanged: 0/0
 29982 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29983 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29984 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29985 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29986 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29987 ;;Total ram usage:        0 bytes
 29988 ;; Hardware stack levels used:    1
 29989 ;; This function calls:
 29990 ;;		Nothing
 29991 ;; This function is called by:
 29992 ;;		_Timer0_ISR
 29993 ;;		i2_Motor_Step
 29994 ;; This function uses a non-reentrant model
 29995 ;;
 29996                           
 29997                           	psect	text161
 29998  0167F8                     __ptext161:
 29999                           	opt stack 0
 30000  0167F8                     i2_Timer0_Stop:
 30001                           	opt stack 17
 30002                           
 30003                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 30004                           
 30005                           ;incstack = 0
 30006  0167F8  9AF2               	bcf	intcon,5,c	;volatile
 30007                           
 30008                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 30009  0167FA  94F2               	bcf	intcon,2,c	;volatile
 30010  0167FC  0012               	return		;funcret
 30011  0167FE                     __end_ofi2_Timer0_Stop:
 30012                           	opt stack 0
 30013                           tosu	equ	0xFFF
 30014                           tosh	equ	0xFFE
 30015                           tosl	equ	0xFFD
 30016                           pclatu	equ	0xFFB
 30017                           pclath	equ	0xFFA
 30018                           tblptru	equ	0xFF8
 30019                           tblptrh	equ	0xFF7
 30020                           tblptrl	equ	0xFF6
 30021                           tablat	equ	0xFF5
 30022                           prodh	equ	0xFF4
 30023                           prodl	equ	0xFF3
 30024                           intcon	equ	0xFF2
 30025                           indf0	equ	0xFEF
 30026                           postinc0	equ	0xFEE
 30027                           fsr0h	equ	0xFEA
 30028                           fsr0l	equ	0xFE9
 30029                           wreg	equ	0xFE8
 30030                           indf1	equ	0xFE7
 30031                           postdec1	equ	0xFE5
 30032                           fsr1h	equ	0xFE2
 30033                           fsr1l	equ	0xFE1
 30034                           indf2	equ	0xFDF
 30035                           postinc2	equ	0xFDE
 30036                           postdec2	equ	0xFDD
 30037                           plusw2	equ	0xFDB
 30038                           fsr2h	equ	0xFDA
 30039                           fsr2l	equ	0xFD9
 30040                           status	equ	0xFD8
 30041                           
 30042 ;; *************** function i2_Timer0_Restart *****************
 30043 ;; Defined at:
 30044 ;;		line 83 in file "Library/Timer0.c"
 30045 ;; Parameters:    Size  Location     Type
 30046 ;;		None
 30047 ;; Auto vars:     Size  Location     Type
 30048 ;;		None
 30049 ;; Return value:  Size  Location     Type
 30050 ;;                  1    wreg      void 
 30051 ;; Registers used:
 30052 ;;		None
 30053 ;; Tracked objects:
 30054 ;;		On entry : 0/0
 30055 ;;		On exit  : 0/0
 30056 ;;		Unchanged: 0/0
 30057 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30058 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30059 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30060 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30061 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30062 ;;Total ram usage:        0 bytes
 30063 ;; Hardware stack levels used:    1
 30064 ;; This function calls:
 30065 ;;		Nothing
 30066 ;; This function is called by:
 30067 ;;		i2_Motor_Step
 30068 ;; This function uses a non-reentrant model
 30069 ;;
 30070                           
 30071                           	psect	text162
 30072  016796                     __ptext162:
 30073                           	opt stack 0
 30074  016796                     i2_Timer0_Restart:
 30075                           	opt stack 16
 30076                           
 30077                           ;Timer0.c: 85: TMR0 = COUNTER;
 30078                           
 30079                           ;incstack = 0
 30080  016796  C029  FFD6         	movff	_COUNTER,4054	;volatile
 30081  01679A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 30082                           
 30083                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 30084  01679E  8AF2               	bsf	intcon,5,c	;volatile
 30085  0167A0  0012               	return		;funcret
 30086  0167A2                     __end_ofi2_Timer0_Restart:
 30087                           	opt stack 0
 30088                           tosu	equ	0xFFF
 30089                           tosh	equ	0xFFE
 30090                           tosl	equ	0xFFD
 30091                           pclatu	equ	0xFFB
 30092                           pclath	equ	0xFFA
 30093                           tblptru	equ	0xFF8
 30094                           tblptrh	equ	0xFF7
 30095                           tblptrl	equ	0xFF6
 30096                           tablat	equ	0xFF5
 30097                           prodh	equ	0xFF4
 30098                           prodl	equ	0xFF3
 30099                           intcon	equ	0xFF2
 30100                           indf0	equ	0xFEF
 30101                           postinc0	equ	0xFEE
 30102                           fsr0h	equ	0xFEA
 30103                           fsr0l	equ	0xFE9
 30104                           wreg	equ	0xFE8
 30105                           indf1	equ	0xFE7
 30106                           postdec1	equ	0xFE5
 30107                           fsr1h	equ	0xFE2
 30108                           fsr1l	equ	0xFE1
 30109                           indf2	equ	0xFDF
 30110                           postinc2	equ	0xFDE
 30111                           postdec2	equ	0xFDD
 30112                           plusw2	equ	0xFDB
 30113                           fsr2h	equ	0xFDA
 30114                           fsr2l	equ	0xFD9
 30115                           status	equ	0xFD8
 30116                           
 30117 ;; *************** function i2_Port_SetPin *****************
 30118 ;; Defined at:
 30119 ;;		line 247 in file "Library/Port.c"
 30120 ;; Parameters:    Size  Location     Type
 30121 ;;  pInput          2   15[COMRAM] const PTR struct Port
 30122 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 30123 ;;  pPin            1   17[COMRAM] enum E6750
 30124 ;;  pValue          1   18[COMRAM] unsigned char 
 30125 ;; Auto vars:     Size  Location     Type
 30126 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 30127 ;; Return value:  Size  Location     Type
 30128 ;;                  1    wreg      void 
 30129 ;; Registers used:
 30130 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30131 ;; Tracked objects:
 30132 ;;		On entry : 0/0
 30133 ;;		On exit  : 0/0
 30134 ;;		Unchanged: 0/0
 30135 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30136 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30137 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30138 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30139 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30140 ;;Total ram usage:        5 bytes
 30141 ;; Hardware stack levels used:    1
 30142 ;; Hardware stack levels required when called:    3
 30143 ;; This function calls:
 30144 ;;		i2_Byte_SetBit
 30145 ;;		i2_Word_GetPair
 30146 ;; This function is called by:
 30147 ;;		i2_Motor_Step
 30148 ;; This function uses a non-reentrant model
 30149 ;;
 30150                           
 30151                           	psect	text163
 30152  0147E6                     __ptext163:
 30153                           	opt stack 0
 30154  0147E6                     i2_Port_SetPin:
 30155                           	opt stack 13
 30156                           
 30157                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30158                           
 30159                           ;incstack = 0
 30160  0147E6  0E08               	movlw	8
 30161  0147E8  2410               	addwf	i2Port_SetPin@pInput,w,c
 30162  0147EA  6E0D               	movwf	i2Word_GetPair@pInput,c
 30163  0147EC  0E00               	movlw	0
 30164  0147EE  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30165  0147F0  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30166  0147F2  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30167  0147F6  EC6C  F0B1         	call	i2_Word_GetPair	;wreg free
 30168  0147FA  6E14               	movwf	i2Port_SetPin@Type,c
 30169                           
 30170                           ;Port.c: 250: switch (Type)
 30171  0147FC  D03B               	goto	i2l427
 30172  0147FE                     
 30173                           ;Port.c: 256: pValue &= 1;
 30174  0147FE  0E01               	movlw	1
 30175  014800  1613               	andwf	i2Port_SetPin@pValue,f,c
 30176                           
 30177                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30178  014802  EE20 F002          	lfsr	2,2
 30179  014806  5010               	movf	i2Port_SetPin@pInput,w,c
 30180  014808  26D9               	addwf	fsr2l,f,c
 30181  01480A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30182  01480C  22DA               	addwfc	fsr2h,f,c
 30183  01480E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30184  014812  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30185  014816  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30186  01481A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30187  01481E  EC37  F0AE         	call	i2_Byte_SetBit	;wreg free
 30188                           
 30189                           ;Port.c: 258: break;
 30190  014822  0012               	return	
 30191  014824                     
 30192                           ;Port.c: 261: pValue &= 1;
 30193  014824  0E01               	movlw	1
 30194  014826  1613               	andwf	i2Port_SetPin@pValue,f,c
 30195                           
 30196                           ;Port.c: 262: pValue ^= 1;
 30197  014828  0E01               	movlw	1
 30198  01482A  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30199                           
 30200                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30201  01482C  EE20 F002          	lfsr	2,2
 30202  014830  5010               	movf	i2Port_SetPin@pInput,w,c
 30203  014832  26D9               	addwf	fsr2l,f,c
 30204  014834  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30205  014836  22DA               	addwfc	fsr2h,f,c
 30206  014838  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30207  01483C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30208  014840  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30209  014844  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30210  014848  EC37  F0AE         	call	i2_Byte_SetBit	;wreg free
 30211                           
 30212                           ;Port.c: 264: break;
 30213  01484C  0012               	return	
 30214  01484E                     
 30215                           ;Port.c: 266: pValue &= 1;
 30216  01484E  0E01               	movlw	1
 30217  014850  1613               	andwf	i2Port_SetPin@pValue,f,c
 30218                           
 30219                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30220  014852  EE20 F004          	lfsr	2,4
 30221  014856  5010               	movf	i2Port_SetPin@pInput,w,c
 30222  014858  26D9               	addwf	fsr2l,f,c
 30223  01485A  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30224  01485C  22DA               	addwfc	fsr2h,f,c
 30225  01485E  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30226  014862  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30227  014866  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30228  01486A  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30229  01486E  EC37  F0AE         	call	i2_Byte_SetBit	;wreg free
 30230                           
 30231                           ;Port.c: 269: }
 30232                           
 30233                           ;Port.c: 268: break;
 30234  014872  0012               	return	
 30235  014874                     i2l427:
 30236  014874  5014               	movf	i2Port_SetPin@Type,w,c
 30237                           
 30238                           ; Switch size 1, requested type "space"
 30239                           ; Number of cases is 4, Range of values is 0 to 3
 30240                           ; switch strategies available:
 30241                           ; Name         Instructions Cycles
 30242                           ; simple_byte           13     7 (average)
 30243                           ;	Chosen strategy is simple_byte
 30244  014876  0A00               	xorlw	0	; case 0
 30245  014878  B4D8               	btfsc	status,2,c
 30246  01487A  0012               	return	
 30247  01487C  0A01               	xorlw	1	; case 1
 30248  01487E  B4D8               	btfsc	status,2,c
 30249  014880  D7BE               	goto	i2l430
 30250  014882  0A03               	xorlw	3	; case 2
 30251  014884  B4D8               	btfsc	status,2,c
 30252  014886  D7CE               	goto	i2l432
 30253  014888  0A01               	xorlw	1	; case 3
 30254  01488A  A4D8               	btfss	status,2,c
 30255  01488C  0012               	return	
 30256  01488E  D7DF               	goto	i2l433
 30257  014890                     __end_ofi2_Port_SetPin:
 30258                           	opt stack 0
 30259                           tosu	equ	0xFFF
 30260                           tosh	equ	0xFFE
 30261                           tosl	equ	0xFFD
 30262                           pclatu	equ	0xFFB
 30263                           pclath	equ	0xFFA
 30264                           tblptru	equ	0xFF8
 30265                           tblptrh	equ	0xFF7
 30266                           tblptrl	equ	0xFF6
 30267                           tablat	equ	0xFF5
 30268                           prodh	equ	0xFF4
 30269                           prodl	equ	0xFF3
 30270                           intcon	equ	0xFF2
 30271                           indf0	equ	0xFEF
 30272                           postinc0	equ	0xFEE
 30273                           fsr0h	equ	0xFEA
 30274                           fsr0l	equ	0xFE9
 30275                           wreg	equ	0xFE8
 30276                           indf1	equ	0xFE7
 30277                           postdec1	equ	0xFE5
 30278                           fsr1h	equ	0xFE2
 30279                           fsr1l	equ	0xFE1
 30280                           indf2	equ	0xFDF
 30281                           postinc2	equ	0xFDE
 30282                           postdec2	equ	0xFDD
 30283                           plusw2	equ	0xFDB
 30284                           fsr2h	equ	0xFDA
 30285                           fsr2l	equ	0xFD9
 30286                           status	equ	0xFD8
 30287                           
 30288 ;; *************** function i2_Word_GetPair *****************
 30289 ;; Defined at:
 30290 ;;		line 156 in file "Library/Types.c"
 30291 ;; Parameters:    Size  Location     Type
 30292 ;;  pInput          2   12[COMRAM] PTR struct Word
 30293 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30294 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30295 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30296 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30297 ;;  pPair           1   14[COMRAM] unsigned char 
 30298 ;; Auto vars:     Size  Location     Type
 30299 ;;		None
 30300 ;; Return value:  Size  Location     Type
 30301 ;;                  1    wreg      unsigned char 
 30302 ;; Registers used:
 30303 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30304 ;; Tracked objects:
 30305 ;;		On entry : 0/0
 30306 ;;		On exit  : 0/0
 30307 ;;		Unchanged: 0/0
 30308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30309 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30312 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30313 ;;Total ram usage:        3 bytes
 30314 ;; Hardware stack levels used:    1
 30315 ;; Hardware stack levels required when called:    2
 30316 ;; This function calls:
 30317 ;;		i2_Byte_GetPair
 30318 ;; This function is called by:
 30319 ;;		i2_Port_SetPin
 30320 ;; This function uses a non-reentrant model
 30321 ;;
 30322                           
 30323                           	psect	text164
 30324  0162D8                     __ptext164:
 30325                           	opt stack 0
 30326  0162D8                     i2_Word_GetPair:
 30327                           	opt stack 13
 30328                           
 30329                           ;Types.c: 158: if (pPair >= 4)
 30330                           
 30331                           ;incstack = 0
 30332  0162D8  0E03               	movlw	3
 30333  0162DA  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30334  0162DC  D00C               	goto	i2l781
 30335                           
 30336                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30337  0162DE  0E01               	movlw	1
 30338  0162E0  240D               	addwf	i2Word_GetPair@pInput,w,c
 30339  0162E2  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30340  0162E4  0E00               	movlw	0
 30341  0162E6  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30342  0162E8  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30343  0162EA  500F               	movf	i2Word_GetPair@pPair,w,c
 30344  0162EC  0FFC               	addlw	252
 30345  0162EE  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30346  0162F0  ECE8  F0B2         	call	i2_Byte_GetPair	;wreg free
 30347  0162F4  0012               	return	
 30348  0162F6                     i2l781:
 30349                           
 30350                           ;Types.c: 160: else
 30351                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30352  0162F6  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30353  0162FA  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30354  0162FE  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30355  016302  ECE8  F0B2         	call	i2_Byte_GetPair	;wreg free
 30356  016306  0012               	return	
 30357  016308                     __end_ofi2_Word_GetPair:
 30358                           	opt stack 0
 30359                           tosu	equ	0xFFF
 30360                           tosh	equ	0xFFE
 30361                           tosl	equ	0xFFD
 30362                           pclatu	equ	0xFFB
 30363                           pclath	equ	0xFFA
 30364                           tblptru	equ	0xFF8
 30365                           tblptrh	equ	0xFF7
 30366                           tblptrl	equ	0xFF6
 30367                           tablat	equ	0xFF5
 30368                           prodh	equ	0xFF4
 30369                           prodl	equ	0xFF3
 30370                           intcon	equ	0xFF2
 30371                           indf0	equ	0xFEF
 30372                           postinc0	equ	0xFEE
 30373                           fsr0h	equ	0xFEA
 30374                           fsr0l	equ	0xFE9
 30375                           wreg	equ	0xFE8
 30376                           indf1	equ	0xFE7
 30377                           postdec1	equ	0xFE5
 30378                           fsr1h	equ	0xFE2
 30379                           fsr1l	equ	0xFE1
 30380                           indf2	equ	0xFDF
 30381                           postinc2	equ	0xFDE
 30382                           postdec2	equ	0xFDD
 30383                           plusw2	equ	0xFDB
 30384                           fsr2h	equ	0xFDA
 30385                           fsr2l	equ	0xFD9
 30386                           status	equ	0xFD8
 30387                           
 30388 ;; *************** function i2_Byte_GetPair *****************
 30389 ;; Defined at:
 30390 ;;		line 87 in file "Library/Types.c"
 30391 ;; Parameters:    Size  Location     Type
 30392 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30393 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30394 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30395 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30396 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30397 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30398 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30399 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30400 ;;		 -> NULL(0), 
 30401 ;;  pPair           1   11[COMRAM] unsigned char 
 30402 ;; Auto vars:     Size  Location     Type
 30403 ;;		None
 30404 ;; Return value:  Size  Location     Type
 30405 ;;                  1    wreg      unsigned char 
 30406 ;; Registers used:
 30407 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30408 ;; Tracked objects:
 30409 ;;		On entry : 0/0
 30410 ;;		On exit  : 0/0
 30411 ;;		Unchanged: 0/0
 30412 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30413 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30414 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30415 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30416 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30417 ;;Total ram usage:        3 bytes
 30418 ;; Hardware stack levels used:    1
 30419 ;; Hardware stack levels required when called:    1
 30420 ;; This function calls:
 30421 ;;		i2_Byte_GetZone
 30422 ;; This function is called by:
 30423 ;;		i2_Word_GetPair
 30424 ;; This function uses a non-reentrant model
 30425 ;;
 30426                           
 30427                           	psect	text165
 30428  0165D0                     __ptext165:
 30429                           	opt stack 0
 30430  0165D0                     i2_Byte_GetPair:
 30431                           	opt stack 13
 30432                           
 30433                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30434                           
 30435                           ;incstack = 0
 30436  0165D0  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30437  0165D4  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30438  0165D8  0E04               	movlw	4
 30439  0165DA  6E03               	movwf	i2Byte_GetZone@pMax,c
 30440  0165DC  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30441  0165E0  0E02               	movlw	2
 30442  0165E2  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30443  0165E4  ECAB  F0A9         	call	i2_Byte_GetZone	;wreg free
 30444  0165E8  0012               	return	
 30445  0165EA                     __end_ofi2_Byte_GetPair:
 30446                           	opt stack 0
 30447                           tosu	equ	0xFFF
 30448                           tosh	equ	0xFFE
 30449                           tosl	equ	0xFFD
 30450                           pclatu	equ	0xFFB
 30451                           pclath	equ	0xFFA
 30452                           tblptru	equ	0xFF8
 30453                           tblptrh	equ	0xFF7
 30454                           tblptrl	equ	0xFF6
 30455                           tablat	equ	0xFF5
 30456                           prodh	equ	0xFF4
 30457                           prodl	equ	0xFF3
 30458                           intcon	equ	0xFF2
 30459                           indf0	equ	0xFEF
 30460                           postinc0	equ	0xFEE
 30461                           fsr0h	equ	0xFEA
 30462                           fsr0l	equ	0xFE9
 30463                           wreg	equ	0xFE8
 30464                           indf1	equ	0xFE7
 30465                           postdec1	equ	0xFE5
 30466                           fsr1h	equ	0xFE2
 30467                           fsr1l	equ	0xFE1
 30468                           indf2	equ	0xFDF
 30469                           postinc2	equ	0xFDE
 30470                           postdec2	equ	0xFDD
 30471                           plusw2	equ	0xFDB
 30472                           fsr2h	equ	0xFDA
 30473                           fsr2l	equ	0xFD9
 30474                           status	equ	0xFD8
 30475                           
 30476 ;; *************** function i2_Byte_GetZone *****************
 30477 ;; Defined at:
 30478 ;;		line 64 in file "Library/Types.c"
 30479 ;; Parameters:    Size  Location     Type
 30480 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30481 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30482 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30483 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30484 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30485 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30486 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30487 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30488 ;;		 -> NULL(0), 
 30489 ;;  pMax            1    2[COMRAM] unsigned char 
 30490 ;;  pChunk          1    3[COMRAM] unsigned char 
 30491 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30492 ;; Auto vars:     Size  Location     Type
 30493 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30494 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30495 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30496 ;; Return value:  Size  Location     Type
 30497 ;;                  1    wreg      unsigned char 
 30498 ;; Registers used:
 30499 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30500 ;; Tracked objects:
 30501 ;;		On entry : 0/0
 30502 ;;		On exit  : 0/0
 30503 ;;		Unchanged: 0/0
 30504 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30505 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30506 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30507 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30508 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30509 ;;Total ram usage:        9 bytes
 30510 ;; Hardware stack levels used:    1
 30511 ;; This function calls:
 30512 ;;		Nothing
 30513 ;; This function is called by:
 30514 ;;		i2_Byte_GetPair
 30515 ;; This function uses a non-reentrant model
 30516 ;;
 30517                           
 30518                           	psect	text166
 30519  015356                     __ptext166:
 30520                           	opt stack 0
 30521  015356                     i2_Byte_GetZone:
 30522                           	opt stack 13
 30523                           
 30524                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30525                           
 30526                           ;incstack = 0
 30527  015356  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30528  01535A  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30529  01535E  0E00               	movlw	low (__mediumconst shr (0+16))
 30530  015360  6EF8               	movwf	tblptru,c
 30531  015362  0E0F               	movlw	(high __ramtop+-1)
 30532  015364  64F7               	cpfsgt	tblptrh,c
 30533  015366  D003               	bra	i2u515_47
 30534  015368  0008               	tblrd		*
 30535  01536A  50F5               	movf	tablat,w,c
 30536  01536C  D005               	bra	i2u515_40
 30537  01536E                     i2u515_47:
 30538  01536E  CFF6 FFE9          	movff	tblptrl,fsr0l
 30539  015372  CFF7 FFEA          	movff	tblptrh,fsr0h
 30540  015376  50EF               	movf	indf0,w,c
 30541  015378                     i2u515_40:
 30542  015378  6E09               	movwf	i2Byte_GetZone@Output,c
 30543                           
 30544                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30545  01537A  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30546  01537C  0D01               	mullw	1
 30547  01537E  0E0F               	movlw	low _MASKS
 30548  015380  24F3               	addwf	prodl,w,c
 30549  015382  6EF6               	movwf	tblptrl,c
 30550  015384  0EFD               	movlw	high _MASKS
 30551  015386  20F4               	addwfc	prodh,w,c
 30552  015388  6EF7               	movwf	tblptrh,c
 30553  01538A                     	if	1	;There are 3 active tblptr bytes
 30554  01538A  6AF8               	clrf	tblptru,c
 30555  01538C  0E00               	movlw	low (__mediumconst shr (0+16))
 30556  01538E  22F8               	addwfc	tblptru,f,c
 30557  015390                     	endif
 30558  015390  0008               	tblrd		*
 30559  015392  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30560                           
 30561                           ;Types.c: 68: UINT8 Offset = 0;
 30562  015396  0E00               	movlw	0
 30563  015398  6E08               	movwf	i2Byte_GetZone@Offset,c
 30564                           
 30565                           ;Types.c: 70: while (pChunk >= pMax)
 30566  01539A  D003               	goto	i2l732
 30567  01539C                     
 30568                           ;Types.c: 71: {
 30569                           ;Types.c: 72: pChunk -= pMax;
 30570  01539C  5003               	movf	i2Byte_GetZone@pMax,w,c
 30571  01539E  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30572                           
 30573                           ;Types.c: 73: Offset += 1;
 30574  0153A0  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30575  0153A2                     i2l732:
 30576  0153A2  5003               	movf	i2Byte_GetZone@pMax,w,c
 30577  0153A4  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30578  0153A6  B0D8               	btfsc	status,0,c
 30579  0153A8  D7F9               	goto	i2l733
 30580                           
 30581                           ;Types.c: 74: }
 30582                           ;Types.c: 75: pChunk *= pChunkSize;
 30583  0153AA  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30584  0153AC  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30585  0153AE  50F3               	movf	prodl,w,c
 30586  0153B0  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30587                           
 30588                           ;Types.c: 76: pChunk += Offset;
 30589  0153B2  5008               	movf	i2Byte_GetZone@Offset,w,c
 30590  0153B4  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30591                           
 30592                           ;Types.c: 78: Output >>= pChunk;
 30593  0153B6  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30594  0153B8  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30595  0153BA  D002               	goto	i2u517_40
 30596  0153BC                     i2u517_45:
 30597  0153BC  90D8               	bcf	status,0,c
 30598  0153BE  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30599  0153C0                     i2u517_40:
 30600  0153C0  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30601  0153C2  D7FC               	goto	i2u517_45
 30602                           
 30603                           ;Types.c: 79: Output &= MASK;
 30604  0153C4  5007               	movf	i2Byte_GetZone@MASK,w,c
 30605  0153C6  1609               	andwf	i2Byte_GetZone@Output,f,c
 30606                           
 30607                           ;Types.c: 80: return Output;
 30608  0153C8  5009               	movf	i2Byte_GetZone@Output,w,c
 30609  0153CA  0012               	return	
 30610  0153CC                     __end_ofi2_Byte_GetZone:
 30611                           	opt stack 0
 30612                           tosu	equ	0xFFF
 30613                           tosh	equ	0xFFE
 30614                           tosl	equ	0xFFD
 30615                           pclatu	equ	0xFFB
 30616                           pclath	equ	0xFFA
 30617                           tblptru	equ	0xFF8
 30618                           tblptrh	equ	0xFF7
 30619                           tblptrl	equ	0xFF6
 30620                           tablat	equ	0xFF5
 30621                           prodh	equ	0xFF4
 30622                           prodl	equ	0xFF3
 30623                           intcon	equ	0xFF2
 30624                           indf0	equ	0xFEF
 30625                           postinc0	equ	0xFEE
 30626                           fsr0h	equ	0xFEA
 30627                           fsr0l	equ	0xFE9
 30628                           wreg	equ	0xFE8
 30629                           indf1	equ	0xFE7
 30630                           postdec1	equ	0xFE5
 30631                           fsr1h	equ	0xFE2
 30632                           fsr1l	equ	0xFE1
 30633                           indf2	equ	0xFDF
 30634                           postinc2	equ	0xFDE
 30635                           postdec2	equ	0xFDD
 30636                           plusw2	equ	0xFDB
 30637                           fsr2h	equ	0xFDA
 30638                           fsr2l	equ	0xFD9
 30639                           status	equ	0xFD8
 30640                           
 30641 ;; *************** function i2_Byte_SetBit *****************
 30642 ;; Defined at:
 30643 ;;		line 32 in file "Library/Types.c"
 30644 ;; Parameters:    Size  Location     Type
 30645 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30646 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30647 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30648 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30649 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30650 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30651 ;;		 -> NULL(0), 
 30652 ;;  pBit            1    2[COMRAM] unsigned char 
 30653 ;;  pValue          1    3[COMRAM] unsigned char 
 30654 ;; Auto vars:     Size  Location     Type
 30655 ;;		None
 30656 ;; Return value:  Size  Location     Type
 30657 ;;                  1    wreg      void 
 30658 ;; Registers used:
 30659 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30660 ;; Tracked objects:
 30661 ;;		On entry : 0/0
 30662 ;;		On exit  : 0/0
 30663 ;;		Unchanged: 0/0
 30664 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30665 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30666 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30667 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30668 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30669 ;;Total ram usage:        7 bytes
 30670 ;; Hardware stack levels used:    1
 30671 ;; This function calls:
 30672 ;;		Nothing
 30673 ;; This function is called by:
 30674 ;;		i2_Port_SetPin
 30675 ;; This function uses a non-reentrant model
 30676 ;;
 30677                           
 30678                           	psect	text167
 30679  015C6E                     __ptext167:
 30680                           	opt stack 0
 30681  015C6E                     i2_Byte_SetBit:
 30682                           	opt stack 15
 30683                           
 30684                           ;Types.c: 34: pValue &= 1;
 30685                           
 30686                           ;incstack = 0
 30687  015C6E  0E01               	movlw	1
 30688  015C70  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30689                           
 30690                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30691  015C72  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30692  015C76  0E01               	movlw	1
 30693  015C78  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30694  015C7A  2A05               	incf	??i2_Byte_SetBit,f,c
 30695  015C7C  D002               	goto	i2u639_44
 30696  015C7E                     i2u639_45:
 30697  015C7E  90D8               	bcf	status,0,c
 30698  015C80  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30699  015C82                     i2u639_44:
 30700  015C82  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30701  015C84  D7FC               	goto	i2u639_45
 30702  015C86  5006               	movf	??i2_Byte_SetBit+1,w,c
 30703  015C88  0AFF               	xorlw	255
 30704  015C8A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30705  015C8C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30706  015C90  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30707  015C94  5007               	movf	??i2_Byte_SetBit+2,w,c
 30708  015C96  16DF               	andwf	indf2,f,c
 30709                           
 30710                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30711  015C98  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30712  015C9C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30713  015CA0  2A05               	incf	??i2_Byte_SetBit,f,c
 30714  015CA2  D002               	goto	i2u640_44
 30715  015CA4                     i2u640_45:
 30716  015CA4  90D8               	bcf	status,0,c
 30717  015CA6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30718  015CA8                     i2u640_44:
 30719  015CA8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30720  015CAA  D7FC               	goto	i2u640_45
 30721  015CAC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30722  015CB0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30723  015CB4  5006               	movf	??i2_Byte_SetBit+1,w,c
 30724  015CB6  12DF               	iorwf	indf2,f,c
 30725  015CB8  0012               	return		;funcret
 30726  015CBA                     __end_ofi2_Byte_SetBit:
 30727                           	opt stack 0
 30728                           tosu	equ	0xFFF
 30729                           tosh	equ	0xFFE
 30730                           tosl	equ	0xFFD
 30731                           pclatu	equ	0xFFB
 30732                           pclath	equ	0xFFA
 30733                           tblptru	equ	0xFF8
 30734                           tblptrh	equ	0xFF7
 30735                           tblptrl	equ	0xFF6
 30736                           tablat	equ	0xFF5
 30737                           prodh	equ	0xFF4
 30738                           prodl	equ	0xFF3
 30739                           intcon	equ	0xFF2
 30740                           indf0	equ	0xFEF
 30741                           postinc0	equ	0xFEE
 30742                           fsr0h	equ	0xFEA
 30743                           fsr0l	equ	0xFE9
 30744                           wreg	equ	0xFE8
 30745                           indf1	equ	0xFE7
 30746                           postdec1	equ	0xFE5
 30747                           fsr1h	equ	0xFE2
 30748                           fsr1l	equ	0xFE1
 30749                           indf2	equ	0xFDF
 30750                           postinc2	equ	0xFDE
 30751                           postdec2	equ	0xFDD
 30752                           plusw2	equ	0xFDB
 30753                           fsr2h	equ	0xFDA
 30754                           fsr2l	equ	0xFD9
 30755                           status	equ	0xFD8
 30756                           
 30757 ;; *************** function i2_MXK_SwitchTo *****************
 30758 ;; Defined at:
 30759 ;;		line 105 in file "Library/MXK.c"
 30760 ;; Parameters:    Size  Location     Type
 30761 ;;  pModule         1    wreg     enum E6927
 30762 ;; Auto vars:     Size  Location     Type
 30763 ;;  pModule         1    7[COMRAM] enum E6927
 30764 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30765 ;; Return value:  Size  Location     Type
 30766 ;;                  1    wreg      unsigned char 
 30767 ;; Registers used:
 30768 ;;		wreg, status,2, status,0, cstack
 30769 ;; Tracked objects:
 30770 ;;		On entry : 0/0
 30771 ;;		On exit  : 0/0
 30772 ;;		Unchanged: 0/0
 30773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30775 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30777 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30778 ;;Total ram usage:        2 bytes
 30779 ;; Hardware stack levels used:    1
 30780 ;; Hardware stack levels required when called:    1
 30781 ;; This function calls:
 30782 ;;		i2_delay_us
 30783 ;; This function is called by:
 30784 ;;		i2_Motor_Step
 30785 ;; This function uses a non-reentrant model
 30786 ;;
 30787                           
 30788                           	psect	text168
 30789  0161DC                     __ptext168:
 30790                           	opt stack 0
 30791  0161DC                     i2_MXK_SwitchTo:
 30792                           	opt stack 15
 30793                           
 30794                           ;incstack = 0
 30795                           ;i2MXK_SwitchTo@pModule stored from wreg
 30796  0161DC  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30797                           
 30798                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30799  0161DE  5086               	movf	3974,w,c	;volatile
 30800  0161E0  0B0F               	andlw	15
 30801  0161E2  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30802                           
 30803                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30804  0161E4  504B               	movf	_Bus_State,w,c
 30805  0161E6  A4D8               	btfss	status,2,c
 30806  0161E8  D002               	goto	i2l1730
 30807                           
 30808                           ;MXK.c: 110: return 0;
 30809  0161EA  0E00               	movlw	0
 30810  0161EC  0012               	return	
 30811  0161EE                     i2l1730:
 30812                           
 30813                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30814  0161EE  0E00               	movlw	0
 30815  0161F0  6E4B               	movwf	_Bus_State,c
 30816                           
 30817                           ;MXK.c: 114: if (CUR != pModule)
 30818  0161F2  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30819  0161F4  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30820  0161F6  B4D8               	btfsc	status,2,c
 30821  0161F8  D00A               	goto	i2l1732
 30822                           
 30823                           ;MXK.c: 115: {
 30824                           ;MXK.c: 116: PORTG &= ~(0xF);
 30825  0161FA  0EF0               	movlw	240
 30826  0161FC  1686               	andwf	3974,f,c	;volatile
 30827                           
 30828                           ;MXK.c: 117: PORTG |= pModule;
 30829  0161FE  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30830  016200  1286               	iorwf	3974,f,c	;volatile
 30831                           
 30832                           ;MXK.c: 120: delay_us(10);
 30833  016202  0E00               	movlw	0
 30834  016204  6E02               	movwf	i2delay_us@us+1,c
 30835  016206  0E0A               	movlw	10
 30836  016208  6E01               	movwf	i2delay_us@us,c
 30837  01620A  ECDF  F0AF         	call	i2_delay_us	;wreg free
 30838  01620E                     i2l1732:
 30839                           
 30840                           ;MXK.c: 121: }
 30841                           ;MXK.c: 122: return 1;
 30842  01620E  0E01               	movlw	1
 30843  016210  0012               	return	
 30844  016212                     __end_ofi2_MXK_SwitchTo:
 30845                           	opt stack 0
 30846                           tosu	equ	0xFFF
 30847                           tosh	equ	0xFFE
 30848                           tosl	equ	0xFFD
 30849                           pclatu	equ	0xFFB
 30850                           pclath	equ	0xFFA
 30851                           tblptru	equ	0xFF8
 30852                           tblptrh	equ	0xFF7
 30853                           tblptrl	equ	0xFF6
 30854                           tablat	equ	0xFF5
 30855                           prodh	equ	0xFF4
 30856                           prodl	equ	0xFF3
 30857                           intcon	equ	0xFF2
 30858                           indf0	equ	0xFEF
 30859                           postinc0	equ	0xFEE
 30860                           fsr0h	equ	0xFEA
 30861                           fsr0l	equ	0xFE9
 30862                           wreg	equ	0xFE8
 30863                           indf1	equ	0xFE7
 30864                           postdec1	equ	0xFE5
 30865                           fsr1h	equ	0xFE2
 30866                           fsr1l	equ	0xFE1
 30867                           indf2	equ	0xFDF
 30868                           postinc2	equ	0xFDE
 30869                           postdec2	equ	0xFDD
 30870                           plusw2	equ	0xFDB
 30871                           fsr2h	equ	0xFDA
 30872                           fsr2l	equ	0xFD9
 30873                           status	equ	0xFD8
 30874                           
 30875 ;; *************** function i2_delay_us *****************
 30876 ;; Defined at:
 30877 ;;		line 255 in file "Library/Types.c"
 30878 ;; Parameters:    Size  Location     Type
 30879 ;;  us              2    0[COMRAM] unsigned short 
 30880 ;; Auto vars:     Size  Location     Type
 30881 ;;  delay_us        4    2[COMRAM] unsigned long 
 30882 ;; Return value:  Size  Location     Type
 30883 ;;                  1    wreg      void 
 30884 ;; Registers used:
 30885 ;;		wreg, status,2, status,0
 30886 ;; Tracked objects:
 30887 ;;		On entry : 0/0
 30888 ;;		On exit  : 0/0
 30889 ;;		Unchanged: 0/0
 30890 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30891 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30892 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30893 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30894 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30895 ;;Total ram usage:        6 bytes
 30896 ;; Hardware stack levels used:    1
 30897 ;; This function calls:
 30898 ;;		Nothing
 30899 ;; This function is called by:
 30900 ;;		i2_MXK_SwitchTo
 30901 ;; This function uses a non-reentrant model
 30902 ;;
 30903                           
 30904                           	psect	text169
 30905  015FBE                     __ptext169:
 30906                           	opt stack 0
 30907  015FBE                     i2_delay_us:
 30908                           	opt stack 15
 30909                           
 30910                           ;Types.c: 256: unsigned long u;
 30911                           ;Types.c: 257: while (us--) {
 30912                           
 30913                           ;incstack = 0
 30914  015FBE  D016               	goto	i2u643_40
 30915  015FC0                     i2l9682:
 30916                           
 30917                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30918  015FC0  0E00               	movlw	0
 30919  015FC2  6E03               	movwf	i2delay_us@u,c
 30920  015FC4  0E00               	movlw	0
 30921  015FC6  6E04               	movwf	i2delay_us@u+1,c
 30922  015FC8  0E00               	movlw	0
 30923  015FCA  6E05               	movwf	i2delay_us@u+2,c
 30924  015FCC  0E00               	movlw	0
 30925  015FCE  6E06               	movwf	i2delay_us@u+3,c
 30926  015FD0                     i2l9684:
 30927  015FD0  5003               	movf	i2delay_us@u,w,c
 30928  015FD2  1004               	iorwf	i2delay_us@u+1,w,c
 30929  015FD4  1005               	iorwf	i2delay_us@u+2,w,c
 30930  015FD6  1006               	iorwf	i2delay_us@u+3,w,c
 30931  015FD8  A4D8               	btfss	status,2,c
 30932  015FDA  D008               	goto	i2u643_40
 30933  015FDC  F000               	nop		; ;# 
 30934  015FDE  0E01               	movlw	1
 30935  015FE0  2603               	addwf	i2delay_us@u,f,c
 30936  015FE2  0E00               	movlw	0
 30937  015FE4  2204               	addwfc	i2delay_us@u+1,f,c
 30938  015FE6  2205               	addwfc	i2delay_us@u+2,f,c
 30939  015FE8  2206               	addwfc	i2delay_us@u+3,f,c
 30940  015FEA  D7F2               	goto	i2l9684
 30941  015FEC                     i2u643_40:
 30942  015FEC  0601               	decf	i2delay_us@us,f,c
 30943  015FEE  A0D8               	btfss	status,0,c
 30944  015FF0  0602               	decf	i2delay_us@us+1,f,c
 30945  015FF2  2801               	incf	i2delay_us@us,w,c
 30946  015FF4  E1E5               	bnz	i2l9682
 30947  015FF6  2802               	incf	i2delay_us@us+1,w,c
 30948  015FF8  B4D8               	btfsc	status,2,c
 30949  015FFA  0012               	return	
 30950  015FFC  D7E1               	goto	i2l832
 30951  015FFE                     __end_ofi2_delay_us:
 30952                           	opt stack 0
 30953                           tosu	equ	0xFFF
 30954                           tosh	equ	0xFFE
 30955                           tosl	equ	0xFFD
 30956                           pclatu	equ	0xFFB
 30957                           pclath	equ	0xFFA
 30958                           tblptru	equ	0xFF8
 30959                           tblptrh	equ	0xFF7
 30960                           tblptrl	equ	0xFF6
 30961                           tablat	equ	0xFF5
 30962                           prodh	equ	0xFF4
 30963                           prodl	equ	0xFF3
 30964                           intcon	equ	0xFF2
 30965                           indf0	equ	0xFEF
 30966                           postinc0	equ	0xFEE
 30967                           fsr0h	equ	0xFEA
 30968                           fsr0l	equ	0xFE9
 30969                           wreg	equ	0xFE8
 30970                           indf1	equ	0xFE7
 30971                           postdec1	equ	0xFE5
 30972                           fsr1h	equ	0xFE2
 30973                           fsr1l	equ	0xFE1
 30974                           indf2	equ	0xFDF
 30975                           postinc2	equ	0xFDE
 30976                           postdec2	equ	0xFDD
 30977                           plusw2	equ	0xFDB
 30978                           fsr2h	equ	0xFDA
 30979                           fsr2l	equ	0xFD9
 30980                           status	equ	0xFD8
 30981                           
 30982 ;; *************** function i2_MXK_Release *****************
 30983 ;; Defined at:
 30984 ;;		line 130 in file "Library/MXK.c"
 30985 ;; Parameters:    Size  Location     Type
 30986 ;;		None
 30987 ;; Auto vars:     Size  Location     Type
 30988 ;;		None
 30989 ;; Return value:  Size  Location     Type
 30990 ;;                  1    wreg      unsigned char 
 30991 ;; Registers used:
 30992 ;;		wreg, status,2, status,0
 30993 ;; Tracked objects:
 30994 ;;		On entry : 0/0
 30995 ;;		On exit  : 0/0
 30996 ;;		Unchanged: 0/0
 30997 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31002 ;;Total ram usage:        0 bytes
 31003 ;; Hardware stack levels used:    1
 31004 ;; This function calls:
 31005 ;;		Nothing
 31006 ;; This function is called by:
 31007 ;;		i2_Motor_Step
 31008 ;; This function uses a non-reentrant model
 31009 ;;
 31010                           
 31011                           	psect	text170
 31012  0167FE                     __ptext170:
 31013                           	opt stack 0
 31014  0167FE                     i2_MXK_Release:
 31015                           	opt stack 16
 31016                           
 31017                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 31018                           
 31019                           ;incstack = 0
 31020  0167FE  0E01               	movlw	1
 31021  016800  6E4B               	movwf	_Bus_State,c
 31022                           
 31023                           ;MXK.c: 135: return 1;
 31024                           ;	Return value of i2_MXK_Release is never used
 31025  016802  0012               	return	
 31026  016804                     __end_ofi2_MXK_Release:
 31027                           	opt stack 0
 31028                           tosu	equ	0xFFF
 31029                           tosh	equ	0xFFE
 31030                           tosl	equ	0xFFD
 31031                           pclatu	equ	0xFFB
 31032                           pclath	equ	0xFFA
 31033                           tblptru	equ	0xFF8
 31034                           tblptrh	equ	0xFF7
 31035                           tblptrl	equ	0xFF6
 31036                           tablat	equ	0xFF5
 31037                           prodh	equ	0xFF4
 31038                           prodl	equ	0xFF3
 31039                           intcon	equ	0xFF2
 31040                           indf0	equ	0xFEF
 31041                           postinc0	equ	0xFEE
 31042                           fsr0h	equ	0xFEA
 31043                           fsr0l	equ	0xFE9
 31044                           wreg	equ	0xFE8
 31045                           indf1	equ	0xFE7
 31046                           postdec1	equ	0xFE5
 31047                           fsr1h	equ	0xFE2
 31048                           fsr1l	equ	0xFE1
 31049                           indf2	equ	0xFDF
 31050                           postinc2	equ	0xFDE
 31051                           postdec2	equ	0xFDD
 31052                           plusw2	equ	0xFDB
 31053                           fsr2h	equ	0xFDA
 31054                           fsr2l	equ	0xFD9
 31055                           status	equ	0xFD8
 31056                           
 31057 ;; *************** function i2_MXK_Queue *****************
 31058 ;; Defined at:
 31059 ;;		line 144 in file "Library/MXK.c"
 31060 ;; Parameters:    Size  Location     Type
 31061 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 31062 ;;		 -> Absolute function(1), Motor_Step(1), 
 31063 ;; Auto vars:     Size  Location     Type
 31064 ;;		None
 31065 ;; Return value:  Size  Location     Type
 31066 ;;                  1    wreg      void 
 31067 ;; Registers used:
 31068 ;;		wreg, status,2, status,0
 31069 ;; Tracked objects:
 31070 ;;		On entry : 0/0
 31071 ;;		On exit  : 0/0
 31072 ;;		Unchanged: 0/0
 31073 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 31074 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31075 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31076 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31077 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 31078 ;;Total ram usage:        3 bytes
 31079 ;; Hardware stack levels used:    1
 31080 ;; This function calls:
 31081 ;;		Nothing
 31082 ;; This function is called by:
 31083 ;;		i2_Motor_Step
 31084 ;; This function uses a non-reentrant model
 31085 ;;
 31086                           
 31087                           	psect	text171
 31088  016764                     __ptext171:
 31089                           	opt stack 0
 31090  016764                     i2_MXK_Queue:
 31091                           	opt stack 16
 31092                           
 31093                           ;MXK.c: 146: lQueue = pCallback;
 31094                           
 31095                           ;incstack = 0
 31096  016764  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 31097  016768  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 31098  01676C  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 31099  016770  0012               	return		;funcret
 31100  016772                     __end_ofi2_MXK_Queue:
 31101                           	opt stack 0
 31102                           tosu	equ	0xFFF
 31103                           tosh	equ	0xFFE
 31104                           tosl	equ	0xFFD
 31105                           pclatu	equ	0xFFB
 31106                           pclath	equ	0xFFA
 31107                           tblptru	equ	0xFF8
 31108                           tblptrh	equ	0xFF7
 31109                           tblptrl	equ	0xFF6
 31110                           tablat	equ	0xFF5
 31111                           prodh	equ	0xFF4
 31112                           prodl	equ	0xFF3
 31113                           intcon	equ	0xFF2
 31114                           indf0	equ	0xFEF
 31115                           postinc0	equ	0xFEE
 31116                           fsr0h	equ	0xFEA
 31117                           fsr0l	equ	0xFE9
 31118                           wreg	equ	0xFE8
 31119                           indf1	equ	0xFE7
 31120                           postdec1	equ	0xFE5
 31121                           fsr1h	equ	0xFE2
 31122                           fsr1l	equ	0xFE1
 31123                           indf2	equ	0xFDF
 31124                           postinc2	equ	0xFDE
 31125                           postdec2	equ	0xFDD
 31126                           plusw2	equ	0xFDB
 31127                           fsr2h	equ	0xFDA
 31128                           fsr2l	equ	0xFD9
 31129                           status	equ	0xFD8
 31130                           tosu	equ	0xFFF
 31131                           tosh	equ	0xFFE
 31132                           tosl	equ	0xFFD
 31133                           pclatu	equ	0xFFB
 31134                           pclath	equ	0xFFA
 31135                           tblptru	equ	0xFF8
 31136                           tblptrh	equ	0xFF7
 31137                           tblptrl	equ	0xFF6
 31138                           tablat	equ	0xFF5
 31139                           prodh	equ	0xFF4
 31140                           prodl	equ	0xFF3
 31141                           intcon	equ	0xFF2
 31142                           indf0	equ	0xFEF
 31143                           postinc0	equ	0xFEE
 31144                           fsr0h	equ	0xFEA
 31145                           fsr0l	equ	0xFE9
 31146                           wreg	equ	0xFE8
 31147                           indf1	equ	0xFE7
 31148                           postdec1	equ	0xFE5
 31149                           fsr1h	equ	0xFE2
 31150                           fsr1l	equ	0xFE1
 31151                           indf2	equ	0xFDF
 31152                           postinc2	equ	0xFDE
 31153                           postdec2	equ	0xFDD
 31154                           plusw2	equ	0xFDB
 31155                           fsr2h	equ	0xFDA
 31156                           fsr2l	equ	0xFD9
 31157                           status	equ	0xFD8
 31158                           
 31159                           	psect	text172
 31160  000000                     __ptext172:
 31161                           	opt stack 0
 31162                           tosu	equ	0xFFF
 31163                           tosh	equ	0xFFE
 31164                           tosl	equ	0xFFD
 31165                           pclatu	equ	0xFFB
 31166                           pclath	equ	0xFFA
 31167                           tblptru	equ	0xFF8
 31168                           tblptrh	equ	0xFF7
 31169                           tblptrl	equ	0xFF6
 31170                           tablat	equ	0xFF5
 31171                           prodh	equ	0xFF4
 31172                           prodl	equ	0xFF3
 31173                           intcon	equ	0xFF2
 31174                           indf0	equ	0xFEF
 31175                           postinc0	equ	0xFEE
 31176                           fsr0h	equ	0xFEA
 31177                           fsr0l	equ	0xFE9
 31178                           wreg	equ	0xFE8
 31179                           indf1	equ	0xFE7
 31180                           postdec1	equ	0xFE5
 31181                           fsr1h	equ	0xFE2
 31182                           fsr1l	equ	0xFE1
 31183                           indf2	equ	0xFDF
 31184                           postinc2	equ	0xFDE
 31185                           postdec2	equ	0xFDD
 31186                           plusw2	equ	0xFDB
 31187                           fsr2h	equ	0xFDA
 31188                           fsr2l	equ	0xFD9
 31189                           status	equ	0xFD8
 31190                           
 31191                           	psect	rparam
 31192  0000                     tosu	equ	0xFFF
 31193                           tosh	equ	0xFFE
 31194                           tosl	equ	0xFFD
 31195                           pclatu	equ	0xFFB
 31196                           pclath	equ	0xFFA
 31197                           tblptru	equ	0xFF8
 31198                           tblptrh	equ	0xFF7
 31199                           tblptrl	equ	0xFF6
 31200                           tablat	equ	0xFF5
 31201                           prodh	equ	0xFF4
 31202                           prodl	equ	0xFF3
 31203                           intcon	equ	0xFF2
 31204                           indf0	equ	0xFEF
 31205                           postinc0	equ	0xFEE
 31206                           fsr0h	equ	0xFEA
 31207                           fsr0l	equ	0xFE9
 31208                           wreg	equ	0xFE8
 31209                           indf1	equ	0xFE7
 31210                           postdec1	equ	0xFE5
 31211                           fsr1h	equ	0xFE2
 31212                           fsr1l	equ	0xFE1
 31213                           indf2	equ	0xFDF
 31214                           postinc2	equ	0xFDE
 31215                           postdec2	equ	0xFDD
 31216                           plusw2	equ	0xFDB
 31217                           fsr2h	equ	0xFDA
 31218                           fsr2l	equ	0xFD9
 31219                           status	equ	0xFD8
 31220                           
 31221                           	psect	temp
 31222  000051                     btemp:
 31223                           	opt stack 0
 31224  000051                     	ds	1
 31225  0000                     int$flags	set	btemp
 31226  0000                     wtemp6	set	btemp+1
 31227                           tosu	equ	0xFFF
 31228                           tosh	equ	0xFFE
 31229                           tosl	equ	0xFFD
 31230                           pclatu	equ	0xFFB
 31231                           pclath	equ	0xFFA
 31232                           tblptru	equ	0xFF8
 31233                           tblptrh	equ	0xFF7
 31234                           tblptrl	equ	0xFF6
 31235                           tablat	equ	0xFF5
 31236                           prodh	equ	0xFF4
 31237                           prodl	equ	0xFF3
 31238                           intcon	equ	0xFF2
 31239                           indf0	equ	0xFEF
 31240                           postinc0	equ	0xFEE
 31241                           fsr0h	equ	0xFEA
 31242                           fsr0l	equ	0xFE9
 31243                           wreg	equ	0xFE8
 31244                           indf1	equ	0xFE7
 31245                           postdec1	equ	0xFE5
 31246                           fsr1h	equ	0xFE2
 31247                           fsr1l	equ	0xFE1
 31248                           indf2	equ	0xFDF
 31249                           postinc2	equ	0xFDE
 31250                           postdec2	equ	0xFDD
 31251                           plusw2	equ	0xFDB
 31252                           fsr2h	equ	0xFDA
 31253                           fsr2l	equ	0xFD9
 31254                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        29
    BSS         822
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     254
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_18(CODE[21]), STR_17(CODE[21]), STR_16(CODE[21]), STR_15(CODE[21]), 
		 -> STR_14(CODE[21]), STR_13(CODE[3]), STR_12(CODE[76]), STR_11(CODE[3]), 
		 -> STR_10(CODE[14]), STR_9(CODE[3]), STR_8(CODE[46]), STR_7(CODE[3]), 
		 -> STR_6(CODE[46]), STR_5(CODE[3]), STR_4(CODE[60]), STR_3(CODE[3]), 
		 -> STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1
    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2035691
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  295631
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     10    10      0  115919
                                              0 BANK3      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                           _delay_ms
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  113465
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19821
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  176157
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  195096
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    7099
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4447
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  999616
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362920
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  292036
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262421
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   95045
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _delay_ms                                             6     4      2    1926
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _delay_ms
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A      FE      11       99.2%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     498      12        0.0%
DATA                 0      0     5C4       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 15 17:38:36 2017

                                 _update_angle 66FA                                  i2_Timer0_Stop 67F8  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3824                                              _A 004C  
                        __end_of_irobot_rotate 473C                                              l8 3EB2  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 657C                                   ___fldiv@sign 00C6  
                                           l11 3110                                             l12 30FA  
                                           l90 3046                                             l85 2F42  
                                           l87 2FB0                                             l89 301C  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 661A  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5E6C                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 6796                           ADC_ClockDivision@reg 00BB  
                                          l120 4D42                                            l121 4D58  
                                          l122 4D6E                                            l220 5994  
                                          l117 4D84                                            l221 5958  
                                          l118 4D2C                                            l230 5BF0  
                                          l222 59A4                                            l223 5976  
                                  ?_LED_Toggle 0001                                            l234 5E14  
                                          l235 5DE4                                            l227 5C0C  
                                          l403 2BD0                                            l412 28AC  
                                          l228 5BD4                                            l340 49F0  
                                          l404 2B70                                            l237 5DFC  
                                          l421 2840                                            l413 2742  
                                          l341 49FE                                            l405 2C00  
                                ??_Console_Tab 00C2                                            l430 4026  
                                          l414 28C8                                            l350 4AF8  
                                          l342 4A0C                                            l510 1D6E  
                                          l406 2B88                                            l415 2768  
                                          l351 4A88                                            l343 4A1A  
                                          l511 1E7E                                            l407 2BA0  
                                          l183 4BAC                                            l432 4050  
                                          l600 092C                                            l344 4A28  
                                          l512 1D90                                            l408 2BB8  
                                          l184 4B86                                            l433 4080  
                                          l417 27D4                                            l601 0AC0  
                                          l353 4A96                                            l337 4A52  
                                          l345 4A36                                            l610 0B48  
                                          l602 095E                                            l354 4AA4  
                                          l346 4A44                                            l338 49E2  
                                          l370 4982                                            l427 40AA  
                                          l611 0B96                                            l603 0AD2  
                                          l355 4AB2                                            l363 49AC  
                                          l371 4990                                            l531 1828  
                                  ?_HMI_GetBar 0001                                            l612 0BE4  
                                          l604 0A0C                                            l356 4AC0  
                                          l372 499E                                            l364 493C  
                                          l532 184C                                            l516 1DD8  
                                          l357 4ACE                                            l509 1E62  
                                          l614 0CC6                                            l358 4ADC  
                                          l366 494A                                            l526 186C  
                                          l615 0CBE                                            l607 0C32  
                                          l359 4AEA                                            l367 4958  
                                          l519 1E20                                            l616 0CD8  
                                          l608 0AFA                                            l368 4966  
                                          l528 188A                                            l393 5AC6  
                                          l617 0CC2                                            l609 0C50  
                                          l369 4974                                            l529 1808  
                                          l483 1BCE                                            l732 4CC6  
                                          l900 1946                                            l476 1CA6  
                                          l733 4CBA                                            l901 194A  
                                          l389 581C                                            l477 1B18  
                                          l397 5D90                                            l910 196E  
                                          l902 194E                                            l726 44B0  
                                          l478 1CC2                                            l486 1C3A  
                                          l654 63C2                                            l911 1972  
                                          l903 1952                                            l727 44A4  
                                          l479 1B62                                            l655 63BA  
                                          l912 1976                                            l904 1956  
                                          l824 5750                                            l832 5B7E  
                                          l913 197A                                            l905 195A  
                                          l921 56C6                                            l673 629A  
                                          l657 63BE                                            l681 561E  
                                          l914 197E                                            l906 195E  
                                          l922 5692                                            l930 3CF0  
                                          l915 1982                                            l907 1962  
                                          l819 5260                                            l916 1986  
                                          l908 1966                                            l860 18A6  
                                          l684 5634                                            l781 60E4  
                                          l853 198E                                            l917 198A  
                                          l909 196A                                            l861 18AA  
                                          l597 093A                                            l870 18CE  
                                          l862 18AE                                            l854 1892  
                                          l598 0922                                            l678 565A  
                                          l686 5644                                            l871 18D2  
                                          l863 18B2                                            l599 094A  
                                          l679 560E                                            l880 18F6  
                                          l872 18D6                                            l864 18B6  
                                          l856 1896                                            l928 3D70  
                                          l776 5E9C                                            l881 18FA  
                                          l873 18DA                                            l865 18BA  
                                          l857 189A                                            l929 3D40  
                                          l890 191E                                            l882 18FE  
                                          l874 18DE                                            l866 18BE  
                                          l858 189E                                            l891 1922  
                                          l883 1902                                            l875 18E2  
                                          l867 18C2                                            l859 18A2  
                                          l892 1926                                            l884 1906  
                                          l876 18E6                                            l868 18C6  
                                          l893 192A                                            l885 190A  
                                          l877 18EA                                            l869 18CA  
                                          l894 192E                                            l886 190E  
                                          l878 18EE                                            l990 4E4E  
                                          l895 1932                                            l887 1912  
                                          l879 18F2                                            l983 4C4A  
                                          l896 1936                                            l888 1916  
                                          l976 4F68                                            l992 4E5E  
                                          l984 4BCE                                            l897 193A  
                                          l889 191A                                            l985 4C46  
                                          l898 193E                                            l978 4F78  
                                          l899 1942                                            l997 5A2C  
                                          l999 5A50                                            _PR2 000FCB  
                                          _dip 033C                                            _val 007D  
                              __end_of_ADC_Off 67D8                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 60B8  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5DDE  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 66E8  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5FBE  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5C1E  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 47E6  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5E6C  
                                         l1000 5A6C                                           l1010 411A  
                                         l1004 58BC                                  ?_Byte_GetZone 00BA  
                                         l1005 58EA                                           l1200 43D0  
                                         l1040 28F6                                           l1201 4424  
                                         l1009 4126                                           l1041 28FC  
                                         l1202 4440                                           l1042 2902  
                                         l1043 2908                                           l1204 446A  
                                         l1300 4FFA                                           l1036 2A52  
                                         l1044 290E                                           l1205 4450  
                                         l1301 4FFE                                           l1045 2914  
                                         l1037 28F0                                           l2021 584C  
                                         l2101 2D92                                           l1302 5008  
                                         l1062 212A                                           l2110 5F32  
                                         l2030 5844                                           l2022 5828  
                                         l2102 2CD6                                           l1207 447C  
                                         l1303 5016                                           l1063 2158  
                                         l1047 29BA                                           l2031 5848  
                                         l2103 2D1E                                           l3000 03BE  
                                         l1056 1FBA                                           l2112 5F1E  
                                         l2024 582C                                           l2040 3940  
                                         l2104 2CDC                                           l1313 5DBE  
                                         l1153 2398                                           l1057 2180  
                                         l2025 5830                                           l2041 3946  
                                         l3002 040E                                           l3010 23E4  
                                         l1082 3FA0                                           l1058 1FC2  
                                         l1146 5182                                           l2114 5F26  
                                         l2026 5834                                           l2042 394C  
                                         l3003 0434                                           l3011 23F4  
                                         l1059 1FEC                                           l2027 5838  
                                         l2035 39D8                                           l2051 39AC  
                                         l2043 3952                                           l3020 24DE  
                                         l3012 241C                                           l1084 3FA8  
                                         l2028 583C                                           l2044 3958  
                                         l2036 392A                                           l2301 48BC  
                                         l3005 0462                                           l3021 24CE  
                                         l1077 3F70                                           l2029 5840  
                                         l2310 41F0                                           l1254 66DC  
                                         l2118 573A                                           l3006 048C  
                                         l3014 2434                                           l1158 603A  
                                         l2070 4F28                                           l2062 4EE2  
                                         l2046 396C                                           l2038 3934  
                                         l2311 421C                                           l2119 56FC  
                                         l2303 48EE                                           l3007 0482  
                                         l3015 2424                                           l1079 3F80  
                                         l2039 393A                                           l1280 507C  
                                         l2144 5B04                                           l3025 2504  
                                         l3017 2490                                           l2049 3998  
                                         l2161 4714                                           l3026 2556  
                                         l3018 2472                                           l2074 4F46  
                                         l2066 4F02                                           l2058 4EC8  
                                         l2162 4700                                           l2330 04E4  
                                         l1283 50DE                                           l2139 45BC  
                                         l2323 5112                                           l2411 3AFE  
                                         l1276 5064                                           l2316 5CE2  
                                         l2156 46C0                                           l2324 50FE  
                                         l2340 0658                                           l2332 0586  
                                         l2404 35E4                                           l2412 3BAA  
                                         l2309 41C4                                           l2333 05B6  
                                         l2413 3B04                                           l1294 501E  
                                         l1630 365E                                           l2158 46C6  
                                         l1295 4FE4                                           l1631 36BA  
                                         l2095 2C92                                           l2319 5CFE  
                                         l2159 46E8                                           l2343 0798  
                                         l2335 0600                                           l2415 3B0A  
                                         l1296 5048                                           l1632 369E  
                                         l2168 5E50                                           l2096 2C4C  
                                         l2360 0EA4                                           l2416 3B10  
                                         l1297 4FEE                                           l2441 25F6  
                                         l2345 0848                                           l2337 06C2  
                                         l2417 3B16                                           l1298 4FF2  
                                         l1730 5F52                                           l2442 2592  
                                         l2434 2576                                           l2098 2CC2  
                                         l2362 0EF0                                           l2338 0620  
                                         l2418 3B1C                                           l1299 4FF6  
                                         l1627 3706                                           l2451 269E  
                                         l2443 25AA                                           l2435 258A  
                                         l2099 2CA6                                           l2355 0DA0  
                                         l2347 08AE                                           l1724 6086  
                                         l1732 5F7A                                           l1628 36FC  
                                         l2452 26FC                                           l2436 25BA  
                                         l2444 25B4                                           l2372 10FC  
                                         l2364 0FB2                                           l1629 367C  
                                         l2453 26A4                                           l2445 262E  
                                         l2373 1062                                           l2365 0F10  
                                         l2357 0DD4                                           l2381 3ACE  
                                         l1726 60B4                                           l2382 3A84  
                                         l1735 65B0                                           l2631 42DC  
                                         l2447 2648                                           l2375 109A  
                                         l2367 0F48                                           l2359 0E74  
                                         l2632 42EA                                           l2624 4266  
                                         l2392 34BE                                           l2633 42FE  
                                         l2625 427C                                           l2393 3502  
                                         l2394 34EA                                           l2811 43A0  
                                         l1827 33C4                                           l2627 42A6  
                                         l2812 43B2                                           l1828 33E4  
                                         l2628 429A                                           l2807 4346  
                                         l2399 35B8                                           l2808 4336  
                                         l1784 325E                                           l1873 612A  
                                         l1785 326C                                           l1787 3276  
                                         l2860 5308                                           l2861 52FC  
                                         l2870 59D4                                           l2694 37EC  
                                         l2686 373E                                           l2871 59C8  
                                         l2951 118E                                           l2695 37DC  
                                         l2864 533E                                           l2960 12F4  
                                         l2952 11BC                                           l2688 37C0  
                                         l2865 534C                                           l2961 12E8  
                                         l2953 11B2                                           l2697 3812  
                                         l2689 37AC                                           l2874 59FE  
                                         l2962 133C                                           l2875 5A0C  
                                         l2955 1210                                           l2947 1130  
                                         l2972 13E6                                           l2948 115E  
                                         l2965 138C                                           l2957 123E  
                                         l2949 1154                                           l2981 001E  
                                         l2974 1436                                           l2966 1362  
                                         l2958 1340                                           l2982 0048  
                                         l2975 1464                                           l2967 1378  
                                         l2959 12BC                                           l2983 0042  
                                         l2976 149A                                           l2984 005A  
                                         l2977 14AA                                           l2993 0364  
                                         l2985 0078                                           l2978 14AE  
                                         l2994 033A                                           l2986 00A2  
                                         l2995 0350                                           l2987 009C  
                                         l2988 00B4                                           l2989 00DC  
                               ??_Console_Init 00BA                          Port_SetPinType@pInput 00E0  
                                         STR_1 FFFB                                           STR_2 FF59  
                                         STR_3 FFFB                                           STR_4 FF59  
                                         STR_5 FFFB                                           STR_6 FF95  
                                         STR_7 FFFB                                           STR_8 FF95  
                                         STR_9 FFFB                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 4B28  
                     __end_of_irobot_song_play 66D4                                           u9000 4EA2  
                                         _PIR1 000F9E                                           u9010 4EA8  
                                         _PIR2 000FA1                                           _PIR3 000FA4  
                                         u9030 530E                            __end_of_GetPortTRIS 49DC  
                                         u9060 59DA                                           u9140 3D5C  
                                         u9150 58B8                                           u9160 58E2  
                                         u9340 5D3C                                           u9500 434C  
                                         u9085 671A                                           u9414 4DFE  
                                         u9086 671C                                           u9415 4DF8  
                                         u9360 5BB6                                           u9345 5D36  
                                         u9290 42AC                                           u8820 4C90  
                                         u8910 5EE6                                           u9470 5F12  
                                         u8840 4CF6                                           u9640 3430  
                                         u9560 578E                                           u9625 337C  
                                         u8915 5EE0                                           u8827 4C86  
                                         _SPI1 0378                                           u9660 6234  
                                         _SPI2 0383                                           u8845 4CF0  
                                         u8934 44EC                                           u8935 44E6  
                                         u8864 590A                                           u8944 451E  
                                         u8880 51FA                                           u8865 5904  
                                         u8945 4518                                           u9665 622E  
                                         u8874 593C                                           u8875 5936  
                                         u9870 543A                                           u9935 1500  
                                         u9848 31E0                                           _TMR0 000FD6  
                                         u9945 1518                                           u9955 1530  
                                         u9965 1552                                           u9798 30A4  
                                         u9799 30B8                                           u9975 16D2  
                                         u9985 1750                                           u9995 1792  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 62A8                                           _main 3AFA  
                   irobot_leds@powerLuminosity 00CC                                           _init 4890  
                                         _mode 033A                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3CB2  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 52DE                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 646C  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5B7C  
                             __end_of_LCD_Init 3092                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 59B4  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 239A                                          l14004 5B4C  
                                        l12406 3D5C                                          l14008 5B5A  
                                        l12272 4E44                                          l14122 6008  
                                        l14044 2B66                                          l13252 541E  
                                        l12278 4E54                                          l12712 673E  
                                        l13248 5410                                          l13512 517A  
                                        l12458 446A                                          l14410 2FB0  
                                        l12804 5750                                          l12812 578E  
                                        l14420 3054                                          l12806 5762  
                                        l12582 5B7E                                          l13542 325E  
                                        l14086 1FE2                                          l14326 264E  
                                        l14432 4F5E                                          l12584 5B90  
                                        l13480 3F76                                          l13474 3F66  
                                        l14460 236C                                          l13740 149A  
                                        l14438 4F6E                                          l16410 0620  
                             __end_of_HMI_Poll 559C                                          l12886 33C4  
                                        l16604 1062                                          l16428 06C2  
                                        l16570 0F10                                          l16466 08E8  
                                        l16588 0FB2                                          _I2C1T 0040  
                                        _I2C2T 03CA                                  ___fltol@sign1 00F7  
                                        ?_main 0001                                          ?_init 0001  
                              __end_of___fldiv 14D2                                __end_of___awdiv 4308  
                        irobot_rotate@isScript 00DC                                          ?_itos 00C6  
                                        STR_10 FFED                                          STR_11 FFFB  
                                        STR_12 FF0D                                          STR_13 FFFB  
                                        STR_14 FFD8                                          STR_15 FFC3  
                                        STR_16 FFC3                                          STR_17 FFC3  
                                        STR_18 FFC3                                __end_of___flmul 04A6  
                              __end_of___fltol 3824                                _Event_DIPSwitch 6308  
                              __end_of___lldiv 43C4                                          u10100 51D0  
                                        u10005 17D4                                          u10050 3FEA  
                                        u11004 6260                                          u10140 32CA  
                                        u10060 3FF6                                          u11005 625A  
                                        u10170 363C                                          u10410 144A  
                                        u10180 3650                                          u10420 1478  
                                        u11220 375E                                          u10190 3690  
                                        u10510 00C8                                          u10095 5192  
                                        u11320 3054                                          u10600 0422  
                                        u10520 02DC                                          u11225 3752  
                                        u10610 0448                                          u11170 268A  
                                        u11090 46B4                        __size_of_HMI_LeftSwitch 0018  
                                        u10380 13E0                                          u11260 37F6  
                              ___awdiv@divisor 00BC                                          u10525 02D0  
                                        u11350 4FD0                                          u11190 2708  
                                        u11280 2F40                                          u11440 5CD6  
                                        u14000 08D2                                          u10810 5B76  
                                        u10570 03B8                                          u11450 5CF8  
                                        u14010 08E8                                          u10900 2168  
                                        u10840 2C06                                          u10690 24EC  
                                        u14320 3538                                          u10970 5DB8  
                                        u10788 3F1E                                          u14180 0FC6  
                                        u11918 41A0                                          u11919 41B4  
                                        u14280 3518                                          u11938 41CC  
                                        u11939 41E0                                          u14380 35D8  
                                        u11958 41F8                                          u11959 420C  
                                        u11978 4224                                          u13930 06D6  
                                        u11979 4238                                          u13848 6050  
                                        u13960 07AC                                          u13849 6066  
                                        u13961 07AA                                          _INDEX 008D  
                              __end_of___lwdiv 5356                                          _MASKS FD0F  
                              __end_of___lwmod 5A16                                          i2l430 47FE  
                                        i2l432 4824                                          i2l433 484E  
                                        i2l427 4874                                          i2l732 53A2  
                                        i2l733 539C                                          i2l832 5FC0  
                                        i2l781 62F6                                ___awdiv@counter 00BE  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00D0                                __end_of_getMode 424A  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03B6  
                                        _PortB 03AC                                          _PortC 00A5  
                                        _PortD 009B                                          _PortE 0091  
                                        _PortF 03C0                                          _PortG 03A2  
                      __end_of_Port_SetPinType 28EA                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C6                          ??_irobot_led_power_on 00CE  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD0F                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 0D3E  
                                        _mode2 3A14                                          _mode3 66AA  
                                        _mode4 34B8                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 418A  
                             __end_of_MXK_Init 2F20                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 671E                               __end_of_SPI_Init 0D3E  
                             __end_of_SPI_Send 5678                          __end_ofi2_MXK_Release 6804  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 56E4                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 50E4  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 559C  
                              _findClosestWall 04A6                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 64C8                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F6                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 45E4                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 6246  
                       irobot_leds@powerColour 00CB                                   __end_of_main 3BDA  
                                 __end_of_init 4936               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3D8A                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 5952  
                             __end_of_InitList FCE5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 671E                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 66FA                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 03FC  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5C6E  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 6522                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 6428                                    _GetPortPORT 4A82  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 4936  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 5264  
                             __end_of_Port_Set 188C                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3F34  
                          __end_of_Button_Poll 31F8                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4DA2                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 67EC  
                                _HMI_SetNumber 638E                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4E32  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 388A  
                                       i2l1631 38D6                                         i2l1632 38C2  
                                       i2l1730 61EE                                         i2l1627 3912  
                                       i2l1732 620E                                         i2l1628 3908  
                                       i2l1629 38A0                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9682 5FC0                                         i2l9684 5FD0  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 64E6                                 _Timer0_Restart 678A  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 2568  
                               i2_MXK_SwitchTo 61DC                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 6504  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 57B8                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5BCE                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 6336                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 5166  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3D8A  
                   __end_of_load_iRScriptStack 574E                                     _Motor_Move 616C  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 35F2                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 6336                                         ___wmul 61A6  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 007F  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 0398  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1D66  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 5D04  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4FD6  
                            GetPortTRIS@pInput 00BC                             __size_of_Reset_Low 001E  
                                       clear_0 464C                                         clear_1 465E  
                                       clear_2 466A                                         clear_3 4676  
                                       clear_4 4682                               ___awdiv@quotient 00C0  
                   irobot_stop_motion@isScript 00D3                                  ?_eusart_getch 0001  
                                   Port_Init@i 0106                                     _iRDistance 0079  
                            __end_of_MXK_Queue 6764                     __end_ofHMI_SetButton@F7213 FD1C  
                                    ??_getMode 00DE                                     _iRBumpLeft 0087  
                                       _printf 2568                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 6540                                  _ADC_Calibrate 66D4  
                                   _iRDropLeft 0085                                 HMI_SetButton@v 00C1  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BB  
                                  _Console_Tab 40C8                            LCD_Word_Write@value 00BF  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BD                       Port_CheckPortType@Output 00F3  
                                    ?_ADC_Init 00BE                             _twos_complement_of 5EF8  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC32  
                  __end_ofTimer2_Init@PRESCALE FD1F                       Port_CheckPortType@pDrive 00F2  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00F0  
                                ??_Port_SetPin 00CD                                      ??_reverse 00BE  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E0                                         putch@c 00CE  
                            Motor_Speed@pMotor 00D5                                 ?_HMI_SetNumber 00D0  
                               i2_Word_GetPair 62D8                        __end_of_Configure_GPIOs 560C  
                          irobot_leds@isScript 00CD                        __end_of_findClosestWall 0920  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 6796  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 6212  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 6132                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 4688  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 6212                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 67A2  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00F3                                    _Byte_SetBit 58EE  
                                __end_of_MASKS FD18                                 _PortA_Property FF0B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 67D8                                   __pidataBANK3 6772  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 657C                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 4D0A                                  __end_of_mode1 1112  
                                __end_of_mode2 3AFA                                  __end_of_mode3 66C0  
                                __end_of_mode4 35F2                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 3358                                  __end_of_putch 672C  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 34B8                            __end_of_Timer0_Stop 67E6  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 3E60  
                            Port_SetType@pType 00F6                                    _Button_Poll 3092  
                         __end_of_Byte_SetByte 6756                           __end_of_Byte_SetPair 644A  
                               _HMI_LeftSwitch 667A                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 646C                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 4534                            __end_of_Motor_Speed 638E  
                               _HMI_DownSwitch 6632                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 661A                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FF03                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 6308  
                      irobot_rotate@angleTotal 00DD                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F4  
                                      ??_mode2 00E6                                        ??_mode3 00E1  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 5A16                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5F7E                              __end_of_ToSegment 1B10  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5EF8                             _irobot_stop_motion 5E26  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 6504                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 40C8                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5D96                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2C1A                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5E26  
                           __end_of_HMI_GetBar 67F8                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0073                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 67C0                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 603C  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 6692                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B5                                        _ADC_AN1 03DB  
                                      _ADC_AN2 03D6                                        _ADC_AN3 03D1  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3F34                                        _ADC_Off 67D0  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 664A                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03E8  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 6662  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5BCE  
                      _Console_IncrementCursor 5888                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0083  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 5A72  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 655E                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 6278                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 00AA  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 67B6  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 0089  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5CBA  
                                    _ADC_Start 5060                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 31F8  
                                  _Timer2_Init 3358                                        __Lparam 0000  
                                  _Timer0_Stop 67E0                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 0077                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 4004                              _Console_PrintChar 28EA  
                                  _Motor_Speed 6364                                        _Stepper 00AF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 1112                                        ___awdiv 424A  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 3718                                        _lBuffer 04AA  
                                      ___lldiv 4308                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 52DE  
                                      ___lwmod 59B4                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4EC0                             ?_Console_PrintChar 0001  
                                      __pcinit 45E4                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 418A  
                                      __ptext0 3AFA                                        __ptext1 34B8  
                                      __ptext2 04A6                                        __ptext3 66AA  
                                      __ptext4 50E4                                        __ptext5 4692  
                                      __ptext6 3A14                                        __ptext7 65EA  
                                      __ptext8 0D3E                                        __ptext9 5CBA  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 6598                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5EB2  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E4  
                          LCD_DrawRectangle@p4 03E0                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 5678                                      _DIPSwitch 038E  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 4004  
                                  _iRBumpRight 0088                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 5C1E                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 6406                                    _iRDropRight 0086  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 4688                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4F4C  
                         __end_of_eusart_getch 67C8                        _irobot_query_and_update 2C1A  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 5822                           __end_of_eusart_putch 6748  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 51E8                                      i2u1403_48 634E  
                           Byte_SetQuad@pInput 00C5                             SPI_MinSpeed@pInput 00C9  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 6278  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 2A88  
                          __end_of_ADC_Voltage 3CB2                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 5ACC                                        printf@c 00E2  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 3A14  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5D96                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5FFE                             Button_Init@pInitIO 0104  
                                _irobot_rotate 4692                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 56E4  
                                    _MXK_Queue 6756                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 473C  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4EC0                              ??_move_and_rotate 00E1  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4BCC                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4DA2  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 655E  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4C6E                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 67F2                                 _Port_TogglePin 62A8  
                             _Event_TestButton 60F6                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6748  
                                 _Byte_SetPair 6428                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 644A                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 447E                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 67FE                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D7  
                               __end_of_OutSeg 51E8                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 6602                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 61DC                          __end_of_HMI_DIPSwitch 6632  
                                __pidataCOMRAM 67A2                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 678A                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 67D0                                 __end_of_printf 272A  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 6406  
                           Port_SetType@Output 0100                            start_initialization 45E4  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 53CC  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 65B4  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 4890                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 62D8  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 648C  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 6246  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 67FE                                    _ADC_Voltage 3BDA  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 188C                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4BCC  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 664A                                      _Reset_Low 64E6  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 67E6  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F0                               Timer2_Init@INDEX 008B  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 2A88                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03E8                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00DB                        __end_of_Set_Addr_Window 47E6  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4F4C  
                                    _gLineSize 03EC                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5D4E                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 5440  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 65D0  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 6522  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F4  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 6364                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1F90                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3E60                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 61A6                             __end_of_Motor_Step 3718  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 6540                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00DB  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC32                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 67C8  
                                    __ptext101 63B8                                      __ptext110 6428  
                                    __ptext102 6278                                      __ptext111 5A72  
                                    __ptext103 3E60                                      __ptext120 65B4  
                                    __ptext112 57B8                                      __ptext104 6522  
                                    __ptext121 5D96                                      __ptext113 51E8  
                                    __ptext105 67E6                                      __ptext130 661A  
                                    __ptext122 4FD6                                      __ptext114 644A  
                                    __ptext106 6540                                      __ptext131 6632  
                                    __ptext123 66D4                                      __ptext115 447E  
                                    __ptext107 272A                                      __ptext140 638E  
                                    __ptext132 664A                                      __ptext124 67EC  
                                    __ptext116 4F4C                                      __ptext108 1B10  
                                    __ptext141 3CB2                                      __ptext133 6662  
                                    __ptext125 67D0                                      __ptext117 5060  
                                    __ptext109 5E6C                                      __ptext150 4004  
                                    __ptext142 5678                                      __ptext134 667A  
                                    __ptext126 418A                                      __ptext118 5264  
                                    __ptext151 60B8                                      __ptext143 59B4  
                                    __ptext135 6692                                      __ptext127 5528  
                                    __ptext119 6246                                      __ptext160 3824  
                                    __ptext152 655E                                      __ptext144 52DE  
                                    __ptext136 5D04                                      __ptext128 3092  
                                    __ptext161 67F8                                      __ptext153 4C6E  
                                    __ptext145 43C4                                      __ptext137 6308  
                                    __ptext129 6602                                      __ptext170 67FE  
                                    __ptext162 6796                                      __ptext154 58EE  
                                    __ptext146 188C                                      __ptext138 1404  
                                    __ptext171 6764                                      __ptext163 47E6  
                                    __ptext155 5EB2                                      __ptext147 4DA2  
                                    __ptext139 60F6                __end_of_irobot_query_and_update 2DA0  
                                    __ptext172 0000                                      __ptext164 62D8  
                                    __ptext156 67B6                                      __ptext148 5DDE  
                                    __ptext165 65D0                                      __ptext157 67F2  
                                    __ptext149 62A8                                      __ptext166 5356  
                                    _pShiftVal 007B                                      __ptext167 5C6E  
                                    __ptext159 6336                                      __ptext168 61DC  
                                    __ptext169 5FBE                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 49DC                                       ?_getMode 0001  
                                 _eusart_getch 67C0                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 5822                                   _eusart_putch 673A  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 43C4  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 5264  
                 irobot_rotate@rotateDirection 00DF                          __end_of_HMI_SetButton 4E32  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 63B8                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 6662                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00E6  
                               __size_of_mode3 0016                                 __size_of_mode4 013A  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4C6E  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 67EC  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 65EA  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 65D0  
                                     _LCD_Fill 5B24                                       _LCD_Init 2F20  
                               ___wmul@product 00BE                                       _HMIBoard 033E  
                               i2_Byte_GetZone 5356                                       _LED_Init 5952  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 21A0  
                                     _HMI_Poll 5528                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 64C8  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5FBE  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 047A  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C7  
                                     _PIR1bits 000F9E                                       i2u515_40 5378  
                                     i2u515_47 536E                                       i2u517_40 53C0  
                                     _PIR3bits 000FA4                                       i2u517_45 53BC  
                                     i2u640_44 5CA8                                       i2u640_45 5CA4  
                                     i2u643_40 5FEC                                       i2u742_40 3868  
                                     i2u743_40 387C                                       i2u639_44 5C82  
                                     i2u639_45 5C7E                                       i2u744_40 38B4  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                                  _mode1$15601 03F8                           i2Word_GetPair@pInput 000D  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00BB  
                             HMI_SetBar@pValue 00BA                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00E4                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 4A82  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4D0A  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5F7E  
                           _Port_CheckPairType 57B8                                       _MXK_Init 2DA0  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 50E4  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 66E8  
                          __end_of_irobot_leds 5B24                                       _SPI_Init 0920  
                          __end_of_irobot_init 673A                       __end_of_Event_TestButton 6132  
                                     _SPI_Send 560C                            __end_of_irobot_move 45E4  
                                    _rx_assign 3924                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00DD                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 54B4                                     printf@prec 00DC  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 6602                             _Port_CheckQuadType 5A72  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 5528  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5D4E  
                         __end_of_update_angle 670C                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FCF5                           __end_ofi2_Motor_Step 3924  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 45F8                                      copy_data1 4618  
                                    copy_data2 4638                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 65EA                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 53CC  
                          __end_ofi2_MXK_Queue 6772                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FC33                     __end_of_irobot_init_song_0 648C  
                         _Motor_Step$intlevel0 35F8                                       _Mode_Set 670C  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 677E                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 67C8                           __end_of_Word_GetPair 60F6  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 63E0                                   OutSeg@pInput 00C0  
                               _Console_Render 1F90                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 14D2                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5EB2  
                      __end_of_get_packet_size 5888                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 447E                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 66C0  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 607A  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 008F  
                                     _lBufferY 008E                            Timer2_Init@PRESCALE FD1C  
                        _findClosestWall$15600 03F6                                     ?_rx_assign 00BB  
                              LCD_Fill@pColour 00C3                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0081  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 667A  
                       Byte_GetZone@pChunkSize 00BE                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00BE                          __size_of_Port_SetType 022A  
                                reverse@length 00BC                                      itos@input 00C6  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 239A  
                          irobot_move@isScript 00D2                             Motor_Init@pAddress 00E9  
                                     _delay_ms 574E                                       _delay_us 5B7C  
                                     _clearall 0090                                ___lwdiv@divisor 00BC  
                              ___lwdiv@counter 00BE                                Port_GetPin@pPin 00BC  
                                     __ptext10 66E8                                       __ptext11 6132  
                                     __ptext20 5EF8                                       __ptext12 66FA  
                                     __ptext21 66C0                                       __ptext13 2C1A  
                                     __ptext30 648C                                       __ptext22 2568  
                                     __ptext14 3924                                       __ptext31 5A16  
                                     __ptext23 671E                                       __ptext15 4EC0  
                                     __ptext40 53CC                                       __ptext32 5F7E  
                                     __ptext24 28EA                                       __ptext16 5822  
                                     __ptext41 4B28                                       __ptext33 3718  
                                     __ptext25 40C8                                       __ptext17 67C0  
                                     __ptext50 657C                                       __ptext42 61A6  
                                     __ptext34 6364                                       __ptext26 424A  
                                     __ptext18 5E26                                       __ptext51 5ACC  
                                     __ptext43 3F34                                       __ptext35 616C  
                                     __ptext27 5888                                       __ptext19 4534  
                                     __ptext60 2DA0                                       __ptext52 56E4  
                                     __ptext44 6212                                       __ptext36 63E0  
                                     __ptext28 4BCC                                       __ptext61 2A88  
                                     __ptext53 646C                                       __ptext45 3BDA  
                                     __ptext37 5FFE                                       __ptext29 4E32  
                                     __ptext70 5BCE                                       __ptext62 1D66  
                                     __ptext54 672C                                       __ptext46 239A  
                                     __ptext38 5166                                       __ptext71 603C  
                                     __ptext63 5D4E                                       __ptext55 673A  
                                     __ptext47 0000                                       __ptext39 1F90  
                          ??_MXK_BlockSwitchTo 00C0                                       __ptext80 2F20  
                                     __ptext72 35F2                                       __ptext64 14D2  
                                     __ptext56 64AA                                       __ptext48 1112  
                                     __ptext81 4D0A                                       __ptext73 67E0  
                                     __ptext65 6748                                       __ptext57 3D8A  
                                     __ptext49 4890                                       __ptext90 5C1E  
                                     __ptext82 5B24                                       __ptext74 678A  
                                     __ptext66 4936                                       __ptext58 31F8  
                                     __ptext91 574E                                       __ptext83 473C  
                                     __ptext75 5F3C                                       __ptext67 49DC  
                                     __ptext59 677E                                       __ptext92 64E6  
                                     __ptext84 64C8                                       __ptext76 6598  
                                     __ptext68 4A82                                       __ptext93 6504  
                                     __ptext85 6406                                       __ptext77 6756  
                                     __ptext69 5952                                       __ptext94 67AC  
                                     __ptext86 560C                                       __ptext78 607A  
                                     __ptext95 21A0                                       __ptext87 670C  
                                     __ptext79 5B7C                                       __ptext96 54B4  
                                     __ptext88 559C                                       __ptext97 0920  
                                     __ptext89 5440                                       __ptext98 3358  
                                     __ptext99 4308                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4FD6                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 64AA                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00D3  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00E1                            __end_of_MXK_Dequeue 607A  
                            HMI_SetSegments@in 00BE                          Button_Init@pThreshold 0102  
                                     _safeToGo 5CBA                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 21A0  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5D04                            __end_of_MXK_Release 65B4  
                               _MXK_TestButton 6692                                  i2_Byte_SetBit 5C6E  
                      __end_of_move_and_rotate 5166                            ??_ADC_ClockDivision 00BA  
                                 _iRDistanceSS 0322                                    _irobot_leds 5ACC  
                                  _irobot_init 672C                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 4534                                 ADC_Voltage@max 00E7  
                               ADC_Voltage@ref 00EB                      __end_of_MXK_BlockSwitchTo 60B8  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1D66  
                                 Port_Set@Type 00E0                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EF  
                            ??_findClosestWall 03F4                                      printf@val 00E0  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 008C  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5DDE  
                                   _HMI_GetBar 67F2                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 67B6  
                                   _HMI_Render 5FFE                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 6764                      __end_of_ADC_ClockDivision 5060  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008A  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 616C  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 66AA                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 63B8  
                   __end_of_twos_complement_of 5F3C                       irobot_rotate@rotateAngle 00D7  
                              Port_Init@pInput 0101                                       printf@ap 00DE  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D9                                     _ISR_Enable 67AC  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00E1                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 603C  
                            ADC_Voltage@output 00EF                                  _distanceTotal 0075  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 4B28  
                             _Port_SetQuadType 1B10                                    _MXK_Release 6598  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5F3C  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 272A  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 64AA                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 58EE  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 63E0  
                                 _SPI_MaxSpeed 5440              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 54B4                             Port_Set@TypeActual 00DE  
                             ?_move_and_rotate 0001  
