

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 08 11:29:51 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1,inline
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1,inline
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1,group=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1,inline
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1,inline
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1,group=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1,inline
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1,inline
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   142                           	psect	text118,global,reloc=2,class=CODE,delta=1
   143                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   144                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   145  0000                     
   146                           ; Version 1.43
   147                           ; Generated 25/07/2017 GMT
   148                           ; 
   149                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   150                           ; All rights reserved.
   151                           ; 
   152                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   153                           ; 
   154                           ; Redistribution and use in source and binary forms, with or without modification, are
   155                           ; permitted provided that the following conditions are met:
   156                           ; 
   157                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   158                           ;        conditions and the following disclaimer.
   159                           ; 
   160                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   161                           ;        of conditions and the following disclaimer in the documentation and/or other
   162                           ;        materials provided with the distribution.
   163                           ; 
   164                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   165                           ;        software without specific prior written permission.
   166                           ; 
   167                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   168                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   169                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   170                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   171                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   172                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   173                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   174                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   175                           ; 
   176                           ; 
   177                           ; Code-generator required, PIC18F67J50 Definitions
   178                           ; 
   179                           ; SFR Addresses
   180  0000                     
   181 ;; Function _HMI_LeftSwitch is unused but had its address taken
   182  0000                     
   183 ;; Function _HMI_RightSwitch is unused but had its address taken
   184  0000                     
   185 ;; Function _HMI_UpSwitch is unused but had its address taken
   186  0000                     
   187 ;; Function _HMI_DownSwitch is unused but had its address taken
   188  0000                     
   189 ;; Function _HMI_DIPSwitch is unused but had its address taken
   190  0000                     
   191 ;; Function _MXK_TestButton is unused but had its address taken
   192  0000                     
   193 ;; Function _MXK_DIPSwitch is unused but had its address taken
   194  0000                     
   195 ;; Function _Event_NULL is unused but had its address taken
   196  0000                     
   197 ;; Function _Event_DIPSwitch is unused but had its address taken
   198  0000                     
   199 ;; Function _Event_TestButton is unused but had its address taken
   200  0000                     
   201                           	psect	idataCOMRAM
   202  014032                     __pidataCOMRAM:
   203                           	opt stack 0
   204                           
   205                           ;initializer for _gCursor
   206  014032  0006               	dw	6
   207  014034  0006               	dw	6
   208                           
   209                           ;initializer for _Bus_State
   210  014036  01                 	db	1
   211                           
   212                           ;initializer for _A
   213  014037  41                 	db	65
   214                           
   215                           ;initializer for _a
   216  014038  61                 	db	97
   217                           
   218                           ;initializer for _zero
   219  014039  30                 	db	48
   220                           
   221                           ;initializer for _l
   222  01403A  80                 	db	128
   223                           
   224                           ;initializer for _w
   225  01403B  80                 	db	128
   226                           
   227                           	psect	idataBANK0
   228  014054                     __pidataBANK0:
   229                           	opt stack 0
   230                           
   231                           ;initializer for _gCharSize
   232  014054  0005               	dw	5
   233  014056  0007               	dw	7
   234                           
   235                           ;initializer for _gForecolour
   236  014058  FFFF               	dw	65535
   237                           
   238                           ;initializer for _change
   239  01405A  01                 	db	1
   240                           
   241                           	psect	idataBANK3
   242  01403C                     __pidataBANK3:
   243                           	opt stack 0
   244                           
   245                           ;initializer for Console_Render@F6956
   246  01403C  0006               	dw	6
   247  01403E  0006               	dw	6
   248                           
   249                           ;initializer for _gLineSize
   250  014040  0080               	dw	128
   251  014042  0007               	dw	7
   252                           
   253                           	psect	mediumconst
   254  00FCF2                     __pmediumconst:
   255                           	opt stack 0
   256  00FCF2  00                 	db	0
   257  00FCF3                     _InitList:
   258                           	opt stack 0
   259  00FCF3  1100               	dw	4352
   260  00FCF5  0080               	dw	128
   261  00FCF7  012C               	dw	300
   262  00FCF9  B100               	dw	45312
   263  00FCFB  0002               	dw	2
   264  00FCFD  0035               	dw	53
   265  00FCFF  0036               	dw	54
   266  00FD01  B200               	dw	45568
   267  00FD03  0002               	dw	2
   268  00FD05  0035               	dw	53
   269  00FD07  0036               	dw	54
   270  00FD09  B300               	dw	45824
   271  00FD0B  0002               	dw	2
   272  00FD0D  0035               	dw	53
   273  00FD0F  0036               	dw	54
   274  00FD11  0002               	dw	2
   275  00FD13  0035               	dw	53
   276  00FD15  0036               	dw	54
   277  00FD17  B400               	dw	46080
   278  00FD19  0000               	dw	0
   279  00FD1B  C000               	dw	49152
   280  00FD1D  00A2               	dw	162
   281  00FD1F  0002               	dw	2
   282  00FD21  0084               	dw	132
   283  00FD23  C100               	dw	49408
   284  00FD25  00C5               	dw	197
   285  00FD27  C200               	dw	49664
   286  00FD29  000D               	dw	13
   287  00FD2B  0000               	dw	0
   288  00FD2D  C300               	dw	49920
   289  00FD2F  008D               	dw	141
   290  00FD31  002A               	dw	42
   291  00FD33  C400               	dw	50176
   292  00FD35  008D               	dw	141
   293  00FD37  00EE               	dw	238
   294  00FD39  C500               	dw	50432
   295  00FD3B  000A               	dw	10
   296  00FD3D  3600               	dw	13824
   297  00FD3F  00C8               	dw	200
   298  00FD41  E000               	dw	57344
   299  00FD43  0012               	dw	18
   300  00FD45  001C               	dw	28
   301  00FD47  0010               	dw	16
   302  00FD49  0018               	dw	24
   303  00FD4B  0033               	dw	51
   304  00FD4D  002C               	dw	44
   305  00FD4F  0025               	dw	37
   306  00FD51  0028               	dw	40
   307  00FD53  0028               	dw	40
   308  00FD55  0027               	dw	39
   309  00FD57  002F               	dw	47
   310  00FD59  003C               	dw	60
   311  00FD5B  0000               	dw	0
   312  00FD5D  0003               	dw	3
   313  00FD5F  0003               	dw	3
   314  00FD61  0010               	dw	16
   315  00FD63  0080               	dw	128
   316  00FD65  0078               	dw	120
   317  00FD67  E100               	dw	57600
   318  00FD69  0012               	dw	18
   319  00FD6B  001C               	dw	28
   320  00FD6D  0010               	dw	16
   321  00FD6F  0018               	dw	24
   322  00FD71  002D               	dw	45
   323  00FD73  0028               	dw	40
   324  00FD75  0023               	dw	35
   325  00FD77  0028               	dw	40
   326  00FD79  0028               	dw	40
   327  00FD7B  0026               	dw	38
   328  00FD7D  002F               	dw	47
   329  00FD7F  003B               	dw	59
   330  00FD81  0000               	dw	0
   331  00FD83  0003               	dw	3
   332  00FD85  0003               	dw	3
   333  00FD87  0010               	dw	16
   334  00FD89  3A00               	dw	14848
   335  00FD8B  0005               	dw	5
   336  00FD8D  2A00               	dw	10752
   337  00FD8F  0000               	dw	0
   338  00FD91  0002               	dw	2
   339  00FD93  0000               	dw	0
   340  00FD95  0081               	dw	129
   341  00FD97  2B00               	dw	11008
   342  00FD99  0000               	dw	0
   343  00FD9B  0003               	dw	3
   344  00FD9D  0000               	dw	0
   345  00FD9F  00A2               	dw	162
   346  00FDA1  2900               	dw	10496
   347  00FDA3  2C00               	dw	11264
   348  00FDA5                     __end_of_InitList:
   349                           	opt stack 0
   350  00FDA5                     Timer0_Init@PRESCALE:
   351                           	opt stack 0
   352  00FDA5  0002               	dw	2
   353  00FDA7  0004               	dw	4
   354  00FDA9  0008               	dw	8
   355  00FDAB  0010               	dw	16
   356  00FDAD  0020               	dw	32
   357  00FDAF  0040               	dw	64
   358  00FDB1  0080               	dw	128
   359  00FDB3  0100               	dw	256
   360  00FDB5                     __end_ofTimer0_Init@PRESCALE:
   361                           	opt stack 0
   362  00FDB5                     PortProperty_Valid@F6830:
   363                           	opt stack 0
   364  00FDB5  00                 	db	0
   365  00FDB6  01                 	db	1
   366  00FDB7  02                 	db	2
   367  00FDB8  00                 	db	0
   368  00FDB9  01                 	db	1
   369  00FDBA  00                 	db	0
   370  00FDBB  01                 	db	1
   371  00FDBC  00                 	db	0
   372  00FDBD  02                 	db	2
   373  00FDBE  02                 	db	2
   374  00FDBF  00                 	db	0
   375  00FDC0  00                 	db	0
   376  00FDC1  03                 	db	3
   377  00FDC2  03                 	db	3
   378  00FDC3  03                 	db	3
   379  00FDC4  00                 	db	0
   380  00FDC5                     __end_ofPortProperty_Valid@F6830:
   381                           	opt stack 0
   382  00FDC5                     _dpowers:
   383                           	opt stack 0
   384  00FDC5  0001               	dw	1
   385  00FDC7  000A               	dw	10
   386  00FDC9  0064               	dw	100
   387  00FDCB  03E8               	dw	1000
   388  00FDCD  2710               	dw	10000
   389  00FDCF                     __end_of_dpowers:
   390                           	opt stack 0
   391  00FDCF                     _MASKS:
   392                           	opt stack 0
   393  00FDCF  00                 	db	0
   394  00FDD0  01                 	db	1
   395  00FDD1  03                 	db	3
   396  00FDD2  07                 	db	7
   397  00FDD3  0F                 	db	15
   398  00FDD4  1F                 	db	31
   399  00FDD5  3F                 	db	63
   400  00FDD6  7F                 	db	127
   401  00FDD7  FF                 	db	255
   402  00FDD8                     __end_of_MASKS:
   403                           	opt stack 0
   404  00FDD8                     HMI_SetButton@F7213:
   405                           	opt stack 0
   406  00FDD8  00                 	db	0
   407  00FDD9  02                 	db	2
   408  00FDDA  01                 	db	1
   409  00FDDB  03                 	db	3
   410  00FDDC                     __end_ofHMI_SetButton@F7213:
   411                           	opt stack 0
   412  00FDDC                     Timer2_Init@PRESCALE:
   413                           	opt stack 0
   414  00FDDC  01                 	db	1
   415  00FDDD  04                 	db	4
   416  00FDDE  10                 	db	16
   417  00FDDF                     __end_ofTimer2_Init@PRESCALE:
   418                           	opt stack 0
   419  00FDDF                     _Font5x7:
   420                           	opt stack 0
   421  00FDDF  00                 	db	0
   422  00FDE0  00                 	db	0
   423  00FDE1  00                 	db	0
   424  00FDE2  00                 	db	0
   425  00FDE3  00                 	db	0
   426  00FDE4  00                 	db	0
   427  00FDE5  00                 	db	0
   428  00FDE6  5F                 	db	95
   429  00FDE7  00                 	db	0
   430  00FDE8  00                 	db	0
   431  00FDE9  00                 	db	0
   432  00FDEA  07                 	db	7
   433  00FDEB  00                 	db	0
   434  00FDEC  07                 	db	7
   435  00FDED  00                 	db	0
   436  00FDEE  14                 	db	20
   437  00FDEF  7F                 	db	127
   438  00FDF0  14                 	db	20
   439  00FDF1  7F                 	db	127
   440  00FDF2  14                 	db	20
   441  00FDF3  24                 	db	36
   442  00FDF4  2A                 	db	42
   443  00FDF5  7F                 	db	127
   444  00FDF6  2A                 	db	42
   445  00FDF7  12                 	db	18
   446  00FDF8  23                 	db	35
   447  00FDF9  13                 	db	19
   448  00FDFA  08                 	db	8
   449  00FDFB  64                 	db	100
   450  00FDFC  62                 	db	98
   451  00FDFD  36                 	db	54
   452  00FDFE  49                 	db	73
   453  00FDFF  55                 	db	85
   454  00FE00  22                 	db	34
   455  00FE01  50                 	db	80
   456  00FE02  00                 	db	0
   457  00FE03  05                 	db	5
   458  00FE04  03                 	db	3
   459  00FE05  00                 	db	0
   460  00FE06  00                 	db	0
   461  00FE07  00                 	db	0
   462  00FE08  1C                 	db	28
   463  00FE09  22                 	db	34
   464  00FE0A  41                 	db	65
   465  00FE0B  00                 	db	0
   466  00FE0C  00                 	db	0
   467  00FE0D  41                 	db	65
   468  00FE0E  22                 	db	34
   469  00FE0F  1C                 	db	28
   470  00FE10  00                 	db	0
   471  00FE11  08                 	db	8
   472  00FE12  2A                 	db	42
   473  00FE13  1C                 	db	28
   474  00FE14  2A                 	db	42
   475  00FE15  08                 	db	8
   476  00FE16  08                 	db	8
   477  00FE17  08                 	db	8
   478  00FE18  3E                 	db	62
   479  00FE19  08                 	db	8
   480  00FE1A  08                 	db	8
   481  00FE1B  00                 	db	0
   482  00FE1C  50                 	db	80
   483  00FE1D  30                 	db	48
   484  00FE1E  00                 	db	0
   485  00FE1F  00                 	db	0
   486  00FE20  08                 	db	8
   487  00FE21  08                 	db	8
   488  00FE22  08                 	db	8
   489  00FE23  08                 	db	8
   490  00FE24  08                 	db	8
   491  00FE25  00                 	db	0
   492  00FE26  60                 	db	96
   493  00FE27  60                 	db	96
   494  00FE28  00                 	db	0
   495  00FE29  00                 	db	0
   496  00FE2A  20                 	db	32
   497  00FE2B  10                 	db	16
   498  00FE2C  08                 	db	8
   499  00FE2D  04                 	db	4
   500  00FE2E  02                 	db	2
   501  00FE2F  3E                 	db	62
   502  00FE30  51                 	db	81
   503  00FE31  49                 	db	73
   504  00FE32  45                 	db	69
   505  00FE33  3E                 	db	62
   506  00FE34  00                 	db	0
   507  00FE35  42                 	db	66
   508  00FE36  7F                 	db	127
   509  00FE37  40                 	db	64
   510  00FE38  00                 	db	0
   511  00FE39  42                 	db	66
   512  00FE3A  61                 	db	97
   513  00FE3B  51                 	db	81
   514  00FE3C  49                 	db	73
   515  00FE3D  46                 	db	70
   516  00FE3E  21                 	db	33
   517  00FE3F  41                 	db	65
   518  00FE40  45                 	db	69
   519  00FE41  4B                 	db	75
   520  00FE42  31                 	db	49
   521  00FE43  18                 	db	24
   522  00FE44  14                 	db	20
   523  00FE45  12                 	db	18
   524  00FE46  7F                 	db	127
   525  00FE47  10                 	db	16
   526  00FE48  27                 	db	39
   527  00FE49  45                 	db	69
   528  00FE4A  45                 	db	69
   529  00FE4B  45                 	db	69
   530  00FE4C  39                 	db	57
   531  00FE4D  3C                 	db	60
   532  00FE4E  4A                 	db	74
   533  00FE4F  49                 	db	73
   534  00FE50  49                 	db	73
   535  00FE51  30                 	db	48
   536  00FE52  01                 	db	1
   537  00FE53  71                 	db	113
   538  00FE54  09                 	db	9
   539  00FE55  05                 	db	5
   540  00FE56  03                 	db	3
   541  00FE57  36                 	db	54
   542  00FE58  49                 	db	73
   543  00FE59  49                 	db	73
   544  00FE5A  49                 	db	73
   545  00FE5B  36                 	db	54
   546  00FE5C  06                 	db	6
   547  00FE5D  49                 	db	73
   548  00FE5E  49                 	db	73
   549  00FE5F  29                 	db	41
   550  00FE60  1E                 	db	30
   551  00FE61  00                 	db	0
   552  00FE62  36                 	db	54
   553  00FE63  36                 	db	54
   554  00FE64  00                 	db	0
   555  00FE65  00                 	db	0
   556  00FE66  00                 	db	0
   557  00FE67  56                 	db	86
   558  00FE68  36                 	db	54
   559  00FE69  00                 	db	0
   560  00FE6A  00                 	db	0
   561  00FE6B  00                 	db	0
   562  00FE6C  08                 	db	8
   563  00FE6D  14                 	db	20
   564  00FE6E  22                 	db	34
   565  00FE6F  41                 	db	65
   566  00FE70  14                 	db	20
   567  00FE71  14                 	db	20
   568  00FE72  14                 	db	20
   569  00FE73  14                 	db	20
   570  00FE74  14                 	db	20
   571  00FE75  41                 	db	65
   572  00FE76  22                 	db	34
   573  00FE77  14                 	db	20
   574  00FE78  08                 	db	8
   575  00FE79  00                 	db	0
   576  00FE7A  02                 	db	2
   577  00FE7B  01                 	db	1
   578  00FE7C  51                 	db	81
   579  00FE7D  09                 	db	9
   580  00FE7E  06                 	db	6
   581  00FE7F  32                 	db	50
   582  00FE80  49                 	db	73
   583  00FE81  79                 	db	121
   584  00FE82  41                 	db	65
   585  00FE83  3E                 	db	62
   586  00FE84  7E                 	db	126
   587  00FE85  11                 	db	17
   588  00FE86  11                 	db	17
   589  00FE87  11                 	db	17
   590  00FE88  7E                 	db	126
   591  00FE89  7F                 	db	127
   592  00FE8A  49                 	db	73
   593  00FE8B  49                 	db	73
   594  00FE8C  49                 	db	73
   595  00FE8D  36                 	db	54
   596  00FE8E  3E                 	db	62
   597  00FE8F  41                 	db	65
   598  00FE90  41                 	db	65
   599  00FE91  41                 	db	65
   600  00FE92  22                 	db	34
   601  00FE93  7F                 	db	127
   602  00FE94  41                 	db	65
   603  00FE95  41                 	db	65
   604  00FE96  22                 	db	34
   605  00FE97  1C                 	db	28
   606  00FE98  7F                 	db	127
   607  00FE99  49                 	db	73
   608  00FE9A  49                 	db	73
   609  00FE9B  49                 	db	73
   610  00FE9C  41                 	db	65
   611  00FE9D  7F                 	db	127
   612  00FE9E  09                 	db	9
   613  00FE9F  09                 	db	9
   614  00FEA0  01                 	db	1
   615  00FEA1  01                 	db	1
   616  00FEA2  3E                 	db	62
   617  00FEA3  41                 	db	65
   618  00FEA4  41                 	db	65
   619  00FEA5  51                 	db	81
   620  00FEA6  32                 	db	50
   621  00FEA7  7F                 	db	127
   622  00FEA8  08                 	db	8
   623  00FEA9  08                 	db	8
   624  00FEAA  08                 	db	8
   625  00FEAB  7F                 	db	127
   626  00FEAC  00                 	db	0
   627  00FEAD  41                 	db	65
   628  00FEAE  7F                 	db	127
   629  00FEAF  41                 	db	65
   630  00FEB0  00                 	db	0
   631  00FEB1  20                 	db	32
   632  00FEB2  40                 	db	64
   633  00FEB3  41                 	db	65
   634  00FEB4  3F                 	db	63
   635  00FEB5  01                 	db	1
   636  00FEB6  7F                 	db	127
   637  00FEB7  08                 	db	8
   638  00FEB8  14                 	db	20
   639  00FEB9  22                 	db	34
   640  00FEBA  41                 	db	65
   641  00FEBB  7F                 	db	127
   642  00FEBC  40                 	db	64
   643  00FEBD  40                 	db	64
   644  00FEBE  40                 	db	64
   645  00FEBF  40                 	db	64
   646  00FEC0  7F                 	db	127
   647  00FEC1  02                 	db	2
   648  00FEC2  04                 	db	4
   649  00FEC3  02                 	db	2
   650  00FEC4  7F                 	db	127
   651  00FEC5  7F                 	db	127
   652  00FEC6  04                 	db	4
   653  00FEC7  08                 	db	8
   654  00FEC8  10                 	db	16
   655  00FEC9  7F                 	db	127
   656  00FECA  3E                 	db	62
   657  00FECB  41                 	db	65
   658  00FECC  41                 	db	65
   659  00FECD  41                 	db	65
   660  00FECE  3E                 	db	62
   661  00FECF  7F                 	db	127
   662  00FED0  09                 	db	9
   663  00FED1  09                 	db	9
   664  00FED2  09                 	db	9
   665  00FED3  06                 	db	6
   666  00FED4  3E                 	db	62
   667  00FED5  41                 	db	65
   668  00FED6  51                 	db	81
   669  00FED7  21                 	db	33
   670  00FED8  5E                 	db	94
   671  00FED9  7F                 	db	127
   672  00FEDA  09                 	db	9
   673  00FEDB  19                 	db	25
   674  00FEDC  29                 	db	41
   675  00FEDD  46                 	db	70
   676  00FEDE  46                 	db	70
   677  00FEDF  49                 	db	73
   678  00FEE0  49                 	db	73
   679  00FEE1  49                 	db	73
   680  00FEE2  31                 	db	49
   681  00FEE3  01                 	db	1
   682  00FEE4  01                 	db	1
   683  00FEE5  7F                 	db	127
   684  00FEE6  01                 	db	1
   685  00FEE7  01                 	db	1
   686  00FEE8  3F                 	db	63
   687  00FEE9  40                 	db	64
   688  00FEEA  40                 	db	64
   689  00FEEB  40                 	db	64
   690  00FEEC  3F                 	db	63
   691  00FEED  1F                 	db	31
   692  00FEEE  20                 	db	32
   693  00FEEF  40                 	db	64
   694  00FEF0  20                 	db	32
   695  00FEF1  1F                 	db	31
   696  00FEF2  7F                 	db	127
   697  00FEF3  20                 	db	32
   698  00FEF4  18                 	db	24
   699  00FEF5  20                 	db	32
   700  00FEF6  7F                 	db	127
   701  00FEF7  63                 	db	99
   702  00FEF8  14                 	db	20
   703  00FEF9  08                 	db	8
   704  00FEFA  14                 	db	20
   705  00FEFB  63                 	db	99
   706  00FEFC  03                 	db	3
   707  00FEFD  04                 	db	4
   708  00FEFE  78                 	db	120
   709  00FEFF  04                 	db	4
   710  00FF00  03                 	db	3
   711  00FF01  61                 	db	97
   712  00FF02  51                 	db	81
   713  00FF03  49                 	db	73
   714  00FF04  45                 	db	69
   715  00FF05  43                 	db	67
   716  00FF06  00                 	db	0
   717  00FF07  00                 	db	0
   718  00FF08  7F                 	db	127
   719  00FF09  41                 	db	65
   720  00FF0A  41                 	db	65
   721  00FF0B  02                 	db	2
   722  00FF0C  04                 	db	4
   723  00FF0D  08                 	db	8
   724  00FF0E  10                 	db	16
   725  00FF0F  20                 	db	32
   726  00FF10  41                 	db	65
   727  00FF11  41                 	db	65
   728  00FF12  7F                 	db	127
   729  00FF13  00                 	db	0
   730  00FF14  00                 	db	0
   731  00FF15  04                 	db	4
   732  00FF16  02                 	db	2
   733  00FF17  01                 	db	1
   734  00FF18  02                 	db	2
   735  00FF19  04                 	db	4
   736  00FF1A  40                 	db	64
   737  00FF1B  40                 	db	64
   738  00FF1C  40                 	db	64
   739  00FF1D  40                 	db	64
   740  00FF1E  40                 	db	64
   741  00FF1F  00                 	db	0
   742  00FF20  01                 	db	1
   743  00FF21  02                 	db	2
   744  00FF22  04                 	db	4
   745  00FF23  00                 	db	0
   746  00FF24  20                 	db	32
   747  00FF25  54                 	db	84
   748  00FF26  54                 	db	84
   749  00FF27  54                 	db	84
   750  00FF28  78                 	db	120
   751  00FF29  7F                 	db	127
   752  00FF2A  48                 	db	72
   753  00FF2B  44                 	db	68
   754  00FF2C  44                 	db	68
   755  00FF2D  38                 	db	56
   756  00FF2E  38                 	db	56
   757  00FF2F  44                 	db	68
   758  00FF30  44                 	db	68
   759  00FF31  44                 	db	68
   760  00FF32  20                 	db	32
   761  00FF33  38                 	db	56
   762  00FF34  44                 	db	68
   763  00FF35  44                 	db	68
   764  00FF36  48                 	db	72
   765  00FF37  7F                 	db	127
   766  00FF38  38                 	db	56
   767  00FF39  54                 	db	84
   768  00FF3A  54                 	db	84
   769  00FF3B  54                 	db	84
   770  00FF3C  18                 	db	24
   771  00FF3D  08                 	db	8
   772  00FF3E  7E                 	db	126
   773  00FF3F  09                 	db	9
   774  00FF40  01                 	db	1
   775  00FF41  02                 	db	2
   776  00FF42  08                 	db	8
   777  00FF43  14                 	db	20
   778  00FF44  54                 	db	84
   779  00FF45  54                 	db	84
   780  00FF46  3C                 	db	60
   781  00FF47  7F                 	db	127
   782  00FF48  08                 	db	8
   783  00FF49  04                 	db	4
   784  00FF4A  04                 	db	4
   785  00FF4B  78                 	db	120
   786  00FF4C  00                 	db	0
   787  00FF4D  44                 	db	68
   788  00FF4E  7D                 	db	125
   789  00FF4F  40                 	db	64
   790  00FF50  00                 	db	0
   791  00FF51  20                 	db	32
   792  00FF52  40                 	db	64
   793  00FF53  44                 	db	68
   794  00FF54  3D                 	db	61
   795  00FF55  00                 	db	0
   796  00FF56  00                 	db	0
   797  00FF57  7F                 	db	127
   798  00FF58  10                 	db	16
   799  00FF59  28                 	db	40
   800  00FF5A  44                 	db	68
   801  00FF5B  00                 	db	0
   802  00FF5C  41                 	db	65
   803  00FF5D  7F                 	db	127
   804  00FF5E  40                 	db	64
   805  00FF5F  00                 	db	0
   806  00FF60  7C                 	db	124
   807  00FF61  04                 	db	4
   808  00FF62  18                 	db	24
   809  00FF63  04                 	db	4
   810  00FF64  78                 	db	120
   811  00FF65  7C                 	db	124
   812  00FF66  08                 	db	8
   813  00FF67  04                 	db	4
   814  00FF68  04                 	db	4
   815  00FF69  78                 	db	120
   816  00FF6A  38                 	db	56
   817  00FF6B  44                 	db	68
   818  00FF6C  44                 	db	68
   819  00FF6D  44                 	db	68
   820  00FF6E  38                 	db	56
   821  00FF6F  7C                 	db	124
   822  00FF70  14                 	db	20
   823  00FF71  14                 	db	20
   824  00FF72  14                 	db	20
   825  00FF73  08                 	db	8
   826  00FF74  08                 	db	8
   827  00FF75  14                 	db	20
   828  00FF76  14                 	db	20
   829  00FF77  18                 	db	24
   830  00FF78  7C                 	db	124
   831  00FF79  7C                 	db	124
   832  00FF7A  08                 	db	8
   833  00FF7B  04                 	db	4
   834  00FF7C  04                 	db	4
   835  00FF7D  08                 	db	8
   836  00FF7E  48                 	db	72
   837  00FF7F  54                 	db	84
   838  00FF80  54                 	db	84
   839  00FF81  54                 	db	84
   840  00FF82  20                 	db	32
   841  00FF83  04                 	db	4
   842  00FF84  3F                 	db	63
   843  00FF85  44                 	db	68
   844  00FF86  40                 	db	64
   845  00FF87  20                 	db	32
   846  00FF88  3C                 	db	60
   847  00FF89  40                 	db	64
   848  00FF8A  40                 	db	64
   849  00FF8B  20                 	db	32
   850  00FF8C  7C                 	db	124
   851  00FF8D  1C                 	db	28
   852  00FF8E  20                 	db	32
   853  00FF8F  40                 	db	64
   854  00FF90  20                 	db	32
   855  00FF91  1C                 	db	28
   856  00FF92  3C                 	db	60
   857  00FF93  40                 	db	64
   858  00FF94  30                 	db	48
   859  00FF95  40                 	db	64
   860  00FF96  3C                 	db	60
   861  00FF97  44                 	db	68
   862  00FF98  28                 	db	40
   863  00FF99  10                 	db	16
   864  00FF9A  28                 	db	40
   865  00FF9B  44                 	db	68
   866  00FF9C  0C                 	db	12
   867  00FF9D  50                 	db	80
   868  00FF9E  50                 	db	80
   869  00FF9F  50                 	db	80
   870  00FFA0  3C                 	db	60
   871  00FFA1  44                 	db	68
   872  00FFA2  64                 	db	100
   873  00FFA3  54                 	db	84
   874  00FFA4  4C                 	db	76
   875  00FFA5  44                 	db	68
   876  00FFA6  00                 	db	0
   877  00FFA7  08                 	db	8
   878  00FFA8  36                 	db	54
   879  00FFA9  41                 	db	65
   880  00FFAA  00                 	db	0
   881  00FFAB  00                 	db	0
   882  00FFAC  00                 	db	0
   883  00FFAD  7F                 	db	127
   884  00FFAE  00                 	db	0
   885  00FFAF  00                 	db	0
   886  00FFB0  00                 	db	0
   887  00FFB1  41                 	db	65
   888  00FFB2  36                 	db	54
   889  00FFB3  08                 	db	8
   890  00FFB4  00                 	db	0
   891  00FFB5  08                 	db	8
   892  00FFB6  08                 	db	8
   893  00FFB7  2A                 	db	42
   894  00FFB8  1C                 	db	28
   895  00FFB9  08                 	db	8
   896  00FFBA  08                 	db	8
   897  00FFBB  1C                 	db	28
   898  00FFBC  2A                 	db	42
   899  00FFBD  08                 	db	8
   900  00FFBE  08                 	db	8
   901  00FFBF                     __end_of_Font5x7:
   902                           	opt stack 0
   903  00FFBF                     _PortG_Property:
   904                           	opt stack 0
   905  00FFBF  FC00               	dw	64512
   906  00FFC1                     __end_of_PortG_Property:
   907                           	opt stack 0
   908  00FFC1                     _PortF_Property:
   909                           	opt stack 0
   910  00FFC1  0FFF               	dw	4095
   911  00FFC3                     __end_of_PortF_Property:
   912                           	opt stack 0
   913  00FFC3                     _PortE_Property:
   914                           	opt stack 0
   915  00FFC3  0000               	dw	0
   916  00FFC5                     __end_of_PortE_Property:
   917                           	opt stack 0
   918  00FFC5                     _PortD_Property:
   919                           	opt stack 0
   920  00FFC5  FFFF               	dw	65535
   921  00FFC7                     __end_of_PortD_Property:
   922                           	opt stack 0
   923  00FFC7                     _PortC_Property:
   924                           	opt stack 0
   925  00FFC7  FFF0               	dw	65520
   926  00FFC9                     __end_of_PortC_Property:
   927                           	opt stack 0
   928  00FFC9                     _PortB_Property:
   929                           	opt stack 0
   930  00FFC9  FF00               	dw	65280
   931  00FFCB                     __end_of_PortB_Property:
   932                           	opt stack 0
   933  00FFCB                     _PortA_Property:
   934                           	opt stack 0
   935  00FFCB  00FF               	dw	255
   936  00FFCD                     __end_of_PortA_Property:
   937                           	opt stack 0
   938  0000                     _TMR0	set	4054
   939  0000                     _RCREG1	set	4015
   940  0000                     _TXREG1	set	4014
   941  0000                     _SPBRG1	set	4016
   942  0000                     _TXSTA1bits	set	4013
   943  0000                     _BAUDCON1bits	set	3966
   944  0000                     _RCSTA1	set	4012
   945  0000                     _TXSTA1	set	4013
   946  0000                     _TRISCbits	set	3988
   947  0000                     _PR2	set	4043
   948  0000                     _T2CONbits	set	4042
   949  0000                     _T0CONbits	set	4053
   950  0000                     _RCONbits	set	4048
   951  0000                     _OSCTUNEbits	set	3995
   952  0000                     _PIR3	set	4004
   953  0000                     _PIR2	set	4001
   954  0000                     _PIR1	set	3998
   955  0000                     _INTCONbits	set	4082
   956  0000                     _SSP2CON2bits	set	3947
   957  0000                     _SSP1CON2bits	set	4037
   958  0000                     _SSP1ADD	set	4040
   959  0000                     _ANCON0	set	4033
   960  0000                     _ADRESL	set	4035
   961  0000                     _ADRESH	set	4036
   962  0000                     _ADCON1bits	set	4033
   963  0000                     _ADCON0bits	set	4034
   964  0000                     _SSP2CON1bits	set	3948
   965  0000                     _SSP1CON1bits	set	4038
   966  0000                     _SSP2STATbits	set	3949
   967  0000                     _SSP1STATbits	set	4039
   968  0000                     _PIE3bits	set	4003
   969  0000                     _PIE1bits	set	3997
   970  0000                     _PIR3bits	set	4004
   971  0000                     _PIR1bits	set	3998
   972  0000                     _IPR3bits	set	4005
   973  0000                     _IPR1bits	set	3999
   974  0000                     _PORTFbits	set	3973
   975  0000                     _SSP2CON2	set	3947
   976  0000                     _SSP1CON2	set	4037
   977  0000                     _SSP2BUF	set	3951
   978  0000                     _SSP2CON1	set	3948
   979  0000                     _SSP2STAT	set	3949
   980  0000                     _SSP1BUF	set	4041
   981  0000                     _SSP1CON1	set	4038
   982  0000                     _SSP1STAT	set	4039
   983  0000                     _LATG	set	3983
   984  0000                     _LATF	set	3982
   985  0000                     _LATE	set	3981
   986  0000                     _LATD	set	3980
   987  0000                     _LATC	set	3979
   988  0000                     _LATB	set	3978
   989  0000                     _LATA	set	3977
   990  0000                     _TRISG	set	3992
   991  0000                     _TRISF	set	3991
   992  0000                     _TRISE	set	3990
   993  0000                     _TRISD	set	3989
   994  0000                     _TRISC	set	3988
   995  0000                     _TRISB	set	3987
   996  0000                     _TRISA	set	3986
   997  0000                     _PORTG	set	3974
   998  0000                     _PORTF	set	3973
   999  0000                     _PORTE	set	3972
  1000  0000                     _PORTD	set	3971
  1001  0000                     _PORTC	set	3970
  1002  0000                     _PORTB	set	3969
  1003  0000                     _PORTA	set	3968
  1004  00FFCD                     STR_2:
  1005  00FFCD  54                 	db	84	;'T'
  1006  00FFCE  6F                 	db	111	;'o'
  1007  00FFCF  74                 	db	116	;'t'
  1008  00FFD0  61                 	db	97	;'a'
  1009  00FFD1  6C                 	db	108	;'l'
  1010  00FFD2  20                 	db	32
  1011  00FFD3  44                 	db	68	;'D'
  1012  00FFD4  69                 	db	105	;'i'
  1013  00FFD5  73                 	db	115	;'s'
  1014  00FFD6  74                 	db	116	;'t'
  1015  00FFD7  61                 	db	97	;'a'
  1016  00FFD8  6E                 	db	110	;'n'
  1017  00FFD9  63                 	db	99	;'c'
  1018  00FFDA  65                 	db	101	;'e'
  1019  00FFDB  3A                 	db	58	;':'
  1020  00FFDC  25                 	db	37
  1021  00FFDD  75                 	db	117	;'u'
  1022  00FFDE  0A                 	db	10
  1023  00FFDF  4C                 	db	76	;'L'
  1024  00FFE0  65                 	db	101	;'e'
  1025  00FFE1  66                 	db	102	;'f'
  1026  00FFE2  74                 	db	116	;'t'
  1027  00FFE3  20                 	db	32
  1028  00FFE4  42                 	db	66	;'B'
  1029  00FFE5  75                 	db	117	;'u'
  1030  00FFE6  6D                 	db	109	;'m'
  1031  00FFE7  70                 	db	112	;'p'
  1032  00FFE8  3A                 	db	58	;':'
  1033  00FFE9  25                 	db	37
  1034  00FFEA  75                 	db	117	;'u'
  1035  00FFEB  0A                 	db	10
  1036  00FFEC  52                 	db	82	;'R'
  1037  00FFED  69                 	db	105	;'i'
  1038  00FFEE  67                 	db	103	;'g'
  1039  00FFEF  68                 	db	104	;'h'
  1040  00FFF0  74                 	db	116	;'t'
  1041  00FFF1  20                 	db	32
  1042  00FFF2  42                 	db	66	;'B'
  1043  00FFF3  75                 	db	117	;'u'
  1044  00FFF4  6D                 	db	109	;'m'
  1045  00FFF5  70                 	db	112	;'p'
  1046  00FFF6  3A                 	db	58	;':'
  1047  00FFF7  25                 	db	37
  1048  00FFF8  75                 	db	117	;'u'
  1049  00FFF9  0A                 	db	10
  1050  00FFFA  00                 	db	0
  1051  00FFFB                     STR_1:
  1052  00FFFB  25                 	db	37
  1053  00FFFC  63                 	db	99	;'c'
  1054  00FFFD  00                 	db	0
  1055                           
  1056                           ; #config settings
  1057  00FFFE  00                 	db	0	; dummy byte at the end
  1058  0000                     
  1059                           	psect	cinit
  1060  0126E2                     __pcinit:
  1061                           	opt stack 0
  1062  0126E2                     start_initialization:
  1063                           	opt stack 0
  1064  0126E2                     __initialization:
  1065                           	opt stack 0
  1066                           
  1067                           ; Initialize objects allocated to BANK3 (8 bytes)
  1068                           ; load TBLPTR registers with __pidataBANK3
  1069  0126E2  0E3C               	movlw	low __pidataBANK3
  1070  0126E4  6EF6               	movwf	tblptrl,c
  1071  0126E6  0E40               	movlw	high __pidataBANK3
  1072  0126E8  6EF7               	movwf	tblptrh,c
  1073  0126EA  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1074  0126EC  6EF8               	movwf	tblptru,c
  1075  0126EE  EE03  F0D5         	lfsr	0,__pdataBANK3
  1076  0126F2  EE10 F008          	lfsr	1,8
  1077  0126F6                     copy_data0:
  1078  0126F6  0009               	tblrd		*+
  1079  0126F8  CFF5 FFEE          	movff	tablat,postinc0
  1080  0126FC  50E5               	movf	postdec1,w,c
  1081  0126FE  50E1               	movf	fsr1l,w,c
  1082  012700  E1FA               	bnz	copy_data0
  1083                           
  1084                           ; Initialize objects allocated to BANK0 (7 bytes)
  1085                           ; load TBLPTR registers with __pidataBANK0
  1086  012702  0E54               	movlw	low __pidataBANK0
  1087  012704  6EF6               	movwf	tblptrl,c
  1088  012706  0E40               	movlw	high __pidataBANK0
  1089  012708  6EF7               	movwf	tblptrh,c
  1090  01270A  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1091  01270C  6EF8               	movwf	tblptru,c
  1092  01270E  EE00  F0F9         	lfsr	0,__pdataBANK0
  1093  012712  EE10 F007          	lfsr	1,7
  1094  012716                     copy_data1:
  1095  012716  0009               	tblrd		*+
  1096  012718  CFF5 FFEE          	movff	tablat,postinc0
  1097  01271C  50E5               	movf	postdec1,w,c
  1098  01271E  50E1               	movf	fsr1l,w,c
  1099  012720  E1FA               	bnz	copy_data1
  1100                           
  1101                           ; Initialize objects allocated to COMRAM (10 bytes)
  1102                           ; load TBLPTR registers with __pidataCOMRAM
  1103  012722  0E32               	movlw	low __pidataCOMRAM
  1104  012724  6EF6               	movwf	tblptrl,c
  1105  012726  0E40               	movlw	high __pidataCOMRAM
  1106  012728  6EF7               	movwf	tblptrh,c
  1107  01272A  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1108  01272C  6EF8               	movwf	tblptru,c
  1109  01272E  EE00  F047         	lfsr	0,__pdataCOMRAM
  1110  012732  EE10 F00A          	lfsr	1,10
  1111  012736                     copy_data2:
  1112  012736  0009               	tblrd		*+
  1113  012738  CFF5 FFEE          	movff	tablat,postinc0
  1114  01273C  50E5               	movf	postdec1,w,c
  1115  01273E  50E1               	movf	fsr1l,w,c
  1116  012740  E1FA               	bnz	copy_data2
  1117                           
  1118                           ; Clear objects allocated to BIGRAM (300 bytes)
  1119  012742  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1120  012746  EE11 F02C          	lfsr	1,300
  1121  01274A                     clear_0:
  1122  01274A  6AEE               	clrf	postinc0,c
  1123  01274C  50E5               	movf	postdec1,w,c
  1124  01274E  50E1               	movf	fsr1l,w,c
  1125  012750  E1FC               	bnz	clear_0
  1126  012752  50E2               	movf	fsr1h,w,c
  1127  012754  E1FA               	bnz	clear_0
  1128                           
  1129                           ; Clear objects allocated to BANK4 (170 bytes)
  1130  012756  EE04  F000         	lfsr	0,__pbssBANK4
  1131  01275A  0EAA               	movlw	170
  1132  01275C                     clear_1:
  1133  01275C  6AEE               	clrf	postinc0,c
  1134  01275E  06E8               	decf	wreg,f,c
  1135  012760  E1FD               	bnz	clear_1
  1136                           
  1137                           ; Clear objects allocated to BANK3 (213 bytes)
  1138  012762  EE03  F000         	lfsr	0,__pbssBANK3
  1139  012766  0ED5               	movlw	213
  1140  012768                     clear_2:
  1141  012768  6AEE               	clrf	postinc0,c
  1142  01276A  06E8               	decf	wreg,f,c
  1143  01276C  E1FD               	bnz	clear_2
  1144                           
  1145                           ; Clear objects allocated to BANK0 (85 bytes)
  1146  01276E  EE00  F060         	lfsr	0,__pbssBANK0
  1147  012772  0E55               	movlw	85
  1148  012774                     clear_3:
  1149  012774  6AEE               	clrf	postinc0,c
  1150  012776  06E8               	decf	wreg,f,c
  1151  012778  E1FD               	bnz	clear_3
  1152                           
  1153                           ; Clear objects allocated to COMRAM (30 bytes)
  1154  01277A  EE00  F029         	lfsr	0,__pbssCOMRAM
  1155  01277E  0E1E               	movlw	30
  1156  012780                     clear_4:
  1157  012780  6AEE               	clrf	postinc0,c
  1158  012782  06E8               	decf	wreg,f,c
  1159  012784  E1FD               	bnz	clear_4
  1160  012786                     end_of_initialization:
  1161                           	opt stack 0
  1162  012786                     __end_of__initialization:
  1163                           	opt stack 0
  1164  012786  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1165  012788  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1166  01278A  0100               	movlb	0
  1167  01278C  EF4B  F08E         	goto	_main	;jump to C main() function
  1168                           tblptru	equ	0xFF8
  1169                           tblptrh	equ	0xFF7
  1170                           tblptrl	equ	0xFF6
  1171                           tablat	equ	0xFF5
  1172                           postinc0	equ	0xFEE
  1173                           wreg	equ	0xFE8
  1174                           postdec1	equ	0xFE5
  1175                           fsr1h	equ	0xFE2
  1176                           fsr1l	equ	0xFE1
  1177                           
  1178                           	psect	bssCOMRAM
  1179  000029                     __pbssCOMRAM:
  1180                           	opt stack 0
  1181  000029                     _COUNTER:
  1182                           	opt stack 0
  1183  000029                     	ds	2
  1184  00002B                     HMI_GRender@a:
  1185                           	opt stack 0
  1186  00002B                     	ds	2
  1187  00002D                     _iRDropRight:
  1188                           	opt stack 0
  1189  00002D                     	ds	1
  1190  00002E                     _iRVirtualWall:
  1191                           	opt stack 0
  1192  00002E                     	ds	1
  1193  00002F                     _iRCliffR:
  1194                           	opt stack 0
  1195  00002F                     	ds	1
  1196  000030                     _iRCliffFR:
  1197                           	opt stack 0
  1198  000030                     	ds	1
  1199  000031                     _iRCliffFL:
  1200                           	opt stack 0
  1201  000031                     	ds	1
  1202  000032                     _iRCliffL:
  1203                           	opt stack 0
  1204  000032                     	ds	1
  1205  000033                     _iRWall:
  1206                           	opt stack 0
  1207  000033                     	ds	1
  1208  000034                     _iRBumpDrop:
  1209                           	opt stack 0
  1210  000034                     	ds	1
  1211  000035                     _iRScriptIndex:
  1212                           	opt stack 0
  1213  000035                     	ds	1
  1214  000036                     _u:
  1215                           	opt stack 0
  1216  000036                     	ds	1
  1217  000037                     _j:
  1218                           	opt stack 0
  1219  000037                     	ds	1
  1220  000038                     _i:
  1221                           	opt stack 0
  1222  000038                     	ds	1
  1223  000039                     Timer0_Init@PRE:
  1224                           	opt stack 0
  1225  000039                     	ds	1
  1226  00003A                     _INDEX:
  1227                           	opt stack 0
  1228  00003A                     	ds	1
  1229  00003B                     rand@screw:
  1230                           	opt stack 0
  1231  00003B                     	ds	1
  1232  00003C                     _ADC_Initialised:
  1233                           	opt stack 0
  1234  00003C                     	ds	1
  1235  00003D                     OutSeg@a:
  1236                           	opt stack 0
  1237  00003D                     	ds	1
  1238  00003E                     OutSeg@segset:
  1239                           	opt stack 0
  1240  00003E                     	ds	1
  1241  00003F                     OutSeg@cur:
  1242                           	opt stack 0
  1243  00003F                     	ds	1
  1244  000040                     _I2C1T:
  1245                           	opt stack 0
  1246  000040                     	ds	7
  1247                           tblptru	equ	0xFF8
  1248                           tblptrh	equ	0xFF7
  1249                           tblptrl	equ	0xFF6
  1250                           tablat	equ	0xFF5
  1251                           postinc0	equ	0xFEE
  1252                           wreg	equ	0xFE8
  1253                           postdec1	equ	0xFE5
  1254                           fsr1h	equ	0xFE2
  1255                           fsr1l	equ	0xFE1
  1256                           
  1257                           	psect	dataCOMRAM
  1258  000047                     __pdataCOMRAM:
  1259                           	opt stack 0
  1260  000047                     _gCursor:
  1261                           	opt stack 0
  1262  000047                     	ds	4
  1263  00004B                     _Bus_State:
  1264                           	opt stack 0
  1265  00004B                     	ds	1
  1266  00004C                     	ds	1
  1267  00004D                     	ds	1
  1268  00004E                     	ds	1
  1269  00004F                     _l:
  1270                           	opt stack 0
  1271  00004F                     	ds	1
  1272  000050                     _w:
  1273                           	opt stack 0
  1274  000050                     	ds	1
  1275                           tblptru	equ	0xFF8
  1276                           tblptrh	equ	0xFF7
  1277                           tblptrl	equ	0xFF6
  1278                           tablat	equ	0xFF5
  1279                           postinc0	equ	0xFEE
  1280                           wreg	equ	0xFE8
  1281                           postdec1	equ	0xFE5
  1282                           fsr1h	equ	0xFE2
  1283                           fsr1l	equ	0xFE1
  1284                           
  1285                           	psect	bssBANK0
  1286  000060                     __pbssBANK0:
  1287                           	opt stack 0
  1288  000060                     _iRAngleSS:
  1289                           	opt stack 0
  1290  000060                     	ds	4
  1291  000064                     _iRDistanceSS:
  1292                           	opt stack 0
  1293  000064                     	ds	4
  1294  000068                     Timer0_Init@DIV:
  1295                           	opt stack 0
  1296  000068                     	ds	4
  1297  00006C                     _gISR:
  1298                           	opt stack 0
  1299  00006C                     	ds	3
  1300  00006F                     _lQueue:
  1301                           	opt stack 0
  1302  00006F                     	ds	3
  1303  000072                     _lStepFunction:
  1304                           	opt stack 0
  1305  000072                     	ds	3
  1306  000075                     _iRDistance:
  1307                           	opt stack 0
  1308  000075                     	ds	2
  1309  000077                     _iRAngle:
  1310                           	opt stack 0
  1311  000077                     	ds	2
  1312  000079                     _pShiftVal:
  1313                           	opt stack 0
  1314  000079                     	ds	2
  1315  00007B                     _val:
  1316                           	opt stack 0
  1317  00007B                     	ds	2
  1318  00007D                     _lMotor:
  1319                           	opt stack 0
  1320  00007D                     	ds	2
  1321  00007F                     _lCurrent:
  1322                           	opt stack 0
  1323  00007F                     	ds	2
  1324  000081                     _gBackcolour:
  1325                           	opt stack 0
  1326  000081                     	ds	2
  1327  000083                     SPI_Send9@dat:
  1328                           	opt stack 0
  1329  000083                     	ds	2
  1330  000085                     _iRDropCaster:
  1331                           	opt stack 0
  1332  000085                     	ds	1
  1333  000086                     _iRDropLeft:
  1334                           	opt stack 0
  1335  000086                     	ds	1
  1336  000087                     _iRBumpRight:
  1337                           	opt stack 0
  1338  000087                     	ds	1
  1339  000088                     _iRBumpLeft:
  1340                           	opt stack 0
  1341  000088                     	ds	1
  1342  000089                     Event_TestButton@j:
  1343                           	opt stack 0
  1344  000089                     	ds	1
  1345  00008A                     Timer2_Init@PRE:
  1346                           	opt stack 0
  1347  00008A                     	ds	1
  1348  00008B                     Timer2_Init@INDEX:
  1349                           	opt stack 0
  1350  00008B                     	ds	1
  1351  00008C                     _lBufferY:
  1352                           	opt stack 0
  1353  00008C                     	ds	1
  1354  00008D                     _lBufferX:
  1355                           	opt stack 0
  1356  00008D                     	ds	1
  1357  00008E                     _clearall:
  1358                           	opt stack 0
  1359  00008E                     	ds	1
  1360  00008F                     _PortE:
  1361                           	opt stack 0
  1362  00008F                     	ds	10
  1363  000099                     _PortD:
  1364                           	opt stack 0
  1365  000099                     	ds	10
  1366  0000A3                     _PortC:
  1367                           	opt stack 0
  1368  0000A3                     	ds	10
  1369  0000AD                     LCD_DrawRectangle@p4:
  1370                           	opt stack 0
  1371  0000AD                     	ds	4
  1372  0000B1                     LCD_DrawRectangle@p2:
  1373                           	opt stack 0
  1374  0000B1                     	ds	4
  1375                           tblptru	equ	0xFF8
  1376                           tblptrh	equ	0xFF7
  1377                           tblptrl	equ	0xFF6
  1378                           tablat	equ	0xFF5
  1379                           postinc0	equ	0xFEE
  1380                           wreg	equ	0xFE8
  1381                           postdec1	equ	0xFE5
  1382                           fsr1h	equ	0xFE2
  1383                           fsr1l	equ	0xFE1
  1384                           
  1385                           	psect	dataBANK0
  1386  0000F9                     __pdataBANK0:
  1387                           	opt stack 0
  1388  0000F9                     _gCharSize:
  1389                           	opt stack 0
  1390  0000F9                     	ds	4
  1391  0000FD                     _gForecolour:
  1392                           	opt stack 0
  1393  0000FD                     	ds	2
  1394  0000FF                     _change:
  1395                           	opt stack 0
  1396  0000FF                     	ds	1
  1397                           tblptru	equ	0xFF8
  1398                           tblptrh	equ	0xFF7
  1399                           tblptrl	equ	0xFF6
  1400                           tablat	equ	0xFF5
  1401                           postinc0	equ	0xFEE
  1402                           wreg	equ	0xFE8
  1403                           postdec1	equ	0xFE5
  1404                           fsr1h	equ	0xFE2
  1405                           fsr1l	equ	0xFE1
  1406                           
  1407                           	psect	bssBANK3
  1408  000300                     __pbssBANK3:
  1409                           	opt stack 0
  1410  000300                     _lCBuffer:
  1411                           	opt stack 0
  1412  000300                     	ds	30
  1413  00031E                     Timer2_Init@DIV:
  1414                           	opt stack 0
  1415  00031E                     	ds	4
  1416  000322                     _I2C2_More:
  1417                           	opt stack 0
  1418  000322                     	ds	3
  1419  000325                     _I2C1_More:
  1420                           	opt stack 0
  1421  000325                     	ds	3
  1422  000328                     _I2C2_Done:
  1423                           	opt stack 0
  1424  000328                     	ds	3
  1425  00032B                     _I2C1_Done:
  1426                           	opt stack 0
  1427  00032B                     	ds	3
  1428  00032E                     _HMIBoard:
  1429                           	opt stack 0
  1430  00032E                     	ds	58
  1431  000368                     _SPI1:
  1432                           	opt stack 0
  1433  000368                     	ds	11
  1434  000373                     _SPI2:
  1435                           	opt stack 0
  1436  000373                     	ds	11
  1437  00037E                     _DIPSwitch:
  1438                           	opt stack 0
  1439  00037E                     	ds	10
  1440  000388                     _TestButton:
  1441                           	opt stack 0
  1442  000388                     	ds	10
  1443  000392                     _PortG:
  1444                           	opt stack 0
  1445  000392                     	ds	10
  1446  00039C                     _PortB:
  1447                           	opt stack 0
  1448  00039C                     	ds	10
  1449  0003A6                     _PortA:
  1450                           	opt stack 0
  1451  0003A6                     	ds	10
  1452  0003B0                     _PortF:
  1453                           	opt stack 0
  1454  0003B0                     	ds	10
  1455  0003BA                     _I2C2T:
  1456                           	opt stack 0
  1457  0003BA                     	ds	7
  1458  0003C1                     _ADC_AN3:
  1459                           	opt stack 0
  1460  0003C1                     	ds	5
  1461  0003C6                     _ADC_AN2:
  1462                           	opt stack 0
  1463  0003C6                     	ds	5
  1464  0003CB                     _ADC_AN1:
  1465                           	opt stack 0
  1466  0003CB                     	ds	5
  1467  0003D0                     _ADC_AN0:
  1468                           	opt stack 0
  1469  0003D0                     	ds	5
  1470                           tblptru	equ	0xFF8
  1471                           tblptrh	equ	0xFF7
  1472                           tblptrl	equ	0xFF6
  1473                           tablat	equ	0xFF5
  1474                           postinc0	equ	0xFEE
  1475                           wreg	equ	0xFE8
  1476                           postdec1	equ	0xFE5
  1477                           fsr1h	equ	0xFE2
  1478                           fsr1l	equ	0xFE1
  1479                           
  1480                           	psect	dataBANK3
  1481  0003D5                     __pdataBANK3:
  1482                           	opt stack 0
  1483  0003D5                     Console_Render@F6956:
  1484                           	opt stack 0
  1485  0003D5                     	ds	4
  1486  0003D9                     _gLineSize:
  1487                           	opt stack 0
  1488  0003D9                     	ds	4
  1489                           tblptru	equ	0xFF8
  1490                           tblptrh	equ	0xFF7
  1491                           tblptrl	equ	0xFF6
  1492                           tablat	equ	0xFF5
  1493                           postinc0	equ	0xFEE
  1494                           wreg	equ	0xFE8
  1495                           postdec1	equ	0xFE5
  1496                           fsr1h	equ	0xFE2
  1497                           fsr1l	equ	0xFE1
  1498                           
  1499                           	psect	bssBANK4
  1500  000400                     __pbssBANK4:
  1501                           	opt stack 0
  1502  000400                     _iRScriptStack:
  1503                           	opt stack 0
  1504  000400                     	ds	100
  1505  000464                     Console_MakeField@Fill:
  1506                           	opt stack 0
  1507  000464                     	ds	70
  1508                           tblptru	equ	0xFF8
  1509                           tblptrh	equ	0xFF7
  1510                           tblptrl	equ	0xFF6
  1511                           tablat	equ	0xFF5
  1512                           postinc0	equ	0xFEE
  1513                           wreg	equ	0xFE8
  1514                           postdec1	equ	0xFE5
  1515                           fsr1h	equ	0xFE2
  1516                           fsr1l	equ	0xFE1
  1517                           
  1518                           	psect	bssBIGRAM
  1519  0004AA                     __pbssBIGRAM:
  1520                           	opt stack 0
  1521  0004AA                     _lBuffer:
  1522                           	opt stack 0
  1523  0004AA                     	ds	300
  1524                           tblptru	equ	0xFF8
  1525                           tblptrh	equ	0xFF7
  1526                           tblptrl	equ	0xFF6
  1527                           tablat	equ	0xFF5
  1528                           postinc0	equ	0xFEE
  1529                           wreg	equ	0xFE8
  1530                           postdec1	equ	0xFE5
  1531                           fsr1h	equ	0xFE2
  1532                           fsr1l	equ	0xFE1
  1533                           
  1534                           	psect	cstackBANK3
  1535  0003DD                     __pcstackBANK3:
  1536                           	opt stack 0
  1537  0003DD                     main@distanceTotal:
  1538                           	opt stack 0
  1539                           
  1540                           ; 2 bytes @ 0x0
  1541  0003DD                     	ds	2
  1542  0003DF                     main@angleTotal:
  1543                           	opt stack 0
  1544                           
  1545                           ; 2 bytes @ 0x2
  1546  0003DF                     	ds	2
  1547                           tblptru	equ	0xFF8
  1548                           tblptrh	equ	0xFF7
  1549                           tblptrl	equ	0xFF6
  1550                           tablat	equ	0xFF5
  1551                           postinc0	equ	0xFEE
  1552                           wreg	equ	0xFE8
  1553                           postdec1	equ	0xFE5
  1554                           fsr1h	equ	0xFE2
  1555                           fsr1l	equ	0xFE1
  1556                           
  1557                           	psect	cstackBANK2
  1558  000200                     __pcstackBANK2:
  1559                           	opt stack 0
  1560  000200                     irobot_query_and_update@TXArray:
  1561                           	opt stack 0
  1562                           
  1563                           ; 256 bytes @ 0x0
  1564  000200                     	ds	256
  1565                           tblptru	equ	0xFF8
  1566                           tblptrh	equ	0xFF7
  1567                           tblptrl	equ	0xFF6
  1568                           tablat	equ	0xFF5
  1569                           postinc0	equ	0xFEE
  1570                           wreg	equ	0xFE8
  1571                           postdec1	equ	0xFE5
  1572                           fsr1h	equ	0xFE2
  1573                           fsr1l	equ	0xFE1
  1574                           
  1575                           	psect	cstackBANK1
  1576  000100                     __pcstackBANK1:
  1577                           	opt stack 0
  1578  000100                     ??_Port_Init:
  1579  000100                     Button_Init@pInput:
  1580                           	opt stack 0
  1581  000100                     irobot_query_and_update@RXArray:
  1582                           	opt stack 0
  1583                           
  1584                           ; 256 bytes @ 0x0
  1585  000100                     	ds	2
  1586  000102                     Button_Init@pThreshold:
  1587                           	opt stack 0
  1588                           
  1589                           ; 2 bytes @ 0x2
  1590  000102                     	ds	2
  1591  000104                     Button_Init@pInitIO:
  1592                           	opt stack 0
  1593                           
  1594                           ; 3 bytes @ 0x4
  1595  000104                     	ds	3
  1596  000107                     Button_Init@pGetState:
  1597                           	opt stack 0
  1598                           
  1599                           ; 3 bytes @ 0x7
  1600  000107                     	ds	3
  1601  00010A                     Button_Init@pFunction:
  1602                           	opt stack 0
  1603                           
  1604                           ; 3 bytes @ 0xA
  1605  00010A                     	ds	246
  1606                           tblptru	equ	0xFF8
  1607                           tblptrh	equ	0xFF7
  1608                           tblptrl	equ	0xFF6
  1609                           tablat	equ	0xFF5
  1610                           postinc0	equ	0xFEE
  1611                           wreg	equ	0xFE8
  1612                           postdec1	equ	0xFE5
  1613                           fsr1h	equ	0xFE2
  1614                           fsr1l	equ	0xFE1
  1615                           
  1616                           	psect	cstackBANK0
  1617  0000B5                     __pcstackBANK0:
  1618                           	opt stack 0
  1619  0000B5                     ??_Console_ClearCursor:
  1620  0000B5                     ??_sort_iRBumpDrop:
  1621  0000B5                     ?_load_iRScriptStack:
  1622                           	opt stack 0
  1623  0000B5                     ??_Console_Init:
  1624  0000B5                     ??_Console_NewLine:
  1625  0000B5                     ??_Console_FormFeed:
  1626  0000B5                     ?_GetPortProperties:
  1627                           	opt stack 0
  1628  0000B5                     ?_GetPortPORT:
  1629                           	opt stack 0
  1630  0000B5                     ?_GetPortTRIS:
  1631                           	opt stack 0
  1632  0000B5                     ?_twos_complement_of:
  1633                           	opt stack 0
  1634  0000B5                     ?___wmul:
  1635                           	opt stack 0
  1636  0000B5                     ?___awdiv:
  1637                           	opt stack 0
  1638  0000B5                     ?___lwdiv:
  1639                           	opt stack 0
  1640  0000B5                     ?___lldiv:
  1641                           	opt stack 0
  1642  0000B5                     Mode_Set@pMode:
  1643                           	opt stack 0
  1644  0000B5                     get_packet_size@packetID:
  1645                           	opt stack 0
  1646  0000B5                     eusart_putch@eusartSendChar:
  1647                           	opt stack 0
  1648  0000B5                     Port_GetPin@pInput:
  1649                           	opt stack 0
  1650  0000B5                     SPI_DisableISR@pInput:
  1651                           	opt stack 0
  1652  0000B5                     SPI_DCS@pInput:
  1653                           	opt stack 0
  1654  0000B5                     SPI_Send@pInput:
  1655                           	opt stack 0
  1656  0000B5                     Byte_SetBit@pInput:
  1657                           	opt stack 0
  1658  0000B5                     Byte_GetBit@pInput:
  1659                           	opt stack 0
  1660  0000B5                     Byte_SetZone@pInput:
  1661                           	opt stack 0
  1662  0000B5                     Byte_GetZone@pInput:
  1663                           	opt stack 0
  1664  0000B5                     Byte_SetByte@pInput:
  1665                           	opt stack 0
  1666  0000B5                     delay_ms@ms:
  1667                           	opt stack 0
  1668  0000B5                     delay_us@us:
  1669                           	opt stack 0
  1670  0000B5                     twos_complement_of@complementValue:
  1671                           	opt stack 0
  1672  0000B5                     ___wmul@multiplier:
  1673                           	opt stack 0
  1674  0000B5                     ___awdiv@dividend:
  1675                           	opt stack 0
  1676  0000B5                     ___lwdiv@dividend:
  1677                           	opt stack 0
  1678  0000B5                     MXK_Queue@pCallback:
  1679                           	opt stack 0
  1680  0000B5                     ___lldiv@dividend:
  1681                           	opt stack 0
  1682                           
  1683                           ; 4 bytes @ 0x0
  1684  0000B5                     	ds	1
  1685  0000B6                     rx_assign@packetIDValue:
  1686                           	opt stack 0
  1687  0000B6                     irobot_song_play@songNumber:
  1688                           	opt stack 0
  1689                           
  1690                           ; 1 bytes @ 0x1
  1691  0000B6                     	ds	1
  1692  0000B7                     GetPortProperties@pInput:
  1693                           	opt stack 0
  1694  0000B7                     GetPortPORT@pInput:
  1695                           	opt stack 0
  1696  0000B7                     GetPortTRIS@pInput:
  1697                           	opt stack 0
  1698  0000B7                     Port_GetPin@pPin:
  1699                           	opt stack 0
  1700  0000B7                     SPI_Send@pData:
  1701                           	opt stack 0
  1702  0000B7                     Byte_SetBit@pBit:
  1703                           	opt stack 0
  1704  0000B7                     Byte_GetBit@pBit:
  1705                           	opt stack 0
  1706  0000B7                     Byte_SetZone@pMax:
  1707                           	opt stack 0
  1708  0000B7                     Byte_GetZone@pMax:
  1709                           	opt stack 0
  1710  0000B7                     Byte_SetByte@pValue:
  1711                           	opt stack 0
  1712  0000B7                     Console_Init@x:
  1713                           	opt stack 0
  1714  0000B7                     Console_FormFeed@x:
  1715                           	opt stack 0
  1716  0000B7                     rx_assign@byteNumber:
  1717                           	opt stack 0
  1718  0000B7                     ___wmul@multiplicand:
  1719                           	opt stack 0
  1720  0000B7                     ___awdiv@divisor:
  1721                           	opt stack 0
  1722  0000B7                     ___lwdiv@divisor:
  1723                           	opt stack 0
  1724  0000B7                     delay_ms@u:
  1725                           	opt stack 0
  1726  0000B7                     delay_us@u:
  1727                           	opt stack 0
  1728                           
  1729                           ; 4 bytes @ 0x2
  1730  0000B7                     	ds	1
  1731  0000B8                     ??_Port_GetPin:
  1732  0000B8                     ??_Byte_GetBit:
  1733  0000B8                     ??_rx_assign:
  1734  0000B8                     LCD_Write@mode:
  1735                           	opt stack 0
  1736  0000B8                     Byte_SetBit@pValue:
  1737                           	opt stack 0
  1738  0000B8                     Byte_SetZone@pChunk:
  1739                           	opt stack 0
  1740  0000B8                     Byte_GetZone@pChunk:
  1741                           	opt stack 0
  1742  0000B8                     Console_Init@y:
  1743                           	opt stack 0
  1744  0000B8                     Console_FormFeed@y:
  1745                           	opt stack 0
  1746                           
  1747                           ; 1 bytes @ 0x3
  1748  0000B8                     	ds	1
  1749  0000B9                     ??_Byte_SetBit:
  1750  0000B9                     ??_Console_IncrementCursor:
  1751  0000B9                     LCD_Write@value:
  1752                           	opt stack 0
  1753  0000B9                     Byte_GetBit@Output:
  1754                           	opt stack 0
  1755  0000B9                     Byte_SetZone@pChunkSize:
  1756                           	opt stack 0
  1757  0000B9                     Byte_GetZone@pChunkSize:
  1758                           	opt stack 0
  1759  0000B9                     ___awdiv@counter:
  1760                           	opt stack 0
  1761  0000B9                     ___lwdiv@counter:
  1762                           	opt stack 0
  1763  0000B9                     ___wmul@product:
  1764                           	opt stack 0
  1765  0000B9                     ___lldiv@divisor:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x4
  1769  0000B9                     	ds	1
  1770  0000BA                     ??_Byte_GetZone:
  1771  0000BA                     ?_Console_MakeField:
  1772                           	opt stack 0
  1773  0000BA                     Set_Addr_Window@ys:
  1774                           	opt stack 0
  1775  0000BA                     Set_Rotation@m:
  1776                           	opt stack 0
  1777  0000BA                     Port_GetPin@Output:
  1778                           	opt stack 0
  1779  0000BA                     Byte_SetZone@pValue:
  1780                           	opt stack 0
  1781  0000BA                     rx_assign@packetID:
  1782                           	opt stack 0
  1783  0000BA                     ___awdiv@sign:
  1784                           	opt stack 0
  1785  0000BA                     LCD_Word_Write@value:
  1786                           	opt stack 0
  1787  0000BA                     ___lwdiv@quotient:
  1788                           	opt stack 0
  1789                           
  1790                           ; 2 bytes @ 0x5
  1791  0000BA                     	ds	1
  1792  0000BB                     ?_irobot_query_and_update:
  1793                           	opt stack 0
  1794  0000BB                     ??_Byte_SetZone:
  1795  0000BB                     Set_Addr_Window@xe:
  1796                           	opt stack 0
  1797  0000BB                     Set_Rotation@rotation:
  1798                           	opt stack 0
  1799  0000BB                     Byte_GetZone@MASK:
  1800                           	opt stack 0
  1801  0000BB                     MXK_BlockSwitchTo@CUR:
  1802                           	opt stack 0
  1803  0000BB                     MXK_SwitchTo@CUR:
  1804                           	opt stack 0
  1805  0000BB                     ___awdiv@quotient:
  1806                           	opt stack 0
  1807                           
  1808                           ; 2 bytes @ 0x6
  1809  0000BB                     	ds	1
  1810  0000BC                     ??_Console_MakeField:
  1811  0000BC                     ?___lwmod:
  1812                           	opt stack 0
  1813  0000BC                     Set_Addr_Window@ye:
  1814                           	opt stack 0
  1815  0000BC                     Byte_GetZone@Offset:
  1816                           	opt stack 0
  1817  0000BC                     MXK_BlockSwitchTo@pModule:
  1818                           	opt stack 0
  1819  0000BC                     MXK_SwitchTo@pModule:
  1820                           	opt stack 0
  1821  0000BC                     ___lwmod@dividend:
  1822                           	opt stack 0
  1823                           
  1824                           ; 2 bytes @ 0x7
  1825  0000BC                     	ds	1
  1826  0000BD                     ??_Console_Tab:
  1827  0000BD                     Set_Addr_Window@xs:
  1828                           	opt stack 0
  1829  0000BD                     Byte_GetZone@Output:
  1830                           	opt stack 0
  1831  0000BD                     ___lldiv@quotient:
  1832                           	opt stack 0
  1833                           
  1834                           ; 4 bytes @ 0x8
  1835  0000BD                     	ds	1
  1836  0000BE                     Byte_SetZone@Offset:
  1837                           	opt stack 0
  1838  0000BE                     LCD_Fill@pColour:
  1839                           	opt stack 0
  1840  0000BE                     LCD_FillRectangle@pColour:
  1841                           	opt stack 0
  1842  0000BE                     Byte_GetPair@pInput:
  1843                           	opt stack 0
  1844  0000BE                     Console_MakeField@Index:
  1845                           	opt stack 0
  1846  0000BE                     ___lwmod@divisor:
  1847                           	opt stack 0
  1848                           
  1849                           ; 2 bytes @ 0x9
  1850  0000BE                     	ds	1
  1851  0000BF                     ??_load_iRScriptStack:
  1852  0000BF                     Byte_SetZone@MASK:
  1853                           	opt stack 0
  1854                           
  1855                           ; 1 bytes @ 0xA
  1856  0000BF                     	ds	1
  1857  0000C0                     LCD_Fill@i:
  1858                           	opt stack 0
  1859  0000C0                     Byte_GetPair@pPair:
  1860                           	opt stack 0
  1861  0000C0                     Console_MakeField@pInput:
  1862                           	opt stack 0
  1863  0000C0                     ___lwmod@counter:
  1864                           	opt stack 0
  1865  0000C0                     Byte_SetPair@pInput:
  1866                           	opt stack 0
  1867  0000C0                     Byte_SetQuad@pInput:
  1868                           	opt stack 0
  1869  0000C0                     LCD_FillRectangle@pPoint:
  1870                           	opt stack 0
  1871                           
  1872                           ; 4 bytes @ 0xB
  1873  0000C0                     	ds	1
  1874  0000C1                     LCD_Fill@j:
  1875                           	opt stack 0
  1876  0000C1                     ___lldiv@counter:
  1877                           	opt stack 0
  1878  0000C1                     Word_GetPair@pInput:
  1879                           	opt stack 0
  1880  0000C1                     Console_MakeField@Column:
  1881                           	opt stack 0
  1882  0000C1                     load_iRScriptStack@loadByte:
  1883                           	opt stack 0
  1884                           
  1885                           ; 2 bytes @ 0xC
  1886  0000C1                     	ds	1
  1887  0000C2                     Byte_SetPair@pPair:
  1888                           	opt stack 0
  1889  0000C2                     Byte_SetQuad@pQuad:
  1890                           	opt stack 0
  1891  0000C2                     Console_Tab@t:
  1892                           	opt stack 0
  1893  0000C2                     Timer2_Init@pFrequency:
  1894                           	opt stack 0
  1895                           
  1896                           ; 4 bytes @ 0xD
  1897  0000C2                     	ds	1
  1898  0000C3                     Byte_SetPair@pValue:
  1899                           	opt stack 0
  1900  0000C3                     Byte_SetQuad@pValue:
  1901                           	opt stack 0
  1902  0000C3                     Word_GetPair@pPair:
  1903                           	opt stack 0
  1904  0000C3                     Console_Tab@i:
  1905                           	opt stack 0
  1906  0000C3                     load_iRScriptStack@bytesToLoad:
  1907                           	opt stack 0
  1908  0000C3                     _Console_MakeField$10974:
  1909                           	opt stack 0
  1910                           
  1911                           ; 2 bytes @ 0xE
  1912  0000C3                     	ds	1
  1913  0000C4                     Console_Tab@c:
  1914                           	opt stack 0
  1915  0000C4                     load_iRScriptStack@i:
  1916                           	opt stack 0
  1917  0000C4                     Port_SetPin@pInput:
  1918                           	opt stack 0
  1919  0000C4                     Port_Set@pInput:
  1920                           	opt stack 0
  1921  0000C4                     SPI_MinSpeed@pInput:
  1922                           	opt stack 0
  1923  0000C4                     SPI_MaxSpeed@pInput:
  1924                           	opt stack 0
  1925  0000C4                     Word_SetPair@pInput:
  1926                           	opt stack 0
  1927  0000C4                     PortProperty_Valid@pInput:
  1928                           	opt stack 0
  1929  0000C4                     LCD_FillRectangle@pSize:
  1930                           	opt stack 0
  1931                           
  1932                           ; 4 bytes @ 0xF
  1933  0000C4                     	ds	1
  1934  0000C5                     ??_irobot_query_and_update:
  1935  0000C5                     ??_Console_PrintChar:
  1936  0000C5                     Console_MakeField@x:
  1937                           	opt stack 0
  1938  0000C5                     irobot_leds@LEDBit:
  1939                           	opt stack 0
  1940  0000C5                     irobot_move@moveSpeed:
  1941                           	opt stack 0
  1942                           
  1943                           ; 2 bytes @ 0x10
  1944  0000C5                     	ds	1
  1945  0000C6                     ??_Timer2_Init:
  1946  0000C6                     Port_SetPin@pPin:
  1947                           	opt stack 0
  1948  0000C6                     Port_Set@pValue:
  1949                           	opt stack 0
  1950  0000C6                     Word_SetPair@pPair:
  1951                           	opt stack 0
  1952  0000C6                     PortProperty_Valid@pPinDrive:
  1953                           	opt stack 0
  1954  0000C6                     Console_MakeField@y:
  1955                           	opt stack 0
  1956  0000C6                     irobot_leds@powerColour:
  1957                           	opt stack 0
  1958                           
  1959                           ; 1 bytes @ 0x11
  1960  0000C6                     	ds	1
  1961  0000C7                     ??_Port_Set:
  1962  0000C7                     Port_SetPin@pValue:
  1963                           	opt stack 0
  1964  0000C7                     Word_SetPair@pValue:
  1965                           	opt stack 0
  1966  0000C7                     PortProperty_Valid@pPin:
  1967                           	opt stack 0
  1968  0000C7                     irobot_leds@powerLuminosity:
  1969                           	opt stack 0
  1970  0000C7                     LCD_DrawField@pField:
  1971                           	opt stack 0
  1972  0000C7                     irobot_move@moveTurnRadius:
  1973                           	opt stack 0
  1974  0000C7                     Timer2_Init@RDIV:
  1975                           	opt stack 0
  1976                           
  1977                           ; 4 bytes @ 0x12
  1978  0000C7                     	ds	1
  1979  0000C8                     ??_PortProperty_Valid:
  1980  0000C8                     ??_LCD_FillRectangle:
  1981  0000C8                     Port_SetPin@Type:
  1982                           	opt stack 0
  1983  0000C8                     Console_PrintChar@pInput:
  1984                           	opt stack 0
  1985  0000C8                     irobot_leds@isScript:
  1986                           	opt stack 0
  1987                           
  1988                           ; 1 bytes @ 0x13
  1989  0000C8                     	ds	1
  1990  0000C9                     ??_irobot_move:
  1991  0000C9                     LED_Set@pValue:
  1992                           	opt stack 0
  1993  0000C9                     putch@c:
  1994                           	opt stack 0
  1995  0000C9                     irobot_led_power_on@powerOnColour:
  1996                           	opt stack 0
  1997  0000C9                     Port_TogglePin@pInput:
  1998                           	opt stack 0
  1999  0000C9                     LCD_DrawField@pPoint:
  2000                           	opt stack 0
  2001                           
  2002                           ; 4 bytes @ 0x14
  2003  0000C9                     	ds	1
  2004  0000CA                     ?_printf:
  2005                           	opt stack 0
  2006  0000CA                     LCD_FillRectangle@i:
  2007                           	opt stack 0
  2008  0000CA                     LED_Set@pLED:
  2009                           	opt stack 0
  2010  0000CA                     irobot_query_and_update@packetIDs:
  2011                           	opt stack 0
  2012  0000CA                     printf@f:
  2013                           	opt stack 0
  2014  0000CA                     PortProperty_Valid@Errors:
  2015                           	opt stack 0
  2016                           
  2017                           ; 16 bytes @ 0x15
  2018  0000CA                     	ds	1
  2019  0000CB                     LCD_FillRectangle@j:
  2020                           	opt stack 0
  2021  0000CB                     Port_TogglePin@pPin:
  2022                           	opt stack 0
  2023  0000CB                     Timer2_Init@pCPUClock:
  2024                           	opt stack 0
  2025                           
  2026                           ; 4 bytes @ 0x16
  2027  0000CB                     	ds	1
  2028  0000CC                     Port_TogglePin@Value:
  2029                           	opt stack 0
  2030  0000CC                     irobot_query_and_update@streamSize:
  2031                           	opt stack 0
  2032                           
  2033                           ; 1 bytes @ 0x17
  2034  0000CC                     	ds	1
  2035  0000CD                     LED_Toggle@pLED:
  2036                           	opt stack 0
  2037  0000CD                     irobot_query_and_update@numberOfPacketRequests:
  2038                           	opt stack 0
  2039  0000CD                     irobot_move@isScript:
  2040                           	opt stack 0
  2041  0000CD                     LCD_DrawField@pSize:
  2042                           	opt stack 0
  2043                           
  2044                           ; 4 bytes @ 0x18
  2045  0000CD                     	ds	1
  2046  0000CE                     irobot_query_and_update@packetVariable:
  2047                           	opt stack 0
  2048  0000CE                     irobot_stop_motion@isScript:
  2049                           	opt stack 0
  2050  0000CE                     irobot_rotate@rotateAngle:
  2051                           	opt stack 0
  2052                           
  2053                           ; 2 bytes @ 0x19
  2054  0000CE                     	ds	1
  2055  0000CF                     irobot_query_and_update@j:
  2056                           	opt stack 0
  2057  0000CF                     Timer2_Init@DIVIDE:
  2058                           	opt stack 0
  2059                           
  2060                           ; 4 bytes @ 0x1A
  2061  0000CF                     	ds	1
  2062  0000D0                     irobot_query_and_update@startIndex:
  2063                           	opt stack 0
  2064  0000D0                     irobot_rotate@rotateSpeed:
  2065                           	opt stack 0
  2066                           
  2067                           ; 2 bytes @ 0x1B
  2068  0000D0                     	ds	1
  2069  0000D1                     ??_LCD_DrawField:
  2070  0000D1                     irobot_query_and_update@i:
  2071                           	opt stack 0
  2072                           
  2073                           ; 1 bytes @ 0x1C
  2074  0000D1                     	ds	1
  2075  0000D2                     irobot_rotate@isScript:
  2076                           	opt stack 0
  2077  0000D2                     printf@flag:
  2078                           	opt stack 0
  2079                           
  2080                           ; 1 bytes @ 0x1D
  2081  0000D2                     	ds	1
  2082  0000D3                     LCD_DrawField@count:
  2083                           	opt stack 0
  2084  0000D3                     printf@val:
  2085                           	opt stack 0
  2086                           
  2087                           ; 2 bytes @ 0x1E
  2088  0000D3                     	ds	2
  2089  0000D5                     LCD_DrawField@xmax:
  2090                           	opt stack 0
  2091  0000D5                     printf@prec:
  2092                           	opt stack 0
  2093                           
  2094                           ; 1 bytes @ 0x20
  2095  0000D5                     	ds	1
  2096  0000D6                     LCD_DrawField@ymax:
  2097                           	opt stack 0
  2098  0000D6                     printf@ap:
  2099                           	opt stack 0
  2100                           
  2101                           ; 2 bytes @ 0x21
  2102  0000D6                     	ds	1
  2103  0000D7                     LCD_DrawField@i:
  2104                           	opt stack 0
  2105  0000D7                     Port_Set@TypeRequired:
  2106                           	opt stack 0
  2107                           
  2108                           ; 2 bytes @ 0x22
  2109  0000D7                     	ds	1
  2110  0000D8                     ??_Console_Render:
  2111  0000D8                     printf@c:
  2112                           	opt stack 0
  2113                           
  2114                           ; 1 bytes @ 0x23
  2115  0000D8                     	ds	1
  2116  0000D9                     Port_Set@TypeActual:
  2117                           	opt stack 0
  2118                           
  2119                           ; 2 bytes @ 0x24
  2120  0000D9                     	ds	1
  2121  0000DA                     PortProperty_Valid@Pair:
  2122                           	opt stack 0
  2123  0000DA                     Console_Render@temp:
  2124                           	opt stack 0
  2125                           
  2126                           ; 1 bytes @ 0x25
  2127  0000DA                     	ds	1
  2128  0000DB                     Port_Set@Type:
  2129                           	opt stack 0
  2130  0000DB                     Port_CheckPairType@pInput:
  2131                           	opt stack 0
  2132  0000DB                     Port_SetPinType@pInput:
  2133                           	opt stack 0
  2134  0000DB                     Console_Render@lCursor:
  2135                           	opt stack 0
  2136                           
  2137                           ; 4 bytes @ 0x26
  2138  0000DB                     	ds	2
  2139  0000DD                     Port_CheckPairType@pPair:
  2140                           	opt stack 0
  2141  0000DD                     Port_SetPinType@pPin:
  2142                           	opt stack 0
  2143                           
  2144                           ; 1 bytes @ 0x28
  2145  0000DD                     	ds	1
  2146  0000DE                     Port_CheckPairType@pDrive:
  2147                           	opt stack 0
  2148  0000DE                     Port_SetPinType@pType:
  2149                           	opt stack 0
  2150                           
  2151                           ; 1 bytes @ 0x29
  2152  0000DE                     	ds	1
  2153  0000DF                     Port_CheckPairType@Pin1:
  2154                           	opt stack 0
  2155  0000DF                     Port_SetPinType@Output:
  2156                           	opt stack 0
  2157  0000DF                     Console_Render@x:
  2158                           	opt stack 0
  2159                           
  2160                           ; 1 bytes @ 0x2A
  2161  0000DF                     	ds	1
  2162  0000E0                     Port_CheckPairType@Pin2:
  2163                           	opt stack 0
  2164  0000E0                     Console_Render@y:
  2165                           	opt stack 0
  2166  0000E0                     Port_SetPinType@Props:
  2167                           	opt stack 0
  2168                           
  2169                           ; 2 bytes @ 0x2B
  2170  0000E0                     	ds	1
  2171  0000E1                     Port_CheckPairType@Output:
  2172                           	opt stack 0
  2173                           
  2174                           ; 1 bytes @ 0x2C
  2175  0000E1                     	ds	1
  2176  0000E2                     LED_Init@pLED:
  2177                           	opt stack 0
  2178  0000E2                     Port_CheckPairType@Props:
  2179                           	opt stack 0
  2180  0000E2                     SPI_Init@pClock:
  2181                           	opt stack 0
  2182                           
  2183                           ; 4 bytes @ 0x2D
  2184  0000E2                     	ds	2
  2185  0000E4                     Port_CheckQuadType@pInput:
  2186                           	opt stack 0
  2187                           
  2188                           ; 2 bytes @ 0x2F
  2189  0000E4                     	ds	2
  2190  0000E6                     Port_CheckQuadType@pQuad:
  2191                           	opt stack 0
  2192  0000E6                     SPI_Init@pChannel:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x31
  2196  0000E6                     	ds	1
  2197  0000E7                     Port_CheckQuadType@pDrive:
  2198                           	opt stack 0
  2199  0000E7                     SPI_Init@pMode:
  2200                           	opt stack 0
  2201                           
  2202                           ; 1 bytes @ 0x32
  2203  0000E7                     	ds	1
  2204  0000E8                     Port_CheckQuadType@Pair1:
  2205                           	opt stack 0
  2206  0000E8                     SPI_Init@pInput:
  2207                           	opt stack 0
  2208                           
  2209                           ; 2 bytes @ 0x33
  2210  0000E8                     	ds	1
  2211  0000E9                     Port_CheckQuadType@Pair2:
  2212                           	opt stack 0
  2213                           
  2214                           ; 1 bytes @ 0x34
  2215  0000E9                     	ds	1
  2216  0000EA                     ??_LCD_Init:
  2217  0000EA                     Port_CheckQuadType@Output:
  2218                           	opt stack 0
  2219                           
  2220                           ; 1 bytes @ 0x35
  2221  0000EA                     	ds	1
  2222  0000EB                     Port_CheckPortType@pInput:
  2223                           	opt stack 0
  2224  0000EB                     Port_SetQuadType@pInput:
  2225                           	opt stack 0
  2226                           
  2227                           ; 2 bytes @ 0x36
  2228  0000EB                     	ds	1
  2229  0000EC                     LCD_Init@i:
  2230                           	opt stack 0
  2231                           
  2232                           ; 2 bytes @ 0x37
  2233  0000EC                     	ds	1
  2234  0000ED                     Port_CheckPortType@pDrive:
  2235                           	opt stack 0
  2236  0000ED                     Port_SetQuadType@pQuad:
  2237                           	opt stack 0
  2238                           
  2239                           ; 1 bytes @ 0x38
  2240  0000ED                     	ds	1
  2241  0000EE                     Port_CheckPortType@Output:
  2242                           	opt stack 0
  2243  0000EE                     Port_SetQuadType@pType:
  2244                           	opt stack 0
  2245                           
  2246                           ; 1 bytes @ 0x39
  2247  0000EE                     	ds	1
  2248  0000EF                     Port_SetQuadType@Output:
  2249                           	opt stack 0
  2250  0000EF                     Port_SetType@pInput:
  2251                           	opt stack 0
  2252                           
  2253                           ; 2 bytes @ 0x3A
  2254  0000EF                     	ds	1
  2255  0000F0                     HMI_Init@in:
  2256                           	opt stack 0
  2257                           
  2258                           ; 2 bytes @ 0x3B
  2259  0000F0                     	ds	1
  2260  0000F1                     Port_SetType@pType:
  2261                           	opt stack 0
  2262                           
  2263                           ; 1 bytes @ 0x3C
  2264  0000F1                     	ds	1
  2265  0000F2                     ??_Port_SetType:
  2266                           
  2267                           ; 1 bytes @ 0x3D
  2268  0000F2                     	ds	2
  2269  0000F4                     Port_SetType@Output:
  2270                           	opt stack 0
  2271                           
  2272                           ; 1 bytes @ 0x3F
  2273  0000F4                     	ds	1
  2274  0000F5                     Port_Init@pInput:
  2275                           	opt stack 0
  2276                           
  2277                           ; 2 bytes @ 0x40
  2278  0000F5                     	ds	2
  2279  0000F7                     Port_Init@pPort:
  2280                           	opt stack 0
  2281                           
  2282                           ; 1 bytes @ 0x42
  2283  0000F7                     	ds	1
  2284  0000F8                     Port_Init@i:
  2285                           	opt stack 0
  2286                           
  2287                           ; 1 bytes @ 0x43
  2288  0000F8                     	ds	1
  2289  0000F9                     tblptru	equ	0xFF8
  2290                           tblptrh	equ	0xFF7
  2291                           tblptrl	equ	0xFF6
  2292                           tablat	equ	0xFF5
  2293                           postinc0	equ	0xFEE
  2294                           wreg	equ	0xFE8
  2295                           postdec1	equ	0xFE5
  2296                           fsr1h	equ	0xFE2
  2297                           fsr1l	equ	0xFE1
  2298                           
  2299                           ; 1 bytes @ 0x44
  2300                           
  2301                           	psect	cstackCOMRAM
  2302  000001                     __pcstackCOMRAM:
  2303                           	opt stack 0
  2304  000001                     i2Byte_SetBit@pInput:
  2305                           	opt stack 0
  2306  000001                     i2Byte_GetZone@pInput:
  2307                           	opt stack 0
  2308  000001                     i2delay_us@us:
  2309                           	opt stack 0
  2310  000001                     i2MXK_Queue@pCallback:
  2311                           	opt stack 0
  2312                           
  2313                           ; 3 bytes @ 0x0
  2314  000001                     	ds	2
  2315  000003                     i2Byte_SetBit@pBit:
  2316                           	opt stack 0
  2317  000003                     i2Byte_GetZone@pMax:
  2318                           	opt stack 0
  2319  000003                     i2delay_us@u:
  2320                           	opt stack 0
  2321                           
  2322                           ; 4 bytes @ 0x2
  2323  000003                     	ds	1
  2324  000004                     i2Byte_SetBit@pValue:
  2325                           	opt stack 0
  2326  000004                     i2Byte_GetZone@pChunk:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x3
  2330  000004                     	ds	1
  2331  000005                     ??i2_Byte_SetBit:
  2332  000005                     i2Byte_GetZone@pChunkSize:
  2333                           	opt stack 0
  2334                           
  2335                           ; 1 bytes @ 0x4
  2336  000005                     	ds	1
  2337  000006                     ??i2_Byte_GetZone:
  2338                           
  2339                           ; 1 bytes @ 0x5
  2340  000006                     	ds	1
  2341  000007                     i2Byte_GetZone@MASK:
  2342                           	opt stack 0
  2343  000007                     i2MXK_SwitchTo@CUR:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x6
  2347  000007                     	ds	1
  2348  000008                     i2Byte_GetZone@Offset:
  2349                           	opt stack 0
  2350  000008                     i2MXK_SwitchTo@pModule:
  2351                           	opt stack 0
  2352                           
  2353                           ; 1 bytes @ 0x7
  2354  000008                     	ds	1
  2355  000009                     i2Byte_GetZone@Output:
  2356                           	opt stack 0
  2357                           
  2358                           ; 1 bytes @ 0x8
  2359  000009                     	ds	1
  2360  00000A                     i2Byte_GetPair@pInput:
  2361                           	opt stack 0
  2362                           
  2363                           ; 2 bytes @ 0x9
  2364  00000A                     	ds	2
  2365  00000C                     i2Byte_GetPair@pPair:
  2366                           	opt stack 0
  2367                           
  2368                           ; 1 bytes @ 0xB
  2369  00000C                     	ds	1
  2370  00000D                     i2Word_GetPair@pInput:
  2371                           	opt stack 0
  2372                           
  2373                           ; 2 bytes @ 0xC
  2374  00000D                     	ds	2
  2375  00000F                     i2Word_GetPair@pPair:
  2376                           	opt stack 0
  2377                           
  2378                           ; 1 bytes @ 0xE
  2379  00000F                     	ds	1
  2380  000010                     i2Port_SetPin@pInput:
  2381                           	opt stack 0
  2382                           
  2383                           ; 2 bytes @ 0xF
  2384  000010                     	ds	2
  2385  000012                     i2Port_SetPin@pPin:
  2386                           	opt stack 0
  2387                           
  2388                           ; 1 bytes @ 0x11
  2389  000012                     	ds	1
  2390  000013                     i2Port_SetPin@pValue:
  2391                           	opt stack 0
  2392                           
  2393                           ; 1 bytes @ 0x12
  2394  000013                     	ds	1
  2395  000014                     i2Port_SetPin@Type:
  2396                           	opt stack 0
  2397                           
  2398                           ; 1 bytes @ 0x13
  2399  000014                     	ds	1
  2400  000015                     
  2401                           ; 1 bytes @ 0x14
  2402  000015                     	ds	2
  2403  000017                     ??_ISR_Function:
  2404                           
  2405                           ; 1 bytes @ 0x16
  2406  000017                     	ds	18
  2407                           tblptru	equ	0xFF8
  2408                           tblptrh	equ	0xFF7
  2409                           tblptrl	equ	0xFF6
  2410                           tablat	equ	0xFF5
  2411                           postinc0	equ	0xFEE
  2412                           wreg	equ	0xFE8
  2413                           postdec1	equ	0xFE5
  2414                           fsr1h	equ	0xFE2
  2415                           fsr1l	equ	0xFE1
  2416                           
  2417 ;;
  2418 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2419 ;;
  2420 ;; *************** function _main *****************
  2421 ;; Defined at:
  2422 ;;		line 30 in file "main.c"
  2423 ;; Parameters:    Size  Location     Type
  2424 ;;		None
  2425 ;; Auto vars:     Size  Location     Type
  2426 ;;  angleTotal      2    2[BANK3 ] short 
  2427 ;;  distanceTota    2    0[BANK3 ] short 
  2428 ;; Return value:  Size  Location     Type
  2429 ;;                  1    wreg      void 
  2430 ;; Registers used:
  2431 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2432 ;; Tracked objects:
  2433 ;;		On entry : 0/0
  2434 ;;		On exit  : 0/0
  2435 ;;		Unchanged: 0/0
  2436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2437 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2438 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2440 ;;      Totals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2441 ;;Total ram usage:        4 bytes
  2442 ;; Hardware stack levels required when called:   17
  2443 ;; This function calls:
  2444 ;;		_Console_Init
  2445 ;;		_Console_Render
  2446 ;;		_HMI_Init
  2447 ;;		_LCD_Init
  2448 ;;		_MXK_BlockSwitchTo
  2449 ;;		_MXK_Dequeue
  2450 ;;		_MXK_Init
  2451 ;;		_MXK_Release
  2452 ;;		_MXK_SwitchTo
  2453 ;;		_delay_ms
  2454 ;;		_eusart_init
  2455 ;;		_irobot_init
  2456 ;;		_irobot_init_song_0
  2457 ;;		_irobot_led_power_on
  2458 ;;		_irobot_rotate
  2459 ;;		_irobot_song_play
  2460 ;;		_irobot_stop_motion
  2461 ;;		_printf
  2462 ;;		_update_angle
  2463 ;;		_update_bump_and_cliff
  2464 ;;		_update_distance
  2465 ;; This function is called by:
  2466 ;;		Startup code after reset
  2467 ;; This function uses a non-reentrant model
  2468 ;;
  2469                           
  2470                           	psect	text0
  2471  011C96                     __ptext0:
  2472                           	opt stack 0
  2473  011C96                     _main:
  2474                           	opt stack 14
  2475                           
  2476                           ;main.c: 32: MXK_Init();
  2477                           
  2478                           ;incstack = 0
  2479  011C96  EC6C  F08B         	call	_MXK_Init	;wreg free
  2480                           
  2481                           ;main.c: 35: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2482  011C9A  0E01               	movlw	1
  2483  011C9C  ECBC  F09D         	call	_MXK_BlockSwitchTo
  2484  011CA0  0900               	iorlw	0
  2485  011CA2  B4D8               	btfsc	status,2,c
  2486  011CA4  D00C               	goto	l2006
  2487                           
  2488                           ;main.c: 36: Console_Init();
  2489  011CA6  EC36  F097         	call	_Console_Init	;wreg free
  2490                           
  2491                           ;main.c: 37: HMI_Init();
  2492  011CAA  EC34  F087         	call	_HMI_Init	;wreg free
  2493                           
  2494                           ;main.c: 38: LCD_Init();
  2495  011CAE  EC2C  F08C         	call	_LCD_Init	;wreg free
  2496                           
  2497                           ;main.c: 39: if (MXK_Release())
  2498  011CB2  ECA3  F09F         	call	_MXK_Release	;wreg free
  2499  011CB6  0900               	iorlw	0
  2500  011CB8  A4D8               	btfss	status,2,c
  2501                           
  2502                           ;main.c: 40: MXK_Dequeue();
  2503  011CBA  EC9D  F09D         	call	_MXK_Dequeue	;wreg free
  2504  011CBE                     l2006:
  2505                           
  2506                           ;main.c: 41: }
  2507                           ;main.c: 42: eusart_init();
  2508  011CBE  EC2C  F09F         	call	_eusart_init	;wreg free
  2509                           
  2510                           ;main.c: 43: irobot_init();
  2511  011CC2  ECEA  F09F         	call	_irobot_init	;wreg free
  2512                           
  2513                           ;main.c: 45: irobot_led_power_on(0xA);
  2514  011CC6  0E0A               	movlw	10
  2515  011CC8  EC95  F09F         	call	_irobot_led_power_on
  2516                           
  2517                           ;main.c: 46: irobot_init_song_0();
  2518  011CCC  EC0D  F09F         	call	_irobot_init_song_0	;wreg free
  2519                           
  2520                           ;main.c: 47: delay_ms(20);
  2521  011CD0  0E00               	movlw	0
  2522  011CD2  0100               	movlb	0	; () banked
  2523  011CD4  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  2524  011CD6  0E14               	movlw	20
  2525  011CD8  6FB5               	movwf	delay_ms@ms& (0+255),b
  2526  011CDA  EC81  F099         	call	_delay_ms	;wreg free
  2527                           
  2528                           ;main.c: 50: irobot_rotate(0, 90, 200);
  2529  011CDE  0E00               	movlw	0
  2530  011CE0  0100               	movlb	0	; () banked
  2531  011CE2  6FCF               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  2532  011CE4  0E5A               	movlw	90
  2533  011CE6  6FCE               	movwf	irobot_rotate@rotateAngle& (0+255),b
  2534  011CE8  0E00               	movlw	0
  2535  011CEA  0100               	movlb	0	; () banked
  2536  011CEC  6FD1               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  2537  011CEE  0EC8               	movlw	200
  2538  011CF0  6FD0               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  2539  011CF2  0E00               	movlw	0
  2540  011CF4  EC51  F09A         	call	_irobot_rotate
  2541                           
  2542                           ;main.c: 52: INT16 distanceTotal = 0;
  2543  011CF8  0E00               	movlw	0
  2544  011CFA  0103               	movlb	3	; () banked
  2545  011CFC  6FDE               	movwf	(main@distanceTotal+1)& (0+255),b
  2546  011CFE  0E00               	movlw	0
  2547  011D00  6FDD               	movwf	main@distanceTotal& (0+255),b
  2548                           
  2549                           ; BSR set to: 3
  2550                           ;main.c: 53: INT16 angleTotal = 0;
  2551  011D02  0E00               	movlw	0
  2552  011D04  0103               	movlb	3	; () banked
  2553  011D06  6FE0               	movwf	(main@angleTotal+1)& (0+255),b
  2554  011D08  0E00               	movlw	0
  2555  011D0A  6FDF               	movwf	main@angleTotal& (0+255),b
  2556  011D0C                     
  2557                           ;main.c: 56: update_bump_and_cliff();
  2558                           
  2559                           ; BSR set to: 3
  2560  011D0C  ECFA  F09D         	call	_update_bump_and_cliff	;wreg free
  2561                           
  2562                           ;main.c: 57: update_distance();
  2563  011D10  ECC8  F09F         	call	_update_distance	;wreg free
  2564                           
  2565                           ;main.c: 58: update_angle();
  2566  011D14  ECD1  F09F         	call	_update_angle	;wreg free
  2567                           
  2568                           ;main.c: 60: angleTotal += iRAngle;
  2569  011D18  0100               	movlb	0	; () banked
  2570  011D1A  5177               	movf	_iRAngle& (0+255),w,b
  2571  011D1C  0103               	movlb	3	; () banked
  2572  011D1E  27DF               	addwf	main@angleTotal& (0+255),f,b
  2573  011D20  0100               	movlb	0	; () banked
  2574  011D22  5178               	movf	(_iRAngle+1)& (0+255),w,b
  2575  011D24  0103               	movlb	3	; () banked
  2576  011D26  23E0               	addwfc	(main@angleTotal+1)& (0+255),f,b
  2577                           
  2578                           ; BSR set to: 3
  2579                           ;main.c: 62: if (iRBumpLeft || iRBumpRight) {
  2580  011D28  0100               	movlb	0	; () banked
  2581  011D2A  5188               	movf	_iRBumpLeft& (0+255),w,b
  2582  011D2C  A4D8               	btfss	status,2,c
  2583  011D2E  D004               	goto	u9050
  2584                           
  2585                           ; BSR set to: 0
  2586  011D30  0100               	movlb	0	; () banked
  2587  011D32  5187               	movf	_iRBumpRight& (0+255),w,b
  2588  011D34  B4D8               	btfsc	status,2,c
  2589  011D36  D006               	goto	l2008
  2590  011D38                     u9050:
  2591                           
  2592                           ; BSR set to: 0
  2593                           ;main.c: 63: irobot_song_play(0);
  2594                           
  2595                           ; BSR set to: 0
  2596  011D38  0E00               	movlw	0
  2597  011D3A  ECBE  F09F         	call	_irobot_song_play
  2598                           
  2599                           ;main.c: 64: irobot_stop_motion(0);
  2600  011D3E  0E00               	movlw	0
  2601  011D40  ECB1  F09C         	call	_irobot_stop_motion
  2602  011D44                     l2008:
  2603                           
  2604                           ;main.c: 65: }
  2605                           ;main.c: 66: if (angleTotal > 90) {
  2606  011D44  0103               	movlb	3	; () banked
  2607  011D46  BFE0               	btfsc	(main@angleTotal+1)& (0+255),7,b
  2608  011D48  D00B               	goto	l2011
  2609  011D4A  0103               	movlb	3	; () banked
  2610  011D4C  51E0               	movf	(main@angleTotal+1)& (0+255),w,b
  2611  011D4E  E105               	bnz	u9060
  2612  011D50  0E5B               	movlw	91
  2613  011D52  0103               	movlb	3	; () banked
  2614  011D54  5DDF               	subwf	main@angleTotal& (0+255),w,b
  2615  011D56  A0D8               	btfss	status,0,c
  2616  011D58  D003               	goto	l2011
  2617  011D5A                     u9060:
  2618                           
  2619                           ; BSR set to: 3
  2620                           ;main.c: 67: irobot_stop_motion(0);
  2621  011D5A  0E00               	movlw	0
  2622  011D5C  ECB1  F09C         	call	_irobot_stop_motion
  2623  011D60                     l2011:
  2624                           
  2625                           ;main.c: 68: }
  2626                           ;main.c: 70: if (MXK_SwitchTo(eMXK_HMI)) {
  2627  011D60  0E01               	movlw	1
  2628  011D62  EC3C  F09D         	call	_MXK_SwitchTo
  2629  011D66  0900               	iorlw	0
  2630  011D68  B4D8               	btfsc	status,2,c
  2631  011D6A  D7D0               	goto	l2007
  2632                           
  2633                           ;main.c: 71: printf("%c", (char)35);
  2634  011D6C  0EFB               	movlw	low STR_1
  2635  011D6E  0100               	movlb	0	; () banked
  2636  011D70  6FCA               	movwf	printf@f& (0+255),b
  2637  011D72  0EFF               	movlw	high STR_1
  2638  011D74  0100               	movlb	0	; () banked
  2639  011D76  6FCB               	movwf	(printf@f+1)& (0+255),b
  2640  011D78  0E00               	movlw	0
  2641  011D7A  0100               	movlb	0	; () banked
  2642  011D7C  6FCD               	movwf	(?_printf+3)& (0+255),b
  2643  011D7E  0E23               	movlw	35
  2644  011D80  6FCC               	movwf	(?_printf+2)& (0+255),b
  2645  011D82  ECE5  F08C         	call	_printf	;wreg free
  2646                           
  2647                           ;main.c: 72: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, i
      +                          RBumpLeft, iRBumpRight);
  2648  011D86  0ECD               	movlw	low STR_2
  2649  011D88  0100               	movlb	0	; () banked
  2650  011D8A  6FCA               	movwf	printf@f& (0+255),b
  2651  011D8C  0EFF               	movlw	high STR_2
  2652  011D8E  0100               	movlb	0	; () banked
  2653  011D90  6FCB               	movwf	(printf@f+1)& (0+255),b
  2654  011D92  C3DD  F0CC         	movff	main@distanceTotal,?_printf+2
  2655  011D96  C3DE  F0CD         	movff	main@distanceTotal+1,?_printf+3
  2656  011D9A  C088  F0CE         	movff	_iRBumpLeft,?_printf+4
  2657  011D9E  0100               	movlb	0	; () banked
  2658  011DA0  6BCF               	clrf	(?_printf+5)& (0+255),b
  2659  011DA2  C087  F0D0         	movff	_iRBumpRight,?_printf+6
  2660  011DA6  0100               	movlb	0	; () banked
  2661  011DA8  6BD1               	clrf	(?_printf+7)& (0+255),b
  2662  011DAA  ECE5  F08C         	call	_printf	;wreg free
  2663                           
  2664                           ;main.c: 73: Console_Render();
  2665  011DAE  EC2C  F086         	call	_Console_Render	;wreg free
  2666                           
  2667                           ;main.c: 74: if (MXK_Release())
  2668  011DB2  ECA3  F09F         	call	_MXK_Release	;wreg free
  2669  011DB6  0900               	iorlw	0
  2670  011DB8  B4D8               	btfsc	status,2,c
  2671  011DBA  D7A8               	goto	l2007
  2672                           
  2673                           ;main.c: 75: MXK_Dequeue();
  2674  011DBC  EC9D  F09D         	call	_MXK_Dequeue	;wreg free
  2675                           
  2676                           ;main.c: 76: }
  2677                           ;main.c: 77: }
  2678  011DC0  D7A5               	goto	l2007
  2679  011DC2                     __end_of_main:
  2680                           	opt stack 0
  2681                           tblptru	equ	0xFF8
  2682                           tblptrh	equ	0xFF7
  2683                           tblptrl	equ	0xFF6
  2684                           tablat	equ	0xFF5
  2685                           postinc0	equ	0xFEE
  2686                           wreg	equ	0xFE8
  2687                           postdec1	equ	0xFE5
  2688                           fsr1h	equ	0xFE2
  2689                           fsr1l	equ	0xFE1
  2690                           status	equ	0xFD8
  2691                           
  2692 ;; *************** function _update_distance *****************
  2693 ;; Defined at:
  2694 ;;		line 315 in file "Library/iRobotSerial.c"
  2695 ;; Parameters:    Size  Location     Type
  2696 ;;		None
  2697 ;; Auto vars:     Size  Location     Type
  2698 ;;		None
  2699 ;; Return value:  Size  Location     Type
  2700 ;;                  1    wreg      void 
  2701 ;; Registers used:
  2702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2703 ;; Tracked objects:
  2704 ;;		On entry : 0/0
  2705 ;;		On exit  : 0/0
  2706 ;;		Unchanged: 0/0
  2707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;Total ram usage:        0 bytes
  2713 ;; Hardware stack levels used:    1
  2714 ;; Hardware stack levels required when called:   10
  2715 ;; This function calls:
  2716 ;;		_irobot_query_and_update
  2717 ;; This function is called by:
  2718 ;;		_main
  2719 ;; This function uses a non-reentrant model
  2720 ;;
  2721                           
  2722                           	psect	text1
  2723  013F90                     __ptext1:
  2724                           	opt stack 0
  2725  013F90                     _update_distance:
  2726                           	opt stack 20
  2727                           
  2728                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  2729                           
  2730                           ;incstack = 0
  2731  013F90  0E00               	movlw	0
  2732  013F92  0100               	movlb	0	; () banked
  2733  013F94  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  2734  013F96  0E13               	movlw	19
  2735  013F98  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  2736  013F9A  0E01               	movlw	1
  2737  013F9C  ECA9  F08A         	call	_irobot_query_and_update
  2738  013FA0  0012               	return		;funcret
  2739  013FA2                     __end_of_update_distance:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           fsr1h	equ	0xFE2
  2749                           fsr1l	equ	0xFE1
  2750                           status	equ	0xFD8
  2751                           
  2752 ;; *************** function _update_bump_and_cliff *****************
  2753 ;; Defined at:
  2754 ;;		line 308 in file "Library/iRobotSerial.c"
  2755 ;; Parameters:    Size  Location     Type
  2756 ;;		None
  2757 ;; Auto vars:     Size  Location     Type
  2758 ;;		None
  2759 ;; Return value:  Size  Location     Type
  2760 ;;                  1    wreg      void 
  2761 ;; Registers used:
  2762 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2763 ;; Tracked objects:
  2764 ;;		On entry : 0/0
  2765 ;;		On exit  : 0/0
  2766 ;;		Unchanged: 0/0
  2767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2772 ;;Total ram usage:        0 bytes
  2773 ;; Hardware stack levels used:    1
  2774 ;; Hardware stack levels required when called:   10
  2775 ;; This function calls:
  2776 ;;		_irobot_query_and_update
  2777 ;; This function is called by:
  2778 ;;		_main
  2779 ;; This function uses a non-reentrant model
  2780 ;;
  2781                           
  2782                           	psect	text2
  2783  013BF4                     __ptext2:
  2784                           	opt stack 0
  2785  013BF4                     _update_bump_and_cliff:
  2786                           	opt stack 20
  2787                           
  2788                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  2789                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  2790                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  2791                           
  2792                           ;incstack = 0
  2793  013BF4  0E00               	movlw	0
  2794  013BF6  0100               	movlb	0	; () banked
  2795  013BF8  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  2796  013BFA  0E07               	movlw	7
  2797  013BFC  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  2798  013BFE  0E00               	movlw	0
  2799  013C00  0100               	movlb	0	; () banked
  2800  013C02  6FBE               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  2801  013C04  0E09               	movlw	9
  2802  013C06  6FBD               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  2803  013C08  0E00               	movlw	0
  2804  013C0A  0100               	movlb	0	; () banked
  2805  013C0C  6FC0               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  2806  013C0E  0E0A               	movlw	10
  2807  013C10  6FBF               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  2808  013C12  0E00               	movlw	0
  2809  013C14  0100               	movlb	0	; () banked
  2810  013C16  6FC2               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  2811  013C18  0E0B               	movlw	11
  2812  013C1A  6FC1               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  2813  013C1C  0E00               	movlw	0
  2814  013C1E  0100               	movlb	0	; () banked
  2815  013C20  6FC4               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  2816  013C22  0E0C               	movlw	12
  2817  013C24  6FC3               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  2818  013C26  0E05               	movlw	5
  2819  013C28  ECA9  F08A         	call	_irobot_query_and_update
  2820  013C2C  0012               	return		;funcret
  2821  013C2E                     __end_of_update_bump_and_cliff:
  2822                           	opt stack 0
  2823                           tblptru	equ	0xFF8
  2824                           tblptrh	equ	0xFF7
  2825                           tblptrl	equ	0xFF6
  2826                           tablat	equ	0xFF5
  2827                           postinc0	equ	0xFEE
  2828                           wreg	equ	0xFE8
  2829                           postdec1	equ	0xFE5
  2830                           fsr1h	equ	0xFE2
  2831                           fsr1l	equ	0xFE1
  2832                           status	equ	0xFD8
  2833                           
  2834 ;; *************** function _update_angle *****************
  2835 ;; Defined at:
  2836 ;;		line 320 in file "Library/iRobotSerial.c"
  2837 ;; Parameters:    Size  Location     Type
  2838 ;;		None
  2839 ;; Auto vars:     Size  Location     Type
  2840 ;;		None
  2841 ;; Return value:  Size  Location     Type
  2842 ;;                  1    wreg      void 
  2843 ;; Registers used:
  2844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2845 ;; Tracked objects:
  2846 ;;		On entry : 0/0
  2847 ;;		On exit  : 0/0
  2848 ;;		Unchanged: 0/0
  2849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2854 ;;Total ram usage:        0 bytes
  2855 ;; Hardware stack levels used:    1
  2856 ;; Hardware stack levels required when called:   10
  2857 ;; This function calls:
  2858 ;;		_irobot_query_and_update
  2859 ;; This function is called by:
  2860 ;;		_main
  2861 ;; This function uses a non-reentrant model
  2862 ;;
  2863                           
  2864                           	psect	text3
  2865  013FA2                     __ptext3:
  2866                           	opt stack 0
  2867  013FA2                     _update_angle:
  2868                           	opt stack 20
  2869                           
  2870                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  2871                           
  2872                           ;incstack = 0
  2873  013FA2  0E00               	movlw	0
  2874  013FA4  0100               	movlb	0	; () banked
  2875  013FA6  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  2876  013FA8  0E14               	movlw	20
  2877  013FAA  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  2878  013FAC  0E01               	movlw	1
  2879  013FAE  ECA9  F08A         	call	_irobot_query_and_update
  2880  013FB2  0012               	return		;funcret
  2881  013FB4                     __end_of_update_angle:
  2882                           	opt stack 0
  2883                           tblptru	equ	0xFF8
  2884                           tblptrh	equ	0xFF7
  2885                           tblptrl	equ	0xFF6
  2886                           tablat	equ	0xFF5
  2887                           postinc0	equ	0xFEE
  2888                           wreg	equ	0xFE8
  2889                           postdec1	equ	0xFE5
  2890                           fsr1h	equ	0xFE2
  2891                           fsr1l	equ	0xFE1
  2892                           status	equ	0xFD8
  2893                           
  2894 ;; *************** function _irobot_query_and_update *****************
  2895 ;; Defined at:
  2896 ;;		line 130 in file "Library/iRobotSerial.c"
  2897 ;; Parameters:    Size  Location     Type
  2898 ;;  numberOfPack    1    wreg     unsigned char 
  2899 ;; Auto vars:     Size  Location     Type
  2900 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  2901 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  2902 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  2903 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  2904 ;;		 -> ?_irobot_query_and_update(1), 
  2905 ;;  i               1   28[BANK0 ] unsigned char 
  2906 ;;  startIndex      1   27[BANK0 ] unsigned char 
  2907 ;;  j               1   26[BANK0 ] unsigned char 
  2908 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  2909 ;;  streamSize      1   23[BANK0 ] unsigned char 
  2910 ;; Return value:  Size  Location     Type
  2911 ;;                  1    wreg      void 
  2912 ;; Registers used:
  2913 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2914 ;; Tracked objects:
  2915 ;;		On entry : 0/0
  2916 ;;		On exit  : 0/0
  2917 ;;		Unchanged: 0/0
  2918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2919 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2922 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2923 ;;Total ram usage:      535 bytes
  2924 ;; Hardware stack levels used:    1
  2925 ;; Hardware stack levels required when called:    9
  2926 ;; This function calls:
  2927 ;;		_eusart_getch
  2928 ;;		_eusart_putch
  2929 ;;		_get_packet_size
  2930 ;;		_rx_assign
  2931 ;; This function is called by:
  2932 ;;		_update_bump_and_cliff
  2933 ;;		_update_distance
  2934 ;;		_update_angle
  2935 ;; This function uses a non-reentrant model
  2936 ;;
  2937                           
  2938                           	psect	text4
  2939  011552                     __ptext4:
  2940                           	opt stack 0
  2941  011552                     _irobot_query_and_update:
  2942                           	opt stack 20
  2943                           
  2944                           ;incstack = 0
  2945                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  2946  011552  0100               	movlb	0	; () banked
  2947  011554  6FCD               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  2948                           
  2949                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  2950  011556  0E00               	movlw	0
  2951  011558  0100               	movlb	0	; () banked
  2952  01155A  6FCC               	movwf	irobot_query_and_update@streamSize& (0+255),b
  2953  01155C  0E00               	movlw	0
  2954  01155E  0100               	movlb	0	; () banked
  2955  011560  6FD0               	movwf	irobot_query_and_update@startIndex& (0+255),b
  2956                           
  2957                           ;iRobotSerial.c: 133: va_list packetIDs;
  2958                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  2959  011562  0EBB               	movlw	low ?_irobot_query_and_update
  2960  011564  0100               	movlb	0	; () banked
  2961  011566  6FCA               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  2962  011568  0E00               	movlw	high ?_irobot_query_and_update
  2963  01156A  0100               	movlb	0	; () banked
  2964  01156C  6FCB               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  2965                           
  2966                           ; BSR set to: 0
  2967                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  2968  01156E  0E95               	movlw	149
  2969  011570  ECF1  F09F         	call	_eusart_putch
  2970                           
  2971                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  2972  011574  0100               	movlb	0	; () banked
  2973  011576  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  2974  011578  ECF1  F09F         	call	_eusart_putch
  2975                           
  2976                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++){
  2977  01157C  0E00               	movlw	0
  2978  01157E  0100               	movlb	0	; () banked
  2979  011580  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  2980  011582  D023               	goto	l2154
  2981  011584                     
  2982                           ; BSR set to: 0
  2983                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  2984                           
  2985                           ; BSR set to: 0
  2986  011584  C0CA  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  2987  011588  C0CB  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  2988  01158C  50DF               	movf	indf2,w,c
  2989  01158E  0100               	movlb	0	; () banked
  2990  011590  6FCE               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  2991                           
  2992                           ; BSR set to: 0
  2993  011592  0E02               	movlw	2
  2994  011594  0100               	movlb	0	; () banked
  2995  011596  27CA               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  2996  011598  0E00               	movlw	0
  2997  01159A  23CB               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  2998                           
  2999                           ; BSR set to: 0
  3000                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  3001  01159C  0100               	movlb	0	; () banked
  3002  01159E  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3003  0115A0  ECEB  F099         	call	_get_packet_size
  3004  0115A4  0100               	movlb	0	; () banked
  3005  0115A6  27CC               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  3006                           
  3007                           ; BSR set to: 0
  3008                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  3009  0115A8  0100               	movlb	0	; () banked
  3010  0115AA  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3011  0115AC  0D01               	mullw	1
  3012  0115AE  0E00               	movlw	low irobot_query_and_update@TXArray
  3013  0115B0  24F3               	addwf	prodl,w,c
  3014  0115B2  6ED9               	movwf	fsr2l,c
  3015  0115B4  0E02               	movlw	high irobot_query_and_update@TXArray
  3016  0115B6  20F4               	addwfc	prodh,w,c
  3017  0115B8  6EDA               	movwf	fsr2h,c
  3018  0115BA  C0CE  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  3019                           
  3020                           ; BSR set to: 0
  3021                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  3022  0115BE  0100               	movlb	0	; () banked
  3023  0115C0  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3024  0115C2  ECF1  F09F         	call	_eusart_putch
  3025  0115C6  0100               	movlb	0	; () banked
  3026  0115C8  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3027  0115CA                     l2154:
  3028                           
  3029                           ; BSR set to: 0
  3030                           
  3031                           ; BSR set to: 0
  3032  0115CA  0100               	movlb	0	; () banked
  3033  0115CC  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3034  0115CE  0100               	movlb	0	; () banked
  3035  0115D0  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3036  0115D2  A0D8               	btfss	status,0,c
  3037  0115D4  D7D7               	goto	l2155
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;iRobotSerial.c: 142: }
  3041                           ;iRobotSerial.c: 143: ;
  3042                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++){RXArray[i] = eusart_getch();}
  3043                           
  3044                           ; BSR set to: 0
  3045  0115D6  0E00               	movlw	0
  3046  0115D8  0100               	movlb	0	; () banked
  3047  0115DA  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3048  0115DC  D00E               	goto	l2157
  3049  0115DE                     
  3050                           ; BSR set to: 0
  3051                           
  3052                           ; BSR set to: 0
  3053  0115DE  0100               	movlb	0	; () banked
  3054  0115E0  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3055  0115E2  0D01               	mullw	1
  3056  0115E4  0E00               	movlw	low irobot_query_and_update@RXArray
  3057  0115E6  24F3               	addwf	prodl,w,c
  3058  0115E8  6ED9               	movwf	fsr2l,c
  3059  0115EA  0E01               	movlw	high irobot_query_and_update@RXArray
  3060  0115EC  20F4               	addwfc	prodh,w,c
  3061  0115EE  6EDA               	movwf	fsr2h,c
  3062  0115F0  EC22  F0A0         	call	_eusart_getch	;wreg free
  3063  0115F4  6EDF               	movwf	indf2,c
  3064  0115F6  0100               	movlb	0	; () banked
  3065  0115F8  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3066  0115FA                     l2157:
  3067                           
  3068                           ; BSR set to: 0
  3069                           
  3070                           ; BSR set to: 0
  3071  0115FA  0100               	movlb	0	; () banked
  3072  0115FC  51CC               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  3073  0115FE  0100               	movlb	0	; () banked
  3074  011600  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3075  011602  A0D8               	btfss	status,0,c
  3076  011604  D7EC               	goto	l2158
  3077                           
  3078                           ; BSR set to: 0
  3079                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++){
  3080                           
  3081                           ; BSR set to: 0
  3082  011606  0E00               	movlw	0
  3083  011608  0100               	movlb	0	; () banked
  3084  01160A  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3085  01160C  D05E               	goto	l2160
  3086  01160E                     l2161:
  3087                           
  3088                           ; BSR set to: 0
  3089                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++){
  3090  01160E  C0D0  F0CF         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  3091  011612  D021               	goto	l2162
  3092  011614                     
  3093                           ; BSR set to: 0
  3094                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  3095                           
  3096                           ; BSR set to: 0
  3097  011614  0100               	movlb	0	; () banked
  3098  011616  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3099  011618  0D01               	mullw	1
  3100  01161A  0E00               	movlw	low irobot_query_and_update@RXArray
  3101  01161C  24F3               	addwf	prodl,w,c
  3102  01161E  6ED9               	movwf	fsr2l,c
  3103  011620  0E01               	movlw	high irobot_query_and_update@RXArray
  3104  011622  20F4               	addwfc	prodh,w,c
  3105  011624  6EDA               	movwf	fsr2h,c
  3106  011626  50DF               	movf	indf2,w,c
  3107  011628  0100               	movlb	0	; () banked
  3108  01162A  6FB6               	movwf	rx_assign@packetIDValue& (0+255),b
  3109  01162C  0100               	movlb	0	; () banked
  3110  01162E  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3111  011630  0800               	sublw	0
  3112  011632  0100               	movlb	0	; () banked
  3113  011634  25CF               	addwf	irobot_query_and_update@j& (0+255),w,b
  3114  011636  0100               	movlb	0	; () banked
  3115  011638  6FB7               	movwf	rx_assign@byteNumber& (0+255),b
  3116  01163A  0100               	movlb	0	; () banked
  3117  01163C  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3118  01163E  0D01               	mullw	1
  3119  011640  0E00               	movlw	low irobot_query_and_update@TXArray
  3120  011642  24F3               	addwf	prodl,w,c
  3121  011644  6ED9               	movwf	fsr2l,c
  3122  011646  0E02               	movlw	high irobot_query_and_update@TXArray
  3123  011648  20F4               	addwfc	prodh,w,c
  3124  01164A  6EDA               	movwf	fsr2h,c
  3125  01164C  50DF               	movf	indf2,w,c
  3126  01164E  ECF4  F08F         	call	_rx_assign
  3127  011652  0100               	movlb	0	; () banked
  3128  011654  2BCF               	incf	irobot_query_and_update@j& (0+255),f,b
  3129  011656                     l2162:
  3130                           
  3131                           ; BSR set to: 0
  3132                           
  3133                           ; BSR set to: 0
  3134  011656  0100               	movlb	0	; () banked
  3135  011658  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3136  01165A  0D01               	mullw	1
  3137  01165C  0E00               	movlw	low irobot_query_and_update@TXArray
  3138  01165E  24F3               	addwf	prodl,w,c
  3139  011660  6ED9               	movwf	fsr2l,c
  3140  011662  0E02               	movlw	high irobot_query_and_update@TXArray
  3141  011664  20F4               	addwfc	prodh,w,c
  3142  011666  6EDA               	movwf	fsr2h,c
  3143  011668  50DF               	movf	indf2,w,c
  3144  01166A  ECEB  F099         	call	_get_packet_size
  3145  01166E  0100               	movlb	0	; () banked
  3146  011670  6FC5               	movwf	??_irobot_query_and_update& (0+255),b
  3147  011672  6BC6               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  3148  011674  0100               	movlb	0	; () banked
  3149  011676  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3150  011678  0100               	movlb	0	; () banked
  3151  01167A  27C5               	addwf	??_irobot_query_and_update& (0+255),f,b
  3152  01167C  0E00               	movlw	0
  3153  01167E  23C6               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  3154  011680  0100               	movlb	0	; () banked
  3155  011682  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3156  011684  0100               	movlb	0	; () banked
  3157  011686  6FC7               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  3158  011688  6BC8               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  3159  01168A  0100               	movlb	0	; () banked
  3160  01168C  51C5               	movf	??_irobot_query_and_update& (0+255),w,b
  3161  01168E  0100               	movlb	0	; () banked
  3162  011690  5DC7               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  3163  011692  0100               	movlb	0	; () banked
  3164  011694  51C8               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  3165  011696  0A80               	xorlw	128
  3166  011698  0100               	movlb	0	; () banked
  3167  01169A  6FC9               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  3168  01169C  0100               	movlb	0	; () banked
  3169  01169E  51C6               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  3170  0116A0  0A80               	xorlw	128
  3171  0116A2  0100               	movlb	0	; () banked
  3172  0116A4  59C9               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  3173  0116A6  A0D8               	btfss	status,0,c
  3174  0116A8  D7B5               	goto	l2163
  3175                           
  3176                           ; BSR set to: 0
  3177                           ;iRobotSerial.c: 150: }
  3178                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  3179                           
  3180                           ; BSR set to: 0
  3181  0116AA  0100               	movlb	0	; () banked
  3182  0116AC  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3183  0116AE  0D01               	mullw	1
  3184  0116B0  0E00               	movlw	low irobot_query_and_update@TXArray
  3185  0116B2  24F3               	addwf	prodl,w,c
  3186  0116B4  6ED9               	movwf	fsr2l,c
  3187  0116B6  0E02               	movlw	high irobot_query_and_update@TXArray
  3188  0116B8  20F4               	addwfc	prodh,w,c
  3189  0116BA  6EDA               	movwf	fsr2h,c
  3190  0116BC  50DF               	movf	indf2,w,c
  3191  0116BE  ECEB  F099         	call	_get_packet_size
  3192  0116C2  0100               	movlb	0	; () banked
  3193  0116C4  27D0               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  3194                           
  3195                           ; BSR set to: 0
  3196  0116C6  0100               	movlb	0	; () banked
  3197  0116C8  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3198  0116CA                     l2160:
  3199                           
  3200                           ; BSR set to: 0
  3201                           
  3202                           ; BSR set to: 0
  3203  0116CA  0100               	movlb	0	; () banked
  3204  0116CC  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3205  0116CE  0100               	movlb	0	; () banked
  3206  0116D0  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3207  0116D2  B0D8               	btfsc	status,0,c
  3208  0116D4  0012               	return	
  3209  0116D6  D79B               	goto	l2161
  3210  0116D8                     __end_of_irobot_query_and_update:
  3211                           	opt stack 0
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           prodh	equ	0xFF4
  3217                           prodl	equ	0xFF3
  3218                           postinc0	equ	0xFEE
  3219                           wreg	equ	0xFE8
  3220                           postdec1	equ	0xFE5
  3221                           fsr1h	equ	0xFE2
  3222                           fsr1l	equ	0xFE1
  3223                           indf2	equ	0xFDF
  3224                           fsr2h	equ	0xFDA
  3225                           fsr2l	equ	0xFD9
  3226                           status	equ	0xFD8
  3227                           
  3228 ;; *************** function _rx_assign *****************
  3229 ;; Defined at:
  3230 ;;		line 74 in file "Library/iRobotSerial.c"
  3231 ;; Parameters:    Size  Location     Type
  3232 ;;  packetID        1    wreg     unsigned char 
  3233 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  3234 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  3235 ;; Auto vars:     Size  Location     Type
  3236 ;;  packetID        1    5[BANK0 ] unsigned char 
  3237 ;; Return value:  Size  Location     Type
  3238 ;;                  1    wreg      void 
  3239 ;; Registers used:
  3240 ;;		wreg, status,2, status,0, cstack
  3241 ;; Tracked objects:
  3242 ;;		On entry : 0/0
  3243 ;;		On exit  : 0/0
  3244 ;;		Unchanged: 0/0
  3245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3246 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3247 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3249 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3250 ;;Total ram usage:        5 bytes
  3251 ;; Hardware stack levels used:    1
  3252 ;; Hardware stack levels required when called:    8
  3253 ;; This function calls:
  3254 ;;		_sort_iRBumpDrop
  3255 ;; This function is called by:
  3256 ;;		_irobot_query_and_update
  3257 ;; This function uses a non-reentrant model
  3258 ;;
  3259                           
  3260                           	psect	text5
  3261  011FE8                     __ptext5:
  3262                           	opt stack 0
  3263  011FE8                     _rx_assign:
  3264                           	opt stack 20
  3265                           
  3266                           ; BSR set to: 0
  3267                           ;incstack = 0
  3268                           ;rx_assign@packetID stored from wreg
  3269  011FE8  0100               	movlb	0	; () banked
  3270  011FEA  6FBA               	movwf	rx_assign@packetID& (0+255),b
  3271                           
  3272                           ;iRobotSerial.c: 75: switch (packetID){
  3273  011FEC  D057               	goto	l2094
  3274  011FEE                     l2095:
  3275                           
  3276                           ; BSR set to: 0
  3277  011FEE  C0B6  F034         	movff	rx_assign@packetIDValue,_iRBumpDrop
  3278                           
  3279                           ; BSR set to: 0
  3280  011FF2  ECA8  F096         	call	_sort_iRBumpDrop	;wreg free
  3281  011FF6  0012               	return	
  3282  011FF8                     l2097:
  3283                           
  3284                           ; BSR set to: 0
  3285  011FF8  C0B6  F033         	movff	rx_assign@packetIDValue,_iRWall
  3286  011FFC  0012               	return	
  3287  011FFE                     l2098:
  3288                           
  3289                           ; BSR set to: 0
  3290  011FFE  C0B6  F032         	movff	rx_assign@packetIDValue,_iRCliffL
  3291  012002  0012               	return	
  3292  012004                     l2099:
  3293                           
  3294                           ; BSR set to: 0
  3295  012004  C0B6  F031         	movff	rx_assign@packetIDValue,_iRCliffFL
  3296  012008  0012               	return	
  3297  01200A                     l2100:
  3298                           
  3299                           ; BSR set to: 0
  3300  01200A  C0B6  F030         	movff	rx_assign@packetIDValue,_iRCliffFR
  3301  01200E  0012               	return	
  3302  012010                     l2101:
  3303                           
  3304                           ; BSR set to: 0
  3305  012010  C0B6  F02F         	movff	rx_assign@packetIDValue,_iRCliffR
  3306  012014  0012               	return	
  3307  012016                     l2102:
  3308                           
  3309                           ; BSR set to: 0
  3310  012016  C0B6  F02E         	movff	rx_assign@packetIDValue,_iRVirtualWall
  3311  01201A  0012               	return	
  3312  01201C                     
  3313                           ; BSR set to: 0
  3314                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  3315                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  3316                           
  3317                           ; BSR set to: 0
  3318  01201C  0100               	movlb	0	; () banked
  3319  01201E  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3320  012020  0100               	movlb	0	; () banked
  3321  012022  A4D8               	btfss	status,2,c
  3322  012024  D005               	goto	l2105
  3323                           
  3324                           ; BSR set to: 0
  3325  012026  C0B6  F064         	movff	rx_assign@packetIDValue,_iRDistanceSS
  3326  01202A  0100               	movlb	0	; () banked
  3327  01202C  6B65               	clrf	(_iRDistanceSS+1)& (0+255),b
  3328  01202E  0012               	return	
  3329  012030                     l2105:
  3330                           
  3331                           ; BSR set to: 0
  3332  012030  C0B6  F066         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  3333  012034  0100               	movlb	0	; () banked
  3334  012036  6B67               	clrf	(_iRDistanceSS+3)& (0+255),b
  3335                           
  3336                           ; BSR set to: 0
  3337  012038  0100               	movlb	0	; () banked
  3338  01203A  5164               	movf	_iRDistanceSS& (0+255),w,b
  3339  01203C  0100               	movlb	0	; () banked
  3340  01203E  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3341  012040  6BB8               	clrf	??_rx_assign& (0+255),b
  3342  012042  0100               	movlb	0	; () banked
  3343  012044  5166               	movf	(_iRDistanceSS+2)& (0+255),w,b
  3344  012046  0100               	movlb	0	; () banked
  3345  012048  25B8               	addwf	??_rx_assign& (0+255),w,b
  3346  01204A  0100               	movlb	0	; () banked
  3347  01204C  6F75               	movwf	_iRDistance& (0+255),b
  3348  01204E  0100               	movlb	0	; () banked
  3349  012050  5167               	movf	(_iRDistanceSS+3)& (0+255),w,b
  3350  012052  0100               	movlb	0	; () banked
  3351  012054  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3352  012056  0100               	movlb	0	; () banked
  3353  012058  6F76               	movwf	(_iRDistance+1)& (0+255),b
  3354                           
  3355                           ; BSR set to: 0
  3356  01205A  0012               	return	
  3357  01205C                     
  3358                           ; BSR set to: 0
  3359                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  3360                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  3361                           
  3362                           ; BSR set to: 0
  3363  01205C  0100               	movlb	0	; () banked
  3364  01205E  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3365  012060  0100               	movlb	0	; () banked
  3366  012062  A4D8               	btfss	status,2,c
  3367  012064  D005               	goto	l2110
  3368                           
  3369                           ; BSR set to: 0
  3370  012066  C0B6  F060         	movff	rx_assign@packetIDValue,_iRAngleSS
  3371  01206A  0100               	movlb	0	; () banked
  3372  01206C  6B61               	clrf	(_iRAngleSS+1)& (0+255),b
  3373  01206E  0012               	return	
  3374  012070                     l2110:
  3375                           
  3376                           ; BSR set to: 0
  3377  012070  C0B6  F062         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  3378  012074  0100               	movlb	0	; () banked
  3379  012076  6B63               	clrf	(_iRAngleSS+3)& (0+255),b
  3380                           
  3381                           ; BSR set to: 0
  3382  012078  0100               	movlb	0	; () banked
  3383  01207A  5160               	movf	_iRAngleSS& (0+255),w,b
  3384  01207C  0100               	movlb	0	; () banked
  3385  01207E  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3386  012080  6BB8               	clrf	??_rx_assign& (0+255),b
  3387  012082  0100               	movlb	0	; () banked
  3388  012084  5162               	movf	(_iRAngleSS+2)& (0+255),w,b
  3389  012086  0100               	movlb	0	; () banked
  3390  012088  25B8               	addwf	??_rx_assign& (0+255),w,b
  3391  01208A  0100               	movlb	0	; () banked
  3392  01208C  6F77               	movwf	_iRAngle& (0+255),b
  3393  01208E  0100               	movlb	0	; () banked
  3394  012090  5163               	movf	(_iRAngleSS+3)& (0+255),w,b
  3395  012092  0100               	movlb	0	; () banked
  3396  012094  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3397  012096  0100               	movlb	0	; () banked
  3398  012098  6F78               	movwf	(_iRAngle+1)& (0+255),b
  3399                           
  3400                           ; BSR set to: 0
  3401                           ;iRobotSerial.c: 89: }
  3402                           
  3403                           ; BSR set to: 0
  3404  01209A  0012               	return	
  3405  01209C                     l2094:
  3406                           
  3407                           ; BSR set to: 0
  3408  01209C  0100               	movlb	0	; () banked
  3409  01209E  51BA               	movf	rx_assign@packetID& (0+255),w,b
  3410                           
  3411                           ; Switch size 1, requested type "space"
  3412                           ; Number of cases is 9, Range of values is 7 to 20
  3413                           ; switch strategies available:
  3414                           ; Name         Instructions Cycles
  3415                           ; simple_byte           28    15 (average)
  3416                           ;	Chosen strategy is simple_byte
  3417  0120A0  0A07               	xorlw	7	; case 7
  3418  0120A2  B4D8               	btfsc	status,2,c
  3419  0120A4  D7A4               	goto	l2095
  3420  0120A6  0A0F               	xorlw	15	; case 8
  3421  0120A8  B4D8               	btfsc	status,2,c
  3422  0120AA  D7A6               	goto	l2097
  3423  0120AC  0A01               	xorlw	1	; case 9
  3424  0120AE  B4D8               	btfsc	status,2,c
  3425  0120B0  D7A6               	goto	l2098
  3426  0120B2  0A03               	xorlw	3	; case 10
  3427  0120B4  B4D8               	btfsc	status,2,c
  3428  0120B6  D7A6               	goto	l2099
  3429  0120B8  0A01               	xorlw	1	; case 11
  3430  0120BA  B4D8               	btfsc	status,2,c
  3431  0120BC  D7A6               	goto	l2100
  3432  0120BE  0A07               	xorlw	7	; case 12
  3433  0120C0  B4D8               	btfsc	status,2,c
  3434  0120C2  D7A6               	goto	l2101
  3435  0120C4  0A01               	xorlw	1	; case 13
  3436  0120C6  B4D8               	btfsc	status,2,c
  3437  0120C8  D7A6               	goto	l2102
  3438  0120CA  0A1E               	xorlw	30	; case 19
  3439  0120CC  B4D8               	btfsc	status,2,c
  3440  0120CE  D7A6               	goto	l2103
  3441  0120D0  0A07               	xorlw	7	; case 20
  3442  0120D2  A4D8               	btfss	status,2,c
  3443  0120D4  0012               	return	
  3444  0120D6  D7C2               	goto	l2108
  3445  0120D8                     __end_of_rx_assign:
  3446                           	opt stack 0
  3447                           tblptru	equ	0xFF8
  3448                           tblptrh	equ	0xFF7
  3449                           tblptrl	equ	0xFF6
  3450                           tablat	equ	0xFF5
  3451                           prodh	equ	0xFF4
  3452                           prodl	equ	0xFF3
  3453                           postinc0	equ	0xFEE
  3454                           wreg	equ	0xFE8
  3455                           postdec1	equ	0xFE5
  3456                           fsr1h	equ	0xFE2
  3457                           fsr1l	equ	0xFE1
  3458                           indf2	equ	0xFDF
  3459                           fsr2h	equ	0xFDA
  3460                           fsr2l	equ	0xFD9
  3461                           status	equ	0xFD8
  3462                           
  3463 ;; *************** function _sort_iRBumpDrop *****************
  3464 ;; Defined at:
  3465 ;;		line 92 in file "Library/iRobotSerial.c"
  3466 ;; Parameters:    Size  Location     Type
  3467 ;;		None
  3468 ;; Auto vars:     Size  Location     Type
  3469 ;;		None
  3470 ;; Return value:  Size  Location     Type
  3471 ;;                  1    wreg      void 
  3472 ;; Registers used:
  3473 ;;		wreg, status,2, status,0
  3474 ;; Tracked objects:
  3475 ;;		On entry : 0/0
  3476 ;;		On exit  : 0/0
  3477 ;;		Unchanged: 0/0
  3478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3481 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3482 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3483 ;;Total ram usage:        1 bytes
  3484 ;; Hardware stack levels used:    1
  3485 ;; Hardware stack levels required when called:    7
  3486 ;; This function calls:
  3487 ;;		Nothing
  3488 ;; This function is called by:
  3489 ;;		_rx_assign
  3490 ;; This function uses a non-reentrant model
  3491 ;;
  3492                           
  3493                           	psect	text6
  3494  012D50                     __ptext6:
  3495                           	opt stack 0
  3496  012D50                     _sort_iRBumpDrop:
  3497                           	opt stack 20
  3498                           
  3499                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  3500                           
  3501                           ;incstack = 0
  3502  012D50  A034               	btfss	_iRBumpDrop,0,c
  3503  012D52  D002               	goto	l2117
  3504  012D54  0E01               	movlw	1
  3505  012D56  D001               	goto	L1
  3506  012D58                     l2117:
  3507                           
  3508                           ; BSR set to: 0
  3509  012D58  0E00               	movlw	0
  3510  012D5A                     L1:
  3511  012D5A  0100               	movlb	0	; () banked
  3512  012D5C  6F87               	movwf	_iRBumpRight& (0+255),b
  3513                           
  3514                           ; BSR set to: 0
  3515                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  3516                           
  3517                           ; BSR set to: 0
  3518  012D5E  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3519  012D62  0100               	movlb	0	; () banked
  3520  012D64  90D8               	bcf	status,0,c
  3521  012D66  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3522  012D68  0100               	movlb	0	; () banked
  3523  012D6A  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3524  012D6C  D002               	goto	l2121
  3525                           
  3526                           ; BSR set to: 0
  3527  012D6E  0E01               	movlw	1
  3528  012D70  D001               	goto	L2
  3529  012D72                     l2121:
  3530                           
  3531                           ; BSR set to: 0
  3532                           
  3533                           ; BSR set to: 0
  3534  012D72  0E00               	movlw	0
  3535  012D74                     L2:
  3536  012D74  0100               	movlb	0	; () banked
  3537  012D76  6F88               	movwf	_iRBumpLeft& (0+255),b
  3538                           
  3539                           ; BSR set to: 0
  3540                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  3541                           
  3542                           ; BSR set to: 0
  3543  012D78  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3544  012D7C  0100               	movlb	0	; () banked
  3545  012D7E  90D8               	bcf	status,0,c
  3546  012D80  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3547  012D82  0100               	movlb	0	; () banked
  3548  012D84  90D8               	bcf	status,0,c
  3549  012D86  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3550  012D88  0100               	movlb	0	; () banked
  3551  012D8A  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3552  012D8C  D002               	goto	l2125
  3553                           
  3554                           ; BSR set to: 0
  3555  012D8E  0E01               	movlw	1
  3556  012D90  D001               	goto	L3
  3557  012D92                     l2125:
  3558                           
  3559                           ; BSR set to: 0
  3560                           
  3561                           ; BSR set to: 0
  3562  012D92  0E00               	movlw	0
  3563  012D94                     L3:
  3564  012D94  6E2D               	movwf	_iRDropRight,c
  3565                           
  3566                           ; BSR set to: 0
  3567                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  3568                           
  3569                           ; BSR set to: 0
  3570  012D96  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3571  012D9A  0100               	movlb	0	; () banked
  3572  012D9C  90D8               	bcf	status,0,c
  3573  012D9E  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3574  012DA0  0100               	movlb	0	; () banked
  3575  012DA2  90D8               	bcf	status,0,c
  3576  012DA4  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3577  012DA6  0100               	movlb	0	; () banked
  3578  012DA8  90D8               	bcf	status,0,c
  3579  012DAA  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3580  012DAC  0100               	movlb	0	; () banked
  3581  012DAE  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3582  012DB0  D002               	goto	l2129
  3583                           
  3584                           ; BSR set to: 0
  3585  012DB2  0E01               	movlw	1
  3586  012DB4  D001               	goto	L4
  3587  012DB6                     l2129:
  3588                           
  3589                           ; BSR set to: 0
  3590                           
  3591                           ; BSR set to: 0
  3592  012DB6  0E00               	movlw	0
  3593  012DB8                     L4:
  3594  012DB8  0100               	movlb	0	; () banked
  3595  012DBA  6F86               	movwf	_iRDropLeft& (0+255),b
  3596                           
  3597                           ; BSR set to: 0
  3598                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  3599                           
  3600                           ; BSR set to: 0
  3601  012DBC  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3602  012DC0  0100               	movlb	0	; () banked
  3603  012DC2  3BB5               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  3604  012DC4  0E0F               	movlw	15
  3605  012DC6  17B5               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  3606  012DC8  0100               	movlb	0	; () banked
  3607  012DCA  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3608  012DCC  D004               	goto	l2133
  3609                           
  3610                           ; BSR set to: 0
  3611  012DCE  0E01               	movlw	1
  3612  012DD0  0100               	movlb	0	; () banked
  3613  012DD2  6F85               	movwf	_iRDropCaster& (0+255),b
  3614  012DD4  0012               	return	
  3615  012DD6                     l2133:
  3616                           
  3617                           ; BSR set to: 0
  3618                           
  3619                           ; BSR set to: 0
  3620  012DD6  0E00               	movlw	0
  3621  012DD8  0100               	movlb	0	; () banked
  3622  012DDA  6F85               	movwf	_iRDropCaster& (0+255),b
  3623  012DDC  0012               	return	
  3624  012DDE                     __end_of_sort_iRBumpDrop:
  3625                           	opt stack 0
  3626                           tblptru	equ	0xFF8
  3627                           tblptrh	equ	0xFF7
  3628                           tblptrl	equ	0xFF6
  3629                           tablat	equ	0xFF5
  3630                           prodh	equ	0xFF4
  3631                           prodl	equ	0xFF3
  3632                           postinc0	equ	0xFEE
  3633                           wreg	equ	0xFE8
  3634                           postdec1	equ	0xFE5
  3635                           fsr1h	equ	0xFE2
  3636                           fsr1l	equ	0xFE1
  3637                           indf2	equ	0xFDF
  3638                           fsr2h	equ	0xFDA
  3639                           fsr2l	equ	0xFD9
  3640                           status	equ	0xFD8
  3641                           
  3642 ;; *************** function _get_packet_size *****************
  3643 ;; Defined at:
  3644 ;;		line 60 in file "Library/iRobotSerial.c"
  3645 ;; Parameters:    Size  Location     Type
  3646 ;;  packetID        1    wreg     unsigned char 
  3647 ;; Auto vars:     Size  Location     Type
  3648 ;;  packetID        1    0[BANK0 ] unsigned char 
  3649 ;; Return value:  Size  Location     Type
  3650 ;;                  1    wreg      unsigned char 
  3651 ;; Registers used:
  3652 ;;		wreg, status,2, status,0
  3653 ;; Tracked objects:
  3654 ;;		On entry : 0/0
  3655 ;;		On exit  : 0/0
  3656 ;;		Unchanged: 0/0
  3657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3659 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3661 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3662 ;;Total ram usage:        1 bytes
  3663 ;; Hardware stack levels used:    1
  3664 ;; Hardware stack levels required when called:    7
  3665 ;; This function calls:
  3666 ;;		Nothing
  3667 ;; This function is called by:
  3668 ;;		_irobot_query_and_update
  3669 ;; This function uses a non-reentrant model
  3670 ;;
  3671                           
  3672                           	psect	text7
  3673  0133D6                     __ptext7:
  3674                           	opt stack 0
  3675  0133D6                     _get_packet_size:
  3676                           	opt stack 21
  3677                           
  3678                           ; BSR set to: 0
  3679                           ;incstack = 0
  3680                           ;get_packet_size@packetID stored from wreg
  3681  0133D6  0100               	movlb	0	; () banked
  3682  0133D8  6FB5               	movwf	get_packet_size@packetID& (0+255),b
  3683                           
  3684                           ;iRobotSerial.c: 61: switch (packetID){
  3685  0133DA  D012               	goto	l2080
  3686  0133DC  0E01               	movlw	1
  3687  0133DE  0012               	return	
  3688  0133E0  0E01               	movlw	1
  3689  0133E2  0012               	return	
  3690  0133E4  0E01               	movlw	1
  3691  0133E6  0012               	return	
  3692  0133E8  0E01               	movlw	1
  3693  0133EA  0012               	return	
  3694  0133EC  0E01               	movlw	1
  3695  0133EE  0012               	return	
  3696  0133F0  0E01               	movlw	1
  3697  0133F2  0012               	return	
  3698  0133F4  0E01               	movlw	1
  3699  0133F6  0012               	return	
  3700  0133F8  0E02               	movlw	2
  3701  0133FA  0012               	return	
  3702  0133FC  0E02               	movlw	2
  3703                           
  3704                           ;iRobotSerial.c: 71: }
  3705  0133FE  0012               	return	
  3706  013400                     l2080:
  3707  013400  0100               	movlb	0	; () banked
  3708  013402  51B5               	movf	get_packet_size@packetID& (0+255),w,b
  3709                           
  3710                           ; Switch size 1, requested type "space"
  3711                           ; Number of cases is 9, Range of values is 7 to 20
  3712                           ; switch strategies available:
  3713                           ; Name         Instructions Cycles
  3714                           ; simple_byte           28    15 (average)
  3715                           ;	Chosen strategy is simple_byte
  3716  013404  0A07               	xorlw	7	; case 7
  3717  013406  B4D8               	btfsc	status,2,c
  3718  013408  D7E9               	goto	l2081
  3719  01340A  0A0F               	xorlw	15	; case 8
  3720  01340C  B4D8               	btfsc	status,2,c
  3721  01340E  D7E8               	goto	l2083
  3722  013410  0A01               	xorlw	1	; case 9
  3723  013412  B4D8               	btfsc	status,2,c
  3724  013414  D7E7               	goto	l2084
  3725  013416  0A03               	xorlw	3	; case 10
  3726  013418  B4D8               	btfsc	status,2,c
  3727  01341A  D7E6               	goto	l2085
  3728  01341C  0A01               	xorlw	1	; case 11
  3729  01341E  B4D8               	btfsc	status,2,c
  3730  013420  D7E5               	goto	l2086
  3731  013422  0A07               	xorlw	7	; case 12
  3732  013424  B4D8               	btfsc	status,2,c
  3733  013426  D7E4               	goto	l2087
  3734  013428  0A01               	xorlw	1	; case 13
  3735  01342A  B4D8               	btfsc	status,2,c
  3736  01342C  D7E3               	goto	l2088
  3737  01342E  0A1E               	xorlw	30	; case 19
  3738  013430  B4D8               	btfsc	status,2,c
  3739  013432  D7E2               	goto	l2089
  3740  013434  0A07               	xorlw	7	; case 20
  3741  013436  A4D8               	btfss	status,2,c
  3742  013438  0012               	return	
  3743  01343A  D7E0               	goto	l2090
  3744  01343C                     __end_of_get_packet_size:
  3745                           	opt stack 0
  3746                           tblptru	equ	0xFF8
  3747                           tblptrh	equ	0xFF7
  3748                           tblptrl	equ	0xFF6
  3749                           tablat	equ	0xFF5
  3750                           prodh	equ	0xFF4
  3751                           prodl	equ	0xFF3
  3752                           postinc0	equ	0xFEE
  3753                           wreg	equ	0xFE8
  3754                           postdec1	equ	0xFE5
  3755                           fsr1h	equ	0xFE2
  3756                           fsr1l	equ	0xFE1
  3757                           indf2	equ	0xFDF
  3758                           fsr2h	equ	0xFDA
  3759                           fsr2l	equ	0xFD9
  3760                           status	equ	0xFD8
  3761                           
  3762 ;; *************** function _eusart_getch *****************
  3763 ;; Defined at:
  3764 ;;		line 125 in file "Library/iRobotSerial.c"
  3765 ;; Parameters:    Size  Location     Type
  3766 ;;		None
  3767 ;; Auto vars:     Size  Location     Type
  3768 ;;		None
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  1    wreg      unsigned char 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3782 ;;Total ram usage:        0 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    7
  3785 ;; This function calls:
  3786 ;;		Nothing
  3787 ;; This function is called by:
  3788 ;;		_irobot_query_and_update
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text8
  3793  014044                     __ptext8:
  3794                           	opt stack 0
  3795  014044                     _eusart_getch:
  3796                           	opt stack 21
  3797                           
  3798                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  3799                           
  3800                           ;incstack = 0
  3801  014044  AA9E               	btfss	3998,5,c	;volatile
  3802  014046  D7FE               	goto	_eusart_getch
  3803                           
  3804                           ;iRobotSerial.c: 127: return RCREG1;
  3805  014048  50AF               	movf	4015,w,c	;volatile
  3806  01404A  0012               	return	
  3807  01404C                     __end_of_eusart_getch:
  3808                           	opt stack 0
  3809                           tblptru	equ	0xFF8
  3810                           tblptrh	equ	0xFF7
  3811                           tblptrl	equ	0xFF6
  3812                           tablat	equ	0xFF5
  3813                           prodh	equ	0xFF4
  3814                           prodl	equ	0xFF3
  3815                           postinc0	equ	0xFEE
  3816                           wreg	equ	0xFE8
  3817                           postdec1	equ	0xFE5
  3818                           fsr1h	equ	0xFE2
  3819                           fsr1l	equ	0xFE1
  3820                           indf2	equ	0xFDF
  3821                           fsr2h	equ	0xFDA
  3822                           fsr2l	equ	0xFD9
  3823                           status	equ	0xFD8
  3824                           
  3825 ;; *************** function _printf *****************
  3826 ;; Defined at:
  3827 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  3828 ;; Parameters:    Size  Location     Type
  3829 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  3830 ;;		 -> STR_2(46), STR_1(3), 
  3831 ;; Auto vars:     Size  Location     Type
  3832 ;;  tmpval          4    0        struct .
  3833 ;;  cp              3    0        PTR const unsigned char 
  3834 ;;  ap              2   33[BANK0 ] PTR void [1]
  3835 ;;		 -> ?_printf(2), 
  3836 ;;  val             2   30[BANK0 ] unsigned int 
  3837 ;;  len             2    0        unsigned int 
  3838 ;;  c               1   35[BANK0 ] char 
  3839 ;;  prec            1   32[BANK0 ] char 
  3840 ;;  flag            1   29[BANK0 ] unsigned char 
  3841 ;; Return value:  Size  Location     Type
  3842 ;;                  2   21[BANK0 ] int 
  3843 ;; Registers used:
  3844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3845 ;; Tracked objects:
  3846 ;;		On entry : 0/0
  3847 ;;		On exit  : 0/0
  3848 ;;		Unchanged: 0/0
  3849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3850 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3851 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3853 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3854 ;;Total ram usage:       15 bytes
  3855 ;; Hardware stack levels used:    1
  3856 ;; Hardware stack levels required when called:   12
  3857 ;; This function calls:
  3858 ;;		___lwdiv
  3859 ;;		___lwmod
  3860 ;;		_putch
  3861 ;; This function is called by:
  3862 ;;		_main
  3863 ;; This function uses a non-reentrant model
  3864 ;;
  3865                           
  3866                           	psect	text9
  3867  0119CA                     __ptext9:
  3868                           	opt stack 0
  3869  0119CA                     _printf:
  3870                           	opt stack 18
  3871                           
  3872                           ;doprnt.c: 466: va_list ap;
  3873                           ;doprnt.c: 499: signed char c;
  3874                           ;doprnt.c: 506: signed char prec;
  3875                           ;doprnt.c: 508: unsigned char flag;
  3876                           ;doprnt.c: 523: union {
  3877                           ;doprnt.c: 524: unsigned long vd;
  3878                           ;doprnt.c: 525: double integ;
  3879                           ;doprnt.c: 526: } tmpval;
  3880                           ;doprnt.c: 528: unsigned int val;
  3881                           ;doprnt.c: 529: unsigned len;
  3882                           ;doprnt.c: 530: const char * cp;
  3883                           ;doprnt.c: 533: *ap = __va_start();
  3884                           
  3885                           ;incstack = 0
  3886  0119CA  0ECC               	movlw	low (?_printf+2)
  3887  0119CC  0100               	movlb	0	; () banked
  3888  0119CE  6FD6               	movwf	printf@ap& (0+255),b
  3889  0119D0  0E00               	movlw	high (?_printf+2)
  3890  0119D2  0100               	movlb	0	; () banked
  3891  0119D4  6FD7               	movwf	(printf@ap+1)& (0+255),b
  3892                           
  3893                           ;doprnt.c: 536: while(c = *f++) {
  3894  0119D6  D09E               	goto	u8270
  3895  0119D8                     
  3896                           ; BSR set to: 0
  3897                           ;doprnt.c: 538: if(c != '%')
  3898                           
  3899                           ; BSR set to: 0
  3900  0119D8  0E25               	movlw	37
  3901  0119DA  0100               	movlb	0	; () banked
  3902  0119DC  19D8               	xorwf	printf@c& (0+255),w,b
  3903  0119DE  B4D8               	btfsc	status,2,c
  3904  0119E0  D005               	goto	l2266
  3905                           
  3906                           ; BSR set to: 0
  3907                           ;doprnt.c: 540: {
  3908                           ;doprnt.c: 541: (putch(c) );
  3909  0119E2  0100               	movlb	0	; () banked
  3910  0119E4  51D8               	movf	printf@c& (0+255),w,b
  3911  0119E6  ECE3  F09F         	call	_putch
  3912                           
  3913                           ;doprnt.c: 542: continue;
  3914  0119EA  D094               	goto	u8270
  3915  0119EC                     l2266:
  3916                           
  3917                           ;doprnt.c: 543: }
  3918                           ;doprnt.c: 548: flag = 0;
  3919  0119EC  0E00               	movlw	0
  3920  0119EE  0100               	movlb	0	; () banked
  3921  0119F0  6FD2               	movwf	printf@flag& (0+255),b
  3922                           
  3923                           ;doprnt.c: 635: switch(c = *f++) {
  3924  0119F2  D015               	goto	l2267
  3925  0119F4                     
  3926                           ; BSR set to: 0
  3927                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  3928                           
  3929                           ; BSR set to: 0
  3930  0119F4  C0D6  FFD9         	movff	printf@ap,fsr2l
  3931  0119F8  C0D7  FFDA         	movff	printf@ap+1,fsr2h
  3932  0119FC  50DF               	movf	indf2,w,c
  3933  0119FE  0100               	movlb	0	; () banked
  3934  011A00  6FD8               	movwf	printf@c& (0+255),b
  3935                           
  3936                           ; BSR set to: 0
  3937  011A02  0E02               	movlw	2
  3938  011A04  0100               	movlb	0	; () banked
  3939  011A06  27D6               	addwf	printf@ap& (0+255),f,b
  3940  011A08  0E00               	movlw	0
  3941  011A0A  23D7               	addwfc	(printf@ap+1)& (0+255),f,b
  3942  011A0C                     
  3943                           ; BSR set to: 0
  3944                           ;doprnt.c: 809: (putch(c) );
  3945                           
  3946                           ; BSR set to: 0
  3947  011A0C  0100               	movlb	0	; () banked
  3948  011A0E  51D8               	movf	printf@c& (0+255),w,b
  3949  011A10  ECE3  F09F         	call	_putch
  3950                           
  3951                           ;doprnt.c: 810: continue;
  3952  011A14  D07F               	goto	u8270
  3953  011A16                     
  3954                           ;doprnt.c: 818: flag |= 0xC0;
  3955  011A16  0EC0               	movlw	192
  3956  011A18  0100               	movlb	0	; () banked
  3957  011A1A  13D2               	iorwf	printf@flag& (0+255),f,b
  3958                           
  3959                           ; BSR set to: 0
  3960                           ;doprnt.c: 822: }
  3961                           
  3962                           ;doprnt.c: 819: break;
  3963  011A1C  D018               	goto	l2273
  3964  011A1E                     l2267:
  3965                           
  3966                           ; BSR set to: 0
  3967                           
  3968                           ; BSR set to: 0
  3969  011A1E  C0CA  FFF6         	movff	printf@f,tblptrl
  3970  011A22  C0CB  FFF7         	movff	printf@f+1,tblptrh
  3971  011A26  0100               	movlb	0	; () banked
  3972  011A28  4BCA               	infsnz	printf@f& (0+255),f,b
  3973  011A2A  2BCB               	incf	(printf@f+1)& (0+255),f,b
  3974  011A2C                     	if	0	;tblptru may be non-zero
  3975  011A2C                     	endif
  3976  011A2C                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  3977  011A2C  0E00               	movlw	low (__mediumconst shr (0+16))
  3978  011A2E  6EF8               	movwf	tblptru,c
  3979  011A30                     	endif
  3980  011A30  0008               	tblrd		*
  3981  011A32  CFF5 F0D8          	movff	tablat,printf@c
  3982  011A36  0100               	movlb	0	; () banked
  3983  011A38  51D8               	movf	printf@c& (0+255),w,b
  3984                           
  3985                           ; Switch size 1, requested type "space"
  3986                           ; Number of cases is 3, Range of values is 0 to 117
  3987                           ; switch strategies available:
  3988                           ; Name         Instructions Cycles
  3989                           ; simple_byte           10     6 (average)
  3990                           ;	Chosen strategy is simple_byte
  3991  011A3A  0A00               	xorlw	0	; case 0
  3992  011A3C  B4D8               	btfsc	status,2,c
  3993  011A3E  0012               	return	
  3994  011A40  0A63               	xorlw	99	; case 99
  3995  011A42  B4D8               	btfsc	status,2,c
  3996  011A44  D7D7               	goto	l2270
  3997  011A46  0A16               	xorlw	22	; case 117
  3998  011A48  B4D8               	btfsc	status,2,c
  3999  011A4A  D7E5               	goto	l2272
  4000  011A4C  D7DF               	goto	l2271
  4001  011A4E                     l2273:
  4002                           
  4003                           ; BSR set to: 0
  4004                           ;doprnt.c: 1273: {
  4005                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4006                           
  4007                           ; BSR set to: 0
  4008  011A4E  C0D6  FFD9         	movff	printf@ap,fsr2l
  4009  011A52  C0D7  FFDA         	movff	printf@ap+1,fsr2h
  4010  011A56  CFDE F0D3          	movff	postinc2,printf@val
  4011  011A5A  CFDD F0D4          	movff	postdec2,printf@val+1
  4012                           
  4013                           ; BSR set to: 0
  4014  011A5E  0E02               	movlw	2
  4015  011A60  0100               	movlb	0	; () banked
  4016  011A62  27D6               	addwf	printf@ap& (0+255),f,b
  4017  011A64  0E00               	movlw	0
  4018  011A66  23D7               	addwfc	(printf@ap+1)& (0+255),f,b
  4019                           
  4020                           ; BSR set to: 0
  4021                           ;doprnt.c: 1287: }
  4022                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4023  011A68  0E01               	movlw	1
  4024  011A6A  0100               	movlb	0	; () banked
  4025  011A6C  6FD8               	movwf	printf@c& (0+255),b
  4026  011A6E  D018               	goto	l12069
  4027  011A70                     
  4028                           ; BSR set to: 0
  4029                           ;doprnt.c: 1306: if(val < dpowers[c])
  4030                           
  4031                           ; BSR set to: 0
  4032  011A70  0100               	movlb	0	; () banked
  4033  011A72  51D8               	movf	printf@c& (0+255),w,b
  4034  011A74  0D02               	mullw	2
  4035  011A76  0EC5               	movlw	low _dpowers
  4036  011A78  24F3               	addwf	prodl,w,c
  4037  011A7A  6EF6               	movwf	tblptrl,c
  4038  011A7C  0EFD               	movlw	high _dpowers
  4039  011A7E  20F4               	addwfc	prodh,w,c
  4040  011A80  6EF7               	movwf	tblptrh,c
  4041  011A82                     	if	1	;There are 3 active tblptr bytes
  4042  011A82  6AF8               	clrf	tblptru,c
  4043  011A84  0E00               	movlw	low (__mediumconst shr (0+16))
  4044  011A86  22F8               	addwfc	tblptru,f,c
  4045  011A88                     	endif
  4046  011A88  0009               	tblrd		*+
  4047  011A8A  50F5               	movf	tablat,w,c
  4048  011A8C  0100               	movlb	0	; () banked
  4049  011A8E  5DD3               	subwf	printf@val& (0+255),w,b
  4050  011A90  0009               	tblrd		*+
  4051  011A92  50F5               	movf	tablat,w,c
  4052  011A94  0100               	movlb	0	; () banked
  4053  011A96  59D4               	subwfb	(printf@val+1)& (0+255),w,b
  4054  011A98  A0D8               	btfss	status,0,c
  4055  011A9A  D007               	goto	u8260
  4056                           
  4057                           ; BSR set to: 0
  4058                           
  4059                           ; BSR set to: 0
  4060                           
  4061                           ; BSR set to: 0
  4062                           ;doprnt.c: 1307: break;
  4063  011A9C  0100               	movlb	0	; () banked
  4064  011A9E  2BD8               	incf	printf@c& (0+255),f,b
  4065  011AA0                     l12069:
  4066                           
  4067                           ; BSR set to: 0
  4068  011AA0  0E05               	movlw	5
  4069  011AA2  0100               	movlb	0	; () banked
  4070  011AA4  19D8               	xorwf	printf@c& (0+255),w,b
  4071  011AA6  A4D8               	btfss	status,2,c
  4072  011AA8  D7E3               	goto	l2274
  4073  011AAA                     u8260:
  4074                           
  4075                           ; BSR set to: 0
  4076                           ;doprnt.c: 1422: {
  4077                           ;doprnt.c: 1469: }
  4078                           ;doprnt.c: 1472: prec = c;
  4079  011AAA  C0D8  F0D5         	movff	printf@c,printf@prec
  4080                           
  4081                           ;doprnt.c: 1474: while(prec--) {
  4082  011AAE  D02C               	goto	l2277
  4083  011AB0                     
  4084                           ; BSR set to: 0
  4085                           ;doprnt.c: 1478: {
  4086                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4087                           
  4088                           ; BSR set to: 0
  4089  011AB0  0100               	movlb	0	; () banked
  4090  011AB2  51D5               	movf	printf@prec& (0+255),w,b
  4091  011AB4  0D02               	mullw	2
  4092  011AB6  0EC5               	movlw	low _dpowers
  4093  011AB8  24F3               	addwf	prodl,w,c
  4094  011ABA  6EF6               	movwf	tblptrl,c
  4095  011ABC  0EFD               	movlw	high _dpowers
  4096  011ABE  20F4               	addwfc	prodh,w,c
  4097  011AC0  6EF7               	movwf	tblptrh,c
  4098  011AC2                     	if	1	;There are 3 active tblptr bytes
  4099  011AC2  6AF8               	clrf	tblptru,c
  4100  011AC4  0E00               	movlw	low (__mediumconst shr (0+16))
  4101  011AC6  22F8               	addwfc	tblptru,f,c
  4102  011AC8                     	endif
  4103  011AC8  0009               	tblrd		*+
  4104  011ACA  CFF5 F0B7          	movff	tablat,___lwdiv@divisor
  4105  011ACE  000A               	tblrd		*-
  4106  011AD0  CFF5 F0B8          	movff	tablat,___lwdiv@divisor+1
  4107  011AD4  C0D3  F0B5         	movff	printf@val,___lwdiv@dividend
  4108  011AD8  C0D4  F0B6         	movff	printf@val+1,___lwdiv@dividend+1
  4109  011ADC  ECB9  F097         	call	___lwdiv	;wreg free
  4110  011AE0  C0B5  F0BC         	movff	?___lwdiv,___lwmod@dividend
  4111  011AE4  C0B6  F0BD         	movff	?___lwdiv+1,___lwmod@dividend+1
  4112  011AE8  0E00               	movlw	0
  4113  011AEA  0100               	movlb	0	; () banked
  4114  011AEC  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
  4115  011AEE  0E0A               	movlw	10
  4116  011AF0  6FBE               	movwf	___lwmod@divisor& (0+255),b
  4117  011AF2  ECB5  F09A         	call	___lwmod	;wreg free
  4118  011AF6  0100               	movlb	0	; () banked
  4119  011AF8  51BC               	movf	?___lwmod& (0+255),w,b
  4120  011AFA  0F30               	addlw	48
  4121  011AFC  0100               	movlb	0	; () banked
  4122  011AFE  6FD8               	movwf	printf@c& (0+255),b
  4123                           
  4124                           ; BSR set to: 0
  4125                           ;doprnt.c: 1523: }
  4126                           ;doprnt.c: 1524: (putch(c) );
  4127  011B00  0100               	movlb	0	; () banked
  4128  011B02  51D8               	movf	printf@c& (0+255),w,b
  4129  011B04  ECE3  F09F         	call	_putch
  4130  011B08                     l2277:
  4131  011B08  0100               	movlb	0	; () banked
  4132  011B0A  07D5               	decf	printf@prec& (0+255),f,b
  4133  011B0C  0100               	movlb	0	; () banked
  4134  011B0E  29D5               	incf	printf@prec& (0+255),w,b
  4135  011B10  A4D8               	btfss	status,2,c
  4136  011B12  D7CE               	goto	l2278
  4137  011B14                     u8270:
  4138                           
  4139                           ; BSR set to: 0
  4140                           
  4141                           ; BSR set to: 0
  4142  011B14  C0CA  FFF6         	movff	printf@f,tblptrl
  4143  011B18  C0CB  FFF7         	movff	printf@f+1,tblptrh
  4144  011B1C  0100               	movlb	0	; () banked
  4145  011B1E  4BCA               	infsnz	printf@f& (0+255),f,b
  4146  011B20  2BCB               	incf	(printf@f+1)& (0+255),f,b
  4147  011B22                     	if	0	;tblptru may be non-zero
  4148  011B22                     	endif
  4149  011B22                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4150  011B22  0E00               	movlw	low (__mediumconst shr (0+16))
  4151  011B24  6EF8               	movwf	tblptru,c
  4152  011B26                     	endif
  4153  011B26  0008               	tblrd		*
  4154  011B28  CFF5 F0D8          	movff	tablat,printf@c
  4155  011B2C  0100               	movlb	0	; () banked
  4156  011B2E  51D8               	movf	printf@c& (0+255),w,b
  4157  011B30  B4D8               	btfsc	status,2,c
  4158  011B32  0012               	return	
  4159  011B34  D751               	goto	l2265
  4160  011B36                     __end_of_printf:
  4161                           	opt stack 0
  4162                           tblptru	equ	0xFF8
  4163                           tblptrh	equ	0xFF7
  4164                           tblptrl	equ	0xFF6
  4165                           tablat	equ	0xFF5
  4166                           prodh	equ	0xFF4
  4167                           prodl	equ	0xFF3
  4168                           postinc0	equ	0xFEE
  4169                           wreg	equ	0xFE8
  4170                           postdec1	equ	0xFE5
  4171                           fsr1h	equ	0xFE2
  4172                           fsr1l	equ	0xFE1
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function _putch *****************
  4181 ;; Defined at:
  4182 ;;		line 454 in file "Library/Console.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  c               1    wreg     unsigned char 
  4185 ;; Auto vars:     Size  Location     Type
  4186 ;;  c               1   20[BANK0 ] unsigned char 
  4187 ;; Return value:  Size  Location     Type
  4188 ;;                  1    wreg      void 
  4189 ;; Registers used:
  4190 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4191 ;; Tracked objects:
  4192 ;;		On entry : 0/0
  4193 ;;		On exit  : 0/0
  4194 ;;		Unchanged: 0/0
  4195 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4196 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4197 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4198 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4199 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4200 ;;Total ram usage:        1 bytes
  4201 ;; Hardware stack levels used:    1
  4202 ;; Hardware stack levels required when called:   11
  4203 ;; This function calls:
  4204 ;;		_Console_PrintChar
  4205 ;; This function is called by:
  4206 ;;		_printf
  4207 ;; This function uses a non-reentrant model
  4208 ;;
  4209                           
  4210                           	psect	text10
  4211  013FC6                     __ptext10:
  4212                           	opt stack 0
  4213  013FC6                     _putch:
  4214                           	opt stack 18
  4215                           
  4216                           ; BSR set to: 0
  4217                           ;incstack = 0
  4218                           ;putch@c stored from wreg
  4219  013FC6  0100               	movlb	0	; () banked
  4220  013FC8  6FC9               	movwf	putch@c& (0+255),b
  4221                           
  4222                           ;Console.c: 456: Console_PrintChar(c);
  4223  013FCA  0100               	movlb	0	; () banked
  4224  013FCC  51C9               	movf	putch@c& (0+255),w,b
  4225  013FCE  EC11  F089         	call	_Console_PrintChar
  4226  013FD2  0012               	return		;funcret
  4227  013FD4                     __end_of_putch:
  4228                           	opt stack 0
  4229                           tblptru	equ	0xFF8
  4230                           tblptrh	equ	0xFF7
  4231                           tblptrl	equ	0xFF6
  4232                           tablat	equ	0xFF5
  4233                           prodh	equ	0xFF4
  4234                           prodl	equ	0xFF3
  4235                           postinc0	equ	0xFEE
  4236                           wreg	equ	0xFE8
  4237                           postdec1	equ	0xFE5
  4238                           fsr1h	equ	0xFE2
  4239                           fsr1l	equ	0xFE1
  4240                           indf2	equ	0xFDF
  4241                           postinc2	equ	0xFDE
  4242                           postdec2	equ	0xFDD
  4243                           fsr2h	equ	0xFDA
  4244                           fsr2l	equ	0xFD9
  4245                           status	equ	0xFD8
  4246                           
  4247 ;; *************** function _Console_PrintChar *****************
  4248 ;; Defined at:
  4249 ;;		line 322 in file "Library/Console.c"
  4250 ;; Parameters:    Size  Location     Type
  4251 ;;  pInput          1    wreg     unsigned char 
  4252 ;; Auto vars:     Size  Location     Type
  4253 ;;  pInput          1   19[BANK0 ] unsigned char 
  4254 ;; Return value:  Size  Location     Type
  4255 ;;                  1    wreg      void 
  4256 ;; Registers used:
  4257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4258 ;; Tracked objects:
  4259 ;;		On entry : 0/0
  4260 ;;		On exit  : 0/0
  4261 ;;		Unchanged: 0/0
  4262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4263 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4265 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4266 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4267 ;;Total ram usage:        4 bytes
  4268 ;; Hardware stack levels used:    1
  4269 ;; Hardware stack levels required when called:   10
  4270 ;; This function calls:
  4271 ;;		_Console_Backspace
  4272 ;;		_Console_FormFeed
  4273 ;;		_Console_IncrementCursor
  4274 ;;		_Console_NewLine
  4275 ;;		_Console_ResetCursor
  4276 ;;		_Console_Tab
  4277 ;; This function is called by:
  4278 ;;		_putch
  4279 ;;		_Console_PrintString
  4280 ;; This function uses a non-reentrant model
  4281 ;;
  4282                           
  4283                           	psect	text11
  4284  011222                     __ptext11:
  4285                           	opt stack 0
  4286  011222                     _Console_PrintChar:
  4287                           	opt stack 18
  4288                           
  4289                           ;incstack = 0
  4290                           ;Console_PrintChar@pInput stored from wreg
  4291  011222  0100               	movlb	0	; () banked
  4292  011224  6FC8               	movwf	Console_PrintChar@pInput& (0+255),b
  4293                           
  4294                           ;Console.c: 324: switch(pInput)
  4295  011226  D0B1               	goto	l1036
  4296  011228                     
  4297                           ;Console.c: 327: case '\n':
  4298                           ;Console.c: 328: Console_NewLine();
  4299  011228  ECBD  F095         	call	_Console_NewLine	;wreg free
  4300                           
  4301                           ;Console.c: 329: return;
  4302  01122C  0012               	return	
  4303  01122E                     
  4304                           ;Console.c: 331: Console_Backspace();
  4305  01122E  EC17  F09B         	call	_Console_Backspace	;wreg free
  4306                           
  4307                           ;Console.c: 332: return;
  4308  011232  0012               	return	
  4309  011234                     
  4310                           ;Console.c: 334: Console_FormFeed();
  4311  011234  ECEF  F096         	call	_Console_FormFeed	;wreg free
  4312                           
  4313                           ;Console.c: 335: return;
  4314  011238  0012               	return	
  4315  01123A                     
  4316                           ;Console.c: 337: Console_Tab();
  4317  01123A  ECA0  F091         	call	_Console_Tab	;wreg free
  4318                           
  4319                           ;Console.c: 338: return;
  4320  01123E  0012               	return	
  4321  011240                     
  4322                           ;Console.c: 340: Console_IncrementCursor();
  4323  011240  EC1E  F09A         	call	_Console_IncrementCursor	;wreg free
  4324                           
  4325                           ;Console.c: 341: return;
  4326  011244  0012               	return	
  4327  011246                     
  4328                           ;Console.c: 343: Console_ResetCursor();
  4329  011246  EC1D  F09F         	call	_Console_ResetCursor	;wreg free
  4330                           
  4331                           ;Console.c: 344: return;
  4332  01124A  0012               	return	
  4333  01124C                     
  4334                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4335                           
  4336                           ;Console.c: 349: default:
  4337  01124C  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4338  011250  0E7F               	movlw	127
  4339  011252  0100               	movlb	0	; () banked
  4340  011254  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4341  011256  0100               	movlb	0	; () banked
  4342  011258  518C               	movf	_lBufferY& (0+255),w,b
  4343  01125A  0D14               	mullw	20
  4344  01125C  0EAA               	movlw	low _lBuffer
  4345  01125E  0100               	movlb	0	; () banked
  4346  011260  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4347  011262  0E04               	movlw	high _lBuffer
  4348  011264  0100               	movlb	0	; () banked
  4349  011266  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4350  011268  50F3               	movf	prodl,w,c
  4351  01126A  0100               	movlb	0	; () banked
  4352  01126C  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4353  01126E  50F4               	movf	prodh,w,c
  4354  011270  0100               	movlb	0	; () banked
  4355  011272  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4356  011274  0100               	movlb	0	; () banked
  4357  011276  518D               	movf	_lBufferX& (0+255),w,b
  4358  011278  0D01               	mullw	1
  4359  01127A  50F3               	movf	prodl,w,c
  4360  01127C  0100               	movlb	0	; () banked
  4361  01127E  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4362  011280  6ED9               	movwf	fsr2l,c
  4363  011282  50F4               	movf	prodh,w,c
  4364  011284  0100               	movlb	0	; () banked
  4365  011286  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4366  011288  6EDA               	movwf	fsr2h,c
  4367  01128A  50DF               	movf	indf2,w,c
  4368  01128C  0B7F               	andlw	127
  4369  01128E  0100               	movlb	0	; () banked
  4370  011290  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4371  011292  B4D8               	btfsc	status,2,c
  4372  011294  D02E               	goto	l1047
  4373                           
  4374                           ; BSR set to: 0
  4375                           ;Console.c: 351: {
  4376                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4377  011296  0E01               	movlw	1
  4378  011298  0100               	movlb	0	; () banked
  4379  01129A  6FFF               	movwf	_change& (0+255),b
  4380                           
  4381                           ; BSR set to: 0
  4382  01129C  0100               	movlb	0	; () banked
  4383  01129E  518C               	movf	_lBufferY& (0+255),w,b
  4384  0112A0  0D14               	mullw	20
  4385  0112A2  0EAA               	movlw	low _lBuffer
  4386  0112A4  0100               	movlb	0	; () banked
  4387  0112A6  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4388  0112A8  0E04               	movlw	high _lBuffer
  4389  0112AA  0100               	movlb	0	; () banked
  4390  0112AC  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4391  0112AE  50F3               	movf	prodl,w,c
  4392  0112B0  0100               	movlb	0	; () banked
  4393  0112B2  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4394  0112B4  50F4               	movf	prodh,w,c
  4395  0112B6  0100               	movlb	0	; () banked
  4396  0112B8  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4397  0112BA  0100               	movlb	0	; () banked
  4398  0112BC  518D               	movf	_lBufferX& (0+255),w,b
  4399  0112BE  0D01               	mullw	1
  4400  0112C0  50F3               	movf	prodl,w,c
  4401  0112C2  0100               	movlb	0	; () banked
  4402  0112C4  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4403  0112C6  6ED9               	movwf	fsr2l,c
  4404  0112C8  50F4               	movf	prodh,w,c
  4405  0112CA  0100               	movlb	0	; () banked
  4406  0112CC  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4407  0112CE  6EDA               	movwf	fsr2h,c
  4408  0112D0  0100               	movlb	0	; () banked
  4409  0112D2  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4410  0112D4  0980               	iorlw	128
  4411  0112D6  6EDF               	movwf	indf2,c
  4412                           
  4413                           ; BSR set to: 0
  4414                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4415  0112D8  0100               	movlb	0	; () banked
  4416  0112DA  518C               	movf	_lBufferY& (0+255),w,b
  4417  0112DC  0D02               	mullw	2
  4418  0112DE  0E00               	movlw	low _lCBuffer
  4419  0112E0  24F3               	addwf	prodl,w,c
  4420  0112E2  6ED9               	movwf	fsr2l,c
  4421  0112E4  0E03               	movlw	high _lCBuffer
  4422  0112E6  20F4               	addwfc	prodh,w,c
  4423  0112E8  6EDA               	movwf	fsr2h,c
  4424  0112EA  C0FD  FFDE         	movff	_gForecolour,postinc2
  4425  0112EE  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4426  0112F2                     l1047:
  4427                           
  4428                           ; BSR set to: 0
  4429                           ;Console.c: 354: }
  4430                           ;Console.c: 368: if(Console_IncrementCursor())
  4431                           
  4432                           ; BSR set to: 0
  4433  0112F2  EC1E  F09A         	call	_Console_IncrementCursor	;wreg free
  4434  0112F6  0900               	iorlw	0
  4435  0112F8  B4D8               	btfsc	status,2,c
  4436  0112FA  0012               	return	
  4437                           
  4438                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4439  0112FC  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4440  011300  0E7F               	movlw	127
  4441  011302  0100               	movlb	0	; () banked
  4442  011304  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4443  011306  0100               	movlb	0	; () banked
  4444  011308  518C               	movf	_lBufferY& (0+255),w,b
  4445  01130A  0D14               	mullw	20
  4446  01130C  0EAA               	movlw	low _lBuffer
  4447  01130E  0100               	movlb	0	; () banked
  4448  011310  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4449  011312  0E04               	movlw	high _lBuffer
  4450  011314  0100               	movlb	0	; () banked
  4451  011316  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4452  011318  50F3               	movf	prodl,w,c
  4453  01131A  0100               	movlb	0	; () banked
  4454  01131C  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4455  01131E  50F4               	movf	prodh,w,c
  4456  011320  0100               	movlb	0	; () banked
  4457  011322  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4458  011324  0100               	movlb	0	; () banked
  4459  011326  518D               	movf	_lBufferX& (0+255),w,b
  4460  011328  0D01               	mullw	1
  4461  01132A  50F3               	movf	prodl,w,c
  4462  01132C  0100               	movlb	0	; () banked
  4463  01132E  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4464  011330  6ED9               	movwf	fsr2l,c
  4465  011332  50F4               	movf	prodh,w,c
  4466  011334  0100               	movlb	0	; () banked
  4467  011336  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4468  011338  6EDA               	movwf	fsr2h,c
  4469  01133A  50DF               	movf	indf2,w,c
  4470  01133C  0B7F               	andlw	127
  4471  01133E  0100               	movlb	0	; () banked
  4472  011340  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4473  011342  B4D8               	btfsc	status,2,c
  4474  011344  0012               	return	
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4478  011346  0E01               	movlw	1
  4479  011348  0100               	movlb	0	; () banked
  4480  01134A  6FFF               	movwf	_change& (0+255),b
  4481                           
  4482                           ; BSR set to: 0
  4483  01134C  0100               	movlb	0	; () banked
  4484  01134E  518C               	movf	_lBufferY& (0+255),w,b
  4485  011350  0D14               	mullw	20
  4486  011352  0EAA               	movlw	low _lBuffer
  4487  011354  0100               	movlb	0	; () banked
  4488  011356  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4489  011358  0E04               	movlw	high _lBuffer
  4490  01135A  0100               	movlb	0	; () banked
  4491  01135C  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4492  01135E  50F3               	movf	prodl,w,c
  4493  011360  0100               	movlb	0	; () banked
  4494  011362  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4495  011364  50F4               	movf	prodh,w,c
  4496  011366  0100               	movlb	0	; () banked
  4497  011368  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4498  01136A  0100               	movlb	0	; () banked
  4499  01136C  518D               	movf	_lBufferX& (0+255),w,b
  4500  01136E  0D01               	mullw	1
  4501  011370  50F3               	movf	prodl,w,c
  4502  011372  0100               	movlb	0	; () banked
  4503  011374  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4504  011376  6ED9               	movwf	fsr2l,c
  4505  011378  50F4               	movf	prodh,w,c
  4506  01137A  0100               	movlb	0	; () banked
  4507  01137C  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4508  01137E  6EDA               	movwf	fsr2h,c
  4509  011380  0100               	movlb	0	; () banked
  4510  011382  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4511  011384  0980               	iorlw	128
  4512  011386  6EDF               	movwf	indf2,c
  4513                           
  4514                           ; BSR set to: 0
  4515                           ;Console.c: 372: };
  4516                           
  4517                           ; BSR set to: 0
  4518                           ;Console.c: 371: return;
  4519                           
  4520                           ; BSR set to: 0
  4521                           
  4522                           ; BSR set to: 0
  4523  011388  0012               	return	
  4524  01138A                     l1036:
  4525                           
  4526                           ; BSR set to: 0
  4527  01138A  0100               	movlb	0	; () banked
  4528  01138C  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4529                           
  4530                           ; Switch size 1, requested type "space"
  4531                           ; Number of cases is 8, Range of values is 7 to 35
  4532                           ; switch strategies available:
  4533                           ; Name         Instructions Cycles
  4534                           ; simple_byte           25    13 (average)
  4535                           ;	Chosen strategy is simple_byte
  4536  01138E  0A07               	xorlw	7	; case 7
  4537  011390  B4D8               	btfsc	status,2,c
  4538  011392  D756               	goto	l1043
  4539  011394  0A0F               	xorlw	15	; case 8
  4540  011396  B4D8               	btfsc	status,2,c
  4541  011398  D74A               	goto	l1040
  4542  01139A  0A01               	xorlw	1	; case 9
  4543  01139C  B4D8               	btfsc	status,2,c
  4544  01139E  D74D               	goto	l1042
  4545  0113A0  0A03               	xorlw	3	; case 10
  4546  0113A2  B4D8               	btfsc	status,2,c
  4547  0113A4  D741               	goto	l1037
  4548  0113A6  0A06               	xorlw	6	; case 12
  4549  0113A8  B4D8               	btfsc	status,2,c
  4550  0113AA  D744               	goto	l1041
  4551  0113AC  0A01               	xorlw	1	; case 13
  4552  0113AE  B4D8               	btfsc	status,2,c
  4553  0113B0  D73B               	goto	l1037
  4554  0113B2  0A2D               	xorlw	45	; case 32
  4555  0113B4  B4D8               	btfsc	status,2,c
  4556  0113B6  D74A               	goto	l1045
  4557  0113B8  0A03               	xorlw	3	; case 35
  4558  0113BA  B4D8               	btfsc	status,2,c
  4559  0113BC  D744               	goto	l1044
  4560  0113BE  D746               	goto	l1045
  4561  0113C0                     __end_of_Console_PrintChar:
  4562                           	opt stack 0
  4563                           tblptru	equ	0xFF8
  4564                           tblptrh	equ	0xFF7
  4565                           tblptrl	equ	0xFF6
  4566                           tablat	equ	0xFF5
  4567                           prodh	equ	0xFF4
  4568                           prodl	equ	0xFF3
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           fsr1h	equ	0xFE2
  4573                           fsr1l	equ	0xFE1
  4574                           indf2	equ	0xFDF
  4575                           postinc2	equ	0xFDE
  4576                           postdec2	equ	0xFDD
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _Console_Tab *****************
  4582 ;; Defined at:
  4583 ;;		line 260 in file "Library/Console.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;  c               1   15[BANK0 ] unsigned char 
  4588 ;;  i               1   14[BANK0 ] unsigned char 
  4589 ;;  t               1   13[BANK0 ] unsigned char 
  4590 ;; Return value:  Size  Location     Type
  4591 ;;                  1    wreg      void 
  4592 ;; Registers used:
  4593 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4594 ;; Tracked objects:
  4595 ;;		On entry : 0/0
  4596 ;;		On exit  : 0/0
  4597 ;;		Unchanged: 0/0
  4598 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4599 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4602 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;Total ram usage:        8 bytes
  4604 ;; Hardware stack levels used:    1
  4605 ;; Hardware stack levels required when called:    9
  4606 ;; This function calls:
  4607 ;;		_Console_ClearCursor
  4608 ;;		_Console_IncrementCursor
  4609 ;;		___awdiv
  4610 ;; This function is called by:
  4611 ;;		_Console_PrintChar
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text12
  4616  012340                     __ptext12:
  4617                           	opt stack 0
  4618  012340                     _Console_Tab:
  4619                           	opt stack 18
  4620                           
  4621                           ;Console.c: 262: UINT8 i = 0;
  4622                           
  4623                           ;incstack = 0
  4624  012340  0E00               	movlw	0
  4625  012342  0100               	movlb	0	; () banked
  4626  012344  6FC3               	movwf	Console_Tab@i& (0+255),b
  4627                           
  4628                           ; BSR set to: 0
  4629                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4630  012346  0EFA               	movlw	250
  4631  012348  2447               	addwf	_gCursor,w,c
  4632  01234A  0100               	movlb	0	; () banked
  4633  01234C  6FB5               	movwf	___awdiv@dividend& (0+255),b
  4634  01234E  0EFF               	movlw	255
  4635  012350  2048               	addwfc	_gCursor+1,w,c
  4636  012352  0100               	movlb	0	; () banked
  4637  012354  6FB6               	movwf	(___awdiv@dividend+1)& (0+255),b
  4638  012356  0E00               	movlw	0
  4639  012358  0100               	movlb	0	; () banked
  4640  01235A  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4641  01235C  0E06               	movlw	6
  4642  01235E  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4643  012360  EC01  F092         	call	___awdiv	;wreg free
  4644  012364  0100               	movlb	0	; () banked
  4645  012366  51B5               	movf	?___awdiv& (0+255),w,b
  4646  012368  0100               	movlb	0	; () banked
  4647  01236A  6FC4               	movwf	Console_Tab@c& (0+255),b
  4648                           
  4649                           ; BSR set to: 0
  4650                           ;Console.c: 264: UINT8 t = c/4;
  4651  01236C  C0C4  F0B5         	movff	Console_Tab@c,___awdiv@dividend
  4652  012370  0100               	movlb	0	; () banked
  4653  012372  6BB6               	clrf	(___awdiv@dividend+1)& (0+255),b
  4654  012374  0E00               	movlw	0
  4655  012376  0100               	movlb	0	; () banked
  4656  012378  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4657  01237A  0E04               	movlw	4
  4658  01237C  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4659  01237E  EC01  F092         	call	___awdiv	;wreg free
  4660  012382  0100               	movlb	0	; () banked
  4661  012384  51B5               	movf	?___awdiv& (0+255),w,b
  4662  012386  0100               	movlb	0	; () banked
  4663  012388  6FC2               	movwf	Console_Tab@t& (0+255),b
  4664                           
  4665                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4666  01238A  0E00               	movlw	0
  4667  01238C  0100               	movlb	0	; () banked
  4668  01238E  6FC3               	movwf	Console_Tab@i& (0+255),b
  4669  012390  D006               	goto	l1009
  4670  012392                     
  4671                           ; BSR set to: 0
  4672                           ;Console.c: 266: {
  4673                           ;Console.c: 267: Console_ClearCursor();
  4674                           
  4675                           ; BSR set to: 0
  4676  012392  EC5D  F09D         	call	_Console_ClearCursor	;wreg free
  4677                           
  4678                           ;Console.c: 268: Console_IncrementCursor();
  4679  012396  EC1E  F09A         	call	_Console_IncrementCursor	;wreg free
  4680  01239A  0100               	movlb	0	; () banked
  4681  01239C  2BC3               	incf	Console_Tab@i& (0+255),f,b
  4682  01239E                     l1009:
  4683                           
  4684                           ; BSR set to: 0
  4685                           
  4686                           ; BSR set to: 0
  4687  01239E  0100               	movlb	0	; () banked
  4688  0123A0  51C2               	movf	Console_Tab@t& (0+255),w,b
  4689  0123A2  0D04               	mullw	4
  4690  0123A4  1EF3               	comf	prodl,f,c
  4691  0123A6  1EF4               	comf	prodh,f,c
  4692  0123A8  4AF3               	infsnz	prodl,f,c
  4693  0123AA  2AF4               	incf	prodh,f,c
  4694  0123AC  0100               	movlb	0	; () banked
  4695  0123AE  51C4               	movf	Console_Tab@c& (0+255),w,b
  4696  0123B0  0100               	movlb	0	; () banked
  4697  0123B2  6FBD               	movwf	??_Console_Tab& (0+255),b
  4698  0123B4  6BBE               	clrf	(??_Console_Tab+1)& (0+255),b
  4699  0123B6  50F3               	movf	prodl,w,c
  4700  0123B8  0100               	movlb	0	; () banked
  4701  0123BA  27BD               	addwf	??_Console_Tab& (0+255),f,b
  4702  0123BC  50F4               	movf	prodh,w,c
  4703  0123BE  0100               	movlb	0	; () banked
  4704  0123C0  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4705  0123C2  0100               	movlb	0	; () banked
  4706  0123C4  1FBD               	comf	??_Console_Tab& (0+255),f,b
  4707  0123C6  1FBE               	comf	(??_Console_Tab+1)& (0+255),f,b
  4708  0123C8  4BBD               	infsnz	??_Console_Tab& (0+255),f,b
  4709  0123CA  2BBE               	incf	(??_Console_Tab+1)& (0+255),f,b
  4710  0123CC  0E04               	movlw	4
  4711  0123CE  0100               	movlb	0	; () banked
  4712  0123D0  27BD               	addwf	??_Console_Tab& (0+255),f,b
  4713  0123D2  0E00               	movlw	0
  4714  0123D4  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  4715  0123D6  0100               	movlb	0	; () banked
  4716  0123D8  51C3               	movf	Console_Tab@i& (0+255),w,b
  4717  0123DA  0100               	movlb	0	; () banked
  4718  0123DC  6FBF               	movwf	(??_Console_Tab+2)& (0+255),b
  4719  0123DE  6BC0               	clrf	(??_Console_Tab+3)& (0+255),b
  4720  0123E0  0100               	movlb	0	; () banked
  4721  0123E2  51BD               	movf	??_Console_Tab& (0+255),w,b
  4722  0123E4  0100               	movlb	0	; () banked
  4723  0123E6  5DBF               	subwf	(??_Console_Tab+2)& (0+255),w,b
  4724  0123E8  0100               	movlb	0	; () banked
  4725  0123EA  51C0               	movf	(??_Console_Tab+3)& (0+255),w,b
  4726  0123EC  0A80               	xorlw	128
  4727  0123EE  0100               	movlb	0	; () banked
  4728  0123F0  6FC1               	movwf	(??_Console_Tab+4)& (0+255),b
  4729  0123F2  0100               	movlb	0	; () banked
  4730  0123F4  51BE               	movf	(??_Console_Tab+1)& (0+255),w,b
  4731  0123F6  0A80               	xorlw	128
  4732  0123F8  0100               	movlb	0	; () banked
  4733  0123FA  59C1               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  4734  0123FC  B0D8               	btfsc	status,0,c
  4735  0123FE  0012               	return	
  4736  012400  D7C8               	goto	l1010
  4737  012402                     __end_of_Console_Tab:
  4738                           	opt stack 0
  4739                           tblptru	equ	0xFF8
  4740                           tblptrh	equ	0xFF7
  4741                           tblptrl	equ	0xFF6
  4742                           tablat	equ	0xFF5
  4743                           prodh	equ	0xFF4
  4744                           prodl	equ	0xFF3
  4745                           postinc0	equ	0xFEE
  4746                           wreg	equ	0xFE8
  4747                           postdec1	equ	0xFE5
  4748                           fsr1h	equ	0xFE2
  4749                           fsr1l	equ	0xFE1
  4750                           indf2	equ	0xFDF
  4751                           postinc2	equ	0xFDE
  4752                           postdec2	equ	0xFDD
  4753                           fsr2h	equ	0xFDA
  4754                           fsr2l	equ	0xFD9
  4755                           status	equ	0xFD8
  4756                           
  4757 ;; *************** function ___awdiv *****************
  4758 ;; Defined at:
  4759 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  4760 ;; Parameters:    Size  Location     Type
  4761 ;;  dividend        2    0[BANK0 ] int 
  4762 ;;  divisor         2    2[BANK0 ] int 
  4763 ;; Auto vars:     Size  Location     Type
  4764 ;;  quotient        2    6[BANK0 ] int 
  4765 ;;  sign            1    5[BANK0 ] unsigned char 
  4766 ;;  counter         1    4[BANK0 ] unsigned char 
  4767 ;; Return value:  Size  Location     Type
  4768 ;;                  2    0[BANK0 ] int 
  4769 ;; Registers used:
  4770 ;;		wreg, status,2, status,0
  4771 ;; Tracked objects:
  4772 ;;		On entry : 0/0
  4773 ;;		On exit  : 0/0
  4774 ;;		Unchanged: 0/0
  4775 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4776 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4777 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4778 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4779 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4780 ;;Total ram usage:        8 bytes
  4781 ;; Hardware stack levels used:    1
  4782 ;; Hardware stack levels required when called:    7
  4783 ;; This function calls:
  4784 ;;		Nothing
  4785 ;; This function is called by:
  4786 ;;		_Console_Tab
  4787 ;; This function uses a non-reentrant model
  4788 ;;
  4789                           
  4790                           	psect	text13
  4791  012402                     __ptext13:
  4792                           	opt stack 0
  4793  012402                     ___awdiv:
  4794                           	opt stack 19
  4795                           
  4796                           ; BSR set to: 0
  4797                           ;incstack = 0
  4798  012402  0E00               	movlw	0
  4799  012404  0100               	movlb	0	; () banked
  4800  012406  6FBA               	movwf	___awdiv@sign& (0+255),b
  4801                           
  4802                           ; BSR set to: 0
  4803  012408  0100               	movlb	0	; () banked
  4804  01240A  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4805  01240C  D008               	goto	l2449
  4806                           
  4807                           ; BSR set to: 0
  4808  01240E  0100               	movlb	0	; () banked
  4809  012410  6DB7               	negf	___awdiv@divisor& (0+255),b
  4810  012412  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  4811  012414  B0D8               	btfsc	status,0,c
  4812  012416  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  4813                           
  4814                           ; BSR set to: 0
  4815  012418  0E01               	movlw	1
  4816  01241A  0100               	movlb	0	; () banked
  4817  01241C  6FBA               	movwf	___awdiv@sign& (0+255),b
  4818  01241E                     l2449:
  4819                           
  4820                           ; BSR set to: 0
  4821                           
  4822                           ; BSR set to: 0
  4823  01241E  0100               	movlb	0	; () banked
  4824  012420  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  4825  012422  D008               	goto	l2450
  4826                           
  4827                           ; BSR set to: 0
  4828  012424  0100               	movlb	0	; () banked
  4829  012426  6DB5               	negf	___awdiv@dividend& (0+255),b
  4830  012428  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  4831  01242A  B0D8               	btfsc	status,0,c
  4832  01242C  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  4833                           
  4834                           ; BSR set to: 0
  4835  01242E  0E01               	movlw	1
  4836  012430  0100               	movlb	0	; () banked
  4837  012432  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  4838  012434                     l2450:
  4839                           
  4840                           ; BSR set to: 0
  4841                           
  4842                           ; BSR set to: 0
  4843  012434  0E00               	movlw	0
  4844  012436  0100               	movlb	0	; () banked
  4845  012438  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  4846  01243A  0E00               	movlw	0
  4847  01243C  6FBB               	movwf	___awdiv@quotient& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850  01243E  0100               	movlb	0	; () banked
  4851  012440  51B7               	movf	___awdiv@divisor& (0+255),w,b
  4852  012442  0100               	movlb	0	; () banked
  4853  012444  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  4854  012446  B4D8               	btfsc	status,2,c
  4855  012448  D02C               	goto	l2457
  4856                           
  4857                           ; BSR set to: 0
  4858  01244A  0E01               	movlw	1
  4859  01244C  0100               	movlb	0	; () banked
  4860  01244E  6FB9               	movwf	___awdiv@counter& (0+255),b
  4861  012450  D006               	goto	l2452
  4862  012452                     
  4863                           ; BSR set to: 0
  4864                           
  4865                           ; BSR set to: 0
  4866  012452  0100               	movlb	0	; () banked
  4867  012454  90D8               	bcf	status,0,c
  4868  012456  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  4869  012458  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  4870  01245A  0100               	movlb	0	; () banked
  4871  01245C  2BB9               	incf	___awdiv@counter& (0+255),f,b
  4872  01245E                     l2452:
  4873                           
  4874                           ; BSR set to: 0
  4875                           
  4876                           ; BSR set to: 0
  4877  01245E  0100               	movlb	0	; () banked
  4878  012460  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  4879  012462  D7F7               	goto	l2453
  4880  012464                     u6690:
  4881                           
  4882                           ; BSR set to: 0
  4883                           
  4884                           ; BSR set to: 0
  4885                           
  4886                           ; BSR set to: 0
  4887  012464  0100               	movlb	0	; () banked
  4888  012466  90D8               	bcf	status,0,c
  4889  012468  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  4890  01246A  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  4891                           
  4892                           ; BSR set to: 0
  4893  01246C  0100               	movlb	0	; () banked
  4894  01246E  51B7               	movf	___awdiv@divisor& (0+255),w,b
  4895  012470  0100               	movlb	0	; () banked
  4896  012472  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  4897  012474  0100               	movlb	0	; () banked
  4898  012476  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4899  012478  0100               	movlb	0	; () banked
  4900  01247A  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  4901  01247C  A0D8               	btfss	status,0,c
  4902  01247E  D00A               	goto	l2456
  4903                           
  4904                           ; BSR set to: 0
  4905  012480  0100               	movlb	0	; () banked
  4906  012482  51B7               	movf	___awdiv@divisor& (0+255),w,b
  4907  012484  0100               	movlb	0	; () banked
  4908  012486  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  4909  012488  0100               	movlb	0	; () banked
  4910  01248A  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  4911  01248C  0100               	movlb	0	; () banked
  4912  01248E  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  4913                           
  4914                           ; BSR set to: 0
  4915  012490  0100               	movlb	0	; () banked
  4916  012492  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  4917  012494                     l2456:
  4918                           
  4919                           ; BSR set to: 0
  4920                           
  4921                           ; BSR set to: 0
  4922  012494  0100               	movlb	0	; () banked
  4923  012496  90D8               	bcf	status,0,c
  4924  012498  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  4925  01249A  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  4926                           
  4927                           ; BSR set to: 0
  4928  01249C  0100               	movlb	0	; () banked
  4929  01249E  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  4930  0124A0  D7E1               	goto	u6690
  4931  0124A2                     l2457:
  4932                           
  4933                           ; BSR set to: 0
  4934                           
  4935                           ; BSR set to: 0
  4936                           
  4937                           ; BSR set to: 0
  4938  0124A2  0100               	movlb	0	; () banked
  4939  0124A4  51BA               	movf	___awdiv@sign& (0+255),w,b
  4940  0124A6  0100               	movlb	0	; () banked
  4941  0124A8  B4D8               	btfsc	status,2,c
  4942  0124AA  D005               	goto	l2458
  4943                           
  4944                           ; BSR set to: 0
  4945  0124AC  0100               	movlb	0	; () banked
  4946  0124AE  6DBB               	negf	___awdiv@quotient& (0+255),b
  4947  0124B0  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  4948  0124B2  B0D8               	btfsc	status,0,c
  4949  0124B4  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  4950  0124B6                     l2458:
  4951                           
  4952                           ; BSR set to: 0
  4953                           
  4954                           ; BSR set to: 0
  4955  0124B6  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  4956  0124BA  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  4957  0124BE  0012               	return	
  4958  0124C0                     __end_of___awdiv:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           prodh	equ	0xFF4
  4965                           prodl	equ	0xFF3
  4966                           postinc0	equ	0xFEE
  4967                           wreg	equ	0xFE8
  4968                           postdec1	equ	0xFE5
  4969                           fsr1h	equ	0xFE2
  4970                           fsr1l	equ	0xFE1
  4971                           indf2	equ	0xFDF
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           fsr2h	equ	0xFDA
  4975                           fsr2l	equ	0xFD9
  4976                           status	equ	0xFD8
  4977                           
  4978 ;; *************** function _Console_IncrementCursor *****************
  4979 ;; Defined at:
  4980 ;;		line 243 in file "Library/Console.c"
  4981 ;; Parameters:    Size  Location     Type
  4982 ;;		None
  4983 ;; Auto vars:     Size  Location     Type
  4984 ;;		None
  4985 ;; Return value:  Size  Location     Type
  4986 ;;                  1    wreg      unsigned char 
  4987 ;; Registers used:
  4988 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4989 ;; Tracked objects:
  4990 ;;		On entry : 0/0
  4991 ;;		On exit  : 0/0
  4992 ;;		Unchanged: 0/0
  4993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4994 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4995 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;Total ram usage:        2 bytes
  4999 ;; Hardware stack levels used:    1
  5000 ;; Hardware stack levels required when called:    8
  5001 ;; This function calls:
  5002 ;;		_Console_FormFeed
  5003 ;;		_Console_NewLine
  5004 ;; This function is called by:
  5005 ;;		_Console_Tab
  5006 ;;		_Console_PrintChar
  5007 ;; This function uses a non-reentrant model
  5008 ;;
  5009                           
  5010                           	psect	text14
  5011  01343C                     __ptext14:
  5012                           	opt stack 0
  5013  01343C                     _Console_IncrementCursor:
  5014                           	opt stack 18
  5015                           
  5016                           ;Console.c: 246: lBufferX += 1;
  5017                           
  5018                           ; BSR set to: 0
  5019                           ;incstack = 0
  5020  01343C  0100               	movlb	0	; () banked
  5021  01343E  2B8D               	incf	_lBufferX& (0+255),f,b
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;Console.c: 248: gCursor.x += 6;
  5025  013440  0E06               	movlw	6
  5026  013442  2647               	addwf	_gCursor,f,c
  5027  013444  0E00               	movlw	0
  5028  013446  2248               	addwfc	_gCursor+1,f,c
  5029                           
  5030                           ; BSR set to: 0
  5031                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5032  013448  0E06               	movlw	6
  5033  01344A  2447               	addwf	_gCursor,w,c
  5034  01344C  0100               	movlb	0	; () banked
  5035  01344E  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5036  013450  0E00               	movlw	0
  5037  013452  2048               	addwfc	_gCursor+1,w,c
  5038  013454  0100               	movlb	0	; () banked
  5039  013456  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5040  013458  0100               	movlb	0	; () banked
  5041  01345A  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5042  01345C  D009               	goto	l1004
  5043  01345E  0100               	movlb	0	; () banked
  5044  013460  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5045  013462  E104               	bnz	u6640
  5046  013464  0E80               	movlw	128
  5047  013466  0100               	movlb	0	; () banked
  5048  013468  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5049  01346A  B0D8               	btfsc	status,0,c
  5050  01346C                     u6640:
  5051                           
  5052                           ; BSR set to: 0
  5053                           ;Console.c: 250: Console_NewLine();
  5054  01346C  ECBD  F095         	call	_Console_NewLine	;wreg free
  5055  013470                     l1004:
  5056                           
  5057                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5058  013470  0E08               	movlw	8
  5059  013472  2449               	addwf	_gCursor+2,w,c
  5060  013474  0100               	movlb	0	; () banked
  5061  013476  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5062  013478  0E00               	movlw	0
  5063  01347A  204A               	addwfc	_gCursor+3,w,c
  5064  01347C  0100               	movlb	0	; () banked
  5065  01347E  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5066  013480  0100               	movlb	0	; () banked
  5067  013482  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5068  013484  D00C               	goto	l1005
  5069  013486  0100               	movlb	0	; () banked
  5070  013488  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5071  01348A  E105               	bnz	u6650
  5072  01348C  0E80               	movlw	128
  5073  01348E  0100               	movlb	0	; () banked
  5074  013490  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5075  013492  A0D8               	btfss	status,0,c
  5076  013494  D004               	goto	l1005
  5077  013496                     u6650:
  5078                           
  5079                           ; BSR set to: 0
  5080                           ;Console.c: 252: {
  5081                           ;Console.c: 253: Console_FormFeed();
  5082  013496  ECEF  F096         	call	_Console_FormFeed	;wreg free
  5083                           
  5084                           ;Console.c: 254: return 1;
  5085  01349A  0E01               	movlw	1
  5086  01349C  0012               	return	
  5087  01349E                     l1005:
  5088                           
  5089                           ;Console.c: 255: }
  5090                           ;Console.c: 257: return 0;
  5091  01349E  0E00               	movlw	0
  5092  0134A0  0012               	return	
  5093  0134A2                     __end_of_Console_IncrementCursor:
  5094                           	opt stack 0
  5095                           tblptru	equ	0xFF8
  5096                           tblptrh	equ	0xFF7
  5097                           tblptrl	equ	0xFF6
  5098                           tablat	equ	0xFF5
  5099                           prodh	equ	0xFF4
  5100                           prodl	equ	0xFF3
  5101                           postinc0	equ	0xFEE
  5102                           wreg	equ	0xFE8
  5103                           postdec1	equ	0xFE5
  5104                           fsr1h	equ	0xFE2
  5105                           fsr1l	equ	0xFE1
  5106                           indf2	equ	0xFDF
  5107                           postinc2	equ	0xFDE
  5108                           postdec2	equ	0xFDD
  5109                           fsr2h	equ	0xFDA
  5110                           fsr2l	equ	0xFD9
  5111                           status	equ	0xFD8
  5112                           
  5113 ;; *************** function _Console_NewLine *****************
  5114 ;; Defined at:
  5115 ;;		line 175 in file "Library/Console.c"
  5116 ;; Parameters:    Size  Location     Type
  5117 ;;		None
  5118 ;; Auto vars:     Size  Location     Type
  5119 ;;		None
  5120 ;; Return value:  Size  Location     Type
  5121 ;;                  1    wreg      void 
  5122 ;; Registers used:
  5123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5124 ;; Tracked objects:
  5125 ;;		On entry : 0/0
  5126 ;;		On exit  : 0/0
  5127 ;;		Unchanged: 0/0
  5128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5129 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5130 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5132 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5133 ;;Total ram usage:        2 bytes
  5134 ;; Hardware stack levels used:    1
  5135 ;; Hardware stack levels required when called:    7
  5136 ;; This function calls:
  5137 ;;		Nothing
  5138 ;; This function is called by:
  5139 ;;		_Console_IncrementCursor
  5140 ;;		_Console_PrintChar
  5141 ;; This function uses a non-reentrant model
  5142 ;;
  5143                           
  5144                           	psect	text15
  5145  012B7A                     __ptext15:
  5146                           	opt stack 0
  5147  012B7A                     _Console_NewLine:
  5148                           	opt stack 18
  5149                           
  5150                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5151                           
  5152                           ;incstack = 0
  5153  012B7A  D03E               	goto	l983
  5154  012B7C                     
  5155                           ;Console.c: 179: {
  5156                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5157  012B7C  0100               	movlb	0	; () banked
  5158  012B7E  518C               	movf	_lBufferY& (0+255),w,b
  5159  012B80  0D14               	mullw	20
  5160  012B82  0EAA               	movlw	low _lBuffer
  5161  012B84  0100               	movlb	0	; () banked
  5162  012B86  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5163  012B88  0E04               	movlw	high _lBuffer
  5164  012B8A  0100               	movlb	0	; () banked
  5165  012B8C  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5166  012B8E  50F3               	movf	prodl,w,c
  5167  012B90  0100               	movlb	0	; () banked
  5168  012B92  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5169  012B94  50F4               	movf	prodh,w,c
  5170  012B96  0100               	movlb	0	; () banked
  5171  012B98  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5172  012B9A  0100               	movlb	0	; () banked
  5173  012B9C  518D               	movf	_lBufferX& (0+255),w,b
  5174  012B9E  0D01               	mullw	1
  5175  012BA0  50F3               	movf	prodl,w,c
  5176  012BA2  0100               	movlb	0	; () banked
  5177  012BA4  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5178  012BA6  6ED9               	movwf	fsr2l,c
  5179  012BA8  50F4               	movf	prodh,w,c
  5180  012BAA  0100               	movlb	0	; () banked
  5181  012BAC  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5182  012BAE  6EDA               	movwf	fsr2h,c
  5183  012BB0  50DF               	movf	indf2,w,c
  5184  012BB2  B4D8               	btfsc	status,2,c
  5185  012BB4  D01F               	goto	l985
  5186                           
  5187                           ; BSR set to: 0
  5188                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5189  012BB6  0E01               	movlw	1
  5190  012BB8  0100               	movlb	0	; () banked
  5191  012BBA  6FFF               	movwf	_change& (0+255),b
  5192                           
  5193                           ; BSR set to: 0
  5194  012BBC  0100               	movlb	0	; () banked
  5195  012BBE  518C               	movf	_lBufferY& (0+255),w,b
  5196  012BC0  0D14               	mullw	20
  5197  012BC2  0EAA               	movlw	low _lBuffer
  5198  012BC4  0100               	movlb	0	; () banked
  5199  012BC6  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5200  012BC8  0E04               	movlw	high _lBuffer
  5201  012BCA  0100               	movlb	0	; () banked
  5202  012BCC  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5203  012BCE  50F3               	movf	prodl,w,c
  5204  012BD0  0100               	movlb	0	; () banked
  5205  012BD2  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5206  012BD4  50F4               	movf	prodh,w,c
  5207  012BD6  0100               	movlb	0	; () banked
  5208  012BD8  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5209  012BDA  0100               	movlb	0	; () banked
  5210  012BDC  518D               	movf	_lBufferX& (0+255),w,b
  5211  012BDE  0D01               	mullw	1
  5212  012BE0  50F3               	movf	prodl,w,c
  5213  012BE2  0100               	movlb	0	; () banked
  5214  012BE4  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5215  012BE6  6ED9               	movwf	fsr2l,c
  5216  012BE8  50F4               	movf	prodh,w,c
  5217  012BEA  0100               	movlb	0	; () banked
  5218  012BEC  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5219  012BEE  6EDA               	movwf	fsr2h,c
  5220  012BF0  0E80               	movlw	128
  5221  012BF2  6EDF               	movwf	indf2,c
  5222  012BF4                     l985:
  5223                           
  5224                           ; BSR set to: 0
  5225                           ;Console.c: 182: lBufferX ++;
  5226                           
  5227                           ; BSR set to: 0
  5228  012BF4  0100               	movlb	0	; () banked
  5229  012BF6  2B8D               	incf	_lBufferX& (0+255),f,b
  5230  012BF8                     l983:
  5231                           
  5232                           ; BSR set to: 0
  5233  012BF8  0E13               	movlw	19
  5234  012BFA  0100               	movlb	0	; () banked
  5235  012BFC  658D               	cpfsgt	_lBufferX& (0+255),b
  5236  012BFE  D7BE               	goto	l984
  5237                           
  5238                           ; BSR set to: 0
  5239                           ;Console.c: 183: }
  5240                           ;Console.c: 185: lBufferX = 0;
  5241                           
  5242                           ; BSR set to: 0
  5243  012C00  0E00               	movlw	0
  5244  012C02  0100               	movlb	0	; () banked
  5245  012C04  6F8D               	movwf	_lBufferX& (0+255),b
  5246                           
  5247                           ; BSR set to: 0
  5248                           ;Console.c: 186: lBufferY ++;
  5249  012C06  0100               	movlb	0	; () banked
  5250  012C08  2B8C               	incf	_lBufferY& (0+255),f,b
  5251                           
  5252                           ; BSR set to: 0
  5253                           ;Console.c: 188: gCursor.y += 8;
  5254  012C0A  0E08               	movlw	8
  5255  012C0C  2649               	addwf	_gCursor+2,f,c
  5256  012C0E  0E00               	movlw	0
  5257  012C10  224A               	addwfc	_gCursor+3,f,c
  5258                           
  5259                           ; BSR set to: 0
  5260                           ;Console.c: 189: gCursor.x = 6;
  5261  012C12  0E00               	movlw	0
  5262  012C14  6E48               	movwf	_gCursor+1,c
  5263  012C16  0E06               	movlw	6
  5264  012C18  6E47               	movwf	_gCursor,c
  5265                           
  5266                           ; BSR set to: 0
  5267  012C1A  0012               	return		;funcret
  5268  012C1C                     __end_of_Console_NewLine:
  5269                           	opt stack 0
  5270                           tblptru	equ	0xFF8
  5271                           tblptrh	equ	0xFF7
  5272                           tblptrl	equ	0xFF6
  5273                           tablat	equ	0xFF5
  5274                           prodh	equ	0xFF4
  5275                           prodl	equ	0xFF3
  5276                           postinc0	equ	0xFEE
  5277                           wreg	equ	0xFE8
  5278                           postdec1	equ	0xFE5
  5279                           fsr1h	equ	0xFE2
  5280                           fsr1l	equ	0xFE1
  5281                           indf2	equ	0xFDF
  5282                           postinc2	equ	0xFDE
  5283                           postdec2	equ	0xFDD
  5284                           fsr2h	equ	0xFDA
  5285                           fsr2l	equ	0xFD9
  5286                           status	equ	0xFD8
  5287                           
  5288 ;; *************** function _Console_FormFeed *****************
  5289 ;; Defined at:
  5290 ;;		line 192 in file "Library/Console.c"
  5291 ;; Parameters:    Size  Location     Type
  5292 ;;		None
  5293 ;; Auto vars:     Size  Location     Type
  5294 ;;  y               1    3[BANK0 ] unsigned char 
  5295 ;;  x               1    2[BANK0 ] unsigned char 
  5296 ;; Return value:  Size  Location     Type
  5297 ;;                  1    wreg      void 
  5298 ;; Registers used:
  5299 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5306 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5307 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5308 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5309 ;;Total ram usage:        4 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; Hardware stack levels required when called:    7
  5312 ;; This function calls:
  5313 ;;		Nothing
  5314 ;; This function is called by:
  5315 ;;		_Console_IncrementCursor
  5316 ;;		_Console_PrintChar
  5317 ;; This function uses a non-reentrant model
  5318 ;;
  5319                           
  5320                           	psect	text16
  5321  012DDE                     __ptext16:
  5322                           	opt stack 0
  5323  012DDE                     _Console_FormFeed:
  5324                           	opt stack 18
  5325                           
  5326                           ;Console.c: 195: lBufferX = 0;
  5327                           
  5328                           ; BSR set to: 0
  5329                           ;incstack = 0
  5330  012DDE  0E00               	movlw	0
  5331  012DE0  0100               	movlb	0	; () banked
  5332  012DE2  6F8D               	movwf	_lBufferX& (0+255),b
  5333                           
  5334                           ;Console.c: 196: lBufferY = 0;
  5335  012DE4  0E00               	movlw	0
  5336  012DE6  0100               	movlb	0	; () banked
  5337  012DE8  6F8C               	movwf	_lBufferY& (0+255),b
  5338                           
  5339                           ;Console.c: 197: UINT8 x, y;
  5340                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5341  012DEA  0E00               	movlw	0
  5342  012DEC  0100               	movlb	0	; () banked
  5343  012DEE  6FB8               	movwf	Console_FormFeed@y& (0+255),b
  5344  012DF0                     l10283:
  5345                           
  5346                           ; BSR set to: 0
  5347  012DF0  0E0E               	movlw	14
  5348  012DF2  0100               	movlb	0	; () banked
  5349  012DF4  65B8               	cpfsgt	Console_FormFeed@y& (0+255),b
  5350  012DF6  D001               	goto	l990
  5351  012DF8  D02D               	goto	u6550
  5352  012DFA                     l990:
  5353                           
  5354                           ; BSR set to: 0
  5355                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5356                           
  5357                           ; BSR set to: 0
  5358  012DFA  0E00               	movlw	0
  5359  012DFC  0100               	movlb	0	; () banked
  5360  012DFE  6FB7               	movwf	Console_FormFeed@x& (0+255),b
  5361  012E00                     l10289:
  5362                           
  5363                           ; BSR set to: 0
  5364  012E00  0E13               	movlw	19
  5365  012E02  0100               	movlb	0	; () banked
  5366  012E04  65B7               	cpfsgt	Console_FormFeed@x& (0+255),b
  5367  012E06  D001               	goto	l992
  5368  012E08  D022               	goto	u6540
  5369  012E0A                     l992:
  5370                           
  5371                           ; BSR set to: 0
  5372                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5373                           
  5374                           ; BSR set to: 0
  5375  012E0A  0E01               	movlw	1
  5376  012E0C  0100               	movlb	0	; () banked
  5377  012E0E  6FFF               	movwf	_change& (0+255),b
  5378                           
  5379                           ; BSR set to: 0
  5380  012E10  0100               	movlb	0	; () banked
  5381  012E12  51B8               	movf	Console_FormFeed@y& (0+255),w,b
  5382  012E14  0D14               	mullw	20
  5383  012E16  0EAA               	movlw	low _lBuffer
  5384  012E18  0100               	movlb	0	; () banked
  5385  012E1A  6FB5               	movwf	??_Console_FormFeed& (0+255),b
  5386  012E1C  0E04               	movlw	high _lBuffer
  5387  012E1E  0100               	movlb	0	; () banked
  5388  012E20  6FB6               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5389  012E22  50F3               	movf	prodl,w,c
  5390  012E24  0100               	movlb	0	; () banked
  5391  012E26  27B5               	addwf	??_Console_FormFeed& (0+255),f,b
  5392  012E28  50F4               	movf	prodh,w,c
  5393  012E2A  0100               	movlb	0	; () banked
  5394  012E2C  23B6               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5395  012E2E  0100               	movlb	0	; () banked
  5396  012E30  51B7               	movf	Console_FormFeed@x& (0+255),w,b
  5397  012E32  0D01               	mullw	1
  5398  012E34  50F3               	movf	prodl,w,c
  5399  012E36  0100               	movlb	0	; () banked
  5400  012E38  25B5               	addwf	??_Console_FormFeed& (0+255),w,b
  5401  012E3A  6ED9               	movwf	fsr2l,c
  5402  012E3C  50F4               	movf	prodh,w,c
  5403  012E3E  0100               	movlb	0	; () banked
  5404  012E40  21B6               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5405  012E42  6EDA               	movwf	fsr2h,c
  5406  012E44  0E80               	movlw	128
  5407  012E46  6EDF               	movwf	indf2,c
  5408                           
  5409                           ; BSR set to: 0
  5410  012E48  0100               	movlb	0	; () banked
  5411  012E4A  2BB7               	incf	Console_FormFeed@x& (0+255),f,b
  5412  012E4C  D7D9               	goto	l10289
  5413  012E4E                     u6540:
  5414                           
  5415                           ; BSR set to: 0
  5416                           
  5417                           ; BSR set to: 0
  5418  012E4E  0100               	movlb	0	; () banked
  5419  012E50  2BB8               	incf	Console_FormFeed@y& (0+255),f,b
  5420  012E52  D7CE               	goto	l10283
  5421  012E54                     u6550:
  5422                           
  5423                           ; BSR set to: 0
  5424                           ;Console.c: 204: clearall = 1;
  5425                           
  5426                           ; BSR set to: 0
  5427  012E54  0E01               	movlw	1
  5428  012E56  0100               	movlb	0	; () banked
  5429  012E58  6F8E               	movwf	_clearall& (0+255),b
  5430                           
  5431                           ;Console.c: 205: gCursor.x = 6;
  5432  012E5A  0E00               	movlw	0
  5433  012E5C  6E48               	movwf	_gCursor+1,c
  5434  012E5E  0E06               	movlw	6
  5435  012E60  6E47               	movwf	_gCursor,c
  5436                           
  5437                           ;Console.c: 206: gCursor.y = 6;
  5438  012E62  0E00               	movlw	0
  5439  012E64  6E4A               	movwf	_gCursor+3,c
  5440  012E66  0E06               	movlw	6
  5441  012E68  6E49               	movwf	_gCursor+2,c
  5442                           
  5443                           ; BSR set to: 0
  5444  012E6A  0012               	return		;funcret
  5445  012E6C                     __end_of_Console_FormFeed:
  5446                           	opt stack 0
  5447                           tblptru	equ	0xFF8
  5448                           tblptrh	equ	0xFF7
  5449                           tblptrl	equ	0xFF6
  5450                           tablat	equ	0xFF5
  5451                           prodh	equ	0xFF4
  5452                           prodl	equ	0xFF3
  5453                           postinc0	equ	0xFEE
  5454                           wreg	equ	0xFE8
  5455                           postdec1	equ	0xFE5
  5456                           fsr1h	equ	0xFE2
  5457                           fsr1l	equ	0xFE1
  5458                           indf2	equ	0xFDF
  5459                           postinc2	equ	0xFDE
  5460                           postdec2	equ	0xFDD
  5461                           fsr2h	equ	0xFDA
  5462                           fsr2l	equ	0xFD9
  5463                           status	equ	0xFD8
  5464                           
  5465 ;; *************** function _Console_ResetCursor *****************
  5466 ;; Defined at:
  5467 ;;		line 297 in file "Library/Console.c"
  5468 ;; Parameters:    Size  Location     Type
  5469 ;;		None
  5470 ;; Auto vars:     Size  Location     Type
  5471 ;;		None
  5472 ;; Return value:  Size  Location     Type
  5473 ;;                  1    wreg      void 
  5474 ;; Registers used:
  5475 ;;		wreg, status,2
  5476 ;; Tracked objects:
  5477 ;;		On entry : 0/0
  5478 ;;		On exit  : 0/0
  5479 ;;		Unchanged: 0/0
  5480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5484 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5485 ;;Total ram usage:        0 bytes
  5486 ;; Hardware stack levels used:    1
  5487 ;; Hardware stack levels required when called:    7
  5488 ;; This function calls:
  5489 ;;		Nothing
  5490 ;; This function is called by:
  5491 ;;		_Console_PrintChar
  5492 ;; This function uses a non-reentrant model
  5493 ;;
  5494                           
  5495                           	psect	text17
  5496  013E3A                     __ptext17:
  5497                           	opt stack 0
  5498  013E3A                     _Console_ResetCursor:
  5499                           	opt stack 20
  5500                           
  5501                           ;Console.c: 299: gCursor.x = 6;
  5502                           
  5503                           ; BSR set to: 0
  5504                           ;incstack = 0
  5505  013E3A  0E00               	movlw	0
  5506  013E3C  6E48               	movwf	_gCursor+1,c
  5507  013E3E  0E06               	movlw	6
  5508  013E40  6E47               	movwf	_gCursor,c
  5509                           
  5510                           ;Console.c: 300: gCursor.y = 6;
  5511  013E42  0E00               	movlw	0
  5512  013E44  6E4A               	movwf	_gCursor+3,c
  5513  013E46  0E06               	movlw	6
  5514  013E48  6E49               	movwf	_gCursor+2,c
  5515                           
  5516                           ;Console.c: 303: lBufferX = 0;
  5517  013E4A  0E00               	movlw	0
  5518  013E4C  0100               	movlb	0	; () banked
  5519  013E4E  6F8D               	movwf	_lBufferX& (0+255),b
  5520                           
  5521                           ;Console.c: 304: lBufferY = 0;
  5522  013E50  0E00               	movlw	0
  5523  013E52  0100               	movlb	0	; () banked
  5524  013E54  6F8C               	movwf	_lBufferY& (0+255),b
  5525                           
  5526                           ; BSR set to: 0
  5527  013E56  0012               	return		;funcret
  5528  013E58                     __end_of_Console_ResetCursor:
  5529                           	opt stack 0
  5530                           tblptru	equ	0xFF8
  5531                           tblptrh	equ	0xFF7
  5532                           tblptrl	equ	0xFF6
  5533                           tablat	equ	0xFF5
  5534                           prodh	equ	0xFF4
  5535                           prodl	equ	0xFF3
  5536                           postinc0	equ	0xFEE
  5537                           wreg	equ	0xFE8
  5538                           postdec1	equ	0xFE5
  5539                           fsr1h	equ	0xFE2
  5540                           fsr1l	equ	0xFE1
  5541                           indf2	equ	0xFDF
  5542                           postinc2	equ	0xFDE
  5543                           postdec2	equ	0xFDD
  5544                           fsr2h	equ	0xFDA
  5545                           fsr2l	equ	0xFD9
  5546                           status	equ	0xFD8
  5547                           
  5548 ;; *************** function _Console_Backspace *****************
  5549 ;; Defined at:
  5550 ;;		line 209 in file "Library/Console.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;                  1    wreg      void 
  5557 ;; Registers used:
  5558 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5568 ;;Total ram usage:        0 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; Hardware stack levels required when called:    8
  5571 ;; This function calls:
  5572 ;;		_Console_ClearCursor
  5573 ;; This function is called by:
  5574 ;;		_Console_PrintChar
  5575 ;; This function uses a non-reentrant model
  5576 ;;
  5577                           
  5578                           	psect	text18
  5579  01362E                     __ptext18:
  5580                           	opt stack 0
  5581  01362E                     _Console_Backspace:
  5582                           	opt stack 19
  5583                           
  5584                           ;Console.c: 211: if (lBufferX > 0)
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;incstack = 0
  5588  01362E  0100               	movlb	0	; () banked
  5589  013630  518D               	movf	_lBufferX& (0+255),w,b
  5590  013632  B4D8               	btfsc	status,2,c
  5591  013634  D007               	goto	l997
  5592                           
  5593                           ; BSR set to: 0
  5594                           ;Console.c: 212: {
  5595                           ;Console.c: 213: gCursor.x -= 6;
  5596  013636  0EFA               	movlw	250
  5597  013638  2647               	addwf	_gCursor,f,c
  5598  01363A  0EFF               	movlw	255
  5599  01363C  2248               	addwfc	_gCursor+1,f,c
  5600                           
  5601                           ; BSR set to: 0
  5602                           ;Console.c: 216: lBufferX --;
  5603  01363E  0100               	movlb	0	; () banked
  5604  013640  078D               	decf	_lBufferX& (0+255),f,b
  5605                           
  5606                           ;Console.c: 218: }
  5607  013642  D020               	goto	l1000
  5608  013644                     l997:
  5609                           
  5610                           ; BSR set to: 0
  5611                           ;Console.c: 219: else if (lBufferY > 0)
  5612                           
  5613                           ; BSR set to: 0
  5614  013644  0100               	movlb	0	; () banked
  5615  013646  518C               	movf	_lBufferY& (0+255),w,b
  5616  013648  B4D8               	btfsc	status,2,c
  5617  01364A  D00E               	goto	l999
  5618                           
  5619                           ; BSR set to: 0
  5620                           ;Console.c: 220: {
  5621                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5622  01364C  0E00               	movlw	0
  5623  01364E  6E48               	movwf	_gCursor+1,c
  5624  013650  0E72               	movlw	114
  5625  013652  6E47               	movwf	_gCursor,c
  5626                           
  5627                           ; BSR set to: 0
  5628                           ;Console.c: 222: gCursor.y -= 8;
  5629  013654  0EF8               	movlw	248
  5630  013656  2649               	addwf	_gCursor+2,f,c
  5631  013658  0EFF               	movlw	255
  5632  01365A  224A               	addwfc	_gCursor+3,f,c
  5633                           
  5634                           ; BSR set to: 0
  5635                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5636  01365C  0E13               	movlw	19
  5637  01365E  0100               	movlb	0	; () banked
  5638  013660  6F8D               	movwf	_lBufferX& (0+255),b
  5639                           
  5640                           ; BSR set to: 0
  5641                           ;Console.c: 226: lBufferY --;
  5642  013662  0100               	movlb	0	; () banked
  5643  013664  078C               	decf	_lBufferY& (0+255),f,b
  5644                           
  5645                           ;Console.c: 228: }
  5646  013666  D00E               	goto	l1000
  5647  013668                     l999:
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;Console.c: 229: else
  5651                           ;Console.c: 230: {
  5652                           ;Console.c: 231: gCursor.x = 6;
  5653                           
  5654                           ; BSR set to: 0
  5655  013668  0E00               	movlw	0
  5656  01366A  6E48               	movwf	_gCursor+1,c
  5657  01366C  0E06               	movlw	6
  5658  01366E  6E47               	movwf	_gCursor,c
  5659                           
  5660                           ;Console.c: 232: gCursor.y = 6;
  5661  013670  0E00               	movlw	0
  5662  013672  6E4A               	movwf	_gCursor+3,c
  5663  013674  0E06               	movlw	6
  5664  013676  6E49               	movwf	_gCursor+2,c
  5665                           
  5666                           ;Console.c: 235: lBufferX = 0;
  5667  013678  0E00               	movlw	0
  5668  01367A  0100               	movlb	0	; () banked
  5669  01367C  6F8D               	movwf	_lBufferX& (0+255),b
  5670                           
  5671                           ;Console.c: 236: lBufferY = 0;
  5672  01367E  0E00               	movlw	0
  5673  013680  0100               	movlb	0	; () banked
  5674  013682  6F8C               	movwf	_lBufferY& (0+255),b
  5675  013684                     l1000:
  5676                           
  5677                           ; BSR set to: 0
  5678                           ;Console.c: 238: }
  5679                           ;Console.c: 240: Console_ClearCursor();
  5680                           
  5681                           ; BSR set to: 0
  5682                           
  5683                           ; BSR set to: 0
  5684  013684  EC5D  F09D         	call	_Console_ClearCursor	;wreg free
  5685  013688  0012               	return		;funcret
  5686  01368A                     __end_of_Console_Backspace:
  5687                           	opt stack 0
  5688                           tblptru	equ	0xFF8
  5689                           tblptrh	equ	0xFF7
  5690                           tblptrl	equ	0xFF6
  5691                           tablat	equ	0xFF5
  5692                           prodh	equ	0xFF4
  5693                           prodl	equ	0xFF3
  5694                           postinc0	equ	0xFEE
  5695                           wreg	equ	0xFE8
  5696                           postdec1	equ	0xFE5
  5697                           fsr1h	equ	0xFE2
  5698                           fsr1l	equ	0xFE1
  5699                           indf2	equ	0xFDF
  5700                           postinc2	equ	0xFDE
  5701                           postdec2	equ	0xFDD
  5702                           fsr2h	equ	0xFDA
  5703                           fsr2l	equ	0xFD9
  5704                           status	equ	0xFD8
  5705                           
  5706 ;; *************** function _Console_ClearCursor *****************
  5707 ;; Defined at:
  5708 ;;		line 308 in file "Library/Console.c"
  5709 ;; Parameters:    Size  Location     Type
  5710 ;;		None
  5711 ;; Auto vars:     Size  Location     Type
  5712 ;;		None
  5713 ;; Return value:  Size  Location     Type
  5714 ;;                  1    wreg      void 
  5715 ;; Registers used:
  5716 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5717 ;; Tracked objects:
  5718 ;;		On entry : 0/0
  5719 ;;		On exit  : 0/0
  5720 ;;		Unchanged: 0/0
  5721 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5722 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5723 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5724 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5725 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5726 ;;Total ram usage:        2 bytes
  5727 ;; Hardware stack levels used:    1
  5728 ;; Hardware stack levels required when called:    7
  5729 ;; This function calls:
  5730 ;;		Nothing
  5731 ;; This function is called by:
  5732 ;;		_Console_Backspace
  5733 ;;		_Console_Tab
  5734 ;; This function uses a non-reentrant model
  5735 ;;
  5736                           
  5737                           	psect	text19
  5738  013ABA                     __ptext19:
  5739                           	opt stack 0
  5740  013ABA                     _Console_ClearCursor:
  5741                           	opt stack 19
  5742                           
  5743                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  5744                           
  5745                           ;incstack = 0
  5746  013ABA  0E01               	movlw	1
  5747  013ABC  0100               	movlb	0	; () banked
  5748  013ABE  6FFF               	movwf	_change& (0+255),b
  5749                           
  5750                           ; BSR set to: 0
  5751  013AC0  0100               	movlb	0	; () banked
  5752  013AC2  518C               	movf	_lBufferY& (0+255),w,b
  5753  013AC4  0D14               	mullw	20
  5754  013AC6  0EAA               	movlw	low _lBuffer
  5755  013AC8  0100               	movlb	0	; () banked
  5756  013ACA  6FB5               	movwf	??_Console_ClearCursor& (0+255),b
  5757  013ACC  0E04               	movlw	high _lBuffer
  5758  013ACE  0100               	movlb	0	; () banked
  5759  013AD0  6FB6               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  5760  013AD2  50F3               	movf	prodl,w,c
  5761  013AD4  0100               	movlb	0	; () banked
  5762  013AD6  27B5               	addwf	??_Console_ClearCursor& (0+255),f,b
  5763  013AD8  50F4               	movf	prodh,w,c
  5764  013ADA  0100               	movlb	0	; () banked
  5765  013ADC  23B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  5766  013ADE  0100               	movlb	0	; () banked
  5767  013AE0  518D               	movf	_lBufferX& (0+255),w,b
  5768  013AE2  0D01               	mullw	1
  5769  013AE4  50F3               	movf	prodl,w,c
  5770  013AE6  0100               	movlb	0	; () banked
  5771  013AE8  25B5               	addwf	??_Console_ClearCursor& (0+255),w,b
  5772  013AEA  6ED9               	movwf	fsr2l,c
  5773  013AEC  50F4               	movf	prodh,w,c
  5774  013AEE  0100               	movlb	0	; () banked
  5775  013AF0  21B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  5776  013AF2  6EDA               	movwf	fsr2h,c
  5777  013AF4  0E80               	movlw	128
  5778  013AF6  6EDF               	movwf	indf2,c
  5779                           
  5780                           ; BSR set to: 0
  5781  013AF8  0012               	return		;funcret
  5782  013AFA                     __end_of_Console_ClearCursor:
  5783                           	opt stack 0
  5784                           tblptru	equ	0xFF8
  5785                           tblptrh	equ	0xFF7
  5786                           tblptrl	equ	0xFF6
  5787                           tablat	equ	0xFF5
  5788                           prodh	equ	0xFF4
  5789                           prodl	equ	0xFF3
  5790                           postinc0	equ	0xFEE
  5791                           wreg	equ	0xFE8
  5792                           postdec1	equ	0xFE5
  5793                           fsr1h	equ	0xFE2
  5794                           fsr1l	equ	0xFE1
  5795                           indf2	equ	0xFDF
  5796                           postinc2	equ	0xFDE
  5797                           postdec2	equ	0xFDD
  5798                           fsr2h	equ	0xFDA
  5799                           fsr2l	equ	0xFD9
  5800                           status	equ	0xFD8
  5801                           
  5802 ;; *************** function ___lwmod *****************
  5803 ;; Defined at:
  5804 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  dividend        2    7[BANK0 ] unsigned int 
  5807 ;;  divisor         2    9[BANK0 ] unsigned int 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;  counter         1   11[BANK0 ] unsigned char 
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  2    7[BANK0 ] unsigned int 
  5812 ;; Registers used:
  5813 ;;		wreg, status,2, status,0
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5819 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5820 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5822 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5823 ;;Total ram usage:        5 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    7
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_printf
  5830 ;;		_itos
  5831 ;; This function uses a non-reentrant model
  5832 ;;
  5833                           
  5834                           	psect	text20
  5835  01356A                     __ptext20:
  5836                           	opt stack 0
  5837  01356A                     ___lwmod:
  5838                           	opt stack 22
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;incstack = 0
  5842  01356A  0100               	movlb	0	; () banked
  5843  01356C  51BE               	movf	___lwmod@divisor& (0+255),w,b
  5844  01356E  0100               	movlb	0	; () banked
  5845  013570  11BF               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  5846  013572  B4D8               	btfsc	status,2,c
  5847  013574  D026               	goto	l2700
  5848                           
  5849                           ; BSR set to: 0
  5850  013576  0E01               	movlw	1
  5851  013578  0100               	movlb	0	; () banked
  5852  01357A  6FC0               	movwf	___lwmod@counter& (0+255),b
  5853  01357C  D006               	goto	l2695
  5854  01357E                     
  5855                           ; BSR set to: 0
  5856                           
  5857                           ; BSR set to: 0
  5858  01357E  0100               	movlb	0	; () banked
  5859  013580  90D8               	bcf	status,0,c
  5860  013582  37BE               	rlcf	___lwmod@divisor& (0+255),f,b
  5861  013584  37BF               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  5862  013586  0100               	movlb	0	; () banked
  5863  013588  2BC0               	incf	___lwmod@counter& (0+255),f,b
  5864  01358A                     l2695:
  5865                           
  5866                           ; BSR set to: 0
  5867                           
  5868                           ; BSR set to: 0
  5869  01358A  0100               	movlb	0	; () banked
  5870  01358C  AFBF               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  5871  01358E  D7F7               	goto	l2696
  5872  013590                     u7700:
  5873                           
  5874                           ; BSR set to: 0
  5875                           
  5876                           ; BSR set to: 0
  5877                           
  5878                           ; BSR set to: 0
  5879  013590  0100               	movlb	0	; () banked
  5880  013592  51BE               	movf	___lwmod@divisor& (0+255),w,b
  5881  013594  0100               	movlb	0	; () banked
  5882  013596  5DBC               	subwf	___lwmod@dividend& (0+255),w,b
  5883  013598  0100               	movlb	0	; () banked
  5884  01359A  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5885  01359C  0100               	movlb	0	; () banked
  5886  01359E  59BD               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  5887  0135A0  A0D8               	btfss	status,0,c
  5888  0135A2  D008               	goto	l2699
  5889                           
  5890                           ; BSR set to: 0
  5891  0135A4  0100               	movlb	0	; () banked
  5892  0135A6  51BE               	movf	___lwmod@divisor& (0+255),w,b
  5893  0135A8  0100               	movlb	0	; () banked
  5894  0135AA  5FBC               	subwf	___lwmod@dividend& (0+255),f,b
  5895  0135AC  0100               	movlb	0	; () banked
  5896  0135AE  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
  5897  0135B0  0100               	movlb	0	; () banked
  5898  0135B2  5BBD               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  5899  0135B4                     l2699:
  5900                           
  5901                           ; BSR set to: 0
  5902                           
  5903                           ; BSR set to: 0
  5904  0135B4  0100               	movlb	0	; () banked
  5905  0135B6  90D8               	bcf	status,0,c
  5906  0135B8  33BF               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  5907  0135BA  33BE               	rrcf	___lwmod@divisor& (0+255),f,b
  5908                           
  5909                           ; BSR set to: 0
  5910  0135BC  0100               	movlb	0	; () banked
  5911  0135BE  2FC0               	decfsz	___lwmod@counter& (0+255),f,b
  5912  0135C0  D7E7               	goto	u7700
  5913  0135C2                     l2700:
  5914                           
  5915                           ; BSR set to: 0
  5916                           
  5917                           ; BSR set to: 0
  5918  0135C2  C0BC  F0BC         	movff	___lwmod@dividend,?___lwmod
  5919  0135C6  C0BD  F0BD         	movff	___lwmod@dividend+1,?___lwmod+1
  5920                           
  5921                           ; BSR set to: 0
  5922  0135CA  0012               	return		;funcret
  5923  0135CC                     __end_of___lwmod:
  5924                           	opt stack 0
  5925                           tblptru	equ	0xFF8
  5926                           tblptrh	equ	0xFF7
  5927                           tblptrl	equ	0xFF6
  5928                           tablat	equ	0xFF5
  5929                           prodh	equ	0xFF4
  5930                           prodl	equ	0xFF3
  5931                           postinc0	equ	0xFEE
  5932                           wreg	equ	0xFE8
  5933                           postdec1	equ	0xFE5
  5934                           fsr1h	equ	0xFE2
  5935                           fsr1l	equ	0xFE1
  5936                           indf2	equ	0xFDF
  5937                           postinc2	equ	0xFDE
  5938                           postdec2	equ	0xFDD
  5939                           fsr2h	equ	0xFDA
  5940                           fsr2l	equ	0xFD9
  5941                           status	equ	0xFD8
  5942                           
  5943 ;; *************** function ___lwdiv *****************
  5944 ;; Defined at:
  5945 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  5946 ;; Parameters:    Size  Location     Type
  5947 ;;  dividend        2    0[BANK0 ] unsigned int 
  5948 ;;  divisor         2    2[BANK0 ] unsigned int 
  5949 ;; Auto vars:     Size  Location     Type
  5950 ;;  quotient        2    5[BANK0 ] unsigned int 
  5951 ;;  counter         1    4[BANK0 ] unsigned char 
  5952 ;; Return value:  Size  Location     Type
  5953 ;;                  2    0[BANK0 ] unsigned int 
  5954 ;; Registers used:
  5955 ;;		wreg, status,2, status,0
  5956 ;; Tracked objects:
  5957 ;;		On entry : 0/0
  5958 ;;		On exit  : 0/0
  5959 ;;		Unchanged: 0/0
  5960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5961 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5962 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5964 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5965 ;;Total ram usage:        7 bytes
  5966 ;; Hardware stack levels used:    1
  5967 ;; Hardware stack levels required when called:    7
  5968 ;; This function calls:
  5969 ;;		Nothing
  5970 ;; This function is called by:
  5971 ;;		_printf
  5972 ;;		_itos
  5973 ;; This function uses a non-reentrant model
  5974 ;;
  5975                           
  5976                           	psect	text21
  5977  012F72                     __ptext21:
  5978                           	opt stack 0
  5979  012F72                     ___lwdiv:
  5980                           	opt stack 22
  5981                           
  5982                           ; BSR set to: 0
  5983                           ;incstack = 0
  5984  012F72  0E00               	movlw	0
  5985  012F74  0100               	movlb	0	; () banked
  5986  012F76  6FBB               	movwf	(___lwdiv@quotient+1)& (0+255),b
  5987  012F78  0E00               	movlw	0
  5988  012F7A  6FBA               	movwf	___lwdiv@quotient& (0+255),b
  5989                           
  5990                           ; BSR set to: 0
  5991  012F7C  0100               	movlb	0	; () banked
  5992  012F7E  51B7               	movf	___lwdiv@divisor& (0+255),w,b
  5993  012F80  0100               	movlb	0	; () banked
  5994  012F82  11B8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  5995  012F84  B4D8               	btfsc	status,2,c
  5996  012F86  D02C               	goto	l2690
  5997                           
  5998                           ; BSR set to: 0
  5999  012F88  0E01               	movlw	1
  6000  012F8A  0100               	movlb	0	; () banked
  6001  012F8C  6FB9               	movwf	___lwdiv@counter& (0+255),b
  6002  012F8E  D006               	goto	l2685
  6003  012F90                     
  6004                           ; BSR set to: 0
  6005                           
  6006                           ; BSR set to: 0
  6007  012F90  0100               	movlb	0	; () banked
  6008  012F92  90D8               	bcf	status,0,c
  6009  012F94  37B7               	rlcf	___lwdiv@divisor& (0+255),f,b
  6010  012F96  37B8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  6011  012F98  0100               	movlb	0	; () banked
  6012  012F9A  2BB9               	incf	___lwdiv@counter& (0+255),f,b
  6013  012F9C                     l2685:
  6014                           
  6015                           ; BSR set to: 0
  6016                           
  6017                           ; BSR set to: 0
  6018  012F9C  0100               	movlb	0	; () banked
  6019  012F9E  AFB8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  6020  012FA0  D7F7               	goto	l2686
  6021  012FA2                     u7670:
  6022                           
  6023                           ; BSR set to: 0
  6024                           
  6025                           ; BSR set to: 0
  6026                           
  6027                           ; BSR set to: 0
  6028  012FA2  0100               	movlb	0	; () banked
  6029  012FA4  90D8               	bcf	status,0,c
  6030  012FA6  37BA               	rlcf	___lwdiv@quotient& (0+255),f,b
  6031  012FA8  37BB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  6032                           
  6033                           ; BSR set to: 0
  6034  012FAA  0100               	movlb	0	; () banked
  6035  012FAC  51B7               	movf	___lwdiv@divisor& (0+255),w,b
  6036  012FAE  0100               	movlb	0	; () banked
  6037  012FB0  5DB5               	subwf	___lwdiv@dividend& (0+255),w,b
  6038  012FB2  0100               	movlb	0	; () banked
  6039  012FB4  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6040  012FB6  0100               	movlb	0	; () banked
  6041  012FB8  59B6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  6042  012FBA  A0D8               	btfss	status,0,c
  6043  012FBC  D00A               	goto	l2689
  6044                           
  6045                           ; BSR set to: 0
  6046  012FBE  0100               	movlb	0	; () banked
  6047  012FC0  51B7               	movf	___lwdiv@divisor& (0+255),w,b
  6048  012FC2  0100               	movlb	0	; () banked
  6049  012FC4  5FB5               	subwf	___lwdiv@dividend& (0+255),f,b
  6050  012FC6  0100               	movlb	0	; () banked
  6051  012FC8  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  6052  012FCA  0100               	movlb	0	; () banked
  6053  012FCC  5BB6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  6054                           
  6055                           ; BSR set to: 0
  6056  012FCE  0100               	movlb	0	; () banked
  6057  012FD0  81BA               	bsf	___lwdiv@quotient& (0+255),0,b
  6058  012FD2                     l2689:
  6059                           
  6060                           ; BSR set to: 0
  6061                           
  6062                           ; BSR set to: 0
  6063  012FD2  0100               	movlb	0	; () banked
  6064  012FD4  90D8               	bcf	status,0,c
  6065  012FD6  33B8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  6066  012FD8  33B7               	rrcf	___lwdiv@divisor& (0+255),f,b
  6067                           
  6068                           ; BSR set to: 0
  6069  012FDA  0100               	movlb	0	; () banked
  6070  012FDC  2FB9               	decfsz	___lwdiv@counter& (0+255),f,b
  6071  012FDE  D7E1               	goto	u7670
  6072  012FE0                     l2690:
  6073                           
  6074                           ; BSR set to: 0
  6075                           
  6076                           ; BSR set to: 0
  6077  012FE0  C0BA  F0B5         	movff	___lwdiv@quotient,?___lwdiv
  6078  012FE4  C0BB  F0B6         	movff	___lwdiv@quotient+1,?___lwdiv+1
  6079                           
  6080                           ; BSR set to: 0
  6081  012FE8  0012               	return		;funcret
  6082  012FEA                     __end_of___lwdiv:
  6083                           	opt stack 0
  6084                           tblptru	equ	0xFF8
  6085                           tblptrh	equ	0xFF7
  6086                           tblptrl	equ	0xFF6
  6087                           tablat	equ	0xFF5
  6088                           prodh	equ	0xFF4
  6089                           prodl	equ	0xFF3
  6090                           postinc0	equ	0xFEE
  6091                           wreg	equ	0xFE8
  6092                           postdec1	equ	0xFE5
  6093                           fsr1h	equ	0xFE2
  6094                           fsr1l	equ	0xFE1
  6095                           indf2	equ	0xFDF
  6096                           postinc2	equ	0xFDE
  6097                           postdec2	equ	0xFDD
  6098                           fsr2h	equ	0xFDA
  6099                           fsr2l	equ	0xFD9
  6100                           status	equ	0xFD8
  6101                           
  6102 ;; *************** function _irobot_stop_motion *****************
  6103 ;; Defined at:
  6104 ;;		line 288 in file "Library/iRobotSerial.c"
  6105 ;; Parameters:    Size  Location     Type
  6106 ;;  isScript        1    wreg     unsigned char 
  6107 ;; Auto vars:     Size  Location     Type
  6108 ;;  isScript        1   25[BANK0 ] unsigned char 
  6109 ;; Return value:  Size  Location     Type
  6110 ;;                  1    wreg      void 
  6111 ;; Registers used:
  6112 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6113 ;; Tracked objects:
  6114 ;;		On entry : 0/0
  6115 ;;		On exit  : 0/0
  6116 ;;		Unchanged: 0/0
  6117 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6118 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6119 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6120 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6121 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6122 ;;Total ram usage:        1 bytes
  6123 ;; Hardware stack levels used:    1
  6124 ;; Hardware stack levels required when called:    9
  6125 ;; This function calls:
  6126 ;;		_irobot_move
  6127 ;; This function is called by:
  6128 ;;		_main
  6129 ;;		_irobot_move_to_simple
  6130 ;;		_irobot_rotate_to
  6131 ;; This function uses a non-reentrant model
  6132 ;;
  6133                           
  6134                           	psect	text22
  6135  013962                     __ptext22:
  6136                           	opt stack 0
  6137  013962                     _irobot_stop_motion:
  6138                           	opt stack 21
  6139                           
  6140                           ; BSR set to: 0
  6141                           ;incstack = 0
  6142                           ;irobot_stop_motion@isScript stored from wreg
  6143  013962  0100               	movlb	0	; () banked
  6144  013964  6FCE               	movwf	irobot_stop_motion@isScript& (0+255),b
  6145                           
  6146                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6147  013966  0100               	movlb	0	; () banked
  6148  013968  51CE               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6149  01396A  0100               	movlb	0	; () banked
  6150  01396C  B4D8               	btfsc	status,2,c
  6151  01396E  D00E               	goto	l2226
  6152                           
  6153                           ; BSR set to: 0
  6154  013970  0E00               	movlw	0
  6155  013972  0100               	movlb	0	; () banked
  6156  013974  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6157  013976  0E00               	movlw	0
  6158  013978  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6159  01397A  0E00               	movlw	0
  6160  01397C  0100               	movlb	0	; () banked
  6161  01397E  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6162  013980  0E00               	movlw	0
  6163  013982  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6164  013984  0E01               	movlw	1
  6165  013986  EC19  F093         	call	_irobot_move
  6166  01398A  0012               	return	
  6167  01398C                     l2226:
  6168  01398C  0E00               	movlw	0
  6169  01398E  0100               	movlb	0	; () banked
  6170  013990  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6171  013992  0E00               	movlw	0
  6172  013994  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6173  013996  0E00               	movlw	0
  6174  013998  0100               	movlb	0	; () banked
  6175  01399A  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6176  01399C  0E00               	movlw	0
  6177  01399E  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6178  0139A0  0E00               	movlw	0
  6179  0139A2  EC19  F093         	call	_irobot_move
  6180  0139A6  0012               	return	
  6181  0139A8                     __end_of_irobot_stop_motion:
  6182                           	opt stack 0
  6183                           tblptru	equ	0xFF8
  6184                           tblptrh	equ	0xFF7
  6185                           tblptrl	equ	0xFF6
  6186                           tablat	equ	0xFF5
  6187                           prodh	equ	0xFF4
  6188                           prodl	equ	0xFF3
  6189                           postinc0	equ	0xFEE
  6190                           wreg	equ	0xFE8
  6191                           postdec1	equ	0xFE5
  6192                           fsr1h	equ	0xFE2
  6193                           fsr1l	equ	0xFE1
  6194                           indf2	equ	0xFDF
  6195                           postinc2	equ	0xFDE
  6196                           postdec2	equ	0xFDD
  6197                           fsr2h	equ	0xFDA
  6198                           fsr2l	equ	0xFD9
  6199                           status	equ	0xFD8
  6200                           
  6201 ;; *************** function _irobot_song_play *****************
  6202 ;; Defined at:
  6203 ;;		line 274 in file "Library/iRobotSerial.c"
  6204 ;; Parameters:    Size  Location     Type
  6205 ;;  songNumber      1    wreg     unsigned char 
  6206 ;; Auto vars:     Size  Location     Type
  6207 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6208 ;; Return value:  Size  Location     Type
  6209 ;;                  1    wreg      void 
  6210 ;; Registers used:
  6211 ;;		wreg, status,2, cstack
  6212 ;; Tracked objects:
  6213 ;;		On entry : 0/0
  6214 ;;		On exit  : 0/0
  6215 ;;		Unchanged: 0/0
  6216 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6217 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6218 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6219 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6220 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6221 ;;Total ram usage:        1 bytes
  6222 ;; Hardware stack levels used:    1
  6223 ;; Hardware stack levels required when called:    8
  6224 ;; This function calls:
  6225 ;;		_eusart_putch
  6226 ;; This function is called by:
  6227 ;;		_main
  6228 ;; This function uses a non-reentrant model
  6229 ;;
  6230                           
  6231                           	psect	text23
  6232  013F7C                     __ptext23:
  6233                           	opt stack 0
  6234  013F7C                     _irobot_song_play:
  6235                           	opt stack 22
  6236                           
  6237                           ;incstack = 0
  6238                           ;irobot_song_play@songNumber stored from wreg
  6239  013F7C  0100               	movlb	0	; () banked
  6240  013F7E  6FB6               	movwf	irobot_song_play@songNumber& (0+255),b
  6241                           
  6242                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6243  013F80  0E8D               	movlw	141
  6244  013F82  ECF1  F09F         	call	_eusart_putch
  6245                           
  6246                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6247  013F86  0100               	movlb	0	; () banked
  6248  013F88  51B6               	movf	irobot_song_play@songNumber& (0+255),w,b
  6249  013F8A  ECF1  F09F         	call	_eusart_putch
  6250  013F8E  0012               	return		;funcret
  6251  013F90                     __end_of_irobot_song_play:
  6252                           	opt stack 0
  6253                           tblptru	equ	0xFF8
  6254                           tblptrh	equ	0xFF7
  6255                           tblptrl	equ	0xFF6
  6256                           tablat	equ	0xFF5
  6257                           prodh	equ	0xFF4
  6258                           prodl	equ	0xFF3
  6259                           postinc0	equ	0xFEE
  6260                           wreg	equ	0xFE8
  6261                           postdec1	equ	0xFE5
  6262                           fsr1h	equ	0xFE2
  6263                           fsr1l	equ	0xFE1
  6264                           indf2	equ	0xFDF
  6265                           postinc2	equ	0xFDE
  6266                           postdec2	equ	0xFDD
  6267                           fsr2h	equ	0xFDA
  6268                           fsr2l	equ	0xFD9
  6269                           status	equ	0xFD8
  6270                           
  6271 ;; *************** function _irobot_rotate *****************
  6272 ;; Defined at:
  6273 ;;		line 280 in file "Library/iRobotSerial.c"
  6274 ;; Parameters:    Size  Location     Type
  6275 ;;  isScript        1    wreg     unsigned char 
  6276 ;;  rotateAngle     2   25[BANK0 ] short 
  6277 ;;  rotateSpeed     2   27[BANK0 ] short 
  6278 ;; Auto vars:     Size  Location     Type
  6279 ;;  isScript        1   29[BANK0 ] unsigned char 
  6280 ;; Return value:  Size  Location     Type
  6281 ;;                  1    wreg      void 
  6282 ;; Registers used:
  6283 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6284 ;; Tracked objects:
  6285 ;;		On entry : 0/0
  6286 ;;		On exit  : 0/0
  6287 ;;		Unchanged: 0/0
  6288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6289 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6292 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6293 ;;Total ram usage:        5 bytes
  6294 ;; Hardware stack levels used:    1
  6295 ;; Hardware stack levels required when called:    9
  6296 ;; This function calls:
  6297 ;;		_irobot_move
  6298 ;; This function is called by:
  6299 ;;		_main
  6300 ;;		_irobot_rotate_to
  6301 ;; This function uses a non-reentrant model
  6302 ;;
  6303                           
  6304                           	psect	text24
  6305  0134A2                     __ptext24:
  6306                           	opt stack 0
  6307  0134A2                     _irobot_rotate:
  6308                           	opt stack 21
  6309                           
  6310                           ;incstack = 0
  6311                           ;irobot_rotate@isScript stored from wreg
  6312  0134A2  0100               	movlb	0	; () banked
  6313  0134A4  6FD2               	movwf	irobot_rotate@isScript& (0+255),b
  6314                           
  6315                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  6316  0134A6  0100               	movlb	0	; () banked
  6317  0134A8  BFCF               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  6318  0134AA  D00D               	goto	l2215
  6319  0134AC  0100               	movlb	0	; () banked
  6320  0134AE  51CF               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  6321  0134B0  E104               	bnz	u8200
  6322  0134B2  0100               	movlb	0	; () banked
  6323  0134B4  05CE               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  6324  0134B6  A0D8               	btfss	status,0,c
  6325  0134B8  D006               	goto	l2215
  6326  0134BA                     u8200:
  6327                           
  6328                           ; BSR set to: 0
  6329  0134BA  0E00               	movlw	0
  6330  0134BC  0100               	movlb	0	; () banked
  6331  0134BE  6FCF               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  6332  0134C0  0E01               	movlw	1
  6333  0134C2  6FCE               	movwf	irobot_rotate@rotateAngle& (0+255),b
  6334  0134C4  D003               	goto	l2217
  6335  0134C6                     l2215:
  6336                           
  6337                           ; BSR set to: 0
  6338  0134C6  0100               	movlb	0	; () banked
  6339  0134C8  69CE               	setf	irobot_rotate@rotateAngle& (0+255),b
  6340  0134CA  69CF               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  6341  0134CC                     l2217:
  6342                           
  6343                           ; BSR set to: 0
  6344                           ;iRobotSerial.c: 282: (isScript) ?
  6345                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle):
  6346                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
  6347                           
  6348                           ; BSR set to: 0
  6349  0134CC  0100               	movlb	0	; () banked
  6350  0134CE  51D2               	movf	irobot_rotate@isScript& (0+255),w,b
  6351  0134D0  0100               	movlb	0	; () banked
  6352  0134D2  B4D8               	btfsc	status,2,c
  6353  0134D4  D00C               	goto	l2219
  6354                           
  6355                           ; BSR set to: 0
  6356  0134D6  C0D0  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  6357  0134DA  C0D1  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  6358  0134DE  C0CE  F0C7         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  6359  0134E2  C0CF  F0C8         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  6360  0134E6  0E01               	movlw	1
  6361  0134E8  EC19  F093         	call	_irobot_move
  6362  0134EC  0012               	return	
  6363  0134EE                     l2219:
  6364  0134EE  C0D0  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  6365  0134F2  C0D1  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  6366  0134F6  C0CE  F0C7         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  6367  0134FA  C0CF  F0C8         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  6368  0134FE  0E00               	movlw	0
  6369  013500  EC19  F093         	call	_irobot_move
  6370  013504  0012               	return	
  6371  013506                     __end_of_irobot_rotate:
  6372                           	opt stack 0
  6373                           tblptru	equ	0xFF8
  6374                           tblptrh	equ	0xFF7
  6375                           tblptrl	equ	0xFF6
  6376                           tablat	equ	0xFF5
  6377                           prodh	equ	0xFF4
  6378                           prodl	equ	0xFF3
  6379                           postinc0	equ	0xFEE
  6380                           wreg	equ	0xFE8
  6381                           postdec1	equ	0xFE5
  6382                           fsr1h	equ	0xFE2
  6383                           fsr1l	equ	0xFE1
  6384                           indf2	equ	0xFDF
  6385                           postinc2	equ	0xFDE
  6386                           postdec2	equ	0xFDD
  6387                           fsr2h	equ	0xFDA
  6388                           fsr2l	equ	0xFD9
  6389                           status	equ	0xFD8
  6390                           
  6391 ;; *************** function _irobot_move *****************
  6392 ;; Defined at:
  6393 ;;		line 220 in file "Library/iRobotSerial.c"
  6394 ;; Parameters:    Size  Location     Type
  6395 ;;  isScript        1    wreg     unsigned char 
  6396 ;;  moveSpeed       2   16[BANK0 ] short 
  6397 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;  isScript        1   24[BANK0 ] unsigned char 
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      void 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6409 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;Total ram usage:        9 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    8
  6416 ;; This function calls:
  6417 ;;		_eusart_putch
  6418 ;;		_load_iRScriptStack
  6419 ;;		_twos_complement_of
  6420 ;; This function is called by:
  6421 ;;		_irobot_rotate
  6422 ;;		_irobot_stop_motion
  6423 ;;		_irobot_move_straight
  6424 ;;		_irobot_move_to_simple
  6425 ;; This function uses a non-reentrant model
  6426 ;;
  6427                           
  6428                           	psect	text25
  6429  012632                     __ptext25:
  6430                           	opt stack 0
  6431  012632                     _irobot_move:
  6432                           	opt stack 21
  6433                           
  6434                           ;incstack = 0
  6435                           ;irobot_move@isScript stored from wreg
  6436  012632  0100               	movlb	0	; () banked
  6437  012634  6FCD               	movwf	irobot_move@isScript& (0+255),b
  6438                           
  6439                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  6440  012636  C0C5  F0B5         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6441  01263A  C0C6  F0B6         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6442  01263E  EC1A  F09D         	call	_twos_complement_of	;wreg free
  6443  012642  C0B5  F0C5         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6444  012646  C0B6  F0C6         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6445                           
  6446                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6447  01264A  C0C7  F0B5         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6448  01264E  C0C8  F0B6         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6449  012652  EC1A  F09D         	call	_twos_complement_of	;wreg free
  6450  012656  C0B5  F0C7         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6451  01265A  C0B6  F0C8         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6452                           
  6453                           ;iRobotSerial.c: 224: if (isScript){
  6454  01265E  0100               	movlb	0	; () banked
  6455  012660  51CD               	movf	irobot_move@isScript& (0+255),w,b
  6456  012662  0100               	movlb	0	; () banked
  6457  012664  B4D8               	btfsc	status,2,c
  6458  012666  D029               	goto	l2198
  6459                           
  6460                           ; BSR set to: 0
  6461                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  6462                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6463                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6464  012668  0E00               	movlw	0
  6465  01266A  0100               	movlb	0	; () banked
  6466  01266C  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6467  01266E  0E89               	movlw	137
  6468  012670  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6469  012672  C0C6  F0C9         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6470  012676  0100               	movlb	0	; () banked
  6471  012678  6BCA               	clrf	(??_irobot_move+1)& (0+255),b
  6472  01267A  BFC9               	btfsc	??_irobot_move& (0+255),7,b
  6473  01267C  69CA               	setf	(??_irobot_move+1)& (0+255),b
  6474  01267E  0100               	movlb	0	; () banked
  6475  012680  51C9               	movf	??_irobot_move& (0+255),w,b
  6476  012682  0100               	movlb	0	; () banked
  6477  012684  6FB7               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6478  012686  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6479  012688  0100               	movlb	0	; () banked
  6480  01268A  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6481  01268C  0100               	movlb	0	; () banked
  6482  01268E  6FB9               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6483  012690  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6484  012692  C0C8  F0CB         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6485  012696  0100               	movlb	0	; () banked
  6486  012698  6BCC               	clrf	(??_irobot_move+3)& (0+255),b
  6487  01269A  BFCB               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6488  01269C  69CC               	setf	(??_irobot_move+3)& (0+255),b
  6489  01269E  0100               	movlb	0	; () banked
  6490  0126A0  51CB               	movf	(??_irobot_move+2)& (0+255),w,b
  6491  0126A2  0100               	movlb	0	; () banked
  6492  0126A4  6FBB               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6493  0126A6  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6494  0126A8  0100               	movlb	0	; () banked
  6495  0126AA  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6496  0126AC  0100               	movlb	0	; () banked
  6497  0126AE  6FBD               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6498  0126B0  6BBE               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6499  0126B2  0E05               	movlw	5
  6500  0126B4  EC4C  F099         	call	_load_iRScriptStack
  6501                           
  6502                           ;iRobotSerial.c: 228: }
  6503  0126B8  0012               	return	
  6504  0126BA                     l2198:
  6505                           
  6506                           ;iRobotSerial.c: 229: else{
  6507                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  6508  0126BA  0E89               	movlw	137
  6509  0126BC  ECF1  F09F         	call	_eusart_putch
  6510                           
  6511                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6512  0126C0  0100               	movlb	0	; () banked
  6513  0126C2  51C6               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6514  0126C4  ECF1  F09F         	call	_eusart_putch
  6515                           
  6516                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  6517  0126C8  0100               	movlb	0	; () banked
  6518  0126CA  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6519  0126CC  ECF1  F09F         	call	_eusart_putch
  6520                           
  6521                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6522  0126D0  0100               	movlb	0	; () banked
  6523  0126D2  51C8               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6524  0126D4  ECF1  F09F         	call	_eusart_putch
  6525                           
  6526                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  6527  0126D8  0100               	movlb	0	; () banked
  6528  0126DA  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6529  0126DC  ECF1  F09F         	call	_eusart_putch
  6530  0126E0  0012               	return	
  6531  0126E2                     __end_of_irobot_move:
  6532                           	opt stack 0
  6533                           tblptru	equ	0xFF8
  6534                           tblptrh	equ	0xFF7
  6535                           tblptrl	equ	0xFF6
  6536                           tablat	equ	0xFF5
  6537                           prodh	equ	0xFF4
  6538                           prodl	equ	0xFF3
  6539                           postinc0	equ	0xFEE
  6540                           wreg	equ	0xFE8
  6541                           postdec1	equ	0xFE5
  6542                           fsr1h	equ	0xFE2
  6543                           fsr1l	equ	0xFE1
  6544                           indf2	equ	0xFDF
  6545                           postinc2	equ	0xFDE
  6546                           postdec2	equ	0xFDD
  6547                           fsr2h	equ	0xFDA
  6548                           fsr2l	equ	0xFD9
  6549                           status	equ	0xFD8
  6550                           
  6551 ;; *************** function _twos_complement_of *****************
  6552 ;; Defined at:
  6553 ;;		line 167 in file "Library/iRobotSerial.c"
  6554 ;; Parameters:    Size  Location     Type
  6555 ;;  complementVa    2    0[BANK0 ] short 
  6556 ;; Auto vars:     Size  Location     Type
  6557 ;;		None
  6558 ;; Return value:  Size  Location     Type
  6559 ;;                  2    0[BANK0 ] unsigned short 
  6560 ;; Registers used:
  6561 ;;		wreg, status,2, status,0
  6562 ;; Tracked objects:
  6563 ;;		On entry : 0/0
  6564 ;;		On exit  : 0/0
  6565 ;;		Unchanged: 0/0
  6566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6567 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6568 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6569 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6570 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6571 ;;Total ram usage:        2 bytes
  6572 ;; Hardware stack levels used:    1
  6573 ;; Hardware stack levels required when called:    7
  6574 ;; This function calls:
  6575 ;;		Nothing
  6576 ;; This function is called by:
  6577 ;;		_irobot_move
  6578 ;;		_irobot_angle_wait
  6579 ;;		_irobot_distance_wait
  6580 ;; This function uses a non-reentrant model
  6581 ;;
  6582                           
  6583                           	psect	text26
  6584  013A34                     __ptext26:
  6585                           	opt stack 0
  6586  013A34                     _twos_complement_of:
  6587                           	opt stack 21
  6588                           
  6589                           ;iRobotSerial.c: 168: if (complementValue < 0){
  6590                           
  6591                           ;incstack = 0
  6592  013A34  0100               	movlb	0	; () banked
  6593  013A36  AFB6               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6594  013A38  D01A               	goto	l2169
  6595                           
  6596                           ; BSR set to: 0
  6597                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6598  013A3A  0100               	movlb	0	; () banked
  6599  013A3C  BFB6               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6600  013A3E  D007               	goto	u7250
  6601  013A40  0100               	movlb	0	; () banked
  6602  013A42  51B6               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6603  013A44  E10A               	bnz	l2171
  6604  013A46  0100               	movlb	0	; () banked
  6605  013A48  05B5               	decf	twos_complement_of@complementValue& (0+255),w,b
  6606  013A4A  B0D8               	btfsc	status,0,c
  6607  013A4C  D006               	goto	l2171
  6608  013A4E                     u7250:
  6609                           
  6610                           ; BSR set to: 0
  6611  013A4E  0100               	movlb	0	; () banked
  6612  013A50  6DB5               	negf	twos_complement_of@complementValue& (0+255),b
  6613  013A52  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6614  013A54  B0D8               	btfsc	status,0,c
  6615  013A56  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6616  013A58  D004               	goto	l2173
  6617  013A5A                     l2171:
  6618                           
  6619                           ; BSR set to: 0
  6620  013A5A  C0B5  F0B5         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6621  013A5E  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6622  013A62                     l2173:
  6623                           
  6624                           ; BSR set to: 0
  6625                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  6626                           
  6627                           ; BSR set to: 0
  6628  013A62  0100               	movlb	0	; () banked
  6629  013A64  1FB5               	comf	twos_complement_of@complementValue& (0+255),f,b
  6630  013A66  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6631                           
  6632                           ;iRobotSerial.c: 171: complementValue += 1;
  6633  013A68  0100               	movlb	0	; () banked
  6634  013A6A  4BB5               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6635  013A6C  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6636  013A6E                     l2169:
  6637                           
  6638                           ; BSR set to: 0
  6639                           ;iRobotSerial.c: 172: }
  6640                           ;iRobotSerial.c: 173: return complementValue;
  6641                           
  6642                           ; BSR set to: 0
  6643  013A6E  C0B5  F0B5         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6644  013A72  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6645  013A76  0012               	return	
  6646  013A78                     __end_of_twos_complement_of:
  6647                           	opt stack 0
  6648                           tblptru	equ	0xFF8
  6649                           tblptrh	equ	0xFF7
  6650                           tblptrl	equ	0xFF6
  6651                           tablat	equ	0xFF5
  6652                           prodh	equ	0xFF4
  6653                           prodl	equ	0xFF3
  6654                           postinc0	equ	0xFEE
  6655                           wreg	equ	0xFE8
  6656                           postdec1	equ	0xFE5
  6657                           fsr1h	equ	0xFE2
  6658                           fsr1l	equ	0xFE1
  6659                           indf2	equ	0xFDF
  6660                           postinc2	equ	0xFDE
  6661                           postdec2	equ	0xFDD
  6662                           fsr2h	equ	0xFDA
  6663                           fsr2l	equ	0xFD9
  6664                           status	equ	0xFD8
  6665                           
  6666 ;; *************** function _irobot_led_power_on *****************
  6667 ;; Defined at:
  6668 ;;		line 293 in file "Library/iRobotSerial.c"
  6669 ;; Parameters:    Size  Location     Type
  6670 ;;  powerOnColou    1    wreg     unsigned char 
  6671 ;; Auto vars:     Size  Location     Type
  6672 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
  6673 ;; Return value:  Size  Location     Type
  6674 ;;                  1    wreg      void 
  6675 ;; Registers used:
  6676 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6677 ;; Tracked objects:
  6678 ;;		On entry : 0/0
  6679 ;;		On exit  : 0/0
  6680 ;;		Unchanged: 0/0
  6681 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6682 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6683 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6684 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6685 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6686 ;;Total ram usage:        1 bytes
  6687 ;; Hardware stack levels used:    1
  6688 ;; Hardware stack levels required when called:    9
  6689 ;; This function calls:
  6690 ;;		_irobot_leds
  6691 ;; This function is called by:
  6692 ;;		_main
  6693 ;; This function uses a non-reentrant model
  6694 ;;
  6695                           
  6696                           	psect	text27
  6697  013F2A                     __ptext27:
  6698                           	opt stack 0
  6699  013F2A                     _irobot_led_power_on:
  6700                           	opt stack 21
  6701                           
  6702                           ; BSR set to: 0
  6703                           ;incstack = 0
  6704                           ;irobot_led_power_on@powerOnColour stored from wreg
  6705  013F2A  0100               	movlb	0	; () banked
  6706  013F2C  6FC9               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
  6707                           
  6708                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
  6709  013F2E  0E00               	movlw	0
  6710  013F30  0100               	movlb	0	; () banked
  6711  013F32  6FC5               	movwf	irobot_leds@LEDBit& (0+255),b
  6712  013F34  C0C9  F0C6         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
  6713  013F38  0EFF               	movlw	255
  6714  013F3A  0100               	movlb	0	; () banked
  6715  013F3C  6FC7               	movwf	irobot_leds@powerLuminosity& (0+255),b
  6716  013F3E  0E00               	movlw	0
  6717  013F40  EC72  F09B         	call	_irobot_leds
  6718  013F44  0012               	return		;funcret
  6719  013F46                     __end_of_irobot_led_power_on:
  6720                           	opt stack 0
  6721                           tblptru	equ	0xFF8
  6722                           tblptrh	equ	0xFF7
  6723                           tblptrl	equ	0xFF6
  6724                           tablat	equ	0xFF5
  6725                           prodh	equ	0xFF4
  6726                           prodl	equ	0xFF3
  6727                           postinc0	equ	0xFEE
  6728                           wreg	equ	0xFE8
  6729                           postdec1	equ	0xFE5
  6730                           fsr1h	equ	0xFE2
  6731                           fsr1l	equ	0xFE1
  6732                           indf2	equ	0xFDF
  6733                           postinc2	equ	0xFDE
  6734                           postdec2	equ	0xFDD
  6735                           fsr2h	equ	0xFDA
  6736                           fsr2l	equ	0xFD9
  6737                           status	equ	0xFD8
  6738                           
  6739 ;; *************** function _irobot_leds *****************
  6740 ;; Defined at:
  6741 ;;		line 239 in file "Library/iRobotSerial.c"
  6742 ;; Parameters:    Size  Location     Type
  6743 ;;  isScript        1    wreg     unsigned char 
  6744 ;;  LEDBit          1   16[BANK0 ] unsigned char 
  6745 ;;  powerColour     1   17[BANK0 ] unsigned char 
  6746 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
  6747 ;; Auto vars:     Size  Location     Type
  6748 ;;  isScript        1   19[BANK0 ] unsigned char 
  6749 ;; Return value:  Size  Location     Type
  6750 ;;                  1    wreg      void 
  6751 ;; Registers used:
  6752 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6753 ;; Tracked objects:
  6754 ;;		On entry : 0/0
  6755 ;;		On exit  : 0/0
  6756 ;;		Unchanged: 0/0
  6757 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6758 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6759 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6760 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6761 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6762 ;;Total ram usage:        4 bytes
  6763 ;; Hardware stack levels used:    1
  6764 ;; Hardware stack levels required when called:    8
  6765 ;; This function calls:
  6766 ;;		_eusart_putch
  6767 ;;		_load_iRScriptStack
  6768 ;; This function is called by:
  6769 ;;		_irobot_led_power_on
  6770 ;;		_irobot_led_power_off
  6771 ;; This function uses a non-reentrant model
  6772 ;;
  6773                           
  6774                           	psect	text28
  6775  0136E4                     __ptext28:
  6776                           	opt stack 0
  6777  0136E4                     _irobot_leds:
  6778                           	opt stack 21
  6779                           
  6780                           ;incstack = 0
  6781                           ;irobot_leds@isScript stored from wreg
  6782  0136E4  0100               	movlb	0	; () banked
  6783  0136E6  6FC8               	movwf	irobot_leds@isScript& (0+255),b
  6784                           
  6785                           ;iRobotSerial.c: 240: if (isScript){
  6786  0136E8  0100               	movlb	0	; () banked
  6787  0136EA  51C8               	movf	irobot_leds@isScript& (0+255),w,b
  6788  0136EC  0100               	movlb	0	; () banked
  6789  0136EE  B4D8               	btfsc	status,2,c
  6790  0136F0  D015               	goto	l2203
  6791                           
  6792                           ; BSR set to: 0
  6793                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
  6794                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
  6795  0136F2  0E00               	movlw	0
  6796  0136F4  0100               	movlb	0	; () banked
  6797  0136F6  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6798  0136F8  0E8B               	movlw	139
  6799  0136FA  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6800  0136FC  C0C5  F0B7         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
  6801  013700  0100               	movlb	0	; () banked
  6802  013702  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6803  013704  C0C6  F0B9         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
  6804  013708  0100               	movlb	0	; () banked
  6805  01370A  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6806  01370C  C0C7  F0BB         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
  6807  013710  0100               	movlb	0	; () banked
  6808  013712  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6809  013714  0E04               	movlw	4
  6810  013716  EC4C  F099         	call	_load_iRScriptStack
  6811                           
  6812                           ;iRobotSerial.c: 243: }
  6813  01371A  0012               	return	
  6814  01371C                     l2203:
  6815                           
  6816                           ;iRobotSerial.c: 244: else{
  6817                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
  6818  01371C  0E8B               	movlw	139
  6819  01371E  ECF1  F09F         	call	_eusart_putch
  6820                           
  6821                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
  6822  013722  0100               	movlb	0	; () banked
  6823  013724  51C5               	movf	irobot_leds@LEDBit& (0+255),w,b
  6824  013726  ECF1  F09F         	call	_eusart_putch
  6825                           
  6826                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
  6827  01372A  0100               	movlb	0	; () banked
  6828  01372C  51C6               	movf	irobot_leds@powerColour& (0+255),w,b
  6829  01372E  ECF1  F09F         	call	_eusart_putch
  6830                           
  6831                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
  6832  013732  0100               	movlb	0	; () banked
  6833  013734  51C7               	movf	irobot_leds@powerLuminosity& (0+255),w,b
  6834  013736  ECF1  F09F         	call	_eusart_putch
  6835  01373A  0012               	return	
  6836  01373C                     __end_of_irobot_leds:
  6837                           	opt stack 0
  6838                           tblptru	equ	0xFF8
  6839                           tblptrh	equ	0xFF7
  6840                           tblptrl	equ	0xFF6
  6841                           tablat	equ	0xFF5
  6842                           prodh	equ	0xFF4
  6843                           prodl	equ	0xFF3
  6844                           postinc0	equ	0xFEE
  6845                           wreg	equ	0xFE8
  6846                           postdec1	equ	0xFE5
  6847                           fsr1h	equ	0xFE2
  6848                           fsr1l	equ	0xFE1
  6849                           indf2	equ	0xFDF
  6850                           postinc2	equ	0xFDE
  6851                           postdec2	equ	0xFDD
  6852                           fsr2h	equ	0xFDA
  6853                           fsr2l	equ	0xFD9
  6854                           status	equ	0xFD8
  6855                           
  6856 ;; *************** function _load_iRScriptStack *****************
  6857 ;; Defined at:
  6858 ;;		line 176 in file "Library/iRobotSerial.c"
  6859 ;; Parameters:    Size  Location     Type
  6860 ;;  bytesToLoad     1    wreg     unsigned char 
  6861 ;; Auto vars:     Size  Location     Type
  6862 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
  6863 ;;  i               1   15[BANK0 ] unsigned char 
  6864 ;;  loadByte        2   12[BANK0 ] PTR void [1]
  6865 ;;		 -> ?_load_iRScriptStack(1), 
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      void 
  6868 ;; Registers used:
  6869 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6875 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6876 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6878 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6879 ;;Total ram usage:       16 bytes
  6880 ;; Hardware stack levels used:    1
  6881 ;; Hardware stack levels required when called:    7
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		_irobot_move
  6886 ;;		_irobot_leds
  6887 ;;		_irobot_angle_wait
  6888 ;;		_irobot_distance_wait
  6889 ;; This function uses a non-reentrant model
  6890 ;;
  6891                           
  6892                           	psect	text29
  6893  013298                     __ptext29:
  6894                           	opt stack 0
  6895  013298                     _load_iRScriptStack:
  6896                           	opt stack 21
  6897                           
  6898                           ;incstack = 0
  6899                           ;load_iRScriptStack@bytesToLoad stored from wreg
  6900  013298  0100               	movlb	0	; () banked
  6901  01329A  6FC3               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
  6902                           
  6903                           ;iRobotSerial.c: 177: va_list loadByte;
  6904                           ;iRobotSerial.c: 178: *loadByte = __va_start();
  6905  01329C  0EB5               	movlw	low ?_load_iRScriptStack
  6906  01329E  0100               	movlb	0	; () banked
  6907  0132A0  6FC1               	movwf	load_iRScriptStack@loadByte& (0+255),b
  6908  0132A2  0E00               	movlw	high ?_load_iRScriptStack
  6909  0132A4  0100               	movlb	0	; () banked
  6910  0132A6  6FC2               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
  6911                           
  6912                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++){
  6913  0132A8  0E00               	movlw	0
  6914  0132AA  0100               	movlb	0	; () banked
  6915  0132AC  6FC4               	movwf	load_iRScriptStack@i& (0+255),b
  6916  0132AE  D01F               	goto	l2177
  6917  0132B0                     
  6918                           ; BSR set to: 0
  6919                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
  6920                           
  6921                           ; BSR set to: 0
  6922  0132B0  C0C1  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
  6923  0132B4  C0C2  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
  6924  0132B8  0100               	movlb	0	; () banked
  6925  0132BA  51C4               	movf	load_iRScriptStack@i& (0+255),w,b
  6926  0132BC  C035  F0BF         	movff	_iRScriptIndex,??_load_iRScriptStack
  6927  0132C0  0100               	movlb	0	; () banked
  6928  0132C2  6BC0               	clrf	(??_load_iRScriptStack+1)& (0+255),b
  6929  0132C4  0100               	movlb	0	; () banked
  6930  0132C6  27BF               	addwf	??_load_iRScriptStack& (0+255),f,b
  6931  0132C8  0E00               	movlw	0
  6932  0132CA  23C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
  6933  0132CC  0E00               	movlw	low _iRScriptStack
  6934  0132CE  0100               	movlb	0	; () banked
  6935  0132D0  25BF               	addwf	??_load_iRScriptStack& (0+255),w,b
  6936  0132D2  6EE1               	movwf	fsr1l,c
  6937  0132D4  0E04               	movlw	high _iRScriptStack
  6938  0132D6  0100               	movlb	0	; () banked
  6939  0132D8  21C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
  6940  0132DA  6EE2               	movwf	fsr1h,c
  6941  0132DC  CFDF FFE7          	movff	indf2,indf1
  6942                           
  6943                           ; BSR set to: 0
  6944  0132E0  0E02               	movlw	2
  6945  0132E2  0100               	movlb	0	; () banked
  6946  0132E4  27C1               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
  6947  0132E6  0E00               	movlw	0
  6948  0132E8  23C2               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
  6949                           
  6950                           ; BSR set to: 0
  6951  0132EA  0100               	movlb	0	; () banked
  6952  0132EC  2BC4               	incf	load_iRScriptStack@i& (0+255),f,b
  6953  0132EE                     l2177:
  6954                           
  6955                           ; BSR set to: 0
  6956                           
  6957                           ; BSR set to: 0
  6958  0132EE  0100               	movlb	0	; () banked
  6959  0132F0  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  6960  0132F2  0100               	movlb	0	; () banked
  6961  0132F4  5DC4               	subwf	load_iRScriptStack@i& (0+255),w,b
  6962  0132F6  A0D8               	btfss	status,0,c
  6963  0132F8  D7DB               	goto	l2178
  6964                           
  6965                           ; BSR set to: 0
  6966                           ;iRobotSerial.c: 181: }
  6967                           ;iRobotSerial.c: 182: ;
  6968                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
  6969                           
  6970                           ; BSR set to: 0
  6971  0132FA  0100               	movlb	0	; () banked
  6972  0132FC  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  6973  0132FE  2635               	addwf	_iRScriptIndex,f,c
  6974                           
  6975                           ; BSR set to: 0
  6976  013300  0012               	return		;funcret
  6977  013302                     __end_of_load_iRScriptStack:
  6978                           	opt stack 0
  6979                           tblptru	equ	0xFF8
  6980                           tblptrh	equ	0xFF7
  6981                           tblptrl	equ	0xFF6
  6982                           tablat	equ	0xFF5
  6983                           prodh	equ	0xFF4
  6984                           prodl	equ	0xFF3
  6985                           postinc0	equ	0xFEE
  6986                           wreg	equ	0xFE8
  6987                           indf1	equ	0xFE7
  6988                           postdec1	equ	0xFE5
  6989                           fsr1h	equ	0xFE2
  6990                           fsr1l	equ	0xFE1
  6991                           indf2	equ	0xFDF
  6992                           postinc2	equ	0xFDE
  6993                           postdec2	equ	0xFDD
  6994                           fsr2h	equ	0xFDA
  6995                           fsr2l	equ	0xFD9
  6996                           status	equ	0xFD8
  6997                           
  6998 ;; *************** function _irobot_init_song_0 *****************
  6999 ;; Defined at:
  7000 ;;		line 252 in file "Library/iRobotSerial.c"
  7001 ;; Parameters:    Size  Location     Type
  7002 ;;		None
  7003 ;; Auto vars:     Size  Location     Type
  7004 ;;		None
  7005 ;; Return value:  Size  Location     Type
  7006 ;;                  1    wreg      void 
  7007 ;; Registers used:
  7008 ;;		wreg, cstack
  7009 ;; Tracked objects:
  7010 ;;		On entry : 0/0
  7011 ;;		On exit  : 0/0
  7012 ;;		Unchanged: 0/0
  7013 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7014 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7015 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7016 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7017 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7018 ;;Total ram usage:        0 bytes
  7019 ;; Hardware stack levels used:    1
  7020 ;; Hardware stack levels required when called:    8
  7021 ;; This function calls:
  7022 ;;		_eusart_putch
  7023 ;; This function is called by:
  7024 ;;		_main
  7025 ;; This function uses a non-reentrant model
  7026 ;;
  7027                           
  7028                           	psect	text30
  7029  013E1A                     __ptext30:
  7030                           	opt stack 0
  7031  013E1A                     _irobot_init_song_0:
  7032                           	opt stack 22
  7033                           
  7034                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
  7035                           
  7036                           ; BSR set to: 0
  7037                           ;incstack = 0
  7038  013E1A  0E8C               	movlw	140
  7039  013E1C  ECF1  F09F         	call	_eusart_putch
  7040                           
  7041                           ;iRobotSerial.c: 254: eusart_putch(0);
  7042  013E20  0E00               	movlw	0
  7043  013E22  ECF1  F09F         	call	_eusart_putch
  7044                           
  7045                           ;iRobotSerial.c: 255: eusart_putch(1);
  7046  013E26  0E01               	movlw	1
  7047  013E28  ECF1  F09F         	call	_eusart_putch
  7048                           
  7049                           ;iRobotSerial.c: 256: eusart_putch(60);
  7050  013E2C  0E3C               	movlw	60
  7051  013E2E  ECF1  F09F         	call	_eusart_putch
  7052                           
  7053                           ;iRobotSerial.c: 257: eusart_putch(4);
  7054  013E32  0E04               	movlw	4
  7055  013E34  ECF1  F09F         	call	_eusart_putch
  7056  013E38  0012               	return		;funcret
  7057  013E3A                     __end_of_irobot_init_song_0:
  7058                           	opt stack 0
  7059                           tblptru	equ	0xFF8
  7060                           tblptrh	equ	0xFF7
  7061                           tblptrl	equ	0xFF6
  7062                           tablat	equ	0xFF5
  7063                           prodh	equ	0xFF4
  7064                           prodl	equ	0xFF3
  7065                           postinc0	equ	0xFEE
  7066                           wreg	equ	0xFE8
  7067                           indf1	equ	0xFE7
  7068                           postdec1	equ	0xFE5
  7069                           fsr1h	equ	0xFE2
  7070                           fsr1l	equ	0xFE1
  7071                           indf2	equ	0xFDF
  7072                           postinc2	equ	0xFDE
  7073                           postdec2	equ	0xFDD
  7074                           fsr2h	equ	0xFDA
  7075                           fsr2l	equ	0xFD9
  7076                           status	equ	0xFD8
  7077                           
  7078 ;; *************** function _irobot_init *****************
  7079 ;; Defined at:
  7080 ;;		line 198 in file "Library/iRobotSerial.c"
  7081 ;; Parameters:    Size  Location     Type
  7082 ;;		None
  7083 ;; Auto vars:     Size  Location     Type
  7084 ;;		None
  7085 ;; Return value:  Size  Location     Type
  7086 ;;                  1    wreg      void 
  7087 ;; Registers used:
  7088 ;;		wreg, cstack
  7089 ;; Tracked objects:
  7090 ;;		On entry : 0/0
  7091 ;;		On exit  : 0/0
  7092 ;;		Unchanged: 0/0
  7093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7094 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7097 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7098 ;;Total ram usage:        0 bytes
  7099 ;; Hardware stack levels used:    1
  7100 ;; Hardware stack levels required when called:    8
  7101 ;; This function calls:
  7102 ;;		_eusart_putch
  7103 ;; This function is called by:
  7104 ;;		_main
  7105 ;; This function uses a non-reentrant model
  7106 ;;
  7107                           
  7108                           	psect	text31
  7109  013FD4                     __ptext31:
  7110                           	opt stack 0
  7111  013FD4                     _irobot_init:
  7112                           	opt stack 22
  7113                           
  7114                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
  7115                           
  7116                           ;incstack = 0
  7117  013FD4  0E80               	movlw	128
  7118  013FD6  ECF1  F09F         	call	_eusart_putch
  7119                           
  7120                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
  7121  013FDA  0E84               	movlw	132
  7122  013FDC  ECF1  F09F         	call	_eusart_putch
  7123  013FE0  0012               	return		;funcret
  7124  013FE2                     __end_of_irobot_init:
  7125                           	opt stack 0
  7126                           tblptru	equ	0xFF8
  7127                           tblptrh	equ	0xFF7
  7128                           tblptrl	equ	0xFF6
  7129                           tablat	equ	0xFF5
  7130                           prodh	equ	0xFF4
  7131                           prodl	equ	0xFF3
  7132                           postinc0	equ	0xFEE
  7133                           wreg	equ	0xFE8
  7134                           indf1	equ	0xFE7
  7135                           postdec1	equ	0xFE5
  7136                           fsr1h	equ	0xFE2
  7137                           fsr1l	equ	0xFE1
  7138                           indf2	equ	0xFDF
  7139                           postinc2	equ	0xFDE
  7140                           postdec2	equ	0xFDD
  7141                           fsr2h	equ	0xFDA
  7142                           fsr2l	equ	0xFD9
  7143                           status	equ	0xFD8
  7144                           
  7145 ;; *************** function _eusart_putch *****************
  7146 ;; Defined at:
  7147 ;;		line 120 in file "Library/iRobotSerial.c"
  7148 ;; Parameters:    Size  Location     Type
  7149 ;;  eusartSendCh    1    wreg     unsigned char 
  7150 ;; Auto vars:     Size  Location     Type
  7151 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
  7152 ;; Return value:  Size  Location     Type
  7153 ;;                  1    wreg      void 
  7154 ;; Registers used:
  7155 ;;		wreg
  7156 ;; Tracked objects:
  7157 ;;		On entry : 0/0
  7158 ;;		On exit  : 0/0
  7159 ;;		Unchanged: 0/0
  7160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7162 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7164 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7165 ;;Total ram usage:        1 bytes
  7166 ;; Hardware stack levels used:    1
  7167 ;; Hardware stack levels required when called:    7
  7168 ;; This function calls:
  7169 ;;		Nothing
  7170 ;; This function is called by:
  7171 ;;		_irobot_query_and_update
  7172 ;;		_irobot_init
  7173 ;;		_irobot_move
  7174 ;;		_irobot_leds
  7175 ;;		_irobot_init_song_0
  7176 ;;		_irobot_song_play
  7177 ;;		_irobot_script_play
  7178 ;; This function uses a non-reentrant model
  7179 ;;
  7180                           
  7181                           	psect	text32
  7182  013FE2                     __ptext32:
  7183                           	opt stack 0
  7184  013FE2                     _eusart_putch:
  7185                           	opt stack 21
  7186                           
  7187                           ;incstack = 0
  7188                           ;eusart_putch@eusartSendChar stored from wreg
  7189  013FE2  0100               	movlb	0	; () banked
  7190  013FE4  6FB5               	movwf	eusart_putch@eusartSendChar& (0+255),b
  7191  013FE6                     
  7192                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
  7193  013FE6  A2AD               	btfss	4013,1,c	;volatile
  7194  013FE8  D7FE               	goto	l11197
  7195                           
  7196                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
  7197  013FEA  C0B5  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
  7198  013FEE  0012               	return		;funcret
  7199  013FF0                     __end_of_eusart_putch:
  7200                           	opt stack 0
  7201                           tblptru	equ	0xFF8
  7202                           tblptrh	equ	0xFF7
  7203                           tblptrl	equ	0xFF6
  7204                           tablat	equ	0xFF5
  7205                           prodh	equ	0xFF4
  7206                           prodl	equ	0xFF3
  7207                           postinc0	equ	0xFEE
  7208                           wreg	equ	0xFE8
  7209                           indf1	equ	0xFE7
  7210                           postdec1	equ	0xFE5
  7211                           fsr1h	equ	0xFE2
  7212                           fsr1l	equ	0xFE1
  7213                           indf2	equ	0xFDF
  7214                           postinc2	equ	0xFDE
  7215                           postdec2	equ	0xFDD
  7216                           fsr2h	equ	0xFDA
  7217                           fsr2l	equ	0xFD9
  7218                           status	equ	0xFD8
  7219                           
  7220 ;; *************** function _eusart_init *****************
  7221 ;; Defined at:
  7222 ;;		line 103 in file "Library/iRobotSerial.c"
  7223 ;; Parameters:    Size  Location     Type
  7224 ;;		None
  7225 ;; Auto vars:     Size  Location     Type
  7226 ;;		None
  7227 ;; Return value:  Size  Location     Type
  7228 ;;                  1    wreg      void 
  7229 ;; Registers used:
  7230 ;;		wreg, status,2
  7231 ;; Tracked objects:
  7232 ;;		On entry : 0/0
  7233 ;;		On exit  : 0/0
  7234 ;;		Unchanged: 0/0
  7235 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7236 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7237 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7238 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7239 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7240 ;;Total ram usage:        0 bytes
  7241 ;; Hardware stack levels used:    1
  7242 ;; Hardware stack levels required when called:    7
  7243 ;; This function calls:
  7244 ;;		Nothing
  7245 ;; This function is called by:
  7246 ;;		_main
  7247 ;; This function uses a non-reentrant model
  7248 ;;
  7249                           
  7250                           	psect	text33
  7251  013E58                     __ptext33:
  7252                           	opt stack 0
  7253  013E58                     _eusart_init:
  7254                           	opt stack 23
  7255                           
  7256                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
  7257                           
  7258                           ;incstack = 0
  7259  013E58  9C94               	bcf	3988,6,c	;volatile
  7260                           
  7261                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
  7262  013E5A  8E94               	bsf	3988,7,c	;volatile
  7263                           
  7264                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
  7265  013E5C  0E24               	movlw	36
  7266  013E5E  6EAD               	movwf	4013,c	;volatile
  7267                           
  7268                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
  7269  013E60  0E98               	movlw	152
  7270  013E62  6EAC               	movwf	4012,c	;volatile
  7271                           
  7272                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
  7273  013E64  9A7E               	bcf	3966,5,c	;volatile
  7274                           
  7275                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
  7276  013E66  987E               	bcf	3966,4,c	;volatile
  7277                           
  7278                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
  7279  013E68  927E               	bcf	3966,1,c	;volatile
  7280                           
  7281                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
  7282  013E6A  907E               	bcf	3966,0,c	;volatile
  7283                           
  7284                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
  7285  013E6C  84AD               	bsf	4013,2,c	;volatile
  7286                           
  7287                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
  7288  013E6E  967E               	bcf	3966,3,c	;volatile
  7289                           
  7290                           ;iRobotSerial.c: 117: SPBRG1 = 51;
  7291  013E70  0E33               	movlw	51
  7292  013E72  6EB0               	movwf	4016,c	;volatile
  7293  013E74  0012               	return		;funcret
  7294  013E76                     __end_of_eusart_init:
  7295                           	opt stack 0
  7296                           tblptru	equ	0xFF8
  7297                           tblptrh	equ	0xFF7
  7298                           tblptrl	equ	0xFF6
  7299                           tablat	equ	0xFF5
  7300                           prodh	equ	0xFF4
  7301                           prodl	equ	0xFF3
  7302                           postinc0	equ	0xFEE
  7303                           wreg	equ	0xFE8
  7304                           indf1	equ	0xFE7
  7305                           postdec1	equ	0xFE5
  7306                           fsr1h	equ	0xFE2
  7307                           fsr1l	equ	0xFE1
  7308                           indf2	equ	0xFDF
  7309                           postinc2	equ	0xFDE
  7310                           postdec2	equ	0xFDD
  7311                           fsr2h	equ	0xFDA
  7312                           fsr2l	equ	0xFD9
  7313                           status	equ	0xFD8
  7314                           
  7315 ;; *************** function _MXK_Init *****************
  7316 ;; Defined at:
  7317 ;;		line 33 in file "Library/MXK.c"
  7318 ;; Parameters:    Size  Location     Type
  7319 ;;		None
  7320 ;; Auto vars:     Size  Location     Type
  7321 ;;		None
  7322 ;; Return value:  Size  Location     Type
  7323 ;;                  1    wreg      void 
  7324 ;; Registers used:
  7325 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7326 ;; Tracked objects:
  7327 ;;		On entry : 0/0
  7328 ;;		On exit  : 0/0
  7329 ;;		Unchanged: 0/0
  7330 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7331 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7332 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;Total ram usage:        0 bytes
  7336 ;; Hardware stack levels used:    1
  7337 ;; Hardware stack levels required when called:   16
  7338 ;; This function calls:
  7339 ;;		_LED_Init
  7340 ;;		_Port_Init
  7341 ;;		_Port_SetPin
  7342 ;;		_Port_SetPinType
  7343 ;;		_Port_SetQuadType
  7344 ;;		_Port_SetType
  7345 ;;		_delay_ms
  7346 ;; This function is called by:
  7347 ;;		_main
  7348 ;; This function uses a non-reentrant model
  7349 ;;
  7350                           
  7351                           	psect	text34
  7352  0116D8                     __ptext34:
  7353                           	opt stack 0
  7354  0116D8                     _MXK_Init:
  7355                           	opt stack 14
  7356                           
  7357                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7358                           
  7359                           ;incstack = 0
  7360  0116D8  0E01               	movlw	1
  7361  0116DA  6E4B               	movwf	_Bus_State,c
  7362                           
  7363                           ;MXK.c: 36: lQueue = (Function)0;
  7364  0116DC  0E00               	movlw	0
  7365  0116DE  0100               	movlb	0	; () banked
  7366  0116E0  6F6F               	movwf	_lQueue& (0+255),b	;volatile
  7367  0116E2  0E00               	movlw	0
  7368  0116E4  0100               	movlb	0	; () banked
  7369  0116E6  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7370  0116E8  0E00               	movlw	0
  7371  0116EA  0100               	movlb	0	; () banked
  7372  0116EC  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7373                           
  7374                           ; BSR set to: 0
  7375                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7376  0116EE  0EA6               	movlw	low _PortA
  7377  0116F0  0100               	movlb	0	; () banked
  7378  0116F2  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7379  0116F4  0E03               	movlw	high _PortA
  7380  0116F6  0100               	movlb	0	; () banked
  7381  0116F8  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7382  0116FA  0E00               	movlw	0
  7383  0116FC  0100               	movlb	0	; () banked
  7384  0116FE  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7385  011700  ECE0  F089         	call	_Port_Init	;wreg free
  7386                           
  7387                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7388  011704  0E9C               	movlw	low _PortB
  7389  011706  0100               	movlb	0	; () banked
  7390  011708  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7391  01170A  0E03               	movlw	high _PortB
  7392  01170C  0100               	movlb	0	; () banked
  7393  01170E  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7394  011710  0E01               	movlw	1
  7395  011712  0100               	movlb	0	; () banked
  7396  011714  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7397  011716  ECE0  F089         	call	_Port_Init	;wreg free
  7398                           
  7399                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7400  01171A  0EA3               	movlw	low _PortC
  7401  01171C  0100               	movlb	0	; () banked
  7402  01171E  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7403  011720  0E00               	movlw	high _PortC
  7404  011722  0100               	movlb	0	; () banked
  7405  011724  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7406  011726  0E02               	movlw	2
  7407  011728  0100               	movlb	0	; () banked
  7408  01172A  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7409  01172C  ECE0  F089         	call	_Port_Init	;wreg free
  7410                           
  7411                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7412  011730  0E99               	movlw	low _PortD
  7413  011732  0100               	movlb	0	; () banked
  7414  011734  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7415  011736  0E00               	movlw	high _PortD
  7416  011738  0100               	movlb	0	; () banked
  7417  01173A  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7418  01173C  0E03               	movlw	3
  7419  01173E  0100               	movlb	0	; () banked
  7420  011740  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7421  011742  ECE0  F089         	call	_Port_Init	;wreg free
  7422                           
  7423                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7424  011746  0E8F               	movlw	low _PortE
  7425  011748  0100               	movlb	0	; () banked
  7426  01174A  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7427  01174C  0E00               	movlw	high _PortE
  7428  01174E  0100               	movlb	0	; () banked
  7429  011750  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7430  011752  0E04               	movlw	4
  7431  011754  0100               	movlb	0	; () banked
  7432  011756  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7433  011758  ECE0  F089         	call	_Port_Init	;wreg free
  7434                           
  7435                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7436  01175C  0EB0               	movlw	low _PortF
  7437  01175E  0100               	movlb	0	; () banked
  7438  011760  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7439  011762  0E03               	movlw	high _PortF
  7440  011764  0100               	movlb	0	; () banked
  7441  011766  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7442  011768  0E05               	movlw	5
  7443  01176A  0100               	movlb	0	; () banked
  7444  01176C  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7445  01176E  ECE0  F089         	call	_Port_Init	;wreg free
  7446                           
  7447                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7448  011772  0E92               	movlw	low _PortG
  7449  011774  0100               	movlb	0	; () banked
  7450  011776  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7451  011778  0E03               	movlw	high _PortG
  7452  01177A  0100               	movlb	0	; () banked
  7453  01177C  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7454  01177E  0E06               	movlw	6
  7455  011780  0100               	movlb	0	; () banked
  7456  011782  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7457  011784  ECE0  F089         	call	_Port_Init	;wreg free
  7458                           
  7459                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7460  011788  0EB0               	movlw	low _PortF
  7461  01178A  0100               	movlb	0	; () banked
  7462  01178C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7463  01178E  0E03               	movlw	high _PortF
  7464  011790  0100               	movlb	0	; () banked
  7465  011792  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7466  011794  0E05               	movlw	5
  7467  011796  0100               	movlb	0	; () banked
  7468  011798  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7469  01179A  0E00               	movlw	0
  7470  01179C  0100               	movlb	0	; () banked
  7471  01179E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7472  0117A0  EC31  F088         	call	_Port_SetPinType	;wreg free
  7473                           
  7474                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7475  0117A4  0E9C               	movlw	low _PortB
  7476  0117A6  0100               	movlb	0	; () banked
  7477  0117A8  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
  7478  0117AA  0E03               	movlw	high _PortB
  7479  0117AC  0100               	movlb	0	; () banked
  7480  0117AE  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7481  0117B0  0E00               	movlw	0
  7482  0117B2  0100               	movlb	0	; () banked
  7483  0117B4  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7484  0117B6  0E00               	movlw	0
  7485  0117B8  0100               	movlb	0	; () banked
  7486  0117BA  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
  7487  0117BC  ECEC  F083         	call	_Port_SetQuadType	;wreg free
  7488                           
  7489                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7490  0117C0  0EB0               	movlw	low _PortF
  7491  0117C2  0100               	movlb	0	; () banked
  7492  0117C4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7493  0117C6  0E03               	movlw	high _PortF
  7494  0117C8  0100               	movlb	0	; () banked
  7495  0117CA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7496  0117CC  0E06               	movlw	6
  7497  0117CE  0100               	movlb	0	; () banked
  7498  0117D0  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7499  0117D2  0E03               	movlw	3
  7500  0117D4  0100               	movlb	0	; () banked
  7501  0117D6  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7502  0117D8  EC31  F088         	call	_Port_SetPinType	;wreg free
  7503                           
  7504                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7505  0117DC  0E92               	movlw	low _PortG
  7506  0117DE  0100               	movlb	0	; () banked
  7507  0117E0  6FEF               	movwf	Port_SetType@pInput& (0+255),b
  7508  0117E2  0E03               	movlw	high _PortG
  7509  0117E4  0100               	movlb	0	; () banked
  7510  0117E6  6FF0               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7511  0117E8  0E03               	movlw	3
  7512  0117EA  0100               	movlb	0	; () banked
  7513  0117EC  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7514  0117EE  EC17  F085         	call	_Port_SetType	;wreg free
  7515                           
  7516                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7517  0117F2  0E92               	movlw	low _PortG
  7518  0117F4  0100               	movlb	0	; () banked
  7519  0117F6  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7520  0117F8  0E03               	movlw	high _PortG
  7521  0117FA  0100               	movlb	0	; () banked
  7522  0117FC  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7523  0117FE  0E04               	movlw	4
  7524  011800  0100               	movlb	0	; () banked
  7525  011802  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7526  011804  0E00               	movlw	0
  7527  011806  0100               	movlb	0	; () banked
  7528  011808  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7529  01180A  EC3E  F091         	call	_Port_SetPin	;wreg free
  7530                           
  7531                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7532  01180E  0EB0               	movlw	low _PortF
  7533  011810  0100               	movlb	0	; () banked
  7534  011812  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7535  011814  0E03               	movlw	high _PortF
  7536  011816  0100               	movlb	0	; () banked
  7537  011818  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7538  01181A  0E06               	movlw	6
  7539  01181C  0100               	movlb	0	; () banked
  7540  01181E  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7541  011820  0E01               	movlw	1
  7542  011822  0100               	movlb	0	; () banked
  7543  011824  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7544  011826  EC3E  F091         	call	_Port_SetPin	;wreg free
  7545                           
  7546                           ;MXK.c: 55: LED_Init(eLED1);
  7547  01182A  0E00               	movlw	0
  7548  01182C  ECE6  F09A         	call	_LED_Init
  7549                           
  7550                           ;MXK.c: 56: LED_Init(eLED2);
  7551  011830  0E01               	movlw	1
  7552  011832  ECE6  F09A         	call	_LED_Init
  7553                           
  7554                           ;MXK.c: 58: PIR1 = 0;
  7555  011836  0E00               	movlw	0
  7556  011838  6E9E               	movwf	3998,c	;volatile
  7557                           
  7558                           ;MXK.c: 59: PIR2 = 0;
  7559  01183A  0E00               	movlw	0
  7560  01183C  6EA1               	movwf	4001,c	;volatile
  7561                           
  7562                           ;MXK.c: 60: PIR3 = 0;
  7563  01183E  0E00               	movlw	0
  7564  011840  6EA4               	movwf	4004,c	;volatile
  7565                           
  7566                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7567  011842  8E9B               	bsf	3995,7,c	;volatile
  7568                           
  7569                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7570  011844  8C9B               	bsf	3995,6,c	;volatile
  7571                           
  7572                           ;MXK.c: 66: delay_ms(100);
  7573  011846  0E00               	movlw	0
  7574  011848  0100               	movlb	0	; () banked
  7575  01184A  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  7576  01184C  0E64               	movlw	100
  7577  01184E  6FB5               	movwf	delay_ms@ms& (0+255),b
  7578  011850  EC81  F099         	call	_delay_ms	;wreg free
  7579                           
  7580                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7581  011854  8ED0               	bsf	4048,7,c	;volatile
  7582  011856  0012               	return		;funcret
  7583  011858                     __end_of_MXK_Init:
  7584                           	opt stack 0
  7585                           tblptru	equ	0xFF8
  7586                           tblptrh	equ	0xFF7
  7587                           tblptrl	equ	0xFF6
  7588                           tablat	equ	0xFF5
  7589                           prodh	equ	0xFF4
  7590                           prodl	equ	0xFF3
  7591                           postinc0	equ	0xFEE
  7592                           wreg	equ	0xFE8
  7593                           indf1	equ	0xFE7
  7594                           postdec1	equ	0xFE5
  7595                           fsr1h	equ	0xFE2
  7596                           fsr1l	equ	0xFE1
  7597                           indf2	equ	0xFDF
  7598                           postinc2	equ	0xFDE
  7599                           postdec2	equ	0xFDD
  7600                           fsr2h	equ	0xFDA
  7601                           fsr2l	equ	0xFD9
  7602                           status	equ	0xFD8
  7603                           
  7604 ;; *************** function _Port_Init *****************
  7605 ;; Defined at:
  7606 ;;		line 150 in file "Library/Port.c"
  7607 ;; Parameters:    Size  Location     Type
  7608 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7609 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7610 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7611 ;;  pPort           1   66[BANK0 ] enum E6786
  7612 ;; Auto vars:     Size  Location     Type
  7613 ;;  i               1   67[BANK0 ] unsigned char 
  7614 ;; Return value:  Size  Location     Type
  7615 ;;                  1    wreg      void 
  7616 ;; Registers used:
  7617 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7618 ;; Tracked objects:
  7619 ;;		On entry : 0/0
  7620 ;;		On exit  : 0/0
  7621 ;;		Unchanged: 0/0
  7622 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7623 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7624 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7625 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7626 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7627 ;;Total ram usage:        6 bytes
  7628 ;; Hardware stack levels used:    1
  7629 ;; Hardware stack levels required when called:   15
  7630 ;; This function calls:
  7631 ;;		_GetPortPORT
  7632 ;;		_GetPortProperties
  7633 ;;		_GetPortTRIS
  7634 ;;		_Port_Set
  7635 ;;		_Port_SetPinType
  7636 ;;		_Port_SetType
  7637 ;;		_Word_GetPair
  7638 ;; This function is called by:
  7639 ;;		_MXK_Init
  7640 ;; This function uses a non-reentrant model
  7641 ;;
  7642                           
  7643                           	psect	text35
  7644  0113C0                     __ptext35:
  7645                           	opt stack 0
  7646  0113C0                     _Port_Init:
  7647                           	opt stack 14
  7648                           
  7649                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7650                           
  7651                           ;incstack = 0
  7652  0113C0  0100               	movlb	0	; () banked
  7653  0113C2  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7654  0113C4  ECC5  F094         	call	_GetPortProperties
  7655  0113C8  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7656  0113CC  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7657  0113D0  0100               	movlb	0	; () banked
  7658  0113D2  C0B5  FFDE         	movff	?_GetPortProperties,postinc2
  7659  0113D6  0100               	movlb	0	; () banked
  7660  0113D8  C0B6  FFDD         	movff	?_GetPortProperties+1,postdec2
  7661                           
  7662                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  7663  0113DC  0100               	movlb	0	; () banked
  7664  0113DE  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7665  0113E0  EC18  F095         	call	_GetPortPORT
  7666  0113E4  0100               	movlb	0	; () banked
  7667  0113E6  EE20 F006          	lfsr	2,6
  7668  0113EA  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7669  0113EC  26D9               	addwf	fsr2l,f,c
  7670  0113EE  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7671  0113F0  22DA               	addwfc	fsr2h,f,c
  7672  0113F2  0100               	movlb	0	; () banked
  7673  0113F4  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7674  0113F8  0100               	movlb	0	; () banked
  7675  0113FA  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7676                           
  7677                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  7678  0113FE  0100               	movlb	0	; () banked
  7679  011400  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7680  011402  EC18  F095         	call	_GetPortPORT
  7681  011406  0100               	movlb	0	; () banked
  7682  011408  EE20 F004          	lfsr	2,4
  7683  01140C  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7684  01140E  26D9               	addwf	fsr2l,f,c
  7685  011410  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7686  011412  22DA               	addwfc	fsr2h,f,c
  7687  011414  0100               	movlb	0	; () banked
  7688  011416  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7689  01141A  0100               	movlb	0	; () banked
  7690  01141C  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7691                           
  7692                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  7693  011420  0100               	movlb	0	; () banked
  7694  011422  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7695  011424  EC72  F094         	call	_GetPortTRIS
  7696  011428  0100               	movlb	0	; () banked
  7697  01142A  EE20 F002          	lfsr	2,2
  7698  01142E  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7699  011430  26D9               	addwf	fsr2l,f,c
  7700  011432  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7701  011434  22DA               	addwfc	fsr2h,f,c
  7702  011436  0100               	movlb	0	; () banked
  7703  011438  C0B5  FFDE         	movff	?_GetPortTRIS,postinc2
  7704  01143C  0100               	movlb	0	; () banked
  7705  01143E  C0B6  FFDD         	movff	?_GetPortTRIS+1,postdec2
  7706                           
  7707                           ; BSR set to: 0
  7708                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  7709  011442  0100               	movlb	0	; () banked
  7710  011444  EE20 F004          	lfsr	2,4
  7711  011448  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7712  01144A  26D9               	addwf	fsr2l,f,c
  7713  01144C  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7714  01144E  22DA               	addwfc	fsr2h,f,c
  7715  011450  CFDE F100          	movff	postinc2,??_Port_Init
  7716  011454  CFDD F101          	movff	postdec2,??_Port_Init+1
  7717  011458  C100  FFD9         	movff	??_Port_Init,fsr2l
  7718  01145C  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7719  011460  0E00               	movlw	0
  7720  011462  6EDF               	movwf	indf2,c
  7721                           
  7722                           ; BSR set to: 0
  7723                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  7724  011464  0100               	movlb	0	; () banked
  7725  011466  EE20 F002          	lfsr	2,2
  7726  01146A  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7727  01146C  26D9               	addwf	fsr2l,f,c
  7728  01146E  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7729  011470  22DA               	addwfc	fsr2h,f,c
  7730  011472  CFDE F100          	movff	postinc2,??_Port_Init
  7731  011476  CFDD F101          	movff	postdec2,??_Port_Init+1
  7732  01147A  C100  FFD9         	movff	??_Port_Init,fsr2l
  7733  01147E  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7734  011482  0EFF               	movlw	255
  7735  011484  6EDF               	movwf	indf2,c
  7736                           
  7737                           ; BSR set to: 0
  7738                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  7739  011486  C0F5  F0EF         	movff	Port_Init@pInput,Port_SetType@pInput
  7740  01148A  C0F6  F0F0         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  7741  01148E  0E00               	movlw	0
  7742  011490  0100               	movlb	0	; () banked
  7743  011492  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7744  011494  EC17  F085         	call	_Port_SetType	;wreg free
  7745                           
  7746                           ;Port.c: 166: UINT8 i;
  7747                           ;Port.c: 167: for (i=0; i<8; i++)
  7748  011498  0E00               	movlw	0
  7749  01149A  0100               	movlb	0	; () banked
  7750  01149C  6FF8               	movwf	Port_Init@i& (0+255),b
  7751  01149E                     l11421:
  7752                           
  7753                           ; BSR set to: 0
  7754  01149E  0E07               	movlw	7
  7755  0114A0  0100               	movlb	0	; () banked
  7756  0114A2  65F8               	cpfsgt	Port_Init@i& (0+255),b
  7757  0114A4  D031               	goto	l403
  7758  0114A6  D04B               	goto	u7490
  7759  0114A8                     
  7760                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  7761                           
  7762                           ; BSR set to: 0
  7763  0114A8  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7764  0114AC  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7765  0114B0  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7766  0114B4  0E03               	movlw	3
  7767  0114B6  0100               	movlb	0	; () banked
  7768  0114B8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7769  0114BA  EC31  F088         	call	_Port_SetPinType	;wreg free
  7770                           
  7771                           ;Port.c: 173: break;
  7772  0114BE  D03C               	goto	l405
  7773  0114C0                     
  7774                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  7775  0114C0  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7776  0114C4  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7777  0114C8  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7778  0114CC  0E02               	movlw	2
  7779  0114CE  0100               	movlb	0	; () banked
  7780  0114D0  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7781  0114D2  EC31  F088         	call	_Port_SetPinType	;wreg free
  7782                           
  7783                           ;Port.c: 176: break;
  7784  0114D6  D030               	goto	l405
  7785  0114D8                     
  7786                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  7787  0114D8  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7788  0114DC  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7789  0114E0  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7790  0114E4  0E01               	movlw	1
  7791  0114E6  0100               	movlb	0	; () banked
  7792  0114E8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7793  0114EA  EC31  F088         	call	_Port_SetPinType	;wreg free
  7794                           
  7795                           ;Port.c: 179: break;
  7796  0114EE  D024               	goto	l405
  7797  0114F0                     
  7798                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  7799  0114F0  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7800  0114F4  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7801  0114F8  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7802  0114FC  0E00               	movlw	0
  7803  0114FE  0100               	movlb	0	; () banked
  7804  011500  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7805  011502  EC31  F088         	call	_Port_SetPinType	;wreg free
  7806                           
  7807                           ;Port.c: 183: }
  7808                           
  7809                           ;Port.c: 182: break;
  7810  011506  D018               	goto	l405
  7811  011508                     l403:
  7812  011508  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7813  01150C  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7814  011510  CFDE F0C1          	movff	postinc2,Word_GetPair@pInput
  7815  011514  CFDD F0C2          	movff	postdec2,Word_GetPair@pInput+1
  7816  011518  C0F8  F0C3         	movff	Port_Init@i,Word_GetPair@pPair
  7817  01151C  ECDB  F09D         	call	_Word_GetPair	;wreg free
  7818                           
  7819                           ; Switch size 1, requested type "space"
  7820                           ; Number of cases is 4, Range of values is 0 to 3
  7821                           ; switch strategies available:
  7822                           ; Name         Instructions Cycles
  7823                           ; simple_byte           13     7 (average)
  7824                           ;	Chosen strategy is simple_byte
  7825  011520  0A00               	xorlw	0	; case 0
  7826  011522  B4D8               	btfsc	status,2,c
  7827  011524  D7C1               	goto	l404
  7828  011526  0A01               	xorlw	1	; case 1
  7829  011528  B4D8               	btfsc	status,2,c
  7830  01152A  D7D6               	goto	l407
  7831  01152C  0A03               	xorlw	3	; case 2
  7832  01152E  B4D8               	btfsc	status,2,c
  7833  011530  D7C7               	goto	l406
  7834  011532  0A01               	xorlw	1	; case 3
  7835  011534  B4D8               	btfsc	status,2,c
  7836  011536  D7DC               	goto	l408
  7837  011538                     l405:
  7838  011538  0100               	movlb	0	; () banked
  7839  01153A  2BF8               	incf	Port_Init@i& (0+255),f,b
  7840  01153C  D7B0               	goto	l11421
  7841  01153E                     u7490:
  7842                           
  7843                           ; BSR set to: 0
  7844                           ;Port.c: 184: }
  7845                           ;Port.c: 185: Port_Set(pInput, 0x00);
  7846                           
  7847                           ; BSR set to: 0
  7848  01153E  C0F5  F0C4         	movff	Port_Init@pInput,Port_Set@pInput
  7849  011542  C0F6  F0C5         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  7850  011546  0E00               	movlw	0
  7851  011548  0100               	movlb	0	; () banked
  7852  01154A  6FC6               	movwf	Port_Set@pValue& (0+255),b
  7853  01154C  EC0F  F082         	call	_Port_Set	;wreg free
  7854  011550  0012               	return		;funcret
  7855  011552                     __end_of_Port_Init:
  7856                           	opt stack 0
  7857                           tblptru	equ	0xFF8
  7858                           tblptrh	equ	0xFF7
  7859                           tblptrl	equ	0xFF6
  7860                           tablat	equ	0xFF5
  7861                           prodh	equ	0xFF4
  7862                           prodl	equ	0xFF3
  7863                           postinc0	equ	0xFEE
  7864                           wreg	equ	0xFE8
  7865                           indf1	equ	0xFE7
  7866                           postdec1	equ	0xFE5
  7867                           fsr1h	equ	0xFE2
  7868                           fsr1l	equ	0xFE1
  7869                           indf2	equ	0xFDF
  7870                           postinc2	equ	0xFDE
  7871                           postdec2	equ	0xFDD
  7872                           fsr2h	equ	0xFDA
  7873                           fsr2l	equ	0xFD9
  7874                           status	equ	0xFD8
  7875                           
  7876 ;; *************** function _Port_SetType *****************
  7877 ;; Defined at:
  7878 ;;		line 513 in file "Library/Port.c"
  7879 ;; Parameters:    Size  Location     Type
  7880 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  7881 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7882 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7883 ;;  pType           1   60[BANK0 ] enum E6795
  7884 ;; Auto vars:     Size  Location     Type
  7885 ;;  Output          1   63[BANK0 ] enum E6475
  7886 ;; Return value:  Size  Location     Type
  7887 ;;                  1    wreg      enum E6475
  7888 ;; Registers used:
  7889 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7890 ;; Tracked objects:
  7891 ;;		On entry : 0/0
  7892 ;;		On exit  : 0/0
  7893 ;;		Unchanged: 0/0
  7894 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7895 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7896 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7897 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7898 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7899 ;;Total ram usage:        6 bytes
  7900 ;; Hardware stack levels used:    1
  7901 ;; Hardware stack levels required when called:   14
  7902 ;; This function calls:
  7903 ;;		_Port_CheckPortType
  7904 ;;		_Word_SetPair
  7905 ;; This function is called by:
  7906 ;;		_Port_Init
  7907 ;;		_MXK_Init
  7908 ;; This function uses a non-reentrant model
  7909 ;;
  7910                           
  7911                           	psect	text36
  7912  010A2E                     __ptext36:
  7913                           	opt stack 0
  7914  010A2E                     _Port_SetType:
  7915                           	opt stack 15
  7916                           
  7917                           ;Port.c: 515: ePinError Output = ePinErrorState;
  7918                           
  7919                           ;incstack = 0
  7920  010A2E  0E05               	movlw	5
  7921  010A30  0100               	movlb	0	; () banked
  7922  010A32  6FF4               	movwf	Port_SetType@Output& (0+255),b
  7923                           
  7924                           ;Port.c: 517: switch (pType)
  7925  010A34  D07A               	goto	l509
  7926  010A36                     
  7927                           ; BSR set to: 0
  7928                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  7929                           
  7930                           ; BSR set to: 0
  7931  010A36  0100               	movlb	0	; () banked
  7932  010A38  EE20 F002          	lfsr	2,2
  7933  010A3C  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  7934  010A3E  26D9               	addwf	fsr2l,f,c
  7935  010A40  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  7936  010A42  22DA               	addwfc	fsr2h,f,c
  7937  010A44  CFDE F0F2          	movff	postinc2,??_Port_SetType
  7938  010A48  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  7939  010A4C  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  7940  010A50  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  7941  010A54  0EFF               	movlw	255
  7942  010A56  D067               	goto	L7
  7943  010A58                     
  7944                           ; BSR set to: 0
  7945                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  7946                           
  7947                           ; BSR set to: 0
  7948  010A58  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  7949  010A5C  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  7950  010A60  0E01               	movlw	1
  7951  010A62  0100               	movlb	0	; () banked
  7952  010A64  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  7953  010A66  EC69  F09C         	call	_Port_CheckPortType	;wreg free
  7954  010A6A  0100               	movlb	0	; () banked
  7955  010A6C  6FF4               	movwf	Port_SetType@Output& (0+255),b
  7956  010A6E  0100               	movlb	0	; () banked
  7957  010A70  51F4               	movf	Port_SetType@Output& (0+255),w,b
  7958  010A72  A4D8               	btfss	status,2,c
  7959  010A74  0012               	return	
  7960                           
  7961                           ; BSR set to: 0
  7962                           ;Port.c: 527: {
  7963                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  7964  010A76  0100               	movlb	0	; () banked
  7965  010A78  EE20 F002          	lfsr	2,2
  7966  010A7C  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  7967  010A7E  26D9               	addwf	fsr2l,f,c
  7968  010A80  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  7969  010A82  22DA               	addwfc	fsr2h,f,c
  7970  010A84  CFDE F0F2          	movff	postinc2,??_Port_SetType
  7971  010A88  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  7972  010A8C  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  7973  010A90  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  7974  010A94  0E00               	movlw	0
  7975  010A96  6EDF               	movwf	indf2,c
  7976                           
  7977                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  7978  010A98  0100               	movlb	0	; () banked
  7979  010A9A  EE20 F004          	lfsr	2,4
  7980  010A9E  D036               	goto	L12
  7981  010AA0                     
  7982                           ; BSR set to: 0
  7983                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  7984                           
  7985                           ; BSR set to: 0
  7986  010AA0  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  7987  010AA4  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  7988  010AA8  0E02               	movlw	2
  7989  010AAA  0100               	movlb	0	; () banked
  7990  010AAC  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  7991  010AAE  EC69  F09C         	call	_Port_CheckPortType	;wreg free
  7992  010AB2  0100               	movlb	0	; () banked
  7993  010AB4  6FF4               	movwf	Port_SetType@Output& (0+255),b
  7994  010AB6  0100               	movlb	0	; () banked
  7995  010AB8  51F4               	movf	Port_SetType@Output& (0+255),w,b
  7996  010ABA  A4D8               	btfss	status,2,c
  7997  010ABC  0012               	return	
  7998                           
  7999                           ; BSR set to: 0
  8000                           ;Port.c: 538: {
  8001                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8002  010ABE  0100               	movlb	0	; () banked
  8003  010AC0  EE20 F002          	lfsr	2,2
  8004  010AC4  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8005  010AC6  26D9               	addwf	fsr2l,f,c
  8006  010AC8  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8007  010ACA  22DA               	addwfc	fsr2h,f,c
  8008  010ACC  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8009  010AD0  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8010  010AD4  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8011  010AD8  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8012  010ADC  0EFF               	movlw	255
  8013  010ADE  6EDF               	movwf	indf2,c
  8014                           
  8015                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8016  010AE0  0100               	movlb	0	; () banked
  8017  010AE2  EE20 F004          	lfsr	2,4
  8018  010AE6  D7AA               	goto	L8
  8019  010AE8                     
  8020                           ; BSR set to: 0
  8021                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8022                           
  8023                           ; BSR set to: 0
  8024  010AE8  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8025  010AEC  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8026  010AF0  0E00               	movlw	0
  8027  010AF2  0100               	movlb	0	; () banked
  8028  010AF4  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8029  010AF6  EC69  F09C         	call	_Port_CheckPortType	;wreg free
  8030  010AFA  0100               	movlb	0	; () banked
  8031  010AFC  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8032  010AFE  0100               	movlb	0	; () banked
  8033  010B00  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8034  010B02  A4D8               	btfss	status,2,c
  8035  010B04  0012               	return	
  8036                           
  8037                           ; BSR set to: 0
  8038                           ;Port.c: 549: {
  8039                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8040  010B06  0100               	movlb	0	; () banked
  8041  010B08  EE20 F002          	lfsr	2,2
  8042  010B0C                     L12:
  8043  010B0C  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8044  010B0E  26D9               	addwf	fsr2l,f,c
  8045  010B10  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8046  010B12  22DA               	addwfc	fsr2h,f,c
  8047  010B14  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8048  010B18  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8049  010B1C  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8050  010B20  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8051  010B24  0E00               	movlw	0
  8052  010B26                     L7:
  8053  010B26  6EDF               	movwf	indf2,c
  8054                           
  8055                           ;Port.c: 552: }
  8056  010B28  D00E               	goto	l511
  8057  010B2A                     l509:
  8058                           
  8059                           ; BSR set to: 0
  8060                           
  8061                           ; BSR set to: 0
  8062  010B2A  0100               	movlb	0	; () banked
  8063  010B2C  51F1               	movf	Port_SetType@pType& (0+255),w,b
  8064                           
  8065                           ; Switch size 1, requested type "space"
  8066                           ; Number of cases is 4, Range of values is 0 to 3
  8067                           ; switch strategies available:
  8068                           ; Name         Instructions Cycles
  8069                           ; simple_byte           13     7 (average)
  8070                           ;	Chosen strategy is simple_byte
  8071  010B2E  0A00               	xorlw	0	; case 0
  8072  010B30  B4D8               	btfsc	status,2,c
  8073  010B32  D781               	goto	l510
  8074  010B34  0A01               	xorlw	1	; case 1
  8075  010B36  B4D8               	btfsc	status,2,c
  8076  010B38  D78F               	goto	l512
  8077  010B3A  0A03               	xorlw	3	; case 2
  8078  010B3C  B4D8               	btfsc	status,2,c
  8079  010B3E  D7B0               	goto	l516
  8080  010B40  0A01               	xorlw	1	; case 3
  8081  010B42  B4D8               	btfsc	status,2,c
  8082  010B44  D7D1               	goto	l519
  8083  010B46                     l511:
  8084                           
  8085                           ; BSR set to: 0
  8086                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8087                           
  8088                           ; BSR set to: 0
  8089  010B46  0E08               	movlw	8
  8090  010B48  0100               	movlb	0	; () banked
  8091  010B4A  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8092  010B4C  0100               	movlb	0	; () banked
  8093  010B4E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8094  010B50  0E00               	movlw	0
  8095  010B52  0100               	movlb	0	; () banked
  8096  010B54  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8097  010B56  0100               	movlb	0	; () banked
  8098  010B58  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8099  010B5A  0E00               	movlw	0
  8100  010B5C  0100               	movlb	0	; () banked
  8101  010B5E  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8102  010B60  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8103  010B64  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8104                           
  8105                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8106  010B68  0E08               	movlw	8
  8107  010B6A  0100               	movlb	0	; () banked
  8108  010B6C  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8109  010B6E  0100               	movlb	0	; () banked
  8110  010B70  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8111  010B72  0E00               	movlw	0
  8112  010B74  0100               	movlb	0	; () banked
  8113  010B76  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8114  010B78  0100               	movlb	0	; () banked
  8115  010B7A  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8116  010B7C  0E01               	movlw	1
  8117  010B7E  0100               	movlb	0	; () banked
  8118  010B80  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8119  010B82  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8120  010B86  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8121                           
  8122                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8123  010B8A  0E08               	movlw	8
  8124  010B8C  0100               	movlb	0	; () banked
  8125  010B8E  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8126  010B90  0100               	movlb	0	; () banked
  8127  010B92  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8128  010B94  0E00               	movlw	0
  8129  010B96  0100               	movlb	0	; () banked
  8130  010B98  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8131  010B9A  0100               	movlb	0	; () banked
  8132  010B9C  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8133  010B9E  0E02               	movlw	2
  8134  010BA0  0100               	movlb	0	; () banked
  8135  010BA2  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8136  010BA4  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8137  010BA8  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8138                           
  8139                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8140  010BAC  0E08               	movlw	8
  8141  010BAE  0100               	movlb	0	; () banked
  8142  010BB0  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8143  010BB2  0100               	movlb	0	; () banked
  8144  010BB4  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8145  010BB6  0E00               	movlw	0
  8146  010BB8  0100               	movlb	0	; () banked
  8147  010BBA  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8148  010BBC  0100               	movlb	0	; () banked
  8149  010BBE  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8150  010BC0  0E03               	movlw	3
  8151  010BC2  0100               	movlb	0	; () banked
  8152  010BC4  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8153  010BC6  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8154  010BCA  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8155                           
  8156                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8157  010BCE  0E08               	movlw	8
  8158  010BD0  0100               	movlb	0	; () banked
  8159  010BD2  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8160  010BD4  0100               	movlb	0	; () banked
  8161  010BD6  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8162  010BD8  0E00               	movlw	0
  8163  010BDA  0100               	movlb	0	; () banked
  8164  010BDC  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8165  010BDE  0100               	movlb	0	; () banked
  8166  010BE0  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8167  010BE2  0E04               	movlw	4
  8168  010BE4  0100               	movlb	0	; () banked
  8169  010BE6  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8170  010BE8  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8171  010BEC  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8172                           
  8173                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8174  010BF0  0E08               	movlw	8
  8175  010BF2  0100               	movlb	0	; () banked
  8176  010BF4  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8177  010BF6  0100               	movlb	0	; () banked
  8178  010BF8  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8179  010BFA  0E00               	movlw	0
  8180  010BFC  0100               	movlb	0	; () banked
  8181  010BFE  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8182  010C00  0100               	movlb	0	; () banked
  8183  010C02  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8184  010C04  0E05               	movlw	5
  8185  010C06  0100               	movlb	0	; () banked
  8186  010C08  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8187  010C0A  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8188  010C0E  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8189                           
  8190                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8191  010C12  0E08               	movlw	8
  8192  010C14  0100               	movlb	0	; () banked
  8193  010C16  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8194  010C18  0100               	movlb	0	; () banked
  8195  010C1A  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8196  010C1C  0E00               	movlw	0
  8197  010C1E  0100               	movlb	0	; () banked
  8198  010C20  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8199  010C22  0100               	movlb	0	; () banked
  8200  010C24  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8201  010C26  0E06               	movlw	6
  8202  010C28  0100               	movlb	0	; () banked
  8203  010C2A  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8204  010C2C  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8205  010C30  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8206                           
  8207                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8208  010C34  0E08               	movlw	8
  8209  010C36  0100               	movlb	0	; () banked
  8210  010C38  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8211  010C3A  0100               	movlb	0	; () banked
  8212  010C3C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8213  010C3E  0E00               	movlw	0
  8214  010C40  0100               	movlb	0	; () banked
  8215  010C42  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8216  010C44  0100               	movlb	0	; () banked
  8217  010C46  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8218  010C48  0E07               	movlw	7
  8219  010C4A  0100               	movlb	0	; () banked
  8220  010C4C  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8221  010C4E  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8222  010C52  ECF7  F09C         	call	_Word_SetPair	;wreg free
  8223  010C56  0012               	return	
  8224  010C58                     __end_of_Port_SetType:
  8225                           	opt stack 0
  8226                           tblptru	equ	0xFF8
  8227                           tblptrh	equ	0xFF7
  8228                           tblptrl	equ	0xFF6
  8229                           tablat	equ	0xFF5
  8230                           prodh	equ	0xFF4
  8231                           prodl	equ	0xFF3
  8232                           postinc0	equ	0xFEE
  8233                           wreg	equ	0xFE8
  8234                           indf1	equ	0xFE7
  8235                           postdec1	equ	0xFE5
  8236                           fsr1h	equ	0xFE2
  8237                           fsr1l	equ	0xFE1
  8238                           indf2	equ	0xFDF
  8239                           postinc2	equ	0xFDE
  8240                           postdec2	equ	0xFDD
  8241                           fsr2h	equ	0xFDA
  8242                           fsr2l	equ	0xFD9
  8243                           status	equ	0xFD8
  8244                           
  8245 ;; *************** function _Port_CheckPortType *****************
  8246 ;; Defined at:
  8247 ;;		line 138 in file "Library/Port.c"
  8248 ;; Parameters:    Size  Location     Type
  8249 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8250 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8251 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8252 ;;  pDrive          1   56[BANK0 ] enum E6469
  8253 ;; Auto vars:     Size  Location     Type
  8254 ;;  Output          1   57[BANK0 ] enum E6475
  8255 ;; Return value:  Size  Location     Type
  8256 ;;                  1    wreg      enum E6475
  8257 ;; Registers used:
  8258 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8259 ;; Tracked objects:
  8260 ;;		On entry : 0/0
  8261 ;;		On exit  : 0/0
  8262 ;;		Unchanged: 0/0
  8263 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8264 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8265 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8266 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8267 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8268 ;;Total ram usage:        4 bytes
  8269 ;; Hardware stack levels used:    1
  8270 ;; Hardware stack levels required when called:   13
  8271 ;; This function calls:
  8272 ;;		_Port_CheckQuadType
  8273 ;; This function is called by:
  8274 ;;		_Port_SetType
  8275 ;; This function uses a non-reentrant model
  8276 ;;
  8277                           
  8278                           	psect	text37
  8279  0138D2                     __ptext37:
  8280                           	opt stack 0
  8281  0138D2                     _Port_CheckPortType:
  8282                           	opt stack 15
  8283                           
  8284                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8285                           
  8286                           ;incstack = 0
  8287  0138D2  0E05               	movlw	5
  8288  0138D4  0100               	movlb	0	; () banked
  8289  0138D6  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8290                           
  8291                           ; BSR set to: 0
  8292                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8293  0138D8  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8294  0138DC  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8295  0138E0  0E00               	movlw	0
  8296  0138E2  0100               	movlb	0	; () banked
  8297  0138E4  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8298  0138E6  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8299  0138EA  EC45  F09B         	call	_Port_CheckQuadType	;wreg free
  8300  0138EE  0100               	movlb	0	; () banked
  8301  0138F0  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8302  0138F2  0100               	movlb	0	; () banked
  8303  0138F4  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8304  0138F6  A4D8               	btfss	status,2,c
  8305  0138F8  D00D               	goto	l397
  8306                           
  8307                           ; BSR set to: 0
  8308                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8309  0138FA  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8310  0138FE  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8311  013902  0E01               	movlw	1
  8312  013904  0100               	movlb	0	; () banked
  8313  013906  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8314  013908  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8315  01390C  EC45  F09B         	call	_Port_CheckQuadType	;wreg free
  8316  013910  0100               	movlb	0	; () banked
  8317  013912  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8318  013914                     l397:
  8319                           
  8320                           ; BSR set to: 0
  8321                           ;Port.c: 146: return Output;
  8322                           
  8323                           ; BSR set to: 0
  8324  013914  0100               	movlb	0	; () banked
  8325  013916  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8326  013918  0012               	return	
  8327  01391A                     __end_of_Port_CheckPortType:
  8328                           	opt stack 0
  8329                           tblptru	equ	0xFF8
  8330                           tblptrh	equ	0xFF7
  8331                           tblptrl	equ	0xFF6
  8332                           tablat	equ	0xFF5
  8333                           prodh	equ	0xFF4
  8334                           prodl	equ	0xFF3
  8335                           postinc0	equ	0xFEE
  8336                           wreg	equ	0xFE8
  8337                           indf1	equ	0xFE7
  8338                           postdec1	equ	0xFE5
  8339                           fsr1h	equ	0xFE2
  8340                           fsr1l	equ	0xFE1
  8341                           indf2	equ	0xFDF
  8342                           postinc2	equ	0xFDE
  8343                           postdec2	equ	0xFDD
  8344                           fsr2h	equ	0xFDA
  8345                           fsr2l	equ	0xFD9
  8346                           status	equ	0xFD8
  8347                           
  8348 ;; *************** function _Port_Set *****************
  8349 ;; Defined at:
  8350 ;;		line 570 in file "Library/Port.c"
  8351 ;; Parameters:    Size  Location     Type
  8352 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8353 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8354 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8355 ;;  pValue          1   17[BANK0 ] unsigned char 
  8356 ;; Auto vars:     Size  Location     Type
  8357 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8358 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8359 ;;  Type            1   38[BANK0 ] enum E6795
  8360 ;; Return value:  Size  Location     Type
  8361 ;;                  1    wreg      void 
  8362 ;; Registers used:
  8363 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8364 ;; Tracked objects:
  8365 ;;		On entry : 0/0
  8366 ;;		On exit  : 0/0
  8367 ;;		Unchanged: 0/0
  8368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8370 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8371 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8372 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8373 ;;Total ram usage:       24 bytes
  8374 ;; Hardware stack levels used:    1
  8375 ;; Hardware stack levels required when called:   10
  8376 ;; This function calls:
  8377 ;;		_Byte_SetByte
  8378 ;;		_Word_GetPair
  8379 ;; This function is called by:
  8380 ;;		_Port_Init
  8381 ;;		_Port_Toggle
  8382 ;; This function uses a non-reentrant model
  8383 ;;
  8384                           
  8385                           	psect	text38
  8386  01041E                     __ptext38:
  8387                           	opt stack 0
  8388  01041E                     _Port_Set:
  8389                           	opt stack 18
  8390                           
  8391                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;incstack = 0
  8395  01041E  0E08               	movlw	8
  8396  010420  0100               	movlb	0	; () banked
  8397  010422  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8398  010424  0100               	movlb	0	; () banked
  8399  010426  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8400  010428  0E00               	movlw	0
  8401  01042A  0100               	movlb	0	; () banked
  8402  01042C  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8403  01042E  0100               	movlb	0	; () banked
  8404  010430  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8405  010432  0E00               	movlw	0
  8406  010434  0100               	movlb	0	; () banked
  8407  010436  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8408  010438  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8409  01043C  0100               	movlb	0	; () banked
  8410  01043E  6FDB               	movwf	Port_Set@Type& (0+255),b
  8411                           
  8412                           ; BSR set to: 0
  8413                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8414  010440  0100               	movlb	0	; () banked
  8415  010442  51DB               	movf	Port_Set@Type& (0+255),w,b
  8416  010444  0100               	movlb	0	; () banked
  8417  010446  6FC7               	movwf	??_Port_Set& (0+255),b
  8418  010448  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8419  01044A  0E0E               	movlw	14
  8420  01044C                     u7035:
  8421  01044C  90D8               	bcf	status,0,c
  8422  01044E  0100               	movlb	0	; () banked
  8423  010450  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8424  010452  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8425  010454  2EE8               	decfsz	wreg,f,c
  8426  010456  D7FA               	goto	u7035
  8427  010458  0100               	movlb	0	; () banked
  8428  01045A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8429  01045C  0100               	movlb	0	; () banked
  8430  01045E  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8431  010460  6BCA               	clrf	(??_Port_Set+3)& (0+255),b
  8432  010462  0E0C               	movlw	12
  8433  010464                     u7045:
  8434  010464  90D8               	bcf	status,0,c
  8435  010466  0100               	movlb	0	; () banked
  8436  010468  37C9               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8437  01046A  37CA               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8438  01046C  2EE8               	decfsz	wreg,f,c
  8439  01046E  D7FA               	goto	u7045
  8440  010470  0100               	movlb	0	; () banked
  8441  010472  51DB               	movf	Port_Set@Type& (0+255),w,b
  8442  010474  0100               	movlb	0	; () banked
  8443  010476  6FCB               	movwf	(??_Port_Set+4)& (0+255),b
  8444  010478  6BCC               	clrf	(??_Port_Set+5)& (0+255),b
  8445  01047A  0E0A               	movlw	10
  8446  01047C                     u7055:
  8447  01047C  90D8               	bcf	status,0,c
  8448  01047E  0100               	movlb	0	; () banked
  8449  010480  37CB               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8450  010482  37CC               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8451  010484  2EE8               	decfsz	wreg,f,c
  8452  010486  D7FA               	goto	u7055
  8453  010488  0100               	movlb	0	; () banked
  8454  01048A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8455  01048C  0100               	movlb	0	; () banked
  8456  01048E  6FCE               	movwf	(??_Port_Set+7)& (0+255),b
  8457  010490  6BCD               	clrf	(??_Port_Set+6)& (0+255),b
  8458  010492  0100               	movlb	0	; () banked
  8459  010494  51DB               	movf	Port_Set@Type& (0+255),w,b
  8460  010496  0100               	movlb	0	; () banked
  8461  010498  6FCF               	movwf	(??_Port_Set+8)& (0+255),b
  8462  01049A  6BD0               	clrf	(??_Port_Set+9)& (0+255),b
  8463  01049C  0E06               	movlw	6
  8464  01049E                     u7065:
  8465  01049E  90D8               	bcf	status,0,c
  8466  0104A0  0100               	movlb	0	; () banked
  8467  0104A2  37CF               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8468  0104A4  37D0               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8469  0104A6  2EE8               	decfsz	wreg,f,c
  8470  0104A8  D7FA               	goto	u7065
  8471  0104AA  0100               	movlb	0	; () banked
  8472  0104AC  51DB               	movf	Port_Set@Type& (0+255),w,b
  8473  0104AE  0100               	movlb	0	; () banked
  8474  0104B0  6FD1               	movwf	(??_Port_Set+10)& (0+255),b
  8475  0104B2  6BD2               	clrf	(??_Port_Set+11)& (0+255),b
  8476  0104B4  0100               	movlb	0	; () banked
  8477  0104B6  3BD1               	swapf	(??_Port_Set+10)& (0+255),f,b
  8478  0104B8  3BD2               	swapf	(??_Port_Set+11)& (0+255),f,b
  8479  0104BA  0EF0               	movlw	240
  8480  0104BC  17D2               	andwf	(??_Port_Set+11)& (0+255),f,b
  8481  0104BE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8482  0104C0  0B0F               	andlw	15
  8483  0104C2  13D2               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8484  0104C4  0EF0               	movlw	240
  8485  0104C6  17D1               	andwf	(??_Port_Set+10)& (0+255),f,b
  8486  0104C8  0100               	movlb	0	; () banked
  8487  0104CA  51DB               	movf	Port_Set@Type& (0+255),w,b
  8488  0104CC  0100               	movlb	0	; () banked
  8489  0104CE  6FD3               	movwf	(??_Port_Set+12)& (0+255),b
  8490  0104D0  6BD4               	clrf	(??_Port_Set+13)& (0+255),b
  8491  0104D2  0100               	movlb	0	; () banked
  8492  0104D4  90D8               	bcf	status,0,c
  8493  0104D6  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8494  0104D8  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8495  0104DA  0100               	movlb	0	; () banked
  8496  0104DC  90D8               	bcf	status,0,c
  8497  0104DE  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8498  0104E0  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8499  0104E2  0100               	movlb	0	; () banked
  8500  0104E4  51DB               	movf	Port_Set@Type& (0+255),w,b
  8501  0104E6  0100               	movlb	0	; () banked
  8502  0104E8  6FD5               	movwf	(??_Port_Set+14)& (0+255),b
  8503  0104EA  6BD6               	clrf	(??_Port_Set+15)& (0+255),b
  8504  0104EC  0100               	movlb	0	; () banked
  8505  0104EE  51D3               	movf	(??_Port_Set+12)& (0+255),w,b
  8506  0104F0  0100               	movlb	0	; () banked
  8507  0104F2  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8508  0104F4  0100               	movlb	0	; () banked
  8509  0104F6  51D4               	movf	(??_Port_Set+13)& (0+255),w,b
  8510  0104F8  0100               	movlb	0	; () banked
  8511  0104FA  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8512  0104FC  0100               	movlb	0	; () banked
  8513  0104FE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8514  010500  0100               	movlb	0	; () banked
  8515  010502  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8516  010504  0100               	movlb	0	; () banked
  8517  010506  51D2               	movf	(??_Port_Set+11)& (0+255),w,b
  8518  010508  0100               	movlb	0	; () banked
  8519  01050A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8520  01050C  0100               	movlb	0	; () banked
  8521  01050E  51CF               	movf	(??_Port_Set+8)& (0+255),w,b
  8522  010510  0100               	movlb	0	; () banked
  8523  010512  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8524  010514  0100               	movlb	0	; () banked
  8525  010516  51D0               	movf	(??_Port_Set+9)& (0+255),w,b
  8526  010518  0100               	movlb	0	; () banked
  8527  01051A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8528  01051C  0100               	movlb	0	; () banked
  8529  01051E  51CD               	movf	(??_Port_Set+6)& (0+255),w,b
  8530  010520  0100               	movlb	0	; () banked
  8531  010522  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8532  010524  0100               	movlb	0	; () banked
  8533  010526  51CE               	movf	(??_Port_Set+7)& (0+255),w,b
  8534  010528  0100               	movlb	0	; () banked
  8535  01052A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8536  01052C  0100               	movlb	0	; () banked
  8537  01052E  51CB               	movf	(??_Port_Set+4)& (0+255),w,b
  8538  010530  0100               	movlb	0	; () banked
  8539  010532  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8540  010534  0100               	movlb	0	; () banked
  8541  010536  51CC               	movf	(??_Port_Set+5)& (0+255),w,b
  8542  010538  0100               	movlb	0	; () banked
  8543  01053A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8544  01053C  0100               	movlb	0	; () banked
  8545  01053E  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8546  010540  0100               	movlb	0	; () banked
  8547  010542  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8548  010544  0100               	movlb	0	; () banked
  8549  010546  51CA               	movf	(??_Port_Set+3)& (0+255),w,b
  8550  010548  0100               	movlb	0	; () banked
  8551  01054A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8552  01054C  0100               	movlb	0	; () banked
  8553  01054E  51C7               	movf	??_Port_Set& (0+255),w,b
  8554  010550  0100               	movlb	0	; () banked
  8555  010552  11D5               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8556  010554  0100               	movlb	0	; () banked
  8557  010556  6FD7               	movwf	Port_Set@TypeRequired& (0+255),b
  8558  010558  0100               	movlb	0	; () banked
  8559  01055A  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8560  01055C  0100               	movlb	0	; () banked
  8561  01055E  11D6               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8562  010560  0100               	movlb	0	; () banked
  8563  010562  6FD8               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8564                           
  8565                           ; BSR set to: 0
  8566                           ;Port.c: 574: UINT16 TypeActual = Type;
  8567  010564  C0DB  F0D9         	movff	Port_Set@Type,Port_Set@TypeActual
  8568  010568  0100               	movlb	0	; () banked
  8569  01056A  6BDA               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8570                           
  8571                           ; BSR set to: 0
  8572                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8573  01056C  0E08               	movlw	8
  8574  01056E  0100               	movlb	0	; () banked
  8575  010570  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8576  010572  0100               	movlb	0	; () banked
  8577  010574  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8578  010576  0E00               	movlw	0
  8579  010578  0100               	movlb	0	; () banked
  8580  01057A  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8581  01057C  0100               	movlb	0	; () banked
  8582  01057E  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8583  010580  0E01               	movlw	1
  8584  010582  0100               	movlb	0	; () banked
  8585  010584  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8586  010586  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8587  01058A  0100               	movlb	0	; () banked
  8588  01058C  6FC7               	movwf	??_Port_Set& (0+255),b
  8589  01058E  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8590  010590  0100               	movlb	0	; () banked
  8591  010592  90D8               	bcf	status,0,c
  8592  010594  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8593  010596  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8594  010598  0100               	movlb	0	; () banked
  8595  01059A  90D8               	bcf	status,0,c
  8596  01059C  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8597  01059E  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8598  0105A0  0100               	movlb	0	; () banked
  8599  0105A2  51C7               	movf	??_Port_Set& (0+255),w,b
  8600  0105A4  0100               	movlb	0	; () banked
  8601  0105A6  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8602  0105A8  0100               	movlb	0	; () banked
  8603  0105AA  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8604  0105AC  0100               	movlb	0	; () banked
  8605  0105AE  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8609  0105B0  0E08               	movlw	8
  8610  0105B2  0100               	movlb	0	; () banked
  8611  0105B4  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8612  0105B6  0100               	movlb	0	; () banked
  8613  0105B8  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8614  0105BA  0E00               	movlw	0
  8615  0105BC  0100               	movlb	0	; () banked
  8616  0105BE  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8617  0105C0  0100               	movlb	0	; () banked
  8618  0105C2  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8619  0105C4  0E02               	movlw	2
  8620  0105C6  0100               	movlb	0	; () banked
  8621  0105C8  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8622  0105CA  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8623  0105CE  0100               	movlb	0	; () banked
  8624  0105D0  6FC7               	movwf	??_Port_Set& (0+255),b
  8625  0105D2  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8626  0105D4  0100               	movlb	0	; () banked
  8627  0105D6  3BC7               	swapf	??_Port_Set& (0+255),f,b
  8628  0105D8  3BC8               	swapf	(??_Port_Set+1)& (0+255),f,b
  8629  0105DA  0EF0               	movlw	240
  8630  0105DC  17C8               	andwf	(??_Port_Set+1)& (0+255),f,b
  8631  0105DE  51C7               	movf	??_Port_Set& (0+255),w,b
  8632  0105E0  0B0F               	andlw	15
  8633  0105E2  13C8               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8634  0105E4  0EF0               	movlw	240
  8635  0105E6  17C7               	andwf	??_Port_Set& (0+255),f,b
  8636  0105E8  0100               	movlb	0	; () banked
  8637  0105EA  51C7               	movf	??_Port_Set& (0+255),w,b
  8638  0105EC  0100               	movlb	0	; () banked
  8639  0105EE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8640  0105F0  0100               	movlb	0	; () banked
  8641  0105F2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8642  0105F4  0100               	movlb	0	; () banked
  8643  0105F6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8644                           
  8645                           ; BSR set to: 0
  8646                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8647  0105F8  0E08               	movlw	8
  8648  0105FA  0100               	movlb	0	; () banked
  8649  0105FC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8650  0105FE  0100               	movlb	0	; () banked
  8651  010600  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8652  010602  0E00               	movlw	0
  8653  010604  0100               	movlb	0	; () banked
  8654  010606  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8655  010608  0100               	movlb	0	; () banked
  8656  01060A  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8657  01060C  0E03               	movlw	3
  8658  01060E  0100               	movlb	0	; () banked
  8659  010610  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8660  010612  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8661  010616  0100               	movlb	0	; () banked
  8662  010618  6FC7               	movwf	??_Port_Set& (0+255),b
  8663  01061A  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8664  01061C  0E06               	movlw	6
  8665  01061E                     u7075:
  8666  01061E  90D8               	bcf	status,0,c
  8667  010620  0100               	movlb	0	; () banked
  8668  010622  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8669  010624  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8670  010626  2EE8               	decfsz	wreg,f,c
  8671  010628  D7FA               	goto	u7075
  8672  01062A  0100               	movlb	0	; () banked
  8673  01062C  51C7               	movf	??_Port_Set& (0+255),w,b
  8674  01062E  0100               	movlb	0	; () banked
  8675  010630  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8676  010632  0100               	movlb	0	; () banked
  8677  010634  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8678  010636  0100               	movlb	0	; () banked
  8679  010638  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8680                           
  8681                           ; BSR set to: 0
  8682                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8683  01063A  0E08               	movlw	8
  8684  01063C  0100               	movlb	0	; () banked
  8685  01063E  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8686  010640  0100               	movlb	0	; () banked
  8687  010642  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8688  010644  0E00               	movlw	0
  8689  010646  0100               	movlb	0	; () banked
  8690  010648  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8691  01064A  0100               	movlb	0	; () banked
  8692  01064C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8693  01064E  0E04               	movlw	4
  8694  010650  0100               	movlb	0	; () banked
  8695  010652  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8696  010654  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8697  010658  0100               	movlb	0	; () banked
  8698  01065A  6FC7               	movwf	??_Port_Set& (0+255),b
  8699  01065C  0100               	movlb	0	; () banked
  8700  01065E  51C7               	movf	??_Port_Set& (0+255),w,b
  8701  010660  0100               	movlb	0	; () banked
  8702  010662  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8703  010664  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8704  010666  0100               	movlb	0	; () banked
  8705  010668  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8706  01066A  0100               	movlb	0	; () banked
  8707  01066C  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8708  01066E  0100               	movlb	0	; () banked
  8709  010670  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8710  010672  0100               	movlb	0	; () banked
  8711  010674  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8712                           
  8713                           ; BSR set to: 0
  8714                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8715  010676  0E08               	movlw	8
  8716  010678  0100               	movlb	0	; () banked
  8717  01067A  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8718  01067C  0100               	movlb	0	; () banked
  8719  01067E  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8720  010680  0E00               	movlw	0
  8721  010682  0100               	movlb	0	; () banked
  8722  010684  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8723  010686  0100               	movlb	0	; () banked
  8724  010688  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8725  01068A  0E05               	movlw	5
  8726  01068C  0100               	movlb	0	; () banked
  8727  01068E  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8728  010690  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8729  010694  0100               	movlb	0	; () banked
  8730  010696  6FC7               	movwf	??_Port_Set& (0+255),b
  8731  010698  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8732  01069A  0E0A               	movlw	10
  8733  01069C                     u7085:
  8734  01069C  90D8               	bcf	status,0,c
  8735  01069E  0100               	movlb	0	; () banked
  8736  0106A0  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8737  0106A2  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8738  0106A4  2EE8               	decfsz	wreg,f,c
  8739  0106A6  D7FA               	goto	u7085
  8740  0106A8  0100               	movlb	0	; () banked
  8741  0106AA  51C7               	movf	??_Port_Set& (0+255),w,b
  8742  0106AC  0100               	movlb	0	; () banked
  8743  0106AE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8744  0106B0  0100               	movlb	0	; () banked
  8745  0106B2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8746  0106B4  0100               	movlb	0	; () banked
  8747  0106B6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8751  0106B8  0E08               	movlw	8
  8752  0106BA  0100               	movlb	0	; () banked
  8753  0106BC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8754  0106BE  0100               	movlb	0	; () banked
  8755  0106C0  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8756  0106C2  0E00               	movlw	0
  8757  0106C4  0100               	movlb	0	; () banked
  8758  0106C6  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8759  0106C8  0100               	movlb	0	; () banked
  8760  0106CA  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8761  0106CC  0E06               	movlw	6
  8762  0106CE  0100               	movlb	0	; () banked
  8763  0106D0  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8764  0106D2  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8765  0106D6  0100               	movlb	0	; () banked
  8766  0106D8  6FC7               	movwf	??_Port_Set& (0+255),b
  8767  0106DA  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8768  0106DC  0E0C               	movlw	12
  8769  0106DE                     u7095:
  8770  0106DE  90D8               	bcf	status,0,c
  8771  0106E0  0100               	movlb	0	; () banked
  8772  0106E2  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8773  0106E4  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8774  0106E6  2EE8               	decfsz	wreg,f,c
  8775  0106E8  D7FA               	goto	u7095
  8776  0106EA  0100               	movlb	0	; () banked
  8777  0106EC  51C7               	movf	??_Port_Set& (0+255),w,b
  8778  0106EE  0100               	movlb	0	; () banked
  8779  0106F0  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8780  0106F2  0100               	movlb	0	; () banked
  8781  0106F4  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8782  0106F6  0100               	movlb	0	; () banked
  8783  0106F8  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8784                           
  8785                           ; BSR set to: 0
  8786                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8787  0106FA  0E08               	movlw	8
  8788  0106FC  0100               	movlb	0	; () banked
  8789  0106FE  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8790  010700  0100               	movlb	0	; () banked
  8791  010702  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8792  010704  0E00               	movlw	0
  8793  010706  0100               	movlb	0	; () banked
  8794  010708  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8795  01070A  0100               	movlb	0	; () banked
  8796  01070C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8797  01070E  0E07               	movlw	7
  8798  010710  0100               	movlb	0	; () banked
  8799  010712  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8800  010714  ECDB  F09D         	call	_Word_GetPair	;wreg free
  8801  010718  0100               	movlb	0	; () banked
  8802  01071A  6FC7               	movwf	??_Port_Set& (0+255),b
  8803  01071C  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8804  01071E  0E0E               	movlw	14
  8805  010720                     u7105:
  8806  010720  90D8               	bcf	status,0,c
  8807  010722  0100               	movlb	0	; () banked
  8808  010724  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8809  010726  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8810  010728  2EE8               	decfsz	wreg,f,c
  8811  01072A  D7FA               	goto	u7105
  8812  01072C  0100               	movlb	0	; () banked
  8813  01072E  51C7               	movf	??_Port_Set& (0+255),w,b
  8814  010730  0100               	movlb	0	; () banked
  8815  010732  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8816  010734  0100               	movlb	0	; () banked
  8817  010736  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8818  010738  0100               	movlb	0	; () banked
  8819  01073A  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8820                           
  8821                           ;Port.c: 584: if (TypeRequired == TypeActual)
  8822  01073C  0100               	movlb	0	; () banked
  8823  01073E  51D9               	movf	Port_Set@TypeActual& (0+255),w,b
  8824  010740  0100               	movlb	0	; () banked
  8825  010742  19D7               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  8826  010744  E148               	bnz	l528
  8827  010746  0100               	movlb	0	; () banked
  8828  010748  51DA               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  8829  01074A  0100               	movlb	0	; () banked
  8830  01074C  19D8               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  8831  01074E  A4D8               	btfss	status,2,c
  8832  010750  0012               	return	
  8833  010752  D032               	goto	l526
  8834  010754                     
  8835                           ; BSR set to: 0
  8836                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  8837                           
  8838                           ; BSR set to: 0
  8839  010754  0100               	movlb	0	; () banked
  8840  010756  EE20 F002          	lfsr	2,2
  8841  01075A  51C4               	movf	Port_Set@pInput& (0+255),w,b
  8842  01075C  26D9               	addwf	fsr2l,f,c
  8843  01075E  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8844  010760  22DA               	addwfc	fsr2h,f,c
  8845  010762  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  8846  010766  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  8847  01076A  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8848  01076E  ECF8  F09F         	call	_Byte_SetByte	;wreg free
  8849                           
  8850                           ;Port.c: 594: break;
  8851  010772  0012               	return	
  8852  010774                     
  8853                           ;Port.c: 597: pValue = ~pValue;
  8854  010774  0100               	movlb	0	; () banked
  8855  010776  1FC6               	comf	Port_Set@pValue& (0+255),f,b
  8856                           
  8857                           ; BSR set to: 0
  8858                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  8859  010778  0100               	movlb	0	; () banked
  8860  01077A  EE20 F002          	lfsr	2,2
  8861  01077E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  8862  010780  26D9               	addwf	fsr2l,f,c
  8863  010782  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8864  010784  22DA               	addwfc	fsr2h,f,c
  8865  010786  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  8866  01078A  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  8867  01078E  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8868  010792  ECF8  F09F         	call	_Byte_SetByte	;wreg free
  8869                           
  8870                           ;Port.c: 599: break;
  8871  010796  0012               	return	
  8872  010798                     
  8873                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  8874  010798  0100               	movlb	0	; () banked
  8875  01079A  EE20 F004          	lfsr	2,4
  8876  01079E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  8877  0107A0  26D9               	addwf	fsr2l,f,c
  8878  0107A2  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  8879  0107A4  22DA               	addwfc	fsr2h,f,c
  8880  0107A6  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  8881  0107AA  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  8882  0107AE  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  8883  0107B2  ECF8  F09F         	call	_Byte_SetByte	;wreg free
  8884                           
  8885                           ;Port.c: 606: }
  8886                           
  8887                           ;Port.c: 605: break;
  8888                           
  8889                           ;Port.c: 604: default:
  8890                           
  8891                           ;Port.c: 603: break;
  8892  0107B6  0012               	return	
  8893  0107B8                     l526:
  8894  0107B8  0100               	movlb	0	; () banked
  8895  0107BA  51DB               	movf	Port_Set@Type& (0+255),w,b
  8896                           
  8897                           ; Switch size 1, requested type "space"
  8898                           ; Number of cases is 4, Range of values is 0 to 3
  8899                           ; switch strategies available:
  8900                           ; Name         Instructions Cycles
  8901                           ; simple_byte           13     7 (average)
  8902                           ;	Chosen strategy is simple_byte
  8903  0107BC  0A00               	xorlw	0	; case 0
  8904  0107BE  B4D8               	btfsc	status,2,c
  8905  0107C0  0012               	return	
  8906  0107C2  0A01               	xorlw	1	; case 1
  8907  0107C4  B4D8               	btfsc	status,2,c
  8908  0107C6  D7C6               	goto	l529
  8909  0107C8  0A03               	xorlw	3	; case 2
  8910  0107CA  B4D8               	btfsc	status,2,c
  8911  0107CC  D7D3               	goto	l531
  8912  0107CE  0A01               	xorlw	1	; case 3
  8913  0107D0  A4D8               	btfss	status,2,c
  8914                           
  8915                           ; BSR set to: 0
  8916                           
  8917                           ; BSR set to: 0
  8918                           ;Port.c: 607: }
  8919  0107D2  0012               	return	
  8920  0107D4  D7E1               	goto	l532
  8921  0107D6                     l528:
  8922  0107D6  0012               	return		;funcret
  8923  0107D8                     __end_of_Port_Set:
  8924                           	opt stack 0
  8925                           tblptru	equ	0xFF8
  8926                           tblptrh	equ	0xFF7
  8927                           tblptrl	equ	0xFF6
  8928                           tablat	equ	0xFF5
  8929                           prodh	equ	0xFF4
  8930                           prodl	equ	0xFF3
  8931                           postinc0	equ	0xFEE
  8932                           wreg	equ	0xFE8
  8933                           indf1	equ	0xFE7
  8934                           postdec1	equ	0xFE5
  8935                           fsr1h	equ	0xFE2
  8936                           fsr1l	equ	0xFE1
  8937                           indf2	equ	0xFDF
  8938                           postinc2	equ	0xFDE
  8939                           postdec2	equ	0xFDD
  8940                           fsr2h	equ	0xFDA
  8941                           fsr2l	equ	0xFD9
  8942                           status	equ	0xFD8
  8943                           
  8944 ;; *************** function _Byte_SetByte *****************
  8945 ;; Defined at:
  8946 ;;		line 110 in file "Library/Types.c"
  8947 ;; Parameters:    Size  Location     Type
  8948 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  8949 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  8950 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  8951 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  8952 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  8953 ;;		 -> NULL(0), 
  8954 ;;  pValue          1    2[BANK0 ] unsigned char 
  8955 ;; Auto vars:     Size  Location     Type
  8956 ;;		None
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  1    wreg      void 
  8959 ;; Registers used:
  8960 ;;		fsr2l, fsr2h
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8966 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;Total ram usage:        3 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    7
  8973 ;; This function calls:
  8974 ;;		Nothing
  8975 ;; This function is called by:
  8976 ;;		_Port_Set
  8977 ;;		_I2C_Init
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           	psect	text39
  8982  013FF0                     __ptext39:
  8983                           	opt stack 0
  8984  013FF0                     _Byte_SetByte:
  8985                           	opt stack 20
  8986                           
  8987                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  8988                           
  8989                           ;incstack = 0
  8990  013FF0  C0B5  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  8991  013FF4  C0B6  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  8992  013FF8  C0B7  FFDF         	movff	Byte_SetByte@pValue,indf2
  8993  013FFC  0012               	return		;funcret
  8994  013FFE                     __end_of_Byte_SetByte:
  8995                           	opt stack 0
  8996                           tblptru	equ	0xFF8
  8997                           tblptrh	equ	0xFF7
  8998                           tblptrl	equ	0xFF6
  8999                           tablat	equ	0xFF5
  9000                           prodh	equ	0xFF4
  9001                           prodl	equ	0xFF3
  9002                           postinc0	equ	0xFEE
  9003                           wreg	equ	0xFE8
  9004                           indf1	equ	0xFE7
  9005                           postdec1	equ	0xFE5
  9006                           fsr1h	equ	0xFE2
  9007                           fsr1l	equ	0xFE1
  9008                           indf2	equ	0xFDF
  9009                           postinc2	equ	0xFDE
  9010                           postdec2	equ	0xFDD
  9011                           fsr2h	equ	0xFDA
  9012                           fsr2l	equ	0xFD9
  9013                           status	equ	0xFD8
  9014                           
  9015 ;; *************** function _GetPortTRIS *****************
  9016 ;; Defined at:
  9017 ;;		line 67 in file "Library/Port.c"
  9018 ;; Parameters:    Size  Location     Type
  9019 ;;  pInput          1    wreg     enum E6786
  9020 ;; Auto vars:     Size  Location     Type
  9021 ;;  pInput          1    2[BANK0 ] enum E6786
  9022 ;; Return value:  Size  Location     Type
  9023 ;;                  2    0[BANK0 ] PTR struct Byte
  9024 ;; Registers used:
  9025 ;;		wreg, status,2, status,0
  9026 ;; Tracked objects:
  9027 ;;		On entry : 0/0
  9028 ;;		On exit  : 0/0
  9029 ;;		Unchanged: 0/0
  9030 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9031 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9032 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9033 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9034 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9035 ;;Total ram usage:        3 bytes
  9036 ;; Hardware stack levels used:    1
  9037 ;; Hardware stack levels required when called:    7
  9038 ;; This function calls:
  9039 ;;		Nothing
  9040 ;; This function is called by:
  9041 ;;		_Port_Init
  9042 ;; This function uses a non-reentrant model
  9043 ;;
  9044                           
  9045                           	psect	text40
  9046  0128E4                     __ptext40:
  9047                           	opt stack 0
  9048  0128E4                     _GetPortTRIS:
  9049                           	opt stack 21
  9050                           
  9051                           ;incstack = 0
  9052                           ;GetPortTRIS@pInput stored from wreg
  9053  0128E4  0100               	movlb	0	; () banked
  9054  0128E6  6FB7               	movwf	GetPortTRIS@pInput& (0+255),b
  9055                           
  9056                           ;Port.c: 69: switch (pInput)
  9057  0128E8  D038               	goto	l363
  9058  0128EA                     
  9059                           ;Port.c: 72: return (BytePtr)&TRISA;
  9060  0128EA  0E92               	movlw	146
  9061  0128EC  0100               	movlb	0	; () banked
  9062  0128EE  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9063  0128F0  0E0F               	movlw	15
  9064  0128F2  0100               	movlb	0	; () banked
  9065  0128F4  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9066                           
  9067                           ; BSR set to: 0
  9068  0128F6  0012               	return	
  9069  0128F8                     
  9070                           ; BSR set to: 0
  9071                           ;Port.c: 74: return (BytePtr)&TRISB;
  9072                           
  9073                           ; BSR set to: 0
  9074  0128F8  0E93               	movlw	147
  9075  0128FA  0100               	movlb	0	; () banked
  9076  0128FC  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9077  0128FE  0E0F               	movlw	15
  9078  012900  0100               	movlb	0	; () banked
  9079  012902  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9080                           
  9081                           ; BSR set to: 0
  9082  012904  0012               	return	
  9083  012906                     
  9084                           ; BSR set to: 0
  9085                           ;Port.c: 76: return (BytePtr)&TRISC;
  9086                           
  9087                           ; BSR set to: 0
  9088  012906  0E94               	movlw	148
  9089  012908  0100               	movlb	0	; () banked
  9090  01290A  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9091  01290C  0E0F               	movlw	15
  9092  01290E  0100               	movlb	0	; () banked
  9093  012910  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9094                           
  9095                           ; BSR set to: 0
  9096  012912  0012               	return	
  9097  012914                     
  9098                           ; BSR set to: 0
  9099                           ;Port.c: 78: return (BytePtr)&TRISD;
  9100                           
  9101                           ; BSR set to: 0
  9102  012914  0E95               	movlw	149
  9103  012916  0100               	movlb	0	; () banked
  9104  012918  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9105  01291A  0E0F               	movlw	15
  9106  01291C  0100               	movlb	0	; () banked
  9107  01291E  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9108                           
  9109                           ; BSR set to: 0
  9110  012920  0012               	return	
  9111  012922                     
  9112                           ; BSR set to: 0
  9113                           ;Port.c: 80: return (BytePtr)&TRISE;
  9114                           
  9115                           ; BSR set to: 0
  9116  012922  0E96               	movlw	150
  9117  012924  0100               	movlb	0	; () banked
  9118  012926  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9119  012928  0E0F               	movlw	15
  9120  01292A  0100               	movlb	0	; () banked
  9121  01292C  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9122                           
  9123                           ; BSR set to: 0
  9124  01292E  0012               	return	
  9125  012930                     
  9126                           ; BSR set to: 0
  9127                           ;Port.c: 82: return (BytePtr)&TRISF;
  9128                           
  9129                           ; BSR set to: 0
  9130  012930  0E97               	movlw	151
  9131  012932  0100               	movlb	0	; () banked
  9132  012934  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9133  012936  0E0F               	movlw	15
  9134  012938  0100               	movlb	0	; () banked
  9135  01293A  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9136                           
  9137                           ; BSR set to: 0
  9138  01293C  0012               	return	
  9139  01293E                     
  9140                           ; BSR set to: 0
  9141                           ;Port.c: 84: return (BytePtr)&TRISG;
  9142                           
  9143                           ; BSR set to: 0
  9144  01293E  0E98               	movlw	152
  9145  012940  0100               	movlb	0	; () banked
  9146  012942  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9147  012944  0E0F               	movlw	15
  9148  012946  0100               	movlb	0	; () banked
  9149  012948  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9150                           
  9151                           ; BSR set to: 0
  9152  01294A  0012               	return	
  9153  01294C                     
  9154                           ; BSR set to: 0
  9155                           ;Port.c: 86: return (void*)0;
  9156                           
  9157                           ; BSR set to: 0
  9158  01294C  0E00               	movlw	0
  9159  01294E  0100               	movlb	0	; () banked
  9160  012950  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9161  012952  0E00               	movlw	0
  9162  012954  0100               	movlb	0	; () banked
  9163  012956  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9164                           
  9165                           ; BSR set to: 0
  9166                           ;Port.c: 87: }
  9167                           
  9168                           ; BSR set to: 0
  9169  012958  0012               	return	
  9170  01295A                     l363:
  9171                           
  9172                           ; BSR set to: 0
  9173  01295A  0100               	movlb	0	; () banked
  9174  01295C  51B7               	movf	GetPortTRIS@pInput& (0+255),w,b
  9175                           
  9176                           ; Switch size 1, requested type "space"
  9177                           ; Number of cases is 7, Range of values is 0 to 6
  9178                           ; switch strategies available:
  9179                           ; Name         Instructions Cycles
  9180                           ; simple_byte           22    12 (average)
  9181                           ;	Chosen strategy is simple_byte
  9182  01295E  0A00               	xorlw	0	; case 0
  9183  012960  B4D8               	btfsc	status,2,c
  9184  012962  D7C3               	goto	l364
  9185  012964  0A01               	xorlw	1	; case 1
  9186  012966  B4D8               	btfsc	status,2,c
  9187  012968  D7C7               	goto	l366
  9188  01296A  0A03               	xorlw	3	; case 2
  9189  01296C  B4D8               	btfsc	status,2,c
  9190  01296E  D7CB               	goto	l367
  9191  012970  0A01               	xorlw	1	; case 3
  9192  012972  B4D8               	btfsc	status,2,c
  9193  012974  D7CF               	goto	l368
  9194  012976  0A07               	xorlw	7	; case 4
  9195  012978  B4D8               	btfsc	status,2,c
  9196  01297A  D7D3               	goto	l369
  9197  01297C  0A01               	xorlw	1	; case 5
  9198  01297E  B4D8               	btfsc	status,2,c
  9199  012980  D7D7               	goto	l370
  9200  012982  0A03               	xorlw	3	; case 6
  9201  012984  B4D8               	btfsc	status,2,c
  9202  012986  D7DB               	goto	l371
  9203  012988  D7E1               	goto	l372
  9204  01298A                     __end_of_GetPortTRIS:
  9205                           	opt stack 0
  9206                           tblptru	equ	0xFF8
  9207                           tblptrh	equ	0xFF7
  9208                           tblptrl	equ	0xFF6
  9209                           tablat	equ	0xFF5
  9210                           prodh	equ	0xFF4
  9211                           prodl	equ	0xFF3
  9212                           postinc0	equ	0xFEE
  9213                           wreg	equ	0xFE8
  9214                           indf1	equ	0xFE7
  9215                           postdec1	equ	0xFE5
  9216                           fsr1h	equ	0xFE2
  9217                           fsr1l	equ	0xFE1
  9218                           indf2	equ	0xFDF
  9219                           postinc2	equ	0xFDE
  9220                           postdec2	equ	0xFDD
  9221                           fsr2h	equ	0xFDA
  9222                           fsr2l	equ	0xFD9
  9223                           status	equ	0xFD8
  9224                           
  9225 ;; *************** function _GetPortProperties *****************
  9226 ;; Defined at:
  9227 ;;		line 21 in file "Library/Port.c"
  9228 ;; Parameters:    Size  Location     Type
  9229 ;;  pInput          1    wreg     enum E6786
  9230 ;; Auto vars:     Size  Location     Type
  9231 ;;  pInput          1    2[BANK0 ] enum E6786
  9232 ;; Return value:  Size  Location     Type
  9233 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9234 ;; Registers used:
  9235 ;;		wreg, status,2, status,0
  9236 ;; Tracked objects:
  9237 ;;		On entry : 0/0
  9238 ;;		On exit  : 0/0
  9239 ;;		Unchanged: 0/0
  9240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9241 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9244 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9245 ;;Total ram usage:        3 bytes
  9246 ;; Hardware stack levels used:    1
  9247 ;; Hardware stack levels required when called:    7
  9248 ;; This function calls:
  9249 ;;		Nothing
  9250 ;; This function is called by:
  9251 ;;		_Port_Init
  9252 ;; This function uses a non-reentrant model
  9253 ;;
  9254                           
  9255                           	psect	text41
  9256  01298A                     __ptext41:
  9257                           	opt stack 0
  9258  01298A                     _GetPortProperties:
  9259                           	opt stack 21
  9260                           
  9261                           ; BSR set to: 0
  9262                           ;incstack = 0
  9263                           ;GetPortProperties@pInput stored from wreg
  9264  01298A  0100               	movlb	0	; () banked
  9265  01298C  6FB7               	movwf	GetPortProperties@pInput& (0+255),b
  9266                           
  9267                           ;Port.c: 23: switch (pInput)
  9268  01298E  D038               	goto	l337
  9269  012990                     
  9270                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9271  012990  0ECB               	movlw	low _PortA_Property
  9272  012992  0100               	movlb	0	; () banked
  9273  012994  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9274  012996  0EFF               	movlw	high _PortA_Property
  9275  012998  0100               	movlb	0	; () banked
  9276  01299A  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9277                           
  9278                           ; BSR set to: 0
  9279  01299C  0012               	return	
  9280  01299E                     
  9281                           ; BSR set to: 0
  9282                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9283                           
  9284                           ; BSR set to: 0
  9285  01299E  0EC9               	movlw	low _PortB_Property
  9286  0129A0  0100               	movlb	0	; () banked
  9287  0129A2  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9288  0129A4  0EFF               	movlw	high _PortB_Property
  9289  0129A6  0100               	movlb	0	; () banked
  9290  0129A8  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9291                           
  9292                           ; BSR set to: 0
  9293  0129AA  0012               	return	
  9294  0129AC                     
  9295                           ; BSR set to: 0
  9296                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9297                           
  9298                           ; BSR set to: 0
  9299  0129AC  0EC7               	movlw	low _PortC_Property
  9300  0129AE  0100               	movlb	0	; () banked
  9301  0129B0  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9302  0129B2  0EFF               	movlw	high _PortC_Property
  9303  0129B4  0100               	movlb	0	; () banked
  9304  0129B6  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9305                           
  9306                           ; BSR set to: 0
  9307  0129B8  0012               	return	
  9308  0129BA                     
  9309                           ; BSR set to: 0
  9310                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9311                           
  9312                           ; BSR set to: 0
  9313  0129BA  0EC5               	movlw	low _PortD_Property
  9314  0129BC  0100               	movlb	0	; () banked
  9315  0129BE  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9316  0129C0  0EFF               	movlw	high _PortD_Property
  9317  0129C2  0100               	movlb	0	; () banked
  9318  0129C4  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9319                           
  9320                           ; BSR set to: 0
  9321  0129C6  0012               	return	
  9322  0129C8                     
  9323                           ; BSR set to: 0
  9324                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9325                           
  9326                           ; BSR set to: 0
  9327  0129C8  0EC3               	movlw	low _PortE_Property
  9328  0129CA  0100               	movlb	0	; () banked
  9329  0129CC  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9330  0129CE  0EFF               	movlw	high _PortE_Property
  9331  0129D0  0100               	movlb	0	; () banked
  9332  0129D2  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9333                           
  9334                           ; BSR set to: 0
  9335  0129D4  0012               	return	
  9336  0129D6                     
  9337                           ; BSR set to: 0
  9338                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9339                           
  9340                           ; BSR set to: 0
  9341  0129D6  0EC1               	movlw	low _PortF_Property
  9342  0129D8  0100               	movlb	0	; () banked
  9343  0129DA  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9344  0129DC  0EFF               	movlw	high _PortF_Property
  9345  0129DE  0100               	movlb	0	; () banked
  9346  0129E0  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9347                           
  9348                           ; BSR set to: 0
  9349  0129E2  0012               	return	
  9350  0129E4                     
  9351                           ; BSR set to: 0
  9352                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9353                           
  9354                           ; BSR set to: 0
  9355  0129E4  0EBF               	movlw	low _PortG_Property
  9356  0129E6  0100               	movlb	0	; () banked
  9357  0129E8  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9358  0129EA  0EFF               	movlw	high _PortG_Property
  9359  0129EC  0100               	movlb	0	; () banked
  9360  0129EE  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9361                           
  9362                           ; BSR set to: 0
  9363  0129F0  0012               	return	
  9364  0129F2                     
  9365                           ; BSR set to: 0
  9366                           ;Port.c: 40: return (void*)0;
  9367                           
  9368                           ; BSR set to: 0
  9369  0129F2  0E00               	movlw	0
  9370  0129F4  0100               	movlb	0	; () banked
  9371  0129F6  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9372  0129F8  0E00               	movlw	0
  9373  0129FA  0100               	movlb	0	; () banked
  9374  0129FC  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9375                           
  9376                           ; BSR set to: 0
  9377                           ;Port.c: 41: }
  9378                           
  9379                           ; BSR set to: 0
  9380  0129FE  0012               	return	
  9381  012A00                     l337:
  9382                           
  9383                           ; BSR set to: 0
  9384  012A00  0100               	movlb	0	; () banked
  9385  012A02  51B7               	movf	GetPortProperties@pInput& (0+255),w,b
  9386                           
  9387                           ; Switch size 1, requested type "space"
  9388                           ; Number of cases is 7, Range of values is 0 to 6
  9389                           ; switch strategies available:
  9390                           ; Name         Instructions Cycles
  9391                           ; simple_byte           22    12 (average)
  9392                           ;	Chosen strategy is simple_byte
  9393  012A04  0A00               	xorlw	0	; case 0
  9394  012A06  B4D8               	btfsc	status,2,c
  9395  012A08  D7C3               	goto	l338
  9396  012A0A  0A01               	xorlw	1	; case 1
  9397  012A0C  B4D8               	btfsc	status,2,c
  9398  012A0E  D7C7               	goto	l340
  9399  012A10  0A03               	xorlw	3	; case 2
  9400  012A12  B4D8               	btfsc	status,2,c
  9401  012A14  D7CB               	goto	l341
  9402  012A16  0A01               	xorlw	1	; case 3
  9403  012A18  B4D8               	btfsc	status,2,c
  9404  012A1A  D7CF               	goto	l342
  9405  012A1C  0A07               	xorlw	7	; case 4
  9406  012A1E  B4D8               	btfsc	status,2,c
  9407  012A20  D7D3               	goto	l343
  9408  012A22  0A01               	xorlw	1	; case 5
  9409  012A24  B4D8               	btfsc	status,2,c
  9410  012A26  D7D7               	goto	l344
  9411  012A28  0A03               	xorlw	3	; case 6
  9412  012A2A  B4D8               	btfsc	status,2,c
  9413  012A2C  D7DB               	goto	l345
  9414  012A2E  D7E1               	goto	l346
  9415  012A30                     __end_of_GetPortProperties:
  9416                           	opt stack 0
  9417                           tblptru	equ	0xFF8
  9418                           tblptrh	equ	0xFF7
  9419                           tblptrl	equ	0xFF6
  9420                           tablat	equ	0xFF5
  9421                           prodh	equ	0xFF4
  9422                           prodl	equ	0xFF3
  9423                           postinc0	equ	0xFEE
  9424                           wreg	equ	0xFE8
  9425                           indf1	equ	0xFE7
  9426                           postdec1	equ	0xFE5
  9427                           fsr1h	equ	0xFE2
  9428                           fsr1l	equ	0xFE1
  9429                           indf2	equ	0xFDF
  9430                           postinc2	equ	0xFDE
  9431                           postdec2	equ	0xFDD
  9432                           fsr2h	equ	0xFDA
  9433                           fsr2l	equ	0xFD9
  9434                           status	equ	0xFD8
  9435                           
  9436 ;; *************** function _GetPortPORT *****************
  9437 ;; Defined at:
  9438 ;;		line 44 in file "Library/Port.c"
  9439 ;; Parameters:    Size  Location     Type
  9440 ;;  pInput          1    wreg     enum E6786
  9441 ;; Auto vars:     Size  Location     Type
  9442 ;;  pInput          1    2[BANK0 ] enum E6786
  9443 ;; Return value:  Size  Location     Type
  9444 ;;                  2    0[BANK0 ] PTR struct Byte
  9445 ;; Registers used:
  9446 ;;		wreg, status,2, status,0
  9447 ;; Tracked objects:
  9448 ;;		On entry : 0/0
  9449 ;;		On exit  : 0/0
  9450 ;;		Unchanged: 0/0
  9451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9452 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9453 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9454 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9455 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9456 ;;Total ram usage:        3 bytes
  9457 ;; Hardware stack levels used:    1
  9458 ;; Hardware stack levels required when called:    7
  9459 ;; This function calls:
  9460 ;;		Nothing
  9461 ;; This function is called by:
  9462 ;;		_Port_Init
  9463 ;; This function uses a non-reentrant model
  9464 ;;
  9465                           
  9466                           	psect	text42
  9467  012A30                     __ptext42:
  9468                           	opt stack 0
  9469  012A30                     _GetPortPORT:
  9470                           	opt stack 21
  9471                           
  9472                           ; BSR set to: 0
  9473                           ;incstack = 0
  9474                           ;GetPortPORT@pInput stored from wreg
  9475  012A30  0100               	movlb	0	; () banked
  9476  012A32  6FB7               	movwf	GetPortPORT@pInput& (0+255),b
  9477                           
  9478                           ;Port.c: 46: switch (pInput)
  9479  012A34  D038               	goto	l350
  9480  012A36                     
  9481                           ;Port.c: 49: return (BytePtr)&PORTA;
  9482  012A36  0E80               	movlw	128
  9483  012A38  0100               	movlb	0	; () banked
  9484  012A3A  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9485  012A3C  0E0F               	movlw	15
  9486  012A3E  0100               	movlb	0	; () banked
  9487  012A40  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9488                           
  9489                           ; BSR set to: 0
  9490  012A42  0012               	return	
  9491  012A44                     
  9492                           ; BSR set to: 0
  9493                           ;Port.c: 51: return (BytePtr)&PORTB;
  9494                           
  9495                           ; BSR set to: 0
  9496  012A44  0E81               	movlw	129
  9497  012A46  0100               	movlb	0	; () banked
  9498  012A48  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9499  012A4A  0E0F               	movlw	15
  9500  012A4C  0100               	movlb	0	; () banked
  9501  012A4E  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9502                           
  9503                           ; BSR set to: 0
  9504  012A50  0012               	return	
  9505  012A52                     
  9506                           ; BSR set to: 0
  9507                           ;Port.c: 53: return (BytePtr)&PORTC;
  9508                           
  9509                           ; BSR set to: 0
  9510  012A52  0E82               	movlw	130
  9511  012A54  0100               	movlb	0	; () banked
  9512  012A56  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9513  012A58  0E0F               	movlw	15
  9514  012A5A  0100               	movlb	0	; () banked
  9515  012A5C  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9516                           
  9517                           ; BSR set to: 0
  9518  012A5E  0012               	return	
  9519  012A60                     
  9520                           ; BSR set to: 0
  9521                           ;Port.c: 55: return (BytePtr)&PORTD;
  9522                           
  9523                           ; BSR set to: 0
  9524  012A60  0E83               	movlw	131
  9525  012A62  0100               	movlb	0	; () banked
  9526  012A64  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9527  012A66  0E0F               	movlw	15
  9528  012A68  0100               	movlb	0	; () banked
  9529  012A6A  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9530                           
  9531                           ; BSR set to: 0
  9532  012A6C  0012               	return	
  9533  012A6E                     
  9534                           ; BSR set to: 0
  9535                           ;Port.c: 57: return (BytePtr)&PORTE;
  9536                           
  9537                           ; BSR set to: 0
  9538  012A6E  0E84               	movlw	132
  9539  012A70  0100               	movlb	0	; () banked
  9540  012A72  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9541  012A74  0E0F               	movlw	15
  9542  012A76  0100               	movlb	0	; () banked
  9543  012A78  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9544                           
  9545                           ; BSR set to: 0
  9546  012A7A  0012               	return	
  9547  012A7C                     
  9548                           ; BSR set to: 0
  9549                           ;Port.c: 59: return (BytePtr)&PORTF;
  9550                           
  9551                           ; BSR set to: 0
  9552  012A7C  0E85               	movlw	133
  9553  012A7E  0100               	movlb	0	; () banked
  9554  012A80  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9555  012A82  0E0F               	movlw	15
  9556  012A84  0100               	movlb	0	; () banked
  9557  012A86  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9558                           
  9559                           ; BSR set to: 0
  9560  012A88  0012               	return	
  9561  012A8A                     
  9562                           ; BSR set to: 0
  9563                           ;Port.c: 61: return (BytePtr)&PORTG;
  9564                           
  9565                           ; BSR set to: 0
  9566  012A8A  0E86               	movlw	134
  9567  012A8C  0100               	movlb	0	; () banked
  9568  012A8E  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9569  012A90  0E0F               	movlw	15
  9570  012A92  0100               	movlb	0	; () banked
  9571  012A94  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9572                           
  9573                           ; BSR set to: 0
  9574  012A96  0012               	return	
  9575  012A98                     
  9576                           ; BSR set to: 0
  9577                           ;Port.c: 63: return (void*)0;
  9578                           
  9579                           ; BSR set to: 0
  9580  012A98  0E00               	movlw	0
  9581  012A9A  0100               	movlb	0	; () banked
  9582  012A9C  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9583  012A9E  0E00               	movlw	0
  9584  012AA0  0100               	movlb	0	; () banked
  9585  012AA2  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9586                           
  9587                           ; BSR set to: 0
  9588                           ;Port.c: 64: }
  9589                           
  9590                           ; BSR set to: 0
  9591  012AA4  0012               	return	
  9592  012AA6                     l350:
  9593                           
  9594                           ; BSR set to: 0
  9595  012AA6  0100               	movlb	0	; () banked
  9596  012AA8  51B7               	movf	GetPortPORT@pInput& (0+255),w,b
  9597                           
  9598                           ; Switch size 1, requested type "space"
  9599                           ; Number of cases is 7, Range of values is 0 to 6
  9600                           ; switch strategies available:
  9601                           ; Name         Instructions Cycles
  9602                           ; simple_byte           22    12 (average)
  9603                           ;	Chosen strategy is simple_byte
  9604  012AAA  0A00               	xorlw	0	; case 0
  9605  012AAC  B4D8               	btfsc	status,2,c
  9606  012AAE  D7C3               	goto	l351
  9607  012AB0  0A01               	xorlw	1	; case 1
  9608  012AB2  B4D8               	btfsc	status,2,c
  9609  012AB4  D7C7               	goto	l353
  9610  012AB6  0A03               	xorlw	3	; case 2
  9611  012AB8  B4D8               	btfsc	status,2,c
  9612  012ABA  D7CB               	goto	l354
  9613  012ABC  0A01               	xorlw	1	; case 3
  9614  012ABE  B4D8               	btfsc	status,2,c
  9615  012AC0  D7CF               	goto	l355
  9616  012AC2  0A07               	xorlw	7	; case 4
  9617  012AC4  B4D8               	btfsc	status,2,c
  9618  012AC6  D7D3               	goto	l356
  9619  012AC8  0A01               	xorlw	1	; case 5
  9620  012ACA  B4D8               	btfsc	status,2,c
  9621  012ACC  D7D7               	goto	l357
  9622  012ACE  0A03               	xorlw	3	; case 6
  9623  012AD0  B4D8               	btfsc	status,2,c
  9624  012AD2  D7DB               	goto	l358
  9625  012AD4  D7E1               	goto	l359
  9626  012AD6                     __end_of_GetPortPORT:
  9627                           	opt stack 0
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           indf1	equ	0xFE7
  9637                           postdec1	equ	0xFE5
  9638                           fsr1h	equ	0xFE2
  9639                           fsr1l	equ	0xFE1
  9640                           indf2	equ	0xFDF
  9641                           postinc2	equ	0xFDE
  9642                           postdec2	equ	0xFDD
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function _LED_Init *****************
  9648 ;; Defined at:
  9649 ;;		line 15 in file "Library/LED.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  pLED            1    wreg     enum E6739
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  pLED            1   45[BANK0 ] enum E6739
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  1    wreg      void 
  9656 ;; Registers used:
  9657 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:        1 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:   12
  9670 ;; This function calls:
  9671 ;;		_LED_Set
  9672 ;;		_Port_SetPinType
  9673 ;; This function is called by:
  9674 ;;		_MXK_Init
  9675 ;; This function uses a non-reentrant model
  9676 ;;
  9677                           
  9678                           	psect	text43
  9679  0135CC                     __ptext43:
  9680                           	opt stack 0
  9681  0135CC                     _LED_Init:
  9682                           	opt stack 17
  9683                           
  9684                           ; BSR set to: 0
  9685                           ;incstack = 0
  9686                           ;LED_Init@pLED stored from wreg
  9687  0135CC  0100               	movlb	0	; () banked
  9688  0135CE  6FE2               	movwf	LED_Init@pLED& (0+255),b
  9689                           
  9690                           ;LED.c: 17: switch (pLED)
  9691  0135D0  D01E               	goto	l220
  9692  0135D2                     
  9693                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9694  0135D2  0EA3               	movlw	low _PortC
  9695  0135D4  0100               	movlb	0	; () banked
  9696  0135D6  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9697  0135D8  0E00               	movlw	high _PortC
  9698  0135DA  0100               	movlb	0	; () banked
  9699  0135DC  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9700  0135DE  0E00               	movlw	0
  9701  0135E0  0100               	movlb	0	; () banked
  9702  0135E2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9703  0135E4  0E03               	movlw	3
  9704  0135E6  0100               	movlb	0	; () banked
  9705  0135E8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9706  0135EA  EC31  F088         	call	_Port_SetPinType	;wreg free
  9707                           
  9708                           ;LED.c: 21: break;
  9709  0135EE  D017               	goto	l222
  9710  0135F0                     
  9711                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9712  0135F0  0EA3               	movlw	low _PortC
  9713  0135F2  0100               	movlb	0	; () banked
  9714  0135F4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9715  0135F6  0E00               	movlw	high _PortC
  9716  0135F8  0100               	movlb	0	; () banked
  9717  0135FA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9718  0135FC  0E01               	movlw	1
  9719  0135FE  0100               	movlb	0	; () banked
  9720  013600  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9721  013602  0E03               	movlw	3
  9722  013604  0100               	movlb	0	; () banked
  9723  013606  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9724  013608  EC31  F088         	call	_Port_SetPinType	;wreg free
  9725                           
  9726                           ;LED.c: 25: }
  9727                           
  9728                           ;LED.c: 24: break;
  9729  01360C  D008               	goto	l222
  9730  01360E                     l220:
  9731  01360E  0100               	movlb	0	; () banked
  9732  013610  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9733                           
  9734                           ; Switch size 1, requested type "space"
  9735                           ; Number of cases is 2, Range of values is 0 to 1
  9736                           ; switch strategies available:
  9737                           ; Name         Instructions Cycles
  9738                           ; simple_byte            7     4 (average)
  9739                           ;	Chosen strategy is simple_byte
  9740  013612  0A00               	xorlw	0	; case 0
  9741  013614  B4D8               	btfsc	status,2,c
  9742  013616  D7DD               	goto	l221
  9743  013618  0A01               	xorlw	1	; case 1
  9744  01361A  B4D8               	btfsc	status,2,c
  9745  01361C  D7E9               	goto	l223
  9746  01361E                     l222:
  9747                           
  9748                           ;LED.c: 26: LED_Set(pLED, 0);
  9749                           
  9750                           ; BSR set to: 0
  9751  01361E  0E00               	movlw	0
  9752  013620  0100               	movlb	0	; () banked
  9753  013622  6FC9               	movwf	LED_Set@pValue& (0+255),b
  9754  013624  0100               	movlb	0	; () banked
  9755  013626  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9756  013628  ECF3  F09B         	call	_LED_Set
  9757  01362C  0012               	return		;funcret
  9758  01362E                     __end_of_LED_Init:
  9759                           	opt stack 0
  9760                           tblptru	equ	0xFF8
  9761                           tblptrh	equ	0xFF7
  9762                           tblptrl	equ	0xFF6
  9763                           tablat	equ	0xFF5
  9764                           prodh	equ	0xFF4
  9765                           prodl	equ	0xFF3
  9766                           postinc0	equ	0xFEE
  9767                           wreg	equ	0xFE8
  9768                           indf1	equ	0xFE7
  9769                           postdec1	equ	0xFE5
  9770                           fsr1h	equ	0xFE2
  9771                           fsr1l	equ	0xFE1
  9772                           indf2	equ	0xFDF
  9773                           postinc2	equ	0xFDE
  9774                           postdec2	equ	0xFDD
  9775                           fsr2h	equ	0xFDA
  9776                           fsr2l	equ	0xFD9
  9777                           status	equ	0xFD8
  9778                           
  9779 ;; *************** function _LED_Set *****************
  9780 ;; Defined at:
  9781 ;;		line 33 in file "Library/LED.c"
  9782 ;; Parameters:    Size  Location     Type
  9783 ;;  pLED            1    wreg     enum E6739
  9784 ;;  pValue          1   20[BANK0 ] unsigned char 
  9785 ;; Auto vars:     Size  Location     Type
  9786 ;;  pLED            1   21[BANK0 ] enum E6739
  9787 ;; Return value:  Size  Location     Type
  9788 ;;                  1    wreg      void 
  9789 ;; Registers used:
  9790 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9791 ;; Tracked objects:
  9792 ;;		On entry : 0/0
  9793 ;;		On exit  : 0/0
  9794 ;;		Unchanged: 0/0
  9795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9796 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9797 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9798 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9799 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9800 ;;Total ram usage:        2 bytes
  9801 ;; Hardware stack levels used:    1
  9802 ;; Hardware stack levels required when called:   11
  9803 ;; This function calls:
  9804 ;;		_Port_SetPin
  9805 ;; This function is called by:
  9806 ;;		_LED_Init
  9807 ;;		_SYSTEM_Initialize
  9808 ;; This function uses a non-reentrant model
  9809 ;;
  9810                           
  9811                           	psect	text44
  9812  0137E6                     __ptext44:
  9813                           	opt stack 0
  9814  0137E6                     _LED_Set:
  9815                           	opt stack 17
  9816                           
  9817                           ;incstack = 0
  9818                           ;LED_Set@pLED stored from wreg
  9819  0137E6  0100               	movlb	0	; () banked
  9820  0137E8  6FCA               	movwf	LED_Set@pLED& (0+255),b
  9821                           
  9822                           ;LED.c: 35: switch (pLED)
  9823  0137EA  D01C               	goto	l227
  9824  0137EC                     
  9825                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
  9826  0137EC  0EA3               	movlw	low _PortC
  9827  0137EE  0100               	movlb	0	; () banked
  9828  0137F0  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  9829  0137F2  0E00               	movlw	high _PortC
  9830  0137F4  0100               	movlb	0	; () banked
  9831  0137F6  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9832  0137F8  0E00               	movlw	0
  9833  0137FA  0100               	movlb	0	; () banked
  9834  0137FC  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  9835  0137FE  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
  9836  013802  EC3E  F091         	call	_Port_SetPin	;wreg free
  9837                           
  9838                           ;LED.c: 39: break;
  9839  013806  0012               	return	
  9840  013808                     
  9841                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
  9842  013808  0EA3               	movlw	low _PortC
  9843  01380A  0100               	movlb	0	; () banked
  9844  01380C  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  9845  01380E  0E00               	movlw	high _PortC
  9846  013810  0100               	movlb	0	; () banked
  9847  013812  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  9848  013814  0E01               	movlw	1
  9849  013816  0100               	movlb	0	; () banked
  9850  013818  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  9851  01381A  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
  9852  01381E  EC3E  F091         	call	_Port_SetPin	;wreg free
  9853                           
  9854                           ;LED.c: 43: }
  9855                           
  9856                           ;LED.c: 42: break;
  9857  013822  0012               	return	
  9858  013824                     l227:
  9859  013824  0100               	movlb	0	; () banked
  9860  013826  51CA               	movf	LED_Set@pLED& (0+255),w,b
  9861                           
  9862                           ; Switch size 1, requested type "space"
  9863                           ; Number of cases is 2, Range of values is 0 to 1
  9864                           ; switch strategies available:
  9865                           ; Name         Instructions Cycles
  9866                           ; simple_byte            7     4 (average)
  9867                           ;	Chosen strategy is simple_byte
  9868  013828  0A00               	xorlw	0	; case 0
  9869  01382A  B4D8               	btfsc	status,2,c
  9870  01382C  D7DF               	goto	l228
  9871  01382E  0A01               	xorlw	1	; case 1
  9872  013830  A4D8               	btfss	status,2,c
  9873  013832  0012               	return	
  9874  013834  D7E9               	goto	l230
  9875  013836                     __end_of_LED_Set:
  9876                           	opt stack 0
  9877                           tblptru	equ	0xFF8
  9878                           tblptrh	equ	0xFF7
  9879                           tblptrl	equ	0xFF6
  9880                           tablat	equ	0xFF5
  9881                           prodh	equ	0xFF4
  9882                           prodl	equ	0xFF3
  9883                           postinc0	equ	0xFEE
  9884                           wreg	equ	0xFE8
  9885                           indf1	equ	0xFE7
  9886                           postdec1	equ	0xFE5
  9887                           fsr1h	equ	0xFE2
  9888                           fsr1l	equ	0xFE1
  9889                           indf2	equ	0xFDF
  9890                           postinc2	equ	0xFDE
  9891                           postdec2	equ	0xFDD
  9892                           fsr2h	equ	0xFDA
  9893                           fsr2l	equ	0xFD9
  9894                           status	equ	0xFD8
  9895                           
  9896 ;; *************** function _MXK_Dequeue *****************
  9897 ;; Defined at:
  9898 ;;		line 153 in file "Library/MXK.c"
  9899 ;; Parameters:    Size  Location     Type
  9900 ;;		None
  9901 ;; Auto vars:     Size  Location     Type
  9902 ;;		None
  9903 ;; Return value:  Size  Location     Type
  9904 ;;                  1    wreg      void 
  9905 ;; Registers used:
  9906 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9907 ;; Tracked objects:
  9908 ;;		On entry : 0/0
  9909 ;;		On exit  : 0/0
  9910 ;;		Unchanged: 0/0
  9911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9916 ;;Total ram usage:        0 bytes
  9917 ;; Hardware stack levels used:    1
  9918 ;; Hardware stack levels required when called:   12
  9919 ;; This function calls:
  9920 ;;		Absolute function
  9921 ;;		_Motor_Step
  9922 ;; This function is called by:
  9923 ;;		_main
  9924 ;; This function uses a non-reentrant model
  9925 ;;
  9926                           
  9927                           	psect	text45
  9928  013B3A                     __ptext45:
  9929                           	opt stack 0
  9930  013B3A                     _MXK_Dequeue:
  9931                           	opt stack 18
  9932                           
  9933                           ;MXK.c: 155: if (lQueue)
  9934                           
  9935                           ;incstack = 0
  9936  013B3A  0100               	movlb	0	; () banked
  9937  013B3C  516F               	movf	_lQueue& (0+255),w,b	;volatile
  9938  013B3E  0100               	movlb	0	; () banked
  9939  013B40  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
  9940  013B42  0100               	movlb	0	; () banked
  9941  013B44  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
  9942  013B46  B4D8               	btfsc	status,2,c
  9943  013B48  D00D               	goto	u8999
  9944                           
  9945                           ; BSR set to: 0
  9946                           ;MXK.c: 156: lQueue();
  9947  013B4A  D801               	call	u8998
  9948  013B4C  D00B               	goto	u8999
  9949  013B4E                     u8998:
  9950  013B4E  0005               	push	
  9951  013B50  6EFA               	movwf	pclath,c
  9952  013B52  0100               	movlb	0	; () banked
  9953  013B54  516F               	movf	_lQueue& (0+255),w,b	;volatile
  9954  013B56  6EFD               	movwf	tosl,c
  9955  013B58  5170               	movf	(_lQueue+1)& (0+255),w,b	;volatile
  9956  013B5A  6EFE               	movwf	tosh,c
  9957  013B5C  5171               	movf	(_lQueue+2)& (0+255),w,b	;volatile
  9958  013B5E  6EFF               	movwf	tosu,c
  9959  013B60  50FA               	movf	pclath,w,c
  9960  013B62  0012               	return		;indir
  9961  013B64                     u8999:
  9962                           
  9963                           ;MXK.c: 157: lQueue = 0;
  9964  013B64  0E00               	movlw	0
  9965  013B66  0100               	movlb	0	; () banked
  9966  013B68  6F6F               	movwf	_lQueue& (0+255),b	;volatile
  9967  013B6A  0E00               	movlw	0
  9968  013B6C  0100               	movlb	0	; () banked
  9969  013B6E  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
  9970  013B70  0E00               	movlw	0
  9971  013B72  0100               	movlb	0	; () banked
  9972  013B74  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
  9973                           
  9974                           ; BSR set to: 0
  9975  013B76  0012               	return		;funcret
  9976  013B78                     __end_of_MXK_Dequeue:
  9977                           	opt stack 0
  9978                           tosu	equ	0xFFF
  9979                           tosh	equ	0xFFE
  9980                           tosl	equ	0xFFD
  9981                           pclath	equ	0xFFA
  9982                           tblptru	equ	0xFF8
  9983                           tblptrh	equ	0xFF7
  9984                           tblptrl	equ	0xFF6
  9985                           tablat	equ	0xFF5
  9986                           prodh	equ	0xFF4
  9987                           prodl	equ	0xFF3
  9988                           postinc0	equ	0xFEE
  9989                           wreg	equ	0xFE8
  9990                           indf1	equ	0xFE7
  9991                           postdec1	equ	0xFE5
  9992                           fsr1h	equ	0xFE2
  9993                           fsr1l	equ	0xFE1
  9994                           indf2	equ	0xFDF
  9995                           postinc2	equ	0xFDE
  9996                           postdec2	equ	0xFDD
  9997                           fsr2h	equ	0xFDA
  9998                           fsr2l	equ	0xFD9
  9999                           status	equ	0xFD8
 10000                           
 10001 ;; *************** function _Motor_Step *****************
 10002 ;; Defined at:
 10003 ;;		line 75 in file "Library/Motor.c"
 10004 ;; Parameters:    Size  Location     Type
 10005 ;;		None
 10006 ;; Auto vars:     Size  Location     Type
 10007 ;;		None
 10008 ;; Return value:  Size  Location     Type
 10009 ;;                  1    wreg      void 
 10010 ;; Registers used:
 10011 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10012 ;; Tracked objects:
 10013 ;;		On entry : 0/0
 10014 ;;		On exit  : 0/0
 10015 ;;		Unchanged: 0/0
 10016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10020 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10021 ;;Total ram usage:        2 bytes
 10022 ;; Hardware stack levels used:    1
 10023 ;; Hardware stack levels required when called:   11
 10024 ;; This function calls:
 10025 ;;		_MXK_Queue
 10026 ;;		_MXK_Release
 10027 ;;		_MXK_SwitchTo
 10028 ;;		_Port_SetPin
 10029 ;;		_Timer0_Restart
 10030 ;;		_Timer0_Stop
 10031 ;; This function is called by:
 10032 ;;		_Motor_Init
 10033 ;;		_Timer0_ISR
 10034 ;;		_MXK_Dequeue
 10035 ;; This function uses a non-reentrant model
 10036 ;;
 10037                           
 10038                           	psect	text46
 10039  011DC2                     __ptext46:
 10040                           	opt stack 0
 10041  011DC2                     _Motor_Step:
 10042                           	opt stack 0
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;Skip over the trampoline to the duplicate function for level 2
 10046  011DC2  B251               	btfsc	btemp,1,c
 10047  011DC4  EF74  F08F         	goto	i2_Motor_Step
 10048  011DC8                     _Motor_Step$intlevel0:
 10049                           	opt stack 18
 10050                           
 10051                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10052                           
 10053                           ;incstack = 0
 10054  011DC8  0100               	movlb	0	; () banked
 10055  011DCA  EE20 F004          	lfsr	2,4
 10056  011DCE  517D               	movf	_lMotor& (0+255),w,b
 10057  011DD0  26D9               	addwf	fsr2l,f,c
 10058  011DD2  517E               	movf	(_lMotor+1)& (0+255),w,b
 10059  011DD4  22DA               	addwfc	fsr2h,f,c
 10060  011DD6  50DF               	movf	indf2,w,c
 10061  011DD8  EC3C  F09D         	call	_MXK_SwitchTo
 10062  011DDC  0900               	iorlw	0
 10063  011DDE  B4D8               	btfsc	status,2,c
 10064  011DE0  D07A               	goto	l1627
 10065                           
 10066                           ;Motor.c: 78: {
 10067                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10068  011DE2  C07D  FFD9         	movff	_lMotor,fsr2l
 10069  011DE6  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10070  011DEA  50DE               	movf	postinc2,w,c
 10071  011DEC  10DE               	iorwf	postinc2,w,c
 10072  011DEE  B4D8               	btfsc	status,2,c
 10073  011DF0  D06D               	goto	l1628
 10074                           
 10075                           ;Motor.c: 80: {
 10076                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10077  011DF2  C07D  FFD9         	movff	_lMotor,fsr2l
 10078  011DF6  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10079  011DFA  0E01               	movlw	1
 10080  011DFC  BEDB               	btfsc	plusw2,7,c
 10081  011DFE  D026               	goto	l1629
 10082  011E00  0E01               	movlw	1
 10083  011E02  50DB               	movf	plusw2,w,c
 10084  011E04  E103               	bnz	u7570
 10085  011E06  04DE               	decf	postinc2,w,c
 10086  011E08  A0D8               	btfss	status,0,c
 10087  011E0A  D020               	goto	l1629
 10088  011E0C                     u7570:
 10089                           
 10090                           ;Motor.c: 83: {
 10091                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10092  011E0C  C07D  FFD9         	movff	_lMotor,fsr2l
 10093  011E10  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10094  011E14  28DE               	incf	postinc2,w,c
 10095  011E16  E104               	bnz	u7580
 10096  011E18  0E7F               	movlw	127
 10097  011E1A  18DE               	xorwf	postinc2,w,c
 10098  011E1C  B4D8               	btfsc	status,2,c
 10099  011E1E  D007               	goto	l1630
 10100  011E20                     u7580:
 10101                           
 10102                           ;Motor.c: 85: lMotor->mDelta --;
 10103  011E20  C07D  FFD9         	movff	_lMotor,fsr2l
 10104  011E24  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10105  011E28  06DE               	decf	postinc2,f,c
 10106  011E2A  0E00               	movlw	0
 10107  011E2C  5ADD               	subwfb	postdec2,f,c
 10108  011E2E                     l1630:
 10109                           
 10110                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10111  011E2E  0E8F               	movlw	low _PortE
 10112  011E30  0100               	movlb	0	; () banked
 10113  011E32  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10114  011E34  0E00               	movlw	high _PortE
 10115  011E36  0100               	movlb	0	; () banked
 10116  011E38  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10117  011E3A  0E00               	movlw	0
 10118  011E3C  0100               	movlb	0	; () banked
 10119  011E3E  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10120  011E40  0E01               	movlw	1
 10121  011E42  0100               	movlb	0	; () banked
 10122  011E44  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10123  011E46  EC3E  F091         	call	_Port_SetPin	;wreg free
 10124                           
 10125                           ;Motor.c: 88: }
 10126  011E4A  D01F               	goto	l1631
 10127  011E4C                     l1629:
 10128                           
 10129                           ;Motor.c: 89: else
 10130                           ;Motor.c: 90: {
 10131                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10132  011E4C  C07D  FFD9         	movff	_lMotor,fsr2l
 10133  011E50  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10134  011E54  04DE               	decf	postinc2,w,c
 10135  011E56  E104               	bnz	u7590
 10136  011E58  0E80               	movlw	128
 10137  011E5A  18DE               	xorwf	postinc2,w,c
 10138  011E5C  B4D8               	btfsc	status,2,c
 10139  011E5E  D007               	goto	l1632
 10140  011E60                     u7590:
 10141                           
 10142                           ;Motor.c: 92: lMotor->mDelta ++;
 10143  011E60  C07D  FFD9         	movff	_lMotor,fsr2l
 10144  011E64  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10145  011E68  2ADE               	incf	postinc2,f,c
 10146  011E6A  0E00               	movlw	0
 10147  011E6C  22DD               	addwfc	postdec2,f,c
 10148  011E6E                     l1632:
 10149                           
 10150                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10151  011E6E  0E8F               	movlw	low _PortE
 10152  011E70  0100               	movlb	0	; () banked
 10153  011E72  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10154  011E74  0E00               	movlw	high _PortE
 10155  011E76  0100               	movlb	0	; () banked
 10156  011E78  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10157  011E7A  0E00               	movlw	0
 10158  011E7C  0100               	movlb	0	; () banked
 10159  011E7E  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10160  011E80  0E00               	movlw	0
 10161  011E82  0100               	movlb	0	; () banked
 10162  011E84  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10163  011E86  EC3E  F091         	call	_Port_SetPin	;wreg free
 10164  011E8A                     l1631:
 10165                           
 10166                           ;Motor.c: 95: }
 10167                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10168  011E8A  0E8F               	movlw	low _PortE
 10169  011E8C  0100               	movlb	0	; () banked
 10170  011E8E  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10171  011E90  0E00               	movlw	high _PortE
 10172  011E92  0100               	movlb	0	; () banked
 10173  011E94  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10174  011E96  0E01               	movlw	1
 10175  011E98  0100               	movlb	0	; () banked
 10176  011E9A  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10177  011E9C  0E01               	movlw	1
 10178  011E9E  0100               	movlb	0	; () banked
 10179  011EA0  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10180  011EA2  EC3E  F091         	call	_Port_SetPin	;wreg free
 10181                           
 10182                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10183  011EA6  0E8F               	movlw	low _PortE
 10184  011EA8  0100               	movlb	0	; () banked
 10185  011EAA  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10186  011EAC  0E00               	movlw	high _PortE
 10187  011EAE  0100               	movlb	0	; () banked
 10188  011EB0  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10189  011EB2  0E01               	movlw	1
 10190  011EB4  0100               	movlb	0	; () banked
 10191  011EB6  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10192  011EB8  0E00               	movlw	0
 10193  011EBA  0100               	movlb	0	; () banked
 10194  011EBC  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10195  011EBE  EC3E  F091         	call	_Port_SetPin	;wreg free
 10196                           
 10197                           ;Motor.c: 101: MXK_Release();
 10198  011EC2  ECA3  F09F         	call	_MXK_Release	;wreg free
 10199                           
 10200                           ;Motor.c: 102: Timer0_Restart();
 10201  011EC6  EC0D  F0A0         	call	_Timer0_Restart	;wreg free
 10202                           
 10203                           ;Motor.c: 103: return;
 10204  011ECA  0012               	return	
 10205  011ECC                     l1628:
 10206                           
 10207                           ;Motor.c: 104: }
 10208                           ;Motor.c: 105: MXK_Release();
 10209  011ECC  ECA3  F09F         	call	_MXK_Release	;wreg free
 10210                           
 10211                           ;Motor.c: 106: Timer0_Stop();
 10212  011ED0  EC2E  F0A0         	call	_Timer0_Stop	;wreg free
 10213                           
 10214                           ;Motor.c: 107: return;
 10215  011ED4  0012               	return	
 10216  011ED6                     l1627:
 10217                           
 10218                           ;Motor.c: 108: }
 10219                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10220  011ED6  C072  F0B5         	movff	_lStepFunction,MXK_Queue@pCallback
 10221  011EDA  C073  F0B6         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10222  011EDE  C074  F0B7         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10223  011EE2  ECFF  F09F         	call	_MXK_Queue	;wreg free
 10224  011EE6  0012               	return		;funcret
 10225  011EE8                     __end_of_Motor_Step:
 10226                           	opt stack 0
 10227                           tosu	equ	0xFFF
 10228                           tosh	equ	0xFFE
 10229                           tosl	equ	0xFFD
 10230                           pclath	equ	0xFFA
 10231                           tblptru	equ	0xFF8
 10232                           tblptrh	equ	0xFF7
 10233                           tblptrl	equ	0xFF6
 10234                           tablat	equ	0xFF5
 10235                           prodh	equ	0xFF4
 10236                           prodl	equ	0xFF3
 10237                           postinc0	equ	0xFEE
 10238                           wreg	equ	0xFE8
 10239                           indf1	equ	0xFE7
 10240                           postdec1	equ	0xFE5
 10241                           fsr1h	equ	0xFE2
 10242                           fsr1l	equ	0xFE1
 10243                           indf2	equ	0xFDF
 10244                           postinc2	equ	0xFDE
 10245                           postdec2	equ	0xFDD
 10246                           plusw2	equ	0xFDB
 10247                           fsr2h	equ	0xFDA
 10248                           fsr2l	equ	0xFD9
 10249                           status	equ	0xFD8
 10250                           
 10251 ;; *************** function _Timer0_Stop *****************
 10252 ;; Defined at:
 10253 ;;		line 89 in file "Library/Timer0.c"
 10254 ;; Parameters:    Size  Location     Type
 10255 ;;		None
 10256 ;; Auto vars:     Size  Location     Type
 10257 ;;		None
 10258 ;; Return value:  Size  Location     Type
 10259 ;;                  1    wreg      void 
 10260 ;; Registers used:
 10261 ;;		None
 10262 ;; Tracked objects:
 10263 ;;		On entry : 0/0
 10264 ;;		On exit  : 0/0
 10265 ;;		Unchanged: 0/0
 10266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10267 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10270 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10271 ;;Total ram usage:        0 bytes
 10272 ;; Hardware stack levels used:    1
 10273 ;; Hardware stack levels required when called:    7
 10274 ;; This function calls:
 10275 ;;		Nothing
 10276 ;; This function is called by:
 10277 ;;		_Motor_Step
 10278 ;; This function uses a non-reentrant model
 10279 ;;
 10280                           
 10281                           	psect	text47
 10282  01405C                     __ptext47:
 10283                           	opt stack 0
 10284  01405C                     _Timer0_Stop:
 10285                           	opt stack 21
 10286                           
 10287                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10288                           
 10289                           ;incstack = 0
 10290  01405C  9AF2               	bcf	intcon,5,c	;volatile
 10291                           
 10292                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10293  01405E  94F2               	bcf	intcon,2,c	;volatile
 10294  014060  0012               	return		;funcret
 10295  014062                     __end_of_Timer0_Stop:
 10296                           	opt stack 0
 10297                           tosu	equ	0xFFF
 10298                           tosh	equ	0xFFE
 10299                           tosl	equ	0xFFD
 10300                           pclath	equ	0xFFA
 10301                           tblptru	equ	0xFF8
 10302                           tblptrh	equ	0xFF7
 10303                           tblptrl	equ	0xFF6
 10304                           tablat	equ	0xFF5
 10305                           prodh	equ	0xFF4
 10306                           prodl	equ	0xFF3
 10307                           intcon	equ	0xFF2
 10308                           postinc0	equ	0xFEE
 10309                           wreg	equ	0xFE8
 10310                           indf1	equ	0xFE7
 10311                           postdec1	equ	0xFE5
 10312                           fsr1h	equ	0xFE2
 10313                           fsr1l	equ	0xFE1
 10314                           indf2	equ	0xFDF
 10315                           postinc2	equ	0xFDE
 10316                           postdec2	equ	0xFDD
 10317                           plusw2	equ	0xFDB
 10318                           fsr2h	equ	0xFDA
 10319                           fsr2l	equ	0xFD9
 10320                           status	equ	0xFD8
 10321                           
 10322 ;; *************** function _Timer0_Restart *****************
 10323 ;; Defined at:
 10324 ;;		line 83 in file "Library/Timer0.c"
 10325 ;; Parameters:    Size  Location     Type
 10326 ;;		None
 10327 ;; Auto vars:     Size  Location     Type
 10328 ;;		None
 10329 ;; Return value:  Size  Location     Type
 10330 ;;                  1    wreg      void 
 10331 ;; Registers used:
 10332 ;;		None
 10333 ;; Tracked objects:
 10334 ;;		On entry : 0/0
 10335 ;;		On exit  : 0/0
 10336 ;;		Unchanged: 0/0
 10337 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10338 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10339 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10340 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10341 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10342 ;;Total ram usage:        0 bytes
 10343 ;; Hardware stack levels used:    1
 10344 ;; Hardware stack levels required when called:    7
 10345 ;; This function calls:
 10346 ;;		Nothing
 10347 ;; This function is called by:
 10348 ;;		_Motor_Step
 10349 ;; This function uses a non-reentrant model
 10350 ;;
 10351                           
 10352                           	psect	text48
 10353  01401A                     __ptext48:
 10354                           	opt stack 0
 10355  01401A                     _Timer0_Restart:
 10356                           	opt stack 21
 10357                           
 10358                           ;Timer0.c: 85: TMR0 = COUNTER;
 10359                           
 10360                           ;incstack = 0
 10361  01401A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10362  01401E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10363                           
 10364                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10365  014022  8AF2               	bsf	intcon,5,c	;volatile
 10366  014024  0012               	return		;funcret
 10367  014026                     __end_of_Timer0_Restart:
 10368                           	opt stack 0
 10369                           tosu	equ	0xFFF
 10370                           tosh	equ	0xFFE
 10371                           tosl	equ	0xFFD
 10372                           pclath	equ	0xFFA
 10373                           tblptru	equ	0xFF8
 10374                           tblptrh	equ	0xFF7
 10375                           tblptrl	equ	0xFF6
 10376                           tablat	equ	0xFF5
 10377                           prodh	equ	0xFF4
 10378                           prodl	equ	0xFF3
 10379                           intcon	equ	0xFF2
 10380                           postinc0	equ	0xFEE
 10381                           wreg	equ	0xFE8
 10382                           indf1	equ	0xFE7
 10383                           postdec1	equ	0xFE5
 10384                           fsr1h	equ	0xFE2
 10385                           fsr1l	equ	0xFE1
 10386                           indf2	equ	0xFDF
 10387                           postinc2	equ	0xFDE
 10388                           postdec2	equ	0xFDD
 10389                           plusw2	equ	0xFDB
 10390                           fsr2h	equ	0xFDA
 10391                           fsr2l	equ	0xFD9
 10392                           status	equ	0xFD8
 10393                           
 10394 ;; *************** function _MXK_SwitchTo *****************
 10395 ;; Defined at:
 10396 ;;		line 105 in file "Library/MXK.c"
 10397 ;; Parameters:    Size  Location     Type
 10398 ;;  pModule         1    wreg     enum E6927
 10399 ;; Auto vars:     Size  Location     Type
 10400 ;;  pModule         1    7[BANK0 ] enum E6927
 10401 ;;  CUR             1    6[BANK0 ] unsigned char 
 10402 ;; Return value:  Size  Location     Type
 10403 ;;                  1    wreg      unsigned char 
 10404 ;; Registers used:
 10405 ;;		wreg, status,2, status,0, cstack
 10406 ;; Tracked objects:
 10407 ;;		On entry : 0/0
 10408 ;;		On exit  : 0/0
 10409 ;;		Unchanged: 0/0
 10410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10412 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10415 ;;Total ram usage:        2 bytes
 10416 ;; Hardware stack levels used:    1
 10417 ;; Hardware stack levels required when called:    8
 10418 ;; This function calls:
 10419 ;;		_delay_us
 10420 ;; This function is called by:
 10421 ;;		_Motor_Step
 10422 ;;		_main
 10423 ;; This function uses a non-reentrant model
 10424 ;;
 10425                           
 10426                           	psect	text49
 10427  013A78                     __ptext49:
 10428                           	opt stack 0
 10429  013A78                     _MXK_SwitchTo:
 10430                           	opt stack 22
 10431                           
 10432                           ;incstack = 0
 10433                           ;MXK_SwitchTo@pModule stored from wreg
 10434  013A78  0100               	movlb	0	; () banked
 10435  013A7A  6FBC               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10436                           
 10437                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10438  013A7C  5086               	movf	3974,w,c	;volatile
 10439  013A7E  0B0F               	andlw	15
 10440  013A80  0100               	movlb	0	; () banked
 10441  013A82  6FBB               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10442                           
 10443                           ; BSR set to: 0
 10444                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10445  013A84  504B               	movf	_Bus_State,w,c
 10446  013A86  A4D8               	btfss	status,2,c
 10447  013A88  D002               	goto	l1730
 10448                           
 10449                           ; BSR set to: 0
 10450                           ;MXK.c: 110: return 0;
 10451  013A8A  0E00               	movlw	0
 10452                           
 10453                           ; BSR set to: 0
 10454  013A8C  0012               	return	
 10455  013A8E                     l1730:
 10456                           
 10457                           ; BSR set to: 0
 10458                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10459                           
 10460                           ; BSR set to: 0
 10461  013A8E  0E00               	movlw	0
 10462  013A90  6E4B               	movwf	_Bus_State,c
 10463                           
 10464                           ; BSR set to: 0
 10465                           ;MXK.c: 114: if (CUR != pModule)
 10466  013A92  0100               	movlb	0	; () banked
 10467  013A94  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10468  013A96  0100               	movlb	0	; () banked
 10469  013A98  19BB               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10470  013A9A  B4D8               	btfsc	status,2,c
 10471  013A9C  D00C               	goto	l1732
 10472                           
 10473                           ; BSR set to: 0
 10474                           ;MXK.c: 115: {
 10475                           ;MXK.c: 116: PORTG &= ~(0xF);
 10476  013A9E  0EF0               	movlw	240
 10477  013AA0  1686               	andwf	3974,f,c	;volatile
 10478                           
 10479                           ;MXK.c: 117: PORTG |= pModule;
 10480  013AA2  0100               	movlb	0	; () banked
 10481  013AA4  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10482  013AA6  1286               	iorwf	3974,f,c	;volatile
 10483                           
 10484                           ; BSR set to: 0
 10485                           ;MXK.c: 120: delay_us(10);
 10486  013AA8  0E00               	movlw	0
 10487  013AAA  0100               	movlb	0	; () banked
 10488  013AAC  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10489  013AAE  0E0A               	movlw	10
 10490  013AB0  6FB5               	movwf	delay_us@us& (0+255),b
 10491  013AB2  ECCA  F09B         	call	_delay_us	;wreg free
 10492  013AB6                     l1732:
 10493                           
 10494                           ;MXK.c: 121: }
 10495                           ;MXK.c: 122: return 1;
 10496  013AB6  0E01               	movlw	1
 10497  013AB8  0012               	return	
 10498  013ABA                     __end_of_MXK_SwitchTo:
 10499                           	opt stack 0
 10500                           tosu	equ	0xFFF
 10501                           tosh	equ	0xFFE
 10502                           tosl	equ	0xFFD
 10503                           pclath	equ	0xFFA
 10504                           tblptru	equ	0xFF8
 10505                           tblptrh	equ	0xFF7
 10506                           tblptrl	equ	0xFF6
 10507                           tablat	equ	0xFF5
 10508                           prodh	equ	0xFF4
 10509                           prodl	equ	0xFF3
 10510                           intcon	equ	0xFF2
 10511                           postinc0	equ	0xFEE
 10512                           wreg	equ	0xFE8
 10513                           indf1	equ	0xFE7
 10514                           postdec1	equ	0xFE5
 10515                           fsr1h	equ	0xFE2
 10516                           fsr1l	equ	0xFE1
 10517                           indf2	equ	0xFDF
 10518                           postinc2	equ	0xFDE
 10519                           postdec2	equ	0xFDD
 10520                           plusw2	equ	0xFDB
 10521                           fsr2h	equ	0xFDA
 10522                           fsr2l	equ	0xFD9
 10523                           status	equ	0xFD8
 10524                           
 10525 ;; *************** function _MXK_Release *****************
 10526 ;; Defined at:
 10527 ;;		line 130 in file "Library/MXK.c"
 10528 ;; Parameters:    Size  Location     Type
 10529 ;;		None
 10530 ;; Auto vars:     Size  Location     Type
 10531 ;;		None
 10532 ;; Return value:  Size  Location     Type
 10533 ;;                  1    wreg      unsigned char 
 10534 ;; Registers used:
 10535 ;;		wreg, status,2, status,0
 10536 ;; Tracked objects:
 10537 ;;		On entry : 0/0
 10538 ;;		On exit  : 0/0
 10539 ;;		Unchanged: 0/0
 10540 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10541 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10542 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10543 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10544 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10545 ;;Total ram usage:        0 bytes
 10546 ;; Hardware stack levels used:    1
 10547 ;; Hardware stack levels required when called:    7
 10548 ;; This function calls:
 10549 ;;		Nothing
 10550 ;; This function is called by:
 10551 ;;		_Motor_Step
 10552 ;;		_main
 10553 ;; This function uses a non-reentrant model
 10554 ;;
 10555                           
 10556                           	psect	text50
 10557  013F46                     __ptext50:
 10558                           	opt stack 0
 10559  013F46                     _MXK_Release:
 10560                           	opt stack 23
 10561                           
 10562                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10563                           
 10564                           ;incstack = 0
 10565  013F46  0E01               	movlw	1
 10566  013F48  6E4B               	movwf	_Bus_State,c
 10567                           
 10568                           ;MXK.c: 134: if (lQueue != 0)
 10569  013F4A  0100               	movlb	0	; () banked
 10570  013F4C  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10571  013F4E  0100               	movlb	0	; () banked
 10572  013F50  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10573  013F52  0100               	movlb	0	; () banked
 10574  013F54  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10575  013F56  B4D8               	btfsc	status,2,c
 10576  013F58  D002               	goto	l1735
 10577                           
 10578                           ; BSR set to: 0
 10579                           ;MXK.c: 135: return 1;
 10580  013F5A  0E01               	movlw	1
 10581                           
 10582                           ; BSR set to: 0
 10583  013F5C  0012               	return	
 10584  013F5E                     l1735:
 10585                           
 10586                           ; BSR set to: 0
 10587                           ;MXK.c: 137: return 0;
 10588                           
 10589                           ; BSR set to: 0
 10590  013F5E  0E00               	movlw	0
 10591  013F60  0012               	return	
 10592  013F62                     __end_of_MXK_Release:
 10593                           	opt stack 0
 10594                           tosu	equ	0xFFF
 10595                           tosh	equ	0xFFE
 10596                           tosl	equ	0xFFD
 10597                           pclath	equ	0xFFA
 10598                           tblptru	equ	0xFF8
 10599                           tblptrh	equ	0xFF7
 10600                           tblptrl	equ	0xFF6
 10601                           tablat	equ	0xFF5
 10602                           prodh	equ	0xFF4
 10603                           prodl	equ	0xFF3
 10604                           intcon	equ	0xFF2
 10605                           postinc0	equ	0xFEE
 10606                           wreg	equ	0xFE8
 10607                           indf1	equ	0xFE7
 10608                           postdec1	equ	0xFE5
 10609                           fsr1h	equ	0xFE2
 10610                           fsr1l	equ	0xFE1
 10611                           indf2	equ	0xFDF
 10612                           postinc2	equ	0xFDE
 10613                           postdec2	equ	0xFDD
 10614                           plusw2	equ	0xFDB
 10615                           fsr2h	equ	0xFDA
 10616                           fsr2l	equ	0xFD9
 10617                           status	equ	0xFD8
 10618                           
 10619 ;; *************** function _MXK_Queue *****************
 10620 ;; Defined at:
 10621 ;;		line 144 in file "Library/MXK.c"
 10622 ;; Parameters:    Size  Location     Type
 10623 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10624 ;;		 -> Absolute function(1), Motor_Step(1), 
 10625 ;; Auto vars:     Size  Location     Type
 10626 ;;		None
 10627 ;; Return value:  Size  Location     Type
 10628 ;;                  1    wreg      void 
 10629 ;; Registers used:
 10630 ;;		wreg, status,2, status,0
 10631 ;; Tracked objects:
 10632 ;;		On entry : 0/0
 10633 ;;		On exit  : 0/0
 10634 ;;		Unchanged: 0/0
 10635 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10636 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10639 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10640 ;;Total ram usage:        3 bytes
 10641 ;; Hardware stack levels used:    1
 10642 ;; Hardware stack levels required when called:    7
 10643 ;; This function calls:
 10644 ;;		Nothing
 10645 ;; This function is called by:
 10646 ;;		_Motor_Step
 10647 ;; This function uses a non-reentrant model
 10648 ;;
 10649                           
 10650                           	psect	text51
 10651  013FFE                     __ptext51:
 10652                           	opt stack 0
 10653  013FFE                     _MXK_Queue:
 10654                           	opt stack 21
 10655                           
 10656                           ;MXK.c: 146: lQueue = pCallback;
 10657                           
 10658                           ; BSR set to: 0
 10659                           ;incstack = 0
 10660  013FFE  C0B5  F06F         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10661  014002  C0B6  F070         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10662  014006  C0B7  F071         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10663  01400A  0012               	return		;funcret
 10664  01400C                     __end_of_MXK_Queue:
 10665                           	opt stack 0
 10666                           tosu	equ	0xFFF
 10667                           tosh	equ	0xFFE
 10668                           tosl	equ	0xFFD
 10669                           pclath	equ	0xFFA
 10670                           tblptru	equ	0xFF8
 10671                           tblptrh	equ	0xFF7
 10672                           tblptrl	equ	0xFF6
 10673                           tablat	equ	0xFF5
 10674                           prodh	equ	0xFF4
 10675                           prodl	equ	0xFF3
 10676                           intcon	equ	0xFF2
 10677                           postinc0	equ	0xFEE
 10678                           wreg	equ	0xFE8
 10679                           indf1	equ	0xFE7
 10680                           postdec1	equ	0xFE5
 10681                           fsr1h	equ	0xFE2
 10682                           fsr1l	equ	0xFE1
 10683                           indf2	equ	0xFDF
 10684                           postinc2	equ	0xFDE
 10685                           postdec2	equ	0xFDD
 10686                           plusw2	equ	0xFDB
 10687                           fsr2h	equ	0xFDA
 10688                           fsr2l	equ	0xFD9
 10689                           status	equ	0xFD8
 10690                           
 10691 ;; *************** function _MXK_BlockSwitchTo *****************
 10692 ;; Defined at:
 10693 ;;		line 82 in file "Library/MXK.c"
 10694 ;; Parameters:    Size  Location     Type
 10695 ;;  pModule         1    wreg     enum E6927
 10696 ;; Auto vars:     Size  Location     Type
 10697 ;;  pModule         1    7[BANK0 ] enum E6927
 10698 ;;  CUR             1    6[BANK0 ] unsigned char 
 10699 ;; Return value:  Size  Location     Type
 10700 ;;                  1    wreg      unsigned char 
 10701 ;; Registers used:
 10702 ;;		wreg, status,2, status,0, cstack
 10703 ;; Tracked objects:
 10704 ;;		On entry : 0/0
 10705 ;;		On exit  : 0/0
 10706 ;;		Unchanged: 0/0
 10707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10709 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10711 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10712 ;;Total ram usage:        2 bytes
 10713 ;; Hardware stack levels used:    1
 10714 ;; Hardware stack levels required when called:    8
 10715 ;; This function calls:
 10716 ;;		_delay_us
 10717 ;; This function is called by:
 10718 ;;		_main
 10719 ;; This function uses a non-reentrant model
 10720 ;;
 10721                           
 10722                           	psect	text52
 10723  013B78                     __ptext52:
 10724                           	opt stack 0
 10725  013B78                     _MXK_BlockSwitchTo:
 10726                           	opt stack 22
 10727                           
 10728                           ;incstack = 0
 10729                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10730  013B78  0100               	movlb	0	; () banked
 10731  013B7A  6FBC               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10732                           
 10733                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10734  013B7C  5086               	movf	3974,w,c	;volatile
 10735  013B7E  0B0F               	andlw	15
 10736  013B80  0100               	movlb	0	; () banked
 10737  013B82  6FBB               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10738  013B84                     
 10739                           ; BSR set to: 0
 10740                           
 10741                           ; BSR set to: 0
 10742  013B84  504B               	movf	_Bus_State,w,c
 10743  013B86  B4D8               	btfsc	status,2,c
 10744  013B88  D7FD               	goto	l1724
 10745                           
 10746                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10747  013B8A  0E00               	movlw	0
 10748  013B8C  6E4B               	movwf	_Bus_State,c
 10749                           
 10750                           ;MXK.c: 90: if (CUR != pModule)
 10751  013B8E  0100               	movlb	0	; () banked
 10752  013B90  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10753  013B92  0100               	movlb	0	; () banked
 10754  013B94  19BB               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10755  013B96  B4D8               	btfsc	status,2,c
 10756  013B98  D00C               	goto	l1726
 10757                           
 10758                           ; BSR set to: 0
 10759                           ;MXK.c: 91: {
 10760                           ;MXK.c: 92: PORTG &= ~(0xF);
 10761  013B9A  0EF0               	movlw	240
 10762  013B9C  1686               	andwf	3974,f,c	;volatile
 10763                           
 10764                           ;MXK.c: 93: PORTG |= pModule;
 10765  013B9E  0100               	movlb	0	; () banked
 10766  013BA0  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10767  013BA2  1286               	iorwf	3974,f,c	;volatile
 10768                           
 10769                           ; BSR set to: 0
 10770                           ;MXK.c: 96: delay_us(10);
 10771  013BA4  0E00               	movlw	0
 10772  013BA6  0100               	movlb	0	; () banked
 10773  013BA8  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10774  013BAA  0E0A               	movlw	10
 10775  013BAC  6FB5               	movwf	delay_us@us& (0+255),b
 10776  013BAE  ECCA  F09B         	call	_delay_us	;wreg free
 10777  013BB2                     l1726:
 10778                           
 10779                           ;MXK.c: 97: }
 10780                           ;MXK.c: 98: return 1;
 10781  013BB2  0E01               	movlw	1
 10782  013BB4  0012               	return	
 10783  013BB6                     __end_of_MXK_BlockSwitchTo:
 10784                           	opt stack 0
 10785                           tosu	equ	0xFFF
 10786                           tosh	equ	0xFFE
 10787                           tosl	equ	0xFFD
 10788                           pclath	equ	0xFFA
 10789                           tblptru	equ	0xFF8
 10790                           tblptrh	equ	0xFF7
 10791                           tblptrl	equ	0xFF6
 10792                           tablat	equ	0xFF5
 10793                           prodh	equ	0xFF4
 10794                           prodl	equ	0xFF3
 10795                           intcon	equ	0xFF2
 10796                           postinc0	equ	0xFEE
 10797                           wreg	equ	0xFE8
 10798                           indf1	equ	0xFE7
 10799                           postdec1	equ	0xFE5
 10800                           fsr1h	equ	0xFE2
 10801                           fsr1l	equ	0xFE1
 10802                           indf2	equ	0xFDF
 10803                           postinc2	equ	0xFDE
 10804                           postdec2	equ	0xFDD
 10805                           plusw2	equ	0xFDB
 10806                           fsr2h	equ	0xFDA
 10807                           fsr2l	equ	0xFD9
 10808                           status	equ	0xFD8
 10809                           
 10810 ;; *************** function _delay_us *****************
 10811 ;; Defined at:
 10812 ;;		line 255 in file "Library/Types.c"
 10813 ;; Parameters:    Size  Location     Type
 10814 ;;  us              2    0[BANK0 ] unsigned short 
 10815 ;; Auto vars:     Size  Location     Type
 10816 ;;  u               4    2[BANK0 ] unsigned long 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  1    wreg      void 
 10819 ;; Registers used:
 10820 ;;		wreg, status,2, status,0
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10826 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;Total ram usage:        6 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    7
 10833 ;; This function calls:
 10834 ;;		Nothing
 10835 ;; This function is called by:
 10836 ;;		_MXK_BlockSwitchTo
 10837 ;;		_MXK_SwitchTo
 10838 ;; This function uses a non-reentrant model
 10839 ;;
 10840                           
 10841                           	psect	text53
 10842  013794                     __ptext53:
 10843                           	opt stack 0
 10844  013794                     _delay_us:
 10845                           	opt stack 22
 10846                           
 10847                           ;Types.c: 256: unsigned long u;
 10848                           ;Types.c: 257: while (us--) {
 10849                           
 10850                           ;incstack = 0
 10851  013794  D01C               	goto	u6900
 10852  013796                     l10623:
 10853                           
 10854                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 10855  013796  0E00               	movlw	0
 10856  013798  0100               	movlb	0	; () banked
 10857  01379A  6FB7               	movwf	delay_us@u& (0+255),b
 10858  01379C  0E00               	movlw	0
 10859  01379E  6FB8               	movwf	(delay_us@u+1)& (0+255),b
 10860  0137A0  0E00               	movlw	0
 10861  0137A2  6FB9               	movwf	(delay_us@u+2)& (0+255),b
 10862  0137A4  0E00               	movlw	0
 10863  0137A6  6FBA               	movwf	(delay_us@u+3)& (0+255),b
 10864  0137A8                     l10625:
 10865                           
 10866                           ; BSR set to: 0
 10867  0137A8  0100               	movlb	0	; () banked
 10868  0137AA  51B7               	movf	delay_us@u& (0+255),w,b
 10869  0137AC  0100               	movlb	0	; () banked
 10870  0137AE  11B8               	iorwf	(delay_us@u+1)& (0+255),w,b
 10871  0137B0  0100               	movlb	0	; () banked
 10872  0137B2  11B9               	iorwf	(delay_us@u+2)& (0+255),w,b
 10873  0137B4  0100               	movlb	0	; () banked
 10874  0137B6  11BA               	iorwf	(delay_us@u+3)& (0+255),w,b
 10875  0137B8  A4D8               	btfss	status,2,c
 10876  0137BA  D009               	goto	u6900
 10877                           
 10878                           ; BSR set to: 0
 10879                           
 10880                           ; BSR set to: 0
 10881  0137BC  F000               	nop		; ;# 
 10882  0137BE  0E01               	movlw	1
 10883  0137C0  0100               	movlb	0	; () banked
 10884  0137C2  27B7               	addwf	delay_us@u& (0+255),f,b
 10885  0137C4  0E00               	movlw	0
 10886  0137C6  23B8               	addwfc	(delay_us@u+1)& (0+255),f,b
 10887  0137C8  23B9               	addwfc	(delay_us@u+2)& (0+255),f,b
 10888  0137CA  23BA               	addwfc	(delay_us@u+3)& (0+255),f,b
 10889  0137CC  D7ED               	goto	l10625
 10890  0137CE                     u6900:
 10891                           
 10892                           ; BSR set to: 0
 10893                           
 10894                           ; BSR set to: 0
 10895  0137CE  0100               	movlb	0	; () banked
 10896  0137D0  07B5               	decf	delay_us@us& (0+255),f,b
 10897  0137D2  A0D8               	btfss	status,0,c
 10898  0137D4  07B6               	decf	(delay_us@us+1)& (0+255),f,b
 10899  0137D6  0100               	movlb	0	; () banked
 10900  0137D8  29B5               	incf	delay_us@us& (0+255),w,b
 10901  0137DA  E1DD               	bnz	l10623
 10902  0137DC  0100               	movlb	0	; () banked
 10903  0137DE  29B6               	incf	(delay_us@us+1)& (0+255),w,b
 10904  0137E0  B4D8               	btfsc	status,2,c
 10905  0137E2  0012               	return	
 10906  0137E4  D7D8               	goto	l832
 10907  0137E6                     __end_of_delay_us:
 10908                           	opt stack 0
 10909                           tosu	equ	0xFFF
 10910                           tosh	equ	0xFFE
 10911                           tosl	equ	0xFFD
 10912                           pclath	equ	0xFFA
 10913                           tblptru	equ	0xFF8
 10914                           tblptrh	equ	0xFF7
 10915                           tblptrl	equ	0xFF6
 10916                           tablat	equ	0xFF5
 10917                           prodh	equ	0xFF4
 10918                           prodl	equ	0xFF3
 10919                           intcon	equ	0xFF2
 10920                           postinc0	equ	0xFEE
 10921                           wreg	equ	0xFE8
 10922                           indf1	equ	0xFE7
 10923                           postdec1	equ	0xFE5
 10924                           fsr1h	equ	0xFE2
 10925                           fsr1l	equ	0xFE1
 10926                           indf2	equ	0xFDF
 10927                           postinc2	equ	0xFDE
 10928                           postdec2	equ	0xFDD
 10929                           plusw2	equ	0xFDB
 10930                           fsr2h	equ	0xFDA
 10931                           fsr2l	equ	0xFD9
 10932                           status	equ	0xFD8
 10933                           
 10934 ;; *************** function _LCD_Init *****************
 10935 ;; Defined at:
 10936 ;;		line 172 in file "Library/LCD.c"
 10937 ;; Parameters:    Size  Location     Type
 10938 ;;		None
 10939 ;; Auto vars:     Size  Location     Type
 10940 ;;  i               2   55[BANK0 ] unsigned short 
 10941 ;; Return value:  Size  Location     Type
 10942 ;;                  1    wreg      void 
 10943 ;; Registers used:
 10944 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10945 ;; Tracked objects:
 10946 ;;		On entry : 0/0
 10947 ;;		On exit  : 0/0
 10948 ;;		Unchanged: 0/0
 10949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10950 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10953 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10954 ;;Total ram usage:        4 bytes
 10955 ;; Hardware stack levels used:    1
 10956 ;; Hardware stack levels required when called:   15
 10957 ;; This function calls:
 10958 ;;		_Configure_GPIOs
 10959 ;;		_LCD_Fill
 10960 ;;		_LCD_Write
 10961 ;;		_Set_Rotation
 10962 ;;		_delay_ms
 10963 ;; This function is called by:
 10964 ;;		_main
 10965 ;; This function uses a non-reentrant model
 10966 ;;
 10967                           
 10968                           	psect	text54
 10969  011858                     __ptext54:
 10970                           	opt stack 0
 10971  011858                     _LCD_Init:
 10972                           	opt stack 15
 10973                           
 10974                           ;LCD.c: 174: UINT16 i;
 10975                           ;LCD.c: 175: Configure_GPIOs();
 10976                           
 10977                           ; BSR set to: 0
 10978                           ;incstack = 0
 10979  011858  ECDE  F098         	call	_Configure_GPIOs	;wreg free
 10980                           
 10981                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 10982  01185C  0E00               	movlw	0
 10983  01185E  0100               	movlb	0	; () banked
 10984  011860  6FED               	movwf	(LCD_Init@i+1)& (0+255),b
 10985  011862  0E00               	movlw	0
 10986  011864  6FEC               	movwf	LCD_Init@i& (0+255),b
 10987                           
 10988                           ; BSR set to: 0
 10989  011866  0100               	movlb	0	; () banked
 10990  011868  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 10991  01186A  E106               	bnz	u7720
 10992  01186C  0E59               	movlw	89
 10993  01186E  0100               	movlb	0	; () banked
 10994  011870  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 10995  011872  B0D8               	btfsc	status,0,c
 10996  011874  D08B               	goto	u7760
 10997  011876  D001               	goto	l85
 10998  011878                     u7720:
 10999                           
 11000                           ; BSR set to: 0
 11001  011878  D089               	goto	u7760
 11002  01187A                     l85:
 11003                           
 11004                           ; BSR set to: 0
 11005                           ;LCD.c: 178: {
 11006                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11007                           
 11008                           ; BSR set to: 0
 11009  01187A  90D8               	bcf	status,0,c
 11010  01187C  0100               	movlb	0	; () banked
 11011  01187E  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11012  011880  6EF6               	movwf	tblptrl,c
 11013  011882  0100               	movlb	0	; () banked
 11014  011884  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11015  011886  6EF7               	movwf	tblptrh,c
 11016  011888  0EF3               	movlw	low _InitList
 11017  01188A  26F6               	addwf	tblptrl,f,c
 11018  01188C  0EFC               	movlw	high _InitList
 11019  01188E  22F7               	addwfc	tblptrh,f,c
 11020  011890                     	if	1	;There are 3 active tblptr bytes
 11021  011890  6AF8               	clrf	tblptru,c
 11022  011892  0E00               	movlw	low (__mediumconst shr (0+16))
 11023  011894  22F8               	addwfc	tblptru,f,c
 11024  011896                     	endif
 11025  011896  0009               	tblrd		*+
 11026  011898  0E80               	movlw	128
 11027  01189A  18F5               	xorwf	tablat,w,c
 11028  01189C  0009               	tblrd		*+
 11029  01189E  10F5               	iorwf	tablat,w,c
 11030  0118A0  A4D8               	btfss	status,2,c
 11031  0118A2  D022               	goto	l87
 11032                           
 11033                           ; BSR set to: 0
 11034  0118A4  0100               	movlb	0	; () banked
 11035  0118A6  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11036  0118A8  E11F               	bnz	l11645
 11037  0118AA  0E58               	movlw	88
 11038  0118AC  0100               	movlb	0	; () banked
 11039  0118AE  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 11040  0118B0  B0D8               	btfsc	status,0,c
 11041  0118B2  D01A               	goto	l87
 11042                           
 11043                           ; BSR set to: 0
 11044                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11045  0118B4  0100               	movlb	0	; () banked
 11046  0118B6  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11047  0118B8  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11048  0118BA  90D8               	bcf	status,0,c
 11049  0118BC  0100               	movlb	0	; () banked
 11050  0118BE  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11051  0118C0  6EF6               	movwf	tblptrl,c
 11052  0118C2  0100               	movlb	0	; () banked
 11053  0118C4  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11054  0118C6  6EF7               	movwf	tblptrh,c
 11055  0118C8  0EF3               	movlw	low _InitList
 11056  0118CA  26F6               	addwf	tblptrl,f,c
 11057  0118CC  0EFC               	movlw	high _InitList
 11058  0118CE  22F7               	addwfc	tblptrh,f,c
 11059  0118D0                     	if	1	;There are 3 active tblptr bytes
 11060  0118D0  6AF8               	clrf	tblptru,c
 11061  0118D2  0E00               	movlw	low (__mediumconst shr (0+16))
 11062  0118D4  22F8               	addwfc	tblptru,f,c
 11063  0118D6                     	endif
 11064  0118D6  0009               	tblrd		*+
 11065  0118D8  CFF5 F0B5          	movff	tablat,delay_ms@ms
 11066  0118DC  000A               	tblrd		*-
 11067  0118DE  CFF5 F0B6          	movff	tablat,delay_ms@ms+1
 11068  0118E2  EC81  F099         	call	_delay_ms	;wreg free
 11069  0118E6  D04B               	goto	l90
 11070  0118E8                     l87:
 11071  0118E8                     l11645:
 11072                           
 11073                           ;LCD.c: 181: else
 11074                           ;LCD.c: 182: {
 11075                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11076  0118E8  90D8               	bcf	status,0,c
 11077  0118EA  0100               	movlb	0	; () banked
 11078  0118EC  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11079  0118EE  6EF6               	movwf	tblptrl,c
 11080  0118F0  0100               	movlb	0	; () banked
 11081  0118F2  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11082  0118F4  6EF7               	movwf	tblptrh,c
 11083  0118F6  0EF3               	movlw	low _InitList
 11084  0118F8  26F6               	addwf	tblptrl,f,c
 11085  0118FA  0EFC               	movlw	high _InitList
 11086  0118FC  22F7               	addwfc	tblptrh,f,c
 11087  0118FE                     	if	1	;There are 3 active tblptr bytes
 11088  0118FE  6AF8               	clrf	tblptru,c
 11089  011900  0E00               	movlw	low (__mediumconst shr (0+16))
 11090  011902  22F8               	addwfc	tblptru,f,c
 11091  011904                     	endif
 11092  011904  0009               	tblrd		*+
 11093  011906  0E00               	movlw	0
 11094  011908  5EF5               	subwf	tablat,f,c
 11095  01190A  0009               	tblrd		*+
 11096  01190C  0E01               	movlw	1
 11097  01190E  5AF5               	subwfb	tablat,f,c
 11098  011910  A0D8               	btfss	status,0,c
 11099  011912  D020               	goto	l89
 11100                           
 11101                           ; BSR set to: 0
 11102  011914  0E00               	movlw	0
 11103  011916  0100               	movlb	0	; () banked
 11104  011918  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11105  01191A  90D8               	bcf	status,0,c
 11106  01191C  0100               	movlb	0	; () banked
 11107  01191E  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11108  011920  6EF6               	movwf	tblptrl,c
 11109  011922  0100               	movlb	0	; () banked
 11110  011924  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11111  011926  6EF7               	movwf	tblptrh,c
 11112  011928  0EF3               	movlw	low _InitList
 11113  01192A  26F6               	addwf	tblptrl,f,c
 11114  01192C  0EFC               	movlw	high _InitList
 11115  01192E  22F7               	addwfc	tblptrh,f,c
 11116  011930                     	if	1	;There are 3 active tblptr bytes
 11117  011930  6AF8               	clrf	tblptru,c
 11118  011932  0E00               	movlw	low (__mediumconst shr (0+16))
 11119  011934  22F8               	addwfc	tblptru,f,c
 11120  011936                     	endif
 11121  011936  0009               	tblrd		*+
 11122  011938  CFF5 F0EA          	movff	tablat,??_LCD_Init
 11123  01193C  0009               	tblrd		*+
 11124  01193E  CFF5 F0EB          	movff	tablat,??_LCD_Init+1
 11125  011942  C0EB  F0EA         	movff	??_LCD_Init+1,??_LCD_Init
 11126  011946  0100               	movlb	0	; () banked
 11127  011948  6BEB               	clrf	(??_LCD_Init+1)& (0+255),b
 11128  01194A  0100               	movlb	0	; () banked
 11129  01194C  51EA               	movf	??_LCD_Init& (0+255),w,b
 11130  01194E  ECFC  F09E         	call	_LCD_Write
 11131  011952  D015               	goto	l90
 11132  011954                     l89:
 11133                           
 11134                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11135  011954  0E01               	movlw	1
 11136  011956  0100               	movlb	0	; () banked
 11137  011958  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11138  01195A  90D8               	bcf	status,0,c
 11139  01195C  0100               	movlb	0	; () banked
 11140  01195E  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11141  011960  6EF6               	movwf	tblptrl,c
 11142  011962  0100               	movlb	0	; () banked
 11143  011964  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11144  011966  6EF7               	movwf	tblptrh,c
 11145  011968  0EF3               	movlw	low _InitList
 11146  01196A  26F6               	addwf	tblptrl,f,c
 11147  01196C  0EFC               	movlw	high _InitList
 11148  01196E  22F7               	addwfc	tblptrh,f,c
 11149  011970                     	if	1	;There are 3 active tblptr bytes
 11150  011970  6AF8               	clrf	tblptru,c
 11151  011972  0E00               	movlw	low (__mediumconst shr (0+16))
 11152  011974  22F8               	addwfc	tblptru,f,c
 11153  011976                     	endif
 11154  011976  0008               	tblrd		*
 11155  011978  50F5               	movf	tablat,w,c
 11156  01197A  ECFC  F09E         	call	_LCD_Write
 11157  01197E                     l90:
 11158  01197E  0100               	movlb	0	; () banked
 11159  011980  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11160  011982  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11161                           
 11162                           ; BSR set to: 0
 11163  011984  0100               	movlb	0	; () banked
 11164  011986  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11165  011988  E101               	bnz	l11655
 11166  01198A  D770               	goto	L9
 11167  01198C                     u7760:
 11168  01198C                     l11655:
 11169                           
 11170                           ; BSR set to: 0
 11171                           ;LCD.c: 185: }
 11172                           ;LCD.c: 186: }
 11173                           ;LCD.c: 187: delay_ms(100);
 11174  01198C  0E00               	movlw	0
 11175  01198E  0100               	movlb	0	; () banked
 11176  011990  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11177  011992  0E64               	movlw	100
 11178  011994  6FB5               	movwf	delay_ms@ms& (0+255),b
 11179  011996  EC81  F099         	call	_delay_ms	;wreg free
 11180                           
 11181                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11182  01199A  0E00               	movlw	0
 11183  01199C  0100               	movlb	0	; () banked
 11184  01199E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11185  0119A0  0E29               	movlw	41
 11186  0119A2  ECFC  F09E         	call	_LCD_Write
 11187                           
 11188                           ;LCD.c: 189: Set_Rotation(1);
 11189  0119A6  0E01               	movlw	1
 11190  0119A8  EC5C  F096         	call	_Set_Rotation
 11191                           
 11192                           ;LCD.c: 191: delay_ms(100);
 11193  0119AC  0E00               	movlw	0
 11194  0119AE  0100               	movlb	0	; () banked
 11195  0119B0  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11196  0119B2  0E64               	movlw	100
 11197  0119B4  6FB5               	movwf	delay_ms@ms& (0+255),b
 11198  0119B6  EC81  F099         	call	_delay_ms	;wreg free
 11199                           
 11200                           ;LCD.c: 192: LCD_Fill(0x0000);
 11201  0119BA  0E00               	movlw	0
 11202  0119BC  0100               	movlb	0	; () banked
 11203  0119BE  6FBF               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11204  0119C0  0E00               	movlw	0
 11205  0119C2  6FBE               	movwf	LCD_Fill@pColour& (0+255),b
 11206  0119C4  EC9E  F09B         	call	_LCD_Fill	;wreg free
 11207  0119C8  0012               	return		;funcret
 11208  0119CA                     __end_of_LCD_Init:
 11209                           	opt stack 0
 11210                           tosu	equ	0xFFF
 11211                           tosh	equ	0xFFE
 11212                           tosl	equ	0xFFD
 11213                           pclath	equ	0xFFA
 11214                           tblptru	equ	0xFF8
 11215                           tblptrh	equ	0xFF7
 11216                           tblptrl	equ	0xFF6
 11217                           tablat	equ	0xFF5
 11218                           prodh	equ	0xFF4
 11219                           prodl	equ	0xFF3
 11220                           intcon	equ	0xFF2
 11221                           postinc0	equ	0xFEE
 11222                           wreg	equ	0xFE8
 11223                           indf1	equ	0xFE7
 11224                           postdec1	equ	0xFE5
 11225                           fsr1h	equ	0xFE2
 11226                           fsr1l	equ	0xFE1
 11227                           indf2	equ	0xFDF
 11228                           postinc2	equ	0xFDE
 11229                           postdec2	equ	0xFDD
 11230                           plusw2	equ	0xFDB
 11231                           fsr2h	equ	0xFDA
 11232                           fsr2l	equ	0xFD9
 11233                           status	equ	0xFD8
 11234                           
 11235 ;; *************** function _Set_Rotation *****************
 11236 ;; Defined at:
 11237 ;;		line 248 in file "Library/LCD.c"
 11238 ;; Parameters:    Size  Location     Type
 11239 ;;  m               1    wreg     unsigned char 
 11240 ;; Auto vars:     Size  Location     Type
 11241 ;;  m               1    5[BANK0 ] unsigned char 
 11242 ;;  rotation        1    6[BANK0 ] unsigned char 
 11243 ;; Return value:  Size  Location     Type
 11244 ;;                  1    wreg      void 
 11245 ;; Registers used:
 11246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11247 ;; Tracked objects:
 11248 ;;		On entry : 0/0
 11249 ;;		On exit  : 0/0
 11250 ;;		Unchanged: 0/0
 11251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11253 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11255 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11256 ;;Total ram usage:        2 bytes
 11257 ;; Hardware stack levels used:    1
 11258 ;; Hardware stack levels required when called:    9
 11259 ;; This function calls:
 11260 ;;		_LCD_Write
 11261 ;; This function is called by:
 11262 ;;		_LCD_Init
 11263 ;; This function uses a non-reentrant model
 11264 ;;
 11265                           
 11266                           	psect	text55
 11267  012CB8                     __ptext55:
 11268                           	opt stack 0
 11269  012CB8                     _Set_Rotation:
 11270                           	opt stack 20
 11271                           
 11272                           ;incstack = 0
 11273                           ;Set_Rotation@m stored from wreg
 11274  012CB8  0100               	movlb	0	; () banked
 11275  012CBA  6FBA               	movwf	Set_Rotation@m& (0+255),b
 11276                           
 11277                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11278  012CBC  0E00               	movlw	0
 11279  012CBE  0100               	movlb	0	; () banked
 11280  012CC0  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11281                           
 11282                           ; BSR set to: 0
 11283                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11284  012CC2  0E00               	movlw	0
 11285  012CC4  0100               	movlb	0	; () banked
 11286  012CC6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11287  012CC8  0E36               	movlw	54
 11288  012CCA  ECFC  F09E         	call	_LCD_Write
 11289                           
 11290                           ;LCD.c: 253: rotation = (m % 4);
 11291  012CCE  0100               	movlb	0	; () banked
 11292  012CD0  51BA               	movf	Set_Rotation@m& (0+255),w,b
 11293  012CD2  0B03               	andlw	3
 11294  012CD4  0100               	movlb	0	; () banked
 11295  012CD6  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11296                           
 11297                           ;LCD.c: 255: switch(rotation)
 11298  012CD8  D02C               	goto	l117
 11299  012CDA                     
 11300                           ; BSR set to: 0
 11301                           ;LCD.c: 258: {
 11302                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11303                           
 11304                           ; BSR set to: 0
 11305  012CDA  0E01               	movlw	1
 11306  012CDC  0100               	movlb	0	; () banked
 11307  012CDE  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11308  012CE0  0EC8               	movlw	200
 11309  012CE2  ECFC  F09E         	call	_LCD_Write
 11310                           
 11311                           ;LCD.c: 260: w = 128;
 11312  012CE6  0E80               	movlw	128
 11313  012CE8  6E50               	movwf	_w,c
 11314                           
 11315                           ;LCD.c: 261: l = 128;
 11316  012CEA  0E80               	movlw	128
 11317  012CEC  6E4F               	movwf	_l,c
 11318                           
 11319                           ;LCD.c: 262: break;
 11320  012CEE  0012               	return	
 11321  012CF0                     
 11322                           ;LCD.c: 265: {
 11323                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11324  012CF0  0E01               	movlw	1
 11325  012CF2  0100               	movlb	0	; () banked
 11326  012CF4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11327  012CF6  0EA8               	movlw	168
 11328  012CF8  ECFC  F09E         	call	_LCD_Write
 11329                           
 11330                           ;LCD.c: 267: w = 128;
 11331  012CFC  0E80               	movlw	128
 11332  012CFE  6E50               	movwf	_w,c
 11333                           
 11334                           ;LCD.c: 268: l = 128;
 11335  012D00  0E80               	movlw	128
 11336  012D02  6E4F               	movwf	_l,c
 11337                           
 11338                           ;LCD.c: 269: break;
 11339  012D04  0012               	return	
 11340  012D06                     
 11341                           ;LCD.c: 272: {
 11342                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11343  012D06  0E01               	movlw	1
 11344  012D08  0100               	movlb	0	; () banked
 11345  012D0A  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11346  012D0C  0E08               	movlw	8
 11347  012D0E  ECFC  F09E         	call	_LCD_Write
 11348                           
 11349                           ;LCD.c: 274: w = 128;
 11350  012D12  0E80               	movlw	128
 11351  012D14  6E50               	movwf	_w,c
 11352                           
 11353                           ;LCD.c: 275: l = 128;
 11354  012D16  0E80               	movlw	128
 11355  012D18  6E4F               	movwf	_l,c
 11356                           
 11357                           ;LCD.c: 276: break;
 11358  012D1A  0012               	return	
 11359  012D1C                     
 11360                           ;LCD.c: 279: {
 11361                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11362  012D1C  0E01               	movlw	1
 11363  012D1E  0100               	movlb	0	; () banked
 11364  012D20  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11365  012D22  0E68               	movlw	104
 11366  012D24  ECFC  F09E         	call	_LCD_Write
 11367                           
 11368                           ;LCD.c: 281: w = 128;
 11369  012D28  0E80               	movlw	128
 11370  012D2A  6E50               	movwf	_w,c
 11371                           
 11372                           ;LCD.c: 282: l = 128;
 11373  012D2C  0E80               	movlw	128
 11374  012D2E  6E4F               	movwf	_l,c
 11375                           
 11376                           ;LCD.c: 284: }
 11377                           ;LCD.c: 285: }
 11378                           
 11379                           ;LCD.c: 283: break;
 11380  012D30  0012               	return	
 11381  012D32                     l117:
 11382  012D32  0100               	movlb	0	; () banked
 11383  012D34  51BB               	movf	Set_Rotation@rotation& (0+255),w,b
 11384                           
 11385                           ; Switch size 1, requested type "space"
 11386                           ; Number of cases is 4, Range of values is 0 to 3
 11387                           ; switch strategies available:
 11388                           ; Name         Instructions Cycles
 11389                           ; simple_byte           13     7 (average)
 11390                           ;	Chosen strategy is simple_byte
 11391  012D36  0A00               	xorlw	0	; case 0
 11392  012D38  B4D8               	btfsc	status,2,c
 11393  012D3A  D7CF               	goto	l118
 11394  012D3C  0A01               	xorlw	1	; case 1
 11395  012D3E  B4D8               	btfsc	status,2,c
 11396  012D40  D7D7               	goto	l120
 11397  012D42  0A03               	xorlw	3	; case 2
 11398  012D44  B4D8               	btfsc	status,2,c
 11399  012D46  D7DF               	goto	l121
 11400  012D48  0A01               	xorlw	1	; case 3
 11401  012D4A  A4D8               	btfss	status,2,c
 11402  012D4C  0012               	return	
 11403  012D4E  D7E6               	goto	l122
 11404  012D50                     __end_of_Set_Rotation:
 11405                           	opt stack 0
 11406                           tosu	equ	0xFFF
 11407                           tosh	equ	0xFFE
 11408                           tosl	equ	0xFFD
 11409                           pclath	equ	0xFFA
 11410                           tblptru	equ	0xFF8
 11411                           tblptrh	equ	0xFF7
 11412                           tblptrl	equ	0xFF6
 11413                           tablat	equ	0xFF5
 11414                           prodh	equ	0xFF4
 11415                           prodl	equ	0xFF3
 11416                           intcon	equ	0xFF2
 11417                           postinc0	equ	0xFEE
 11418                           wreg	equ	0xFE8
 11419                           indf1	equ	0xFE7
 11420                           postdec1	equ	0xFE5
 11421                           fsr1h	equ	0xFE2
 11422                           fsr1l	equ	0xFE1
 11423                           indf2	equ	0xFDF
 11424                           postinc2	equ	0xFDE
 11425                           postdec2	equ	0xFDD
 11426                           plusw2	equ	0xFDB
 11427                           fsr2h	equ	0xFDA
 11428                           fsr2l	equ	0xFD9
 11429                           status	equ	0xFD8
 11430                           
 11431 ;; *************** function _LCD_Fill *****************
 11432 ;; Defined at:
 11433 ;;		line 287 in file "Library/LCD.c"
 11434 ;; Parameters:    Size  Location     Type
 11435 ;;  pColour         2    9[BANK0 ] unsigned short 
 11436 ;; Auto vars:     Size  Location     Type
 11437 ;;  j               1   12[BANK0 ] unsigned char 
 11438 ;;  i               1   11[BANK0 ] unsigned char 
 11439 ;; Return value:  Size  Location     Type
 11440 ;;                  1    wreg      void 
 11441 ;; Registers used:
 11442 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11443 ;; Tracked objects:
 11444 ;;		On entry : 0/0
 11445 ;;		On exit  : 0/0
 11446 ;;		Unchanged: 0/0
 11447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11449 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11451 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11452 ;;Total ram usage:        4 bytes
 11453 ;; Hardware stack levels used:    1
 11454 ;; Hardware stack levels required when called:   10
 11455 ;; This function calls:
 11456 ;;		_LCD_Word_Write
 11457 ;;		_Set_Addr_Window
 11458 ;; This function is called by:
 11459 ;;		_LCD_Init
 11460 ;; This function uses a non-reentrant model
 11461 ;;
 11462                           
 11463                           	psect	text56
 11464  01373C                     __ptext56:
 11465                           	opt stack 0
 11466  01373C                     _LCD_Fill:
 11467                           	opt stack 19
 11468                           
 11469                           ;LCD.c: 296: UINT8 i = 0x00;
 11470                           
 11471                           ;incstack = 0
 11472  01373C  0E00               	movlw	0
 11473  01373E  0100               	movlb	0	; () banked
 11474  013740  6FC0               	movwf	LCD_Fill@i& (0+255),b
 11475                           
 11476                           ;LCD.c: 297: UINT8 j = 0x00;
 11477  013742  0E00               	movlw	0
 11478  013744  0100               	movlb	0	; () banked
 11479  013746  6FC1               	movwf	LCD_Fill@j& (0+255),b
 11480                           
 11481                           ; BSR set to: 0
 11482                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11483  013748  0E00               	movlw	0
 11484  01374A  0100               	movlb	0	; () banked
 11485  01374C  6FBA               	movwf	Set_Addr_Window@ys& (0+255),b
 11486  01374E  0450               	decf	_w,w,c
 11487  013750  0100               	movlb	0	; () banked
 11488  013752  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 11489  013754  044F               	decf	_l,w,c
 11490  013756  0100               	movlb	0	; () banked
 11491  013758  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 11492  01375A  0E00               	movlw	0
 11493  01375C  ECC8  F093         	call	_Set_Addr_Window
 11494                           
 11495                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11496  013760  C04F  F0C1         	movff	_l,LCD_Fill@j
 11497  013764                     l11337:
 11498  013764  0100               	movlb	0	; () banked
 11499  013766  51C1               	movf	LCD_Fill@j& (0+255),w,b
 11500  013768  0100               	movlb	0	; () banked
 11501  01376A  B4D8               	btfsc	status,2,c
 11502  01376C  0012               	return	
 11503                           
 11504                           ; BSR set to: 0
 11505                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11506                           
 11507                           ; BSR set to: 0
 11508  01376E  C050  F0C0         	movff	_w,LCD_Fill@i
 11509  013772                     l11341:
 11510                           
 11511                           ; BSR set to: 0
 11512  013772  0100               	movlb	0	; () banked
 11513  013774  51C0               	movf	LCD_Fill@i& (0+255),w,b
 11514  013776  0100               	movlb	0	; () banked
 11515  013778  B4D8               	btfsc	status,2,c
 11516  01377A  D009               	goto	u7410
 11517                           
 11518                           ; BSR set to: 0
 11519                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11520                           
 11521                           ; BSR set to: 0
 11522                           
 11523                           ; BSR set to: 0
 11524  01377C  C0BE  F0BA         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11525  013780  C0BF  F0BB         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11526  013784  EC86  F09F         	call	_LCD_Word_Write	;wreg free
 11527  013788  0100               	movlb	0	; () banked
 11528  01378A  07C0               	decf	LCD_Fill@i& (0+255),f,b
 11529  01378C  D7F2               	goto	l11341
 11530  01378E                     u7410:
 11531                           
 11532                           ; BSR set to: 0
 11533                           
 11534                           ; BSR set to: 0
 11535  01378E  0100               	movlb	0	; () banked
 11536  013790  07C1               	decf	LCD_Fill@j& (0+255),f,b
 11537  013792  D7E8               	goto	l11337
 11538  013794                     __end_of_LCD_Fill:
 11539                           	opt stack 0
 11540                           tosu	equ	0xFFF
 11541                           tosh	equ	0xFFE
 11542                           tosl	equ	0xFFD
 11543                           pclath	equ	0xFFA
 11544                           tblptru	equ	0xFF8
 11545                           tblptrh	equ	0xFF7
 11546                           tblptrl	equ	0xFF6
 11547                           tablat	equ	0xFF5
 11548                           prodh	equ	0xFF4
 11549                           prodl	equ	0xFF3
 11550                           intcon	equ	0xFF2
 11551                           postinc0	equ	0xFEE
 11552                           wreg	equ	0xFE8
 11553                           indf1	equ	0xFE7
 11554                           postdec1	equ	0xFE5
 11555                           fsr1h	equ	0xFE2
 11556                           fsr1l	equ	0xFE1
 11557                           indf2	equ	0xFDF
 11558                           postinc2	equ	0xFDE
 11559                           postdec2	equ	0xFDD
 11560                           plusw2	equ	0xFDB
 11561                           fsr2h	equ	0xFDA
 11562                           fsr2l	equ	0xFD9
 11563                           status	equ	0xFD8
 11564                           
 11565 ;; *************** function _Configure_GPIOs *****************
 11566 ;; Defined at:
 11567 ;;		line 46 in file "Library/LCD.c"
 11568 ;; Parameters:    Size  Location     Type
 11569 ;;		None
 11570 ;; Auto vars:     Size  Location     Type
 11571 ;;		None
 11572 ;; Return value:  Size  Location     Type
 11573 ;;                  1    wreg      void 
 11574 ;; Registers used:
 11575 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11576 ;; Tracked objects:
 11577 ;;		On entry : 0/0
 11578 ;;		On exit  : 0/0
 11579 ;;		Unchanged: 0/0
 11580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11581 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11582 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11583 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11584 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11585 ;;Total ram usage:        0 bytes
 11586 ;; Hardware stack levels used:    1
 11587 ;; Hardware stack levels required when called:   14
 11588 ;; This function calls:
 11589 ;;		_LCD_Reset
 11590 ;;		_Port_SetPinType
 11591 ;;		_SPI_Init
 11592 ;;		_SPI_MaxSpeed
 11593 ;; This function is called by:
 11594 ;;		_LCD_Init
 11595 ;; This function uses a non-reentrant model
 11596 ;;
 11597                           
 11598                           	psect	text57
 11599  0131BC                     __ptext57:
 11600                           	opt stack 0
 11601  0131BC                     _Configure_GPIOs:
 11602                           	opt stack 15
 11603                           
 11604                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 11605                           
 11606                           ; BSR set to: 0
 11607                           ;incstack = 0
 11608  0131BC  0EB0               	movlw	low _PortF
 11609  0131BE  0100               	movlb	0	; () banked
 11610  0131C0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11611  0131C2  0E03               	movlw	high _PortF
 11612  0131C4  0100               	movlb	0	; () banked
 11613  0131C6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11614  0131C8  0E07               	movlw	7
 11615  0131CA  0100               	movlb	0	; () banked
 11616  0131CC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11617  0131CE  0E03               	movlw	3
 11618  0131D0  0100               	movlb	0	; () banked
 11619  0131D2  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11620  0131D4  EC31  F088         	call	_Port_SetPinType	;wreg free
 11621                           
 11622                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 11623  0131D8  0EB0               	movlw	low _PortF
 11624  0131DA  0100               	movlb	0	; () banked
 11625  0131DC  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11626  0131DE  0E03               	movlw	high _PortF
 11627  0131E0  0100               	movlb	0	; () banked
 11628  0131E2  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11629  0131E4  0E06               	movlw	6
 11630  0131E6  0100               	movlb	0	; () banked
 11631  0131E8  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11632  0131EA  0E03               	movlw	3
 11633  0131EC  0100               	movlb	0	; () banked
 11634  0131EE  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11635  0131F0  EC31  F088         	call	_Port_SetPinType	;wreg free
 11636                           
 11637                           ;LCD.c: 55: LCD_Reset();
 11638  0131F4  EC1B  F09C         	call	_LCD_Reset	;wreg free
 11639                           
 11640                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 11641  0131F8  0EC0               	movlw	192
 11642  0131FA  0100               	movlb	0	; () banked
 11643  0131FC  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 11644  0131FE  0EC6               	movlw	198
 11645  013200  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11646  013202  0E2D               	movlw	45
 11647  013204  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11648  013206  0E00               	movlw	0
 11649  013208  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11650  01320A  0E01               	movlw	1
 11651  01320C  0100               	movlb	0	; () banked
 11652  01320E  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 11653  013210  0E01               	movlw	1
 11654  013212  0100               	movlb	0	; () banked
 11655  013214  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 11656  013216  EC00  F080         	call	_SPI_Init	;wreg free
 11657                           
 11658                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 11659  01321A  0E73               	movlw	low _SPI2
 11660  01321C  0100               	movlb	0	; () banked
 11661  01321E  6FC4               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 11662  013220  0E03               	movlw	high _SPI2
 11663  013222  0100               	movlb	0	; () banked
 11664  013224  6FC5               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 11665  013226  EC30  F098         	call	_SPI_MaxSpeed	;wreg free
 11666  01322A  0012               	return		;funcret
 11667  01322C                     __end_of_Configure_GPIOs:
 11668                           	opt stack 0
 11669                           tosu	equ	0xFFF
 11670                           tosh	equ	0xFFE
 11671                           tosl	equ	0xFFD
 11672                           pclath	equ	0xFFA
 11673                           tblptru	equ	0xFF8
 11674                           tblptrh	equ	0xFF7
 11675                           tblptrl	equ	0xFF6
 11676                           tablat	equ	0xFF5
 11677                           prodh	equ	0xFF4
 11678                           prodl	equ	0xFF3
 11679                           intcon	equ	0xFF2
 11680                           postinc0	equ	0xFEE
 11681                           wreg	equ	0xFE8
 11682                           indf1	equ	0xFE7
 11683                           postdec1	equ	0xFE5
 11684                           fsr1h	equ	0xFE2
 11685                           fsr1l	equ	0xFE1
 11686                           indf2	equ	0xFDF
 11687                           postinc2	equ	0xFDE
 11688                           postdec2	equ	0xFDD
 11689                           plusw2	equ	0xFDB
 11690                           fsr2h	equ	0xFDA
 11691                           fsr2l	equ	0xFD9
 11692                           status	equ	0xFD8
 11693                           
 11694 ;; *************** function _SPI_MaxSpeed *****************
 11695 ;; Defined at:
 11696 ;;		line 201 in file "Library/SPI.c"
 11697 ;; Parameters:    Size  Location     Type
 11698 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11699 ;;		 -> SPI2(11), 
 11700 ;; Auto vars:     Size  Location     Type
 11701 ;;		None
 11702 ;; Return value:  Size  Location     Type
 11703 ;;                  1    wreg      void 
 11704 ;; Registers used:
 11705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11706 ;; Tracked objects:
 11707 ;;		On entry : 0/0
 11708 ;;		On exit  : 0/0
 11709 ;;		Unchanged: 0/0
 11710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11711 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11714 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11715 ;;Total ram usage:        2 bytes
 11716 ;; Hardware stack levels used:    1
 11717 ;; Hardware stack levels required when called:    9
 11718 ;; This function calls:
 11719 ;;		_Byte_SetBit
 11720 ;;		_Byte_SetQuad
 11721 ;; This function is called by:
 11722 ;;		_Configure_GPIOs
 11723 ;; This function uses a non-reentrant model
 11724 ;;
 11725                           
 11726                           	psect	text58
 11727  013060                     __ptext58:
 11728                           	opt stack 0
 11729  013060                     _SPI_MaxSpeed:
 11730                           	opt stack 19
 11731                           
 11732                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11733                           
 11734                           ;incstack = 0
 11735  013060  0100               	movlb	0	; () banked
 11736  013062  EE20 F006          	lfsr	2,6
 11737  013066  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11738  013068  26D9               	addwf	fsr2l,f,c
 11739  01306A  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11740  01306C  22DA               	addwfc	fsr2h,f,c
 11741  01306E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11742  013072  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 11743  013076  0E05               	movlw	5
 11744  013078  0100               	movlb	0	; () banked
 11745  01307A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 11746  01307C  0E00               	movlw	0
 11747  01307E  0100               	movlb	0	; () banked
 11748  013080  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 11749  013082  EC83  F09A         	call	_Byte_SetBit	;wreg free
 11750                           
 11751                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 11752  013086  0100               	movlb	0	; () banked
 11753  013088  EE20 F006          	lfsr	2,6
 11754  01308C  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11755  01308E  26D9               	addwf	fsr2l,f,c
 11756  013090  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11757  013092  22DA               	addwfc	fsr2h,f,c
 11758  013094  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 11759  013098  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 11760  01309C  0E00               	movlw	0
 11761  01309E  0100               	movlb	0	; () banked
 11762  0130A0  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11763  0130A2  0E00               	movlw	0
 11764  0130A4  0100               	movlb	0	; () banked
 11765  0130A6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 11766  0130A8  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 11767                           
 11768                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11769  0130AC  0100               	movlb	0	; () banked
 11770  0130AE  EE20 F006          	lfsr	2,6
 11771  0130B2  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11772  0130B4  26D9               	addwf	fsr2l,f,c
 11773  0130B6  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11774  0130B8  22DA               	addwfc	fsr2h,f,c
 11775  0130BA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11776  0130BE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 11777  0130C2  0E05               	movlw	5
 11778  0130C4  0100               	movlb	0	; () banked
 11779  0130C6  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 11780  0130C8  0E01               	movlw	1
 11781  0130CA  0100               	movlb	0	; () banked
 11782  0130CC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 11783  0130CE  EC83  F09A         	call	_Byte_SetBit	;wreg free
 11784  0130D2  0012               	return		;funcret
 11785  0130D4                     __end_of_SPI_MaxSpeed:
 11786                           	opt stack 0
 11787                           tosu	equ	0xFFF
 11788                           tosh	equ	0xFFE
 11789                           tosl	equ	0xFFD
 11790                           pclath	equ	0xFFA
 11791                           tblptru	equ	0xFF8
 11792                           tblptrh	equ	0xFF7
 11793                           tblptrl	equ	0xFF6
 11794                           tablat	equ	0xFF5
 11795                           prodh	equ	0xFF4
 11796                           prodl	equ	0xFF3
 11797                           intcon	equ	0xFF2
 11798                           postinc0	equ	0xFEE
 11799                           wreg	equ	0xFE8
 11800                           indf1	equ	0xFE7
 11801                           postdec1	equ	0xFE5
 11802                           fsr1h	equ	0xFE2
 11803                           fsr1l	equ	0xFE1
 11804                           indf2	equ	0xFDF
 11805                           postinc2	equ	0xFDE
 11806                           postdec2	equ	0xFDD
 11807                           plusw2	equ	0xFDB
 11808                           fsr2h	equ	0xFDA
 11809                           fsr2l	equ	0xFD9
 11810                           status	equ	0xFD8
 11811                           
 11812 ;; *************** function _LCD_Reset *****************
 11813 ;; Defined at:
 11814 ;;		line 95 in file "Library/LCD.c"
 11815 ;; Parameters:    Size  Location     Type
 11816 ;;		None
 11817 ;; Auto vars:     Size  Location     Type
 11818 ;;		None
 11819 ;; Return value:  Size  Location     Type
 11820 ;;                  1    wreg      void 
 11821 ;; Registers used:
 11822 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11823 ;; Tracked objects:
 11824 ;;		On entry : 0/0
 11825 ;;		On exit  : 0/0
 11826 ;;		Unchanged: 0/0
 11827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11832 ;;Total ram usage:        0 bytes
 11833 ;; Hardware stack levels used:    1
 11834 ;; Hardware stack levels required when called:   13
 11835 ;; This function calls:
 11836 ;;		_LED_Toggle
 11837 ;;		_Reset_High
 11838 ;;		_Reset_Low
 11839 ;;		_delay_ms
 11840 ;; This function is called by:
 11841 ;;		_Configure_GPIOs
 11842 ;; This function uses a non-reentrant model
 11843 ;;
 11844                           
 11845                           	psect	text59
 11846  013836                     __ptext59:
 11847                           	opt stack 0
 11848  013836                     _LCD_Reset:
 11849                           	opt stack 15
 11850                           
 11851                           ;LCD.c: 97: Reset_High();
 11852                           
 11853                           ;incstack = 0
 11854  013836  EC4A  F09F         	call	_Reset_High	;wreg free
 11855                           
 11856                           ;LCD.c: 98: LED_Toggle(eLED2);
 11857  01383A  0E01               	movlw	1
 11858  01383C  EC8D  F09C         	call	_LED_Toggle
 11859                           
 11860                           ;LCD.c: 99: delay_ms(0x80);
 11861  013840  0E00               	movlw	0
 11862  013842  0100               	movlb	0	; () banked
 11863  013844  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11864  013846  0E80               	movlw	128
 11865  013848  6FB5               	movwf	delay_ms@ms& (0+255),b
 11866  01384A  EC81  F099         	call	_delay_ms	;wreg free
 11867                           
 11868                           ;LCD.c: 100: LED_Toggle(eLED2);
 11869  01384E  0E01               	movlw	1
 11870  013850  EC8D  F09C         	call	_LED_Toggle
 11871                           
 11872                           ;LCD.c: 101: Reset_Low();
 11873  013854  EC3B  F09F         	call	_Reset_Low	;wreg free
 11874                           
 11875                           ;LCD.c: 102: delay_ms(0x80);
 11876  013858  0E00               	movlw	0
 11877  01385A  0100               	movlb	0	; () banked
 11878  01385C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11879  01385E  0E80               	movlw	128
 11880  013860  6FB5               	movwf	delay_ms@ms& (0+255),b
 11881  013862  EC81  F099         	call	_delay_ms	;wreg free
 11882                           
 11883                           ;LCD.c: 103: LED_Toggle(eLED2);
 11884  013866  0E01               	movlw	1
 11885  013868  EC8D  F09C         	call	_LED_Toggle
 11886                           
 11887                           ;LCD.c: 104: Reset_High();
 11888  01386C  EC4A  F09F         	call	_Reset_High	;wreg free
 11889                           
 11890                           ;LCD.c: 105: delay_ms(0x80);
 11891  013870  0E00               	movlw	0
 11892  013872  0100               	movlb	0	; () banked
 11893  013874  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11894  013876  0E80               	movlw	128
 11895  013878  6FB5               	movwf	delay_ms@ms& (0+255),b
 11896  01387A  EC81  F099         	call	_delay_ms	;wreg free
 11897                           
 11898                           ;LCD.c: 106: LED_Toggle(eLED2);
 11899  01387E  0E01               	movlw	1
 11900  013880  EC8D  F09C         	call	_LED_Toggle
 11901  013884  0012               	return		;funcret
 11902  013886                     __end_of_LCD_Reset:
 11903                           	opt stack 0
 11904                           tosu	equ	0xFFF
 11905                           tosh	equ	0xFFE
 11906                           tosl	equ	0xFFD
 11907                           pclath	equ	0xFFA
 11908                           tblptru	equ	0xFF8
 11909                           tblptrh	equ	0xFF7
 11910                           tblptrl	equ	0xFF6
 11911                           tablat	equ	0xFF5
 11912                           prodh	equ	0xFF4
 11913                           prodl	equ	0xFF3
 11914                           intcon	equ	0xFF2
 11915                           postinc0	equ	0xFEE
 11916                           wreg	equ	0xFE8
 11917                           indf1	equ	0xFE7
 11918                           postdec1	equ	0xFE5
 11919                           fsr1h	equ	0xFE2
 11920                           fsr1l	equ	0xFE1
 11921                           indf2	equ	0xFDF
 11922                           postinc2	equ	0xFDE
 11923                           postdec2	equ	0xFDD
 11924                           plusw2	equ	0xFDB
 11925                           fsr2h	equ	0xFDA
 11926                           fsr2l	equ	0xFD9
 11927                           status	equ	0xFD8
 11928                           
 11929 ;; *************** function _delay_ms *****************
 11930 ;; Defined at:
 11931 ;;		line 240 in file "Library/Types.c"
 11932 ;; Parameters:    Size  Location     Type
 11933 ;;  ms              2    0[BANK0 ] unsigned short 
 11934 ;; Auto vars:     Size  Location     Type
 11935 ;;  u               4    2[BANK0 ] volatile unsigned long 
 11936 ;; Return value:  Size  Location     Type
 11937 ;;                  1    wreg      void 
 11938 ;; Registers used:
 11939 ;;		wreg, status,2, status,0
 11940 ;; Tracked objects:
 11941 ;;		On entry : 0/0
 11942 ;;		On exit  : 0/0
 11943 ;;		Unchanged: 0/0
 11944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11945 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11946 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11948 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11949 ;;Total ram usage:        6 bytes
 11950 ;; Hardware stack levels used:    1
 11951 ;; Hardware stack levels required when called:    7
 11952 ;; This function calls:
 11953 ;;		Nothing
 11954 ;; This function is called by:
 11955 ;;		_LCD_Reset
 11956 ;;		_LCD_Init
 11957 ;;		_MXK_Init
 11958 ;;		_main
 11959 ;; This function uses a non-reentrant model
 11960 ;;
 11961                           
 11962                           	psect	text60
 11963  013302                     __ptext60:
 11964                           	opt stack 0
 11965  013302                     _delay_ms:
 11966                           	opt stack 23
 11967                           
 11968                           ;Types.c: 242: volatile unsigned long u;
 11969                           ;Types.c: 243: while (ms--)
 11970                           
 11971                           ;incstack = 0
 11972  013302  D01F               	goto	u6790
 11973  013304                     l10529:
 11974                           
 11975                           ;Types.c: 244: {
 11976                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 11977  013304  0E00               	movlw	0
 11978  013306  0100               	movlb	0	; () banked
 11979  013308  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 11980  01330A  0E00               	movlw	0
 11981  01330C  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 11982  01330E  0E00               	movlw	0
 11983  013310  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 11984  013312  0E00               	movlw	0
 11985  013314  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 11986  013316                     l10531:
 11987                           
 11988                           ; BSR set to: 0
 11989  013316  0100               	movlb	0	; () banked
 11990  013318  51BA               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 11991  01331A  0100               	movlb	0	; () banked
 11992  01331C  11B9               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 11993  01331E  E111               	bnz	l10537
 11994  013320  0EB0               	movlw	176
 11995  013322  0100               	movlb	0	; () banked
 11996  013324  5DB7               	subwf	delay_ms@u& (0+255),w,b	;volatile
 11997  013326  0E04               	movlw	4
 11998  013328  0100               	movlb	0	; () banked
 11999  01332A  59B8               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 12000  01332C  B0D8               	btfsc	status,0,c
 12001  01332E  D009               	goto	u6790
 12002                           
 12003                           ; BSR set to: 0
 12004                           
 12005                           ; BSR set to: 0
 12006  013330  F000               	nop		; ;# 
 12007  013332  0E01               	movlw	1
 12008  013334  0100               	movlb	0	; () banked
 12009  013336  27B7               	addwf	delay_ms@u& (0+255),f,b	;volatile
 12010  013338  0E00               	movlw	0
 12011  01333A  23B8               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 12012  01333C  23B9               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 12013  01333E  23BA               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 12014  013340  D7EA               	goto	l10531
 12015  013342                     u6790:
 12016  013342                     l10537:
 12017  013342  0100               	movlb	0	; () banked
 12018  013344  07B5               	decf	delay_ms@ms& (0+255),f,b
 12019  013346  A0D8               	btfss	status,0,c
 12020  013348  07B6               	decf	(delay_ms@ms+1)& (0+255),f,b
 12021  01334A  0100               	movlb	0	; () banked
 12022  01334C  29B5               	incf	delay_ms@ms& (0+255),w,b
 12023  01334E  E1DA               	bnz	l10529
 12024  013350  0100               	movlb	0	; () banked
 12025  013352  29B6               	incf	(delay_ms@ms+1)& (0+255),w,b
 12026  013354  A4D8               	btfss	status,2,c
 12027  013356  D7D6               	goto	l824
 12028                           
 12029                           ; BSR set to: 0
 12030                           ;Types.c: 251: }
 12031                           ;Types.c: 252: }
 12032                           ;Types.c: 253: u = 0x8008;
 12033                           
 12034                           ; BSR set to: 0
 12035  013358  0E08               	movlw	8
 12036  01335A  0100               	movlb	0	; () banked
 12037  01335C  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 12038  01335E  0E80               	movlw	128
 12039  013360  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12040  013362  0E00               	movlw	0
 12041  013364  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12042  013366  0E00               	movlw	0
 12043  013368  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12044                           
 12045                           ; BSR set to: 0
 12046  01336A  0012               	return		;funcret
 12047  01336C                     __end_of_delay_ms:
 12048                           	opt stack 0
 12049                           tosu	equ	0xFFF
 12050                           tosh	equ	0xFFE
 12051                           tosl	equ	0xFFD
 12052                           pclath	equ	0xFFA
 12053                           tblptru	equ	0xFF8
 12054                           tblptrh	equ	0xFF7
 12055                           tblptrl	equ	0xFF6
 12056                           tablat	equ	0xFF5
 12057                           prodh	equ	0xFF4
 12058                           prodl	equ	0xFF3
 12059                           intcon	equ	0xFF2
 12060                           postinc0	equ	0xFEE
 12061                           wreg	equ	0xFE8
 12062                           indf1	equ	0xFE7
 12063                           postdec1	equ	0xFE5
 12064                           fsr1h	equ	0xFE2
 12065                           fsr1l	equ	0xFE1
 12066                           indf2	equ	0xFDF
 12067                           postinc2	equ	0xFDE
 12068                           postdec2	equ	0xFDD
 12069                           plusw2	equ	0xFDB
 12070                           fsr2h	equ	0xFDA
 12071                           fsr2l	equ	0xFD9
 12072                           status	equ	0xFD8
 12073                           
 12074 ;; *************** function _Reset_Low *****************
 12075 ;; Defined at:
 12076 ;;		line 32 in file "Library/LCD.c"
 12077 ;; Parameters:    Size  Location     Type
 12078 ;;		None
 12079 ;; Auto vars:     Size  Location     Type
 12080 ;;		None
 12081 ;; Return value:  Size  Location     Type
 12082 ;;                  1    wreg      void 
 12083 ;; Registers used:
 12084 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12085 ;; Tracked objects:
 12086 ;;		On entry : 0/0
 12087 ;;		On exit  : 0/0
 12088 ;;		Unchanged: 0/0
 12089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12091 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12093 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12094 ;;Total ram usage:        0 bytes
 12095 ;; Hardware stack levels used:    1
 12096 ;; Hardware stack levels required when called:   11
 12097 ;; This function calls:
 12098 ;;		_Port_SetPin
 12099 ;; This function is called by:
 12100 ;;		_LCD_Reset
 12101 ;; This function uses a non-reentrant model
 12102 ;;
 12103                           
 12104                           	psect	text61
 12105  013E76                     __ptext61:
 12106                           	opt stack 0
 12107  013E76                     _Reset_Low:
 12108                           	opt stack 16
 12109                           
 12110                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 12111                           
 12112                           ; BSR set to: 0
 12113                           ;incstack = 0
 12114  013E76  0EB0               	movlw	low _PortF
 12115  013E78  0100               	movlb	0	; () banked
 12116  013E7A  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12117  013E7C  0E03               	movlw	high _PortF
 12118  013E7E  0100               	movlb	0	; () banked
 12119  013E80  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12120  013E82  0E06               	movlw	6
 12121  013E84  0100               	movlb	0	; () banked
 12122  013E86  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12123  013E88  0E01               	movlw	1
 12124  013E8A  0100               	movlb	0	; () banked
 12125  013E8C  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12126  013E8E  EC3E  F091         	call	_Port_SetPin	;wreg free
 12127  013E92  0012               	return		;funcret
 12128  013E94                     __end_of_Reset_Low:
 12129                           	opt stack 0
 12130                           tosu	equ	0xFFF
 12131                           tosh	equ	0xFFE
 12132                           tosl	equ	0xFFD
 12133                           pclath	equ	0xFFA
 12134                           tblptru	equ	0xFF8
 12135                           tblptrh	equ	0xFF7
 12136                           tblptrl	equ	0xFF6
 12137                           tablat	equ	0xFF5
 12138                           prodh	equ	0xFF4
 12139                           prodl	equ	0xFF3
 12140                           intcon	equ	0xFF2
 12141                           postinc0	equ	0xFEE
 12142                           wreg	equ	0xFE8
 12143                           indf1	equ	0xFE7
 12144                           postdec1	equ	0xFE5
 12145                           fsr1h	equ	0xFE2
 12146                           fsr1l	equ	0xFE1
 12147                           indf2	equ	0xFDF
 12148                           postinc2	equ	0xFDE
 12149                           postdec2	equ	0xFDD
 12150                           plusw2	equ	0xFDB
 12151                           fsr2h	equ	0xFDA
 12152                           fsr2l	equ	0xFD9
 12153                           status	equ	0xFD8
 12154                           
 12155 ;; *************** function _Reset_High *****************
 12156 ;; Defined at:
 12157 ;;		line 36 in file "Library/LCD.c"
 12158 ;; Parameters:    Size  Location     Type
 12159 ;;		None
 12160 ;; Auto vars:     Size  Location     Type
 12161 ;;		None
 12162 ;; Return value:  Size  Location     Type
 12163 ;;                  1    wreg      void 
 12164 ;; Registers used:
 12165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12166 ;; Tracked objects:
 12167 ;;		On entry : 0/0
 12168 ;;		On exit  : 0/0
 12169 ;;		Unchanged: 0/0
 12170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12175 ;;Total ram usage:        0 bytes
 12176 ;; Hardware stack levels used:    1
 12177 ;; Hardware stack levels required when called:   11
 12178 ;; This function calls:
 12179 ;;		_Port_SetPin
 12180 ;; This function is called by:
 12181 ;;		_LCD_Reset
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           	psect	text62
 12186  013E94                     __ptext62:
 12187                           	opt stack 0
 12188  013E94                     _Reset_High:
 12189                           	opt stack 16
 12190                           
 12191                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12192                           
 12193                           ;incstack = 0
 12194  013E94  0EB0               	movlw	low _PortF
 12195  013E96  0100               	movlb	0	; () banked
 12196  013E98  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12197  013E9A  0E03               	movlw	high _PortF
 12198  013E9C  0100               	movlb	0	; () banked
 12199  013E9E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12200  013EA0  0E06               	movlw	6
 12201  013EA2  0100               	movlb	0	; () banked
 12202  013EA4  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12203  013EA6  0E00               	movlw	0
 12204  013EA8  0100               	movlb	0	; () banked
 12205  013EAA  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12206  013EAC  EC3E  F091         	call	_Port_SetPin	;wreg free
 12207  013EB0  0012               	return		;funcret
 12208  013EB2                     __end_of_Reset_High:
 12209                           	opt stack 0
 12210                           tosu	equ	0xFFF
 12211                           tosh	equ	0xFFE
 12212                           tosl	equ	0xFFD
 12213                           pclath	equ	0xFFA
 12214                           tblptru	equ	0xFF8
 12215                           tblptrh	equ	0xFF7
 12216                           tblptrl	equ	0xFF6
 12217                           tablat	equ	0xFF5
 12218                           prodh	equ	0xFF4
 12219                           prodl	equ	0xFF3
 12220                           intcon	equ	0xFF2
 12221                           postinc0	equ	0xFEE
 12222                           wreg	equ	0xFE8
 12223                           indf1	equ	0xFE7
 12224                           postdec1	equ	0xFE5
 12225                           fsr1h	equ	0xFE2
 12226                           fsr1l	equ	0xFE1
 12227                           indf2	equ	0xFDF
 12228                           postinc2	equ	0xFDE
 12229                           postdec2	equ	0xFDD
 12230                           plusw2	equ	0xFDB
 12231                           fsr2h	equ	0xFDA
 12232                           fsr2l	equ	0xFD9
 12233                           status	equ	0xFD8
 12234                           
 12235 ;; *************** function _LED_Toggle *****************
 12236 ;; Defined at:
 12237 ;;		line 50 in file "Library/LED.c"
 12238 ;; Parameters:    Size  Location     Type
 12239 ;;  pLED            1    wreg     enum E6739
 12240 ;; Auto vars:     Size  Location     Type
 12241 ;;  pLED            1   24[BANK0 ] enum E6739
 12242 ;; Return value:  Size  Location     Type
 12243 ;;                  1    wreg      void 
 12244 ;; Registers used:
 12245 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12246 ;; Tracked objects:
 12247 ;;		On entry : 0/0
 12248 ;;		On exit  : 0/0
 12249 ;;		Unchanged: 0/0
 12250 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12251 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12252 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12253 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12254 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12255 ;;Total ram usage:        1 bytes
 12256 ;; Hardware stack levels used:    1
 12257 ;; Hardware stack levels required when called:   12
 12258 ;; This function calls:
 12259 ;;		_Port_TogglePin
 12260 ;; This function is called by:
 12261 ;;		_LCD_Reset
 12262 ;;		_Event_ADCSequenceComplete
 12263 ;;		_Event_DIPSwitch
 12264 ;;		_Event_HMI_DIPSwitch
 12265 ;;		_Event_TestButton
 12266 ;;		_Event_HMI_LeftButton
 12267 ;;		_Event_HMI_RightButton
 12268 ;;		_Event_HMI_UpButton
 12269 ;;		_Event_HMI_DownButton
 12270 ;; This function uses a non-reentrant model
 12271 ;;
 12272                           
 12273                           	psect	text63
 12274  01391A                     __ptext63:
 12275                           	opt stack 0
 12276  01391A                     _LED_Toggle:
 12277                           	opt stack 15
 12278                           
 12279                           ;incstack = 0
 12280                           ;LED_Toggle@pLED stored from wreg
 12281  01391A  0100               	movlb	0	; () banked
 12282  01391C  6FCD               	movwf	LED_Toggle@pLED& (0+255),b
 12283                           
 12284                           ;LED.c: 52: switch (pLED)
 12285  01391E  D018               	goto	l234
 12286  013920                     
 12287                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 12288  013920  0EA3               	movlw	low _PortC
 12289  013922  0100               	movlb	0	; () banked
 12290  013924  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 12291  013926  0E00               	movlw	high _PortC
 12292  013928  0100               	movlb	0	; () banked
 12293  01392A  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 12294  01392C  0E00               	movlw	0
 12295  01392E  0100               	movlb	0	; () banked
 12296  013930  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 12297  013932  EC67  F09E         	call	_Port_TogglePin	;wreg free
 12298                           
 12299                           ;LED.c: 56: break;
 12300  013936  0012               	return	
 12301  013938                     
 12302                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 12303  013938  0EA3               	movlw	low _PortC
 12304  01393A  0100               	movlb	0	; () banked
 12305  01393C  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 12306  01393E  0E00               	movlw	high _PortC
 12307  013940  0100               	movlb	0	; () banked
 12308  013942  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 12309  013944  0E01               	movlw	1
 12310  013946  0100               	movlb	0	; () banked
 12311  013948  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 12312  01394A  EC67  F09E         	call	_Port_TogglePin	;wreg free
 12313                           
 12314                           ;LED.c: 60: }
 12315                           
 12316                           ;LED.c: 59: break;
 12317  01394E  0012               	return	
 12318  013950                     l234:
 12319  013950  0100               	movlb	0	; () banked
 12320  013952  51CD               	movf	LED_Toggle@pLED& (0+255),w,b
 12321                           
 12322                           ; Switch size 1, requested type "space"
 12323                           ; Number of cases is 2, Range of values is 0 to 1
 12324                           ; switch strategies available:
 12325                           ; Name         Instructions Cycles
 12326                           ; simple_byte            7     4 (average)
 12327                           ;	Chosen strategy is simple_byte
 12328  013954  0A00               	xorlw	0	; case 0
 12329  013956  B4D8               	btfsc	status,2,c
 12330  013958  D7E3               	goto	l235
 12331  01395A  0A01               	xorlw	1	; case 1
 12332  01395C  A4D8               	btfss	status,2,c
 12333  01395E  0012               	return	
 12334  013960  D7EB               	goto	l237
 12335  013962                     __end_of_LED_Toggle:
 12336                           	opt stack 0
 12337                           tosu	equ	0xFFF
 12338                           tosh	equ	0xFFE
 12339                           tosl	equ	0xFFD
 12340                           pclath	equ	0xFFA
 12341                           tblptru	equ	0xFF8
 12342                           tblptrh	equ	0xFF7
 12343                           tblptrl	equ	0xFF6
 12344                           tablat	equ	0xFF5
 12345                           prodh	equ	0xFF4
 12346                           prodl	equ	0xFF3
 12347                           intcon	equ	0xFF2
 12348                           postinc0	equ	0xFEE
 12349                           wreg	equ	0xFE8
 12350                           indf1	equ	0xFE7
 12351                           postdec1	equ	0xFE5
 12352                           fsr1h	equ	0xFE2
 12353                           fsr1l	equ	0xFE1
 12354                           indf2	equ	0xFDF
 12355                           postinc2	equ	0xFDE
 12356                           postdec2	equ	0xFDD
 12357                           plusw2	equ	0xFDB
 12358                           fsr2h	equ	0xFDA
 12359                           fsr2l	equ	0xFD9
 12360                           status	equ	0xFD8
 12361                           
 12362 ;; *************** function _Port_TogglePin *****************
 12363 ;; Defined at:
 12364 ;;		line 278 in file "Library/Port.c"
 12365 ;; Parameters:    Size  Location     Type
 12366 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 12367 ;;		 -> PortC(10), 
 12368 ;;  pPin            1   22[BANK0 ] enum E6750
 12369 ;; Auto vars:     Size  Location     Type
 12370 ;;  Value           1   23[BANK0 ] unsigned char 
 12371 ;; Return value:  Size  Location     Type
 12372 ;;                  1    wreg      void 
 12373 ;; Registers used:
 12374 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12375 ;; Tracked objects:
 12376 ;;		On entry : 0/0
 12377 ;;		On exit  : 0/0
 12378 ;;		Unchanged: 0/0
 12379 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12380 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12381 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12382 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12383 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12384 ;;Total ram usage:        4 bytes
 12385 ;; Hardware stack levels used:    1
 12386 ;; Hardware stack levels required when called:   11
 12387 ;; This function calls:
 12388 ;;		_Port_GetPin
 12389 ;;		_Port_SetPin
 12390 ;; This function is called by:
 12391 ;;		_LED_Toggle
 12392 ;; This function uses a non-reentrant model
 12393 ;;
 12394                           
 12395                           	psect	text64
 12396  013CCE                     __ptext64:
 12397                           	opt stack 0
 12398  013CCE                     _Port_TogglePin:
 12399                           	opt stack 15
 12400                           
 12401                           ;Port.c: 280: UINT8 Value;
 12402                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 12403                           
 12404                           ;incstack = 0
 12405  013CCE  C0C9  F0B5         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 12406  013CD2  C0CA  F0B6         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 12407  013CD6  C0CB  F0B7         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 12408  013CDA  ECD4  F09C         	call	_Port_GetPin	;wreg free
 12409  013CDE  0100               	movlb	0	; () banked
 12410  013CE0  6FCC               	movwf	Port_TogglePin@Value& (0+255),b
 12411                           
 12412                           ; BSR set to: 0
 12413                           ;Port.c: 282: Value ^= 0x01;
 12414  013CE2  0E01               	movlw	1
 12415  013CE4  0100               	movlb	0	; () banked
 12416  013CE6  1BCC               	xorwf	Port_TogglePin@Value& (0+255),f,b
 12417                           
 12418                           ; BSR set to: 0
 12419                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 12420  013CE8  C0C9  F0C4         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 12421  013CEC  C0CA  F0C5         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 12422  013CF0  C0CB  F0C6         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 12423  013CF4  C0CC  F0C7         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 12424  013CF8  EC3E  F091         	call	_Port_SetPin	;wreg free
 12425  013CFC  0012               	return		;funcret
 12426  013CFE                     __end_of_Port_TogglePin:
 12427                           	opt stack 0
 12428                           tosu	equ	0xFFF
 12429                           tosh	equ	0xFFE
 12430                           tosl	equ	0xFFD
 12431                           pclath	equ	0xFFA
 12432                           tblptru	equ	0xFF8
 12433                           tblptrh	equ	0xFF7
 12434                           tblptrl	equ	0xFF6
 12435                           tablat	equ	0xFF5
 12436                           prodh	equ	0xFF4
 12437                           prodl	equ	0xFF3
 12438                           intcon	equ	0xFF2
 12439                           postinc0	equ	0xFEE
 12440                           wreg	equ	0xFE8
 12441                           indf1	equ	0xFE7
 12442                           postdec1	equ	0xFE5
 12443                           fsr1h	equ	0xFE2
 12444                           fsr1l	equ	0xFE1
 12445                           indf2	equ	0xFDF
 12446                           postinc2	equ	0xFDE
 12447                           postdec2	equ	0xFDD
 12448                           plusw2	equ	0xFDB
 12449                           fsr2h	equ	0xFDA
 12450                           fsr2l	equ	0xFD9
 12451                           status	equ	0xFD8
 12452                           
 12453 ;; *************** function _Port_SetPin *****************
 12454 ;; Defined at:
 12455 ;;		line 247 in file "Library/Port.c"
 12456 ;; Parameters:    Size  Location     Type
 12457 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 12458 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 12459 ;;  pPin            1   17[BANK0 ] enum E6750
 12460 ;;  pValue          1   18[BANK0 ] unsigned char 
 12461 ;; Auto vars:     Size  Location     Type
 12462 ;;  Type            1   19[BANK0 ] enum E6795
 12463 ;; Return value:  Size  Location     Type
 12464 ;;                  1    wreg      void 
 12465 ;; Registers used:
 12466 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12467 ;; Tracked objects:
 12468 ;;		On entry : 0/0
 12469 ;;		On exit  : 0/0
 12470 ;;		Unchanged: 0/0
 12471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12472 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12473 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12474 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;Total ram usage:        5 bytes
 12477 ;; Hardware stack levels used:    1
 12478 ;; Hardware stack levels required when called:   10
 12479 ;; This function calls:
 12480 ;;		_Byte_SetBit
 12481 ;;		_Word_GetPair
 12482 ;; This function is called by:
 12483 ;;		_Reset_Low
 12484 ;;		_Reset_High
 12485 ;;		_LED_Set
 12486 ;;		_Port_TogglePin
 12487 ;;		_Motor_Step
 12488 ;;		_MXK_Init
 12489 ;;		_Motor_Init
 12490 ;; This function uses a non-reentrant model
 12491 ;;
 12492                           
 12493                           	psect	text65
 12494  01227C                     __ptext65:
 12495                           	opt stack 0
 12496  01227C                     _Port_SetPin:
 12497                           	opt stack 19
 12498                           
 12499                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 12500                           
 12501                           ;incstack = 0
 12502  01227C  0E08               	movlw	8
 12503  01227E  0100               	movlb	0	; () banked
 12504  012280  25C4               	addwf	Port_SetPin@pInput& (0+255),w,b
 12505  012282  0100               	movlb	0	; () banked
 12506  012284  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 12507  012286  0E00               	movlw	0
 12508  012288  0100               	movlb	0	; () banked
 12509  01228A  21C5               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 12510  01228C  0100               	movlb	0	; () banked
 12511  01228E  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 12512  012290  C0C6  F0C3         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 12513  012294  ECDB  F09D         	call	_Word_GetPair	;wreg free
 12514  012298  0100               	movlb	0	; () banked
 12515  01229A  6FC8               	movwf	Port_SetPin@Type& (0+255),b
 12516                           
 12517                           ;Port.c: 250: switch (Type)
 12518  01229C  D042               	goto	l427
 12519  01229E                     
 12520                           ; BSR set to: 0
 12521                           ;Port.c: 256: pValue &= 1;
 12522                           
 12523                           ; BSR set to: 0
 12524  01229E  0E01               	movlw	1
 12525  0122A0  0100               	movlb	0	; () banked
 12526  0122A2  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 12527                           
 12528                           ; BSR set to: 0
 12529                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12530  0122A4  0100               	movlb	0	; () banked
 12531  0122A6  EE20 F002          	lfsr	2,2
 12532  0122AA  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 12533  0122AC  26D9               	addwf	fsr2l,f,c
 12534  0122AE  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12535  0122B0  22DA               	addwfc	fsr2h,f,c
 12536  0122B2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 12537  0122B6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 12538  0122BA  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12539  0122BE  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12540  0122C2  EC83  F09A         	call	_Byte_SetBit	;wreg free
 12541                           
 12542                           ;Port.c: 258: break;
 12543  0122C6  0012               	return	
 12544  0122C8                     
 12545                           ;Port.c: 261: pValue &= 1;
 12546  0122C8  0E01               	movlw	1
 12547  0122CA  0100               	movlb	0	; () banked
 12548  0122CC  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 12549                           
 12550                           ;Port.c: 262: pValue ^= 1;
 12551  0122CE  0E01               	movlw	1
 12552  0122D0  0100               	movlb	0	; () banked
 12553  0122D2  1BC7               	xorwf	Port_SetPin@pValue& (0+255),f,b
 12554                           
 12555                           ; BSR set to: 0
 12556                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 12557  0122D4  0100               	movlb	0	; () banked
 12558  0122D6  EE20 F002          	lfsr	2,2
 12559  0122DA  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 12560  0122DC  26D9               	addwf	fsr2l,f,c
 12561  0122DE  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12562  0122E0  22DA               	addwfc	fsr2h,f,c
 12563  0122E2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 12564  0122E6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 12565  0122EA  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12566  0122EE  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12567  0122F2  EC83  F09A         	call	_Byte_SetBit	;wreg free
 12568                           
 12569                           ;Port.c: 264: break;
 12570  0122F6  0012               	return	
 12571  0122F8                     
 12572                           ;Port.c: 266: pValue &= 1;
 12573  0122F8  0E01               	movlw	1
 12574  0122FA  0100               	movlb	0	; () banked
 12575  0122FC  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 12576                           
 12577                           ; BSR set to: 0
 12578                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 12579  0122FE  0100               	movlb	0	; () banked
 12580  012300  EE20 F004          	lfsr	2,4
 12581  012304  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 12582  012306  26D9               	addwf	fsr2l,f,c
 12583  012308  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 12584  01230A  22DA               	addwfc	fsr2h,f,c
 12585  01230C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 12586  012310  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 12587  012314  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 12588  012318  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 12589  01231C  EC83  F09A         	call	_Byte_SetBit	;wreg free
 12590                           
 12591                           ;Port.c: 269: }
 12592                           
 12593                           ;Port.c: 268: break;
 12594  012320  0012               	return	
 12595  012322                     l427:
 12596  012322  0100               	movlb	0	; () banked
 12597  012324  51C8               	movf	Port_SetPin@Type& (0+255),w,b
 12598                           
 12599                           ; Switch size 1, requested type "space"
 12600                           ; Number of cases is 4, Range of values is 0 to 3
 12601                           ; switch strategies available:
 12602                           ; Name         Instructions Cycles
 12603                           ; simple_byte           13     7 (average)
 12604                           ;	Chosen strategy is simple_byte
 12605  012326  0A00               	xorlw	0	; case 0
 12606  012328  B4D8               	btfsc	status,2,c
 12607  01232A  0012               	return	
 12608  01232C  0A01               	xorlw	1	; case 1
 12609  01232E  B4D8               	btfsc	status,2,c
 12610  012330  D7B6               	goto	l430
 12611  012332  0A03               	xorlw	3	; case 2
 12612  012334  B4D8               	btfsc	status,2,c
 12613  012336  D7C8               	goto	l432
 12614  012338  0A01               	xorlw	1	; case 3
 12615  01233A  A4D8               	btfss	status,2,c
 12616  01233C  0012               	return	
 12617  01233E  D7DC               	goto	l433
 12618  012340                     __end_of_Port_SetPin:
 12619                           	opt stack 0
 12620                           tosu	equ	0xFFF
 12621                           tosh	equ	0xFFE
 12622                           tosl	equ	0xFFD
 12623                           pclath	equ	0xFFA
 12624                           tblptru	equ	0xFF8
 12625                           tblptrh	equ	0xFF7
 12626                           tblptrl	equ	0xFF6
 12627                           tablat	equ	0xFF5
 12628                           prodh	equ	0xFF4
 12629                           prodl	equ	0xFF3
 12630                           intcon	equ	0xFF2
 12631                           postinc0	equ	0xFEE
 12632                           wreg	equ	0xFE8
 12633                           indf1	equ	0xFE7
 12634                           postdec1	equ	0xFE5
 12635                           fsr1h	equ	0xFE2
 12636                           fsr1l	equ	0xFE1
 12637                           indf2	equ	0xFDF
 12638                           postinc2	equ	0xFDE
 12639                           postdec2	equ	0xFDD
 12640                           plusw2	equ	0xFDB
 12641                           fsr2h	equ	0xFDA
 12642                           fsr2l	equ	0xFD9
 12643                           status	equ	0xFD8
 12644                           
 12645 ;; *************** function _Port_GetPin *****************
 12646 ;; Defined at:
 12647 ;;		line 271 in file "Library/Port.c"
 12648 ;; Parameters:    Size  Location     Type
 12649 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 12650 ;;		 -> PortB(10), PortE(10), PortC(10), 
 12651 ;;  pPin            1    2[BANK0 ] enum E6750
 12652 ;; Auto vars:     Size  Location     Type
 12653 ;;  Output          1    5[BANK0 ] unsigned char 
 12654 ;; Return value:  Size  Location     Type
 12655 ;;                  1    wreg      unsigned char 
 12656 ;; Registers used:
 12657 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 12658 ;; Tracked objects:
 12659 ;;		On entry : 0/0
 12660 ;;		On exit  : 0/0
 12661 ;;		Unchanged: 0/0
 12662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12663 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12665 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12666 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12667 ;;Total ram usage:        6 bytes
 12668 ;; Hardware stack levels used:    1
 12669 ;; Hardware stack levels required when called:    7
 12670 ;; This function calls:
 12671 ;;		Nothing
 12672 ;; This function is called by:
 12673 ;;		_Port_TogglePin
 12674 ;;		_HMI_LeftSwitch
 12675 ;;		_HMI_RightSwitch
 12676 ;;		_HMI_UpSwitch
 12677 ;;		_HMI_DownSwitch
 12678 ;;		_MXK_TestButton
 12679 ;; This function uses a non-reentrant model
 12680 ;;
 12681                           
 12682                           	psect	text66
 12683  0139A8                     __ptext66:
 12684                           	opt stack 0
 12685  0139A8                     _Port_GetPin:
 12686                           	opt stack 18
 12687                           
 12688                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 12689                           
 12690                           ;incstack = 0
 12691  0139A8  0100               	movlb	0	; () banked
 12692  0139AA  EE20 F006          	lfsr	2,6
 12693  0139AE  51B5               	movf	Port_GetPin@pInput& (0+255),w,b
 12694  0139B0  26D9               	addwf	fsr2l,f,c
 12695  0139B2  51B6               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 12696  0139B4  22DA               	addwfc	fsr2h,f,c
 12697  0139B6  CFDE F0B8          	movff	postinc2,??_Port_GetPin
 12698  0139BA  CFDD F0B9          	movff	postdec2,??_Port_GetPin+1
 12699  0139BE  C0B8  FFD9         	movff	??_Port_GetPin,fsr2l
 12700  0139C2  C0B9  FFDA         	movff	??_Port_GetPin+1,fsr2h
 12701  0139C6  50DF               	movf	indf2,w,c
 12702  0139C8  0100               	movlb	0	; () banked
 12703  0139CA  6FBA               	movwf	Port_GetPin@Output& (0+255),b
 12704                           
 12705                           ; BSR set to: 0
 12706                           ;Port.c: 274: Output >>= (UINT8)pPin;
 12707  0139CC  0100               	movlb	0	; () banked
 12708  0139CE  29B7               	incf	Port_GetPin@pPin& (0+255),w,b
 12709  0139D0  0100               	movlb	0	; () banked
 12710  0139D2  6FB8               	movwf	??_Port_GetPin& (0+255),b
 12711  0139D4  D003               	goto	u6490
 12712  0139D6                     u6495:
 12713  0139D6  0100               	movlb	0	; () banked
 12714  0139D8  90D8               	bcf	status,0,c
 12715  0139DA  33BA               	rrcf	Port_GetPin@Output& (0+255),f,b
 12716  0139DC                     u6490:
 12717  0139DC  0100               	movlb	0	; () banked
 12718  0139DE  2FB8               	decfsz	??_Port_GetPin& (0+255),f,b
 12719  0139E0  D7FA               	goto	u6495
 12720                           
 12721                           ;Port.c: 275: Output &= 1;
 12722  0139E2  0E01               	movlw	1
 12723  0139E4  0100               	movlb	0	; () banked
 12724  0139E6  17BA               	andwf	Port_GetPin@Output& (0+255),f,b
 12725                           
 12726                           ; BSR set to: 0
 12727                           ;Port.c: 276: return Output;
 12728  0139E8  0100               	movlb	0	; () banked
 12729  0139EA  51BA               	movf	Port_GetPin@Output& (0+255),w,b
 12730  0139EC  0012               	return	
 12731  0139EE                     __end_of_Port_GetPin:
 12732                           	opt stack 0
 12733                           tosu	equ	0xFFF
 12734                           tosh	equ	0xFFE
 12735                           tosl	equ	0xFFD
 12736                           pclath	equ	0xFFA
 12737                           tblptru	equ	0xFF8
 12738                           tblptrh	equ	0xFF7
 12739                           tblptrl	equ	0xFF6
 12740                           tablat	equ	0xFF5
 12741                           prodh	equ	0xFF4
 12742                           prodl	equ	0xFF3
 12743                           intcon	equ	0xFF2
 12744                           postinc0	equ	0xFEE
 12745                           wreg	equ	0xFE8
 12746                           indf1	equ	0xFE7
 12747                           postdec1	equ	0xFE5
 12748                           fsr1h	equ	0xFE2
 12749                           fsr1l	equ	0xFE1
 12750                           indf2	equ	0xFDF
 12751                           postinc2	equ	0xFDE
 12752                           postdec2	equ	0xFDD
 12753                           plusw2	equ	0xFDB
 12754                           fsr2h	equ	0xFDA
 12755                           fsr2l	equ	0xFD9
 12756                           status	equ	0xFD8
 12757                           
 12758 ;; *************** function _HMI_Init *****************
 12759 ;; Defined at:
 12760 ;;		line 104 in file "HMI.c"
 12761 ;; Parameters:    Size  Location     Type
 12762 ;;		None
 12763 ;; Auto vars:     Size  Location     Type
 12764 ;;  in              2   59[BANK0 ] unsigned short 
 12765 ;; Return value:  Size  Location     Type
 12766 ;;                  1    wreg      void 
 12767 ;; Registers used:
 12768 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12769 ;; Tracked objects:
 12770 ;;		On entry : 0/0
 12771 ;;		On exit  : 0/0
 12772 ;;		Unchanged: 0/0
 12773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12775 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12777 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12778 ;;Total ram usage:        2 bytes
 12779 ;; Hardware stack levels used:    1
 12780 ;; Hardware stack levels required when called:   16
 12781 ;; This function calls:
 12782 ;;		_Button_Init
 12783 ;;		_SPI_Init
 12784 ;;		_SPI_MinSpeed
 12785 ;; This function is called by:
 12786 ;;		_main
 12787 ;; This function uses a non-reentrant model
 12788 ;;
 12789                           
 12790                           	psect	text67
 12791  010E68                     __ptext67:
 12792                           	opt stack 0
 12793  010E68                     _HMI_Init:
 12794                           	opt stack 14
 12795                           
 12796                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 12797                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 12798                           
 12799                           ; BSR set to: 0
 12800                           ;incstack = 0
 12801  010E68  0E5E               	movlw	low (_HMIBoard+48)
 12802  010E6A  0101               	movlb	1	; () banked
 12803  010E6C  6F00               	movwf	Button_Init@pInput& (0+255),b
 12804  010E6E  0E03               	movlw	high (_HMIBoard+48)
 12805  010E70  0101               	movlb	1	; () banked
 12806  010E72  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 12807  010E74  0E00               	movlw	0
 12808  010E76  0101               	movlb	1	; () banked
 12809  010E78  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12810  010E7A  0E02               	movlw	2
 12811  010E7C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 12812  010E7E  0E62               	movlw	low _HMI_InitButtons
 12813  010E80  0101               	movlb	1	; () banked
 12814  010E82  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 12815  010E84  0E40               	movlw	high _HMI_InitButtons
 12816  010E86  0101               	movlb	1	; () banked
 12817  010E88  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12818  010E8A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12819  010E8C  0101               	movlb	1	; () banked
 12820  010E8E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12821  010E90  0E00               	movlw	0
 12822  010E92  0101               	movlb	1	; () banked
 12823  010E94  6F07               	movwf	Button_Init@pGetState& (0+255),b
 12824  010E96  0E00               	movlw	0
 12825  010E98  0101               	movlb	1	; () banked
 12826  010E9A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12827  010E9C  0E00               	movlw	0
 12828  010E9E  0101               	movlb	1	; () banked
 12829  010EA0  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12830  010EA2  0E00               	movlw	0
 12831  010EA4  0101               	movlb	1	; () banked
 12832  010EA6  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 12833  010EA8  0E00               	movlw	0
 12834  010EAA  0101               	movlb	1	; () banked
 12835  010EAC  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12836  010EAE  0E00               	movlw	0
 12837  010EB0  0101               	movlb	1	; () banked
 12838  010EB2  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12839  010EB4  EC6C  F090         	call	_Button_Init	;wreg free
 12840                           
 12841                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 12842                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 12843  010EB8  0E40               	movlw	low (_HMIBoard+18)
 12844  010EBA  0101               	movlb	1	; () banked
 12845  010EBC  6F00               	movwf	Button_Init@pInput& (0+255),b
 12846  010EBE  0E03               	movlw	high (_HMIBoard+18)
 12847  010EC0  0101               	movlb	1	; () banked
 12848  010EC2  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 12849  010EC4  0E00               	movlw	0
 12850  010EC6  0101               	movlb	1	; () banked
 12851  010EC8  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12852  010ECA  0E02               	movlw	2
 12853  010ECC  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 12854  010ECE  0E62               	movlw	low _HMI_InitButtons
 12855  010ED0  0101               	movlb	1	; () banked
 12856  010ED2  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 12857  010ED4  0E40               	movlw	high _HMI_InitButtons
 12858  010ED6  0101               	movlb	1	; () banked
 12859  010ED8  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12860  010EDA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12861  010EDC  0101               	movlb	1	; () banked
 12862  010EDE  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12863  010EE0  0E00               	movlw	0
 12864  010EE2  0101               	movlb	1	; () banked
 12865  010EE4  6F07               	movwf	Button_Init@pGetState& (0+255),b
 12866  010EE6  0E00               	movlw	0
 12867  010EE8  0101               	movlb	1	; () banked
 12868  010EEA  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12869  010EEC  0E00               	movlw	0
 12870  010EEE  0101               	movlb	1	; () banked
 12871  010EF0  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12872  010EF2  0E00               	movlw	0
 12873  010EF4  0101               	movlb	1	; () banked
 12874  010EF6  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 12875  010EF8  0E00               	movlw	0
 12876  010EFA  0101               	movlb	1	; () banked
 12877  010EFC  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12878  010EFE  0E00               	movlw	0
 12879  010F00  0101               	movlb	1	; () banked
 12880  010F02  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12881  010F04  EC6C  F090         	call	_Button_Init	;wreg free
 12882                           
 12883                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 12884                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 12885  010F08  0E36               	movlw	low (_HMIBoard+8)
 12886  010F0A  0101               	movlb	1	; () banked
 12887  010F0C  6F00               	movwf	Button_Init@pInput& (0+255),b
 12888  010F0E  0E03               	movlw	high (_HMIBoard+8)
 12889  010F10  0101               	movlb	1	; () banked
 12890  010F12  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 12891  010F14  0E00               	movlw	0
 12892  010F16  0101               	movlb	1	; () banked
 12893  010F18  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12894  010F1A  0E02               	movlw	2
 12895  010F1C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 12896  010F1E  0E62               	movlw	low _HMI_InitButtons
 12897  010F20  0101               	movlb	1	; () banked
 12898  010F22  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 12899  010F24  0E40               	movlw	high _HMI_InitButtons
 12900  010F26  0101               	movlb	1	; () banked
 12901  010F28  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12902  010F2A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12903  010F2C  0101               	movlb	1	; () banked
 12904  010F2E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12905  010F30  0E00               	movlw	0
 12906  010F32  0101               	movlb	1	; () banked
 12907  010F34  6F07               	movwf	Button_Init@pGetState& (0+255),b
 12908  010F36  0E00               	movlw	0
 12909  010F38  0101               	movlb	1	; () banked
 12910  010F3A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12911  010F3C  0E00               	movlw	0
 12912  010F3E  0101               	movlb	1	; () banked
 12913  010F40  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12914  010F42  0E00               	movlw	0
 12915  010F44  0101               	movlb	1	; () banked
 12916  010F46  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 12917  010F48  0E00               	movlw	0
 12918  010F4A  0101               	movlb	1	; () banked
 12919  010F4C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12920  010F4E  0E00               	movlw	0
 12921  010F50  0101               	movlb	1	; () banked
 12922  010F52  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12923  010F54  EC6C  F090         	call	_Button_Init	;wreg free
 12924                           
 12925                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 12926                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 12927  010F58  0E4A               	movlw	low (_HMIBoard+28)
 12928  010F5A  0101               	movlb	1	; () banked
 12929  010F5C  6F00               	movwf	Button_Init@pInput& (0+255),b
 12930  010F5E  0E03               	movlw	high (_HMIBoard+28)
 12931  010F60  0101               	movlb	1	; () banked
 12932  010F62  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 12933  010F64  0E00               	movlw	0
 12934  010F66  0101               	movlb	1	; () banked
 12935  010F68  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12936  010F6A  0E02               	movlw	2
 12937  010F6C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 12938  010F6E  0E62               	movlw	low _HMI_InitButtons
 12939  010F70  0101               	movlb	1	; () banked
 12940  010F72  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 12941  010F74  0E40               	movlw	high _HMI_InitButtons
 12942  010F76  0101               	movlb	1	; () banked
 12943  010F78  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12944  010F7A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12945  010F7C  0101               	movlb	1	; () banked
 12946  010F7E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12947  010F80  0E00               	movlw	0
 12948  010F82  0101               	movlb	1	; () banked
 12949  010F84  6F07               	movwf	Button_Init@pGetState& (0+255),b
 12950  010F86  0E00               	movlw	0
 12951  010F88  0101               	movlb	1	; () banked
 12952  010F8A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12953  010F8C  0E00               	movlw	0
 12954  010F8E  0101               	movlb	1	; () banked
 12955  010F90  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12956  010F92  0E00               	movlw	0
 12957  010F94  0101               	movlb	1	; () banked
 12958  010F96  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 12959  010F98  0E00               	movlw	0
 12960  010F9A  0101               	movlb	1	; () banked
 12961  010F9C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 12962  010F9E  0E00               	movlw	0
 12963  010FA0  0101               	movlb	1	; () banked
 12964  010FA2  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 12965  010FA4  EC6C  F090         	call	_Button_Init	;wreg free
 12966                           
 12967                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 12968                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 12969  010FA8  0E54               	movlw	low (_HMIBoard+38)
 12970  010FAA  0101               	movlb	1	; () banked
 12971  010FAC  6F00               	movwf	Button_Init@pInput& (0+255),b
 12972  010FAE  0E03               	movlw	high (_HMIBoard+38)
 12973  010FB0  0101               	movlb	1	; () banked
 12974  010FB2  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 12975  010FB4  0E00               	movlw	0
 12976  010FB6  0101               	movlb	1	; () banked
 12977  010FB8  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 12978  010FBA  0E02               	movlw	2
 12979  010FBC  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 12980  010FBE  0E62               	movlw	low _HMI_InitButtons
 12981  010FC0  0101               	movlb	1	; () banked
 12982  010FC2  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 12983  010FC4  0E40               	movlw	high _HMI_InitButtons
 12984  010FC6  0101               	movlb	1	; () banked
 12985  010FC8  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 12986  010FCA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 12987  010FCC  0101               	movlb	1	; () banked
 12988  010FCE  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 12989  010FD0  0E00               	movlw	0
 12990  010FD2  0101               	movlb	1	; () banked
 12991  010FD4  6F07               	movwf	Button_Init@pGetState& (0+255),b
 12992  010FD6  0E00               	movlw	0
 12993  010FD8  0101               	movlb	1	; () banked
 12994  010FDA  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 12995  010FDC  0E00               	movlw	0
 12996  010FDE  0101               	movlb	1	; () banked
 12997  010FE0  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 12998  010FE2  0E00               	movlw	0
 12999  010FE4  0101               	movlb	1	; () banked
 13000  010FE6  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 13001  010FE8  0E00               	movlw	0
 13002  010FEA  0101               	movlb	1	; () banked
 13003  010FEC  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 13004  010FEE  0E00               	movlw	0
 13005  010FF0  0101               	movlb	1	; () banked
 13006  010FF2  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 13007  010FF4  EC6C  F090         	call	_Button_Init	;wreg free
 13008                           
 13009                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 13010  010FF8  0EA0               	movlw	160
 13011  010FFA  0100               	movlb	0	; () banked
 13012  010FFC  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 13013  010FFE  0E86               	movlw	134
 13014  011000  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 13015  011002  0E01               	movlw	1
 13016  011004  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 13017  011006  0E00               	movlw	0
 13018  011008  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 13019  01100A  0E00               	movlw	0
 13020  01100C  0100               	movlb	0	; () banked
 13021  01100E  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 13022  011010  0E02               	movlw	2
 13023  011012  0100               	movlb	0	; () banked
 13024  011014  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 13025  011016  EC00  F080         	call	_SPI_Init	;wreg free
 13026                           
 13027                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 13028  01101A  0E68               	movlw	low _SPI1
 13029  01101C  0100               	movlb	0	; () banked
 13030  01101E  6FC4               	movwf	SPI_MinSpeed@pInput& (0+255),b
 13031  011020  0E03               	movlw	high _SPI1
 13032  011022  0100               	movlb	0	; () banked
 13033  011024  6FC5               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 13034  011026  EC6A  F098         	call	_SPI_MinSpeed	;wreg free
 13035                           
 13036                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 13037  01102A  0E00               	movlw	0
 13038  01102C  0100               	movlb	0	; () banked
 13039  01102E  6FF1               	movwf	(HMI_Init@in+1)& (0+255),b
 13040  011030  0E00               	movlw	0
 13041  011032  6FF0               	movwf	HMI_Init@in& (0+255),b
 13042  011034                     l11897:
 13043                           
 13044                           ; BSR set to: 0
 13045  011034  0100               	movlb	0	; () banked
 13046  011036  51F1               	movf	(HMI_Init@in+1)& (0+255),w,b
 13047  011038  E113               	bnz	l1153
 13048  01103A  0E08               	movlw	8
 13049  01103C  0100               	movlb	0	; () banked
 13050  01103E  5DF0               	subwf	HMI_Init@in& (0+255),w,b
 13051  011040  B0D8               	btfsc	status,0,c
 13052  011042  0012               	return	
 13053                           
 13054                           ; BSR set to: 0
 13055                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 13056                           
 13057                           ; BSR set to: 0
 13058                           
 13059                           ; BSR set to: 0
 13060  011044  0E2E               	movlw	low _HMIBoard
 13061  011046  0100               	movlb	0	; () banked
 13062  011048  25F0               	addwf	HMI_Init@in& (0+255),w,b
 13063  01104A  6ED9               	movwf	fsr2l,c
 13064  01104C  0E03               	movlw	high _HMIBoard
 13065  01104E  0100               	movlb	0	; () banked
 13066  011050  21F1               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 13067  011052  6EDA               	movwf	fsr2h,c
 13068  011054  0E00               	movlw	0
 13069  011056  6EDF               	movwf	indf2,c
 13070                           
 13071                           ; BSR set to: 0
 13072  011058  0100               	movlb	0	; () banked
 13073  01105A  4BF0               	infsnz	HMI_Init@in& (0+255),f,b
 13074  01105C  2BF1               	incf	(HMI_Init@in+1)& (0+255),f,b
 13075  01105E  D7EA               	goto	l11897
 13076  011060                     l1153:
 13077                           
 13078                           ; BSR set to: 0
 13079  011060  0012               	return		;funcret
 13080  011062                     __end_of_HMI_Init:
 13081                           	opt stack 0
 13082                           tosu	equ	0xFFF
 13083                           tosh	equ	0xFFE
 13084                           tosl	equ	0xFFD
 13085                           pclath	equ	0xFFA
 13086                           tblptru	equ	0xFF8
 13087                           tblptrh	equ	0xFF7
 13088                           tblptrl	equ	0xFF6
 13089                           tablat	equ	0xFF5
 13090                           prodh	equ	0xFF4
 13091                           prodl	equ	0xFF3
 13092                           intcon	equ	0xFF2
 13093                           postinc0	equ	0xFEE
 13094                           wreg	equ	0xFE8
 13095                           indf1	equ	0xFE7
 13096                           postdec1	equ	0xFE5
 13097                           fsr1h	equ	0xFE2
 13098                           fsr1l	equ	0xFE1
 13099                           indf2	equ	0xFDF
 13100                           postinc2	equ	0xFDE
 13101                           postdec2	equ	0xFDD
 13102                           plusw2	equ	0xFDB
 13103                           fsr2h	equ	0xFDA
 13104                           fsr2l	equ	0xFD9
 13105                           status	equ	0xFD8
 13106                           
 13107 ;; *************** function _SPI_MinSpeed *****************
 13108 ;; Defined at:
 13109 ;;		line 190 in file "Library/SPI.c"
 13110 ;; Parameters:    Size  Location     Type
 13111 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 13112 ;;		 -> SPI1(11), 
 13113 ;; Auto vars:     Size  Location     Type
 13114 ;;		None
 13115 ;; Return value:  Size  Location     Type
 13116 ;;                  1    wreg      void 
 13117 ;; Registers used:
 13118 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13119 ;; Tracked objects:
 13120 ;;		On entry : 0/0
 13121 ;;		On exit  : 0/0
 13122 ;;		Unchanged: 0/0
 13123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13124 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13127 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;Total ram usage:        2 bytes
 13129 ;; Hardware stack levels used:    1
 13130 ;; Hardware stack levels required when called:    9
 13131 ;; This function calls:
 13132 ;;		_Byte_SetBit
 13133 ;;		_Byte_SetQuad
 13134 ;; This function is called by:
 13135 ;;		_HMI_Init
 13136 ;; This function uses a non-reentrant model
 13137 ;;
 13138                           
 13139                           	psect	text68
 13140  0130D4                     __ptext68:
 13141                           	opt stack 0
 13142  0130D4                     _SPI_MinSpeed:
 13143                           	opt stack 20
 13144                           
 13145                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13146                           
 13147                           ; BSR set to: 0
 13148                           ;incstack = 0
 13149  0130D4  0100               	movlb	0	; () banked
 13150  0130D6  EE20 F006          	lfsr	2,6
 13151  0130DA  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13152  0130DC  26D9               	addwf	fsr2l,f,c
 13153  0130DE  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13154  0130E0  22DA               	addwfc	fsr2h,f,c
 13155  0130E2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13156  0130E6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13157  0130EA  0E05               	movlw	5
 13158  0130EC  0100               	movlb	0	; () banked
 13159  0130EE  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13160  0130F0  0E00               	movlw	0
 13161  0130F2  0100               	movlb	0	; () banked
 13162  0130F4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13163  0130F6  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13164                           
 13165                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 13166  0130FA  0100               	movlb	0	; () banked
 13167  0130FC  EE20 F006          	lfsr	2,6
 13168  013100  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13169  013102  26D9               	addwf	fsr2l,f,c
 13170  013104  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13171  013106  22DA               	addwfc	fsr2h,f,c
 13172  013108  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 13173  01310C  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 13174  013110  0E00               	movlw	0
 13175  013112  0100               	movlb	0	; () banked
 13176  013114  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13177  013116  0E02               	movlw	2
 13178  013118  0100               	movlb	0	; () banked
 13179  01311A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 13180  01311C  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 13181                           
 13182                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13183  013120  0100               	movlb	0	; () banked
 13184  013122  EE20 F006          	lfsr	2,6
 13185  013126  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 13186  013128  26D9               	addwf	fsr2l,f,c
 13187  01312A  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 13188  01312C  22DA               	addwfc	fsr2h,f,c
 13189  01312E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13190  013132  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13191  013136  0E05               	movlw	5
 13192  013138  0100               	movlb	0	; () banked
 13193  01313A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13194  01313C  0E01               	movlw	1
 13195  01313E  0100               	movlb	0	; () banked
 13196  013140  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13197  013142  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13198  013146  0012               	return		;funcret
 13199  013148                     __end_of_SPI_MinSpeed:
 13200                           	opt stack 0
 13201                           tosu	equ	0xFFF
 13202                           tosh	equ	0xFFE
 13203                           tosl	equ	0xFFD
 13204                           pclath	equ	0xFFA
 13205                           tblptru	equ	0xFF8
 13206                           tblptrh	equ	0xFF7
 13207                           tblptrl	equ	0xFF6
 13208                           tablat	equ	0xFF5
 13209                           prodh	equ	0xFF4
 13210                           prodl	equ	0xFF3
 13211                           intcon	equ	0xFF2
 13212                           postinc0	equ	0xFEE
 13213                           wreg	equ	0xFE8
 13214                           indf1	equ	0xFE7
 13215                           postdec1	equ	0xFE5
 13216                           fsr1h	equ	0xFE2
 13217                           fsr1l	equ	0xFE1
 13218                           indf2	equ	0xFDF
 13219                           postinc2	equ	0xFDE
 13220                           postdec2	equ	0xFDD
 13221                           plusw2	equ	0xFDB
 13222                           fsr2h	equ	0xFDA
 13223                           fsr2l	equ	0xFD9
 13224                           status	equ	0xFD8
 13225                           
 13226 ;; *************** function _SPI_Init *****************
 13227 ;; Defined at:
 13228 ;;		line 12 in file "Library/SPI.c"
 13229 ;; Parameters:    Size  Location     Type
 13230 ;;  pClock          4   45[BANK0 ] unsigned long 
 13231 ;;  pChannel        1   49[BANK0 ] enum E6744
 13232 ;;  pMode           1   50[BANK0 ] enum E6748
 13233 ;; Auto vars:     Size  Location     Type
 13234 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 13235 ;;		 -> SPI1(11), SPI2(11), 
 13236 ;; Return value:  Size  Location     Type
 13237 ;;                  1    wreg      void 
 13238 ;; Registers used:
 13239 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13240 ;; Tracked objects:
 13241 ;;		On entry : 0/0
 13242 ;;		On exit  : 0/0
 13243 ;;		Unchanged: 0/0
 13244 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13245 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13246 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;Total ram usage:        8 bytes
 13250 ;; Hardware stack levels used:    1
 13251 ;; Hardware stack levels required when called:   12
 13252 ;; This function calls:
 13253 ;;		_Byte_SetBit
 13254 ;;		_Byte_SetQuad
 13255 ;;		_Port_SetPinType
 13256 ;;		_SPI_DCS
 13257 ;;		_SPI_DisableISR
 13258 ;;		_Timer2_Init
 13259 ;; This function is called by:
 13260 ;;		_Configure_GPIOs
 13261 ;;		_HMI_Init
 13262 ;; This function uses a non-reentrant model
 13263 ;;
 13264                           
 13265                           	psect	text69
 13266  010000                     __ptext69:
 13267                           	opt stack 0
 13268  010000                     _SPI_Init:
 13269                           	opt stack 16
 13270                           
 13271                           ;SPI.c: 14: SPIPtr pInput;
 13272                           ;SPI.c: 16: switch (pChannel)
 13273                           
 13274                           ;incstack = 0
 13275  010000  D00C               	goto	l597
 13276  010002                     
 13277                           ;SPI.c: 19: pInput = &SPI1;
 13278  010002  0E68               	movlw	low _SPI1
 13279  010004  0100               	movlb	0	; () banked
 13280  010006  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 13281  010008  0E03               	movlw	high _SPI1
 13282  01000A  D004               	goto	L10
 13283  01000C                     
 13284                           ; BSR set to: 0
 13285                           ;SPI.c: 22: pInput = &SPI2;
 13286                           
 13287                           ; BSR set to: 0
 13288  01000C  0E73               	movlw	low _SPI2
 13289  01000E  0100               	movlb	0	; () banked
 13290  010010  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 13291  010012  0E03               	movlw	high _SPI2
 13292  010014                     L10:
 13293  010014  0100               	movlb	0	; () banked
 13294  010016  6FE9               	movwf	(SPI_Init@pInput+1)& (0+255),b
 13295                           
 13296                           ; BSR set to: 0
 13297                           ;SPI.c: 24: };
 13298                           
 13299                           ;SPI.c: 23: break;
 13300  010018  D008               	goto	l599
 13301  01001A                     l597:
 13302                           
 13303                           ; BSR set to: 0
 13304  01001A  0100               	movlb	0	; () banked
 13305  01001C  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 13306                           
 13307                           ; Switch size 1, requested type "space"
 13308                           ; Number of cases is 2, Range of values is 0 to 1
 13309                           ; switch strategies available:
 13310                           ; Name         Instructions Cycles
 13311                           ; simple_byte            7     4 (average)
 13312                           ;	Chosen strategy is simple_byte
 13313  01001E  0A00               	xorlw	0	; case 0
 13314  010020  B4D8               	btfsc	status,2,c
 13315  010022  D7EF               	goto	l598
 13316  010024  0A01               	xorlw	1	; case 1
 13317  010026  B4D8               	btfsc	status,2,c
 13318  010028  D7F1               	goto	l600
 13319  01002A                     l599:
 13320                           
 13321                           ; BSR set to: 0
 13322                           ;SPI.c: 26: pInput->mChannel = pChannel;
 13323                           
 13324                           ; BSR set to: 0
 13325  01002A  0100               	movlb	0	; () banked
 13326  01002C  EE20 F002          	lfsr	2,2
 13327  010030  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13328  010032  26D9               	addwf	fsr2l,f,c
 13329  010034  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13330  010036  22DA               	addwfc	fsr2h,f,c
 13331  010038  C0E6  FFDF         	movff	SPI_Init@pChannel,indf2
 13332                           
 13333                           ;SPI.c: 35: switch (pChannel)
 13334  01003C  D0B1               	goto	l601
 13335  01003E                     
 13336                           ; BSR set to: 0
 13337                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 13338                           
 13339                           ; BSR set to: 0
 13340  01003E  0EA3               	movlw	low _PortC
 13341  010040  0100               	movlb	0	; () banked
 13342  010042  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13343  010044  0E00               	movlw	high _PortC
 13344  010046  0100               	movlb	0	; () banked
 13345  010048  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13346  01004A  0E02               	movlw	2
 13347  01004C  0100               	movlb	0	; () banked
 13348  01004E  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13349  010050  0E03               	movlw	3
 13350  010052  0100               	movlb	0	; () banked
 13351  010054  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13352  010056  EC31  F088         	call	_Port_SetPinType	;wreg free
 13353                           
 13354                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 13355  01005A  0EA3               	movlw	low _PortC
 13356  01005C  0100               	movlb	0	; () banked
 13357  01005E  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13358  010060  0E00               	movlw	high _PortC
 13359  010062  0100               	movlb	0	; () banked
 13360  010064  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13361  010066  0E03               	movlw	3
 13362  010068  0100               	movlb	0	; () banked
 13363  01006A  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13364  01006C  0E03               	movlw	3
 13365  01006E  0100               	movlb	0	; () banked
 13366  010070  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13367  010072  EC31  F088         	call	_Port_SetPinType	;wreg free
 13368                           
 13369                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 13370  010076  0EA3               	movlw	low _PortC
 13371  010078  0100               	movlb	0	; () banked
 13372  01007A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13373  01007C  0E00               	movlw	high _PortC
 13374  01007E  0100               	movlb	0	; () banked
 13375  010080  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13376  010082  0E05               	movlw	5
 13377  010084  0100               	movlb	0	; () banked
 13378  010086  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13379  010088  0E03               	movlw	3
 13380  01008A  0100               	movlb	0	; () banked
 13381  01008C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13382  01008E  EC31  F088         	call	_Port_SetPinType	;wreg free
 13383                           
 13384                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 13385  010092  0EA3               	movlw	low _PortC
 13386  010094  0100               	movlb	0	; () banked
 13387  010096  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13388  010098  0E00               	movlw	high _PortC
 13389  01009A  0100               	movlb	0	; () banked
 13390  01009C  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13391  01009E  0E04               	movlw	4
 13392  0100A0  0100               	movlb	0	; () banked
 13393  0100A2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13394  0100A4  0E00               	movlw	0
 13395  0100A6  0100               	movlb	0	; () banked
 13396  0100A8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13397  0100AA  EC31  F088         	call	_Port_SetPinType	;wreg free
 13398                           
 13399                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 13400  0100AE  0100               	movlb	0	; () banked
 13401  0100B0  EE20 F003          	lfsr	2,3
 13402  0100B4  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13403  0100B6  26D9               	addwf	fsr2l,f,c
 13404  0100B8  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13405  0100BA  22DA               	addwfc	fsr2h,f,c
 13406  0100BC  0EC7               	movlw	199
 13407  0100BE  6EDE               	movwf	postinc2,c
 13408  0100C0  0E0F               	movlw	15
 13409  0100C2  6EDD               	movwf	postdec2,c
 13410                           
 13411                           ; BSR set to: 0
 13412                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 13413  0100C4  0100               	movlb	0	; () banked
 13414  0100C6  EE20 F006          	lfsr	2,6
 13415  0100CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13416  0100CC  26D9               	addwf	fsr2l,f,c
 13417  0100CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13418  0100D0  22DA               	addwfc	fsr2h,f,c
 13419  0100D2  0EC6               	movlw	198
 13420  0100D4  6EDE               	movwf	postinc2,c
 13421  0100D6  0E0F               	movlw	15
 13422  0100D8  6EDD               	movwf	postdec2,c
 13423                           
 13424                           ; BSR set to: 0
 13425                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 13426  0100DA  0100               	movlb	0	; () banked
 13427  0100DC  EE20 F009          	lfsr	2,9
 13428  0100E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13429  0100E2  26D9               	addwf	fsr2l,f,c
 13430  0100E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13431  0100E6  22DA               	addwfc	fsr2h,f,c
 13432  0100E8  0EC9               	movlw	201
 13433  0100EA  D056               	goto	L11
 13434  0100EC                     
 13435                           ; BSR set to: 0
 13436                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 13437                           
 13438                           ; BSR set to: 0
 13439  0100EC  0E99               	movlw	low _PortD
 13440  0100EE  0100               	movlb	0	; () banked
 13441  0100F0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13442  0100F2  0E00               	movlw	high _PortD
 13443  0100F4  0100               	movlb	0	; () banked
 13444  0100F6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13445  0100F8  0E07               	movlw	7
 13446  0100FA  0100               	movlb	0	; () banked
 13447  0100FC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13448  0100FE  0E03               	movlw	3
 13449  010100  0100               	movlb	0	; () banked
 13450  010102  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13451  010104  EC31  F088         	call	_Port_SetPinType	;wreg free
 13452                           
 13453                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 13454  010108  0E99               	movlw	low _PortD
 13455  01010A  0100               	movlb	0	; () banked
 13456  01010C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13457  01010E  0E00               	movlw	high _PortD
 13458  010110  0100               	movlb	0	; () banked
 13459  010112  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13460  010114  0E06               	movlw	6
 13461  010116  0100               	movlb	0	; () banked
 13462  010118  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13463  01011A  0E03               	movlw	3
 13464  01011C  0100               	movlb	0	; () banked
 13465  01011E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13466  010120  EC31  F088         	call	_Port_SetPinType	;wreg free
 13467                           
 13468                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 13469  010124  0E99               	movlw	low _PortD
 13470  010126  0100               	movlb	0	; () banked
 13471  010128  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13472  01012A  0E00               	movlw	high _PortD
 13473  01012C  0100               	movlb	0	; () banked
 13474  01012E  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13475  010130  0E04               	movlw	4
 13476  010132  0100               	movlb	0	; () banked
 13477  010134  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13478  010136  0E03               	movlw	3
 13479  010138  0100               	movlb	0	; () banked
 13480  01013A  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13481  01013C  EC31  F088         	call	_Port_SetPinType	;wreg free
 13482                           
 13483                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 13484  010140  0E99               	movlw	low _PortD
 13485  010142  0100               	movlb	0	; () banked
 13486  010144  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 13487  010146  0E00               	movlw	high _PortD
 13488  010148  0100               	movlb	0	; () banked
 13489  01014A  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13490  01014C  0E05               	movlw	5
 13491  01014E  0100               	movlb	0	; () banked
 13492  010150  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 13493  010152  0E00               	movlw	0
 13494  010154  0100               	movlb	0	; () banked
 13495  010156  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 13496  010158  EC31  F088         	call	_Port_SetPinType	;wreg free
 13497                           
 13498                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 13499  01015C  0100               	movlb	0	; () banked
 13500  01015E  EE20 F003          	lfsr	2,3
 13501  010162  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13502  010164  26D9               	addwf	fsr2l,f,c
 13503  010166  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13504  010168  22DA               	addwfc	fsr2h,f,c
 13505  01016A  0E6D               	movlw	109
 13506  01016C  6EDE               	movwf	postinc2,c
 13507  01016E  0E0F               	movlw	15
 13508  010170  6EDD               	movwf	postdec2,c
 13509                           
 13510                           ; BSR set to: 0
 13511                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 13512  010172  0100               	movlb	0	; () banked
 13513  010174  EE20 F006          	lfsr	2,6
 13514  010178  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13515  01017A  26D9               	addwf	fsr2l,f,c
 13516  01017C  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13517  01017E  22DA               	addwfc	fsr2h,f,c
 13518  010180  0E6C               	movlw	108
 13519  010182  6EDE               	movwf	postinc2,c
 13520  010184  0E0F               	movlw	15
 13521  010186  6EDD               	movwf	postdec2,c
 13522                           
 13523                           ; BSR set to: 0
 13524                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 13525  010188  0100               	movlb	0	; () banked
 13526  01018A  EE20 F009          	lfsr	2,9
 13527  01018E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13528  010190  26D9               	addwf	fsr2l,f,c
 13529  010192  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13530  010194  22DA               	addwfc	fsr2h,f,c
 13531  010196  0E6F               	movlw	111
 13532  010198                     L11:
 13533  010198  6EDE               	movwf	postinc2,c
 13534  01019A  0E0F               	movlw	15
 13535  01019C  6EDD               	movwf	postdec2,c
 13536                           
 13537                           ;SPI.c: 68: break;
 13538  01019E  D009               	goto	l603
 13539  0101A0                     l601:
 13540                           
 13541                           ; BSR set to: 0
 13542                           
 13543                           ; BSR set to: 0
 13544  0101A0  0100               	movlb	0	; () banked
 13545  0101A2  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 13546                           
 13547                           ; Switch size 1, requested type "space"
 13548                           ; Number of cases is 2, Range of values is 0 to 1
 13549                           ; switch strategies available:
 13550                           ; Name         Instructions Cycles
 13551                           ; simple_byte            7     4 (average)
 13552                           ;	Chosen strategy is simple_byte
 13553  0101A4  0A00               	xorlw	0	; case 0
 13554  0101A6  B4D8               	btfsc	status,2,c
 13555  0101A8  D74A               	goto	l602
 13556  0101AA  0A01               	xorlw	1	; case 1
 13557  0101AC  A4D8               	btfss	status,2,c
 13558  0101AE  0012               	return	
 13559  0101B0  D79D               	goto	l604
 13560  0101B2                     l603:
 13561                           
 13562                           ; BSR set to: 0
 13563                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 13564                           
 13565                           ; BSR set to: 0
 13566  0101B2  0100               	movlb	0	; () banked
 13567  0101B4  EE20 F006          	lfsr	2,6
 13568  0101B8  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13569  0101BA  26D9               	addwf	fsr2l,f,c
 13570  0101BC  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13571  0101BE  22DA               	addwfc	fsr2h,f,c
 13572  0101C0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13573  0101C4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13574  0101C8  0E05               	movlw	5
 13575  0101CA  0100               	movlb	0	; () banked
 13576  0101CC  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13577  0101CE  0E00               	movlw	0
 13578  0101D0  0100               	movlb	0	; () banked
 13579  0101D2  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13580  0101D4  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13581                           
 13582                           ;SPI.c: 77: switch(pMode)
 13583  0101D8  D09C               	goto	l607
 13584  0101DA                     
 13585                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13586  0101DA  0100               	movlb	0	; () banked
 13587  0101DC  EE20 F006          	lfsr	2,6
 13588  0101E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13589  0101E2  26D9               	addwf	fsr2l,f,c
 13590  0101E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13591  0101E6  22DA               	addwfc	fsr2h,f,c
 13592  0101E8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13593  0101EC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13594  0101F0  0E04               	movlw	4
 13595  0101F2  0100               	movlb	0	; () banked
 13596  0101F4  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13597  0101F6  0E00               	movlw	0
 13598  0101F8  0100               	movlb	0	; () banked
 13599  0101FA  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13600  0101FC  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13601                           
 13602                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13603  010200  0100               	movlb	0	; () banked
 13604  010202  EE20 F003          	lfsr	2,3
 13605  010206  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13606  010208  26D9               	addwf	fsr2l,f,c
 13607  01020A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13608  01020C  22DA               	addwfc	fsr2h,f,c
 13609  01020E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13610  010212  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13611  010216  0E06               	movlw	6
 13612  010218  0100               	movlb	0	; () banked
 13613  01021A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13614  01021C  0E00               	movlw	0
 13615  01021E  0100               	movlb	0	; () banked
 13616  010220  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13617  010222  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13618                           
 13619                           ;SPI.c: 82: break;
 13620  010226  D084               	goto	l609
 13621  010228                     
 13622                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 13623  010228  0100               	movlb	0	; () banked
 13624  01022A  EE20 F006          	lfsr	2,6
 13625  01022E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13626  010230  26D9               	addwf	fsr2l,f,c
 13627  010232  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13628  010234  22DA               	addwfc	fsr2h,f,c
 13629  010236  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13630  01023A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13631  01023E  0E04               	movlw	4
 13632  010240  0100               	movlb	0	; () banked
 13633  010242  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13634  010244  0E00               	movlw	0
 13635  010246  0100               	movlb	0	; () banked
 13636  010248  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13637  01024A  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13638                           
 13639                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13640  01024E  0100               	movlb	0	; () banked
 13641  010250  EE20 F003          	lfsr	2,3
 13642  010254  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13643  010256  26D9               	addwf	fsr2l,f,c
 13644  010258  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13645  01025A  22DA               	addwfc	fsr2h,f,c
 13646  01025C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13647  010260  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13648  010264  0E06               	movlw	6
 13649  010266  0100               	movlb	0	; () banked
 13650  010268  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13651  01026A  0E01               	movlw	1
 13652  01026C  0100               	movlb	0	; () banked
 13653  01026E  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13654  010270  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13655                           
 13656                           ;SPI.c: 86: break;
 13657  010274  D05D               	goto	l609
 13658  010276                     
 13659                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13660  010276  0100               	movlb	0	; () banked
 13661  010278  EE20 F006          	lfsr	2,6
 13662  01027C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13663  01027E  26D9               	addwf	fsr2l,f,c
 13664  010280  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13665  010282  22DA               	addwfc	fsr2h,f,c
 13666  010284  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13667  010288  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13668  01028C  0E04               	movlw	4
 13669  01028E  0100               	movlb	0	; () banked
 13670  010290  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13671  010292  0E01               	movlw	1
 13672  010294  0100               	movlb	0	; () banked
 13673  010296  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13674  010298  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13675                           
 13676                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 13677  01029C  0100               	movlb	0	; () banked
 13678  01029E  EE20 F003          	lfsr	2,3
 13679  0102A2  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13680  0102A4  26D9               	addwf	fsr2l,f,c
 13681  0102A6  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13682  0102A8  22DA               	addwfc	fsr2h,f,c
 13683  0102AA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13684  0102AE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13685  0102B2  0E06               	movlw	6
 13686  0102B4  0100               	movlb	0	; () banked
 13687  0102B6  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13688  0102B8  0E00               	movlw	0
 13689  0102BA  0100               	movlb	0	; () banked
 13690  0102BC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13691  0102BE  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13692                           
 13693                           ;SPI.c: 90: break;
 13694  0102C2  D036               	goto	l609
 13695  0102C4                     
 13696                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 13697  0102C4  0100               	movlb	0	; () banked
 13698  0102C6  EE20 F006          	lfsr	2,6
 13699  0102CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13700  0102CC  26D9               	addwf	fsr2l,f,c
 13701  0102CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13702  0102D0  22DA               	addwfc	fsr2h,f,c
 13703  0102D2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13704  0102D6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13705  0102DA  0E04               	movlw	4
 13706  0102DC  0100               	movlb	0	; () banked
 13707  0102DE  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13708  0102E0  0E01               	movlw	1
 13709  0102E2  0100               	movlb	0	; () banked
 13710  0102E4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13711  0102E6  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13712                           
 13713                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 13714  0102EA  0100               	movlb	0	; () banked
 13715  0102EC  EE20 F003          	lfsr	2,3
 13716  0102F0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13717  0102F2  26D9               	addwf	fsr2l,f,c
 13718  0102F4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13719  0102F6  22DA               	addwfc	fsr2h,f,c
 13720  0102F8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13721  0102FC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13722  010300  0E06               	movlw	6
 13723  010302  0100               	movlb	0	; () banked
 13724  010304  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13725  010306  0E01               	movlw	1
 13726  010308  0100               	movlb	0	; () banked
 13727  01030A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13728  01030C  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13729                           
 13730                           ;SPI.c: 94: break;
 13731  010310  D00F               	goto	l609
 13732  010312                     l607:
 13733  010312  0100               	movlb	0	; () banked
 13734  010314  51E7               	movf	SPI_Init@pMode& (0+255),w,b
 13735                           
 13736                           ; Switch size 1, requested type "space"
 13737                           ; Number of cases is 4, Range of values is 0 to 3
 13738                           ; switch strategies available:
 13739                           ; Name         Instructions Cycles
 13740                           ; simple_byte           13     7 (average)
 13741                           ;	Chosen strategy is simple_byte
 13742  010316  0A00               	xorlw	0	; case 0
 13743  010318  B4D8               	btfsc	status,2,c
 13744  01031A  D75F               	goto	l608
 13745  01031C  0A01               	xorlw	1	; case 1
 13746  01031E  B4D8               	btfsc	status,2,c
 13747  010320  D783               	goto	l610
 13748  010322  0A03               	xorlw	3	; case 2
 13749  010324  B4D8               	btfsc	status,2,c
 13750  010326  D7A7               	goto	l611
 13751  010328  0A01               	xorlw	1	; case 3
 13752  01032A  A4D8               	btfss	status,2,c
 13753  01032C  0012               	return	
 13754  01032E  D7CA               	goto	l612
 13755  010330                     l609:
 13756                           
 13757                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 13758                           
 13759                           ; BSR set to: 0
 13760  010330  0100               	movlb	0	; () banked
 13761  010332  EE20 F006          	lfsr	2,6
 13762  010336  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13763  010338  26D9               	addwf	fsr2l,f,c
 13764  01033A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13765  01033C  22DA               	addwfc	fsr2h,f,c
 13766  01033E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13767  010342  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13768  010346  0E07               	movlw	7
 13769  010348  0100               	movlb	0	; () banked
 13770  01034A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13771  01034C  0E00               	movlw	0
 13772  01034E  0100               	movlb	0	; () banked
 13773  010350  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13774  010352  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13775                           
 13776                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 13777  010356  0100               	movlb	0	; () banked
 13778  010358  EE20 F006          	lfsr	2,6
 13779  01035C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13780  01035E  26D9               	addwf	fsr2l,f,c
 13781  010360  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13782  010362  22DA               	addwfc	fsr2h,f,c
 13783  010364  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13784  010368  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13785  01036C  0E06               	movlw	6
 13786  01036E  0100               	movlb	0	; () banked
 13787  010370  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13788  010372  0E00               	movlw	0
 13789  010374  0100               	movlb	0	; () banked
 13790  010376  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13791  010378  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13792                           
 13793                           ;SPI.c: 106: Timer2_Init(pClock);
 13794  01037C  C0E2  F0C2         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 13795  010380  C0E3  F0C3         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 13796  010384  C0E4  F0C4         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 13797  010388  C0E5  F0C5         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 13798  01038C  EC9B  F08D         	call	_Timer2_Init	;wreg free
 13799                           
 13800                           ;SPI.c: 112: SPI_DisableISR(pInput);
 13801  010390  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 13802  010394  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 13803  010398  ECC6  F09E         	call	_SPI_DisableISR	;wreg free
 13804                           
 13805                           ;SPI.c: 116: switch (pChannel)
 13806  01039C  D004               	goto	l614
 13807  01039E                     l615:
 13808                           
 13809                           ; BSR set to: 0
 13810  01039E  869F               	bsf	3999,3,c	;volatile
 13811  0103A0  D00B               	goto	l616
 13812  0103A2                     l617:
 13813                           
 13814                           ; BSR set to: 0
 13815  0103A2  8EA5               	bsf	4005,7,c	;volatile
 13816  0103A4  D009               	goto	l616
 13817  0103A6                     l614:
 13818                           
 13819                           ; BSR set to: 0
 13820  0103A6  0100               	movlb	0	; () banked
 13821  0103A8  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 13822                           
 13823                           ; Switch size 1, requested type "space"
 13824                           ; Number of cases is 2, Range of values is 0 to 1
 13825                           ; switch strategies available:
 13826                           ; Name         Instructions Cycles
 13827                           ; simple_byte            7     4 (average)
 13828                           ;	Chosen strategy is simple_byte
 13829  0103AA  0A00               	xorlw	0	; case 0
 13830  0103AC  B4D8               	btfsc	status,2,c
 13831  0103AE  D7F7               	goto	l615
 13832  0103B0  0A01               	xorlw	1	; case 1
 13833  0103B2  A4D8               	btfss	status,2,c
 13834  0103B4  0012               	return	
 13835  0103B6  D7F5               	goto	l617
 13836  0103B8                     l616:
 13837                           
 13838                           ; BSR set to: 0
 13839                           ;SPI.c: 124: SPI_DCS(pInput);
 13840                           
 13841                           ; BSR set to: 0
 13842  0103B8  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DCS@pInput
 13843  0103BC  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 13844  0103C0  EC7F  F09E         	call	_SPI_DCS	;wreg free
 13845                           
 13846                           ;SPI.c: 126: pInput->mBusy = 0;
 13847  0103C4  C0E8  FFD9         	movff	SPI_Init@pInput,fsr2l
 13848  0103C8  C0E9  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 13849  0103CC  0E00               	movlw	0
 13850  0103CE  6EDF               	movwf	indf2,c
 13851                           
 13852                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 13853  0103D0  0100               	movlb	0	; () banked
 13854  0103D2  EE20 F006          	lfsr	2,6
 13855  0103D6  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13856  0103D8  26D9               	addwf	fsr2l,f,c
 13857  0103DA  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13858  0103DC  22DA               	addwfc	fsr2h,f,c
 13859  0103DE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 13860  0103E2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 13861  0103E6  0E00               	movlw	0
 13862  0103E8  0100               	movlb	0	; () banked
 13863  0103EA  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 13864  0103EC  0E03               	movlw	3
 13865  0103EE  0100               	movlb	0	; () banked
 13866  0103F0  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 13867  0103F2  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 13868                           
 13869                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 13870  0103F6  0100               	movlb	0	; () banked
 13871  0103F8  EE20 F006          	lfsr	2,6
 13872  0103FC  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 13873  0103FE  26D9               	addwf	fsr2l,f,c
 13874  010400  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 13875  010402  22DA               	addwfc	fsr2h,f,c
 13876  010404  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 13877  010408  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 13878  01040C  0E05               	movlw	5
 13879  01040E  0100               	movlb	0	; () banked
 13880  010410  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 13881  010412  0E01               	movlw	1
 13882  010414  0100               	movlb	0	; () banked
 13883  010416  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 13884  010418  EC83  F09A         	call	_Byte_SetBit	;wreg free
 13885  01041C  0012               	return		;funcret
 13886  01041E                     __end_of_SPI_Init:
 13887                           	opt stack 0
 13888                           tosu	equ	0xFFF
 13889                           tosh	equ	0xFFE
 13890                           tosl	equ	0xFFD
 13891                           pclath	equ	0xFFA
 13892                           tblptru	equ	0xFF8
 13893                           tblptrh	equ	0xFF7
 13894                           tblptrl	equ	0xFF6
 13895                           tablat	equ	0xFF5
 13896                           prodh	equ	0xFF4
 13897                           prodl	equ	0xFF3
 13898                           intcon	equ	0xFF2
 13899                           postinc0	equ	0xFEE
 13900                           wreg	equ	0xFE8
 13901                           indf1	equ	0xFE7
 13902                           postdec1	equ	0xFE5
 13903                           fsr1h	equ	0xFE2
 13904                           fsr1l	equ	0xFE1
 13905                           indf2	equ	0xFDF
 13906                           postinc2	equ	0xFDE
 13907                           postdec2	equ	0xFDD
 13908                           plusw2	equ	0xFDB
 13909                           fsr2h	equ	0xFDA
 13910                           fsr2l	equ	0xFD9
 13911                           status	equ	0xFD8
 13912                           
 13913 ;; *************** function _Timer2_Init *****************
 13914 ;; Defined at:
 13915 ;;		line 10 in file "Library/Timer2.c"
 13916 ;; Parameters:    Size  Location     Type
 13917 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13918 ;; Auto vars:     Size  Location     Type
 13919 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 13920 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 13921 ;;  RDIV            4   18[BANK0 ] unsigned long 
 13922 ;; Return value:  Size  Location     Type
 13923 ;;                  1    wreg      void 
 13924 ;; Registers used:
 13925 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13926 ;; Tracked objects:
 13927 ;;		On entry : 0/0
 13928 ;;		On exit  : 0/0
 13929 ;;		Unchanged: 0/0
 13930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13931 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13934 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13935 ;;Total ram usage:       17 bytes
 13936 ;; Hardware stack levels used:    1
 13937 ;; Hardware stack levels required when called:    8
 13938 ;; This function calls:
 13939 ;;		_Timer2_Clear
 13940 ;;		___lldiv
 13941 ;; This function is called by:
 13942 ;;		_SPI_Init
 13943 ;; This function uses a non-reentrant model
 13944 ;;
 13945                           
 13946                           	psect	text70
 13947  011B36                     __ptext70:
 13948                           	opt stack 0
 13949  011B36                     _Timer2_Init:
 13950                           	opt stack 19
 13951                           
 13952                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 13953                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 13954                           ;Timer2.c: 14: static UINT8 PRE = 0;
 13955                           ;Timer2.c: 15: static UINT32 DIV = 0;
 13956                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 13957                           
 13958                           ;incstack = 0
 13959  011B36  0E00               	movlw	0
 13960  011B38  0100               	movlb	0	; () banked
 13961  011B3A  6FCB               	movwf	Timer2_Init@pCPUClock& (0+255),b
 13962  011B3C  0E6C               	movlw	108
 13963  011B3E  6FCC               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 13964  011B40  0EDC               	movlw	220
 13965  011B42  6FCD               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 13966  011B44  0E02               	movlw	2
 13967  011B46  6FCE               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 13971                           ;Timer2.c: 20: pFrequency *= 2;
 13972  011B48  0100               	movlb	0	; () banked
 13973  011B4A  90D8               	bcf	status,0,c
 13974  011B4C  37C2               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 13975  011B4E  37C3               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 13976  011B50  37C4               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 13977  011B52  37C5               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 13978                           
 13979                           ; BSR set to: 0
 13980                           ;Timer2.c: 23: pCPUClock /= 4;
 13981  011B54  0E02               	movlw	2
 13982  011B56  0100               	movlb	0	; () banked
 13983  011B58  6FC6               	movwf	??_Timer2_Init& (0+255),b
 13984  011B5A                     u6855:
 13985  011B5A  90D8               	bcf	status,0,c
 13986  011B5C  0100               	movlb	0	; () banked
 13987  011B5E  33CE               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 13988  011B60  33CD               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 13989  011B62  33CC               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 13990  011B64  33CB               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 13991  011B66  0100               	movlb	0	; () banked
 13992  011B68  2FC6               	decfsz	??_Timer2_Init& (0+255),f,b
 13993  011B6A  D7F7               	goto	u6855
 13994                           
 13995                           ; BSR set to: 0
 13996                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 13997  011B6C  C0CB  F0B5         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 13998  011B70  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 13999  011B74  C0CD  F0B7         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 14000  011B78  C0CE  F0B8         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 14001  011B7C  C0C2  F0B9         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 14002  011B80  C0C3  F0BA         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 14003  011B84  C0C4  F0BB         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 14004  011B88  C0C5  F0BC         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 14005  011B8C  EC60  F092         	call	___lldiv	;wreg free
 14006  011B90  C0B5  F0CF         	movff	?___lldiv,Timer2_Init@DIVIDE
 14007  011B94  C0B6  F0D0         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 14008  011B98  C0B7  F0D1         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 14009  011B9C  C0B8  F0D2         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 14010                           
 14011                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 14012  011BA0  D010               	goto	l1828
 14013  011BA2                     l10585:
 14014                           
 14015                           ;Timer2.c: 28: {
 14016                           ;Timer2.c: 29: RDIV = 0;
 14017  011BA2  0E00               	movlw	0
 14018  011BA4  0100               	movlb	0	; () banked
 14019  011BA6  6FC7               	movwf	Timer2_Init@RDIV& (0+255),b
 14020  011BA8  0E00               	movlw	0
 14021  011BAA  6FC8               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 14022  011BAC  0E00               	movlw	0
 14023  011BAE  6FC9               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 14024  011BB0  0E00               	movlw	0
 14025  011BB2  6FCA               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 14026                           
 14027                           ; BSR set to: 0
 14028                           ;Timer2.c: 30: INDEX ++;
 14029  011BB4  0100               	movlb	0	; () banked
 14030  011BB6  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 14031                           
 14032                           ; BSR set to: 0
 14033                           ;Timer2.c: 31: if (INDEX >= 3)
 14034  011BB8  0E02               	movlw	2
 14035  011BBA  0100               	movlb	0	; () banked
 14036  011BBC  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 14037  011BBE  D001               	goto	l1828
 14038  011BC0  D026               	goto	u6870
 14039  011BC2                     l1828:
 14040                           
 14041                           ; BSR set to: 0
 14042                           
 14043                           ; BSR set to: 0
 14044  011BC2  C0CF  F0B5         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 14045  011BC6  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 14046  011BCA  C0D1  F0B7         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 14047  011BCE  C0D2  F0B8         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 14048  011BD2  0100               	movlb	0	; () banked
 14049  011BD4  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 14050  011BD6  0D01               	mullw	1
 14051  011BD8  0EDC               	movlw	low Timer2_Init@PRESCALE
 14052  011BDA  24F3               	addwf	prodl,w,c
 14053  011BDC  6EF6               	movwf	tblptrl,c
 14054  011BDE  0EFD               	movlw	high Timer2_Init@PRESCALE
 14055  011BE0  20F4               	addwfc	prodh,w,c
 14056  011BE2  6EF7               	movwf	tblptrh,c
 14057  011BE4                     	if	1	;There are 3 active tblptr bytes
 14058  011BE4  6AF8               	clrf	tblptru,c
 14059  011BE6  0E00               	movlw	low (__mediumconst shr (0+16))
 14060  011BE8  22F8               	addwfc	tblptru,f,c
 14061  011BEA                     	endif
 14062  011BEA  0008               	tblrd		*
 14063  011BEC  50F5               	movf	tablat,w,c
 14064  011BEE  0100               	movlb	0	; () banked
 14065  011BF0  6FB9               	movwf	___lldiv@divisor& (0+255),b
 14066  011BF2  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 14067  011BF4  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 14068  011BF6  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 14069  011BF8  EC60  F092         	call	___lldiv	;wreg free
 14070  011BFC  0100               	movlb	0	; () banked
 14071  011BFE  51B8               	movf	(?___lldiv+3)& (0+255),w,b
 14072  011C00  0100               	movlb	0	; () banked
 14073  011C02  11B7               	iorwf	(?___lldiv+2)& (0+255),w,b
 14074  011C04  E1CE               	bnz	l10585
 14075  011C06  0100               	movlb	0	; () banked
 14076  011C08  05B6               	decf	(?___lldiv+1)& (0+255),w,b
 14077  011C0A  B0D8               	btfsc	status,0,c
 14078  011C0C  D7CA               	goto	l1827
 14079  011C0E                     u6870:
 14080                           
 14081                           ; BSR set to: 0
 14082                           ;Timer2.c: 33: }
 14083                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 14084                           
 14085                           ; BSR set to: 0
 14086  011C0E  50CA               	movf	4042,w,c	;volatile
 14087  011C10  0100               	movlb	0	; () banked
 14088  011C12  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 14089  011C14  0BFC               	andlw	-4
 14090  011C16  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 14091  011C18  6ECA               	movwf	4042,c	;volatile
 14092                           
 14093                           ; BSR set to: 0
 14094                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 14095  011C1A  84CA               	bsf	4042,2,c	;volatile
 14096                           
 14097                           ; BSR set to: 0
 14098                           ;Timer2.c: 44: Timer2_Clear();
 14099  011C1C  EC26  F0A0         	call	_Timer2_Clear	;wreg free
 14100                           
 14101                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 14102  011C20  0100               	movlb	0	; () banked
 14103  011C22  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 14104  011C24  0D01               	mullw	1
 14105  011C26  0EDC               	movlw	low Timer2_Init@PRESCALE
 14106  011C28  24F3               	addwf	prodl,w,c
 14107  011C2A  6EF6               	movwf	tblptrl,c
 14108  011C2C  0EFD               	movlw	high Timer2_Init@PRESCALE
 14109  011C2E  20F4               	addwfc	prodh,w,c
 14110  011C30  6EF7               	movwf	tblptrh,c
 14111  011C32                     	if	1	;There are 3 active tblptr bytes
 14112  011C32  6AF8               	clrf	tblptru,c
 14113  011C34  0E00               	movlw	low (__mediumconst shr (0+16))
 14114  011C36  22F8               	addwfc	tblptru,f,c
 14115  011C38                     	endif
 14116  011C38  0008               	tblrd		*
 14117  011C3A  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 14118                           
 14119                           ; BSR set to: 0
 14120                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 14121  011C3E  0EFF               	movlw	255
 14122  011C40  0100               	movlb	0	; () banked
 14123  011C42  25CF               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 14124  011C44  0103               	movlb	3	; () banked
 14125  011C46  6F1E               	movwf	Timer2_Init@DIV& (0+255),b
 14126  011C48  0EFF               	movlw	255
 14127  011C4A  0100               	movlb	0	; () banked
 14128  011C4C  21D0               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 14129  011C4E  0103               	movlb	3	; () banked
 14130  011C50  6F1F               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 14131  011C52  0EFF               	movlw	255
 14132  011C54  0100               	movlb	0	; () banked
 14133  011C56  21D1               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 14134  011C58  0103               	movlb	3	; () banked
 14135  011C5A  6F20               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 14136  011C5C  0EFF               	movlw	255
 14137  011C5E  0100               	movlb	0	; () banked
 14138  011C60  21D2               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 14139  011C62  0103               	movlb	3	; () banked
 14140  011C64  6F21               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 14141                           
 14142                           ; BSR set to: 3
 14143                           ;Timer2.c: 48: INDEX = DIV/PRE;
 14144  011C66  C31E  F0B5         	movff	Timer2_Init@DIV,___lldiv@dividend
 14145  011C6A  C31F  F0B6         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 14146  011C6E  C320  F0B7         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 14147  011C72  C321  F0B8         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 14148  011C76  0100               	movlb	0	; () banked
 14149  011C78  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 14150  011C7A  0100               	movlb	0	; () banked
 14151  011C7C  6FB9               	movwf	___lldiv@divisor& (0+255),b
 14152  011C7E  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 14153  011C80  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 14154  011C82  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 14155  011C84  EC60  F092         	call	___lldiv	;wreg free
 14156  011C88  0100               	movlb	0	; () banked
 14157  011C8A  51B5               	movf	?___lldiv& (0+255),w,b
 14158  011C8C  0100               	movlb	0	; () banked
 14159  011C8E  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;Timer2.c: 49: PR2 = INDEX;
 14163  011C90  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 14164                           
 14165                           ; BSR set to: 0
 14166  011C94  0012               	return		;funcret
 14167  011C96                     __end_of_Timer2_Init:
 14168                           	opt stack 0
 14169                           tosu	equ	0xFFF
 14170                           tosh	equ	0xFFE
 14171                           tosl	equ	0xFFD
 14172                           pclath	equ	0xFFA
 14173                           tblptru	equ	0xFF8
 14174                           tblptrh	equ	0xFF7
 14175                           tblptrl	equ	0xFF6
 14176                           tablat	equ	0xFF5
 14177                           prodh	equ	0xFF4
 14178                           prodl	equ	0xFF3
 14179                           intcon	equ	0xFF2
 14180                           postinc0	equ	0xFEE
 14181                           wreg	equ	0xFE8
 14182                           indf1	equ	0xFE7
 14183                           postdec1	equ	0xFE5
 14184                           fsr1h	equ	0xFE2
 14185                           fsr1l	equ	0xFE1
 14186                           indf2	equ	0xFDF
 14187                           postinc2	equ	0xFDE
 14188                           postdec2	equ	0xFDD
 14189                           plusw2	equ	0xFDB
 14190                           fsr2h	equ	0xFDA
 14191                           fsr2l	equ	0xFD9
 14192                           status	equ	0xFD8
 14193                           
 14194 ;; *************** function ___lldiv *****************
 14195 ;; Defined at:
 14196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 14197 ;; Parameters:    Size  Location     Type
 14198 ;;  dividend        4    0[BANK0 ] unsigned long 
 14199 ;;  divisor         4    4[BANK0 ] unsigned long 
 14200 ;; Auto vars:     Size  Location     Type
 14201 ;;  quotient        4    8[BANK0 ] unsigned long 
 14202 ;;  counter         1   12[BANK0 ] unsigned char 
 14203 ;; Return value:  Size  Location     Type
 14204 ;;                  4    0[BANK0 ] unsigned long 
 14205 ;; Registers used:
 14206 ;;		wreg, status,2, status,0
 14207 ;; Tracked objects:
 14208 ;;		On entry : 0/0
 14209 ;;		On exit  : 0/0
 14210 ;;		Unchanged: 0/0
 14211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14212 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14213 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14215 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14216 ;;Total ram usage:       13 bytes
 14217 ;; Hardware stack levels used:    1
 14218 ;; Hardware stack levels required when called:    7
 14219 ;; This function calls:
 14220 ;;		Nothing
 14221 ;; This function is called by:
 14222 ;;		_Timer2_Init
 14223 ;;		_rand_between
 14224 ;;		_I2C_Init
 14225 ;;		_Timer0_Init
 14226 ;; This function uses a non-reentrant model
 14227 ;;
 14228                           
 14229                           	psect	text71
 14230  0124C0                     __ptext71:
 14231                           	opt stack 0
 14232  0124C0                     ___lldiv:
 14233                           	opt stack 19
 14234                           
 14235                           ; BSR set to: 0
 14236                           ;incstack = 0
 14237  0124C0  0E00               	movlw	0
 14238  0124C2  0100               	movlb	0	; () banked
 14239  0124C4  6FBD               	movwf	___lldiv@quotient& (0+255),b
 14240  0124C6  0E00               	movlw	0
 14241  0124C8  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
 14242  0124CA  0E00               	movlw	0
 14243  0124CC  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
 14244  0124CE  0E00               	movlw	0
 14245  0124D0  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
 14246                           
 14247                           ; BSR set to: 0
 14248  0124D2  0100               	movlb	0	; () banked
 14249  0124D4  51B9               	movf	___lldiv@divisor& (0+255),w,b
 14250  0124D6  0100               	movlb	0	; () banked
 14251  0124D8  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 14252  0124DA  0100               	movlb	0	; () banked
 14253  0124DC  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 14254  0124DE  0100               	movlb	0	; () banked
 14255  0124E0  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 14256  0124E2  B4D8               	btfsc	status,2,c
 14257  0124E4  D042               	goto	l2637
 14258                           
 14259                           ; BSR set to: 0
 14260  0124E6  0E01               	movlw	1
 14261  0124E8  0100               	movlb	0	; () banked
 14262  0124EA  6FC1               	movwf	___lldiv@counter& (0+255),b
 14263  0124EC  D008               	goto	l2632
 14264  0124EE                     
 14265                           ; BSR set to: 0
 14266                           
 14267                           ; BSR set to: 0
 14268  0124EE  0100               	movlb	0	; () banked
 14269  0124F0  90D8               	bcf	status,0,c
 14270  0124F2  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
 14271  0124F4  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 14272  0124F6  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 14273  0124F8  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 14274  0124FA  0100               	movlb	0	; () banked
 14275  0124FC  2BC1               	incf	___lldiv@counter& (0+255),f,b
 14276  0124FE                     l2632:
 14277                           
 14278                           ; BSR set to: 0
 14279                           
 14280                           ; BSR set to: 0
 14281  0124FE  0100               	movlb	0	; () banked
 14282  012500  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 14283  012502  D7F5               	goto	l2633
 14284  012504                     u6730:
 14285                           
 14286                           ; BSR set to: 0
 14287                           
 14288                           ; BSR set to: 0
 14289                           
 14290                           ; BSR set to: 0
 14291  012504  0100               	movlb	0	; () banked
 14292  012506  90D8               	bcf	status,0,c
 14293  012508  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
 14294  01250A  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 14295  01250C  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 14296  01250E  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 14297                           
 14298                           ; BSR set to: 0
 14299  012510  0100               	movlb	0	; () banked
 14300  012512  51B9               	movf	___lldiv@divisor& (0+255),w,b
 14301  012514  0100               	movlb	0	; () banked
 14302  012516  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
 14303  012518  0100               	movlb	0	; () banked
 14304  01251A  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14305  01251C  0100               	movlb	0	; () banked
 14306  01251E  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 14307  012520  0100               	movlb	0	; () banked
 14308  012522  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14309  012524  0100               	movlb	0	; () banked
 14310  012526  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 14311  012528  0100               	movlb	0	; () banked
 14312  01252A  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14313  01252C  0100               	movlb	0	; () banked
 14314  01252E  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 14315  012530  A0D8               	btfss	status,0,c
 14316  012532  D012               	goto	l2636
 14317                           
 14318                           ; BSR set to: 0
 14319  012534  0100               	movlb	0	; () banked
 14320  012536  51B9               	movf	___lldiv@divisor& (0+255),w,b
 14321  012538  0100               	movlb	0	; () banked
 14322  01253A  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
 14323  01253C  0100               	movlb	0	; () banked
 14324  01253E  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 14325  012540  0100               	movlb	0	; () banked
 14326  012542  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 14327  012544  0100               	movlb	0	; () banked
 14328  012546  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 14329  012548  0100               	movlb	0	; () banked
 14330  01254A  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 14331  01254C  0100               	movlb	0	; () banked
 14332  01254E  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 14333  012550  0100               	movlb	0	; () banked
 14334  012552  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 14335                           
 14336                           ; BSR set to: 0
 14337  012554  0100               	movlb	0	; () banked
 14338  012556  81BD               	bsf	___lldiv@quotient& (0+255),0,b
 14339  012558                     l2636:
 14340                           
 14341                           ; BSR set to: 0
 14342                           
 14343                           ; BSR set to: 0
 14344  012558  0100               	movlb	0	; () banked
 14345  01255A  90D8               	bcf	status,0,c
 14346  01255C  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 14347  01255E  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 14348  012560  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 14349  012562  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
 14350                           
 14351                           ; BSR set to: 0
 14352  012564  0100               	movlb	0	; () banked
 14353  012566  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
 14354  012568  D7CD               	goto	u6730
 14355  01256A                     l2637:
 14356                           
 14357                           ; BSR set to: 0
 14358                           
 14359                           ; BSR set to: 0
 14360  01256A  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
 14361  01256E  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
 14362  012572  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
 14363  012576  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
 14364                           
 14365                           ; BSR set to: 0
 14366  01257A  0012               	return		;funcret
 14367  01257C                     __end_of___lldiv:
 14368                           	opt stack 0
 14369                           tosu	equ	0xFFF
 14370                           tosh	equ	0xFFE
 14371                           tosl	equ	0xFFD
 14372                           pclath	equ	0xFFA
 14373                           tblptru	equ	0xFF8
 14374                           tblptrh	equ	0xFF7
 14375                           tblptrl	equ	0xFF6
 14376                           tablat	equ	0xFF5
 14377                           prodh	equ	0xFF4
 14378                           prodl	equ	0xFF3
 14379                           intcon	equ	0xFF2
 14380                           postinc0	equ	0xFEE
 14381                           wreg	equ	0xFE8
 14382                           indf1	equ	0xFE7
 14383                           postdec1	equ	0xFE5
 14384                           fsr1h	equ	0xFE2
 14385                           fsr1l	equ	0xFE1
 14386                           indf2	equ	0xFDF
 14387                           postinc2	equ	0xFDE
 14388                           postdec2	equ	0xFDD
 14389                           plusw2	equ	0xFDB
 14390                           fsr2h	equ	0xFDA
 14391                           fsr2l	equ	0xFD9
 14392                           status	equ	0xFD8
 14393                           
 14394 ;; *************** function _Timer2_Clear *****************
 14395 ;; Defined at:
 14396 ;;		line 3 in file "Library/Timer2.c"
 14397 ;; Parameters:    Size  Location     Type
 14398 ;;		None
 14399 ;; Auto vars:     Size  Location     Type
 14400 ;;		None
 14401 ;; Return value:  Size  Location     Type
 14402 ;;                  1    wreg      void 
 14403 ;; Registers used:
 14404 ;;		None
 14405 ;; Tracked objects:
 14406 ;;		On entry : 0/0
 14407 ;;		On exit  : 0/0
 14408 ;;		Unchanged: 0/0
 14409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14411 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14413 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14414 ;;Total ram usage:        0 bytes
 14415 ;; Hardware stack levels used:    1
 14416 ;; Hardware stack levels required when called:    7
 14417 ;; This function calls:
 14418 ;;		Nothing
 14419 ;; This function is called by:
 14420 ;;		_Timer2_Init
 14421 ;; This function uses a non-reentrant model
 14422 ;;
 14423                           
 14424                           	psect	text72
 14425  01404C                     __ptext72:
 14426                           	opt stack 0
 14427  01404C                     _Timer2_Clear:
 14428                           	opt stack 19
 14429                           
 14430                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 14431                           
 14432                           ; BSR set to: 0
 14433                           ;incstack = 0
 14434  01404C  929E               	bcf	3998,1,c	;volatile
 14435                           
 14436                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 14437  01404E  929D               	bcf	3997,1,c	;volatile
 14438                           
 14439                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 14440  014050  929F               	bcf	3999,1,c	;volatile
 14441  014052  0012               	return		;funcret
 14442  014054                     __end_of_Timer2_Clear:
 14443                           	opt stack 0
 14444                           tosu	equ	0xFFF
 14445                           tosh	equ	0xFFE
 14446                           tosl	equ	0xFFD
 14447                           pclath	equ	0xFFA
 14448                           tblptru	equ	0xFF8
 14449                           tblptrh	equ	0xFF7
 14450                           tblptrl	equ	0xFF6
 14451                           tablat	equ	0xFF5
 14452                           prodh	equ	0xFF4
 14453                           prodl	equ	0xFF3
 14454                           intcon	equ	0xFF2
 14455                           postinc0	equ	0xFEE
 14456                           wreg	equ	0xFE8
 14457                           indf1	equ	0xFE7
 14458                           postdec1	equ	0xFE5
 14459                           fsr1h	equ	0xFE2
 14460                           fsr1l	equ	0xFE1
 14461                           indf2	equ	0xFDF
 14462                           postinc2	equ	0xFDE
 14463                           postdec2	equ	0xFDD
 14464                           plusw2	equ	0xFDB
 14465                           fsr2h	equ	0xFDA
 14466                           fsr2l	equ	0xFD9
 14467                           status	equ	0xFD8
 14468                           
 14469 ;; *************** function _SPI_DisableISR *****************
 14470 ;; Defined at:
 14471 ;;		line 181 in file "Library/SPI.c"
 14472 ;; Parameters:    Size  Location     Type
 14473 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14474 ;;		 -> SPI1(11), SPI2(11), 
 14475 ;; Auto vars:     Size  Location     Type
 14476 ;;		None
 14477 ;; Return value:  Size  Location     Type
 14478 ;;                  1    wreg      void 
 14479 ;; Registers used:
 14480 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14481 ;; Tracked objects:
 14482 ;;		On entry : 0/0
 14483 ;;		On exit  : 0/0
 14484 ;;		Unchanged: 0/0
 14485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14486 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14487 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14488 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14489 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14490 ;;Total ram usage:        2 bytes
 14491 ;; Hardware stack levels used:    1
 14492 ;; Hardware stack levels required when called:    7
 14493 ;; This function calls:
 14494 ;;		Nothing
 14495 ;; This function is called by:
 14496 ;;		_SPI_Init
 14497 ;; This function uses a non-reentrant model
 14498 ;;
 14499                           
 14500                           	psect	text73
 14501  013D8C                     __ptext73:
 14502                           	opt stack 0
 14503  013D8C                     _SPI_DisableISR:
 14504                           	opt stack 20
 14505                           
 14506                           ;SPI.c: 183: switch (pInput->mChannel)
 14507                           
 14508                           ;incstack = 0
 14509  013D8C  D004               	goto	l654
 14510  013D8E                     l655:
 14511                           
 14512                           ; BSR set to: 0
 14513  013D8E  969D               	bcf	3997,3,c	;volatile
 14514  013D90  0012               	return	
 14515  013D92                     l657:
 14516                           
 14517                           ; BSR set to: 0
 14518  013D92  9EA3               	bcf	4003,7,c	;volatile
 14519                           
 14520                           ; BSR set to: 0
 14521                           ;SPI.c: 188: };
 14522                           
 14523                           ; BSR set to: 0
 14524                           
 14525                           ;SPI.c: 187: default: return;
 14526  013D94  0012               	return	
 14527  013D96                     l654:
 14528                           
 14529                           ; BSR set to: 0
 14530  013D96  0100               	movlb	0	; () banked
 14531  013D98  EE20 F002          	lfsr	2,2
 14532  013D9C  51B5               	movf	SPI_DisableISR@pInput& (0+255),w,b
 14533  013D9E  26D9               	addwf	fsr2l,f,c
 14534  013DA0  51B6               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 14535  013DA2  22DA               	addwfc	fsr2h,f,c
 14536  013DA4  50DF               	movf	indf2,w,c
 14537                           
 14538                           ; Switch size 1, requested type "space"
 14539                           ; Number of cases is 2, Range of values is 0 to 1
 14540                           ; switch strategies available:
 14541                           ; Name         Instructions Cycles
 14542                           ; simple_byte            7     4 (average)
 14543                           ;	Chosen strategy is simple_byte
 14544  013DA6  0A00               	xorlw	0	; case 0
 14545  013DA8  B4D8               	btfsc	status,2,c
 14546  013DAA  D7F1               	goto	l655
 14547  013DAC  0A01               	xorlw	1	; case 1
 14548  013DAE  A4D8               	btfss	status,2,c
 14549  013DB0  0012               	return	
 14550  013DB2  D7EF               	goto	l657
 14551  013DB4                     __end_of_SPI_DisableISR:
 14552                           	opt stack 0
 14553                           tosu	equ	0xFFF
 14554                           tosh	equ	0xFFE
 14555                           tosl	equ	0xFFD
 14556                           pclath	equ	0xFFA
 14557                           tblptru	equ	0xFF8
 14558                           tblptrh	equ	0xFF7
 14559                           tblptrl	equ	0xFF6
 14560                           tablat	equ	0xFF5
 14561                           prodh	equ	0xFF4
 14562                           prodl	equ	0xFF3
 14563                           intcon	equ	0xFF2
 14564                           postinc0	equ	0xFEE
 14565                           wreg	equ	0xFE8
 14566                           indf1	equ	0xFE7
 14567                           postdec1	equ	0xFE5
 14568                           fsr1h	equ	0xFE2
 14569                           fsr1l	equ	0xFE1
 14570                           indf2	equ	0xFDF
 14571                           postinc2	equ	0xFDE
 14572                           postdec2	equ	0xFDD
 14573                           plusw2	equ	0xFDB
 14574                           fsr2h	equ	0xFDA
 14575                           fsr2l	equ	0xFD9
 14576                           status	equ	0xFD8
 14577                           
 14578 ;; *************** function _SPI_DCS *****************
 14579 ;; Defined at:
 14580 ;;		line 219 in file "Library/SPI.c"
 14581 ;; Parameters:    Size  Location     Type
 14582 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 14583 ;;		 -> SPI1(11), SPI2(11), 
 14584 ;; Auto vars:     Size  Location     Type
 14585 ;;		None
 14586 ;; Return value:  Size  Location     Type
 14587 ;;                  1    wreg      void 
 14588 ;; Registers used:
 14589 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 14590 ;; Tracked objects:
 14591 ;;		On entry : 0/0
 14592 ;;		On exit  : 0/0
 14593 ;;		Unchanged: 0/0
 14594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14595 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14596 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14598 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14599 ;;Total ram usage:        2 bytes
 14600 ;; Hardware stack levels used:    1
 14601 ;; Hardware stack levels required when called:    7
 14602 ;; This function calls:
 14603 ;;		Nothing
 14604 ;; This function is called by:
 14605 ;;		_SPI_Init
 14606 ;; This function uses a non-reentrant model
 14607 ;;
 14608                           
 14609                           	psect	text74
 14610  013CFE                     __ptext74:
 14611                           	opt stack 0
 14612  013CFE                     _SPI_DCS:
 14613                           	opt stack 20
 14614                           
 14615                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 14616                           
 14617                           ; BSR set to: 0
 14618                           ;incstack = 0
 14619  013CFE  0100               	movlb	0	; () banked
 14620  013D00  EE20 F002          	lfsr	2,2
 14621  013D04  51B5               	movf	SPI_DCS@pInput& (0+255),w,b
 14622  013D06  26D9               	addwf	fsr2l,f,c
 14623  013D08  51B6               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 14624  013D0A  22DA               	addwfc	fsr2h,f,c
 14625  013D0C  50DF               	movf	indf2,w,c
 14626  013D0E  A4D8               	btfss	status,2,c
 14627  013D10  D007               	goto	l673
 14628                           
 14629                           ; BSR set to: 0
 14630                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 14631  013D12  C0A7  FFD9         	movff	_PortC+4,fsr2l
 14632  013D16  C0A8  FFDA         	movff	_PortC+5,fsr2h
 14633  013D1A  0100               	movlb	0	; () banked
 14634  013D1C  84DF               	bsf	indf2,2,c
 14635  013D1E  0012               	return	
 14636  013D20                     l673:
 14637                           
 14638                           ; BSR set to: 0
 14639                           ;SPI.c: 223: else
 14640                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 14641                           
 14642                           ; BSR set to: 0
 14643  013D20  C09D  FFD9         	movff	_PortD+4,fsr2l
 14644  013D24  C09E  FFDA         	movff	_PortD+5,fsr2h
 14645  013D28  0100               	movlb	0	; () banked
 14646  013D2A  8EDF               	bsf	indf2,7,c
 14647  013D2C  0012               	return	
 14648  013D2E                     __end_of_SPI_DCS:
 14649                           	opt stack 0
 14650                           tosu	equ	0xFFF
 14651                           tosh	equ	0xFFE
 14652                           tosl	equ	0xFFD
 14653                           pclath	equ	0xFFA
 14654                           tblptru	equ	0xFF8
 14655                           tblptrh	equ	0xFF7
 14656                           tblptrl	equ	0xFF6
 14657                           tablat	equ	0xFF5
 14658                           prodh	equ	0xFF4
 14659                           prodl	equ	0xFF3
 14660                           intcon	equ	0xFF2
 14661                           postinc0	equ	0xFEE
 14662                           wreg	equ	0xFE8
 14663                           indf1	equ	0xFE7
 14664                           postdec1	equ	0xFE5
 14665                           fsr1h	equ	0xFE2
 14666                           fsr1l	equ	0xFE1
 14667                           indf2	equ	0xFDF
 14668                           postinc2	equ	0xFDE
 14669                           postdec2	equ	0xFDD
 14670                           plusw2	equ	0xFDB
 14671                           fsr2h	equ	0xFDA
 14672                           fsr2l	equ	0xFD9
 14673                           status	equ	0xFD8
 14674                           
 14675 ;; *************** function _Button_Init *****************
 14676 ;; Defined at:
 14677 ;;		line 18 in file "Library/Button.c"
 14678 ;; Parameters:    Size  Location     Type
 14679 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 14680 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 14681 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 14682 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 14683 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 14684 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 14685 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 14686 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 14687 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 14688 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 14689 ;; Auto vars:     Size  Location     Type
 14690 ;;		None
 14691 ;; Return value:  Size  Location     Type
 14692 ;;                  1    wreg      void 
 14693 ;; Registers used:
 14694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14695 ;; Tracked objects:
 14696 ;;		On entry : 0/0
 14697 ;;		On exit  : 0/0
 14698 ;;		Unchanged: 0/0
 14699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14700 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14703 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14704 ;;Total ram usage:       13 bytes
 14705 ;; Hardware stack levels used:    1
 14706 ;; Hardware stack levels required when called:   15
 14707 ;; This function calls:
 14708 ;;		_HMI_InitButtons
 14709 ;;		_MXK_InitDIPSwitch
 14710 ;;		_MXK_InitTestButton
 14711 ;; This function is called by:
 14712 ;;		_HMI_Init
 14713 ;;		_FunctInitButton
 14714 ;; This function uses a non-reentrant model
 14715 ;;
 14716                           
 14717                           	psect	text75
 14718  0120D8                     __ptext75:
 14719                           	opt stack 0
 14720  0120D8                     _Button_Init:
 14721                           	opt stack 14
 14722                           
 14723                           ;Button.c: 21: if(pInput==(void*)0)
 14724                           
 14725                           ; BSR set to: 0
 14726                           ;incstack = 0
 14727  0120D8  0101               	movlb	1	; () banked
 14728  0120DA  5100               	movf	Button_Init@pInput& (0+255),w,b
 14729  0120DC  0101               	movlb	1	; () banked
 14730  0120DE  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 14731  0120E0  B4D8               	btfsc	status,2,c
 14732  0120E2  0012               	return	
 14733                           
 14734                           ; BSR set to: 1
 14735                           ;Button.c: 23: if(pInitIO==(void*)0)
 14736                           
 14737                           ; BSR set to: 1
 14738                           
 14739                           ; BSR set to: 1
 14740                           ;Button.c: 22: return;
 14741  0120E4  0101               	movlb	1	; () banked
 14742  0120E6  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 14743  0120E8  0101               	movlb	1	; () banked
 14744  0120EA  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 14745  0120EC  0101               	movlb	1	; () banked
 14746  0120EE  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 14747  0120F0  B4D8               	btfsc	status,2,c
 14748  0120F2  0012               	return	
 14749                           
 14750                           ; BSR set to: 1
 14751                           ;Button.c: 25: if(pGetState==(void*)0)
 14752                           
 14753                           ; BSR set to: 1
 14754                           
 14755                           ; BSR set to: 1
 14756                           ;Button.c: 24: return;
 14757  0120F4  0101               	movlb	1	; () banked
 14758  0120F6  5107               	movf	Button_Init@pGetState& (0+255),w,b
 14759  0120F8  0101               	movlb	1	; () banked
 14760  0120FA  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 14761  0120FC  0101               	movlb	1	; () banked
 14762  0120FE  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 14763  012100  B4D8               	btfsc	status,2,c
 14764  012102  0012               	return	
 14765                           
 14766                           ; BSR set to: 1
 14767                           ;Button.c: 27: if(pFunction==(void*)0)
 14768                           
 14769                           ; BSR set to: 1
 14770                           
 14771                           ; BSR set to: 1
 14772                           ;Button.c: 26: return;
 14773  012104  0101               	movlb	1	; () banked
 14774  012106  510A               	movf	Button_Init@pFunction& (0+255),w,b
 14775  012108  0101               	movlb	1	; () banked
 14776  01210A  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 14777  01210C  0101               	movlb	1	; () banked
 14778  01210E  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 14779  012110  B4D8               	btfsc	status,2,c
 14780  012112  0012               	return	
 14781                           
 14782                           ; BSR set to: 1
 14783                           ;Button.c: 30: if(pThreshold == 0)
 14784                           
 14785                           ; BSR set to: 1
 14786                           
 14787                           ; BSR set to: 1
 14788                           ;Button.c: 28: return;
 14789  012114  0101               	movlb	1	; () banked
 14790  012116  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 14791  012118  0101               	movlb	1	; () banked
 14792  01211A  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 14793  01211C  A4D8               	btfss	status,2,c
 14794  01211E  D005               	goto	l8
 14795                           
 14796                           ; BSR set to: 1
 14797                           ;Button.c: 31: pThreshold = 1;
 14798  012120  0E00               	movlw	0
 14799  012122  0101               	movlb	1	; () banked
 14800  012124  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 14801  012126  0E01               	movlw	1
 14802  012128  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 14803  01212A                     l8:
 14804                           
 14805                           ; BSR set to: 1
 14806                           ;Button.c: 34: pInput->mState = 0;
 14807                           
 14808                           ; BSR set to: 1
 14809  01212A  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 14810  01212E  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 14811  012132  0E00               	movlw	0
 14812  012134  6EDF               	movwf	indf2,c
 14813                           
 14814                           ; BSR set to: 1
 14815                           ;Button.c: 35: pInput->mCount = 0;
 14816  012136  0101               	movlb	1	; () banked
 14817  012138  EE20 F001          	lfsr	2,1
 14818  01213C  5100               	movf	Button_Init@pInput& (0+255),w,b
 14819  01213E  26D9               	addwf	fsr2l,f,c
 14820  012140  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14821  012142  22DA               	addwfc	fsr2h,f,c
 14822  012144  0E00               	movlw	0
 14823  012146  6EDF               	movwf	indf2,c
 14824                           
 14825                           ; BSR set to: 1
 14826                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 14827  012148  0101               	movlb	1	; () banked
 14828  01214A  EE20 F002          	lfsr	2,2
 14829  01214E  5100               	movf	Button_Init@pInput& (0+255),w,b
 14830  012150  26D9               	addwf	fsr2l,f,c
 14831  012152  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14832  012154  22DA               	addwfc	fsr2h,f,c
 14833  012156  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 14834  01215A  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 14835                           
 14836                           ; BSR set to: 1
 14837                           ;Button.c: 37: pInput->mFunction = pFunction;
 14838  01215E  0101               	movlb	1	; () banked
 14839  012160  EE20 F004          	lfsr	2,4
 14840  012164  5100               	movf	Button_Init@pInput& (0+255),w,b
 14841  012166  26D9               	addwf	fsr2l,f,c
 14842  012168  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14843  01216A  22DA               	addwfc	fsr2h,f,c
 14844  01216C  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 14845  012170  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 14846  012174  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 14847                           
 14848                           ; BSR set to: 1
 14849                           ;Button.c: 38: pInput->mGetState = pGetState;
 14850  012178  0101               	movlb	1	; () banked
 14851  01217A  EE20 F007          	lfsr	2,7
 14852  01217E  5100               	movf	Button_Init@pInput& (0+255),w,b
 14853  012180  26D9               	addwf	fsr2l,f,c
 14854  012182  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 14855  012184  22DA               	addwfc	fsr2h,f,c
 14856  012186  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 14857  01218A  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 14858  01218E  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 14859                           
 14860                           ; BSR set to: 1
 14861                           ;Button.c: 41: pInitIO();
 14862  012192  D801               	call	u7328
 14863  012194  0012               	return	
 14864  012196                     u7328:
 14865  012196  0005               	push	
 14866  012198  6EFA               	movwf	pclath,c
 14867  01219A  0101               	movlb	1	; () banked
 14868  01219C  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 14869  01219E  6EFD               	movwf	tosl,c
 14870  0121A0  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 14871  0121A2  6EFE               	movwf	tosh,c
 14872  0121A4  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 14873  0121A6  6EFF               	movwf	tosu,c
 14874  0121A8  50FA               	movf	pclath,w,c
 14875  0121AA  0012               	return		;indir
 14876  0121AC                     __end_of_Button_Init:
 14877                           	opt stack 0
 14878                           tosu	equ	0xFFF
 14879                           tosh	equ	0xFFE
 14880                           tosl	equ	0xFFD
 14881                           pclath	equ	0xFFA
 14882                           tblptru	equ	0xFF8
 14883                           tblptrh	equ	0xFF7
 14884                           tblptrl	equ	0xFF6
 14885                           tablat	equ	0xFF5
 14886                           prodh	equ	0xFF4
 14887                           prodl	equ	0xFF3
 14888                           intcon	equ	0xFF2
 14889                           postinc0	equ	0xFEE
 14890                           wreg	equ	0xFE8
 14891                           indf1	equ	0xFE7
 14892                           postdec1	equ	0xFE5
 14893                           fsr1h	equ	0xFE2
 14894                           fsr1l	equ	0xFE1
 14895                           indf2	equ	0xFDF
 14896                           postinc2	equ	0xFDE
 14897                           postdec2	equ	0xFDD
 14898                           plusw2	equ	0xFDB
 14899                           fsr2h	equ	0xFDA
 14900                           fsr2l	equ	0xFD9
 14901                           status	equ	0xFD8
 14902                           
 14903 ;; *************** function _MXK_InitDIPSwitch *****************
 14904 ;; Defined at:
 14905 ;;		line 20 in file "Library/MXK.c"
 14906 ;; Parameters:    Size  Location     Type
 14907 ;;		None
 14908 ;; Auto vars:     Size  Location     Type
 14909 ;;		None
 14910 ;; Return value:  Size  Location     Type
 14911 ;;                  1    wreg      void 
 14912 ;; Registers used:
 14913 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14914 ;; Tracked objects:
 14915 ;;		On entry : 0/0
 14916 ;;		On exit  : 0/0
 14917 ;;		Unchanged: 0/0
 14918 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14919 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14920 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14921 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14922 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14923 ;;Total ram usage:        0 bytes
 14924 ;; Hardware stack levels used:    1
 14925 ;; Hardware stack levels required when called:   14
 14926 ;; This function calls:
 14927 ;;		_Port_SetQuadType
 14928 ;; This function is called by:
 14929 ;;		_FunctInitButton
 14930 ;;		_Button_Init
 14931 ;; This function uses a non-reentrant model
 14932 ;;
 14933                           
 14934                           	psect	text76
 14935  013EB2                     __ptext76:
 14936                           	opt stack 0
 14937  013EB2                     _MXK_InitDIPSwitch:
 14938                           	opt stack 14
 14939                           
 14940                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 14941                           
 14942                           ;incstack = 0
 14943  013EB2  0E99               	movlw	low _PortD
 14944  013EB4  0100               	movlb	0	; () banked
 14945  013EB6  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
 14946  013EB8  0E00               	movlw	high _PortD
 14947  013EBA  0100               	movlb	0	; () banked
 14948  013EBC  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14949  013EBE  0E00               	movlw	0
 14950  013EC0  0100               	movlb	0	; () banked
 14951  013EC2  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14952  013EC4  0E00               	movlw	0
 14953  013EC6  0100               	movlb	0	; () banked
 14954  013EC8  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
 14955  013ECA  ECEC  F083         	call	_Port_SetQuadType	;wreg free
 14956  013ECE  0012               	return		;funcret
 14957  013ED0                     __end_of_MXK_InitDIPSwitch:
 14958                           	opt stack 0
 14959                           tosu	equ	0xFFF
 14960                           tosh	equ	0xFFE
 14961                           tosl	equ	0xFFD
 14962                           pclath	equ	0xFFA
 14963                           tblptru	equ	0xFF8
 14964                           tblptrh	equ	0xFF7
 14965                           tblptrl	equ	0xFF6
 14966                           tablat	equ	0xFF5
 14967                           prodh	equ	0xFF4
 14968                           prodl	equ	0xFF3
 14969                           intcon	equ	0xFF2
 14970                           postinc0	equ	0xFEE
 14971                           wreg	equ	0xFE8
 14972                           indf1	equ	0xFE7
 14973                           postdec1	equ	0xFE5
 14974                           fsr1h	equ	0xFE2
 14975                           fsr1l	equ	0xFE1
 14976                           indf2	equ	0xFDF
 14977                           postinc2	equ	0xFDE
 14978                           postdec2	equ	0xFDD
 14979                           plusw2	equ	0xFDB
 14980                           fsr2h	equ	0xFDA
 14981                           fsr2l	equ	0xFD9
 14982                           status	equ	0xFD8
 14983                           
 14984 ;; *************** function _HMI_InitButtons *****************
 14985 ;; Defined at:
 14986 ;;		line 21 in file "HMI.c"
 14987 ;; Parameters:    Size  Location     Type
 14988 ;;		None
 14989 ;; Auto vars:     Size  Location     Type
 14990 ;;		None
 14991 ;; Return value:  Size  Location     Type
 14992 ;;                  1    wreg      void 
 14993 ;; Registers used:
 14994 ;;		wreg, status,2
 14995 ;; Tracked objects:
 14996 ;;		On entry : 0/0
 14997 ;;		On exit  : 0/0
 14998 ;;		Unchanged: 0/0
 14999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15000 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15003 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15004 ;;Total ram usage:        0 bytes
 15005 ;; Hardware stack levels used:    1
 15006 ;; Hardware stack levels required when called:    7
 15007 ;; This function calls:
 15008 ;;		Nothing
 15009 ;; This function is called by:
 15010 ;;		_HMI_Init
 15011 ;;		_Button_Init
 15012 ;; This function uses a non-reentrant model
 15013 ;;
 15014                           
 15015                           	psect	text77
 15016  014062                     __ptext77:
 15017                           	opt stack 0
 15018  014062                     _HMI_InitButtons:
 15019                           	opt stack 21
 15020                           
 15021                           ;HMI.c: 23: TRISE = 0xFC;
 15022                           
 15023                           ;incstack = 0
 15024  014062  0EFC               	movlw	252
 15025  014064  6E96               	movwf	3990,c	;volatile
 15026  014066  0012               	return		;funcret
 15027  014068                     __end_of_HMI_InitButtons:
 15028                           	opt stack 0
 15029                           tosu	equ	0xFFF
 15030                           tosh	equ	0xFFE
 15031                           tosl	equ	0xFFD
 15032                           pclath	equ	0xFFA
 15033                           tblptru	equ	0xFF8
 15034                           tblptrh	equ	0xFF7
 15035                           tblptrl	equ	0xFF6
 15036                           tablat	equ	0xFF5
 15037                           prodh	equ	0xFF4
 15038                           prodl	equ	0xFF3
 15039                           intcon	equ	0xFF2
 15040                           postinc0	equ	0xFEE
 15041                           wreg	equ	0xFE8
 15042                           indf1	equ	0xFE7
 15043                           postdec1	equ	0xFE5
 15044                           fsr1h	equ	0xFE2
 15045                           fsr1l	equ	0xFE1
 15046                           indf2	equ	0xFDF
 15047                           postinc2	equ	0xFDE
 15048                           postdec2	equ	0xFDD
 15049                           plusw2	equ	0xFDB
 15050                           fsr2h	equ	0xFDA
 15051                           fsr2l	equ	0xFD9
 15052                           status	equ	0xFD8
 15053                           
 15054 ;; *************** function _MXK_InitTestButton *****************
 15055 ;; Defined at:
 15056 ;;		line 10 in file "Library/MXK.c"
 15057 ;; Parameters:    Size  Location     Type
 15058 ;;		None
 15059 ;; Auto vars:     Size  Location     Type
 15060 ;;		None
 15061 ;; Return value:  Size  Location     Type
 15062 ;;                  1    wreg      void 
 15063 ;; Registers used:
 15064 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15065 ;; Tracked objects:
 15066 ;;		On entry : 0/0
 15067 ;;		On exit  : 0/0
 15068 ;;		Unchanged: 0/0
 15069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15070 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15071 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15072 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15073 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15074 ;;Total ram usage:        0 bytes
 15075 ;; Hardware stack levels used:    1
 15076 ;; Hardware stack levels required when called:   12
 15077 ;; This function calls:
 15078 ;;		_Port_SetPinType
 15079 ;; This function is called by:
 15080 ;;		_FunctInitButton
 15081 ;;		_Button_Init
 15082 ;; This function uses a non-reentrant model
 15083 ;;
 15084                           
 15085                           	psect	text78
 15086  013ED0                     __ptext78:
 15087                           	opt stack 0
 15088  013ED0                     _MXK_InitTestButton:
 15089                           	opt stack 16
 15090                           
 15091                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 15092                           
 15093                           ;incstack = 0
 15094  013ED0  0E9C               	movlw	low _PortB
 15095  013ED2  0100               	movlb	0	; () banked
 15096  013ED4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 15097  013ED6  0E03               	movlw	high _PortB
 15098  013ED8  0100               	movlb	0	; () banked
 15099  013EDA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15100  013EDC  0E04               	movlw	4
 15101  013EDE  0100               	movlb	0	; () banked
 15102  013EE0  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 15103  013EE2  0E00               	movlw	0
 15104  013EE4  0100               	movlb	0	; () banked
 15105  013EE6  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 15106  013EE8  EC31  F088         	call	_Port_SetPinType	;wreg free
 15107  013EEC  0012               	return		;funcret
 15108  013EEE                     __end_of_MXK_InitTestButton:
 15109                           	opt stack 0
 15110                           tosu	equ	0xFFF
 15111                           tosh	equ	0xFFE
 15112                           tosl	equ	0xFFD
 15113                           pclath	equ	0xFFA
 15114                           tblptru	equ	0xFF8
 15115                           tblptrh	equ	0xFF7
 15116                           tblptrl	equ	0xFF6
 15117                           tablat	equ	0xFF5
 15118                           prodh	equ	0xFF4
 15119                           prodl	equ	0xFF3
 15120                           intcon	equ	0xFF2
 15121                           postinc0	equ	0xFEE
 15122                           wreg	equ	0xFE8
 15123                           indf1	equ	0xFE7
 15124                           postdec1	equ	0xFE5
 15125                           fsr1h	equ	0xFE2
 15126                           fsr1l	equ	0xFE1
 15127                           indf2	equ	0xFDF
 15128                           postinc2	equ	0xFDE
 15129                           postdec2	equ	0xFDD
 15130                           plusw2	equ	0xFDB
 15131                           fsr2h	equ	0xFDA
 15132                           fsr2l	equ	0xFD9
 15133                           status	equ	0xFD8
 15134                           
 15135 ;; *************** function _Port_SetPinType *****************
 15136 ;; Defined at:
 15137 ;;		line 189 in file "Library/Port.c"
 15138 ;; Parameters:    Size  Location     Type
 15139 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 15140 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15141 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15142 ;;  pPin            1   40[BANK0 ] enum E6750
 15143 ;;  pType           1   41[BANK0 ] enum E6795
 15144 ;; Auto vars:     Size  Location     Type
 15145 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 15146 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 15147 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 15148 ;;  Output          1   42[BANK0 ] enum E6475
 15149 ;; Return value:  Size  Location     Type
 15150 ;;                  1    wreg      enum E6475
 15151 ;; Registers used:
 15152 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15153 ;; Tracked objects:
 15154 ;;		On entry : 0/0
 15155 ;;		On exit  : 0/0
 15156 ;;		Unchanged: 0/0
 15157 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15158 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15159 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15160 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15161 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15162 ;;Total ram usage:        7 bytes
 15163 ;; Hardware stack levels used:    1
 15164 ;; Hardware stack levels required when called:   11
 15165 ;; This function calls:
 15166 ;;		_Byte_SetBit
 15167 ;;		_PortProperty_Valid
 15168 ;;		_Word_SetPair
 15169 ;; This function is called by:
 15170 ;;		_Configure_GPIOs
 15171 ;;		_LED_Init
 15172 ;;		_Port_Init
 15173 ;;		_SPI_Init
 15174 ;;		_MXK_InitTestButton
 15175 ;;		_MXK_Init
 15176 ;;		_I2C_Init
 15177 ;;		_Motor_Init
 15178 ;; This function uses a non-reentrant model
 15179 ;;
 15180                           
 15181                           	psect	text79
 15182  011062                     __ptext79:
 15183                           	opt stack 0
 15184  011062                     _Port_SetPinType:
 15185                           	opt stack 18
 15186                           
 15187                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 15188                           
 15189                           ;incstack = 0
 15190  011062  C0DB  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 15191  011066  C0DC  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 15192  01106A  CFDE F0E0          	movff	postinc2,Port_SetPinType@Props
 15193  01106E  CFDD F0E1          	movff	postdec2,Port_SetPinType@Props+1
 15194                           
 15195                           ;Port.c: 192: ePinError Output = ePinErrorState;
 15196  011072  0E05               	movlw	5
 15197  011074  0100               	movlb	0	; () banked
 15198  011076  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 15199                           
 15200                           ;Port.c: 193: switch (pType)
 15201  011078  D0B5               	goto	l412
 15202  01107A                     
 15203                           ; BSR set to: 0
 15204                           ;Port.c: 197: {
 15205                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15206                           
 15207                           ; BSR set to: 0
 15208  01107A  0100               	movlb	0	; () banked
 15209  01107C  EE20 F002          	lfsr	2,2
 15210  011080  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15211  011082  26D9               	addwf	fsr2l,f,c
 15212  011084  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15213  011086  22DA               	addwfc	fsr2h,f,c
 15214  011088  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15215  01108C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15216  011090  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15217  011094  0E01               	movlw	1
 15218  011096  0100               	movlb	0	; () banked
 15219  011098  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15220  01109A  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15221                           
 15222                           ;Port.c: 203: break;
 15223  01109E  D0B0               	goto	l414
 15224  0110A0                     
 15225                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 15226  0110A0  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15227  0110A4  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15228  0110A8  0E01               	movlw	1
 15229  0110AA  0100               	movlb	0	; () banked
 15230  0110AC  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15231  0110AE  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15232  0110B2  EC7B  F097         	call	_PortProperty_Valid	;wreg free
 15233  0110B6  0100               	movlb	0	; () banked
 15234  0110B8  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 15235  0110BA  0100               	movlb	0	; () banked
 15236  0110BC  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 15237  0110BE  A4D8               	btfss	status,2,c
 15238  0110C0  0012               	return	
 15239                           
 15240                           ; BSR set to: 0
 15241                           ;Port.c: 208: {
 15242                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15243  0110C2  0100               	movlb	0	; () banked
 15244  0110C4  EE20 F002          	lfsr	2,2
 15245  0110C8  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15246  0110CA  26D9               	addwf	fsr2l,f,c
 15247  0110CC  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15248  0110CE  22DA               	addwfc	fsr2h,f,c
 15249  0110D0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15250  0110D4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15251  0110D8  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15252  0110DC  0E00               	movlw	0
 15253  0110DE  0100               	movlb	0	; () banked
 15254  0110E0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15255  0110E2  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15256                           
 15257                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15258  0110E6  0100               	movlb	0	; () banked
 15259  0110E8  EE20 F004          	lfsr	2,4
 15260  0110EC  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15261  0110EE  26D9               	addwf	fsr2l,f,c
 15262  0110F0  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15263  0110F2  22DA               	addwfc	fsr2h,f,c
 15264  0110F4  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15265  0110F8  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15266  0110FC  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15267  011100  0E00               	movlw	0
 15268  011102  0100               	movlb	0	; () banked
 15269  011104  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15270  011106  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15271                           
 15272                           ;Port.c: 214: break;
 15273  01110A  D07A               	goto	l414
 15274  01110C                     
 15275                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 15276                           
 15277                           ;Port.c: 218: case eTypeOutputOpenSource:
 15278  01110C  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15279  011110  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15280  011114  0E02               	movlw	2
 15281  011116  0100               	movlb	0	; () banked
 15282  011118  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15283  01111A  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15284  01111E  EC7B  F097         	call	_PortProperty_Valid	;wreg free
 15285  011122  0100               	movlb	0	; () banked
 15286  011124  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 15287  011126  0100               	movlb	0	; () banked
 15288  011128  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 15289  01112A  A4D8               	btfss	status,2,c
 15290  01112C  0012               	return	
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;Port.c: 220: {
 15294                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 15295  01112E  0100               	movlb	0	; () banked
 15296  011130  EE20 F002          	lfsr	2,2
 15297  011134  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15298  011136  26D9               	addwf	fsr2l,f,c
 15299  011138  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15300  01113A  22DA               	addwfc	fsr2h,f,c
 15301  01113C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15302  011140  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15303  011144  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15304  011148  0E01               	movlw	1
 15305  01114A  0100               	movlb	0	; () banked
 15306  01114C  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15307  01114E  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15308                           
 15309                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 15310  011152  0100               	movlb	0	; () banked
 15311  011154  EE20 F004          	lfsr	2,4
 15312  011158  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15313  01115A  26D9               	addwf	fsr2l,f,c
 15314  01115C  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15315  01115E  22DA               	addwfc	fsr2h,f,c
 15316  011160  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15317  011164  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15318  011168  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15319  01116C  0E01               	movlw	1
 15320  01116E  0100               	movlb	0	; () banked
 15321  011170  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15322  011172  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15323                           
 15324                           ;Port.c: 226: break;
 15325  011176  D044               	goto	l414
 15326  011178                     
 15327                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 15328                           
 15329                           ;Port.c: 230: case eTypeOutputPushPull:
 15330  011178  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 15331  01117C  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 15332  011180  0E00               	movlw	0
 15333  011182  0100               	movlb	0	; () banked
 15334  011184  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 15335  011186  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 15336  01118A  EC7B  F097         	call	_PortProperty_Valid	;wreg free
 15337  01118E  0100               	movlb	0	; () banked
 15338  011190  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 15339  011192  0100               	movlb	0	; () banked
 15340  011194  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 15341  011196  A4D8               	btfss	status,2,c
 15342  011198  0012               	return	
 15343                           
 15344                           ; BSR set to: 0
 15345                           ;Port.c: 232: {
 15346                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 15347  01119A  0100               	movlb	0	; () banked
 15348  01119C  EE20 F002          	lfsr	2,2
 15349  0111A0  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15350  0111A2  26D9               	addwf	fsr2l,f,c
 15351  0111A4  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15352  0111A6  22DA               	addwfc	fsr2h,f,c
 15353  0111A8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15354  0111AC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15355  0111B0  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15356  0111B4  0E00               	movlw	0
 15357  0111B6  0100               	movlb	0	; () banked
 15358  0111B8  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15359  0111BA  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15360                           
 15361                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 15362  0111BE  0100               	movlb	0	; () banked
 15363  0111C0  EE20 F004          	lfsr	2,4
 15364  0111C4  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 15365  0111C6  26D9               	addwf	fsr2l,f,c
 15366  0111C8  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 15367  0111CA  22DA               	addwfc	fsr2h,f,c
 15368  0111CC  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15369  0111D0  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15370  0111D4  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 15371  0111D8  0E00               	movlw	0
 15372  0111DA  0100               	movlb	0	; () banked
 15373  0111DC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 15374  0111DE  EC83  F09A         	call	_Byte_SetBit	;wreg free
 15375                           
 15376                           ;Port.c: 239: }
 15377                           
 15378                           ;Port.c: 238: break;
 15379  0111E2  D00E               	goto	l414
 15380  0111E4                     l412:
 15381  0111E4  0100               	movlb	0	; () banked
 15382  0111E6  51DE               	movf	Port_SetPinType@pType& (0+255),w,b
 15383                           
 15384                           ; Switch size 1, requested type "space"
 15385                           ; Number of cases is 4, Range of values is 0 to 3
 15386                           ; switch strategies available:
 15387                           ; Name         Instructions Cycles
 15388                           ; simple_byte           13     7 (average)
 15389                           ;	Chosen strategy is simple_byte
 15390  0111E8  0A00               	xorlw	0	; case 0
 15391  0111EA  B4D8               	btfsc	status,2,c
 15392  0111EC  D746               	goto	l413
 15393  0111EE  0A01               	xorlw	1	; case 1
 15394  0111F0  B4D8               	btfsc	status,2,c
 15395  0111F2  D756               	goto	l415
 15396  0111F4  0A03               	xorlw	3	; case 2
 15397  0111F6  B4D8               	btfsc	status,2,c
 15398  0111F8  D789               	goto	l417
 15399  0111FA  0A01               	xorlw	1	; case 3
 15400  0111FC  B4D8               	btfsc	status,2,c
 15401  0111FE  D7BC               	goto	l421
 15402  011200                     l414:
 15403                           
 15404                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 15405                           
 15406                           ; BSR set to: 0
 15407  011200  0E08               	movlw	8
 15408  011202  0100               	movlb	0	; () banked
 15409  011204  25DB               	addwf	Port_SetPinType@pInput& (0+255),w,b
 15410  011206  0100               	movlb	0	; () banked
 15411  011208  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 15412  01120A  0E00               	movlw	0
 15413  01120C  0100               	movlb	0	; () banked
 15414  01120E  21DC               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 15415  011210  0100               	movlb	0	; () banked
 15416  011212  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15417  011214  C0DD  F0C6         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 15418  011218  C0DE  F0C7         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 15419  01121C  ECF7  F09C         	call	_Word_SetPair	;wreg free
 15420  011220  0012               	return	
 15421  011222                     __end_of_Port_SetPinType:
 15422                           	opt stack 0
 15423                           tosu	equ	0xFFF
 15424                           tosh	equ	0xFFE
 15425                           tosl	equ	0xFFD
 15426                           pclath	equ	0xFFA
 15427                           tblptru	equ	0xFF8
 15428                           tblptrh	equ	0xFF7
 15429                           tblptrl	equ	0xFF6
 15430                           tablat	equ	0xFF5
 15431                           prodh	equ	0xFF4
 15432                           prodl	equ	0xFF3
 15433                           intcon	equ	0xFF2
 15434                           postinc0	equ	0xFEE
 15435                           wreg	equ	0xFE8
 15436                           indf1	equ	0xFE7
 15437                           postdec1	equ	0xFE5
 15438                           fsr1h	equ	0xFE2
 15439                           fsr1l	equ	0xFE1
 15440                           indf2	equ	0xFDF
 15441                           postinc2	equ	0xFDE
 15442                           postdec2	equ	0xFDD
 15443                           plusw2	equ	0xFDB
 15444                           fsr2h	equ	0xFDA
 15445                           fsr2l	equ	0xFD9
 15446                           status	equ	0xFD8
 15447                           
 15448 ;; *************** function _Byte_SetBit *****************
 15449 ;; Defined at:
 15450 ;;		line 32 in file "Library/Types.c"
 15451 ;; Parameters:    Size  Location     Type
 15452 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15453 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 15454 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 15455 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15456 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15457 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15458 ;;		 -> NULL(0), 
 15459 ;;  pBit            1    2[BANK0 ] unsigned char 
 15460 ;;  pValue          1    3[BANK0 ] unsigned char 
 15461 ;; Auto vars:     Size  Location     Type
 15462 ;;		None
 15463 ;; Return value:  Size  Location     Type
 15464 ;;                  1    wreg      void 
 15465 ;; Registers used:
 15466 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15467 ;; Tracked objects:
 15468 ;;		On entry : 0/0
 15469 ;;		On exit  : 0/0
 15470 ;;		Unchanged: 0/0
 15471 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15472 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15473 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15474 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15475 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15476 ;;Total ram usage:        7 bytes
 15477 ;; Hardware stack levels used:    1
 15478 ;; Hardware stack levels required when called:    7
 15479 ;; This function calls:
 15480 ;;		Nothing
 15481 ;; This function is called by:
 15482 ;;		_Port_SetPinType
 15483 ;;		_Port_SetPin
 15484 ;;		_SPI_Init
 15485 ;;		_SPI_MinSpeed
 15486 ;;		_SPI_MaxSpeed
 15487 ;;		_Word_SetBit
 15488 ;;		_I2C_Init
 15489 ;; This function uses a non-reentrant model
 15490 ;;
 15491                           
 15492                           	psect	text80
 15493  013506                     __ptext80:
 15494                           	opt stack 0
 15495  013506                     _Byte_SetBit:
 15496                           	opt stack 21
 15497                           
 15498                           ;Types.c: 34: pValue &= 1;
 15499                           
 15500                           ;incstack = 0
 15501  013506  0E01               	movlw	1
 15502  013508  0100               	movlb	0	; () banked
 15503  01350A  17B8               	andwf	Byte_SetBit@pValue& (0+255),f,b
 15504                           
 15505                           ; BSR set to: 0
 15506                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 15507  01350C  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15508  013510  0E01               	movlw	1
 15509  013512  0100               	movlb	0	; () banked
 15510  013514  6FBA               	movwf	(??_Byte_SetBit+1)& (0+255),b
 15511  013516  0100               	movlb	0	; () banked
 15512  013518  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 15513  01351A  D003               	goto	u6434
 15514  01351C                     u6435:
 15515  01351C  0100               	movlb	0	; () banked
 15516  01351E  90D8               	bcf	status,0,c
 15517  013520  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15518  013522                     u6434:
 15519  013522  0100               	movlb	0	; () banked
 15520  013524  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 15521  013526  D7FA               	goto	u6435
 15522  013528  0100               	movlb	0	; () banked
 15523  01352A  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15524  01352C  0AFF               	xorlw	255
 15525  01352E  0100               	movlb	0	; () banked
 15526  013530  6FBB               	movwf	(??_Byte_SetBit+2)& (0+255),b
 15527  013532  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15528  013536  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15529  01353A  0100               	movlb	0	; () banked
 15530  01353C  51BB               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 15531  01353E  16DF               	andwf	indf2,f,c
 15532                           
 15533                           ; BSR set to: 0
 15534                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 15535  013540  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 15536  013544  C0B8  F0BA         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 15537  013548  0100               	movlb	0	; () banked
 15538  01354A  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 15539  01354C  D003               	goto	u6444
 15540  01354E                     u6445:
 15541  01354E  0100               	movlb	0	; () banked
 15542  013550  90D8               	bcf	status,0,c
 15543  013552  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 15544  013554                     u6444:
 15545  013554  0100               	movlb	0	; () banked
 15546  013556  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 15547  013558  D7FA               	goto	u6445
 15548  01355A  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 15549  01355E  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 15550  013562  0100               	movlb	0	; () banked
 15551  013564  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 15552  013566  12DF               	iorwf	indf2,f,c
 15553                           
 15554                           ; BSR set to: 0
 15555  013568  0012               	return		;funcret
 15556  01356A                     __end_of_Byte_SetBit:
 15557                           	opt stack 0
 15558                           tosu	equ	0xFFF
 15559                           tosh	equ	0xFFE
 15560                           tosl	equ	0xFFD
 15561                           pclath	equ	0xFFA
 15562                           tblptru	equ	0xFF8
 15563                           tblptrh	equ	0xFF7
 15564                           tblptrl	equ	0xFF6
 15565                           tablat	equ	0xFF5
 15566                           prodh	equ	0xFF4
 15567                           prodl	equ	0xFF3
 15568                           intcon	equ	0xFF2
 15569                           postinc0	equ	0xFEE
 15570                           wreg	equ	0xFE8
 15571                           indf1	equ	0xFE7
 15572                           postdec1	equ	0xFE5
 15573                           fsr1h	equ	0xFE2
 15574                           fsr1l	equ	0xFE1
 15575                           indf2	equ	0xFDF
 15576                           postinc2	equ	0xFDE
 15577                           postdec2	equ	0xFDD
 15578                           plusw2	equ	0xFDB
 15579                           fsr2h	equ	0xFDA
 15580                           fsr2l	equ	0xFD9
 15581                           status	equ	0xFD8
 15582                           
 15583 ;; *************** function _Port_SetQuadType *****************
 15584 ;; Defined at:
 15585 ;;		line 399 in file "Library/Port.c"
 15586 ;; Parameters:    Size  Location     Type
 15587 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15588 ;;		 -> PortB(10), PortD(10), 
 15589 ;;  pQuad           1   56[BANK0 ] enum E6776
 15590 ;;  pType           1   57[BANK0 ] enum E6795
 15591 ;; Auto vars:     Size  Location     Type
 15592 ;;  Output          1   58[BANK0 ] enum E6475
 15593 ;; Return value:  Size  Location     Type
 15594 ;;                  1    wreg      enum E6475
 15595 ;; Registers used:
 15596 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15597 ;; Tracked objects:
 15598 ;;		On entry : 0/0
 15599 ;;		On exit  : 0/0
 15600 ;;		Unchanged: 0/0
 15601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15602 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15603 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15604 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15605 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15606 ;;Total ram usage:        5 bytes
 15607 ;; Hardware stack levels used:    1
 15608 ;; Hardware stack levels required when called:   13
 15609 ;; This function calls:
 15610 ;;		_Byte_SetQuad
 15611 ;;		_Port_CheckQuadType
 15612 ;;		_Word_SetPair
 15613 ;; This function is called by:
 15614 ;;		_MXK_InitDIPSwitch
 15615 ;;		_MXK_Init
 15616 ;; This function uses a non-reentrant model
 15617 ;;
 15618                           
 15619                           	psect	text81
 15620  0107D8                     __ptext81:
 15621                           	opt stack 0
 15622  0107D8                     _Port_SetQuadType:
 15623                           	opt stack 16
 15624                           
 15625                           ;Port.c: 401: ePinError Output = ePinErrorState;
 15626                           
 15627                           ; BSR set to: 0
 15628                           ;incstack = 0
 15629  0107D8  0E05               	movlw	5
 15630  0107DA  0100               	movlb	0	; () banked
 15631  0107DC  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 15632                           
 15633                           ;Port.c: 403: switch (pType)
 15634  0107DE  D0C7               	goto	l476
 15635  0107E0                     
 15636                           ; BSR set to: 0
 15637                           ;Port.c: 407: {
 15638                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15639                           
 15640                           ; BSR set to: 0
 15641  0107E0  0100               	movlb	0	; () banked
 15642  0107E2  EE20 F002          	lfsr	2,2
 15643  0107E6  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15644  0107E8  26D9               	addwf	fsr2l,f,c
 15645  0107EA  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15646  0107EC  22DA               	addwfc	fsr2h,f,c
 15647  0107EE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15648  0107F2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15649  0107F6  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15650  0107FA  0E0F               	movlw	15
 15651  0107FC  0100               	movlb	0	; () banked
 15652  0107FE  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15653  010800  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15654                           
 15655                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15656  010804  0100               	movlb	0	; () banked
 15657  010806  EE20 F004          	lfsr	2,4
 15658  01080A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15659  01080C  26D9               	addwf	fsr2l,f,c
 15660  01080E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15661  010810  22DA               	addwfc	fsr2h,f,c
 15662  010812  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15663  010816  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15664  01081A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15665  01081E  0E00               	movlw	0
 15666  010820  0100               	movlb	0	; () banked
 15667  010822  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15668  010824  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15669                           
 15670                           ;Port.c: 413: }
 15671                           ;Port.c: 415: break;
 15672  010828  D0B0               	goto	l478
 15673  01082A                     
 15674                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15675  01082A  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15676  01082E  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15677  010832  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15678  010836  0E03               	movlw	3
 15679  010838  0100               	movlb	0	; () banked
 15680  01083A  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15681  01083C  EC45  F09B         	call	_Port_CheckQuadType	;wreg free
 15682  010840  0100               	movlb	0	; () banked
 15683  010842  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 15684  010844  0100               	movlb	0	; () banked
 15685  010846  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 15686  010848  A4D8               	btfss	status,2,c
 15687  01084A  0012               	return	
 15688                           
 15689                           ; BSR set to: 0
 15690                           ;Port.c: 418: {
 15691                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15692  01084C  0100               	movlb	0	; () banked
 15693  01084E  EE20 F002          	lfsr	2,2
 15694  010852  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15695  010854  26D9               	addwf	fsr2l,f,c
 15696  010856  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15697  010858  22DA               	addwfc	fsr2h,f,c
 15698  01085A  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15699  01085E  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15700  010862  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15701  010866  0E00               	movlw	0
 15702  010868  0100               	movlb	0	; () banked
 15703  01086A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15704  01086C  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15705                           
 15706                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15707  010870  0100               	movlb	0	; () banked
 15708  010872  EE20 F004          	lfsr	2,4
 15709  010876  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15710  010878  26D9               	addwf	fsr2l,f,c
 15711  01087A  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15712  01087C  22DA               	addwfc	fsr2h,f,c
 15713  01087E  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15714  010882  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15715  010886  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15716  01088A  0E00               	movlw	0
 15717  01088C  0100               	movlb	0	; () banked
 15718  01088E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15719  010890  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15720                           
 15721                           ;Port.c: 424: }
 15722  010894  D07A               	goto	l478
 15723  010896                     
 15724                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15725  010896  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15726  01089A  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15727  01089E  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15728  0108A2  0E03               	movlw	3
 15729  0108A4  0100               	movlb	0	; () banked
 15730  0108A6  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15731  0108A8  EC45  F09B         	call	_Port_CheckQuadType	;wreg free
 15732  0108AC  0100               	movlb	0	; () banked
 15733  0108AE  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 15734  0108B0  0100               	movlb	0	; () banked
 15735  0108B2  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 15736  0108B4  A4D8               	btfss	status,2,c
 15737  0108B6  0012               	return	
 15738                           
 15739                           ; BSR set to: 0
 15740                           ;Port.c: 429: {
 15741                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 15742  0108B8  0100               	movlb	0	; () banked
 15743  0108BA  EE20 F002          	lfsr	2,2
 15744  0108BE  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15745  0108C0  26D9               	addwf	fsr2l,f,c
 15746  0108C2  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15747  0108C4  22DA               	addwfc	fsr2h,f,c
 15748  0108C6  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15749  0108CA  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15750  0108CE  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15751  0108D2  0E0F               	movlw	15
 15752  0108D4  0100               	movlb	0	; () banked
 15753  0108D6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15754  0108D8  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15755                           
 15756                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 15757  0108DC  0100               	movlb	0	; () banked
 15758  0108DE  EE20 F004          	lfsr	2,4
 15759  0108E2  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15760  0108E4  26D9               	addwf	fsr2l,f,c
 15761  0108E6  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15762  0108E8  22DA               	addwfc	fsr2h,f,c
 15763  0108EA  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15764  0108EE  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15765  0108F2  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15766  0108F6  0E0F               	movlw	15
 15767  0108F8  0100               	movlb	0	; () banked
 15768  0108FA  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15769  0108FC  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15770                           
 15771                           ;Port.c: 435: }
 15772  010900  D044               	goto	l478
 15773  010902                     
 15774                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 15775  010902  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 15776  010906  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 15777  01090A  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 15778  01090E  0E03               	movlw	3
 15779  010910  0100               	movlb	0	; () banked
 15780  010912  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 15781  010914  EC45  F09B         	call	_Port_CheckQuadType	;wreg free
 15782  010918  0100               	movlb	0	; () banked
 15783  01091A  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 15784  01091C  0100               	movlb	0	; () banked
 15785  01091E  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 15786  010920  A4D8               	btfss	status,2,c
 15787  010922  0012               	return	
 15788                           
 15789                           ; BSR set to: 0
 15790                           ;Port.c: 440: {
 15791                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 15792  010924  0100               	movlb	0	; () banked
 15793  010926  EE20 F002          	lfsr	2,2
 15794  01092A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15795  01092C  26D9               	addwf	fsr2l,f,c
 15796  01092E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15797  010930  22DA               	addwfc	fsr2h,f,c
 15798  010932  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15799  010936  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15800  01093A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15801  01093E  0E00               	movlw	0
 15802  010940  0100               	movlb	0	; () banked
 15803  010942  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15804  010944  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15805                           
 15806                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 15807  010948  0100               	movlb	0	; () banked
 15808  01094A  EE20 F004          	lfsr	2,4
 15809  01094E  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 15810  010950  26D9               	addwf	fsr2l,f,c
 15811  010952  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15812  010954  22DA               	addwfc	fsr2h,f,c
 15813  010956  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 15814  01095A  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 15815  01095E  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 15816  010962  0E00               	movlw	0
 15817  010964  0100               	movlb	0	; () banked
 15818  010966  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 15819  010968  ECEB  F09E         	call	_Byte_SetQuad	;wreg free
 15820                           
 15821                           ;Port.c: 446: }
 15822  01096C  D00E               	goto	l478
 15823  01096E                     l476:
 15824  01096E  0100               	movlb	0	; () banked
 15825  010970  51EE               	movf	Port_SetQuadType@pType& (0+255),w,b
 15826                           
 15827                           ; Switch size 1, requested type "space"
 15828                           ; Number of cases is 4, Range of values is 0 to 3
 15829                           ; switch strategies available:
 15830                           ; Name         Instructions Cycles
 15831                           ; simple_byte           13     7 (average)
 15832                           ;	Chosen strategy is simple_byte
 15833  010972  0A00               	xorlw	0	; case 0
 15834  010974  B4D8               	btfsc	status,2,c
 15835  010976  D734               	goto	l477
 15836  010978  0A01               	xorlw	1	; case 1
 15837  01097A  B4D8               	btfsc	status,2,c
 15838  01097C  D756               	goto	l479
 15839  01097E  0A03               	xorlw	3	; case 2
 15840  010980  B4D8               	btfsc	status,2,c
 15841  010982  D789               	goto	l483
 15842  010984  0A01               	xorlw	1	; case 3
 15843  010986  B4D8               	btfsc	status,2,c
 15844  010988  D7BC               	goto	l486
 15845  01098A                     l478:
 15846                           
 15847                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 15848                           
 15849                           ; BSR set to: 0
 15850  01098A  0E08               	movlw	8
 15851  01098C  0100               	movlb	0	; () banked
 15852  01098E  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15853  010990  0100               	movlb	0	; () banked
 15854  010992  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 15855  010994  0E00               	movlw	0
 15856  010996  0100               	movlb	0	; () banked
 15857  010998  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15858  01099A  0100               	movlb	0	; () banked
 15859  01099C  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15860  01099E  0100               	movlb	0	; () banked
 15861  0109A0  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15862  0109A2  0D04               	mullw	4
 15863  0109A4  CFF3 F0C6          	movff	prodl,Word_SetPair@pPair
 15864  0109A8  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15865  0109AC  ECF7  F09C         	call	_Word_SetPair	;wreg free
 15866                           
 15867                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 15868  0109B0  0E08               	movlw	8
 15869  0109B2  0100               	movlb	0	; () banked
 15870  0109B4  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15871  0109B6  0100               	movlb	0	; () banked
 15872  0109B8  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 15873  0109BA  0E00               	movlw	0
 15874  0109BC  0100               	movlb	0	; () banked
 15875  0109BE  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15876  0109C0  0100               	movlb	0	; () banked
 15877  0109C2  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15878  0109C4  0100               	movlb	0	; () banked
 15879  0109C6  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15880  0109C8  0D04               	mullw	4
 15881  0109CA  28F3               	incf	prodl,w,c
 15882  0109CC  0100               	movlb	0	; () banked
 15883  0109CE  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 15884  0109D0  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15885  0109D4  ECF7  F09C         	call	_Word_SetPair	;wreg free
 15886                           
 15887                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 15888  0109D8  0E08               	movlw	8
 15889  0109DA  0100               	movlb	0	; () banked
 15890  0109DC  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15891  0109DE  0100               	movlb	0	; () banked
 15892  0109E0  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 15893  0109E2  0E00               	movlw	0
 15894  0109E4  0100               	movlb	0	; () banked
 15895  0109E6  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15896  0109E8  0100               	movlb	0	; () banked
 15897  0109EA  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15898  0109EC  0100               	movlb	0	; () banked
 15899  0109EE  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15900  0109F0  0D04               	mullw	4
 15901  0109F2  50F3               	movf	prodl,w,c
 15902  0109F4  0F02               	addlw	2
 15903  0109F6  0100               	movlb	0	; () banked
 15904  0109F8  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 15905  0109FA  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15906  0109FE  ECF7  F09C         	call	_Word_SetPair	;wreg free
 15907                           
 15908                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 15909  010A02  0E08               	movlw	8
 15910  010A04  0100               	movlb	0	; () banked
 15911  010A06  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 15912  010A08  0100               	movlb	0	; () banked
 15913  010A0A  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 15914  010A0C  0E00               	movlw	0
 15915  010A0E  0100               	movlb	0	; () banked
 15916  010A10  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 15917  010A12  0100               	movlb	0	; () banked
 15918  010A14  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15919  010A16  0100               	movlb	0	; () banked
 15920  010A18  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 15921  010A1A  0D04               	mullw	4
 15922  010A1C  50F3               	movf	prodl,w,c
 15923  010A1E  0F03               	addlw	3
 15924  010A20  0100               	movlb	0	; () banked
 15925  010A22  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 15926  010A24  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 15927  010A28  ECF7  F09C         	call	_Word_SetPair	;wreg free
 15928  010A2C  0012               	return	
 15929  010A2E                     __end_of_Port_SetQuadType:
 15930                           	opt stack 0
 15931                           tosu	equ	0xFFF
 15932                           tosh	equ	0xFFE
 15933                           tosl	equ	0xFFD
 15934                           pclath	equ	0xFFA
 15935                           tblptru	equ	0xFF8
 15936                           tblptrh	equ	0xFF7
 15937                           tblptrl	equ	0xFF6
 15938                           tablat	equ	0xFF5
 15939                           prodh	equ	0xFF4
 15940                           prodl	equ	0xFF3
 15941                           intcon	equ	0xFF2
 15942                           postinc0	equ	0xFEE
 15943                           wreg	equ	0xFE8
 15944                           indf1	equ	0xFE7
 15945                           postdec1	equ	0xFE5
 15946                           fsr1h	equ	0xFE2
 15947                           fsr1l	equ	0xFE1
 15948                           indf2	equ	0xFDF
 15949                           postinc2	equ	0xFDE
 15950                           postdec2	equ	0xFDD
 15951                           plusw2	equ	0xFDB
 15952                           fsr2h	equ	0xFDA
 15953                           fsr2l	equ	0xFD9
 15954                           status	equ	0xFD8
 15955                           
 15956 ;; *************** function _Word_SetPair *****************
 15957 ;; Defined at:
 15958 ;;		line 149 in file "Library/Types.c"
 15959 ;; Parameters:    Size  Location     Type
 15960 ;;  pInput          2   15[BANK0 ] PTR struct Word
 15961 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15962 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15963 ;;  pPair           1   17[BANK0 ] unsigned char 
 15964 ;;  pValue          1   18[BANK0 ] unsigned char 
 15965 ;; Auto vars:     Size  Location     Type
 15966 ;;		None
 15967 ;; Return value:  Size  Location     Type
 15968 ;;                  1    wreg      void 
 15969 ;; Registers used:
 15970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15971 ;; Tracked objects:
 15972 ;;		On entry : 0/0
 15973 ;;		On exit  : 0/0
 15974 ;;		Unchanged: 0/0
 15975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15976 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15977 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15978 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15979 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15980 ;;Total ram usage:        4 bytes
 15981 ;; Hardware stack levels used:    1
 15982 ;; Hardware stack levels required when called:    9
 15983 ;; This function calls:
 15984 ;;		_Byte_SetPair
 15985 ;; This function is called by:
 15986 ;;		_Port_SetPinType
 15987 ;;		_Port_SetQuadType
 15988 ;;		_Port_SetType
 15989 ;;		_Port_SetPairType
 15990 ;;		_PortProperty_Init
 15991 ;; This function uses a non-reentrant model
 15992 ;;
 15993                           
 15994                           	psect	text82
 15995  0139EE                     __ptext82:
 15996                           	opt stack 0
 15997  0139EE                     _Word_SetPair:
 15998                           	opt stack 19
 15999                           
 16000                           ;Types.c: 151: if (pPair >= 4)
 16001                           
 16002                           ;incstack = 0
 16003  0139EE  0E03               	movlw	3
 16004  0139F0  0100               	movlb	0	; () banked
 16005  0139F2  65C6               	cpfsgt	Word_SetPair@pPair& (0+255),b
 16006  0139F4  D014               	goto	l776
 16007                           
 16008                           ; BSR set to: 0
 16009                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 16010  0139F6  0E01               	movlw	1
 16011  0139F8  0100               	movlb	0	; () banked
 16012  0139FA  25C4               	addwf	Word_SetPair@pInput& (0+255),w,b
 16013  0139FC  0100               	movlb	0	; () banked
 16014  0139FE  6FC0               	movwf	Byte_SetPair@pInput& (0+255),b
 16015  013A00  0E00               	movlw	0
 16016  013A02  0100               	movlb	0	; () banked
 16017  013A04  21C5               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 16018  013A06  0100               	movlb	0	; () banked
 16019  013A08  6FC1               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 16020  013A0A  0100               	movlb	0	; () banked
 16021  013A0C  51C6               	movf	Word_SetPair@pPair& (0+255),w,b
 16022  013A0E  0FFC               	addlw	252
 16023  013A10  0100               	movlb	0	; () banked
 16024  013A12  6FC2               	movwf	Byte_SetPair@pPair& (0+255),b
 16025  013A14  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 16026  013A18  ECDA  F09E         	call	_Byte_SetPair	;wreg free
 16027  013A1C  0012               	return	
 16028  013A1E                     l776:
 16029                           
 16030                           ;Types.c: 153: else
 16031                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 16032  013A1E  C0C4  F0C0         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 16033  013A22  C0C5  F0C1         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 16034  013A26  C0C6  F0C2         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 16035  013A2A  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 16036  013A2E  ECDA  F09E         	call	_Byte_SetPair	;wreg free
 16037  013A32  0012               	return	
 16038  013A34                     __end_of_Word_SetPair:
 16039                           	opt stack 0
 16040                           tosu	equ	0xFFF
 16041                           tosh	equ	0xFFE
 16042                           tosl	equ	0xFFD
 16043                           pclath	equ	0xFFA
 16044                           tblptru	equ	0xFF8
 16045                           tblptrh	equ	0xFF7
 16046                           tblptrl	equ	0xFF6
 16047                           tablat	equ	0xFF5
 16048                           prodh	equ	0xFF4
 16049                           prodl	equ	0xFF3
 16050                           intcon	equ	0xFF2
 16051                           postinc0	equ	0xFEE
 16052                           wreg	equ	0xFE8
 16053                           indf1	equ	0xFE7
 16054                           postdec1	equ	0xFE5
 16055                           fsr1h	equ	0xFE2
 16056                           fsr1l	equ	0xFE1
 16057                           indf2	equ	0xFDF
 16058                           postinc2	equ	0xFDE
 16059                           postdec2	equ	0xFDD
 16060                           plusw2	equ	0xFDB
 16061                           fsr2h	equ	0xFDA
 16062                           fsr2l	equ	0xFD9
 16063                           status	equ	0xFD8
 16064                           
 16065 ;; *************** function _Byte_SetPair *****************
 16066 ;; Defined at:
 16067 ;;		line 83 in file "Library/Types.c"
 16068 ;; Parameters:    Size  Location     Type
 16069 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16070 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 16071 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 16072 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 16073 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 16074 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 16075 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 16076 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 16077 ;;		 -> NULL(0), 
 16078 ;;  pPair           1   13[BANK0 ] unsigned char 
 16079 ;;  pValue          1   14[BANK0 ] unsigned char 
 16080 ;; Auto vars:     Size  Location     Type
 16081 ;;		None
 16082 ;; Return value:  Size  Location     Type
 16083 ;;                  1    wreg      void 
 16084 ;; Registers used:
 16085 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16086 ;; Tracked objects:
 16087 ;;		On entry : 0/0
 16088 ;;		On exit  : 0/0
 16089 ;;		Unchanged: 0/0
 16090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16091 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16092 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16093 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16094 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16095 ;;Total ram usage:        4 bytes
 16096 ;; Hardware stack levels used:    1
 16097 ;; Hardware stack levels required when called:    8
 16098 ;; This function calls:
 16099 ;;		_Byte_SetZone
 16100 ;; This function is called by:
 16101 ;;		_Word_SetPair
 16102 ;;		_Port_SetPairType
 16103 ;;		_Port_SetPair
 16104 ;; This function uses a non-reentrant model
 16105 ;;
 16106                           
 16107                           	psect	text83
 16108  013DB4                     __ptext83:
 16109                           	opt stack 0
 16110  013DB4                     _Byte_SetPair:
 16111                           	opt stack 19
 16112                           
 16113                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 16114                           
 16115                           ;incstack = 0
 16116  013DB4  C0C0  F0B5         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 16117  013DB8  C0C1  F0B6         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 16118  013DBC  0E04               	movlw	4
 16119  013DBE  0100               	movlb	0	; () banked
 16120  013DC0  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 16121  013DC2  C0C2  F0B8         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 16122  013DC6  0E02               	movlw	2
 16123  013DC8  0100               	movlb	0	; () banked
 16124  013DCA  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 16125  013DCC  C0C3  F0BA         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 16126  013DD0  ECBE  F092         	call	_Byte_SetZone	;wreg free
 16127  013DD4  0012               	return		;funcret
 16128  013DD6                     __end_of_Byte_SetPair:
 16129                           	opt stack 0
 16130                           tosu	equ	0xFFF
 16131                           tosh	equ	0xFFE
 16132                           tosl	equ	0xFFD
 16133                           pclath	equ	0xFFA
 16134                           tblptru	equ	0xFF8
 16135                           tblptrh	equ	0xFF7
 16136                           tblptrl	equ	0xFF6
 16137                           tablat	equ	0xFF5
 16138                           prodh	equ	0xFF4
 16139                           prodl	equ	0xFF3
 16140                           intcon	equ	0xFF2
 16141                           postinc0	equ	0xFEE
 16142                           wreg	equ	0xFE8
 16143                           indf1	equ	0xFE7
 16144                           postdec1	equ	0xFE5
 16145                           fsr1h	equ	0xFE2
 16146                           fsr1l	equ	0xFE1
 16147                           indf2	equ	0xFDF
 16148                           postinc2	equ	0xFDE
 16149                           postdec2	equ	0xFDD
 16150                           plusw2	equ	0xFDB
 16151                           fsr2h	equ	0xFDA
 16152                           fsr2l	equ	0xFD9
 16153                           status	equ	0xFD8
 16154                           
 16155 ;; *************** function _Port_CheckQuadType *****************
 16156 ;; Defined at:
 16157 ;;		line 126 in file "Library/Port.c"
 16158 ;; Parameters:    Size  Location     Type
 16159 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 16160 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16161 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16162 ;;  pQuad           1   49[BANK0 ] enum E6776
 16163 ;;  pDrive          1   50[BANK0 ] enum E6469
 16164 ;; Auto vars:     Size  Location     Type
 16165 ;;  Output          1   53[BANK0 ] enum E6475
 16166 ;;  Pair2           1   52[BANK0 ] enum E6760
 16167 ;;  Pair1           1   51[BANK0 ] enum E6760
 16168 ;; Return value:  Size  Location     Type
 16169 ;;                  1    wreg      enum E6475
 16170 ;; Registers used:
 16171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16172 ;; Tracked objects:
 16173 ;;		On entry : 0/0
 16174 ;;		On exit  : 0/0
 16175 ;;		Unchanged: 0/0
 16176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16177 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16178 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16180 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16181 ;;Total ram usage:        7 bytes
 16182 ;; Hardware stack levels used:    1
 16183 ;; Hardware stack levels required when called:   12
 16184 ;; This function calls:
 16185 ;;		_Port_CheckPairType
 16186 ;; This function is called by:
 16187 ;;		_Port_CheckPortType
 16188 ;;		_Port_SetQuadType
 16189 ;; This function uses a non-reentrant model
 16190 ;;
 16191                           
 16192                           	psect	text84
 16193  01368A                     __ptext84:
 16194                           	opt stack 0
 16195  01368A                     _Port_CheckQuadType:
 16196                           	opt stack 15
 16197                           
 16198                           ;Port.c: 128: ePinError Output = ePinErrorState;
 16199                           
 16200                           ;incstack = 0
 16201  01368A  0E05               	movlw	5
 16202  01368C  0100               	movlb	0	; () banked
 16203  01368E  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 16204                           
 16205                           ; BSR set to: 0
 16206                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 16207  013690  0100               	movlb	0	; () banked
 16208  013692  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16209  013694  0D02               	mullw	2
 16210  013696  CFF3 F0E8          	movff	prodl,Port_CheckQuadType@Pair1
 16211                           
 16212                           ; BSR set to: 0
 16213                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 16214  01369A  0100               	movlb	0	; () banked
 16215  01369C  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 16216  01369E  0D02               	mullw	2
 16217  0136A0  28F3               	incf	prodl,w,c
 16218  0136A2  0100               	movlb	0	; () banked
 16219  0136A4  6FE9               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 16220                           
 16221                           ; BSR set to: 0
 16222                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 16223  0136A6  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16224  0136AA  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16225  0136AE  C0E8  F0DD         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 16226  0136B2  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16227  0136B6  ECB6  F099         	call	_Port_CheckPairType	;wreg free
 16228  0136BA  0100               	movlb	0	; () banked
 16229  0136BC  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 16230  0136BE  0100               	movlb	0	; () banked
 16231  0136C0  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16232  0136C2  A4D8               	btfss	status,2,c
 16233  0136C4  D00C               	goto	l393
 16234                           
 16235                           ; BSR set to: 0
 16236                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 16237  0136C6  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 16238  0136CA  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 16239  0136CE  C0E9  F0DD         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 16240  0136D2  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 16241  0136D6  ECB6  F099         	call	_Port_CheckPairType	;wreg free
 16242  0136DA  0100               	movlb	0	; () banked
 16243  0136DC  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 16244  0136DE                     l393:
 16245                           
 16246                           ; BSR set to: 0
 16247                           ;Port.c: 136: return Output;
 16248                           
 16249                           ; BSR set to: 0
 16250  0136DE  0100               	movlb	0	; () banked
 16251  0136E0  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 16252  0136E2  0012               	return	
 16253  0136E4                     __end_of_Port_CheckQuadType:
 16254                           	opt stack 0
 16255                           tosu	equ	0xFFF
 16256                           tosh	equ	0xFFE
 16257                           tosl	equ	0xFFD
 16258                           pclath	equ	0xFFA
 16259                           tblptru	equ	0xFF8
 16260                           tblptrh	equ	0xFF7
 16261                           tblptrl	equ	0xFF6
 16262                           tablat	equ	0xFF5
 16263                           prodh	equ	0xFF4
 16264                           prodl	equ	0xFF3
 16265                           intcon	equ	0xFF2
 16266                           postinc0	equ	0xFEE
 16267                           wreg	equ	0xFE8
 16268                           indf1	equ	0xFE7
 16269                           postdec1	equ	0xFE5
 16270                           fsr1h	equ	0xFE2
 16271                           fsr1l	equ	0xFE1
 16272                           indf2	equ	0xFDF
 16273                           postinc2	equ	0xFDE
 16274                           postdec2	equ	0xFDD
 16275                           plusw2	equ	0xFDB
 16276                           fsr2h	equ	0xFDA
 16277                           fsr2l	equ	0xFD9
 16278                           status	equ	0xFD8
 16279                           
 16280 ;; *************** function _Port_CheckPairType *****************
 16281 ;; Defined at:
 16282 ;;		line 112 in file "Library/Port.c"
 16283 ;; Parameters:    Size  Location     Type
 16284 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 16285 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16286 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16287 ;;  pPair           1   40[BANK0 ] enum E6760
 16288 ;;  pDrive          1   41[BANK0 ] enum E6469
 16289 ;; Auto vars:     Size  Location     Type
 16290 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 16291 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16292 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16293 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16294 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16295 ;;  Output          1   44[BANK0 ] enum E6475
 16296 ;;  Pin2            1   43[BANK0 ] enum E6750
 16297 ;;  Pin1            1   42[BANK0 ] enum E6750
 16298 ;; Return value:  Size  Location     Type
 16299 ;;                  1    wreg      enum E6475
 16300 ;; Registers used:
 16301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16302 ;; Tracked objects:
 16303 ;;		On entry : 0/0
 16304 ;;		On exit  : 0/0
 16305 ;;		Unchanged: 0/0
 16306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16307 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16308 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16310 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16311 ;;Total ram usage:        9 bytes
 16312 ;; Hardware stack levels used:    1
 16313 ;; Hardware stack levels required when called:   11
 16314 ;; This function calls:
 16315 ;;		_PortProperty_Valid
 16316 ;; This function is called by:
 16317 ;;		_Port_CheckQuadType
 16318 ;;		_Port_SetPairType
 16319 ;; This function uses a non-reentrant model
 16320 ;;
 16321                           
 16322                           	psect	text85
 16323  01336C                     __ptext85:
 16324                           	opt stack 0
 16325  01336C                     _Port_CheckPairType:
 16326                           	opt stack 15
 16327                           
 16328                           ;Port.c: 114: ePinError Output = ePinErrorState;
 16329                           
 16330                           ; BSR set to: 0
 16331                           ;incstack = 0
 16332  01336C  0E05               	movlw	5
 16333  01336E  0100               	movlb	0	; () banked
 16334  013370  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 16335                           
 16336                           ; BSR set to: 0
 16337                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 16338  013372  C0DB  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 16339  013376  C0DC  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 16340  01337A  CFDE F0E2          	movff	postinc2,Port_CheckPairType@Props
 16341  01337E  CFDD F0E3          	movff	postdec2,Port_CheckPairType@Props+1
 16342                           
 16343                           ; BSR set to: 0
 16344                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 16345  013382  0100               	movlb	0	; () banked
 16346  013384  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16347  013386  0D02               	mullw	2
 16348  013388  CFF3 F0DF          	movff	prodl,Port_CheckPairType@Pin1
 16349                           
 16350                           ; BSR set to: 0
 16351                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 16352  01338C  0100               	movlb	0	; () banked
 16353  01338E  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 16354  013390  0D02               	mullw	2
 16355  013392  28F3               	incf	prodl,w,c
 16356  013394  0100               	movlb	0	; () banked
 16357  013396  6FE0               	movwf	Port_CheckPairType@Pin2& (0+255),b
 16358                           
 16359                           ; BSR set to: 0
 16360                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 16361  013398  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16362  01339C  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16363  0133A0  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16364  0133A4  C0DF  F0C7         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 16365  0133A8  EC7B  F097         	call	_PortProperty_Valid	;wreg free
 16366  0133AC  0100               	movlb	0	; () banked
 16367  0133AE  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 16368  0133B0  0100               	movlb	0	; () banked
 16369  0133B2  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 16370  0133B4  A4D8               	btfss	status,2,c
 16371  0133B6  D00C               	goto	l389
 16372                           
 16373                           ; BSR set to: 0
 16374                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 16375  0133B8  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 16376  0133BC  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 16377  0133C0  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 16378  0133C4  C0E0  F0C7         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 16379  0133C8  EC7B  F097         	call	_PortProperty_Valid	;wreg free
 16380  0133CC  0100               	movlb	0	; () banked
 16381  0133CE  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 16382  0133D0                     l389:
 16383                           
 16384                           ; BSR set to: 0
 16385                           ;Port.c: 124: return Output;
 16386                           
 16387                           ; BSR set to: 0
 16388  0133D0  0100               	movlb	0	; () banked
 16389  0133D2  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 16390  0133D4  0012               	return	
 16391  0133D6                     __end_of_Port_CheckPairType:
 16392                           	opt stack 0
 16393                           tosu	equ	0xFFF
 16394                           tosh	equ	0xFFE
 16395                           tosl	equ	0xFFD
 16396                           pclath	equ	0xFFA
 16397                           tblptru	equ	0xFF8
 16398                           tblptrh	equ	0xFF7
 16399                           tblptrl	equ	0xFF6
 16400                           tablat	equ	0xFF5
 16401                           prodh	equ	0xFF4
 16402                           prodl	equ	0xFF3
 16403                           intcon	equ	0xFF2
 16404                           postinc0	equ	0xFEE
 16405                           wreg	equ	0xFE8
 16406                           indf1	equ	0xFE7
 16407                           postdec1	equ	0xFE5
 16408                           fsr1h	equ	0xFE2
 16409                           fsr1l	equ	0xFE1
 16410                           indf2	equ	0xFDF
 16411                           postinc2	equ	0xFDE
 16412                           postdec2	equ	0xFDD
 16413                           plusw2	equ	0xFDB
 16414                           fsr2h	equ	0xFDA
 16415                           fsr2l	equ	0xFD9
 16416                           status	equ	0xFD8
 16417                           
 16418 ;; *************** function _PortProperty_Valid *****************
 16419 ;; Defined at:
 16420 ;;		line 220 in file "Library/Types.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 16423 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16424 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16425 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16426 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16427 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 16428 ;;  pPin            1   18[BANK0 ] unsigned char 
 16429 ;; Auto vars:     Size  Location     Type
 16430 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 16431 ;;  Pair            1   37[BANK0 ] enum E6469
 16432 ;; Return value:  Size  Location     Type
 16433 ;;                  1    wreg      enum E6475
 16434 ;; Registers used:
 16435 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16436 ;; Tracked objects:
 16437 ;;		On entry : 0/0
 16438 ;;		On exit  : 0/0
 16439 ;;		Unchanged: 0/0
 16440 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16441 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16442 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16443 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16444 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16445 ;;Total ram usage:       23 bytes
 16446 ;; Hardware stack levels used:    1
 16447 ;; Hardware stack levels required when called:   10
 16448 ;; This function calls:
 16449 ;;		_Word_GetPair
 16450 ;; This function is called by:
 16451 ;;		_Port_CheckPairType
 16452 ;;		_Port_SetPinType
 16453 ;; This function uses a non-reentrant model
 16454 ;;
 16455                           
 16456                           	psect	text86
 16457  012EF6                     __ptext86:
 16458                           	opt stack 0
 16459  012EF6                     _PortProperty_Valid:
 16460                           	opt stack 15
 16461                           
 16462                           ;Types.c: 222: ePinDrive Pair;
 16463                           ;Types.c: 223: const ePinError Errors[4][4] =
 16464                           ;Types.c: 224: {
 16465                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 16466                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 16467                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 16468                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 16469                           ;Types.c: 230: };
 16470                           
 16471                           ; BSR set to: 0
 16472                           ;incstack = 0
 16473  012EF6  0EB5               	movlw	low PortProperty_Valid@F6830
 16474  012EF8  6EF6               	movwf	tblptrl,c
 16475  012EFA                     	if	1	;There is more than 1 active tblptr byte
 16476  012EFA  0EFD               	movlw	high PortProperty_Valid@F6830
 16477  012EFC  6EF7               	movwf	tblptrh,c
 16478  012EFE                     	endif
 16479  012EFE                     	if	1	;There are 3 active tblptr bytes
 16480  012EFE  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 16481  012F00  6EF8               	movwf	tblptru,c
 16482  012F02                     	endif
 16483  012F02  EE20  F0CA         	lfsr	2,PortProperty_Valid@Errors
 16484  012F06  0E0F               	movlw	15
 16485  012F08                     u6400:
 16486  012F08  0009               	tblrd		*+
 16487  012F0A  CFF5 FFDE          	movff	tablat,postinc2
 16488  012F0E  06E8               	decf	wreg,f,c
 16489  012F10  E2FB               	bc	u6400
 16490                           
 16491                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 16492  012F12  C0C4  F0C1         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 16493  012F16  C0C5  F0C2         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 16494  012F1A  C0C7  F0C3         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 16495  012F1E  ECDB  F09D         	call	_Word_GetPair	;wreg free
 16496  012F22  0100               	movlb	0	; () banked
 16497  012F24  6FDA               	movwf	PortProperty_Valid@Pair& (0+255),b
 16498                           
 16499                           ; BSR set to: 0
 16500                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 16501  012F26  0E04               	movlw	4
 16502  012F28  0100               	movlb	0	; () banked
 16503  012F2A  61C6               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 16504  012F2C  D020               	goto	l819
 16505                           
 16506                           ; BSR set to: 0
 16507  012F2E  0E04               	movlw	4
 16508  012F30  0100               	movlb	0	; () banked
 16509  012F32  61DA               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 16510  012F34  D01C               	goto	l819
 16511                           
 16512                           ; BSR set to: 0
 16513                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 16514  012F36  0100               	movlb	0	; () banked
 16515  012F38  51C6               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 16516  012F3A  0D04               	mullw	4
 16517  012F3C  0ECA               	movlw	low PortProperty_Valid@Errors
 16518  012F3E  0100               	movlb	0	; () banked
 16519  012F40  6FC8               	movwf	??_PortProperty_Valid& (0+255),b
 16520  012F42  0E00               	movlw	high PortProperty_Valid@Errors
 16521  012F44  0100               	movlb	0	; () banked
 16522  012F46  6FC9               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 16523  012F48  50F3               	movf	prodl,w,c
 16524  012F4A  0100               	movlb	0	; () banked
 16525  012F4C  27C8               	addwf	??_PortProperty_Valid& (0+255),f,b
 16526  012F4E  50F4               	movf	prodh,w,c
 16527  012F50  0100               	movlb	0	; () banked
 16528  012F52  23C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 16529  012F54  0100               	movlb	0	; () banked
 16530  012F56  51DA               	movf	PortProperty_Valid@Pair& (0+255),w,b
 16531  012F58  0D01               	mullw	1
 16532  012F5A  50F3               	movf	prodl,w,c
 16533  012F5C  0100               	movlb	0	; () banked
 16534  012F5E  25C8               	addwf	??_PortProperty_Valid& (0+255),w,b
 16535  012F60  6ED9               	movwf	fsr2l,c
 16536  012F62  50F4               	movf	prodh,w,c
 16537  012F64  0100               	movlb	0	; () banked
 16538  012F66  21C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 16539  012F68  6EDA               	movwf	fsr2h,c
 16540  012F6A  50DF               	movf	indf2,w,c
 16541                           
 16542                           ; BSR set to: 0
 16543  012F6C  0012               	return	
 16544  012F6E                     l819:
 16545                           
 16546                           ; BSR set to: 0
 16547                           ;Types.c: 237: return ePinErrorState;
 16548                           
 16549                           ; BSR set to: 0
 16550  012F6E  0E05               	movlw	5
 16551  012F70  0012               	return	
 16552  012F72                     __end_of_PortProperty_Valid:
 16553                           	opt stack 0
 16554                           tosu	equ	0xFFF
 16555                           tosh	equ	0xFFE
 16556                           tosl	equ	0xFFD
 16557                           pclath	equ	0xFFA
 16558                           tblptru	equ	0xFF8
 16559                           tblptrh	equ	0xFF7
 16560                           tblptrl	equ	0xFF6
 16561                           tablat	equ	0xFF5
 16562                           prodh	equ	0xFF4
 16563                           prodl	equ	0xFF3
 16564                           intcon	equ	0xFF2
 16565                           postinc0	equ	0xFEE
 16566                           wreg	equ	0xFE8
 16567                           indf1	equ	0xFE7
 16568                           postdec1	equ	0xFE5
 16569                           fsr1h	equ	0xFE2
 16570                           fsr1l	equ	0xFE1
 16571                           indf2	equ	0xFDF
 16572                           postinc2	equ	0xFDE
 16573                           postdec2	equ	0xFDD
 16574                           plusw2	equ	0xFDB
 16575                           fsr2h	equ	0xFDA
 16576                           fsr2l	equ	0xFD9
 16577                           status	equ	0xFD8
 16578                           
 16579 ;; *************** function _Word_GetPair *****************
 16580 ;; Defined at:
 16581 ;;		line 156 in file "Library/Types.c"
 16582 ;; Parameters:    Size  Location     Type
 16583 ;;  pInput          2   12[BANK0 ] PTR struct Word
 16584 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16585 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 16586 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 16587 ;;		 -> PortC(10), PortF(10), NULL(0), 
 16588 ;;  pPair           1   14[BANK0 ] unsigned char 
 16589 ;; Auto vars:     Size  Location     Type
 16590 ;;		None
 16591 ;; Return value:  Size  Location     Type
 16592 ;;                  1    wreg      unsigned char 
 16593 ;; Registers used:
 16594 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16595 ;; Tracked objects:
 16596 ;;		On entry : 0/0
 16597 ;;		On exit  : 0/0
 16598 ;;		Unchanged: 0/0
 16599 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16600 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16601 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16602 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16603 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16604 ;;Total ram usage:        3 bytes
 16605 ;; Hardware stack levels used:    1
 16606 ;; Hardware stack levels required when called:    9
 16607 ;; This function calls:
 16608 ;;		_Byte_GetPair
 16609 ;; This function is called by:
 16610 ;;		_Port_Init
 16611 ;;		_Port_SetPin
 16612 ;;		_Port_Set
 16613 ;;		_PortProperty_Valid
 16614 ;;		_Port_SetPair
 16615 ;;		_Port_SetQuad
 16616 ;; This function uses a non-reentrant model
 16617 ;;
 16618                           
 16619                           	psect	text87
 16620  013BB6                     __ptext87:
 16621                           	opt stack 0
 16622  013BB6                     _Word_GetPair:
 16623                           	opt stack 15
 16624                           
 16625                           ;Types.c: 158: if (pPair >= 4)
 16626                           
 16627                           ; BSR set to: 0
 16628                           ;incstack = 0
 16629  013BB6  0E03               	movlw	3
 16630  013BB8  0100               	movlb	0	; () banked
 16631  013BBA  65C3               	cpfsgt	Word_GetPair@pPair& (0+255),b
 16632  013BBC  D012               	goto	l781
 16633                           
 16634                           ; BSR set to: 0
 16635                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 16636  013BBE  0E01               	movlw	1
 16637  013BC0  0100               	movlb	0	; () banked
 16638  013BC2  25C1               	addwf	Word_GetPair@pInput& (0+255),w,b
 16639  013BC4  0100               	movlb	0	; () banked
 16640  013BC6  6FBE               	movwf	Byte_GetPair@pInput& (0+255),b
 16641  013BC8  0E00               	movlw	0
 16642  013BCA  0100               	movlb	0	; () banked
 16643  013BCC  21C2               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 16644  013BCE  0100               	movlb	0	; () banked
 16645  013BD0  6FBF               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 16646  013BD2  0100               	movlb	0	; () banked
 16647  013BD4  51C3               	movf	Word_GetPair@pPair& (0+255),w,b
 16648  013BD6  0FFC               	addlw	252
 16649  013BD8  0100               	movlb	0	; () banked
 16650  013BDA  6FC0               	movwf	Byte_GetPair@pPair& (0+255),b
 16651  013BDC  EC77  F09F         	call	_Byte_GetPair	;wreg free
 16652  013BE0  0012               	return	
 16653  013BE2                     l781:
 16654                           
 16655                           ;Types.c: 160: else
 16656                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 16657  013BE2  C0C1  F0BE         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 16658  013BE6  C0C2  F0BF         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 16659  013BEA  C0C3  F0C0         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 16660  013BEE  EC77  F09F         	call	_Byte_GetPair	;wreg free
 16661  013BF2  0012               	return	
 16662  013BF4                     __end_of_Word_GetPair:
 16663                           	opt stack 0
 16664                           tosu	equ	0xFFF
 16665                           tosh	equ	0xFFE
 16666                           tosl	equ	0xFFD
 16667                           pclath	equ	0xFFA
 16668                           tblptru	equ	0xFF8
 16669                           tblptrh	equ	0xFF7
 16670                           tblptrl	equ	0xFF6
 16671                           tablat	equ	0xFF5
 16672                           prodh	equ	0xFF4
 16673                           prodl	equ	0xFF3
 16674                           intcon	equ	0xFF2
 16675                           postinc0	equ	0xFEE
 16676                           wreg	equ	0xFE8
 16677                           indf1	equ	0xFE7
 16678                           postdec1	equ	0xFE5
 16679                           fsr1h	equ	0xFE2
 16680                           fsr1l	equ	0xFE1
 16681                           indf2	equ	0xFDF
 16682                           postinc2	equ	0xFDE
 16683                           postdec2	equ	0xFDD
 16684                           plusw2	equ	0xFDB
 16685                           fsr2h	equ	0xFDA
 16686                           fsr2l	equ	0xFD9
 16687                           status	equ	0xFD8
 16688                           
 16689 ;; *************** function _Byte_GetPair *****************
 16690 ;; Defined at:
 16691 ;;		line 87 in file "Library/Types.c"
 16692 ;; Parameters:    Size  Location     Type
 16693 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 16694 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16695 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16696 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16697 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16698 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16699 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16700 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16701 ;;		 -> NULL(0), 
 16702 ;;  pPair           1   11[BANK0 ] unsigned char 
 16703 ;; Auto vars:     Size  Location     Type
 16704 ;;		None
 16705 ;; Return value:  Size  Location     Type
 16706 ;;                  1    wreg      unsigned char 
 16707 ;; Registers used:
 16708 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16709 ;; Tracked objects:
 16710 ;;		On entry : 0/0
 16711 ;;		On exit  : 0/0
 16712 ;;		Unchanged: 0/0
 16713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16714 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16717 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16718 ;;Total ram usage:        3 bytes
 16719 ;; Hardware stack levels used:    1
 16720 ;; Hardware stack levels required when called:    8
 16721 ;; This function calls:
 16722 ;;		_Byte_GetZone
 16723 ;; This function is called by:
 16724 ;;		_Word_GetPair
 16725 ;; This function uses a non-reentrant model
 16726 ;;
 16727                           
 16728                           	psect	text88
 16729  013EEE                     __ptext88:
 16730                           	opt stack 0
 16731  013EEE                     _Byte_GetPair:
 16732                           	opt stack 15
 16733                           
 16734                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 16735                           
 16736                           ;incstack = 0
 16737  013EEE  C0BE  F0B5         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 16738  013EF2  C0BF  F0B6         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 16739  013EF6  0E04               	movlw	4
 16740  013EF8  0100               	movlb	0	; () banked
 16741  013EFA  6FB7               	movwf	Byte_GetZone@pMax& (0+255),b
 16742  013EFC  C0C0  F0B8         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 16743  013F00  0E02               	movlw	2
 16744  013F02  0100               	movlb	0	; () banked
 16745  013F04  6FB9               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 16746  013F06  EC0E  F096         	call	_Byte_GetZone	;wreg free
 16747  013F0A  0012               	return	
 16748  013F0C                     __end_of_Byte_GetPair:
 16749                           	opt stack 0
 16750                           tosu	equ	0xFFF
 16751                           tosh	equ	0xFFE
 16752                           tosl	equ	0xFFD
 16753                           pclath	equ	0xFFA
 16754                           tblptru	equ	0xFF8
 16755                           tblptrh	equ	0xFF7
 16756                           tblptrl	equ	0xFF6
 16757                           tablat	equ	0xFF5
 16758                           prodh	equ	0xFF4
 16759                           prodl	equ	0xFF3
 16760                           intcon	equ	0xFF2
 16761                           postinc0	equ	0xFEE
 16762                           wreg	equ	0xFE8
 16763                           indf1	equ	0xFE7
 16764                           postdec1	equ	0xFE5
 16765                           fsr1h	equ	0xFE2
 16766                           fsr1l	equ	0xFE1
 16767                           indf2	equ	0xFDF
 16768                           postinc2	equ	0xFDE
 16769                           postdec2	equ	0xFDD
 16770                           plusw2	equ	0xFDB
 16771                           fsr2h	equ	0xFDA
 16772                           fsr2l	equ	0xFD9
 16773                           status	equ	0xFD8
 16774                           
 16775 ;; *************** function _Byte_GetZone *****************
 16776 ;; Defined at:
 16777 ;;		line 64 in file "Library/Types.c"
 16778 ;; Parameters:    Size  Location     Type
 16779 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 16780 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 16781 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 16782 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 16783 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 16784 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 16785 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 16786 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 16787 ;;		 -> NULL(0), 
 16788 ;;  pMax            1    2[BANK0 ] unsigned char 
 16789 ;;  pChunk          1    3[BANK0 ] unsigned char 
 16790 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 16791 ;; Auto vars:     Size  Location     Type
 16792 ;;  Output          1    8[BANK0 ] unsigned char 
 16793 ;;  Offset          1    7[BANK0 ] unsigned char 
 16794 ;;  MASK            1    6[BANK0 ] unsigned char 
 16795 ;; Return value:  Size  Location     Type
 16796 ;;                  1    wreg      unsigned char 
 16797 ;; Registers used:
 16798 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 16799 ;; Tracked objects:
 16800 ;;		On entry : 0/0
 16801 ;;		On exit  : 0/0
 16802 ;;		Unchanged: 0/0
 16803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16804 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16805 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16806 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16807 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16808 ;;Total ram usage:        9 bytes
 16809 ;; Hardware stack levels used:    1
 16810 ;; Hardware stack levels required when called:    7
 16811 ;; This function calls:
 16812 ;;		Nothing
 16813 ;; This function is called by:
 16814 ;;		_Byte_GetPair
 16815 ;;		_Byte_GetTriple
 16816 ;;		_Byte_GetQuad
 16817 ;; This function uses a non-reentrant model
 16818 ;;
 16819                           
 16820                           	psect	text89
 16821  012C1C                     __ptext89:
 16822                           	opt stack 0
 16823  012C1C                     _Byte_GetZone:
 16824                           	opt stack 15
 16825                           
 16826                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 16827                           
 16828                           ;incstack = 0
 16829  012C1C  C0B5  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 16830  012C20  C0B6  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 16831  012C24  0E00               	movlw	low (__mediumconst shr (0+16))
 16832  012C26  6EF8               	movwf	tblptru,c
 16833  012C28  0E0F               	movlw	(high __ramtop+-1)
 16834  012C2A  64F7               	cpfsgt	tblptrh,c
 16835  012C2C  D003               	bra	u6367
 16836  012C2E  0008               	tblrd		*
 16837  012C30  50F5               	movf	tablat,w,c
 16838  012C32  D005               	bra	u6360
 16839  012C34                     u6367:
 16840  012C34  CFF6 FFE9          	movff	tblptrl,fsr0l
 16841  012C38  CFF7 FFEA          	movff	tblptrh,fsr0h
 16842  012C3C  50EF               	movf	indf0,w,c
 16843  012C3E                     u6360:
 16844  012C3E  0100               	movlb	0	; () banked
 16845  012C40  6FBD               	movwf	Byte_GetZone@Output& (0+255),b
 16846                           
 16847                           ; BSR set to: 0
 16848                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 16849  012C42  0100               	movlb	0	; () banked
 16850  012C44  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16851  012C46  0D01               	mullw	1
 16852  012C48  0ECF               	movlw	low _MASKS
 16853  012C4A  24F3               	addwf	prodl,w,c
 16854  012C4C  6EF6               	movwf	tblptrl,c
 16855  012C4E  0EFD               	movlw	high _MASKS
 16856  012C50  20F4               	addwfc	prodh,w,c
 16857  012C52  6EF7               	movwf	tblptrh,c
 16858  012C54                     	if	1	;There are 3 active tblptr bytes
 16859  012C54  6AF8               	clrf	tblptru,c
 16860  012C56  0E00               	movlw	low (__mediumconst shr (0+16))
 16861  012C58  22F8               	addwfc	tblptru,f,c
 16862  012C5A                     	endif
 16863  012C5A  0008               	tblrd		*
 16864  012C5C  CFF5 F0BB          	movff	tablat,Byte_GetZone@MASK
 16865                           
 16866                           ; BSR set to: 0
 16867                           ;Types.c: 68: UINT8 Offset = 0;
 16868  012C60  0E00               	movlw	0
 16869  012C62  0100               	movlb	0	; () banked
 16870  012C64  6FBC               	movwf	Byte_GetZone@Offset& (0+255),b
 16871                           
 16872                           ;Types.c: 70: while (pChunk >= pMax)
 16873  012C66  D006               	goto	l732
 16874  012C68                     
 16875                           ; BSR set to: 0
 16876                           ;Types.c: 71: {
 16877                           ;Types.c: 72: pChunk -= pMax;
 16878                           
 16879                           ; BSR set to: 0
 16880  012C68  0100               	movlb	0	; () banked
 16881  012C6A  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 16882  012C6C  0100               	movlb	0	; () banked
 16883  012C6E  5FB8               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 16884                           
 16885                           ; BSR set to: 0
 16886                           ;Types.c: 73: Offset += 1;
 16887  012C70  0100               	movlb	0	; () banked
 16888  012C72  2BBC               	incf	Byte_GetZone@Offset& (0+255),f,b
 16889  012C74                     l732:
 16890                           
 16891                           ; BSR set to: 0
 16892                           
 16893                           ; BSR set to: 0
 16894  012C74  0100               	movlb	0	; () banked
 16895  012C76  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 16896  012C78  0100               	movlb	0	; () banked
 16897  012C7A  5DB8               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 16898  012C7C  B0D8               	btfsc	status,0,c
 16899  012C7E  D7F4               	goto	l733
 16900                           
 16901                           ; BSR set to: 0
 16902                           ;Types.c: 74: }
 16903                           ;Types.c: 75: pChunk *= pChunkSize;
 16904                           
 16905                           ; BSR set to: 0
 16906  012C80  0100               	movlb	0	; () banked
 16907  012C82  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 16908  012C84  0100               	movlb	0	; () banked
 16909  012C86  03B8               	mulwf	Byte_GetZone@pChunk& (0+255),b
 16910  012C88  50F3               	movf	prodl,w,c
 16911  012C8A  6FB8               	movwf	Byte_GetZone@pChunk& (0+255),b
 16912                           
 16913                           ; BSR set to: 0
 16914                           ;Types.c: 76: pChunk += Offset;
 16915  012C8C  0100               	movlb	0	; () banked
 16916  012C8E  51BC               	movf	Byte_GetZone@Offset& (0+255),w,b
 16917  012C90  0100               	movlb	0	; () banked
 16918  012C92  27B8               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 16919                           
 16920                           ; BSR set to: 0
 16921                           ;Types.c: 78: Output >>= pChunk;
 16922  012C94  0100               	movlb	0	; () banked
 16923  012C96  29B8               	incf	Byte_GetZone@pChunk& (0+255),w,b
 16924  012C98  0100               	movlb	0	; () banked
 16925  012C9A  6FBA               	movwf	??_Byte_GetZone& (0+255),b
 16926  012C9C  D003               	goto	u6380
 16927  012C9E                     u6385:
 16928  012C9E  0100               	movlb	0	; () banked
 16929  012CA0  90D8               	bcf	status,0,c
 16930  012CA2  33BD               	rrcf	Byte_GetZone@Output& (0+255),f,b
 16931  012CA4                     u6380:
 16932  012CA4  0100               	movlb	0	; () banked
 16933  012CA6  2FBA               	decfsz	??_Byte_GetZone& (0+255),f,b
 16934  012CA8  D7FA               	goto	u6385
 16935                           
 16936                           ;Types.c: 79: Output &= MASK;
 16937  012CAA  0100               	movlb	0	; () banked
 16938  012CAC  51BB               	movf	Byte_GetZone@MASK& (0+255),w,b
 16939  012CAE  0100               	movlb	0	; () banked
 16940  012CB0  17BD               	andwf	Byte_GetZone@Output& (0+255),f,b
 16941                           
 16942                           ; BSR set to: 0
 16943                           ;Types.c: 80: return Output;
 16944  012CB2  0100               	movlb	0	; () banked
 16945  012CB4  51BD               	movf	Byte_GetZone@Output& (0+255),w,b
 16946  012CB6  0012               	return	
 16947  012CB8                     __end_of_Byte_GetZone:
 16948                           	opt stack 0
 16949                           tosu	equ	0xFFF
 16950                           tosh	equ	0xFFE
 16951                           tosl	equ	0xFFD
 16952                           pclath	equ	0xFFA
 16953                           tblptru	equ	0xFF8
 16954                           tblptrh	equ	0xFF7
 16955                           tblptrl	equ	0xFF6
 16956                           tablat	equ	0xFF5
 16957                           prodh	equ	0xFF4
 16958                           prodl	equ	0xFF3
 16959                           intcon	equ	0xFF2
 16960                           indf0	equ	0xFEF
 16961                           postinc0	equ	0xFEE
 16962                           fsr0h	equ	0xFEA
 16963                           fsr0l	equ	0xFE9
 16964                           wreg	equ	0xFE8
 16965                           indf1	equ	0xFE7
 16966                           postdec1	equ	0xFE5
 16967                           fsr1h	equ	0xFE2
 16968                           fsr1l	equ	0xFE1
 16969                           indf2	equ	0xFDF
 16970                           postinc2	equ	0xFDE
 16971                           postdec2	equ	0xFDD
 16972                           plusw2	equ	0xFDB
 16973                           fsr2h	equ	0xFDA
 16974                           fsr2l	equ	0xFD9
 16975                           status	equ	0xFD8
 16976                           
 16977 ;; *************** function _Byte_SetQuad *****************
 16978 ;; Defined at:
 16979 ;;		line 101 in file "Library/Types.c"
 16980 ;; Parameters:    Size  Location     Type
 16981 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 16982 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 16983 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 16984 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 16985 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 16986 ;;		 -> NULL(0), 
 16987 ;;  pQuad           1   13[BANK0 ] unsigned char 
 16988 ;;  pValue          1   14[BANK0 ] unsigned char 
 16989 ;; Auto vars:     Size  Location     Type
 16990 ;;		None
 16991 ;; Return value:  Size  Location     Type
 16992 ;;                  1    wreg      void 
 16993 ;; Registers used:
 16994 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16995 ;; Tracked objects:
 16996 ;;		On entry : 0/0
 16997 ;;		On exit  : 0/0
 16998 ;;		Unchanged: 0/0
 16999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17001 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17002 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17003 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17004 ;;Total ram usage:        4 bytes
 17005 ;; Hardware stack levels used:    1
 17006 ;; Hardware stack levels required when called:    8
 17007 ;; This function calls:
 17008 ;;		_Byte_SetZone
 17009 ;; This function is called by:
 17010 ;;		_Port_SetQuadType
 17011 ;;		_SPI_Init
 17012 ;;		_SPI_MinSpeed
 17013 ;;		_SPI_MaxSpeed
 17014 ;;		_Port_SetQuad
 17015 ;;		_Word_SetQuad
 17016 ;;		_I2C_Init
 17017 ;; This function uses a non-reentrant model
 17018 ;;
 17019                           
 17020                           	psect	text90
 17021  013DD6                     __ptext90:
 17022                           	opt stack 0
 17023  013DD6                     _Byte_SetQuad:
 17024                           	opt stack 20
 17025                           
 17026                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 17027                           
 17028                           ; BSR set to: 0
 17029                           ;incstack = 0
 17030  013DD6  C0C0  F0B5         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 17031  013DDA  C0C1  F0B6         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 17032  013DDE  0E02               	movlw	2
 17033  013DE0  0100               	movlb	0	; () banked
 17034  013DE2  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 17035  013DE4  C0C2  F0B8         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 17036  013DE8  0E04               	movlw	4
 17037  013DEA  0100               	movlb	0	; () banked
 17038  013DEC  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 17039  013DEE  C0C3  F0BA         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 17040  013DF2  ECBE  F092         	call	_Byte_SetZone	;wreg free
 17041  013DF6  0012               	return		;funcret
 17042  013DF8                     __end_of_Byte_SetQuad:
 17043                           	opt stack 0
 17044                           tosu	equ	0xFFF
 17045                           tosh	equ	0xFFE
 17046                           tosl	equ	0xFFD
 17047                           pclath	equ	0xFFA
 17048                           tblptru	equ	0xFF8
 17049                           tblptrh	equ	0xFF7
 17050                           tblptrl	equ	0xFF6
 17051                           tablat	equ	0xFF5
 17052                           prodh	equ	0xFF4
 17053                           prodl	equ	0xFF3
 17054                           intcon	equ	0xFF2
 17055                           indf0	equ	0xFEF
 17056                           postinc0	equ	0xFEE
 17057                           fsr0h	equ	0xFEA
 17058                           fsr0l	equ	0xFE9
 17059                           wreg	equ	0xFE8
 17060                           indf1	equ	0xFE7
 17061                           postdec1	equ	0xFE5
 17062                           fsr1h	equ	0xFE2
 17063                           fsr1l	equ	0xFE1
 17064                           indf2	equ	0xFDF
 17065                           postinc2	equ	0xFDE
 17066                           postdec2	equ	0xFDD
 17067                           plusw2	equ	0xFDB
 17068                           fsr2h	equ	0xFDA
 17069                           fsr2l	equ	0xFD9
 17070                           status	equ	0xFD8
 17071                           
 17072 ;; *************** function _Byte_SetZone *****************
 17073 ;; Defined at:
 17074 ;;		line 47 in file "Library/Types.c"
 17075 ;; Parameters:    Size  Location     Type
 17076 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17077 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 17078 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 17079 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 17080 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 17081 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17082 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17083 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17084 ;;		 -> PortC(10), PortF(10), NULL(0), 
 17085 ;;  pMax            1    2[BANK0 ] unsigned char 
 17086 ;;  pChunk          1    3[BANK0 ] unsigned char 
 17087 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 17088 ;;  pValue          1    5[BANK0 ] unsigned char 
 17089 ;; Auto vars:     Size  Location     Type
 17090 ;;  MASK            1   10[BANK0 ] unsigned char 
 17091 ;;  Offset          1    9[BANK0 ] unsigned char 
 17092 ;; Return value:  Size  Location     Type
 17093 ;;                  1    wreg      void 
 17094 ;; Registers used:
 17095 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 17096 ;; Tracked objects:
 17097 ;;		On entry : 0/0
 17098 ;;		On exit  : 0/0
 17099 ;;		Unchanged: 0/0
 17100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17101 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17102 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17103 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17104 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17105 ;;Total ram usage:       11 bytes
 17106 ;; Hardware stack levels used:    1
 17107 ;; Hardware stack levels required when called:    7
 17108 ;; This function calls:
 17109 ;;		Nothing
 17110 ;; This function is called by:
 17111 ;;		_Byte_SetPair
 17112 ;;		_Byte_SetQuad
 17113 ;;		_Byte_SetTriple
 17114 ;; This function uses a non-reentrant model
 17115 ;;
 17116                           
 17117                           	psect	text91
 17118  01257C                     __ptext91:
 17119                           	opt stack 0
 17120  01257C                     _Byte_SetZone:
 17121                           	opt stack 19
 17122                           
 17123                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 17124                           
 17125                           ;incstack = 0
 17126  01257C  0100               	movlb	0	; () banked
 17127  01257E  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 17128  012580  0D01               	mullw	1
 17129  012582  0ECF               	movlw	low _MASKS
 17130  012584  24F3               	addwf	prodl,w,c
 17131  012586  6EF6               	movwf	tblptrl,c
 17132  012588  0EFD               	movlw	high _MASKS
 17133  01258A  20F4               	addwfc	prodh,w,c
 17134  01258C  6EF7               	movwf	tblptrh,c
 17135  01258E                     	if	1	;There are 3 active tblptr bytes
 17136  01258E  6AF8               	clrf	tblptru,c
 17137  012590  0E00               	movlw	low (__mediumconst shr (0+16))
 17138  012592  22F8               	addwfc	tblptru,f,c
 17139  012594                     	endif
 17140  012594  0008               	tblrd		*
 17141  012596  CFF5 F0BF          	movff	tablat,Byte_SetZone@MASK
 17142                           
 17143                           ; BSR set to: 0
 17144                           ;Types.c: 50: UINT8 Offset = 0;
 17145  01259A  0E00               	movlw	0
 17146  01259C  0100               	movlb	0	; () banked
 17147  01259E  6FBE               	movwf	Byte_SetZone@Offset& (0+255),b
 17148                           
 17149                           ;Types.c: 52: while (pChunk >= pMax)
 17150  0125A0  D006               	goto	l726
 17151  0125A2                     
 17152                           ; BSR set to: 0
 17153                           ;Types.c: 53: {
 17154                           ;Types.c: 54: pChunk -= pMax;
 17155                           
 17156                           ; BSR set to: 0
 17157  0125A2  0100               	movlb	0	; () banked
 17158  0125A4  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 17159  0125A6  0100               	movlb	0	; () banked
 17160  0125A8  5FB8               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 17161                           
 17162                           ; BSR set to: 0
 17163                           ;Types.c: 55: Offset += 1;
 17164  0125AA  0100               	movlb	0	; () banked
 17165  0125AC  2BBE               	incf	Byte_SetZone@Offset& (0+255),f,b
 17166  0125AE                     l726:
 17167                           
 17168                           ; BSR set to: 0
 17169                           
 17170                           ; BSR set to: 0
 17171  0125AE  0100               	movlb	0	; () banked
 17172  0125B0  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 17173  0125B2  0100               	movlb	0	; () banked
 17174  0125B4  5DB8               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 17175  0125B6  B0D8               	btfsc	status,0,c
 17176  0125B8  D7F4               	goto	l727
 17177                           
 17178                           ; BSR set to: 0
 17179                           ;Types.c: 56: }
 17180                           ;Types.c: 57: pChunk *= pChunkSize;
 17181                           
 17182                           ; BSR set to: 0
 17183  0125BA  0100               	movlb	0	; () banked
 17184  0125BC  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 17185  0125BE  0100               	movlb	0	; () banked
 17186  0125C0  03B8               	mulwf	Byte_SetZone@pChunk& (0+255),b
 17187  0125C2  50F3               	movf	prodl,w,c
 17188  0125C4  6FB8               	movwf	Byte_SetZone@pChunk& (0+255),b
 17189                           
 17190                           ; BSR set to: 0
 17191                           ;Types.c: 58: pChunk += Offset;
 17192  0125C6  0100               	movlb	0	; () banked
 17193  0125C8  51BE               	movf	Byte_SetZone@Offset& (0+255),w,b
 17194  0125CA  0100               	movlb	0	; () banked
 17195  0125CC  27B8               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 17196                           
 17197                           ; BSR set to: 0
 17198                           ;Types.c: 60: pValue &= MASK;
 17199  0125CE  0100               	movlb	0	; () banked
 17200  0125D0  51BF               	movf	Byte_SetZone@MASK& (0+255),w,b
 17201  0125D2  0100               	movlb	0	; () banked
 17202  0125D4  17BA               	andwf	Byte_SetZone@pValue& (0+255),f,b
 17203                           
 17204                           ; BSR set to: 0
 17205                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 17206  0125D6  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 17207  0125DA  C0BF  F0BC         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 17208  0125DE  0100               	movlb	0	; () banked
 17209  0125E0  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 17210  0125E2  D003               	goto	u6464
 17211  0125E4                     u6465:
 17212  0125E4  0100               	movlb	0	; () banked
 17213  0125E6  90D8               	bcf	status,0,c
 17214  0125E8  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 17215  0125EA                     u6464:
 17216  0125EA  0100               	movlb	0	; () banked
 17217  0125EC  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 17218  0125EE  D7FA               	goto	u6465
 17219  0125F0  0100               	movlb	0	; () banked
 17220  0125F2  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 17221  0125F4  0AFF               	xorlw	255
 17222  0125F6  0100               	movlb	0	; () banked
 17223  0125F8  6FBD               	movwf	(??_Byte_SetZone+2)& (0+255),b
 17224  0125FA  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 17225  0125FE  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 17226  012602  0100               	movlb	0	; () banked
 17227  012604  51BD               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 17228  012606  16DF               	andwf	indf2,f,c
 17229                           
 17230                           ; BSR set to: 0
 17231                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 17232  012608  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 17233  01260C  C0BA  F0BC         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 17234  012610  0100               	movlb	0	; () banked
 17235  012612  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 17236  012614  D003               	goto	u6474
 17237  012616                     u6475:
 17238  012616  0100               	movlb	0	; () banked
 17239  012618  90D8               	bcf	status,0,c
 17240  01261A  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 17241  01261C                     u6474:
 17242  01261C  0100               	movlb	0	; () banked
 17243  01261E  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 17244  012620  D7FA               	goto	u6475
 17245  012622  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 17246  012626  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 17247  01262A  0100               	movlb	0	; () banked
 17248  01262C  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 17249  01262E  12DF               	iorwf	indf2,f,c
 17250                           
 17251                           ; BSR set to: 0
 17252  012630  0012               	return		;funcret
 17253  012632                     __end_of_Byte_SetZone:
 17254                           	opt stack 0
 17255                           tosu	equ	0xFFF
 17256                           tosh	equ	0xFFE
 17257                           tosl	equ	0xFFD
 17258                           pclath	equ	0xFFA
 17259                           tblptru	equ	0xFF8
 17260                           tblptrh	equ	0xFF7
 17261                           tblptrl	equ	0xFF6
 17262                           tablat	equ	0xFF5
 17263                           prodh	equ	0xFF4
 17264                           prodl	equ	0xFF3
 17265                           intcon	equ	0xFF2
 17266                           indf0	equ	0xFEF
 17267                           postinc0	equ	0xFEE
 17268                           fsr0h	equ	0xFEA
 17269                           fsr0l	equ	0xFE9
 17270                           wreg	equ	0xFE8
 17271                           indf1	equ	0xFE7
 17272                           postdec1	equ	0xFE5
 17273                           fsr1h	equ	0xFE2
 17274                           fsr1l	equ	0xFE1
 17275                           indf2	equ	0xFDF
 17276                           postinc2	equ	0xFDE
 17277                           postdec2	equ	0xFDD
 17278                           plusw2	equ	0xFDB
 17279                           fsr2h	equ	0xFDA
 17280                           fsr2l	equ	0xFD9
 17281                           status	equ	0xFD8
 17282                           
 17283 ;; *************** function _Console_Render *****************
 17284 ;; Defined at:
 17285 ;;		line 377 in file "Library/Console.c"
 17286 ;; Parameters:    Size  Location     Type
 17287 ;;		None
 17288 ;; Auto vars:     Size  Location     Type
 17289 ;;  lCursor         4   38[BANK0 ] struct Point
 17290 ;;  y               1   43[BANK0 ] unsigned char 
 17291 ;;  x               1   42[BANK0 ] unsigned char 
 17292 ;;  temp            1   37[BANK0 ] unsigned char 
 17293 ;;  Temp            2    0        unsigned short 
 17294 ;; Return value:  Size  Location     Type
 17295 ;;                  1    wreg      void 
 17296 ;; Registers used:
 17297 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17298 ;; Tracked objects:
 17299 ;;		On entry : 0/0
 17300 ;;		On exit  : 0/0
 17301 ;;		Unchanged: 0/0
 17302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17304 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17305 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17306 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17307 ;;Total ram usage:        9 bytes
 17308 ;; Hardware stack levels used:    1
 17309 ;; Hardware stack levels required when called:   11
 17310 ;; This function calls:
 17311 ;;		_Console_MakeField
 17312 ;;		_LCD_DrawField
 17313 ;;		_LCD_FillRectangle
 17314 ;; This function is called by:
 17315 ;;		_main
 17316 ;; This function uses a non-reentrant model
 17317 ;;
 17318                           
 17319                           	psect	text92
 17320  010C58                     __ptext92:
 17321                           	opt stack 0
 17322  010C58                     _Console_Render:
 17323                           	opt stack 19
 17324                           
 17325                           ;Console.c: 379: Colour Temp;
 17326                           ;Console.c: 380: if (change)
 17327                           
 17328                           ; BSR set to: 0
 17329                           ;incstack = 0
 17330  010C58  0100               	movlb	0	; () banked
 17331  010C5A  51FF               	movf	_change& (0+255),w,b
 17332  010C5C  B4D8               	btfsc	status,2,c
 17333  010C5E  0012               	return	
 17334                           
 17335                           ; BSR set to: 0
 17336                           ;Console.c: 381: {
 17337                           ;Console.c: 382: UINT8 x, y, temp;
 17338                           ;Console.c: 383: Point lCursor = {6,6};
 17339  010C60  C3D5  F0DB         	movff	Console_Render@F6956,Console_Render@lCursor
 17340  010C64  C3D6  F0DC         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 17341  010C68  C3D7  F0DD         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 17342  010C6C  C3D8  F0DE         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 17343                           
 17344                           ; BSR set to: 0
 17345                           ;Console.c: 385: if (clearall)
 17346  010C70  0100               	movlb	0	; () banked
 17347  010C72  518E               	movf	_clearall& (0+255),w,b
 17348  010C74  B4D8               	btfsc	status,2,c
 17349  010C76  D005               	goto	l1056
 17350                           
 17351                           ; BSR set to: 0
 17352                           ;Console.c: 386: {
 17353                           ;Console.c: 389: temp = lBufferY;
 17354  010C78  C08C  F0DA         	movff	_lBufferY,Console_Render@temp
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 17358  010C7C  0E0F               	movlw	15
 17359  010C7E  0100               	movlb	0	; () banked
 17360  010C80  6F8C               	movwf	_lBufferY& (0+255),b
 17361  010C82                     l1056:
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;Console.c: 391: }
 17365                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 17366  010C82  0E00               	movlw	0
 17367  010C84  0100               	movlb	0	; () banked
 17368  010C86  6FE0               	movwf	Console_Render@y& (0+255),b
 17369  010C88  D0DF               	goto	l1057
 17370  010C8A                     
 17371                           ; BSR set to: 0
 17372                           ;Console.c: 394: {
 17373                           ;Console.c: 395: gForecolour = lCBuffer[y];
 17374                           
 17375                           ; BSR set to: 0
 17376  010C8A  0100               	movlb	0	; () banked
 17377  010C8C  51E0               	movf	Console_Render@y& (0+255),w,b
 17378  010C8E  0D02               	mullw	2
 17379  010C90  0E00               	movlw	low _lCBuffer
 17380  010C92  24F3               	addwf	prodl,w,c
 17381  010C94  6ED9               	movwf	fsr2l,c
 17382  010C96  0E03               	movlw	high _lCBuffer
 17383  010C98  20F4               	addwfc	prodh,w,c
 17384  010C9A  6EDA               	movwf	fsr2h,c
 17385  010C9C  CFDE F0FD          	movff	postinc2,_gForecolour
 17386  010CA0  CFDD F0FE          	movff	postdec2,_gForecolour+1
 17387                           
 17388                           ; BSR set to: 0
 17389                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 17390  010CA4  0E00               	movlw	0
 17391  010CA6  0100               	movlb	0	; () banked
 17392  010CA8  6FDF               	movwf	Console_Render@x& (0+255),b
 17393  010CAA                     l11835:
 17394                           
 17395                           ; BSR set to: 0
 17396  010CAA  0E13               	movlw	19
 17397  010CAC  0100               	movlb	0	; () banked
 17398  010CAE  65DF               	cpfsgt	Console_Render@x& (0+255),b
 17399  010CB0  D001               	goto	l1059
 17400  010CB2  D0BE               	goto	u8050
 17401  010CB4                     l1059:
 17402                           
 17403                           ; BSR set to: 0
 17404                           ;Console.c: 397: {
 17405                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 17406                           
 17407                           ; BSR set to: 0
 17408  010CB4  0100               	movlb	0	; () banked
 17409  010CB6  51E0               	movf	Console_Render@y& (0+255),w,b
 17410  010CB8  0D14               	mullw	20
 17411  010CBA  0EAA               	movlw	low _lBuffer
 17412  010CBC  0100               	movlb	0	; () banked
 17413  010CBE  6FD8               	movwf	??_Console_Render& (0+255),b
 17414  010CC0  0E04               	movlw	high _lBuffer
 17415  010CC2  0100               	movlb	0	; () banked
 17416  010CC4  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 17417  010CC6  50F3               	movf	prodl,w,c
 17418  010CC8  0100               	movlb	0	; () banked
 17419  010CCA  27D8               	addwf	??_Console_Render& (0+255),f,b
 17420  010CCC  50F4               	movf	prodh,w,c
 17421  010CCE  0100               	movlb	0	; () banked
 17422  010CD0  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 17423  010CD2  0100               	movlb	0	; () banked
 17424  010CD4  51DF               	movf	Console_Render@x& (0+255),w,b
 17425  010CD6  0D01               	mullw	1
 17426  010CD8  50F3               	movf	prodl,w,c
 17427  010CDA  0100               	movlb	0	; () banked
 17428  010CDC  25D8               	addwf	??_Console_Render& (0+255),w,b
 17429  010CDE  6ED9               	movwf	fsr2l,c
 17430  010CE0  50F4               	movf	prodh,w,c
 17431  010CE2  0100               	movlb	0	; () banked
 17432  010CE4  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 17433  010CE6  6EDA               	movwf	fsr2h,c
 17434  010CE8  AEDF               	btfss	indf2,7,c
 17435  010CEA  D09A               	goto	l1063
 17436                           
 17437                           ; BSR set to: 0
 17438                           ;Console.c: 399: {
 17439                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 17440  010CEC  0100               	movlb	0	; () banked
 17441  010CEE  51E0               	movf	Console_Render@y& (0+255),w,b
 17442  010CF0  0D14               	mullw	20
 17443  010CF2  0EAA               	movlw	low _lBuffer
 17444  010CF4  0100               	movlb	0	; () banked
 17445  010CF6  6FD8               	movwf	??_Console_Render& (0+255),b
 17446  010CF8  0E04               	movlw	high _lBuffer
 17447  010CFA  0100               	movlb	0	; () banked
 17448  010CFC  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 17449  010CFE  50F3               	movf	prodl,w,c
 17450  010D00  0100               	movlb	0	; () banked
 17451  010D02  27D8               	addwf	??_Console_Render& (0+255),f,b
 17452  010D04  50F4               	movf	prodh,w,c
 17453  010D06  0100               	movlb	0	; () banked
 17454  010D08  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 17455  010D0A  0100               	movlb	0	; () banked
 17456  010D0C  51DF               	movf	Console_Render@x& (0+255),w,b
 17457  010D0E  0D01               	mullw	1
 17458  010D10  50F3               	movf	prodl,w,c
 17459  010D12  0100               	movlb	0	; () banked
 17460  010D14  25D8               	addwf	??_Console_Render& (0+255),w,b
 17461  010D16  6ED9               	movwf	fsr2l,c
 17462  010D18  50F4               	movf	prodh,w,c
 17463  010D1A  0100               	movlb	0	; () banked
 17464  010D1C  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 17465  010D1E  6EDA               	movwf	fsr2h,c
 17466  010D20  0E7F               	movlw	127
 17467  010D22  16DF               	andwf	indf2,f,c
 17468                           
 17469                           ;Console.c: 401: if (lBuffer[y][x])
 17470  010D24  0100               	movlb	0	; () banked
 17471  010D26  51E0               	movf	Console_Render@y& (0+255),w,b
 17472  010D28  0D14               	mullw	20
 17473  010D2A  0EAA               	movlw	low _lBuffer
 17474  010D2C  0100               	movlb	0	; () banked
 17475  010D2E  6FD8               	movwf	??_Console_Render& (0+255),b
 17476  010D30  0E04               	movlw	high _lBuffer
 17477  010D32  0100               	movlb	0	; () banked
 17478  010D34  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 17479  010D36  50F3               	movf	prodl,w,c
 17480  010D38  0100               	movlb	0	; () banked
 17481  010D3A  27D8               	addwf	??_Console_Render& (0+255),f,b
 17482  010D3C  50F4               	movf	prodh,w,c
 17483  010D3E  0100               	movlb	0	; () banked
 17484  010D40  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 17485  010D42  0100               	movlb	0	; () banked
 17486  010D44  51DF               	movf	Console_Render@x& (0+255),w,b
 17487  010D46  0D01               	mullw	1
 17488  010D48  50F3               	movf	prodl,w,c
 17489  010D4A  0100               	movlb	0	; () banked
 17490  010D4C  25D8               	addwf	??_Console_Render& (0+255),w,b
 17491  010D4E  6ED9               	movwf	fsr2l,c
 17492  010D50  50F4               	movf	prodh,w,c
 17493  010D52  0100               	movlb	0	; () banked
 17494  010D54  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 17495  010D56  6EDA               	movwf	fsr2h,c
 17496  010D58  50DF               	movf	indf2,w,c
 17497  010D5A  B4D8               	btfsc	status,2,c
 17498  010D5C  D04A               	goto	l1062
 17499                           
 17500                           ; BSR set to: 0
 17501                           ;Console.c: 402: {
 17502                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 17503  010D5E  C081  F0BE         	movff	_gBackcolour,LCD_FillRectangle@pColour
 17504  010D62  C082  F0BF         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 17505  010D66  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 17506  010D6A  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 17507  010D6E  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 17508  010D72  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 17509  010D76  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 17510  010D7A  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 17511  010D7E  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 17512  010D82  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 17513  010D86  ECA4  F098         	call	_LCD_FillRectangle	;wreg free
 17514                           
 17515                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 17516  010D8A  0100               	movlb	0	; () banked
 17517  010D8C  51E0               	movf	Console_Render@y& (0+255),w,b
 17518  010D8E  0D14               	mullw	20
 17519  010D90  0EAA               	movlw	low _lBuffer
 17520  010D92  0100               	movlb	0	; () banked
 17521  010D94  6FD8               	movwf	??_Console_Render& (0+255),b
 17522  010D96  0E04               	movlw	high _lBuffer
 17523  010D98  0100               	movlb	0	; () banked
 17524  010D9A  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 17525  010D9C  50F3               	movf	prodl,w,c
 17526  010D9E  0100               	movlb	0	; () banked
 17527  010DA0  27D8               	addwf	??_Console_Render& (0+255),f,b
 17528  010DA2  50F4               	movf	prodh,w,c
 17529  010DA4  0100               	movlb	0	; () banked
 17530  010DA6  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 17531  010DA8  0100               	movlb	0	; () banked
 17532  010DAA  51DF               	movf	Console_Render@x& (0+255),w,b
 17533  010DAC  0D01               	mullw	1
 17534  010DAE  50F3               	movf	prodl,w,c
 17535  010DB0  0100               	movlb	0	; () banked
 17536  010DB2  25D8               	addwf	??_Console_Render& (0+255),w,b
 17537  010DB4  6ED9               	movwf	fsr2l,c
 17538  010DB6  50F4               	movf	prodh,w,c
 17539  010DB8  0100               	movlb	0	; () banked
 17540  010DBA  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 17541  010DBC  6EDA               	movwf	fsr2h,c
 17542  010DBE  50DF               	movf	indf2,w,c
 17543  010DC0  ECD6  F090         	call	_Console_MakeField
 17544  010DC4  C0BA  F0C7         	movff	?_Console_MakeField,LCD_DrawField@pField
 17545  010DC8  C0BB  F0C8         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 17546  010DCC  C0DB  F0C9         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 17547  010DD0  C0DC  F0CA         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 17548  010DD4  C0DD  F0CB         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 17549  010DD8  C0DE  F0CC         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 17550  010DDC  C0F9  F0CD         	movff	_gCharSize,LCD_DrawField@pSize
 17551  010DE0  C0FA  F0CE         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 17552  010DE4  C0FB  F0CF         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 17553  010DE8  C0FC  F0D0         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 17554  010DEC  EC6B  F095         	call	_LCD_DrawField	;wreg free
 17555                           
 17556                           ;Console.c: 405: }
 17557  010DF0  D017               	goto	l1063
 17558  010DF2                     l1062:
 17559                           
 17560                           ;Console.c: 406: else
 17561                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 17562  010DF2  0E00               	movlw	0
 17563  010DF4  0100               	movlb	0	; () banked
 17564  010DF6  6FBF               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 17565  010DF8  0E00               	movlw	0
 17566  010DFA  6FBE               	movwf	LCD_FillRectangle@pColour& (0+255),b
 17567  010DFC  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 17568  010E00  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 17569  010E04  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 17570  010E08  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 17571  010E0C  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 17572  010E10  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 17573  010E14  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 17574  010E18  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 17575  010E1C  ECA4  F098         	call	_LCD_FillRectangle	;wreg free
 17576  010E20                     l1063:
 17577                           
 17578                           ;Console.c: 408: }
 17579                           ;Console.c: 409: lCursor.x += (5 + 1);
 17580  010E20  0E06               	movlw	6
 17581  010E22  0100               	movlb	0	; () banked
 17582  010E24  27DB               	addwf	Console_Render@lCursor& (0+255),f,b
 17583  010E26  0E00               	movlw	0
 17584  010E28  23DC               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 17585                           
 17586                           ; BSR set to: 0
 17587  010E2A  0100               	movlb	0	; () banked
 17588  010E2C  2BDF               	incf	Console_Render@x& (0+255),f,b
 17589  010E2E  D73D               	goto	l11835
 17590  010E30                     u8050:
 17591                           
 17592                           ; BSR set to: 0
 17593                           ;Console.c: 410: }
 17594                           ;Console.c: 411: lCursor.y += (7 + 1);
 17595                           
 17596                           ; BSR set to: 0
 17597  010E30  0E08               	movlw	8
 17598  010E32  0100               	movlb	0	; () banked
 17599  010E34  27DD               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 17600  010E36  0E00               	movlw	0
 17601  010E38  23DE               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 17602                           
 17603                           ; BSR set to: 0
 17604                           ;Console.c: 412: lCursor.x = 6;
 17605  010E3A  0E00               	movlw	0
 17606  010E3C  0100               	movlb	0	; () banked
 17607  010E3E  6FDC               	movwf	(Console_Render@lCursor+1)& (0+255),b
 17608  010E40  0E06               	movlw	6
 17609  010E42  6FDB               	movwf	Console_Render@lCursor& (0+255),b
 17610                           
 17611                           ; BSR set to: 0
 17612  010E44  0100               	movlb	0	; () banked
 17613  010E46  2BE0               	incf	Console_Render@y& (0+255),f,b
 17614  010E48                     l1057:
 17615                           
 17616                           ; BSR set to: 0
 17617                           
 17618                           ; BSR set to: 0
 17619  010E48  0100               	movlb	0	; () banked
 17620  010E4A  51E0               	movf	Console_Render@y& (0+255),w,b
 17621  010E4C  0100               	movlb	0	; () banked
 17622  010E4E  5D8C               	subwf	_lBufferY& (0+255),w,b
 17623  010E50  B0D8               	btfsc	status,0,c
 17624  010E52  D71B               	goto	l1058
 17625                           
 17626                           ; BSR set to: 0
 17627                           ;Console.c: 413: }
 17628                           ;Console.c: 415: if (clearall)
 17629                           
 17630                           ; BSR set to: 0
 17631  010E54  0100               	movlb	0	; () banked
 17632  010E56  518E               	movf	_clearall& (0+255),w,b
 17633  010E58  B4D8               	btfsc	status,2,c
 17634  010E5A  0012               	return	
 17635                           
 17636                           ; BSR set to: 0
 17637                           ;Console.c: 416: {
 17638                           ;Console.c: 417: clearall = 0;
 17639  010E5C  0E00               	movlw	0
 17640  010E5E  0100               	movlb	0	; () banked
 17641  010E60  6F8E               	movwf	_clearall& (0+255),b
 17642                           
 17643                           ; BSR set to: 0
 17644                           ;Console.c: 418: lBufferY = temp;
 17645  010E62  C0DA  F08C         	movff	Console_Render@temp,_lBufferY
 17646                           
 17647                           ; BSR set to: 0
 17648  010E66  0012               	return	
 17649  010E68                     __end_of_Console_Render:
 17650                           	opt stack 0
 17651                           tosu	equ	0xFFF
 17652                           tosh	equ	0xFFE
 17653                           tosl	equ	0xFFD
 17654                           pclath	equ	0xFFA
 17655                           tblptru	equ	0xFF8
 17656                           tblptrh	equ	0xFF7
 17657                           tblptrl	equ	0xFF6
 17658                           tablat	equ	0xFF5
 17659                           prodh	equ	0xFF4
 17660                           prodl	equ	0xFF3
 17661                           intcon	equ	0xFF2
 17662                           indf0	equ	0xFEF
 17663                           postinc0	equ	0xFEE
 17664                           fsr0h	equ	0xFEA
 17665                           fsr0l	equ	0xFE9
 17666                           wreg	equ	0xFE8
 17667                           indf1	equ	0xFE7
 17668                           postdec1	equ	0xFE5
 17669                           fsr1h	equ	0xFE2
 17670                           fsr1l	equ	0xFE1
 17671                           indf2	equ	0xFDF
 17672                           postinc2	equ	0xFDE
 17673                           postdec2	equ	0xFDD
 17674                           plusw2	equ	0xFDB
 17675                           fsr2h	equ	0xFDA
 17676                           fsr2l	equ	0xFD9
 17677                           status	equ	0xFD8
 17678                           
 17679 ;; *************** function _LCD_FillRectangle *****************
 17680 ;; Defined at:
 17681 ;;		line 318 in file "Library/LCD.c"
 17682 ;; Parameters:    Size  Location     Type
 17683 ;;  pColour         2    9[BANK0 ] unsigned short 
 17684 ;;  pPoint          4   11[BANK0 ] struct Point
 17685 ;;  pSize           4   15[BANK0 ] struct Point
 17686 ;; Auto vars:     Size  Location     Type
 17687 ;;  j               1   22[BANK0 ] unsigned char 
 17688 ;;  i               1   21[BANK0 ] unsigned char 
 17689 ;; Return value:  Size  Location     Type
 17690 ;;                  1    wreg      void 
 17691 ;; Registers used:
 17692 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 17693 ;; Tracked objects:
 17694 ;;		On entry : 0/0
 17695 ;;		On exit  : 0/0
 17696 ;;		Unchanged: 0/0
 17697 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17698 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17699 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17700 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17701 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17702 ;;Total ram usage:       14 bytes
 17703 ;; Hardware stack levels used:    1
 17704 ;; Hardware stack levels required when called:   10
 17705 ;; This function calls:
 17706 ;;		_LCD_Word_Write
 17707 ;;		_Set_Addr_Window
 17708 ;; This function is called by:
 17709 ;;		_Console_Render
 17710 ;;		_Console_ClearLine
 17711 ;; This function uses a non-reentrant model
 17712 ;;
 17713                           
 17714                           	psect	text93
 17715  013148                     __ptext93:
 17716                           	opt stack 0
 17717  013148                     _LCD_FillRectangle:
 17718                           	opt stack 19
 17719                           
 17720                           ;LCD.c: 320: UINT8 i = 0x00;
 17721                           
 17722                           ; BSR set to: 0
 17723                           ;incstack = 0
 17724  013148  0E00               	movlw	0
 17725  01314A  0100               	movlb	0	; () banked
 17726  01314C  6FCA               	movwf	LCD_FillRectangle@i& (0+255),b
 17727                           
 17728                           ;LCD.c: 321: UINT8 j = 0x00;
 17729  01314E  0E00               	movlw	0
 17730  013150  0100               	movlb	0	; () banked
 17731  013152  6FCB               	movwf	LCD_FillRectangle@j& (0+255),b
 17732                           
 17733                           ; BSR set to: 0
 17734                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 17735  013154  C0C2  F0BA         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 17736  013158  0100               	movlb	0	; () banked
 17737  01315A  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 17738  01315C  0100               	movlb	0	; () banked
 17739  01315E  25C4               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 17740  013160  0100               	movlb	0	; () banked
 17741  013162  6FC8               	movwf	??_LCD_FillRectangle& (0+255),b
 17742  013164  0100               	movlb	0	; () banked
 17743  013166  05C8               	decf	??_LCD_FillRectangle& (0+255),w,b
 17744  013168  0100               	movlb	0	; () banked
 17745  01316A  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 17746  01316C  0100               	movlb	0	; () banked
 17747  01316E  51C2               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 17748  013170  0100               	movlb	0	; () banked
 17749  013172  25C6               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 17750  013174  0100               	movlb	0	; () banked
 17751  013176  6FC9               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 17752  013178  0100               	movlb	0	; () banked
 17753  01317A  05C9               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 17754  01317C  0100               	movlb	0	; () banked
 17755  01317E  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 17756  013180  0100               	movlb	0	; () banked
 17757  013182  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 17758  013184  ECC8  F093         	call	_Set_Addr_Window
 17759                           
 17760                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 17761  013188  C0C6  F0CB         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 17762  01318C                     l11361:
 17763  01318C  0100               	movlb	0	; () banked
 17764  01318E  51CB               	movf	LCD_FillRectangle@j& (0+255),w,b
 17765  013190  0100               	movlb	0	; () banked
 17766  013192  B4D8               	btfsc	status,2,c
 17767  013194  0012               	return	
 17768                           
 17769                           ; BSR set to: 0
 17770                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 17771                           
 17772                           ; BSR set to: 0
 17773  013196  C0C4  F0CA         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 17774  01319A                     l11365:
 17775                           
 17776                           ; BSR set to: 0
 17777  01319A  0100               	movlb	0	; () banked
 17778  01319C  51CA               	movf	LCD_FillRectangle@i& (0+255),w,b
 17779  01319E  0100               	movlb	0	; () banked
 17780  0131A0  B4D8               	btfsc	status,2,c
 17781  0131A2  D009               	goto	u7450
 17782                           
 17783                           ; BSR set to: 0
 17784                           ;LCD.c: 333: LCD_Word_Write(pColour);
 17785                           
 17786                           ; BSR set to: 0
 17787                           
 17788                           ; BSR set to: 0
 17789  0131A4  C0BE  F0BA         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 17790  0131A8  C0BF  F0BB         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 17791  0131AC  EC86  F09F         	call	_LCD_Word_Write	;wreg free
 17792  0131B0  0100               	movlb	0	; () banked
 17793  0131B2  07CA               	decf	LCD_FillRectangle@i& (0+255),f,b
 17794  0131B4  D7F2               	goto	l11365
 17795  0131B6                     u7450:
 17796                           
 17797                           ; BSR set to: 0
 17798                           
 17799                           ; BSR set to: 0
 17800  0131B6  0100               	movlb	0	; () banked
 17801  0131B8  07CB               	decf	LCD_FillRectangle@j& (0+255),f,b
 17802  0131BA  D7E8               	goto	l11361
 17803  0131BC                     __end_of_LCD_FillRectangle:
 17804                           	opt stack 0
 17805                           tosu	equ	0xFFF
 17806                           tosh	equ	0xFFE
 17807                           tosl	equ	0xFFD
 17808                           pclath	equ	0xFFA
 17809                           tblptru	equ	0xFF8
 17810                           tblptrh	equ	0xFF7
 17811                           tblptrl	equ	0xFF6
 17812                           tablat	equ	0xFF5
 17813                           prodh	equ	0xFF4
 17814                           prodl	equ	0xFF3
 17815                           intcon	equ	0xFF2
 17816                           indf0	equ	0xFEF
 17817                           postinc0	equ	0xFEE
 17818                           fsr0h	equ	0xFEA
 17819                           fsr0l	equ	0xFE9
 17820                           wreg	equ	0xFE8
 17821                           indf1	equ	0xFE7
 17822                           postdec1	equ	0xFE5
 17823                           fsr1h	equ	0xFE2
 17824                           fsr1l	equ	0xFE1
 17825                           indf2	equ	0xFDF
 17826                           postinc2	equ	0xFDE
 17827                           postdec2	equ	0xFDD
 17828                           plusw2	equ	0xFDB
 17829                           fsr2h	equ	0xFDA
 17830                           fsr2l	equ	0xFD9
 17831                           status	equ	0xFD8
 17832                           
 17833 ;; *************** function _LCD_DrawField *****************
 17834 ;; Defined at:
 17835 ;;		line 393 in file "Library/LCD.c"
 17836 ;; Parameters:    Size  Location     Type
 17837 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 17838 ;;		 -> Console_MakeField@Fill(70), 
 17839 ;;  pPoint          4   20[BANK0 ] struct Point
 17840 ;;  pSize           4   24[BANK0 ] struct Point
 17841 ;; Auto vars:     Size  Location     Type
 17842 ;;  count           2   30[BANK0 ] unsigned short 
 17843 ;;  i               1   34[BANK0 ] unsigned char 
 17844 ;;  ymax            1   33[BANK0 ] unsigned char 
 17845 ;;  xmax            1   32[BANK0 ] unsigned char 
 17846 ;; Return value:  Size  Location     Type
 17847 ;;                  1    wreg      void 
 17848 ;; Registers used:
 17849 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 17850 ;; Tracked objects:
 17851 ;;		On entry : 0/0
 17852 ;;		On exit  : 0/0
 17853 ;;		Unchanged: 0/0
 17854 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17855 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17856 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17857 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17858 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17859 ;;Total ram usage:       17 bytes
 17860 ;; Hardware stack levels used:    1
 17861 ;; Hardware stack levels required when called:   10
 17862 ;; This function calls:
 17863 ;;		_LCD_Word_Write
 17864 ;;		_Set_Addr_Window
 17865 ;;		___wmul
 17866 ;; This function is called by:
 17867 ;;		_Console_Render
 17868 ;; This function uses a non-reentrant model
 17869 ;;
 17870                           
 17871                           	psect	text94
 17872  012AD6                     __ptext94:
 17873                           	opt stack 0
 17874  012AD6                     _LCD_DrawField:
 17875                           	opt stack 19
 17876                           
 17877                           ;LCD.c: 396: UINT8 i = 0x00;
 17878                           
 17879                           ; BSR set to: 0
 17880                           ;incstack = 0
 17881  012AD6  0E00               	movlw	0
 17882  012AD8  0100               	movlb	0	; () banked
 17883  012ADA  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 17884                           
 17885                           ; BSR set to: 0
 17886                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 17887  012ADC  0100               	movlb	0	; () banked
 17888  012ADE  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 17889  012AE0  0100               	movlb	0	; () banked
 17890  012AE2  25CD               	addwf	LCD_DrawField@pSize& (0+255),w,b
 17891  012AE4  0100               	movlb	0	; () banked
 17892  012AE6  6FD5               	movwf	LCD_DrawField@xmax& (0+255),b
 17893                           
 17894                           ; BSR set to: 0
 17895                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 17896  012AE8  0100               	movlb	0	; () banked
 17897  012AEA  51CB               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 17898  012AEC  0100               	movlb	0	; () banked
 17899  012AEE  25CF               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 17900  012AF0  0100               	movlb	0	; () banked
 17901  012AF2  6FD6               	movwf	LCD_DrawField@ymax& (0+255),b
 17902                           
 17903                           ; BSR set to: 0
 17904                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 17905  012AF4  C0CF  F0B5         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 17906  012AF8  C0D0  F0B6         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 17907  012AFC  C0CD  F0B7         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 17908  012B00  C0CE  F0B8         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 17909  012B04  EC17  F09E         	call	___wmul	;wreg free
 17910  012B08  C0B5  F0D3         	movff	?___wmul,LCD_DrawField@count
 17911  012B0C  C0B6  F0D4         	movff	?___wmul+1,LCD_DrawField@count+1
 17912                           
 17913                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 17914  012B10  C0CB  F0BA         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 17915  012B14  0100               	movlb	0	; () banked
 17916  012B16  05D5               	decf	LCD_DrawField@xmax& (0+255),w,b
 17917  012B18  0100               	movlb	0	; () banked
 17918  012B1A  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 17919  012B1C  0100               	movlb	0	; () banked
 17920  012B1E  05D6               	decf	LCD_DrawField@ymax& (0+255),w,b
 17921  012B20  0100               	movlb	0	; () banked
 17922  012B22  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 17923  012B24  0100               	movlb	0	; () banked
 17924  012B26  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 17925  012B28  ECC8  F093         	call	_Set_Addr_Window
 17926                           
 17927                           ;LCD.c: 403: for(i = 0; i < count; i++)
 17928  012B2C  0E00               	movlw	0
 17929  012B2E  0100               	movlb	0	; () banked
 17930  012B30  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 17931  012B32  D013               	goto	l183
 17932  012B34                     
 17933                           ; BSR set to: 0
 17934                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 17935                           
 17936                           ; BSR set to: 0
 17937  012B34  0100               	movlb	0	; () banked
 17938  012B36  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 17939  012B38  0D02               	mullw	2
 17940  012B3A  50F3               	movf	prodl,w,c
 17941  012B3C  0100               	movlb	0	; () banked
 17942  012B3E  25C7               	addwf	LCD_DrawField@pField& (0+255),w,b
 17943  012B40  6ED9               	movwf	fsr2l,c
 17944  012B42  50F4               	movf	prodh,w,c
 17945  012B44  0100               	movlb	0	; () banked
 17946  012B46  21C8               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 17947  012B48  6EDA               	movwf	fsr2h,c
 17948  012B4A  CFDE F0BA          	movff	postinc2,LCD_Word_Write@value
 17949  012B4E  CFDD F0BB          	movff	postdec2,LCD_Word_Write@value+1
 17950  012B52  EC86  F09F         	call	_LCD_Word_Write	;wreg free
 17951  012B56  0100               	movlb	0	; () banked
 17952  012B58  2BD7               	incf	LCD_DrawField@i& (0+255),f,b
 17953  012B5A                     l183:
 17954                           
 17955                           ; BSR set to: 0
 17956                           
 17957                           ; BSR set to: 0
 17958  012B5A  0100               	movlb	0	; () banked
 17959  012B5C  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 17960  012B5E  0100               	movlb	0	; () banked
 17961  012B60  6FD1               	movwf	??_LCD_DrawField& (0+255),b
 17962  012B62  6BD2               	clrf	(??_LCD_DrawField+1)& (0+255),b
 17963  012B64  0100               	movlb	0	; () banked
 17964  012B66  51D3               	movf	LCD_DrawField@count& (0+255),w,b
 17965  012B68  0100               	movlb	0	; () banked
 17966  012B6A  5DD1               	subwf	??_LCD_DrawField& (0+255),w,b
 17967  012B6C  0100               	movlb	0	; () banked
 17968  012B6E  51D4               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 17969  012B70  0100               	movlb	0	; () banked
 17970  012B72  59D2               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 17971  012B74  B0D8               	btfsc	status,0,c
 17972  012B76  0012               	return	
 17973  012B78  D7DD               	goto	l184
 17974  012B7A                     __end_of_LCD_DrawField:
 17975                           	opt stack 0
 17976                           tosu	equ	0xFFF
 17977                           tosh	equ	0xFFE
 17978                           tosl	equ	0xFFD
 17979                           pclath	equ	0xFFA
 17980                           tblptru	equ	0xFF8
 17981                           tblptrh	equ	0xFF7
 17982                           tblptrl	equ	0xFF6
 17983                           tablat	equ	0xFF5
 17984                           prodh	equ	0xFF4
 17985                           prodl	equ	0xFF3
 17986                           intcon	equ	0xFF2
 17987                           indf0	equ	0xFEF
 17988                           postinc0	equ	0xFEE
 17989                           fsr0h	equ	0xFEA
 17990                           fsr0l	equ	0xFE9
 17991                           wreg	equ	0xFE8
 17992                           indf1	equ	0xFE7
 17993                           postdec1	equ	0xFE5
 17994                           fsr1h	equ	0xFE2
 17995                           fsr1l	equ	0xFE1
 17996                           indf2	equ	0xFDF
 17997                           postinc2	equ	0xFDE
 17998                           postdec2	equ	0xFDD
 17999                           plusw2	equ	0xFDB
 18000                           fsr2h	equ	0xFDA
 18001                           fsr2l	equ	0xFD9
 18002                           status	equ	0xFD8
 18003                           
 18004 ;; *************** function ___wmul *****************
 18005 ;; Defined at:
 18006 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 18007 ;; Parameters:    Size  Location     Type
 18008 ;;  multiplier      2    0[BANK0 ] unsigned int 
 18009 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 18010 ;; Auto vars:     Size  Location     Type
 18011 ;;  product         2    4[BANK0 ] unsigned int 
 18012 ;; Return value:  Size  Location     Type
 18013 ;;                  2    0[BANK0 ] unsigned int 
 18014 ;; Registers used:
 18015 ;;		wreg, status,2, status,0, prodl, prodh
 18016 ;; Tracked objects:
 18017 ;;		On entry : 0/0
 18018 ;;		On exit  : 0/0
 18019 ;;		Unchanged: 0/0
 18020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18021 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18022 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18024 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18025 ;;Total ram usage:        6 bytes
 18026 ;; Hardware stack levels used:    1
 18027 ;; Hardware stack levels required when called:    7
 18028 ;; This function calls:
 18029 ;;		Nothing
 18030 ;; This function is called by:
 18031 ;;		_LCD_DrawField
 18032 ;; This function uses a non-reentrant model
 18033 ;;
 18034                           
 18035                           	psect	text95
 18036  013C2E                     __ptext95:
 18037                           	opt stack 0
 18038  013C2E                     ___wmul:
 18039                           	opt stack 21
 18040                           
 18041                           ; BSR set to: 0
 18042                           ;incstack = 0
 18043  013C2E  0100               	movlb	0	; () banked
 18044  013C30  51B5               	movf	___wmul@multiplier& (0+255),w,b
 18045  013C32  0100               	movlb	0	; () banked
 18046  013C34  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 18047  013C36  CFF3 F0B9          	movff	prodl,___wmul@product
 18048  013C3A  CFF4 F0BA          	movff	prodh,___wmul@product+1
 18049  013C3E  0100               	movlb	0	; () banked
 18050  013C40  51B5               	movf	___wmul@multiplier& (0+255),w,b
 18051  013C42  0100               	movlb	0	; () banked
 18052  013C44  03B8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 18053  013C46  50F3               	movf	prodl,w,c
 18054  013C48  0100               	movlb	0	; () banked
 18055  013C4A  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 18056  013C4C  0100               	movlb	0	; () banked
 18057  013C4E  51B6               	movf	(___wmul@multiplier+1)& (0+255),w,b
 18058  013C50  0100               	movlb	0	; () banked
 18059  013C52  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 18060  013C54  50F3               	movf	prodl,w,c
 18061  013C56  0100               	movlb	0	; () banked
 18062  013C58  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 18063                           
 18064                           ; BSR set to: 0
 18065  013C5A  C0B9  F0B5         	movff	___wmul@product,?___wmul
 18066  013C5E  C0BA  F0B6         	movff	___wmul@product+1,?___wmul+1
 18067  013C62  0012               	return	
 18068  013C64                     __end_of___wmul:
 18069                           	opt stack 0
 18070                           tosu	equ	0xFFF
 18071                           tosh	equ	0xFFE
 18072                           tosl	equ	0xFFD
 18073                           pclath	equ	0xFFA
 18074                           tblptru	equ	0xFF8
 18075                           tblptrh	equ	0xFF7
 18076                           tblptrl	equ	0xFF6
 18077                           tablat	equ	0xFF5
 18078                           prodh	equ	0xFF4
 18079                           prodl	equ	0xFF3
 18080                           intcon	equ	0xFF2
 18081                           indf0	equ	0xFEF
 18082                           postinc0	equ	0xFEE
 18083                           fsr0h	equ	0xFEA
 18084                           fsr0l	equ	0xFE9
 18085                           wreg	equ	0xFE8
 18086                           indf1	equ	0xFE7
 18087                           postdec1	equ	0xFE5
 18088                           fsr1h	equ	0xFE2
 18089                           fsr1l	equ	0xFE1
 18090                           indf2	equ	0xFDF
 18091                           postinc2	equ	0xFDE
 18092                           postdec2	equ	0xFDD
 18093                           plusw2	equ	0xFDB
 18094                           fsr2h	equ	0xFDA
 18095                           fsr2l	equ	0xFD9
 18096                           status	equ	0xFD8
 18097                           
 18098 ;; *************** function _Set_Addr_Window *****************
 18099 ;; Defined at:
 18100 ;;		line 214 in file "Library/LCD.c"
 18101 ;; Parameters:    Size  Location     Type
 18102 ;;  xs              1    wreg     unsigned char 
 18103 ;;  ys              1    5[BANK0 ] unsigned char 
 18104 ;;  xe              1    6[BANK0 ] unsigned char 
 18105 ;;  ye              1    7[BANK0 ] unsigned char 
 18106 ;; Auto vars:     Size  Location     Type
 18107 ;;  xs              1    8[BANK0 ] unsigned char 
 18108 ;; Return value:  Size  Location     Type
 18109 ;;                  1    wreg      void 
 18110 ;; Registers used:
 18111 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18112 ;; Tracked objects:
 18113 ;;		On entry : 0/0
 18114 ;;		On exit  : 0/0
 18115 ;;		Unchanged: 0/0
 18116 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18117 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18118 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18119 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18120 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18121 ;;Total ram usage:        4 bytes
 18122 ;; Hardware stack levels used:    1
 18123 ;; Hardware stack levels required when called:    9
 18124 ;; This function calls:
 18125 ;;		_LCD_Write
 18126 ;; This function is called by:
 18127 ;;		_LCD_Fill
 18128 ;;		_LCD_FillRectangle
 18129 ;;		_LCD_DrawField
 18130 ;;		_RAM_Address_Set
 18131 ;;		_LCD_DrawPixel
 18132 ;; This function uses a non-reentrant model
 18133 ;;
 18134                           
 18135                           	psect	text96
 18136  012790                     __ptext96:
 18137                           	opt stack 0
 18138  012790                     _Set_Addr_Window:
 18139                           	opt stack 19
 18140                           
 18141                           ; BSR set to: 0
 18142                           ;incstack = 0
 18143                           ;Set_Addr_Window@xs stored from wreg
 18144  012790  0100               	movlb	0	; () banked
 18145  012792  6FBD               	movwf	Set_Addr_Window@xs& (0+255),b
 18146                           
 18147                           ;LCD.c: 216: ys+=2;
 18148  012794  0E02               	movlw	2
 18149  012796  0100               	movlb	0	; () banked
 18150  012798  27BA               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18151                           
 18152                           ;LCD.c: 217: ye+=2;
 18153  01279A  0E02               	movlw	2
 18154  01279C  0100               	movlb	0	; () banked
 18155  01279E  27BC               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18156                           
 18157                           ;LCD.c: 218: xs+=3;
 18158  0127A0  0E03               	movlw	3
 18159  0127A2  0100               	movlb	0	; () banked
 18160  0127A4  27BD               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18161                           
 18162                           ;LCD.c: 219: xe+=3;
 18163  0127A6  0E03               	movlw	3
 18164  0127A8  0100               	movlb	0	; () banked
 18165  0127AA  27BB               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18166                           
 18167                           ; BSR set to: 0
 18168                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18169  0127AC  0E00               	movlw	0
 18170  0127AE  0100               	movlb	0	; () banked
 18171  0127B0  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18172  0127B2  0E2A               	movlw	42
 18173  0127B4  ECFC  F09E         	call	_LCD_Write
 18174                           
 18175                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18176  0127B8  0E01               	movlw	1
 18177  0127BA  0100               	movlb	0	; () banked
 18178  0127BC  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18179  0127BE  0E00               	movlw	0
 18180  0127C0  ECFC  F09E         	call	_LCD_Write
 18181                           
 18182                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18183  0127C4  0E01               	movlw	1
 18184  0127C6  0100               	movlb	0	; () banked
 18185  0127C8  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18186  0127CA  0100               	movlb	0	; () banked
 18187  0127CC  51BD               	movf	Set_Addr_Window@xs& (0+255),w,b
 18188  0127CE  ECFC  F09E         	call	_LCD_Write
 18189                           
 18190                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18191  0127D2  0E01               	movlw	1
 18192  0127D4  0100               	movlb	0	; () banked
 18193  0127D6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18194  0127D8  0E00               	movlw	0
 18195  0127DA  ECFC  F09E         	call	_LCD_Write
 18196                           
 18197                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18198  0127DE  0E01               	movlw	1
 18199  0127E0  0100               	movlb	0	; () banked
 18200  0127E2  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18201  0127E4  0100               	movlb	0	; () banked
 18202  0127E6  51BB               	movf	Set_Addr_Window@xe& (0+255),w,b
 18203  0127E8  ECFC  F09E         	call	_LCD_Write
 18204                           
 18205                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18206  0127EC  0E00               	movlw	0
 18207  0127EE  0100               	movlb	0	; () banked
 18208  0127F0  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18209  0127F2  0E2B               	movlw	43
 18210  0127F4  ECFC  F09E         	call	_LCD_Write
 18211                           
 18212                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18213  0127F8  0E01               	movlw	1
 18214  0127FA  0100               	movlb	0	; () banked
 18215  0127FC  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18216  0127FE  0E00               	movlw	0
 18217  012800  ECFC  F09E         	call	_LCD_Write
 18218                           
 18219                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18220  012804  0E01               	movlw	1
 18221  012806  0100               	movlb	0	; () banked
 18222  012808  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18223  01280A  0100               	movlb	0	; () banked
 18224  01280C  51BA               	movf	Set_Addr_Window@ys& (0+255),w,b
 18225  01280E  ECFC  F09E         	call	_LCD_Write
 18226                           
 18227                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18228  012812  0E01               	movlw	1
 18229  012814  0100               	movlb	0	; () banked
 18230  012816  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18231  012818  0E00               	movlw	0
 18232  01281A  ECFC  F09E         	call	_LCD_Write
 18233                           
 18234                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18235  01281E  0E01               	movlw	1
 18236  012820  0100               	movlb	0	; () banked
 18237  012822  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18238  012824  0100               	movlb	0	; () banked
 18239  012826  51BC               	movf	Set_Addr_Window@ye& (0+255),w,b
 18240  012828  ECFC  F09E         	call	_LCD_Write
 18241                           
 18242                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18243  01282C  0E00               	movlw	0
 18244  01282E  0100               	movlb	0	; () banked
 18245  012830  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18246  012832  0E2C               	movlw	44
 18247  012834  ECFC  F09E         	call	_LCD_Write
 18248  012838  0012               	return		;funcret
 18249  01283A                     __end_of_Set_Addr_Window:
 18250                           	opt stack 0
 18251                           tosu	equ	0xFFF
 18252                           tosh	equ	0xFFE
 18253                           tosl	equ	0xFFD
 18254                           pclath	equ	0xFFA
 18255                           tblptru	equ	0xFF8
 18256                           tblptrh	equ	0xFF7
 18257                           tblptrl	equ	0xFF6
 18258                           tablat	equ	0xFF5
 18259                           prodh	equ	0xFF4
 18260                           prodl	equ	0xFF3
 18261                           intcon	equ	0xFF2
 18262                           indf0	equ	0xFEF
 18263                           postinc0	equ	0xFEE
 18264                           fsr0h	equ	0xFEA
 18265                           fsr0l	equ	0xFE9
 18266                           wreg	equ	0xFE8
 18267                           indf1	equ	0xFE7
 18268                           postdec1	equ	0xFE5
 18269                           fsr1h	equ	0xFE2
 18270                           fsr1l	equ	0xFE1
 18271                           indf2	equ	0xFDF
 18272                           postinc2	equ	0xFDE
 18273                           postdec2	equ	0xFDD
 18274                           plusw2	equ	0xFDB
 18275                           fsr2h	equ	0xFDA
 18276                           fsr2l	equ	0xFD9
 18277                           status	equ	0xFD8
 18278                           
 18279 ;; *************** function _LCD_Word_Write *****************
 18280 ;; Defined at:
 18281 ;;		line 198 in file "Library/LCD.c"
 18282 ;; Parameters:    Size  Location     Type
 18283 ;;  value           2    5[BANK0 ] unsigned short 
 18284 ;; Auto vars:     Size  Location     Type
 18285 ;;		None
 18286 ;; Return value:  Size  Location     Type
 18287 ;;                  1    wreg      void 
 18288 ;; Registers used:
 18289 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18290 ;; Tracked objects:
 18291 ;;		On entry : 0/0
 18292 ;;		On exit  : 0/0
 18293 ;;		Unchanged: 0/0
 18294 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18295 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18296 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18297 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18298 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18299 ;;Total ram usage:        2 bytes
 18300 ;; Hardware stack levels used:    1
 18301 ;; Hardware stack levels required when called:    9
 18302 ;; This function calls:
 18303 ;;		_LCD_Write
 18304 ;; This function is called by:
 18305 ;;		_LCD_Fill
 18306 ;;		_LCD_FillRectangle
 18307 ;;		_LCD_DrawField
 18308 ;;		_LCD_DrawPixel
 18309 ;; This function uses a non-reentrant model
 18310 ;;
 18311                           
 18312                           	psect	text97
 18313  013F0C                     __ptext97:
 18314                           	opt stack 0
 18315  013F0C                     _LCD_Word_Write:
 18316                           	opt stack 19
 18317                           
 18318                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18319                           
 18320                           ;incstack = 0
 18321  013F0C  0E01               	movlw	1
 18322  013F0E  0100               	movlb	0	; () banked
 18323  013F10  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18324  013F12  0100               	movlb	0	; () banked
 18325  013F14  51BB               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18326  013F16  ECFC  F09E         	call	_LCD_Write
 18327                           
 18328                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18329  013F1A  0E01               	movlw	1
 18330  013F1C  0100               	movlb	0	; () banked
 18331  013F1E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 18332  013F20  0100               	movlb	0	; () banked
 18333  013F22  51BA               	movf	LCD_Word_Write@value& (0+255),w,b
 18334  013F24  ECFC  F09E         	call	_LCD_Write
 18335  013F28  0012               	return		;funcret
 18336  013F2A                     __end_of_LCD_Word_Write:
 18337                           	opt stack 0
 18338                           tosu	equ	0xFFF
 18339                           tosh	equ	0xFFE
 18340                           tosl	equ	0xFFD
 18341                           pclath	equ	0xFFA
 18342                           tblptru	equ	0xFF8
 18343                           tblptrh	equ	0xFF7
 18344                           tblptrl	equ	0xFF6
 18345                           tablat	equ	0xFF5
 18346                           prodh	equ	0xFF4
 18347                           prodl	equ	0xFF3
 18348                           intcon	equ	0xFF2
 18349                           indf0	equ	0xFEF
 18350                           postinc0	equ	0xFEE
 18351                           fsr0h	equ	0xFEA
 18352                           fsr0l	equ	0xFE9
 18353                           wreg	equ	0xFE8
 18354                           indf1	equ	0xFE7
 18355                           postdec1	equ	0xFE5
 18356                           fsr1h	equ	0xFE2
 18357                           fsr1l	equ	0xFE1
 18358                           indf2	equ	0xFDF
 18359                           postinc2	equ	0xFDE
 18360                           postdec2	equ	0xFDD
 18361                           plusw2	equ	0xFDB
 18362                           fsr2h	equ	0xFDA
 18363                           fsr2l	equ	0xFD9
 18364                           status	equ	0xFD8
 18365                           
 18366 ;; *************** function _LCD_Write *****************
 18367 ;; Defined at:
 18368 ;;		line 67 in file "Library/LCD.c"
 18369 ;; Parameters:    Size  Location     Type
 18370 ;;  value           1    wreg     unsigned char 
 18371 ;;  mode            1    3[BANK0 ] enum E6761
 18372 ;; Auto vars:     Size  Location     Type
 18373 ;;  value           1    4[BANK0 ] unsigned char 
 18374 ;; Return value:  Size  Location     Type
 18375 ;;                  1    wreg      void 
 18376 ;; Registers used:
 18377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18378 ;; Tracked objects:
 18379 ;;		On entry : 0/0
 18380 ;;		On exit  : 0/0
 18381 ;;		Unchanged: 0/0
 18382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18383 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18386 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18387 ;;Total ram usage:        2 bytes
 18388 ;; Hardware stack levels used:    1
 18389 ;; Hardware stack levels required when called:    8
 18390 ;; This function calls:
 18391 ;;		_Mode_Set
 18392 ;;		_SPI_Send
 18393 ;; This function is called by:
 18394 ;;		_LCD_Init
 18395 ;;		_LCD_Word_Write
 18396 ;;		_Set_Addr_Window
 18397 ;;		_Set_Rotation
 18398 ;;		_LCD_WriteCMD
 18399 ;;		_LCD_WriteData
 18400 ;;		_LCD_Data_Write
 18401 ;;		_LCD_Data_Write_4k
 18402 ;;		_Invert_Display
 18403 ;; This function uses a non-reentrant model
 18404 ;;
 18405                           
 18406                           	psect	text98
 18407  013DF8                     __ptext98:
 18408                           	opt stack 0
 18409  013DF8                     _LCD_Write:
 18410                           	opt stack 20
 18411                           
 18412                           ;incstack = 0
 18413                           ;LCD_Write@value stored from wreg
 18414  013DF8  0100               	movlb	0	; () banked
 18415  013DFA  6FB9               	movwf	LCD_Write@value& (0+255),b
 18416                           
 18417                           ;LCD.c: 89: Mode_Set(mode);
 18418  013DFC  0100               	movlb	0	; () banked
 18419  013DFE  51B8               	movf	LCD_Write@mode& (0+255),w,b
 18420  013E00  ECDA  F09F         	call	_Mode_Set
 18421                           
 18422                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18423  013E04  0E73               	movlw	low _SPI2
 18424  013E06  0100               	movlb	0	; () banked
 18425  013E08  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 18426  013E0A  0E03               	movlw	high _SPI2
 18427  013E0C  0100               	movlb	0	; () banked
 18428  013E0E  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18429  013E10  C0B9  F0B7         	movff	LCD_Write@value,SPI_Send@pData
 18430  013E14  EC16  F099         	call	_SPI_Send	;wreg free
 18431  013E18  0012               	return		;funcret
 18432  013E1A                     __end_of_LCD_Write:
 18433                           	opt stack 0
 18434                           tosu	equ	0xFFF
 18435                           tosh	equ	0xFFE
 18436                           tosl	equ	0xFFD
 18437                           pclath	equ	0xFFA
 18438                           tblptru	equ	0xFF8
 18439                           tblptrh	equ	0xFF7
 18440                           tblptrl	equ	0xFF6
 18441                           tablat	equ	0xFF5
 18442                           prodh	equ	0xFF4
 18443                           prodl	equ	0xFF3
 18444                           intcon	equ	0xFF2
 18445                           indf0	equ	0xFEF
 18446                           postinc0	equ	0xFEE
 18447                           fsr0h	equ	0xFEA
 18448                           fsr0l	equ	0xFE9
 18449                           wreg	equ	0xFE8
 18450                           indf1	equ	0xFE7
 18451                           postdec1	equ	0xFE5
 18452                           fsr1h	equ	0xFE2
 18453                           fsr1l	equ	0xFE1
 18454                           indf2	equ	0xFDF
 18455                           postinc2	equ	0xFDE
 18456                           postdec2	equ	0xFDD
 18457                           plusw2	equ	0xFDB
 18458                           fsr2h	equ	0xFDA
 18459                           fsr2l	equ	0xFD9
 18460                           status	equ	0xFD8
 18461                           
 18462 ;; *************** function _SPI_Send *****************
 18463 ;; Defined at:
 18464 ;;		line 226 in file "Library/SPI.c"
 18465 ;; Parameters:    Size  Location     Type
 18466 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18467 ;;		 -> SPI1(11), SPI2(11), 
 18468 ;;  pData           1    2[BANK0 ] unsigned char 
 18469 ;; Auto vars:     Size  Location     Type
 18470 ;;		None
 18471 ;; Return value:  Size  Location     Type
 18472 ;;                  1    wreg      unsigned char 
 18473 ;; Registers used:
 18474 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18475 ;; Tracked objects:
 18476 ;;		On entry : 0/0
 18477 ;;		On exit  : 0/0
 18478 ;;		Unchanged: 0/0
 18479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18480 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18482 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18483 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18484 ;;Total ram usage:        3 bytes
 18485 ;; Hardware stack levels used:    1
 18486 ;; Hardware stack levels required when called:    7
 18487 ;; This function calls:
 18488 ;;		Nothing
 18489 ;; This function is called by:
 18490 ;;		_LCD_Write
 18491 ;;		_OutSeg
 18492 ;; This function uses a non-reentrant model
 18493 ;;
 18494                           
 18495                           	psect	text99
 18496  01322C                     __ptext99:
 18497                           	opt stack 0
 18498  01322C                     _SPI_Send:
 18499                           	opt stack 20
 18500                           
 18501                           ;SPI.c: 253: switch (pInput->mChannel)
 18502                           
 18503                           ;incstack = 0
 18504  01322C  D026               	goto	l678
 18505  01322E                     
 18506                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18507  01322E  C0A7  FFD9         	movff	_PortC+4,fsr2l
 18508  013232  C0A8  FFDA         	movff	_PortC+5,fsr2h
 18509  013236  0100               	movlb	0	; () banked
 18510  013238  94DF               	bcf	indf2,2,c
 18511                           
 18512                           ; BSR set to: 0
 18513                           ;SPI.c: 257: SSP1BUF = pData;
 18514  01323A  C0B7  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18515  01323E                     
 18516                           ; BSR set to: 0
 18517  01323E  A0C7               	btfss	4039,0,c	;volatile
 18518  013240  D7FE               	goto	l681
 18519                           
 18520                           ;SPI.c: 259: pData = SSP1BUF;
 18521  013242  CFC9 F0B7          	movff	4041,SPI_Send@pData	;volatile
 18522                           
 18523                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18524  013246  C0A7  FFD9         	movff	_PortC+4,fsr2l
 18525  01324A  C0A8  FFDA         	movff	_PortC+5,fsr2h
 18526  01324E  0100               	movlb	0	; () banked
 18527  013250  84DF               	bsf	indf2,2,c
 18528                           
 18529                           ; BSR set to: 0
 18530                           ;SPI.c: 261: return pData;
 18531                           ;	Return value of _SPI_Send is never used
 18532  013252  0012               	return	
 18533  013254                     
 18534                           ; BSR set to: 0
 18535                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18536                           
 18537                           ; BSR set to: 0
 18538  013254  C09D  FFD9         	movff	_PortD+4,fsr2l
 18539  013258  C09E  FFDA         	movff	_PortD+5,fsr2h
 18540  01325C  0100               	movlb	0	; () banked
 18541  01325E  9EDF               	bcf	indf2,7,c
 18542                           
 18543                           ; BSR set to: 0
 18544                           ;SPI.c: 264: SSP2BUF = pData;
 18545  013260  C0B7  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18546  013264                     
 18547                           ; BSR set to: 0
 18548  013264  A06D               	btfss	3949,0,c	;volatile
 18549  013266  D7FE               	goto	l686
 18550                           
 18551                           ;SPI.c: 266: pData = SSP2BUF;
 18552  013268  CF6F F0B7          	movff	3951,SPI_Send@pData	;volatile
 18553                           
 18554                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18555  01326C  C09D  FFD9         	movff	_PortD+4,fsr2l
 18556  013270  C09E  FFDA         	movff	_PortD+5,fsr2h
 18557  013274  0100               	movlb	0	; () banked
 18558  013276  8EDF               	bsf	indf2,7,c
 18559                           
 18560                           ; BSR set to: 0
 18561                           ;SPI.c: 269: };
 18562                           
 18563                           ; BSR set to: 0
 18564                           ;SPI.c: 268: return pData;
 18565                           ;	Return value of _SPI_Send is never used
 18566  013278  0012               	return	
 18567  01327A                     l678:
 18568                           
 18569                           ; BSR set to: 0
 18570  01327A  0100               	movlb	0	; () banked
 18571  01327C  EE20 F002          	lfsr	2,2
 18572  013280  51B5               	movf	SPI_Send@pInput& (0+255),w,b
 18573  013282  26D9               	addwf	fsr2l,f,c
 18574  013284  51B6               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18575  013286  22DA               	addwfc	fsr2h,f,c
 18576  013288  50DF               	movf	indf2,w,c
 18577                           
 18578                           ; Switch size 1, requested type "space"
 18579                           ; Number of cases is 2, Range of values is 0 to 1
 18580                           ; switch strategies available:
 18581                           ; Name         Instructions Cycles
 18582                           ; simple_byte            7     4 (average)
 18583                           ;	Chosen strategy is simple_byte
 18584  01328A  0A00               	xorlw	0	; case 0
 18585  01328C  B4D8               	btfsc	status,2,c
 18586  01328E  D7CF               	goto	l679
 18587  013290  0A01               	xorlw	1	; case 1
 18588  013292  A4D8               	btfss	status,2,c
 18589  013294  0012               	return	
 18590  013296  D7DE               	goto	l684
 18591  013298                     __end_of_SPI_Send:
 18592                           	opt stack 0
 18593                           tosu	equ	0xFFF
 18594                           tosh	equ	0xFFE
 18595                           tosl	equ	0xFFD
 18596                           pclath	equ	0xFFA
 18597                           tblptru	equ	0xFF8
 18598                           tblptrh	equ	0xFF7
 18599                           tblptrl	equ	0xFF6
 18600                           tablat	equ	0xFF5
 18601                           prodh	equ	0xFF4
 18602                           prodl	equ	0xFF3
 18603                           intcon	equ	0xFF2
 18604                           indf0	equ	0xFEF
 18605                           postinc0	equ	0xFEE
 18606                           fsr0h	equ	0xFEA
 18607                           fsr0l	equ	0xFE9
 18608                           wreg	equ	0xFE8
 18609                           indf1	equ	0xFE7
 18610                           postdec1	equ	0xFE5
 18611                           fsr1h	equ	0xFE2
 18612                           fsr1l	equ	0xFE1
 18613                           indf2	equ	0xFDF
 18614                           postinc2	equ	0xFDE
 18615                           postdec2	equ	0xFDD
 18616                           plusw2	equ	0xFDB
 18617                           fsr2h	equ	0xFDA
 18618                           fsr2l	equ	0xFD9
 18619                           status	equ	0xFD8
 18620                           
 18621 ;; *************** function _Mode_Set *****************
 18622 ;; Defined at:
 18623 ;;		line 40 in file "Library/LCD.c"
 18624 ;; Parameters:    Size  Location     Type
 18625 ;;  pMode           1    wreg     enum E6761
 18626 ;; Auto vars:     Size  Location     Type
 18627 ;;  pMode           1    0[BANK0 ] enum E6761
 18628 ;; Return value:  Size  Location     Type
 18629 ;;                  1    wreg      void 
 18630 ;; Registers used:
 18631 ;;		wreg
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18638 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18640 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;Total ram usage:        1 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    7
 18644 ;; This function calls:
 18645 ;;		Nothing
 18646 ;; This function is called by:
 18647 ;;		_LCD_Write
 18648 ;; This function uses a non-reentrant model
 18649 ;;
 18650                           
 18651                           	psect	text100
 18652  013FB4                     __ptext100:
 18653                           	opt stack 0
 18654  013FB4                     _Mode_Set:
 18655                           	opt stack 20
 18656                           
 18657                           ; BSR set to: 0
 18658                           ;incstack = 0
 18659                           ;Mode_Set@pMode stored from wreg
 18660  013FB4  0100               	movlb	0	; () banked
 18661  013FB6  6FB5               	movwf	Mode_Set@pMode& (0+255),b
 18662                           
 18663                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 18664  013FB8  0100               	movlb	0	; () banked
 18665  013FBA  B1B5               	btfsc	Mode_Set@pMode& (0+255),0,b
 18666  013FBC  D002               	bra	u6565
 18667  013FBE  9E85               	bcf	3973,7,c	;volatile
 18668  013FC0  D001               	bra	u6566
 18669  013FC2                     u6565:
 18670  013FC2  8E85               	bsf	3973,7,c	;volatile
 18671  013FC4                     u6566:
 18672  013FC4  0012               	return		;funcret
 18673  013FC6                     __end_of_Mode_Set:
 18674                           	opt stack 0
 18675                           tosu	equ	0xFFF
 18676                           tosh	equ	0xFFE
 18677                           tosl	equ	0xFFD
 18678                           pclath	equ	0xFFA
 18679                           tblptru	equ	0xFF8
 18680                           tblptrh	equ	0xFF7
 18681                           tblptrl	equ	0xFF6
 18682                           tablat	equ	0xFF5
 18683                           prodh	equ	0xFF4
 18684                           prodl	equ	0xFF3
 18685                           intcon	equ	0xFF2
 18686                           indf0	equ	0xFEF
 18687                           postinc0	equ	0xFEE
 18688                           fsr0h	equ	0xFEA
 18689                           fsr0l	equ	0xFE9
 18690                           wreg	equ	0xFE8
 18691                           indf1	equ	0xFE7
 18692                           postdec1	equ	0xFE5
 18693                           fsr1h	equ	0xFE2
 18694                           fsr1l	equ	0xFE1
 18695                           indf2	equ	0xFDF
 18696                           postinc2	equ	0xFDE
 18697                           postdec2	equ	0xFDD
 18698                           plusw2	equ	0xFDB
 18699                           fsr2h	equ	0xFDA
 18700                           fsr2l	equ	0xFD9
 18701                           status	equ	0xFD8
 18702                           
 18703 ;; *************** function _Console_MakeField *****************
 18704 ;; Defined at:
 18705 ;;		line 435 in file "Library/Console.c"
 18706 ;; Parameters:    Size  Location     Type
 18707 ;;  pInput          1    wreg     unsigned char 
 18708 ;; Auto vars:     Size  Location     Type
 18709 ;;  pInput          1   11[BANK0 ] unsigned char 
 18710 ;;  y               1   17[BANK0 ] unsigned char 
 18711 ;;  x               1   16[BANK0 ] unsigned char 
 18712 ;;  Column          2   12[BANK0 ] PTR struct Byte
 18713 ;;		 -> Font5x7(480), 
 18714 ;;  Index           2    9[BANK0 ] unsigned short 
 18715 ;; Return value:  Size  Location     Type
 18716 ;;                  2    5[BANK0 ] PTR unsigned short 
 18717 ;; Registers used:
 18718 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18719 ;; Tracked objects:
 18720 ;;		On entry : 0/0
 18721 ;;		On exit  : 0/0
 18722 ;;		Unchanged: 0/0
 18723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18724 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;Total ram usage:       13 bytes
 18729 ;; Hardware stack levels used:    1
 18730 ;; Hardware stack levels required when called:    8
 18731 ;; This function calls:
 18732 ;;		_Byte_GetBit
 18733 ;; This function is called by:
 18734 ;;		_Console_Render
 18735 ;; This function uses a non-reentrant model
 18736 ;;
 18737                           
 18738                           	psect	text101
 18739  0121AC                     __ptext101:
 18740                           	opt stack 0
 18741  0121AC                     _Console_MakeField:
 18742                           	opt stack 21
 18743                           
 18744                           ;incstack = 0
 18745                           ;Console_MakeField@pInput stored from wreg
 18746  0121AC  0100               	movlb	0	; () banked
 18747  0121AE  6FC0               	movwf	Console_MakeField@pInput& (0+255),b
 18748                           
 18749                           ;Console.c: 437: static Colour Fill[7][5];
 18750                           ;Console.c: 438: pInput -= 32;
 18751  0121B0  0E20               	movlw	32
 18752  0121B2  0100               	movlb	0	; () banked
 18753  0121B4  5FC0               	subwf	Console_MakeField@pInput& (0+255),f,b
 18754                           
 18755                           ; BSR set to: 0
 18756                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 18757  0121B6  0100               	movlb	0	; () banked
 18758  0121B8  51C0               	movf	Console_MakeField@pInput& (0+255),w,b
 18759  0121BA  0D05               	mullw	5
 18760  0121BC  CFF3 F0BE          	movff	prodl,Console_MakeField@Index
 18761  0121C0  CFF4 F0BF          	movff	prodh,Console_MakeField@Index+1
 18762                           
 18763                           ; BSR set to: 0
 18764                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 18765  0121C4  0EDF               	movlw	low _Font5x7
 18766  0121C6  0100               	movlb	0	; () banked
 18767  0121C8  25BE               	addwf	Console_MakeField@Index& (0+255),w,b
 18768  0121CA  0100               	movlb	0	; () banked
 18769  0121CC  6FC1               	movwf	Console_MakeField@Column& (0+255),b
 18770  0121CE  0EFD               	movlw	high _Font5x7
 18771  0121D0  0100               	movlb	0	; () banked
 18772  0121D2  21BF               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 18773  0121D4  0100               	movlb	0	; () banked
 18774  0121D6  6FC2               	movwf	(Console_MakeField@Column+1)& (0+255),b
 18775                           
 18776                           ; BSR set to: 0
 18777                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 18778  0121D8  0E00               	movlw	0
 18779  0121DA  0100               	movlb	0	; () banked
 18780  0121DC  6FC5               	movwf	Console_MakeField@x& (0+255),b
 18781  0121DE                     l11457:
 18782                           
 18783                           ; BSR set to: 0
 18784  0121DE  0E04               	movlw	4
 18785  0121E0  0100               	movlb	0	; () banked
 18786  0121E2  65C5               	cpfsgt	Console_MakeField@x& (0+255),b
 18787  0121E4  D001               	goto	l1077
 18788  0121E6  D043               	goto	u7540
 18789  0121E8                     l1077:
 18790                           
 18791                           ; BSR set to: 0
 18792                           ;Console.c: 444: {
 18793                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 18794                           
 18795                           ; BSR set to: 0
 18796  0121E8  0E00               	movlw	0
 18797  0121EA  0100               	movlb	0	; () banked
 18798  0121EC  6FC6               	movwf	Console_MakeField@y& (0+255),b
 18799  0121EE                     l11463:
 18800                           
 18801                           ; BSR set to: 0
 18802  0121EE  0E06               	movlw	6
 18803  0121F0  0100               	movlb	0	; () banked
 18804  0121F2  65C6               	cpfsgt	Console_MakeField@y& (0+255),b
 18805  0121F4  D001               	goto	l1079
 18806  0121F6  D035               	goto	u7530
 18807  0121F8                     l1079:
 18808                           
 18809                           ; BSR set to: 0
 18810                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 18811                           
 18812                           ; BSR set to: 0
 18813  0121F8  C0C1  F0B5         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 18814  0121FC  C0C2  F0B6         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 18815  012200  C0C6  F0B7         	movff	Console_MakeField@y,Byte_GetBit@pBit
 18816  012204  EC4D  F09E         	call	_Byte_GetBit	;wreg free
 18817  012208  0900               	iorlw	0
 18818  01220A  A4D8               	btfss	status,2,c
 18819  01220C  D005               	goto	l1082
 18820  01220E  C081  F0C3         	movff	_gBackcolour,_Console_MakeField$10974
 18821  012212  C082  F0C4         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 18822  012216  D004               	goto	l1084
 18823  012218                     l1082:
 18824  012218  C0FD  F0C3         	movff	_gForecolour,_Console_MakeField$10974
 18825  01221C  C0FE  F0C4         	movff	_gForecolour+1,_Console_MakeField$10974+1
 18826  012220                     l1084:
 18827  012220  0100               	movlb	0	; () banked
 18828  012222  51C6               	movf	Console_MakeField@y& (0+255),w,b
 18829  012224  0D0A               	mullw	10
 18830  012226  0E64               	movlw	low Console_MakeField@Fill
 18831  012228  0100               	movlb	0	; () banked
 18832  01222A  6FBC               	movwf	??_Console_MakeField& (0+255),b
 18833  01222C  0E04               	movlw	high Console_MakeField@Fill
 18834  01222E  0100               	movlb	0	; () banked
 18835  012230  6FBD               	movwf	(??_Console_MakeField+1)& (0+255),b
 18836  012232  50F3               	movf	prodl,w,c
 18837  012234  0100               	movlb	0	; () banked
 18838  012236  27BC               	addwf	??_Console_MakeField& (0+255),f,b
 18839  012238  50F4               	movf	prodh,w,c
 18840  01223A  0100               	movlb	0	; () banked
 18841  01223C  23BD               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 18842  01223E  0100               	movlb	0	; () banked
 18843  012240  51C5               	movf	Console_MakeField@x& (0+255),w,b
 18844  012242  0D02               	mullw	2
 18845  012244  50F3               	movf	prodl,w,c
 18846  012246  0100               	movlb	0	; () banked
 18847  012248  25BC               	addwf	??_Console_MakeField& (0+255),w,b
 18848  01224A  6ED9               	movwf	fsr2l,c
 18849  01224C  50F4               	movf	prodh,w,c
 18850  01224E  0100               	movlb	0	; () banked
 18851  012250  21BD               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 18852  012252  6EDA               	movwf	fsr2h,c
 18853  012254  C0C3  FFDE         	movff	_Console_MakeField$10974,postinc2
 18854  012258  C0C4  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 18855                           
 18856                           ; BSR set to: 0
 18857  01225C  0100               	movlb	0	; () banked
 18858  01225E  2BC6               	incf	Console_MakeField@y& (0+255),f,b
 18859  012260  D7C6               	goto	l11463
 18860  012262                     u7530:
 18861                           
 18862                           ; BSR set to: 0
 18863                           ;Console.c: 447: Column += 1;
 18864                           
 18865                           ; BSR set to: 0
 18866  012262  0100               	movlb	0	; () banked
 18867  012264  4BC1               	infsnz	Console_MakeField@Column& (0+255),f,b
 18868  012266  2BC2               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 18869  012268  0100               	movlb	0	; () banked
 18870  01226A  2BC5               	incf	Console_MakeField@x& (0+255),f,b
 18871  01226C  D7B8               	goto	l11457
 18872  01226E                     u7540:
 18873                           
 18874                           ; BSR set to: 0
 18875                           ;Console.c: 448: }
 18876                           ;Console.c: 449: return (ColourPtr)Fill;
 18877                           
 18878                           ; BSR set to: 0
 18879  01226E  0E64               	movlw	low Console_MakeField@Fill
 18880  012270  0100               	movlb	0	; () banked
 18881  012272  6FBA               	movwf	?_Console_MakeField& (0+255),b
 18882  012274  0E04               	movlw	high Console_MakeField@Fill
 18883  012276  0100               	movlb	0	; () banked
 18884  012278  6FBB               	movwf	(?_Console_MakeField+1)& (0+255),b
 18885  01227A  0012               	return	
 18886  01227C                     __end_of_Console_MakeField:
 18887                           	opt stack 0
 18888                           tosu	equ	0xFFF
 18889                           tosh	equ	0xFFE
 18890                           tosl	equ	0xFFD
 18891                           pclath	equ	0xFFA
 18892                           tblptru	equ	0xFF8
 18893                           tblptrh	equ	0xFF7
 18894                           tblptrl	equ	0xFF6
 18895                           tablat	equ	0xFF5
 18896                           prodh	equ	0xFF4
 18897                           prodl	equ	0xFF3
 18898                           intcon	equ	0xFF2
 18899                           indf0	equ	0xFEF
 18900                           postinc0	equ	0xFEE
 18901                           fsr0h	equ	0xFEA
 18902                           fsr0l	equ	0xFE9
 18903                           wreg	equ	0xFE8
 18904                           indf1	equ	0xFE7
 18905                           postdec1	equ	0xFE5
 18906                           fsr1h	equ	0xFE2
 18907                           fsr1l	equ	0xFE1
 18908                           indf2	equ	0xFDF
 18909                           postinc2	equ	0xFDE
 18910                           postdec2	equ	0xFDD
 18911                           plusw2	equ	0xFDB
 18912                           fsr2h	equ	0xFDA
 18913                           fsr2l	equ	0xFD9
 18914                           status	equ	0xFD8
 18915                           
 18916 ;; *************** function _Byte_GetBit *****************
 18917 ;; Defined at:
 18918 ;;		line 38 in file "Library/Types.c"
 18919 ;; Parameters:    Size  Location     Type
 18920 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18921 ;;		 -> Font5x7(480), 
 18922 ;;  pBit            1    2[BANK0 ] unsigned char 
 18923 ;; Auto vars:     Size  Location     Type
 18924 ;;  Output          1    4[BANK0 ] unsigned char 
 18925 ;; Return value:  Size  Location     Type
 18926 ;;                  1    wreg      unsigned char 
 18927 ;; Registers used:
 18928 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 18929 ;; Tracked objects:
 18930 ;;		On entry : 0/0
 18931 ;;		On exit  : 0/0
 18932 ;;		Unchanged: 0/0
 18933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18934 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18935 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18936 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18937 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18938 ;;Total ram usage:        5 bytes
 18939 ;; Hardware stack levels used:    1
 18940 ;; Hardware stack levels required when called:    7
 18941 ;; This function calls:
 18942 ;;		Nothing
 18943 ;; This function is called by:
 18944 ;;		_Console_MakeField
 18945 ;;		_Word_GetBit
 18946 ;; This function uses a non-reentrant model
 18947 ;;
 18948                           
 18949                           	psect	text102
 18950  013C9A                     __ptext102:
 18951                           	opt stack 0
 18952  013C9A                     _Byte_GetBit:
 18953                           	opt stack 21
 18954                           
 18955                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 18956                           
 18957                           ; BSR set to: 0
 18958                           ;incstack = 0
 18959  013C9A  C0B5  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 18960  013C9E  C0B6  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 18961  013CA2                     	if	0	;tblptru may be non-zero
 18962  013CA2                     	endif
 18963  013CA2                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 18964  013CA2  0E00               	movlw	low (__mediumconst shr (0+16))
 18965  013CA4  6EF8               	movwf	tblptru,c
 18966  013CA6                     	endif
 18967  013CA6  0008               	tblrd		*
 18968  013CA8  CFF5 F0B9          	movff	tablat,Byte_GetBit@Output
 18969                           
 18970                           ;Types.c: 42: Output >>= pBit;
 18971  013CAC  0100               	movlb	0	; () banked
 18972  013CAE  29B7               	incf	Byte_GetBit@pBit& (0+255),w,b
 18973  013CB0  0100               	movlb	0	; () banked
 18974  013CB2  6FB8               	movwf	??_Byte_GetBit& (0+255),b
 18975  013CB4  D003               	goto	u7120
 18976  013CB6                     u7125:
 18977  013CB6  0100               	movlb	0	; () banked
 18978  013CB8  90D8               	bcf	status,0,c
 18979  013CBA  33B9               	rrcf	Byte_GetBit@Output& (0+255),f,b
 18980  013CBC                     u7120:
 18981  013CBC  0100               	movlb	0	; () banked
 18982  013CBE  2FB8               	decfsz	??_Byte_GetBit& (0+255),f,b
 18983  013CC0  D7FA               	goto	u7125
 18984                           
 18985                           ;Types.c: 43: Output &= 1;
 18986  013CC2  0E01               	movlw	1
 18987  013CC4  0100               	movlb	0	; () banked
 18988  013CC6  17B9               	andwf	Byte_GetBit@Output& (0+255),f,b
 18989                           
 18990                           ; BSR set to: 0
 18991                           ;Types.c: 44: return Output;
 18992  013CC8  0100               	movlb	0	; () banked
 18993  013CCA  51B9               	movf	Byte_GetBit@Output& (0+255),w,b
 18994  013CCC  0012               	return	
 18995  013CCE                     __end_of_Byte_GetBit:
 18996                           	opt stack 0
 18997                           tosu	equ	0xFFF
 18998                           tosh	equ	0xFFE
 18999                           tosl	equ	0xFFD
 19000                           pclath	equ	0xFFA
 19001                           tblptru	equ	0xFF8
 19002                           tblptrh	equ	0xFF7
 19003                           tblptrl	equ	0xFF6
 19004                           tablat	equ	0xFF5
 19005                           prodh	equ	0xFF4
 19006                           prodl	equ	0xFF3
 19007                           intcon	equ	0xFF2
 19008                           indf0	equ	0xFEF
 19009                           postinc0	equ	0xFEE
 19010                           fsr0h	equ	0xFEA
 19011                           fsr0l	equ	0xFE9
 19012                           wreg	equ	0xFE8
 19013                           indf1	equ	0xFE7
 19014                           postdec1	equ	0xFE5
 19015                           fsr1h	equ	0xFE2
 19016                           fsr1l	equ	0xFE1
 19017                           indf2	equ	0xFDF
 19018                           postinc2	equ	0xFDE
 19019                           postdec2	equ	0xFDD
 19020                           plusw2	equ	0xFDB
 19021                           fsr2h	equ	0xFDA
 19022                           fsr2l	equ	0xFD9
 19023                           status	equ	0xFD8
 19024                           
 19025 ;; *************** function _Console_Init *****************
 19026 ;; Defined at:
 19027 ;;		line 157 in file "Library/Console.c"
 19028 ;; Parameters:    Size  Location     Type
 19029 ;;		None
 19030 ;; Auto vars:     Size  Location     Type
 19031 ;;  y               1    3[BANK0 ] unsigned char 
 19032 ;;  x               1    2[BANK0 ] unsigned char 
 19033 ;; Return value:  Size  Location     Type
 19034 ;;                  1    wreg      void 
 19035 ;; Registers used:
 19036 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 19037 ;; Tracked objects:
 19038 ;;		On entry : 0/0
 19039 ;;		On exit  : 0/0
 19040 ;;		Unchanged: 0/0
 19041 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19042 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19043 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19044 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19045 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19046 ;;Total ram usage:        4 bytes
 19047 ;; Hardware stack levels used:    1
 19048 ;; Hardware stack levels required when called:    7
 19049 ;; This function calls:
 19050 ;;		Nothing
 19051 ;; This function is called by:
 19052 ;;		_main
 19053 ;; This function uses a non-reentrant model
 19054 ;;
 19055                           
 19056                           	psect	text103
 19057  012E6C                     __ptext103:
 19058                           	opt stack 0
 19059  012E6C                     _Console_Init:
 19060                           	opt stack 23
 19061                           
 19062                           ;Console.c: 160: lBufferX = 0;
 19063                           
 19064                           ; BSR set to: 0
 19065                           ;incstack = 0
 19066  012E6C  0E00               	movlw	0
 19067  012E6E  0100               	movlb	0	; () banked
 19068  012E70  6F8D               	movwf	_lBufferX& (0+255),b
 19069                           
 19070                           ;Console.c: 161: lBufferY = 0;
 19071  012E72  0E00               	movlw	0
 19072  012E74  0100               	movlb	0	; () banked
 19073  012E76  6F8C               	movwf	_lBufferY& (0+255),b
 19074                           
 19075                           ;Console.c: 163: UINT8 x, y;
 19076                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 19077  012E78  0E00               	movlw	0
 19078  012E7A  0100               	movlb	0	; () banked
 19079  012E7C  6FB7               	movwf	Console_Init@x& (0+255),b
 19080  012E7E                     l11801:
 19081                           
 19082                           ; BSR set to: 0
 19083  012E7E  0E13               	movlw	19
 19084  012E80  0100               	movlb	0	; () banked
 19085  012E82  65B7               	cpfsgt	Console_Init@x& (0+255),b
 19086  012E84  D001               	goto	l976
 19087  012E86  0012               	return	
 19088  012E88                     l976:
 19089                           
 19090                           ; BSR set to: 0
 19091                           ;Console.c: 165: {
 19092                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 19093                           
 19094                           ; BSR set to: 0
 19095  012E88  0E00               	movlw	0
 19096  012E8A  0100               	movlb	0	; () banked
 19097  012E8C  6FB8               	movwf	Console_Init@y& (0+255),b
 19098  012E8E                     l11807:
 19099                           
 19100                           ; BSR set to: 0
 19101  012E8E  0E0E               	movlw	14
 19102  012E90  0100               	movlb	0	; () banked
 19103  012E92  65B8               	cpfsgt	Console_Init@y& (0+255),b
 19104  012E94  D001               	goto	l978
 19105  012E96  D02C               	goto	u7980
 19106  012E98                     l978:
 19107                           
 19108                           ; BSR set to: 0
 19109                           ;Console.c: 167: {
 19110                           ;Console.c: 168: lBuffer[y][x] = '\0';
 19111                           
 19112                           ; BSR set to: 0
 19113  012E98  0100               	movlb	0	; () banked
 19114  012E9A  51B8               	movf	Console_Init@y& (0+255),w,b
 19115  012E9C  0D14               	mullw	20
 19116  012E9E  0EAA               	movlw	low _lBuffer
 19117  012EA0  0100               	movlb	0	; () banked
 19118  012EA2  6FB5               	movwf	??_Console_Init& (0+255),b
 19119  012EA4  0E04               	movlw	high _lBuffer
 19120  012EA6  0100               	movlb	0	; () banked
 19121  012EA8  6FB6               	movwf	(??_Console_Init+1)& (0+255),b
 19122  012EAA  50F3               	movf	prodl,w,c
 19123  012EAC  0100               	movlb	0	; () banked
 19124  012EAE  27B5               	addwf	??_Console_Init& (0+255),f,b
 19125  012EB0  50F4               	movf	prodh,w,c
 19126  012EB2  0100               	movlb	0	; () banked
 19127  012EB4  23B6               	addwfc	(??_Console_Init+1)& (0+255),f,b
 19128  012EB6  0100               	movlb	0	; () banked
 19129  012EB8  51B7               	movf	Console_Init@x& (0+255),w,b
 19130  012EBA  0D01               	mullw	1
 19131  012EBC  50F3               	movf	prodl,w,c
 19132  012EBE  0100               	movlb	0	; () banked
 19133  012EC0  25B5               	addwf	??_Console_Init& (0+255),w,b
 19134  012EC2  6ED9               	movwf	fsr2l,c
 19135  012EC4  50F4               	movf	prodh,w,c
 19136  012EC6  0100               	movlb	0	; () banked
 19137  012EC8  21B6               	addwfc	(??_Console_Init+1)& (0+255),w,b
 19138  012ECA  6EDA               	movwf	fsr2h,c
 19139  012ECC  0E00               	movlw	0
 19140  012ECE  6EDF               	movwf	indf2,c
 19141                           
 19142                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 19143  012ED0  0100               	movlb	0	; () banked
 19144  012ED2  51B8               	movf	Console_Init@y& (0+255),w,b
 19145  012ED4  0D02               	mullw	2
 19146  012ED6  0E00               	movlw	low _lCBuffer
 19147  012ED8  24F3               	addwf	prodl,w,c
 19148  012EDA  6ED9               	movwf	fsr2l,c
 19149  012EDC  0E03               	movlw	high _lCBuffer
 19150  012EDE  20F4               	addwfc	prodh,w,c
 19151  012EE0  6EDA               	movwf	fsr2h,c
 19152  012EE2  0EFF               	movlw	255
 19153  012EE4  6EDE               	movwf	postinc2,c
 19154  012EE6  0EFF               	movlw	255
 19155  012EE8  6EDD               	movwf	postdec2,c
 19156                           
 19157                           ; BSR set to: 0
 19158  012EEA  0100               	movlb	0	; () banked
 19159  012EEC  2BB8               	incf	Console_Init@y& (0+255),f,b
 19160  012EEE  D7CF               	goto	l11807
 19161  012EF0                     u7980:
 19162                           
 19163                           ; BSR set to: 0
 19164                           
 19165                           ; BSR set to: 0
 19166  012EF0  0100               	movlb	0	; () banked
 19167  012EF2  2BB7               	incf	Console_Init@x& (0+255),f,b
 19168  012EF4  D7C4               	goto	l11801
 19169  012EF6                     __end_of_Console_Init:
 19170                           	opt stack 0
 19171                           tosu	equ	0xFFF
 19172                           tosh	equ	0xFFE
 19173                           tosl	equ	0xFFD
 19174                           pclath	equ	0xFFA
 19175                           tblptru	equ	0xFF8
 19176                           tblptrh	equ	0xFF7
 19177                           tblptrl	equ	0xFF6
 19178                           tablat	equ	0xFF5
 19179                           prodh	equ	0xFF4
 19180                           prodl	equ	0xFF3
 19181                           intcon	equ	0xFF2
 19182                           indf0	equ	0xFEF
 19183                           postinc0	equ	0xFEE
 19184                           fsr0h	equ	0xFEA
 19185                           fsr0l	equ	0xFE9
 19186                           wreg	equ	0xFE8
 19187                           indf1	equ	0xFE7
 19188                           postdec1	equ	0xFE5
 19189                           fsr1h	equ	0xFE2
 19190                           fsr1l	equ	0xFE1
 19191                           indf2	equ	0xFDF
 19192                           postinc2	equ	0xFDE
 19193                           postdec2	equ	0xFDD
 19194                           plusw2	equ	0xFDB
 19195                           fsr2h	equ	0xFDA
 19196                           fsr2l	equ	0xFD9
 19197                           status	equ	0xFD8
 19198                           
 19199 ;; *************** function _ISR_Function *****************
 19200 ;; Defined at:
 19201 ;;		line 38 in file "Library/ISR.c"
 19202 ;; Parameters:    Size  Location     Type
 19203 ;;		None
 19204 ;; Auto vars:     Size  Location     Type
 19205 ;;		None
 19206 ;; Return value:  Size  Location     Type
 19207 ;;                  1    wreg      void 
 19208 ;; Registers used:
 19209 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19210 ;; Tracked objects:
 19211 ;;		On entry : 0/0
 19212 ;;		On exit  : 0/0
 19213 ;;		Unchanged: 0/0
 19214 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19215 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19216 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19217 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19218 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19219 ;;Total ram usage:       18 bytes
 19220 ;; Hardware stack levels used:    1
 19221 ;; Hardware stack levels required when called:    6
 19222 ;; This function calls:
 19223 ;;		_Timer0_ISR
 19224 ;; This function is called by:
 19225 ;;		Interrupt level 2
 19226 ;; This function uses a non-reentrant model
 19227 ;;
 19228                           
 19229                           	psect	intcode
 19230  001408                     __pintcode:
 19231                           	opt stack 0
 19232  001408                     _ISR_Function:
 19233                           	opt stack 14
 19234                           
 19235                           ; BSR set to: 0
 19236                           ;incstack = 0
 19237  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 19238  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 19239  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 19240  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 19241  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 19242  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 19243  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 19244  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 19245  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 19246  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 19247  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 19248  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 19249  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 19250  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 19251  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 19252  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 19253  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 19254  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 19255  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 19256                           
 19257                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 19258  001452  92F2               	bcf	intcon,1,c	;volatile
 19259                           
 19260                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 19261  001454  B4F2               	btfsc	intcon,2,c	;volatile
 19262  001456  AAF2               	btfss	intcon,5,c	;volatile
 19263  001458  D002               	goto	i2l1590
 19264                           
 19265                           ;ISR.c: 68: Timer0_ISR();
 19266  00145A  ECAF  F09E         	call	_Timer0_ISR	;wreg free
 19267  00145E                     i2l1590:
 19268  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 19269  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 19270  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 19271  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 19272  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 19273  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 19274  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 19275  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 19276  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 19277  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 19278  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 19279  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 19280  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 19281  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 19282  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 19283  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 19284  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 19285  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 19286  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 19287  0014A8  0011               	retfie		f
 19288  0014AA                     __end_of_ISR_Function:
 19289                           	opt stack 0
 19290                           tosu	equ	0xFFF
 19291                           tosh	equ	0xFFE
 19292                           tosl	equ	0xFFD
 19293                           pclatu	equ	0xFFB
 19294                           pclath	equ	0xFFA
 19295                           tblptru	equ	0xFF8
 19296                           tblptrh	equ	0xFF7
 19297                           tblptrl	equ	0xFF6
 19298                           tablat	equ	0xFF5
 19299                           prodh	equ	0xFF4
 19300                           prodl	equ	0xFF3
 19301                           intcon	equ	0xFF2
 19302                           indf0	equ	0xFEF
 19303                           postinc0	equ	0xFEE
 19304                           fsr0h	equ	0xFEA
 19305                           fsr0l	equ	0xFE9
 19306                           wreg	equ	0xFE8
 19307                           indf1	equ	0xFE7
 19308                           postdec1	equ	0xFE5
 19309                           fsr1h	equ	0xFE2
 19310                           fsr1l	equ	0xFE1
 19311                           indf2	equ	0xFDF
 19312                           postinc2	equ	0xFDE
 19313                           postdec2	equ	0xFDD
 19314                           plusw2	equ	0xFDB
 19315                           fsr2h	equ	0xFDA
 19316                           fsr2l	equ	0xFD9
 19317                           status	equ	0xFD8
 19318                           
 19319 ;; *************** function _Timer0_ISR *****************
 19320 ;; Defined at:
 19321 ;;		line 94 in file "Library/Timer0.c"
 19322 ;; Parameters:    Size  Location     Type
 19323 ;;		None
 19324 ;; Auto vars:     Size  Location     Type
 19325 ;;		None
 19326 ;; Return value:  Size  Location     Type
 19327 ;;                  1    wreg      void 
 19328 ;; Registers used:
 19329 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19330 ;; Tracked objects:
 19331 ;;		On entry : 0/0
 19332 ;;		On exit  : 0/0
 19333 ;;		Unchanged: 0/0
 19334 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19335 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19336 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19337 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19338 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19339 ;;Total ram usage:        0 bytes
 19340 ;; Hardware stack levels used:    1
 19341 ;; Hardware stack levels required when called:    5
 19342 ;; This function calls:
 19343 ;;		Absolute function
 19344 ;;		i2_Motor_Step
 19345 ;;		i2_Timer0_Stop
 19346 ;; This function is called by:
 19347 ;;		_ISR_Function
 19348 ;; This function uses a non-reentrant model
 19349 ;;
 19350                           
 19351                           	psect	text105
 19352  013D5E                     __ptext105:
 19353                           	opt stack 0
 19354  013D5E                     _Timer0_ISR:
 19355                           	opt stack 14
 19356                           
 19357                           ;Timer0.c: 96: Timer0_Stop();
 19358                           
 19359                           ;incstack = 0
 19360  013D5E  EC34  F0A0         	call	i2_Timer0_Stop	;wreg free
 19361                           
 19362                           ;Timer0.c: 99: if (gISR != 0)
 19363  013D62  0100               	movlb	0	; () banked
 19364  013D64  516C               	movf	_gISR& (0+255),w,b
 19365  013D66  0100               	movlb	0	; () banked
 19366  013D68  116D               	iorwf	(_gISR+1)& (0+255),w,b
 19367  013D6A  0100               	movlb	0	; () banked
 19368  013D6C  116E               	iorwf	(_gISR+2)& (0+255),w,b
 19369  013D6E  B4D8               	btfsc	status,2,c
 19370  013D70  0012               	return	
 19371                           
 19372                           ; BSR set to: 0
 19373                           ;Timer0.c: 100: gISR();
 19374  013D72  D801               	call	i2u897_48
 19375  013D74  0012               	return	
 19376  013D76                     i2u897_48:
 19377  013D76  0005               	push	
 19378  013D78  6EFA               	movwf	pclath,c
 19379  013D7A  0100               	movlb	0	; () banked
 19380  013D7C  516C               	movf	_gISR& (0+255),w,b
 19381  013D7E  6EFD               	movwf	tosl,c
 19382  013D80  516D               	movf	(_gISR+1)& (0+255),w,b
 19383  013D82  6EFE               	movwf	tosh,c
 19384  013D84  516E               	movf	(_gISR+2)& (0+255),w,b
 19385  013D86  6EFF               	movwf	tosu,c
 19386  013D88  50FA               	movf	pclath,w,c
 19387  013D8A  0012               	return		;indir
 19388  013D8C                     __end_of_Timer0_ISR:
 19389                           	opt stack 0
 19390                           tosu	equ	0xFFF
 19391                           tosh	equ	0xFFE
 19392                           tosl	equ	0xFFD
 19393                           pclatu	equ	0xFFB
 19394                           pclath	equ	0xFFA
 19395                           tblptru	equ	0xFF8
 19396                           tblptrh	equ	0xFF7
 19397                           tblptrl	equ	0xFF6
 19398                           tablat	equ	0xFF5
 19399                           prodh	equ	0xFF4
 19400                           prodl	equ	0xFF3
 19401                           intcon	equ	0xFF2
 19402                           indf0	equ	0xFEF
 19403                           postinc0	equ	0xFEE
 19404                           fsr0h	equ	0xFEA
 19405                           fsr0l	equ	0xFE9
 19406                           wreg	equ	0xFE8
 19407                           indf1	equ	0xFE7
 19408                           postdec1	equ	0xFE5
 19409                           fsr1h	equ	0xFE2
 19410                           fsr1l	equ	0xFE1
 19411                           indf2	equ	0xFDF
 19412                           postinc2	equ	0xFDE
 19413                           postdec2	equ	0xFDD
 19414                           plusw2	equ	0xFDB
 19415                           fsr2h	equ	0xFDA
 19416                           fsr2l	equ	0xFD9
 19417                           status	equ	0xFD8
 19418                           
 19419 ;; *************** function i2_Motor_Step *****************
 19420 ;; Defined at:
 19421 ;;		line 75 in file "Library/Motor.c"
 19422 ;; Parameters:    Size  Location     Type
 19423 ;;		None
 19424 ;; Auto vars:     Size  Location     Type
 19425 ;;		None
 19426 ;; Return value:  Size  Location     Type
 19427 ;;                  1    wreg      void 
 19428 ;; Registers used:
 19429 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19430 ;; Tracked objects:
 19431 ;;		On entry : 0/0
 19432 ;;		On exit  : 0/0
 19433 ;;		Unchanged: 0/0
 19434 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19435 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19436 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19437 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19438 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19439 ;;Total ram usage:        2 bytes
 19440 ;; Hardware stack levels used:    1
 19441 ;; Hardware stack levels required when called:    4
 19442 ;; This function calls:
 19443 ;;		i2_MXK_Queue
 19444 ;;		i2_MXK_Release
 19445 ;;		i2_MXK_SwitchTo
 19446 ;;		i2_Port_SetPin
 19447 ;;		i2_Timer0_Restart
 19448 ;;		i2_Timer0_Stop
 19449 ;; This function is called by:
 19450 ;; This function uses a non-reentrant model
 19451 ;;
 19452                           
 19453                           	psect	text106
 19454  011EE8                     __ptext106:
 19455                           	opt stack 0
 19456  011EE8                     i2_Motor_Step:
 19457                           	opt stack 14
 19458                           
 19459                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 19460                           
 19461                           ;incstack = 0
 19462  011EE8  0100               	movlb	0	; () banked
 19463  011EEA  EE20 F004          	lfsr	2,4
 19464  011EEE  517D               	movf	_lMotor& (0+255),w,b
 19465  011EF0  26D9               	addwf	fsr2l,f,c
 19466  011EF2  517E               	movf	(_lMotor+1)& (0+255),w,b
 19467  011EF4  22DA               	addwfc	fsr2h,f,c
 19468  011EF6  50DF               	movf	indf2,w,c
 19469  011EF8  EC32  F09E         	call	i2_MXK_SwitchTo
 19470  011EFC  0900               	iorlw	0
 19471  011EFE  B4D8               	btfsc	status,2,c
 19472  011F00  D06A               	goto	i2l1627
 19473                           
 19474                           ;Motor.c: 78: {
 19475                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 19476  011F02  C07D  FFD9         	movff	_lMotor,fsr2l
 19477  011F06  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19478  011F0A  50DE               	movf	postinc2,w,c
 19479  011F0C  10DE               	iorwf	postinc2,w,c
 19480  011F0E  B4D8               	btfsc	status,2,c
 19481  011F10  D05D               	goto	i2l1628
 19482                           
 19483                           ;Motor.c: 80: {
 19484                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 19485  011F12  C07D  FFD9         	movff	_lMotor,fsr2l
 19486  011F16  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19487  011F1A  0E01               	movlw	1
 19488  011F1C  BEDB               	btfsc	plusw2,7,c
 19489  011F1E  D022               	goto	i2l1629
 19490  011F20  0E01               	movlw	1
 19491  011F22  50DB               	movf	plusw2,w,c
 19492  011F24  E103               	bnz	i2u488_40
 19493  011F26  04DE               	decf	postinc2,w,c
 19494  011F28  A0D8               	btfss	status,0,c
 19495  011F2A  D01C               	goto	i2l1629
 19496  011F2C                     i2u488_40:
 19497                           
 19498                           ;Motor.c: 83: {
 19499                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 19500  011F2C  C07D  FFD9         	movff	_lMotor,fsr2l
 19501  011F30  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19502  011F34  28DE               	incf	postinc2,w,c
 19503  011F36  E104               	bnz	i2u489_40
 19504  011F38  0E7F               	movlw	127
 19505  011F3A  18DE               	xorwf	postinc2,w,c
 19506  011F3C  B4D8               	btfsc	status,2,c
 19507  011F3E  D007               	goto	i2l1630
 19508  011F40                     i2u489_40:
 19509                           
 19510                           ;Motor.c: 85: lMotor->mDelta --;
 19511  011F40  C07D  FFD9         	movff	_lMotor,fsr2l
 19512  011F44  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19513  011F48  06DE               	decf	postinc2,f,c
 19514  011F4A  0E00               	movlw	0
 19515  011F4C  5ADD               	subwfb	postdec2,f,c
 19516  011F4E                     i2l1630:
 19517                           
 19518                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 19519  011F4E  0E8F               	movlw	low _PortE
 19520  011F50  6E10               	movwf	i2Port_SetPin@pInput,c
 19521  011F52  0E00               	movlw	high _PortE
 19522  011F54  6E11               	movwf	i2Port_SetPin@pInput+1,c
 19523  011F56  0E00               	movlw	0
 19524  011F58  6E12               	movwf	i2Port_SetPin@pPin,c
 19525  011F5A  0E01               	movlw	1
 19526  011F5C  6E13               	movwf	i2Port_SetPin@pValue,c
 19527  011F5E  EC1D  F094         	call	i2_Port_SetPin	;wreg free
 19528                           
 19529                           ;Motor.c: 88: }
 19530  011F62  D01B               	goto	i2l1631
 19531  011F64                     i2l1629:
 19532                           
 19533                           ;Motor.c: 89: else
 19534                           ;Motor.c: 90: {
 19535                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 19536  011F64  C07D  FFD9         	movff	_lMotor,fsr2l
 19537  011F68  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19538  011F6C  04DE               	decf	postinc2,w,c
 19539  011F6E  E104               	bnz	i2u490_40
 19540  011F70  0E80               	movlw	128
 19541  011F72  18DE               	xorwf	postinc2,w,c
 19542  011F74  B4D8               	btfsc	status,2,c
 19543  011F76  D007               	goto	i2l1632
 19544  011F78                     i2u490_40:
 19545                           
 19546                           ;Motor.c: 92: lMotor->mDelta ++;
 19547  011F78  C07D  FFD9         	movff	_lMotor,fsr2l
 19548  011F7C  C07E  FFDA         	movff	_lMotor+1,fsr2h
 19549  011F80  2ADE               	incf	postinc2,f,c
 19550  011F82  0E00               	movlw	0
 19551  011F84  22DD               	addwfc	postdec2,f,c
 19552  011F86                     i2l1632:
 19553                           
 19554                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 19555  011F86  0E8F               	movlw	low _PortE
 19556  011F88  6E10               	movwf	i2Port_SetPin@pInput,c
 19557  011F8A  0E00               	movlw	high _PortE
 19558  011F8C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 19559  011F8E  0E00               	movlw	0
 19560  011F90  6E12               	movwf	i2Port_SetPin@pPin,c
 19561  011F92  0E00               	movlw	0
 19562  011F94  6E13               	movwf	i2Port_SetPin@pValue,c
 19563  011F96  EC1D  F094         	call	i2_Port_SetPin	;wreg free
 19564  011F9A                     i2l1631:
 19565                           
 19566                           ;Motor.c: 95: }
 19567                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 19568  011F9A  0E8F               	movlw	low _PortE
 19569  011F9C  6E10               	movwf	i2Port_SetPin@pInput,c
 19570  011F9E  0E00               	movlw	high _PortE
 19571  011FA0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 19572  011FA2  0E01               	movlw	1
 19573  011FA4  6E12               	movwf	i2Port_SetPin@pPin,c
 19574  011FA6  0E01               	movlw	1
 19575  011FA8  6E13               	movwf	i2Port_SetPin@pValue,c
 19576  011FAA  EC1D  F094         	call	i2_Port_SetPin	;wreg free
 19577                           
 19578                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 19579  011FAE  0E8F               	movlw	low _PortE
 19580  011FB0  6E10               	movwf	i2Port_SetPin@pInput,c
 19581  011FB2  0E00               	movlw	high _PortE
 19582  011FB4  6E11               	movwf	i2Port_SetPin@pInput+1,c
 19583  011FB6  0E01               	movlw	1
 19584  011FB8  6E12               	movwf	i2Port_SetPin@pPin,c
 19585  011FBA  0E00               	movlw	0
 19586  011FBC  6E13               	movwf	i2Port_SetPin@pValue,c
 19587  011FBE  EC1D  F094         	call	i2_Port_SetPin	;wreg free
 19588                           
 19589                           ;Motor.c: 101: MXK_Release();
 19590  011FC2  EC37  F0A0         	call	i2_MXK_Release	;wreg free
 19591                           
 19592                           ;Motor.c: 102: Timer0_Restart();
 19593  011FC6  EC13  F0A0         	call	i2_Timer0_Restart	;wreg free
 19594                           
 19595                           ;Motor.c: 103: return;
 19596  011FCA  0012               	return	
 19597  011FCC                     i2l1628:
 19598                           
 19599                           ;Motor.c: 104: }
 19600                           ;Motor.c: 105: MXK_Release();
 19601  011FCC  EC37  F0A0         	call	i2_MXK_Release	;wreg free
 19602                           
 19603                           ;Motor.c: 106: Timer0_Stop();
 19604  011FD0  EC34  F0A0         	call	i2_Timer0_Stop	;wreg free
 19605                           
 19606                           ;Motor.c: 107: return;
 19607  011FD4  0012               	return	
 19608  011FD6                     i2l1627:
 19609                           
 19610                           ;Motor.c: 108: }
 19611                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 19612  011FD6  C072  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 19613  011FDA  C073  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 19614  011FDE  C074  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 19615  011FE2  EC06  F0A0         	call	i2_MXK_Queue	;wreg free
 19616  011FE6  0012               	return		;funcret
 19617  011FE8                     __end_ofi2_Motor_Step:
 19618                           	opt stack 0
 19619                           tosu	equ	0xFFF
 19620                           tosh	equ	0xFFE
 19621                           tosl	equ	0xFFD
 19622                           pclatu	equ	0xFFB
 19623                           pclath	equ	0xFFA
 19624                           tblptru	equ	0xFF8
 19625                           tblptrh	equ	0xFF7
 19626                           tblptrl	equ	0xFF6
 19627                           tablat	equ	0xFF5
 19628                           prodh	equ	0xFF4
 19629                           prodl	equ	0xFF3
 19630                           intcon	equ	0xFF2
 19631                           indf0	equ	0xFEF
 19632                           postinc0	equ	0xFEE
 19633                           fsr0h	equ	0xFEA
 19634                           fsr0l	equ	0xFE9
 19635                           wreg	equ	0xFE8
 19636                           indf1	equ	0xFE7
 19637                           postdec1	equ	0xFE5
 19638                           fsr1h	equ	0xFE2
 19639                           fsr1l	equ	0xFE1
 19640                           indf2	equ	0xFDF
 19641                           postinc2	equ	0xFDE
 19642                           postdec2	equ	0xFDD
 19643                           plusw2	equ	0xFDB
 19644                           fsr2h	equ	0xFDA
 19645                           fsr2l	equ	0xFD9
 19646                           status	equ	0xFD8
 19647                           
 19648 ;; *************** function i2_Timer0_Stop *****************
 19649 ;; Defined at:
 19650 ;;		line 89 in file "Library/Timer0.c"
 19651 ;; Parameters:    Size  Location     Type
 19652 ;;		None
 19653 ;; Auto vars:     Size  Location     Type
 19654 ;;		None
 19655 ;; Return value:  Size  Location     Type
 19656 ;;                  1    wreg      void 
 19657 ;; Registers used:
 19658 ;;		None
 19659 ;; Tracked objects:
 19660 ;;		On entry : 0/0
 19661 ;;		On exit  : 0/0
 19662 ;;		Unchanged: 0/0
 19663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19664 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19667 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19668 ;;Total ram usage:        0 bytes
 19669 ;; Hardware stack levels used:    1
 19670 ;; This function calls:
 19671 ;;		Nothing
 19672 ;; This function is called by:
 19673 ;;		_Timer0_ISR
 19674 ;;		i2_Motor_Step
 19675 ;; This function uses a non-reentrant model
 19676 ;;
 19677                           
 19678                           	psect	text107
 19679  014068                     __ptext107:
 19680                           	opt stack 0
 19681  014068                     i2_Timer0_Stop:
 19682                           	opt stack 18
 19683                           
 19684                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 19685                           
 19686                           ;incstack = 0
 19687  014068  9AF2               	bcf	intcon,5,c	;volatile
 19688                           
 19689                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 19690  01406A  94F2               	bcf	intcon,2,c	;volatile
 19691  01406C  0012               	return		;funcret
 19692  01406E                     __end_ofi2_Timer0_Stop:
 19693                           	opt stack 0
 19694                           tosu	equ	0xFFF
 19695                           tosh	equ	0xFFE
 19696                           tosl	equ	0xFFD
 19697                           pclatu	equ	0xFFB
 19698                           pclath	equ	0xFFA
 19699                           tblptru	equ	0xFF8
 19700                           tblptrh	equ	0xFF7
 19701                           tblptrl	equ	0xFF6
 19702                           tablat	equ	0xFF5
 19703                           prodh	equ	0xFF4
 19704                           prodl	equ	0xFF3
 19705                           intcon	equ	0xFF2
 19706                           indf0	equ	0xFEF
 19707                           postinc0	equ	0xFEE
 19708                           fsr0h	equ	0xFEA
 19709                           fsr0l	equ	0xFE9
 19710                           wreg	equ	0xFE8
 19711                           indf1	equ	0xFE7
 19712                           postdec1	equ	0xFE5
 19713                           fsr1h	equ	0xFE2
 19714                           fsr1l	equ	0xFE1
 19715                           indf2	equ	0xFDF
 19716                           postinc2	equ	0xFDE
 19717                           postdec2	equ	0xFDD
 19718                           plusw2	equ	0xFDB
 19719                           fsr2h	equ	0xFDA
 19720                           fsr2l	equ	0xFD9
 19721                           status	equ	0xFD8
 19722                           
 19723 ;; *************** function i2_Timer0_Restart *****************
 19724 ;; Defined at:
 19725 ;;		line 83 in file "Library/Timer0.c"
 19726 ;; Parameters:    Size  Location     Type
 19727 ;;		None
 19728 ;; Auto vars:     Size  Location     Type
 19729 ;;		None
 19730 ;; Return value:  Size  Location     Type
 19731 ;;                  1    wreg      void 
 19732 ;; Registers used:
 19733 ;;		None
 19734 ;; Tracked objects:
 19735 ;;		On entry : 0/0
 19736 ;;		On exit  : 0/0
 19737 ;;		Unchanged: 0/0
 19738 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19739 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19740 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19741 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19742 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19743 ;;Total ram usage:        0 bytes
 19744 ;; Hardware stack levels used:    1
 19745 ;; This function calls:
 19746 ;;		Nothing
 19747 ;; This function is called by:
 19748 ;;		i2_Motor_Step
 19749 ;; This function uses a non-reentrant model
 19750 ;;
 19751                           
 19752                           	psect	text108
 19753  014026                     __ptext108:
 19754                           	opt stack 0
 19755  014026                     i2_Timer0_Restart:
 19756                           	opt stack 17
 19757                           
 19758                           ;Timer0.c: 85: TMR0 = COUNTER;
 19759                           
 19760                           ;incstack = 0
 19761  014026  C029  FFD6         	movff	_COUNTER,4054	;volatile
 19762  01402A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 19763                           
 19764                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 19765  01402E  8AF2               	bsf	intcon,5,c	;volatile
 19766  014030  0012               	return		;funcret
 19767  014032                     __end_ofi2_Timer0_Restart:
 19768                           	opt stack 0
 19769                           tosu	equ	0xFFF
 19770                           tosh	equ	0xFFE
 19771                           tosl	equ	0xFFD
 19772                           pclatu	equ	0xFFB
 19773                           pclath	equ	0xFFA
 19774                           tblptru	equ	0xFF8
 19775                           tblptrh	equ	0xFF7
 19776                           tblptrl	equ	0xFF6
 19777                           tablat	equ	0xFF5
 19778                           prodh	equ	0xFF4
 19779                           prodl	equ	0xFF3
 19780                           intcon	equ	0xFF2
 19781                           indf0	equ	0xFEF
 19782                           postinc0	equ	0xFEE
 19783                           fsr0h	equ	0xFEA
 19784                           fsr0l	equ	0xFE9
 19785                           wreg	equ	0xFE8
 19786                           indf1	equ	0xFE7
 19787                           postdec1	equ	0xFE5
 19788                           fsr1h	equ	0xFE2
 19789                           fsr1l	equ	0xFE1
 19790                           indf2	equ	0xFDF
 19791                           postinc2	equ	0xFDE
 19792                           postdec2	equ	0xFDD
 19793                           plusw2	equ	0xFDB
 19794                           fsr2h	equ	0xFDA
 19795                           fsr2l	equ	0xFD9
 19796                           status	equ	0xFD8
 19797                           
 19798 ;; *************** function i2_Port_SetPin *****************
 19799 ;; Defined at:
 19800 ;;		line 247 in file "Library/Port.c"
 19801 ;; Parameters:    Size  Location     Type
 19802 ;;  pInput          2   15[COMRAM] const PTR struct Port
 19803 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 19804 ;;  pPin            1   17[COMRAM] enum E6750
 19805 ;;  pValue          1   18[COMRAM] unsigned char 
 19806 ;; Auto vars:     Size  Location     Type
 19807 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 19808 ;; Return value:  Size  Location     Type
 19809 ;;                  1    wreg      void 
 19810 ;; Registers used:
 19811 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19812 ;; Tracked objects:
 19813 ;;		On entry : 0/0
 19814 ;;		On exit  : 0/0
 19815 ;;		Unchanged: 0/0
 19816 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19817 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19818 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19819 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19820 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19821 ;;Total ram usage:        5 bytes
 19822 ;; Hardware stack levels used:    1
 19823 ;; Hardware stack levels required when called:    3
 19824 ;; This function calls:
 19825 ;;		i2_Byte_SetBit
 19826 ;;		i2_Word_GetPair
 19827 ;; This function is called by:
 19828 ;;		i2_Motor_Step
 19829 ;; This function uses a non-reentrant model
 19830 ;;
 19831                           
 19832                           	psect	text109
 19833  01283A                     __ptext109:
 19834                           	opt stack 0
 19835  01283A                     i2_Port_SetPin:
 19836                           	opt stack 14
 19837                           
 19838                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 19839                           
 19840                           ;incstack = 0
 19841  01283A  0E08               	movlw	8
 19842  01283C  2410               	addwf	i2Port_SetPin@pInput,w,c
 19843  01283E  6E0D               	movwf	i2Word_GetPair@pInput,c
 19844  012840  0E00               	movlw	0
 19845  012842  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 19846  012844  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 19847  012846  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 19848  01284A  EC97  F09E         	call	i2_Word_GetPair	;wreg free
 19849  01284E  6E14               	movwf	i2Port_SetPin@Type,c
 19850                           
 19851                           ;Port.c: 250: switch (Type)
 19852  012850  D03B               	goto	i2l427
 19853  012852                     
 19854                           ;Port.c: 256: pValue &= 1;
 19855  012852  0E01               	movlw	1
 19856  012854  1613               	andwf	i2Port_SetPin@pValue,f,c
 19857                           
 19858                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 19859  012856  EE20 F002          	lfsr	2,2
 19860  01285A  5010               	movf	i2Port_SetPin@pInput,w,c
 19861  01285C  26D9               	addwf	fsr2l,f,c
 19862  01285E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 19863  012860  22DA               	addwfc	fsr2h,f,c
 19864  012862  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 19865  012866  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 19866  01286A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 19867  01286E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 19868  012872  EC43  F09C         	call	i2_Byte_SetBit	;wreg free
 19869                           
 19870                           ;Port.c: 258: break;
 19871  012876  0012               	return	
 19872  012878                     
 19873                           ;Port.c: 261: pValue &= 1;
 19874  012878  0E01               	movlw	1
 19875  01287A  1613               	andwf	i2Port_SetPin@pValue,f,c
 19876                           
 19877                           ;Port.c: 262: pValue ^= 1;
 19878  01287C  0E01               	movlw	1
 19879  01287E  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 19880                           
 19881                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 19882  012880  EE20 F002          	lfsr	2,2
 19883  012884  5010               	movf	i2Port_SetPin@pInput,w,c
 19884  012886  26D9               	addwf	fsr2l,f,c
 19885  012888  5011               	movf	i2Port_SetPin@pInput+1,w,c
 19886  01288A  22DA               	addwfc	fsr2h,f,c
 19887  01288C  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 19888  012890  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 19889  012894  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 19890  012898  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 19891  01289C  EC43  F09C         	call	i2_Byte_SetBit	;wreg free
 19892                           
 19893                           ;Port.c: 264: break;
 19894  0128A0  0012               	return	
 19895  0128A2                     
 19896                           ;Port.c: 266: pValue &= 1;
 19897  0128A2  0E01               	movlw	1
 19898  0128A4  1613               	andwf	i2Port_SetPin@pValue,f,c
 19899                           
 19900                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 19901  0128A6  EE20 F004          	lfsr	2,4
 19902  0128AA  5010               	movf	i2Port_SetPin@pInput,w,c
 19903  0128AC  26D9               	addwf	fsr2l,f,c
 19904  0128AE  5011               	movf	i2Port_SetPin@pInput+1,w,c
 19905  0128B0  22DA               	addwfc	fsr2h,f,c
 19906  0128B2  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 19907  0128B6  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 19908  0128BA  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 19909  0128BE  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 19910  0128C2  EC43  F09C         	call	i2_Byte_SetBit	;wreg free
 19911                           
 19912                           ;Port.c: 269: }
 19913                           
 19914                           ;Port.c: 268: break;
 19915  0128C6  0012               	return	
 19916  0128C8                     i2l427:
 19917  0128C8  5014               	movf	i2Port_SetPin@Type,w,c
 19918                           
 19919                           ; Switch size 1, requested type "space"
 19920                           ; Number of cases is 4, Range of values is 0 to 3
 19921                           ; switch strategies available:
 19922                           ; Name         Instructions Cycles
 19923                           ; simple_byte           13     7 (average)
 19924                           ;	Chosen strategy is simple_byte
 19925  0128CA  0A00               	xorlw	0	; case 0
 19926  0128CC  B4D8               	btfsc	status,2,c
 19927  0128CE  0012               	return	
 19928  0128D0  0A01               	xorlw	1	; case 1
 19929  0128D2  B4D8               	btfsc	status,2,c
 19930  0128D4  D7BE               	goto	i2l430
 19931  0128D6  0A03               	xorlw	3	; case 2
 19932  0128D8  B4D8               	btfsc	status,2,c
 19933  0128DA  D7CE               	goto	i2l432
 19934  0128DC  0A01               	xorlw	1	; case 3
 19935  0128DE  A4D8               	btfss	status,2,c
 19936  0128E0  0012               	return	
 19937  0128E2  D7DF               	goto	i2l433
 19938  0128E4                     __end_ofi2_Port_SetPin:
 19939                           	opt stack 0
 19940                           tosu	equ	0xFFF
 19941                           tosh	equ	0xFFE
 19942                           tosl	equ	0xFFD
 19943                           pclatu	equ	0xFFB
 19944                           pclath	equ	0xFFA
 19945                           tblptru	equ	0xFF8
 19946                           tblptrh	equ	0xFF7
 19947                           tblptrl	equ	0xFF6
 19948                           tablat	equ	0xFF5
 19949                           prodh	equ	0xFF4
 19950                           prodl	equ	0xFF3
 19951                           intcon	equ	0xFF2
 19952                           indf0	equ	0xFEF
 19953                           postinc0	equ	0xFEE
 19954                           fsr0h	equ	0xFEA
 19955                           fsr0l	equ	0xFE9
 19956                           wreg	equ	0xFE8
 19957                           indf1	equ	0xFE7
 19958                           postdec1	equ	0xFE5
 19959                           fsr1h	equ	0xFE2
 19960                           fsr1l	equ	0xFE1
 19961                           indf2	equ	0xFDF
 19962                           postinc2	equ	0xFDE
 19963                           postdec2	equ	0xFDD
 19964                           plusw2	equ	0xFDB
 19965                           fsr2h	equ	0xFDA
 19966                           fsr2l	equ	0xFD9
 19967                           status	equ	0xFD8
 19968                           
 19969 ;; *************** function i2_Word_GetPair *****************
 19970 ;; Defined at:
 19971 ;;		line 156 in file "Library/Types.c"
 19972 ;; Parameters:    Size  Location     Type
 19973 ;;  pInput          2   12[COMRAM] PTR struct Word
 19974 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19975 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19976 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19977 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19978 ;;  pPair           1   14[COMRAM] unsigned char 
 19979 ;; Auto vars:     Size  Location     Type
 19980 ;;		None
 19981 ;; Return value:  Size  Location     Type
 19982 ;;                  1    wreg      unsigned char 
 19983 ;; Registers used:
 19984 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19985 ;; Tracked objects:
 19986 ;;		On entry : 0/0
 19987 ;;		On exit  : 0/0
 19988 ;;		Unchanged: 0/0
 19989 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19990 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19991 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19993 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19994 ;;Total ram usage:        3 bytes
 19995 ;; Hardware stack levels used:    1
 19996 ;; Hardware stack levels required when called:    2
 19997 ;; This function calls:
 19998 ;;		i2_Byte_GetPair
 19999 ;; This function is called by:
 20000 ;;		i2_Port_SetPin
 20001 ;; This function uses a non-reentrant model
 20002 ;;
 20003                           
 20004                           	psect	text110
 20005  013D2E                     __ptext110:
 20006                           	opt stack 0
 20007  013D2E                     i2_Word_GetPair:
 20008                           	opt stack 14
 20009                           
 20010                           ;Types.c: 158: if (pPair >= 4)
 20011                           
 20012                           ;incstack = 0
 20013  013D2E  0E03               	movlw	3
 20014  013D30  640F               	cpfsgt	i2Word_GetPair@pPair,c
 20015  013D32  D00C               	goto	i2l781
 20016                           
 20017                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 20018  013D34  0E01               	movlw	1
 20019  013D36  240D               	addwf	i2Word_GetPair@pInput,w,c
 20020  013D38  6E0A               	movwf	i2Byte_GetPair@pInput,c
 20021  013D3A  0E00               	movlw	0
 20022  013D3C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 20023  013D3E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 20024  013D40  500F               	movf	i2Word_GetPair@pPair,w,c
 20025  013D42  0FFC               	addlw	252
 20026  013D44  6E0C               	movwf	i2Byte_GetPair@pPair,c
 20027  013D46  ECB1  F09F         	call	i2_Byte_GetPair	;wreg free
 20028  013D4A  0012               	return	
 20029  013D4C                     i2l781:
 20030                           
 20031                           ;Types.c: 160: else
 20032                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 20033  013D4C  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 20034  013D50  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 20035  013D54  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 20036  013D58  ECB1  F09F         	call	i2_Byte_GetPair	;wreg free
 20037  013D5C  0012               	return	
 20038  013D5E                     __end_ofi2_Word_GetPair:
 20039                           	opt stack 0
 20040                           tosu	equ	0xFFF
 20041                           tosh	equ	0xFFE
 20042                           tosl	equ	0xFFD
 20043                           pclatu	equ	0xFFB
 20044                           pclath	equ	0xFFA
 20045                           tblptru	equ	0xFF8
 20046                           tblptrh	equ	0xFF7
 20047                           tblptrl	equ	0xFF6
 20048                           tablat	equ	0xFF5
 20049                           prodh	equ	0xFF4
 20050                           prodl	equ	0xFF3
 20051                           intcon	equ	0xFF2
 20052                           indf0	equ	0xFEF
 20053                           postinc0	equ	0xFEE
 20054                           fsr0h	equ	0xFEA
 20055                           fsr0l	equ	0xFE9
 20056                           wreg	equ	0xFE8
 20057                           indf1	equ	0xFE7
 20058                           postdec1	equ	0xFE5
 20059                           fsr1h	equ	0xFE2
 20060                           fsr1l	equ	0xFE1
 20061                           indf2	equ	0xFDF
 20062                           postinc2	equ	0xFDE
 20063                           postdec2	equ	0xFDD
 20064                           plusw2	equ	0xFDB
 20065                           fsr2h	equ	0xFDA
 20066                           fsr2l	equ	0xFD9
 20067                           status	equ	0xFD8
 20068                           
 20069 ;; *************** function i2_Byte_GetPair *****************
 20070 ;; Defined at:
 20071 ;;		line 87 in file "Library/Types.c"
 20072 ;; Parameters:    Size  Location     Type
 20073 ;;  pInput          2    9[COMRAM] PTR struct Byte
 20074 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20075 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20076 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20077 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20078 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20079 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20080 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20081 ;;		 -> NULL(0), 
 20082 ;;  pPair           1   11[COMRAM] unsigned char 
 20083 ;; Auto vars:     Size  Location     Type
 20084 ;;		None
 20085 ;; Return value:  Size  Location     Type
 20086 ;;                  1    wreg      unsigned char 
 20087 ;; Registers used:
 20088 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20089 ;; Tracked objects:
 20090 ;;		On entry : 0/0
 20091 ;;		On exit  : 0/0
 20092 ;;		Unchanged: 0/0
 20093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20094 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20095 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20096 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20097 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20098 ;;Total ram usage:        3 bytes
 20099 ;; Hardware stack levels used:    1
 20100 ;; Hardware stack levels required when called:    1
 20101 ;; This function calls:
 20102 ;;		i2_Byte_GetZone
 20103 ;; This function is called by:
 20104 ;;		i2_Word_GetPair
 20105 ;; This function uses a non-reentrant model
 20106 ;;
 20107                           
 20108                           	psect	text111
 20109  013F62                     __ptext111:
 20110                           	opt stack 0
 20111  013F62                     i2_Byte_GetPair:
 20112                           	opt stack 14
 20113                           
 20114                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 20115                           
 20116                           ;incstack = 0
 20117  013F62  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 20118  013F66  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 20119  013F6A  0E04               	movlw	4
 20120  013F6C  6E03               	movwf	i2Byte_GetZone@pMax,c
 20121  013F6E  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 20122  013F72  0E02               	movlw	2
 20123  013F74  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 20124  013F76  ECF5  F097         	call	i2_Byte_GetZone	;wreg free
 20125  013F7A  0012               	return	
 20126  013F7C                     __end_ofi2_Byte_GetPair:
 20127                           	opt stack 0
 20128                           tosu	equ	0xFFF
 20129                           tosh	equ	0xFFE
 20130                           tosl	equ	0xFFD
 20131                           pclatu	equ	0xFFB
 20132                           pclath	equ	0xFFA
 20133                           tblptru	equ	0xFF8
 20134                           tblptrh	equ	0xFF7
 20135                           tblptrl	equ	0xFF6
 20136                           tablat	equ	0xFF5
 20137                           prodh	equ	0xFF4
 20138                           prodl	equ	0xFF3
 20139                           intcon	equ	0xFF2
 20140                           indf0	equ	0xFEF
 20141                           postinc0	equ	0xFEE
 20142                           fsr0h	equ	0xFEA
 20143                           fsr0l	equ	0xFE9
 20144                           wreg	equ	0xFE8
 20145                           indf1	equ	0xFE7
 20146                           postdec1	equ	0xFE5
 20147                           fsr1h	equ	0xFE2
 20148                           fsr1l	equ	0xFE1
 20149                           indf2	equ	0xFDF
 20150                           postinc2	equ	0xFDE
 20151                           postdec2	equ	0xFDD
 20152                           plusw2	equ	0xFDB
 20153                           fsr2h	equ	0xFDA
 20154                           fsr2l	equ	0xFD9
 20155                           status	equ	0xFD8
 20156                           
 20157 ;; *************** function i2_Byte_GetZone *****************
 20158 ;; Defined at:
 20159 ;;		line 64 in file "Library/Types.c"
 20160 ;; Parameters:    Size  Location     Type
 20161 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20162 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20163 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20164 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20165 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20166 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20167 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20168 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20169 ;;		 -> NULL(0), 
 20170 ;;  pMax            1    2[COMRAM] unsigned char 
 20171 ;;  pChunk          1    3[COMRAM] unsigned char 
 20172 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 20173 ;; Auto vars:     Size  Location     Type
 20174 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 20175 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 20176 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 20177 ;; Return value:  Size  Location     Type
 20178 ;;                  1    wreg      unsigned char 
 20179 ;; Registers used:
 20180 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20181 ;; Tracked objects:
 20182 ;;		On entry : 0/0
 20183 ;;		On exit  : 0/0
 20184 ;;		Unchanged: 0/0
 20185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20186 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20187 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20188 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20189 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20190 ;;Total ram usage:        9 bytes
 20191 ;; Hardware stack levels used:    1
 20192 ;; This function calls:
 20193 ;;		Nothing
 20194 ;; This function is called by:
 20195 ;;		i2_Byte_GetPair
 20196 ;; This function uses a non-reentrant model
 20197 ;;
 20198                           
 20199                           	psect	text112
 20200  012FEA                     __ptext112:
 20201                           	opt stack 0
 20202  012FEA                     i2_Byte_GetZone:
 20203                           	opt stack 14
 20204                           
 20205                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20206                           
 20207                           ;incstack = 0
 20208  012FEA  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 20209  012FEE  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 20210  012FF2  0E00               	movlw	low (__mediumconst shr (0+16))
 20211  012FF4  6EF8               	movwf	tblptru,c
 20212  012FF6  0E0F               	movlw	(high __ramtop+-1)
 20213  012FF8  64F7               	cpfsgt	tblptrh,c
 20214  012FFA  D003               	bra	i2u343_47
 20215  012FFC  0008               	tblrd		*
 20216  012FFE  50F5               	movf	tablat,w,c
 20217  013000  D005               	bra	i2u343_40
 20218  013002                     i2u343_47:
 20219  013002  CFF6 FFE9          	movff	tblptrl,fsr0l
 20220  013006  CFF7 FFEA          	movff	tblptrh,fsr0h
 20221  01300A  50EF               	movf	indf0,w,c
 20222  01300C                     i2u343_40:
 20223  01300C  6E09               	movwf	i2Byte_GetZone@Output,c
 20224                           
 20225                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20226  01300E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 20227  013010  0D01               	mullw	1
 20228  013012  0ECF               	movlw	low _MASKS
 20229  013014  24F3               	addwf	prodl,w,c
 20230  013016  6EF6               	movwf	tblptrl,c
 20231  013018  0EFD               	movlw	high _MASKS
 20232  01301A  20F4               	addwfc	prodh,w,c
 20233  01301C  6EF7               	movwf	tblptrh,c
 20234  01301E                     	if	1	;There are 3 active tblptr bytes
 20235  01301E  6AF8               	clrf	tblptru,c
 20236  013020  0E00               	movlw	low (__mediumconst shr (0+16))
 20237  013022  22F8               	addwfc	tblptru,f,c
 20238  013024                     	endif
 20239  013024  0008               	tblrd		*
 20240  013026  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 20241                           
 20242                           ;Types.c: 68: UINT8 Offset = 0;
 20243  01302A  0E00               	movlw	0
 20244  01302C  6E08               	movwf	i2Byte_GetZone@Offset,c
 20245                           
 20246                           ;Types.c: 70: while (pChunk >= pMax)
 20247  01302E  D003               	goto	i2l732
 20248  013030                     
 20249                           ;Types.c: 71: {
 20250                           ;Types.c: 72: pChunk -= pMax;
 20251  013030  5003               	movf	i2Byte_GetZone@pMax,w,c
 20252  013032  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 20253                           
 20254                           ;Types.c: 73: Offset += 1;
 20255  013034  2A08               	incf	i2Byte_GetZone@Offset,f,c
 20256  013036                     i2l732:
 20257  013036  5003               	movf	i2Byte_GetZone@pMax,w,c
 20258  013038  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 20259  01303A  B0D8               	btfsc	status,0,c
 20260  01303C  D7F9               	goto	i2l733
 20261                           
 20262                           ;Types.c: 74: }
 20263                           ;Types.c: 75: pChunk *= pChunkSize;
 20264  01303E  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 20265  013040  0204               	mulwf	i2Byte_GetZone@pChunk,c
 20266  013042  50F3               	movf	prodl,w,c
 20267  013044  6E04               	movwf	i2Byte_GetZone@pChunk,c
 20268                           
 20269                           ;Types.c: 76: pChunk += Offset;
 20270  013046  5008               	movf	i2Byte_GetZone@Offset,w,c
 20271  013048  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 20272                           
 20273                           ;Types.c: 78: Output >>= pChunk;
 20274  01304A  2804               	incf	i2Byte_GetZone@pChunk,w,c
 20275  01304C  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 20276  01304E  D002               	goto	i2u345_40
 20277  013050                     i2u345_45:
 20278  013050  90D8               	bcf	status,0,c
 20279  013052  3209               	rrcf	i2Byte_GetZone@Output,f,c
 20280  013054                     i2u345_40:
 20281  013054  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 20282  013056  D7FC               	goto	i2u345_45
 20283                           
 20284                           ;Types.c: 79: Output &= MASK;
 20285  013058  5007               	movf	i2Byte_GetZone@MASK,w,c
 20286  01305A  1609               	andwf	i2Byte_GetZone@Output,f,c
 20287                           
 20288                           ;Types.c: 80: return Output;
 20289  01305C  5009               	movf	i2Byte_GetZone@Output,w,c
 20290  01305E  0012               	return	
 20291  013060                     __end_ofi2_Byte_GetZone:
 20292                           	opt stack 0
 20293                           tosu	equ	0xFFF
 20294                           tosh	equ	0xFFE
 20295                           tosl	equ	0xFFD
 20296                           pclatu	equ	0xFFB
 20297                           pclath	equ	0xFFA
 20298                           tblptru	equ	0xFF8
 20299                           tblptrh	equ	0xFF7
 20300                           tblptrl	equ	0xFF6
 20301                           tablat	equ	0xFF5
 20302                           prodh	equ	0xFF4
 20303                           prodl	equ	0xFF3
 20304                           intcon	equ	0xFF2
 20305                           indf0	equ	0xFEF
 20306                           postinc0	equ	0xFEE
 20307                           fsr0h	equ	0xFEA
 20308                           fsr0l	equ	0xFE9
 20309                           wreg	equ	0xFE8
 20310                           indf1	equ	0xFE7
 20311                           postdec1	equ	0xFE5
 20312                           fsr1h	equ	0xFE2
 20313                           fsr1l	equ	0xFE1
 20314                           indf2	equ	0xFDF
 20315                           postinc2	equ	0xFDE
 20316                           postdec2	equ	0xFDD
 20317                           plusw2	equ	0xFDB
 20318                           fsr2h	equ	0xFDA
 20319                           fsr2l	equ	0xFD9
 20320                           status	equ	0xFD8
 20321                           
 20322 ;; *************** function i2_Byte_SetBit *****************
 20323 ;; Defined at:
 20324 ;;		line 32 in file "Library/Types.c"
 20325 ;; Parameters:    Size  Location     Type
 20326 ;;  pInput          2    0[COMRAM] PTR struct Byte
 20327 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 20328 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 20329 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20330 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20331 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20332 ;;		 -> NULL(0), 
 20333 ;;  pBit            1    2[COMRAM] unsigned char 
 20334 ;;  pValue          1    3[COMRAM] unsigned char 
 20335 ;; Auto vars:     Size  Location     Type
 20336 ;;		None
 20337 ;; Return value:  Size  Location     Type
 20338 ;;                  1    wreg      void 
 20339 ;; Registers used:
 20340 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20341 ;; Tracked objects:
 20342 ;;		On entry : 0/0
 20343 ;;		On exit  : 0/0
 20344 ;;		Unchanged: 0/0
 20345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20346 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20348 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20349 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20350 ;;Total ram usage:        7 bytes
 20351 ;; Hardware stack levels used:    1
 20352 ;; This function calls:
 20353 ;;		Nothing
 20354 ;; This function is called by:
 20355 ;;		i2_Port_SetPin
 20356 ;; This function uses a non-reentrant model
 20357 ;;
 20358                           
 20359                           	psect	text113
 20360  013886                     __ptext113:
 20361                           	opt stack 0
 20362  013886                     i2_Byte_SetBit:
 20363                           	opt stack 16
 20364                           
 20365                           ;Types.c: 34: pValue &= 1;
 20366                           
 20367                           ;incstack = 0
 20368  013886  0E01               	movlw	1
 20369  013888  1604               	andwf	i2Byte_SetBit@pValue,f,c
 20370                           
 20371                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 20372  01388A  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 20373  01388E  0E01               	movlw	1
 20374  013890  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 20375  013892  2A05               	incf	??i2_Byte_SetBit,f,c
 20376  013894  D002               	goto	i2u396_44
 20377  013896                     i2u396_45:
 20378  013896  90D8               	bcf	status,0,c
 20379  013898  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 20380  01389A                     i2u396_44:
 20381  01389A  2E05               	decfsz	??i2_Byte_SetBit,f,c
 20382  01389C  D7FC               	goto	i2u396_45
 20383  01389E  5006               	movf	??i2_Byte_SetBit+1,w,c
 20384  0138A0  0AFF               	xorlw	255
 20385  0138A2  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 20386  0138A4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 20387  0138A8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 20388  0138AC  5007               	movf	??i2_Byte_SetBit+2,w,c
 20389  0138AE  16DF               	andwf	indf2,f,c
 20390                           
 20391                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 20392  0138B0  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 20393  0138B4  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 20394  0138B8  2A05               	incf	??i2_Byte_SetBit,f,c
 20395  0138BA  D002               	goto	i2u397_44
 20396  0138BC                     i2u397_45:
 20397  0138BC  90D8               	bcf	status,0,c
 20398  0138BE  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 20399  0138C0                     i2u397_44:
 20400  0138C0  2E05               	decfsz	??i2_Byte_SetBit,f,c
 20401  0138C2  D7FC               	goto	i2u397_45
 20402  0138C4  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 20403  0138C8  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 20404  0138CC  5006               	movf	??i2_Byte_SetBit+1,w,c
 20405  0138CE  12DF               	iorwf	indf2,f,c
 20406  0138D0  0012               	return		;funcret
 20407  0138D2                     __end_ofi2_Byte_SetBit:
 20408                           	opt stack 0
 20409                           tosu	equ	0xFFF
 20410                           tosh	equ	0xFFE
 20411                           tosl	equ	0xFFD
 20412                           pclatu	equ	0xFFB
 20413                           pclath	equ	0xFFA
 20414                           tblptru	equ	0xFF8
 20415                           tblptrh	equ	0xFF7
 20416                           tblptrl	equ	0xFF6
 20417                           tablat	equ	0xFF5
 20418                           prodh	equ	0xFF4
 20419                           prodl	equ	0xFF3
 20420                           intcon	equ	0xFF2
 20421                           indf0	equ	0xFEF
 20422                           postinc0	equ	0xFEE
 20423                           fsr0h	equ	0xFEA
 20424                           fsr0l	equ	0xFE9
 20425                           wreg	equ	0xFE8
 20426                           indf1	equ	0xFE7
 20427                           postdec1	equ	0xFE5
 20428                           fsr1h	equ	0xFE2
 20429                           fsr1l	equ	0xFE1
 20430                           indf2	equ	0xFDF
 20431                           postinc2	equ	0xFDE
 20432                           postdec2	equ	0xFDD
 20433                           plusw2	equ	0xFDB
 20434                           fsr2h	equ	0xFDA
 20435                           fsr2l	equ	0xFD9
 20436                           status	equ	0xFD8
 20437                           
 20438 ;; *************** function i2_MXK_SwitchTo *****************
 20439 ;; Defined at:
 20440 ;;		line 105 in file "Library/MXK.c"
 20441 ;; Parameters:    Size  Location     Type
 20442 ;;  pModule         1    wreg     enum E6927
 20443 ;; Auto vars:     Size  Location     Type
 20444 ;;  pModule         1    7[COMRAM] enum E6927
 20445 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 20446 ;; Return value:  Size  Location     Type
 20447 ;;                  1    wreg      unsigned char 
 20448 ;; Registers used:
 20449 ;;		wreg, status,2, status,0, cstack
 20450 ;; Tracked objects:
 20451 ;;		On entry : 0/0
 20452 ;;		On exit  : 0/0
 20453 ;;		Unchanged: 0/0
 20454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20455 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20456 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20458 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20459 ;;Total ram usage:        2 bytes
 20460 ;; Hardware stack levels used:    1
 20461 ;; Hardware stack levels required when called:    1
 20462 ;; This function calls:
 20463 ;;		i2_delay_us
 20464 ;; This function is called by:
 20465 ;;		i2_Motor_Step
 20466 ;; This function uses a non-reentrant model
 20467 ;;
 20468                           
 20469                           	psect	text114
 20470  013C64                     __ptext114:
 20471                           	opt stack 0
 20472  013C64                     i2_MXK_SwitchTo:
 20473                           	opt stack 16
 20474                           
 20475                           ;incstack = 0
 20476                           ;i2MXK_SwitchTo@pModule stored from wreg
 20477  013C64  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 20478                           
 20479                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 20480  013C66  5086               	movf	3974,w,c	;volatile
 20481  013C68  0B0F               	andlw	15
 20482  013C6A  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 20483                           
 20484                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 20485  013C6C  504B               	movf	_Bus_State,w,c
 20486  013C6E  A4D8               	btfss	status,2,c
 20487  013C70  D002               	goto	i2l1730
 20488                           
 20489                           ;MXK.c: 110: return 0;
 20490  013C72  0E00               	movlw	0
 20491  013C74  0012               	return	
 20492  013C76                     i2l1730:
 20493                           
 20494                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 20495  013C76  0E00               	movlw	0
 20496  013C78  6E4B               	movwf	_Bus_State,c
 20497                           
 20498                           ;MXK.c: 114: if (CUR != pModule)
 20499  013C7A  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 20500  013C7C  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 20501  013C7E  B4D8               	btfsc	status,2,c
 20502  013C80  D00A               	goto	i2l1732
 20503                           
 20504                           ;MXK.c: 115: {
 20505                           ;MXK.c: 116: PORTG &= ~(0xF);
 20506  013C82  0EF0               	movlw	240
 20507  013C84  1686               	andwf	3974,f,c	;volatile
 20508                           
 20509                           ;MXK.c: 117: PORTG |= pModule;
 20510  013C86  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 20511  013C88  1286               	iorwf	3974,f,c	;volatile
 20512                           
 20513                           ;MXK.c: 120: delay_us(10);
 20514  013C8A  0E00               	movlw	0
 20515  013C8C  6E02               	movwf	i2delay_us@us+1,c
 20516  013C8E  0E0A               	movlw	10
 20517  013C90  6E01               	movwf	i2delay_us@us,c
 20518  013C92  EC7D  F09D         	call	i2_delay_us	;wreg free
 20519  013C96                     i2l1732:
 20520                           
 20521                           ;MXK.c: 121: }
 20522                           ;MXK.c: 122: return 1;
 20523  013C96  0E01               	movlw	1
 20524  013C98  0012               	return	
 20525  013C9A                     __end_ofi2_MXK_SwitchTo:
 20526                           	opt stack 0
 20527                           tosu	equ	0xFFF
 20528                           tosh	equ	0xFFE
 20529                           tosl	equ	0xFFD
 20530                           pclatu	equ	0xFFB
 20531                           pclath	equ	0xFFA
 20532                           tblptru	equ	0xFF8
 20533                           tblptrh	equ	0xFF7
 20534                           tblptrl	equ	0xFF6
 20535                           tablat	equ	0xFF5
 20536                           prodh	equ	0xFF4
 20537                           prodl	equ	0xFF3
 20538                           intcon	equ	0xFF2
 20539                           indf0	equ	0xFEF
 20540                           postinc0	equ	0xFEE
 20541                           fsr0h	equ	0xFEA
 20542                           fsr0l	equ	0xFE9
 20543                           wreg	equ	0xFE8
 20544                           indf1	equ	0xFE7
 20545                           postdec1	equ	0xFE5
 20546                           fsr1h	equ	0xFE2
 20547                           fsr1l	equ	0xFE1
 20548                           indf2	equ	0xFDF
 20549                           postinc2	equ	0xFDE
 20550                           postdec2	equ	0xFDD
 20551                           plusw2	equ	0xFDB
 20552                           fsr2h	equ	0xFDA
 20553                           fsr2l	equ	0xFD9
 20554                           status	equ	0xFD8
 20555                           
 20556 ;; *************** function i2_delay_us *****************
 20557 ;; Defined at:
 20558 ;;		line 255 in file "Library/Types.c"
 20559 ;; Parameters:    Size  Location     Type
 20560 ;;  us              2    0[COMRAM] unsigned short 
 20561 ;; Auto vars:     Size  Location     Type
 20562 ;;  delay_us        4    2[COMRAM] unsigned long 
 20563 ;; Return value:  Size  Location     Type
 20564 ;;                  1    wreg      void 
 20565 ;; Registers used:
 20566 ;;		wreg, status,2, status,0
 20567 ;; Tracked objects:
 20568 ;;		On entry : 0/0
 20569 ;;		On exit  : 0/0
 20570 ;;		Unchanged: 0/0
 20571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20572 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20573 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20574 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20575 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20576 ;;Total ram usage:        6 bytes
 20577 ;; Hardware stack levels used:    1
 20578 ;; This function calls:
 20579 ;;		Nothing
 20580 ;; This function is called by:
 20581 ;;		i2_MXK_SwitchTo
 20582 ;; This function uses a non-reentrant model
 20583 ;;
 20584                           
 20585                           	psect	text115
 20586  013AFA                     __ptext115:
 20587                           	opt stack 0
 20588  013AFA                     i2_delay_us:
 20589                           	opt stack 16
 20590                           
 20591                           ;Types.c: 256: unsigned long u;
 20592                           ;Types.c: 257: while (us--) {
 20593                           
 20594                           ;incstack = 0
 20595  013AFA  D016               	goto	i2u400_40
 20596  013AFC                     i2l7569:
 20597                           
 20598                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 20599  013AFC  0E00               	movlw	0
 20600  013AFE  6E03               	movwf	i2delay_us@u,c
 20601  013B00  0E00               	movlw	0
 20602  013B02  6E04               	movwf	i2delay_us@u+1,c
 20603  013B04  0E00               	movlw	0
 20604  013B06  6E05               	movwf	i2delay_us@u+2,c
 20605  013B08  0E00               	movlw	0
 20606  013B0A  6E06               	movwf	i2delay_us@u+3,c
 20607  013B0C                     i2l7571:
 20608  013B0C  5003               	movf	i2delay_us@u,w,c
 20609  013B0E  1004               	iorwf	i2delay_us@u+1,w,c
 20610  013B10  1005               	iorwf	i2delay_us@u+2,w,c
 20611  013B12  1006               	iorwf	i2delay_us@u+3,w,c
 20612  013B14  A4D8               	btfss	status,2,c
 20613  013B16  D008               	goto	i2u400_40
 20614  013B18  F000               	nop		; ;# 
 20615  013B1A  0E01               	movlw	1
 20616  013B1C  2603               	addwf	i2delay_us@u,f,c
 20617  013B1E  0E00               	movlw	0
 20618  013B20  2204               	addwfc	i2delay_us@u+1,f,c
 20619  013B22  2205               	addwfc	i2delay_us@u+2,f,c
 20620  013B24  2206               	addwfc	i2delay_us@u+3,f,c
 20621  013B26  D7F2               	goto	i2l7571
 20622  013B28                     i2u400_40:
 20623  013B28  0601               	decf	i2delay_us@us,f,c
 20624  013B2A  A0D8               	btfss	status,0,c
 20625  013B2C  0602               	decf	i2delay_us@us+1,f,c
 20626  013B2E  2801               	incf	i2delay_us@us,w,c
 20627  013B30  E1E5               	bnz	i2l7569
 20628  013B32  2802               	incf	i2delay_us@us+1,w,c
 20629  013B34  B4D8               	btfsc	status,2,c
 20630  013B36  0012               	return	
 20631  013B38  D7E1               	goto	i2l832
 20632  013B3A                     __end_ofi2_delay_us:
 20633                           	opt stack 0
 20634                           tosu	equ	0xFFF
 20635                           tosh	equ	0xFFE
 20636                           tosl	equ	0xFFD
 20637                           pclatu	equ	0xFFB
 20638                           pclath	equ	0xFFA
 20639                           tblptru	equ	0xFF8
 20640                           tblptrh	equ	0xFF7
 20641                           tblptrl	equ	0xFF6
 20642                           tablat	equ	0xFF5
 20643                           prodh	equ	0xFF4
 20644                           prodl	equ	0xFF3
 20645                           intcon	equ	0xFF2
 20646                           indf0	equ	0xFEF
 20647                           postinc0	equ	0xFEE
 20648                           fsr0h	equ	0xFEA
 20649                           fsr0l	equ	0xFE9
 20650                           wreg	equ	0xFE8
 20651                           indf1	equ	0xFE7
 20652                           postdec1	equ	0xFE5
 20653                           fsr1h	equ	0xFE2
 20654                           fsr1l	equ	0xFE1
 20655                           indf2	equ	0xFDF
 20656                           postinc2	equ	0xFDE
 20657                           postdec2	equ	0xFDD
 20658                           plusw2	equ	0xFDB
 20659                           fsr2h	equ	0xFDA
 20660                           fsr2l	equ	0xFD9
 20661                           status	equ	0xFD8
 20662                           
 20663 ;; *************** function i2_MXK_Release *****************
 20664 ;; Defined at:
 20665 ;;		line 130 in file "Library/MXK.c"
 20666 ;; Parameters:    Size  Location     Type
 20667 ;;		None
 20668 ;; Auto vars:     Size  Location     Type
 20669 ;;		None
 20670 ;; Return value:  Size  Location     Type
 20671 ;;                  1    wreg      unsigned char 
 20672 ;; Registers used:
 20673 ;;		wreg, status,2, status,0
 20674 ;; Tracked objects:
 20675 ;;		On entry : 0/0
 20676 ;;		On exit  : 0/0
 20677 ;;		Unchanged: 0/0
 20678 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20679 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20680 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20681 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20682 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20683 ;;Total ram usage:        0 bytes
 20684 ;; Hardware stack levels used:    1
 20685 ;; This function calls:
 20686 ;;		Nothing
 20687 ;; This function is called by:
 20688 ;;		i2_Motor_Step
 20689 ;; This function uses a non-reentrant model
 20690 ;;
 20691                           
 20692                           	psect	text116
 20693  01406E                     __ptext116:
 20694                           	opt stack 0
 20695  01406E                     i2_MXK_Release:
 20696                           	opt stack 17
 20697                           
 20698                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 20699                           
 20700                           ;incstack = 0
 20701  01406E  0E01               	movlw	1
 20702  014070  6E4B               	movwf	_Bus_State,c
 20703                           
 20704                           ;MXK.c: 135: return 1;
 20705                           ;	Return value of i2_MXK_Release is never used
 20706  014072  0012               	return	
 20707  014074                     __end_ofi2_MXK_Release:
 20708                           	opt stack 0
 20709                           tosu	equ	0xFFF
 20710                           tosh	equ	0xFFE
 20711                           tosl	equ	0xFFD
 20712                           pclatu	equ	0xFFB
 20713                           pclath	equ	0xFFA
 20714                           tblptru	equ	0xFF8
 20715                           tblptrh	equ	0xFF7
 20716                           tblptrl	equ	0xFF6
 20717                           tablat	equ	0xFF5
 20718                           prodh	equ	0xFF4
 20719                           prodl	equ	0xFF3
 20720                           intcon	equ	0xFF2
 20721                           indf0	equ	0xFEF
 20722                           postinc0	equ	0xFEE
 20723                           fsr0h	equ	0xFEA
 20724                           fsr0l	equ	0xFE9
 20725                           wreg	equ	0xFE8
 20726                           indf1	equ	0xFE7
 20727                           postdec1	equ	0xFE5
 20728                           fsr1h	equ	0xFE2
 20729                           fsr1l	equ	0xFE1
 20730                           indf2	equ	0xFDF
 20731                           postinc2	equ	0xFDE
 20732                           postdec2	equ	0xFDD
 20733                           plusw2	equ	0xFDB
 20734                           fsr2h	equ	0xFDA
 20735                           fsr2l	equ	0xFD9
 20736                           status	equ	0xFD8
 20737                           
 20738 ;; *************** function i2_MXK_Queue *****************
 20739 ;; Defined at:
 20740 ;;		line 144 in file "Library/MXK.c"
 20741 ;; Parameters:    Size  Location     Type
 20742 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 20743 ;;		 -> Absolute function(1), Motor_Step(1), 
 20744 ;; Auto vars:     Size  Location     Type
 20745 ;;		None
 20746 ;; Return value:  Size  Location     Type
 20747 ;;                  1    wreg      void 
 20748 ;; Registers used:
 20749 ;;		wreg, status,2, status,0
 20750 ;; Tracked objects:
 20751 ;;		On entry : 0/0
 20752 ;;		On exit  : 0/0
 20753 ;;		Unchanged: 0/0
 20754 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20755 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20756 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20757 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20758 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20759 ;;Total ram usage:        3 bytes
 20760 ;; Hardware stack levels used:    1
 20761 ;; This function calls:
 20762 ;;		Nothing
 20763 ;; This function is called by:
 20764 ;;		i2_Motor_Step
 20765 ;; This function uses a non-reentrant model
 20766 ;;
 20767                           
 20768                           	psect	text117
 20769  01400C                     __ptext117:
 20770                           	opt stack 0
 20771  01400C                     i2_MXK_Queue:
 20772                           	opt stack 17
 20773                           
 20774                           ;MXK.c: 146: lQueue = pCallback;
 20775                           
 20776                           ;incstack = 0
 20777  01400C  C001  F06F         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 20778  014010  C002  F070         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 20779  014014  C003  F071         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 20780  014018  0012               	return		;funcret
 20781  01401A                     __end_ofi2_MXK_Queue:
 20782                           	opt stack 0
 20783                           tosu	equ	0xFFF
 20784                           tosh	equ	0xFFE
 20785                           tosl	equ	0xFFD
 20786                           pclatu	equ	0xFFB
 20787                           pclath	equ	0xFFA
 20788                           tblptru	equ	0xFF8
 20789                           tblptrh	equ	0xFF7
 20790                           tblptrl	equ	0xFF6
 20791                           tablat	equ	0xFF5
 20792                           prodh	equ	0xFF4
 20793                           prodl	equ	0xFF3
 20794                           intcon	equ	0xFF2
 20795                           indf0	equ	0xFEF
 20796                           postinc0	equ	0xFEE
 20797                           fsr0h	equ	0xFEA
 20798                           fsr0l	equ	0xFE9
 20799                           wreg	equ	0xFE8
 20800                           indf1	equ	0xFE7
 20801                           postdec1	equ	0xFE5
 20802                           fsr1h	equ	0xFE2
 20803                           fsr1l	equ	0xFE1
 20804                           indf2	equ	0xFDF
 20805                           postinc2	equ	0xFDE
 20806                           postdec2	equ	0xFDD
 20807                           plusw2	equ	0xFDB
 20808                           fsr2h	equ	0xFDA
 20809                           fsr2l	equ	0xFD9
 20810                           status	equ	0xFD8
 20811                           tosu	equ	0xFFF
 20812                           tosh	equ	0xFFE
 20813                           tosl	equ	0xFFD
 20814                           pclatu	equ	0xFFB
 20815                           pclath	equ	0xFFA
 20816                           tblptru	equ	0xFF8
 20817                           tblptrh	equ	0xFF7
 20818                           tblptrl	equ	0xFF6
 20819                           tablat	equ	0xFF5
 20820                           prodh	equ	0xFF4
 20821                           prodl	equ	0xFF3
 20822                           intcon	equ	0xFF2
 20823                           indf0	equ	0xFEF
 20824                           postinc0	equ	0xFEE
 20825                           fsr0h	equ	0xFEA
 20826                           fsr0l	equ	0xFE9
 20827                           wreg	equ	0xFE8
 20828                           indf1	equ	0xFE7
 20829                           postdec1	equ	0xFE5
 20830                           fsr1h	equ	0xFE2
 20831                           fsr1l	equ	0xFE1
 20832                           indf2	equ	0xFDF
 20833                           postinc2	equ	0xFDE
 20834                           postdec2	equ	0xFDD
 20835                           plusw2	equ	0xFDB
 20836                           fsr2h	equ	0xFDA
 20837                           fsr2l	equ	0xFD9
 20838                           status	equ	0xFD8
 20839                           
 20840                           	psect	text118
 20841  000000                     __ptext118:
 20842                           	opt stack 0
 20843                           tosu	equ	0xFFF
 20844                           tosh	equ	0xFFE
 20845                           tosl	equ	0xFFD
 20846                           pclatu	equ	0xFFB
 20847                           pclath	equ	0xFFA
 20848                           tblptru	equ	0xFF8
 20849                           tblptrh	equ	0xFF7
 20850                           tblptrl	equ	0xFF6
 20851                           tablat	equ	0xFF5
 20852                           prodh	equ	0xFF4
 20853                           prodl	equ	0xFF3
 20854                           intcon	equ	0xFF2
 20855                           indf0	equ	0xFEF
 20856                           postinc0	equ	0xFEE
 20857                           fsr0h	equ	0xFEA
 20858                           fsr0l	equ	0xFE9
 20859                           wreg	equ	0xFE8
 20860                           indf1	equ	0xFE7
 20861                           postdec1	equ	0xFE5
 20862                           fsr1h	equ	0xFE2
 20863                           fsr1l	equ	0xFE1
 20864                           indf2	equ	0xFDF
 20865                           postinc2	equ	0xFDE
 20866                           postdec2	equ	0xFDD
 20867                           plusw2	equ	0xFDB
 20868                           fsr2h	equ	0xFDA
 20869                           fsr2l	equ	0xFD9
 20870                           status	equ	0xFD8
 20871                           
 20872                           	psect	rparam
 20873  0000                     tosu	equ	0xFFF
 20874                           tosh	equ	0xFFE
 20875                           tosl	equ	0xFFD
 20876                           pclatu	equ	0xFFB
 20877                           pclath	equ	0xFFA
 20878                           tblptru	equ	0xFF8
 20879                           tblptrh	equ	0xFF7
 20880                           tblptrl	equ	0xFF6
 20881                           tablat	equ	0xFF5
 20882                           prodh	equ	0xFF4
 20883                           prodl	equ	0xFF3
 20884                           intcon	equ	0xFF2
 20885                           indf0	equ	0xFEF
 20886                           postinc0	equ	0xFEE
 20887                           fsr0h	equ	0xFEA
 20888                           fsr0l	equ	0xFE9
 20889                           wreg	equ	0xFE8
 20890                           indf1	equ	0xFE7
 20891                           postdec1	equ	0xFE5
 20892                           fsr1h	equ	0xFE2
 20893                           fsr1l	equ	0xFE1
 20894                           indf2	equ	0xFDF
 20895                           postinc2	equ	0xFDE
 20896                           postdec2	equ	0xFDD
 20897                           plusw2	equ	0xFDB
 20898                           fsr2h	equ	0xFDA
 20899                           fsr2l	equ	0xFD9
 20900                           status	equ	0xFD8
 20901                           
 20902                           	psect	temp
 20903  000051                     btemp:
 20904                           	opt stack 0
 20905  000051                     	ds	1
 20906  0000                     int$flags	set	btemp
 20907  0000                     wtemp6	set	btemp+1
 20908                           tosu	equ	0xFFF
 20909                           tosh	equ	0xFFE
 20910                           tosl	equ	0xFFD
 20911                           pclatu	equ	0xFFB
 20912                           pclath	equ	0xFFA
 20913                           tblptru	equ	0xFF8
 20914                           tblptrh	equ	0xFF7
 20915                           tblptrl	equ	0xFF6
 20916                           tablat	equ	0xFF5
 20917                           prodh	equ	0xFF4
 20918                           prodl	equ	0xFF3
 20919                           intcon	equ	0xFF2
 20920                           indf0	equ	0xFEF
 20921                           postinc0	equ	0xFEE
 20922                           fsr0h	equ	0xFEA
 20923                           fsr0l	equ	0xFE9
 20924                           wreg	equ	0xFE8
 20925                           indf1	equ	0xFE7
 20926                           postdec1	equ	0xFE5
 20927                           fsr1h	equ	0xFE2
 20928                           fsr1l	equ	0xFE1
 20929                           indf2	equ	0xFDF
 20930                           postinc2	equ	0xFDE
 20931                           postdec2	equ	0xFDD
 20932                           plusw2	equ	0xFDB
 20933                           fsr2h	equ	0xFDA
 20934                           fsr2l	equ	0xFD9
 20935                           status	equ	0xFD8


Data Sizes:
    Strings     49
    Constant    730
    Data        25
    BSS         798
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     68     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      4     225
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK3[5]), 
		 -> NULL(NULL[0]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___lwmod->___lwdiv
    _irobot_stop_motion->_irobot_move
    _irobot_song_play->_eusart_putch
    _irobot_rotate->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0  958277
                                              0 BANK3      4     4      0
                       _Console_Init
                     _Console_Render
                           _HMI_Init
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (1) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (1) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (3) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (4) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              24    16      8    4500
                                             21 BANK0     15     7      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (1) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_rotate                                        5     1      4    3975
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (3) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (2) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (3) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (1) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (3) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      4     1      3
                                              0 BANK1      2     2      0
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Init
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _LCD_Init
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo
     _delay_us
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _delay_ms
   _eusart_init
   _irobot_init
     _eusart_putch
   _irobot_init_song_0
     _eusart_putch
   _irobot_led_power_on
     _irobot_leds
       _eusart_putch
       _load_iRScriptStack
   _irobot_rotate
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _irobot_song_play
     _eusart_putch
   _irobot_stop_motion
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
   _update_angle
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop
   _update_bump_and_cliff
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop
   _update_distance
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      4      E1      11       87.9%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     47B      12        0.0%
DATA                 0      0     5A7       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 08 11:29:51 2017

                                 _update_angle 3FA2                                  i2_Timer0_Stop 4068  
                             SPI_Init@pChannel 00E6                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 1EE8                                              _A 004C  
                        __end_of_irobot_rotate 3506                                              l8 212A  
                                            _a 004D                                              _i 0038  
                                            _j 0037                                              _l 004F  
                                            _u 0036                                              _w 0050  
                          _irobot_led_power_on 3F2A                                             l90 197E  
                                           l85 187A                                             l87 18E8  
                                           l89 1954                                   ___awdiv@sign 00BA  
                          ___wmul@multiplicand 00B7                                  _HMI_DIPSwitch 000000  
                           LCD_DrawField@pSize 00CD                             LCD_DrawField@count 00D3  
                   __end_of_irobot_stop_motion 39A8                               i2_Timer0_Restart 4026  
                                          l120 2CF0                                            l121 2D06  
                                          l122 2D1C                                            l220 360E  
                                          l117 2D32                                            l221 35D2  
                                          l118 2CDA                                            l230 3808  
                                          l222 361E                                            l223 35F0  
                                  ?_LED_Toggle 0001                                            l234 3950  
                                          l235 3920                                            l227 3824  
                                          l403 1508                                            l412 11E4  
                                          l228 37EC                                            l340 299E  
                                          l404 14A8                                            l421 1178  
                                          l413 107A                                            l237 3938  
                                          l341 29AC                                            l405 1538  
                                ??_Console_Tab 00BD                                            l414 1200  
                                          l430 229E                                            l350 2AA6  
                                          l342 29BA                                            l510 0A36  
                                          l406 14C0                                            l183 2B5A  
                                          l415 10A0                                            l351 2A36  
                                          l343 29C8                                            l511 0B46  
                                          l407 14D8                                            l184 2B34  
                                          l600 000C                                            l432 22C8  
                                          l344 29D6                                            l512 0A58  
                                          l408 14F0                                            l417 110C  
                                          l601 01A0                                            l433 22F8  
                                          l353 2A44                                            l337 2A00  
                                          l345 29E4                                            l610 0228  
                                          l602 003E                                            l354 2A52  
                                          l346 29F2                                            l338 2990  
                                          l370 2930                                            l611 0276  
                                          l603 01B2                                            l427 2322  
                                          l355 2A60                                            l363 295A  
                                          l371 293E                                            l531 0774  
                                          l612 02C4                                            l604 00EC  
                                          l356 2A6E                                            l372 294C  
                                          l364 28EA                                            l532 0798  
                                          l516 0AA0                                            l357 2A7C  
                                          l509 0B2A                                            l614 03A6  
                                          l358 2A8A                                            l366 28F8  
                                          l526 07B8                                            l615 039E  
                                          l607 0312                                            l359 2A98  
                                          l367 2906                                            l519 0AE8  
                                          l616 03B8                                            l608 01DA  
                                          l368 2914                                            l528 07D6  
                                          l393 36DE                                            l617 03A2  
                                          l609 0330                                            l369 2922  
                                          l529 0754                                            l483 0896  
                                          l732 2C74                                            l476 096E  
                                          l733 2C68                                            l389 33D0  
                                          l477 07E0                                            l397 3914  
                                          l726 25AE                                            l478 098A  
                                          l486 0902                                            l654 3D96  
                                          l727 25A2                                            l479 082A  
                                          l655 3D8E                                            l824 3304  
                                          l832 3796                                            l681 323E  
                                          l673 3D20                                            l657 3D92  
                                          l819 2F6E                                            l684 3254  
                                          l781 3BE2                                            l597 001A  
                                          l678 327A                                            l686 3264  
                                          l598 0002                                            l679 322E  
                                          l599 002A                                            l776 3A1E  
                                          l990 2DFA                                            l983 2BF8  
                                          l976 2E88                                            l992 2E0A  
                                          l984 2B7C                                            l985 2BF4  
                                          l978 2E98                                            l997 3644  
                                          l999 3668                                            _PR2 000FCB  
                                          _val 007B                                   _Word_GetPair 3BB6  
                                          prod 000FF3                            MXK_SwitchTo@pModule 00BC  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00C5                             Console_MakeField@y 00C6  
                                   _TXSTA1bits 000FAD                                _update_distance 3F90  
                                 Console_Tab@c 00C4                                   Console_Tab@i 00C3  
                          LCD_DrawField@pField 00C7                                   Console_Tab@t 00C2  
                                   i2_delay_us 3AFA                           Port_Set@TypeRequired 00D7  
                            Console_FormFeed@x 00B7                              Console_FormFeed@y 00B8  
                          LCD_DrawField@pPoint 00C9                                 ?_LCD_DrawField 00C7  
                        Port_SetPinType@Output 00DF                                Port_SetPin@Type 00C8  
                              Port_SetPin@pPin 00C6                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00BE                                __end_of_LED_Set 3836  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 283A  
                                 _Word_SetPair 39EE                                           l1000 3684  
                                         l1010 2392                                           l1004 3470  
                                ?_Byte_GetZone 00B5                                           l1005 349E  
                                         l1040 122E                                           l1009 239E  
                                         l1041 1234                                           l1042 123A  
                                         l1043 1240                                           l2011 1D60  
                                         l1036 138A                                           l1044 1246  
                                         l2100 200A                                           l1045 124C  
                                         l1037 1228                                           l2101 2010  
                                         l1062 0DF2                                           l2110 2070  
                                         l2102 2016                                           l2006 1CBE  
                                         l1063 0E20                                           l1047 12F2  
                                         l2103 201C                                           l2007 1D0C  
                                         l1056 0C82                                           l2008 1D44  
                                         l1057 0E48                                           l1153 1060  
                                         l2121 2D72                                           l2105 2030  
                                         l1082 2218                                           l1058 0C8A  
                                         l1059 0CB4                                           l2203 371C  
                                         l1084 2220                                           l2108 205C  
                                         l1077 21E8                                           l2133 2DD6  
                                         l2125 2D92                                           l2117 2D58  
                                         l1079 21F8                                           l2215 34C6  
                                         l2080 3400                                           l2160 16CA  
                                         l2217 34CC                                           l2081 33DC  
                                         l2129 2DB6                                           l2161 160E  
                                         l2226 398C                                           l2090 33FC  
                                         l2162 1656                                           l2154 15CA  
                                         l2171 3A5A                                           l2219 34EE  
                                         l2083 33E0                                           l2163 1614  
                                         l2155 1584                                           l2084 33E4  
                                         l2173 3A62                                           l2085 33E8  
                                         l2157 15FA                                           l1630 1E2E  
                                         l2270 19F4                                           l2086 33EC  
                                         l2094 209C                                           l2158 15DE  
                                         l1631 1E8A                                           l2271 1A0C  
                                         l2087 33F0                                           l2095 1FEE  
                                         l1632 1E6E                                           l2272 1A16  
                                         l2088 33F4                                           l2177 32EE  
                                         l2169 3A6E                                           l2273 1A4E  
                                         l2265 19D8                                           l2089 33F8  
                                         l2097 1FF8                                           l1730 3A8E  
                                         l2178 32B0                                           l2450 2434  
                                         l2274 1A70                                           l2266 19EC  
                                         l2098 1FFE                                           l1627 1ED6  
                                         l2267 1A1E                                           l2099 2004  
                                         l1724 3B84                                           l1732 3AB6  
                                         l1628 1ECC                                           l2700 35C2  
                                         l2452 245E                                           l1629 1E4C  
                                         l2453 2452                                           l2277 1B08  
                                         l1726 3BB2                                           l2198 26BA  
                                         l2278 1AB0                                           l1735 3F5E  
                                         l2632 24FE                                           l2456 2494  
                                         l2633 24EE                                           l2457 24A2  
                                         l2449 241E                                           l2458 24B6  
                                         l1827 1BA2                                           l2636 2558  
                                         l1828 1BC2                                           l2637 256A  
                                         l2690 2FE0                                           l2685 2F9C  
                                         l2686 2F90                                           l2695 358A  
                                         l2696 357E                                           l2689 2FD2  
                                         l2699 35B4                                 ??_Console_Init 00B5  
                        Port_SetPinType@pInput 00DB                                           STR_1 FFFB  
                                         STR_2 FFCD                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _LATD 000F8C                                           _LATE 000F8D  
                                         _LATF 000F8E                    __size_of_MXK_InitTestButton 001E  
                                         _LATG 000F8F                            __end_of_GetPortPORT 2AD6  
                                         u7120 3CBC                                           u6400 2F08  
                                         u7105 0720                                           u7035 044C  
                     __end_of_irobot_song_play 3F90                                           u7125 3CB6  
                                         u7045 0464                                           u7055 047C  
                                         u6360 2C3E                                           u8200 34BA  
                                         u7065 049E                                           _PIR1 000F9E  
                                         u8050 0E30                                           u6434 3522  
                                         u7410 378E                                           u7250 3A4E  
                                         _PIR2 000FA1                                           u6435 351C  
                                         u7075 061E                                           _PIR3 000FA4  
                                         u6380 2CA4                                           u6444 3554  
                                         u6540 2E4E                                           u6445 354E  
                                         u7085 069C                                           u6550 2E54  
                                         u6367 2C34                                           u7095 06DE  
                                         u6464 25EA                                           u7328 2196  
                          __end_of_GetPortTRIS 298A                                           u6640 346C  
                                         u6465 25E4                                           u6385 2C9E  
                                         u7530 2262                                           u7450 31B6  
                                         u6474 261C                                           u6730 2504  
                                         u6490 39DC                                           u6650 3496  
                                         u9050 1D38                                           u6475 2616  
                                         u7540 226E                                           u6900 37CE  
                                         u7700 3590                                           u8260 1AAA  
                                         u9060 1D5A                                           u6565 3FC2  
                                         u6566 3FC4                                           u8270 1B14  
                                         u6495 39D6                                           u7720 1878  
                                         u7570 1E0C                                           u7490 153E  
                                         u6690 2464                                           u7580 1E20  
                                         u6870 1C0E                                           u6790 3342  
                                         u7590 1E60                                           u7670 2FA2  
                                         u6855 1B5A                                           u7760 198C  
                                         _SPI1 0368                                           u7980 2EF0  
                                         _SPI2 0373                                           _TMR0 000FD6  
                                         u8998 3B4E                                           u8999 3B64  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BA  
                                         _gISR 006C                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00B8                                  _iRVirtualWall 002E  
                           SPI_MaxSpeed@pInput 00C4                                  ?_Byte_SetByte 00B5  
                                ?_Byte_SetPair 00C0                                __end_of_SPI_DCS 3D2E  
                                         _main 1C96                     irobot_leds@powerLuminosity 00C7  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C0  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00B5  
                                         btemp 0051                                           _zero 004E  
                                ??_Byte_SetBit 00B9                             __size_of_LCD_Reset 0050  
                                         prodh 000FF4                                           prodl 000FF3  
                                         start 14AA                             __size_of_LCD_Write 0022  
                                __CFG_IESO$OFF 000000                                ?_SPI_DisableISR 00B5  
                                Console_Init@x 00B7                                  Console_Init@y 00B8  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FFBF  
                         Set_Rotation@rotation 00BB                             _irobot_init_song_0 3E1A  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 3794  
                             __end_of_LCD_Init 19CA                                  __CFG_PLLDIV$3 000000  
                             __end_of_LED_Init 362E                                   _BAUDCON1bits 000F7E  
                                ??_Button_Init 00F0                        GetPortProperties@pInput 00B7  
                             __end_of_HMI_Init 1062                                          l10531 3316  
                                        l10283 2DF0                                          l11341 3772  
                                        l11421 149E                                          l10623 3796  
                                        l11361 318C                                          l10529 3304  
                                        l10537 3342                                          l11337 3764  
                                        l10625 37A8                                          l10289 2E00  
                                        l11365 319A                                          l11197 3FE6  
                                        l12069 1AA0                                          l11463 21EE  
                                        l11801 2E7E                                          l11457 21DE  
                                        l10585 1BA2                                          l11645 18E8  
                                        l11807 2E8E                                          l11655 198C  
                                        l11835 0CAA                                          l11897 1034  
                                        _I2C1T 0040                                          _I2C2T 03BA  
                                        ?_main 0001                                __end_of___awdiv 24C0  
                        irobot_rotate@isScript 00D2                                _Event_DIPSwitch 000000  
                              __end_of___lldiv 257C                                ___awdiv@divisor 00B7  
                                        _INDEX 003A                                __end_of___lwdiv 2FEA  
                                        _MASKS FDCF                                __end_of___lwmod 35CC  
                                        i2l430 2852                                          i2l432 2878  
                                        i2l433 28A2                                          i2l427 28C8  
                                        i2l732 3036                                          i2l733 3030  
                                        i2l832 3AFC                                          i2l781 3D4C  
                              ___awdiv@counter 00B9                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CB                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03A6                                          _PortB 039C  
                                        _PortC 00A3                                          _PortD 0099  
                                        _PortE 008F                                          _PortF 03B0  
                                        _PortG 0392                        __end_of_Port_SetPinType 1222  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C1  
                        ??_irobot_led_power_on 00C9                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CA                                __end_of_dpowers FDCF  
                               ??_Byte_GetZone 00BA                      irobot_move@moveTurnRadius 00C7  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 2402  
                             __end_of_MXK_Init 1858                       __size_of_sort_iRBumpDrop 008E  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 3FC6                               __end_of_SPI_Init 041E  
                             __end_of_SPI_Send 3298                          __end_ofi2_MXK_Release 4074  
                                        pclath 000FFA                                          tablat 000FF5  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00B8  
                               ??_Byte_SetPair 00C4                                 ??_Byte_SetQuad 00C4  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00BB  
                                        status 000FD8                                          wtemp6 0052  
                              _Configure_GPIOs 31BC                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00B6  
                               _LCD_Word_Write 3F0C                            __size_of_LED_Toggle 0048  
                                   _Event_NULL 000000                    __size_of_Port_CheckPairType 006A  
                                 ?_irobot_leds 00C5                                   ?_irobot_init 0001  
                              __initialization 26E2                                   ?_irobot_move 00C5  
                          __end_of_Byte_GetBit 3CCE                         irobot_leds@powerColour 00C6  
                                 __end_of_main 1DC2               irobot_query_and_update@packetIDs 00CA  
                                 SPI_Send9@dat 0083                            __end_of_Byte_SetBit 356A  
                             __end_of_InitList FDA5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 3FC6                        __end_of_update_distance 3FA2  
                  __size_of_Port_CheckPortType 0048                                         ??_main 00F9  
                      _Console_MakeField$10974 00C3                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C4                              __end_of_LCD_Reset 3886  
                            Port_SetPin@pValue 00C7                                      ??_LED_Set 00CA  
                            _MXK_InitDIPSwitch 3EB2                              GetPortPORT@pInput 00B7  
                       Port_CheckPairType@Pin1 00DF                         Port_CheckPairType@Pin2 00E0  
                            __end_of_LCD_Write 3E1A                                    _GetPortPORT 2A30  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 28E4  
                              ??_LCD_DrawField 00D1                     __end_of_PortProperty_Valid 2F72  
                             __end_of_Port_Set 07D8                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 21AC  
                            Word_GetPair@pPair 00C3                        LCD_FillRectangle@pPoint 00C0  
                           ?_MXK_InitDIPSwitch 0001                                      ??_SPI_DCS 00B7  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                       Port_SetQuadType@Output 00EF                                         _ANCON0 000FC1  
                             ___awdiv@dividend 00B5                                         ?_putch 0001  
                             ??_Console_Render 00D8                               _Console_FormFeed 2DDE  
                       Port_SetQuadType@pInput 00EB                                         i2l1630 1F4E  
                                       i2l1631 1F9A                                         i2l1632 1F86  
                                       i2l1730 3C76                                         i2l1627 1FD6  
                                       i2l1732 3C96                                         i2l1628 1FCC  
                                       i2l1629 1F64                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                                         i2l7571 3B0C  
                                       i2l7569 3AFC                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 3F2A  
                               _Timer0_Restart 401A                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F0                                         _TXREG1 000FAE  
                               i2_MXK_SwitchTo 3C64                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00B7                                     _Reset_High 3E94  
                           Console_Render@temp 00DA                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00CC                               __end_of_delay_ms 336C  
                                 LED_Init@pLED 00E2                               __end_of_delay_us 37E6  
                                ??_Timer2_Init 00C6                                  ??_Timer0_Stop 00B5  
                                   _Timer0_ISR 3D5E                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00CF                                 __CFG_XINST$OFF 000000  
                     __size_of_HMI_InitButtons 0006                     __end_of_load_iRScriptStack 3302  
                                       _iRWall 0033                                     _Motor_Step 1DC2  
                          rx_assign@byteNumber 00B7                                         ___wmul 3C2E  
                load_iRScriptStack@bytesToLoad 00C3                                      ??___awdiv 00B9  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                       _lMotor 007D                                      ??___lldiv 00BD  
                                       _lQueue 006F                                     _TestButton 0388  
                                    ??___lwdiv 00B9                                      ??___lwmod 00C0  
                     __end_of_Port_SetQuadType 0A2E                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 2EF6  
                            GetPortTRIS@pInput 00B7                             __size_of_Reset_Low 001E  
                                       clear_0 274A                                         clear_1 275C  
                                       clear_2 2768                                         clear_3 2774  
                                       clear_4 2780                               ___awdiv@quotient 00BB  
                   irobot_stop_motion@isScript 00CE                                  ?_eusart_getch 0001  
                                   Port_Init@i 00F8                                     _iRDistance 0075  
                            __end_of_MXK_Queue 400C                     __end_ofHMI_SetButton@F7213 FDDC  
                                   _iRBumpLeft 0088                                         _printf 19CA  
                                   _iRBumpDrop 0034                      __end_of_MXK_InitDIPSwitch 3ED0  
                                   _iRDropLeft 0086                                  ?_eusart_putch 0001  
                                  _Console_Tab 2340                            LCD_Word_Write@value 00BA  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00B8                       Port_CheckPortType@Output 00EE  
                           _twos_complement_of 3A34                                ??i2_Port_SetPin 0014  
                                 __mediumconst FCF2                    __end_ofTimer2_Init@PRESCALE FDDF  
                     Port_CheckPortType@pDrive 00ED                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                       Port_CheckPortType@pInput 00EB  
                                ??_Port_SetPin 00C8                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00DB                                         putch@c 00C9  
                               i2_Word_GetPair 3D2E                        __end_of_Configure_GPIOs 322C  
                          irobot_leds@isScript 00C8                         __end_of_Timer0_Restart 4026  
                                Set_Rotation@m 00BA                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00B5                                __CFG_FOSC$HSPLL 000000  
                       __end_ofi2_MXK_SwitchTo 3C9A                                   i2delay_us@us 0001  
                        _update_bump_and_cliff 3BF4                                ?_LCD_Word_Write 00BA  
                                   __accesstop 0060                        __end_of__initialization 2786  
                                    ?_LCD_Fill 00BE          irobot_query_and_update@packetVariable 00CE  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00E7  
                                  _Byte_GetBit 3C9A                                      ?_LED_Init 0001  
                     __end_ofi2_Timer0_Restart 4032                                      ?_HMI_Init 0001  
                            ??_Set_Addr_Window 00BD               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00B5  
                                  _Byte_SetBit 3506                                  __end_of_MASKS FDD8  
                               _PortA_Property FFCB                                      LCD_Fill@i 00C0  
                                    LCD_Fill@j 00C1                            load_iRScriptStack@i 00C4  
                                    LCD_Init@i 00EC                                 __pcstackCOMRAM 0001  
                               _PortB_Property FFC9                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 4054                                   __pidataBANK3 403C  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 3F0C  
                              Console_Render@x 00DF                                Console_Render@y 00E0  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FDA5                           __end_of_Byte_GetZone 2CB8  
                         ??_twos_complement_of 00B7                              irobot_leds@LEDBit 00C5  
                               _PortC_Property FFC7                                  __end_of_putch 3FD4  
                               ??_eusart_getch 00B5                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 1C96                            __end_of_Timer0_Stop 4062  
                                    ?_SPI_Init 00E2                               ?_update_distance 0001  
                                    ?_SPI_Send 00B5                                 ??_eusart_putch 00B5  
                                  _Button_Init 20D8                              Port_SetType@pType 00F1  
                         __end_of_Byte_SetByte 3FFE                           __end_of_Byte_SetPair 3DD6  
                               _HMI_LeftSwitch 000000                                 _PortD_Property FFC5  
                         __end_of_Byte_SetQuad 3DF8                                   ??_LED_Toggle 00CD  
                   eusart_putch@eusartSendChar 00B5                           __end_of_Byte_SetZone 2632  
                               _HMI_DownSwitch 000000                                  SPI_Send@pData 00B7  
                     __size_of_get_packet_size 0066                                 _PortE_Property FFC3  
                       __end_ofi2_Word_GetPair 3D5E                                 main@angleTotal 03DF  
                               _PortF_Property FFC1                        Port_CheckQuadType@Pair1 00E8  
                      Port_CheckQuadType@Pair2 00E9                       MXK_BlockSwitchTo@pModule 00BC  
                            _Console_Backspace 362E                                ?_Timer0_Restart 0001  
                                      ??_putch 00C9                            _Console_ClearCursor 3ABA  
                               _PortG_Property FFBF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 39EE                             _irobot_stop_motion 3962  
                      Port_CheckQuadType@pQuad 00E6                               ??_SPI_DisableISR 00B7  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 3E94  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C0  
                                   ??_LCD_Init 00EA                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 2340                         __end_of_PortA_Property FFCD  
             irobot_led_power_on@powerOnColour 00C9                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00B5                                     ??_LED_Init 00E2  
                           Byte_SetByte@pValue 00B7                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                                     ??_HMI_Init 00F0  
                           ??_irobot_song_play 00B6                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E2                         __end_of_PortB_Property FFCB  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 1552  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 00DD  
                           __end_of_LED_Toggle 3962                       LCD_FillRectangle@pColour 00BE  
                          ??_Console_Backspace 00B7                              Set_Addr_Window@xe 00BB  
                            Set_Addr_Window@ye 00BC                              Set_Addr_Window@xs 00BD  
                            Set_Addr_Window@ys 00BA                             Byte_SetPair@pInput 00C0  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C3  
                       __end_of_PortC_Property FFC9                             Word_GetPair@pInput 00C1  
                               ??_Set_Rotation 00BA                                      ?_Port_Set 00C4  
                                      ?___wmul 00B5                              Port_GetPin@Output 00BA  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_PortD_Property FFC7  
                                      _ADC_AN0 03D0                                        _ADC_AN1 03CB  
                                      _ADC_AN2 03C6                                        _ADC_AN3 03C1  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00B5  
                            _Console_MakeField 21AC                              ??_Console_NewLine 00B5  
                                   ??_SPI_Init 00E8                                     ??_SPI_Send 00B8  
                                      ?_printf 00CA                              ??_HMI_InitButtons 00B5  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FFC5  
                          Console_Render@F6956 03D5                             ?_Console_MakeField 00BA  
                                      _COUNTER 0029                           ??_irobot_stop_motion 00CE  
                                      _LED_Set 37E6                        _Console_IncrementCursor 343C  
                       __end_of_PortF_Property FFC3                                    _gBackcolour 0081  
                                    _I2C1_Done 032B                                ?i2_Word_GetPair 000D  
                                    _I2C2_Done 0328                                      _I2C1_More 0325  
                                    _I2C2_More 0322                                      ?_delay_ms 00B5  
                    __end_of_Console_Backspace 368A                                      ?_delay_us 00B5  
                   __end_of_MXK_InitTestButton 3EEE                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                         __end_of_PortG_Property FFC1  
                          ??_Console_MakeField 00BC                                        _SPI_DCS 3CFE  
                         __size_ofi2_MXK_Queue 000E                               ?_Configure_GPIOs 0001  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 0064  
                         i2Byte_GetZone@Offset 0008                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                              Event_TestButton@j 0089  
                                   ??_Mode_Set 00B5                                 ??_Timer2_Clear 00B5  
                                      _Font5x7 FDDF                           i2Byte_GetZone@pChunk 0004  
                         i2Byte_GetZone@pInput 0001                           SPI_DisableISR@pInput 00B5  
                              Byte_SetBit@pBit 00B7                           Port_TogglePin@pInput 00C9  
                        __end_ofi2_Byte_SetBit 38D2                                        __Hparam 0000  
                                  _Timer2_Init 1B36                                        __Lparam 0000  
                                  _Timer0_Stop 405C                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FDC5  
                                      _iRAngle 0077                                  LCD_Write@mode 00B8  
                                   ??_Port_Set 00C7                      __end_of_Console_MakeField 227C  
                            _Console_PrintChar 1222                                  ?_Port_SetType 00EF  
                                      _gCursor 0047                                        ___awdiv 2402  
                        ??_Console_ClearCursor 00B5                                        _lBuffer 04AA  
                                      ___lldiv 24C0                                __size_of___wmul 0036  
                                      ___lwdiv 2F72                                        ___lwmod 356A  
                     __end_of_Console_FormFeed 2E6C                             ?_Console_PrintChar 0001  
                                      __pcinit 26E2                                        __ramtop 1000  
                                      __ptext0 1C96                                        __ptext1 3F90  
                                      __ptext2 3BF4                                        __ptext3 3FA2  
                                      __ptext4 1552                                        __ptext5 1FE8  
                                      __ptext6 2D50                                        __ptext7 33D6  
                                      __ptext8 4044                                        __ptext9 19CA  
                              __size_of_printf 016C                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 3F46                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FDC5                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00C9                            __size_of_Reset_High 001E  
                                 ?_GetPortPORT 00B5                                   ?_GetPortTRIS 00B5  
                          ??_Console_PrintChar 00C5                                    _Port_GetPin 39A8  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 00B1  
                          LCD_DrawRectangle@p4 00AD                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00B7                                     ??_delay_us 00B7  
                                    _DIPSwitch 037E                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 227C                                    _iRBumpRight 0087  
                               LCD_DrawField@i 00D7                                      _LCD_Reset 3836  
                          __size_of_Motor_Step 0126                                      _LCD_Write 3DF8  
                                  _iRDropRight 002D                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00B5                           end_of_initialization 2786  
                            ??_get_packet_size 00B5  irobot_query_and_update@numberOfPacketRequests 00CD  
                                   delay_us@us 00B5                        Console_PrintChar@pInput 00C8  
                                 _Console_Init 2E6C                           __end_of_eusart_getch 404C  
                      _irobot_query_and_update 1552                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 33D6                           __end_of_eusart_putch 3FF0  
                           _PortProperty_Valid 2EF6                             Byte_SetQuad@pInput 00C0  
                           SPI_MinSpeed@pInput 00C4                             Byte_SetQuad@pValue 00C3  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00B9                          __size_of_Byte_GetZone 009C  
                              ___lldiv@counter 00C1                      __end_of_Console_PrintChar 13C0  
                               ??_Port_SetType 00F2                     __end_of_Port_CheckQuadType 36E4  
                                      printf@c 00D8                                        printf@f 00CA  
                               Port_Init@pPort 00F7                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00BE  
                            __end_of_rx_assign 20D8                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00C4  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 391A  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 3B3A  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 34A2  
                            ?_Port_SetQuadType 00EB                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00B9                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00EF  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BB  
                        Console_Render@lCursor 00DB                             _load_iRScriptStack 3298  
                                    _MXK_Queue 3FFE                               __CFG_CPUDIV$OSC1 000000  
                             Byte_GetZone@pMax 00B7                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C1  
                              _Set_Addr_Window 2790                                 SPI_Init@pClock 00E2  
                             ??_LCD_Word_Write 00BC                                _sort_iRBumpDrop 2D50  
                        __end_of_LCD_DrawField 2B7A                                 Port_Set@pInput 00C4  
                               SPI_Init@pInput 00E8                           ??_PortProperty_Valid 00C8  
                               Port_Set@pValue 00C6                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 2D50                                     ?_LCD_Write 00B8  
                                 _Byte_GetPair 3EEE                             HMI_SetButton@F7213 FDD8  
                          ?_load_iRScriptStack 00B5                                   _Byte_GetZone 2C1C  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 00D5  
                            LCD_DrawField@ymax 00D6                                 _Port_TogglePin 3CCE  
                             _Event_TestButton 000000                           Port_SetPinType@Props 00E0  
                                 ?_Byte_GetBit 00B5                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 3FF0                                   _Byte_SetPair 3DB4  
                                 _Byte_SetQuad 3DD6                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 257C                           Port_SetPinType@pType 00DE  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B5  
                                ?_SPI_MaxSpeed 00C4                              __size_of_LCD_Fill 0058  
                            __size_of_LCD_Init 0172                              __size_of_LED_Init 0062  
                                ?_SPI_MinSpeed 00C4                          __end_ofi2_Timer0_Stop 406E  
                           ??i2_Timer0_Restart 0001                              __size_of_HMI_Init 01FA  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00CE  
                         ??_load_iRScriptStack 00BF                                 __end_of___wmul 3C64  
                                __pidataCOMRAM 4032                                   ?_Button_Init 0100  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 4054                                 __end_of_printf 1B36  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00B5  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C1  
                             ??_Timer0_Restart 00B5                             Port_SetType@Output 00F4  
                          start_initialization 26E2                                     ?_MXK_Queue 00B5  
                     PortProperty_Valid@Errors 00CA                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 3148                             Port_SetType@pInput 00EF  
                                   HMI_Init@in 00F0                          __end_ofi2_Port_SetPin 28E4  
                       rx_assign@packetIDValue 00B6                         __end_of_Port_TogglePin 3CFE  
                                ?_Word_SetPair 00C4                              Byte_SetBit@pInput 00B5  
                               ??_MXK_SwitchTo 00BB                              Byte_SetBit@pValue 00B8  
                           ?_LCD_FillRectangle 00BE                      ??_irobot_query_and_update 00C5  
                          _Console_ResetCursor 3E3A                    PortProperty_Valid@pPinDrive 00C6  
                         MXK_BlockSwitchTo@CUR 00BB                       PortProperty_Valid@pInput 00C4  
                                i2_MXK_Release 406E                         LCD_FillRectangle@pSize 00C4  
                               SPI_Send@pInput 00B5                                   ??_Reset_High 00C9  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00C6  
                        Port_SetQuadType@pQuad 00ED                            ??_LCD_FillRectangle 00C8  
                        Port_SetQuadType@pType 00EE                                _Console_NewLine 2B7A  
                               ??_SPI_MinSpeed 00C6                                   _HMI_UpSwitch 000000  
                                    _Reset_Low 3E76                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 4062                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D2  
                                    _gCharSize 00F9                               Timer2_Init@INDEX 008B  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                      __size_of_Console_Render 0210                                   ??_Motor_Step 00C9  
                                    _iRAngleSS 0060                                      _iRCliffFL 0031  
                                    _iRCliffFR 0030                             Byte_SetZone@Offset 00BE  
                                     ??___wmul 00B9                           ?_Console_ResetCursor 0001  
                                    _Port_Init 13C0                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03D5                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00B8                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00B5                             Byte_SetZone@pValue 00BA  
                                Mode_Set@pMode 00B5                                       ??_printf 00D2  
                      __end_of_Set_Addr_Window 283A                       Port_CheckQuadType@Output 00EA  
                      __end_of_sort_iRBumpDrop 2DDE                                      _gLineSize 03D9  
                     Port_CheckQuadType@pDrive 00E7                                 ??_Word_GetPair 00C4  
                     Port_CheckQuadType@pInput 00E4                      __end_of_LCD_FillRectangle 31BC  
                                  __pbssBIGRAM 04AA                                       ?_LED_Set 00C9  
                                  __pbssCOMRAM 0029                             __end_of_Reset_High 3EB2  
                                __pcstackBANK0 00B5                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03DD  
                      ??_update_bump_and_cliff 00D2                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 00C8                       __size_of_update_distance 0012  
                           __end_of_Timer0_ISR 3D8C                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00CE                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 0C58                                       ?_SPI_DCS 00B5  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00C9  
                                ??_eusart_init 00B5                                    ??_LCD_Write 00B9  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Step 1EE8  
                        Timer2_Init@pFrequency 00C2                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E1              twos_complement_of@complementValue 00B5  
                     Port_CheckPairType@pDrive 00DE                       Port_CheckPairType@pInput 00DB  
                           _MXK_InitTestButton 3ED0                                     ?_Reset_Low 0001  
                                 ?_Timer2_Init 00C2                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00B5                                  ??_irobot_leds 00C8  
                                ??_irobot_init 00B6                                ??_irobot_rotate 00D2  
                                ??_irobot_move 00C9                                  _lStepFunction 0072  
                            Byte_SetPair@pPair 00C2                                      __pintcode 1408  
                                __pmediumconst FCF2                          ??_Console_ResetCursor 00B5  
                                     ?___awdiv 00B5                                      __ptext100 3FB4  
                                    __ptext101 21AC                                      __ptext110 3D2E  
                                    __ptext102 3C9A                                      __ptext111 3F62  
                                    __ptext103 2E6C                                      __ptext112 2FEA  
                                    __ptext113 3886                                      __ptext105 3D5E  
                                    __ptext114 3C64                                      __ptext106 1EE8  
                                    __ptext115 3AFA                                      __ptext107 4068  
                                    __ptext116 406E                                      __ptext108 4026  
                                    __ptext117 400C                                      __ptext109 283A  
                                    __ptext118 0000                __end_of_irobot_query_and_update 16D8  
                                    _pShiftVal 0079                                       ?___lldiv 00B5  
                                   ?_Port_Init 00F5                                       ?___lwdiv 00B5  
                                     ?___lwmod 00BC                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 298A  
                                 _eusart_getch 4044                    __end_ofTimer0_Init@PRESCALE FDB5  
                              _get_packet_size 33D6                                   _eusart_putch 3FE2  
                           ??_Console_FormFeed 00B5                             ?_GetPortProperties 00B5  
                        __size_of_Set_Rotation 0098                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00B8                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00B5                           __size_of_Console_Tab 00C2  
                         irobot_move@moveSpeed 00C5                                   ?_Port_SetPin 00C4  
                            main@distanceTotal 03DD                               ___lwdiv@quotient 00BA  
                              _HMI_RightSwitch 000000                            ??_GetPortProperties 00B7  
                      __end_of_Console_NewLine 2C1C                           ??_MXK_InitTestButton 00E2  
                           Byte_GetPair@pInput 00BE                                 __size_of_putch 000E  
                      __end_of_HMI_InitButtons 4068                              i2Port_SetPin@Type 0014  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 3F62  
                                     _LCD_Fill 373C                                       _LCD_Init 1858  
                               ___wmul@product 00B9                                       _HMIBoard 032E  
                               i2_Byte_GetZone 2FEA                                       _LED_Init 35CC  
                                    delay_ms@u 00B7                                      delay_us@u 00B7  
                                     _HMI_Init 0E68                             MXK_Queue@pCallback 00B5  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 3E76  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 3AFA  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C2                                       i2u400_40 3B28  
                                     i2u343_40 300C                                       i2u343_47 3002  
                                     i2u345_40 3054                                       _PIR1bits 000F9E  
                                     i2u345_45 3050                                       _PIR3bits 000FA4  
                                     i2u490_40 1F78                                       i2u396_44 389A  
                                     i2u396_45 3896                                       i2u397_44 38C0  
                                     i2u397_45 38BC                                       i2u488_40 1F2C  
                                     i2u489_40 1F40                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                     i2u897_48 3D76                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00B6                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00DF                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 2A30                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 2CB8                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 3ABA                             _Port_CheckPairType 336C  
                                     _MXK_Init 16D8                                MXK_SwitchTo@CUR 00BB  
                          __end_of_irobot_leds 373C                                       _SPI_Init 0000  
                          __end_of_irobot_init 3FE2                                       _SPI_Send 322C  
                          __end_of_irobot_move 26E2                                      _rx_assign 1FE8  
                                   _ADCON0bits 000FC2                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BA                              ___wmul@multiplier 00B5  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00B9  
                                   printf@flag 00D2                           Timer2_Init@pCPUClock 00CB  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 30D4                                     printf@prec 00D5  
                            Byte_GetBit@pInput 00B5                            Port_SetPinType@pPin 00DD  
                           _Port_CheckQuadType 368A                                  _MXK_DIPSwitch 000000  
                          ?_Port_CheckPairType 00DB                           __end_of_SPI_MinSpeed 3148  
                                ??_MXK_Dequeue 00CB                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 38D2  
                         __end_of_update_angle 3FB4                        PortProperty_Valid@F6830 FDB5  
                         __end_ofi2_Motor_Step 1FE8                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 26F6  
                                    copy_data1 2716                                      copy_data2 2736  
                                ??_MXK_Release 00B5                         __end_ofi2_Byte_GetPair 3F7C  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E4                         __end_ofi2_Byte_GetZone 3060  
                          __end_ofi2_MXK_Queue 401A                            ?_Port_CheckPortType 00EB  
                                     _InitList FCF3                     __end_of_irobot_init_song_0 3E3A  
                         _Motor_Step$intlevel0 1DC8                                       _Mode_Set 3FB4  
                            ??_update_distance 00D2                                   _ISR_Function 1408  
                                 _Timer2_Clear 404C                           __end_of_Word_GetPair 3BF4  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00DF  
                                  ??_Reset_Low 00C9                                       __Hrparam 0000  
                               _Console_Render 0C58                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00C7                                       _iRCliffL 0032  
                                     _iRCliffR 002F                                 LCD_Write@value 00B9  
                                     _Port_Set 041E                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 3A34  
                      __end_of_get_packet_size 343C                                    ??_Port_Init 0100  
                         ??_Port_CheckQuadType 00E8                               _irobot_song_play 3F7C  
                             __size_of___awdiv 00BE                               __size_of___lldiv 00BC  
                            _MXK_BlockSwitchTo 3B78                               __size_of___lwdiv 0078  
                         ??_Port_CheckPortType 00EE                               __size_of___lwmod 0062  
                                     _lBufferX 008D                                       _lBufferY 008C  
                          Timer2_Init@PRESCALE FDDC                                     ?_rx_assign 00B6  
                              LCD_Fill@pColour 00BE                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 007F  
                       Byte_GetZone@pChunkSize 00B9                         Byte_SetZone@pChunkSize 00B9  
                        __size_of_Port_SetType 022A                          i2MXK_SwitchTo@pModule 0008  
                          irobot_move@isScript 00CD                                       _delay_ms 3302  
                                     _delay_us 3794                                       _clearall 008E  
                              ___lwdiv@divisor 00B7                                ___lwdiv@counter 00B9  
                              Port_GetPin@pPin 00B7                                       __ptext10 3FC6  
                                     __ptext11 1222                                       __ptext20 356A  
                                     __ptext12 2340                                       __ptext21 2F72  
                                     __ptext13 2402                                       __ptext30 3E1A  
                                     __ptext22 3962                                       __ptext14 343C  
                                     __ptext31 3FD4                                       __ptext23 3F7C  
                                     __ptext15 2B7A                                       __ptext40 28E4  
                                     __ptext32 3FE2                                       __ptext24 34A2  
                                     __ptext16 2DDE                                       __ptext41 298A  
                                     __ptext33 3E58                                       __ptext25 2632  
                                     __ptext17 3E3A                                       __ptext50 3F46  
                                     __ptext42 2A30                                       __ptext34 16D8  
                                     __ptext26 3A34                                       __ptext18 362E  
                                     __ptext51 3FFE                                       __ptext43 35CC  
                                     __ptext35 13C0                                       __ptext27 3F2A  
                                     __ptext19 3ABA                                       __ptext60 3302  
                                     __ptext52 3B78                                       __ptext44 37E6  
                                     __ptext36 0A2E                                       __ptext28 36E4  
                                     __ptext61 3E76                                       __ptext53 3794  
                                     __ptext45 3B3A                                       __ptext37 38D2  
                                     __ptext29 3298                                       __ptext70 1B36  
                                     __ptext62 3E94                                       __ptext54 1858  
                                     __ptext46 1DC2                                       __ptext38 041E  
                                     __ptext71 24C0                                       __ptext63 391A  
                                     __ptext55 2CB8                                       __ptext47 405C  
                                     __ptext39 3FF0                            ??_MXK_BlockSwitchTo 00BB  
                                     __ptext80 3506                                       __ptext72 404C  
                                     __ptext64 3CCE                                       __ptext56 373C  
                                     __ptext48 401A                                       __ptext81 07D8  
                                     __ptext73 3D8C                                       __ptext65 227C  
                                     __ptext57 31BC                                       __ptext49 3A78  
                                     __ptext90 3DD6                                       __ptext82 39EE  
                                     __ptext74 3CFE                                       __ptext66 39A8  
                                     __ptext58 3060                                       __ptext91 257C  
                                     __ptext83 3DB4                                       __ptext75 20D8  
                                     __ptext67 0E68                                       __ptext59 3836  
                                     __ptext92 0C58                                       __ptext84 368A  
                                     __ptext76 3EB2                                       __ptext68 30D4  
                                     __ptext93 3148                                       __ptext85 336C  
                                     __ptext77 4062                                       __ptext69 0000  
                                     __ptext94 2AD6                                       __ptext86 2EF6  
                                     __ptext78 3ED0                                       __ptext95 3C2E  
                                     __ptext87 3BB6                                       __ptext79 1062  
                                     __ptext96 2790                                       __ptext88 3EEE  
                                     __ptext97 3F0C                                       __ptext89 2C1C  
                                     __ptext98 3DF8                                       __ptext99 322C  
                                 _SSP1CON1bits 000FC6                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 3E58                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                          __end_of_MXK_Dequeue 3B78                          Button_Init@pThreshold 0102  
                                __size_of_main 012C                              Byte_GetPair@pPair 00C0  
                       __end_of_Console_Render 0E68                            i2Port_SetPin@pInput 0010  
                          i2Port_SetPin@pValue 0013                            __end_of_MXK_Release 3F62  
                               _MXK_TestButton 000000                                  i2_Byte_SetBit 3886  
                                 _iRDistanceSS 0064                                    _irobot_leds 36E4  
                                  _irobot_init 3FD4                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 2632                      __end_of_MXK_BlockSwitchTo 3BB6  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 0A2E                                   Port_Set@Type 00DB  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 0085                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EA                                      printf@val 00D3  
                                 _SSP1STATbits 000FC7                                 Timer0_Init@DIV 0068  
                               Timer0_Init@PRE 0039                                   _SSP2STATbits 000F6D  
                                   _LED_Toggle 391A                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DA                               ??_Port_TogglePin 00CC  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00C7                               Byte_SetZone@MASK 00BF  
                                  i2_MXK_Queue 400C                                 Timer2_Init@DIV 031E  
                               Timer2_Init@PRE 008A                               Byte_SetZone@pMax 00B7  
                       __size_ofi2_Timer0_Stop 0006                           __size_of_Port_GetPin 0046  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                __end_of_update_bump_and_cliff 3C2E                             LCD_FillRectangle@i 00CA  
                           LCD_FillRectangle@j 00CB                           __size_of_Port_SetPin 00C4  
                                     intlevel2 0000                               ___lwmod@dividend 00BC  
                             ___lldiv@dividend 00B5                                ?_Console_Render 0001  
                                _iRScriptIndex 0035                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D1  
                     irobot_query_and_update@j 00CF                                 _SPI_DisableISR 3D8C  
                   __end_of_twos_complement_of 3A78                       irobot_rotate@rotateAngle 00CE  
                              Port_Init@pInput 00F5                                       printf@ap 00D6  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D0                        Console_MakeField@Column 00C1  
                        __size_of_SPI_MaxSpeed 0074                                  SPI_DCS@pInput 00B5  
                        __size_of_SPI_MinSpeed 0074                                    ??_rx_assign 00B8  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                      Console_MakeField@pInput 00C0                               ___lldiv@quotient 00BD  
                                ??_GetPortPORT 00B7                                ___lwmod@divisor 00BE  
                                ??_GetPortTRIS 00B7                             Word_SetPair@pInput 00C4  
                              ___lwmod@counter 00C0                             Word_SetPair@pValue 00C7  
                     ?_irobot_query_and_update 00BB                                    _MXK_Dequeue 3B3A  
                               LED_Toggle@pLED 00CD                                  _LCD_DrawField 2AD6  
                             _Port_SetQuadType 07D8                                    _MXK_Release 3F46  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 3A78  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D0  
                           Byte_GetZone@Offset 00BC                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00C6                                _Port_SetPinType 1062  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00BD  
                           Byte_GetZone@pChunk 00B8                    __end_of_Console_ResetCursor 3E58  
                           Byte_GetZone@pInput 00B5                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 34A2                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 3DB4                                   _SPI_MaxSpeed 3060  
            irobot_query_and_update@streamSize 00CC                                   _SPI_MinSpeed 30D4  
                           Port_Set@TypeActual 00D9  
