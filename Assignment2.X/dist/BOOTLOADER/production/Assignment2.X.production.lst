

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sun Sep 10 16:18:05 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1,inline
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1,group=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1,group=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1,group=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1,group=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1,group=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1,group=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1,inline
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1,inline
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1,inline
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1,group=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1,inline
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1,inline
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1
   177                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	text158,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1,inline
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   192                           	psect	text168,global,reloc=2,class=CODE,delta=1
   193                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   194                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   195  0000                     
   196                           ; Version 1.43
   197                           ; Generated 25/07/2017 GMT
   198                           ; 
   199                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   200                           ; All rights reserved.
   201                           ; 
   202                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   203                           ; 
   204                           ; Redistribution and use in source and binary forms, with or without modification, are
   205                           ; permitted provided that the following conditions are met:
   206                           ; 
   207                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   208                           ;        conditions and the following disclaimer.
   209                           ; 
   210                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   211                           ;        of conditions and the following disclaimer in the documentation and/or other
   212                           ;        materials provided with the distribution.
   213                           ; 
   214                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   215                           ;        software without specific prior written permission.
   216                           ; 
   217                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   218                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   219                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   220                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   221                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   222                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   223                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   224                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   225                           ; 
   226                           ; 
   227                           ; Code-generator required, PIC18F67J50 Definitions
   228                           ; 
   229                           ; SFR Addresses
   230  0000                     
   231                           	psect	idataCOMRAM
   232  016142                     __pidataCOMRAM:
   233                           	opt stack 0
   234                           
   235                           ;initializer for _gCursor
   236  016142  0006               	dw	6
   237  016144  0006               	dw	6
   238                           
   239                           ;initializer for _Bus_State
   240  016146  01                 	db	1
   241                           
   242                           ;initializer for _A
   243  016147  41                 	db	65
   244                           
   245                           ;initializer for _a
   246  016148  61                 	db	97
   247                           
   248                           ;initializer for _zero
   249  016149  30                 	db	48
   250                           
   251                           ;initializer for _l
   252  01614A  80                 	db	128
   253                           
   254                           ;initializer for _w
   255  01614B  80                 	db	128
   256                           
   257                           	psect	idataBANK0
   258  016178                     __pidataBANK0:
   259                           	opt stack 0
   260                           
   261                           ;initializer for _TimerX
   262  016178  0008               	dw	8
   263                           
   264                           ;initializer for _MinDist
   265  01617A  03E8               	dw	1000
   266                           
   267                           ;initializer for _gForecolour
   268  01617C  FFFF               	dw	65535
   269                           
   270                           ;initializer for _change
   271  01617E  01                 	db	1
   272                           
   273                           	psect	idataBANK3
   274  016112                     __pidataBANK3:
   275                           	opt stack 0
   276                           
   277                           ;initializer for Console_Render@F6956
   278  016112  0006               	dw	6
   279  016114  0006               	dw	6
   280                           
   281                           ;initializer for _gLineSize
   282  016116  0080               	dw	128
   283  016118  0007               	dw	7
   284                           
   285                           ;initializer for _gCharSize
   286  01611A  0005               	dw	5
   287  01611C  0007               	dw	7
   288                           
   289                           	psect	mediumconst
   290  00FCE4                     __pmediumconst:
   291                           	opt stack 0
   292  00FCE4  00                 	db	0
   293  00FCE5                     _InitList:
   294                           	opt stack 0
   295  00FCE5  1100               	dw	4352
   296  00FCE7  0080               	dw	128
   297  00FCE9  012C               	dw	300
   298  00FCEB  B100               	dw	45312
   299  00FCED  0002               	dw	2
   300  00FCEF  0035               	dw	53
   301  00FCF1  0036               	dw	54
   302  00FCF3  B200               	dw	45568
   303  00FCF5  0002               	dw	2
   304  00FCF7  0035               	dw	53
   305  00FCF9  0036               	dw	54
   306  00FCFB  B300               	dw	45824
   307  00FCFD  0002               	dw	2
   308  00FCFF  0035               	dw	53
   309  00FD01  0036               	dw	54
   310  00FD03  0002               	dw	2
   311  00FD05  0035               	dw	53
   312  00FD07  0036               	dw	54
   313  00FD09  B400               	dw	46080
   314  00FD0B  0000               	dw	0
   315  00FD0D  C000               	dw	49152
   316  00FD0F  00A2               	dw	162
   317  00FD11  0002               	dw	2
   318  00FD13  0084               	dw	132
   319  00FD15  C100               	dw	49408
   320  00FD17  00C5               	dw	197
   321  00FD19  C200               	dw	49664
   322  00FD1B  000D               	dw	13
   323  00FD1D  0000               	dw	0
   324  00FD1F  C300               	dw	49920
   325  00FD21  008D               	dw	141
   326  00FD23  002A               	dw	42
   327  00FD25  C400               	dw	50176
   328  00FD27  008D               	dw	141
   329  00FD29  00EE               	dw	238
   330  00FD2B  C500               	dw	50432
   331  00FD2D  000A               	dw	10
   332  00FD2F  3600               	dw	13824
   333  00FD31  00C8               	dw	200
   334  00FD33  E000               	dw	57344
   335  00FD35  0012               	dw	18
   336  00FD37  001C               	dw	28
   337  00FD39  0010               	dw	16
   338  00FD3B  0018               	dw	24
   339  00FD3D  0033               	dw	51
   340  00FD3F  002C               	dw	44
   341  00FD41  0025               	dw	37
   342  00FD43  0028               	dw	40
   343  00FD45  0028               	dw	40
   344  00FD47  0027               	dw	39
   345  00FD49  002F               	dw	47
   346  00FD4B  003C               	dw	60
   347  00FD4D  0000               	dw	0
   348  00FD4F  0003               	dw	3
   349  00FD51  0003               	dw	3
   350  00FD53  0010               	dw	16
   351  00FD55  0080               	dw	128
   352  00FD57  0078               	dw	120
   353  00FD59  E100               	dw	57600
   354  00FD5B  0012               	dw	18
   355  00FD5D  001C               	dw	28
   356  00FD5F  0010               	dw	16
   357  00FD61  0018               	dw	24
   358  00FD63  002D               	dw	45
   359  00FD65  0028               	dw	40
   360  00FD67  0023               	dw	35
   361  00FD69  0028               	dw	40
   362  00FD6B  0028               	dw	40
   363  00FD6D  0026               	dw	38
   364  00FD6F  002F               	dw	47
   365  00FD71  003B               	dw	59
   366  00FD73  0000               	dw	0
   367  00FD75  0003               	dw	3
   368  00FD77  0003               	dw	3
   369  00FD79  0010               	dw	16
   370  00FD7B  3A00               	dw	14848
   371  00FD7D  0005               	dw	5
   372  00FD7F  2A00               	dw	10752
   373  00FD81  0000               	dw	0
   374  00FD83  0002               	dw	2
   375  00FD85  0000               	dw	0
   376  00FD87  0081               	dw	129
   377  00FD89  2B00               	dw	11008
   378  00FD8B  0000               	dw	0
   379  00FD8D  0003               	dw	3
   380  00FD8F  0000               	dw	0
   381  00FD91  00A2               	dw	162
   382  00FD93  2900               	dw	10496
   383  00FD95  2C00               	dw	11264
   384  00FD97                     __end_of_InitList:
   385                           	opt stack 0
   386  00FD97                     Timer0_Init@PRESCALE:
   387                           	opt stack 0
   388  00FD97  0002               	dw	2
   389  00FD99  0004               	dw	4
   390  00FD9B  0008               	dw	8
   391  00FD9D  0010               	dw	16
   392  00FD9F  0020               	dw	32
   393  00FDA1  0040               	dw	64
   394  00FDA3  0080               	dw	128
   395  00FDA5  0100               	dw	256
   396  00FDA7                     __end_ofTimer0_Init@PRESCALE:
   397                           	opt stack 0
   398  00FDA7                     PortProperty_Valid@F6830:
   399                           	opt stack 0
   400  00FDA7  00                 	db	0
   401  00FDA8  01                 	db	1
   402  00FDA9  02                 	db	2
   403  00FDAA  00                 	db	0
   404  00FDAB  01                 	db	1
   405  00FDAC  00                 	db	0
   406  00FDAD  01                 	db	1
   407  00FDAE  00                 	db	0
   408  00FDAF  02                 	db	2
   409  00FDB0  02                 	db	2
   410  00FDB1  00                 	db	0
   411  00FDB2  00                 	db	0
   412  00FDB3  03                 	db	3
   413  00FDB4  03                 	db	3
   414  00FDB5  03                 	db	3
   415  00FDB6  00                 	db	0
   416  00FDB7                     __end_ofPortProperty_Valid@F6830:
   417                           	opt stack 0
   418  00FDB7                     _dpowers:
   419                           	opt stack 0
   420  00FDB7  0001               	dw	1
   421  00FDB9  000A               	dw	10
   422  00FDBB  0064               	dw	100
   423  00FDBD  03E8               	dw	1000
   424  00FDBF  2710               	dw	10000
   425  00FDC1                     __end_of_dpowers:
   426                           	opt stack 0
   427  00FDC1                     _MASKS:
   428                           	opt stack 0
   429  00FDC1  00                 	db	0
   430  00FDC2  01                 	db	1
   431  00FDC3  03                 	db	3
   432  00FDC4  07                 	db	7
   433  00FDC5  0F                 	db	15
   434  00FDC6  1F                 	db	31
   435  00FDC7  3F                 	db	63
   436  00FDC8  7F                 	db	127
   437  00FDC9  FF                 	db	255
   438  00FDCA                     __end_of_MASKS:
   439                           	opt stack 0
   440  00FDCA                     HMI_SetButton@F7213:
   441                           	opt stack 0
   442  00FDCA  00                 	db	0
   443  00FDCB  02                 	db	2
   444  00FDCC  01                 	db	1
   445  00FDCD  03                 	db	3
   446  00FDCE                     __end_ofHMI_SetButton@F7213:
   447                           	opt stack 0
   448  00FDCE                     Timer2_Init@PRESCALE:
   449                           	opt stack 0
   450  00FDCE  01                 	db	1
   451  00FDCF  04                 	db	4
   452  00FDD0  10                 	db	16
   453  00FDD1                     __end_ofTimer2_Init@PRESCALE:
   454                           	opt stack 0
   455  00FDD1                     _Font5x7:
   456                           	opt stack 0
   457  00FDD1  00                 	db	0
   458  00FDD2  00                 	db	0
   459  00FDD3  00                 	db	0
   460  00FDD4  00                 	db	0
   461  00FDD5  00                 	db	0
   462  00FDD6  00                 	db	0
   463  00FDD7  00                 	db	0
   464  00FDD8  5F                 	db	95
   465  00FDD9  00                 	db	0
   466  00FDDA  00                 	db	0
   467  00FDDB  00                 	db	0
   468  00FDDC  07                 	db	7
   469  00FDDD  00                 	db	0
   470  00FDDE  07                 	db	7
   471  00FDDF  00                 	db	0
   472  00FDE0  14                 	db	20
   473  00FDE1  7F                 	db	127
   474  00FDE2  14                 	db	20
   475  00FDE3  7F                 	db	127
   476  00FDE4  14                 	db	20
   477  00FDE5  24                 	db	36
   478  00FDE6  2A                 	db	42
   479  00FDE7  7F                 	db	127
   480  00FDE8  2A                 	db	42
   481  00FDE9  12                 	db	18
   482  00FDEA  23                 	db	35
   483  00FDEB  13                 	db	19
   484  00FDEC  08                 	db	8
   485  00FDED  64                 	db	100
   486  00FDEE  62                 	db	98
   487  00FDEF  36                 	db	54
   488  00FDF0  49                 	db	73
   489  00FDF1  55                 	db	85
   490  00FDF2  22                 	db	34
   491  00FDF3  50                 	db	80
   492  00FDF4  00                 	db	0
   493  00FDF5  05                 	db	5
   494  00FDF6  03                 	db	3
   495  00FDF7  00                 	db	0
   496  00FDF8  00                 	db	0
   497  00FDF9  00                 	db	0
   498  00FDFA  1C                 	db	28
   499  00FDFB  22                 	db	34
   500  00FDFC  41                 	db	65
   501  00FDFD  00                 	db	0
   502  00FDFE  00                 	db	0
   503  00FDFF  41                 	db	65
   504  00FE00  22                 	db	34
   505  00FE01  1C                 	db	28
   506  00FE02  00                 	db	0
   507  00FE03  08                 	db	8
   508  00FE04  2A                 	db	42
   509  00FE05  1C                 	db	28
   510  00FE06  2A                 	db	42
   511  00FE07  08                 	db	8
   512  00FE08  08                 	db	8
   513  00FE09  08                 	db	8
   514  00FE0A  3E                 	db	62
   515  00FE0B  08                 	db	8
   516  00FE0C  08                 	db	8
   517  00FE0D  00                 	db	0
   518  00FE0E  50                 	db	80
   519  00FE0F  30                 	db	48
   520  00FE10  00                 	db	0
   521  00FE11  00                 	db	0
   522  00FE12  08                 	db	8
   523  00FE13  08                 	db	8
   524  00FE14  08                 	db	8
   525  00FE15  08                 	db	8
   526  00FE16  08                 	db	8
   527  00FE17  00                 	db	0
   528  00FE18  60                 	db	96
   529  00FE19  60                 	db	96
   530  00FE1A  00                 	db	0
   531  00FE1B  00                 	db	0
   532  00FE1C  20                 	db	32
   533  00FE1D  10                 	db	16
   534  00FE1E  08                 	db	8
   535  00FE1F  04                 	db	4
   536  00FE20  02                 	db	2
   537  00FE21  3E                 	db	62
   538  00FE22  51                 	db	81
   539  00FE23  49                 	db	73
   540  00FE24  45                 	db	69
   541  00FE25  3E                 	db	62
   542  00FE26  00                 	db	0
   543  00FE27  42                 	db	66
   544  00FE28  7F                 	db	127
   545  00FE29  40                 	db	64
   546  00FE2A  00                 	db	0
   547  00FE2B  42                 	db	66
   548  00FE2C  61                 	db	97
   549  00FE2D  51                 	db	81
   550  00FE2E  49                 	db	73
   551  00FE2F  46                 	db	70
   552  00FE30  21                 	db	33
   553  00FE31  41                 	db	65
   554  00FE32  45                 	db	69
   555  00FE33  4B                 	db	75
   556  00FE34  31                 	db	49
   557  00FE35  18                 	db	24
   558  00FE36  14                 	db	20
   559  00FE37  12                 	db	18
   560  00FE38  7F                 	db	127
   561  00FE39  10                 	db	16
   562  00FE3A  27                 	db	39
   563  00FE3B  45                 	db	69
   564  00FE3C  45                 	db	69
   565  00FE3D  45                 	db	69
   566  00FE3E  39                 	db	57
   567  00FE3F  3C                 	db	60
   568  00FE40  4A                 	db	74
   569  00FE41  49                 	db	73
   570  00FE42  49                 	db	73
   571  00FE43  30                 	db	48
   572  00FE44  01                 	db	1
   573  00FE45  71                 	db	113
   574  00FE46  09                 	db	9
   575  00FE47  05                 	db	5
   576  00FE48  03                 	db	3
   577  00FE49  36                 	db	54
   578  00FE4A  49                 	db	73
   579  00FE4B  49                 	db	73
   580  00FE4C  49                 	db	73
   581  00FE4D  36                 	db	54
   582  00FE4E  06                 	db	6
   583  00FE4F  49                 	db	73
   584  00FE50  49                 	db	73
   585  00FE51  29                 	db	41
   586  00FE52  1E                 	db	30
   587  00FE53  00                 	db	0
   588  00FE54  36                 	db	54
   589  00FE55  36                 	db	54
   590  00FE56  00                 	db	0
   591  00FE57  00                 	db	0
   592  00FE58  00                 	db	0
   593  00FE59  56                 	db	86
   594  00FE5A  36                 	db	54
   595  00FE5B  00                 	db	0
   596  00FE5C  00                 	db	0
   597  00FE5D  00                 	db	0
   598  00FE5E  08                 	db	8
   599  00FE5F  14                 	db	20
   600  00FE60  22                 	db	34
   601  00FE61  41                 	db	65
   602  00FE62  14                 	db	20
   603  00FE63  14                 	db	20
   604  00FE64  14                 	db	20
   605  00FE65  14                 	db	20
   606  00FE66  14                 	db	20
   607  00FE67  41                 	db	65
   608  00FE68  22                 	db	34
   609  00FE69  14                 	db	20
   610  00FE6A  08                 	db	8
   611  00FE6B  00                 	db	0
   612  00FE6C  02                 	db	2
   613  00FE6D  01                 	db	1
   614  00FE6E  51                 	db	81
   615  00FE6F  09                 	db	9
   616  00FE70  06                 	db	6
   617  00FE71  32                 	db	50
   618  00FE72  49                 	db	73
   619  00FE73  79                 	db	121
   620  00FE74  41                 	db	65
   621  00FE75  3E                 	db	62
   622  00FE76  7E                 	db	126
   623  00FE77  11                 	db	17
   624  00FE78  11                 	db	17
   625  00FE79  11                 	db	17
   626  00FE7A  7E                 	db	126
   627  00FE7B  7F                 	db	127
   628  00FE7C  49                 	db	73
   629  00FE7D  49                 	db	73
   630  00FE7E  49                 	db	73
   631  00FE7F  36                 	db	54
   632  00FE80  3E                 	db	62
   633  00FE81  41                 	db	65
   634  00FE82  41                 	db	65
   635  00FE83  41                 	db	65
   636  00FE84  22                 	db	34
   637  00FE85  7F                 	db	127
   638  00FE86  41                 	db	65
   639  00FE87  41                 	db	65
   640  00FE88  22                 	db	34
   641  00FE89  1C                 	db	28
   642  00FE8A  7F                 	db	127
   643  00FE8B  49                 	db	73
   644  00FE8C  49                 	db	73
   645  00FE8D  49                 	db	73
   646  00FE8E  41                 	db	65
   647  00FE8F  7F                 	db	127
   648  00FE90  09                 	db	9
   649  00FE91  09                 	db	9
   650  00FE92  01                 	db	1
   651  00FE93  01                 	db	1
   652  00FE94  3E                 	db	62
   653  00FE95  41                 	db	65
   654  00FE96  41                 	db	65
   655  00FE97  51                 	db	81
   656  00FE98  32                 	db	50
   657  00FE99  7F                 	db	127
   658  00FE9A  08                 	db	8
   659  00FE9B  08                 	db	8
   660  00FE9C  08                 	db	8
   661  00FE9D  7F                 	db	127
   662  00FE9E  00                 	db	0
   663  00FE9F  41                 	db	65
   664  00FEA0  7F                 	db	127
   665  00FEA1  41                 	db	65
   666  00FEA2  00                 	db	0
   667  00FEA3  20                 	db	32
   668  00FEA4  40                 	db	64
   669  00FEA5  41                 	db	65
   670  00FEA6  3F                 	db	63
   671  00FEA7  01                 	db	1
   672  00FEA8  7F                 	db	127
   673  00FEA9  08                 	db	8
   674  00FEAA  14                 	db	20
   675  00FEAB  22                 	db	34
   676  00FEAC  41                 	db	65
   677  00FEAD  7F                 	db	127
   678  00FEAE  40                 	db	64
   679  00FEAF  40                 	db	64
   680  00FEB0  40                 	db	64
   681  00FEB1  40                 	db	64
   682  00FEB2  7F                 	db	127
   683  00FEB3  02                 	db	2
   684  00FEB4  04                 	db	4
   685  00FEB5  02                 	db	2
   686  00FEB6  7F                 	db	127
   687  00FEB7  7F                 	db	127
   688  00FEB8  04                 	db	4
   689  00FEB9  08                 	db	8
   690  00FEBA  10                 	db	16
   691  00FEBB  7F                 	db	127
   692  00FEBC  3E                 	db	62
   693  00FEBD  41                 	db	65
   694  00FEBE  41                 	db	65
   695  00FEBF  41                 	db	65
   696  00FEC0  3E                 	db	62
   697  00FEC1  7F                 	db	127
   698  00FEC2  09                 	db	9
   699  00FEC3  09                 	db	9
   700  00FEC4  09                 	db	9
   701  00FEC5  06                 	db	6
   702  00FEC6  3E                 	db	62
   703  00FEC7  41                 	db	65
   704  00FEC8  51                 	db	81
   705  00FEC9  21                 	db	33
   706  00FECA  5E                 	db	94
   707  00FECB  7F                 	db	127
   708  00FECC  09                 	db	9
   709  00FECD  19                 	db	25
   710  00FECE  29                 	db	41
   711  00FECF  46                 	db	70
   712  00FED0  46                 	db	70
   713  00FED1  49                 	db	73
   714  00FED2  49                 	db	73
   715  00FED3  49                 	db	73
   716  00FED4  31                 	db	49
   717  00FED5  01                 	db	1
   718  00FED6  01                 	db	1
   719  00FED7  7F                 	db	127
   720  00FED8  01                 	db	1
   721  00FED9  01                 	db	1
   722  00FEDA  3F                 	db	63
   723  00FEDB  40                 	db	64
   724  00FEDC  40                 	db	64
   725  00FEDD  40                 	db	64
   726  00FEDE  3F                 	db	63
   727  00FEDF  1F                 	db	31
   728  00FEE0  20                 	db	32
   729  00FEE1  40                 	db	64
   730  00FEE2  20                 	db	32
   731  00FEE3  1F                 	db	31
   732  00FEE4  7F                 	db	127
   733  00FEE5  20                 	db	32
   734  00FEE6  18                 	db	24
   735  00FEE7  20                 	db	32
   736  00FEE8  7F                 	db	127
   737  00FEE9  63                 	db	99
   738  00FEEA  14                 	db	20
   739  00FEEB  08                 	db	8
   740  00FEEC  14                 	db	20
   741  00FEED  63                 	db	99
   742  00FEEE  03                 	db	3
   743  00FEEF  04                 	db	4
   744  00FEF0  78                 	db	120
   745  00FEF1  04                 	db	4
   746  00FEF2  03                 	db	3
   747  00FEF3  61                 	db	97
   748  00FEF4  51                 	db	81
   749  00FEF5  49                 	db	73
   750  00FEF6  45                 	db	69
   751  00FEF7  43                 	db	67
   752  00FEF8  00                 	db	0
   753  00FEF9  00                 	db	0
   754  00FEFA  7F                 	db	127
   755  00FEFB  41                 	db	65
   756  00FEFC  41                 	db	65
   757  00FEFD  02                 	db	2
   758  00FEFE  04                 	db	4
   759  00FEFF  08                 	db	8
   760  00FF00  10                 	db	16
   761  00FF01  20                 	db	32
   762  00FF02  41                 	db	65
   763  00FF03  41                 	db	65
   764  00FF04  7F                 	db	127
   765  00FF05  00                 	db	0
   766  00FF06  00                 	db	0
   767  00FF07  04                 	db	4
   768  00FF08  02                 	db	2
   769  00FF09  01                 	db	1
   770  00FF0A  02                 	db	2
   771  00FF0B  04                 	db	4
   772  00FF0C  40                 	db	64
   773  00FF0D  40                 	db	64
   774  00FF0E  40                 	db	64
   775  00FF0F  40                 	db	64
   776  00FF10  40                 	db	64
   777  00FF11  00                 	db	0
   778  00FF12  01                 	db	1
   779  00FF13  02                 	db	2
   780  00FF14  04                 	db	4
   781  00FF15  00                 	db	0
   782  00FF16  20                 	db	32
   783  00FF17  54                 	db	84
   784  00FF18  54                 	db	84
   785  00FF19  54                 	db	84
   786  00FF1A  78                 	db	120
   787  00FF1B  7F                 	db	127
   788  00FF1C  48                 	db	72
   789  00FF1D  44                 	db	68
   790  00FF1E  44                 	db	68
   791  00FF1F  38                 	db	56
   792  00FF20  38                 	db	56
   793  00FF21  44                 	db	68
   794  00FF22  44                 	db	68
   795  00FF23  44                 	db	68
   796  00FF24  20                 	db	32
   797  00FF25  38                 	db	56
   798  00FF26  44                 	db	68
   799  00FF27  44                 	db	68
   800  00FF28  48                 	db	72
   801  00FF29  7F                 	db	127
   802  00FF2A  38                 	db	56
   803  00FF2B  54                 	db	84
   804  00FF2C  54                 	db	84
   805  00FF2D  54                 	db	84
   806  00FF2E  18                 	db	24
   807  00FF2F  08                 	db	8
   808  00FF30  7E                 	db	126
   809  00FF31  09                 	db	9
   810  00FF32  01                 	db	1
   811  00FF33  02                 	db	2
   812  00FF34  08                 	db	8
   813  00FF35  14                 	db	20
   814  00FF36  54                 	db	84
   815  00FF37  54                 	db	84
   816  00FF38  3C                 	db	60
   817  00FF39  7F                 	db	127
   818  00FF3A  08                 	db	8
   819  00FF3B  04                 	db	4
   820  00FF3C  04                 	db	4
   821  00FF3D  78                 	db	120
   822  00FF3E  00                 	db	0
   823  00FF3F  44                 	db	68
   824  00FF40  7D                 	db	125
   825  00FF41  40                 	db	64
   826  00FF42  00                 	db	0
   827  00FF43  20                 	db	32
   828  00FF44  40                 	db	64
   829  00FF45  44                 	db	68
   830  00FF46  3D                 	db	61
   831  00FF47  00                 	db	0
   832  00FF48  00                 	db	0
   833  00FF49  7F                 	db	127
   834  00FF4A  10                 	db	16
   835  00FF4B  28                 	db	40
   836  00FF4C  44                 	db	68
   837  00FF4D  00                 	db	0
   838  00FF4E  41                 	db	65
   839  00FF4F  7F                 	db	127
   840  00FF50  40                 	db	64
   841  00FF51  00                 	db	0
   842  00FF52  7C                 	db	124
   843  00FF53  04                 	db	4
   844  00FF54  18                 	db	24
   845  00FF55  04                 	db	4
   846  00FF56  78                 	db	120
   847  00FF57  7C                 	db	124
   848  00FF58  08                 	db	8
   849  00FF59  04                 	db	4
   850  00FF5A  04                 	db	4
   851  00FF5B  78                 	db	120
   852  00FF5C  38                 	db	56
   853  00FF5D  44                 	db	68
   854  00FF5E  44                 	db	68
   855  00FF5F  44                 	db	68
   856  00FF60  38                 	db	56
   857  00FF61  7C                 	db	124
   858  00FF62  14                 	db	20
   859  00FF63  14                 	db	20
   860  00FF64  14                 	db	20
   861  00FF65  08                 	db	8
   862  00FF66  08                 	db	8
   863  00FF67  14                 	db	20
   864  00FF68  14                 	db	20
   865  00FF69  18                 	db	24
   866  00FF6A  7C                 	db	124
   867  00FF6B  7C                 	db	124
   868  00FF6C  08                 	db	8
   869  00FF6D  04                 	db	4
   870  00FF6E  04                 	db	4
   871  00FF6F  08                 	db	8
   872  00FF70  48                 	db	72
   873  00FF71  54                 	db	84
   874  00FF72  54                 	db	84
   875  00FF73  54                 	db	84
   876  00FF74  20                 	db	32
   877  00FF75  04                 	db	4
   878  00FF76  3F                 	db	63
   879  00FF77  44                 	db	68
   880  00FF78  40                 	db	64
   881  00FF79  20                 	db	32
   882  00FF7A  3C                 	db	60
   883  00FF7B  40                 	db	64
   884  00FF7C  40                 	db	64
   885  00FF7D  20                 	db	32
   886  00FF7E  7C                 	db	124
   887  00FF7F  1C                 	db	28
   888  00FF80  20                 	db	32
   889  00FF81  40                 	db	64
   890  00FF82  20                 	db	32
   891  00FF83  1C                 	db	28
   892  00FF84  3C                 	db	60
   893  00FF85  40                 	db	64
   894  00FF86  30                 	db	48
   895  00FF87  40                 	db	64
   896  00FF88  3C                 	db	60
   897  00FF89  44                 	db	68
   898  00FF8A  28                 	db	40
   899  00FF8B  10                 	db	16
   900  00FF8C  28                 	db	40
   901  00FF8D  44                 	db	68
   902  00FF8E  0C                 	db	12
   903  00FF8F  50                 	db	80
   904  00FF90  50                 	db	80
   905  00FF91  50                 	db	80
   906  00FF92  3C                 	db	60
   907  00FF93  44                 	db	68
   908  00FF94  64                 	db	100
   909  00FF95  54                 	db	84
   910  00FF96  4C                 	db	76
   911  00FF97  44                 	db	68
   912  00FF98  00                 	db	0
   913  00FF99  08                 	db	8
   914  00FF9A  36                 	db	54
   915  00FF9B  41                 	db	65
   916  00FF9C  00                 	db	0
   917  00FF9D  00                 	db	0
   918  00FF9E  00                 	db	0
   919  00FF9F  7F                 	db	127
   920  00FFA0  00                 	db	0
   921  00FFA1  00                 	db	0
   922  00FFA2  00                 	db	0
   923  00FFA3  41                 	db	65
   924  00FFA4  36                 	db	54
   925  00FFA5  08                 	db	8
   926  00FFA6  00                 	db	0
   927  00FFA7  08                 	db	8
   928  00FFA8  08                 	db	8
   929  00FFA9  2A                 	db	42
   930  00FFAA  1C                 	db	28
   931  00FFAB  08                 	db	8
   932  00FFAC  08                 	db	8
   933  00FFAD  1C                 	db	28
   934  00FFAE  2A                 	db	42
   935  00FFAF  08                 	db	8
   936  00FFB0  08                 	db	8
   937  00FFB1                     __end_of_Font5x7:
   938                           	opt stack 0
   939  00FFB1                     _PortG_Property:
   940                           	opt stack 0
   941  00FFB1  FC00               	dw	64512
   942  00FFB3                     __end_of_PortG_Property:
   943                           	opt stack 0
   944  00FFB3                     _PortF_Property:
   945                           	opt stack 0
   946  00FFB3  0FFF               	dw	4095
   947  00FFB5                     __end_of_PortF_Property:
   948                           	opt stack 0
   949  00FFB5                     _PortE_Property:
   950                           	opt stack 0
   951  00FFB5  0000               	dw	0
   952  00FFB7                     __end_of_PortE_Property:
   953                           	opt stack 0
   954  00FFB7                     _PortD_Property:
   955                           	opt stack 0
   956  00FFB7  FFFF               	dw	65535
   957  00FFB9                     __end_of_PortD_Property:
   958                           	opt stack 0
   959  00FFB9                     _PortC_Property:
   960                           	opt stack 0
   961  00FFB9  FFF0               	dw	65520
   962  00FFBB                     __end_of_PortC_Property:
   963                           	opt stack 0
   964  00FFBB                     _PortB_Property:
   965                           	opt stack 0
   966  00FFBB  FF00               	dw	65280
   967  00FFBD                     __end_of_PortB_Property:
   968                           	opt stack 0
   969  00FFBD                     _PortA_Property:
   970                           	opt stack 0
   971  00FFBD  00FF               	dw	255
   972  00FFBF                     __end_of_PortA_Property:
   973                           	opt stack 0
   974  0000                     _TMR0	set	4054
   975  0000                     _RCREG1	set	4015
   976  0000                     _TXREG1	set	4014
   977  0000                     _SPBRG1	set	4016
   978  0000                     _TXSTA1bits	set	4013
   979  0000                     _BAUDCON1bits	set	3966
   980  0000                     _RCSTA1	set	4012
   981  0000                     _TXSTA1	set	4013
   982  0000                     _TRISCbits	set	3988
   983  0000                     _PR2	set	4043
   984  0000                     _T2CONbits	set	4042
   985  0000                     _T0CONbits	set	4053
   986  0000                     _RCONbits	set	4048
   987  0000                     _OSCTUNEbits	set	3995
   988  0000                     _PIR3	set	4004
   989  0000                     _PIR2	set	4001
   990  0000                     _PIR1	set	3998
   991  0000                     _INTCONbits	set	4082
   992  0000                     _SSP2CON2bits	set	3947
   993  0000                     _SSP1CON2bits	set	4037
   994  0000                     _SSP1ADD	set	4040
   995  0000                     _ANCON0	set	4033
   996  0000                     _ADRESL	set	4035
   997  0000                     _ADRESH	set	4036
   998  0000                     _ADCON1bits	set	4033
   999  0000                     _ADCON0bits	set	4034
  1000  0000                     _SSP2CON1bits	set	3948
  1001  0000                     _SSP1CON1bits	set	4038
  1002  0000                     _SSP2STATbits	set	3949
  1003  0000                     _SSP1STATbits	set	4039
  1004  0000                     _PIE3bits	set	4003
  1005  0000                     _PIE1bits	set	3997
  1006  0000                     _PIR3bits	set	4004
  1007  0000                     _PIR1bits	set	3998
  1008  0000                     _IPR3bits	set	4005
  1009  0000                     _IPR1bits	set	3999
  1010  0000                     _PORTFbits	set	3973
  1011  0000                     _SSP2CON2	set	3947
  1012  0000                     _SSP1CON2	set	4037
  1013  0000                     _SSP2BUF	set	3951
  1014  0000                     _SSP2CON1	set	3948
  1015  0000                     _SSP2STAT	set	3949
  1016  0000                     _SSP1BUF	set	4041
  1017  0000                     _SSP1CON1	set	4038
  1018  0000                     _SSP1STAT	set	4039
  1019  0000                     _LATG	set	3983
  1020  0000                     _LATF	set	3982
  1021  0000                     _LATE	set	3981
  1022  0000                     _LATD	set	3980
  1023  0000                     _LATC	set	3979
  1024  0000                     _LATB	set	3978
  1025  0000                     _LATA	set	3977
  1026  0000                     _TRISG	set	3992
  1027  0000                     _TRISF	set	3991
  1028  0000                     _TRISE	set	3990
  1029  0000                     _TRISD	set	3989
  1030  0000                     _TRISC	set	3988
  1031  0000                     _TRISB	set	3987
  1032  0000                     _TRISA	set	3986
  1033  0000                     _PORTG	set	3974
  1034  0000                     _PORTF	set	3973
  1035  0000                     _PORTE	set	3972
  1036  0000                     _PORTD	set	3971
  1037  0000                     _PORTC	set	3970
  1038  0000                     _PORTB	set	3969
  1039  0000                     _PORTA	set	3968
  1040  00FFBF                     STR_2:
  1041  00FFBF  54                 	db	84	;'T'
  1042  00FFC0  6F                 	db	111	;'o'
  1043  00FFC1  74                 	db	116	;'t'
  1044  00FFC2  61                 	db	97	;'a'
  1045  00FFC3  6C                 	db	108	;'l'
  1046  00FFC4  20                 	db	32
  1047  00FFC5  44                 	db	68	;'D'
  1048  00FFC6  69                 	db	105	;'i'
  1049  00FFC7  73                 	db	115	;'s'
  1050  00FFC8  74                 	db	116	;'t'
  1051  00FFC9  61                 	db	97	;'a'
  1052  00FFCA  6E                 	db	110	;'n'
  1053  00FFCB  63                 	db	99	;'c'
  1054  00FFCC  65                 	db	101	;'e'
  1055  00FFCD  3A                 	db	58	;':'
  1056  00FFCE  25                 	db	37
  1057  00FFCF  75                 	db	117	;'u'
  1058  00FFD0  0A                 	db	10
  1059  00FFD1  4C                 	db	76	;'L'
  1060  00FFD2  65                 	db	101	;'e'
  1061  00FFD3  66                 	db	102	;'f'
  1062  00FFD4  74                 	db	116	;'t'
  1063  00FFD5  20                 	db	32
  1064  00FFD6  42                 	db	66	;'B'
  1065  00FFD7  75                 	db	117	;'u'
  1066  00FFD8  6D                 	db	109	;'m'
  1067  00FFD9  70                 	db	112	;'p'
  1068  00FFDA  3A                 	db	58	;':'
  1069  00FFDB  25                 	db	37
  1070  00FFDC  75                 	db	117	;'u'
  1071  00FFDD  0A                 	db	10
  1072  00FFDE  52                 	db	82	;'R'
  1073  00FFDF  69                 	db	105	;'i'
  1074  00FFE0  67                 	db	103	;'g'
  1075  00FFE1  68                 	db	104	;'h'
  1076  00FFE2  74                 	db	116	;'t'
  1077  00FFE3  20                 	db	32
  1078  00FFE4  42                 	db	66	;'B'
  1079  00FFE5  75                 	db	117	;'u'
  1080  00FFE6  6D                 	db	109	;'m'
  1081  00FFE7  70                 	db	112	;'p'
  1082  00FFE8  3A                 	db	58	;':'
  1083  00FFE9  25                 	db	37
  1084  00FFEA  75                 	db	117	;'u'
  1085  00FFEB  0A                 	db	10
  1086  00FFEC  00                 	db	0
  1087  00FFED                     STR_6:
  1088  00FFED  44                 	db	68	;'D'
  1089  00FFEE  69                 	db	105	;'i'
  1090  00FFEF  73                 	db	115	;'s'
  1091  00FFF0  74                 	db	116	;'t'
  1092  00FFF1  61                 	db	97	;'a'
  1093  00FFF2  6E                 	db	110	;'n'
  1094  00FFF3  63                 	db	99	;'c'
  1095  00FFF4  65                 	db	101	;'e'
  1096  00FFF5  3A                 	db	58	;':'
  1097  00FFF6  20                 	db	32
  1098  00FFF7  25                 	db	37
  1099  00FFF8  64                 	db	100	;'d'
  1100  00FFF9  0A                 	db	10
  1101  00FFFA  00                 	db	0
  1102  00FFFB                     STR_1:
  1103  00FFFB  25                 	db	37
  1104  00FFFC  63                 	db	99	;'c'
  1105  00FFFD  00                 	db	0
  1106  0000                     
  1107                           ; #config settings
  1108  00FFFE  00                 	db	0	; dummy byte at the end
  1109  0000                     
  1110                           	psect	cinit
  1111  014168                     __pcinit:
  1112                           	opt stack 0
  1113  014168                     start_initialization:
  1114                           	opt stack 0
  1115  014168                     __initialization:
  1116                           	opt stack 0
  1117                           
  1118                           ; Initialize objects allocated to BANK3 (12 bytes)
  1119                           ; load TBLPTR registers with __pidataBANK3
  1120  014168  0E12               	movlw	low __pidataBANK3
  1121  01416A  6EF6               	movwf	tblptrl,c
  1122  01416C  0E61               	movlw	high __pidataBANK3
  1123  01416E  6EF7               	movwf	tblptrh,c
  1124  014170  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1125  014172  6EF8               	movwf	tblptru,c
  1126  014174  EE03  F0EC         	lfsr	0,__pdataBANK3
  1127  014178  EE10 F00C          	lfsr	1,12
  1128  01417C                     copy_data0:
  1129  01417C  0009               	tblrd		*+
  1130  01417E  CFF5 FFEE          	movff	tablat,postinc0
  1131  014182  50E5               	movf	postdec1,w,c
  1132  014184  50E1               	movf	fsr1l,w,c
  1133  014186  E1FA               	bnz	copy_data0
  1134                           
  1135                           ; Initialize objects allocated to BANK0 (7 bytes)
  1136                           ; load TBLPTR registers with __pidataBANK0
  1137  014188  0E78               	movlw	low __pidataBANK0
  1138  01418A  6EF6               	movwf	tblptrl,c
  1139  01418C  0E61               	movlw	high __pidataBANK0
  1140  01418E  6EF7               	movwf	tblptrh,c
  1141  014190  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1142  014192  6EF8               	movwf	tblptru,c
  1143  014194  EE00  F0F9         	lfsr	0,__pdataBANK0
  1144  014198  EE10 F007          	lfsr	1,7
  1145  01419C                     copy_data1:
  1146  01419C  0009               	tblrd		*+
  1147  01419E  CFF5 FFEE          	movff	tablat,postinc0
  1148  0141A2  50E5               	movf	postdec1,w,c
  1149  0141A4  50E1               	movf	fsr1l,w,c
  1150  0141A6  E1FA               	bnz	copy_data1
  1151                           
  1152                           ; Initialize objects allocated to COMRAM (10 bytes)
  1153                           ; load TBLPTR registers with __pidataCOMRAM
  1154  0141A8  0E42               	movlw	low __pidataCOMRAM
  1155  0141AA  6EF6               	movwf	tblptrl,c
  1156  0141AC  0E61               	movlw	high __pidataCOMRAM
  1157  0141AE  6EF7               	movwf	tblptrh,c
  1158  0141B0  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1159  0141B2  6EF8               	movwf	tblptru,c
  1160  0141B4  EE00  F047         	lfsr	0,__pdataCOMRAM
  1161  0141B8  EE10 F00A          	lfsr	1,10
  1162  0141BC                     copy_data2:
  1163  0141BC  0009               	tblrd		*+
  1164  0141BE  CFF5 FFEE          	movff	tablat,postinc0
  1165  0141C2  50E5               	movf	postdec1,w,c
  1166  0141C4  50E1               	movf	fsr1l,w,c
  1167  0141C6  E1FA               	bnz	copy_data2
  1168                           
  1169                           ; Clear objects allocated to BIGRAM (300 bytes)
  1170  0141C8  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1171  0141CC  EE11 F02C          	lfsr	1,300
  1172  0141D0                     clear_0:
  1173  0141D0  6AEE               	clrf	postinc0,c
  1174  0141D2  50E5               	movf	postdec1,w,c
  1175  0141D4  50E1               	movf	fsr1l,w,c
  1176  0141D6  E1FC               	bnz	clear_0
  1177  0141D8  50E2               	movf	fsr1h,w,c
  1178  0141DA  E1FA               	bnz	clear_0
  1179                           
  1180                           ; Clear objects allocated to BANK4 (170 bytes)
  1181  0141DC  EE04  F000         	lfsr	0,__pbssBANK4
  1182  0141E0  0EAA               	movlw	170
  1183  0141E2                     clear_1:
  1184  0141E2  6AEE               	clrf	postinc0,c
  1185  0141E4  06E8               	decf	wreg,f,c
  1186  0141E6  E1FD               	bnz	clear_1
  1187                           
  1188                           ; Clear objects allocated to BANK3 (236 bytes)
  1189  0141E8  EE03  F000         	lfsr	0,__pbssBANK3
  1190  0141EC  0EEC               	movlw	236
  1191  0141EE                     clear_2:
  1192  0141EE  6AEE               	clrf	postinc0,c
  1193  0141F0  06E8               	decf	wreg,f,c
  1194  0141F2  E1FD               	bnz	clear_2
  1195                           
  1196                           ; Clear objects allocated to BANK0 (90 bytes)
  1197  0141F4  EE00  F060         	lfsr	0,__pbssBANK0
  1198  0141F8  0E5A               	movlw	90
  1199  0141FA                     clear_3:
  1200  0141FA  6AEE               	clrf	postinc0,c
  1201  0141FC  06E8               	decf	wreg,f,c
  1202  0141FE  E1FD               	bnz	clear_3
  1203                           
  1204                           ; Clear objects allocated to COMRAM (30 bytes)
  1205  014200  EE00  F029         	lfsr	0,__pbssCOMRAM
  1206  014204  0E1E               	movlw	30
  1207  014206                     clear_4:
  1208  014206  6AEE               	clrf	postinc0,c
  1209  014208  06E8               	decf	wreg,f,c
  1210  01420A  E1FD               	bnz	clear_4
  1211  01420C                     end_of_initialization:
  1212                           	opt stack 0
  1213  01420C                     __end_of__initialization:
  1214                           	opt stack 0
  1215  01420C  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1216  01420E  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1217  014210  0100               	movlb	0
  1218  014212  EF95  F0AA         	goto	_main	;jump to C main() function
  1219                           tblptru	equ	0xFF8
  1220                           tblptrh	equ	0xFF7
  1221                           tblptrl	equ	0xFF6
  1222                           tablat	equ	0xFF5
  1223                           postinc0	equ	0xFEE
  1224                           wreg	equ	0xFE8
  1225                           postdec1	equ	0xFE5
  1226                           fsr1h	equ	0xFE2
  1227                           fsr1l	equ	0xFE1
  1228                           
  1229                           	psect	bssCOMRAM
  1230  000029                     __pbssCOMRAM:
  1231                           	opt stack 0
  1232  000029                     _COUNTER:
  1233                           	opt stack 0
  1234  000029                     	ds	2
  1235  00002B                     HMI_GRender@a:
  1236                           	opt stack 0
  1237  00002B                     	ds	2
  1238  00002D                     _iRDropCaster:
  1239                           	opt stack 0
  1240  00002D                     	ds	1
  1241  00002E                     _iRDropLeft:
  1242                           	opt stack 0
  1243  00002E                     	ds	1
  1244  00002F                     _iRDropRight:
  1245                           	opt stack 0
  1246  00002F                     	ds	1
  1247  000030                     _iRVirtualWall:
  1248                           	opt stack 0
  1249  000030                     	ds	1
  1250  000031                     _iRCliffR:
  1251                           	opt stack 0
  1252  000031                     	ds	1
  1253  000032                     _iRCliffFR:
  1254                           	opt stack 0
  1255  000032                     	ds	1
  1256  000033                     _iRCliffFL:
  1257                           	opt stack 0
  1258  000033                     	ds	1
  1259  000034                     _iRCliffL:
  1260                           	opt stack 0
  1261  000034                     	ds	1
  1262  000035                     _iRWall:
  1263                           	opt stack 0
  1264  000035                     	ds	1
  1265  000036                     _iRBumpDrop:
  1266                           	opt stack 0
  1267  000036                     	ds	1
  1268  000037                     _iRScriptIndex:
  1269                           	opt stack 0
  1270  000037                     	ds	1
  1271  000038                     _u:
  1272                           	opt stack 0
  1273  000038                     	ds	1
  1274  000039                     _j:
  1275                           	opt stack 0
  1276  000039                     	ds	1
  1277  00003A                     _i:
  1278                           	opt stack 0
  1279  00003A                     	ds	1
  1280  00003B                     rand@screw:
  1281                           	opt stack 0
  1282  00003B                     	ds	1
  1283  00003C                     _ADC_Initialised:
  1284                           	opt stack 0
  1285  00003C                     	ds	1
  1286  00003D                     OutSeg@a:
  1287                           	opt stack 0
  1288  00003D                     	ds	1
  1289  00003E                     OutSeg@segset:
  1290                           	opt stack 0
  1291  00003E                     	ds	1
  1292  00003F                     OutSeg@cur:
  1293                           	opt stack 0
  1294  00003F                     	ds	1
  1295  000040                     _I2C1T:
  1296                           	opt stack 0
  1297  000040                     	ds	7
  1298                           tblptru	equ	0xFF8
  1299                           tblptrh	equ	0xFF7
  1300                           tblptrl	equ	0xFF6
  1301                           tablat	equ	0xFF5
  1302                           postinc0	equ	0xFEE
  1303                           wreg	equ	0xFE8
  1304                           postdec1	equ	0xFE5
  1305                           fsr1h	equ	0xFE2
  1306                           fsr1l	equ	0xFE1
  1307                           
  1308                           	psect	dataCOMRAM
  1309  000047                     __pdataCOMRAM:
  1310                           	opt stack 0
  1311  000047                     _gCursor:
  1312                           	opt stack 0
  1313  000047                     	ds	4
  1314  00004B                     _Bus_State:
  1315                           	opt stack 0
  1316  00004B                     	ds	1
  1317  00004C                     	ds	1
  1318  00004D                     	ds	1
  1319  00004E                     	ds	1
  1320  00004F                     _l:
  1321                           	opt stack 0
  1322  00004F                     	ds	1
  1323  000050                     _w:
  1324                           	opt stack 0
  1325  000050                     	ds	1
  1326                           tblptru	equ	0xFF8
  1327                           tblptrh	equ	0xFF7
  1328                           tblptrl	equ	0xFF6
  1329                           tablat	equ	0xFF5
  1330                           postinc0	equ	0xFEE
  1331                           wreg	equ	0xFE8
  1332                           postdec1	equ	0xFE5
  1333                           fsr1h	equ	0xFE2
  1334                           fsr1l	equ	0xFE1
  1335                           
  1336                           	psect	bssBANK0
  1337  000060                     __pbssBANK0:
  1338                           	opt stack 0
  1339  000060                     _gISR:
  1340                           	opt stack 0
  1341  000060                     	ds	3
  1342  000063                     _lQueue:
  1343                           	opt stack 0
  1344  000063                     	ds	3
  1345  000066                     _lStepFunction:
  1346                           	opt stack 0
  1347  000066                     	ds	3
  1348  000069                     _IRValue:
  1349                           	opt stack 0
  1350  000069                     	ds	2
  1351  00006B                     _Stepstomin:
  1352                           	opt stack 0
  1353  00006B                     	ds	2
  1354  00006D                     _StepRotate:
  1355                           	opt stack 0
  1356  00006D                     	ds	2
  1357  00006F                     _selectedMode4:
  1358                           	opt stack 0
  1359  00006F                     	ds	2
  1360  000071                     _selectedMode3:
  1361                           	opt stack 0
  1362  000071                     	ds	2
  1363  000073                     _selectedMode2:
  1364                           	opt stack 0
  1365  000073                     	ds	2
  1366  000075                     _selectedMode1:
  1367                           	opt stack 0
  1368  000075                     	ds	2
  1369  000077                     _mode:
  1370                           	opt stack 0
  1371  000077                     	ds	2
  1372  000079                     _angleTotal:
  1373                           	opt stack 0
  1374  000079                     	ds	2
  1375  00007B                     _distanceTotal:
  1376                           	opt stack 0
  1377  00007B                     	ds	2
  1378  00007D                     _iRAngle:
  1379                           	opt stack 0
  1380  00007D                     	ds	2
  1381  00007F                     _iRDistance:
  1382                           	opt stack 0
  1383  00007F                     	ds	2
  1384  000081                     _pShiftVal:
  1385                           	opt stack 0
  1386  000081                     	ds	2
  1387  000083                     _val:
  1388                           	opt stack 0
  1389  000083                     	ds	2
  1390  000085                     _lMotor:
  1391                           	opt stack 0
  1392  000085                     	ds	2
  1393  000087                     _lCurrent:
  1394                           	opt stack 0
  1395  000087                     	ds	2
  1396  000089                     _gBackcolour:
  1397                           	opt stack 0
  1398  000089                     	ds	2
  1399  00008B                     SPI_Send9@dat:
  1400                           	opt stack 0
  1401  00008B                     	ds	2
  1402  00008D                     _iRBumpLeft:
  1403                           	opt stack 0
  1404  00008D                     	ds	1
  1405  00008E                     _iRBumpRight:
  1406                           	opt stack 0
  1407  00008E                     	ds	1
  1408  00008F                     Event_TestButton@j:
  1409                           	opt stack 0
  1410  00008F                     	ds	1
  1411  000090                     Timer2_Init@PRE:
  1412                           	opt stack 0
  1413  000090                     	ds	1
  1414  000091                     Timer2_Init@INDEX:
  1415                           	opt stack 0
  1416  000091                     	ds	1
  1417  000092                     Timer0_Init@PRE:
  1418                           	opt stack 0
  1419  000092                     	ds	1
  1420  000093                     _INDEX:
  1421                           	opt stack 0
  1422  000093                     	ds	1
  1423  000094                     _lBufferY:
  1424                           	opt stack 0
  1425  000094                     	ds	1
  1426  000095                     _lBufferX:
  1427                           	opt stack 0
  1428  000095                     	ds	1
  1429  000096                     _clearall:
  1430                           	opt stack 0
  1431  000096                     	ds	1
  1432  000097                     _PortE:
  1433                           	opt stack 0
  1434  000097                     	ds	10
  1435  0000A1                     _PortD:
  1436                           	opt stack 0
  1437  0000A1                     	ds	10
  1438  0000AB                     _PortC:
  1439                           	opt stack 0
  1440  0000AB                     	ds	10
  1441  0000B5                     _ADC_AN0:
  1442                           	opt stack 0
  1443  0000B5                     	ds	5
  1444                           tblptru	equ	0xFF8
  1445                           tblptrh	equ	0xFF7
  1446                           tblptrl	equ	0xFF6
  1447                           tablat	equ	0xFF5
  1448                           postinc0	equ	0xFEE
  1449                           wreg	equ	0xFE8
  1450                           postdec1	equ	0xFE5
  1451                           fsr1h	equ	0xFE2
  1452                           fsr1l	equ	0xFE1
  1453                           
  1454                           	psect	dataBANK0
  1455  0000F9                     __pdataBANK0:
  1456                           	opt stack 0
  1457  0000F9                     _TimerX:
  1458                           	opt stack 0
  1459  0000F9                     	ds	2
  1460  0000FB                     _MinDist:
  1461                           	opt stack 0
  1462  0000FB                     	ds	2
  1463  0000FD                     _gForecolour:
  1464                           	opt stack 0
  1465  0000FD                     	ds	2
  1466  0000FF                     _change:
  1467                           	opt stack 0
  1468  0000FF                     	ds	1
  1469                           tblptru	equ	0xFF8
  1470                           tblptrh	equ	0xFF7
  1471                           tblptrl	equ	0xFF6
  1472                           tablat	equ	0xFF5
  1473                           postinc0	equ	0xFEE
  1474                           wreg	equ	0xFE8
  1475                           postdec1	equ	0xFE5
  1476                           fsr1h	equ	0xFE2
  1477                           fsr1l	equ	0xFE1
  1478                           
  1479                           	psect	bssBANK3
  1480  000300                     __pbssBANK3:
  1481                           	opt stack 0
  1482  000300                     _lCBuffer:
  1483                           	opt stack 0
  1484  000300                     	ds	30
  1485  00031E                     _iRAngleSS:
  1486                           	opt stack 0
  1487  00031E                     	ds	4
  1488  000322                     _iRDistanceSS:
  1489                           	opt stack 0
  1490  000322                     	ds	4
  1491  000326                     Timer2_Init@DIV:
  1492                           	opt stack 0
  1493  000326                     	ds	4
  1494  00032A                     Timer0_Init@DIV:
  1495                           	opt stack 0
  1496  00032A                     	ds	4
  1497  00032E                     _I2C2_More:
  1498                           	opt stack 0
  1499  00032E                     	ds	3
  1500  000331                     _I2C1_More:
  1501                           	opt stack 0
  1502  000331                     	ds	3
  1503  000334                     _I2C2_Done:
  1504                           	opt stack 0
  1505  000334                     	ds	3
  1506  000337                     _I2C1_Done:
  1507                           	opt stack 0
  1508  000337                     	ds	3
  1509  00033A                     _dip:
  1510                           	opt stack 0
  1511  00033A                     	ds	2
  1512  00033C                     _HMIBoard:
  1513                           	opt stack 0
  1514  00033C                     	ds	58
  1515  000376                     _SPI1:
  1516                           	opt stack 0
  1517  000376                     	ds	11
  1518  000381                     _SPI2:
  1519                           	opt stack 0
  1520  000381                     	ds	11
  1521  00038C                     _DIPSwitch:
  1522                           	opt stack 0
  1523  00038C                     	ds	10
  1524  000396                     _TestButton:
  1525                           	opt stack 0
  1526  000396                     	ds	10
  1527  0003A0                     _PortG:
  1528                           	opt stack 0
  1529  0003A0                     	ds	10
  1530  0003AA                     _PortB:
  1531                           	opt stack 0
  1532  0003AA                     	ds	10
  1533  0003B4                     _PortA:
  1534                           	opt stack 0
  1535  0003B4                     	ds	10
  1536  0003BE                     _PortF:
  1537                           	opt stack 0
  1538  0003BE                     	ds	10
  1539  0003C8                     _I2C2T:
  1540                           	opt stack 0
  1541  0003C8                     	ds	7
  1542  0003CF                     _Stepper:
  1543                           	opt stack 0
  1544  0003CF                     	ds	6
  1545  0003D5                     _ADC_AN3:
  1546                           	opt stack 0
  1547  0003D5                     	ds	5
  1548  0003DA                     _ADC_AN2:
  1549                           	opt stack 0
  1550  0003DA                     	ds	5
  1551  0003DF                     _ADC_AN1:
  1552                           	opt stack 0
  1553  0003DF                     	ds	5
  1554  0003E4                     LCD_DrawRectangle@p4:
  1555                           	opt stack 0
  1556  0003E4                     	ds	4
  1557  0003E8                     LCD_DrawRectangle@p2:
  1558                           	opt stack 0
  1559  0003E8                     	ds	4
  1560                           tblptru	equ	0xFF8
  1561                           tblptrh	equ	0xFF7
  1562                           tblptrl	equ	0xFF6
  1563                           tablat	equ	0xFF5
  1564                           postinc0	equ	0xFEE
  1565                           wreg	equ	0xFE8
  1566                           postdec1	equ	0xFE5
  1567                           fsr1h	equ	0xFE2
  1568                           fsr1l	equ	0xFE1
  1569                           
  1570                           	psect	dataBANK3
  1571  0003EC                     __pdataBANK3:
  1572                           	opt stack 0
  1573  0003EC                     Console_Render@F6956:
  1574                           	opt stack 0
  1575  0003EC                     	ds	4
  1576  0003F0                     _gLineSize:
  1577                           	opt stack 0
  1578  0003F0                     	ds	4
  1579  0003F4                     _gCharSize:
  1580                           	opt stack 0
  1581  0003F4                     	ds	4
  1582                           tblptru	equ	0xFF8
  1583                           tblptrh	equ	0xFF7
  1584                           tblptrl	equ	0xFF6
  1585                           tablat	equ	0xFF5
  1586                           postinc0	equ	0xFEE
  1587                           wreg	equ	0xFE8
  1588                           postdec1	equ	0xFE5
  1589                           fsr1h	equ	0xFE2
  1590                           fsr1l	equ	0xFE1
  1591                           
  1592                           	psect	bssBANK4
  1593  000400                     __pbssBANK4:
  1594                           	opt stack 0
  1595  000400                     _iRScriptStack:
  1596                           	opt stack 0
  1597  000400                     	ds	100
  1598  000464                     Console_MakeField@Fill:
  1599                           	opt stack 0
  1600  000464                     	ds	70
  1601                           tblptru	equ	0xFF8
  1602                           tblptrh	equ	0xFF7
  1603                           tblptrl	equ	0xFF6
  1604                           tablat	equ	0xFF5
  1605                           postinc0	equ	0xFEE
  1606                           wreg	equ	0xFE8
  1607                           postdec1	equ	0xFE5
  1608                           fsr1h	equ	0xFE2
  1609                           fsr1l	equ	0xFE1
  1610                           
  1611                           	psect	bssBIGRAM
  1612  0004AA                     __pbssBIGRAM:
  1613                           	opt stack 0
  1614  0004AA                     _lBuffer:
  1615                           	opt stack 0
  1616  0004AA                     	ds	300
  1617                           tblptru	equ	0xFF8
  1618                           tblptrh	equ	0xFF7
  1619                           tblptrl	equ	0xFF6
  1620                           tablat	equ	0xFF5
  1621                           postinc0	equ	0xFEE
  1622                           wreg	equ	0xFE8
  1623                           postdec1	equ	0xFE5
  1624                           fsr1h	equ	0xFE2
  1625                           fsr1l	equ	0xFE1
  1626                           
  1627                           	psect	cstackBANK3
  1628  0003F8                     __pcstackBANK3:
  1629                           	opt stack 0
  1630  0003F8                     ??_main:
  1631                           
  1632                           ; 1 bytes @ 0x0
  1633  0003F8                     	ds	2
  1634                           tblptru	equ	0xFF8
  1635                           tblptrh	equ	0xFF7
  1636                           tblptrl	equ	0xFF6
  1637                           tablat	equ	0xFF5
  1638                           postinc0	equ	0xFEE
  1639                           wreg	equ	0xFE8
  1640                           postdec1	equ	0xFE5
  1641                           fsr1h	equ	0xFE2
  1642                           fsr1l	equ	0xFE1
  1643                           
  1644                           	psect	cstackBANK2
  1645  000200                     __pcstackBANK2:
  1646                           	opt stack 0
  1647  000200                     irobot_query_and_update@TXArray:
  1648                           	opt stack 0
  1649                           
  1650                           ; 256 bytes @ 0x0
  1651  000200                     	ds	256
  1652                           tblptru	equ	0xFF8
  1653                           tblptrh	equ	0xFF7
  1654                           tblptrl	equ	0xFF6
  1655                           tablat	equ	0xFF5
  1656                           postinc0	equ	0xFEE
  1657                           wreg	equ	0xFE8
  1658                           postdec1	equ	0xFE5
  1659                           fsr1h	equ	0xFE2
  1660                           fsr1l	equ	0xFE1
  1661                           
  1662                           	psect	cstackBANK1
  1663  000100                     __pcstackBANK1:
  1664                           	opt stack 0
  1665  000100                     Port_SetType@Output:
  1666                           	opt stack 0
  1667  000100                     Button_Init@pInput:
  1668                           	opt stack 0
  1669  000100                     irobot_query_and_update@RXArray:
  1670                           	opt stack 0
  1671                           
  1672                           ; 256 bytes @ 0x0
  1673  000100                     	ds	1
  1674  000101                     Port_Init@pInput:
  1675                           	opt stack 0
  1676                           
  1677                           ; 2 bytes @ 0x1
  1678  000101                     	ds	1
  1679  000102                     Button_Init@pThreshold:
  1680                           	opt stack 0
  1681                           
  1682                           ; 2 bytes @ 0x2
  1683  000102                     	ds	1
  1684  000103                     Port_Init@pPort:
  1685                           	opt stack 0
  1686                           
  1687                           ; 1 bytes @ 0x3
  1688  000103                     	ds	1
  1689  000104                     ??_Port_Init:
  1690  000104                     Button_Init@pInitIO:
  1691                           	opt stack 0
  1692                           
  1693                           ; 3 bytes @ 0x4
  1694  000104                     	ds	2
  1695  000106                     Port_Init@i:
  1696                           	opt stack 0
  1697                           
  1698                           ; 1 bytes @ 0x6
  1699  000106                     	ds	1
  1700  000107                     Button_Init@pGetState:
  1701                           	opt stack 0
  1702                           
  1703                           ; 3 bytes @ 0x7
  1704  000107                     	ds	3
  1705  00010A                     Button_Init@pFunction:
  1706                           	opt stack 0
  1707                           
  1708                           ; 3 bytes @ 0xA
  1709  00010A                     	ds	246
  1710                           tblptru	equ	0xFF8
  1711                           tblptrh	equ	0xFF7
  1712                           tblptrl	equ	0xFF6
  1713                           tablat	equ	0xFF5
  1714                           postinc0	equ	0xFEE
  1715                           wreg	equ	0xFE8
  1716                           postdec1	equ	0xFE5
  1717                           fsr1h	equ	0xFE2
  1718                           fsr1l	equ	0xFE1
  1719                           
  1720                           	psect	cstackBANK0
  1721  0000BA                     __pcstackBANK0:
  1722                           	opt stack 0
  1723  0000BA                     ??_Console_ClearCursor:
  1724  0000BA                     ??_ADC_SetChannel:
  1725  0000BA                     ??_ADC_ConversionTime:
  1726  0000BA                     ??_ADC_SetupIO:
  1727  0000BA                     ??_sort_iRBumpDrop:
  1728  0000BA                     ?_load_iRScriptStack:
  1729                           	opt stack 0
  1730  0000BA                     ??_Console_Init:
  1731  0000BA                     ??_Console_NewLine:
  1732  0000BA                     ??_Console_FormFeed:
  1733  0000BA                     ??_HMI_SetButton:
  1734  0000BA                     ?_GetPortProperties:
  1735                           	opt stack 0
  1736  0000BA                     ?_GetPortPORT:
  1737                           	opt stack 0
  1738  0000BA                     ?_GetPortTRIS:
  1739                           	opt stack 0
  1740  0000BA                     ?_twos_complement_of:
  1741                           	opt stack 0
  1742  0000BA                     ?___wmul:
  1743                           	opt stack 0
  1744  0000BA                     ?___awdiv:
  1745                           	opt stack 0
  1746  0000BA                     ?___lwdiv:
  1747                           	opt stack 0
  1748  0000BA                     ?___fldiv:
  1749                           	opt stack 0
  1750  0000BA                     ?___flmul:
  1751                           	opt stack 0
  1752  0000BA                     ?___lldiv:
  1753                           	opt stack 0
  1754  0000BA                     ?___xxtofl:
  1755                           	opt stack 0
  1756  0000BA                     Mode_Set@pMode:
  1757                           	opt stack 0
  1758  0000BA                     ToSegment@pCHR:
  1759                           	opt stack 0
  1760  0000BA                     HMI_SetBar@pValue:
  1761                           	opt stack 0
  1762  0000BA                     ADC_ClockDivision@pDivide:
  1763                           	opt stack 0
  1764  0000BA                     get_packet_size@packetID:
  1765                           	opt stack 0
  1766  0000BA                     eusart_putch@eusartSendChar:
  1767                           	opt stack 0
  1768  0000BA                     Port_GetPin@pInput:
  1769                           	opt stack 0
  1770  0000BA                     Port_GetQuad@pInput:
  1771                           	opt stack 0
  1772  0000BA                     SPI_DisableISR@pInput:
  1773                           	opt stack 0
  1774  0000BA                     SPI_DCS@pInput:
  1775                           	opt stack 0
  1776  0000BA                     SPI_Send@pInput:
  1777                           	opt stack 0
  1778  0000BA                     Byte_SetBit@pInput:
  1779                           	opt stack 0
  1780  0000BA                     Byte_GetBit@pInput:
  1781                           	opt stack 0
  1782  0000BA                     Byte_SetZone@pInput:
  1783                           	opt stack 0
  1784  0000BA                     Byte_GetZone@pInput:
  1785                           	opt stack 0
  1786  0000BA                     Byte_SetByte@pInput:
  1787                           	opt stack 0
  1788  0000BA                     delay_ms@ms:
  1789                           	opt stack 0
  1790  0000BA                     delay_us@us:
  1791                           	opt stack 0
  1792  0000BA                     reverse@input:
  1793                           	opt stack 0
  1794  0000BA                     twos_complement_of@complementValue:
  1795                           	opt stack 0
  1796  0000BA                     ___wmul@multiplier:
  1797                           	opt stack 0
  1798  0000BA                     ___awdiv@dividend:
  1799                           	opt stack 0
  1800  0000BA                     ___lwdiv@dividend:
  1801                           	opt stack 0
  1802  0000BA                     MXK_Queue@pCallback:
  1803                           	opt stack 0
  1804  0000BA                     Timer0_Start@pFunction:
  1805                           	opt stack 0
  1806  0000BA                     ___lldiv@dividend:
  1807                           	opt stack 0
  1808  0000BA                     ___fldiv@b:
  1809                           	opt stack 0
  1810  0000BA                     ___flmul@b:
  1811                           	opt stack 0
  1812  0000BA                     ___xxtofl@val:
  1813                           	opt stack 0
  1814                           
  1815                           ; 4 bytes @ 0x0
  1816  0000BA                     	ds	1
  1817  0000BB                     ADC_SetChannel@pChannel:
  1818                           	opt stack 0
  1819  0000BB                     ADC_ClockDivision@reg:
  1820                           	opt stack 0
  1821  0000BB                     ADC_ConversionTime@pCount:
  1822                           	opt stack 0
  1823  0000BB                     rx_assign@packetIDValue:
  1824                           	opt stack 0
  1825  0000BB                     irobot_song_play@songNumber:
  1826                           	opt stack 0
  1827  0000BB                     HMI_SetSegments@pString:
  1828                           	opt stack 0
  1829                           
  1830                           ; 2 bytes @ 0x1
  1831  0000BB                     	ds	1
  1832  0000BC                     GetPortProperties@pInput:
  1833                           	opt stack 0
  1834  0000BC                     GetPortPORT@pInput:
  1835                           	opt stack 0
  1836  0000BC                     GetPortTRIS@pInput:
  1837                           	opt stack 0
  1838  0000BC                     Port_GetPin@pPin:
  1839                           	opt stack 0
  1840  0000BC                     Port_GetQuad@pQuad:
  1841                           	opt stack 0
  1842  0000BC                     SPI_Send@pData:
  1843                           	opt stack 0
  1844  0000BC                     Byte_SetBit@pBit:
  1845                           	opt stack 0
  1846  0000BC                     Byte_GetBit@pBit:
  1847                           	opt stack 0
  1848  0000BC                     Byte_SetZone@pMax:
  1849                           	opt stack 0
  1850  0000BC                     Byte_GetZone@pMax:
  1851                           	opt stack 0
  1852  0000BC                     Byte_SetByte@pValue:
  1853                           	opt stack 0
  1854  0000BC                     Console_Init@x:
  1855                           	opt stack 0
  1856  0000BC                     Console_FormFeed@x:
  1857                           	opt stack 0
  1858  0000BC                     ADC_SetupIO@pChannel:
  1859                           	opt stack 0
  1860  0000BC                     ADC_ClockDivision@unfound:
  1861                           	opt stack 0
  1862  0000BC                     rx_assign@byteNumber:
  1863                           	opt stack 0
  1864  0000BC                     reverse@length:
  1865                           	opt stack 0
  1866  0000BC                     ADC_Start@pInput:
  1867                           	opt stack 0
  1868  0000BC                     ___wmul@multiplicand:
  1869                           	opt stack 0
  1870  0000BC                     ___awdiv@divisor:
  1871                           	opt stack 0
  1872  0000BC                     ___lwdiv@divisor:
  1873                           	opt stack 0
  1874  0000BC                     delay_ms@u:
  1875                           	opt stack 0
  1876  0000BC                     delay_us@u:
  1877                           	opt stack 0
  1878  0000BC                     HMI_SetButton@reindex:
  1879                           	opt stack 0
  1880                           
  1881                           ; 4 bytes @ 0x2
  1882  0000BC                     	ds	1
  1883  0000BD                     ??_Port_GetPin:
  1884  0000BD                     ??_Port_GetQuad:
  1885  0000BD                     ??_Byte_GetBit:
  1886  0000BD                     ??_rx_assign:
  1887  0000BD                     LCD_Write@mode:
  1888                           	opt stack 0
  1889  0000BD                     Byte_SetBit@pValue:
  1890                           	opt stack 0
  1891  0000BD                     Byte_SetZone@pChunk:
  1892                           	opt stack 0
  1893  0000BD                     Byte_GetZone@pChunk:
  1894                           	opt stack 0
  1895  0000BD                     Console_Init@y:
  1896                           	opt stack 0
  1897  0000BD                     Console_FormFeed@y:
  1898                           	opt stack 0
  1899  0000BD                     OutSeg@pSegment:
  1900                           	opt stack 0
  1901  0000BD                     ADC_SetupIO@MASK:
  1902                           	opt stack 0
  1903  0000BD                     Motor_Move@pMotor:
  1904                           	opt stack 0
  1905                           
  1906                           ; 2 bytes @ 0x3
  1907  0000BD                     	ds	1
  1908  0000BE                     ??_Byte_SetBit:
  1909  0000BE                     ??_Console_IncrementCursor:
  1910  0000BE                     ??_OutSeg:
  1911  0000BE                     ??_ADC_Start:
  1912  0000BE                     ??___xxtofl:
  1913  0000BE                     LCD_Write@value:
  1914                           	opt stack 0
  1915  0000BE                     Byte_GetBit@Output:
  1916                           	opt stack 0
  1917  0000BE                     Byte_SetZone@pChunkSize:
  1918                           	opt stack 0
  1919  0000BE                     Byte_GetZone@pChunkSize:
  1920                           	opt stack 0
  1921  0000BE                     reverse@tempVar:
  1922                           	opt stack 0
  1923  0000BE                     ___awdiv@counter:
  1924                           	opt stack 0
  1925  0000BE                     ___lwdiv@counter:
  1926                           	opt stack 0
  1927  0000BE                     HMI_SetSegments@in:
  1928                           	opt stack 0
  1929  0000BE                     ADC_Init@pInput:
  1930                           	opt stack 0
  1931  0000BE                     ___wmul@product:
  1932                           	opt stack 0
  1933  0000BE                     ___lldiv@divisor:
  1934                           	opt stack 0
  1935  0000BE                     ___fldiv@a:
  1936                           	opt stack 0
  1937  0000BE                     ___flmul@a:
  1938                           	opt stack 0
  1939                           
  1940                           ; 4 bytes @ 0x4
  1941  0000BE                     	ds	1
  1942  0000BF                     ??_Byte_GetZone:
  1943  0000BF                     ?_Console_MakeField:
  1944                           	opt stack 0
  1945  0000BF                     Set_Addr_Window@ys:
  1946                           	opt stack 0
  1947  0000BF                     Set_Rotation@m:
  1948                           	opt stack 0
  1949  0000BF                     Port_GetPin@Output:
  1950                           	opt stack 0
  1951  0000BF                     Port_GetQuad@Output:
  1952                           	opt stack 0
  1953  0000BF                     Byte_SetZone@pValue:
  1954                           	opt stack 0
  1955  0000BF                     rx_assign@packetID:
  1956                           	opt stack 0
  1957  0000BF                     ___awdiv@sign:
  1958                           	opt stack 0
  1959  0000BF                     LCD_Word_Write@value:
  1960                           	opt stack 0
  1961  0000BF                     reverse@iterator:
  1962                           	opt stack 0
  1963  0000BF                     Motor_Move@pDelta:
  1964                           	opt stack 0
  1965  0000BF                     ___lwdiv@quotient:
  1966                           	opt stack 0
  1967                           
  1968                           ; 2 bytes @ 0x5
  1969  0000BF                     	ds	1
  1970  0000C0                     ?_irobot_query_and_update:
  1971                           	opt stack 0
  1972  0000C0                     ??_Byte_SetZone:
  1973  0000C0                     ??_getMode:
  1974  0000C0                     Set_Addr_Window@xe:
  1975                           	opt stack 0
  1976  0000C0                     Set_Rotation@rotation:
  1977                           	opt stack 0
  1978  0000C0                     Byte_GetZone@MASK:
  1979                           	opt stack 0
  1980  0000C0                     OutSeg@pInput:
  1981                           	opt stack 0
  1982  0000C0                     HMI_SetButton@pValue:
  1983                           	opt stack 0
  1984  0000C0                     ADC_Init@pChannel:
  1985                           	opt stack 0
  1986  0000C0                     MXK_BlockSwitchTo@CUR:
  1987                           	opt stack 0
  1988  0000C0                     MXK_SwitchTo@CUR:
  1989                           	opt stack 0
  1990  0000C0                     ___awdiv@quotient:
  1991                           	opt stack 0
  1992                           
  1993                           ; 2 bytes @ 0x6
  1994  0000C0                     	ds	1
  1995  0000C1                     ??_Console_MakeField:
  1996  0000C1                     ?___lwmod:
  1997                           	opt stack 0
  1998  0000C1                     Set_Addr_Window@ye:
  1999                           	opt stack 0
  2000  0000C1                     Byte_GetZone@Offset:
  2001                           	opt stack 0
  2002  0000C1                     OutSeg@out:
  2003                           	opt stack 0
  2004  0000C1                     HMI_SetButton@v:
  2005                           	opt stack 0
  2006  0000C1                     MXK_BlockSwitchTo@pModule:
  2007                           	opt stack 0
  2008  0000C1                     MXK_SwitchTo@pModule:
  2009                           	opt stack 0
  2010  0000C1                     ___lwmod@dividend:
  2011                           	opt stack 0
  2012                           
  2013                           ; 2 bytes @ 0x7
  2014  0000C1                     	ds	1
  2015  0000C2                     ??___fldiv:
  2016  0000C2                     ??___flmul:
  2017  0000C2                     ??_Console_Tab:
  2018  0000C2                     Set_Addr_Window@xs:
  2019                           	opt stack 0
  2020  0000C2                     Byte_GetZone@Output:
  2021                           	opt stack 0
  2022  0000C2                     ___xxtofl@sign:
  2023                           	opt stack 0
  2024  0000C2                     HMI_Render@a:
  2025                           	opt stack 0
  2026  0000C2                     ___lldiv@quotient:
  2027                           	opt stack 0
  2028                           
  2029                           ; 4 bytes @ 0x8
  2030  0000C2                     	ds	1
  2031  0000C3                     Byte_SetZone@Offset:
  2032                           	opt stack 0
  2033  0000C3                     ___xxtofl@exp:
  2034                           	opt stack 0
  2035  0000C3                     LCD_Fill@pColour:
  2036                           	opt stack 0
  2037  0000C3                     LCD_FillRectangle@pColour:
  2038                           	opt stack 0
  2039  0000C3                     Byte_GetPair@pInput:
  2040                           	opt stack 0
  2041  0000C3                     Console_MakeField@Index:
  2042                           	opt stack 0
  2043  0000C3                     ___lwmod@divisor:
  2044                           	opt stack 0
  2045                           
  2046                           ; 2 bytes @ 0x9
  2047  0000C3                     	ds	1
  2048  0000C4                     ??_load_iRScriptStack:
  2049  0000C4                     Byte_SetZone@MASK:
  2050                           	opt stack 0
  2051  0000C4                     ___xxtofl@arg:
  2052                           	opt stack 0
  2053                           
  2054                           ; 4 bytes @ 0xA
  2055  0000C4                     	ds	1
  2056  0000C5                     LCD_Fill@i:
  2057                           	opt stack 0
  2058  0000C5                     Byte_GetPair@pPair:
  2059                           	opt stack 0
  2060  0000C5                     Console_MakeField@pInput:
  2061                           	opt stack 0
  2062  0000C5                     ___lwmod@counter:
  2063                           	opt stack 0
  2064  0000C5                     Byte_SetPair@pInput:
  2065                           	opt stack 0
  2066  0000C5                     Byte_SetQuad@pInput:
  2067                           	opt stack 0
  2068  0000C5                     LCD_FillRectangle@pPoint:
  2069                           	opt stack 0
  2070                           
  2071                           ; 4 bytes @ 0xB
  2072  0000C5                     	ds	1
  2073  0000C6                     LCD_Fill@j:
  2074                           	opt stack 0
  2075  0000C6                     ___lldiv@counter:
  2076                           	opt stack 0
  2077  0000C6                     ___fldiv@sign:
  2078                           	opt stack 0
  2079  0000C6                     ___flmul@sign:
  2080                           	opt stack 0
  2081  0000C6                     Word_GetPair@pInput:
  2082                           	opt stack 0
  2083  0000C6                     itos@input:
  2084                           	opt stack 0
  2085  0000C6                     Console_MakeField@Column:
  2086                           	opt stack 0
  2087  0000C6                     load_iRScriptStack@loadByte:
  2088                           	opt stack 0
  2089                           
  2090                           ; 2 bytes @ 0xC
  2091  0000C6                     	ds	1
  2092  0000C7                     Byte_SetPair@pPair:
  2093                           	opt stack 0
  2094  0000C7                     Byte_SetQuad@pQuad:
  2095                           	opt stack 0
  2096  0000C7                     Console_Tab@t:
  2097                           	opt stack 0
  2098  0000C7                     ___flmul@aexp:
  2099                           	opt stack 0
  2100  0000C7                     Timer0_Init@pFrequency:
  2101                           	opt stack 0
  2102  0000C7                     Timer2_Init@pFrequency:
  2103                           	opt stack 0
  2104  0000C7                     ___fldiv@rem:
  2105                           	opt stack 0
  2106                           
  2107                           ; 4 bytes @ 0xD
  2108  0000C7                     	ds	1
  2109  0000C8                     Byte_SetPair@pValue:
  2110                           	opt stack 0
  2111  0000C8                     Byte_SetQuad@pValue:
  2112                           	opt stack 0
  2113  0000C8                     Word_GetPair@pPair:
  2114                           	opt stack 0
  2115  0000C8                     Console_Tab@i:
  2116                           	opt stack 0
  2117  0000C8                     load_iRScriptStack@bytesToLoad:
  2118                           	opt stack 0
  2119  0000C8                     itos@destination:
  2120                           	opt stack 0
  2121  0000C8                     _Console_MakeField$10974:
  2122                           	opt stack 0
  2123  0000C8                     ___flmul@grs:
  2124                           	opt stack 0
  2125                           
  2126                           ; 4 bytes @ 0xE
  2127  0000C8                     	ds	1
  2128  0000C9                     Console_Tab@c:
  2129                           	opt stack 0
  2130  0000C9                     load_iRScriptStack@i:
  2131                           	opt stack 0
  2132  0000C9                     Port_SetPin@pInput:
  2133                           	opt stack 0
  2134  0000C9                     Port_Set@pInput:
  2135                           	opt stack 0
  2136  0000C9                     SPI_MinSpeed@pInput:
  2137                           	opt stack 0
  2138  0000C9                     SPI_MaxSpeed@pInput:
  2139                           	opt stack 0
  2140  0000C9                     Word_SetPair@pInput:
  2141                           	opt stack 0
  2142  0000C9                     PortProperty_Valid@pInput:
  2143                           	opt stack 0
  2144  0000C9                     LCD_FillRectangle@pSize:
  2145                           	opt stack 0
  2146                           
  2147                           ; 4 bytes @ 0xF
  2148  0000C9                     	ds	1
  2149  0000CA                     ??_irobot_query_and_update:
  2150  0000CA                     ??_Console_PrintChar:
  2151  0000CA                     Console_MakeField@x:
  2152                           	opt stack 0
  2153  0000CA                     irobot_leds@LEDBit:
  2154                           	opt stack 0
  2155  0000CA                     itos@Data:
  2156                           	opt stack 0
  2157  0000CA                     irobot_move@moveSpeed:
  2158                           	opt stack 0
  2159                           
  2160                           ; 2 bytes @ 0x10
  2161  0000CA                     	ds	1
  2162  0000CB                     ??_Timer2_Init:
  2163  0000CB                     ??_Timer0_Init:
  2164  0000CB                     Port_SetPin@pPin:
  2165                           	opt stack 0
  2166  0000CB                     Port_Set@pValue:
  2167                           	opt stack 0
  2168  0000CB                     Word_SetPair@pPair:
  2169                           	opt stack 0
  2170  0000CB                     PortProperty_Valid@pPinDrive:
  2171                           	opt stack 0
  2172  0000CB                     Console_MakeField@y:
  2173                           	opt stack 0
  2174  0000CB                     irobot_leds@powerColour:
  2175                           	opt stack 0
  2176  0000CB                     ___fldiv@new_exp:
  2177                           	opt stack 0
  2178                           
  2179                           ; 2 bytes @ 0x11
  2180  0000CB                     	ds	1
  2181  0000CC                     ??_Port_Set:
  2182  0000CC                     Port_SetPin@pValue:
  2183                           	opt stack 0
  2184  0000CC                     Word_SetPair@pValue:
  2185                           	opt stack 0
  2186  0000CC                     PortProperty_Valid@pPin:
  2187                           	opt stack 0
  2188  0000CC                     irobot_leds@powerLuminosity:
  2189                           	opt stack 0
  2190  0000CC                     ___flmul@bexp:
  2191                           	opt stack 0
  2192  0000CC                     LCD_DrawField@pField:
  2193                           	opt stack 0
  2194  0000CC                     itos@Length:
  2195                           	opt stack 0
  2196  0000CC                     irobot_move@moveTurnRadius:
  2197                           	opt stack 0
  2198  0000CC                     Timer2_Init@RDIV:
  2199                           	opt stack 0
  2200                           
  2201                           ; 4 bytes @ 0x12
  2202  0000CC                     	ds	1
  2203  0000CD                     ??_PortProperty_Valid:
  2204  0000CD                     ??_LCD_FillRectangle:
  2205  0000CD                     Port_SetPin@Type:
  2206                           	opt stack 0
  2207  0000CD                     Console_PrintChar@pInput:
  2208                           	opt stack 0
  2209  0000CD                     irobot_leds@isScript:
  2210                           	opt stack 0
  2211  0000CD                     Timer0_Init@pCPUClock:
  2212                           	opt stack 0
  2213  0000CD                     ___fldiv@grs:
  2214                           	opt stack 0
  2215  0000CD                     ___flmul@prod:
  2216                           	opt stack 0
  2217                           
  2218                           ; 4 bytes @ 0x13
  2219  0000CD                     	ds	1
  2220  0000CE                     ??_irobot_move:
  2221  0000CE                     LED_Set@pValue:
  2222                           	opt stack 0
  2223  0000CE                     putch@c:
  2224                           	opt stack 0
  2225  0000CE                     irobot_led_power_on@powerOnColour:
  2226                           	opt stack 0
  2227  0000CE                     Port_TogglePin@pInput:
  2228                           	opt stack 0
  2229  0000CE                     itos@Out:
  2230                           	opt stack 0
  2231  0000CE                     LCD_DrawField@pPoint:
  2232                           	opt stack 0
  2233                           
  2234                           ; 4 bytes @ 0x14
  2235  0000CE                     	ds	1
  2236  0000CF                     ?_printf:
  2237                           	opt stack 0
  2238  0000CF                     LCD_FillRectangle@i:
  2239                           	opt stack 0
  2240  0000CF                     LED_Set@pLED:
  2241                           	opt stack 0
  2242  0000CF                     irobot_query_and_update@packetIDs:
  2243                           	opt stack 0
  2244  0000CF                     printf@f:
  2245                           	opt stack 0
  2246  0000CF                     PortProperty_Valid@Errors:
  2247                           	opt stack 0
  2248                           
  2249                           ; 16 bytes @ 0x15
  2250  0000CF                     	ds	1
  2251  0000D0                     LCD_FillRectangle@j:
  2252                           	opt stack 0
  2253  0000D0                     Port_TogglePin@pPin:
  2254                           	opt stack 0
  2255  0000D0                     HMI_SetNumber@pInput:
  2256                           	opt stack 0
  2257  0000D0                     Timer2_Init@pCPUClock:
  2258                           	opt stack 0
  2259                           
  2260                           ; 4 bytes @ 0x16
  2261  0000D0                     	ds	1
  2262  0000D1                     Port_TogglePin@Value:
  2263                           	opt stack 0
  2264  0000D1                     irobot_query_and_update@streamSize:
  2265                           	opt stack 0
  2266  0000D1                     ___fldiv@bexp:
  2267                           	opt stack 0
  2268  0000D1                     ___flmul@temp:
  2269                           	opt stack 0
  2270  0000D1                     Timer0_Init@DIVIDE:
  2271                           	opt stack 0
  2272                           
  2273                           ; 4 bytes @ 0x17
  2274  0000D1                     	ds	1
  2275  0000D2                     LED_Toggle@pLED:
  2276                           	opt stack 0
  2277  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2278                           	opt stack 0
  2279  0000D2                     irobot_move@isScript:
  2280                           	opt stack 0
  2281  0000D2                     ___fldiv@aexp:
  2282                           	opt stack 0
  2283  0000D2                     LCD_DrawField@pSize:
  2284                           	opt stack 0
  2285                           
  2286                           ; 4 bytes @ 0x18
  2287  0000D2                     	ds	1
  2288  0000D3                     ?_ADC_Voltage:
  2289                           	opt stack 0
  2290  0000D3                     Event_DIPSwitch@pState:
  2291                           	opt stack 0
  2292  0000D3                     Event_TestButton@pState:
  2293                           	opt stack 0
  2294  0000D3                     irobot_query_and_update@packetVariable:
  2295                           	opt stack 0
  2296  0000D3                     irobot_stop_motion@isScript:
  2297                           	opt stack 0
  2298  0000D3                     ADC_Voltage@pInput:
  2299                           	opt stack 0
  2300  0000D3                     irobot_move_straight@straightSpeed:
  2301                           	opt stack 0
  2302                           
  2303                           ; 2 bytes @ 0x19
  2304  0000D3                     	ds	1
  2305  0000D4                     Event_DIPSwitch@Bar:
  2306                           	opt stack 0
  2307  0000D4                     irobot_query_and_update@j:
  2308                           	opt stack 0
  2309  0000D4                     Timer2_Init@DIVIDE:
  2310                           	opt stack 0
  2311                           
  2312                           ; 4 bytes @ 0x1A
  2313  0000D4                     	ds	1
  2314  0000D5                     irobot_query_and_update@startIndex:
  2315                           	opt stack 0
  2316  0000D5                     Button_Poll@pButton:
  2317                           	opt stack 0
  2318  0000D5                     Motor_Speed@pMotor:
  2319                           	opt stack 0
  2320                           
  2321                           ; 2 bytes @ 0x1B
  2322  0000D5                     	ds	1
  2323  0000D6                     ??_LCD_DrawField:
  2324  0000D6                     irobot_query_and_update@i:
  2325                           	opt stack 0
  2326                           
  2327                           ; 1 bytes @ 0x1C
  2328  0000D6                     	ds	1
  2329  0000D7                     ??_printf:
  2330  0000D7                     ??_ADC_Voltage:
  2331  0000D7                     Button_Poll@pIncrement:
  2332                           	opt stack 0
  2333  0000D7                     Motor_Speed@pFrequency:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x1D
  2337  0000D7                     	ds	1
  2338  0000D8                     ??_Button_Poll:
  2339  0000D8                     printf@prec:
  2340                           	opt stack 0
  2341  0000D8                     LCD_DrawField@count:
  2342                           	opt stack 0
  2343                           
  2344                           ; 2 bytes @ 0x1E
  2345  0000D8                     	ds	1
  2346  0000D9                     printf@flag:
  2347                           	opt stack 0
  2348  0000D9                     ADC_Voltage@max:
  2349                           	opt stack 0
  2350                           
  2351                           ; 4 bytes @ 0x1F
  2352  0000D9                     	ds	1
  2353  0000DA                     LCD_DrawField@xmax:
  2354                           	opt stack 0
  2355  0000DA                     printf@ap:
  2356                           	opt stack 0
  2357                           
  2358                           ; 2 bytes @ 0x20
  2359  0000DA                     	ds	1
  2360  0000DB                     LCD_DrawField@ymax:
  2361                           	opt stack 0
  2362                           
  2363                           ; 1 bytes @ 0x21
  2364  0000DB                     	ds	1
  2365  0000DC                     LCD_DrawField@i:
  2366                           	opt stack 0
  2367  0000DC                     Port_Set@TypeRequired:
  2368                           	opt stack 0
  2369  0000DC                     printf@val:
  2370                           	opt stack 0
  2371                           
  2372                           ; 2 bytes @ 0x22
  2373  0000DC                     	ds	1
  2374  0000DD                     ??_Console_Render:
  2375  0000DD                     Button_Poll@Pin:
  2376                           	opt stack 0
  2377  0000DD                     ADC_Voltage@ref:
  2378                           	opt stack 0
  2379                           
  2380                           ; 4 bytes @ 0x23
  2381  0000DD                     	ds	1
  2382  0000DE                     printf@c:
  2383                           	opt stack 0
  2384  0000DE                     Port_Set@TypeActual:
  2385                           	opt stack 0
  2386                           
  2387                           ; 2 bytes @ 0x24
  2388  0000DE                     	ds	1
  2389  0000DF                     PortProperty_Valid@Pair:
  2390                           	opt stack 0
  2391  0000DF                     Console_Render@temp:
  2392                           	opt stack 0
  2393                           
  2394                           ; 1 bytes @ 0x25
  2395  0000DF                     	ds	1
  2396  0000E0                     Port_Set@Type:
  2397                           	opt stack 0
  2398  0000E0                     Port_CheckPairType@pInput:
  2399                           	opt stack 0
  2400  0000E0                     Port_SetPinType@pInput:
  2401                           	opt stack 0
  2402  0000E0                     Console_Render@lCursor:
  2403                           	opt stack 0
  2404                           
  2405                           ; 4 bytes @ 0x26
  2406  0000E0                     	ds	1
  2407  0000E1                     ADC_Voltage@output:
  2408                           	opt stack 0
  2409                           
  2410                           ; 4 bytes @ 0x27
  2411  0000E1                     	ds	1
  2412  0000E2                     Port_CheckPairType@pPair:
  2413                           	opt stack 0
  2414  0000E2                     Port_SetPinType@pPin:
  2415                           	opt stack 0
  2416                           
  2417                           ; 1 bytes @ 0x28
  2418  0000E2                     	ds	1
  2419  0000E3                     Port_CheckPairType@pDrive:
  2420                           	opt stack 0
  2421  0000E3                     Port_SetPinType@pType:
  2422                           	opt stack 0
  2423                           
  2424                           ; 1 bytes @ 0x29
  2425  0000E3                     	ds	1
  2426  0000E4                     Port_CheckPairType@Pin1:
  2427                           	opt stack 0
  2428  0000E4                     Port_SetPinType@Output:
  2429                           	opt stack 0
  2430  0000E4                     Console_Render@x:
  2431                           	opt stack 0
  2432                           
  2433                           ; 1 bytes @ 0x2A
  2434  0000E4                     	ds	1
  2435  0000E5                     ?___fltol:
  2436                           	opt stack 0
  2437  0000E5                     Port_CheckPairType@Pin2:
  2438                           	opt stack 0
  2439  0000E5                     Console_Render@y:
  2440                           	opt stack 0
  2441  0000E5                     Port_SetPinType@Props:
  2442                           	opt stack 0
  2443  0000E5                     ___fltol@f1:
  2444                           	opt stack 0
  2445                           
  2446                           ; 4 bytes @ 0x2B
  2447  0000E5                     	ds	1
  2448  0000E6                     Port_CheckPairType@Output:
  2449                           	opt stack 0
  2450  0000E6                     mode2@dist:
  2451                           	opt stack 0
  2452                           
  2453                           ; 2 bytes @ 0x2C
  2454  0000E6                     	ds	1
  2455  0000E7                     LED_Init@pLED:
  2456                           	opt stack 0
  2457  0000E7                     Port_CheckPairType@Props:
  2458                           	opt stack 0
  2459  0000E7                     Motor_Init@pMotor:
  2460                           	opt stack 0
  2461  0000E7                     SPI_Init@pClock:
  2462                           	opt stack 0
  2463                           
  2464                           ; 4 bytes @ 0x2D
  2465  0000E7                     	ds	2
  2466  0000E9                     ??___fltol:
  2467  0000E9                     Port_CheckQuadType@pInput:
  2468                           	opt stack 0
  2469  0000E9                     Motor_Init@pAddress:
  2470                           	opt stack 0
  2471                           
  2472                           ; 2 bytes @ 0x2F
  2473  0000E9                     	ds	2
  2474  0000EB                     Port_CheckQuadType@pQuad:
  2475                           	opt stack 0
  2476  0000EB                     SPI_Init@pChannel:
  2477                           	opt stack 0
  2478                           
  2479                           ; 1 bytes @ 0x31
  2480  0000EB                     	ds	1
  2481  0000EC                     Port_CheckQuadType@pDrive:
  2482                           	opt stack 0
  2483  0000EC                     SPI_Init@pMode:
  2484                           	opt stack 0
  2485                           
  2486                           ; 1 bytes @ 0x32
  2487  0000EC                     	ds	1
  2488  0000ED                     Port_CheckQuadType@Pair1:
  2489                           	opt stack 0
  2490  0000ED                     ___fltol@sign1:
  2491                           	opt stack 0
  2492  0000ED                     SPI_Init@pInput:
  2493                           	opt stack 0
  2494                           
  2495                           ; 2 bytes @ 0x33
  2496  0000ED                     	ds	1
  2497  0000EE                     Port_CheckQuadType@Pair2:
  2498                           	opt stack 0
  2499  0000EE                     ___fltol@exp1:
  2500                           	opt stack 0
  2501                           
  2502                           ; 1 bytes @ 0x34
  2503  0000EE                     	ds	1
  2504  0000EF                     ??_LCD_Init:
  2505  0000EF                     ??_mode1:
  2506  0000EF                     Port_CheckQuadType@Output:
  2507                           	opt stack 0
  2508                           
  2509                           ; 1 bytes @ 0x35
  2510  0000EF                     	ds	1
  2511  0000F0                     Port_CheckPortType@pInput:
  2512                           	opt stack 0
  2513  0000F0                     Port_SetQuadType@pInput:
  2514                           	opt stack 0
  2515                           
  2516                           ; 2 bytes @ 0x36
  2517  0000F0                     	ds	1
  2518  0000F1                     LCD_Init@i:
  2519                           	opt stack 0
  2520  0000F1                     mode1@moveto:
  2521                           	opt stack 0
  2522                           
  2523                           ; 2 bytes @ 0x37
  2524  0000F1                     	ds	1
  2525  0000F2                     Port_CheckPortType@pDrive:
  2526                           	opt stack 0
  2527  0000F2                     Port_SetQuadType@pQuad:
  2528                           	opt stack 0
  2529                           
  2530                           ; 1 bytes @ 0x38
  2531  0000F2                     	ds	1
  2532  0000F3                     Port_CheckPortType@Output:
  2533                           	opt stack 0
  2534  0000F3                     Port_SetQuadType@pType:
  2535                           	opt stack 0
  2536  0000F3                     _mode1$15571:
  2537                           	opt stack 0
  2538                           
  2539                           ; 4 bytes @ 0x39
  2540  0000F3                     	ds	1
  2541  0000F4                     Port_SetQuadType@Output:
  2542                           	opt stack 0
  2543  0000F4                     Port_SetType@pInput:
  2544                           	opt stack 0
  2545                           
  2546                           ; 2 bytes @ 0x3A
  2547  0000F4                     	ds	1
  2548  0000F5                     HMI_Init@in:
  2549                           	opt stack 0
  2550                           
  2551                           ; 2 bytes @ 0x3B
  2552  0000F5                     	ds	1
  2553  0000F6                     Port_SetType@pType:
  2554                           	opt stack 0
  2555                           
  2556                           ; 1 bytes @ 0x3C
  2557  0000F6                     	ds	1
  2558  0000F7                     ??_Port_SetType:
  2559                           
  2560                           ; 1 bytes @ 0x3D
  2561  0000F7                     	ds	2
  2562  0000F9                     tblptru	equ	0xFF8
  2563                           tblptrh	equ	0xFF7
  2564                           tblptrl	equ	0xFF6
  2565                           tablat	equ	0xFF5
  2566                           postinc0	equ	0xFEE
  2567                           wreg	equ	0xFE8
  2568                           postdec1	equ	0xFE5
  2569                           fsr1h	equ	0xFE2
  2570                           fsr1l	equ	0xFE1
  2571                           
  2572                           ; 1 bytes @ 0x3F
  2573                           
  2574                           	psect	cstackCOMRAM
  2575  000001                     __pcstackCOMRAM:
  2576                           	opt stack 0
  2577  000001                     i2Byte_SetBit@pInput:
  2578                           	opt stack 0
  2579  000001                     i2Byte_GetZone@pInput:
  2580                           	opt stack 0
  2581  000001                     i2delay_us@us:
  2582                           	opt stack 0
  2583  000001                     i2MXK_Queue@pCallback:
  2584                           	opt stack 0
  2585                           
  2586                           ; 3 bytes @ 0x0
  2587  000001                     	ds	2
  2588  000003                     i2Byte_SetBit@pBit:
  2589                           	opt stack 0
  2590  000003                     i2Byte_GetZone@pMax:
  2591                           	opt stack 0
  2592  000003                     i2delay_us@u:
  2593                           	opt stack 0
  2594                           
  2595                           ; 4 bytes @ 0x2
  2596  000003                     	ds	1
  2597  000004                     i2Byte_SetBit@pValue:
  2598                           	opt stack 0
  2599  000004                     i2Byte_GetZone@pChunk:
  2600                           	opt stack 0
  2601                           
  2602                           ; 1 bytes @ 0x3
  2603  000004                     	ds	1
  2604  000005                     ??i2_Byte_SetBit:
  2605  000005                     i2Byte_GetZone@pChunkSize:
  2606                           	opt stack 0
  2607                           
  2608                           ; 1 bytes @ 0x4
  2609  000005                     	ds	1
  2610  000006                     ??i2_Byte_GetZone:
  2611                           
  2612                           ; 1 bytes @ 0x5
  2613  000006                     	ds	1
  2614  000007                     i2Byte_GetZone@MASK:
  2615                           	opt stack 0
  2616  000007                     i2MXK_SwitchTo@CUR:
  2617                           	opt stack 0
  2618                           
  2619                           ; 1 bytes @ 0x6
  2620  000007                     	ds	1
  2621  000008                     i2Byte_GetZone@Offset:
  2622                           	opt stack 0
  2623  000008                     i2MXK_SwitchTo@pModule:
  2624                           	opt stack 0
  2625                           
  2626                           ; 1 bytes @ 0x7
  2627  000008                     	ds	1
  2628  000009                     i2Byte_GetZone@Output:
  2629                           	opt stack 0
  2630                           
  2631                           ; 1 bytes @ 0x8
  2632  000009                     	ds	1
  2633  00000A                     i2Byte_GetPair@pInput:
  2634                           	opt stack 0
  2635                           
  2636                           ; 2 bytes @ 0x9
  2637  00000A                     	ds	2
  2638  00000C                     i2Byte_GetPair@pPair:
  2639                           	opt stack 0
  2640                           
  2641                           ; 1 bytes @ 0xB
  2642  00000C                     	ds	1
  2643  00000D                     i2Word_GetPair@pInput:
  2644                           	opt stack 0
  2645                           
  2646                           ; 2 bytes @ 0xC
  2647  00000D                     	ds	2
  2648  00000F                     i2Word_GetPair@pPair:
  2649                           	opt stack 0
  2650                           
  2651                           ; 1 bytes @ 0xE
  2652  00000F                     	ds	1
  2653  000010                     i2Port_SetPin@pInput:
  2654                           	opt stack 0
  2655                           
  2656                           ; 2 bytes @ 0xF
  2657  000010                     	ds	2
  2658  000012                     i2Port_SetPin@pPin:
  2659                           	opt stack 0
  2660                           
  2661                           ; 1 bytes @ 0x11
  2662  000012                     	ds	1
  2663  000013                     i2Port_SetPin@pValue:
  2664                           	opt stack 0
  2665                           
  2666                           ; 1 bytes @ 0x12
  2667  000013                     	ds	1
  2668  000014                     i2Port_SetPin@Type:
  2669                           	opt stack 0
  2670                           
  2671                           ; 1 bytes @ 0x13
  2672  000014                     	ds	1
  2673  000015                     
  2674                           ; 1 bytes @ 0x14
  2675  000015                     	ds	2
  2676  000017                     ??_ISR_Function:
  2677                           
  2678                           ; 1 bytes @ 0x16
  2679  000017                     	ds	18
  2680                           tblptru	equ	0xFF8
  2681                           tblptrh	equ	0xFF7
  2682                           tblptrl	equ	0xFF6
  2683                           tablat	equ	0xFF5
  2684                           postinc0	equ	0xFEE
  2685                           wreg	equ	0xFE8
  2686                           postdec1	equ	0xFE5
  2687                           fsr1h	equ	0xFE2
  2688                           fsr1l	equ	0xFE1
  2689                           
  2690 ;;
  2691 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2692 ;;
  2693 ;; *************** function _main *****************
  2694 ;; Defined at:
  2695 ;;		line 262 in file "main.c"
  2696 ;; Parameters:    Size  Location     Type
  2697 ;;		None
  2698 ;; Auto vars:     Size  Location     Type
  2699 ;;		None
  2700 ;; Return value:  Size  Location     Type
  2701 ;;                  1    wreg      void 
  2702 ;; Registers used:
  2703 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2704 ;; Tracked objects:
  2705 ;;		On entry : 0/0
  2706 ;;		On exit  : 0/0
  2707 ;;		Unchanged: 0/0
  2708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2709 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2711 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2712 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2713 ;;Total ram usage:        2 bytes
  2714 ;; Hardware stack levels required when called:   18
  2715 ;; This function calls:
  2716 ;;		_getMode
  2717 ;;		_init
  2718 ;;		_mode1
  2719 ;;		_mode2
  2720 ;;		_mode3
  2721 ;;		_mode4
  2722 ;; This function is called by:
  2723 ;;		Startup code after reset
  2724 ;; This function uses a non-reentrant model
  2725 ;;
  2726                           
  2727                           	psect	text0
  2728  01552A                     __ptext0:
  2729                           	opt stack 0
  2730  01552A                     _main:
  2731                           	opt stack 13
  2732                           
  2733                           ;main.c: 263: init();
  2734                           
  2735                           ;incstack = 0
  2736  01552A  ECA4  F09F         	call	_init	;wreg free
  2737  01552E                     
  2738                           ;main.c: 265: getMode();
  2739  01552E  ECF5  F098         	call	_getMode	;wreg free
  2740                           
  2741                           ;main.c: 266: switch (mode) {
  2742  015532  D00C               	goto	l2368
  2743  015534                     
  2744                           ;main.c: 268: mode1();
  2745  015534  EC53  F082         	call	_mode1	;wreg free
  2746                           
  2747                           ;main.c: 269: break;
  2748  015538  D7FA               	goto	l2367
  2749  01553A                     
  2750                           ;main.c: 271: mode2();
  2751  01553A  EC47  F098         	call	_mode2	;wreg free
  2752                           
  2753                           ;main.c: 272: break;
  2754  01553E  D7F7               	goto	l2367
  2755  015540                     
  2756                           ;main.c: 274: mode3();
  2757  015540  ECD2  F0B0         	call	_mode3	;wreg free
  2758                           
  2759                           ;main.c: 275: break;
  2760  015544  D7F4               	goto	l2367
  2761  015546                     
  2762                           ;main.c: 277: mode4();
  2763  015546  EC02  F00A         	call	_mode4	;wreg free
  2764                           
  2765                           ;main.c: 279: }
  2766                           
  2767                           ;main.c: 278: break;
  2768  01554A  D7F1               	goto	l2367
  2769  01554C                     l2368:
  2770  01554C  C077  F3F8         	movff	_mode,??_main
  2771  015550  C078  F3F9         	movff	_mode+1,??_main+1
  2772                           
  2773                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2774                           ; Switch size 1, requested type "space"
  2775                           ; Number of cases is 1, Range of values is 0 to 0
  2776                           ; switch strategies available:
  2777                           ; Name         Instructions Cycles
  2778                           ; simple_byte            4     3 (average)
  2779                           ;	Chosen strategy is simple_byte
  2780  015554  0103               	movlb	3	; () banked
  2781  015556  51F9               	movf	(??_main+1)& (0+255),w,b
  2782  015558  0A00               	xorlw	0	; case 0
  2783  01555A  A4D8               	btfss	status,2,c
  2784  01555C  D7E8               	goto	l2367
  2785                           
  2786                           ; BSR set to: 3
  2787                           ; Switch size 1, requested type "space"
  2788                           ; Number of cases is 4, Range of values is 1 to 4
  2789                           ; switch strategies available:
  2790                           ; Name         Instructions Cycles
  2791                           ; simple_byte           13     7 (average)
  2792                           ;	Chosen strategy is simple_byte
  2793  01555E  0103               	movlb	3	; () banked
  2794  015560  51F8               	movf	??_main& (0+255),w,b
  2795  015562  0A01               	xorlw	1	; case 1
  2796  015564  B4D8               	btfsc	status,2,c
  2797  015566  D7E6               	goto	l2369
  2798  015568  0A03               	xorlw	3	; case 2
  2799  01556A  B4D8               	btfsc	status,2,c
  2800  01556C  D7E6               	goto	l2371
  2801  01556E  0A01               	xorlw	1	; case 3
  2802  015570  B4D8               	btfsc	status,2,c
  2803  015572  D7E6               	goto	l2372
  2804  015574  0A07               	xorlw	7	; case 4
  2805  015576  B4D8               	btfsc	status,2,c
  2806  015578  D7E6               	goto	l2373
  2807                           
  2808                           ; BSR set to: 3
  2809                           ;main.c: 280: }
  2810  01557A  D7D9               	goto	l2367
  2811  01557C                     __end_of_main:
  2812                           	opt stack 0
  2813                           tblptru	equ	0xFF8
  2814                           tblptrh	equ	0xFF7
  2815                           tblptrl	equ	0xFF6
  2816                           tablat	equ	0xFF5
  2817                           postinc0	equ	0xFEE
  2818                           wreg	equ	0xFE8
  2819                           postdec1	equ	0xFE5
  2820                           fsr1h	equ	0xFE2
  2821                           fsr1l	equ	0xFE1
  2822                           status	equ	0xFD8
  2823                           
  2824 ;; *************** function _mode4 *****************
  2825 ;; Defined at:
  2826 ;;		line 257 in file "main.c"
  2827 ;; Parameters:    Size  Location     Type
  2828 ;;		None
  2829 ;; Auto vars:     Size  Location     Type
  2830 ;;		None
  2831 ;; Return value:  Size  Location     Type
  2832 ;;                  1    wreg      void 
  2833 ;; Registers used:
  2834 ;;		None
  2835 ;; Tracked objects:
  2836 ;;		On entry : 0/0
  2837 ;;		On exit  : 0/0
  2838 ;;		Unchanged: 0/0
  2839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2841 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2843 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2844 ;;Total ram usage:        0 bytes
  2845 ;; Hardware stack levels used:    1
  2846 ;; Hardware stack levels required when called:    7
  2847 ;; This function calls:
  2848 ;;		Nothing
  2849 ;; This function is called by:
  2850 ;;		_main
  2851 ;; This function uses a non-reentrant model
  2852 ;;
  2853                           
  2854                           	psect	text1
  2855  001404                     __ptext1:
  2856                           	opt stack 0
  2857  001404                     _mode4:
  2858                           	opt stack 23
  2859                           
  2860                           ; BSR set to: 3
  2861                           ;incstack = 0
  2862  001404  0012               	return		;funcret
  2863  001406                     __end_of_mode4:
  2864                           	opt stack 0
  2865                           tblptru	equ	0xFF8
  2866                           tblptrh	equ	0xFF7
  2867                           tblptrl	equ	0xFF6
  2868                           tablat	equ	0xFF5
  2869                           postinc0	equ	0xFEE
  2870                           wreg	equ	0xFE8
  2871                           postdec1	equ	0xFE5
  2872                           fsr1h	equ	0xFE2
  2873                           fsr1l	equ	0xFE1
  2874                           status	equ	0xFD8
  2875                           
  2876 ;; *************** function _mode3 *****************
  2877 ;; Defined at:
  2878 ;;		line 252 in file "main.c"
  2879 ;; Parameters:    Size  Location     Type
  2880 ;;		None
  2881 ;; Auto vars:     Size  Location     Type
  2882 ;;		None
  2883 ;; Return value:  Size  Location     Type
  2884 ;;                  1    wreg      void 
  2885 ;; Registers used:
  2886 ;;		None
  2887 ;; Tracked objects:
  2888 ;;		On entry : 0/0
  2889 ;;		On exit  : 0/0
  2890 ;;		Unchanged: 0/0
  2891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2893 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2895 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2896 ;;Total ram usage:        0 bytes
  2897 ;; Hardware stack levels used:    1
  2898 ;; Hardware stack levels required when called:    7
  2899 ;; This function calls:
  2900 ;;		Nothing
  2901 ;; This function is called by:
  2902 ;;		_main
  2903 ;; This function uses a non-reentrant model
  2904 ;;
  2905                           
  2906                           	psect	text2
  2907  0161A4                     __ptext2:
  2908                           	opt stack 0
  2909  0161A4                     _mode3:
  2910                           	opt stack 23
  2911                           
  2912                           ;incstack = 0
  2913  0161A4  0012               	return		;funcret
  2914  0161A6                     __end_of_mode3:
  2915                           	opt stack 0
  2916                           tblptru	equ	0xFF8
  2917                           tblptrh	equ	0xFF7
  2918                           tblptrl	equ	0xFF6
  2919                           tablat	equ	0xFF5
  2920                           postinc0	equ	0xFEE
  2921                           wreg	equ	0xFE8
  2922                           postdec1	equ	0xFE5
  2923                           fsr1h	equ	0xFE2
  2924                           fsr1l	equ	0xFE1
  2925                           status	equ	0xFD8
  2926                           
  2927 ;; *************** function _mode2 *****************
  2928 ;; Defined at:
  2929 ;;		line 215 in file "main.c"
  2930 ;; Parameters:    Size  Location     Type
  2931 ;;		None
  2932 ;; Auto vars:     Size  Location     Type
  2933 ;;  dist            2   44[BANK0 ] int 
  2934 ;; Return value:  Size  Location     Type
  2935 ;;                  1    wreg      void 
  2936 ;; Registers used:
  2937 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2938 ;; Tracked objects:
  2939 ;;		On entry : 0/0
  2940 ;;		On exit  : 0/0
  2941 ;;		Unchanged: 0/0
  2942 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2944 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2946 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2947 ;;Total ram usage:        2 bytes
  2948 ;; Hardware stack levels used:    1
  2949 ;; Hardware stack levels required when called:   16
  2950 ;; This function calls:
  2951 ;;		_Console_Render
  2952 ;;		_HMI_DIPSwitch
  2953 ;;		_HMI_DownSwitch
  2954 ;;		_HMI_LeftSwitch
  2955 ;;		_HMI_Poll
  2956 ;;		_HMI_RightSwitch
  2957 ;;		_HMI_UpSwitch
  2958 ;;		_MXK_DIPSwitch
  2959 ;;		_MXK_Dequeue
  2960 ;;		_MXK_Release
  2961 ;;		_MXK_SwitchTo
  2962 ;;		_MXK_TestButton
  2963 ;;		_irobot_move_straight
  2964 ;;		_irobot_song_play
  2965 ;;		_irobot_stop_motion
  2966 ;;		_printf
  2967 ;;		_update_angle
  2968 ;;		_update_bump_and_cliff
  2969 ;;		_update_distance
  2970 ;; This function is called by:
  2971 ;;		_main
  2972 ;; This function uses a non-reentrant model
  2973 ;;
  2974                           
  2975                           	psect	text3
  2976  01308E                     __ptext3:
  2977                           	opt stack 0
  2978  01308E                     _mode2:
  2979                           	opt stack 14
  2980                           
  2981                           ;main.c: 216: update_bump_and_cliff();
  2982                           
  2983                           ;incstack = 0
  2984  01308E  EC74  F0AD         	call	_update_bump_and_cliff	;wreg free
  2985                           
  2986                           ;main.c: 217: update_distance();
  2987  013092  EC44  F0B0         	call	_update_distance	;wreg free
  2988                           
  2989                           ;main.c: 218: update_angle();
  2990  013096  EC4D  F0B0         	call	_update_angle	;wreg free
  2991                           
  2992                           ;main.c: 220: angleTotal += iRAngle;
  2993  01309A  0100               	movlb	0	; () banked
  2994  01309C  517D               	movf	_iRAngle& (0+255),w,b
  2995  01309E  0100               	movlb	0	; () banked
  2996  0130A0  2779               	addwf	_angleTotal& (0+255),f,b
  2997  0130A2  0100               	movlb	0	; () banked
  2998  0130A4  517E               	movf	(_iRAngle+1)& (0+255),w,b
  2999  0130A6  0100               	movlb	0	; () banked
  3000  0130A8  237A               	addwfc	(_angleTotal+1)& (0+255),f,b
  3001                           
  3002                           ; BSR set to: 0
  3003                           ;main.c: 222: if (iRBumpLeft || iRBumpRight) {
  3004  0130AA  0100               	movlb	0	; () banked
  3005  0130AC  518D               	movf	_iRBumpLeft& (0+255),w,b
  3006  0130AE  A4D8               	btfss	status,2,c
  3007  0130B0  D004               	goto	u12780
  3008                           
  3009                           ; BSR set to: 0
  3010  0130B2  0100               	movlb	0	; () banked
  3011  0130B4  518E               	movf	_iRBumpRight& (0+255),w,b
  3012  0130B6  B4D8               	btfsc	status,2,c
  3013  0130B8  D006               	goto	l2346
  3014  0130BA                     u12780:
  3015                           
  3016                           ; BSR set to: 0
  3017                           ;main.c: 223: irobot_song_play(0);
  3018                           
  3019                           ; BSR set to: 0
  3020  0130BA  0E00               	movlw	0
  3021  0130BC  EC30  F0B0         	call	_irobot_song_play
  3022                           
  3023                           ;main.c: 224: irobot_stop_motion(0);
  3024  0130C0  0E00               	movlw	0
  3025  0130C2  ECEE  F0AB         	call	_irobot_stop_motion
  3026  0130C6                     l2346:
  3027                           
  3028                           ;main.c: 225: }
  3029                           ;main.c: 226: if (angleTotal > 90) {
  3030  0130C6  0100               	movlb	0	; () banked
  3031  0130C8  BF7A               	btfsc	(_angleTotal+1)& (0+255),7,b
  3032  0130CA  D00B               	goto	l2349
  3033  0130CC  0100               	movlb	0	; () banked
  3034  0130CE  517A               	movf	(_angleTotal+1)& (0+255),w,b
  3035  0130D0  E105               	bnz	u12790
  3036  0130D2  0E5B               	movlw	91
  3037  0130D4  0100               	movlb	0	; () banked
  3038  0130D6  5D79               	subwf	_angleTotal& (0+255),w,b
  3039  0130D8  A0D8               	btfss	status,0,c
  3040  0130DA  D003               	goto	l2349
  3041  0130DC                     u12790:
  3042                           
  3043                           ; BSR set to: 0
  3044                           ;main.c: 227: irobot_stop_motion(0);
  3045  0130DC  0E00               	movlw	0
  3046  0130DE  ECEE  F0AB         	call	_irobot_stop_motion
  3047  0130E2                     l2349:
  3048                           
  3049                           ;main.c: 228: }
  3050                           ;main.c: 229: HMI_Poll();
  3051  0130E2  ECBD  F0A6         	call	_HMI_Poll	;wreg free
  3052                           
  3053                           ;main.c: 230: if (MXK_SwitchTo(eMXK_HMI)) {
  3054  0130E6  0E01               	movlw	1
  3055  0130E8  EC79  F0AC         	call	_MXK_SwitchTo
  3056  0130EC  0900               	iorlw	0
  3057  0130EE  B4D8               	btfsc	status,2,c
  3058  0130F0  0012               	return	
  3059                           
  3060                           ;main.c: 231: printf("%c", (char)35);
  3061  0130F2  0EFB               	movlw	low STR_1
  3062  0130F4  0100               	movlb	0	; () banked
  3063  0130F6  6FCF               	movwf	printf@f& (0+255),b
  3064  0130F8  0EFF               	movlw	high STR_1
  3065  0130FA  0100               	movlb	0	; () banked
  3066  0130FC  6FD0               	movwf	(printf@f+1)& (0+255),b
  3067  0130FE  0E00               	movlw	0
  3068  013100  0100               	movlb	0	; () banked
  3069  013102  6FD2               	movwf	(?_printf+3)& (0+255),b
  3070  013104  0E23               	movlw	35
  3071  013106  6FD1               	movwf	(?_printf+2)& (0+255),b
  3072  013108  EC9F  F090         	call	_printf	;wreg free
  3073                           
  3074                           ;main.c: 232: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  3075  01310C  0EBF               	movlw	low STR_2
  3076  01310E  0100               	movlb	0	; () banked
  3077  013110  6FCF               	movwf	printf@f& (0+255),b
  3078  013112  0EFF               	movlw	high STR_2
  3079  013114  0100               	movlb	0	; () banked
  3080  013116  6FD0               	movwf	(printf@f+1)& (0+255),b
  3081  013118  C07B  F0D1         	movff	_distanceTotal,?_printf+2
  3082  01311C  C07C  F0D2         	movff	_distanceTotal+1,?_printf+3
  3083  013120  C08D  F0D3         	movff	_iRBumpLeft,?_printf+4
  3084  013124  0100               	movlb	0	; () banked
  3085  013126  6BD4               	clrf	(?_printf+5)& (0+255),b
  3086  013128  C08E  F0D5         	movff	_iRBumpRight,?_printf+6
  3087  01312C  0100               	movlb	0	; () banked
  3088  01312E  6BD6               	clrf	(?_printf+7)& (0+255),b
  3089  013130  EC9F  F090         	call	_printf	;wreg free
  3090                           
  3091                           ;main.c: 233: Console_Render();
  3092  013134  ECB3  F08D         	call	_Console_Render	;wreg free
  3093                           
  3094                           ;main.c: 234: if(HMIBoard.mUp.mGetState()) {
  3095  013138  EE23  F05F         	lfsr	2,_HMIBoard+35
  3096  01313C  D801               	call	u12818
  3097  01313E  D00A               	goto	u12819
  3098  013140                     u12818:
  3099  013140  0005               	push	
  3100  013142  6EFA               	movwf	pclath,c
  3101  013144  50DE               	movf	postinc2,w,c
  3102  013146  6EFD               	movwf	tosl,c
  3103  013148  50DE               	movf	postinc2,w,c
  3104  01314A  6EFE               	movwf	tosh,c
  3105  01314C  50DE               	movf	postinc2,w,c
  3106  01314E  6EFF               	movwf	tosu,c
  3107  013150  50FA               	movf	pclath,w,c
  3108  013152  0012               	return		;indir
  3109  013154                     u12819:
  3110  013154  0900               	iorlw	0
  3111  013156  B4D8               	btfsc	status,2,c
  3112  013158  D040               	goto	l2351
  3113                           
  3114                           ;main.c: 235: int dist = 0;
  3115  01315A  0E00               	movlw	0
  3116  01315C  0100               	movlb	0	; () banked
  3117  01315E  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  3118  013160  0E00               	movlw	0
  3119  013162  6FE6               	movwf	mode2@dist& (0+255),b
  3120                           
  3121                           ; BSR set to: 0
  3122                           ;main.c: 236: irobot_move_straight(200);
  3123  013164  0E00               	movlw	0
  3124  013166  0100               	movlb	0	; () banked
  3125  013168  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3126  01316A  0EC8               	movlw	200
  3127  01316C  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3128  01316E  ECD0  F0AF         	call	_irobot_move_straight	;wreg free
  3129                           
  3130                           ;main.c: 237: while(dist<5000) {
  3131  013172  D025               	goto	l2352
  3132  013174                     
  3133                           ;main.c: 238: update_distance();
  3134  013174  EC44  F0B0         	call	_update_distance	;wreg free
  3135                           
  3136                           ;main.c: 239: dist += iRDistance;
  3137  013178  0100               	movlb	0	; () banked
  3138  01317A  517F               	movf	_iRDistance& (0+255),w,b
  3139  01317C  0100               	movlb	0	; () banked
  3140  01317E  27E6               	addwf	mode2@dist& (0+255),f,b
  3141  013180  0100               	movlb	0	; () banked
  3142  013182  5180               	movf	(_iRDistance+1)& (0+255),w,b
  3143  013184  0100               	movlb	0	; () banked
  3144  013186  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  3145                           
  3146                           ; BSR set to: 0
  3147                           ;main.c: 240: printf("%c",(char)35);
  3148  013188  0EFB               	movlw	low STR_1
  3149  01318A  0100               	movlb	0	; () banked
  3150  01318C  6FCF               	movwf	printf@f& (0+255),b
  3151  01318E  0EFF               	movlw	high STR_1
  3152  013190  0100               	movlb	0	; () banked
  3153  013192  6FD0               	movwf	(printf@f+1)& (0+255),b
  3154  013194  0E00               	movlw	0
  3155  013196  0100               	movlb	0	; () banked
  3156  013198  6FD2               	movwf	(?_printf+3)& (0+255),b
  3157  01319A  0E23               	movlw	35
  3158  01319C  6FD1               	movwf	(?_printf+2)& (0+255),b
  3159  01319E  EC9F  F090         	call	_printf	;wreg free
  3160                           
  3161                           ;main.c: 241: printf("Distance: %d\n",dist);
  3162  0131A2  0EED               	movlw	low STR_6
  3163  0131A4  0100               	movlb	0	; () banked
  3164  0131A6  6FCF               	movwf	printf@f& (0+255),b
  3165  0131A8  0EFF               	movlw	high STR_6
  3166  0131AA  0100               	movlb	0	; () banked
  3167  0131AC  6FD0               	movwf	(printf@f+1)& (0+255),b
  3168  0131AE  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  3169  0131B2  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  3170  0131B6  EC9F  F090         	call	_printf	;wreg free
  3171                           
  3172                           ;main.c: 242: Console_Render();
  3173  0131BA  ECB3  F08D         	call	_Console_Render	;wreg free
  3174  0131BE                     l2352:
  3175  0131BE  0100               	movlb	0	; () banked
  3176  0131C0  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  3177  0131C2  D7D8               	goto	l2353
  3178  0131C4  0E88               	movlw	136
  3179  0131C6  0100               	movlb	0	; () banked
  3180  0131C8  5DE6               	subwf	mode2@dist& (0+255),w,b
  3181  0131CA  0E13               	movlw	19
  3182  0131CC  0100               	movlb	0	; () banked
  3183  0131CE  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  3184  0131D0  A0D8               	btfss	status,0,c
  3185  0131D2  D7D0               	goto	l2353
  3186                           
  3187                           ; BSR set to: 0
  3188                           ;main.c: 243: }
  3189                           ;main.c: 244: irobot_stop_motion(0);
  3190                           
  3191                           ; BSR set to: 0
  3192  0131D4  0E00               	movlw	0
  3193  0131D6  ECEE  F0AB         	call	_irobot_stop_motion
  3194  0131DA                     l2351:
  3195                           
  3196                           ;main.c: 245: }
  3197                           ;main.c: 246: if (MXK_Release())
  3198  0131DA  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3199  0131DE  0900               	iorlw	0
  3200  0131E0  B4D8               	btfsc	status,2,c
  3201  0131E2  0012               	return	
  3202                           
  3203                           ;main.c: 247: MXK_Dequeue();
  3204  0131E4  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3205  0131E8  0012               	return	
  3206  0131EA                     __end_of_mode2:
  3207                           	opt stack 0
  3208                           tosu	equ	0xFFF
  3209                           tosh	equ	0xFFE
  3210                           tosl	equ	0xFFD
  3211                           pclath	equ	0xFFA
  3212                           tblptru	equ	0xFF8
  3213                           tblptrh	equ	0xFF7
  3214                           tblptrl	equ	0xFF6
  3215                           tablat	equ	0xFF5
  3216                           postinc0	equ	0xFEE
  3217                           wreg	equ	0xFE8
  3218                           postdec1	equ	0xFE5
  3219                           fsr1h	equ	0xFE2
  3220                           fsr1l	equ	0xFE1
  3221                           postinc2	equ	0xFDE
  3222                           status	equ	0xFD8
  3223                           
  3224 ;; *************** function _irobot_move_straight *****************
  3225 ;; Defined at:
  3226 ;;		line 303 in file "Library/iRobotSerial.c"
  3227 ;; Parameters:    Size  Location     Type
  3228 ;;  straightSpee    2   25[BANK0 ] short 
  3229 ;; Auto vars:     Size  Location     Type
  3230 ;;		None
  3231 ;; Return value:  Size  Location     Type
  3232 ;;                  1    wreg      void 
  3233 ;; Registers used:
  3234 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  3235 ;; Tracked objects:
  3236 ;;		On entry : 0/0
  3237 ;;		On exit  : 0/0
  3238 ;;		Unchanged: 0/0
  3239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3240 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3244 ;;Total ram usage:        2 bytes
  3245 ;; Hardware stack levels used:    1
  3246 ;; Hardware stack levels required when called:    9
  3247 ;; This function calls:
  3248 ;;		_irobot_move
  3249 ;; This function is called by:
  3250 ;;		_mode2
  3251 ;; This function uses a non-reentrant model
  3252 ;;
  3253                           
  3254                           	psect	text4
  3255  015FA0                     __ptext4:
  3256                           	opt stack 0
  3257  015FA0                     _irobot_move_straight:
  3258                           	opt stack 20
  3259                           
  3260                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  3261                           
  3262                           ;incstack = 0
  3263  015FA0  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  3264  015FA4  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  3265  015FA8  0E7F               	movlw	127
  3266  015FAA  0100               	movlb	0	; () banked
  3267  015FAC  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  3268  015FAE  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  3269  015FB0  0E00               	movlw	0
  3270  015FB2  EC5C  F0A0         	call	_irobot_move
  3271  015FB6  0012               	return		;funcret
  3272  015FB8                     __end_of_irobot_move_straight:
  3273                           	opt stack 0
  3274                           tosu	equ	0xFFF
  3275                           tosh	equ	0xFFE
  3276                           tosl	equ	0xFFD
  3277                           pclath	equ	0xFFA
  3278                           tblptru	equ	0xFF8
  3279                           tblptrh	equ	0xFF7
  3280                           tblptrl	equ	0xFF6
  3281                           tablat	equ	0xFF5
  3282                           postinc0	equ	0xFEE
  3283                           wreg	equ	0xFE8
  3284                           postdec1	equ	0xFE5
  3285                           fsr1h	equ	0xFE2
  3286                           fsr1l	equ	0xFE1
  3287                           postinc2	equ	0xFDE
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function _mode1 *****************
  3291 ;; Defined at:
  3292 ;;		line 131 in file "main.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;		None
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  moveto          2   55[BANK0 ] int 
  3297 ;; Return value:  Size  Location     Type
  3298 ;;                  1    wreg      void 
  3299 ;; Registers used:
  3300 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3301 ;; Tracked objects:
  3302 ;;		On entry : 0/0
  3303 ;;		On exit  : 0/0
  3304 ;;		Unchanged: 0/0
  3305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3306 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3307 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;Total ram usage:        8 bytes
  3311 ;; Hardware stack levels used:    1
  3312 ;; Hardware stack levels required when called:   16
  3313 ;; This function calls:
  3314 ;;		_ADC_Start
  3315 ;;		_ADC_Voltage
  3316 ;;		_Console_Render
  3317 ;;		_HMI_Poll
  3318 ;;		_HMI_Render
  3319 ;;		_HMI_SetNumber
  3320 ;;		_MXK_Dequeue
  3321 ;;		_MXK_Release
  3322 ;;		_MXK_SwitchTo
  3323 ;;		_Motor_Move
  3324 ;;		_Motor_Speed
  3325 ;;		___fldiv
  3326 ;;		___fltol
  3327 ;;		_irobot_song_play
  3328 ;;		_irobot_stop_motion
  3329 ;;		_printf
  3330 ;;		_update_angle
  3331 ;;		_update_bump_and_cliff
  3332 ;;		_update_distance
  3333 ;; This function is called by:
  3334 ;;		_main
  3335 ;; This function uses a non-reentrant model
  3336 ;;
  3337                           
  3338                           	psect	text5
  3339  0104A6                     __ptext5:
  3340                           	opt stack 0
  3341  0104A6                     _mode1:
  3342                           	opt stack 14
  3343                           
  3344                           ;main.c: 132: update_bump_and_cliff();
  3345                           
  3346                           ;incstack = 0
  3347  0104A6  EC74  F0AD         	call	_update_bump_and_cliff	;wreg free
  3348                           
  3349                           ;main.c: 133: update_distance();
  3350  0104AA  EC44  F0B0         	call	_update_distance	;wreg free
  3351                           
  3352                           ;main.c: 134: update_angle();
  3353  0104AE  EC4D  F0B0         	call	_update_angle	;wreg free
  3354                           
  3355                           ;main.c: 138: if (iRBumpLeft || iRBumpRight) {
  3356  0104B2  0100               	movlb	0	; () banked
  3357  0104B4  518D               	movf	_iRBumpLeft& (0+255),w,b
  3358  0104B6  A4D8               	btfss	status,2,c
  3359  0104B8  D004               	goto	u12580
  3360                           
  3361                           ; BSR set to: 0
  3362  0104BA  0100               	movlb	0	; () banked
  3363  0104BC  518E               	movf	_iRBumpRight& (0+255),w,b
  3364  0104BE  B4D8               	btfsc	status,2,c
  3365  0104C0  D006               	goto	l2316
  3366  0104C2                     u12580:
  3367                           
  3368                           ; BSR set to: 0
  3369                           ;main.c: 139: irobot_song_play(0);
  3370                           
  3371                           ; BSR set to: 0
  3372  0104C2  0E00               	movlw	0
  3373  0104C4  EC30  F0B0         	call	_irobot_song_play
  3374                           
  3375                           ;main.c: 140: irobot_stop_motion(0);
  3376  0104C8  0E00               	movlw	0
  3377  0104CA  ECEE  F0AB         	call	_irobot_stop_motion
  3378  0104CE                     l2316:
  3379                           
  3380                           ;main.c: 141: }
  3381                           ;main.c: 142: if (angleTotal > 83) {
  3382  0104CE  0100               	movlb	0	; () banked
  3383  0104D0  BF7A               	btfsc	(_angleTotal+1)& (0+255),7,b
  3384  0104D2  D00B               	goto	l2319
  3385  0104D4  0100               	movlb	0	; () banked
  3386  0104D6  517A               	movf	(_angleTotal+1)& (0+255),w,b
  3387  0104D8  E105               	bnz	u12590
  3388  0104DA  0E54               	movlw	84
  3389  0104DC  0100               	movlb	0	; () banked
  3390  0104DE  5D79               	subwf	_angleTotal& (0+255),w,b
  3391  0104E0  A0D8               	btfss	status,0,c
  3392  0104E2  D003               	goto	l2319
  3393  0104E4                     u12590:
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;main.c: 143: irobot_stop_motion(0);
  3397  0104E4  0E00               	movlw	0
  3398  0104E6  ECEE  F0AB         	call	_irobot_stop_motion
  3399  0104EA                     l2319:
  3400                           
  3401                           ;main.c: 144: }
  3402                           ;main.c: 146: if (MXK_SwitchTo(eMXK_HMI)) {
  3403  0104EA  0E01               	movlw	1
  3404  0104EC  EC79  F0AC         	call	_MXK_SwitchTo
  3405  0104F0  0900               	iorlw	0
  3406  0104F2  B4D8               	btfsc	status,2,c
  3407  0104F4  D029               	goto	l2321
  3408                           
  3409                           ;main.c: 147: printf("%c", (char)35);
  3410  0104F6  0EFB               	movlw	low STR_1
  3411  0104F8  0100               	movlb	0	; () banked
  3412  0104FA  6FCF               	movwf	printf@f& (0+255),b
  3413  0104FC  0EFF               	movlw	high STR_1
  3414  0104FE  0100               	movlb	0	; () banked
  3415  010500  6FD0               	movwf	(printf@f+1)& (0+255),b
  3416  010502  0E00               	movlw	0
  3417  010504  0100               	movlb	0	; () banked
  3418  010506  6FD2               	movwf	(?_printf+3)& (0+255),b
  3419  010508  0E23               	movlw	35
  3420  01050A  6FD1               	movwf	(?_printf+2)& (0+255),b
  3421  01050C  EC9F  F090         	call	_printf	;wreg free
  3422                           
  3423                           ;main.c: 148: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  3424  010510  0EBF               	movlw	low STR_2
  3425  010512  0100               	movlb	0	; () banked
  3426  010514  6FCF               	movwf	printf@f& (0+255),b
  3427  010516  0EFF               	movlw	high STR_2
  3428  010518  0100               	movlb	0	; () banked
  3429  01051A  6FD0               	movwf	(printf@f+1)& (0+255),b
  3430  01051C  C07B  F0D1         	movff	_distanceTotal,?_printf+2
  3431  010520  C07C  F0D2         	movff	_distanceTotal+1,?_printf+3
  3432  010524  C08D  F0D3         	movff	_iRBumpLeft,?_printf+4
  3433  010528  0100               	movlb	0	; () banked
  3434  01052A  6BD4               	clrf	(?_printf+5)& (0+255),b
  3435  01052C  C08E  F0D5         	movff	_iRBumpRight,?_printf+6
  3436  010530  0100               	movlb	0	; () banked
  3437  010532  6BD6               	clrf	(?_printf+7)& (0+255),b
  3438  010534  EC9F  F090         	call	_printf	;wreg free
  3439                           
  3440                           ;main.c: 149: Console_Render();
  3441  010538  ECB3  F08D         	call	_Console_Render	;wreg free
  3442                           
  3443                           ;main.c: 150: if (MXK_Release())
  3444  01053C  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3445  010540  0900               	iorlw	0
  3446  010542  A4D8               	btfss	status,2,c
  3447                           
  3448                           ;main.c: 151: MXK_Dequeue();
  3449  010544  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3450  010548                     l2321:
  3451                           
  3452                           ;main.c: 152: }
  3453                           ;main.c: 153: HMI_Poll();
  3454  010548  ECBD  F0A6         	call	_HMI_Poll	;wreg free
  3455                           
  3456                           ;main.c: 154: StepRotate = 0;
  3457  01054C  0E00               	movlw	0
  3458  01054E  0100               	movlb	0	; () banked
  3459  010550  6F6E               	movwf	(_StepRotate+1)& (0+255),b
  3460  010552  0E00               	movlw	0
  3461  010554  6F6D               	movwf	_StepRotate& (0+255),b
  3462                           
  3463                           ; BSR set to: 0
  3464                           ;main.c: 155: MinDist = 1000;
  3465  010556  0E03               	movlw	3
  3466  010558  0100               	movlb	0	; () banked
  3467  01055A  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3468  01055C  0EE8               	movlw	232
  3469  01055E  6FFB               	movwf	_MinDist& (0+255),b
  3470                           
  3471                           ; BSR set to: 0
  3472                           ;main.c: 156: Stepstomin = 0;
  3473  010560  0E00               	movlw	0
  3474  010562  0100               	movlb	0	; () banked
  3475  010564  6F6C               	movwf	(_Stepstomin+1)& (0+255),b
  3476  010566  0E00               	movlw	0
  3477  010568  6F6B               	movwf	_Stepstomin& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;main.c: 157: IRValue = 0;
  3481  01056A  0E00               	movlw	0
  3482  01056C  0100               	movlb	0	; () banked
  3483  01056E  6F6A               	movwf	(_IRValue+1)& (0+255),b
  3484  010570  0E00               	movlw	0
  3485  010572  6F69               	movwf	_IRValue& (0+255),b
  3486                           
  3487                           ; BSR set to: 0
  3488                           ;main.c: 158: TimerX = 8;
  3489  010574  0E00               	movlw	0
  3490  010576  0100               	movlb	0	; () banked
  3491  010578  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3492  01057A  0E08               	movlw	8
  3493  01057C  6FF9               	movwf	_TimerX& (0+255),b
  3494                           
  3495                           ;main.c: 159: while (StepRotate < 400) {
  3496  01057E  D0FF               	goto	u12700
  3497  010580                     
  3498                           ; BSR set to: 0
  3499                           ;main.c: 160: StepRotate++;
  3500                           
  3501                           ; BSR set to: 0
  3502  010580  0100               	movlb	0	; () banked
  3503  010582  4B6D               	infsnz	_StepRotate& (0+255),f,b
  3504  010584  2B6E               	incf	(_StepRotate+1)& (0+255),f,b
  3505                           
  3506                           ; BSR set to: 0
  3507                           ;main.c: 161: ADC_Start(&ADC_AN0);
  3508  010586  0EB5               	movlw	low _ADC_AN0
  3509  010588  0100               	movlb	0	; () banked
  3510  01058A  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3511  01058C  0E00               	movlw	high _ADC_AN0
  3512  01058E  0100               	movlb	0	; () banked
  3513  010590  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3514  010592  EC48  F0A5         	call	_ADC_Start	;wreg free
  3515                           
  3516                           ;main.c: 162: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3517  010596  0EB5               	movlw	low _ADC_AN0
  3518  010598  0100               	movlb	0	; () banked
  3519  01059A  6FD3               	movwf	ADC_Voltage@pInput& (0+255),b
  3520  01059C  0E00               	movlw	high _ADC_AN0
  3521  01059E  0100               	movlb	0	; () banked
  3522  0105A0  6FD4               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3523  0105A2  EC1E  F09C         	call	_ADC_Voltage	;wreg free
  3524  0105A6  C0D3  F0F3         	movff	?_ADC_Voltage,_mode1$15571
  3525  0105AA  C0D4  F0F4         	movff	?_ADC_Voltage+1,_mode1$15571+1
  3526  0105AE  C0D5  F0F5         	movff	?_ADC_Voltage+2,_mode1$15571+2
  3527  0105B2  C0D6  F0F6         	movff	?_ADC_Voltage+3,_mode1$15571+3
  3528                           
  3529                           ;main.c: 162: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3530  0105B6  C0F3  F0BE         	movff	_mode1$15571,___fldiv@a
  3531  0105BA  C0F4  F0BF         	movff	_mode1$15571+1,___fldiv@a+1
  3532  0105BE  C0F5  F0C0         	movff	_mode1$15571+2,___fldiv@a+2
  3533  0105C2  C0F6  F0C1         	movff	_mode1$15571+3,___fldiv@a+3
  3534  0105C6  0E00               	movlw	0
  3535  0105C8  0100               	movlb	0	; () banked
  3536  0105CA  6FBA               	movwf	___fldiv@b& (0+255),b
  3537  0105CC  0E00               	movlw	0
  3538  0105CE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3539  0105D0  0E6C               	movlw	108
  3540  0105D2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3541  0105D4  0E42               	movlw	66
  3542  0105D6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3543  0105D8  EC74  F086         	call	___fldiv	;wreg free
  3544  0105DC  C0BA  F0E5         	movff	?___fldiv,___fltol@f1
  3545  0105E0  C0BB  F0E6         	movff	?___fldiv+1,___fltol@f1+1
  3546  0105E4  C0BC  F0E7         	movff	?___fldiv+2,___fltol@f1+2
  3547  0105E8  C0BD  F0E8         	movff	?___fldiv+3,___fltol@f1+3
  3548  0105EC  EC34  F09A         	call	___fltol	;wreg free
  3549  0105F0  C0E5  F069         	movff	?___fltol,_IRValue
  3550  0105F4  C0E6  F06A         	movff	?___fltol+1,_IRValue+1
  3551                           
  3552                           ;main.c: 163: if (MXK_SwitchTo(eMXK_HMI)) {
  3553  0105F8  0E01               	movlw	1
  3554  0105FA  EC79  F0AC         	call	_MXK_SwitchTo
  3555  0105FE  0900               	iorlw	0
  3556  010600  B4D8               	btfsc	status,2,c
  3557  010602  D00E               	goto	l2325
  3558                           
  3559                           ;main.c: 164: HMI_SetNumber(IRValue);
  3560  010604  C069  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3561  010608  C06A  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3562  01060C  ECA2  F0AE         	call	_HMI_SetNumber	;wreg free
  3563                           
  3564                           ;main.c: 165: HMI_Render();
  3565  010610  ECDA  F0AC         	call	_HMI_Render	;wreg free
  3566                           
  3567                           ;main.c: 166: if (MXK_Release())
  3568  010614  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3569  010618  0900               	iorlw	0
  3570  01061A  A4D8               	btfss	status,2,c
  3571                           
  3572                           ;main.c: 167: MXK_Dequeue();
  3573  01061C  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3574  010620                     l2325:
  3575                           
  3576                           ;main.c: 168: }
  3577                           ;main.c: 169: if (IRValue < MinDist) {
  3578  010620  0100               	movlb	0	; () banked
  3579  010622  51FB               	movf	_MinDist& (0+255),w,b
  3580  010624  0100               	movlb	0	; () banked
  3581  010626  5D69               	subwf	_IRValue& (0+255),w,b
  3582  010628  0100               	movlb	0	; () banked
  3583  01062A  516A               	movf	(_IRValue+1)& (0+255),w,b
  3584  01062C  0A80               	xorlw	128
  3585  01062E  0100               	movlb	0	; () banked
  3586  010630  6FEF               	movwf	??_mode1& (0+255),b
  3587  010632  0100               	movlb	0	; () banked
  3588  010634  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3589  010636  0A80               	xorlw	128
  3590  010638  0100               	movlb	0	; () banked
  3591  01063A  59EF               	subwfb	??_mode1& (0+255),w,b
  3592  01063C  B0D8               	btfsc	status,0,c
  3593  01063E  D008               	goto	l2326
  3594                           
  3595                           ; BSR set to: 0
  3596                           ;main.c: 170: MinDist = IRValue;
  3597  010640  C069  F0FB         	movff	_IRValue,_MinDist
  3598  010644  C06A  F0FC         	movff	_IRValue+1,_MinDist+1
  3599                           
  3600                           ;main.c: 171: Stepstomin = StepRotate;
  3601  010648  C06D  F06B         	movff	_StepRotate,_Stepstomin
  3602  01064C  C06E  F06C         	movff	_StepRotate+1,_Stepstomin+1
  3603  010650                     l2326:
  3604                           
  3605                           ; BSR set to: 0
  3606                           ;main.c: 172: }
  3607                           ;main.c: 173: if (MXK_SwitchTo(eMXK_Motor)) {
  3608                           
  3609                           ; BSR set to: 0
  3610  010650  0E08               	movlw	8
  3611  010652  EC79  F0AC         	call	_MXK_SwitchTo
  3612  010656  0900               	iorlw	0
  3613  010658  B4D8               	btfsc	status,2,c
  3614  01065A  D020               	goto	l2328
  3615                           
  3616                           ;main.c: 174: Motor_Speed(&Stepper, (50));
  3617  01065C  0ECF               	movlw	low _Stepper
  3618  01065E  0100               	movlb	0	; () banked
  3619  010660  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3620  010662  0E03               	movlw	high _Stepper
  3621  010664  0100               	movlb	0	; () banked
  3622  010666  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3623  010668  0E00               	movlw	0
  3624  01066A  0100               	movlb	0	; () banked
  3625  01066C  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3626  01066E  0E32               	movlw	50
  3627  010670  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3628  010672  EC8D  F0AE         	call	_Motor_Speed	;wreg free
  3629                           
  3630                           ;main.c: 175: Motor_Move(&Stepper, 1);
  3631  010676  0ECF               	movlw	low _Stepper
  3632  010678  0100               	movlb	0	; () banked
  3633  01067A  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3634  01067C  0E03               	movlw	high _Stepper
  3635  01067E  0100               	movlb	0	; () banked
  3636  010680  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3637  010682  0E00               	movlw	0
  3638  010684  0100               	movlb	0	; () banked
  3639  010686  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3640  010688  0E01               	movlw	1
  3641  01068A  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3642  01068C  EC91  F0AD         	call	_Motor_Move	;wreg free
  3643                           
  3644                           ;main.c: 176: if (MXK_Release())
  3645  010690  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3646  010694  0900               	iorlw	0
  3647  010696  A4D8               	btfss	status,2,c
  3648                           
  3649                           ;main.c: 177: MXK_Dequeue();
  3650  010698  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3651  01069C                     l2328:
  3652                           
  3653                           ;main.c: 178: }
  3654                           ;main.c: 179: TimerX = 10;
  3655  01069C  0E00               	movlw	0
  3656  01069E  0100               	movlb	0	; () banked
  3657  0106A0  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3658  0106A2  0E0A               	movlw	10
  3659  0106A4  6FF9               	movwf	_TimerX& (0+255),b
  3660                           
  3661                           ; BSR set to: 0
  3662                           ;main.c: 180: if (TimerX > 0) {
  3663  0106A6  0100               	movlb	0	; () banked
  3664  0106A8  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3665  0106AA  D069               	goto	u12700
  3666  0106AC  0100               	movlb	0	; () banked
  3667  0106AE  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3668  0106B0  E15C               	bnz	l15669
  3669  0106B2  0100               	movlb	0	; () banked
  3670  0106B4  05F9               	decf	_TimerX& (0+255),w,b
  3671  0106B6  B0D8               	btfsc	status,0,c
  3672  0106B8  D058               	goto	l2330
  3673  0106BA  D061               	goto	u12700
  3674  0106BC                     l15651:
  3675                           
  3676                           ; BSR set to: 0
  3677                           ;main.c: 182: ADC_Start(&ADC_AN0);
  3678  0106BC  0EB5               	movlw	low _ADC_AN0
  3679  0106BE  0100               	movlb	0	; () banked
  3680  0106C0  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3681  0106C2  0E00               	movlw	high _ADC_AN0
  3682  0106C4  0100               	movlb	0	; () banked
  3683  0106C6  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3684  0106C8  EC48  F0A5         	call	_ADC_Start	;wreg free
  3685                           
  3686                           ;main.c: 183: if (MXK_SwitchTo(eMXK_HMI)) {
  3687  0106CC  0E01               	movlw	1
  3688  0106CE  EC79  F0AC         	call	_MXK_SwitchTo
  3689  0106D2  0900               	iorlw	0
  3690  0106D4  B4D8               	btfsc	status,2,c
  3691  0106D6  D00E               	goto	l2333
  3692                           
  3693                           ;main.c: 184: HMI_SetNumber(IRValue);
  3694  0106D8  C069  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3695  0106DC  C06A  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3696  0106E0  ECA2  F0AE         	call	_HMI_SetNumber	;wreg free
  3697                           
  3698                           ;main.c: 185: HMI_Render();
  3699  0106E4  ECDA  F0AC         	call	_HMI_Render	;wreg free
  3700                           
  3701                           ;main.c: 186: if (MXK_Release())
  3702  0106E8  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3703  0106EC  0900               	iorlw	0
  3704  0106EE  A4D8               	btfss	status,2,c
  3705                           
  3706                           ;main.c: 187: MXK_Dequeue();
  3707  0106F0  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3708  0106F4                     l2333:
  3709                           
  3710                           ;main.c: 188: }
  3711                           ;main.c: 189: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3712  0106F4  0EB5               	movlw	low _ADC_AN0
  3713  0106F6  0100               	movlb	0	; () banked
  3714  0106F8  6FD3               	movwf	ADC_Voltage@pInput& (0+255),b
  3715  0106FA  0E00               	movlw	high _ADC_AN0
  3716  0106FC  0100               	movlb	0	; () banked
  3717  0106FE  6FD4               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3718  010700  EC1E  F09C         	call	_ADC_Voltage	;wreg free
  3719  010704  C0D3  F0F3         	movff	?_ADC_Voltage,_mode1$15571
  3720  010708  C0D4  F0F4         	movff	?_ADC_Voltage+1,_mode1$15571+1
  3721  01070C  C0D5  F0F5         	movff	?_ADC_Voltage+2,_mode1$15571+2
  3722  010710  C0D6  F0F6         	movff	?_ADC_Voltage+3,_mode1$15571+3
  3723                           
  3724                           ;main.c: 188: }
  3725                           ;main.c: 189: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3726  010714  C0F3  F0BE         	movff	_mode1$15571,___fldiv@a
  3727  010718  C0F4  F0BF         	movff	_mode1$15571+1,___fldiv@a+1
  3728  01071C  C0F5  F0C0         	movff	_mode1$15571+2,___fldiv@a+2
  3729  010720  C0F6  F0C1         	movff	_mode1$15571+3,___fldiv@a+3
  3730  010724  0E00               	movlw	0
  3731  010726  0100               	movlb	0	; () banked
  3732  010728  6FBA               	movwf	___fldiv@b& (0+255),b
  3733  01072A  0E00               	movlw	0
  3734  01072C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3735  01072E  0E6C               	movlw	108
  3736  010730  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3737  010732  0E42               	movlw	66
  3738  010734  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3739  010736  EC74  F086         	call	___fldiv	;wreg free
  3740  01073A  C0BA  F0E5         	movff	?___fldiv,___fltol@f1
  3741  01073E  C0BB  F0E6         	movff	?___fldiv+1,___fltol@f1+1
  3742  010742  C0BC  F0E7         	movff	?___fldiv+2,___fltol@f1+2
  3743  010746  C0BD  F0E8         	movff	?___fldiv+3,___fltol@f1+3
  3744  01074A  EC34  F09A         	call	___fltol	;wreg free
  3745  01074E  C0E5  F069         	movff	?___fltol,_IRValue
  3746  010752  C0E6  F06A         	movff	?___fltol+1,_IRValue+1
  3747                           
  3748                           ;main.c: 190: TimerX = TimerX - 1;
  3749  010756  0EFF               	movlw	255
  3750  010758  0100               	movlb	0	; () banked
  3751  01075A  25F9               	addwf	_TimerX& (0+255),w,b
  3752  01075C  0100               	movlb	0	; () banked
  3753  01075E  6FF9               	movwf	_TimerX& (0+255),b
  3754  010760  0EFF               	movlw	255
  3755  010762  0100               	movlb	0	; () banked
  3756  010764  21FA               	addwfc	(_TimerX+1)& (0+255),w,b
  3757  010766  0100               	movlb	0	; () banked
  3758  010768  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3759  01076A                     l2330:
  3760  01076A                     l15669:
  3761                           
  3762                           ; BSR set to: 0
  3763  01076A  0100               	movlb	0	; () banked
  3764  01076C  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3765  01076E  D007               	goto	u12700
  3766  010770  0100               	movlb	0	; () banked
  3767  010772  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3768  010774  E1A3               	bnz	l15651
  3769  010776  0100               	movlb	0	; () banked
  3770  010778  05F9               	decf	_TimerX& (0+255),w,b
  3771  01077A  B0D8               	btfsc	status,0,c
  3772  01077C  D79F               	goto	l2331
  3773  01077E                     u12700:
  3774                           
  3775                           ; BSR set to: 0
  3776                           
  3777                           ; BSR set to: 0
  3778                           
  3779                           ; BSR set to: 0
  3780                           
  3781                           ; BSR set to: 0
  3782  01077E  0100               	movlb	0	; () banked
  3783  010780  BF6E               	btfsc	(_StepRotate+1)& (0+255),7,b
  3784  010782  D6FE               	goto	l2323
  3785  010784  0E90               	movlw	144
  3786  010786  0100               	movlb	0	; () banked
  3787  010788  5D6D               	subwf	_StepRotate& (0+255),w,b
  3788  01078A  0E01               	movlw	1
  3789  01078C  0100               	movlb	0	; () banked
  3790  01078E  596E               	subwfb	(_StepRotate+1)& (0+255),w,b
  3791  010790  A0D8               	btfss	status,0,c
  3792  010792  D6F6               	goto	l2323
  3793                           
  3794                           ; BSR set to: 0
  3795                           ;main.c: 191: }
  3796                           ;main.c: 192: }
  3797                           ;main.c: 193: }
  3798                           ;main.c: 194: if (MXK_SwitchTo(eMXK_Motor)) {
  3799                           
  3800                           ; BSR set to: 0
  3801  010794  0E08               	movlw	8
  3802  010796  EC79  F0AC         	call	_MXK_SwitchTo
  3803  01079A  0900               	iorlw	0
  3804  01079C  B4D8               	btfsc	status,2,c
  3805  01079E  D08A               	goto	l2338
  3806                           
  3807                           ;main.c: 195: Motor_Speed(&Stepper, (50));
  3808  0107A0  0ECF               	movlw	low _Stepper
  3809  0107A2  0100               	movlb	0	; () banked
  3810  0107A4  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3811  0107A6  0E03               	movlw	high _Stepper
  3812  0107A8  0100               	movlb	0	; () banked
  3813  0107AA  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3814  0107AC  0E00               	movlw	0
  3815  0107AE  0100               	movlb	0	; () banked
  3816  0107B0  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3817  0107B2  0E32               	movlw	50
  3818  0107B4  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3819  0107B6  EC8D  F0AE         	call	_Motor_Speed	;wreg free
  3820                           
  3821                           ;main.c: 196: int moveto = 400-Stepstomin;
  3822  0107BA  C06B  F0EF         	movff	_Stepstomin,??_mode1
  3823  0107BE  C06C  F0F0         	movff	_Stepstomin+1,??_mode1+1
  3824  0107C2  0100               	movlb	0	; () banked
  3825  0107C4  1FEF               	comf	??_mode1& (0+255),f,b
  3826  0107C6  1FF0               	comf	(??_mode1+1)& (0+255),f,b
  3827  0107C8  4BEF               	infsnz	??_mode1& (0+255),f,b
  3828  0107CA  2BF0               	incf	(??_mode1+1)& (0+255),f,b
  3829  0107CC  0E90               	movlw	144
  3830  0107CE  0100               	movlb	0	; () banked
  3831  0107D0  25EF               	addwf	??_mode1& (0+255),w,b
  3832  0107D2  0100               	movlb	0	; () banked
  3833  0107D4  6FF1               	movwf	mode1@moveto& (0+255),b
  3834  0107D6  0E01               	movlw	1
  3835  0107D8  0100               	movlb	0	; () banked
  3836  0107DA  21F0               	addwfc	(??_mode1+1)& (0+255),w,b
  3837  0107DC  0100               	movlb	0	; () banked
  3838  0107DE  6FF2               	movwf	(mode1@moveto+1)& (0+255),b
  3839                           
  3840                           ; BSR set to: 0
  3841                           ;main.c: 198: Motor_Move(&Stepper, (-moveto));
  3842  0107E0  0ECF               	movlw	low _Stepper
  3843  0107E2  0100               	movlb	0	; () banked
  3844  0107E4  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3845  0107E6  0E03               	movlw	high _Stepper
  3846  0107E8  0100               	movlb	0	; () banked
  3847  0107EA  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3848  0107EC  C0F1  F0EF         	movff	mode1@moveto,??_mode1
  3849  0107F0  C0F2  F0F0         	movff	mode1@moveto+1,??_mode1+1
  3850  0107F4  0100               	movlb	0	; () banked
  3851  0107F6  1FEF               	comf	??_mode1& (0+255),f,b
  3852  0107F8  1FF0               	comf	(??_mode1+1)& (0+255),f,b
  3853  0107FA  4BEF               	infsnz	??_mode1& (0+255),f,b
  3854  0107FC  2BF0               	incf	(??_mode1+1)& (0+255),f,b
  3855  0107FE  C0EF  F0BF         	movff	??_mode1,Motor_Move@pDelta
  3856  010802  C0F0  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  3857  010806  EC91  F0AD         	call	_Motor_Move	;wreg free
  3858                           
  3859                           ;main.c: 199: if (MXK_Release())
  3860  01080A  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3861  01080E  0900               	iorlw	0
  3862  010810  B4D8               	btfsc	status,2,c
  3863  010812  D050               	goto	l2338
  3864                           
  3865                           ;main.c: 200: MXK_Dequeue();
  3866  010814  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3867                           
  3868                           ;main.c: 201: }
  3869                           ;main.c: 202: while (Stepper.mDelta > 0) {
  3870  010818  D04D               	goto	l2338
  3871  01081A                     l15685:
  3872                           
  3873                           ;main.c: 203: ADC_Start(&ADC_AN0);
  3874  01081A  0EB5               	movlw	low _ADC_AN0
  3875  01081C  0100               	movlb	0	; () banked
  3876  01081E  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3877  010820  0E00               	movlw	high _ADC_AN0
  3878  010822  0100               	movlb	0	; () banked
  3879  010824  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3880  010826  EC48  F0A5         	call	_ADC_Start	;wreg free
  3881                           
  3882                           ;main.c: 204: if (MXK_SwitchTo(eMXK_HMI)) {
  3883  01082A  0E01               	movlw	1
  3884  01082C  EC79  F0AC         	call	_MXK_SwitchTo
  3885  010830  0900               	iorlw	0
  3886  010832  B4D8               	btfsc	status,2,c
  3887  010834  D00E               	goto	l2341
  3888                           
  3889                           ;main.c: 205: HMI_SetNumber(IRValue);
  3890  010836  C069  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3891  01083A  C06A  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3892  01083E  ECA2  F0AE         	call	_HMI_SetNumber	;wreg free
  3893                           
  3894                           ;main.c: 206: HMI_Render();
  3895  010842  ECDA  F0AC         	call	_HMI_Render	;wreg free
  3896                           
  3897                           ;main.c: 207: if (MXK_Release())
  3898  010846  ECA7  F0AF         	call	_MXK_Release	;wreg free
  3899  01084A  0900               	iorlw	0
  3900  01084C  A4D8               	btfss	status,2,c
  3901                           
  3902                           ;main.c: 208: MXK_Dequeue();
  3903  01084E  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
  3904  010852                     l2341:
  3905                           
  3906                           ;main.c: 209: }
  3907                           ;main.c: 210: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3908  010852  0EB5               	movlw	low _ADC_AN0
  3909  010854  0100               	movlb	0	; () banked
  3910  010856  6FD3               	movwf	ADC_Voltage@pInput& (0+255),b
  3911  010858  0E00               	movlw	high _ADC_AN0
  3912  01085A  0100               	movlb	0	; () banked
  3913  01085C  6FD4               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3914  01085E  EC1E  F09C         	call	_ADC_Voltage	;wreg free
  3915  010862  C0D3  F0F3         	movff	?_ADC_Voltage,_mode1$15571
  3916  010866  C0D4  F0F4         	movff	?_ADC_Voltage+1,_mode1$15571+1
  3917  01086A  C0D5  F0F5         	movff	?_ADC_Voltage+2,_mode1$15571+2
  3918  01086E  C0D6  F0F6         	movff	?_ADC_Voltage+3,_mode1$15571+3
  3919                           
  3920                           ;main.c: 209: }
  3921                           ;main.c: 210: IRValue = (59/ADC_Voltage(&ADC_AN0));
  3922  010872  C0F3  F0BE         	movff	_mode1$15571,___fldiv@a
  3923  010876  C0F4  F0BF         	movff	_mode1$15571+1,___fldiv@a+1
  3924  01087A  C0F5  F0C0         	movff	_mode1$15571+2,___fldiv@a+2
  3925  01087E  C0F6  F0C1         	movff	_mode1$15571+3,___fldiv@a+3
  3926  010882  0E00               	movlw	0
  3927  010884  0100               	movlb	0	; () banked
  3928  010886  6FBA               	movwf	___fldiv@b& (0+255),b
  3929  010888  0E00               	movlw	0
  3930  01088A  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3931  01088C  0E6C               	movlw	108
  3932  01088E  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3933  010890  0E42               	movlw	66
  3934  010892  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3935  010894  EC74  F086         	call	___fldiv	;wreg free
  3936  010898  C0BA  F0E5         	movff	?___fldiv,___fltol@f1
  3937  01089C  C0BB  F0E6         	movff	?___fldiv+1,___fltol@f1+1
  3938  0108A0  C0BC  F0E7         	movff	?___fldiv+2,___fltol@f1+2
  3939  0108A4  C0BD  F0E8         	movff	?___fldiv+3,___fltol@f1+3
  3940  0108A8  EC34  F09A         	call	___fltol	;wreg free
  3941  0108AC  C0E5  F069         	movff	?___fltol,_IRValue
  3942  0108B0  C0E6  F06A         	movff	?___fltol+1,_IRValue+1
  3943  0108B4                     l2338:
  3944  0108B4  0103               	movlb	3	; () banked
  3945  0108B6  BFD0               	btfsc	(_Stepper+1)& (0+255),7,b
  3946  0108B8  0012               	return	
  3947  0108BA  0103               	movlb	3	; () banked
  3948  0108BC  51D0               	movf	(_Stepper+1)& (0+255),w,b
  3949  0108BE  E1AD               	bnz	l15685
  3950  0108C0  0103               	movlb	3	; () banked
  3951  0108C2  05CF               	decf	_Stepper& (0+255),w,b
  3952  0108C4  A0D8               	btfss	status,0,c
  3953  0108C6  0012               	return	
  3954  0108C8  D7A8               	goto	l2339
  3955  0108CA                     __end_of_mode1:
  3956                           	opt stack 0
  3957                           tosu	equ	0xFFF
  3958                           tosh	equ	0xFFE
  3959                           tosl	equ	0xFFD
  3960                           pclath	equ	0xFFA
  3961                           tblptru	equ	0xFF8
  3962                           tblptrh	equ	0xFF7
  3963                           tblptrl	equ	0xFF6
  3964                           tablat	equ	0xFF5
  3965                           postinc0	equ	0xFEE
  3966                           wreg	equ	0xFE8
  3967                           postdec1	equ	0xFE5
  3968                           fsr1h	equ	0xFE2
  3969                           fsr1l	equ	0xFE1
  3970                           postinc2	equ	0xFDE
  3971                           status	equ	0xFD8
  3972                           
  3973 ;; *************** function _update_distance *****************
  3974 ;; Defined at:
  3975 ;;		line 315 in file "Library/iRobotSerial.c"
  3976 ;; Parameters:    Size  Location     Type
  3977 ;;		None
  3978 ;; Auto vars:     Size  Location     Type
  3979 ;;		None
  3980 ;; Return value:  Size  Location     Type
  3981 ;;                  1    wreg      void 
  3982 ;; Registers used:
  3983 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3984 ;; Tracked objects:
  3985 ;;		On entry : 0/0
  3986 ;;		On exit  : 0/0
  3987 ;;		Unchanged: 0/0
  3988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3993 ;;Total ram usage:        0 bytes
  3994 ;; Hardware stack levels used:    1
  3995 ;; Hardware stack levels required when called:   10
  3996 ;; This function calls:
  3997 ;;		_irobot_query_and_update
  3998 ;; This function is called by:
  3999 ;;		_mode1
  4000 ;;		_mode2
  4001 ;; This function uses a non-reentrant model
  4002 ;;
  4003                           
  4004                           	psect	text6
  4005  016088                     __ptext6:
  4006                           	opt stack 0
  4007  016088                     _update_distance:
  4008                           	opt stack 19
  4009                           
  4010                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  4011                           
  4012                           ; BSR set to: 3
  4013                           ;incstack = 0
  4014  016088  0E00               	movlw	0
  4015  01608A  0100               	movlb	0	; () banked
  4016  01608C  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4017  01608E  0E13               	movlw	19
  4018  016090  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  4019  016092  0E01               	movlw	1
  4020  016094  ECF8  F093         	call	_irobot_query_and_update
  4021  016098  0012               	return		;funcret
  4022  01609A                     __end_of_update_distance:
  4023                           	opt stack 0
  4024                           tosu	equ	0xFFF
  4025                           tosh	equ	0xFFE
  4026                           tosl	equ	0xFFD
  4027                           pclath	equ	0xFFA
  4028                           tblptru	equ	0xFF8
  4029                           tblptrh	equ	0xFF7
  4030                           tblptrl	equ	0xFF6
  4031                           tablat	equ	0xFF5
  4032                           postinc0	equ	0xFEE
  4033                           wreg	equ	0xFE8
  4034                           postdec1	equ	0xFE5
  4035                           fsr1h	equ	0xFE2
  4036                           fsr1l	equ	0xFE1
  4037                           postinc2	equ	0xFDE
  4038                           status	equ	0xFD8
  4039                           
  4040 ;; *************** function _update_bump_and_cliff *****************
  4041 ;; Defined at:
  4042 ;;		line 308 in file "Library/iRobotSerial.c"
  4043 ;; Parameters:    Size  Location     Type
  4044 ;;		None
  4045 ;; Auto vars:     Size  Location     Type
  4046 ;;		None
  4047 ;; Return value:  Size  Location     Type
  4048 ;;                  1    wreg      void 
  4049 ;; Registers used:
  4050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4051 ;; Tracked objects:
  4052 ;;		On entry : 0/0
  4053 ;;		On exit  : 0/0
  4054 ;;		Unchanged: 0/0
  4055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4060 ;;Total ram usage:        0 bytes
  4061 ;; Hardware stack levels used:    1
  4062 ;; Hardware stack levels required when called:   10
  4063 ;; This function calls:
  4064 ;;		_irobot_query_and_update
  4065 ;; This function is called by:
  4066 ;;		_mode1
  4067 ;;		_mode2
  4068 ;; This function uses a non-reentrant model
  4069 ;;
  4070                           
  4071                           	psect	text7
  4072  015AE8                     __ptext7:
  4073                           	opt stack 0
  4074  015AE8                     _update_bump_and_cliff:
  4075                           	opt stack 19
  4076                           
  4077                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  4078                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  4079                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  4080                           
  4081                           ;incstack = 0
  4082  015AE8  0E00               	movlw	0
  4083  015AEA  0100               	movlb	0	; () banked
  4084  015AEC  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4085  015AEE  0E07               	movlw	7
  4086  015AF0  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  4087  015AF2  0E00               	movlw	0
  4088  015AF4  0100               	movlb	0	; () banked
  4089  015AF6  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  4090  015AF8  0E09               	movlw	9
  4091  015AFA  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  4092  015AFC  0E00               	movlw	0
  4093  015AFE  0100               	movlb	0	; () banked
  4094  015B00  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  4095  015B02  0E0A               	movlw	10
  4096  015B04  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  4097  015B06  0E00               	movlw	0
  4098  015B08  0100               	movlb	0	; () banked
  4099  015B0A  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  4100  015B0C  0E0B               	movlw	11
  4101  015B0E  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  4102  015B10  0E00               	movlw	0
  4103  015B12  0100               	movlb	0	; () banked
  4104  015B14  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  4105  015B16  0E0C               	movlw	12
  4106  015B18  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  4107  015B1A  0E05               	movlw	5
  4108  015B1C  ECF8  F093         	call	_irobot_query_and_update
  4109  015B20  0012               	return		;funcret
  4110  015B22                     __end_of_update_bump_and_cliff:
  4111                           	opt stack 0
  4112                           tosu	equ	0xFFF
  4113                           tosh	equ	0xFFE
  4114                           tosl	equ	0xFFD
  4115                           pclath	equ	0xFFA
  4116                           tblptru	equ	0xFF8
  4117                           tblptrh	equ	0xFF7
  4118                           tblptrl	equ	0xFF6
  4119                           tablat	equ	0xFF5
  4120                           postinc0	equ	0xFEE
  4121                           wreg	equ	0xFE8
  4122                           postdec1	equ	0xFE5
  4123                           fsr1h	equ	0xFE2
  4124                           fsr1l	equ	0xFE1
  4125                           postinc2	equ	0xFDE
  4126                           status	equ	0xFD8
  4127                           
  4128 ;; *************** function _update_angle *****************
  4129 ;; Defined at:
  4130 ;;		line 320 in file "Library/iRobotSerial.c"
  4131 ;; Parameters:    Size  Location     Type
  4132 ;;		None
  4133 ;; Auto vars:     Size  Location     Type
  4134 ;;		None
  4135 ;; Return value:  Size  Location     Type
  4136 ;;                  1    wreg      void 
  4137 ;; Registers used:
  4138 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4139 ;; Tracked objects:
  4140 ;;		On entry : 0/0
  4141 ;;		On exit  : 0/0
  4142 ;;		Unchanged: 0/0
  4143 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4144 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4145 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4146 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4147 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4148 ;;Total ram usage:        0 bytes
  4149 ;; Hardware stack levels used:    1
  4150 ;; Hardware stack levels required when called:   10
  4151 ;; This function calls:
  4152 ;;		_irobot_query_and_update
  4153 ;; This function is called by:
  4154 ;;		_mode1
  4155 ;;		_mode2
  4156 ;; This function uses a non-reentrant model
  4157 ;;
  4158                           
  4159                           	psect	text8
  4160  01609A                     __ptext8:
  4161                           	opt stack 0
  4162  01609A                     _update_angle:
  4163                           	opt stack 19
  4164                           
  4165                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  4166                           
  4167                           ;incstack = 0
  4168  01609A  0E00               	movlw	0
  4169  01609C  0100               	movlb	0	; () banked
  4170  01609E  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  4171  0160A0  0E14               	movlw	20
  4172  0160A2  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  4173  0160A4  0E01               	movlw	1
  4174  0160A6  ECF8  F093         	call	_irobot_query_and_update
  4175  0160AA  0012               	return		;funcret
  4176  0160AC                     __end_of_update_angle:
  4177                           	opt stack 0
  4178                           tosu	equ	0xFFF
  4179                           tosh	equ	0xFFE
  4180                           tosl	equ	0xFFD
  4181                           pclath	equ	0xFFA
  4182                           tblptru	equ	0xFF8
  4183                           tblptrh	equ	0xFF7
  4184                           tblptrl	equ	0xFF6
  4185                           tablat	equ	0xFF5
  4186                           postinc0	equ	0xFEE
  4187                           wreg	equ	0xFE8
  4188                           postdec1	equ	0xFE5
  4189                           fsr1h	equ	0xFE2
  4190                           fsr1l	equ	0xFE1
  4191                           postinc2	equ	0xFDE
  4192                           status	equ	0xFD8
  4193                           
  4194 ;; *************** function _irobot_query_and_update *****************
  4195 ;; Defined at:
  4196 ;;		line 130 in file "Library/iRobotSerial.c"
  4197 ;; Parameters:    Size  Location     Type
  4198 ;;  numberOfPack    1    wreg     unsigned char 
  4199 ;; Auto vars:     Size  Location     Type
  4200 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  4201 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  4202 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  4203 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  4204 ;;		 -> ?_irobot_query_and_update(1), 
  4205 ;;  i               1   28[BANK0 ] unsigned char 
  4206 ;;  startIndex      1   27[BANK0 ] unsigned char 
  4207 ;;  j               1   26[BANK0 ] unsigned char 
  4208 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  4209 ;;  streamSize      1   23[BANK0 ] unsigned char 
  4210 ;; Return value:  Size  Location     Type
  4211 ;;                  1    wreg      void 
  4212 ;; Registers used:
  4213 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4214 ;; Tracked objects:
  4215 ;;		On entry : 0/0
  4216 ;;		On exit  : 0/0
  4217 ;;		Unchanged: 0/0
  4218 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4219 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4220 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4221 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4222 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4223 ;;Total ram usage:      535 bytes
  4224 ;; Hardware stack levels used:    1
  4225 ;; Hardware stack levels required when called:    9
  4226 ;; This function calls:
  4227 ;;		_eusart_getch
  4228 ;;		_eusart_putch
  4229 ;;		_get_packet_size
  4230 ;;		_rx_assign
  4231 ;; This function is called by:
  4232 ;;		_update_bump_and_cliff
  4233 ;;		_update_distance
  4234 ;;		_update_angle
  4235 ;; This function uses a non-reentrant model
  4236 ;;
  4237                           
  4238                           	psect	text9
  4239  0127F0                     __ptext9:
  4240                           	opt stack 0
  4241  0127F0                     _irobot_query_and_update:
  4242                           	opt stack 19
  4243                           
  4244                           ;incstack = 0
  4245                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  4246  0127F0  0100               	movlb	0	; () banked
  4247  0127F2  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  4248                           
  4249                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  4250  0127F4  0E00               	movlw	0
  4251  0127F6  0100               	movlb	0	; () banked
  4252  0127F8  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  4253  0127FA  0E00               	movlw	0
  4254  0127FC  0100               	movlb	0	; () banked
  4255  0127FE  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  4256                           
  4257                           ;iRobotSerial.c: 133: va_list packetIDs;
  4258                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  4259  012800  0EC0               	movlw	low ?_irobot_query_and_update
  4260  012802  0100               	movlb	0	; () banked
  4261  012804  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  4262  012806  0E00               	movlw	high ?_irobot_query_and_update
  4263  012808  0100               	movlb	0	; () banked
  4264  01280A  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  4265                           
  4266                           ; BSR set to: 0
  4267                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  4268  01280C  0E95               	movlw	149
  4269  01280E  EC6D  F0B0         	call	_eusart_putch
  4270                           
  4271                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  4272  012812  0100               	movlb	0	; () banked
  4273  012814  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  4274  012816  EC6D  F0B0         	call	_eusart_putch
  4275                           
  4276                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++) {
  4277  01281A  0E00               	movlw	0
  4278  01281C  0100               	movlb	0	; () banked
  4279  01281E  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  4280  012820  D023               	goto	l2091
  4281  012822                     
  4282                           ; BSR set to: 0
  4283                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  4284                           
  4285                           ; BSR set to: 0
  4286  012822  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  4287  012826  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  4288  01282A  50DF               	movf	indf2,w,c
  4289  01282C  0100               	movlb	0	; () banked
  4290  01282E  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  4291                           
  4292                           ; BSR set to: 0
  4293  012830  0E02               	movlw	2
  4294  012832  0100               	movlb	0	; () banked
  4295  012834  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  4296  012836  0E00               	movlw	0
  4297  012838  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  4301  01283A  0100               	movlb	0	; () banked
  4302  01283C  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  4303  01283E  ECE8  F0A8         	call	_get_packet_size
  4304  012842  0100               	movlb	0	; () banked
  4305  012844  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  4306                           
  4307                           ; BSR set to: 0
  4308                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  4309  012846  0100               	movlb	0	; () banked
  4310  012848  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  4311  01284A  0D01               	mullw	1
  4312  01284C  0E00               	movlw	low irobot_query_and_update@TXArray
  4313  01284E  24F3               	addwf	prodl,w,c
  4314  012850  6ED9               	movwf	fsr2l,c
  4315  012852  0E02               	movlw	high irobot_query_and_update@TXArray
  4316  012854  20F4               	addwfc	prodh,w,c
  4317  012856  6EDA               	movwf	fsr2h,c
  4318  012858  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  4319                           
  4320                           ; BSR set to: 0
  4321                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  4322  01285C  0100               	movlb	0	; () banked
  4323  01285E  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  4324  012860  EC6D  F0B0         	call	_eusart_putch
  4325  012864  0100               	movlb	0	; () banked
  4326  012866  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  4327  012868                     l2091:
  4328                           
  4329                           ; BSR set to: 0
  4330                           
  4331                           ; BSR set to: 0
  4332  012868  0100               	movlb	0	; () banked
  4333  01286A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  4334  01286C  0100               	movlb	0	; () banked
  4335  01286E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  4336  012870  A0D8               	btfss	status,0,c
  4337  012872  D7D7               	goto	l2092
  4338                           
  4339                           ; BSR set to: 0
  4340                           ;iRobotSerial.c: 142: }
  4341                           ;iRobotSerial.c: 143: ;
  4342                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++) {RXArray[i] = eusart_getch();}
  4343                           
  4344                           ; BSR set to: 0
  4345  012874  0E00               	movlw	0
  4346  012876  0100               	movlb	0	; () banked
  4347  012878  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  4348  01287A  D00E               	goto	l2094
  4349  01287C                     
  4350                           ; BSR set to: 0
  4351                           
  4352                           ; BSR set to: 0
  4353  01287C  0100               	movlb	0	; () banked
  4354  01287E  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  4355  012880  0D01               	mullw	1
  4356  012882  0E00               	movlw	low irobot_query_and_update@RXArray
  4357  012884  24F3               	addwf	prodl,w,c
  4358  012886  6ED9               	movwf	fsr2l,c
  4359  012888  0E01               	movlw	high irobot_query_and_update@RXArray
  4360  01288A  20F4               	addwfc	prodh,w,c
  4361  01288C  6EDA               	movwf	fsr2h,c
  4362  01288E  ECB0  F0B0         	call	_eusart_getch	;wreg free
  4363  012892  6EDF               	movwf	indf2,c
  4364  012894  0100               	movlb	0	; () banked
  4365  012896  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  4366  012898                     l2094:
  4367                           
  4368                           ; BSR set to: 0
  4369                           
  4370                           ; BSR set to: 0
  4371  012898  0100               	movlb	0	; () banked
  4372  01289A  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  4373  01289C  0100               	movlb	0	; () banked
  4374  01289E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  4375  0128A0  A0D8               	btfss	status,0,c
  4376  0128A2  D7EC               	goto	l2095
  4377                           
  4378                           ; BSR set to: 0
  4379                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++) {
  4380                           
  4381                           ; BSR set to: 0
  4382  0128A4  0E00               	movlw	0
  4383  0128A6  0100               	movlb	0	; () banked
  4384  0128A8  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  4385  0128AA  D05E               	goto	l2097
  4386  0128AC                     l2098:
  4387                           
  4388                           ; BSR set to: 0
  4389                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++) {
  4390  0128AC  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  4391  0128B0  D021               	goto	l2099
  4392  0128B2                     
  4393                           ; BSR set to: 0
  4394                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  4395                           
  4396                           ; BSR set to: 0
  4397  0128B2  0100               	movlb	0	; () banked
  4398  0128B4  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  4399  0128B6  0D01               	mullw	1
  4400  0128B8  0E00               	movlw	low irobot_query_and_update@RXArray
  4401  0128BA  24F3               	addwf	prodl,w,c
  4402  0128BC  6ED9               	movwf	fsr2l,c
  4403  0128BE  0E01               	movlw	high irobot_query_and_update@RXArray
  4404  0128C0  20F4               	addwfc	prodh,w,c
  4405  0128C2  6EDA               	movwf	fsr2h,c
  4406  0128C4  50DF               	movf	indf2,w,c
  4407  0128C6  0100               	movlb	0	; () banked
  4408  0128C8  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  4409  0128CA  0100               	movlb	0	; () banked
  4410  0128CC  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  4411  0128CE  0800               	sublw	0
  4412  0128D0  0100               	movlb	0	; () banked
  4413  0128D2  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  4414  0128D4  0100               	movlb	0	; () banked
  4415  0128D6  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  4416  0128D8  0100               	movlb	0	; () banked
  4417  0128DA  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  4418  0128DC  0D01               	mullw	1
  4419  0128DE  0E00               	movlw	low irobot_query_and_update@TXArray
  4420  0128E0  24F3               	addwf	prodl,w,c
  4421  0128E2  6ED9               	movwf	fsr2l,c
  4422  0128E4  0E02               	movlw	high irobot_query_and_update@TXArray
  4423  0128E6  20F4               	addwfc	prodh,w,c
  4424  0128E8  6EDA               	movwf	fsr2h,c
  4425  0128EA  50DF               	movf	indf2,w,c
  4426  0128EC  EC3A  F09B         	call	_rx_assign
  4427  0128F0  0100               	movlb	0	; () banked
  4428  0128F2  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  4429  0128F4                     l2099:
  4430                           
  4431                           ; BSR set to: 0
  4432                           
  4433                           ; BSR set to: 0
  4434  0128F4  0100               	movlb	0	; () banked
  4435  0128F6  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  4436  0128F8  0D01               	mullw	1
  4437  0128FA  0E00               	movlw	low irobot_query_and_update@TXArray
  4438  0128FC  24F3               	addwf	prodl,w,c
  4439  0128FE  6ED9               	movwf	fsr2l,c
  4440  012900  0E02               	movlw	high irobot_query_and_update@TXArray
  4441  012902  20F4               	addwfc	prodh,w,c
  4442  012904  6EDA               	movwf	fsr2h,c
  4443  012906  50DF               	movf	indf2,w,c
  4444  012908  ECE8  F0A8         	call	_get_packet_size
  4445  01290C  0100               	movlb	0	; () banked
  4446  01290E  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  4447  012910  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  4448  012912  0100               	movlb	0	; () banked
  4449  012914  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  4450  012916  0100               	movlb	0	; () banked
  4451  012918  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  4452  01291A  0E00               	movlw	0
  4453  01291C  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  4454  01291E  0100               	movlb	0	; () banked
  4455  012920  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  4456  012922  0100               	movlb	0	; () banked
  4457  012924  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  4458  012926  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  4459  012928  0100               	movlb	0	; () banked
  4460  01292A  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  4461  01292C  0100               	movlb	0	; () banked
  4462  01292E  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  4463  012930  0100               	movlb	0	; () banked
  4464  012932  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  4465  012934  0A80               	xorlw	128
  4466  012936  0100               	movlb	0	; () banked
  4467  012938  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  4468  01293A  0100               	movlb	0	; () banked
  4469  01293C  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  4470  01293E  0A80               	xorlw	128
  4471  012940  0100               	movlb	0	; () banked
  4472  012942  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  4473  012944  A0D8               	btfss	status,0,c
  4474  012946  D7B5               	goto	l2100
  4475                           
  4476                           ; BSR set to: 0
  4477                           ;iRobotSerial.c: 150: }
  4478                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  4479                           
  4480                           ; BSR set to: 0
  4481  012948  0100               	movlb	0	; () banked
  4482  01294A  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  4483  01294C  0D01               	mullw	1
  4484  01294E  0E00               	movlw	low irobot_query_and_update@TXArray
  4485  012950  24F3               	addwf	prodl,w,c
  4486  012952  6ED9               	movwf	fsr2l,c
  4487  012954  0E02               	movlw	high irobot_query_and_update@TXArray
  4488  012956  20F4               	addwfc	prodh,w,c
  4489  012958  6EDA               	movwf	fsr2h,c
  4490  01295A  50DF               	movf	indf2,w,c
  4491  01295C  ECE8  F0A8         	call	_get_packet_size
  4492  012960  0100               	movlb	0	; () banked
  4493  012962  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  4494                           
  4495                           ; BSR set to: 0
  4496  012964  0100               	movlb	0	; () banked
  4497  012966  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  4498  012968                     l2097:
  4499                           
  4500                           ; BSR set to: 0
  4501                           
  4502                           ; BSR set to: 0
  4503  012968  0100               	movlb	0	; () banked
  4504  01296A  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  4505  01296C  0100               	movlb	0	; () banked
  4506  01296E  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  4507  012970  B0D8               	btfsc	status,0,c
  4508  012972  0012               	return	
  4509  012974  D79B               	goto	l2098
  4510  012976                     __end_of_irobot_query_and_update:
  4511                           	opt stack 0
  4512                           tosu	equ	0xFFF
  4513                           tosh	equ	0xFFE
  4514                           tosl	equ	0xFFD
  4515                           pclath	equ	0xFFA
  4516                           tblptru	equ	0xFF8
  4517                           tblptrh	equ	0xFF7
  4518                           tblptrl	equ	0xFF6
  4519                           tablat	equ	0xFF5
  4520                           prodh	equ	0xFF4
  4521                           prodl	equ	0xFF3
  4522                           postinc0	equ	0xFEE
  4523                           wreg	equ	0xFE8
  4524                           postdec1	equ	0xFE5
  4525                           fsr1h	equ	0xFE2
  4526                           fsr1l	equ	0xFE1
  4527                           indf2	equ	0xFDF
  4528                           postinc2	equ	0xFDE
  4529                           fsr2h	equ	0xFDA
  4530                           fsr2l	equ	0xFD9
  4531                           status	equ	0xFD8
  4532                           
  4533 ;; *************** function _rx_assign *****************
  4534 ;; Defined at:
  4535 ;;		line 74 in file "Library/iRobotSerial.c"
  4536 ;; Parameters:    Size  Location     Type
  4537 ;;  packetID        1    wreg     unsigned char 
  4538 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  4539 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  4540 ;; Auto vars:     Size  Location     Type
  4541 ;;  packetID        1    5[BANK0 ] unsigned char 
  4542 ;; Return value:  Size  Location     Type
  4543 ;;                  1    wreg      void 
  4544 ;; Registers used:
  4545 ;;		wreg, status,2, status,0, cstack
  4546 ;; Tracked objects:
  4547 ;;		On entry : 0/0
  4548 ;;		On exit  : 0/0
  4549 ;;		Unchanged: 0/0
  4550 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4551 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4552 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4553 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4554 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4555 ;;Total ram usage:        5 bytes
  4556 ;; Hardware stack levels used:    1
  4557 ;; Hardware stack levels required when called:    8
  4558 ;; This function calls:
  4559 ;;		_sort_iRBumpDrop
  4560 ;; This function is called by:
  4561 ;;		_irobot_query_and_update
  4562 ;; This function uses a non-reentrant model
  4563 ;;
  4564                           
  4565                           	psect	text10
  4566  013674                     __ptext10:
  4567                           	opt stack 0
  4568  013674                     _rx_assign:
  4569                           	opt stack 19
  4570                           
  4571                           ; BSR set to: 0
  4572                           ;incstack = 0
  4573                           ;rx_assign@packetID stored from wreg
  4574  013674  0100               	movlb	0	; () banked
  4575  013676  6FBF               	movwf	rx_assign@packetID& (0+255),b
  4576                           
  4577                           ;iRobotSerial.c: 75: switch (packetID) {
  4578  013678  D057               	goto	l2031
  4579  01367A                     l2032:
  4580                           
  4581                           ; BSR set to: 0
  4582  01367A  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  4583                           
  4584                           ; BSR set to: 0
  4585  01367E  EC04  F0A5         	call	_sort_iRBumpDrop	;wreg free
  4586  013682  0012               	return	
  4587  013684                     l2034:
  4588                           
  4589                           ; BSR set to: 0
  4590  013684  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  4591  013688  0012               	return	
  4592  01368A                     l2035:
  4593                           
  4594                           ; BSR set to: 0
  4595  01368A  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  4596  01368E  0012               	return	
  4597  013690                     l2036:
  4598                           
  4599                           ; BSR set to: 0
  4600  013690  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  4601  013694  0012               	return	
  4602  013696                     l2037:
  4603                           
  4604                           ; BSR set to: 0
  4605  013696  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  4606  01369A  0012               	return	
  4607  01369C                     l2038:
  4608                           
  4609                           ; BSR set to: 0
  4610  01369C  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  4611  0136A0  0012               	return	
  4612  0136A2                     l2039:
  4613                           
  4614                           ; BSR set to: 0
  4615  0136A2  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  4616  0136A6  0012               	return	
  4617  0136A8                     
  4618                           ; BSR set to: 0
  4619                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  4620                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  4621                           
  4622                           ; BSR set to: 0
  4623  0136A8  0100               	movlb	0	; () banked
  4624  0136AA  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  4625  0136AC  0100               	movlb	0	; () banked
  4626  0136AE  A4D8               	btfss	status,2,c
  4627  0136B0  D005               	goto	l2042
  4628                           
  4629                           ; BSR set to: 0
  4630  0136B2  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  4631  0136B6  0103               	movlb	3	; () banked
  4632  0136B8  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  4633  0136BA  0012               	return	
  4634  0136BC                     l2042:
  4635                           
  4636                           ; BSR set to: 0
  4637  0136BC  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  4638  0136C0  0103               	movlb	3	; () banked
  4639  0136C2  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  4640                           
  4641                           ; BSR set to: 3
  4642  0136C4  0103               	movlb	3	; () banked
  4643  0136C6  5122               	movf	_iRDistanceSS& (0+255),w,b
  4644  0136C8  0100               	movlb	0	; () banked
  4645  0136CA  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  4646  0136CC  6BBD               	clrf	??_rx_assign& (0+255),b
  4647  0136CE  0103               	movlb	3	; () banked
  4648  0136D0  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  4649  0136D2  0100               	movlb	0	; () banked
  4650  0136D4  25BD               	addwf	??_rx_assign& (0+255),w,b
  4651  0136D6  0100               	movlb	0	; () banked
  4652  0136D8  6F7F               	movwf	_iRDistance& (0+255),b
  4653  0136DA  0103               	movlb	3	; () banked
  4654  0136DC  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  4655  0136DE  0100               	movlb	0	; () banked
  4656  0136E0  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  4657  0136E2  0100               	movlb	0	; () banked
  4658  0136E4  6F80               	movwf	(_iRDistance+1)& (0+255),b
  4659                           
  4660                           ; BSR set to: 0
  4661  0136E6  0012               	return	
  4662  0136E8                     
  4663                           ; BSR set to: 0
  4664                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  4665                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  4666                           
  4667                           ; BSR set to: 0
  4668  0136E8  0100               	movlb	0	; () banked
  4669  0136EA  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  4670  0136EC  0100               	movlb	0	; () banked
  4671  0136EE  A4D8               	btfss	status,2,c
  4672  0136F0  D005               	goto	l2047
  4673                           
  4674                           ; BSR set to: 0
  4675  0136F2  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  4676  0136F6  0103               	movlb	3	; () banked
  4677  0136F8  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  4678  0136FA  0012               	return	
  4679  0136FC                     l2047:
  4680                           
  4681                           ; BSR set to: 0
  4682  0136FC  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  4683  013700  0103               	movlb	3	; () banked
  4684  013702  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  4685                           
  4686                           ; BSR set to: 3
  4687  013704  0103               	movlb	3	; () banked
  4688  013706  511E               	movf	_iRAngleSS& (0+255),w,b
  4689  013708  0100               	movlb	0	; () banked
  4690  01370A  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  4691  01370C  6BBD               	clrf	??_rx_assign& (0+255),b
  4692  01370E  0103               	movlb	3	; () banked
  4693  013710  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  4694  013712  0100               	movlb	0	; () banked
  4695  013714  25BD               	addwf	??_rx_assign& (0+255),w,b
  4696  013716  0100               	movlb	0	; () banked
  4697  013718  6F7D               	movwf	_iRAngle& (0+255),b
  4698  01371A  0103               	movlb	3	; () banked
  4699  01371C  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  4700  01371E  0100               	movlb	0	; () banked
  4701  013720  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  4702  013722  0100               	movlb	0	; () banked
  4703  013724  6F7E               	movwf	(_iRAngle+1)& (0+255),b
  4704                           
  4705                           ; BSR set to: 0
  4706                           ;iRobotSerial.c: 89: }
  4707                           
  4708                           ; BSR set to: 0
  4709  013726  0012               	return	
  4710  013728                     l2031:
  4711                           
  4712                           ; BSR set to: 0
  4713  013728  0100               	movlb	0	; () banked
  4714  01372A  51BF               	movf	rx_assign@packetID& (0+255),w,b
  4715                           
  4716                           ; Switch size 1, requested type "space"
  4717                           ; Number of cases is 9, Range of values is 7 to 20
  4718                           ; switch strategies available:
  4719                           ; Name         Instructions Cycles
  4720                           ; simple_byte           28    15 (average)
  4721                           ;	Chosen strategy is simple_byte
  4722  01372C  0A07               	xorlw	7	; case 7
  4723  01372E  B4D8               	btfsc	status,2,c
  4724  013730  D7A4               	goto	l2032
  4725  013732  0A0F               	xorlw	15	; case 8
  4726  013734  B4D8               	btfsc	status,2,c
  4727  013736  D7A6               	goto	l2034
  4728  013738  0A01               	xorlw	1	; case 9
  4729  01373A  B4D8               	btfsc	status,2,c
  4730  01373C  D7A6               	goto	l2035
  4731  01373E  0A03               	xorlw	3	; case 10
  4732  013740  B4D8               	btfsc	status,2,c
  4733  013742  D7A6               	goto	l2036
  4734  013744  0A01               	xorlw	1	; case 11
  4735  013746  B4D8               	btfsc	status,2,c
  4736  013748  D7A6               	goto	l2037
  4737  01374A  0A07               	xorlw	7	; case 12
  4738  01374C  B4D8               	btfsc	status,2,c
  4739  01374E  D7A6               	goto	l2038
  4740  013750  0A01               	xorlw	1	; case 13
  4741  013752  B4D8               	btfsc	status,2,c
  4742  013754  D7A6               	goto	l2039
  4743  013756  0A1E               	xorlw	30	; case 19
  4744  013758  B4D8               	btfsc	status,2,c
  4745  01375A  D7A6               	goto	l2040
  4746  01375C  0A07               	xorlw	7	; case 20
  4747  01375E  A4D8               	btfss	status,2,c
  4748  013760  0012               	return	
  4749  013762  D7C2               	goto	l2045
  4750  013764                     __end_of_rx_assign:
  4751                           	opt stack 0
  4752                           tosu	equ	0xFFF
  4753                           tosh	equ	0xFFE
  4754                           tosl	equ	0xFFD
  4755                           pclath	equ	0xFFA
  4756                           tblptru	equ	0xFF8
  4757                           tblptrh	equ	0xFF7
  4758                           tblptrl	equ	0xFF6
  4759                           tablat	equ	0xFF5
  4760                           prodh	equ	0xFF4
  4761                           prodl	equ	0xFF3
  4762                           postinc0	equ	0xFEE
  4763                           wreg	equ	0xFE8
  4764                           postdec1	equ	0xFE5
  4765                           fsr1h	equ	0xFE2
  4766                           fsr1l	equ	0xFE1
  4767                           indf2	equ	0xFDF
  4768                           postinc2	equ	0xFDE
  4769                           fsr2h	equ	0xFDA
  4770                           fsr2l	equ	0xFD9
  4771                           status	equ	0xFD8
  4772                           
  4773 ;; *************** function _sort_iRBumpDrop *****************
  4774 ;; Defined at:
  4775 ;;		line 92 in file "Library/iRobotSerial.c"
  4776 ;; Parameters:    Size  Location     Type
  4777 ;;		None
  4778 ;; Auto vars:     Size  Location     Type
  4779 ;;		None
  4780 ;; Return value:  Size  Location     Type
  4781 ;;                  1    wreg      void 
  4782 ;; Registers used:
  4783 ;;		wreg, status,2, status,0
  4784 ;; Tracked objects:
  4785 ;;		On entry : 0/0
  4786 ;;		On exit  : 0/0
  4787 ;;		Unchanged: 0/0
  4788 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4789 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4790 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4791 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4792 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4793 ;;Total ram usage:        1 bytes
  4794 ;; Hardware stack levels used:    1
  4795 ;; Hardware stack levels required when called:    7
  4796 ;; This function calls:
  4797 ;;		Nothing
  4798 ;; This function is called by:
  4799 ;;		_rx_assign
  4800 ;; This function uses a non-reentrant model
  4801 ;;
  4802                           
  4803                           	psect	text11
  4804  014A08                     __ptext11:
  4805                           	opt stack 0
  4806  014A08                     _sort_iRBumpDrop:
  4807                           	opt stack 19
  4808                           
  4809                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  4810                           
  4811                           ;incstack = 0
  4812  014A08  A036               	btfss	_iRBumpDrop,0,c
  4813  014A0A  D002               	goto	l2054
  4814  014A0C  0E01               	movlw	1
  4815  014A0E  D001               	goto	L1
  4816  014A10                     l2054:
  4817                           
  4818                           ; BSR set to: 0
  4819  014A10  0E00               	movlw	0
  4820  014A12                     L1:
  4821  014A12  0100               	movlb	0	; () banked
  4822  014A14  6F8E               	movwf	_iRBumpRight& (0+255),b
  4823                           
  4824                           ; BSR set to: 0
  4825                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  4826                           
  4827                           ; BSR set to: 0
  4828  014A16  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  4829  014A1A  0100               	movlb	0	; () banked
  4830  014A1C  90D8               	bcf	status,0,c
  4831  014A1E  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4832  014A20  0100               	movlb	0	; () banked
  4833  014A22  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  4834  014A24  D002               	goto	l2058
  4835                           
  4836                           ; BSR set to: 0
  4837  014A26  0E01               	movlw	1
  4838  014A28  D001               	goto	L2
  4839  014A2A                     l2058:
  4840                           
  4841                           ; BSR set to: 0
  4842                           
  4843                           ; BSR set to: 0
  4844  014A2A  0E00               	movlw	0
  4845  014A2C                     L2:
  4846  014A2C  0100               	movlb	0	; () banked
  4847  014A2E  6F8D               	movwf	_iRBumpLeft& (0+255),b
  4848                           
  4849                           ; BSR set to: 0
  4850                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  4851                           
  4852                           ; BSR set to: 0
  4853  014A30  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  4854  014A34  0100               	movlb	0	; () banked
  4855  014A36  90D8               	bcf	status,0,c
  4856  014A38  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4857  014A3A  0100               	movlb	0	; () banked
  4858  014A3C  90D8               	bcf	status,0,c
  4859  014A3E  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4860  014A40  0100               	movlb	0	; () banked
  4861  014A42  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  4862  014A44  D002               	goto	l2062
  4863                           
  4864                           ; BSR set to: 0
  4865  014A46  0E01               	movlw	1
  4866  014A48  D001               	goto	L3
  4867  014A4A                     l2062:
  4868                           
  4869                           ; BSR set to: 0
  4870                           
  4871                           ; BSR set to: 0
  4872  014A4A  0E00               	movlw	0
  4873  014A4C                     L3:
  4874  014A4C  6E2F               	movwf	_iRDropRight,c
  4875                           
  4876                           ; BSR set to: 0
  4877                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  4878                           
  4879                           ; BSR set to: 0
  4880  014A4E  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  4881  014A52  0100               	movlb	0	; () banked
  4882  014A54  90D8               	bcf	status,0,c
  4883  014A56  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4884  014A58  0100               	movlb	0	; () banked
  4885  014A5A  90D8               	bcf	status,0,c
  4886  014A5C  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4887  014A5E  0100               	movlb	0	; () banked
  4888  014A60  90D8               	bcf	status,0,c
  4889  014A62  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  4890  014A64  0100               	movlb	0	; () banked
  4891  014A66  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  4892  014A68  D002               	goto	l2066
  4893                           
  4894                           ; BSR set to: 0
  4895  014A6A  0E01               	movlw	1
  4896  014A6C  D001               	goto	L4
  4897  014A6E                     l2066:
  4898                           
  4899                           ; BSR set to: 0
  4900                           
  4901                           ; BSR set to: 0
  4902  014A6E  0E00               	movlw	0
  4903  014A70                     L4:
  4904  014A70  6E2E               	movwf	_iRDropLeft,c
  4905                           
  4906                           ; BSR set to: 0
  4907                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  4908                           
  4909                           ; BSR set to: 0
  4910  014A72  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  4911  014A76  0100               	movlb	0	; () banked
  4912  014A78  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  4913  014A7A  0E0F               	movlw	15
  4914  014A7C  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  4915  014A7E  0100               	movlb	0	; () banked
  4916  014A80  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  4917  014A82  D003               	goto	l2070
  4918                           
  4919                           ; BSR set to: 0
  4920  014A84  0E01               	movlw	1
  4921  014A86  6E2D               	movwf	_iRDropCaster,c
  4922  014A88  0012               	return	
  4923  014A8A                     l2070:
  4924                           
  4925                           ; BSR set to: 0
  4926                           
  4927                           ; BSR set to: 0
  4928  014A8A  0E00               	movlw	0
  4929  014A8C  6E2D               	movwf	_iRDropCaster,c
  4930  014A8E  0012               	return	
  4931  014A90                     __end_of_sort_iRBumpDrop:
  4932                           	opt stack 0
  4933                           tosu	equ	0xFFF
  4934                           tosh	equ	0xFFE
  4935                           tosl	equ	0xFFD
  4936                           pclath	equ	0xFFA
  4937                           tblptru	equ	0xFF8
  4938                           tblptrh	equ	0xFF7
  4939                           tblptrl	equ	0xFF6
  4940                           tablat	equ	0xFF5
  4941                           prodh	equ	0xFF4
  4942                           prodl	equ	0xFF3
  4943                           postinc0	equ	0xFEE
  4944                           wreg	equ	0xFE8
  4945                           postdec1	equ	0xFE5
  4946                           fsr1h	equ	0xFE2
  4947                           fsr1l	equ	0xFE1
  4948                           indf2	equ	0xFDF
  4949                           postinc2	equ	0xFDE
  4950                           fsr2h	equ	0xFDA
  4951                           fsr2l	equ	0xFD9
  4952                           status	equ	0xFD8
  4953                           
  4954 ;; *************** function _get_packet_size *****************
  4955 ;; Defined at:
  4956 ;;		line 60 in file "Library/iRobotSerial.c"
  4957 ;; Parameters:    Size  Location     Type
  4958 ;;  packetID        1    wreg     unsigned char 
  4959 ;; Auto vars:     Size  Location     Type
  4960 ;;  packetID        1    0[BANK0 ] unsigned char 
  4961 ;; Return value:  Size  Location     Type
  4962 ;;                  1    wreg      unsigned char 
  4963 ;; Registers used:
  4964 ;;		wreg, status,2, status,0
  4965 ;; Tracked objects:
  4966 ;;		On entry : 0/0
  4967 ;;		On exit  : 0/0
  4968 ;;		Unchanged: 0/0
  4969 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4970 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4971 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4972 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4973 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4974 ;;Total ram usage:        1 bytes
  4975 ;; Hardware stack levels used:    1
  4976 ;; Hardware stack levels required when called:    7
  4977 ;; This function calls:
  4978 ;;		Nothing
  4979 ;; This function is called by:
  4980 ;;		_irobot_query_and_update
  4981 ;; This function uses a non-reentrant model
  4982 ;;
  4983                           
  4984                           	psect	text12
  4985  0151D0                     __ptext12:
  4986                           	opt stack 0
  4987  0151D0                     _get_packet_size:
  4988                           	opt stack 20
  4989                           
  4990                           ; BSR set to: 0
  4991                           ;incstack = 0
  4992                           ;get_packet_size@packetID stored from wreg
  4993  0151D0  0100               	movlb	0	; () banked
  4994  0151D2  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  4995                           
  4996                           ;iRobotSerial.c: 61: switch (packetID) {
  4997  0151D4  D012               	goto	l2017
  4998  0151D6  0E01               	movlw	1
  4999  0151D8  0012               	return	
  5000  0151DA  0E01               	movlw	1
  5001  0151DC  0012               	return	
  5002  0151DE  0E01               	movlw	1
  5003  0151E0  0012               	return	
  5004  0151E2  0E01               	movlw	1
  5005  0151E4  0012               	return	
  5006  0151E6  0E01               	movlw	1
  5007  0151E8  0012               	return	
  5008  0151EA  0E01               	movlw	1
  5009  0151EC  0012               	return	
  5010  0151EE  0E01               	movlw	1
  5011  0151F0  0012               	return	
  5012  0151F2  0E02               	movlw	2
  5013  0151F4  0012               	return	
  5014  0151F6  0E02               	movlw	2
  5015                           
  5016                           ;iRobotSerial.c: 71: }
  5017  0151F8  0012               	return	
  5018  0151FA                     l2017:
  5019  0151FA  0100               	movlb	0	; () banked
  5020  0151FC  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  5021                           
  5022                           ; Switch size 1, requested type "space"
  5023                           ; Number of cases is 9, Range of values is 7 to 20
  5024                           ; switch strategies available:
  5025                           ; Name         Instructions Cycles
  5026                           ; simple_byte           28    15 (average)
  5027                           ;	Chosen strategy is simple_byte
  5028  0151FE  0A07               	xorlw	7	; case 7
  5029  015200  B4D8               	btfsc	status,2,c
  5030  015202  D7E9               	goto	l2018
  5031  015204  0A0F               	xorlw	15	; case 8
  5032  015206  B4D8               	btfsc	status,2,c
  5033  015208  D7E8               	goto	l2020
  5034  01520A  0A01               	xorlw	1	; case 9
  5035  01520C  B4D8               	btfsc	status,2,c
  5036  01520E  D7E7               	goto	l2021
  5037  015210  0A03               	xorlw	3	; case 10
  5038  015212  B4D8               	btfsc	status,2,c
  5039  015214  D7E6               	goto	l2022
  5040  015216  0A01               	xorlw	1	; case 11
  5041  015218  B4D8               	btfsc	status,2,c
  5042  01521A  D7E5               	goto	l2023
  5043  01521C  0A07               	xorlw	7	; case 12
  5044  01521E  B4D8               	btfsc	status,2,c
  5045  015220  D7E4               	goto	l2024
  5046  015222  0A01               	xorlw	1	; case 13
  5047  015224  B4D8               	btfsc	status,2,c
  5048  015226  D7E3               	goto	l2025
  5049  015228  0A1E               	xorlw	30	; case 19
  5050  01522A  B4D8               	btfsc	status,2,c
  5051  01522C  D7E2               	goto	l2026
  5052  01522E  0A07               	xorlw	7	; case 20
  5053  015230  A4D8               	btfss	status,2,c
  5054  015232  0012               	return	
  5055  015234  D7E0               	goto	l2027
  5056  015236                     __end_of_get_packet_size:
  5057                           	opt stack 0
  5058                           tosu	equ	0xFFF
  5059                           tosh	equ	0xFFE
  5060                           tosl	equ	0xFFD
  5061                           pclath	equ	0xFFA
  5062                           tblptru	equ	0xFF8
  5063                           tblptrh	equ	0xFF7
  5064                           tblptrl	equ	0xFF6
  5065                           tablat	equ	0xFF5
  5066                           prodh	equ	0xFF4
  5067                           prodl	equ	0xFF3
  5068                           postinc0	equ	0xFEE
  5069                           wreg	equ	0xFE8
  5070                           postdec1	equ	0xFE5
  5071                           fsr1h	equ	0xFE2
  5072                           fsr1l	equ	0xFE1
  5073                           indf2	equ	0xFDF
  5074                           postinc2	equ	0xFDE
  5075                           fsr2h	equ	0xFDA
  5076                           fsr2l	equ	0xFD9
  5077                           status	equ	0xFD8
  5078                           
  5079 ;; *************** function _eusart_getch *****************
  5080 ;; Defined at:
  5081 ;;		line 125 in file "Library/iRobotSerial.c"
  5082 ;; Parameters:    Size  Location     Type
  5083 ;;		None
  5084 ;; Auto vars:     Size  Location     Type
  5085 ;;		None
  5086 ;; Return value:  Size  Location     Type
  5087 ;;                  1    wreg      unsigned char 
  5088 ;; Registers used:
  5089 ;;		wreg, status,2
  5090 ;; Tracked objects:
  5091 ;;		On entry : 0/0
  5092 ;;		On exit  : 0/0
  5093 ;;		Unchanged: 0/0
  5094 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5095 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5096 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5097 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5098 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5099 ;;Total ram usage:        0 bytes
  5100 ;; Hardware stack levels used:    1
  5101 ;; Hardware stack levels required when called:    7
  5102 ;; This function calls:
  5103 ;;		Nothing
  5104 ;; This function is called by:
  5105 ;;		_irobot_query_and_update
  5106 ;; This function uses a non-reentrant model
  5107 ;;
  5108                           
  5109                           	psect	text13
  5110  016160                     __ptext13:
  5111                           	opt stack 0
  5112  016160                     _eusart_getch:
  5113                           	opt stack 20
  5114                           
  5115                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  5116                           
  5117                           ;incstack = 0
  5118  016160  AA9E               	btfss	3998,5,c	;volatile
  5119  016162  D7FE               	goto	_eusart_getch
  5120                           
  5121                           ;iRobotSerial.c: 127: return RCREG1;
  5122  016164  50AF               	movf	4015,w,c	;volatile
  5123  016166  0012               	return	
  5124  016168                     __end_of_eusart_getch:
  5125                           	opt stack 0
  5126                           tosu	equ	0xFFF
  5127                           tosh	equ	0xFFE
  5128                           tosl	equ	0xFFD
  5129                           pclath	equ	0xFFA
  5130                           tblptru	equ	0xFF8
  5131                           tblptrh	equ	0xFF7
  5132                           tblptrl	equ	0xFF6
  5133                           tablat	equ	0xFF5
  5134                           prodh	equ	0xFF4
  5135                           prodl	equ	0xFF3
  5136                           postinc0	equ	0xFEE
  5137                           wreg	equ	0xFE8
  5138                           postdec1	equ	0xFE5
  5139                           fsr1h	equ	0xFE2
  5140                           fsr1l	equ	0xFE1
  5141                           indf2	equ	0xFDF
  5142                           postinc2	equ	0xFDE
  5143                           fsr2h	equ	0xFDA
  5144                           fsr2l	equ	0xFD9
  5145                           status	equ	0xFD8
  5146                           
  5147 ;; *************** function _printf *****************
  5148 ;; Defined at:
  5149 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  5150 ;; Parameters:    Size  Location     Type
  5151 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  5152 ;;		 -> STR_6(14), STR_5(3), STR_4(46), STR_3(3), 
  5153 ;;		 -> STR_2(46), STR_1(3), 
  5154 ;; Auto vars:     Size  Location     Type
  5155 ;;  tmpval          4    0        struct .
  5156 ;;  cp              3    0        PTR const unsigned char 
  5157 ;;  val             2   34[BANK0 ] unsigned int 
  5158 ;;  ap              2   32[BANK0 ] PTR void [1]
  5159 ;;		 -> ?_printf(2), 
  5160 ;;  len             2    0        unsigned int 
  5161 ;;  c               1   36[BANK0 ] char 
  5162 ;;  flag            1   31[BANK0 ] unsigned char 
  5163 ;;  prec            1   30[BANK0 ] char 
  5164 ;; Return value:  Size  Location     Type
  5165 ;;                  2   21[BANK0 ] int 
  5166 ;; Registers used:
  5167 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5168 ;; Tracked objects:
  5169 ;;		On entry : 0/0
  5170 ;;		On exit  : 0/0
  5171 ;;		Unchanged: 0/0
  5172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5173 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5174 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5175 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5176 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5177 ;;Total ram usage:       16 bytes
  5178 ;; Hardware stack levels used:    1
  5179 ;; Hardware stack levels required when called:   12
  5180 ;; This function calls:
  5181 ;;		___lwdiv
  5182 ;;		___lwmod
  5183 ;;		_putch
  5184 ;; This function is called by:
  5185 ;;		_mode1
  5186 ;;		_mode2
  5187 ;; This function uses a non-reentrant model
  5188 ;;
  5189                           
  5190                           	psect	text14
  5191  01213E                     __ptext14:
  5192                           	opt stack 0
  5193  01213E                     _printf:
  5194                           	opt stack 17
  5195                           
  5196                           ;doprnt.c: 466: va_list ap;
  5197                           ;doprnt.c: 499: signed char c;
  5198                           ;doprnt.c: 506: signed char prec;
  5199                           ;doprnt.c: 508: unsigned char flag;
  5200                           ;doprnt.c: 523: union {
  5201                           ;doprnt.c: 524: unsigned long vd;
  5202                           ;doprnt.c: 525: double integ;
  5203                           ;doprnt.c: 526: } tmpval;
  5204                           ;doprnt.c: 528: unsigned int val;
  5205                           ;doprnt.c: 529: unsigned len;
  5206                           ;doprnt.c: 530: const char * cp;
  5207                           ;doprnt.c: 533: *ap = __va_start();
  5208                           
  5209                           ;incstack = 0
  5210  01213E  0ED1               	movlw	low (?_printf+2)
  5211  012140  0100               	movlb	0	; () banked
  5212  012142  6FDA               	movwf	printf@ap& (0+255),b
  5213  012144  0E00               	movlw	high (?_printf+2)
  5214  012146  0100               	movlb	0	; () banked
  5215  012148  6FDB               	movwf	(printf@ap+1)& (0+255),b
  5216                           
  5217                           ;doprnt.c: 536: while(c = *f++) {
  5218  01214A  D0C9               	goto	u10770
  5219  01214C                     
  5220                           ; BSR set to: 0
  5221                           ;doprnt.c: 538: if(c != '%')
  5222                           
  5223                           ; BSR set to: 0
  5224  01214C  0E25               	movlw	37
  5225  01214E  0100               	movlb	0	; () banked
  5226  012150  19DE               	xorwf	printf@c& (0+255),w,b
  5227  012152  B4D8               	btfsc	status,2,c
  5228  012154  D005               	goto	l2388
  5229                           
  5230                           ; BSR set to: 0
  5231                           ;doprnt.c: 540: {
  5232                           ;doprnt.c: 541: (putch(c) );
  5233  012156  0100               	movlb	0	; () banked
  5234  012158  51DE               	movf	printf@c& (0+255),w,b
  5235  01215A  EC5F  F0B0         	call	_putch
  5236                           
  5237                           ;doprnt.c: 542: continue;
  5238  01215E  D0BF               	goto	u10770
  5239  012160                     l2388:
  5240                           
  5241                           ;doprnt.c: 543: }
  5242                           ;doprnt.c: 548: flag = 0;
  5243  012160  0E00               	movlw	0
  5244  012162  0100               	movlb	0	; () banked
  5245  012164  6FD9               	movwf	printf@flag& (0+255),b
  5246                           
  5247                           ;doprnt.c: 635: switch(c = *f++) {
  5248  012166  D014               	goto	l2389
  5249  012168                     
  5250                           ; BSR set to: 0
  5251                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5252                           
  5253                           ; BSR set to: 0
  5254  012168  C0DA  FFD9         	movff	printf@ap,fsr2l
  5255  01216C  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  5256  012170  50DF               	movf	indf2,w,c
  5257  012172  0100               	movlb	0	; () banked
  5258  012174  6FDE               	movwf	printf@c& (0+255),b
  5259                           
  5260                           ; BSR set to: 0
  5261  012176  0E02               	movlw	2
  5262  012178  0100               	movlb	0	; () banked
  5263  01217A  27DA               	addwf	printf@ap& (0+255),f,b
  5264  01217C  0E00               	movlw	0
  5265  01217E  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  5266  012180                     
  5267                           ; BSR set to: 0
  5268                           ;doprnt.c: 809: (putch(c) );
  5269                           
  5270                           ; BSR set to: 0
  5271  012180  0100               	movlb	0	; () banked
  5272  012182  51DE               	movf	printf@c& (0+255),w,b
  5273  012184  EC5F  F0B0         	call	_putch
  5274                           
  5275                           ;doprnt.c: 810: continue;
  5276  012188  D0AA               	goto	u10770
  5277  01218A                     
  5278                           ;doprnt.c: 818: flag |= 0x40;
  5279  01218A  0100               	movlb	0	; () banked
  5280  01218C  8DD9               	bsf	printf@flag& (0+255),6,b
  5281                           
  5282                           ; BSR set to: 0
  5283                           ;doprnt.c: 822: }
  5284                           
  5285                           ;doprnt.c: 819: break;
  5286  01218E  D01E               	goto	l2394
  5287  012190                     l2389:
  5288                           
  5289                           ; BSR set to: 0
  5290                           
  5291                           ; BSR set to: 0
  5292  012190  C0CF  FFF6         	movff	printf@f,tblptrl
  5293  012194  C0D0  FFF7         	movff	printf@f+1,tblptrh
  5294  012198  0100               	movlb	0	; () banked
  5295  01219A  4BCF               	infsnz	printf@f& (0+255),f,b
  5296  01219C  2BD0               	incf	(printf@f+1)& (0+255),f,b
  5297  01219E                     	if	0	;tblptru may be non-zero
  5298  01219E                     	endif
  5299  01219E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5300  01219E  0E00               	movlw	low (__mediumconst shr (0+16))
  5301  0121A0  6EF8               	movwf	tblptru,c
  5302  0121A2                     	endif
  5303  0121A2  0008               	tblrd		*
  5304  0121A4  CFF5 F0DE          	movff	tablat,printf@c
  5305  0121A8  0100               	movlb	0	; () banked
  5306  0121AA  51DE               	movf	printf@c& (0+255),w,b
  5307                           
  5308                           ; Switch size 1, requested type "space"
  5309                           ; Number of cases is 5, Range of values is 0 to 117
  5310                           ; switch strategies available:
  5311                           ; Name         Instructions Cycles
  5312                           ; simple_byte           16     9 (average)
  5313                           ;	Chosen strategy is simple_byte
  5314  0121AC  0A00               	xorlw	0	; case 0
  5315  0121AE  B4D8               	btfsc	status,2,c
  5316  0121B0  0012               	return	
  5317  0121B2  0A63               	xorlw	99	; case 99
  5318  0121B4  B4D8               	btfsc	status,2,c
  5319  0121B6  D7D8               	goto	l2395
  5320  0121B8  0A07               	xorlw	7	; case 100
  5321  0121BA  B4D8               	btfsc	status,2,c
  5322  0121BC  D007               	goto	l2394
  5323  0121BE  0A0D               	xorlw	13	; case 105
  5324  0121C0  B4D8               	btfsc	status,2,c
  5325  0121C2  D004               	goto	l2394
  5326  0121C4  0A1C               	xorlw	28	; case 117
  5327  0121C6  B4D8               	btfsc	status,2,c
  5328  0121C8  D7E0               	goto	l2397
  5329  0121CA  D7DA               	goto	l2396
  5330  0121CC                     l2394:
  5331                           
  5332                           ; BSR set to: 0
  5333                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  5334  0121CC  0100               	movlb	0	; () banked
  5335  0121CE  BDD9               	btfsc	printf@flag& (0+255),6,b
  5336  0121D0  D019               	goto	l2398
  5337                           
  5338                           ; BSR set to: 0
  5339                           ;doprnt.c: 1253: {
  5340                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  5341  0121D2  C0DA  FFD9         	movff	printf@ap,fsr2l
  5342  0121D6  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  5343  0121DA  CFDE F0DC          	movff	postinc2,printf@val
  5344  0121DE  CFDD F0DD          	movff	postdec2,printf@val+1
  5345                           
  5346                           ; BSR set to: 0
  5347  0121E2  0E02               	movlw	2
  5348  0121E4  0100               	movlb	0	; () banked
  5349  0121E6  27DA               	addwf	printf@ap& (0+255),f,b
  5350  0121E8  0E00               	movlw	0
  5351  0121EA  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;doprnt.c: 1261: if((int)val < 0) {
  5355  0121EC  0100               	movlb	0	; () banked
  5356  0121EE  AFDD               	btfss	(printf@val+1)& (0+255),7,b
  5357  0121F0  D016               	goto	l2400
  5358                           
  5359                           ; BSR set to: 0
  5360                           ;doprnt.c: 1262: flag |= 0x03;
  5361  0121F2  0E03               	movlw	3
  5362  0121F4  0100               	movlb	0	; () banked
  5363  0121F6  13D9               	iorwf	printf@flag& (0+255),f,b
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;doprnt.c: 1263: val = -val;
  5367  0121F8  0100               	movlb	0	; () banked
  5368  0121FA  6DDC               	negf	printf@val& (0+255),b
  5369  0121FC  1FDD               	comf	(printf@val+1)& (0+255),f,b
  5370  0121FE  B0D8               	btfsc	status,0,c
  5371  012200  2BDD               	incf	(printf@val+1)& (0+255),f,b
  5372                           
  5373                           ; BSR set to: 0
  5374                           ;doprnt.c: 1264: }
  5375                           ;doprnt.c: 1266: }
  5376  012202  D00D               	goto	l2400
  5377  012204                     l2398:
  5378                           
  5379                           ; BSR set to: 0
  5380                           ;doprnt.c: 1268: else
  5381                           ;doprnt.c: 1273: {
  5382                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  5383                           
  5384                           ; BSR set to: 0
  5385  012204  C0DA  FFD9         	movff	printf@ap,fsr2l
  5386  012208  C0DB  FFDA         	movff	printf@ap+1,fsr2h
  5387  01220C  CFDE F0DC          	movff	postinc2,printf@val
  5388  012210  CFDD F0DD          	movff	postdec2,printf@val+1
  5389                           
  5390                           ; BSR set to: 0
  5391  012214  0E02               	movlw	2
  5392  012216  0100               	movlb	0	; () banked
  5393  012218  27DA               	addwf	printf@ap& (0+255),f,b
  5394  01221A  0E00               	movlw	0
  5395  01221C  23DB               	addwfc	(printf@ap+1)& (0+255),f,b
  5396  01221E                     l2400:
  5397                           
  5398                           ; BSR set to: 0
  5399                           ;doprnt.c: 1287: }
  5400                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  5401                           
  5402                           ; BSR set to: 0
  5403  01221E  0E01               	movlw	1
  5404  012220  0100               	movlb	0	; () banked
  5405  012222  6FDE               	movwf	printf@c& (0+255),b
  5406  012224                     l14135:
  5407                           
  5408                           ; BSR set to: 0
  5409  012224  0E05               	movlw	5
  5410  012226  0100               	movlb	0	; () banked
  5411  012228  19DE               	xorwf	printf@c& (0+255),w,b
  5412  01222A  B4D8               	btfsc	status,2,c
  5413  01222C  D019               	goto	u10750
  5414                           
  5415                           ; BSR set to: 0
  5416                           ;doprnt.c: 1306: if(val < dpowers[c])
  5417                           
  5418                           ; BSR set to: 0
  5419                           
  5420                           ; BSR set to: 0
  5421  01222E  0100               	movlb	0	; () banked
  5422  012230  51DE               	movf	printf@c& (0+255),w,b
  5423  012232  0D02               	mullw	2
  5424  012234  0EB7               	movlw	low _dpowers
  5425  012236  24F3               	addwf	prodl,w,c
  5426  012238  6EF6               	movwf	tblptrl,c
  5427  01223A  0EFD               	movlw	high _dpowers
  5428  01223C  20F4               	addwfc	prodh,w,c
  5429  01223E  6EF7               	movwf	tblptrh,c
  5430  012240                     	if	1	;There are 3 active tblptr bytes
  5431  012240  6AF8               	clrf	tblptru,c
  5432  012242  0E00               	movlw	low (__mediumconst shr (0+16))
  5433  012244  22F8               	addwfc	tblptru,f,c
  5434  012246                     	endif
  5435  012246  0009               	tblrd		*+
  5436  012248  50F5               	movf	tablat,w,c
  5437  01224A  0100               	movlb	0	; () banked
  5438  01224C  5DDC               	subwf	printf@val& (0+255),w,b
  5439  01224E  0009               	tblrd		*+
  5440  012250  50F5               	movf	tablat,w,c
  5441  012252  0100               	movlb	0	; () banked
  5442  012254  59DD               	subwfb	(printf@val+1)& (0+255),w,b
  5443  012256  A0D8               	btfss	status,0,c
  5444  012258  D003               	goto	u10750
  5445                           
  5446                           ; BSR set to: 0
  5447                           
  5448                           ; BSR set to: 0
  5449                           
  5450                           ; BSR set to: 0
  5451                           ;doprnt.c: 1307: break;
  5452  01225A  0100               	movlb	0	; () banked
  5453  01225C  2BDE               	incf	printf@c& (0+255),f,b
  5454  01225E  D7E2               	goto	l14135
  5455  012260                     u10750:
  5456                           
  5457                           ; BSR set to: 0
  5458                           ;doprnt.c: 1422: {
  5459                           ;doprnt.c: 1438: if(flag & 0x03)
  5460                           
  5461                           ; BSR set to: 0
  5462  012260  C0D9  F0D7         	movff	printf@flag,??_printf
  5463  012264  0E03               	movlw	3
  5464  012266  0100               	movlb	0	; () banked
  5465  012268  17D7               	andwf	??_printf& (0+255),f,b
  5466  01226A  B4D8               	btfsc	status,2,c
  5467  01226C  D003               	goto	l2404
  5468                           
  5469                           ; BSR set to: 0
  5470                           ;doprnt.c: 1439: (putch('-') );
  5471  01226E  0E2D               	movlw	45
  5472  012270  EC5F  F0B0         	call	_putch
  5473  012274                     l2404:
  5474                           
  5475                           ;doprnt.c: 1469: }
  5476                           ;doprnt.c: 1472: prec = c;
  5477  012274  C0DE  F0D8         	movff	printf@c,printf@prec
  5478                           
  5479                           ;doprnt.c: 1474: while(prec--) {
  5480  012278  D02C               	goto	l2405
  5481  01227A                     
  5482                           ;doprnt.c: 1478: {
  5483                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  5484  01227A  0100               	movlb	0	; () banked
  5485  01227C  51D8               	movf	printf@prec& (0+255),w,b
  5486  01227E  0D02               	mullw	2
  5487  012280  0EB7               	movlw	low _dpowers
  5488  012282  24F3               	addwf	prodl,w,c
  5489  012284  6EF6               	movwf	tblptrl,c
  5490  012286  0EFD               	movlw	high _dpowers
  5491  012288  20F4               	addwfc	prodh,w,c
  5492  01228A  6EF7               	movwf	tblptrh,c
  5493  01228C                     	if	1	;There are 3 active tblptr bytes
  5494  01228C  6AF8               	clrf	tblptru,c
  5495  01228E  0E00               	movlw	low (__mediumconst shr (0+16))
  5496  012290  22F8               	addwfc	tblptru,f,c
  5497  012292                     	endif
  5498  012292  0009               	tblrd		*+
  5499  012294  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  5500  012298  000A               	tblrd		*-
  5501  01229A  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  5502  01229E  C0DC  F0BA         	movff	printf@val,___lwdiv@dividend
  5503  0122A2  C0DD  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  5504  0122A6  EC46  F0A6         	call	___lwdiv	;wreg free
  5505  0122AA  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  5506  0122AE  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  5507  0122B2  0E00               	movlw	0
  5508  0122B4  0100               	movlb	0	; () banked
  5509  0122B6  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  5510  0122B8  0E0A               	movlw	10
  5511  0122BA  6FC3               	movwf	___lwmod@divisor& (0+255),b
  5512  0122BC  EC80  F0A9         	call	___lwmod	;wreg free
  5513  0122C0  0100               	movlb	0	; () banked
  5514  0122C2  51C1               	movf	?___lwmod& (0+255),w,b
  5515  0122C4  0F30               	addlw	48
  5516  0122C6  0100               	movlb	0	; () banked
  5517  0122C8  6FDE               	movwf	printf@c& (0+255),b
  5518                           
  5519                           ; BSR set to: 0
  5520                           ;doprnt.c: 1523: }
  5521                           ;doprnt.c: 1524: (putch(c) );
  5522  0122CA  0100               	movlb	0	; () banked
  5523  0122CC  51DE               	movf	printf@c& (0+255),w,b
  5524  0122CE  EC5F  F0B0         	call	_putch
  5525  0122D2                     l2405:
  5526  0122D2  0100               	movlb	0	; () banked
  5527  0122D4  07D8               	decf	printf@prec& (0+255),f,b
  5528  0122D6  0100               	movlb	0	; () banked
  5529  0122D8  29D8               	incf	printf@prec& (0+255),w,b
  5530  0122DA  A4D8               	btfss	status,2,c
  5531  0122DC  D7CE               	goto	l2406
  5532  0122DE                     u10770:
  5533                           
  5534                           ; BSR set to: 0
  5535                           
  5536                           ; BSR set to: 0
  5537  0122DE  C0CF  FFF6         	movff	printf@f,tblptrl
  5538  0122E2  C0D0  FFF7         	movff	printf@f+1,tblptrh
  5539  0122E6  0100               	movlb	0	; () banked
  5540  0122E8  4BCF               	infsnz	printf@f& (0+255),f,b
  5541  0122EA  2BD0               	incf	(printf@f+1)& (0+255),f,b
  5542  0122EC                     	if	0	;tblptru may be non-zero
  5543  0122EC                     	endif
  5544  0122EC                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  5545  0122EC  0E00               	movlw	low (__mediumconst shr (0+16))
  5546  0122EE  6EF8               	movwf	tblptru,c
  5547  0122F0                     	endif
  5548  0122F0  0008               	tblrd		*
  5549  0122F2  CFF5 F0DE          	movff	tablat,printf@c
  5550  0122F6  0100               	movlb	0	; () banked
  5551  0122F8  51DE               	movf	printf@c& (0+255),w,b
  5552  0122FA  B4D8               	btfsc	status,2,c
  5553  0122FC  0012               	return	
  5554  0122FE  D726               	goto	l2387
  5555  012300                     __end_of_printf:
  5556                           	opt stack 0
  5557                           tosu	equ	0xFFF
  5558                           tosh	equ	0xFFE
  5559                           tosl	equ	0xFFD
  5560                           pclath	equ	0xFFA
  5561                           tblptru	equ	0xFF8
  5562                           tblptrh	equ	0xFF7
  5563                           tblptrl	equ	0xFF6
  5564                           tablat	equ	0xFF5
  5565                           prodh	equ	0xFF4
  5566                           prodl	equ	0xFF3
  5567                           postinc0	equ	0xFEE
  5568                           wreg	equ	0xFE8
  5569                           postdec1	equ	0xFE5
  5570                           fsr1h	equ	0xFE2
  5571                           fsr1l	equ	0xFE1
  5572                           indf2	equ	0xFDF
  5573                           postinc2	equ	0xFDE
  5574                           postdec2	equ	0xFDD
  5575                           fsr2h	equ	0xFDA
  5576                           fsr2l	equ	0xFD9
  5577                           status	equ	0xFD8
  5578                           
  5579 ;; *************** function _putch *****************
  5580 ;; Defined at:
  5581 ;;		line 454 in file "Library/Console.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;  c               1    wreg     unsigned char 
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;  c               1   20[BANK0 ] unsigned char 
  5586 ;; Return value:  Size  Location     Type
  5587 ;;                  1    wreg      void 
  5588 ;; Registers used:
  5589 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5595 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5596 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5598 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5599 ;;Total ram usage:        1 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; Hardware stack levels required when called:   11
  5602 ;; This function calls:
  5603 ;;		_Console_PrintChar
  5604 ;; This function is called by:
  5605 ;;		_printf
  5606 ;; This function uses a non-reentrant model
  5607 ;;
  5608                           
  5609                           	psect	text15
  5610  0160BE                     __ptext15:
  5611                           	opt stack 0
  5612  0160BE                     _putch:
  5613                           	opt stack 17
  5614                           
  5615                           ; BSR set to: 0
  5616                           ;incstack = 0
  5617                           ;putch@c stored from wreg
  5618  0160BE  0100               	movlb	0	; () banked
  5619  0160C0  6FCE               	movwf	putch@c& (0+255),b
  5620                           
  5621                           ;Console.c: 456: Console_PrintChar(c);
  5622  0160C2  0100               	movlb	0	; () banked
  5623  0160C4  51CE               	movf	putch@c& (0+255),w,b
  5624  0160C6  EC60  F092         	call	_Console_PrintChar
  5625  0160CA  0012               	return		;funcret
  5626  0160CC                     __end_of_putch:
  5627                           	opt stack 0
  5628                           tosu	equ	0xFFF
  5629                           tosh	equ	0xFFE
  5630                           tosl	equ	0xFFD
  5631                           pclath	equ	0xFFA
  5632                           tblptru	equ	0xFF8
  5633                           tblptrh	equ	0xFF7
  5634                           tblptrl	equ	0xFF6
  5635                           tablat	equ	0xFF5
  5636                           prodh	equ	0xFF4
  5637                           prodl	equ	0xFF3
  5638                           postinc0	equ	0xFEE
  5639                           wreg	equ	0xFE8
  5640                           postdec1	equ	0xFE5
  5641                           fsr1h	equ	0xFE2
  5642                           fsr1l	equ	0xFE1
  5643                           indf2	equ	0xFDF
  5644                           postinc2	equ	0xFDE
  5645                           postdec2	equ	0xFDD
  5646                           fsr2h	equ	0xFDA
  5647                           fsr2l	equ	0xFD9
  5648                           status	equ	0xFD8
  5649                           
  5650 ;; *************** function _Console_PrintChar *****************
  5651 ;; Defined at:
  5652 ;;		line 322 in file "Library/Console.c"
  5653 ;; Parameters:    Size  Location     Type
  5654 ;;  pInput          1    wreg     unsigned char 
  5655 ;; Auto vars:     Size  Location     Type
  5656 ;;  pInput          1   19[BANK0 ] unsigned char 
  5657 ;; Return value:  Size  Location     Type
  5658 ;;                  1    wreg      void 
  5659 ;; Registers used:
  5660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5661 ;; Tracked objects:
  5662 ;;		On entry : 0/0
  5663 ;;		On exit  : 0/0
  5664 ;;		Unchanged: 0/0
  5665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5667 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5668 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5669 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5670 ;;Total ram usage:        4 bytes
  5671 ;; Hardware stack levels used:    1
  5672 ;; Hardware stack levels required when called:   10
  5673 ;; This function calls:
  5674 ;;		_Console_Backspace
  5675 ;;		_Console_FormFeed
  5676 ;;		_Console_IncrementCursor
  5677 ;;		_Console_NewLine
  5678 ;;		_Console_ResetCursor
  5679 ;;		_Console_Tab
  5680 ;; This function is called by:
  5681 ;;		_putch
  5682 ;;		_Console_PrintString
  5683 ;; This function uses a non-reentrant model
  5684 ;;
  5685                           
  5686                           	psect	text16
  5687  0124C0                     __ptext16:
  5688                           	opt stack 0
  5689  0124C0                     _Console_PrintChar:
  5690                           	opt stack 17
  5691                           
  5692                           ;incstack = 0
  5693                           ;Console_PrintChar@pInput stored from wreg
  5694  0124C0  0100               	movlb	0	; () banked
  5695  0124C2  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  5696                           
  5697                           ;Console.c: 324: switch(pInput)
  5698  0124C4  D0B1               	goto	l1036
  5699  0124C6                     
  5700                           ;Console.c: 327: case '\n':
  5701                           ;Console.c: 328: Console_NewLine();
  5702  0124C6  EC00  F0A3         	call	_Console_NewLine	;wreg free
  5703                           
  5704                           ;Console.c: 329: return;
  5705  0124CA  0012               	return	
  5706  0124CC                     
  5707                           ;Console.c: 331: Console_Backspace();
  5708  0124CC  ECE2  F0A9         	call	_Console_Backspace	;wreg free
  5709                           
  5710                           ;Console.c: 332: return;
  5711  0124D0  0012               	return	
  5712  0124D2                     
  5713                           ;Console.c: 334: Console_FormFeed();
  5714  0124D2  EC33  F0A4         	call	_Console_FormFeed	;wreg free
  5715                           
  5716                           ;Console.c: 335: return;
  5717  0124D6  0012               	return	
  5718  0124D8                     
  5719                           ;Console.c: 337: Console_Tab();
  5720  0124D8  EC29  F09E         	call	_Console_Tab	;wreg free
  5721                           
  5722                           ;Console.c: 338: return;
  5723  0124DC  0012               	return	
  5724  0124DE                     
  5725                           ;Console.c: 340: Console_IncrementCursor();
  5726  0124DE  EC1B  F0A9         	call	_Console_IncrementCursor	;wreg free
  5727                           
  5728                           ;Console.c: 341: return;
  5729  0124E2  0012               	return	
  5730  0124E4                     
  5731                           ;Console.c: 343: Console_ResetCursor();
  5732  0124E4  EC21  F0AF         	call	_Console_ResetCursor	;wreg free
  5733                           
  5734                           ;Console.c: 344: return;
  5735  0124E8  0012               	return	
  5736  0124EA                     
  5737                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5738                           
  5739                           ;Console.c: 349: default:
  5740  0124EA  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5741  0124EE  0E7F               	movlw	127
  5742  0124F0  0100               	movlb	0	; () banked
  5743  0124F2  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  5744  0124F4  0100               	movlb	0	; () banked
  5745  0124F6  5194               	movf	_lBufferY& (0+255),w,b
  5746  0124F8  0D14               	mullw	20
  5747  0124FA  0EAA               	movlw	low _lBuffer
  5748  0124FC  0100               	movlb	0	; () banked
  5749  0124FE  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5750  012500  0E04               	movlw	high _lBuffer
  5751  012502  0100               	movlb	0	; () banked
  5752  012504  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5753  012506  50F3               	movf	prodl,w,c
  5754  012508  0100               	movlb	0	; () banked
  5755  01250A  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5756  01250C  50F4               	movf	prodh,w,c
  5757  01250E  0100               	movlb	0	; () banked
  5758  012510  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5759  012512  0100               	movlb	0	; () banked
  5760  012514  5195               	movf	_lBufferX& (0+255),w,b
  5761  012516  0D01               	mullw	1
  5762  012518  50F3               	movf	prodl,w,c
  5763  01251A  0100               	movlb	0	; () banked
  5764  01251C  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5765  01251E  6ED9               	movwf	fsr2l,c
  5766  012520  50F4               	movf	prodh,w,c
  5767  012522  0100               	movlb	0	; () banked
  5768  012524  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5769  012526  6EDA               	movwf	fsr2h,c
  5770  012528  50DF               	movf	indf2,w,c
  5771  01252A  0B7F               	andlw	127
  5772  01252C  0100               	movlb	0	; () banked
  5773  01252E  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  5774  012530  B4D8               	btfsc	status,2,c
  5775  012532  D02E               	goto	l1047
  5776                           
  5777                           ; BSR set to: 0
  5778                           ;Console.c: 351: {
  5779                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5780  012534  0E01               	movlw	1
  5781  012536  0100               	movlb	0	; () banked
  5782  012538  6FFF               	movwf	_change& (0+255),b
  5783                           
  5784                           ; BSR set to: 0
  5785  01253A  0100               	movlb	0	; () banked
  5786  01253C  5194               	movf	_lBufferY& (0+255),w,b
  5787  01253E  0D14               	mullw	20
  5788  012540  0EAA               	movlw	low _lBuffer
  5789  012542  0100               	movlb	0	; () banked
  5790  012544  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  5791  012546  0E04               	movlw	high _lBuffer
  5792  012548  0100               	movlb	0	; () banked
  5793  01254A  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5794  01254C  50F3               	movf	prodl,w,c
  5795  01254E  0100               	movlb	0	; () banked
  5796  012550  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  5797  012552  50F4               	movf	prodh,w,c
  5798  012554  0100               	movlb	0	; () banked
  5799  012556  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5800  012558  0100               	movlb	0	; () banked
  5801  01255A  5195               	movf	_lBufferX& (0+255),w,b
  5802  01255C  0D01               	mullw	1
  5803  01255E  50F3               	movf	prodl,w,c
  5804  012560  0100               	movlb	0	; () banked
  5805  012562  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  5806  012564  6ED9               	movwf	fsr2l,c
  5807  012566  50F4               	movf	prodh,w,c
  5808  012568  0100               	movlb	0	; () banked
  5809  01256A  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5810  01256C  6EDA               	movwf	fsr2h,c
  5811  01256E  0100               	movlb	0	; () banked
  5812  012570  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  5813  012572  0980               	iorlw	128
  5814  012574  6EDF               	movwf	indf2,c
  5815                           
  5816                           ; BSR set to: 0
  5817                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  5818  012576  0100               	movlb	0	; () banked
  5819  012578  5194               	movf	_lBufferY& (0+255),w,b
  5820  01257A  0D02               	mullw	2
  5821  01257C  0E00               	movlw	low _lCBuffer
  5822  01257E  24F3               	addwf	prodl,w,c
  5823  012580  6ED9               	movwf	fsr2l,c
  5824  012582  0E03               	movlw	high _lCBuffer
  5825  012584  20F4               	addwfc	prodh,w,c
  5826  012586  6EDA               	movwf	fsr2h,c
  5827  012588  C0FD  FFDE         	movff	_gForecolour,postinc2
  5828  01258C  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  5829  012590                     l1047:
  5830                           
  5831                           ; BSR set to: 0
  5832                           ;Console.c: 354: }
  5833                           ;Console.c: 368: if(Console_IncrementCursor())
  5834                           
  5835                           ; BSR set to: 0
  5836  012590  EC1B  F0A9         	call	_Console_IncrementCursor	;wreg free
  5837  012594  0900               	iorlw	0
  5838  012596  B4D8               	btfsc	status,2,c
  5839  012598  0012               	return	
  5840                           
  5841                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  5842  01259A  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  5843  01259E  0E7F               	movlw	127
  5844  0125A0  0100               	movlb	0	; () banked
  5845  0125A2  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  5846  0125A4  0100               	movlb	0	; () banked
  5847  0125A6  5194               	movf	_lBufferY& (0+255),w,b
  5848  0125A8  0D14               	mullw	20
  5849  0125AA  0EAA               	movlw	low _lBuffer
  5850  0125AC  0100               	movlb	0	; () banked
  5851  0125AE  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5852  0125B0  0E04               	movlw	high _lBuffer
  5853  0125B2  0100               	movlb	0	; () banked
  5854  0125B4  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  5855  0125B6  50F3               	movf	prodl,w,c
  5856  0125B8  0100               	movlb	0	; () banked
  5857  0125BA  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  5858  0125BC  50F4               	movf	prodh,w,c
  5859  0125BE  0100               	movlb	0	; () banked
  5860  0125C0  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  5861  0125C2  0100               	movlb	0	; () banked
  5862  0125C4  5195               	movf	_lBufferX& (0+255),w,b
  5863  0125C6  0D01               	mullw	1
  5864  0125C8  50F3               	movf	prodl,w,c
  5865  0125CA  0100               	movlb	0	; () banked
  5866  0125CC  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  5867  0125CE  6ED9               	movwf	fsr2l,c
  5868  0125D0  50F4               	movf	prodh,w,c
  5869  0125D2  0100               	movlb	0	; () banked
  5870  0125D4  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  5871  0125D6  6EDA               	movwf	fsr2h,c
  5872  0125D8  50DF               	movf	indf2,w,c
  5873  0125DA  0B7F               	andlw	127
  5874  0125DC  0100               	movlb	0	; () banked
  5875  0125DE  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  5876  0125E0  B4D8               	btfsc	status,2,c
  5877  0125E2  0012               	return	
  5878                           
  5879                           ; BSR set to: 0
  5880                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  5881  0125E4  0E01               	movlw	1
  5882  0125E6  0100               	movlb	0	; () banked
  5883  0125E8  6FFF               	movwf	_change& (0+255),b
  5884                           
  5885                           ; BSR set to: 0
  5886  0125EA  0100               	movlb	0	; () banked
  5887  0125EC  5194               	movf	_lBufferY& (0+255),w,b
  5888  0125EE  0D14               	mullw	20
  5889  0125F0  0EAA               	movlw	low _lBuffer
  5890  0125F2  0100               	movlb	0	; () banked
  5891  0125F4  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  5892  0125F6  0E04               	movlw	high _lBuffer
  5893  0125F8  0100               	movlb	0	; () banked
  5894  0125FA  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  5895  0125FC  50F3               	movf	prodl,w,c
  5896  0125FE  0100               	movlb	0	; () banked
  5897  012600  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  5898  012602  50F4               	movf	prodh,w,c
  5899  012604  0100               	movlb	0	; () banked
  5900  012606  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  5901  012608  0100               	movlb	0	; () banked
  5902  01260A  5195               	movf	_lBufferX& (0+255),w,b
  5903  01260C  0D01               	mullw	1
  5904  01260E  50F3               	movf	prodl,w,c
  5905  012610  0100               	movlb	0	; () banked
  5906  012612  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  5907  012614  6ED9               	movwf	fsr2l,c
  5908  012616  50F4               	movf	prodh,w,c
  5909  012618  0100               	movlb	0	; () banked
  5910  01261A  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  5911  01261C  6EDA               	movwf	fsr2h,c
  5912  01261E  0100               	movlb	0	; () banked
  5913  012620  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  5914  012622  0980               	iorlw	128
  5915  012624  6EDF               	movwf	indf2,c
  5916                           
  5917                           ; BSR set to: 0
  5918                           ;Console.c: 372: };
  5919                           
  5920                           ; BSR set to: 0
  5921                           ;Console.c: 371: return;
  5922                           
  5923                           ; BSR set to: 0
  5924                           
  5925                           ; BSR set to: 0
  5926  012626  0012               	return	
  5927  012628                     l1036:
  5928                           
  5929                           ; BSR set to: 0
  5930  012628  0100               	movlb	0	; () banked
  5931  01262A  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  5932                           
  5933                           ; Switch size 1, requested type "space"
  5934                           ; Number of cases is 8, Range of values is 7 to 35
  5935                           ; switch strategies available:
  5936                           ; Name         Instructions Cycles
  5937                           ; simple_byte           25    13 (average)
  5938                           ;	Chosen strategy is simple_byte
  5939  01262C  0A07               	xorlw	7	; case 7
  5940  01262E  B4D8               	btfsc	status,2,c
  5941  012630  D756               	goto	l1043
  5942  012632  0A0F               	xorlw	15	; case 8
  5943  012634  B4D8               	btfsc	status,2,c
  5944  012636  D74A               	goto	l1040
  5945  012638  0A01               	xorlw	1	; case 9
  5946  01263A  B4D8               	btfsc	status,2,c
  5947  01263C  D74D               	goto	l1042
  5948  01263E  0A03               	xorlw	3	; case 10
  5949  012640  B4D8               	btfsc	status,2,c
  5950  012642  D741               	goto	l1037
  5951  012644  0A06               	xorlw	6	; case 12
  5952  012646  B4D8               	btfsc	status,2,c
  5953  012648  D744               	goto	l1041
  5954  01264A  0A01               	xorlw	1	; case 13
  5955  01264C  B4D8               	btfsc	status,2,c
  5956  01264E  D73B               	goto	l1037
  5957  012650  0A2D               	xorlw	45	; case 32
  5958  012652  B4D8               	btfsc	status,2,c
  5959  012654  D74A               	goto	l1045
  5960  012656  0A03               	xorlw	3	; case 35
  5961  012658  B4D8               	btfsc	status,2,c
  5962  01265A  D744               	goto	l1044
  5963  01265C  D746               	goto	l1045
  5964  01265E                     __end_of_Console_PrintChar:
  5965                           	opt stack 0
  5966                           tosu	equ	0xFFF
  5967                           tosh	equ	0xFFE
  5968                           tosl	equ	0xFFD
  5969                           pclath	equ	0xFFA
  5970                           tblptru	equ	0xFF8
  5971                           tblptrh	equ	0xFF7
  5972                           tblptrl	equ	0xFF6
  5973                           tablat	equ	0xFF5
  5974                           prodh	equ	0xFF4
  5975                           prodl	equ	0xFF3
  5976                           postinc0	equ	0xFEE
  5977                           wreg	equ	0xFE8
  5978                           postdec1	equ	0xFE5
  5979                           fsr1h	equ	0xFE2
  5980                           fsr1l	equ	0xFE1
  5981                           indf2	equ	0xFDF
  5982                           postinc2	equ	0xFDE
  5983                           postdec2	equ	0xFDD
  5984                           fsr2h	equ	0xFDA
  5985                           fsr2l	equ	0xFD9
  5986                           status	equ	0xFD8
  5987                           
  5988 ;; *************** function _Console_Tab *****************
  5989 ;; Defined at:
  5990 ;;		line 260 in file "Library/Console.c"
  5991 ;; Parameters:    Size  Location     Type
  5992 ;;		None
  5993 ;; Auto vars:     Size  Location     Type
  5994 ;;  c               1   15[BANK0 ] unsigned char 
  5995 ;;  i               1   14[BANK0 ] unsigned char 
  5996 ;;  t               1   13[BANK0 ] unsigned char 
  5997 ;; Return value:  Size  Location     Type
  5998 ;;                  1    wreg      void 
  5999 ;; Registers used:
  6000 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6001 ;; Tracked objects:
  6002 ;;		On entry : 0/0
  6003 ;;		On exit  : 0/0
  6004 ;;		Unchanged: 0/0
  6005 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6006 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6007 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6008 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6009 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6010 ;;Total ram usage:        8 bytes
  6011 ;; Hardware stack levels used:    1
  6012 ;; Hardware stack levels required when called:    9
  6013 ;; This function calls:
  6014 ;;		_Console_ClearCursor
  6015 ;;		_Console_IncrementCursor
  6016 ;;		___awdiv
  6017 ;; This function is called by:
  6018 ;;		_Console_PrintChar
  6019 ;; This function uses a non-reentrant model
  6020 ;;
  6021                           
  6022                           	psect	text17
  6023  013C52                     __ptext17:
  6024                           	opt stack 0
  6025  013C52                     _Console_Tab:
  6026                           	opt stack 17
  6027                           
  6028                           ;Console.c: 262: UINT8 i = 0;
  6029                           
  6030                           ;incstack = 0
  6031  013C52  0E00               	movlw	0
  6032  013C54  0100               	movlb	0	; () banked
  6033  013C56  6FC8               	movwf	Console_Tab@i& (0+255),b
  6034                           
  6035                           ; BSR set to: 0
  6036                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  6037  013C58  0EFA               	movlw	250
  6038  013C5A  2447               	addwf	_gCursor,w,c
  6039  013C5C  0100               	movlb	0	; () banked
  6040  013C5E  6FBA               	movwf	___awdiv@dividend& (0+255),b
  6041  013C60  0EFF               	movlw	255
  6042  013C62  2048               	addwfc	_gCursor+1,w,c
  6043  013C64  0100               	movlb	0	; () banked
  6044  013C66  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  6045  013C68  0E00               	movlw	0
  6046  013C6A  0100               	movlb	0	; () banked
  6047  013C6C  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  6048  013C6E  0E06               	movlw	6
  6049  013C70  6FBC               	movwf	___awdiv@divisor& (0+255),b
  6050  013C72  EC8A  F09E         	call	___awdiv	;wreg free
  6051  013C76  0100               	movlb	0	; () banked
  6052  013C78  51BA               	movf	?___awdiv& (0+255),w,b
  6053  013C7A  0100               	movlb	0	; () banked
  6054  013C7C  6FC9               	movwf	Console_Tab@c& (0+255),b
  6055                           
  6056                           ; BSR set to: 0
  6057                           ;Console.c: 264: UINT8 t = c/4;
  6058  013C7E  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  6059  013C82  0100               	movlb	0	; () banked
  6060  013C84  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  6061  013C86  0E00               	movlw	0
  6062  013C88  0100               	movlb	0	; () banked
  6063  013C8A  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  6064  013C8C  0E04               	movlw	4
  6065  013C8E  6FBC               	movwf	___awdiv@divisor& (0+255),b
  6066  013C90  EC8A  F09E         	call	___awdiv	;wreg free
  6067  013C94  0100               	movlb	0	; () banked
  6068  013C96  51BA               	movf	?___awdiv& (0+255),w,b
  6069  013C98  0100               	movlb	0	; () banked
  6070  013C9A  6FC7               	movwf	Console_Tab@t& (0+255),b
  6071                           
  6072                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  6073  013C9C  0E00               	movlw	0
  6074  013C9E  0100               	movlb	0	; () banked
  6075  013CA0  6FC8               	movwf	Console_Tab@i& (0+255),b
  6076  013CA2  D006               	goto	l1009
  6077  013CA4                     
  6078                           ; BSR set to: 0
  6079                           ;Console.c: 266: {
  6080                           ;Console.c: 267: Console_ClearCursor();
  6081                           
  6082                           ; BSR set to: 0
  6083  013CA4  EC9A  F0AC         	call	_Console_ClearCursor	;wreg free
  6084                           
  6085                           ;Console.c: 268: Console_IncrementCursor();
  6086  013CA8  EC1B  F0A9         	call	_Console_IncrementCursor	;wreg free
  6087  013CAC  0100               	movlb	0	; () banked
  6088  013CAE  2BC8               	incf	Console_Tab@i& (0+255),f,b
  6089  013CB0                     l1009:
  6090                           
  6091                           ; BSR set to: 0
  6092                           
  6093                           ; BSR set to: 0
  6094  013CB0  0100               	movlb	0	; () banked
  6095  013CB2  51C7               	movf	Console_Tab@t& (0+255),w,b
  6096  013CB4  0D04               	mullw	4
  6097  013CB6  1EF3               	comf	prodl,f,c
  6098  013CB8  1EF4               	comf	prodh,f,c
  6099  013CBA  4AF3               	infsnz	prodl,f,c
  6100  013CBC  2AF4               	incf	prodh,f,c
  6101  013CBE  0100               	movlb	0	; () banked
  6102  013CC0  51C9               	movf	Console_Tab@c& (0+255),w,b
  6103  013CC2  0100               	movlb	0	; () banked
  6104  013CC4  6FC2               	movwf	??_Console_Tab& (0+255),b
  6105  013CC6  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  6106  013CC8  50F3               	movf	prodl,w,c
  6107  013CCA  0100               	movlb	0	; () banked
  6108  013CCC  27C2               	addwf	??_Console_Tab& (0+255),f,b
  6109  013CCE  50F4               	movf	prodh,w,c
  6110  013CD0  0100               	movlb	0	; () banked
  6111  013CD2  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6112  013CD4  0100               	movlb	0	; () banked
  6113  013CD6  1FC2               	comf	??_Console_Tab& (0+255),f,b
  6114  013CD8  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  6115  013CDA  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  6116  013CDC  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  6117  013CDE  0E04               	movlw	4
  6118  013CE0  0100               	movlb	0	; () banked
  6119  013CE2  27C2               	addwf	??_Console_Tab& (0+255),f,b
  6120  013CE4  0E00               	movlw	0
  6121  013CE6  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  6122  013CE8  0100               	movlb	0	; () banked
  6123  013CEA  51C8               	movf	Console_Tab@i& (0+255),w,b
  6124  013CEC  0100               	movlb	0	; () banked
  6125  013CEE  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  6126  013CF0  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  6127  013CF2  0100               	movlb	0	; () banked
  6128  013CF4  51C2               	movf	??_Console_Tab& (0+255),w,b
  6129  013CF6  0100               	movlb	0	; () banked
  6130  013CF8  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  6131  013CFA  0100               	movlb	0	; () banked
  6132  013CFC  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  6133  013CFE  0A80               	xorlw	128
  6134  013D00  0100               	movlb	0	; () banked
  6135  013D02  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  6136  013D04  0100               	movlb	0	; () banked
  6137  013D06  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  6138  013D08  0A80               	xorlw	128
  6139  013D0A  0100               	movlb	0	; () banked
  6140  013D0C  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  6141  013D0E  B0D8               	btfsc	status,0,c
  6142  013D10  0012               	return	
  6143  013D12  D7C8               	goto	l1010
  6144  013D14                     __end_of_Console_Tab:
  6145                           	opt stack 0
  6146                           tosu	equ	0xFFF
  6147                           tosh	equ	0xFFE
  6148                           tosl	equ	0xFFD
  6149                           pclath	equ	0xFFA
  6150                           tblptru	equ	0xFF8
  6151                           tblptrh	equ	0xFF7
  6152                           tblptrl	equ	0xFF6
  6153                           tablat	equ	0xFF5
  6154                           prodh	equ	0xFF4
  6155                           prodl	equ	0xFF3
  6156                           postinc0	equ	0xFEE
  6157                           wreg	equ	0xFE8
  6158                           postdec1	equ	0xFE5
  6159                           fsr1h	equ	0xFE2
  6160                           fsr1l	equ	0xFE1
  6161                           indf2	equ	0xFDF
  6162                           postinc2	equ	0xFDE
  6163                           postdec2	equ	0xFDD
  6164                           fsr2h	equ	0xFDA
  6165                           fsr2l	equ	0xFD9
  6166                           status	equ	0xFD8
  6167                           
  6168 ;; *************** function ___awdiv *****************
  6169 ;; Defined at:
  6170 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  6171 ;; Parameters:    Size  Location     Type
  6172 ;;  dividend        2    0[BANK0 ] int 
  6173 ;;  divisor         2    2[BANK0 ] int 
  6174 ;; Auto vars:     Size  Location     Type
  6175 ;;  quotient        2    6[BANK0 ] int 
  6176 ;;  sign            1    5[BANK0 ] unsigned char 
  6177 ;;  counter         1    4[BANK0 ] unsigned char 
  6178 ;; Return value:  Size  Location     Type
  6179 ;;                  2    0[BANK0 ] int 
  6180 ;; Registers used:
  6181 ;;		wreg, status,2, status,0
  6182 ;; Tracked objects:
  6183 ;;		On entry : 0/0
  6184 ;;		On exit  : 0/0
  6185 ;;		Unchanged: 0/0
  6186 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6187 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6188 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6189 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6190 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6191 ;;Total ram usage:        8 bytes
  6192 ;; Hardware stack levels used:    1
  6193 ;; Hardware stack levels required when called:    7
  6194 ;; This function calls:
  6195 ;;		Nothing
  6196 ;; This function is called by:
  6197 ;;		_Console_Tab
  6198 ;; This function uses a non-reentrant model
  6199 ;;
  6200                           
  6201                           	psect	text18
  6202  013D14                     __ptext18:
  6203                           	opt stack 0
  6204  013D14                     ___awdiv:
  6205                           	opt stack 18
  6206                           
  6207                           ; BSR set to: 0
  6208                           ;incstack = 0
  6209  013D14  0E00               	movlw	0
  6210  013D16  0100               	movlb	0	; () banked
  6211  013D18  6FBF               	movwf	___awdiv@sign& (0+255),b
  6212                           
  6213                           ; BSR set to: 0
  6214  013D1A  0100               	movlb	0	; () banked
  6215  013D1C  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6216  013D1E  D008               	goto	l2577
  6217                           
  6218                           ; BSR set to: 0
  6219  013D20  0100               	movlb	0	; () banked
  6220  013D22  6DBC               	negf	___awdiv@divisor& (0+255),b
  6221  013D24  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  6222  013D26  B0D8               	btfsc	status,0,c
  6223  013D28  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  6224                           
  6225                           ; BSR set to: 0
  6226  013D2A  0E01               	movlw	1
  6227  013D2C  0100               	movlb	0	; () banked
  6228  013D2E  6FBF               	movwf	___awdiv@sign& (0+255),b
  6229  013D30                     l2577:
  6230                           
  6231                           ; BSR set to: 0
  6232                           
  6233                           ; BSR set to: 0
  6234  013D30  0100               	movlb	0	; () banked
  6235  013D32  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  6236  013D34  D008               	goto	l2578
  6237                           
  6238                           ; BSR set to: 0
  6239  013D36  0100               	movlb	0	; () banked
  6240  013D38  6DBA               	negf	___awdiv@dividend& (0+255),b
  6241  013D3A  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  6242  013D3C  B0D8               	btfsc	status,0,c
  6243  013D3E  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  6244                           
  6245                           ; BSR set to: 0
  6246  013D40  0E01               	movlw	1
  6247  013D42  0100               	movlb	0	; () banked
  6248  013D44  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  6249  013D46                     l2578:
  6250                           
  6251                           ; BSR set to: 0
  6252                           
  6253                           ; BSR set to: 0
  6254  013D46  0E00               	movlw	0
  6255  013D48  0100               	movlb	0	; () banked
  6256  013D4A  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  6257  013D4C  0E00               	movlw	0
  6258  013D4E  6FC0               	movwf	___awdiv@quotient& (0+255),b
  6259                           
  6260                           ; BSR set to: 0
  6261  013D50  0100               	movlb	0	; () banked
  6262  013D52  51BC               	movf	___awdiv@divisor& (0+255),w,b
  6263  013D54  0100               	movlb	0	; () banked
  6264  013D56  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  6265  013D58  B4D8               	btfsc	status,2,c
  6266  013D5A  D02C               	goto	l2585
  6267                           
  6268                           ; BSR set to: 0
  6269  013D5C  0E01               	movlw	1
  6270  013D5E  0100               	movlb	0	; () banked
  6271  013D60  6FBE               	movwf	___awdiv@counter& (0+255),b
  6272  013D62  D006               	goto	l2580
  6273  013D64                     
  6274                           ; BSR set to: 0
  6275                           
  6276                           ; BSR set to: 0
  6277  013D64  0100               	movlb	0	; () banked
  6278  013D66  90D8               	bcf	status,0,c
  6279  013D68  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  6280  013D6A  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  6281  013D6C  0100               	movlb	0	; () banked
  6282  013D6E  2BBE               	incf	___awdiv@counter& (0+255),f,b
  6283  013D70                     l2580:
  6284                           
  6285                           ; BSR set to: 0
  6286                           
  6287                           ; BSR set to: 0
  6288  013D70  0100               	movlb	0	; () banked
  6289  013D72  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  6290  013D74  D7F7               	goto	l2581
  6291  013D76                     u8720:
  6292                           
  6293                           ; BSR set to: 0
  6294                           
  6295                           ; BSR set to: 0
  6296                           
  6297                           ; BSR set to: 0
  6298  013D76  0100               	movlb	0	; () banked
  6299  013D78  90D8               	bcf	status,0,c
  6300  013D7A  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  6301  013D7C  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  6302                           
  6303                           ; BSR set to: 0
  6304  013D7E  0100               	movlb	0	; () banked
  6305  013D80  51BC               	movf	___awdiv@divisor& (0+255),w,b
  6306  013D82  0100               	movlb	0	; () banked
  6307  013D84  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  6308  013D86  0100               	movlb	0	; () banked
  6309  013D88  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6310  013D8A  0100               	movlb	0	; () banked
  6311  013D8C  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  6312  013D8E  A0D8               	btfss	status,0,c
  6313  013D90  D00A               	goto	l2584
  6314                           
  6315                           ; BSR set to: 0
  6316  013D92  0100               	movlb	0	; () banked
  6317  013D94  51BC               	movf	___awdiv@divisor& (0+255),w,b
  6318  013D96  0100               	movlb	0	; () banked
  6319  013D98  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  6320  013D9A  0100               	movlb	0	; () banked
  6321  013D9C  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  6322  013D9E  0100               	movlb	0	; () banked
  6323  013DA0  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  6324                           
  6325                           ; BSR set to: 0
  6326  013DA2  0100               	movlb	0	; () banked
  6327  013DA4  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  6328  013DA6                     l2584:
  6329                           
  6330                           ; BSR set to: 0
  6331                           
  6332                           ; BSR set to: 0
  6333  013DA6  0100               	movlb	0	; () banked
  6334  013DA8  90D8               	bcf	status,0,c
  6335  013DAA  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  6336  013DAC  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  6337                           
  6338                           ; BSR set to: 0
  6339  013DAE  0100               	movlb	0	; () banked
  6340  013DB0  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  6341  013DB2  D7E1               	goto	u8720
  6342  013DB4                     l2585:
  6343                           
  6344                           ; BSR set to: 0
  6345                           
  6346                           ; BSR set to: 0
  6347                           
  6348                           ; BSR set to: 0
  6349  013DB4  0100               	movlb	0	; () banked
  6350  013DB6  51BF               	movf	___awdiv@sign& (0+255),w,b
  6351  013DB8  0100               	movlb	0	; () banked
  6352  013DBA  B4D8               	btfsc	status,2,c
  6353  013DBC  D005               	goto	l2586
  6354                           
  6355                           ; BSR set to: 0
  6356  013DBE  0100               	movlb	0	; () banked
  6357  013DC0  6DC0               	negf	___awdiv@quotient& (0+255),b
  6358  013DC2  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  6359  013DC4  B0D8               	btfsc	status,0,c
  6360  013DC6  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  6361  013DC8                     l2586:
  6362                           
  6363                           ; BSR set to: 0
  6364                           
  6365                           ; BSR set to: 0
  6366  013DC8  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  6367  013DCC  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  6368  013DD0  0012               	return	
  6369  013DD2                     __end_of___awdiv:
  6370                           	opt stack 0
  6371                           tosu	equ	0xFFF
  6372                           tosh	equ	0xFFE
  6373                           tosl	equ	0xFFD
  6374                           pclath	equ	0xFFA
  6375                           tblptru	equ	0xFF8
  6376                           tblptrh	equ	0xFF7
  6377                           tblptrl	equ	0xFF6
  6378                           tablat	equ	0xFF5
  6379                           prodh	equ	0xFF4
  6380                           prodl	equ	0xFF3
  6381                           postinc0	equ	0xFEE
  6382                           wreg	equ	0xFE8
  6383                           postdec1	equ	0xFE5
  6384                           fsr1h	equ	0xFE2
  6385                           fsr1l	equ	0xFE1
  6386                           indf2	equ	0xFDF
  6387                           postinc2	equ	0xFDE
  6388                           postdec2	equ	0xFDD
  6389                           fsr2h	equ	0xFDA
  6390                           fsr2l	equ	0xFD9
  6391                           status	equ	0xFD8
  6392                           
  6393 ;; *************** function _Console_IncrementCursor *****************
  6394 ;; Defined at:
  6395 ;;		line 243 in file "Library/Console.c"
  6396 ;; Parameters:    Size  Location     Type
  6397 ;;		None
  6398 ;; Auto vars:     Size  Location     Type
  6399 ;;		None
  6400 ;; Return value:  Size  Location     Type
  6401 ;;                  1    wreg      unsigned char 
  6402 ;; Registers used:
  6403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6404 ;; Tracked objects:
  6405 ;;		On entry : 0/0
  6406 ;;		On exit  : 0/0
  6407 ;;		Unchanged: 0/0
  6408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6411 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6412 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6413 ;;Total ram usage:        2 bytes
  6414 ;; Hardware stack levels used:    1
  6415 ;; Hardware stack levels required when called:    8
  6416 ;; This function calls:
  6417 ;;		_Console_FormFeed
  6418 ;;		_Console_NewLine
  6419 ;; This function is called by:
  6420 ;;		_Console_Tab
  6421 ;;		_Console_PrintChar
  6422 ;; This function uses a non-reentrant model
  6423 ;;
  6424                           
  6425                           	psect	text19
  6426  015236                     __ptext19:
  6427                           	opt stack 0
  6428  015236                     _Console_IncrementCursor:
  6429                           	opt stack 17
  6430                           
  6431                           ;Console.c: 246: lBufferX += 1;
  6432                           
  6433                           ; BSR set to: 0
  6434                           ;incstack = 0
  6435  015236  0100               	movlb	0	; () banked
  6436  015238  2B95               	incf	_lBufferX& (0+255),f,b
  6437                           
  6438                           ; BSR set to: 0
  6439                           ;Console.c: 248: gCursor.x += 6;
  6440  01523A  0E06               	movlw	6
  6441  01523C  2647               	addwf	_gCursor,f,c
  6442  01523E  0E00               	movlw	0
  6443  015240  2248               	addwfc	_gCursor+1,f,c
  6444                           
  6445                           ; BSR set to: 0
  6446                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  6447  015242  0E06               	movlw	6
  6448  015244  2447               	addwf	_gCursor,w,c
  6449  015246  0100               	movlb	0	; () banked
  6450  015248  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  6451  01524A  0E00               	movlw	0
  6452  01524C  2048               	addwfc	_gCursor+1,w,c
  6453  01524E  0100               	movlb	0	; () banked
  6454  015250  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  6455  015252  0100               	movlb	0	; () banked
  6456  015254  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  6457  015256  D009               	goto	l1004
  6458  015258  0100               	movlb	0	; () banked
  6459  01525A  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  6460  01525C  E104               	bnz	u8630
  6461  01525E  0E80               	movlw	128
  6462  015260  0100               	movlb	0	; () banked
  6463  015262  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  6464  015264  B0D8               	btfsc	status,0,c
  6465  015266                     u8630:
  6466                           
  6467                           ; BSR set to: 0
  6468                           ;Console.c: 250: Console_NewLine();
  6469  015266  EC00  F0A3         	call	_Console_NewLine	;wreg free
  6470  01526A                     l1004:
  6471                           
  6472                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  6473  01526A  0E08               	movlw	8
  6474  01526C  2449               	addwf	_gCursor+2,w,c
  6475  01526E  0100               	movlb	0	; () banked
  6476  015270  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  6477  015272  0E00               	movlw	0
  6478  015274  204A               	addwfc	_gCursor+3,w,c
  6479  015276  0100               	movlb	0	; () banked
  6480  015278  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  6481  01527A  0100               	movlb	0	; () banked
  6482  01527C  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  6483  01527E  D00C               	goto	l1005
  6484  015280  0100               	movlb	0	; () banked
  6485  015282  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  6486  015284  E105               	bnz	u8640
  6487  015286  0E80               	movlw	128
  6488  015288  0100               	movlb	0	; () banked
  6489  01528A  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  6490  01528C  A0D8               	btfss	status,0,c
  6491  01528E  D004               	goto	l1005
  6492  015290                     u8640:
  6493                           
  6494                           ; BSR set to: 0
  6495                           ;Console.c: 252: {
  6496                           ;Console.c: 253: Console_FormFeed();
  6497  015290  EC33  F0A4         	call	_Console_FormFeed	;wreg free
  6498                           
  6499                           ;Console.c: 254: return 1;
  6500  015294  0E01               	movlw	1
  6501  015296  0012               	return	
  6502  015298                     l1005:
  6503                           
  6504                           ;Console.c: 255: }
  6505                           ;Console.c: 257: return 0;
  6506  015298  0E00               	movlw	0
  6507  01529A  0012               	return	
  6508  01529C                     __end_of_Console_IncrementCursor:
  6509                           	opt stack 0
  6510                           tosu	equ	0xFFF
  6511                           tosh	equ	0xFFE
  6512                           tosl	equ	0xFFD
  6513                           pclath	equ	0xFFA
  6514                           tblptru	equ	0xFF8
  6515                           tblptrh	equ	0xFF7
  6516                           tblptrl	equ	0xFF6
  6517                           tablat	equ	0xFF5
  6518                           prodh	equ	0xFF4
  6519                           prodl	equ	0xFF3
  6520                           postinc0	equ	0xFEE
  6521                           wreg	equ	0xFE8
  6522                           postdec1	equ	0xFE5
  6523                           fsr1h	equ	0xFE2
  6524                           fsr1l	equ	0xFE1
  6525                           indf2	equ	0xFDF
  6526                           postinc2	equ	0xFDE
  6527                           postdec2	equ	0xFDD
  6528                           fsr2h	equ	0xFDA
  6529                           fsr2l	equ	0xFD9
  6530                           status	equ	0xFD8
  6531                           
  6532 ;; *************** function _Console_NewLine *****************
  6533 ;; Defined at:
  6534 ;;		line 175 in file "Library/Console.c"
  6535 ;; Parameters:    Size  Location     Type
  6536 ;;		None
  6537 ;; Auto vars:     Size  Location     Type
  6538 ;;		None
  6539 ;; Return value:  Size  Location     Type
  6540 ;;                  1    wreg      void 
  6541 ;; Registers used:
  6542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6543 ;; Tracked objects:
  6544 ;;		On entry : 0/0
  6545 ;;		On exit  : 0/0
  6546 ;;		Unchanged: 0/0
  6547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6550 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6551 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6552 ;;Total ram usage:        2 bytes
  6553 ;; Hardware stack levels used:    1
  6554 ;; Hardware stack levels required when called:    7
  6555 ;; This function calls:
  6556 ;;		Nothing
  6557 ;; This function is called by:
  6558 ;;		_Console_IncrementCursor
  6559 ;;		_Console_PrintChar
  6560 ;; This function uses a non-reentrant model
  6561 ;;
  6562                           
  6563                           	psect	text20
  6564  014600                     __ptext20:
  6565                           	opt stack 0
  6566  014600                     _Console_NewLine:
  6567                           	opt stack 17
  6568                           
  6569                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  6570                           
  6571                           ;incstack = 0
  6572  014600  D03E               	goto	l983
  6573  014602                     
  6574                           ;Console.c: 179: {
  6575                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  6576  014602  0100               	movlb	0	; () banked
  6577  014604  5194               	movf	_lBufferY& (0+255),w,b
  6578  014606  0D14               	mullw	20
  6579  014608  0EAA               	movlw	low _lBuffer
  6580  01460A  0100               	movlb	0	; () banked
  6581  01460C  6FBA               	movwf	??_Console_NewLine& (0+255),b
  6582  01460E  0E04               	movlw	high _lBuffer
  6583  014610  0100               	movlb	0	; () banked
  6584  014612  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  6585  014614  50F3               	movf	prodl,w,c
  6586  014616  0100               	movlb	0	; () banked
  6587  014618  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  6588  01461A  50F4               	movf	prodh,w,c
  6589  01461C  0100               	movlb	0	; () banked
  6590  01461E  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  6591  014620  0100               	movlb	0	; () banked
  6592  014622  5195               	movf	_lBufferX& (0+255),w,b
  6593  014624  0D01               	mullw	1
  6594  014626  50F3               	movf	prodl,w,c
  6595  014628  0100               	movlb	0	; () banked
  6596  01462A  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  6597  01462C  6ED9               	movwf	fsr2l,c
  6598  01462E  50F4               	movf	prodh,w,c
  6599  014630  0100               	movlb	0	; () banked
  6600  014632  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  6601  014634  6EDA               	movwf	fsr2h,c
  6602  014636  50DF               	movf	indf2,w,c
  6603  014638  B4D8               	btfsc	status,2,c
  6604  01463A  D01F               	goto	l985
  6605                           
  6606                           ; BSR set to: 0
  6607                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  6608  01463C  0E01               	movlw	1
  6609  01463E  0100               	movlb	0	; () banked
  6610  014640  6FFF               	movwf	_change& (0+255),b
  6611                           
  6612                           ; BSR set to: 0
  6613  014642  0100               	movlb	0	; () banked
  6614  014644  5194               	movf	_lBufferY& (0+255),w,b
  6615  014646  0D14               	mullw	20
  6616  014648  0EAA               	movlw	low _lBuffer
  6617  01464A  0100               	movlb	0	; () banked
  6618  01464C  6FBA               	movwf	??_Console_NewLine& (0+255),b
  6619  01464E  0E04               	movlw	high _lBuffer
  6620  014650  0100               	movlb	0	; () banked
  6621  014652  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  6622  014654  50F3               	movf	prodl,w,c
  6623  014656  0100               	movlb	0	; () banked
  6624  014658  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  6625  01465A  50F4               	movf	prodh,w,c
  6626  01465C  0100               	movlb	0	; () banked
  6627  01465E  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  6628  014660  0100               	movlb	0	; () banked
  6629  014662  5195               	movf	_lBufferX& (0+255),w,b
  6630  014664  0D01               	mullw	1
  6631  014666  50F3               	movf	prodl,w,c
  6632  014668  0100               	movlb	0	; () banked
  6633  01466A  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  6634  01466C  6ED9               	movwf	fsr2l,c
  6635  01466E  50F4               	movf	prodh,w,c
  6636  014670  0100               	movlb	0	; () banked
  6637  014672  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  6638  014674  6EDA               	movwf	fsr2h,c
  6639  014676  0E80               	movlw	128
  6640  014678  6EDF               	movwf	indf2,c
  6641  01467A                     l985:
  6642                           
  6643                           ; BSR set to: 0
  6644                           ;Console.c: 182: lBufferX ++;
  6645                           
  6646                           ; BSR set to: 0
  6647  01467A  0100               	movlb	0	; () banked
  6648  01467C  2B95               	incf	_lBufferX& (0+255),f,b
  6649  01467E                     l983:
  6650                           
  6651                           ; BSR set to: 0
  6652  01467E  0E13               	movlw	19
  6653  014680  0100               	movlb	0	; () banked
  6654  014682  6595               	cpfsgt	_lBufferX& (0+255),b
  6655  014684  D7BE               	goto	l984
  6656                           
  6657                           ; BSR set to: 0
  6658                           ;Console.c: 183: }
  6659                           ;Console.c: 185: lBufferX = 0;
  6660                           
  6661                           ; BSR set to: 0
  6662  014686  0E00               	movlw	0
  6663  014688  0100               	movlb	0	; () banked
  6664  01468A  6F95               	movwf	_lBufferX& (0+255),b
  6665                           
  6666                           ; BSR set to: 0
  6667                           ;Console.c: 186: lBufferY ++;
  6668  01468C  0100               	movlb	0	; () banked
  6669  01468E  2B94               	incf	_lBufferY& (0+255),f,b
  6670                           
  6671                           ; BSR set to: 0
  6672                           ;Console.c: 188: gCursor.y += 8;
  6673  014690  0E08               	movlw	8
  6674  014692  2649               	addwf	_gCursor+2,f,c
  6675  014694  0E00               	movlw	0
  6676  014696  224A               	addwfc	_gCursor+3,f,c
  6677                           
  6678                           ; BSR set to: 0
  6679                           ;Console.c: 189: gCursor.x = 6;
  6680  014698  0E00               	movlw	0
  6681  01469A  6E48               	movwf	_gCursor+1,c
  6682  01469C  0E06               	movlw	6
  6683  01469E  6E47               	movwf	_gCursor,c
  6684                           
  6685                           ; BSR set to: 0
  6686  0146A0  0012               	return		;funcret
  6687  0146A2                     __end_of_Console_NewLine:
  6688                           	opt stack 0
  6689                           tosu	equ	0xFFF
  6690                           tosh	equ	0xFFE
  6691                           tosl	equ	0xFFD
  6692                           pclath	equ	0xFFA
  6693                           tblptru	equ	0xFF8
  6694                           tblptrh	equ	0xFF7
  6695                           tblptrl	equ	0xFF6
  6696                           tablat	equ	0xFF5
  6697                           prodh	equ	0xFF4
  6698                           prodl	equ	0xFF3
  6699                           postinc0	equ	0xFEE
  6700                           wreg	equ	0xFE8
  6701                           postdec1	equ	0xFE5
  6702                           fsr1h	equ	0xFE2
  6703                           fsr1l	equ	0xFE1
  6704                           indf2	equ	0xFDF
  6705                           postinc2	equ	0xFDE
  6706                           postdec2	equ	0xFDD
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _Console_FormFeed *****************
  6712 ;; Defined at:
  6713 ;;		line 192 in file "Library/Console.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;		None
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;  y               1    3[BANK0 ] unsigned char 
  6718 ;;  x               1    2[BANK0 ] unsigned char 
  6719 ;; Return value:  Size  Location     Type
  6720 ;;                  1    wreg      void 
  6721 ;; Registers used:
  6722 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6723 ;; Tracked objects:
  6724 ;;		On entry : 0/0
  6725 ;;		On exit  : 0/0
  6726 ;;		Unchanged: 0/0
  6727 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6728 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6732 ;;Total ram usage:        4 bytes
  6733 ;; Hardware stack levels used:    1
  6734 ;; Hardware stack levels required when called:    7
  6735 ;; This function calls:
  6736 ;;		Nothing
  6737 ;; This function is called by:
  6738 ;;		_Console_IncrementCursor
  6739 ;;		_Console_PrintChar
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text21
  6744  014866                     __ptext21:
  6745                           	opt stack 0
  6746  014866                     _Console_FormFeed:
  6747                           	opt stack 17
  6748                           
  6749                           ;Console.c: 195: lBufferX = 0;
  6750                           
  6751                           ; BSR set to: 0
  6752                           ;incstack = 0
  6753  014866  0E00               	movlw	0
  6754  014868  0100               	movlb	0	; () banked
  6755  01486A  6F95               	movwf	_lBufferX& (0+255),b
  6756                           
  6757                           ;Console.c: 196: lBufferY = 0;
  6758  01486C  0E00               	movlw	0
  6759  01486E  0100               	movlb	0	; () banked
  6760  014870  6F94               	movwf	_lBufferY& (0+255),b
  6761                           
  6762                           ;Console.c: 197: UINT8 x, y;
  6763                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  6764  014872  0E00               	movlw	0
  6765  014874  0100               	movlb	0	; () banked
  6766  014876  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  6767  014878                     l11899:
  6768                           
  6769                           ; BSR set to: 0
  6770  014878  0E0E               	movlw	14
  6771  01487A  0100               	movlb	0	; () banked
  6772  01487C  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  6773  01487E  D001               	goto	l990
  6774  014880  D02D               	goto	u8480
  6775  014882                     l990:
  6776                           
  6777                           ; BSR set to: 0
  6778                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  6779                           
  6780                           ; BSR set to: 0
  6781  014882  0E00               	movlw	0
  6782  014884  0100               	movlb	0	; () banked
  6783  014886  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  6784  014888                     l11905:
  6785                           
  6786                           ; BSR set to: 0
  6787  014888  0E13               	movlw	19
  6788  01488A  0100               	movlb	0	; () banked
  6789  01488C  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  6790  01488E  D001               	goto	l992
  6791  014890  D022               	goto	u8470
  6792  014892                     l992:
  6793                           
  6794                           ; BSR set to: 0
  6795                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  6796                           
  6797                           ; BSR set to: 0
  6798  014892  0E01               	movlw	1
  6799  014894  0100               	movlb	0	; () banked
  6800  014896  6FFF               	movwf	_change& (0+255),b
  6801                           
  6802                           ; BSR set to: 0
  6803  014898  0100               	movlb	0	; () banked
  6804  01489A  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  6805  01489C  0D14               	mullw	20
  6806  01489E  0EAA               	movlw	low _lBuffer
  6807  0148A0  0100               	movlb	0	; () banked
  6808  0148A2  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  6809  0148A4  0E04               	movlw	high _lBuffer
  6810  0148A6  0100               	movlb	0	; () banked
  6811  0148A8  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  6812  0148AA  50F3               	movf	prodl,w,c
  6813  0148AC  0100               	movlb	0	; () banked
  6814  0148AE  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  6815  0148B0  50F4               	movf	prodh,w,c
  6816  0148B2  0100               	movlb	0	; () banked
  6817  0148B4  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  6818  0148B6  0100               	movlb	0	; () banked
  6819  0148B8  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  6820  0148BA  0D01               	mullw	1
  6821  0148BC  50F3               	movf	prodl,w,c
  6822  0148BE  0100               	movlb	0	; () banked
  6823  0148C0  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  6824  0148C2  6ED9               	movwf	fsr2l,c
  6825  0148C4  50F4               	movf	prodh,w,c
  6826  0148C6  0100               	movlb	0	; () banked
  6827  0148C8  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  6828  0148CA  6EDA               	movwf	fsr2h,c
  6829  0148CC  0E80               	movlw	128
  6830  0148CE  6EDF               	movwf	indf2,c
  6831                           
  6832                           ; BSR set to: 0
  6833  0148D0  0100               	movlb	0	; () banked
  6834  0148D2  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  6835  0148D4  D7D9               	goto	l11905
  6836  0148D6                     u8470:
  6837                           
  6838                           ; BSR set to: 0
  6839                           
  6840                           ; BSR set to: 0
  6841  0148D6  0100               	movlb	0	; () banked
  6842  0148D8  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  6843  0148DA  D7CE               	goto	l11899
  6844  0148DC                     u8480:
  6845                           
  6846                           ; BSR set to: 0
  6847                           ;Console.c: 204: clearall = 1;
  6848                           
  6849                           ; BSR set to: 0
  6850  0148DC  0E01               	movlw	1
  6851  0148DE  0100               	movlb	0	; () banked
  6852  0148E0  6F96               	movwf	_clearall& (0+255),b
  6853                           
  6854                           ;Console.c: 205: gCursor.x = 6;
  6855  0148E2  0E00               	movlw	0
  6856  0148E4  6E48               	movwf	_gCursor+1,c
  6857  0148E6  0E06               	movlw	6
  6858  0148E8  6E47               	movwf	_gCursor,c
  6859                           
  6860                           ;Console.c: 206: gCursor.y = 6;
  6861  0148EA  0E00               	movlw	0
  6862  0148EC  6E4A               	movwf	_gCursor+3,c
  6863  0148EE  0E06               	movlw	6
  6864  0148F0  6E49               	movwf	_gCursor+2,c
  6865                           
  6866                           ; BSR set to: 0
  6867  0148F2  0012               	return		;funcret
  6868  0148F4                     __end_of_Console_FormFeed:
  6869                           	opt stack 0
  6870                           tosu	equ	0xFFF
  6871                           tosh	equ	0xFFE
  6872                           tosl	equ	0xFFD
  6873                           pclath	equ	0xFFA
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           postinc0	equ	0xFEE
  6881                           wreg	equ	0xFE8
  6882                           postdec1	equ	0xFE5
  6883                           fsr1h	equ	0xFE2
  6884                           fsr1l	equ	0xFE1
  6885                           indf2	equ	0xFDF
  6886                           postinc2	equ	0xFDE
  6887                           postdec2	equ	0xFDD
  6888                           fsr2h	equ	0xFDA
  6889                           fsr2l	equ	0xFD9
  6890                           status	equ	0xFD8
  6891                           
  6892 ;; *************** function _Console_ResetCursor *****************
  6893 ;; Defined at:
  6894 ;;		line 297 in file "Library/Console.c"
  6895 ;; Parameters:    Size  Location     Type
  6896 ;;		None
  6897 ;; Auto vars:     Size  Location     Type
  6898 ;;		None
  6899 ;; Return value:  Size  Location     Type
  6900 ;;                  1    wreg      void 
  6901 ;; Registers used:
  6902 ;;		wreg, status,2
  6903 ;; Tracked objects:
  6904 ;;		On entry : 0/0
  6905 ;;		On exit  : 0/0
  6906 ;;		Unchanged: 0/0
  6907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6912 ;;Total ram usage:        0 bytes
  6913 ;; Hardware stack levels used:    1
  6914 ;; Hardware stack levels required when called:    7
  6915 ;; This function calls:
  6916 ;;		Nothing
  6917 ;; This function is called by:
  6918 ;;		_Console_PrintChar
  6919 ;; This function uses a non-reentrant model
  6920 ;;
  6921                           
  6922                           	psect	text22
  6923  015E42                     __ptext22:
  6924                           	opt stack 0
  6925  015E42                     _Console_ResetCursor:
  6926                           	opt stack 19
  6927                           
  6928                           ;Console.c: 299: gCursor.x = 6;
  6929                           
  6930                           ; BSR set to: 0
  6931                           ;incstack = 0
  6932  015E42  0E00               	movlw	0
  6933  015E44  6E48               	movwf	_gCursor+1,c
  6934  015E46  0E06               	movlw	6
  6935  015E48  6E47               	movwf	_gCursor,c
  6936                           
  6937                           ;Console.c: 300: gCursor.y = 6;
  6938  015E4A  0E00               	movlw	0
  6939  015E4C  6E4A               	movwf	_gCursor+3,c
  6940  015E4E  0E06               	movlw	6
  6941  015E50  6E49               	movwf	_gCursor+2,c
  6942                           
  6943                           ;Console.c: 303: lBufferX = 0;
  6944  015E52  0E00               	movlw	0
  6945  015E54  0100               	movlb	0	; () banked
  6946  015E56  6F95               	movwf	_lBufferX& (0+255),b
  6947                           
  6948                           ;Console.c: 304: lBufferY = 0;
  6949  015E58  0E00               	movlw	0
  6950  015E5A  0100               	movlb	0	; () banked
  6951  015E5C  6F94               	movwf	_lBufferY& (0+255),b
  6952                           
  6953                           ; BSR set to: 0
  6954  015E5E  0012               	return		;funcret
  6955  015E60                     __end_of_Console_ResetCursor:
  6956                           	opt stack 0
  6957                           tosu	equ	0xFFF
  6958                           tosh	equ	0xFFE
  6959                           tosl	equ	0xFFD
  6960                           pclath	equ	0xFFA
  6961                           tblptru	equ	0xFF8
  6962                           tblptrh	equ	0xFF7
  6963                           tblptrl	equ	0xFF6
  6964                           tablat	equ	0xFF5
  6965                           prodh	equ	0xFF4
  6966                           prodl	equ	0xFF3
  6967                           postinc0	equ	0xFEE
  6968                           wreg	equ	0xFE8
  6969                           postdec1	equ	0xFE5
  6970                           fsr1h	equ	0xFE2
  6971                           fsr1l	equ	0xFE1
  6972                           indf2	equ	0xFDF
  6973                           postinc2	equ	0xFDE
  6974                           postdec2	equ	0xFDD
  6975                           fsr2h	equ	0xFDA
  6976                           fsr2l	equ	0xFD9
  6977                           status	equ	0xFD8
  6978                           
  6979 ;; *************** function _Console_Backspace *****************
  6980 ;; Defined at:
  6981 ;;		line 209 in file "Library/Console.c"
  6982 ;; Parameters:    Size  Location     Type
  6983 ;;		None
  6984 ;; Auto vars:     Size  Location     Type
  6985 ;;		None
  6986 ;; Return value:  Size  Location     Type
  6987 ;;                  1    wreg      void 
  6988 ;; Registers used:
  6989 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  6990 ;; Tracked objects:
  6991 ;;		On entry : 0/0
  6992 ;;		On exit  : 0/0
  6993 ;;		Unchanged: 0/0
  6994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6996 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6998 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6999 ;;Total ram usage:        0 bytes
  7000 ;; Hardware stack levels used:    1
  7001 ;; Hardware stack levels required when called:    8
  7002 ;; This function calls:
  7003 ;;		_Console_ClearCursor
  7004 ;; This function is called by:
  7005 ;;		_Console_PrintChar
  7006 ;; This function uses a non-reentrant model
  7007 ;;
  7008                           
  7009                           	psect	text23
  7010  0153C4                     __ptext23:
  7011                           	opt stack 0
  7012  0153C4                     _Console_Backspace:
  7013                           	opt stack 18
  7014                           
  7015                           ;Console.c: 211: if (lBufferX > 0)
  7016                           
  7017                           ; BSR set to: 0
  7018                           ;incstack = 0
  7019  0153C4  0100               	movlb	0	; () banked
  7020  0153C6  5195               	movf	_lBufferX& (0+255),w,b
  7021  0153C8  B4D8               	btfsc	status,2,c
  7022  0153CA  D007               	goto	l997
  7023                           
  7024                           ; BSR set to: 0
  7025                           ;Console.c: 212: {
  7026                           ;Console.c: 213: gCursor.x -= 6;
  7027  0153CC  0EFA               	movlw	250
  7028  0153CE  2647               	addwf	_gCursor,f,c
  7029  0153D0  0EFF               	movlw	255
  7030  0153D2  2248               	addwfc	_gCursor+1,f,c
  7031                           
  7032                           ; BSR set to: 0
  7033                           ;Console.c: 216: lBufferX --;
  7034  0153D4  0100               	movlb	0	; () banked
  7035  0153D6  0795               	decf	_lBufferX& (0+255),f,b
  7036                           
  7037                           ;Console.c: 218: }
  7038  0153D8  D020               	goto	l1000
  7039  0153DA                     l997:
  7040                           
  7041                           ; BSR set to: 0
  7042                           ;Console.c: 219: else if (lBufferY > 0)
  7043                           
  7044                           ; BSR set to: 0
  7045  0153DA  0100               	movlb	0	; () banked
  7046  0153DC  5194               	movf	_lBufferY& (0+255),w,b
  7047  0153DE  B4D8               	btfsc	status,2,c
  7048  0153E0  D00E               	goto	l999
  7049                           
  7050                           ; BSR set to: 0
  7051                           ;Console.c: 220: {
  7052                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  7053  0153E2  0E00               	movlw	0
  7054  0153E4  6E48               	movwf	_gCursor+1,c
  7055  0153E6  0E72               	movlw	114
  7056  0153E8  6E47               	movwf	_gCursor,c
  7057                           
  7058                           ; BSR set to: 0
  7059                           ;Console.c: 222: gCursor.y -= 8;
  7060  0153EA  0EF8               	movlw	248
  7061  0153EC  2649               	addwf	_gCursor+2,f,c
  7062  0153EE  0EFF               	movlw	255
  7063  0153F0  224A               	addwfc	_gCursor+3,f,c
  7064                           
  7065                           ; BSR set to: 0
  7066                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  7067  0153F2  0E13               	movlw	19
  7068  0153F4  0100               	movlb	0	; () banked
  7069  0153F6  6F95               	movwf	_lBufferX& (0+255),b
  7070                           
  7071                           ; BSR set to: 0
  7072                           ;Console.c: 226: lBufferY --;
  7073  0153F8  0100               	movlb	0	; () banked
  7074  0153FA  0794               	decf	_lBufferY& (0+255),f,b
  7075                           
  7076                           ;Console.c: 228: }
  7077  0153FC  D00E               	goto	l1000
  7078  0153FE                     l999:
  7079                           
  7080                           ; BSR set to: 0
  7081                           ;Console.c: 229: else
  7082                           ;Console.c: 230: {
  7083                           ;Console.c: 231: gCursor.x = 6;
  7084                           
  7085                           ; BSR set to: 0
  7086  0153FE  0E00               	movlw	0
  7087  015400  6E48               	movwf	_gCursor+1,c
  7088  015402  0E06               	movlw	6
  7089  015404  6E47               	movwf	_gCursor,c
  7090                           
  7091                           ;Console.c: 232: gCursor.y = 6;
  7092  015406  0E00               	movlw	0
  7093  015408  6E4A               	movwf	_gCursor+3,c
  7094  01540A  0E06               	movlw	6
  7095  01540C  6E49               	movwf	_gCursor+2,c
  7096                           
  7097                           ;Console.c: 235: lBufferX = 0;
  7098  01540E  0E00               	movlw	0
  7099  015410  0100               	movlb	0	; () banked
  7100  015412  6F95               	movwf	_lBufferX& (0+255),b
  7101                           
  7102                           ;Console.c: 236: lBufferY = 0;
  7103  015414  0E00               	movlw	0
  7104  015416  0100               	movlb	0	; () banked
  7105  015418  6F94               	movwf	_lBufferY& (0+255),b
  7106  01541A                     l1000:
  7107                           
  7108                           ; BSR set to: 0
  7109                           ;Console.c: 238: }
  7110                           ;Console.c: 240: Console_ClearCursor();
  7111                           
  7112                           ; BSR set to: 0
  7113                           
  7114                           ; BSR set to: 0
  7115  01541A  EC9A  F0AC         	call	_Console_ClearCursor	;wreg free
  7116  01541E  0012               	return		;funcret
  7117  015420                     __end_of_Console_Backspace:
  7118                           	opt stack 0
  7119                           tosu	equ	0xFFF
  7120                           tosh	equ	0xFFE
  7121                           tosl	equ	0xFFD
  7122                           pclath	equ	0xFFA
  7123                           tblptru	equ	0xFF8
  7124                           tblptrh	equ	0xFF7
  7125                           tblptrl	equ	0xFF6
  7126                           tablat	equ	0xFF5
  7127                           prodh	equ	0xFF4
  7128                           prodl	equ	0xFF3
  7129                           postinc0	equ	0xFEE
  7130                           wreg	equ	0xFE8
  7131                           postdec1	equ	0xFE5
  7132                           fsr1h	equ	0xFE2
  7133                           fsr1l	equ	0xFE1
  7134                           indf2	equ	0xFDF
  7135                           postinc2	equ	0xFDE
  7136                           postdec2	equ	0xFDD
  7137                           fsr2h	equ	0xFDA
  7138                           fsr2l	equ	0xFD9
  7139                           status	equ	0xFD8
  7140                           
  7141 ;; *************** function _Console_ClearCursor *****************
  7142 ;; Defined at:
  7143 ;;		line 308 in file "Library/Console.c"
  7144 ;; Parameters:    Size  Location     Type
  7145 ;;		None
  7146 ;; Auto vars:     Size  Location     Type
  7147 ;;		None
  7148 ;; Return value:  Size  Location     Type
  7149 ;;                  1    wreg      void 
  7150 ;; Registers used:
  7151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  7152 ;; Tracked objects:
  7153 ;;		On entry : 0/0
  7154 ;;		On exit  : 0/0
  7155 ;;		Unchanged: 0/0
  7156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7157 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7159 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7160 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7161 ;;Total ram usage:        2 bytes
  7162 ;; Hardware stack levels used:    1
  7163 ;; Hardware stack levels required when called:    7
  7164 ;; This function calls:
  7165 ;;		Nothing
  7166 ;; This function is called by:
  7167 ;;		_Console_Backspace
  7168 ;;		_Console_Tab
  7169 ;; This function uses a non-reentrant model
  7170 ;;
  7171                           
  7172                           	psect	text24
  7173  015934                     __ptext24:
  7174                           	opt stack 0
  7175  015934                     _Console_ClearCursor:
  7176                           	opt stack 18
  7177                           
  7178                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  7179                           
  7180                           ;incstack = 0
  7181  015934  0E01               	movlw	1
  7182  015936  0100               	movlb	0	; () banked
  7183  015938  6FFF               	movwf	_change& (0+255),b
  7184                           
  7185                           ; BSR set to: 0
  7186  01593A  0100               	movlb	0	; () banked
  7187  01593C  5194               	movf	_lBufferY& (0+255),w,b
  7188  01593E  0D14               	mullw	20
  7189  015940  0EAA               	movlw	low _lBuffer
  7190  015942  0100               	movlb	0	; () banked
  7191  015944  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  7192  015946  0E04               	movlw	high _lBuffer
  7193  015948  0100               	movlb	0	; () banked
  7194  01594A  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  7195  01594C  50F3               	movf	prodl,w,c
  7196  01594E  0100               	movlb	0	; () banked
  7197  015950  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  7198  015952  50F4               	movf	prodh,w,c
  7199  015954  0100               	movlb	0	; () banked
  7200  015956  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  7201  015958  0100               	movlb	0	; () banked
  7202  01595A  5195               	movf	_lBufferX& (0+255),w,b
  7203  01595C  0D01               	mullw	1
  7204  01595E  50F3               	movf	prodl,w,c
  7205  015960  0100               	movlb	0	; () banked
  7206  015962  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  7207  015964  6ED9               	movwf	fsr2l,c
  7208  015966  50F4               	movf	prodh,w,c
  7209  015968  0100               	movlb	0	; () banked
  7210  01596A  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  7211  01596C  6EDA               	movwf	fsr2h,c
  7212  01596E  0E80               	movlw	128
  7213  015970  6EDF               	movwf	indf2,c
  7214                           
  7215                           ; BSR set to: 0
  7216  015972  0012               	return		;funcret
  7217  015974                     __end_of_Console_ClearCursor:
  7218                           	opt stack 0
  7219                           tosu	equ	0xFFF
  7220                           tosh	equ	0xFFE
  7221                           tosl	equ	0xFFD
  7222                           pclath	equ	0xFFA
  7223                           tblptru	equ	0xFF8
  7224                           tblptrh	equ	0xFF7
  7225                           tblptrl	equ	0xFF6
  7226                           tablat	equ	0xFF5
  7227                           prodh	equ	0xFF4
  7228                           prodl	equ	0xFF3
  7229                           postinc0	equ	0xFEE
  7230                           wreg	equ	0xFE8
  7231                           postdec1	equ	0xFE5
  7232                           fsr1h	equ	0xFE2
  7233                           fsr1l	equ	0xFE1
  7234                           indf2	equ	0xFDF
  7235                           postinc2	equ	0xFDE
  7236                           postdec2	equ	0xFDD
  7237                           fsr2h	equ	0xFDA
  7238                           fsr2l	equ	0xFD9
  7239                           status	equ	0xFD8
  7240                           
  7241 ;; *************** function _irobot_stop_motion *****************
  7242 ;; Defined at:
  7243 ;;		line 288 in file "Library/iRobotSerial.c"
  7244 ;; Parameters:    Size  Location     Type
  7245 ;;  isScript        1    wreg     unsigned char 
  7246 ;; Auto vars:     Size  Location     Type
  7247 ;;  isScript        1   25[BANK0 ] unsigned char 
  7248 ;; Return value:  Size  Location     Type
  7249 ;;                  1    wreg      void 
  7250 ;; Registers used:
  7251 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7252 ;; Tracked objects:
  7253 ;;		On entry : 0/0
  7254 ;;		On exit  : 0/0
  7255 ;;		Unchanged: 0/0
  7256 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7257 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7258 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7259 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7260 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7261 ;;Total ram usage:        1 bytes
  7262 ;; Hardware stack levels used:    1
  7263 ;; Hardware stack levels required when called:    9
  7264 ;; This function calls:
  7265 ;;		_irobot_move
  7266 ;; This function is called by:
  7267 ;;		_mode1
  7268 ;;		_mode2
  7269 ;;		_irobot_move_to_simple
  7270 ;;		_irobot_rotate_to
  7271 ;; This function uses a non-reentrant model
  7272 ;;
  7273                           
  7274                           	psect	text25
  7275  0157DC                     __ptext25:
  7276                           	opt stack 0
  7277  0157DC                     _irobot_stop_motion:
  7278                           	opt stack 20
  7279                           
  7280                           ; BSR set to: 0
  7281                           ;incstack = 0
  7282                           ;irobot_stop_motion@isScript stored from wreg
  7283  0157DC  0100               	movlb	0	; () banked
  7284  0157DE  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  7285                           
  7286                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  7287  0157E0  0100               	movlb	0	; () banked
  7288  0157E2  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  7289  0157E4  0100               	movlb	0	; () banked
  7290  0157E6  B4D8               	btfsc	status,2,c
  7291  0157E8  D00E               	goto	l2163
  7292                           
  7293                           ; BSR set to: 0
  7294  0157EA  0E00               	movlw	0
  7295  0157EC  0100               	movlb	0	; () banked
  7296  0157EE  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7297  0157F0  0E00               	movlw	0
  7298  0157F2  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  7299  0157F4  0E00               	movlw	0
  7300  0157F6  0100               	movlb	0	; () banked
  7301  0157F8  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7302  0157FA  0E00               	movlw	0
  7303  0157FC  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7304  0157FE  0E01               	movlw	1
  7305  015800  EC5C  F0A0         	call	_irobot_move
  7306  015804  0012               	return	
  7307  015806                     l2163:
  7308  015806  0E00               	movlw	0
  7309  015808  0100               	movlb	0	; () banked
  7310  01580A  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  7311  01580C  0E00               	movlw	0
  7312  01580E  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  7313  015810  0E00               	movlw	0
  7314  015812  0100               	movlb	0	; () banked
  7315  015814  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  7316  015816  0E00               	movlw	0
  7317  015818  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  7318  01581A  0E00               	movlw	0
  7319  01581C  EC5C  F0A0         	call	_irobot_move
  7320  015820  0012               	return	
  7321  015822                     __end_of_irobot_stop_motion:
  7322                           	opt stack 0
  7323                           tosu	equ	0xFFF
  7324                           tosh	equ	0xFFE
  7325                           tosl	equ	0xFFD
  7326                           pclath	equ	0xFFA
  7327                           tblptru	equ	0xFF8
  7328                           tblptrh	equ	0xFF7
  7329                           tblptrl	equ	0xFF6
  7330                           tablat	equ	0xFF5
  7331                           prodh	equ	0xFF4
  7332                           prodl	equ	0xFF3
  7333                           postinc0	equ	0xFEE
  7334                           wreg	equ	0xFE8
  7335                           postdec1	equ	0xFE5
  7336                           fsr1h	equ	0xFE2
  7337                           fsr1l	equ	0xFE1
  7338                           indf2	equ	0xFDF
  7339                           postinc2	equ	0xFDE
  7340                           postdec2	equ	0xFDD
  7341                           fsr2h	equ	0xFDA
  7342                           fsr2l	equ	0xFD9
  7343                           status	equ	0xFD8
  7344                           
  7345 ;; *************** function _irobot_move *****************
  7346 ;; Defined at:
  7347 ;;		line 220 in file "Library/iRobotSerial.c"
  7348 ;; Parameters:    Size  Location     Type
  7349 ;;  isScript        1    wreg     unsigned char 
  7350 ;;  moveSpeed       2   16[BANK0 ] short 
  7351 ;;  moveTurnRadi    2   18[BANK0 ] short 
  7352 ;; Auto vars:     Size  Location     Type
  7353 ;;  isScript        1   24[BANK0 ] unsigned char 
  7354 ;; Return value:  Size  Location     Type
  7355 ;;                  1    wreg      void 
  7356 ;; Registers used:
  7357 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  7358 ;; Tracked objects:
  7359 ;;		On entry : 0/0
  7360 ;;		On exit  : 0/0
  7361 ;;		Unchanged: 0/0
  7362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7363 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7364 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7365 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7366 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7367 ;;Total ram usage:        9 bytes
  7368 ;; Hardware stack levels used:    1
  7369 ;; Hardware stack levels required when called:    8
  7370 ;; This function calls:
  7371 ;;		_eusart_putch
  7372 ;;		_load_iRScriptStack
  7373 ;;		_twos_complement_of
  7374 ;; This function is called by:
  7375 ;;		_irobot_stop_motion
  7376 ;;		_irobot_move_straight
  7377 ;;		_irobot_rotate
  7378 ;;		_irobot_move_to_simple
  7379 ;; This function uses a non-reentrant model
  7380 ;;
  7381                           
  7382                           	psect	text26
  7383  0140B8                     __ptext26:
  7384                           	opt stack 0
  7385  0140B8                     _irobot_move:
  7386                           	opt stack 20
  7387                           
  7388                           ;incstack = 0
  7389                           ;irobot_move@isScript stored from wreg
  7390  0140B8  0100               	movlb	0	; () banked
  7391  0140BA  6FD2               	movwf	irobot_move@isScript& (0+255),b
  7392                           
  7393                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  7394  0140BC  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  7395  0140C0  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  7396  0140C4  EC57  F0AC         	call	_twos_complement_of	;wreg free
  7397  0140C8  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  7398  0140CC  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  7399                           
  7400                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  7401  0140D0  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  7402  0140D4  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  7403  0140D8  EC57  F0AC         	call	_twos_complement_of	;wreg free
  7404  0140DC  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  7405  0140E0  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  7406                           
  7407                           ;iRobotSerial.c: 224: if (isScript) {
  7408  0140E4  0100               	movlb	0	; () banked
  7409  0140E6  51D2               	movf	irobot_move@isScript& (0+255),w,b
  7410  0140E8  0100               	movlb	0	; () banked
  7411  0140EA  B4D8               	btfsc	status,2,c
  7412  0140EC  D029               	goto	l2135
  7413                           
  7414                           ; BSR set to: 0
  7415                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  7416                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  7417                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  7418  0140EE  0E00               	movlw	0
  7419  0140F0  0100               	movlb	0	; () banked
  7420  0140F2  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  7421  0140F4  0E89               	movlw	137
  7422  0140F6  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  7423  0140F8  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  7424  0140FC  0100               	movlb	0	; () banked
  7425  0140FE  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  7426  014100  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  7427  014102  69CF               	setf	(??_irobot_move+1)& (0+255),b
  7428  014104  0100               	movlb	0	; () banked
  7429  014106  51CE               	movf	??_irobot_move& (0+255),w,b
  7430  014108  0100               	movlb	0	; () banked
  7431  01410A  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  7432  01410C  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  7433  01410E  0100               	movlb	0	; () banked
  7434  014110  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  7435  014112  0100               	movlb	0	; () banked
  7436  014114  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  7437  014116  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  7438  014118  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  7439  01411C  0100               	movlb	0	; () banked
  7440  01411E  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  7441  014120  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  7442  014122  69D1               	setf	(??_irobot_move+3)& (0+255),b
  7443  014124  0100               	movlb	0	; () banked
  7444  014126  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  7445  014128  0100               	movlb	0	; () banked
  7446  01412A  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  7447  01412C  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  7448  01412E  0100               	movlb	0	; () banked
  7449  014130  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7450  014132  0100               	movlb	0	; () banked
  7451  014134  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  7452  014136  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  7453  014138  0E05               	movlw	5
  7454  01413A  EC49  F0A8         	call	_load_iRScriptStack
  7455                           
  7456                           ;iRobotSerial.c: 228: }
  7457  01413E  0012               	return	
  7458  014140                     l2135:
  7459                           
  7460                           ;iRobotSerial.c: 229: else{
  7461                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  7462  014140  0E89               	movlw	137
  7463  014142  EC6D  F0B0         	call	_eusart_putch
  7464                           
  7465                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  7466  014146  0100               	movlb	0	; () banked
  7467  014148  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  7468  01414A  EC6D  F0B0         	call	_eusart_putch
  7469                           
  7470                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  7471  01414E  0100               	movlb	0	; () banked
  7472  014150  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  7473  014152  EC6D  F0B0         	call	_eusart_putch
  7474                           
  7475                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  7476  014156  0100               	movlb	0	; () banked
  7477  014158  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  7478  01415A  EC6D  F0B0         	call	_eusart_putch
  7479                           
  7480                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  7481  01415E  0100               	movlb	0	; () banked
  7482  014160  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  7483  014162  EC6D  F0B0         	call	_eusart_putch
  7484  014166  0012               	return	
  7485  014168                     __end_of_irobot_move:
  7486                           	opt stack 0
  7487                           tosu	equ	0xFFF
  7488                           tosh	equ	0xFFE
  7489                           tosl	equ	0xFFD
  7490                           pclath	equ	0xFFA
  7491                           tblptru	equ	0xFF8
  7492                           tblptrh	equ	0xFF7
  7493                           tblptrl	equ	0xFF6
  7494                           tablat	equ	0xFF5
  7495                           prodh	equ	0xFF4
  7496                           prodl	equ	0xFF3
  7497                           postinc0	equ	0xFEE
  7498                           wreg	equ	0xFE8
  7499                           postdec1	equ	0xFE5
  7500                           fsr1h	equ	0xFE2
  7501                           fsr1l	equ	0xFE1
  7502                           indf2	equ	0xFDF
  7503                           postinc2	equ	0xFDE
  7504                           postdec2	equ	0xFDD
  7505                           fsr2h	equ	0xFDA
  7506                           fsr2l	equ	0xFD9
  7507                           status	equ	0xFD8
  7508                           
  7509 ;; *************** function _twos_complement_of *****************
  7510 ;; Defined at:
  7511 ;;		line 167 in file "Library/iRobotSerial.c"
  7512 ;; Parameters:    Size  Location     Type
  7513 ;;  complementVa    2    0[BANK0 ] short 
  7514 ;; Auto vars:     Size  Location     Type
  7515 ;;		None
  7516 ;; Return value:  Size  Location     Type
  7517 ;;                  2    0[BANK0 ] unsigned short 
  7518 ;; Registers used:
  7519 ;;		wreg, status,2, status,0
  7520 ;; Tracked objects:
  7521 ;;		On entry : 0/0
  7522 ;;		On exit  : 0/0
  7523 ;;		Unchanged: 0/0
  7524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7525 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7526 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7527 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7528 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7529 ;;Total ram usage:        2 bytes
  7530 ;; Hardware stack levels used:    1
  7531 ;; Hardware stack levels required when called:    7
  7532 ;; This function calls:
  7533 ;;		Nothing
  7534 ;; This function is called by:
  7535 ;;		_irobot_move
  7536 ;;		_irobot_angle_wait
  7537 ;;		_irobot_distance_wait
  7538 ;; This function uses a non-reentrant model
  7539 ;;
  7540                           
  7541                           	psect	text27
  7542  0158AE                     __ptext27:
  7543                           	opt stack 0
  7544  0158AE                     _twos_complement_of:
  7545                           	opt stack 20
  7546                           
  7547                           ;iRobotSerial.c: 168: if (complementValue < 0) {
  7548                           
  7549                           ;incstack = 0
  7550  0158AE  0100               	movlb	0	; () banked
  7551  0158B0  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  7552  0158B2  D01A               	goto	l2106
  7553                           
  7554                           ; BSR set to: 0
  7555                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  7556  0158B4  0100               	movlb	0	; () banked
  7557  0158B6  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  7558  0158B8  D007               	goto	u9300
  7559  0158BA  0100               	movlb	0	; () banked
  7560  0158BC  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  7561  0158BE  E10A               	bnz	l2108
  7562  0158C0  0100               	movlb	0	; () banked
  7563  0158C2  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  7564  0158C4  B0D8               	btfsc	status,0,c
  7565  0158C6  D006               	goto	l2108
  7566  0158C8                     u9300:
  7567                           
  7568                           ; BSR set to: 0
  7569  0158C8  0100               	movlb	0	; () banked
  7570  0158CA  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  7571  0158CC  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7572  0158CE  B0D8               	btfsc	status,0,c
  7573  0158D0  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7574  0158D2  D004               	goto	l2110
  7575  0158D4                     l2108:
  7576                           
  7577                           ; BSR set to: 0
  7578  0158D4  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  7579  0158D8  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  7580  0158DC                     l2110:
  7581                           
  7582                           ; BSR set to: 0
  7583                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  7584                           
  7585                           ; BSR set to: 0
  7586  0158DC  0100               	movlb	0	; () banked
  7587  0158DE  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  7588  0158E0  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7589                           
  7590                           ;iRobotSerial.c: 171: complementValue += 1;
  7591  0158E2  0100               	movlb	0	; () banked
  7592  0158E4  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  7593  0158E6  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  7594  0158E8                     l2106:
  7595                           
  7596                           ; BSR set to: 0
  7597                           ;iRobotSerial.c: 172: }
  7598                           ;iRobotSerial.c: 173: return complementValue;
  7599                           
  7600                           ; BSR set to: 0
  7601  0158E8  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  7602  0158EC  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  7603  0158F0  0012               	return	
  7604  0158F2                     __end_of_twos_complement_of:
  7605                           	opt stack 0
  7606                           tosu	equ	0xFFF
  7607                           tosh	equ	0xFFE
  7608                           tosl	equ	0xFFD
  7609                           pclath	equ	0xFFA
  7610                           tblptru	equ	0xFF8
  7611                           tblptrh	equ	0xFF7
  7612                           tblptrl	equ	0xFF6
  7613                           tablat	equ	0xFF5
  7614                           prodh	equ	0xFF4
  7615                           prodl	equ	0xFF3
  7616                           postinc0	equ	0xFEE
  7617                           wreg	equ	0xFE8
  7618                           postdec1	equ	0xFE5
  7619                           fsr1h	equ	0xFE2
  7620                           fsr1l	equ	0xFE1
  7621                           indf2	equ	0xFDF
  7622                           postinc2	equ	0xFDE
  7623                           postdec2	equ	0xFDD
  7624                           fsr2h	equ	0xFDA
  7625                           fsr2l	equ	0xFD9
  7626                           status	equ	0xFD8
  7627                           
  7628 ;; *************** function _irobot_song_play *****************
  7629 ;; Defined at:
  7630 ;;		line 274 in file "Library/iRobotSerial.c"
  7631 ;; Parameters:    Size  Location     Type
  7632 ;;  songNumber      1    wreg     unsigned char 
  7633 ;; Auto vars:     Size  Location     Type
  7634 ;;  songNumber      1    1[BANK0 ] unsigned char 
  7635 ;; Return value:  Size  Location     Type
  7636 ;;                  1    wreg      void 
  7637 ;; Registers used:
  7638 ;;		wreg, status,2, cstack
  7639 ;; Tracked objects:
  7640 ;;		On entry : 0/0
  7641 ;;		On exit  : 0/0
  7642 ;;		Unchanged: 0/0
  7643 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7644 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7645 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7646 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7647 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7648 ;;Total ram usage:        1 bytes
  7649 ;; Hardware stack levels used:    1
  7650 ;; Hardware stack levels required when called:    8
  7651 ;; This function calls:
  7652 ;;		_eusart_putch
  7653 ;; This function is called by:
  7654 ;;		_mode1
  7655 ;;		_mode2
  7656 ;; This function uses a non-reentrant model
  7657 ;;
  7658                           
  7659                           	psect	text28
  7660  016060                     __ptext28:
  7661                           	opt stack 0
  7662  016060                     _irobot_song_play:
  7663                           	opt stack 21
  7664                           
  7665                           ; BSR set to: 0
  7666                           ;incstack = 0
  7667                           ;irobot_song_play@songNumber stored from wreg
  7668  016060  0100               	movlb	0	; () banked
  7669  016062  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  7670                           
  7671                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  7672  016064  0E8D               	movlw	141
  7673  016066  EC6D  F0B0         	call	_eusart_putch
  7674                           
  7675                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  7676  01606A  0100               	movlb	0	; () banked
  7677  01606C  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  7678  01606E  EC6D  F0B0         	call	_eusart_putch
  7679  016072  0012               	return		;funcret
  7680  016074                     __end_of_irobot_song_play:
  7681                           	opt stack 0
  7682                           tosu	equ	0xFFF
  7683                           tosh	equ	0xFFE
  7684                           tosl	equ	0xFFD
  7685                           pclath	equ	0xFFA
  7686                           tblptru	equ	0xFF8
  7687                           tblptrh	equ	0xFF7
  7688                           tblptrl	equ	0xFF6
  7689                           tablat	equ	0xFF5
  7690                           prodh	equ	0xFF4
  7691                           prodl	equ	0xFF3
  7692                           postinc0	equ	0xFEE
  7693                           wreg	equ	0xFE8
  7694                           postdec1	equ	0xFE5
  7695                           fsr1h	equ	0xFE2
  7696                           fsr1l	equ	0xFE1
  7697                           indf2	equ	0xFDF
  7698                           postinc2	equ	0xFDE
  7699                           postdec2	equ	0xFDD
  7700                           fsr2h	equ	0xFDA
  7701                           fsr2l	equ	0xFD9
  7702                           status	equ	0xFD8
  7703                           
  7704 ;; *************** function ___fltol *****************
  7705 ;; Defined at:
  7706 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  7707 ;; Parameters:    Size  Location     Type
  7708 ;;  f1              4   43[BANK0 ] void 
  7709 ;; Auto vars:     Size  Location     Type
  7710 ;;  exp1            1   52[BANK0 ] unsigned char 
  7711 ;;  sign1           1   51[BANK0 ] unsigned char 
  7712 ;; Return value:  Size  Location     Type
  7713 ;;                  4   43[BANK0 ] long 
  7714 ;; Registers used:
  7715 ;;		wreg, status,2, status,0
  7716 ;; Tracked objects:
  7717 ;;		On entry : 0/0
  7718 ;;		On exit  : 0/0
  7719 ;;		Unchanged: 0/0
  7720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7721 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7722 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7723 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7724 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7725 ;;Total ram usage:       10 bytes
  7726 ;; Hardware stack levels used:    1
  7727 ;; Hardware stack levels required when called:    7
  7728 ;; This function calls:
  7729 ;;		Nothing
  7730 ;; This function is called by:
  7731 ;;		_mode1
  7732 ;; This function uses a non-reentrant model
  7733 ;;
  7734                           
  7735                           	psect	text29
  7736  013468                     __ptext29:
  7737                           	opt stack 0
  7738  013468                     ___fltol:
  7739                           	opt stack 22
  7740                           
  7741                           ;incstack = 0
  7742  013468  0100               	movlb	0	; () banked
  7743  01346A  35E7               	rlcf	(___fltol@f1+2)& (0+255),w,b
  7744  01346C  35E8               	rlcf	(___fltol@f1+3)& (0+255),w,b
  7745  01346E  0100               	movlb	0	; () banked
  7746  013470  6FEE               	movwf	___fltol@exp1& (0+255),b
  7747  013472  0100               	movlb	0	; () banked
  7748  013474  51EE               	movf	___fltol@exp1& (0+255),w,b
  7749  013476  A4D8               	btfss	status,2,c
  7750  013478  D00A               	goto	l2639
  7751                           
  7752                           ; BSR set to: 0
  7753  01347A  0E00               	movlw	0
  7754  01347C  0100               	movlb	0	; () banked
  7755  01347E  6FE5               	movwf	?___fltol& (0+255),b
  7756  013480  0E00               	movlw	0
  7757  013482  6FE6               	movwf	(?___fltol+1)& (0+255),b
  7758  013484  0E00               	movlw	0
  7759  013486  6FE7               	movwf	(?___fltol+2)& (0+255),b
  7760  013488  0E00               	movlw	0
  7761  01348A  6FE8               	movwf	(?___fltol+3)& (0+255),b
  7762                           
  7763                           ; BSR set to: 0
  7764  01348C  0012               	return	
  7765  01348E                     l2639:
  7766                           
  7767                           ; BSR set to: 0
  7768                           
  7769                           ; BSR set to: 0
  7770  01348E  C0E5  F0E9         	movff	___fltol@f1,??___fltol
  7771  013492  C0E6  F0EA         	movff	___fltol@f1+1,??___fltol+1
  7772  013496  C0E7  F0EB         	movff	___fltol@f1+2,??___fltol+2
  7773  01349A  C0E8  F0EC         	movff	___fltol@f1+3,??___fltol+3
  7774  01349E  0E20               	movlw	32
  7775  0134A0  D006               	goto	u6830
  7776  0134A2                     u6835:
  7777  0134A2  0100               	movlb	0	; () banked
  7778  0134A4  90D8               	bcf	status,0,c
  7779  0134A6  33EC               	rrcf	(??___fltol+3)& (0+255),f,b
  7780  0134A8  33EB               	rrcf	(??___fltol+2)& (0+255),f,b
  7781  0134AA  33EA               	rrcf	(??___fltol+1)& (0+255),f,b
  7782  0134AC  33E9               	rrcf	??___fltol& (0+255),f,b
  7783  0134AE                     u6830:
  7784  0134AE  2EE8               	decfsz	wreg,f,c
  7785  0134B0  D7F8               	goto	u6835
  7786  0134B2  0100               	movlb	0	; () banked
  7787  0134B4  51E9               	movf	??___fltol& (0+255),w,b
  7788  0134B6  0100               	movlb	0	; () banked
  7789  0134B8  6FED               	movwf	___fltol@sign1& (0+255),b
  7790                           
  7791                           ; BSR set to: 0
  7792  0134BA  0100               	movlb	0	; () banked
  7793  0134BC  8FE7               	bsf	(___fltol@f1+2)& (0+255),7,b
  7794                           
  7795                           ; BSR set to: 0
  7796  0134BE  0EFF               	movlw	255
  7797  0134C0  0100               	movlb	0	; () banked
  7798  0134C2  17E5               	andwf	___fltol@f1& (0+255),f,b
  7799  0134C4  0EFF               	movlw	255
  7800  0134C6  17E6               	andwf	(___fltol@f1+1)& (0+255),f,b
  7801  0134C8  0EFF               	movlw	255
  7802  0134CA  17E7               	andwf	(___fltol@f1+2)& (0+255),f,b
  7803  0134CC  0E00               	movlw	0
  7804  0134CE  17E8               	andwf	(___fltol@f1+3)& (0+255),f,b
  7805                           
  7806                           ; BSR set to: 0
  7807  0134D0  0E96               	movlw	150
  7808  0134D2  0100               	movlb	0	; () banked
  7809  0134D4  5FEE               	subwf	___fltol@exp1& (0+255),f,b
  7810                           
  7811                           ; BSR set to: 0
  7812  0134D6  0100               	movlb	0	; () banked
  7813  0134D8  AFEE               	btfss	___fltol@exp1& (0+255),7,b
  7814  0134DA  D01A               	goto	l2641
  7815                           
  7816                           ; BSR set to: 0
  7817  0134DC  0100               	movlb	0	; () banked
  7818  0134DE  51EE               	movf	___fltol@exp1& (0+255),w,b
  7819  0134E0  0A80               	xorlw	128
  7820  0134E2  0F97               	addlw	151
  7821  0134E4  B0D8               	btfsc	status,0,c
  7822  0134E6  D00A               	goto	l2642
  7823                           
  7824                           ; BSR set to: 0
  7825  0134E8  0E00               	movlw	0
  7826  0134EA  0100               	movlb	0	; () banked
  7827  0134EC  6FE5               	movwf	?___fltol& (0+255),b
  7828  0134EE  0E00               	movlw	0
  7829  0134F0  6FE6               	movwf	(?___fltol+1)& (0+255),b
  7830  0134F2  0E00               	movlw	0
  7831  0134F4  6FE7               	movwf	(?___fltol+2)& (0+255),b
  7832  0134F6  0E00               	movlw	0
  7833  0134F8  6FE8               	movwf	(?___fltol+3)& (0+255),b
  7834                           
  7835                           ; BSR set to: 0
  7836  0134FA  0012               	return	
  7837  0134FC                     l2642:
  7838                           
  7839                           ; BSR set to: 0
  7840                           
  7841                           ; BSR set to: 0
  7842                           
  7843                           ; BSR set to: 0
  7844  0134FC  0100               	movlb	0	; () banked
  7845  0134FE  90D8               	bcf	status,0,c
  7846  013500  33E8               	rrcf	(___fltol@f1+3)& (0+255),f,b
  7847  013502  33E7               	rrcf	(___fltol@f1+2)& (0+255),f,b
  7848  013504  33E6               	rrcf	(___fltol@f1+1)& (0+255),f,b
  7849  013506  33E5               	rrcf	___fltol@f1& (0+255),f,b
  7850                           
  7851                           ; BSR set to: 0
  7852  013508  0100               	movlb	0	; () banked
  7853  01350A  3FEE               	incfsz	___fltol@exp1& (0+255),f,b
  7854  01350C  D7F7               	goto	l2642
  7855                           
  7856                           ; BSR set to: 0
  7857  01350E  D01B               	goto	u6870
  7858  013510                     l2641:
  7859                           
  7860                           ; BSR set to: 0
  7861                           
  7862                           ; BSR set to: 0
  7863  013510  0E1F               	movlw	31
  7864  013512  0100               	movlb	0	; () banked
  7865  013514  65EE               	cpfsgt	___fltol@exp1& (0+255),b
  7866  013516  D012               	goto	l2647
  7867                           
  7868                           ; BSR set to: 0
  7869  013518  0E00               	movlw	0
  7870  01351A  0100               	movlb	0	; () banked
  7871  01351C  6FE5               	movwf	?___fltol& (0+255),b
  7872  01351E  0E00               	movlw	0
  7873  013520  6FE6               	movwf	(?___fltol+1)& (0+255),b
  7874  013522  0E00               	movlw	0
  7875  013524  6FE7               	movwf	(?___fltol+2)& (0+255),b
  7876  013526  0E00               	movlw	0
  7877  013528  6FE8               	movwf	(?___fltol+3)& (0+255),b
  7878                           
  7879                           ; BSR set to: 0
  7880  01352A  0012               	return	
  7881  01352C                     
  7882                           ; BSR set to: 0
  7883                           
  7884                           ; BSR set to: 0
  7885  01352C  0100               	movlb	0	; () banked
  7886  01352E  90D8               	bcf	status,0,c
  7887  013530  37E5               	rlcf	___fltol@f1& (0+255),f,b
  7888  013532  37E6               	rlcf	(___fltol@f1+1)& (0+255),f,b
  7889  013534  37E7               	rlcf	(___fltol@f1+2)& (0+255),f,b
  7890  013536  37E8               	rlcf	(___fltol@f1+3)& (0+255),f,b
  7891  013538  0100               	movlb	0	; () banked
  7892  01353A  07EE               	decf	___fltol@exp1& (0+255),f,b
  7893  01353C                     l2647:
  7894                           
  7895                           ; BSR set to: 0
  7896                           
  7897                           ; BSR set to: 0
  7898  01353C  0100               	movlb	0	; () banked
  7899  01353E  51EE               	movf	___fltol@exp1& (0+255),w,b
  7900  013540  0100               	movlb	0	; () banked
  7901  013542  A4D8               	btfss	status,2,c
  7902  013544  D7F3               	goto	l2648
  7903  013546                     u6870:
  7904                           
  7905                           ; BSR set to: 0
  7906                           
  7907                           ; BSR set to: 0
  7908                           
  7909                           ; BSR set to: 0
  7910  013546  0100               	movlb	0	; () banked
  7911  013548  51ED               	movf	___fltol@sign1& (0+255),w,b
  7912  01354A  0100               	movlb	0	; () banked
  7913  01354C  B4D8               	btfsc	status,2,c
  7914  01354E  D009               	goto	l2650
  7915                           
  7916                           ; BSR set to: 0
  7917  013550  0100               	movlb	0	; () banked
  7918  013552  1FE8               	comf	(___fltol@f1+3)& (0+255),f,b
  7919  013554  1FE7               	comf	(___fltol@f1+2)& (0+255),f,b
  7920  013556  1FE6               	comf	(___fltol@f1+1)& (0+255),f,b
  7921  013558  6DE5               	negf	___fltol@f1& (0+255),b
  7922  01355A  0E00               	movlw	0
  7923  01355C  23E6               	addwfc	(___fltol@f1+1)& (0+255),f,b
  7924  01355E  23E7               	addwfc	(___fltol@f1+2)& (0+255),f,b
  7925  013560  23E8               	addwfc	(___fltol@f1+3)& (0+255),f,b
  7926  013562                     l2650:
  7927                           
  7928                           ; BSR set to: 0
  7929                           
  7930                           ; BSR set to: 0
  7931  013562  C0E5  F0E5         	movff	___fltol@f1,?___fltol
  7932  013566  C0E6  F0E6         	movff	___fltol@f1+1,?___fltol+1
  7933  01356A  C0E7  F0E7         	movff	___fltol@f1+2,?___fltol+2
  7934  01356E  C0E8  F0E8         	movff	___fltol@f1+3,?___fltol+3
  7935  013572  0012               	return	
  7936  013574                     __end_of___fltol:
  7937                           	opt stack 0
  7938                           tosu	equ	0xFFF
  7939                           tosh	equ	0xFFE
  7940                           tosl	equ	0xFFD
  7941                           pclath	equ	0xFFA
  7942                           tblptru	equ	0xFF8
  7943                           tblptrh	equ	0xFF7
  7944                           tblptrl	equ	0xFF6
  7945                           tablat	equ	0xFF5
  7946                           prodh	equ	0xFF4
  7947                           prodl	equ	0xFF3
  7948                           postinc0	equ	0xFEE
  7949                           wreg	equ	0xFE8
  7950                           postdec1	equ	0xFE5
  7951                           fsr1h	equ	0xFE2
  7952                           fsr1l	equ	0xFE1
  7953                           indf2	equ	0xFDF
  7954                           postinc2	equ	0xFDE
  7955                           postdec2	equ	0xFDD
  7956                           fsr2h	equ	0xFDA
  7957                           fsr2l	equ	0xFD9
  7958                           status	equ	0xFD8
  7959                           
  7960 ;; *************** function _Motor_Speed *****************
  7961 ;; Defined at:
  7962 ;;		line 117 in file "Library/Motor.c"
  7963 ;; Parameters:    Size  Location     Type
  7964 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  7965 ;;		 -> Stepper(6), 
  7966 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  7967 ;; Auto vars:     Size  Location     Type
  7968 ;;		None
  7969 ;; Return value:  Size  Location     Type
  7970 ;;                  1    wreg      unsigned char 
  7971 ;; Registers used:
  7972 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7973 ;; Tracked objects:
  7974 ;;		On entry : 0/0
  7975 ;;		On exit  : 0/0
  7976 ;;		Unchanged: 0/0
  7977 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7978 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7979 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7980 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7981 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7982 ;;Total ram usage:        4 bytes
  7983 ;; Hardware stack levels used:    1
  7984 ;; Hardware stack levels required when called:    9
  7985 ;; This function calls:
  7986 ;;		_Timer0_Init
  7987 ;; This function is called by:
  7988 ;;		_mode1
  7989 ;; This function uses a non-reentrant model
  7990 ;;
  7991                           
  7992                           	psect	text30
  7993  015D1A                     __ptext30:
  7994                           	opt stack 0
  7995  015D1A                     _Motor_Speed:
  7996                           	opt stack 20
  7997                           
  7998                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  7999                           
  8000                           ; BSR set to: 0
  8001                           ;incstack = 0
  8002  015D1A  0100               	movlb	0	; () banked
  8003  015D1C  EE20 F002          	lfsr	2,2
  8004  015D20  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  8005  015D22  26D9               	addwf	fsr2l,f,c
  8006  015D24  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  8007  015D26  22DA               	addwfc	fsr2h,f,c
  8008  015D28  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  8009  015D2C  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  8010                           
  8011                           ; BSR set to: 0
  8012                           ;Motor.c: 120: Timer0_Init(pFrequency);
  8013  015D30  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  8014  015D34  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  8015  015D38  0100               	movlb	0	; () banked
  8016  015D3A  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  8017  015D3C  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  8018  015D3E  ECE7  F096         	call	_Timer0_Init	;wreg free
  8019  015D42  0012               	return	
  8020  015D44                     __end_of_Motor_Speed:
  8021                           	opt stack 0
  8022                           tosu	equ	0xFFF
  8023                           tosh	equ	0xFFE
  8024                           tosl	equ	0xFFD
  8025                           pclath	equ	0xFFA
  8026                           tblptru	equ	0xFF8
  8027                           tblptrh	equ	0xFF7
  8028                           tblptrl	equ	0xFF6
  8029                           tablat	equ	0xFF5
  8030                           prodh	equ	0xFF4
  8031                           prodl	equ	0xFF3
  8032                           postinc0	equ	0xFEE
  8033                           wreg	equ	0xFE8
  8034                           postdec1	equ	0xFE5
  8035                           fsr1h	equ	0xFE2
  8036                           fsr1l	equ	0xFE1
  8037                           indf2	equ	0xFDF
  8038                           postinc2	equ	0xFDE
  8039                           postdec2	equ	0xFDD
  8040                           fsr2h	equ	0xFDA
  8041                           fsr2l	equ	0xFD9
  8042                           status	equ	0xFD8
  8043                           
  8044 ;; *************** function _Motor_Move *****************
  8045 ;; Defined at:
  8046 ;;		line 51 in file "Library/Motor.c"
  8047 ;; Parameters:    Size  Location     Type
  8048 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  8049 ;;		 -> Stepper(6), 
  8050 ;;  pDelta          2    5[BANK0 ] short 
  8051 ;; Auto vars:     Size  Location     Type
  8052 ;;		None
  8053 ;; Return value:  Size  Location     Type
  8054 ;;                  1    wreg      unsigned char 
  8055 ;; Registers used:
  8056 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8057 ;; Tracked objects:
  8058 ;;		On entry : 0/0
  8059 ;;		On exit  : 0/0
  8060 ;;		Unchanged: 0/0
  8061 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8062 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8063 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8064 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8065 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8066 ;;Total ram usage:        6 bytes
  8067 ;; Hardware stack levels used:    1
  8068 ;; Hardware stack levels required when called:    8
  8069 ;; This function calls:
  8070 ;;		_Timer0_Start
  8071 ;; This function is called by:
  8072 ;;		_mode1
  8073 ;; This function uses a non-reentrant model
  8074 ;;
  8075                           
  8076                           	psect	text31
  8077  015B22                     __ptext31:
  8078                           	opt stack 0
  8079  015B22                     _Motor_Move:
  8080                           	opt stack 21
  8081                           
  8082                           ;Motor.c: 54: lMotor = pMotor;
  8083                           
  8084                           ;incstack = 0
  8085  015B22  C0BD  F085         	movff	Motor_Move@pMotor,_lMotor
  8086  015B26  C0BE  F086         	movff	Motor_Move@pMotor+1,_lMotor+1
  8087                           
  8088                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  8089  015B2A  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8090  015B2E  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8091  015B32  50DE               	movf	postinc2,w,c
  8092  015B34  10DE               	iorwf	postinc2,w,c
  8093  015B36  A4D8               	btfss	status,2,c
  8094  015B38  0012               	return	
  8095                           
  8096                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  8097                           
  8098                           ;Motor.c: 59: return 0;
  8099                           ;	Return value of _Motor_Move is never used
  8100  015B3A  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  8101  015B3E  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  8102  015B42  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  8103  015B46  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  8104                           
  8105                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  8106  015B4A  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  8107  015B4E  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  8108  015B52  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  8109  015B56  ECCB  F0AE         	call	_Timer0_Start	;wreg free
  8110  015B5A  0012               	return	
  8111  015B5C                     __end_of_Motor_Move:
  8112                           	opt stack 0
  8113                           tosu	equ	0xFFF
  8114                           tosh	equ	0xFFE
  8115                           tosl	equ	0xFFD
  8116                           pclath	equ	0xFFA
  8117                           tblptru	equ	0xFF8
  8118                           tblptrh	equ	0xFF7
  8119                           tblptrl	equ	0xFF6
  8120                           tablat	equ	0xFF5
  8121                           prodh	equ	0xFF4
  8122                           prodl	equ	0xFF3
  8123                           postinc0	equ	0xFEE
  8124                           wreg	equ	0xFE8
  8125                           postdec1	equ	0xFE5
  8126                           fsr1h	equ	0xFE2
  8127                           fsr1l	equ	0xFE1
  8128                           indf2	equ	0xFDF
  8129                           postinc2	equ	0xFDE
  8130                           postdec2	equ	0xFDD
  8131                           fsr2h	equ	0xFDA
  8132                           fsr2l	equ	0xFD9
  8133                           status	equ	0xFD8
  8134                           
  8135 ;; *************** function _Timer0_Start *****************
  8136 ;; Defined at:
  8137 ;;		line 75 in file "Library/Timer0.c"
  8138 ;; Parameters:    Size  Location     Type
  8139 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  8140 ;;		 -> Absolute function(1), Motor_Step(1), 
  8141 ;; Auto vars:     Size  Location     Type
  8142 ;;		None
  8143 ;; Return value:  Size  Location     Type
  8144 ;;                  1    wreg      void 
  8145 ;; Registers used:
  8146 ;;		wreg, status,2, status,0
  8147 ;; Tracked objects:
  8148 ;;		On entry : 0/0
  8149 ;;		On exit  : 0/0
  8150 ;;		Unchanged: 0/0
  8151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8152 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8154 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8155 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8156 ;;Total ram usage:        3 bytes
  8157 ;; Hardware stack levels used:    1
  8158 ;; Hardware stack levels required when called:    7
  8159 ;; This function calls:
  8160 ;;		Nothing
  8161 ;; This function is called by:
  8162 ;;		_Motor_Move
  8163 ;; This function uses a non-reentrant model
  8164 ;;
  8165                           
  8166                           	psect	text32
  8167  015D96                     __ptext32:
  8168                           	opt stack 0
  8169  015D96                     _Timer0_Start:
  8170                           	opt stack 21
  8171                           
  8172                           ;Timer0.c: 77: gISR = pFunction;
  8173                           
  8174                           ;incstack = 0
  8175  015D96  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  8176  015D9A  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  8177  015D9E  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  8178                           
  8179                           ;Timer0.c: 78: TMR0 = COUNTER;
  8180  015DA2  C029  FFD6         	movff	_COUNTER,4054	;volatile
  8181  015DA6  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  8182                           
  8183                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  8184  015DAA  50D5               	movf	4053,w,c	;volatile
  8185  015DAC  0100               	movlb	0	; () banked
  8186  015DAE  1993               	xorwf	_INDEX& (0+255),w,b
  8187  015DB0  0BF8               	andlw	-8
  8188  015DB2  1993               	xorwf	_INDEX& (0+255),w,b
  8189  015DB4  6ED5               	movwf	4053,c	;volatile
  8190                           
  8191                           ; BSR set to: 0
  8192                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  8193  015DB6  94F2               	bcf	intcon,2,c	;volatile
  8194                           
  8195                           ; BSR set to: 0
  8196                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  8197  015DB8  8AF2               	bsf	intcon,5,c	;volatile
  8198                           
  8199                           ; BSR set to: 0
  8200  015DBA  0012               	return		;funcret
  8201  015DBC                     __end_of_Timer0_Start:
  8202                           	opt stack 0
  8203                           tosu	equ	0xFFF
  8204                           tosh	equ	0xFFE
  8205                           tosl	equ	0xFFD
  8206                           pclath	equ	0xFFA
  8207                           tblptru	equ	0xFF8
  8208                           tblptrh	equ	0xFF7
  8209                           tblptrl	equ	0xFF6
  8210                           tablat	equ	0xFF5
  8211                           prodh	equ	0xFF4
  8212                           prodl	equ	0xFF3
  8213                           intcon	equ	0xFF2
  8214                           postinc0	equ	0xFEE
  8215                           wreg	equ	0xFE8
  8216                           postdec1	equ	0xFE5
  8217                           fsr1h	equ	0xFE2
  8218                           fsr1l	equ	0xFE1
  8219                           indf2	equ	0xFDF
  8220                           postinc2	equ	0xFDE
  8221                           postdec2	equ	0xFDD
  8222                           fsr2h	equ	0xFDA
  8223                           fsr2l	equ	0xFD9
  8224                           status	equ	0xFD8
  8225                           
  8226 ;; *************** function _HMI_Render *****************
  8227 ;; Defined at:
  8228 ;;		line 138 in file "HMI.c"
  8229 ;; Parameters:    Size  Location     Type
  8230 ;;		None
  8231 ;; Auto vars:     Size  Location     Type
  8232 ;;  a               2    8[BANK0 ] unsigned short 
  8233 ;; Return value:  Size  Location     Type
  8234 ;;                  1    wreg      void 
  8235 ;; Registers used:
  8236 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8237 ;; Tracked objects:
  8238 ;;		On entry : 0/0
  8239 ;;		On exit  : 0/0
  8240 ;;		Unchanged: 0/0
  8241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8243 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8246 ;;Total ram usage:        2 bytes
  8247 ;; Hardware stack levels used:    1
  8248 ;; Hardware stack levels required when called:    9
  8249 ;; This function calls:
  8250 ;;		_OutSeg
  8251 ;; This function is called by:
  8252 ;;		_mode1
  8253 ;; This function uses a non-reentrant model
  8254 ;;
  8255                           
  8256                           	psect	text33
  8257  0159B4                     __ptext33:
  8258                           	opt stack 0
  8259  0159B4                     _HMI_Render:
  8260                           	opt stack 20
  8261                           
  8262                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  8263                           
  8264                           ; BSR set to: 0
  8265                           ;incstack = 0
  8266  0159B4  0E00               	movlw	0
  8267  0159B6  0100               	movlb	0	; () banked
  8268  0159B8  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  8269  0159BA  0E00               	movlw	0
  8270  0159BC  6FC2               	movwf	HMI_Render@a& (0+255),b
  8271  0159BE                     l13857:
  8272                           
  8273                           ; BSR set to: 0
  8274  0159BE  0100               	movlb	0	; () banked
  8275  0159C0  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  8276  0159C2  E116               	bnz	l1158
  8277  0159C4  0E08               	movlw	8
  8278  0159C6  0100               	movlb	0	; () banked
  8279  0159C8  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  8280  0159CA  B0D8               	btfsc	status,0,c
  8281  0159CC  0012               	return	
  8282                           
  8283                           ; BSR set to: 0
  8284                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  8285                           
  8286                           ; BSR set to: 0
  8287                           
  8288                           ; BSR set to: 0
  8289  0159CE  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  8290  0159D2  0E3C               	movlw	low _HMIBoard
  8291  0159D4  0100               	movlb	0	; () banked
  8292  0159D6  25C2               	addwf	HMI_Render@a& (0+255),w,b
  8293  0159D8  6ED9               	movwf	fsr2l,c
  8294  0159DA  0E03               	movlw	high _HMIBoard
  8295  0159DC  0100               	movlb	0	; () banked
  8296  0159DE  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  8297  0159E0  6EDA               	movwf	fsr2h,c
  8298  0159E2  50DF               	movf	indf2,w,c
  8299  0159E4  EC8A  F0A5         	call	_OutSeg
  8300  0159E8  0100               	movlb	0	; () banked
  8301  0159EA  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  8302  0159EC  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  8303  0159EE  D7E7               	goto	l13857
  8304  0159F0                     l1158:
  8305                           
  8306                           ; BSR set to: 0
  8307  0159F0  0012               	return		;funcret
  8308  0159F2                     __end_of_HMI_Render:
  8309                           	opt stack 0
  8310                           tosu	equ	0xFFF
  8311                           tosh	equ	0xFFE
  8312                           tosl	equ	0xFFD
  8313                           pclath	equ	0xFFA
  8314                           tblptru	equ	0xFF8
  8315                           tblptrh	equ	0xFF7
  8316                           tblptrl	equ	0xFF6
  8317                           tablat	equ	0xFF5
  8318                           prodh	equ	0xFF4
  8319                           prodl	equ	0xFF3
  8320                           intcon	equ	0xFF2
  8321                           postinc0	equ	0xFEE
  8322                           wreg	equ	0xFE8
  8323                           postdec1	equ	0xFE5
  8324                           fsr1h	equ	0xFE2
  8325                           fsr1l	equ	0xFE1
  8326                           indf2	equ	0xFDF
  8327                           postinc2	equ	0xFDE
  8328                           postdec2	equ	0xFDD
  8329                           fsr2h	equ	0xFDA
  8330                           fsr2l	equ	0xFD9
  8331                           status	equ	0xFD8
  8332                           
  8333 ;; *************** function _OutSeg *****************
  8334 ;; Defined at:
  8335 ;;		line 54 in file "HMI.c"
  8336 ;; Parameters:    Size  Location     Type
  8337 ;;  pInput          1    wreg     unsigned char 
  8338 ;;  pSegment        1    3[BANK0 ] unsigned char 
  8339 ;; Auto vars:     Size  Location     Type
  8340 ;;  pInput          1    6[BANK0 ] unsigned char 
  8341 ;;  out             1    7[BANK0 ] volatile unsigned char 
  8342 ;; Return value:  Size  Location     Type
  8343 ;;                  1    wreg      void 
  8344 ;; Registers used:
  8345 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  8346 ;; Tracked objects:
  8347 ;;		On entry : 0/0
  8348 ;;		On exit  : 0/0
  8349 ;;		Unchanged: 0/0
  8350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8351 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8352 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8353 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8354 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8355 ;;Total ram usage:        5 bytes
  8356 ;; Hardware stack levels used:    1
  8357 ;; Hardware stack levels required when called:    8
  8358 ;; This function calls:
  8359 ;;		_SPI_Send
  8360 ;; This function is called by:
  8361 ;;		_HMI_Render
  8362 ;;		_HMI_GRender
  8363 ;; This function uses a non-reentrant model
  8364 ;;
  8365                           
  8366                           	psect	text34
  8367  014B14                     __ptext34:
  8368                           	opt stack 0
  8369  014B14                     _OutSeg:
  8370                           	opt stack 20
  8371                           
  8372                           ; BSR set to: 0
  8373                           ;incstack = 0
  8374                           ;OutSeg@pInput stored from wreg
  8375  014B14  0100               	movlb	0	; () banked
  8376  014B16  6FC0               	movwf	OutSeg@pInput& (0+255),b
  8377                           
  8378                           ;HMI.c: 58: static UINT8 cur;
  8379                           ;HMI.c: 59: volatile UINT8 out;
  8380                           ;HMI.c: 60: static UINT8 segset;
  8381                           ;HMI.c: 61: static UINT8 a;
  8382                           ;HMI.c: 83: if (pSegment <= 8)
  8383  014B18  0E09               	movlw	9
  8384  014B1A  0100               	movlb	0	; () banked
  8385  014B1C  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  8386  014B1E  0012               	return	
  8387                           
  8388                           ; BSR set to: 0
  8389                           ;HMI.c: 84: {
  8390                           ;HMI.c: 85: cur = pInput;
  8391  014B20  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  8392                           
  8393                           ; BSR set to: 0
  8394                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  8395  014B24  0E00               	movlw	0
  8396  014B26  6E3D               	movwf	OutSeg@a,c
  8397  014B28                     l13215:
  8398                           
  8399                           ; BSR set to: 0
  8400  014B28  0E07               	movlw	7
  8401  014B2A  643D               	cpfsgt	OutSeg@a,c
  8402  014B2C  D001               	goto	l1146
  8403  014B2E  D027               	goto	u9630
  8404  014B30                     l1146:
  8405                           
  8406                           ;HMI.c: 87: {
  8407                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  8408                           
  8409                           ; BSR set to: 0
  8410  014B30  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  8411  014B34  0E01               	movlw	1
  8412  014B36  0100               	movlb	0	; () banked
  8413  014B38  17BE               	andwf	??_OutSeg& (0+255),f,b
  8414  014B3A  0E06               	movlw	6
  8415  014B3C  0100               	movlb	0	; () banked
  8416  014B3E  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  8417  014B40                     u9625:
  8418  014B40  0100               	movlb	0	; () banked
  8419  014B42  90D8               	bcf	status,0,c
  8420  014B44  37BE               	rlcf	??_OutSeg& (0+255),f,b
  8421  014B46  0100               	movlb	0	; () banked
  8422  014B48  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  8423  014B4A  D7FA               	goto	u9625
  8424  014B4C  0100               	movlb	0	; () banked
  8425  014B4E  51BE               	movf	??_OutSeg& (0+255),w,b
  8426  014B50  6E3E               	movwf	OutSeg@segset,c
  8427                           
  8428                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  8429  014B52  0100               	movlb	0	; () banked
  8430  014B54  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  8431  014B56  42E8               	rrncf	wreg,f,c
  8432  014B58  0BF8               	andlw	248
  8433  014B5A  103D               	iorwf	OutSeg@a,w,c
  8434  014B5C  103E               	iorwf	OutSeg@segset,w,c
  8435  014B5E  0100               	movlb	0	; () banked
  8436  014B60  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  8437                           
  8438                           ;HMI.c: 90: cur >>= 1;
  8439  014B62  90D8               	bcf	status,0,c
  8440  014B64  323F               	rrcf	OutSeg@cur,f,c
  8441                           
  8442                           ; BSR set to: 0
  8443                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  8444  014B66  0E76               	movlw	low _SPI1
  8445  014B68  0100               	movlb	0	; () banked
  8446  014B6A  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  8447  014B6C  0E03               	movlw	high _SPI1
  8448  014B6E  0100               	movlb	0	; () banked
  8449  014B70  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  8450  014B72  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  8451  014B76  EC13  F0A8         	call	_SPI_Send	;wreg free
  8452  014B7A  2A3D               	incf	OutSeg@a,f,c
  8453  014B7C  D7D5               	goto	l13215
  8454  014B7E                     u9630:
  8455                           
  8456                           ;HMI.c: 96: }
  8457                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  8458  014B7E  0E76               	movlw	low _SPI1
  8459  014B80  0100               	movlb	0	; () banked
  8460  014B82  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  8461  014B84  0E03               	movlw	high _SPI1
  8462  014B86  0100               	movlb	0	; () banked
  8463  014B88  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  8464  014B8A  0E00               	movlw	0
  8465  014B8C  0100               	movlb	0	; () banked
  8466  014B8E  6FBC               	movwf	SPI_Send@pData& (0+255),b
  8467  014B90  EC13  F0A8         	call	_SPI_Send	;wreg free
  8468  014B94  0012               	return	
  8469  014B96                     __end_of_OutSeg:
  8470                           	opt stack 0
  8471                           tosu	equ	0xFFF
  8472                           tosh	equ	0xFFE
  8473                           tosl	equ	0xFFD
  8474                           pclath	equ	0xFFA
  8475                           tblptru	equ	0xFF8
  8476                           tblptrh	equ	0xFF7
  8477                           tblptrl	equ	0xFF6
  8478                           tablat	equ	0xFF5
  8479                           prodh	equ	0xFF4
  8480                           prodl	equ	0xFF3
  8481                           intcon	equ	0xFF2
  8482                           postinc0	equ	0xFEE
  8483                           wreg	equ	0xFE8
  8484                           postdec1	equ	0xFE5
  8485                           fsr1h	equ	0xFE2
  8486                           fsr1l	equ	0xFE1
  8487                           indf2	equ	0xFDF
  8488                           postinc2	equ	0xFDE
  8489                           postdec2	equ	0xFDD
  8490                           fsr2h	equ	0xFDA
  8491                           fsr2l	equ	0xFD9
  8492                           status	equ	0xFD8
  8493                           
  8494 ;; *************** function _HMI_Poll *****************
  8495 ;; Defined at:
  8496 ;;		line 252 in file "HMI.c"
  8497 ;; Parameters:    Size  Location     Type
  8498 ;;		None
  8499 ;; Auto vars:     Size  Location     Type
  8500 ;;		None
  8501 ;; Return value:  Size  Location     Type
  8502 ;;                  1    wreg      void 
  8503 ;; Registers used:
  8504 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8505 ;; Tracked objects:
  8506 ;;		On entry : 0/0
  8507 ;;		On exit  : 0/0
  8508 ;;		Unchanged: 0/0
  8509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8514 ;;Total ram usage:        0 bytes
  8515 ;; Hardware stack levels used:    1
  8516 ;; Hardware stack levels required when called:   15
  8517 ;; This function calls:
  8518 ;;		_Button_Poll
  8519 ;; This function is called by:
  8520 ;;		_mode1
  8521 ;;		_mode2
  8522 ;; This function uses a non-reentrant model
  8523 ;;
  8524                           
  8525                           	psect	text35
  8526  014D7A                     __ptext35:
  8527                           	opt stack 0
  8528  014D7A                     _HMI_Poll:
  8529                           	opt stack 14
  8530                           
  8531                           ;HMI.c: 254: TRISE = 0xFC;
  8532                           
  8533                           ;incstack = 0
  8534  014D7A  0EFC               	movlw	252
  8535  014D7C  6E96               	movwf	3990,c	;volatile
  8536                           
  8537                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
  8538  014D7E  0E6C               	movlw	low (_HMIBoard+48)
  8539  014D80  0100               	movlb	0	; () banked
  8540  014D82  6FD5               	movwf	Button_Poll@pButton& (0+255),b
  8541  014D84  0E03               	movlw	high (_HMIBoard+48)
  8542  014D86  0100               	movlb	0	; () banked
  8543  014D88  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
  8544  014D8A  0E01               	movlw	1
  8545  014D8C  0100               	movlb	0	; () banked
  8546  014D8E  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
  8547  014D90  EC34  F096         	call	_Button_Poll	;wreg free
  8548                           
  8549                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
  8550  014D94  0E4E               	movlw	low (_HMIBoard+18)
  8551  014D96  0100               	movlb	0	; () banked
  8552  014D98  6FD5               	movwf	Button_Poll@pButton& (0+255),b
  8553  014D9A  0E03               	movlw	high (_HMIBoard+18)
  8554  014D9C  0100               	movlb	0	; () banked
  8555  014D9E  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
  8556  014DA0  0E01               	movlw	1
  8557  014DA2  0100               	movlb	0	; () banked
  8558  014DA4  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
  8559  014DA6  EC34  F096         	call	_Button_Poll	;wreg free
  8560                           
  8561                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
  8562  014DAA  0E44               	movlw	low (_HMIBoard+8)
  8563  014DAC  0100               	movlb	0	; () banked
  8564  014DAE  6FD5               	movwf	Button_Poll@pButton& (0+255),b
  8565  014DB0  0E03               	movlw	high (_HMIBoard+8)
  8566  014DB2  0100               	movlb	0	; () banked
  8567  014DB4  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
  8568  014DB6  0E01               	movlw	1
  8569  014DB8  0100               	movlb	0	; () banked
  8570  014DBA  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
  8571  014DBC  EC34  F096         	call	_Button_Poll	;wreg free
  8572                           
  8573                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
  8574  014DC0  0E58               	movlw	low (_HMIBoard+28)
  8575  014DC2  0100               	movlb	0	; () banked
  8576  014DC4  6FD5               	movwf	Button_Poll@pButton& (0+255),b
  8577  014DC6  0E03               	movlw	high (_HMIBoard+28)
  8578  014DC8  0100               	movlb	0	; () banked
  8579  014DCA  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
  8580  014DCC  0E01               	movlw	1
  8581  014DCE  0100               	movlb	0	; () banked
  8582  014DD0  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
  8583  014DD2  EC34  F096         	call	_Button_Poll	;wreg free
  8584                           
  8585                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
  8586  014DD6  0E62               	movlw	low (_HMIBoard+38)
  8587  014DD8  0100               	movlb	0	; () banked
  8588  014DDA  6FD5               	movwf	Button_Poll@pButton& (0+255),b
  8589  014DDC  0E03               	movlw	high (_HMIBoard+38)
  8590  014DDE  0100               	movlb	0	; () banked
  8591  014DE0  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
  8592  014DE2  0E01               	movlw	1
  8593  014DE4  0100               	movlb	0	; () banked
  8594  014DE6  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
  8595  014DE8  EC34  F096         	call	_Button_Poll	;wreg free
  8596  014DEC  0012               	return		;funcret
  8597  014DEE                     __end_of_HMI_Poll:
  8598                           	opt stack 0
  8599                           tosu	equ	0xFFF
  8600                           tosh	equ	0xFFE
  8601                           tosl	equ	0xFFD
  8602                           pclath	equ	0xFFA
  8603                           tblptru	equ	0xFF8
  8604                           tblptrh	equ	0xFF7
  8605                           tblptrl	equ	0xFF6
  8606                           tablat	equ	0xFF5
  8607                           prodh	equ	0xFF4
  8608                           prodl	equ	0xFF3
  8609                           intcon	equ	0xFF2
  8610                           postinc0	equ	0xFEE
  8611                           wreg	equ	0xFE8
  8612                           postdec1	equ	0xFE5
  8613                           fsr1h	equ	0xFE2
  8614                           fsr1l	equ	0xFE1
  8615                           indf2	equ	0xFDF
  8616                           postinc2	equ	0xFDE
  8617                           postdec2	equ	0xFDD
  8618                           fsr2h	equ	0xFDA
  8619                           fsr2l	equ	0xFD9
  8620                           status	equ	0xFD8
  8621                           
  8622 ;; *************** function _Button_Poll *****************
  8623 ;; Defined at:
  8624 ;;		line 57 in file "Library/Button.c"
  8625 ;; Parameters:    Size  Location     Type
  8626 ;;  pButton         2   27[BANK0 ] const PTR struct Button
  8627 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
  8628 ;;  pIncrement      1   29[BANK0 ] unsigned char 
  8629 ;; Auto vars:     Size  Location     Type
  8630 ;;  Pin             1   35[BANK0 ] unsigned char 
  8631 ;; Return value:  Size  Location     Type
  8632 ;;                  1    wreg      unsigned char 
  8633 ;; Registers used:
  8634 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  8635 ;; Tracked objects:
  8636 ;;		On entry : 0/0
  8637 ;;		On exit  : 0/0
  8638 ;;		Unchanged: 0/0
  8639 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8640 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8641 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8642 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8643 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8644 ;;Total ram usage:        9 bytes
  8645 ;; Hardware stack levels used:    1
  8646 ;; Hardware stack levels required when called:   14
  8647 ;; This function calls:
  8648 ;;		_Event_DIPSwitch
  8649 ;;		_Event_NULL
  8650 ;;		_Event_TestButton
  8651 ;;		_HMI_DIPSwitch
  8652 ;;		_HMI_DownSwitch
  8653 ;;		_HMI_LeftSwitch
  8654 ;;		_HMI_RightSwitch
  8655 ;;		_HMI_UpSwitch
  8656 ;;		_MXK_DIPSwitch
  8657 ;;		_MXK_TestButton
  8658 ;; This function is called by:
  8659 ;;		_HMI_Poll
  8660 ;;		_MXK_Poll
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           	psect	text36
  8665  012C68                     __ptext36:
  8666                           	opt stack 0
  8667  012C68                     _Button_Poll:
  8668                           	opt stack 14
  8669                           
  8670                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
  8671                           
  8672                           ;incstack = 0
  8673  012C68  0100               	movlb	0	; () banked
  8674  012C6A  EE20 F007          	lfsr	2,7
  8675  012C6E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8676  012C70  26D9               	addwf	fsr2l,f,c
  8677  012C72  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8678  012C74  22DA               	addwfc	fsr2h,f,c
  8679  012C76  D801               	call	u9388
  8680  012C78  D00A               	goto	u9389
  8681  012C7A                     u9388:
  8682  012C7A  0005               	push	
  8683  012C7C  6EFA               	movwf	pclath,c
  8684  012C7E  50DE               	movf	postinc2,w,c
  8685  012C80  6EFD               	movwf	tosl,c
  8686  012C82  50DE               	movf	postinc2,w,c
  8687  012C84  6EFE               	movwf	tosh,c
  8688  012C86  50DE               	movf	postinc2,w,c
  8689  012C88  6EFF               	movwf	tosu,c
  8690  012C8A  50FA               	movf	pclath,w,c
  8691  012C8C  0012               	return		;indir
  8692  012C8E                     u9389:
  8693  012C8E  0100               	movlb	0	; () banked
  8694  012C90  6FDD               	movwf	Button_Poll@Pin& (0+255),b
  8695                           
  8696                           ; BSR set to: 0
  8697                           ;Button.c: 61: if (pButton->mState == Pin)
  8698  012C92  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
  8699  012C96  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  8700  012C9A  0100               	movlb	0	; () banked
  8701  012C9C  51DD               	movf	Button_Poll@Pin& (0+255),w,b
  8702  012C9E  18DE               	xorwf	postinc2,w,c
  8703  012CA0  A4D8               	btfss	status,2,c
  8704  012CA2  D021               	goto	l11
  8705                           
  8706                           ; BSR set to: 0
  8707                           ;Button.c: 62: {
  8708                           ;Button.c: 65: if(pIncrement > pButton->mCount)
  8709  012CA4  0100               	movlb	0	; () banked
  8710  012CA6  EE20 F001          	lfsr	2,1
  8711  012CAA  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8712  012CAC  26D9               	addwf	fsr2l,f,c
  8713  012CAE  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8714  012CB0  22DA               	addwfc	fsr2h,f,c
  8715  012CB2  0100               	movlb	0	; () banked
  8716  012CB4  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
  8717  012CB6  5CDE               	subwf	postinc2,w,c
  8718  012CB8  B0D8               	btfsc	status,0,c
  8719  012CBA  D00A               	goto	l12
  8720                           
  8721                           ; BSR set to: 0
  8722                           ;Button.c: 66: pButton->mCount = 0;
  8723  012CBC  0100               	movlb	0	; () banked
  8724  012CBE  EE20 F001          	lfsr	2,1
  8725  012CC2  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8726  012CC4  26D9               	addwf	fsr2l,f,c
  8727  012CC6  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8728  012CC8  22DA               	addwfc	fsr2h,f,c
  8729  012CCA  0E00               	movlw	0
  8730  012CCC  6EDF               	movwf	indf2,c
  8731  012CCE  0012               	return	
  8732  012CD0                     l12:
  8733                           
  8734                           ; BSR set to: 0
  8735                           ;Button.c: 67: else
  8736                           ;Button.c: 68: pButton->mCount -= pIncrement;
  8737                           
  8738                           ; BSR set to: 0
  8739  012CD0  0100               	movlb	0	; () banked
  8740  012CD2  EE20 F001          	lfsr	2,1
  8741  012CD6  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8742  012CD8  26D9               	addwf	fsr2l,f,c
  8743  012CDA  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8744  012CDC  22DA               	addwfc	fsr2h,f,c
  8745  012CDE  0100               	movlb	0	; () banked
  8746  012CE0  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
  8747  012CE2  5EDF               	subwf	indf2,f,c
  8748                           
  8749                           ; BSR set to: 0
  8750                           ;Button.c: 69: }
  8751  012CE4  0012               	return	
  8752  012CE6                     l11:
  8753                           
  8754                           ; BSR set to: 0
  8755                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
  8756                           
  8757                           ; BSR set to: 0
  8758  012CE6  0100               	movlb	0	; () banked
  8759  012CE8  EE20 F001          	lfsr	2,1
  8760  012CEC  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8761  012CEE  26D9               	addwf	fsr2l,f,c
  8762  012CF0  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8763  012CF2  22DA               	addwfc	fsr2h,f,c
  8764  012CF4  50DF               	movf	indf2,w,c
  8765  012CF6  0100               	movlb	0	; () banked
  8766  012CF8  6FD8               	movwf	??_Button_Poll& (0+255),b
  8767  012CFA  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
  8768  012CFC  0100               	movlb	0	; () banked
  8769  012CFE  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
  8770  012D00  0100               	movlb	0	; () banked
  8771  012D02  27D8               	addwf	??_Button_Poll& (0+255),f,b
  8772  012D04  0E00               	movlw	0
  8773  012D06  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
  8774  012D08  0100               	movlb	0	; () banked
  8775  012D0A  EE20 F001          	lfsr	2,1
  8776  012D0E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8777  012D10  26D9               	addwf	fsr2l,f,c
  8778  012D12  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8779  012D14  22DA               	addwfc	fsr2h,f,c
  8780  012D16  50DF               	movf	indf2,w,c
  8781  012D18  0100               	movlb	0	; () banked
  8782  012D1A  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
  8783  012D1C  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
  8784  012D1E  0100               	movlb	0	; () banked
  8785  012D20  51D8               	movf	??_Button_Poll& (0+255),w,b
  8786  012D22  0100               	movlb	0	; () banked
  8787  012D24  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
  8788  012D26  0100               	movlb	0	; () banked
  8789  012D28  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
  8790  012D2A  0A80               	xorlw	128
  8791  012D2C  0100               	movlb	0	; () banked
  8792  012D2E  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
  8793  012D30  0100               	movlb	0	; () banked
  8794  012D32  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
  8795  012D34  0A80               	xorlw	128
  8796  012D36  0100               	movlb	0	; () banked
  8797  012D38  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
  8798  012D3A  B0D8               	btfsc	status,0,c
  8799  012D3C  0012               	return	
  8800                           
  8801                           ; BSR set to: 0
  8802                           ;Button.c: 73: {
  8803                           ;Button.c: 75: pButton->mCount += pIncrement;
  8804  012D3E  0100               	movlb	0	; () banked
  8805  012D40  EE20 F001          	lfsr	2,1
  8806  012D44  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8807  012D46  26D9               	addwf	fsr2l,f,c
  8808  012D48  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8809  012D4A  22DA               	addwfc	fsr2h,f,c
  8810  012D4C  0100               	movlb	0	; () banked
  8811  012D4E  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
  8812  012D50  26DF               	addwf	indf2,f,c
  8813                           
  8814                           ; BSR set to: 0
  8815                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
  8816  012D52  0100               	movlb	0	; () banked
  8817  012D54  EE20 F002          	lfsr	2,2
  8818  012D58  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8819  012D5A  26D9               	addwf	fsr2l,f,c
  8820  012D5C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8821  012D5E  22DA               	addwfc	fsr2h,f,c
  8822  012D60  0100               	movlb	0	; () banked
  8823  012D62  EE10 F001          	lfsr	1,1
  8824  012D66  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8825  012D68  26E1               	addwf	fsr1l,f,c
  8826  012D6A  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8827  012D6C  22E2               	addwfc	fsr1h,f,c
  8828  012D6E  50E7               	movf	indf1,w,c
  8829  012D70  0100               	movlb	0	; () banked
  8830  012D72  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
  8831  012D74  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
  8832  012D76  50DE               	movf	postinc2,w,c
  8833  012D78  0100               	movlb	0	; () banked
  8834  012D7A  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
  8835  012D7C  50DE               	movf	postinc2,w,c
  8836  012D7E  0100               	movlb	0	; () banked
  8837  012D80  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
  8838  012D82  A0D8               	btfss	status,0,c
  8839  012D84  0012               	return	
  8840                           
  8841                           ; BSR set to: 0
  8842                           ;Button.c: 77: {
  8843                           ;Button.c: 79: pButton->mState = Pin;
  8844  012D86  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
  8845  012D8A  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
  8846  012D8E  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
  8847                           
  8848                           ; BSR set to: 0
  8849                           ;Button.c: 80: pButton->mCount = 0;
  8850  012D92  0100               	movlb	0	; () banked
  8851  012D94  EE20 F001          	lfsr	2,1
  8852  012D98  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8853  012D9A  26D9               	addwf	fsr2l,f,c
  8854  012D9C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8855  012D9E  22DA               	addwfc	fsr2h,f,c
  8856  012DA0  0E00               	movlw	0
  8857  012DA2  6EDF               	movwf	indf2,c
  8858                           
  8859                           ; BSR set to: 0
  8860                           ;Button.c: 83: pButton->mFunction(Pin);
  8861  012DA4  0100               	movlb	0	; () banked
  8862  012DA6  EE20 F004          	lfsr	2,4
  8863  012DAA  51D5               	movf	Button_Poll@pButton& (0+255),w,b
  8864  012DAC  26D9               	addwf	fsr2l,f,c
  8865  012DAE  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
  8866  012DB0  22DA               	addwfc	fsr2h,f,c
  8867  012DB2  D801               	call	u9438
  8868  012DB4  0012               	return	
  8869  012DB6                     u9438:
  8870  012DB6  0005               	push	
  8871  012DB8  6EFA               	movwf	pclath,c
  8872  012DBA  50DE               	movf	postinc2,w,c
  8873  012DBC  6EFD               	movwf	tosl,c
  8874  012DBE  50DE               	movf	postinc2,w,c
  8875  012DC0  6EFE               	movwf	tosh,c
  8876  012DC2  50DE               	movf	postinc2,w,c
  8877  012DC4  6EFF               	movwf	tosu,c
  8878  012DC6  50FA               	movf	pclath,w,c
  8879  012DC8  0100               	movlb	0	; () banked
  8880  012DCA  51DD               	movf	Button_Poll@Pin& (0+255),w,b
  8881  012DCC  0012               	return		;indir
  8882  012DCE                     __end_of_Button_Poll:
  8883                           	opt stack 0
  8884                           tosu	equ	0xFFF
  8885                           tosh	equ	0xFFE
  8886                           tosl	equ	0xFFD
  8887                           pclath	equ	0xFFA
  8888                           tblptru	equ	0xFF8
  8889                           tblptrh	equ	0xFF7
  8890                           tblptrl	equ	0xFF6
  8891                           tablat	equ	0xFF5
  8892                           prodh	equ	0xFF4
  8893                           prodl	equ	0xFF3
  8894                           intcon	equ	0xFF2
  8895                           postinc0	equ	0xFEE
  8896                           wreg	equ	0xFE8
  8897                           indf1	equ	0xFE7
  8898                           postdec1	equ	0xFE5
  8899                           fsr1h	equ	0xFE2
  8900                           fsr1l	equ	0xFE1
  8901                           indf2	equ	0xFDF
  8902                           postinc2	equ	0xFDE
  8903                           postdec2	equ	0xFDD
  8904                           fsr2h	equ	0xFDA
  8905                           fsr2l	equ	0xFD9
  8906                           status	equ	0xFD8
  8907                           
  8908 ;; *************** function _Event_DIPSwitch *****************
  8909 ;; Defined at:
  8910 ;;		line 22 in file "Events.c"
  8911 ;; Parameters:    Size  Location     Type
  8912 ;;  pState          1    wreg     unsigned char 
  8913 ;; Auto vars:     Size  Location     Type
  8914 ;;  pState          1   25[BANK0 ] unsigned char 
  8915 ;;  Bar             1   26[BANK0 ] unsigned char 
  8916 ;; Return value:  Size  Location     Type
  8917 ;;                  1    wreg      void 
  8918 ;; Registers used:
  8919 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8920 ;; Tracked objects:
  8921 ;;		On entry : 0/0
  8922 ;;		On exit  : 0/0
  8923 ;;		Unchanged: 0/0
  8924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8926 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8928 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8929 ;;Total ram usage:        2 bytes
  8930 ;; Hardware stack levels used:    1
  8931 ;; Hardware stack levels required when called:   13
  8932 ;; This function calls:
  8933 ;;		_HMI_GetBar
  8934 ;;		_HMI_SetBar
  8935 ;;		_LED_Toggle
  8936 ;; This function is called by:
  8937 ;;		_FunctInitButton
  8938 ;;		_Button_Poll
  8939 ;; This function uses a non-reentrant model
  8940 ;;
  8941                           
  8942                           	psect	text37
  8943  015CBE                     __ptext37:
  8944                           	opt stack 0
  8945  015CBE                     _Event_DIPSwitch:
  8946                           	opt stack 14
  8947                           
  8948                           ;incstack = 0
  8949                           ;Event_DIPSwitch@pState stored from wreg
  8950  015CBE  0100               	movlb	0	; () banked
  8951  015CC0  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
  8952                           
  8953                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
  8954  015CC2  ECC0  F0B0         	call	_HMI_GetBar
  8955  015CC6  0100               	movlb	0	; () banked
  8956  015CC8  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
  8957                           
  8958                           ; BSR set to: 0
  8959                           ;Events.c: 25: Bar &= 0x0F;
  8960  015CCA  0E0F               	movlw	15
  8961  015CCC  0100               	movlb	0	; () banked
  8962  015CCE  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
  8963                           
  8964                           ; BSR set to: 0
  8965                           ;Events.c: 26: pState <<= 4;
  8966  015CD0  0100               	movlb	0	; () banked
  8967  015CD2  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
  8968  015CD4  0EF0               	movlw	240
  8969  015CD6  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
  8970                           
  8971                           ; BSR set to: 0
  8972                           ;Events.c: 29: HMI_SetBar(pState | Bar);
  8973  015CD8  0100               	movlb	0	; () banked
  8974  015CDA  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
  8975  015CDC  0100               	movlb	0	; () banked
  8976  015CDE  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
  8977  015CE0  ECA6  F0B0         	call	_HMI_SetBar
  8978                           
  8979                           ;Events.c: 32: LED_Toggle(eLED1);
  8980  015CE4  0E00               	movlw	0
  8981  015CE6  ECA6  F0AB         	call	_LED_Toggle
  8982  015CEA  0012               	return		;funcret
  8983  015CEC                     __end_of_Event_DIPSwitch:
  8984                           	opt stack 0
  8985                           tosu	equ	0xFFF
  8986                           tosh	equ	0xFFE
  8987                           tosl	equ	0xFFD
  8988                           pclath	equ	0xFFA
  8989                           tblptru	equ	0xFF8
  8990                           tblptrh	equ	0xFF7
  8991                           tblptrl	equ	0xFF6
  8992                           tablat	equ	0xFF5
  8993                           prodh	equ	0xFF4
  8994                           prodl	equ	0xFF3
  8995                           intcon	equ	0xFF2
  8996                           postinc0	equ	0xFEE
  8997                           wreg	equ	0xFE8
  8998                           indf1	equ	0xFE7
  8999                           postdec1	equ	0xFE5
  9000                           fsr1h	equ	0xFE2
  9001                           fsr1l	equ	0xFE1
  9002                           indf2	equ	0xFDF
  9003                           postinc2	equ	0xFDE
  9004                           postdec2	equ	0xFDD
  9005                           fsr2h	equ	0xFDA
  9006                           fsr2l	equ	0xFD9
  9007                           status	equ	0xFD8
  9008                           
  9009 ;; *************** function _Event_NULL *****************
  9010 ;; Defined at:
  9011 ;;		line 9 in file "Events.c"
  9012 ;; Parameters:    Size  Location     Type
  9013 ;;  pState          1    wreg     unsigned char 
  9014 ;; Auto vars:     Size  Location     Type
  9015 ;;  pState          1    0[COMRAM] unsigned char 
  9016 ;; Return value:  Size  Location     Type
  9017 ;;                  1    wreg      void 
  9018 ;; Registers used:
  9019 ;;		wreg
  9020 ;; Tracked objects:
  9021 ;;		On entry : 0/0
  9022 ;;		On exit  : 0/0
  9023 ;;		Unchanged: 0/0
  9024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9025 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9026 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9027 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9028 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9029 ;;Total ram usage:        0 bytes
  9030 ;; Hardware stack levels used:    1
  9031 ;; Hardware stack levels required when called:    7
  9032 ;; This function calls:
  9033 ;;		Nothing
  9034 ;; This function is called by:
  9035 ;;		_HMI_Init
  9036 ;;		_Button_Poll
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text38
  9041  0161A6                     __ptext38:
  9042                           	opt stack 0
  9043  0161A6                     _Event_NULL:
  9044                           	opt stack 20
  9045                           
  9046                           ;incstack = 0
  9047  0161A6  0012               	return		;funcret
  9048  0161A8                     __end_of_Event_NULL:
  9049                           	opt stack 0
  9050                           tosu	equ	0xFFF
  9051                           tosh	equ	0xFFE
  9052                           tosl	equ	0xFFD
  9053                           pclath	equ	0xFFA
  9054                           tblptru	equ	0xFF8
  9055                           tblptrh	equ	0xFF7
  9056                           tblptrl	equ	0xFF6
  9057                           tablat	equ	0xFF5
  9058                           prodh	equ	0xFF4
  9059                           prodl	equ	0xFF3
  9060                           intcon	equ	0xFF2
  9061                           postinc0	equ	0xFEE
  9062                           wreg	equ	0xFE8
  9063                           indf1	equ	0xFE7
  9064                           postdec1	equ	0xFE5
  9065                           fsr1h	equ	0xFE2
  9066                           fsr1l	equ	0xFE1
  9067                           indf2	equ	0xFDF
  9068                           postinc2	equ	0xFDE
  9069                           postdec2	equ	0xFDD
  9070                           fsr2h	equ	0xFDA
  9071                           fsr2l	equ	0xFD9
  9072                           status	equ	0xFD8
  9073                           
  9074 ;; *************** function _Event_TestButton *****************
  9075 ;; Defined at:
  9076 ;;		line 52 in file "Events.c"
  9077 ;; Parameters:    Size  Location     Type
  9078 ;;  pState          1    wreg     unsigned char 
  9079 ;; Auto vars:     Size  Location     Type
  9080 ;;  pState          1   25[BANK0 ] unsigned char 
  9081 ;; Return value:  Size  Location     Type
  9082 ;;                  1    wreg      void 
  9083 ;; Registers used:
  9084 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9085 ;; Tracked objects:
  9086 ;;		On entry : 0/0
  9087 ;;		On exit  : 0/0
  9088 ;;		Unchanged: 0/0
  9089 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9090 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9091 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9092 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9093 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9094 ;;Total ram usage:        1 bytes
  9095 ;; Hardware stack levels used:    1
  9096 ;; Hardware stack levels required when called:   13
  9097 ;; This function calls:
  9098 ;;		_HMI_SetButton
  9099 ;;		_HMI_SetNumber
  9100 ;;		_LED_Toggle
  9101 ;; This function is called by:
  9102 ;;		_FunctInitButton
  9103 ;;		_Button_Poll
  9104 ;; This function uses a non-reentrant model
  9105 ;;
  9106                           
  9107                           	psect	text39
  9108  015AAC                     __ptext39:
  9109                           	opt stack 0
  9110  015AAC                     _Event_TestButton:
  9111                           	opt stack 14
  9112                           
  9113                           ;incstack = 0
  9114                           ;Event_TestButton@pState stored from wreg
  9115  015AAC  0100               	movlb	0	; () banked
  9116  015AAE  6FD3               	movwf	Event_TestButton@pState& (0+255),b
  9117                           
  9118                           ;Events.c: 56: static UINT8 j = 0;
  9119                           ;Events.c: 60: if (pState == 0)
  9120  015AB0  0100               	movlb	0	; () banked
  9121  015AB2  51D3               	movf	Event_TestButton@pState& (0+255),w,b
  9122  015AB4  0100               	movlb	0	; () banked
  9123  015AB6  A4D8               	btfss	status,2,c
  9124  015AB8  D013               	goto	l1873
  9125                           
  9126                           ; BSR set to: 0
  9127                           ;Events.c: 61: {
  9128                           ;Events.c: 62: j++;
  9129  015ABA  0100               	movlb	0	; () banked
  9130  015ABC  2B8F               	incf	Event_TestButton@j& (0+255),f,b
  9131                           
  9132                           ; BSR set to: 0
  9133                           ;Events.c: 63: val += j;
  9134  015ABE  0100               	movlb	0	; () banked
  9135  015AC0  518F               	movf	Event_TestButton@j& (0+255),w,b
  9136  015AC2  0100               	movlb	0	; () banked
  9137  015AC4  2783               	addwf	_val& (0+255),f,b
  9138  015AC6  0E00               	movlw	0
  9139  015AC8  2384               	addwfc	(_val+1)& (0+255),f,b
  9140                           
  9141                           ; BSR set to: 0
  9142                           ;Events.c: 64: HMI_SetNumber( val );
  9143  015ACA  C083  F0D0         	movff	_val,HMI_SetNumber@pInput
  9144  015ACE  C084  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
  9145  015AD2  ECA2  F0AE         	call	_HMI_SetNumber	;wreg free
  9146                           
  9147                           ;Events.c: 67: HMI_SetButton( j & 3 );
  9148  015AD6  0100               	movlb	0	; () banked
  9149  015AD8  518F               	movf	Event_TestButton@j& (0+255),w,b
  9150  015ADA  0B03               	andlw	3
  9151  015ADC  ECEB  F0A3         	call	_HMI_SetButton
  9152  015AE0                     l1873:
  9153                           
  9154                           ;Events.c: 68: }
  9155                           ;Events.c: 72: LED_Toggle(eLED1);
  9156  015AE0  0E00               	movlw	0
  9157  015AE2  ECA6  F0AB         	call	_LED_Toggle
  9158  015AE6  0012               	return		;funcret
  9159  015AE8                     __end_of_Event_TestButton:
  9160                           	opt stack 0
  9161                           tosu	equ	0xFFF
  9162                           tosh	equ	0xFFE
  9163                           tosl	equ	0xFFD
  9164                           pclath	equ	0xFFA
  9165                           tblptru	equ	0xFF8
  9166                           tblptrh	equ	0xFF7
  9167                           tblptrl	equ	0xFF6
  9168                           tablat	equ	0xFF5
  9169                           prodh	equ	0xFF4
  9170                           prodl	equ	0xFF3
  9171                           intcon	equ	0xFF2
  9172                           postinc0	equ	0xFEE
  9173                           wreg	equ	0xFE8
  9174                           indf1	equ	0xFE7
  9175                           postdec1	equ	0xFE5
  9176                           fsr1h	equ	0xFE2
  9177                           fsr1l	equ	0xFE1
  9178                           indf2	equ	0xFDF
  9179                           postinc2	equ	0xFDE
  9180                           postdec2	equ	0xFDD
  9181                           fsr2h	equ	0xFDA
  9182                           fsr2l	equ	0xFD9
  9183                           status	equ	0xFD8
  9184                           
  9185 ;; *************** function _HMI_SetNumber *****************
  9186 ;; Defined at:
  9187 ;;		line 221 in file "HMI.c"
  9188 ;; Parameters:    Size  Location     Type
  9189 ;;  pInput          2   22[BANK0 ] int 
  9190 ;; Auto vars:     Size  Location     Type
  9191 ;;		None
  9192 ;; Return value:  Size  Location     Type
  9193 ;;                  1    wreg      void 
  9194 ;; Registers used:
  9195 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9196 ;; Tracked objects:
  9197 ;;		On entry : 0/0
  9198 ;;		On exit  : 0/0
  9199 ;;		Unchanged: 0/0
  9200 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9201 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9204 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9205 ;;Total ram usage:        2 bytes
  9206 ;; Hardware stack levels used:    1
  9207 ;; Hardware stack levels required when called:    9
  9208 ;; This function calls:
  9209 ;;		_HMI_SetSegments
  9210 ;;		_itos
  9211 ;; This function is called by:
  9212 ;;		_Event_TestButton
  9213 ;;		_mode1
  9214 ;;		_Event_HMI_UpButton
  9215 ;;		_Event_HMI_DownButton
  9216 ;; This function uses a non-reentrant model
  9217 ;;
  9218                           
  9219                           	psect	text40
  9220  015D44                     __ptext40:
  9221                           	opt stack 0
  9222  015D44                     _HMI_SetNumber:
  9223                           	opt stack 17
  9224                           
  9225                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
  9226                           
  9227                           ;incstack = 0
  9228  015D44  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
  9229  015D48  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
  9230  015D4C  0E3C               	movlw	low _HMIBoard
  9231  015D4E  0100               	movlb	0	; () banked
  9232  015D50  6FC8               	movwf	itos@destination& (0+255),b
  9233  015D52  0E03               	movlw	high _HMIBoard
  9234  015D54  0100               	movlb	0	; () banked
  9235  015D56  6FC9               	movwf	(itos@destination+1)& (0+255),b
  9236  015D58  ECB2  F09B         	call	_itos	;wreg free
  9237                           
  9238                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
  9239  015D5C  0E3C               	movlw	low _HMIBoard
  9240  015D5E  0100               	movlb	0	; () banked
  9241  015D60  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
  9242  015D62  0E03               	movlw	high _HMIBoard
  9243  015D64  0100               	movlb	0	; () banked
  9244  015D66  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
  9245  015D68  EC47  F09F         	call	_HMI_SetSegments	;wreg free
  9246  015D6C  0012               	return		;funcret
  9247  015D6E                     __end_of_HMI_SetNumber:
  9248                           	opt stack 0
  9249                           tosu	equ	0xFFF
  9250                           tosh	equ	0xFFE
  9251                           tosl	equ	0xFFD
  9252                           pclath	equ	0xFFA
  9253                           tblptru	equ	0xFF8
  9254                           tblptrh	equ	0xFF7
  9255                           tblptrl	equ	0xFF6
  9256                           tablat	equ	0xFF5
  9257                           prodh	equ	0xFF4
  9258                           prodl	equ	0xFF3
  9259                           intcon	equ	0xFF2
  9260                           postinc0	equ	0xFEE
  9261                           wreg	equ	0xFE8
  9262                           indf1	equ	0xFE7
  9263                           postdec1	equ	0xFE5
  9264                           fsr1h	equ	0xFE2
  9265                           fsr1l	equ	0xFE1
  9266                           indf2	equ	0xFDF
  9267                           postinc2	equ	0xFDE
  9268                           postdec2	equ	0xFDD
  9269                           fsr2h	equ	0xFDA
  9270                           fsr2l	equ	0xFD9
  9271                           status	equ	0xFD8
  9272                           
  9273 ;; *************** function _itos *****************
  9274 ;; Defined at:
  9275 ;;		line 369 in file "Library/Types.c"
  9276 ;; Parameters:    Size  Location     Type
  9277 ;;  input           2   12[BANK0 ] unsigned short 
  9278 ;;  destination     2   14[BANK0 ] PTR unsigned char 
  9279 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9280 ;; Auto vars:     Size  Location     Type
  9281 ;;  Out             2   20[BANK0 ] unsigned short 
  9282 ;;  Length          2   18[BANK0 ] unsigned short 
  9283 ;;  Data            2   16[BANK0 ] PTR unsigned char 
  9284 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9285 ;; Return value:  Size  Location     Type
  9286 ;;                  1    wreg      void 
  9287 ;; Registers used:
  9288 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9289 ;; Tracked objects:
  9290 ;;		On entry : 0/0
  9291 ;;		On exit  : 0/0
  9292 ;;		Unchanged: 0/0
  9293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9294 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9295 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9296 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9297 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9298 ;;Total ram usage:       10 bytes
  9299 ;; Hardware stack levels used:    1
  9300 ;; Hardware stack levels required when called:    8
  9301 ;; This function calls:
  9302 ;;		___lwdiv
  9303 ;;		___lwmod
  9304 ;;		_reverse
  9305 ;; This function is called by:
  9306 ;;		_HMI_SetNumber
  9307 ;; This function uses a non-reentrant model
  9308 ;;
  9309                           
  9310                           	psect	text41
  9311  013764                     __ptext41:
  9312                           	opt stack 0
  9313  013764                     _itos:
  9314                           	opt stack 17
  9315                           
  9316                           ;Types.c: 371: UINT16 Out = input;
  9317                           
  9318                           ;incstack = 0
  9319  013764  C0C6  F0CE         	movff	itos@input,itos@Out
  9320  013768  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
  9321                           
  9322                           ;Types.c: 372: UINT16 Length = 0;
  9323  01376C  0E00               	movlw	0
  9324  01376E  0100               	movlb	0	; () banked
  9325  013770  6FCD               	movwf	(itos@Length+1)& (0+255),b
  9326  013772  0E00               	movlw	0
  9327  013774  6FCC               	movwf	itos@Length& (0+255),b
  9328                           
  9329                           ; BSR set to: 0
  9330                           ;Types.c: 373: char *Data = destination;
  9331  013776  C0C8  F0CA         	movff	itos@destination,itos@Data
  9332  01377A  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
  9333                           
  9334                           ; BSR set to: 0
  9335                           ;Types.c: 374: if(Out == 0)
  9336  01377E  0100               	movlb	0	; () banked
  9337  013780  51CE               	movf	itos@Out& (0+255),w,b
  9338  013782  0100               	movlb	0	; () banked
  9339  013784  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
  9340  013786  A4D8               	btfss	status,2,c
  9341  013788  D034               	goto	l929
  9342                           
  9343                           ; BSR set to: 0
  9344                           ;Types.c: 375: {
  9345                           ;Types.c: 376: Data[0] = (UINT16)'0';
  9346  01378A  C0CA  FFD9         	movff	itos@Data,fsr2l
  9347  01378E  C0CB  FFDA         	movff	itos@Data+1,fsr2h
  9348  013792  0E30               	movlw	48
  9349  013794  6EDF               	movwf	indf2,c
  9350                           
  9351                           ; BSR set to: 0
  9352                           ;Types.c: 377: Length = 1;
  9353  013796  0E00               	movlw	0
  9354  013798  0100               	movlb	0	; () banked
  9355  01379A  6FCD               	movwf	(itos@Length+1)& (0+255),b
  9356  01379C  0E01               	movlw	1
  9357  01379E  6FCC               	movwf	itos@Length& (0+255),b
  9358                           
  9359                           ;Types.c: 378: }
  9360  0137A0  D040               	goto	l928
  9361  0137A2                     
  9362                           ; BSR set to: 0
  9363                           ;Types.c: 382: {
  9364                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
  9365                           
  9366                           ; BSR set to: 0
  9367  0137A2  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
  9368  0137A6  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
  9369  0137AA  0E00               	movlw	0
  9370  0137AC  0100               	movlb	0	; () banked
  9371  0137AE  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  9372  0137B0  0E0A               	movlw	10
  9373  0137B2  6FC3               	movwf	___lwmod@divisor& (0+255),b
  9374  0137B4  EC80  F0A9         	call	___lwmod	;wreg free
  9375  0137B8  0100               	movlb	0	; () banked
  9376  0137BA  51C1               	movf	?___lwmod& (0+255),w,b
  9377  0137BC  0F30               	addlw	48
  9378  0137BE  C0CA  FFD9         	movff	itos@Data,fsr2l
  9379  0137C2  C0CB  FFDA         	movff	itos@Data+1,fsr2h
  9380  0137C6  6EDF               	movwf	indf2,c
  9381                           
  9382                           ; BSR set to: 0
  9383                           ;Types.c: 384: Out /= 10;
  9384  0137C8  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
  9385  0137CC  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
  9386  0137D0  0E00               	movlw	0
  9387  0137D2  0100               	movlb	0	; () banked
  9388  0137D4  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
  9389  0137D6  0E0A               	movlw	10
  9390  0137D8  6FBC               	movwf	___lwdiv@divisor& (0+255),b
  9391  0137DA  EC46  F0A6         	call	___lwdiv	;wreg free
  9392  0137DE  C0BA  F0CE         	movff	?___lwdiv,itos@Out
  9393  0137E2  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
  9394                           
  9395                           ;Types.c: 385: Length ++;
  9396  0137E6  0100               	movlb	0	; () banked
  9397  0137E8  4BCC               	infsnz	itos@Length& (0+255),f,b
  9398  0137EA  2BCD               	incf	(itos@Length+1)& (0+255),f,b
  9399                           
  9400                           ; BSR set to: 0
  9401                           ;Types.c: 386: Data++;
  9402  0137EC  0100               	movlb	0	; () banked
  9403  0137EE  4BCA               	infsnz	itos@Data& (0+255),f,b
  9404  0137F0  2BCB               	incf	(itos@Data+1)& (0+255),f,b
  9405  0137F2                     l929:
  9406                           
  9407                           ; BSR set to: 0
  9408                           
  9409                           ; BSR set to: 0
  9410  0137F2  0100               	movlb	0	; () banked
  9411  0137F4  51CE               	movf	itos@Out& (0+255),w,b
  9412  0137F6  0100               	movlb	0	; () banked
  9413  0137F8  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
  9414  0137FA  B4D8               	btfsc	status,2,c
  9415  0137FC  D008               	goto	u8620
  9416                           
  9417                           ; BSR set to: 0
  9418  0137FE  0100               	movlb	0	; () banked
  9419  013800  51CD               	movf	(itos@Length+1)& (0+255),w,b
  9420  013802  E105               	bnz	l12037
  9421  013804  0E06               	movlw	6
  9422  013806  0100               	movlb	0	; () banked
  9423  013808  5DCC               	subwf	itos@Length& (0+255),w,b
  9424  01380A  A0D8               	btfss	status,0,c
  9425  01380C  D7CA               	goto	l930
  9426  01380E                     u8620:
  9427  01380E                     l12037:
  9428                           
  9429                           ; BSR set to: 0
  9430                           ;Types.c: 387: }
  9431                           ;Types.c: 388: reverse(destination, Length);
  9432  01380E  C0C8  F0BA         	movff	itos@destination,reverse@input
  9433  013812  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
  9434  013816  C0CC  F0BC         	movff	itos@Length,reverse@length
  9435  01381A  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
  9436  01381E  ECDD  F0A7         	call	_reverse	;wreg free
  9437  013822                     l928:
  9438                           
  9439                           ;Types.c: 389: }
  9440                           ;Types.c: 390: destination[Length] = '\0';
  9441  013822  0100               	movlb	0	; () banked
  9442  013824  51CC               	movf	itos@Length& (0+255),w,b
  9443  013826  0100               	movlb	0	; () banked
  9444  013828  25C8               	addwf	itos@destination& (0+255),w,b
  9445  01382A  6ED9               	movwf	fsr2l,c
  9446  01382C  0100               	movlb	0	; () banked
  9447  01382E  51CD               	movf	(itos@Length+1)& (0+255),w,b
  9448  013830  0100               	movlb	0	; () banked
  9449  013832  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
  9450  013834  6EDA               	movwf	fsr2h,c
  9451  013836  0E00               	movlw	0
  9452  013838  6EDF               	movwf	indf2,c
  9453                           
  9454                           ; BSR set to: 0
  9455  01383A  0012               	return		;funcret
  9456  01383C                     __end_of_itos:
  9457                           	opt stack 0
  9458                           tosu	equ	0xFFF
  9459                           tosh	equ	0xFFE
  9460                           tosl	equ	0xFFD
  9461                           pclath	equ	0xFFA
  9462                           tblptru	equ	0xFF8
  9463                           tblptrh	equ	0xFF7
  9464                           tblptrl	equ	0xFF6
  9465                           tablat	equ	0xFF5
  9466                           prodh	equ	0xFF4
  9467                           prodl	equ	0xFF3
  9468                           intcon	equ	0xFF2
  9469                           postinc0	equ	0xFEE
  9470                           wreg	equ	0xFE8
  9471                           indf1	equ	0xFE7
  9472                           postdec1	equ	0xFE5
  9473                           fsr1h	equ	0xFE2
  9474                           fsr1l	equ	0xFE1
  9475                           indf2	equ	0xFDF
  9476                           postinc2	equ	0xFDE
  9477                           postdec2	equ	0xFDD
  9478                           fsr2h	equ	0xFDA
  9479                           fsr2l	equ	0xFD9
  9480                           status	equ	0xFD8
  9481                           
  9482 ;; *************** function _reverse *****************
  9483 ;; Defined at:
  9484 ;;		line 357 in file "Library/Types.c"
  9485 ;; Parameters:    Size  Location     Type
  9486 ;;  input           2    0[BANK0 ] PTR unsigned char 
  9487 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9488 ;;  length          2    2[BANK0 ] unsigned short 
  9489 ;; Auto vars:     Size  Location     Type
  9490 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
  9491 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9492 ;;  tempVar         1    4[BANK0 ] unsigned char 
  9493 ;; Return value:  Size  Location     Type
  9494 ;;                  1    wreg      void 
  9495 ;; Registers used:
  9496 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  9497 ;; Tracked objects:
  9498 ;;		On entry : 0/0
  9499 ;;		On exit  : 0/0
  9500 ;;		Unchanged: 0/0
  9501 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9502 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9503 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9504 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9505 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9506 ;;Total ram usage:        7 bytes
  9507 ;; Hardware stack levels used:    1
  9508 ;; Hardware stack levels required when called:    7
  9509 ;; This function calls:
  9510 ;;		Nothing
  9511 ;; This function is called by:
  9512 ;;		_itos
  9513 ;; This function uses a non-reentrant model
  9514 ;;
  9515                           
  9516                           	psect	text42
  9517  014FBA                     __ptext42:
  9518                           	opt stack 0
  9519  014FBA                     _reverse:
  9520                           	opt stack 17
  9521                           
  9522                           ;Types.c: 359: char tempVar,
  9523                           ;Types.c: 360: *iterator = input + length;
  9524                           
  9525                           ; BSR set to: 0
  9526                           ;incstack = 0
  9527  014FBA  0100               	movlb	0	; () banked
  9528  014FBC  51BC               	movf	reverse@length& (0+255),w,b
  9529  014FBE  0100               	movlb	0	; () banked
  9530  014FC0  25BA               	addwf	reverse@input& (0+255),w,b
  9531  014FC2  0100               	movlb	0	; () banked
  9532  014FC4  6FBF               	movwf	reverse@iterator& (0+255),b
  9533  014FC6  0100               	movlb	0	; () banked
  9534  014FC8  51BD               	movf	(reverse@length+1)& (0+255),w,b
  9535  014FCA  0100               	movlb	0	; () banked
  9536  014FCC  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
  9537  014FCE  0100               	movlb	0	; () banked
  9538  014FD0  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
  9539                           
  9540                           ;Types.c: 362: while ( --iterator > input )
  9541  014FD2  D01A               	goto	l921
  9542  014FD4                     
  9543                           ; BSR set to: 0
  9544                           ;Types.c: 363: {
  9545                           ;Types.c: 364: tempVar = *input;
  9546                           
  9547                           ; BSR set to: 0
  9548  014FD4  C0BA  FFD9         	movff	reverse@input,fsr2l
  9549  014FD8  C0BB  FFDA         	movff	reverse@input+1,fsr2h
  9550  014FDC  50DF               	movf	indf2,w,c
  9551  014FDE  0100               	movlb	0	; () banked
  9552  014FE0  6FBE               	movwf	reverse@tempVar& (0+255),b
  9553                           
  9554                           ; BSR set to: 0
  9555                           ;Types.c: 365: *input++=*iterator;
  9556  014FE2  C0BF  FFD9         	movff	reverse@iterator,fsr2l
  9557  014FE6  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
  9558  014FEA  C0BA  FFE1         	movff	reverse@input,fsr1l
  9559  014FEE  C0BB  FFE2         	movff	reverse@input+1,fsr1h
  9560  014FF2  CFDF FFE7          	movff	indf2,indf1
  9561                           
  9562                           ; BSR set to: 0
  9563  014FF6  0100               	movlb	0	; () banked
  9564  014FF8  4BBA               	infsnz	reverse@input& (0+255),f,b
  9565  014FFA  2BBB               	incf	(reverse@input+1)& (0+255),f,b
  9566                           
  9567                           ; BSR set to: 0
  9568                           ;Types.c: 366: *iterator=tempVar;
  9569  014FFC  C0BF  FFD9         	movff	reverse@iterator,fsr2l
  9570  015000  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
  9571  015004  C0BE  FFDF         	movff	reverse@tempVar,indf2
  9572  015008                     l921:
  9573                           
  9574                           ; BSR set to: 0
  9575                           
  9576                           ; BSR set to: 0
  9577  015008  0100               	movlb	0	; () banked
  9578  01500A  07BF               	decf	reverse@iterator& (0+255),f,b
  9579  01500C  A0D8               	btfss	status,0,c
  9580  01500E  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
  9581  015010  0100               	movlb	0	; () banked
  9582  015012  51BF               	movf	reverse@iterator& (0+255),w,b
  9583  015014  0100               	movlb	0	; () banked
  9584  015016  5DBA               	subwf	reverse@input& (0+255),w,b
  9585  015018  0100               	movlb	0	; () banked
  9586  01501A  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
  9587  01501C  0100               	movlb	0	; () banked
  9588  01501E  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
  9589  015020  B0D8               	btfsc	status,0,c
  9590  015022  0012               	return	
  9591  015024  D7D7               	goto	l922
  9592  015026                     __end_of_reverse:
  9593                           	opt stack 0
  9594                           tosu	equ	0xFFF
  9595                           tosh	equ	0xFFE
  9596                           tosl	equ	0xFFD
  9597                           pclath	equ	0xFFA
  9598                           tblptru	equ	0xFF8
  9599                           tblptrh	equ	0xFF7
  9600                           tblptrl	equ	0xFF6
  9601                           tablat	equ	0xFF5
  9602                           prodh	equ	0xFF4
  9603                           prodl	equ	0xFF3
  9604                           intcon	equ	0xFF2
  9605                           postinc0	equ	0xFEE
  9606                           wreg	equ	0xFE8
  9607                           indf1	equ	0xFE7
  9608                           postdec1	equ	0xFE5
  9609                           fsr1h	equ	0xFE2
  9610                           fsr1l	equ	0xFE1
  9611                           indf2	equ	0xFDF
  9612                           postinc2	equ	0xFDE
  9613                           postdec2	equ	0xFDD
  9614                           fsr2h	equ	0xFDA
  9615                           fsr2l	equ	0xFD9
  9616                           status	equ	0xFD8
  9617                           
  9618 ;; *************** function ___lwmod *****************
  9619 ;; Defined at:
  9620 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
  9621 ;; Parameters:    Size  Location     Type
  9622 ;;  dividend        2    7[BANK0 ] unsigned int 
  9623 ;;  divisor         2    9[BANK0 ] unsigned int 
  9624 ;; Auto vars:     Size  Location     Type
  9625 ;;  counter         1   11[BANK0 ] unsigned char 
  9626 ;; Return value:  Size  Location     Type
  9627 ;;                  2    7[BANK0 ] unsigned int 
  9628 ;; Registers used:
  9629 ;;		wreg, status,2, status,0
  9630 ;; Tracked objects:
  9631 ;;		On entry : 0/0
  9632 ;;		On exit  : 0/0
  9633 ;;		Unchanged: 0/0
  9634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9635 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9638 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9639 ;;Total ram usage:        5 bytes
  9640 ;; Hardware stack levels used:    1
  9641 ;; Hardware stack levels required when called:    7
  9642 ;; This function calls:
  9643 ;;		Nothing
  9644 ;; This function is called by:
  9645 ;;		_itos
  9646 ;;		_printf
  9647 ;; This function uses a non-reentrant model
  9648 ;;
  9649                           
  9650                           	psect	text43
  9651  015300                     __ptext43:
  9652                           	opt stack 0
  9653  015300                     ___lwmod:
  9654                           	opt stack 21
  9655                           
  9656                           ; BSR set to: 0
  9657                           ;incstack = 0
  9658  015300  0100               	movlb	0	; () banked
  9659  015302  51C3               	movf	___lwmod@divisor& (0+255),w,b
  9660  015304  0100               	movlb	0	; () banked
  9661  015306  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
  9662  015308  B4D8               	btfsc	status,2,c
  9663  01530A  D026               	goto	l2828
  9664                           
  9665                           ; BSR set to: 0
  9666  01530C  0E01               	movlw	1
  9667  01530E  0100               	movlb	0	; () banked
  9668  015310  6FC5               	movwf	___lwmod@counter& (0+255),b
  9669  015312  D006               	goto	l2823
  9670  015314                     
  9671                           ; BSR set to: 0
  9672                           
  9673                           ; BSR set to: 0
  9674  015314  0100               	movlb	0	; () banked
  9675  015316  90D8               	bcf	status,0,c
  9676  015318  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
  9677  01531A  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
  9678  01531C  0100               	movlb	0	; () banked
  9679  01531E  2BC5               	incf	___lwmod@counter& (0+255),f,b
  9680  015320                     l2823:
  9681                           
  9682                           ; BSR set to: 0
  9683                           
  9684                           ; BSR set to: 0
  9685  015320  0100               	movlb	0	; () banked
  9686  015322  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
  9687  015324  D7F7               	goto	l2824
  9688  015326                     u8530:
  9689                           
  9690                           ; BSR set to: 0
  9691                           
  9692                           ; BSR set to: 0
  9693                           
  9694                           ; BSR set to: 0
  9695  015326  0100               	movlb	0	; () banked
  9696  015328  51C3               	movf	___lwmod@divisor& (0+255),w,b
  9697  01532A  0100               	movlb	0	; () banked
  9698  01532C  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
  9699  01532E  0100               	movlb	0	; () banked
  9700  015330  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9701  015332  0100               	movlb	0	; () banked
  9702  015334  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
  9703  015336  A0D8               	btfss	status,0,c
  9704  015338  D008               	goto	l2827
  9705                           
  9706                           ; BSR set to: 0
  9707  01533A  0100               	movlb	0	; () banked
  9708  01533C  51C3               	movf	___lwmod@divisor& (0+255),w,b
  9709  01533E  0100               	movlb	0	; () banked
  9710  015340  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
  9711  015342  0100               	movlb	0	; () banked
  9712  015344  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
  9713  015346  0100               	movlb	0	; () banked
  9714  015348  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
  9715  01534A                     l2827:
  9716                           
  9717                           ; BSR set to: 0
  9718                           
  9719                           ; BSR set to: 0
  9720  01534A  0100               	movlb	0	; () banked
  9721  01534C  90D8               	bcf	status,0,c
  9722  01534E  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
  9723  015350  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
  9724                           
  9725                           ; BSR set to: 0
  9726  015352  0100               	movlb	0	; () banked
  9727  015354  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
  9728  015356  D7E7               	goto	u8530
  9729  015358                     l2828:
  9730                           
  9731                           ; BSR set to: 0
  9732                           
  9733                           ; BSR set to: 0
  9734  015358  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
  9735  01535C  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
  9736                           
  9737                           ; BSR set to: 0
  9738  015360  0012               	return		;funcret
  9739  015362                     __end_of___lwmod:
  9740                           	opt stack 0
  9741                           tosu	equ	0xFFF
  9742                           tosh	equ	0xFFE
  9743                           tosl	equ	0xFFD
  9744                           pclath	equ	0xFFA
  9745                           tblptru	equ	0xFF8
  9746                           tblptrh	equ	0xFF7
  9747                           tblptrl	equ	0xFF6
  9748                           tablat	equ	0xFF5
  9749                           prodh	equ	0xFF4
  9750                           prodl	equ	0xFF3
  9751                           intcon	equ	0xFF2
  9752                           postinc0	equ	0xFEE
  9753                           wreg	equ	0xFE8
  9754                           indf1	equ	0xFE7
  9755                           postdec1	equ	0xFE5
  9756                           fsr1h	equ	0xFE2
  9757                           fsr1l	equ	0xFE1
  9758                           indf2	equ	0xFDF
  9759                           postinc2	equ	0xFDE
  9760                           postdec2	equ	0xFDD
  9761                           fsr2h	equ	0xFDA
  9762                           fsr2l	equ	0xFD9
  9763                           status	equ	0xFD8
  9764                           
  9765 ;; *************** function ___lwdiv *****************
  9766 ;; Defined at:
  9767 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
  9768 ;; Parameters:    Size  Location     Type
  9769 ;;  dividend        2    0[BANK0 ] unsigned int 
  9770 ;;  divisor         2    2[BANK0 ] unsigned int 
  9771 ;; Auto vars:     Size  Location     Type
  9772 ;;  quotient        2    5[BANK0 ] unsigned int 
  9773 ;;  counter         1    4[BANK0 ] unsigned char 
  9774 ;; Return value:  Size  Location     Type
  9775 ;;                  2    0[BANK0 ] unsigned int 
  9776 ;; Registers used:
  9777 ;;		wreg, status,2, status,0
  9778 ;; Tracked objects:
  9779 ;;		On entry : 0/0
  9780 ;;		On exit  : 0/0
  9781 ;;		Unchanged: 0/0
  9782 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9783 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9784 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9786 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9787 ;;Total ram usage:        7 bytes
  9788 ;; Hardware stack levels used:    1
  9789 ;; Hardware stack levels required when called:    7
  9790 ;; This function calls:
  9791 ;;		Nothing
  9792 ;; This function is called by:
  9793 ;;		_itos
  9794 ;;		_printf
  9795 ;; This function uses a non-reentrant model
  9796 ;;
  9797                           
  9798                           	psect	text44
  9799  014C8C                     __ptext44:
  9800                           	opt stack 0
  9801  014C8C                     ___lwdiv:
  9802                           	opt stack 21
  9803                           
  9804                           ; BSR set to: 0
  9805                           ;incstack = 0
  9806  014C8C  0E00               	movlw	0
  9807  014C8E  0100               	movlb	0	; () banked
  9808  014C90  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
  9809  014C92  0E00               	movlw	0
  9810  014C94  6FBF               	movwf	___lwdiv@quotient& (0+255),b
  9811                           
  9812                           ; BSR set to: 0
  9813  014C96  0100               	movlb	0	; () banked
  9814  014C98  51BC               	movf	___lwdiv@divisor& (0+255),w,b
  9815  014C9A  0100               	movlb	0	; () banked
  9816  014C9C  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
  9817  014C9E  B4D8               	btfsc	status,2,c
  9818  014CA0  D02C               	goto	l2818
  9819                           
  9820                           ; BSR set to: 0
  9821  014CA2  0E01               	movlw	1
  9822  014CA4  0100               	movlb	0	; () banked
  9823  014CA6  6FBE               	movwf	___lwdiv@counter& (0+255),b
  9824  014CA8  D006               	goto	l2813
  9825  014CAA                     
  9826                           ; BSR set to: 0
  9827                           
  9828                           ; BSR set to: 0
  9829  014CAA  0100               	movlb	0	; () banked
  9830  014CAC  90D8               	bcf	status,0,c
  9831  014CAE  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
  9832  014CB0  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
  9833  014CB2  0100               	movlb	0	; () banked
  9834  014CB4  2BBE               	incf	___lwdiv@counter& (0+255),f,b
  9835  014CB6                     l2813:
  9836                           
  9837                           ; BSR set to: 0
  9838                           
  9839                           ; BSR set to: 0
  9840  014CB6  0100               	movlb	0	; () banked
  9841  014CB8  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
  9842  014CBA  D7F7               	goto	l2814
  9843  014CBC                     u8500:
  9844                           
  9845                           ; BSR set to: 0
  9846                           
  9847                           ; BSR set to: 0
  9848                           
  9849                           ; BSR set to: 0
  9850  014CBC  0100               	movlb	0	; () banked
  9851  014CBE  90D8               	bcf	status,0,c
  9852  014CC0  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
  9853  014CC2  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
  9854                           
  9855                           ; BSR set to: 0
  9856  014CC4  0100               	movlb	0	; () banked
  9857  014CC6  51BC               	movf	___lwdiv@divisor& (0+255),w,b
  9858  014CC8  0100               	movlb	0	; () banked
  9859  014CCA  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
  9860  014CCC  0100               	movlb	0	; () banked
  9861  014CCE  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9862  014CD0  0100               	movlb	0	; () banked
  9863  014CD2  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
  9864  014CD4  A0D8               	btfss	status,0,c
  9865  014CD6  D00A               	goto	l2817
  9866                           
  9867                           ; BSR set to: 0
  9868  014CD8  0100               	movlb	0	; () banked
  9869  014CDA  51BC               	movf	___lwdiv@divisor& (0+255),w,b
  9870  014CDC  0100               	movlb	0	; () banked
  9871  014CDE  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
  9872  014CE0  0100               	movlb	0	; () banked
  9873  014CE2  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
  9874  014CE4  0100               	movlb	0	; () banked
  9875  014CE6  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
  9876                           
  9877                           ; BSR set to: 0
  9878  014CE8  0100               	movlb	0	; () banked
  9879  014CEA  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
  9880  014CEC                     l2817:
  9881                           
  9882                           ; BSR set to: 0
  9883                           
  9884                           ; BSR set to: 0
  9885  014CEC  0100               	movlb	0	; () banked
  9886  014CEE  90D8               	bcf	status,0,c
  9887  014CF0  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
  9888  014CF2  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
  9889                           
  9890                           ; BSR set to: 0
  9891  014CF4  0100               	movlb	0	; () banked
  9892  014CF6  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
  9893  014CF8  D7E1               	goto	u8500
  9894  014CFA                     l2818:
  9895                           
  9896                           ; BSR set to: 0
  9897                           
  9898                           ; BSR set to: 0
  9899  014CFA  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
  9900  014CFE  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
  9901                           
  9902                           ; BSR set to: 0
  9903  014D02  0012               	return		;funcret
  9904  014D04                     __end_of___lwdiv:
  9905                           	opt stack 0
  9906                           tosu	equ	0xFFF
  9907                           tosh	equ	0xFFE
  9908                           tosl	equ	0xFFD
  9909                           pclath	equ	0xFFA
  9910                           tblptru	equ	0xFF8
  9911                           tblptrh	equ	0xFF7
  9912                           tblptrl	equ	0xFF6
  9913                           tablat	equ	0xFF5
  9914                           prodh	equ	0xFF4
  9915                           prodl	equ	0xFF3
  9916                           intcon	equ	0xFF2
  9917                           postinc0	equ	0xFEE
  9918                           wreg	equ	0xFE8
  9919                           indf1	equ	0xFE7
  9920                           postdec1	equ	0xFE5
  9921                           fsr1h	equ	0xFE2
  9922                           fsr1l	equ	0xFE1
  9923                           indf2	equ	0xFDF
  9924                           postinc2	equ	0xFDE
  9925                           postdec2	equ	0xFDD
  9926                           fsr2h	equ	0xFDA
  9927                           fsr2l	equ	0xFD9
  9928                           status	equ	0xFD8
  9929                           
  9930 ;; *************** function _HMI_SetSegments *****************
  9931 ;; Defined at:
  9932 ;;		line 226 in file "HMI.c"
  9933 ;; Parameters:    Size  Location     Type
  9934 ;;  pString         2    1[BANK0 ] PTR unsigned char 
  9935 ;;		 -> HMIBoard..(8), HMIBoard(58), 
  9936 ;; Auto vars:     Size  Location     Type
  9937 ;;  in              2    4[BANK0 ] unsigned short 
  9938 ;; Return value:  Size  Location     Type
  9939 ;;                  1    wreg      void 
  9940 ;; Registers used:
  9941 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  9942 ;; Tracked objects:
  9943 ;;		On entry : 0/0
  9944 ;;		On exit  : 0/0
  9945 ;;		Unchanged: 0/0
  9946 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9947 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9948 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9949 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9950 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9951 ;;Total ram usage:        5 bytes
  9952 ;; Hardware stack levels used:    1
  9953 ;; Hardware stack levels required when called:    8
  9954 ;; This function calls:
  9955 ;;		_ToSegment
  9956 ;; This function is called by:
  9957 ;;		_HMI_SetNumber
  9958 ;; This function uses a non-reentrant model
  9959 ;;
  9960                           
  9961                           	psect	text45
  9962  013E8E                     __ptext45:
  9963                           	opt stack 0
  9964  013E8E                     _HMI_SetSegments:
  9965                           	opt stack 17
  9966                           
  9967                           ;HMI.c: 228: UINT16 in=0;
  9968                           
  9969                           ; BSR set to: 0
  9970                           ;incstack = 0
  9971  013E8E  0E00               	movlw	0
  9972  013E90  0100               	movlb	0	; () banked
  9973  013E92  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
  9974  013E94  0E00               	movlw	0
  9975  013E96  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
  9976                           
  9977                           ;HMI.c: 229: while(*pString)
  9978  013E98  D038               	goto	l1202
  9979  013E9A                     
  9980                           ; BSR set to: 0
  9981                           ;HMI.c: 230: {
  9982                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
  9983                           
  9984                           ; BSR set to: 0
  9985  013E9A  0E3C               	movlw	low _HMIBoard
  9986  013E9C  0100               	movlb	0	; () banked
  9987  013E9E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
  9988  013EA0  6ED9               	movwf	fsr2l,c
  9989  013EA2  0E03               	movlw	high _HMIBoard
  9990  013EA4  0100               	movlb	0	; () banked
  9991  013EA6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
  9992  013EA8  6EDA               	movwf	fsr2h,c
  9993  013EAA  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
  9994  013EAE  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
  9995  013EB2  50E7               	movf	indf1,w,c
  9996  013EB4  EC31  F08A         	call	_ToSegment
  9997  013EB8  6EDF               	movwf	indf2,c
  9998                           
  9999                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 10000  013EBA  0E3C               	movlw	low _HMIBoard
 10001  013EBC  0100               	movlb	0	; () banked
 10002  013EBE  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 10003  013EC0  6ED9               	movwf	fsr2l,c
 10004  013EC2  0E03               	movlw	high _HMIBoard
 10005  013EC4  0100               	movlb	0	; () banked
 10006  013EC6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10007  013EC8  6EDA               	movwf	fsr2h,c
 10008  013ECA  0E80               	movlw	128
 10009  013ECC  18DE               	xorwf	postinc2,w,c
 10010  013ECE  A4D8               	btfss	status,2,c
 10011  013ED0  D00E               	goto	l1201
 10012                           
 10013                           ; BSR set to: 0
 10014                           ;HMI.c: 234: {
 10015                           ;HMI.c: 235: in--;
 10016  013ED2  0100               	movlb	0	; () banked
 10017  013ED4  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 10018  013ED6  A0D8               	btfss	status,0,c
 10019  013ED8  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 10020                           
 10021                           ; BSR set to: 0
 10022                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 10023  013EDA  0E3C               	movlw	low _HMIBoard
 10024  013EDC  0100               	movlb	0	; () banked
 10025  013EDE  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 10026  013EE0  6ED9               	movwf	fsr2l,c
 10027  013EE2  0E03               	movlw	high _HMIBoard
 10028  013EE4  0100               	movlb	0	; () banked
 10029  013EE6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10030  013EE8  6EDA               	movwf	fsr2h,c
 10031  013EEA  0E00               	movlw	0
 10032  013EEC  8EDB               	bsf	plusw2,7,c
 10033  013EEE                     l1201:
 10034                           
 10035                           ; BSR set to: 0
 10036                           ;HMI.c: 237: }
 10037                           ;HMI.c: 239: pString++;
 10038                           
 10039                           ; BSR set to: 0
 10040  013EEE  0100               	movlb	0	; () banked
 10041  013EF0  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 10042  013EF2  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 10043                           
 10044                           ; BSR set to: 0
 10045                           ;HMI.c: 240: in++;
 10046  013EF4  0100               	movlb	0	; () banked
 10047  013EF6  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10048  013EF8  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10049                           
 10050                           ; BSR set to: 0
 10051                           ;HMI.c: 241: if (in>=6)
 10052  013EFA  0100               	movlb	0	; () banked
 10053  013EFC  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10054  013EFE  E11A               	bnz	l12089
 10055  013F00  0E06               	movlw	6
 10056  013F02  0100               	movlb	0	; () banked
 10057  013F04  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 10058  013F06  B0D8               	btfsc	status,0,c
 10059  013F08  D015               	goto	l1204
 10060  013F0A                     l1202:
 10061                           
 10062                           ; BSR set to: 0
 10063                           
 10064                           ; BSR set to: 0
 10065                           
 10066                           ; BSR set to: 0
 10067  013F0A  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 10068  013F0E  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 10069  013F12  50DF               	movf	indf2,w,c
 10070  013F14  B4D8               	btfsc	status,2,c
 10071  013F16  D00E               	goto	l1204
 10072  013F18  D7C0               	goto	l1200
 10073  013F1A                     
 10074                           ; BSR set to: 0
 10075                           ;HMI.c: 245: {
 10076                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 10077                           
 10078                           ; BSR set to: 0
 10079  013F1A  0E3C               	movlw	low _HMIBoard
 10080  013F1C  0100               	movlb	0	; () banked
 10081  013F1E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 10082  013F20  6ED9               	movwf	fsr2l,c
 10083  013F22  0E03               	movlw	high _HMIBoard
 10084  013F24  0100               	movlb	0	; () banked
 10085  013F26  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 10086  013F28  6EDA               	movwf	fsr2h,c
 10087  013F2A  0E00               	movlw	0
 10088  013F2C  6EDF               	movwf	indf2,c
 10089                           
 10090                           ; BSR set to: 0
 10091                           ;HMI.c: 247: in++;
 10092  013F2E  0100               	movlb	0	; () banked
 10093  013F30  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 10094  013F32  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 10095  013F34                     l1204:
 10096  013F34                     l12089:
 10097                           
 10098                           ; BSR set to: 0
 10099  013F34  0100               	movlb	0	; () banked
 10100  013F36  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 10101  013F38  E106               	bnz	l1207
 10102  013F3A  0E06               	movlw	6
 10103  013F3C  0100               	movlb	0	; () banked
 10104  013F3E  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 10105  013F40  B0D8               	btfsc	status,0,c
 10106  013F42  0012               	return	
 10107  013F44  D7EA               	goto	l1205
 10108  013F46                     l1207:
 10109                           
 10110                           ; BSR set to: 0
 10111  013F46  0012               	return		;funcret
 10112  013F48                     __end_of_HMI_SetSegments:
 10113                           	opt stack 0
 10114                           tosu	equ	0xFFF
 10115                           tosh	equ	0xFFE
 10116                           tosl	equ	0xFFD
 10117                           pclath	equ	0xFFA
 10118                           tblptru	equ	0xFF8
 10119                           tblptrh	equ	0xFF7
 10120                           tblptrl	equ	0xFF6
 10121                           tablat	equ	0xFF5
 10122                           prodh	equ	0xFF4
 10123                           prodl	equ	0xFF3
 10124                           intcon	equ	0xFF2
 10125                           postinc0	equ	0xFEE
 10126                           wreg	equ	0xFE8
 10127                           indf1	equ	0xFE7
 10128                           postdec1	equ	0xFE5
 10129                           fsr1h	equ	0xFE2
 10130                           fsr1l	equ	0xFE1
 10131                           indf2	equ	0xFDF
 10132                           postinc2	equ	0xFDE
 10133                           postdec2	equ	0xFDD
 10134                           plusw2	equ	0xFDB
 10135                           fsr2h	equ	0xFDA
 10136                           fsr2l	equ	0xFD9
 10137                           status	equ	0xFD8
 10138                           
 10139 ;; *************** function _ToSegment *****************
 10140 ;; Defined at:
 10141 ;;		line 284 in file "Library/Types.c"
 10142 ;; Parameters:    Size  Location     Type
 10143 ;;  pCHR            1    wreg     unsigned char 
 10144 ;; Auto vars:     Size  Location     Type
 10145 ;;  pCHR            1    0[BANK0 ] unsigned char 
 10146 ;; Return value:  Size  Location     Type
 10147 ;;                  1    wreg      unsigned char 
 10148 ;; Registers used:
 10149 ;;		wreg, status,2, status,0
 10150 ;; Tracked objects:
 10151 ;;		On entry : 0/0
 10152 ;;		On exit  : 0/0
 10153 ;;		Unchanged: 0/0
 10154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10158 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10159 ;;Total ram usage:        1 bytes
 10160 ;; Hardware stack levels used:    1
 10161 ;; Hardware stack levels required when called:    7
 10162 ;; This function calls:
 10163 ;;		Nothing
 10164 ;; This function is called by:
 10165 ;;		_HMI_SetSegments
 10166 ;; This function uses a non-reentrant model
 10167 ;;
 10168                           
 10169                           	psect	text46
 10170  011462                     __ptext46:
 10171                           	opt stack 0
 10172  011462                     _ToSegment:
 10173                           	opt stack 17
 10174                           
 10175                           ; BSR set to: 0
 10176                           ;incstack = 0
 10177                           ;ToSegment@pCHR stored from wreg
 10178  011462  0100               	movlb	0	; () banked
 10179  011464  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 10180                           
 10181                           ;Types.c: 286: switch(pCHR)
 10182  011466  D07E               	goto	l853
 10183  011468  0E3F               	movlw	63
 10184  01146A  0012               	return	
 10185  01146C  0E06               	movlw	6
 10186  01146E  0012               	return	
 10187  011470  0E5B               	movlw	91
 10188  011472  0012               	return	
 10189  011474  0E4F               	movlw	79
 10190  011476  0012               	return	
 10191  011478  0E66               	movlw	102
 10192  01147A  0012               	return	
 10193  01147C  0E6D               	movlw	109
 10194  01147E  0012               	return	
 10195  011480  0E7D               	movlw	125
 10196  011482  0012               	return	
 10197  011484  0E07               	movlw	7
 10198  011486  0012               	return	
 10199  011488  0E7F               	movlw	127
 10200  01148A  0012               	return	
 10201  01148C  0E6F               	movlw	111
 10202  01148E  0012               	return	
 10203  011490  0E5F               	movlw	95
 10204  011492  0012               	return	
 10205  011494  0E7C               	movlw	124
 10206  011496  0012               	return	
 10207  011498  0E58               	movlw	88
 10208  01149A  0012               	return	
 10209  01149C  0E5E               	movlw	94
 10210  01149E  0012               	return	
 10211  0114A0  0E7B               	movlw	123
 10212  0114A2  0012               	return	
 10213  0114A4  0E71               	movlw	113
 10214  0114A6  0012               	return	
 10215  0114A8  0E6F               	movlw	111
 10216  0114AA  0012               	return	
 10217  0114AC  0E74               	movlw	116
 10218  0114AE  0012               	return	
 10219  0114B0  0E04               	movlw	4
 10220  0114B2  0012               	return	
 10221  0114B4  0E0E               	movlw	14
 10222  0114B6  0012               	return	
 10223  0114B8  0E7A               	movlw	122
 10224  0114BA  0012               	return	
 10225  0114BC  0E06               	movlw	6
 10226  0114BE  0012               	return	
 10227  0114C0  0E14               	movlw	20
 10228  0114C2  0012               	return	
 10229  0114C4  0E54               	movlw	84
 10230  0114C6  0012               	return	
 10231  0114C8  0E5C               	movlw	92
 10232  0114CA  0012               	return	
 10233  0114CC  0E73               	movlw	115
 10234  0114CE  0012               	return	
 10235  0114D0  0E67               	movlw	103
 10236  0114D2  0012               	return	
 10237  0114D4  0E50               	movlw	80
 10238  0114D6  0012               	return	
 10239  0114D8  0E6D               	movlw	109
 10240  0114DA  0012               	return	
 10241  0114DC  0E78               	movlw	120
 10242  0114DE  0012               	return	
 10243  0114E0  0E1C               	movlw	28
 10244  0114E2  0012               	return	
 10245  0114E4  0E62               	movlw	98
 10246  0114E6  0012               	return	
 10247  0114E8  0E2A               	movlw	42
 10248  0114EA  0012               	return	
 10249  0114EC  0E64               	movlw	100
 10250  0114EE  0012               	return	
 10251  0114F0  0E6E               	movlw	110
 10252  0114F2  0012               	return	
 10253  0114F4  0E5B               	movlw	91
 10254  0114F6  0012               	return	
 10255  0114F8  0E77               	movlw	119
 10256  0114FA  0012               	return	
 10257  0114FC  0E7F               	movlw	127
 10258  0114FE  0012               	return	
 10259  011500  0E39               	movlw	57
 10260  011502  0012               	return	
 10261  011504  0E3F               	movlw	63
 10262  011506  0012               	return	
 10263  011508  0E79               	movlw	121
 10264  01150A  0012               	return	
 10265  01150C  0E71               	movlw	113
 10266  01150E  0012               	return	
 10267  011510  0E3D               	movlw	61
 10268  011512  0012               	return	
 10269  011514  0E76               	movlw	118
 10270  011516  0012               	return	
 10271  011518  0E06               	movlw	6
 10272  01151A  0012               	return	
 10273  01151C  0E1E               	movlw	30
 10274  01151E  0012               	return	
 10275  011520  0E57               	movlw	87
 10276  011522  0012               	return	
 10277  011524  0E38               	movlw	56
 10278  011526  0012               	return	
 10279  011528  0E76               	movlw	118
 10280  01152A  0012               	return	
 10281  01152C  0E76               	movlw	118
 10282  01152E  0012               	return	
 10283  011530  0E3F               	movlw	63
 10284  011532  0012               	return	
 10285  011534  0E73               	movlw	115
 10286  011536  0012               	return	
 10287  011538  0E3F               	movlw	63
 10288  01153A  0012               	return	
 10289  01153C  0E77               	movlw	119
 10290  01153E  0012               	return	
 10291  011540  0E6D               	movlw	109
 10292  011542  0012               	return	
 10293  011544  0E31               	movlw	49
 10294  011546  0012               	return	
 10295  011548  0E3E               	movlw	62
 10296  01154A  0012               	return	
 10297  01154C  0E3E               	movlw	62
 10298  01154E  0012               	return	
 10299  011550  0E7E               	movlw	126
 10300  011552  0012               	return	
 10301  011554  0E76               	movlw	118
 10302  011556  0012               	return	
 10303  011558  0E66               	movlw	102
 10304  01155A  0012               	return	
 10305  01155C  0E5B               	movlw	91
 10306  01155E  0012               	return	
 10307  011560  0E80               	movlw	128
 10308  011562  0012               	return	
 10309  011564                     l853:
 10310  011564  0100               	movlb	0	; () banked
 10311  011566  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 10312                           
 10313                           ; Switch size 1, requested type "space"
 10314                           ; Number of cases is 63, Range of values is 46 to 122
 10315                           ; switch strategies available:
 10316                           ; Name         Instructions Cycles
 10317                           ; simple_byte          190    96 (average)
 10318                           ;	Chosen strategy is simple_byte
 10319  011568  0A2E               	xorlw	46	; case 46
 10320  01156A  B4D8               	btfsc	status,2,c
 10321  01156C  D7F9               	goto	l917
 10322  01156E  0A1E               	xorlw	30	; case 48
 10323  011570  B4D8               	btfsc	status,2,c
 10324  011572  D77A               	goto	l854
 10325  011574  0A01               	xorlw	1	; case 49
 10326  011576  B4D8               	btfsc	status,2,c
 10327  011578  D779               	goto	l856
 10328  01157A  0A03               	xorlw	3	; case 50
 10329  01157C  B4D8               	btfsc	status,2,c
 10330  01157E  D778               	goto	l857
 10331  011580  0A01               	xorlw	1	; case 51
 10332  011582  B4D8               	btfsc	status,2,c
 10333  011584  D777               	goto	l858
 10334  011586  0A07               	xorlw	7	; case 52
 10335  011588  B4D8               	btfsc	status,2,c
 10336  01158A  D776               	goto	l859
 10337  01158C  0A01               	xorlw	1	; case 53
 10338  01158E  B4D8               	btfsc	status,2,c
 10339  011590  D775               	goto	l860
 10340  011592  0A03               	xorlw	3	; case 54
 10341  011594  B4D8               	btfsc	status,2,c
 10342  011596  D774               	goto	l861
 10343  011598  0A01               	xorlw	1	; case 55
 10344  01159A  B4D8               	btfsc	status,2,c
 10345  01159C  D773               	goto	l862
 10346  01159E  0A0F               	xorlw	15	; case 56
 10347  0115A0  B4D8               	btfsc	status,2,c
 10348  0115A2  D772               	goto	l863
 10349  0115A4  0A01               	xorlw	1	; case 57
 10350  0115A6  B4D8               	btfsc	status,2,c
 10351  0115A8  D771               	goto	l864
 10352  0115AA  0A78               	xorlw	120	; case 65
 10353  0115AC  B4D8               	btfsc	status,2,c
 10354  0115AE  D7A4               	goto	l891
 10355  0115B0  0A03               	xorlw	3	; case 66
 10356  0115B2  B4D8               	btfsc	status,2,c
 10357  0115B4  D7A3               	goto	l892
 10358  0115B6  0A01               	xorlw	1	; case 67
 10359  0115B8  B4D8               	btfsc	status,2,c
 10360  0115BA  D7A2               	goto	l893
 10361  0115BC  0A07               	xorlw	7	; case 68
 10362  0115BE  B4D8               	btfsc	status,2,c
 10363  0115C0  D7A1               	goto	l894
 10364  0115C2  0A01               	xorlw	1	; case 69
 10365  0115C4  B4D8               	btfsc	status,2,c
 10366  0115C6  D7A0               	goto	l895
 10367  0115C8  0A03               	xorlw	3	; case 70
 10368  0115CA  B4D8               	btfsc	status,2,c
 10369  0115CC  D79F               	goto	l896
 10370  0115CE  0A01               	xorlw	1	; case 71
 10371  0115D0  B4D8               	btfsc	status,2,c
 10372  0115D2  D79E               	goto	l897
 10373  0115D4  0A0F               	xorlw	15	; case 72
 10374  0115D6  B4D8               	btfsc	status,2,c
 10375  0115D8  D79D               	goto	l898
 10376  0115DA  0A01               	xorlw	1	; case 73
 10377  0115DC  B4D8               	btfsc	status,2,c
 10378  0115DE  D79C               	goto	l899
 10379  0115E0  0A03               	xorlw	3	; case 74
 10380  0115E2  B4D8               	btfsc	status,2,c
 10381  0115E4  D79B               	goto	l900
 10382  0115E6  0A01               	xorlw	1	; case 75
 10383  0115E8  B4D8               	btfsc	status,2,c
 10384  0115EA  D79A               	goto	l901
 10385  0115EC  0A07               	xorlw	7	; case 76
 10386  0115EE  B4D8               	btfsc	status,2,c
 10387  0115F0  D799               	goto	l902
 10388  0115F2  0A01               	xorlw	1	; case 77
 10389  0115F4  B4D8               	btfsc	status,2,c
 10390  0115F6  D798               	goto	l903
 10391  0115F8  0A03               	xorlw	3	; case 78
 10392  0115FA  B4D8               	btfsc	status,2,c
 10393  0115FC  D797               	goto	l904
 10394  0115FE  0A01               	xorlw	1	; case 79
 10395  011600  B4D8               	btfsc	status,2,c
 10396  011602  D796               	goto	l905
 10397  011604  0A1F               	xorlw	31	; case 80
 10398  011606  B4D8               	btfsc	status,2,c
 10399  011608  D795               	goto	l906
 10400  01160A  0A01               	xorlw	1	; case 81
 10401  01160C  B4D8               	btfsc	status,2,c
 10402  01160E  D794               	goto	l907
 10403  011610  0A03               	xorlw	3	; case 82
 10404  011612  B4D8               	btfsc	status,2,c
 10405  011614  D793               	goto	l908
 10406  011616  0A01               	xorlw	1	; case 83
 10407  011618  B4D8               	btfsc	status,2,c
 10408  01161A  D792               	goto	l909
 10409  01161C  0A07               	xorlw	7	; case 84
 10410  01161E  B4D8               	btfsc	status,2,c
 10411  011620  D791               	goto	l910
 10412  011622  0A01               	xorlw	1	; case 85
 10413  011624  B4D8               	btfsc	status,2,c
 10414  011626  D790               	goto	l911
 10415  011628  0A03               	xorlw	3	; case 86
 10416  01162A  B4D8               	btfsc	status,2,c
 10417  01162C  D78F               	goto	l912
 10418  01162E  0A01               	xorlw	1	; case 87
 10419  011630  B4D8               	btfsc	status,2,c
 10420  011632  D78E               	goto	l913
 10421  011634  0A0F               	xorlw	15	; case 88
 10422  011636  B4D8               	btfsc	status,2,c
 10423  011638  D78D               	goto	l914
 10424  01163A  0A01               	xorlw	1	; case 89
 10425  01163C  B4D8               	btfsc	status,2,c
 10426  01163E  D78C               	goto	l915
 10427  011640  0A03               	xorlw	3	; case 90
 10428  011642  B4D8               	btfsc	status,2,c
 10429  011644  D78B               	goto	l916
 10430  011646  0A3B               	xorlw	59	; case 97
 10431  011648  B4D8               	btfsc	status,2,c
 10432  01164A  D722               	goto	l865
 10433  01164C  0A03               	xorlw	3	; case 98
 10434  01164E  B4D8               	btfsc	status,2,c
 10435  011650  D721               	goto	l866
 10436  011652  0A01               	xorlw	1	; case 99
 10437  011654  B4D8               	btfsc	status,2,c
 10438  011656  D720               	goto	l867
 10439  011658  0A07               	xorlw	7	; case 100
 10440  01165A  B4D8               	btfsc	status,2,c
 10441  01165C  D71F               	goto	l868
 10442  01165E  0A01               	xorlw	1	; case 101
 10443  011660  B4D8               	btfsc	status,2,c
 10444  011662  D71E               	goto	l869
 10445  011664  0A03               	xorlw	3	; case 102
 10446  011666  B4D8               	btfsc	status,2,c
 10447  011668  D71D               	goto	l870
 10448  01166A  0A01               	xorlw	1	; case 103
 10449  01166C  B4D8               	btfsc	status,2,c
 10450  01166E  D71C               	goto	l871
 10451  011670  0A0F               	xorlw	15	; case 104
 10452  011672  B4D8               	btfsc	status,2,c
 10453  011674  D71B               	goto	l872
 10454  011676  0A01               	xorlw	1	; case 105
 10455  011678  B4D8               	btfsc	status,2,c
 10456  01167A  D71A               	goto	l873
 10457  01167C  0A03               	xorlw	3	; case 106
 10458  01167E  B4D8               	btfsc	status,2,c
 10459  011680  D719               	goto	l874
 10460  011682  0A01               	xorlw	1	; case 107
 10461  011684  B4D8               	btfsc	status,2,c
 10462  011686  D718               	goto	l875
 10463  011688  0A07               	xorlw	7	; case 108
 10464  01168A  B4D8               	btfsc	status,2,c
 10465  01168C  D717               	goto	l876
 10466  01168E  0A01               	xorlw	1	; case 109
 10467  011690  B4D8               	btfsc	status,2,c
 10468  011692  D716               	goto	l877
 10469  011694  0A03               	xorlw	3	; case 110
 10470  011696  B4D8               	btfsc	status,2,c
 10471  011698  D715               	goto	l878
 10472  01169A  0A01               	xorlw	1	; case 111
 10473  01169C  B4D8               	btfsc	status,2,c
 10474  01169E  D714               	goto	l879
 10475  0116A0  0A1F               	xorlw	31	; case 112
 10476  0116A2  B4D8               	btfsc	status,2,c
 10477  0116A4  D713               	goto	l880
 10478  0116A6  0A01               	xorlw	1	; case 113
 10479  0116A8  B4D8               	btfsc	status,2,c
 10480  0116AA  D712               	goto	l881
 10481  0116AC  0A03               	xorlw	3	; case 114
 10482  0116AE  B4D8               	btfsc	status,2,c
 10483  0116B0  D711               	goto	l882
 10484  0116B2  0A01               	xorlw	1	; case 115
 10485  0116B4  B4D8               	btfsc	status,2,c
 10486  0116B6  D710               	goto	l883
 10487  0116B8  0A07               	xorlw	7	; case 116
 10488  0116BA  B4D8               	btfsc	status,2,c
 10489  0116BC  D70F               	goto	l884
 10490  0116BE  0A01               	xorlw	1	; case 117
 10491  0116C0  B4D8               	btfsc	status,2,c
 10492  0116C2  D70E               	goto	l885
 10493  0116C4  0A03               	xorlw	3	; case 118
 10494  0116C6  B4D8               	btfsc	status,2,c
 10495  0116C8  D70D               	goto	l886
 10496  0116CA  0A01               	xorlw	1	; case 119
 10497  0116CC  B4D8               	btfsc	status,2,c
 10498  0116CE  D70C               	goto	l887
 10499  0116D0  0A0F               	xorlw	15	; case 120
 10500  0116D2  B4D8               	btfsc	status,2,c
 10501  0116D4  D70B               	goto	l888
 10502  0116D6  0A01               	xorlw	1	; case 121
 10503  0116D8  B4D8               	btfsc	status,2,c
 10504  0116DA  D70A               	goto	l889
 10505  0116DC  0A03               	xorlw	3	; case 122
 10506  0116DE  B4D8               	btfsc	status,2,c
 10507  0116E0  D709               	goto	l890
 10508                           
 10509                           ;Types.c: 354: return 0;
 10510                           
 10511                           ; BSR set to: 0
 10512  0116E2  0E00               	movlw	0
 10513  0116E4  0012               	return	
 10514  0116E6                     __end_of_ToSegment:
 10515                           	opt stack 0
 10516                           tosu	equ	0xFFF
 10517                           tosh	equ	0xFFE
 10518                           tosl	equ	0xFFD
 10519                           pclath	equ	0xFFA
 10520                           tblptru	equ	0xFF8
 10521                           tblptrh	equ	0xFF7
 10522                           tblptrl	equ	0xFF6
 10523                           tablat	equ	0xFF5
 10524                           prodh	equ	0xFF4
 10525                           prodl	equ	0xFF3
 10526                           intcon	equ	0xFF2
 10527                           postinc0	equ	0xFEE
 10528                           wreg	equ	0xFE8
 10529                           indf1	equ	0xFE7
 10530                           postdec1	equ	0xFE5
 10531                           fsr1h	equ	0xFE2
 10532                           fsr1l	equ	0xFE1
 10533                           indf2	equ	0xFDF
 10534                           postinc2	equ	0xFDE
 10535                           postdec2	equ	0xFDD
 10536                           plusw2	equ	0xFDB
 10537                           fsr2h	equ	0xFDA
 10538                           fsr2l	equ	0xFD9
 10539                           status	equ	0xFD8
 10540                           
 10541 ;; *************** function _HMI_SetButton *****************
 10542 ;; Defined at:
 10543 ;;		line 186 in file "HMI.c"
 10544 ;; Parameters:    Size  Location     Type
 10545 ;;  pValue          1    wreg     unsigned char 
 10546 ;; Auto vars:     Size  Location     Type
 10547 ;;  pValue          1    6[BANK0 ] unsigned char 
 10548 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 10549 ;;  v               1    7[BANK0 ] unsigned char 
 10550 ;; Return value:  Size  Location     Type
 10551 ;;                  1    wreg      void 
 10552 ;; Registers used:
 10553 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 10554 ;; Tracked objects:
 10555 ;;		On entry : 0/0
 10556 ;;		On exit  : 0/0
 10557 ;;		Unchanged: 0/0
 10558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10559 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10560 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10561 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;Total ram usage:        8 bytes
 10564 ;; Hardware stack levels used:    1
 10565 ;; Hardware stack levels required when called:    7
 10566 ;; This function calls:
 10567 ;;		Nothing
 10568 ;; This function is called by:
 10569 ;;		_Event_TestButton
 10570 ;; This function uses a non-reentrant model
 10571 ;;
 10572                           
 10573                           	psect	text47
 10574  0147D6                     __ptext47:
 10575                           	opt stack 0
 10576  0147D6                     _HMI_SetButton:
 10577                           	opt stack 19
 10578                           
 10579                           ;incstack = 0
 10580                           ;HMI_SetButton@pValue stored from wreg
 10581  0147D6  0100               	movlb	0	; () banked
 10582  0147D8  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 10583                           
 10584                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 10585  0147DA  0ECA               	movlw	low HMI_SetButton@F7213
 10586  0147DC  6EF6               	movwf	tblptrl,c
 10587  0147DE                     	if	1	;There is more than 1 active tblptr byte
 10588  0147DE  0EFD               	movlw	high HMI_SetButton@F7213
 10589  0147E0  6EF7               	movwf	tblptrh,c
 10590  0147E2                     	endif
 10591  0147E2                     	if	1	;There are 3 active tblptr bytes
 10592  0147E2  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 10593  0147E4  6EF8               	movwf	tblptru,c
 10594  0147E6                     	endif
 10595  0147E6  0009               	tblrd		*+
 10596  0147E8  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 10597  0147EC  0009               	tblrd		*+
 10598  0147EE  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 10599  0147F2  0009               	tblrd		*+
 10600  0147F4  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 10601  0147F8  000A               	tblrd		*-
 10602  0147FA  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 10603                           
 10604                           ;HMI.c: 189: UINT8 v = 0b00010001;
 10605  0147FE  0E11               	movlw	17
 10606  014800  0100               	movlb	0	; () banked
 10607  014802  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;HMI.c: 190: pValue &= 3;
 10611  014804  0E03               	movlw	3
 10612  014806  0100               	movlb	0	; () banked
 10613  014808  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 10614                           
 10615                           ; BSR set to: 0
 10616                           ;HMI.c: 191: v = v << reindex[pValue];
 10617  01480A  0100               	movlb	0	; () banked
 10618  01480C  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 10619  01480E  0D01               	mullw	1
 10620  014810  0EBC               	movlw	low HMI_SetButton@reindex
 10621  014812  24F3               	addwf	prodl,w,c
 10622  014814  6ED9               	movwf	fsr2l,c
 10623  014816  0E00               	movlw	high HMI_SetButton@reindex
 10624  014818  20F4               	addwfc	prodh,w,c
 10625  01481A  6EDA               	movwf	fsr2h,c
 10626  01481C  50DF               	movf	indf2,w,c
 10627  01481E  0100               	movlb	0	; () banked
 10628  014820  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 10629  014822  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 10630  014826  0100               	movlb	0	; () banked
 10631  014828  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 10632  01482A  D003               	goto	u8994
 10633  01482C                     u8995:
 10634  01482C  0100               	movlb	0	; () banked
 10635  01482E  90D8               	bcf	status,0,c
 10636  014830  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 10637  014832                     u8994:
 10638  014832  0100               	movlb	0	; () banked
 10639  014834  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 10640  014836  D7FA               	goto	u8995
 10641  014838  0100               	movlb	0	; () banked
 10642  01483A  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 10643  01483C  0100               	movlb	0	; () banked
 10644  01483E  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 10645                           
 10646                           ; BSR set to: 0
 10647                           ;HMI.c: 192: v = v >> 4;
 10648  014840  0100               	movlb	0	; () banked
 10649  014842  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 10650  014844  0B0F               	andlw	15
 10651  014846  0100               	movlb	0	; () banked
 10652  014848  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 10653                           
 10654                           ; BSR set to: 0
 10655                           ;HMI.c: 193: v = v & 0x0F;
 10656  01484A  0100               	movlb	0	; () banked
 10657  01484C  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 10658  01484E  0B0F               	andlw	15
 10659  014850  0100               	movlb	0	; () banked
 10660  014852  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;HMI.c: 194: HMIBoard.pButton = v;
 10664  014854  0103               	movlb	3	; () banked
 10665  014856  5142               	movf	(_HMIBoard+6)& (0+255),w,b
 10666  014858  0100               	movlb	0	; () banked
 10667  01485A  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 10668  01485C  0BF0               	andlw	-16
 10669  01485E  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 10670  014860  0103               	movlb	3	; () banked
 10671  014862  6F42               	movwf	(_HMIBoard+6)& (0+255),b
 10672                           
 10673                           ; BSR set to: 3
 10674  014864  0012               	return		;funcret
 10675  014866                     __end_of_HMI_SetButton:
 10676                           	opt stack 0
 10677                           tosu	equ	0xFFF
 10678                           tosh	equ	0xFFE
 10679                           tosl	equ	0xFFD
 10680                           pclath	equ	0xFFA
 10681                           tblptru	equ	0xFF8
 10682                           tblptrh	equ	0xFF7
 10683                           tblptrl	equ	0xFF6
 10684                           tablat	equ	0xFF5
 10685                           prodh	equ	0xFF4
 10686                           prodl	equ	0xFF3
 10687                           intcon	equ	0xFF2
 10688                           postinc0	equ	0xFEE
 10689                           wreg	equ	0xFE8
 10690                           indf1	equ	0xFE7
 10691                           postdec1	equ	0xFE5
 10692                           fsr1h	equ	0xFE2
 10693                           fsr1l	equ	0xFE1
 10694                           indf2	equ	0xFDF
 10695                           postinc2	equ	0xFDE
 10696                           postdec2	equ	0xFDD
 10697                           plusw2	equ	0xFDB
 10698                           fsr2h	equ	0xFDA
 10699                           fsr2l	equ	0xFD9
 10700                           status	equ	0xFD8
 10701                           
 10702 ;; *************** function _HMI_SetBar *****************
 10703 ;; Defined at:
 10704 ;;		line 205 in file "HMI.c"
 10705 ;; Parameters:    Size  Location     Type
 10706 ;;  pValue          1    wreg     unsigned char 
 10707 ;; Auto vars:     Size  Location     Type
 10708 ;;  pValue          1    0[BANK0 ] unsigned char 
 10709 ;; Return value:  Size  Location     Type
 10710 ;;                  1    wreg      void 
 10711 ;; Registers used:
 10712 ;;		wreg
 10713 ;; Tracked objects:
 10714 ;;		On entry : 0/0
 10715 ;;		On exit  : 0/0
 10716 ;;		Unchanged: 0/0
 10717 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10718 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10719 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10720 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10721 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10722 ;;Total ram usage:        1 bytes
 10723 ;; Hardware stack levels used:    1
 10724 ;; Hardware stack levels required when called:    7
 10725 ;; This function calls:
 10726 ;;		Nothing
 10727 ;; This function is called by:
 10728 ;;		_Event_DIPSwitch
 10729 ;;		_Event_HMI_DIPSwitch
 10730 ;;		_Event_HMI_LeftButton
 10731 ;;		_Event_HMI_RightButton
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text48
 10736  01614C                     __ptext48:
 10737                           	opt stack 0
 10738  01614C                     _HMI_SetBar:
 10739                           	opt stack 19
 10740                           
 10741                           ; BSR set to: 3
 10742                           ;incstack = 0
 10743                           ;HMI_SetBar@pValue stored from wreg
 10744  01614C  0100               	movlb	0	; () banked
 10745  01614E  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 10746                           
 10747                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 10748  016150  C0BA  F343         	movff	HMI_SetBar@pValue,_HMIBoard+7
 10749  016154  0012               	return		;funcret
 10750  016156                     __end_of_HMI_SetBar:
 10751                           	opt stack 0
 10752                           tosu	equ	0xFFF
 10753                           tosh	equ	0xFFE
 10754                           tosl	equ	0xFFD
 10755                           pclath	equ	0xFFA
 10756                           tblptru	equ	0xFF8
 10757                           tblptrh	equ	0xFF7
 10758                           tblptrl	equ	0xFF6
 10759                           tablat	equ	0xFF5
 10760                           prodh	equ	0xFF4
 10761                           prodl	equ	0xFF3
 10762                           intcon	equ	0xFF2
 10763                           postinc0	equ	0xFEE
 10764                           wreg	equ	0xFE8
 10765                           indf1	equ	0xFE7
 10766                           postdec1	equ	0xFE5
 10767                           fsr1h	equ	0xFE2
 10768                           fsr1l	equ	0xFE1
 10769                           indf2	equ	0xFDF
 10770                           postinc2	equ	0xFDE
 10771                           postdec2	equ	0xFDD
 10772                           plusw2	equ	0xFDB
 10773                           fsr2h	equ	0xFDA
 10774                           fsr2l	equ	0xFD9
 10775                           status	equ	0xFD8
 10776                           
 10777 ;; *************** function _HMI_GetBar *****************
 10778 ;; Defined at:
 10779 ;;		line 209 in file "HMI.c"
 10780 ;; Parameters:    Size  Location     Type
 10781 ;;		None
 10782 ;; Auto vars:     Size  Location     Type
 10783 ;;		None
 10784 ;; Return value:  Size  Location     Type
 10785 ;;                  1    wreg      unsigned char 
 10786 ;; Registers used:
 10787 ;;		wreg, status,2
 10788 ;; Tracked objects:
 10789 ;;		On entry : 0/0
 10790 ;;		On exit  : 0/0
 10791 ;;		Unchanged: 0/0
 10792 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10793 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10794 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10795 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10796 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10797 ;;Total ram usage:        0 bytes
 10798 ;; Hardware stack levels used:    1
 10799 ;; Hardware stack levels required when called:    7
 10800 ;; This function calls:
 10801 ;;		Nothing
 10802 ;; This function is called by:
 10803 ;;		_Event_DIPSwitch
 10804 ;;		_Event_HMI_DIPSwitch
 10805 ;; This function uses a non-reentrant model
 10806 ;;
 10807                           
 10808                           	psect	text49
 10809  016180                     __ptext49:
 10810                           	opt stack 0
 10811  016180                     _HMI_GetBar:
 10812                           	opt stack 19
 10813                           
 10814                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 10815                           
 10816                           ;incstack = 0
 10817  016180  0103               	movlb	3	; () banked
 10818  016182  5143               	movf	(_HMIBoard+7)& (0+255),w,b
 10819  016184  0012               	return	
 10820  016186                     __end_of_HMI_GetBar:
 10821                           	opt stack 0
 10822                           tosu	equ	0xFFF
 10823                           tosh	equ	0xFFE
 10824                           tosl	equ	0xFFD
 10825                           pclath	equ	0xFFA
 10826                           tblptru	equ	0xFF8
 10827                           tblptrh	equ	0xFF7
 10828                           tblptrl	equ	0xFF6
 10829                           tablat	equ	0xFF5
 10830                           prodh	equ	0xFF4
 10831                           prodl	equ	0xFF3
 10832                           intcon	equ	0xFF2
 10833                           postinc0	equ	0xFEE
 10834                           wreg	equ	0xFE8
 10835                           indf1	equ	0xFE7
 10836                           postdec1	equ	0xFE5
 10837                           fsr1h	equ	0xFE2
 10838                           fsr1l	equ	0xFE1
 10839                           indf2	equ	0xFDF
 10840                           postinc2	equ	0xFDE
 10841                           postdec2	equ	0xFDD
 10842                           plusw2	equ	0xFDB
 10843                           fsr2h	equ	0xFDA
 10844                           fsr2l	equ	0xFD9
 10845                           status	equ	0xFD8
 10846                           
 10847 ;; *************** function _Console_Render *****************
 10848 ;; Defined at:
 10849 ;;		line 377 in file "Library/Console.c"
 10850 ;; Parameters:    Size  Location     Type
 10851 ;;		None
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  lCursor         4   38[BANK0 ] struct Point
 10854 ;;  y               1   43[BANK0 ] unsigned char 
 10855 ;;  x               1   42[BANK0 ] unsigned char 
 10856 ;;  temp            1   37[BANK0 ] unsigned char 
 10857 ;;  Temp            2    0        unsigned short 
 10858 ;; Return value:  Size  Location     Type
 10859 ;;                  1    wreg      void 
 10860 ;; Registers used:
 10861 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10862 ;; Tracked objects:
 10863 ;;		On entry : 0/0
 10864 ;;		On exit  : 0/0
 10865 ;;		Unchanged: 0/0
 10866 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10867 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10868 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10869 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10870 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10871 ;;Total ram usage:        9 bytes
 10872 ;; Hardware stack levels used:    1
 10873 ;; Hardware stack levels required when called:   11
 10874 ;; This function calls:
 10875 ;;		_Console_MakeField
 10876 ;;		_LCD_DrawField
 10877 ;;		_LCD_FillRectangle
 10878 ;; This function is called by:
 10879 ;;		_mode1
 10880 ;;		_mode2
 10881 ;; This function uses a non-reentrant model
 10882 ;;
 10883                           
 10884                           	psect	text50
 10885  011B66                     __ptext50:
 10886                           	opt stack 0
 10887  011B66                     _Console_Render:
 10888                           	opt stack 18
 10889                           
 10890                           ;Console.c: 379: Colour Temp;
 10891                           ;Console.c: 380: if (change)
 10892                           
 10893                           ; BSR set to: 3
 10894                           ;incstack = 0
 10895  011B66  0100               	movlb	0	; () banked
 10896  011B68  51FF               	movf	_change& (0+255),w,b
 10897  011B6A  B4D8               	btfsc	status,2,c
 10898  011B6C  0012               	return	
 10899                           
 10900                           ; BSR set to: 0
 10901                           ;Console.c: 381: {
 10902                           ;Console.c: 382: UINT8 x, y, temp;
 10903                           ;Console.c: 383: Point lCursor = {6,6};
 10904  011B6E  C3EC  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
 10905  011B72  C3ED  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 10906  011B76  C3EE  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 10907  011B7A  C3EF  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 10908                           
 10909                           ; BSR set to: 0
 10910                           ;Console.c: 385: if (clearall)
 10911  011B7E  0100               	movlb	0	; () banked
 10912  011B80  5196               	movf	_clearall& (0+255),w,b
 10913  011B82  B4D8               	btfsc	status,2,c
 10914  011B84  D005               	goto	l1056
 10915                           
 10916                           ; BSR set to: 0
 10917                           ;Console.c: 386: {
 10918                           ;Console.c: 389: temp = lBufferY;
 10919  011B86  C094  F0DF         	movff	_lBufferY,Console_Render@temp
 10920                           
 10921                           ; BSR set to: 0
 10922                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 10923  011B8A  0E0F               	movlw	15
 10924  011B8C  0100               	movlb	0	; () banked
 10925  011B8E  6F94               	movwf	_lBufferY& (0+255),b
 10926  011B90                     l1056:
 10927                           
 10928                           ; BSR set to: 0
 10929                           ;Console.c: 391: }
 10930                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 10931  011B90  0E00               	movlw	0
 10932  011B92  0100               	movlb	0	; () banked
 10933  011B94  6FE5               	movwf	Console_Render@y& (0+255),b
 10934  011B96  D0DF               	goto	l1057
 10935  011B98                     
 10936                           ; BSR set to: 0
 10937                           ;Console.c: 394: {
 10938                           ;Console.c: 395: gForecolour = lCBuffer[y];
 10939                           
 10940                           ; BSR set to: 0
 10941  011B98  0100               	movlb	0	; () banked
 10942  011B9A  51E5               	movf	Console_Render@y& (0+255),w,b
 10943  011B9C  0D02               	mullw	2
 10944  011B9E  0E00               	movlw	low _lCBuffer
 10945  011BA0  24F3               	addwf	prodl,w,c
 10946  011BA2  6ED9               	movwf	fsr2l,c
 10947  011BA4  0E03               	movlw	high _lCBuffer
 10948  011BA6  20F4               	addwfc	prodh,w,c
 10949  011BA8  6EDA               	movwf	fsr2h,c
 10950  011BAA  CFDE F0FD          	movff	postinc2,_gForecolour
 10951  011BAE  CFDD F0FE          	movff	postdec2,_gForecolour+1
 10952                           
 10953                           ; BSR set to: 0
 10954                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 10955  011BB2  0E00               	movlw	0
 10956  011BB4  0100               	movlb	0	; () banked
 10957  011BB6  6FE4               	movwf	Console_Render@x& (0+255),b
 10958  011BB8                     l13803:
 10959                           
 10960                           ; BSR set to: 0
 10961  011BB8  0E13               	movlw	19
 10962  011BBA  0100               	movlb	0	; () banked
 10963  011BBC  65E4               	cpfsgt	Console_Render@x& (0+255),b
 10964  011BBE  D001               	goto	l1059
 10965  011BC0  D0BE               	goto	u10520
 10966  011BC2                     l1059:
 10967                           
 10968                           ; BSR set to: 0
 10969                           ;Console.c: 397: {
 10970                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 10971                           
 10972                           ; BSR set to: 0
 10973  011BC2  0100               	movlb	0	; () banked
 10974  011BC4  51E5               	movf	Console_Render@y& (0+255),w,b
 10975  011BC6  0D14               	mullw	20
 10976  011BC8  0EAA               	movlw	low _lBuffer
 10977  011BCA  0100               	movlb	0	; () banked
 10978  011BCC  6FDD               	movwf	??_Console_Render& (0+255),b
 10979  011BCE  0E04               	movlw	high _lBuffer
 10980  011BD0  0100               	movlb	0	; () banked
 10981  011BD2  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 10982  011BD4  50F3               	movf	prodl,w,c
 10983  011BD6  0100               	movlb	0	; () banked
 10984  011BD8  27DD               	addwf	??_Console_Render& (0+255),f,b
 10985  011BDA  50F4               	movf	prodh,w,c
 10986  011BDC  0100               	movlb	0	; () banked
 10987  011BDE  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 10988  011BE0  0100               	movlb	0	; () banked
 10989  011BE2  51E4               	movf	Console_Render@x& (0+255),w,b
 10990  011BE4  0D01               	mullw	1
 10991  011BE6  50F3               	movf	prodl,w,c
 10992  011BE8  0100               	movlb	0	; () banked
 10993  011BEA  25DD               	addwf	??_Console_Render& (0+255),w,b
 10994  011BEC  6ED9               	movwf	fsr2l,c
 10995  011BEE  50F4               	movf	prodh,w,c
 10996  011BF0  0100               	movlb	0	; () banked
 10997  011BF2  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 10998  011BF4  6EDA               	movwf	fsr2h,c
 10999  011BF6  AEDF               	btfss	indf2,7,c
 11000  011BF8  D09A               	goto	l1063
 11001                           
 11002                           ; BSR set to: 0
 11003                           ;Console.c: 399: {
 11004                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 11005  011BFA  0100               	movlb	0	; () banked
 11006  011BFC  51E5               	movf	Console_Render@y& (0+255),w,b
 11007  011BFE  0D14               	mullw	20
 11008  011C00  0EAA               	movlw	low _lBuffer
 11009  011C02  0100               	movlb	0	; () banked
 11010  011C04  6FDD               	movwf	??_Console_Render& (0+255),b
 11011  011C06  0E04               	movlw	high _lBuffer
 11012  011C08  0100               	movlb	0	; () banked
 11013  011C0A  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 11014  011C0C  50F3               	movf	prodl,w,c
 11015  011C0E  0100               	movlb	0	; () banked
 11016  011C10  27DD               	addwf	??_Console_Render& (0+255),f,b
 11017  011C12  50F4               	movf	prodh,w,c
 11018  011C14  0100               	movlb	0	; () banked
 11019  011C16  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11020  011C18  0100               	movlb	0	; () banked
 11021  011C1A  51E4               	movf	Console_Render@x& (0+255),w,b
 11022  011C1C  0D01               	mullw	1
 11023  011C1E  50F3               	movf	prodl,w,c
 11024  011C20  0100               	movlb	0	; () banked
 11025  011C22  25DD               	addwf	??_Console_Render& (0+255),w,b
 11026  011C24  6ED9               	movwf	fsr2l,c
 11027  011C26  50F4               	movf	prodh,w,c
 11028  011C28  0100               	movlb	0	; () banked
 11029  011C2A  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11030  011C2C  6EDA               	movwf	fsr2h,c
 11031  011C2E  0E7F               	movlw	127
 11032  011C30  16DF               	andwf	indf2,f,c
 11033                           
 11034                           ;Console.c: 401: if (lBuffer[y][x])
 11035  011C32  0100               	movlb	0	; () banked
 11036  011C34  51E5               	movf	Console_Render@y& (0+255),w,b
 11037  011C36  0D14               	mullw	20
 11038  011C38  0EAA               	movlw	low _lBuffer
 11039  011C3A  0100               	movlb	0	; () banked
 11040  011C3C  6FDD               	movwf	??_Console_Render& (0+255),b
 11041  011C3E  0E04               	movlw	high _lBuffer
 11042  011C40  0100               	movlb	0	; () banked
 11043  011C42  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 11044  011C44  50F3               	movf	prodl,w,c
 11045  011C46  0100               	movlb	0	; () banked
 11046  011C48  27DD               	addwf	??_Console_Render& (0+255),f,b
 11047  011C4A  50F4               	movf	prodh,w,c
 11048  011C4C  0100               	movlb	0	; () banked
 11049  011C4E  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11050  011C50  0100               	movlb	0	; () banked
 11051  011C52  51E4               	movf	Console_Render@x& (0+255),w,b
 11052  011C54  0D01               	mullw	1
 11053  011C56  50F3               	movf	prodl,w,c
 11054  011C58  0100               	movlb	0	; () banked
 11055  011C5A  25DD               	addwf	??_Console_Render& (0+255),w,b
 11056  011C5C  6ED9               	movwf	fsr2l,c
 11057  011C5E  50F4               	movf	prodh,w,c
 11058  011C60  0100               	movlb	0	; () banked
 11059  011C62  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11060  011C64  6EDA               	movwf	fsr2h,c
 11061  011C66  50DF               	movf	indf2,w,c
 11062  011C68  B4D8               	btfsc	status,2,c
 11063  011C6A  D04A               	goto	l1062
 11064                           
 11065                           ; BSR set to: 0
 11066                           ;Console.c: 402: {
 11067                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 11068  011C6C  C089  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
 11069  011C70  C08A  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 11070  011C74  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11071  011C78  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11072  011C7C  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11073  011C80  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11074  011C84  C3F4  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 11075  011C88  C3F5  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11076  011C8C  C3F6  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11077  011C90  C3F7  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11078  011C94  ECF7  F0A6         	call	_LCD_FillRectangle	;wreg free
 11079                           
 11080                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 11081  011C98  0100               	movlb	0	; () banked
 11082  011C9A  51E5               	movf	Console_Render@y& (0+255),w,b
 11083  011C9C  0D14               	mullw	20
 11084  011C9E  0EAA               	movlw	low _lBuffer
 11085  011CA0  0100               	movlb	0	; () banked
 11086  011CA2  6FDD               	movwf	??_Console_Render& (0+255),b
 11087  011CA4  0E04               	movlw	high _lBuffer
 11088  011CA6  0100               	movlb	0	; () banked
 11089  011CA8  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
 11090  011CAA  50F3               	movf	prodl,w,c
 11091  011CAC  0100               	movlb	0	; () banked
 11092  011CAE  27DD               	addwf	??_Console_Render& (0+255),f,b
 11093  011CB0  50F4               	movf	prodh,w,c
 11094  011CB2  0100               	movlb	0	; () banked
 11095  011CB4  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
 11096  011CB6  0100               	movlb	0	; () banked
 11097  011CB8  51E4               	movf	Console_Render@x& (0+255),w,b
 11098  011CBA  0D01               	mullw	1
 11099  011CBC  50F3               	movf	prodl,w,c
 11100  011CBE  0100               	movlb	0	; () banked
 11101  011CC0  25DD               	addwf	??_Console_Render& (0+255),w,b
 11102  011CC2  6ED9               	movwf	fsr2l,c
 11103  011CC4  50F4               	movf	prodh,w,c
 11104  011CC6  0100               	movlb	0	; () banked
 11105  011CC8  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
 11106  011CCA  6EDA               	movwf	fsr2h,c
 11107  011CCC  50DF               	movf	indf2,w,c
 11108  011CCE  EC5F  F09D         	call	_Console_MakeField
 11109  011CD2  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
 11110  011CD6  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 11111  011CDA  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 11112  011CDE  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 11113  011CE2  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 11114  011CE6  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 11115  011CEA  C3F4  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
 11116  011CEE  C3F5  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 11117  011CF2  C3F6  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 11118  011CF6  C3F7  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 11119  011CFA  ECAE  F0A2         	call	_LCD_DrawField	;wreg free
 11120                           
 11121                           ;Console.c: 405: }
 11122  011CFE  D017               	goto	l1063
 11123  011D00                     l1062:
 11124                           
 11125                           ;Console.c: 406: else
 11126                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 11127  011D00  0E00               	movlw	0
 11128  011D02  0100               	movlb	0	; () banked
 11129  011D04  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 11130  011D06  0E00               	movlw	0
 11131  011D08  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 11132  011D0A  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 11133  011D0E  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 11134  011D12  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 11135  011D16  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 11136  011D1A  C3F4  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 11137  011D1E  C3F5  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 11138  011D22  C3F6  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 11139  011D26  C3F7  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 11140  011D2A  ECF7  F0A6         	call	_LCD_FillRectangle	;wreg free
 11141  011D2E                     l1063:
 11142                           
 11143                           ;Console.c: 408: }
 11144                           ;Console.c: 409: lCursor.x += (5 + 1);
 11145  011D2E  0E06               	movlw	6
 11146  011D30  0100               	movlb	0	; () banked
 11147  011D32  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 11148  011D34  0E00               	movlw	0
 11149  011D36  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 11150                           
 11151                           ; BSR set to: 0
 11152  011D38  0100               	movlb	0	; () banked
 11153  011D3A  2BE4               	incf	Console_Render@x& (0+255),f,b
 11154  011D3C  D73D               	goto	l13803
 11155  011D3E                     u10520:
 11156                           
 11157                           ; BSR set to: 0
 11158                           ;Console.c: 410: }
 11159                           ;Console.c: 411: lCursor.y += (7 + 1);
 11160                           
 11161                           ; BSR set to: 0
 11162  011D3E  0E08               	movlw	8
 11163  011D40  0100               	movlb	0	; () banked
 11164  011D42  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 11165  011D44  0E00               	movlw	0
 11166  011D46  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 11167                           
 11168                           ; BSR set to: 0
 11169                           ;Console.c: 412: lCursor.x = 6;
 11170  011D48  0E00               	movlw	0
 11171  011D4A  0100               	movlb	0	; () banked
 11172  011D4C  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 11173  011D4E  0E06               	movlw	6
 11174  011D50  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 11175                           
 11176                           ; BSR set to: 0
 11177  011D52  0100               	movlb	0	; () banked
 11178  011D54  2BE5               	incf	Console_Render@y& (0+255),f,b
 11179  011D56                     l1057:
 11180                           
 11181                           ; BSR set to: 0
 11182                           
 11183                           ; BSR set to: 0
 11184  011D56  0100               	movlb	0	; () banked
 11185  011D58  51E5               	movf	Console_Render@y& (0+255),w,b
 11186  011D5A  0100               	movlb	0	; () banked
 11187  011D5C  5D94               	subwf	_lBufferY& (0+255),w,b
 11188  011D5E  B0D8               	btfsc	status,0,c
 11189  011D60  D71B               	goto	l1058
 11190                           
 11191                           ; BSR set to: 0
 11192                           ;Console.c: 413: }
 11193                           ;Console.c: 415: if (clearall)
 11194                           
 11195                           ; BSR set to: 0
 11196  011D62  0100               	movlb	0	; () banked
 11197  011D64  5196               	movf	_clearall& (0+255),w,b
 11198  011D66  B4D8               	btfsc	status,2,c
 11199  011D68  0012               	return	
 11200                           
 11201                           ; BSR set to: 0
 11202                           ;Console.c: 416: {
 11203                           ;Console.c: 417: clearall = 0;
 11204  011D6A  0E00               	movlw	0
 11205  011D6C  0100               	movlb	0	; () banked
 11206  011D6E  6F96               	movwf	_clearall& (0+255),b
 11207                           
 11208                           ; BSR set to: 0
 11209                           ;Console.c: 418: lBufferY = temp;
 11210  011D70  C0DF  F094         	movff	Console_Render@temp,_lBufferY
 11211                           
 11212                           ; BSR set to: 0
 11213  011D74  0012               	return	
 11214  011D76                     __end_of_Console_Render:
 11215                           	opt stack 0
 11216                           tosu	equ	0xFFF
 11217                           tosh	equ	0xFFE
 11218                           tosl	equ	0xFFD
 11219                           pclath	equ	0xFFA
 11220                           tblptru	equ	0xFF8
 11221                           tblptrh	equ	0xFF7
 11222                           tblptrl	equ	0xFF6
 11223                           tablat	equ	0xFF5
 11224                           prodh	equ	0xFF4
 11225                           prodl	equ	0xFF3
 11226                           intcon	equ	0xFF2
 11227                           postinc0	equ	0xFEE
 11228                           wreg	equ	0xFE8
 11229                           indf1	equ	0xFE7
 11230                           postdec1	equ	0xFE5
 11231                           fsr1h	equ	0xFE2
 11232                           fsr1l	equ	0xFE1
 11233                           indf2	equ	0xFDF
 11234                           postinc2	equ	0xFDE
 11235                           postdec2	equ	0xFDD
 11236                           plusw2	equ	0xFDB
 11237                           fsr2h	equ	0xFDA
 11238                           fsr2l	equ	0xFD9
 11239                           status	equ	0xFD8
 11240                           
 11241 ;; *************** function _LCD_FillRectangle *****************
 11242 ;; Defined at:
 11243 ;;		line 318 in file "Library/LCD.c"
 11244 ;; Parameters:    Size  Location     Type
 11245 ;;  pColour         2    9[BANK0 ] unsigned short 
 11246 ;;  pPoint          4   11[BANK0 ] struct Point
 11247 ;;  pSize           4   15[BANK0 ] struct Point
 11248 ;; Auto vars:     Size  Location     Type
 11249 ;;  j               1   22[BANK0 ] unsigned char 
 11250 ;;  i               1   21[BANK0 ] unsigned char 
 11251 ;; Return value:  Size  Location     Type
 11252 ;;                  1    wreg      void 
 11253 ;; Registers used:
 11254 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11255 ;; Tracked objects:
 11256 ;;		On entry : 0/0
 11257 ;;		On exit  : 0/0
 11258 ;;		Unchanged: 0/0
 11259 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11260 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11261 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11262 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11263 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11264 ;;Total ram usage:       14 bytes
 11265 ;; Hardware stack levels used:    1
 11266 ;; Hardware stack levels required when called:   10
 11267 ;; This function calls:
 11268 ;;		_LCD_Word_Write
 11269 ;;		_Set_Addr_Window
 11270 ;; This function is called by:
 11271 ;;		_Console_Render
 11272 ;;		_Console_ClearLine
 11273 ;; This function uses a non-reentrant model
 11274 ;;
 11275                           
 11276                           	psect	text51
 11277  014DEE                     __ptext51:
 11278                           	opt stack 0
 11279  014DEE                     _LCD_FillRectangle:
 11280                           	opt stack 18
 11281                           
 11282                           ;LCD.c: 320: UINT8 i = 0x00;
 11283                           
 11284                           ; BSR set to: 0
 11285                           ;incstack = 0
 11286  014DEE  0E00               	movlw	0
 11287  014DF0  0100               	movlb	0	; () banked
 11288  014DF2  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 11289                           
 11290                           ;LCD.c: 321: UINT8 j = 0x00;
 11291  014DF4  0E00               	movlw	0
 11292  014DF6  0100               	movlb	0	; () banked
 11293  014DF8  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 11294                           
 11295                           ; BSR set to: 0
 11296                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 11297  014DFA  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 11298  014DFE  0100               	movlb	0	; () banked
 11299  014E00  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11300  014E02  0100               	movlb	0	; () banked
 11301  014E04  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 11302  014E06  0100               	movlb	0	; () banked
 11303  014E08  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 11304  014E0A  0100               	movlb	0	; () banked
 11305  014E0C  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 11306  014E0E  0100               	movlb	0	; () banked
 11307  014E10  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 11308  014E12  0100               	movlb	0	; () banked
 11309  014E14  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 11310  014E16  0100               	movlb	0	; () banked
 11311  014E18  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 11312  014E1A  0100               	movlb	0	; () banked
 11313  014E1C  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 11314  014E1E  0100               	movlb	0	; () banked
 11315  014E20  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 11316  014E22  0100               	movlb	0	; () banked
 11317  014E24  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 11318  014E26  0100               	movlb	0	; () banked
 11319  014E28  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 11320  014E2A  EC0B  F0A1         	call	_Set_Addr_Window
 11321                           
 11322                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 11323  014E2E  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 11324  014E32                     l13085:
 11325  014E32  0100               	movlb	0	; () banked
 11326  014E34  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 11327  014E36  0100               	movlb	0	; () banked
 11328  014E38  B4D8               	btfsc	status,2,c
 11329  014E3A  0012               	return	
 11330                           
 11331                           ; BSR set to: 0
 11332                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 11333                           
 11334                           ; BSR set to: 0
 11335  014E3C  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 11336  014E40                     l13089:
 11337                           
 11338                           ; BSR set to: 0
 11339  014E40  0100               	movlb	0	; () banked
 11340  014E42  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 11341  014E44  0100               	movlb	0	; () banked
 11342  014E46  B4D8               	btfsc	status,2,c
 11343  014E48  D009               	goto	u9500
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;LCD.c: 333: LCD_Word_Write(pColour);
 11347                           
 11348                           ; BSR set to: 0
 11349                           
 11350                           ; BSR set to: 0
 11351  014E4A  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 11352  014E4E  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 11353  014E52  EC3F  F0AF         	call	_LCD_Word_Write	;wreg free
 11354  014E56  0100               	movlb	0	; () banked
 11355  014E58  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 11356  014E5A  D7F2               	goto	l13089
 11357  014E5C                     u9500:
 11358                           
 11359                           ; BSR set to: 0
 11360                           
 11361                           ; BSR set to: 0
 11362  014E5C  0100               	movlb	0	; () banked
 11363  014E5E  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 11364  014E60  D7E8               	goto	l13085
 11365  014E62                     __end_of_LCD_FillRectangle:
 11366                           	opt stack 0
 11367                           tosu	equ	0xFFF
 11368                           tosh	equ	0xFFE
 11369                           tosl	equ	0xFFD
 11370                           pclath	equ	0xFFA
 11371                           tblptru	equ	0xFF8
 11372                           tblptrh	equ	0xFF7
 11373                           tblptrl	equ	0xFF6
 11374                           tablat	equ	0xFF5
 11375                           prodh	equ	0xFF4
 11376                           prodl	equ	0xFF3
 11377                           intcon	equ	0xFF2
 11378                           postinc0	equ	0xFEE
 11379                           wreg	equ	0xFE8
 11380                           indf1	equ	0xFE7
 11381                           postdec1	equ	0xFE5
 11382                           fsr1h	equ	0xFE2
 11383                           fsr1l	equ	0xFE1
 11384                           indf2	equ	0xFDF
 11385                           postinc2	equ	0xFDE
 11386                           postdec2	equ	0xFDD
 11387                           plusw2	equ	0xFDB
 11388                           fsr2h	equ	0xFDA
 11389                           fsr2l	equ	0xFD9
 11390                           status	equ	0xFD8
 11391                           
 11392 ;; *************** function _LCD_DrawField *****************
 11393 ;; Defined at:
 11394 ;;		line 393 in file "Library/LCD.c"
 11395 ;; Parameters:    Size  Location     Type
 11396 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 11397 ;;		 -> Console_MakeField@Fill(70), 
 11398 ;;  pPoint          4   20[BANK0 ] struct Point
 11399 ;;  pSize           4   24[BANK0 ] struct Point
 11400 ;; Auto vars:     Size  Location     Type
 11401 ;;  count           2   30[BANK0 ] unsigned short 
 11402 ;;  i               1   34[BANK0 ] unsigned char 
 11403 ;;  ymax            1   33[BANK0 ] unsigned char 
 11404 ;;  xmax            1   32[BANK0 ] unsigned char 
 11405 ;; Return value:  Size  Location     Type
 11406 ;;                  1    wreg      void 
 11407 ;; Registers used:
 11408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11409 ;; Tracked objects:
 11410 ;;		On entry : 0/0
 11411 ;;		On exit  : 0/0
 11412 ;;		Unchanged: 0/0
 11413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11414 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11415 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11416 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11417 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11418 ;;Total ram usage:       17 bytes
 11419 ;; Hardware stack levels used:    1
 11420 ;; Hardware stack levels required when called:   10
 11421 ;; This function calls:
 11422 ;;		_LCD_Word_Write
 11423 ;;		_Set_Addr_Window
 11424 ;;		___wmul
 11425 ;; This function is called by:
 11426 ;;		_Console_Render
 11427 ;; This function uses a non-reentrant model
 11428 ;;
 11429                           
 11430                           	psect	text52
 11431  01455C                     __ptext52:
 11432                           	opt stack 0
 11433  01455C                     _LCD_DrawField:
 11434                           	opt stack 18
 11435                           
 11436                           ;LCD.c: 396: UINT8 i = 0x00;
 11437                           
 11438                           ; BSR set to: 0
 11439                           ;incstack = 0
 11440  01455C  0E00               	movlw	0
 11441  01455E  0100               	movlb	0	; () banked
 11442  014560  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 11443                           
 11444                           ; BSR set to: 0
 11445                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 11446  014562  0100               	movlb	0	; () banked
 11447  014564  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11448  014566  0100               	movlb	0	; () banked
 11449  014568  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 11450  01456A  0100               	movlb	0	; () banked
 11451  01456C  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 11452                           
 11453                           ; BSR set to: 0
 11454                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 11455  01456E  0100               	movlb	0	; () banked
 11456  014570  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 11457  014572  0100               	movlb	0	; () banked
 11458  014574  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 11459  014576  0100               	movlb	0	; () banked
 11460  014578  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 11461                           
 11462                           ; BSR set to: 0
 11463                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 11464  01457A  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 11465  01457E  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 11466  014582  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 11467  014586  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 11468  01458A  ECAE  F0AD         	call	___wmul	;wreg free
 11469  01458E  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 11470  014592  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 11471                           
 11472                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 11473  014596  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 11474  01459A  0100               	movlb	0	; () banked
 11475  01459C  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 11476  01459E  0100               	movlb	0	; () banked
 11477  0145A0  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 11478  0145A2  0100               	movlb	0	; () banked
 11479  0145A4  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 11480  0145A6  0100               	movlb	0	; () banked
 11481  0145A8  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 11482  0145AA  0100               	movlb	0	; () banked
 11483  0145AC  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 11484  0145AE  EC0B  F0A1         	call	_Set_Addr_Window
 11485                           
 11486                           ;LCD.c: 403: for(i = 0; i < count; i++)
 11487  0145B2  0E00               	movlw	0
 11488  0145B4  0100               	movlb	0	; () banked
 11489  0145B6  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 11490  0145B8  D013               	goto	l183
 11491  0145BA                     
 11492                           ; BSR set to: 0
 11493                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 11494                           
 11495                           ; BSR set to: 0
 11496  0145BA  0100               	movlb	0	; () banked
 11497  0145BC  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 11498  0145BE  0D02               	mullw	2
 11499  0145C0  50F3               	movf	prodl,w,c
 11500  0145C2  0100               	movlb	0	; () banked
 11501  0145C4  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 11502  0145C6  6ED9               	movwf	fsr2l,c
 11503  0145C8  50F4               	movf	prodh,w,c
 11504  0145CA  0100               	movlb	0	; () banked
 11505  0145CC  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 11506  0145CE  6EDA               	movwf	fsr2h,c
 11507  0145D0  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 11508  0145D4  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 11509  0145D8  EC3F  F0AF         	call	_LCD_Word_Write	;wreg free
 11510  0145DC  0100               	movlb	0	; () banked
 11511  0145DE  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 11512  0145E0                     l183:
 11513                           
 11514                           ; BSR set to: 0
 11515                           
 11516                           ; BSR set to: 0
 11517  0145E0  0100               	movlb	0	; () banked
 11518  0145E2  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 11519  0145E4  0100               	movlb	0	; () banked
 11520  0145E6  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 11521  0145E8  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 11522  0145EA  0100               	movlb	0	; () banked
 11523  0145EC  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 11524  0145EE  0100               	movlb	0	; () banked
 11525  0145F0  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 11526  0145F2  0100               	movlb	0	; () banked
 11527  0145F4  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 11528  0145F6  0100               	movlb	0	; () banked
 11529  0145F8  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 11530  0145FA  B0D8               	btfsc	status,0,c
 11531  0145FC  0012               	return	
 11532  0145FE  D7DD               	goto	l184
 11533  014600                     __end_of_LCD_DrawField:
 11534                           	opt stack 0
 11535                           tosu	equ	0xFFF
 11536                           tosh	equ	0xFFE
 11537                           tosl	equ	0xFFD
 11538                           pclath	equ	0xFFA
 11539                           tblptru	equ	0xFF8
 11540                           tblptrh	equ	0xFF7
 11541                           tblptrl	equ	0xFF6
 11542                           tablat	equ	0xFF5
 11543                           prodh	equ	0xFF4
 11544                           prodl	equ	0xFF3
 11545                           intcon	equ	0xFF2
 11546                           postinc0	equ	0xFEE
 11547                           wreg	equ	0xFE8
 11548                           indf1	equ	0xFE7
 11549                           postdec1	equ	0xFE5
 11550                           fsr1h	equ	0xFE2
 11551                           fsr1l	equ	0xFE1
 11552                           indf2	equ	0xFDF
 11553                           postinc2	equ	0xFDE
 11554                           postdec2	equ	0xFDD
 11555                           plusw2	equ	0xFDB
 11556                           fsr2h	equ	0xFDA
 11557                           fsr2l	equ	0xFD9
 11558                           status	equ	0xFD8
 11559                           
 11560 ;; *************** function ___wmul *****************
 11561 ;; Defined at:
 11562 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 11563 ;; Parameters:    Size  Location     Type
 11564 ;;  multiplier      2    0[BANK0 ] unsigned int 
 11565 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 11566 ;; Auto vars:     Size  Location     Type
 11567 ;;  product         2    4[BANK0 ] unsigned int 
 11568 ;; Return value:  Size  Location     Type
 11569 ;;                  2    0[BANK0 ] unsigned int 
 11570 ;; Registers used:
 11571 ;;		wreg, status,2, status,0, prodl, prodh
 11572 ;; Tracked objects:
 11573 ;;		On entry : 0/0
 11574 ;;		On exit  : 0/0
 11575 ;;		Unchanged: 0/0
 11576 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11577 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11578 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11580 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11581 ;;Total ram usage:        6 bytes
 11582 ;; Hardware stack levels used:    1
 11583 ;; Hardware stack levels required when called:    7
 11584 ;; This function calls:
 11585 ;;		Nothing
 11586 ;; This function is called by:
 11587 ;;		_LCD_DrawField
 11588 ;; This function uses a non-reentrant model
 11589 ;;
 11590                           
 11591                           	psect	text53
 11592  015B5C                     __ptext53:
 11593                           	opt stack 0
 11594  015B5C                     ___wmul:
 11595                           	opt stack 20
 11596                           
 11597                           ; BSR set to: 0
 11598                           ;incstack = 0
 11599  015B5C  0100               	movlb	0	; () banked
 11600  015B5E  51BA               	movf	___wmul@multiplier& (0+255),w,b
 11601  015B60  0100               	movlb	0	; () banked
 11602  015B62  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 11603  015B64  CFF3 F0BE          	movff	prodl,___wmul@product
 11604  015B68  CFF4 F0BF          	movff	prodh,___wmul@product+1
 11605  015B6C  0100               	movlb	0	; () banked
 11606  015B6E  51BA               	movf	___wmul@multiplier& (0+255),w,b
 11607  015B70  0100               	movlb	0	; () banked
 11608  015B72  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 11609  015B74  50F3               	movf	prodl,w,c
 11610  015B76  0100               	movlb	0	; () banked
 11611  015B78  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 11612  015B7A  0100               	movlb	0	; () banked
 11613  015B7C  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 11614  015B7E  0100               	movlb	0	; () banked
 11615  015B80  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 11616  015B82  50F3               	movf	prodl,w,c
 11617  015B84  0100               	movlb	0	; () banked
 11618  015B86  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 11619                           
 11620                           ; BSR set to: 0
 11621  015B88  C0BE  F0BA         	movff	___wmul@product,?___wmul
 11622  015B8C  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 11623  015B90  0012               	return	
 11624  015B92                     __end_of___wmul:
 11625                           	opt stack 0
 11626                           tosu	equ	0xFFF
 11627                           tosh	equ	0xFFE
 11628                           tosl	equ	0xFFD
 11629                           pclath	equ	0xFFA
 11630                           tblptru	equ	0xFF8
 11631                           tblptrh	equ	0xFF7
 11632                           tblptrl	equ	0xFF6
 11633                           tablat	equ	0xFF5
 11634                           prodh	equ	0xFF4
 11635                           prodl	equ	0xFF3
 11636                           intcon	equ	0xFF2
 11637                           postinc0	equ	0xFEE
 11638                           wreg	equ	0xFE8
 11639                           indf1	equ	0xFE7
 11640                           postdec1	equ	0xFE5
 11641                           fsr1h	equ	0xFE2
 11642                           fsr1l	equ	0xFE1
 11643                           indf2	equ	0xFDF
 11644                           postinc2	equ	0xFDE
 11645                           postdec2	equ	0xFDD
 11646                           plusw2	equ	0xFDB
 11647                           fsr2h	equ	0xFDA
 11648                           fsr2l	equ	0xFD9
 11649                           status	equ	0xFD8
 11650                           
 11651 ;; *************** function _Console_MakeField *****************
 11652 ;; Defined at:
 11653 ;;		line 435 in file "Library/Console.c"
 11654 ;; Parameters:    Size  Location     Type
 11655 ;;  pInput          1    wreg     unsigned char 
 11656 ;; Auto vars:     Size  Location     Type
 11657 ;;  pInput          1   11[BANK0 ] unsigned char 
 11658 ;;  y               1   17[BANK0 ] unsigned char 
 11659 ;;  x               1   16[BANK0 ] unsigned char 
 11660 ;;  Column          2   12[BANK0 ] PTR struct Byte
 11661 ;;		 -> Font5x7(480), 
 11662 ;;  Index           2    9[BANK0 ] unsigned short 
 11663 ;; Return value:  Size  Location     Type
 11664 ;;                  2    5[BANK0 ] PTR unsigned short 
 11665 ;; Registers used:
 11666 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11667 ;; Tracked objects:
 11668 ;;		On entry : 0/0
 11669 ;;		On exit  : 0/0
 11670 ;;		Unchanged: 0/0
 11671 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11672 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11676 ;;Total ram usage:       13 bytes
 11677 ;; Hardware stack levels used:    1
 11678 ;; Hardware stack levels required when called:    8
 11679 ;; This function calls:
 11680 ;;		_Byte_GetBit
 11681 ;; This function is called by:
 11682 ;;		_Console_Render
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           	psect	text54
 11687  013ABE                     __ptext54:
 11688                           	opt stack 0
 11689  013ABE                     _Console_MakeField:
 11690                           	opt stack 20
 11691                           
 11692                           ; BSR set to: 0
 11693                           ;incstack = 0
 11694                           ;Console_MakeField@pInput stored from wreg
 11695  013ABE  0100               	movlb	0	; () banked
 11696  013AC0  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 11697                           
 11698                           ;Console.c: 437: static Colour Fill[7][5];
 11699                           ;Console.c: 438: pInput -= 32;
 11700  013AC2  0E20               	movlw	32
 11701  013AC4  0100               	movlb	0	; () banked
 11702  013AC6  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 11706  013AC8  0100               	movlb	0	; () banked
 11707  013ACA  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 11708  013ACC  0D05               	mullw	5
 11709  013ACE  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 11710  013AD2  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 11711                           
 11712                           ; BSR set to: 0
 11713                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 11714  013AD6  0ED1               	movlw	low _Font5x7
 11715  013AD8  0100               	movlb	0	; () banked
 11716  013ADA  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 11717  013ADC  0100               	movlb	0	; () banked
 11718  013ADE  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 11719  013AE0  0EFD               	movlw	high _Font5x7
 11720  013AE2  0100               	movlb	0	; () banked
 11721  013AE4  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 11722  013AE6  0100               	movlb	0	; () banked
 11723  013AE8  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 11724                           
 11725                           ; BSR set to: 0
 11726                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 11727  013AEA  0E00               	movlw	0
 11728  013AEC  0100               	movlb	0	; () banked
 11729  013AEE  6FCA               	movwf	Console_MakeField@x& (0+255),b
 11730  013AF0                     l13179:
 11731                           
 11732                           ; BSR set to: 0
 11733  013AF0  0E04               	movlw	4
 11734  013AF2  0100               	movlb	0	; () banked
 11735  013AF4  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 11736  013AF6  D001               	goto	l1077
 11737  013AF8  D043               	goto	u9590
 11738  013AFA                     l1077:
 11739                           
 11740                           ; BSR set to: 0
 11741                           ;Console.c: 444: {
 11742                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 11743                           
 11744                           ; BSR set to: 0
 11745  013AFA  0E00               	movlw	0
 11746  013AFC  0100               	movlb	0	; () banked
 11747  013AFE  6FCB               	movwf	Console_MakeField@y& (0+255),b
 11748  013B00                     l13185:
 11749                           
 11750                           ; BSR set to: 0
 11751  013B00  0E06               	movlw	6
 11752  013B02  0100               	movlb	0	; () banked
 11753  013B04  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 11754  013B06  D001               	goto	l1079
 11755  013B08  D035               	goto	u9580
 11756  013B0A                     l1079:
 11757                           
 11758                           ; BSR set to: 0
 11759                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 11760                           
 11761                           ; BSR set to: 0
 11762  013B0A  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 11763  013B0E  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 11764  013B12  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 11765  013B16  ECE4  F0AD         	call	_Byte_GetBit	;wreg free
 11766  013B1A  0900               	iorlw	0
 11767  013B1C  A4D8               	btfss	status,2,c
 11768  013B1E  D005               	goto	l1082
 11769  013B20  C089  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 11770  013B24  C08A  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 11771  013B28  D004               	goto	l1084
 11772  013B2A                     l1082:
 11773  013B2A  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 11774  013B2E  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 11775  013B32                     l1084:
 11776  013B32  0100               	movlb	0	; () banked
 11777  013B34  51CB               	movf	Console_MakeField@y& (0+255),w,b
 11778  013B36  0D0A               	mullw	10
 11779  013B38  0E64               	movlw	low Console_MakeField@Fill
 11780  013B3A  0100               	movlb	0	; () banked
 11781  013B3C  6FC1               	movwf	??_Console_MakeField& (0+255),b
 11782  013B3E  0E04               	movlw	high Console_MakeField@Fill
 11783  013B40  0100               	movlb	0	; () banked
 11784  013B42  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 11785  013B44  50F3               	movf	prodl,w,c
 11786  013B46  0100               	movlb	0	; () banked
 11787  013B48  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 11788  013B4A  50F4               	movf	prodh,w,c
 11789  013B4C  0100               	movlb	0	; () banked
 11790  013B4E  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 11791  013B50  0100               	movlb	0	; () banked
 11792  013B52  51CA               	movf	Console_MakeField@x& (0+255),w,b
 11793  013B54  0D02               	mullw	2
 11794  013B56  50F3               	movf	prodl,w,c
 11795  013B58  0100               	movlb	0	; () banked
 11796  013B5A  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 11797  013B5C  6ED9               	movwf	fsr2l,c
 11798  013B5E  50F4               	movf	prodh,w,c
 11799  013B60  0100               	movlb	0	; () banked
 11800  013B62  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 11801  013B64  6EDA               	movwf	fsr2h,c
 11802  013B66  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 11803  013B6A  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 11804                           
 11805                           ; BSR set to: 0
 11806  013B6E  0100               	movlb	0	; () banked
 11807  013B70  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 11808  013B72  D7C6               	goto	l13185
 11809  013B74                     u9580:
 11810                           
 11811                           ; BSR set to: 0
 11812                           ;Console.c: 447: Column += 1;
 11813                           
 11814                           ; BSR set to: 0
 11815  013B74  0100               	movlb	0	; () banked
 11816  013B76  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 11817  013B78  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 11818  013B7A  0100               	movlb	0	; () banked
 11819  013B7C  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 11820  013B7E  D7B8               	goto	l13179
 11821  013B80                     u9590:
 11822                           
 11823                           ; BSR set to: 0
 11824                           ;Console.c: 448: }
 11825                           ;Console.c: 449: return (ColourPtr)Fill;
 11826                           
 11827                           ; BSR set to: 0
 11828  013B80  0E64               	movlw	low Console_MakeField@Fill
 11829  013B82  0100               	movlb	0	; () banked
 11830  013B84  6FBF               	movwf	?_Console_MakeField& (0+255),b
 11831  013B86  0E04               	movlw	high Console_MakeField@Fill
 11832  013B88  0100               	movlb	0	; () banked
 11833  013B8A  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 11834  013B8C  0012               	return	
 11835  013B8E                     __end_of_Console_MakeField:
 11836                           	opt stack 0
 11837                           tosu	equ	0xFFF
 11838                           tosh	equ	0xFFE
 11839                           tosl	equ	0xFFD
 11840                           pclath	equ	0xFFA
 11841                           tblptru	equ	0xFF8
 11842                           tblptrh	equ	0xFF7
 11843                           tblptrl	equ	0xFF6
 11844                           tablat	equ	0xFF5
 11845                           prodh	equ	0xFF4
 11846                           prodl	equ	0xFF3
 11847                           intcon	equ	0xFF2
 11848                           postinc0	equ	0xFEE
 11849                           wreg	equ	0xFE8
 11850                           indf1	equ	0xFE7
 11851                           postdec1	equ	0xFE5
 11852                           fsr1h	equ	0xFE2
 11853                           fsr1l	equ	0xFE1
 11854                           indf2	equ	0xFDF
 11855                           postinc2	equ	0xFDE
 11856                           postdec2	equ	0xFDD
 11857                           plusw2	equ	0xFDB
 11858                           fsr2h	equ	0xFDA
 11859                           fsr2l	equ	0xFD9
 11860                           status	equ	0xFD8
 11861                           
 11862 ;; *************** function _Byte_GetBit *****************
 11863 ;; Defined at:
 11864 ;;		line 38 in file "Library/Types.c"
 11865 ;; Parameters:    Size  Location     Type
 11866 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 11867 ;;		 -> Font5x7(480), 
 11868 ;;  pBit            1    2[BANK0 ] unsigned char 
 11869 ;; Auto vars:     Size  Location     Type
 11870 ;;  Output          1    4[BANK0 ] unsigned char 
 11871 ;; Return value:  Size  Location     Type
 11872 ;;                  1    wreg      unsigned char 
 11873 ;; Registers used:
 11874 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 11875 ;; Tracked objects:
 11876 ;;		On entry : 0/0
 11877 ;;		On exit  : 0/0
 11878 ;;		Unchanged: 0/0
 11879 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11880 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11881 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11882 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11883 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11884 ;;Total ram usage:        5 bytes
 11885 ;; Hardware stack levels used:    1
 11886 ;; Hardware stack levels required when called:    7
 11887 ;; This function calls:
 11888 ;;		Nothing
 11889 ;; This function is called by:
 11890 ;;		_Console_MakeField
 11891 ;;		_Word_GetBit
 11892 ;; This function uses a non-reentrant model
 11893 ;;
 11894                           
 11895                           	psect	text55
 11896  015BC8                     __ptext55:
 11897                           	opt stack 0
 11898  015BC8                     _Byte_GetBit:
 11899                           	opt stack 20
 11900                           
 11901                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 11902                           
 11903                           ; BSR set to: 0
 11904                           ;incstack = 0
 11905  015BC8  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 11906  015BCC  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 11907  015BD0                     	if	0	;tblptru may be non-zero
 11908  015BD0                     	endif
 11909  015BD0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11910  015BD0  0E00               	movlw	low (__mediumconst shr (0+16))
 11911  015BD2  6EF8               	movwf	tblptru,c
 11912  015BD4                     	endif
 11913  015BD4  0008               	tblrd		*
 11914  015BD6  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 11915                           
 11916                           ;Types.c: 42: Output >>= pBit;
 11917  015BDA  0100               	movlb	0	; () banked
 11918  015BDC  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 11919  015BDE  0100               	movlb	0	; () banked
 11920  015BE0  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 11921  015BE2  D003               	goto	u9170
 11922  015BE4                     u9175:
 11923  015BE4  0100               	movlb	0	; () banked
 11924  015BE6  90D8               	bcf	status,0,c
 11925  015BE8  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 11926  015BEA                     u9170:
 11927  015BEA  0100               	movlb	0	; () banked
 11928  015BEC  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 11929  015BEE  D7FA               	goto	u9175
 11930                           
 11931                           ;Types.c: 43: Output &= 1;
 11932  015BF0  0E01               	movlw	1
 11933  015BF2  0100               	movlb	0	; () banked
 11934  015BF4  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 11935                           
 11936                           ; BSR set to: 0
 11937                           ;Types.c: 44: return Output;
 11938  015BF6  0100               	movlb	0	; () banked
 11939  015BF8  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 11940  015BFA  0012               	return	
 11941  015BFC                     __end_of_Byte_GetBit:
 11942                           	opt stack 0
 11943                           tosu	equ	0xFFF
 11944                           tosh	equ	0xFFE
 11945                           tosl	equ	0xFFD
 11946                           pclath	equ	0xFFA
 11947                           tblptru	equ	0xFF8
 11948                           tblptrh	equ	0xFF7
 11949                           tblptrl	equ	0xFF6
 11950                           tablat	equ	0xFF5
 11951                           prodh	equ	0xFF4
 11952                           prodl	equ	0xFF3
 11953                           intcon	equ	0xFF2
 11954                           postinc0	equ	0xFEE
 11955                           wreg	equ	0xFE8
 11956                           indf1	equ	0xFE7
 11957                           postdec1	equ	0xFE5
 11958                           fsr1h	equ	0xFE2
 11959                           fsr1l	equ	0xFE1
 11960                           indf2	equ	0xFDF
 11961                           postinc2	equ	0xFDE
 11962                           postdec2	equ	0xFDD
 11963                           plusw2	equ	0xFDB
 11964                           fsr2h	equ	0xFDA
 11965                           fsr2l	equ	0xFD9
 11966                           status	equ	0xFD8
 11967                           
 11968 ;; *************** function _ADC_Voltage *****************
 11969 ;; Defined at:
 11970 ;;		line 259 in file "Library/ADC.c"
 11971 ;; Parameters:    Size  Location     Type
 11972 ;;  pInput          2   25[BANK0 ] PTR struct ADC
 11973 ;;		 -> ADC_AN0(5), 
 11974 ;; Auto vars:     Size  Location     Type
 11975 ;;  output          4   39[BANK0 ] float 
 11976 ;;  ref             4   35[BANK0 ] const float 
 11977 ;;  max             4   31[BANK0 ] const float 
 11978 ;; Return value:  Size  Location     Type
 11979 ;;                  4   25[BANK0 ] float 
 11980 ;; Registers used:
 11981 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11982 ;; Tracked objects:
 11983 ;;		On entry : 0/0
 11984 ;;		On exit  : 0/0
 11985 ;;		Unchanged: 0/0
 11986 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11987 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11988 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11989 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11990 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11991 ;;Total ram usage:       18 bytes
 11992 ;; Hardware stack levels used:    1
 11993 ;; Hardware stack levels required when called:    8
 11994 ;; This function calls:
 11995 ;;		___fldiv
 11996 ;;		___flmul
 11997 ;;		___xxtofl
 11998 ;; This function is called by:
 11999 ;;		_mode1
 12000 ;; This function uses a non-reentrant model
 12001 ;;
 12002                           
 12003                           	psect	text56
 12004  01383C                     __ptext56:
 12005                           	opt stack 0
 12006  01383C                     _ADC_Voltage:
 12007                           	opt stack 21
 12008                           
 12009                           ;ADC.c: 261: const float max = 1024;
 12010                           
 12011                           ; BSR set to: 0
 12012                           ;incstack = 0
 12013  01383C  0E00               	movlw	0
 12014  01383E  0100               	movlb	0	; () banked
 12015  013840  6FD9               	movwf	ADC_Voltage@max& (0+255),b
 12016  013842  0E00               	movlw	0
 12017  013844  6FDA               	movwf	(ADC_Voltage@max+1)& (0+255),b
 12018  013846  0E80               	movlw	128
 12019  013848  6FDB               	movwf	(ADC_Voltage@max+2)& (0+255),b
 12020  01384A  0E44               	movlw	68
 12021  01384C  6FDC               	movwf	(ADC_Voltage@max+3)& (0+255),b
 12022                           
 12023                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 12024  01384E  0E33               	movlw	51
 12025  013850  0100               	movlb	0	; () banked
 12026  013852  6FDD               	movwf	ADC_Voltage@ref& (0+255),b
 12027  013854  0E33               	movlw	51
 12028  013856  6FDE               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 12029  013858  0E53               	movlw	83
 12030  01385A  6FDF               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 12031  01385C  0E40               	movlw	64
 12032  01385E  6FE0               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 12033                           
 12034                           ; BSR set to: 0
 12035                           ;ADC.c: 263: float output = pInput->mValue;
 12036  013860  0100               	movlb	0	; () banked
 12037  013862  EE20 F001          	lfsr	2,1
 12038  013866  51D3               	movf	ADC_Voltage@pInput& (0+255),w,b
 12039  013868  26D9               	addwf	fsr2l,f,c
 12040  01386A  51D4               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 12041  01386C  22DA               	addwfc	fsr2h,f,c
 12042  01386E  CFDE F0D7          	movff	postinc2,??_ADC_Voltage
 12043  013872  CFDD F0D8          	movff	postdec2,??_ADC_Voltage+1
 12044  013876  C0D7  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 12045  01387A  C0D8  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 12046  01387E  0100               	movlb	0	; () banked
 12047  013880  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 12048  013882  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 12049  013884  0E00               	movlw	0
 12050  013886  ECB8  F08F         	call	___xxtofl
 12051  01388A  C0BA  F0E1         	movff	?___xxtofl,ADC_Voltage@output
 12052  01388E  C0BB  F0E2         	movff	?___xxtofl+1,ADC_Voltage@output+1
 12053  013892  C0BC  F0E3         	movff	?___xxtofl+2,ADC_Voltage@output+2
 12054  013896  C0BD  F0E4         	movff	?___xxtofl+3,ADC_Voltage@output+3
 12055                           
 12056                           ;ADC.c: 265: output /= max;
 12057  01389A  C0E1  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 12058  01389E  C0E2  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 12059  0138A2  C0E3  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 12060  0138A6  C0E4  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 12061  0138AA  C0D9  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 12062  0138AE  C0DA  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 12063  0138B2  C0DB  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 12064  0138B6  C0DC  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 12065  0138BA  EC74  F086         	call	___fldiv	;wreg free
 12066  0138BE  C0BA  F0E1         	movff	?___fldiv,ADC_Voltage@output
 12067  0138C2  C0BB  F0E2         	movff	?___fldiv+1,ADC_Voltage@output+1
 12068  0138C6  C0BC  F0E3         	movff	?___fldiv+2,ADC_Voltage@output+2
 12069  0138CA  C0BD  F0E4         	movff	?___fldiv+3,ADC_Voltage@output+3
 12070                           
 12071                           ;ADC.c: 266: output *= ref;
 12072  0138CE  C0E1  F0BA         	movff	ADC_Voltage@output,___flmul@b
 12073  0138D2  C0E2  F0BB         	movff	ADC_Voltage@output+1,___flmul@b+1
 12074  0138D6  C0E3  F0BC         	movff	ADC_Voltage@output+2,___flmul@b+2
 12075  0138DA  C0E4  F0BD         	movff	ADC_Voltage@output+3,___flmul@b+3
 12076  0138DE  C0DD  F0BE         	movff	ADC_Voltage@ref,___flmul@a
 12077  0138E2  C0DE  F0BF         	movff	ADC_Voltage@ref+1,___flmul@a+1
 12078  0138E6  C0DF  F0C0         	movff	ADC_Voltage@ref+2,___flmul@a+2
 12079  0138EA  C0E0  F0C1         	movff	ADC_Voltage@ref+3,___flmul@a+3
 12080  0138EE  EC00  F080         	call	___flmul	;wreg free
 12081  0138F2  C0BA  F0E1         	movff	?___flmul,ADC_Voltage@output
 12082  0138F6  C0BB  F0E2         	movff	?___flmul+1,ADC_Voltage@output+1
 12083  0138FA  C0BC  F0E3         	movff	?___flmul+2,ADC_Voltage@output+2
 12084  0138FE  C0BD  F0E4         	movff	?___flmul+3,ADC_Voltage@output+3
 12085                           
 12086                           ;ADC.c: 268: return output + (float)0.000;
 12087  013902  C0E1  F0D3         	movff	ADC_Voltage@output,?_ADC_Voltage
 12088  013906  C0E2  F0D4         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 12089  01390A  C0E3  F0D5         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 12090  01390E  C0E4  F0D6         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 12091  013912  0012               	return	
 12092  013914                     __end_of_ADC_Voltage:
 12093                           	opt stack 0
 12094                           tosu	equ	0xFFF
 12095                           tosh	equ	0xFFE
 12096                           tosl	equ	0xFFD
 12097                           pclath	equ	0xFFA
 12098                           tblptru	equ	0xFF8
 12099                           tblptrh	equ	0xFF7
 12100                           tblptrl	equ	0xFF6
 12101                           tablat	equ	0xFF5
 12102                           prodh	equ	0xFF4
 12103                           prodl	equ	0xFF3
 12104                           intcon	equ	0xFF2
 12105                           postinc0	equ	0xFEE
 12106                           wreg	equ	0xFE8
 12107                           indf1	equ	0xFE7
 12108                           postdec1	equ	0xFE5
 12109                           fsr1h	equ	0xFE2
 12110                           fsr1l	equ	0xFE1
 12111                           indf2	equ	0xFDF
 12112                           postinc2	equ	0xFDE
 12113                           postdec2	equ	0xFDD
 12114                           plusw2	equ	0xFDB
 12115                           fsr2h	equ	0xFDA
 12116                           fsr2l	equ	0xFD9
 12117                           status	equ	0xFD8
 12118                           
 12119 ;; *************** function ___xxtofl *****************
 12120 ;; Defined at:
 12121 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 12122 ;; Parameters:    Size  Location     Type
 12123 ;;  sign            1    wreg     unsigned char 
 12124 ;;  val             4    0[BANK0 ] long 
 12125 ;; Auto vars:     Size  Location     Type
 12126 ;;  sign            1    8[BANK0 ] unsigned char 
 12127 ;;  arg             4   10[BANK0 ] unsigned long 
 12128 ;;  exp             1    9[BANK0 ] unsigned char 
 12129 ;; Return value:  Size  Location     Type
 12130 ;;                  4    0[BANK0 ] unsigned char 
 12131 ;; Registers used:
 12132 ;;		wreg, status,2, status,0
 12133 ;; Tracked objects:
 12134 ;;		On entry : 0/0
 12135 ;;		On exit  : 0/0
 12136 ;;		Unchanged: 0/0
 12137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12142 ;;Total ram usage:       14 bytes
 12143 ;; Hardware stack levels used:    1
 12144 ;; Hardware stack levels required when called:    7
 12145 ;; This function calls:
 12146 ;;		Nothing
 12147 ;; This function is called by:
 12148 ;;		_ADC_Voltage
 12149 ;; This function uses a non-reentrant model
 12150 ;;
 12151                           
 12152                           	psect	text57
 12153  011F70                     __ptext57:
 12154                           	opt stack 0
 12155  011F70                     ___xxtofl:
 12156                           	opt stack 21
 12157                           
 12158                           ;incstack = 0
 12159                           ;___xxtofl@sign stored from wreg
 12160  011F70  0100               	movlb	0	; () banked
 12161  011F72  6FC2               	movwf	___xxtofl@sign& (0+255),b
 12162  011F74  0100               	movlb	0	; () banked
 12163  011F76  51C2               	movf	___xxtofl@sign& (0+255),w,b
 12164  011F78  0100               	movlb	0	; () banked
 12165  011F7A  B4D8               	btfsc	status,2,c
 12166  011F7C  D01E               	goto	l2963
 12167                           
 12168                           ; BSR set to: 0
 12169  011F7E  0100               	movlb	0	; () banked
 12170  011F80  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12171  011F82  D01B               	goto	l2963
 12172                           
 12173                           ; BSR set to: 0
 12174  011F84  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 12175  011F88  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 12176  011F8C  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 12177  011F90  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 12178  011F94  0100               	movlb	0	; () banked
 12179  011F96  1FBE               	comf	??___xxtofl& (0+255),f,b
 12180  011F98  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 12181  011F9A  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 12182  011F9C  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 12183  011F9E  2BBE               	incf	??___xxtofl& (0+255),f,b
 12184  011FA0  0E00               	movlw	0
 12185  011FA2  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 12186  011FA4  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 12187  011FA6  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 12188  011FA8  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 12189  011FAC  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 12190  011FB0  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 12191  011FB4  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 12192  011FB8  D008               	goto	l2964
 12193  011FBA                     l2963:
 12194                           
 12195                           ; BSR set to: 0
 12196  011FBA  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 12197  011FBE  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 12198  011FC2  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 12199  011FC6  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 12200  011FCA                     l2964:
 12201                           
 12202                           ; BSR set to: 0
 12203                           
 12204                           ; BSR set to: 0
 12205  011FCA  0100               	movlb	0	; () banked
 12206  011FCC  51BA               	movf	___xxtofl@val& (0+255),w,b
 12207  011FCE  0100               	movlb	0	; () banked
 12208  011FD0  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 12209  011FD2  0100               	movlb	0	; () banked
 12210  011FD4  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 12211  011FD6  0100               	movlb	0	; () banked
 12212  011FD8  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 12213  011FDA  A4D8               	btfss	status,2,c
 12214  011FDC  D00A               	goto	l2965
 12215                           
 12216                           ; BSR set to: 0
 12217  011FDE  0E00               	movlw	0
 12218  011FE0  0100               	movlb	0	; () banked
 12219  011FE2  6FBA               	movwf	?___xxtofl& (0+255),b
 12220  011FE4  0E00               	movlw	0
 12221  011FE6  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 12222  011FE8  0E00               	movlw	0
 12223  011FEA  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 12224  011FEC  0E00               	movlw	0
 12225  011FEE  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 12226                           
 12227                           ; BSR set to: 0
 12228  011FF0  0012               	return	
 12229  011FF2                     l2965:
 12230                           
 12231                           ; BSR set to: 0
 12232                           
 12233                           ; BSR set to: 0
 12234  011FF2  0E96               	movlw	150
 12235  011FF4  0100               	movlb	0	; () banked
 12236  011FF6  6FC3               	movwf	___xxtofl@exp& (0+255),b
 12237  011FF8  D008               	goto	l2967
 12238  011FFA                     
 12239                           ; BSR set to: 0
 12240                           
 12241                           ; BSR set to: 0
 12242  011FFA  0100               	movlb	0	; () banked
 12243  011FFC  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 12244  011FFE  0100               	movlb	0	; () banked
 12245  012000  90D8               	bcf	status,0,c
 12246  012002  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12247  012004  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12248  012006  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12249  012008  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 12250  01200A                     l2967:
 12251                           
 12252                           ; BSR set to: 0
 12253                           
 12254                           ; BSR set to: 0
 12255  01200A  0E00               	movlw	0
 12256  01200C  0100               	movlb	0	; () banked
 12257  01200E  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 12258  012010  0100               	movlb	0	; () banked
 12259  012012  6FBE               	movwf	??___xxtofl& (0+255),b
 12260  012014  0E00               	movlw	0
 12261  012016  0100               	movlb	0	; () banked
 12262  012018  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12263  01201A  0100               	movlb	0	; () banked
 12264  01201C  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 12265  01201E  0E00               	movlw	0
 12266  012020  0100               	movlb	0	; () banked
 12267  012022  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12268  012024  0100               	movlb	0	; () banked
 12269  012026  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 12270  012028  0EFE               	movlw	254
 12271  01202A  0100               	movlb	0	; () banked
 12272  01202C  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12273  01202E  0100               	movlb	0	; () banked
 12274  012030  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 12275  012032  0100               	movlb	0	; () banked
 12276  012034  51BE               	movf	??___xxtofl& (0+255),w,b
 12277  012036  0100               	movlb	0	; () banked
 12278  012038  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12279  01203A  0100               	movlb	0	; () banked
 12280  01203C  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12281  01203E  0100               	movlb	0	; () banked
 12282  012040  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12283  012042  B4D8               	btfsc	status,2,c
 12284  012044  D010               	goto	l2970
 12285  012046  D7D9               	goto	l2968
 12286  012048                     
 12287                           ; BSR set to: 0
 12288                           
 12289                           ; BSR set to: 0
 12290  012048  0100               	movlb	0	; () banked
 12291  01204A  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 12292                           
 12293                           ; BSR set to: 0
 12294  01204C  0E01               	movlw	1
 12295  01204E  0100               	movlb	0	; () banked
 12296  012050  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 12297  012052  0E00               	movlw	0
 12298  012054  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 12299  012056  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 12300  012058  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 12301                           
 12302                           ; BSR set to: 0
 12303  01205A  0100               	movlb	0	; () banked
 12304  01205C  90D8               	bcf	status,0,c
 12305  01205E  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 12306  012060  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 12307  012062  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 12308  012064  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 12309  012066                     l2970:
 12310                           
 12311                           ; BSR set to: 0
 12312  012066  0E00               	movlw	0
 12313  012068  0100               	movlb	0	; () banked
 12314  01206A  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 12315  01206C  0100               	movlb	0	; () banked
 12316  01206E  6FBE               	movwf	??___xxtofl& (0+255),b
 12317  012070  0E00               	movlw	0
 12318  012072  0100               	movlb	0	; () banked
 12319  012074  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 12320  012076  0100               	movlb	0	; () banked
 12321  012078  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 12322  01207A  0E00               	movlw	0
 12323  01207C  0100               	movlb	0	; () banked
 12324  01207E  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 12325  012080  0100               	movlb	0	; () banked
 12326  012082  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 12327  012084  0EFF               	movlw	255
 12328  012086  0100               	movlb	0	; () banked
 12329  012088  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 12330  01208A  0100               	movlb	0	; () banked
 12331  01208C  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 12332  01208E  0100               	movlb	0	; () banked
 12333  012090  51BE               	movf	??___xxtofl& (0+255),w,b
 12334  012092  0100               	movlb	0	; () banked
 12335  012094  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 12336  012096  0100               	movlb	0	; () banked
 12337  012098  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 12338  01209A  0100               	movlb	0	; () banked
 12339  01209C  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 12340  01209E  B4D8               	btfsc	status,2,c
 12341  0120A0  D009               	goto	l2973
 12342  0120A2  D7D2               	goto	l2971
 12343  0120A4                     
 12344                           ; BSR set to: 0
 12345                           
 12346                           ; BSR set to: 0
 12347  0120A4  0100               	movlb	0	; () banked
 12348  0120A6  07C3               	decf	___xxtofl@exp& (0+255),f,b
 12349  0120A8  0100               	movlb	0	; () banked
 12350  0120AA  90D8               	bcf	status,0,c
 12351  0120AC  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 12352  0120AE  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 12353  0120B0  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 12354  0120B2  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 12355  0120B4                     l2973:
 12356                           
 12357                           ; BSR set to: 0
 12358                           
 12359                           ; BSR set to: 0
 12360  0120B4  0100               	movlb	0	; () banked
 12361  0120B6  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 12362  0120B8  D004               	goto	u10340
 12363                           
 12364                           ; BSR set to: 0
 12365  0120BA  0E02               	movlw	2
 12366  0120BC  0100               	movlb	0	; () banked
 12367  0120BE  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 12368  0120C0  D7F1               	goto	l2974
 12369  0120C2                     u10340:
 12370                           
 12371                           ; BSR set to: 0
 12372                           
 12373                           ; BSR set to: 0
 12374  0120C2  0100               	movlb	0	; () banked
 12375  0120C4  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 12376  0120C6  D009               	goto	l2978
 12377                           
 12378                           ; BSR set to: 0
 12379  0120C8  0EFF               	movlw	255
 12380  0120CA  0100               	movlb	0	; () banked
 12381  0120CC  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 12382  0120CE  0EFF               	movlw	255
 12383  0120D0  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 12384  0120D2  0E7F               	movlw	127
 12385  0120D4  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 12386  0120D6  0EFF               	movlw	255
 12387  0120D8  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 12388  0120DA                     l2978:
 12389                           
 12390                           ; BSR set to: 0
 12391  0120DA  0100               	movlb	0	; () banked
 12392  0120DC  90D8               	bcf	status,0,c
 12393  0120DE  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 12394  0120E0  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 12395  0120E4  0100               	movlb	0	; () banked
 12396  0120E6  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 12397  0120E8  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 12398  0120EA  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 12399  0120EC  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 12400  0120F0  0100               	movlb	0	; () banked
 12401  0120F2  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 12402  0120F4  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 12403  0120F6  6BBE               	clrf	??___xxtofl& (0+255),b
 12404  0120F8  0100               	movlb	0	; () banked
 12405  0120FA  51BE               	movf	??___xxtofl& (0+255),w,b
 12406  0120FC  0100               	movlb	0	; () banked
 12407  0120FE  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 12408  012100  0100               	movlb	0	; () banked
 12409  012102  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 12410  012104  0100               	movlb	0	; () banked
 12411  012106  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 12412  012108  0100               	movlb	0	; () banked
 12413  01210A  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 12414  01210C  0100               	movlb	0	; () banked
 12415  01210E  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 12416  012110  0100               	movlb	0	; () banked
 12417  012112  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 12418  012114  0100               	movlb	0	; () banked
 12419  012116  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 12420                           
 12421                           ; BSR set to: 0
 12422  012118  0100               	movlb	0	; () banked
 12423  01211A  51C2               	movf	___xxtofl@sign& (0+255),w,b
 12424  01211C  0100               	movlb	0	; () banked
 12425  01211E  B4D8               	btfsc	status,2,c
 12426  012120  D005               	goto	l2979
 12427                           
 12428                           ; BSR set to: 0
 12429  012122  0100               	movlb	0	; () banked
 12430  012124  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 12431  012126  D002               	goto	l2979
 12432                           
 12433                           ; BSR set to: 0
 12434  012128  0100               	movlb	0	; () banked
 12435  01212A  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 12436  01212C                     l2979:
 12437                           
 12438                           ; BSR set to: 0
 12439                           
 12440                           ; BSR set to: 0
 12441  01212C  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 12442  012130  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 12443  012134  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 12444  012138  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 12445  01213C  0012               	return	
 12446  01213E                     __end_of___xxtofl:
 12447                           	opt stack 0
 12448                           tosu	equ	0xFFF
 12449                           tosh	equ	0xFFE
 12450                           tosl	equ	0xFFD
 12451                           pclath	equ	0xFFA
 12452                           tblptru	equ	0xFF8
 12453                           tblptrh	equ	0xFF7
 12454                           tblptrl	equ	0xFF6
 12455                           tablat	equ	0xFF5
 12456                           prodh	equ	0xFF4
 12457                           prodl	equ	0xFF3
 12458                           intcon	equ	0xFF2
 12459                           postinc0	equ	0xFEE
 12460                           wreg	equ	0xFE8
 12461                           indf1	equ	0xFE7
 12462                           postdec1	equ	0xFE5
 12463                           fsr1h	equ	0xFE2
 12464                           fsr1l	equ	0xFE1
 12465                           indf2	equ	0xFDF
 12466                           postinc2	equ	0xFDE
 12467                           postdec2	equ	0xFDD
 12468                           plusw2	equ	0xFDB
 12469                           fsr2h	equ	0xFDA
 12470                           fsr2l	equ	0xFD9
 12471                           status	equ	0xFD8
 12472                           
 12473 ;; *************** function ___flmul *****************
 12474 ;; Defined at:
 12475 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 12476 ;; Parameters:    Size  Location     Type
 12477 ;;  b               4    0[BANK0 ] unsigned char 
 12478 ;;  a               4    4[BANK0 ] unsigned char 
 12479 ;; Auto vars:     Size  Location     Type
 12480 ;;  prod            4   19[BANK0 ] struct .
 12481 ;;  grs             4   14[BANK0 ] unsigned long 
 12482 ;;  temp            2   23[BANK0 ] struct .
 12483 ;;  bexp            1   18[BANK0 ] unsigned char 
 12484 ;;  aexp            1   13[BANK0 ] unsigned char 
 12485 ;;  sign            1   12[BANK0 ] unsigned char 
 12486 ;; Return value:  Size  Location     Type
 12487 ;;                  4    0[BANK0 ] unsigned char 
 12488 ;; Registers used:
 12489 ;;		wreg, status,2, status,0, prodl, prodh
 12490 ;; Tracked objects:
 12491 ;;		On entry : 0/0
 12492 ;;		On exit  : 0/0
 12493 ;;		Unchanged: 0/0
 12494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12495 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12496 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12497 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12498 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12499 ;;Total ram usage:       25 bytes
 12500 ;; Hardware stack levels used:    1
 12501 ;; Hardware stack levels required when called:    7
 12502 ;; This function calls:
 12503 ;;		Nothing
 12504 ;; This function is called by:
 12505 ;;		_ADC_Voltage
 12506 ;; This function uses a non-reentrant model
 12507 ;;
 12508                           
 12509                           	psect	text58
 12510  010000                     __ptext58:
 12511                           	opt stack 0
 12512  010000                     ___flmul:
 12513                           	opt stack 21
 12514                           
 12515                           ; BSR set to: 0
 12516                           ;incstack = 0
 12517  010000  0100               	movlb	0	; () banked
 12518  010002  51BD               	movf	(___flmul@b+3)& (0+255),w,b
 12519  010004  0B80               	andlw	128
 12520  010006  0100               	movlb	0	; () banked
 12521  010008  6FC6               	movwf	___flmul@sign& (0+255),b
 12522  01000A  0100               	movlb	0	; () banked
 12523  01000C  51BD               	movf	(___flmul@b+3)& (0+255),w,b
 12524  01000E  25BD               	addwf	(___flmul@b+3)& (0+255),w,b
 12525  010010  0100               	movlb	0	; () banked
 12526  010012  6FCC               	movwf	___flmul@bexp& (0+255),b
 12527                           
 12528                           ; BSR set to: 0
 12529  010014  0100               	movlb	0	; () banked
 12530  010016  AFBC               	btfss	(___flmul@b+2)& (0+255),7,b
 12531  010018  D002               	goto	l2934
 12532                           
 12533                           ; BSR set to: 0
 12534  01001A  0100               	movlb	0	; () banked
 12535  01001C  81CC               	bsf	___flmul@bexp& (0+255),0,b
 12536  01001E                     l2934:
 12537                           
 12538                           ; BSR set to: 0
 12539                           
 12540                           ; BSR set to: 0
 12541  01001E  0100               	movlb	0	; () banked
 12542  010020  51CC               	movf	___flmul@bexp& (0+255),w,b
 12543  010022  0100               	movlb	0	; () banked
 12544  010024  B4D8               	btfsc	status,2,c
 12545  010026  D010               	goto	l2935
 12546                           
 12547                           ; BSR set to: 0
 12548  010028  0100               	movlb	0	; () banked
 12549  01002A  29CC               	incf	___flmul@bexp& (0+255),w,b
 12550  01002C  A4D8               	btfss	status,2,c
 12551  01002E  D009               	goto	l2936
 12552                           
 12553                           ; BSR set to: 0
 12554  010030  0E00               	movlw	0
 12555  010032  0100               	movlb	0	; () banked
 12556  010034  6FBA               	movwf	___flmul@b& (0+255),b
 12557  010036  0E00               	movlw	0
 12558  010038  6FBB               	movwf	(___flmul@b+1)& (0+255),b
 12559  01003A  0E00               	movlw	0
 12560  01003C  6FBC               	movwf	(___flmul@b+2)& (0+255),b
 12561  01003E  0E00               	movlw	0
 12562  010040  6FBD               	movwf	(___flmul@b+3)& (0+255),b
 12563  010042                     l2936:
 12564                           
 12565                           ; BSR set to: 0
 12566                           
 12567                           ; BSR set to: 0
 12568  010042  0100               	movlb	0	; () banked
 12569  010044  8FBC               	bsf	(___flmul@b+2)& (0+255),7,b
 12570  010046  D009               	goto	l2937
 12571  010048                     l2935:
 12572                           
 12573                           ; BSR set to: 0
 12574                           
 12575                           ; BSR set to: 0
 12576  010048  0E00               	movlw	0
 12577  01004A  0100               	movlb	0	; () banked
 12578  01004C  6FBA               	movwf	___flmul@b& (0+255),b
 12579  01004E  0E00               	movlw	0
 12580  010050  6FBB               	movwf	(___flmul@b+1)& (0+255),b
 12581  010052  0E00               	movlw	0
 12582  010054  6FBC               	movwf	(___flmul@b+2)& (0+255),b
 12583  010056  0E00               	movlw	0
 12584  010058  6FBD               	movwf	(___flmul@b+3)& (0+255),b
 12585  01005A                     l2937:
 12586                           
 12587                           ; BSR set to: 0
 12588                           
 12589                           ; BSR set to: 0
 12590  01005A  0100               	movlb	0	; () banked
 12591  01005C  51C1               	movf	(___flmul@a+3)& (0+255),w,b
 12592  01005E  0B80               	andlw	128
 12593  010060  0100               	movlb	0	; () banked
 12594  010062  1BC6               	xorwf	___flmul@sign& (0+255),f,b
 12595                           
 12596                           ; BSR set to: 0
 12597  010064  0100               	movlb	0	; () banked
 12598  010066  51C1               	movf	(___flmul@a+3)& (0+255),w,b
 12599  010068  25C1               	addwf	(___flmul@a+3)& (0+255),w,b
 12600  01006A  0100               	movlb	0	; () banked
 12601  01006C  6FC7               	movwf	___flmul@aexp& (0+255),b
 12602                           
 12603                           ; BSR set to: 0
 12604  01006E  0100               	movlb	0	; () banked
 12605  010070  AFC0               	btfss	(___flmul@a+2)& (0+255),7,b
 12606  010072  D002               	goto	l2938
 12607                           
 12608                           ; BSR set to: 0
 12609  010074  0100               	movlb	0	; () banked
 12610  010076  81C7               	bsf	___flmul@aexp& (0+255),0,b
 12611  010078                     l2938:
 12612                           
 12613                           ; BSR set to: 0
 12614                           
 12615                           ; BSR set to: 0
 12616  010078  0100               	movlb	0	; () banked
 12617  01007A  51C7               	movf	___flmul@aexp& (0+255),w,b
 12618  01007C  0100               	movlb	0	; () banked
 12619  01007E  B4D8               	btfsc	status,2,c
 12620  010080  D010               	goto	l2939
 12621                           
 12622                           ; BSR set to: 0
 12623  010082  0100               	movlb	0	; () banked
 12624  010084  29C7               	incf	___flmul@aexp& (0+255),w,b
 12625  010086  A4D8               	btfss	status,2,c
 12626  010088  D009               	goto	l2940
 12627                           
 12628                           ; BSR set to: 0
 12629  01008A  0E00               	movlw	0
 12630  01008C  0100               	movlb	0	; () banked
 12631  01008E  6FBE               	movwf	___flmul@a& (0+255),b
 12632  010090  0E00               	movlw	0
 12633  010092  6FBF               	movwf	(___flmul@a+1)& (0+255),b
 12634  010094  0E00               	movlw	0
 12635  010096  6FC0               	movwf	(___flmul@a+2)& (0+255),b
 12636  010098  0E00               	movlw	0
 12637  01009A  6FC1               	movwf	(___flmul@a+3)& (0+255),b
 12638  01009C                     l2940:
 12639                           
 12640                           ; BSR set to: 0
 12641                           
 12642                           ; BSR set to: 0
 12643  01009C  0100               	movlb	0	; () banked
 12644  01009E  8FC0               	bsf	(___flmul@a+2)& (0+255),7,b
 12645  0100A0  D009               	goto	l2941
 12646  0100A2                     l2939:
 12647                           
 12648                           ; BSR set to: 0
 12649                           
 12650                           ; BSR set to: 0
 12651  0100A2  0E00               	movlw	0
 12652  0100A4  0100               	movlb	0	; () banked
 12653  0100A6  6FBE               	movwf	___flmul@a& (0+255),b
 12654  0100A8  0E00               	movlw	0
 12655  0100AA  6FBF               	movwf	(___flmul@a+1)& (0+255),b
 12656  0100AC  0E00               	movlw	0
 12657  0100AE  6FC0               	movwf	(___flmul@a+2)& (0+255),b
 12658  0100B0  0E00               	movlw	0
 12659  0100B2  6FC1               	movwf	(___flmul@a+3)& (0+255),b
 12660  0100B4                     l2941:
 12661                           
 12662                           ; BSR set to: 0
 12663  0100B4  0100               	movlb	0	; () banked
 12664  0100B6  51C7               	movf	___flmul@aexp& (0+255),w,b
 12665  0100B8  0100               	movlb	0	; () banked
 12666  0100BA  B4D8               	btfsc	status,2,c
 12667  0100BC  D005               	goto	u10160
 12668                           
 12669                           ; BSR set to: 0
 12670  0100BE  0100               	movlb	0	; () banked
 12671  0100C0  51CC               	movf	___flmul@bexp& (0+255),w,b
 12672  0100C2  0100               	movlb	0	; () banked
 12673  0100C4  A4D8               	btfss	status,2,c
 12674  0100C6  D00A               	goto	l2942
 12675  0100C8                     u10160:
 12676                           
 12677                           ; BSR set to: 0
 12678                           
 12679                           ; BSR set to: 0
 12680  0100C8  0E00               	movlw	0
 12681  0100CA  0100               	movlb	0	; () banked
 12682  0100CC  6FBA               	movwf	?___flmul& (0+255),b
 12683  0100CE  0E00               	movlw	0
 12684  0100D0  6FBB               	movwf	(?___flmul+1)& (0+255),b
 12685  0100D2  0E00               	movlw	0
 12686  0100D4  6FBC               	movwf	(?___flmul+2)& (0+255),b
 12687  0100D6  0E00               	movlw	0
 12688  0100D8  6FBD               	movwf	(?___flmul+3)& (0+255),b
 12689                           
 12690                           ; BSR set to: 0
 12691  0100DA  0012               	return	
 12692  0100DC                     l2942:
 12693                           
 12694                           ; BSR set to: 0
 12695                           
 12696                           ; BSR set to: 0
 12697  0100DC  0100               	movlb	0	; () banked
 12698  0100DE  51C0               	movf	(___flmul@a+2)& (0+255),w,b
 12699  0100E0  0100               	movlb	0	; () banked
 12700  0100E2  03BA               	mulwf	___flmul@b& (0+255),b
 12701  0100E4  CFF3 F0D1          	movff	prodl,___flmul@temp
 12702  0100E8  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12703                           
 12704                           ; BSR set to: 0
 12705  0100EC  0100               	movlb	0	; () banked
 12706  0100EE  51D1               	movf	___flmul@temp& (0+255),w,b
 12707  0100F0  0100               	movlb	0	; () banked
 12708  0100F2  6FC8               	movwf	___flmul@grs& (0+255),b
 12709  0100F4  6BC9               	clrf	(___flmul@grs+1)& (0+255),b
 12710  0100F6  6BCA               	clrf	(___flmul@grs+2)& (0+255),b
 12711  0100F8  6BCB               	clrf	(___flmul@grs+3)& (0+255),b
 12712                           
 12713                           ; BSR set to: 0
 12714  0100FA  0100               	movlb	0	; () banked
 12715  0100FC  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12716  0100FE  0100               	movlb	0	; () banked
 12717  010100  6FCD               	movwf	___flmul@prod& (0+255),b
 12718  010102  6BCE               	clrf	(___flmul@prod+1)& (0+255),b
 12719  010104  6BCF               	clrf	(___flmul@prod+2)& (0+255),b
 12720  010106  6BD0               	clrf	(___flmul@prod+3)& (0+255),b
 12721  010108  0100               	movlb	0	; () banked
 12722  01010A  51BF               	movf	(___flmul@a+1)& (0+255),w,b
 12723  01010C  0100               	movlb	0	; () banked
 12724  01010E  03BB               	mulwf	(___flmul@b+1)& (0+255),b
 12725  010110  CFF3 F0D1          	movff	prodl,___flmul@temp
 12726  010114  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12727                           
 12728                           ; BSR set to: 0
 12729  010118  0100               	movlb	0	; () banked
 12730  01011A  51D1               	movf	___flmul@temp& (0+255),w,b
 12731  01011C  0100               	movlb	0	; () banked
 12732  01011E  27C8               	addwf	___flmul@grs& (0+255),f,b
 12733  010120  0E00               	movlw	0
 12734  010122  23C9               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12735  010124  23CA               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12736  010126  23CB               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12737                           
 12738                           ; BSR set to: 0
 12739  010128  0100               	movlb	0	; () banked
 12740  01012A  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12741  01012C  0100               	movlb	0	; () banked
 12742  01012E  27CD               	addwf	___flmul@prod& (0+255),f,b
 12743  010130  0E00               	movlw	0
 12744  010132  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12745  010134  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12746  010136  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12747  010138  0100               	movlb	0	; () banked
 12748  01013A  51BE               	movf	___flmul@a& (0+255),w,b
 12749  01013C  0100               	movlb	0	; () banked
 12750  01013E  03BC               	mulwf	(___flmul@b+2)& (0+255),b
 12751  010140  CFF3 F0D1          	movff	prodl,___flmul@temp
 12752  010144  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12753                           
 12754                           ; BSR set to: 0
 12755  010148  0100               	movlb	0	; () banked
 12756  01014A  51D1               	movf	___flmul@temp& (0+255),w,b
 12757  01014C  0100               	movlb	0	; () banked
 12758  01014E  27C8               	addwf	___flmul@grs& (0+255),f,b
 12759  010150  0E00               	movlw	0
 12760  010152  23C9               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12761  010154  23CA               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12762  010156  23CB               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12763                           
 12764                           ; BSR set to: 0
 12765  010158  0100               	movlb	0	; () banked
 12766  01015A  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12767  01015C  0100               	movlb	0	; () banked
 12768  01015E  27CD               	addwf	___flmul@prod& (0+255),f,b
 12769  010160  0E00               	movlw	0
 12770  010162  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12771  010164  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12772  010166  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12773                           
 12774                           ; BSR set to: 0
 12775  010168  C0CA  F0CB         	movff	___flmul@grs+2,___flmul@grs+3
 12776  01016C  C0C9  F0CA         	movff	___flmul@grs+1,___flmul@grs+2
 12777  010170  C0C8  F0C9         	movff	___flmul@grs,___flmul@grs+1
 12778  010174  0100               	movlb	0	; () banked
 12779  010176  6BC8               	clrf	___flmul@grs& (0+255),b
 12780                           
 12781                           ; BSR set to: 0
 12782  010178  0100               	movlb	0	; () banked
 12783  01017A  51BE               	movf	___flmul@a& (0+255),w,b
 12784  01017C  0100               	movlb	0	; () banked
 12785  01017E  03BB               	mulwf	(___flmul@b+1)& (0+255),b
 12786  010180  CFF3 F0D1          	movff	prodl,___flmul@temp
 12787  010184  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12788                           
 12789                           ; BSR set to: 0
 12790  010188  0100               	movlb	0	; () banked
 12791  01018A  51D1               	movf	___flmul@temp& (0+255),w,b
 12792  01018C  0100               	movlb	0	; () banked
 12793  01018E  27C8               	addwf	___flmul@grs& (0+255),f,b
 12794  010190  0100               	movlb	0	; () banked
 12795  010192  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12796  010194  0100               	movlb	0	; () banked
 12797  010196  23C9               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12798  010198  0E00               	movlw	0
 12799  01019A  0100               	movlb	0	; () banked
 12800  01019C  23CA               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12801  01019E  0E00               	movlw	0
 12802  0101A0  0100               	movlb	0	; () banked
 12803  0101A2  23CB               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12804                           
 12805                           ; BSR set to: 0
 12806  0101A4  0100               	movlb	0	; () banked
 12807  0101A6  51BF               	movf	(___flmul@a+1)& (0+255),w,b
 12808  0101A8  0100               	movlb	0	; () banked
 12809  0101AA  03BA               	mulwf	___flmul@b& (0+255),b
 12810  0101AC  CFF3 F0D1          	movff	prodl,___flmul@temp
 12811  0101B0  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12812                           
 12813                           ; BSR set to: 0
 12814  0101B4  0100               	movlb	0	; () banked
 12815  0101B6  51D1               	movf	___flmul@temp& (0+255),w,b
 12816  0101B8  0100               	movlb	0	; () banked
 12817  0101BA  27C8               	addwf	___flmul@grs& (0+255),f,b
 12818  0101BC  0100               	movlb	0	; () banked
 12819  0101BE  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12820  0101C0  0100               	movlb	0	; () banked
 12821  0101C2  23C9               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12822  0101C4  0E00               	movlw	0
 12823  0101C6  0100               	movlb	0	; () banked
 12824  0101C8  23CA               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12825  0101CA  0E00               	movlw	0
 12826  0101CC  0100               	movlb	0	; () banked
 12827  0101CE  23CB               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12828                           
 12829                           ; BSR set to: 0
 12830  0101D0  C0CA  F0CB         	movff	___flmul@grs+2,___flmul@grs+3
 12831  0101D4  C0C9  F0CA         	movff	___flmul@grs+1,___flmul@grs+2
 12832  0101D8  C0C8  F0C9         	movff	___flmul@grs,___flmul@grs+1
 12833  0101DC  0100               	movlb	0	; () banked
 12834  0101DE  6BC8               	clrf	___flmul@grs& (0+255),b
 12835  0101E0  0100               	movlb	0	; () banked
 12836  0101E2  51BE               	movf	___flmul@a& (0+255),w,b
 12837  0101E4  0100               	movlb	0	; () banked
 12838  0101E6  03BA               	mulwf	___flmul@b& (0+255),b
 12839  0101E8  CFF3 F0D1          	movff	prodl,___flmul@temp
 12840  0101EC  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12841                           
 12842                           ; BSR set to: 0
 12843  0101F0  0100               	movlb	0	; () banked
 12844  0101F2  51D1               	movf	___flmul@temp& (0+255),w,b
 12845  0101F4  0100               	movlb	0	; () banked
 12846  0101F6  27C8               	addwf	___flmul@grs& (0+255),f,b
 12847  0101F8  0100               	movlb	0	; () banked
 12848  0101FA  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12849  0101FC  0100               	movlb	0	; () banked
 12850  0101FE  23C9               	addwfc	(___flmul@grs+1)& (0+255),f,b
 12851  010200  0E00               	movlw	0
 12852  010202  0100               	movlb	0	; () banked
 12853  010204  23CA               	addwfc	(___flmul@grs+2)& (0+255),f,b
 12854  010206  0E00               	movlw	0
 12855  010208  0100               	movlb	0	; () banked
 12856  01020A  23CB               	addwfc	(___flmul@grs+3)& (0+255),f,b
 12857                           
 12858                           ; BSR set to: 0
 12859  01020C  0100               	movlb	0	; () banked
 12860  01020E  51C0               	movf	(___flmul@a+2)& (0+255),w,b
 12861  010210  0100               	movlb	0	; () banked
 12862  010212  03BB               	mulwf	(___flmul@b+1)& (0+255),b
 12863  010214  CFF3 F0D1          	movff	prodl,___flmul@temp
 12864  010218  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12865  01021C  0100               	movlb	0	; () banked
 12866  01021E  51D1               	movf	___flmul@temp& (0+255),w,b
 12867  010220  0100               	movlb	0	; () banked
 12868  010222  27CD               	addwf	___flmul@prod& (0+255),f,b
 12869  010224  0100               	movlb	0	; () banked
 12870  010226  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12871  010228  0100               	movlb	0	; () banked
 12872  01022A  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12873  01022C  0E00               	movlw	0
 12874  01022E  0100               	movlb	0	; () banked
 12875  010230  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12876  010232  0E00               	movlw	0
 12877  010234  0100               	movlb	0	; () banked
 12878  010236  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12879                           
 12880                           ; BSR set to: 0
 12881  010238  0100               	movlb	0	; () banked
 12882  01023A  51BF               	movf	(___flmul@a+1)& (0+255),w,b
 12883  01023C  0100               	movlb	0	; () banked
 12884  01023E  03BC               	mulwf	(___flmul@b+2)& (0+255),b
 12885  010240  CFF3 F0D1          	movff	prodl,___flmul@temp
 12886  010244  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12887                           
 12888                           ; BSR set to: 0
 12889  010248  0100               	movlb	0	; () banked
 12890  01024A  51D1               	movf	___flmul@temp& (0+255),w,b
 12891  01024C  0100               	movlb	0	; () banked
 12892  01024E  27CD               	addwf	___flmul@prod& (0+255),f,b
 12893  010250  0100               	movlb	0	; () banked
 12894  010252  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12895  010254  0100               	movlb	0	; () banked
 12896  010256  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12897  010258  0E00               	movlw	0
 12898  01025A  0100               	movlb	0	; () banked
 12899  01025C  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12900  01025E  0E00               	movlw	0
 12901  010260  0100               	movlb	0	; () banked
 12902  010262  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12903  010264  0100               	movlb	0	; () banked
 12904  010266  51C0               	movf	(___flmul@a+2)& (0+255),w,b
 12905  010268  0100               	movlb	0	; () banked
 12906  01026A  03BC               	mulwf	(___flmul@b+2)& (0+255),b
 12907  01026C  CFF3 F0D1          	movff	prodl,___flmul@temp
 12908  010270  CFF4 F0D2          	movff	prodh,___flmul@temp+1
 12909                           
 12910                           ; BSR set to: 0
 12911  010274  0100               	movlb	0	; () banked
 12912  010276  51D1               	movf	___flmul@temp& (0+255),w,b
 12913  010278  0100               	movlb	0	; () banked
 12914  01027A  6FC2               	movwf	??___flmul& (0+255),b
 12915  01027C  0100               	movlb	0	; () banked
 12916  01027E  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 12917  010280  0100               	movlb	0	; () banked
 12918  010282  6FC3               	movwf	(??___flmul+1)& (0+255),b
 12919  010284  0100               	movlb	0	; () banked
 12920  010286  6BC4               	clrf	(??___flmul+2)& (0+255),b
 12921  010288  0100               	movlb	0	; () banked
 12922  01028A  6BC5               	clrf	(??___flmul+3)& (0+255),b
 12923  01028C  C0C4  F0C5         	movff	??___flmul+2,??___flmul+3
 12924  010290  C0C3  F0C4         	movff	??___flmul+1,??___flmul+2
 12925  010294  C0C2  F0C3         	movff	??___flmul,??___flmul+1
 12926  010298  0100               	movlb	0	; () banked
 12927  01029A  6BC2               	clrf	??___flmul& (0+255),b
 12928  01029C  0100               	movlb	0	; () banked
 12929  01029E  51C2               	movf	??___flmul& (0+255),w,b
 12930  0102A0  0100               	movlb	0	; () banked
 12931  0102A2  27CD               	addwf	___flmul@prod& (0+255),f,b
 12932  0102A4  0100               	movlb	0	; () banked
 12933  0102A6  51C3               	movf	(??___flmul+1)& (0+255),w,b
 12934  0102A8  0100               	movlb	0	; () banked
 12935  0102AA  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12936  0102AC  0100               	movlb	0	; () banked
 12937  0102AE  51C4               	movf	(??___flmul+2)& (0+255),w,b
 12938  0102B0  0100               	movlb	0	; () banked
 12939  0102B2  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12940  0102B4  0100               	movlb	0	; () banked
 12941  0102B6  51C5               	movf	(??___flmul+3)& (0+255),w,b
 12942  0102B8  0100               	movlb	0	; () banked
 12943  0102BA  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12944                           
 12945                           ; BSR set to: 0
 12946  0102BC  C0C8  F0C2         	movff	___flmul@grs,??___flmul
 12947  0102C0  C0C9  F0C3         	movff	___flmul@grs+1,??___flmul+1
 12948  0102C4  C0CA  F0C4         	movff	___flmul@grs+2,??___flmul+2
 12949  0102C8  C0CB  F0C5         	movff	___flmul@grs+3,??___flmul+3
 12950  0102CC  0E19               	movlw	25
 12951  0102CE  D006               	goto	u10170
 12952  0102D0                     u10175:
 12953  0102D0  0100               	movlb	0	; () banked
 12954  0102D2  90D8               	bcf	status,0,c
 12955  0102D4  33C5               	rrcf	(??___flmul+3)& (0+255),f,b
 12956  0102D6  33C4               	rrcf	(??___flmul+2)& (0+255),f,b
 12957  0102D8  33C3               	rrcf	(??___flmul+1)& (0+255),f,b
 12958  0102DA  33C2               	rrcf	??___flmul& (0+255),f,b
 12959  0102DC                     u10170:
 12960  0102DC  2EE8               	decfsz	wreg,f,c
 12961  0102DE  D7F8               	goto	u10175
 12962  0102E0  0100               	movlb	0	; () banked
 12963  0102E2  51C2               	movf	??___flmul& (0+255),w,b
 12964  0102E4  0100               	movlb	0	; () banked
 12965  0102E6  27CD               	addwf	___flmul@prod& (0+255),f,b
 12966  0102E8  0100               	movlb	0	; () banked
 12967  0102EA  51C3               	movf	(??___flmul+1)& (0+255),w,b
 12968  0102EC  0100               	movlb	0	; () banked
 12969  0102EE  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 12970  0102F0  0100               	movlb	0	; () banked
 12971  0102F2  51C4               	movf	(??___flmul+2)& (0+255),w,b
 12972  0102F4  0100               	movlb	0	; () banked
 12973  0102F6  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 12974  0102F8  0100               	movlb	0	; () banked
 12975  0102FA  51C5               	movf	(??___flmul+3)& (0+255),w,b
 12976  0102FC  0100               	movlb	0	; () banked
 12977  0102FE  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 12978                           
 12979                           ; BSR set to: 0
 12980  010300  C0CA  F0CB         	movff	___flmul@grs+2,___flmul@grs+3
 12981  010304  C0C9  F0CA         	movff	___flmul@grs+1,___flmul@grs+2
 12982  010308  C0C8  F0C9         	movff	___flmul@grs,___flmul@grs+1
 12983  01030C  0100               	movlb	0	; () banked
 12984  01030E  6BC8               	clrf	___flmul@grs& (0+255),b
 12985                           
 12986                           ; BSR set to: 0
 12987  010310  0100               	movlb	0	; () banked
 12988  010312  51C7               	movf	___flmul@aexp& (0+255),w,b
 12989  010314  C0CC  F0C2         	movff	___flmul@bexp,??___flmul
 12990  010318  0100               	movlb	0	; () banked
 12991  01031A  6BC3               	clrf	(??___flmul+1)& (0+255),b
 12992  01031C  0100               	movlb	0	; () banked
 12993  01031E  27C2               	addwf	??___flmul& (0+255),f,b
 12994  010320  0E00               	movlw	0
 12995  010322  23C3               	addwfc	(??___flmul+1)& (0+255),f,b
 12996  010324  0E82               	movlw	130
 12997  010326  0100               	movlb	0	; () banked
 12998  010328  25C2               	addwf	??___flmul& (0+255),w,b
 12999  01032A  0100               	movlb	0	; () banked
 13000  01032C  6FD1               	movwf	___flmul@temp& (0+255),b
 13001  01032E  0EFF               	movlw	255
 13002  010330  0100               	movlb	0	; () banked
 13003  010332  21C3               	addwfc	(??___flmul+1)& (0+255),w,b
 13004  010334  0100               	movlb	0	; () banked
 13005  010336  6FD2               	movwf	(___flmul@temp+1)& (0+255),b
 13006  010338  D015               	goto	l2946
 13007  01033A                     
 13008                           ; BSR set to: 0
 13009                           
 13010                           ; BSR set to: 0
 13011  01033A  0100               	movlb	0	; () banked
 13012  01033C  90D8               	bcf	status,0,c
 13013  01033E  37CD               	rlcf	___flmul@prod& (0+255),f,b
 13014  010340  37CE               	rlcf	(___flmul@prod+1)& (0+255),f,b
 13015  010342  37CF               	rlcf	(___flmul@prod+2)& (0+255),f,b
 13016  010344  37D0               	rlcf	(___flmul@prod+3)& (0+255),f,b
 13017                           
 13018                           ; BSR set to: 0
 13019  010346  0100               	movlb	0	; () banked
 13020  010348  AFCB               	btfss	(___flmul@grs+3)& (0+255),7,b
 13021  01034A  D002               	goto	l2948
 13022                           
 13023                           ; BSR set to: 0
 13024  01034C  0100               	movlb	0	; () banked
 13025  01034E  81CD               	bsf	___flmul@prod& (0+255),0,b
 13026  010350                     l2948:
 13027                           
 13028                           ; BSR set to: 0
 13029  010350  0100               	movlb	0	; () banked
 13030  010352  90D8               	bcf	status,0,c
 13031  010354  37C8               	rlcf	___flmul@grs& (0+255),f,b
 13032  010356  37C9               	rlcf	(___flmul@grs+1)& (0+255),f,b
 13033  010358  37CA               	rlcf	(___flmul@grs+2)& (0+255),f,b
 13034  01035A  37CB               	rlcf	(___flmul@grs+3)& (0+255),f,b
 13035  01035C  0100               	movlb	0	; () banked
 13036  01035E  07D1               	decf	___flmul@temp& (0+255),f,b
 13037  010360  A0D8               	btfss	status,0,c
 13038  010362  07D2               	decf	(___flmul@temp+1)& (0+255),f,b
 13039  010364                     l2946:
 13040                           
 13041                           ; BSR set to: 0
 13042                           
 13043                           ; BSR set to: 0
 13044  010364  0100               	movlb	0	; () banked
 13045  010366  AFCF               	btfss	(___flmul@prod+2)& (0+255),7,b
 13046  010368  D7E8               	goto	l2947
 13047                           
 13048                           ; BSR set to: 0
 13049                           
 13050                           ; BSR set to: 0
 13051  01036A  0E00               	movlw	0
 13052  01036C  0100               	movlb	0	; () banked
 13053  01036E  6FC7               	movwf	___flmul@aexp& (0+255),b
 13054                           
 13055                           ; BSR set to: 0
 13056  010370  0100               	movlb	0	; () banked
 13057  010372  AFCB               	btfss	(___flmul@grs+3)& (0+255),7,b
 13058  010374  D024               	goto	l2953
 13059                           
 13060                           ; BSR set to: 0
 13061  010376  0EFF               	movlw	255
 13062  010378  0100               	movlb	0	; () banked
 13063  01037A  15C8               	andwf	___flmul@grs& (0+255),w,b
 13064  01037C  0100               	movlb	0	; () banked
 13065  01037E  6FC2               	movwf	??___flmul& (0+255),b
 13066  010380  0EFF               	movlw	255
 13067  010382  0100               	movlb	0	; () banked
 13068  010384  15C9               	andwf	(___flmul@grs+1)& (0+255),w,b
 13069  010386  0100               	movlb	0	; () banked
 13070  010388  6FC3               	movwf	(??___flmul+1)& (0+255),b
 13071  01038A  0EFF               	movlw	255
 13072  01038C  0100               	movlb	0	; () banked
 13073  01038E  15CA               	andwf	(___flmul@grs+2)& (0+255),w,b
 13074  010390  0100               	movlb	0	; () banked
 13075  010392  6FC4               	movwf	(??___flmul+2)& (0+255),b
 13076  010394  0E7F               	movlw	127
 13077  010396  0100               	movlb	0	; () banked
 13078  010398  15CB               	andwf	(___flmul@grs+3)& (0+255),w,b
 13079  01039A  0100               	movlb	0	; () banked
 13080  01039C  6FC5               	movwf	(??___flmul+3)& (0+255),b
 13081  01039E  0100               	movlb	0	; () banked
 13082  0103A0  51C2               	movf	??___flmul& (0+255),w,b
 13083  0103A2  0100               	movlb	0	; () banked
 13084  0103A4  11C3               	iorwf	(??___flmul+1)& (0+255),w,b
 13085  0103A6  0100               	movlb	0	; () banked
 13086  0103A8  11C4               	iorwf	(??___flmul+2)& (0+255),w,b
 13087  0103AA  0100               	movlb	0	; () banked
 13088  0103AC  11C5               	iorwf	(??___flmul+3)& (0+255),w,b
 13089  0103AE  A4D8               	btfss	status,2,c
 13090  0103B0  D003               	goto	u10220
 13091                           
 13092                           ; BSR set to: 0
 13093                           
 13094                           ; BSR set to: 0
 13095  0103B2  0100               	movlb	0	; () banked
 13096  0103B4  A1CD               	btfss	___flmul@prod& (0+255),0,b
 13097  0103B6  D003               	goto	l2953
 13098  0103B8                     u10220:
 13099                           
 13100                           ; BSR set to: 0
 13101  0103B8  0E01               	movlw	1
 13102  0103BA  0100               	movlb	0	; () banked
 13103  0103BC  6FC7               	movwf	___flmul@aexp& (0+255),b
 13104  0103BE                     l2953:
 13105                           
 13106                           ; BSR set to: 0
 13107                           
 13108                           ; BSR set to: 0
 13109                           
 13110                           ; BSR set to: 0
 13111  0103BE  0100               	movlb	0	; () banked
 13112  0103C0  51C7               	movf	___flmul@aexp& (0+255),w,b
 13113  0103C2  0100               	movlb	0	; () banked
 13114  0103C4  B4D8               	btfsc	status,2,c
 13115  0103C6  D023               	goto	l2955
 13116                           
 13117                           ; BSR set to: 0
 13118  0103C8  0E01               	movlw	1
 13119  0103CA  0100               	movlb	0	; () banked
 13120  0103CC  27CD               	addwf	___flmul@prod& (0+255),f,b
 13121  0103CE  0E00               	movlw	0
 13122  0103D0  23CE               	addwfc	(___flmul@prod+1)& (0+255),f,b
 13123  0103D2  23CF               	addwfc	(___flmul@prod+2)& (0+255),f,b
 13124  0103D4  23D0               	addwfc	(___flmul@prod+3)& (0+255),f,b
 13125                           
 13126                           ; BSR set to: 0
 13127  0103D6  0100               	movlb	0	; () banked
 13128  0103D8  A1D0               	btfss	(___flmul@prod+3)& (0+255),0,b
 13129  0103DA  D019               	goto	l2955
 13130                           
 13131                           ; BSR set to: 0
 13132  0103DC  C0CD  F0C2         	movff	___flmul@prod,??___flmul
 13133  0103E0  C0CE  F0C3         	movff	___flmul@prod+1,??___flmul+1
 13134  0103E4  C0CF  F0C4         	movff	___flmul@prod+2,??___flmul+2
 13135  0103E8  C0D0  F0C5         	movff	___flmul@prod+3,??___flmul+3
 13136  0103EC  0100               	movlb	0	; () banked
 13137  0103EE  35C5               	rlcf	(??___flmul+3)& (0+255),w,b
 13138  0103F0  33C5               	rrcf	(??___flmul+3)& (0+255),f,b
 13139  0103F2  33C4               	rrcf	(??___flmul+2)& (0+255),f,b
 13140  0103F4  33C3               	rrcf	(??___flmul+1)& (0+255),f,b
 13141  0103F6  33C2               	rrcf	??___flmul& (0+255),f,b
 13142  0103F8  C0C2  F0CD         	movff	??___flmul,___flmul@prod
 13143  0103FC  C0C3  F0CE         	movff	??___flmul+1,___flmul@prod+1
 13144  010400  C0C4  F0CF         	movff	??___flmul+2,___flmul@prod+2
 13145  010404  C0C5  F0D0         	movff	??___flmul+3,___flmul@prod+3
 13146                           
 13147                           ; BSR set to: 0
 13148  010408  0100               	movlb	0	; () banked
 13149  01040A  4BD1               	infsnz	___flmul@temp& (0+255),f,b
 13150  01040C  2BD2               	incf	(___flmul@temp+1)& (0+255),f,b
 13151  01040E                     l2955:
 13152                           
 13153                           ; BSR set to: 0
 13154                           
 13155                           ; BSR set to: 0
 13156                           
 13157                           ; BSR set to: 0
 13158  01040E  0100               	movlb	0	; () banked
 13159  010410  BFD2               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13160  010412  D010               	goto	l2956
 13161  010414  0100               	movlb	0	; () banked
 13162  010416  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 13163  010418  E104               	bnz	u10250
 13164  01041A  0100               	movlb	0	; () banked
 13165  01041C  29D1               	incf	___flmul@temp& (0+255),w,b
 13166  01041E  A0D8               	btfss	status,0,c
 13167  010420  D009               	goto	l2956
 13168  010422                     u10250:
 13169                           
 13170                           ; BSR set to: 0
 13171  010422  0E00               	movlw	0
 13172  010424  0100               	movlb	0	; () banked
 13173  010426  6FCD               	movwf	___flmul@prod& (0+255),b
 13174  010428  0E00               	movlw	0
 13175  01042A  6FCE               	movwf	(___flmul@prod+1)& (0+255),b
 13176  01042C  0E80               	movlw	128
 13177  01042E  6FCF               	movwf	(___flmul@prod+2)& (0+255),b
 13178  010430  0E7F               	movlw	127
 13179  010432  D02B               	goto	L5
 13180  010434                     l2956:
 13181                           
 13182                           ; BSR set to: 0
 13183                           
 13184                           ; BSR set to: 0
 13185  010434  0100               	movlb	0	; () banked
 13186  010436  BFD2               	btfsc	(___flmul@temp+1)& (0+255),7,b
 13187  010438  D007               	goto	u10260
 13188  01043A  0100               	movlb	0	; () banked
 13189  01043C  51D2               	movf	(___flmul@temp+1)& (0+255),w,b
 13190  01043E  E111               	bnz	l2958
 13191  010440  0100               	movlb	0	; () banked
 13192  010442  05D1               	decf	___flmul@temp& (0+255),w,b
 13193  010444  B0D8               	btfsc	status,0,c
 13194  010446  D00D               	goto	l2958
 13195  010448                     u10260:
 13196                           
 13197                           ; BSR set to: 0
 13198  010448  0E00               	movlw	0
 13199  01044A  0100               	movlb	0	; () banked
 13200  01044C  6FCD               	movwf	___flmul@prod& (0+255),b
 13201  01044E  0E00               	movlw	0
 13202  010450  6FCE               	movwf	(___flmul@prod+1)& (0+255),b
 13203  010452  0E00               	movlw	0
 13204  010454  6FCF               	movwf	(___flmul@prod+2)& (0+255),b
 13205  010456  0E00               	movlw	0
 13206  010458  6FD0               	movwf	(___flmul@prod+3)& (0+255),b
 13207  01045A  0E00               	movlw	0
 13208  01045C  0100               	movlb	0	; () banked
 13209  01045E  6FC6               	movwf	___flmul@sign& (0+255),b
 13210  010460  D015               	goto	l2959
 13211  010462                     l2958:
 13212                           
 13213                           ; BSR set to: 0
 13214  010462  C0D1  F0CC         	movff	___flmul@temp,___flmul@bexp
 13215                           
 13216                           ; BSR set to: 0
 13217  010466  0EFF               	movlw	255
 13218  010468  0100               	movlb	0	; () banked
 13219  01046A  17CD               	andwf	___flmul@prod& (0+255),f,b
 13220  01046C  0EFF               	movlw	255
 13221  01046E  17CE               	andwf	(___flmul@prod+1)& (0+255),f,b
 13222  010470  0E7F               	movlw	127
 13223  010472  17CF               	andwf	(___flmul@prod+2)& (0+255),f,b
 13224  010474  0E00               	movlw	0
 13225  010476  17D0               	andwf	(___flmul@prod+3)& (0+255),f,b
 13226                           
 13227                           ; BSR set to: 0
 13228  010478  0100               	movlb	0	; () banked
 13229  01047A  A1CC               	btfss	___flmul@bexp& (0+255),0,b
 13230  01047C  D002               	goto	l2960
 13231                           
 13232                           ; BSR set to: 0
 13233  01047E  0100               	movlb	0	; () banked
 13234  010480  8FCF               	bsf	(___flmul@prod+2)& (0+255),7,b
 13235  010482                     l2960:
 13236                           
 13237                           ; BSR set to: 0
 13238                           
 13239                           ; BSR set to: 0
 13240  010482  0100               	movlb	0	; () banked
 13241  010484  90D8               	bcf	status,0,c
 13242  010486  31CC               	rrcf	___flmul@bexp& (0+255),w,b
 13243  010488  0100               	movlb	0	; () banked
 13244  01048A                     L5:
 13245  01048A  6FD0               	movwf	(___flmul@prod+3)& (0+255),b
 13246  01048C                     l2959:
 13247                           
 13248                           ; BSR set to: 0
 13249                           
 13250                           ; BSR set to: 0
 13251                           
 13252                           ; BSR set to: 0
 13253  01048C  0100               	movlb	0	; () banked
 13254  01048E  51C6               	movf	___flmul@sign& (0+255),w,b
 13255  010490  0100               	movlb	0	; () banked
 13256  010492  13D0               	iorwf	(___flmul@prod+3)& (0+255),f,b
 13257                           
 13258                           ; BSR set to: 0
 13259  010494  C0CD  F0BA         	movff	___flmul@prod,?___flmul
 13260  010498  C0CE  F0BB         	movff	___flmul@prod+1,?___flmul+1
 13261  01049C  C0CF  F0BC         	movff	___flmul@prod+2,?___flmul+2
 13262  0104A0  C0D0  F0BD         	movff	___flmul@prod+3,?___flmul+3
 13263  0104A4  0012               	return	
 13264  0104A6                     __end_of___flmul:
 13265                           	opt stack 0
 13266                           tosu	equ	0xFFF
 13267                           tosh	equ	0xFFE
 13268                           tosl	equ	0xFFD
 13269                           pclath	equ	0xFFA
 13270                           tblptru	equ	0xFF8
 13271                           tblptrh	equ	0xFF7
 13272                           tblptrl	equ	0xFF6
 13273                           tablat	equ	0xFF5
 13274                           prodh	equ	0xFF4
 13275                           prodl	equ	0xFF3
 13276                           intcon	equ	0xFF2
 13277                           postinc0	equ	0xFEE
 13278                           wreg	equ	0xFE8
 13279                           indf1	equ	0xFE7
 13280                           postdec1	equ	0xFE5
 13281                           fsr1h	equ	0xFE2
 13282                           fsr1l	equ	0xFE1
 13283                           indf2	equ	0xFDF
 13284                           postinc2	equ	0xFDE
 13285                           postdec2	equ	0xFDD
 13286                           plusw2	equ	0xFDB
 13287                           fsr2h	equ	0xFDA
 13288                           fsr2l	equ	0xFD9
 13289                           status	equ	0xFD8
 13290                           
 13291 ;; *************** function ___fldiv *****************
 13292 ;; Defined at:
 13293 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 13294 ;; Parameters:    Size  Location     Type
 13295 ;;  b               4    0[BANK0 ] unsigned char 
 13296 ;;  a               4    4[BANK0 ] unsigned char 
 13297 ;; Auto vars:     Size  Location     Type
 13298 ;;  grs             4   19[BANK0 ] unsigned long 
 13299 ;;  rem             4   13[BANK0 ] unsigned long 
 13300 ;;  new_exp         2   17[BANK0 ] int 
 13301 ;;  aexp            1   24[BANK0 ] unsigned char 
 13302 ;;  bexp            1   23[BANK0 ] unsigned char 
 13303 ;;  sign            1   12[BANK0 ] unsigned char 
 13304 ;; Return value:  Size  Location     Type
 13305 ;;                  4    0[BANK0 ] unsigned char 
 13306 ;; Registers used:
 13307 ;;		wreg, status,2, status,0
 13308 ;; Tracked objects:
 13309 ;;		On entry : 0/0
 13310 ;;		On exit  : 0/0
 13311 ;;		Unchanged: 0/0
 13312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13313 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13314 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13315 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13316 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13317 ;;Total ram usage:       25 bytes
 13318 ;; Hardware stack levels used:    1
 13319 ;; Hardware stack levels required when called:    7
 13320 ;; This function calls:
 13321 ;;		Nothing
 13322 ;; This function is called by:
 13323 ;;		_ADC_Voltage
 13324 ;;		_mode1
 13325 ;; This function uses a non-reentrant model
 13326 ;;
 13327                           
 13328                           	psect	text59
 13329  010CE8                     __ptext59:
 13330                           	opt stack 0
 13331  010CE8                     ___fldiv:
 13332                           	opt stack 22
 13333                           
 13334                           ; BSR set to: 0
 13335                           ;incstack = 0
 13336  010CE8  0100               	movlb	0	; () banked
 13337  010CEA  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 13338  010CEC  0B80               	andlw	128
 13339  010CEE  0100               	movlb	0	; () banked
 13340  010CF0  6FC6               	movwf	___fldiv@sign& (0+255),b
 13341  010CF2  0100               	movlb	0	; () banked
 13342  010CF4  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 13343  010CF6  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 13344  010CF8  0100               	movlb	0	; () banked
 13345  010CFA  6FD1               	movwf	___fldiv@bexp& (0+255),b
 13346                           
 13347                           ; BSR set to: 0
 13348  010CFC  0100               	movlb	0	; () banked
 13349  010CFE  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 13350  010D00  D002               	goto	l2900
 13351                           
 13352                           ; BSR set to: 0
 13353  010D02  0100               	movlb	0	; () banked
 13354  010D04  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 13355  010D06                     l2900:
 13356                           
 13357                           ; BSR set to: 0
 13358                           
 13359                           ; BSR set to: 0
 13360  010D06  0100               	movlb	0	; () banked
 13361  010D08  51D1               	movf	___fldiv@bexp& (0+255),w,b
 13362  010D0A  0100               	movlb	0	; () banked
 13363  010D0C  B4D8               	btfsc	status,2,c
 13364  010D0E  D012               	goto	l2901
 13365                           
 13366                           ; BSR set to: 0
 13367  010D10  0100               	movlb	0	; () banked
 13368  010D12  29D1               	incf	___fldiv@bexp& (0+255),w,b
 13369  010D14  A4D8               	btfss	status,2,c
 13370  010D16  D009               	goto	l2902
 13371                           
 13372                           ; BSR set to: 0
 13373  010D18  0E00               	movlw	0
 13374  010D1A  0100               	movlb	0	; () banked
 13375  010D1C  6FBA               	movwf	___fldiv@b& (0+255),b
 13376  010D1E  0E00               	movlw	0
 13377  010D20  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13378  010D22  0E00               	movlw	0
 13379  010D24  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13380  010D26  0E00               	movlw	0
 13381  010D28  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13382  010D2A                     l2902:
 13383                           
 13384                           ; BSR set to: 0
 13385                           
 13386                           ; BSR set to: 0
 13387  010D2A  0100               	movlb	0	; () banked
 13388  010D2C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 13389                           
 13390                           ; BSR set to: 0
 13391  010D2E  0E00               	movlw	0
 13392  010D30  0100               	movlb	0	; () banked
 13393  010D32  D008               	goto	L6
 13394  010D34                     l2901:
 13395                           
 13396                           ; BSR set to: 0
 13397                           
 13398                           ; BSR set to: 0
 13399  010D34  0E00               	movlw	0
 13400  010D36  0100               	movlb	0	; () banked
 13401  010D38  6FBA               	movwf	___fldiv@b& (0+255),b
 13402  010D3A  0E00               	movlw	0
 13403  010D3C  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13404  010D3E  0E00               	movlw	0
 13405  010D40  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13406  010D42  0E00               	movlw	0
 13407  010D44                     L6:
 13408  010D44  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13409                           
 13410                           ; BSR set to: 0
 13411                           
 13412                           ; BSR set to: 0
 13413  010D46  0100               	movlb	0	; () banked
 13414  010D48  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 13415  010D4A  0B80               	andlw	128
 13416  010D4C  0100               	movlb	0	; () banked
 13417  010D4E  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 13418                           
 13419                           ; BSR set to: 0
 13420  010D50  0100               	movlb	0	; () banked
 13421  010D52  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 13422  010D54  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 13423  010D56  0100               	movlb	0	; () banked
 13424  010D58  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13425                           
 13426                           ; BSR set to: 0
 13427  010D5A  0100               	movlb	0	; () banked
 13428  010D5C  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 13429  010D5E  D002               	goto	l2904
 13430                           
 13431                           ; BSR set to: 0
 13432  010D60  0100               	movlb	0	; () banked
 13433  010D62  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 13434  010D64                     l2904:
 13435                           
 13436                           ; BSR set to: 0
 13437                           
 13438                           ; BSR set to: 0
 13439  010D64  0100               	movlb	0	; () banked
 13440  010D66  51D2               	movf	___fldiv@aexp& (0+255),w,b
 13441  010D68  0100               	movlb	0	; () banked
 13442  010D6A  B4D8               	btfsc	status,2,c
 13443  010D6C  D012               	goto	l2905
 13444                           
 13445                           ; BSR set to: 0
 13446  010D6E  0100               	movlb	0	; () banked
 13447  010D70  29D2               	incf	___fldiv@aexp& (0+255),w,b
 13448  010D72  A4D8               	btfss	status,2,c
 13449  010D74  D009               	goto	l2906
 13450                           
 13451                           ; BSR set to: 0
 13452  010D76  0E00               	movlw	0
 13453  010D78  0100               	movlb	0	; () banked
 13454  010D7A  6FBE               	movwf	___fldiv@a& (0+255),b
 13455  010D7C  0E00               	movlw	0
 13456  010D7E  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 13457  010D80  0E00               	movlw	0
 13458  010D82  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 13459  010D84  0E00               	movlw	0
 13460  010D86  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 13461  010D88                     l2906:
 13462                           
 13463                           ; BSR set to: 0
 13464                           
 13465                           ; BSR set to: 0
 13466  010D88  0100               	movlb	0	; () banked
 13467  010D8A  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 13468                           
 13469                           ; BSR set to: 0
 13470  010D8C  0E00               	movlw	0
 13471  010D8E  0100               	movlb	0	; () banked
 13472  010D90  D008               	goto	L7
 13473  010D92                     l2905:
 13474                           
 13475                           ; BSR set to: 0
 13476                           
 13477                           ; BSR set to: 0
 13478  010D92  0E00               	movlw	0
 13479  010D94  0100               	movlb	0	; () banked
 13480  010D96  6FBE               	movwf	___fldiv@a& (0+255),b
 13481  010D98  0E00               	movlw	0
 13482  010D9A  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 13483  010D9C  0E00               	movlw	0
 13484  010D9E  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 13485  010DA0  0E00               	movlw	0
 13486  010DA2                     L7:
 13487  010DA2  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 13488                           
 13489                           ; BSR set to: 0
 13490                           
 13491                           ; BSR set to: 0
 13492  010DA4  0100               	movlb	0	; () banked
 13493  010DA6  51BE               	movf	___fldiv@a& (0+255),w,b
 13494  010DA8  0100               	movlb	0	; () banked
 13495  010DAA  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 13496  010DAC  0100               	movlb	0	; () banked
 13497  010DAE  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 13498  010DB0  0100               	movlb	0	; () banked
 13499  010DB2  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 13500  010DB4  A4D8               	btfss	status,2,c
 13501  010DB6  D017               	goto	l2908
 13502                           
 13503                           ; BSR set to: 0
 13504  010DB8  0E00               	movlw	0
 13505  010DBA  0100               	movlb	0	; () banked
 13506  010DBC  6FBA               	movwf	___fldiv@b& (0+255),b
 13507  010DBE  0E00               	movlw	0
 13508  010DC0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13509  010DC2  0E00               	movlw	0
 13510  010DC4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13511  010DC6  0E00               	movlw	0
 13512  010DC8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13513                           
 13514                           ; BSR set to: 0
 13515  010DCA  0100               	movlb	0	; () banked
 13516  010DCC  0E80               	movlw	128
 13517  010DCE  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 13518  010DD0  0E7F               	movlw	127
 13519  010DD2  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 13520                           
 13521                           ; BSR set to: 0
 13522  010DD4  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 13523  010DD8  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 13524  010DDC  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 13525  010DE0  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 13526                           
 13527                           ; BSR set to: 0
 13528  010DE4  0012               	return	
 13529  010DE6                     l2908:
 13530                           
 13531                           ; BSR set to: 0
 13532                           
 13533                           ; BSR set to: 0
 13534  010DE6  0100               	movlb	0	; () banked
 13535  010DE8  51D1               	movf	___fldiv@bexp& (0+255),w,b
 13536  010DEA  0100               	movlb	0	; () banked
 13537  010DEC  A4D8               	btfss	status,2,c
 13538  010DEE  D012               	goto	l2910
 13539                           
 13540                           ; BSR set to: 0
 13541  010DF0  0E00               	movlw	0
 13542  010DF2  0100               	movlb	0	; () banked
 13543  010DF4  6FBA               	movwf	___fldiv@b& (0+255),b
 13544  010DF6  0E00               	movlw	0
 13545  010DF8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13546  010DFA  0E00               	movlw	0
 13547  010DFC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13548  010DFE  0E00               	movlw	0
 13549  010E00  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13550                           
 13551                           ; BSR set to: 0
 13552  010E02  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 13553  010E06  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 13554  010E0A  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 13555  010E0E  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 13556                           
 13557                           ; BSR set to: 0
 13558  010E12  0012               	return	
 13559  010E14                     l2910:
 13560                           
 13561                           ; BSR set to: 0
 13562                           
 13563                           ; BSR set to: 0
 13564  010E14  0100               	movlb	0	; () banked
 13565  010E16  51D2               	movf	___fldiv@aexp& (0+255),w,b
 13566  010E18  0100               	movlb	0	; () banked
 13567  010E1A  6FC2               	movwf	??___fldiv& (0+255),b
 13568  010E1C  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 13569  010E1E  0100               	movlb	0	; () banked
 13570  010E20  1FC2               	comf	??___fldiv& (0+255),f,b
 13571  010E22  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 13572  010E24  4BC2               	infsnz	??___fldiv& (0+255),f,b
 13573  010E26  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 13574  010E28  0100               	movlb	0	; () banked
 13575  010E2A  51D1               	movf	___fldiv@bexp& (0+255),w,b
 13576  010E2C  0100               	movlb	0	; () banked
 13577  010E2E  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 13578  010E30  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 13579  010E32  0100               	movlb	0	; () banked
 13580  010E34  51C2               	movf	??___fldiv& (0+255),w,b
 13581  010E36  0100               	movlb	0	; () banked
 13582  010E38  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 13583  010E3A  0100               	movlb	0	; () banked
 13584  010E3C  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 13585  010E3E  0100               	movlb	0	; () banked
 13586  010E40  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 13587  010E42  0E7F               	movlw	127
 13588  010E44  0100               	movlb	0	; () banked
 13589  010E46  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 13590  010E48  0100               	movlb	0	; () banked
 13591  010E4A  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 13592  010E4C  0E00               	movlw	0
 13593  010E4E  0100               	movlb	0	; () banked
 13594  010E50  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 13595  010E52  0100               	movlb	0	; () banked
 13596  010E54  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13597                           
 13598                           ; BSR set to: 0
 13599  010E56  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 13600  010E5A  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 13601  010E5E  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 13602  010E62  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 13603                           
 13604                           ; BSR set to: 0
 13605  010E66  0E00               	movlw	0
 13606  010E68  0100               	movlb	0	; () banked
 13607  010E6A  6FBA               	movwf	___fldiv@b& (0+255),b
 13608  010E6C  0E00               	movlw	0
 13609  010E6E  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13610  010E70  0E00               	movlw	0
 13611  010E72  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13612  010E74  0E00               	movlw	0
 13613  010E76  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13614                           
 13615                           ; BSR set to: 0
 13616  010E78  0E00               	movlw	0
 13617  010E7A  0100               	movlb	0	; () banked
 13618  010E7C  6FCD               	movwf	___fldiv@grs& (0+255),b
 13619  010E7E  0E00               	movlw	0
 13620  010E80  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 13621  010E82  0E00               	movlw	0
 13622  010E84  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 13623  010E86  0E00               	movlw	0
 13624  010E88  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 13625                           
 13626                           ; BSR set to: 0
 13627  010E8A  0E00               	movlw	0
 13628  010E8C  0100               	movlb	0	; () banked
 13629  010E8E  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13630  010E90  D042               	goto	l2911
 13631  010E92                     
 13632                           ; BSR set to: 0
 13633                           
 13634                           ; BSR set to: 0
 13635  010E92  0100               	movlb	0	; () banked
 13636  010E94  51D2               	movf	___fldiv@aexp& (0+255),w,b
 13637  010E96  0100               	movlb	0	; () banked
 13638  010E98  B4D8               	btfsc	status,2,c
 13639  010E9A  D017               	goto	l2913
 13640                           
 13641                           ; BSR set to: 0
 13642  010E9C  0100               	movlb	0	; () banked
 13643  010E9E  90D8               	bcf	status,0,c
 13644  010EA0  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 13645  010EA2  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 13646  010EA4  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 13647  010EA6  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 13648  010EA8  0100               	movlb	0	; () banked
 13649  010EAA  90D8               	bcf	status,0,c
 13650  010EAC  37BA               	rlcf	___fldiv@b& (0+255),f,b
 13651  010EAE  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13652  010EB0  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13653  010EB2  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13654                           
 13655                           ; BSR set to: 0
 13656  010EB4  0100               	movlb	0	; () banked
 13657  010EB6  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13658  010EB8  D002               	goto	l2914
 13659                           
 13660                           ; BSR set to: 0
 13661  010EBA  0100               	movlb	0	; () banked
 13662  010EBC  81BA               	bsf	___fldiv@b& (0+255),0,b
 13663  010EBE                     l2914:
 13664                           
 13665                           ; BSR set to: 0
 13666  010EBE  0100               	movlb	0	; () banked
 13667  010EC0  90D8               	bcf	status,0,c
 13668  010EC2  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 13669  010EC4  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13670  010EC6  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13671  010EC8  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13672  010ECA                     l2913:
 13673                           
 13674                           ; BSR set to: 0
 13675                           
 13676                           ; BSR set to: 0
 13677  010ECA  0100               	movlb	0	; () banked
 13678  010ECC  51BE               	movf	___fldiv@a& (0+255),w,b
 13679  010ECE  0100               	movlb	0	; () banked
 13680  010ED0  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 13681  010ED2  0100               	movlb	0	; () banked
 13682  010ED4  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 13683  010ED6  0100               	movlb	0	; () banked
 13684  010ED8  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 13685  010EDA  0100               	movlb	0	; () banked
 13686  010EDC  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 13687  010EDE  0100               	movlb	0	; () banked
 13688  010EE0  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 13689  010EE2  0100               	movlb	0	; () banked
 13690  010EE4  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 13691  010EE6  0100               	movlb	0	; () banked
 13692  010EE8  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 13693  010EEA  A0D8               	btfss	status,0,c
 13694  010EEC  D012               	goto	l2915
 13695                           
 13696                           ; BSR set to: 0
 13697  010EEE  0100               	movlb	0	; () banked
 13698  010EF0  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 13699                           
 13700                           ; BSR set to: 0
 13701  010EF2  0100               	movlb	0	; () banked
 13702  010EF4  51BE               	movf	___fldiv@a& (0+255),w,b
 13703  010EF6  0100               	movlb	0	; () banked
 13704  010EF8  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 13705  010EFA  0100               	movlb	0	; () banked
 13706  010EFC  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 13707  010EFE  0100               	movlb	0	; () banked
 13708  010F00  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 13709  010F02  0100               	movlb	0	; () banked
 13710  010F04  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 13711  010F06  0100               	movlb	0	; () banked
 13712  010F08  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 13713  010F0A  0100               	movlb	0	; () banked
 13714  010F0C  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 13715  010F0E  0100               	movlb	0	; () banked
 13716  010F10  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 13717  010F12                     l2915:
 13718                           
 13719                           ; BSR set to: 0
 13720                           
 13721                           ; BSR set to: 0
 13722  010F12  0100               	movlb	0	; () banked
 13723  010F14  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 13724  010F16                     l2911:
 13725                           
 13726                           ; BSR set to: 0
 13727  010F16  0E19               	movlw	25
 13728  010F18  0100               	movlb	0	; () banked
 13729  010F1A  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 13730  010F1C  D7BA               	goto	l2912
 13731                           
 13732                           ; BSR set to: 0
 13733                           
 13734                           ; BSR set to: 0
 13735  010F1E  0100               	movlb	0	; () banked
 13736  010F20  51C7               	movf	___fldiv@rem& (0+255),w,b
 13737  010F22  0100               	movlb	0	; () banked
 13738  010F24  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 13739  010F26  0100               	movlb	0	; () banked
 13740  010F28  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 13741  010F2A  0100               	movlb	0	; () banked
 13742  010F2C  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 13743  010F2E  B4D8               	btfsc	status,2,c
 13744  010F30  D018               	goto	l2918
 13745                           
 13746                           ; BSR set to: 0
 13747  010F32  0100               	movlb	0	; () banked
 13748  010F34  81CD               	bsf	___fldiv@grs& (0+255),0,b
 13749                           
 13750                           ; BSR set to: 0
 13751  010F36  D015               	goto	l2918
 13752  010F38                     
 13753                           ; BSR set to: 0
 13754                           
 13755                           ; BSR set to: 0
 13756  010F38  0100               	movlb	0	; () banked
 13757  010F3A  90D8               	bcf	status,0,c
 13758  010F3C  37BA               	rlcf	___fldiv@b& (0+255),f,b
 13759  010F3E  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 13760  010F40  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 13761  010F42  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 13762                           
 13763                           ; BSR set to: 0
 13764  010F44  0100               	movlb	0	; () banked
 13765  010F46  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13766  010F48  D002               	goto	l2920
 13767                           
 13768                           ; BSR set to: 0
 13769  010F4A  0100               	movlb	0	; () banked
 13770  010F4C  81BA               	bsf	___fldiv@b& (0+255),0,b
 13771  010F4E                     l2920:
 13772                           
 13773                           ; BSR set to: 0
 13774  010F4E  0100               	movlb	0	; () banked
 13775  010F50  90D8               	bcf	status,0,c
 13776  010F52  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 13777  010F54  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 13778  010F56  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 13779  010F58  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 13780  010F5A  0100               	movlb	0	; () banked
 13781  010F5C  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 13782  010F5E  A0D8               	btfss	status,0,c
 13783  010F60  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 13784  010F62                     l2918:
 13785                           
 13786                           ; BSR set to: 0
 13787                           
 13788                           ; BSR set to: 0
 13789  010F62  0100               	movlb	0	; () banked
 13790  010F64  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 13791  010F66  D7E8               	goto	l2919
 13792                           
 13793                           ; BSR set to: 0
 13794                           
 13795                           ; BSR set to: 0
 13796  010F68  0E00               	movlw	0
 13797  010F6A  0100               	movlb	0	; () banked
 13798  010F6C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13799                           
 13800                           ; BSR set to: 0
 13801  010F6E  0100               	movlb	0	; () banked
 13802  010F70  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 13803  010F72  D024               	goto	l2925
 13804                           
 13805                           ; BSR set to: 0
 13806  010F74  0EFF               	movlw	255
 13807  010F76  0100               	movlb	0	; () banked
 13808  010F78  15CD               	andwf	___fldiv@grs& (0+255),w,b
 13809  010F7A  0100               	movlb	0	; () banked
 13810  010F7C  6FC2               	movwf	??___fldiv& (0+255),b
 13811  010F7E  0EFF               	movlw	255
 13812  010F80  0100               	movlb	0	; () banked
 13813  010F82  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 13814  010F84  0100               	movlb	0	; () banked
 13815  010F86  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 13816  010F88  0EFF               	movlw	255
 13817  010F8A  0100               	movlb	0	; () banked
 13818  010F8C  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 13819  010F8E  0100               	movlb	0	; () banked
 13820  010F90  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 13821  010F92  0E7F               	movlw	127
 13822  010F94  0100               	movlb	0	; () banked
 13823  010F96  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 13824  010F98  0100               	movlb	0	; () banked
 13825  010F9A  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 13826  010F9C  0100               	movlb	0	; () banked
 13827  010F9E  51C2               	movf	??___fldiv& (0+255),w,b
 13828  010FA0  0100               	movlb	0	; () banked
 13829  010FA2  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 13830  010FA4  0100               	movlb	0	; () banked
 13831  010FA6  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 13832  010FA8  0100               	movlb	0	; () banked
 13833  010FAA  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 13834  010FAC  A4D8               	btfss	status,2,c
 13835  010FAE  D003               	goto	u10030
 13836                           
 13837                           ; BSR set to: 0
 13838                           
 13839                           ; BSR set to: 0
 13840  010FB0  0100               	movlb	0	; () banked
 13841  010FB2  A1BA               	btfss	___fldiv@b& (0+255),0,b
 13842  010FB4  D003               	goto	l2925
 13843  010FB6                     u10030:
 13844                           
 13845                           ; BSR set to: 0
 13846  010FB6  0E01               	movlw	1
 13847  010FB8  0100               	movlb	0	; () banked
 13848  010FBA  6FD2               	movwf	___fldiv@aexp& (0+255),b
 13849  010FBC                     l2925:
 13850                           
 13851                           ; BSR set to: 0
 13852                           
 13853                           ; BSR set to: 0
 13854                           
 13855                           ; BSR set to: 0
 13856  010FBC  0100               	movlb	0	; () banked
 13857  010FBE  51D2               	movf	___fldiv@aexp& (0+255),w,b
 13858  010FC0  0100               	movlb	0	; () banked
 13859  010FC2  B4D8               	btfsc	status,2,c
 13860  010FC4  D023               	goto	l2927
 13861                           
 13862                           ; BSR set to: 0
 13863  010FC6  0E01               	movlw	1
 13864  010FC8  0100               	movlb	0	; () banked
 13865  010FCA  27BA               	addwf	___fldiv@b& (0+255),f,b
 13866  010FCC  0E00               	movlw	0
 13867  010FCE  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 13868  010FD0  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 13869  010FD2  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 13870                           
 13871                           ; BSR set to: 0
 13872  010FD4  0100               	movlb	0	; () banked
 13873  010FD6  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 13874  010FD8  D019               	goto	l2927
 13875                           
 13876                           ; BSR set to: 0
 13877  010FDA  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 13878  010FDE  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 13879  010FE2  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 13880  010FE6  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 13881  010FEA  0100               	movlb	0	; () banked
 13882  010FEC  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 13883  010FEE  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 13884  010FF0  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 13885  010FF2  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 13886  010FF4  33C2               	rrcf	??___fldiv& (0+255),f,b
 13887  010FF6  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 13888  010FFA  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 13889  010FFE  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 13890  011002  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 13891                           
 13892                           ; BSR set to: 0
 13893  011006  0100               	movlb	0	; () banked
 13894  011008  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 13895  01100A  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 13896  01100C                     l2927:
 13897                           
 13898                           ; BSR set to: 0
 13899                           
 13900                           ; BSR set to: 0
 13901                           
 13902                           ; BSR set to: 0
 13903  01100C  0100               	movlb	0	; () banked
 13904  01100E  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13905  011010  D014               	goto	l2928
 13906  011012  0100               	movlb	0	; () banked
 13907  011014  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13908  011016  E104               	bnz	u10060
 13909  011018  0100               	movlb	0	; () banked
 13910  01101A  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 13911  01101C  A0D8               	btfss	status,0,c
 13912  01101E  D00D               	goto	l2928
 13913  011020                     u10060:
 13914                           
 13915                           ; BSR set to: 0
 13916  011020  0E00               	movlw	0
 13917  011022  0100               	movlb	0	; () banked
 13918  011024  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13919  011026  69CB               	setf	___fldiv@new_exp& (0+255),b
 13920  011028  0E00               	movlw	0
 13921  01102A  0100               	movlb	0	; () banked
 13922  01102C  6FBA               	movwf	___fldiv@b& (0+255),b
 13923  01102E  0E00               	movlw	0
 13924  011030  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13925  011032  0E00               	movlw	0
 13926  011034  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13927  011036  0E00               	movlw	0
 13928  011038  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13929  01103A                     l2928:
 13930                           
 13931                           ; BSR set to: 0
 13932                           
 13933                           ; BSR set to: 0
 13934  01103A  0100               	movlb	0	; () banked
 13935  01103C  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 13936  01103E  D007               	goto	u10070
 13937  011040  0100               	movlb	0	; () banked
 13938  011042  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 13939  011044  E115               	bnz	l13545
 13940  011046  0100               	movlb	0	; () banked
 13941  011048  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 13942  01104A  B0D8               	btfsc	status,0,c
 13943  01104C  D011               	goto	l2929
 13944  01104E                     u10070:
 13945                           
 13946                           ; BSR set to: 0
 13947  01104E  0E00               	movlw	0
 13948  011050  0100               	movlb	0	; () banked
 13949  011052  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 13950  011054  0E00               	movlw	0
 13951  011056  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 13952  011058  0E00               	movlw	0
 13953  01105A  0100               	movlb	0	; () banked
 13954  01105C  6FBA               	movwf	___fldiv@b& (0+255),b
 13955  01105E  0E00               	movlw	0
 13956  011060  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 13957  011062  0E00               	movlw	0
 13958  011064  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 13959  011066  0E00               	movlw	0
 13960  011068  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13961  01106A  0E00               	movlw	0
 13962  01106C  0100               	movlb	0	; () banked
 13963  01106E  6FC6               	movwf	___fldiv@sign& (0+255),b
 13964  011070                     l2929:
 13965  011070                     l13545:
 13966                           
 13967                           ; BSR set to: 0
 13968  011070  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 13969                           
 13970                           ; BSR set to: 0
 13971  011074  0100               	movlb	0	; () banked
 13972  011076  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 13973  011078  D003               	goto	l2930
 13974                           
 13975                           ; BSR set to: 0
 13976  01107A  0100               	movlb	0	; () banked
 13977  01107C  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 13978  01107E  D002               	goto	l2931
 13979  011080                     l2930:
 13980                           
 13981                           ; BSR set to: 0
 13982                           
 13983                           ; BSR set to: 0
 13984  011080  0100               	movlb	0	; () banked
 13985  011082  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 13986  011084                     l2931:
 13987                           
 13988                           ; BSR set to: 0
 13989                           
 13990                           ; BSR set to: 0
 13991  011084  0100               	movlb	0	; () banked
 13992  011086  90D8               	bcf	status,0,c
 13993  011088  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 13994  01108A  0100               	movlb	0	; () banked
 13995  01108C  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 13996                           
 13997                           ; BSR set to: 0
 13998  01108E  0100               	movlb	0	; () banked
 13999  011090  51C6               	movf	___fldiv@sign& (0+255),w,b
 14000  011092  0100               	movlb	0	; () banked
 14001  011094  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 14002                           
 14003                           ; BSR set to: 0
 14004  011096  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 14005  01109A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 14006  01109E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 14007  0110A2  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 14008  0110A6  0012               	return	
 14009  0110A8                     __end_of___fldiv:
 14010                           	opt stack 0
 14011                           tosu	equ	0xFFF
 14012                           tosh	equ	0xFFE
 14013                           tosl	equ	0xFFD
 14014                           pclath	equ	0xFFA
 14015                           tblptru	equ	0xFF8
 14016                           tblptrh	equ	0xFF7
 14017                           tblptrl	equ	0xFF6
 14018                           tablat	equ	0xFF5
 14019                           prodh	equ	0xFF4
 14020                           prodl	equ	0xFF3
 14021                           intcon	equ	0xFF2
 14022                           postinc0	equ	0xFEE
 14023                           wreg	equ	0xFE8
 14024                           indf1	equ	0xFE7
 14025                           postdec1	equ	0xFE5
 14026                           fsr1h	equ	0xFE2
 14027                           fsr1l	equ	0xFE1
 14028                           indf2	equ	0xFDF
 14029                           postinc2	equ	0xFDE
 14030                           postdec2	equ	0xFDD
 14031                           plusw2	equ	0xFDB
 14032                           fsr2h	equ	0xFDA
 14033                           fsr2l	equ	0xFD9
 14034                           status	equ	0xFD8
 14035                           
 14036 ;; *************** function _init *****************
 14037 ;; Defined at:
 14038 ;;		line 62 in file "main.c"
 14039 ;; Parameters:    Size  Location     Type
 14040 ;;		None
 14041 ;; Auto vars:     Size  Location     Type
 14042 ;;		None
 14043 ;; Return value:  Size  Location     Type
 14044 ;;                  1    wreg      void 
 14045 ;; Registers used:
 14046 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 14047 ;; Tracked objects:
 14048 ;;		On entry : 0/0
 14049 ;;		On exit  : 0/0
 14050 ;;		Unchanged: 0/0
 14051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14055 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14056 ;;Total ram usage:        0 bytes
 14057 ;; Hardware stack levels used:    1
 14058 ;; Hardware stack levels required when called:   17
 14059 ;; This function calls:
 14060 ;;		_ADC_Init
 14061 ;;		_ADC_Start
 14062 ;;		_Console_Init
 14063 ;;		_HMI_Init
 14064 ;;		_ISR_Enable
 14065 ;;		_LCD_Init
 14066 ;;		_MXK_BlockSwitchTo
 14067 ;;		_MXK_Dequeue
 14068 ;;		_MXK_Init
 14069 ;;		_MXK_Release
 14070 ;;		_Motor_Init
 14071 ;;		_delay_ms
 14072 ;;		_eusart_init
 14073 ;;		_irobot_init
 14074 ;;		_irobot_init_song_0
 14075 ;;		_irobot_led_power_on
 14076 ;; This function is called by:
 14077 ;;		_main
 14078 ;; This function uses a non-reentrant model
 14079 ;;
 14080                           
 14081                           	psect	text60
 14082  013F48                     __ptext60:
 14083                           	opt stack 0
 14084  013F48                     _init:
 14085                           	opt stack 13
 14086                           
 14087                           ;main.c: 64: MXK_Init();
 14088                           
 14089                           ; BSR set to: 0
 14090                           ;incstack = 0
 14091  013F48  ECBB  F094         	call	_MXK_Init	;wreg free
 14092                           
 14093                           ;main.c: 67: ISR_Enable();
 14094  013F4C  ECAB  F0B0         	call	_ISR_Enable	;wreg free
 14095                           
 14096                           ;main.c: 70: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 14097  013F50  0E01               	movlw	1
 14098  013F52  EC18  F0AD         	call	_MXK_BlockSwitchTo
 14099  013F56  0900               	iorlw	0
 14100  013F58  B4D8               	btfsc	status,2,c
 14101  013F5A  D00C               	goto	l2296
 14102                           
 14103                           ;main.c: 71: Console_Init();
 14104  013F5C  EC7A  F0A4         	call	_Console_Init	;wreg free
 14105                           
 14106                           ;main.c: 72: HMI_Init();
 14107  013F60  ECBB  F08E         	call	_HMI_Init	;wreg free
 14108                           
 14109                           ;main.c: 73: LCD_Init();
 14110  013F64  EC7B  F095         	call	_LCD_Init	;wreg free
 14111                           
 14112                           ;main.c: 74: if (MXK_Release())
 14113  013F68  ECA7  F0AF         	call	_MXK_Release	;wreg free
 14114  013F6C  0900               	iorlw	0
 14115  013F6E  A4D8               	btfss	status,2,c
 14116                           
 14117                           ;main.c: 75: MXK_Dequeue();
 14118  013F70  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
 14119  013F74                     l2296:
 14120                           
 14121                           ;main.c: 76: }
 14122                           ;main.c: 79: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 14123  013F74  0E08               	movlw	8
 14124  013F76  EC18  F0AD         	call	_MXK_BlockSwitchTo
 14125  013F7A  0900               	iorlw	0
 14126  013F7C  B4D8               	btfsc	status,2,c
 14127  013F7E  D013               	goto	l2298
 14128                           
 14129                           ;main.c: 80: Motor_Init(&Stepper, 0b1000);
 14130  013F80  0ECF               	movlw	low _Stepper
 14131  013F82  0100               	movlb	0	; () banked
 14132  013F84  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 14133  013F86  0E03               	movlw	high _Stepper
 14134  013F88  0100               	movlb	0	; () banked
 14135  013F8A  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 14136  013F8C  0E00               	movlw	0
 14137  013F8E  0100               	movlb	0	; () banked
 14138  013F90  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 14139  013F92  0E08               	movlw	8
 14140  013F94  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 14141  013F96  EC8A  F09C         	call	_Motor_Init	;wreg free
 14142                           
 14143                           ;main.c: 81: if (MXK_Release())
 14144  013F9A  ECA7  F0AF         	call	_MXK_Release	;wreg free
 14145  013F9E  0900               	iorlw	0
 14146  013FA0  A4D8               	btfss	status,2,c
 14147                           
 14148                           ;main.c: 82: MXK_Dequeue();
 14149  013FA2  ECF9  F0AC         	call	_MXK_Dequeue	;wreg free
 14150  013FA6                     l2298:
 14151                           
 14152                           ;main.c: 83: }
 14153                           ;main.c: 86: ADC_Init (&ADC_AN0, eADC_Ch0);
 14154  013FA6  0EB5               	movlw	low _ADC_AN0
 14155  013FA8  0100               	movlb	0	; () banked
 14156  013FAA  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 14157  013FAC  0E00               	movlw	high _ADC_AN0
 14158  013FAE  0100               	movlb	0	; () banked
 14159  013FB0  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 14160  013FB2  0E00               	movlw	0
 14161  013FB4  0100               	movlb	0	; () banked
 14162  013FB6  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 14163  013FB8  EC09  F0A6         	call	_ADC_Init	;wreg free
 14164                           
 14165                           ;main.c: 87: float ADC_Voltage(ADCPtr plnput);
 14166                           ;main.c: 88: ADC_Start(&ADC_AN0);
 14167  013FBC  0EB5               	movlw	low _ADC_AN0
 14168  013FBE  0100               	movlb	0	; () banked
 14169  013FC0  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 14170  013FC2  0E00               	movlw	high _ADC_AN0
 14171  013FC4  0100               	movlb	0	; () banked
 14172  013FC6  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 14173  013FC8  EC48  F0A5         	call	_ADC_Start	;wreg free
 14174                           
 14175                           ;main.c: 90: eusart_init();
 14176  013FCC  EC30  F0AF         	call	_eusart_init	;wreg free
 14177                           
 14178                           ;main.c: 91: irobot_init();
 14179  013FD0  EC66  F0B0         	call	_irobot_init	;wreg free
 14180                           
 14181                           ;main.c: 93: irobot_led_power_on(0xA);
 14182  013FD4  0E0A               	movlw	10
 14183  013FD6  EC99  F0AF         	call	_irobot_led_power_on
 14184                           
 14185                           ;main.c: 94: irobot_init_song_0();
 14186  013FDA  EC11  F0AF         	call	_irobot_init_song_0	;wreg free
 14187                           
 14188                           ;main.c: 95: delay_ms(20);
 14189  013FDE  0E00               	movlw	0
 14190  013FE0  0100               	movlb	0	; () banked
 14191  013FE2  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14192  013FE4  0E14               	movlw	20
 14193  013FE6  6FBA               	movwf	delay_ms@ms& (0+255),b
 14194  013FE8  EC7E  F0A8         	call	_delay_ms	;wreg free
 14195                           
 14196                           ;main.c: 100: distanceTotal = 0;
 14197  013FEC  0E00               	movlw	0
 14198  013FEE  0100               	movlb	0	; () banked
 14199  013FF0  6F7C               	movwf	(_distanceTotal+1)& (0+255),b
 14200  013FF2  0E00               	movlw	0
 14201  013FF4  6F7B               	movwf	_distanceTotal& (0+255),b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;main.c: 101: angleTotal = 0;
 14205  013FF6  0E00               	movlw	0
 14206  013FF8  0100               	movlb	0	; () banked
 14207  013FFA  6F7A               	movwf	(_angleTotal+1)& (0+255),b
 14208  013FFC  0E00               	movlw	0
 14209  013FFE  6F79               	movwf	_angleTotal& (0+255),b
 14210                           
 14211                           ; BSR set to: 0
 14212  014000  0012               	return		;funcret
 14213  014002                     __end_of_init:
 14214                           	opt stack 0
 14215                           tosu	equ	0xFFF
 14216                           tosh	equ	0xFFE
 14217                           tosl	equ	0xFFD
 14218                           pclath	equ	0xFFA
 14219                           tblptru	equ	0xFF8
 14220                           tblptrh	equ	0xFF7
 14221                           tblptrl	equ	0xFF6
 14222                           tablat	equ	0xFF5
 14223                           prodh	equ	0xFF4
 14224                           prodl	equ	0xFF3
 14225                           intcon	equ	0xFF2
 14226                           postinc0	equ	0xFEE
 14227                           wreg	equ	0xFE8
 14228                           indf1	equ	0xFE7
 14229                           postdec1	equ	0xFE5
 14230                           fsr1h	equ	0xFE2
 14231                           fsr1l	equ	0xFE1
 14232                           indf2	equ	0xFDF
 14233                           postinc2	equ	0xFDE
 14234                           postdec2	equ	0xFDD
 14235                           plusw2	equ	0xFDB
 14236                           fsr2h	equ	0xFDA
 14237                           fsr2l	equ	0xFD9
 14238                           status	equ	0xFD8
 14239                           
 14240 ;; *************** function _irobot_led_power_on *****************
 14241 ;; Defined at:
 14242 ;;		line 293 in file "Library/iRobotSerial.c"
 14243 ;; Parameters:    Size  Location     Type
 14244 ;;  powerOnColou    1    wreg     unsigned char 
 14245 ;; Auto vars:     Size  Location     Type
 14246 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 14247 ;; Return value:  Size  Location     Type
 14248 ;;                  1    wreg      void 
 14249 ;; Registers used:
 14250 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14251 ;; Tracked objects:
 14252 ;;		On entry : 0/0
 14253 ;;		On exit  : 0/0
 14254 ;;		Unchanged: 0/0
 14255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14257 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14258 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14259 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14260 ;;Total ram usage:        1 bytes
 14261 ;; Hardware stack levels used:    1
 14262 ;; Hardware stack levels required when called:    9
 14263 ;; This function calls:
 14264 ;;		_irobot_leds
 14265 ;; This function is called by:
 14266 ;;		_init
 14267 ;; This function uses a non-reentrant model
 14268 ;;
 14269                           
 14270                           	psect	text61
 14271  015F32                     __ptext61:
 14272                           	opt stack 0
 14273  015F32                     _irobot_led_power_on:
 14274                           	opt stack 20
 14275                           
 14276                           ; BSR set to: 0
 14277                           ;incstack = 0
 14278                           ;irobot_led_power_on@powerOnColour stored from wreg
 14279  015F32  0100               	movlb	0	; () banked
 14280  015F34  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 14281                           
 14282                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 14283  015F36  0E00               	movlw	0
 14284  015F38  0100               	movlb	0	; () banked
 14285  015F3A  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 14286  015F3C  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 14287  015F40  0EFF               	movlw	255
 14288  015F42  0100               	movlb	0	; () banked
 14289  015F44  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 14290  015F46  0E00               	movlw	0
 14291  015F48  EC3D  F0AA         	call	_irobot_leds
 14292  015F4C  0012               	return		;funcret
 14293  015F4E                     __end_of_irobot_led_power_on:
 14294                           	opt stack 0
 14295                           tosu	equ	0xFFF
 14296                           tosh	equ	0xFFE
 14297                           tosl	equ	0xFFD
 14298                           pclath	equ	0xFFA
 14299                           tblptru	equ	0xFF8
 14300                           tblptrh	equ	0xFF7
 14301                           tblptrl	equ	0xFF6
 14302                           tablat	equ	0xFF5
 14303                           prodh	equ	0xFF4
 14304                           prodl	equ	0xFF3
 14305                           intcon	equ	0xFF2
 14306                           postinc0	equ	0xFEE
 14307                           wreg	equ	0xFE8
 14308                           indf1	equ	0xFE7
 14309                           postdec1	equ	0xFE5
 14310                           fsr1h	equ	0xFE2
 14311                           fsr1l	equ	0xFE1
 14312                           indf2	equ	0xFDF
 14313                           postinc2	equ	0xFDE
 14314                           postdec2	equ	0xFDD
 14315                           plusw2	equ	0xFDB
 14316                           fsr2h	equ	0xFDA
 14317                           fsr2l	equ	0xFD9
 14318                           status	equ	0xFD8
 14319                           
 14320 ;; *************** function _irobot_leds *****************
 14321 ;; Defined at:
 14322 ;;		line 239 in file "Library/iRobotSerial.c"
 14323 ;; Parameters:    Size  Location     Type
 14324 ;;  isScript        1    wreg     unsigned char 
 14325 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 14326 ;;  powerColour     1   17[BANK0 ] unsigned char 
 14327 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 14328 ;; Auto vars:     Size  Location     Type
 14329 ;;  isScript        1   19[BANK0 ] unsigned char 
 14330 ;; Return value:  Size  Location     Type
 14331 ;;                  1    wreg      void 
 14332 ;; Registers used:
 14333 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14334 ;; Tracked objects:
 14335 ;;		On entry : 0/0
 14336 ;;		On exit  : 0/0
 14337 ;;		Unchanged: 0/0
 14338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14339 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14340 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14342 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14343 ;;Total ram usage:        4 bytes
 14344 ;; Hardware stack levels used:    1
 14345 ;; Hardware stack levels required when called:    8
 14346 ;; This function calls:
 14347 ;;		_eusart_putch
 14348 ;;		_load_iRScriptStack
 14349 ;; This function is called by:
 14350 ;;		_irobot_led_power_on
 14351 ;;		_irobot_led_power_off
 14352 ;; This function uses a non-reentrant model
 14353 ;;
 14354                           
 14355                           	psect	text62
 14356  01547A                     __ptext62:
 14357                           	opt stack 0
 14358  01547A                     _irobot_leds:
 14359                           	opt stack 20
 14360                           
 14361                           ;incstack = 0
 14362                           ;irobot_leds@isScript stored from wreg
 14363  01547A  0100               	movlb	0	; () banked
 14364  01547C  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 14365                           
 14366                           ;iRobotSerial.c: 240: if (isScript) {
 14367  01547E  0100               	movlb	0	; () banked
 14368  015480  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 14369  015482  0100               	movlb	0	; () banked
 14370  015484  B4D8               	btfsc	status,2,c
 14371  015486  D015               	goto	l2140
 14372                           
 14373                           ; BSR set to: 0
 14374                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 14375                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 14376  015488  0E00               	movlw	0
 14377  01548A  0100               	movlb	0	; () banked
 14378  01548C  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 14379  01548E  0E8B               	movlw	139
 14380  015490  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 14381  015492  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 14382  015496  0100               	movlb	0	; () banked
 14383  015498  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 14384  01549A  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 14385  01549E  0100               	movlb	0	; () banked
 14386  0154A0  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 14387  0154A2  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 14388  0154A6  0100               	movlb	0	; () banked
 14389  0154A8  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 14390  0154AA  0E04               	movlw	4
 14391  0154AC  EC49  F0A8         	call	_load_iRScriptStack
 14392                           
 14393                           ;iRobotSerial.c: 243: }
 14394  0154B0  0012               	return	
 14395  0154B2                     l2140:
 14396                           
 14397                           ;iRobotSerial.c: 244: else{
 14398                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 14399  0154B2  0E8B               	movlw	139
 14400  0154B4  EC6D  F0B0         	call	_eusart_putch
 14401                           
 14402                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 14403  0154B8  0100               	movlb	0	; () banked
 14404  0154BA  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 14405  0154BC  EC6D  F0B0         	call	_eusart_putch
 14406                           
 14407                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 14408  0154C0  0100               	movlb	0	; () banked
 14409  0154C2  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 14410  0154C4  EC6D  F0B0         	call	_eusart_putch
 14411                           
 14412                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 14413  0154C8  0100               	movlb	0	; () banked
 14414  0154CA  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 14415  0154CC  EC6D  F0B0         	call	_eusart_putch
 14416  0154D0  0012               	return	
 14417  0154D2                     __end_of_irobot_leds:
 14418                           	opt stack 0
 14419                           tosu	equ	0xFFF
 14420                           tosh	equ	0xFFE
 14421                           tosl	equ	0xFFD
 14422                           pclath	equ	0xFFA
 14423                           tblptru	equ	0xFF8
 14424                           tblptrh	equ	0xFF7
 14425                           tblptrl	equ	0xFF6
 14426                           tablat	equ	0xFF5
 14427                           prodh	equ	0xFF4
 14428                           prodl	equ	0xFF3
 14429                           intcon	equ	0xFF2
 14430                           postinc0	equ	0xFEE
 14431                           wreg	equ	0xFE8
 14432                           indf1	equ	0xFE7
 14433                           postdec1	equ	0xFE5
 14434                           fsr1h	equ	0xFE2
 14435                           fsr1l	equ	0xFE1
 14436                           indf2	equ	0xFDF
 14437                           postinc2	equ	0xFDE
 14438                           postdec2	equ	0xFDD
 14439                           plusw2	equ	0xFDB
 14440                           fsr2h	equ	0xFDA
 14441                           fsr2l	equ	0xFD9
 14442                           status	equ	0xFD8
 14443                           
 14444 ;; *************** function _load_iRScriptStack *****************
 14445 ;; Defined at:
 14446 ;;		line 176 in file "Library/iRobotSerial.c"
 14447 ;; Parameters:    Size  Location     Type
 14448 ;;  bytesToLoad     1    wreg     unsigned char 
 14449 ;; Auto vars:     Size  Location     Type
 14450 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 14451 ;;  i               1   15[BANK0 ] unsigned char 
 14452 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 14453 ;;		 -> ?_load_iRScriptStack(1), 
 14454 ;; Return value:  Size  Location     Type
 14455 ;;                  1    wreg      void 
 14456 ;; Registers used:
 14457 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14458 ;; Tracked objects:
 14459 ;;		On entry : 0/0
 14460 ;;		On exit  : 0/0
 14461 ;;		Unchanged: 0/0
 14462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14463 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14464 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14465 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14466 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14467 ;;Total ram usage:       16 bytes
 14468 ;; Hardware stack levels used:    1
 14469 ;; Hardware stack levels required when called:    7
 14470 ;; This function calls:
 14471 ;;		Nothing
 14472 ;; This function is called by:
 14473 ;;		_irobot_move
 14474 ;;		_irobot_leds
 14475 ;;		_irobot_angle_wait
 14476 ;;		_irobot_distance_wait
 14477 ;; This function uses a non-reentrant model
 14478 ;;
 14479                           
 14480                           	psect	text63
 14481  015092                     __ptext63:
 14482                           	opt stack 0
 14483  015092                     _load_iRScriptStack:
 14484                           	opt stack 20
 14485                           
 14486                           ;incstack = 0
 14487                           ;load_iRScriptStack@bytesToLoad stored from wreg
 14488  015092  0100               	movlb	0	; () banked
 14489  015094  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 14490                           
 14491                           ;iRobotSerial.c: 177: va_list loadByte;
 14492                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 14493  015096  0EBA               	movlw	low ?_load_iRScriptStack
 14494  015098  0100               	movlb	0	; () banked
 14495  01509A  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 14496  01509C  0E00               	movlw	high ?_load_iRScriptStack
 14497  01509E  0100               	movlb	0	; () banked
 14498  0150A0  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 14499                           
 14500                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++) {
 14501  0150A2  0E00               	movlw	0
 14502  0150A4  0100               	movlb	0	; () banked
 14503  0150A6  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 14504  0150A8  D01F               	goto	l2114
 14505  0150AA                     
 14506                           ; BSR set to: 0
 14507                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 14508                           
 14509                           ; BSR set to: 0
 14510  0150AA  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 14511  0150AE  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 14512  0150B2  0100               	movlb	0	; () banked
 14513  0150B4  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 14514  0150B6  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 14515  0150BA  0100               	movlb	0	; () banked
 14516  0150BC  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 14517  0150BE  0100               	movlb	0	; () banked
 14518  0150C0  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 14519  0150C2  0E00               	movlw	0
 14520  0150C4  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 14521  0150C6  0E00               	movlw	low _iRScriptStack
 14522  0150C8  0100               	movlb	0	; () banked
 14523  0150CA  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 14524  0150CC  6EE1               	movwf	fsr1l,c
 14525  0150CE  0E04               	movlw	high _iRScriptStack
 14526  0150D0  0100               	movlb	0	; () banked
 14527  0150D2  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 14528  0150D4  6EE2               	movwf	fsr1h,c
 14529  0150D6  CFDF FFE7          	movff	indf2,indf1
 14530                           
 14531                           ; BSR set to: 0
 14532  0150DA  0E02               	movlw	2
 14533  0150DC  0100               	movlb	0	; () banked
 14534  0150DE  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 14535  0150E0  0E00               	movlw	0
 14536  0150E2  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 14537                           
 14538                           ; BSR set to: 0
 14539  0150E4  0100               	movlb	0	; () banked
 14540  0150E6  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 14541  0150E8                     l2114:
 14542                           
 14543                           ; BSR set to: 0
 14544                           
 14545                           ; BSR set to: 0
 14546  0150E8  0100               	movlb	0	; () banked
 14547  0150EA  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14548  0150EC  0100               	movlb	0	; () banked
 14549  0150EE  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 14550  0150F0  A0D8               	btfss	status,0,c
 14551  0150F2  D7DB               	goto	l2115
 14552                           
 14553                           ; BSR set to: 0
 14554                           ;iRobotSerial.c: 181: }
 14555                           ;iRobotSerial.c: 182: ;
 14556                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 14557                           
 14558                           ; BSR set to: 0
 14559  0150F4  0100               	movlb	0	; () banked
 14560  0150F6  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 14561  0150F8  2637               	addwf	_iRScriptIndex,f,c
 14562                           
 14563                           ; BSR set to: 0
 14564  0150FA  0012               	return		;funcret
 14565  0150FC                     __end_of_load_iRScriptStack:
 14566                           	opt stack 0
 14567                           tosu	equ	0xFFF
 14568                           tosh	equ	0xFFE
 14569                           tosl	equ	0xFFD
 14570                           pclath	equ	0xFFA
 14571                           tblptru	equ	0xFF8
 14572                           tblptrh	equ	0xFF7
 14573                           tblptrl	equ	0xFF6
 14574                           tablat	equ	0xFF5
 14575                           prodh	equ	0xFF4
 14576                           prodl	equ	0xFF3
 14577                           intcon	equ	0xFF2
 14578                           postinc0	equ	0xFEE
 14579                           wreg	equ	0xFE8
 14580                           indf1	equ	0xFE7
 14581                           postdec1	equ	0xFE5
 14582                           fsr1h	equ	0xFE2
 14583                           fsr1l	equ	0xFE1
 14584                           indf2	equ	0xFDF
 14585                           postinc2	equ	0xFDE
 14586                           postdec2	equ	0xFDD
 14587                           plusw2	equ	0xFDB
 14588                           fsr2h	equ	0xFDA
 14589                           fsr2l	equ	0xFD9
 14590                           status	equ	0xFD8
 14591                           
 14592 ;; *************** function _irobot_init_song_0 *****************
 14593 ;; Defined at:
 14594 ;;		line 252 in file "Library/iRobotSerial.c"
 14595 ;; Parameters:    Size  Location     Type
 14596 ;;		None
 14597 ;; Auto vars:     Size  Location     Type
 14598 ;;		None
 14599 ;; Return value:  Size  Location     Type
 14600 ;;                  1    wreg      void 
 14601 ;; Registers used:
 14602 ;;		wreg, cstack
 14603 ;; Tracked objects:
 14604 ;;		On entry : 0/0
 14605 ;;		On exit  : 0/0
 14606 ;;		Unchanged: 0/0
 14607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14608 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14609 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14610 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14611 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14612 ;;Total ram usage:        0 bytes
 14613 ;; Hardware stack levels used:    1
 14614 ;; Hardware stack levels required when called:    8
 14615 ;; This function calls:
 14616 ;;		_eusart_putch
 14617 ;; This function is called by:
 14618 ;;		_init
 14619 ;; This function uses a non-reentrant model
 14620 ;;
 14621                           
 14622                           	psect	text64
 14623  015E22                     __ptext64:
 14624                           	opt stack 0
 14625  015E22                     _irobot_init_song_0:
 14626                           	opt stack 21
 14627                           
 14628                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 14629                           
 14630                           ; BSR set to: 0
 14631                           ;incstack = 0
 14632  015E22  0E8C               	movlw	140
 14633  015E24  EC6D  F0B0         	call	_eusart_putch
 14634                           
 14635                           ;iRobotSerial.c: 254: eusart_putch(0);
 14636  015E28  0E00               	movlw	0
 14637  015E2A  EC6D  F0B0         	call	_eusart_putch
 14638                           
 14639                           ;iRobotSerial.c: 255: eusart_putch(1);
 14640  015E2E  0E01               	movlw	1
 14641  015E30  EC6D  F0B0         	call	_eusart_putch
 14642                           
 14643                           ;iRobotSerial.c: 256: eusart_putch(60);
 14644  015E34  0E3C               	movlw	60
 14645  015E36  EC6D  F0B0         	call	_eusart_putch
 14646                           
 14647                           ;iRobotSerial.c: 257: eusart_putch(4);
 14648  015E3A  0E04               	movlw	4
 14649  015E3C  EC6D  F0B0         	call	_eusart_putch
 14650  015E40  0012               	return		;funcret
 14651  015E42                     __end_of_irobot_init_song_0:
 14652                           	opt stack 0
 14653                           tosu	equ	0xFFF
 14654                           tosh	equ	0xFFE
 14655                           tosl	equ	0xFFD
 14656                           pclath	equ	0xFFA
 14657                           tblptru	equ	0xFF8
 14658                           tblptrh	equ	0xFF7
 14659                           tblptrl	equ	0xFF6
 14660                           tablat	equ	0xFF5
 14661                           prodh	equ	0xFF4
 14662                           prodl	equ	0xFF3
 14663                           intcon	equ	0xFF2
 14664                           postinc0	equ	0xFEE
 14665                           wreg	equ	0xFE8
 14666                           indf1	equ	0xFE7
 14667                           postdec1	equ	0xFE5
 14668                           fsr1h	equ	0xFE2
 14669                           fsr1l	equ	0xFE1
 14670                           indf2	equ	0xFDF
 14671                           postinc2	equ	0xFDE
 14672                           postdec2	equ	0xFDD
 14673                           plusw2	equ	0xFDB
 14674                           fsr2h	equ	0xFDA
 14675                           fsr2l	equ	0xFD9
 14676                           status	equ	0xFD8
 14677                           
 14678 ;; *************** function _irobot_init *****************
 14679 ;; Defined at:
 14680 ;;		line 198 in file "Library/iRobotSerial.c"
 14681 ;; Parameters:    Size  Location     Type
 14682 ;;		None
 14683 ;; Auto vars:     Size  Location     Type
 14684 ;;		None
 14685 ;; Return value:  Size  Location     Type
 14686 ;;                  1    wreg      void 
 14687 ;; Registers used:
 14688 ;;		wreg, cstack
 14689 ;; Tracked objects:
 14690 ;;		On entry : 0/0
 14691 ;;		On exit  : 0/0
 14692 ;;		Unchanged: 0/0
 14693 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14694 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14695 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14696 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14697 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14698 ;;Total ram usage:        0 bytes
 14699 ;; Hardware stack levels used:    1
 14700 ;; Hardware stack levels required when called:    8
 14701 ;; This function calls:
 14702 ;;		_eusart_putch
 14703 ;; This function is called by:
 14704 ;;		_init
 14705 ;; This function uses a non-reentrant model
 14706 ;;
 14707                           
 14708                           	psect	text65
 14709  0160CC                     __ptext65:
 14710                           	opt stack 0
 14711  0160CC                     _irobot_init:
 14712                           	opt stack 21
 14713                           
 14714                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 14715                           
 14716                           ;incstack = 0
 14717  0160CC  0E80               	movlw	128
 14718  0160CE  EC6D  F0B0         	call	_eusart_putch
 14719                           
 14720                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 14721  0160D2  0E84               	movlw	132
 14722  0160D4  EC6D  F0B0         	call	_eusart_putch
 14723  0160D8  0012               	return		;funcret
 14724  0160DA                     __end_of_irobot_init:
 14725                           	opt stack 0
 14726                           tosu	equ	0xFFF
 14727                           tosh	equ	0xFFE
 14728                           tosl	equ	0xFFD
 14729                           pclath	equ	0xFFA
 14730                           tblptru	equ	0xFF8
 14731                           tblptrh	equ	0xFF7
 14732                           tblptrl	equ	0xFF6
 14733                           tablat	equ	0xFF5
 14734                           prodh	equ	0xFF4
 14735                           prodl	equ	0xFF3
 14736                           intcon	equ	0xFF2
 14737                           postinc0	equ	0xFEE
 14738                           wreg	equ	0xFE8
 14739                           indf1	equ	0xFE7
 14740                           postdec1	equ	0xFE5
 14741                           fsr1h	equ	0xFE2
 14742                           fsr1l	equ	0xFE1
 14743                           indf2	equ	0xFDF
 14744                           postinc2	equ	0xFDE
 14745                           postdec2	equ	0xFDD
 14746                           plusw2	equ	0xFDB
 14747                           fsr2h	equ	0xFDA
 14748                           fsr2l	equ	0xFD9
 14749                           status	equ	0xFD8
 14750                           
 14751 ;; *************** function _eusart_putch *****************
 14752 ;; Defined at:
 14753 ;;		line 120 in file "Library/iRobotSerial.c"
 14754 ;; Parameters:    Size  Location     Type
 14755 ;;  eusartSendCh    1    wreg     unsigned char 
 14756 ;; Auto vars:     Size  Location     Type
 14757 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 14758 ;; Return value:  Size  Location     Type
 14759 ;;                  1    wreg      void 
 14760 ;; Registers used:
 14761 ;;		wreg
 14762 ;; Tracked objects:
 14763 ;;		On entry : 0/0
 14764 ;;		On exit  : 0/0
 14765 ;;		Unchanged: 0/0
 14766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14768 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14770 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14771 ;;Total ram usage:        1 bytes
 14772 ;; Hardware stack levels used:    1
 14773 ;; Hardware stack levels required when called:    7
 14774 ;; This function calls:
 14775 ;;		Nothing
 14776 ;; This function is called by:
 14777 ;;		_irobot_query_and_update
 14778 ;;		_irobot_init
 14779 ;;		_irobot_move
 14780 ;;		_irobot_leds
 14781 ;;		_irobot_init_song_0
 14782 ;;		_irobot_song_play
 14783 ;;		_irobot_script_play
 14784 ;; This function uses a non-reentrant model
 14785 ;;
 14786                           
 14787                           	psect	text66
 14788  0160DA                     __ptext66:
 14789                           	opt stack 0
 14790  0160DA                     _eusart_putch:
 14791                           	opt stack 20
 14792                           
 14793                           ;incstack = 0
 14794                           ;eusart_putch@eusartSendChar stored from wreg
 14795  0160DA  0100               	movlb	0	; () banked
 14796  0160DC  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 14797  0160DE                     
 14798                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 14799  0160DE  A2AD               	btfss	4013,1,c	;volatile
 14800  0160E0  D7FE               	goto	l12921
 14801                           
 14802                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 14803  0160E2  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 14804  0160E6  0012               	return		;funcret
 14805  0160E8                     __end_of_eusart_putch:
 14806                           	opt stack 0
 14807                           tosu	equ	0xFFF
 14808                           tosh	equ	0xFFE
 14809                           tosl	equ	0xFFD
 14810                           pclath	equ	0xFFA
 14811                           tblptru	equ	0xFF8
 14812                           tblptrh	equ	0xFF7
 14813                           tblptrl	equ	0xFF6
 14814                           tablat	equ	0xFF5
 14815                           prodh	equ	0xFF4
 14816                           prodl	equ	0xFF3
 14817                           intcon	equ	0xFF2
 14818                           postinc0	equ	0xFEE
 14819                           wreg	equ	0xFE8
 14820                           indf1	equ	0xFE7
 14821                           postdec1	equ	0xFE5
 14822                           fsr1h	equ	0xFE2
 14823                           fsr1l	equ	0xFE1
 14824                           indf2	equ	0xFDF
 14825                           postinc2	equ	0xFDE
 14826                           postdec2	equ	0xFDD
 14827                           plusw2	equ	0xFDB
 14828                           fsr2h	equ	0xFDA
 14829                           fsr2l	equ	0xFD9
 14830                           status	equ	0xFD8
 14831                           
 14832 ;; *************** function _eusart_init *****************
 14833 ;; Defined at:
 14834 ;;		line 103 in file "Library/iRobotSerial.c"
 14835 ;; Parameters:    Size  Location     Type
 14836 ;;		None
 14837 ;; Auto vars:     Size  Location     Type
 14838 ;;		None
 14839 ;; Return value:  Size  Location     Type
 14840 ;;                  1    wreg      void 
 14841 ;; Registers used:
 14842 ;;		wreg, status,2
 14843 ;; Tracked objects:
 14844 ;;		On entry : 0/0
 14845 ;;		On exit  : 0/0
 14846 ;;		Unchanged: 0/0
 14847 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14848 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14849 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14850 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14851 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14852 ;;Total ram usage:        0 bytes
 14853 ;; Hardware stack levels used:    1
 14854 ;; Hardware stack levels required when called:    7
 14855 ;; This function calls:
 14856 ;;		Nothing
 14857 ;; This function is called by:
 14858 ;;		_init
 14859 ;; This function uses a non-reentrant model
 14860 ;;
 14861                           
 14862                           	psect	text67
 14863  015E60                     __ptext67:
 14864                           	opt stack 0
 14865  015E60                     _eusart_init:
 14866                           	opt stack 22
 14867                           
 14868                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 14869                           
 14870                           ;incstack = 0
 14871  015E60  9C94               	bcf	3988,6,c	;volatile
 14872                           
 14873                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 14874  015E62  8E94               	bsf	3988,7,c	;volatile
 14875                           
 14876                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 14877  015E64  0E24               	movlw	36
 14878  015E66  6EAD               	movwf	4013,c	;volatile
 14879                           
 14880                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 14881  015E68  0E98               	movlw	152
 14882  015E6A  6EAC               	movwf	4012,c	;volatile
 14883                           
 14884                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 14885  015E6C  9A7E               	bcf	3966,5,c	;volatile
 14886                           
 14887                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 14888  015E6E  987E               	bcf	3966,4,c	;volatile
 14889                           
 14890                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 14891  015E70  927E               	bcf	3966,1,c	;volatile
 14892                           
 14893                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 14894  015E72  907E               	bcf	3966,0,c	;volatile
 14895                           
 14896                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 14897  015E74  84AD               	bsf	4013,2,c	;volatile
 14898                           
 14899                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 14900  015E76  967E               	bcf	3966,3,c	;volatile
 14901                           
 14902                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 14903  015E78  0E33               	movlw	51
 14904  015E7A  6EB0               	movwf	4016,c	;volatile
 14905  015E7C  0012               	return		;funcret
 14906  015E7E                     __end_of_eusart_init:
 14907                           	opt stack 0
 14908                           tosu	equ	0xFFF
 14909                           tosh	equ	0xFFE
 14910                           tosl	equ	0xFFD
 14911                           pclath	equ	0xFFA
 14912                           tblptru	equ	0xFF8
 14913                           tblptrh	equ	0xFF7
 14914                           tblptrl	equ	0xFF6
 14915                           tablat	equ	0xFF5
 14916                           prodh	equ	0xFF4
 14917                           prodl	equ	0xFF3
 14918                           intcon	equ	0xFF2
 14919                           postinc0	equ	0xFEE
 14920                           wreg	equ	0xFE8
 14921                           indf1	equ	0xFE7
 14922                           postdec1	equ	0xFE5
 14923                           fsr1h	equ	0xFE2
 14924                           fsr1l	equ	0xFE1
 14925                           indf2	equ	0xFDF
 14926                           postinc2	equ	0xFDE
 14927                           postdec2	equ	0xFDD
 14928                           plusw2	equ	0xFDB
 14929                           fsr2h	equ	0xFDA
 14930                           fsr2l	equ	0xFD9
 14931                           status	equ	0xFD8
 14932                           
 14933 ;; *************** function _Motor_Init *****************
 14934 ;; Defined at:
 14935 ;;		line 26 in file "Library/Motor.c"
 14936 ;; Parameters:    Size  Location     Type
 14937 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 14938 ;;		 -> Stepper(6), 
 14939 ;;  pAddress        2   47[BANK0 ] unsigned short 
 14940 ;; Auto vars:     Size  Location     Type
 14941 ;;		None
 14942 ;; Return value:  Size  Location     Type
 14943 ;;                  1    wreg      void 
 14944 ;; Registers used:
 14945 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14946 ;; Tracked objects:
 14947 ;;		On entry : 0/0
 14948 ;;		On exit  : 0/0
 14949 ;;		Unchanged: 0/0
 14950 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14951 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14952 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14953 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14954 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14955 ;;Total ram usage:        4 bytes
 14956 ;; Hardware stack levels used:    1
 14957 ;; Hardware stack levels required when called:   12
 14958 ;; This function calls:
 14959 ;;		_Port_SetPin
 14960 ;;		_Port_SetPinType
 14961 ;;		_Timer0_Init
 14962 ;; This function is called by:
 14963 ;;		_init
 14964 ;; This function uses a non-reentrant model
 14965 ;;
 14966                           
 14967                           	psect	text68
 14968  013914                     __ptext68:
 14969                           	opt stack 0
 14970  013914                     _Motor_Init:
 14971                           	opt stack 17
 14972                           
 14973                           ;Motor.c: 28: pMotor->mDelta = 0;
 14974                           
 14975                           ;incstack = 0
 14976  013914  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 14977  013918  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 14978  01391C  0E00               	movlw	0
 14979  01391E  6EDE               	movwf	postinc2,c
 14980  013920  0E00               	movlw	0
 14981  013922  6EDD               	movwf	postdec2,c
 14982                           
 14983                           ;Motor.c: 29: pMotor->mFrequency = 0;
 14984  013924  0100               	movlb	0	; () banked
 14985  013926  EE20 F002          	lfsr	2,2
 14986  01392A  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 14987  01392C  26D9               	addwf	fsr2l,f,c
 14988  01392E  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 14989  013930  22DA               	addwfc	fsr2h,f,c
 14990  013932  0E00               	movlw	0
 14991  013934  6EDE               	movwf	postinc2,c
 14992  013936  0E00               	movlw	0
 14993  013938  6EDD               	movwf	postdec2,c
 14994                           
 14995                           ; BSR set to: 0
 14996                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 14997  01393A  0100               	movlb	0	; () banked
 14998  01393C  EE20 F004          	lfsr	2,4
 14999  013940  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 15000  013942  26D9               	addwf	fsr2l,f,c
 15001  013944  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 15002  013946  22DA               	addwfc	fsr2h,f,c
 15003  013948  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 15004  01394C  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 15005                           
 15006                           ; BSR set to: 0
 15007                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 15008  013950  0E97               	movlw	low _PortE
 15009  013952  0100               	movlb	0	; () banked
 15010  013954  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15011  013956  0E00               	movlw	high _PortE
 15012  013958  0100               	movlb	0	; () banked
 15013  01395A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15014  01395C  0E00               	movlw	0
 15015  01395E  0100               	movlb	0	; () banked
 15016  013960  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15017  013962  0E03               	movlw	3
 15018  013964  0100               	movlb	0	; () banked
 15019  013966  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15020  013968  EC80  F091         	call	_Port_SetPinType	;wreg free
 15021                           
 15022                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 15023  01396C  0E97               	movlw	low _PortE
 15024  01396E  0100               	movlb	0	; () banked
 15025  013970  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15026  013972  0E00               	movlw	high _PortE
 15027  013974  0100               	movlb	0	; () banked
 15028  013976  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15029  013978  0E01               	movlw	1
 15030  01397A  0100               	movlb	0	; () banked
 15031  01397C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15032  01397E  0E03               	movlw	3
 15033  013980  0100               	movlb	0	; () banked
 15034  013982  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15035  013984  EC80  F091         	call	_Port_SetPinType	;wreg free
 15036                           
 15037                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 15038  013988  0E97               	movlw	low _PortE
 15039  01398A  0100               	movlb	0	; () banked
 15040  01398C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 15041  01398E  0E00               	movlw	high _PortE
 15042  013990  0100               	movlb	0	; () banked
 15043  013992  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15044  013994  0E00               	movlw	0
 15045  013996  0100               	movlb	0	; () banked
 15046  013998  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 15047  01399A  0E00               	movlw	0
 15048  01399C  0100               	movlb	0	; () banked
 15049  01399E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 15050  0139A0  ECC7  F09D         	call	_Port_SetPin	;wreg free
 15051                           
 15052                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 15053  0139A4  0E97               	movlw	low _PortE
 15054  0139A6  0100               	movlb	0	; () banked
 15055  0139A8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 15056  0139AA  0E00               	movlw	high _PortE
 15057  0139AC  0100               	movlb	0	; () banked
 15058  0139AE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15059  0139B0  0E01               	movlw	1
 15060  0139B2  0100               	movlb	0	; () banked
 15061  0139B4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 15062  0139B6  0E00               	movlw	0
 15063  0139B8  0100               	movlb	0	; () banked
 15064  0139BA  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 15065  0139BC  ECC7  F09D         	call	_Port_SetPin	;wreg free
 15066                           
 15067                           ;Motor.c: 38: lStepFunction = Motor_Step;
 15068  0139C0  0E42               	movlw	low _Motor_Step
 15069  0139C2  0100               	movlb	0	; () banked
 15070  0139C4  6F66               	movwf	_lStepFunction& (0+255),b
 15071  0139C6  0E33               	movlw	high _Motor_Step
 15072  0139C8  0100               	movlb	0	; () banked
 15073  0139CA  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 15074  0139CC  0E01               	movlw	low (_Motor_Step shr (0+16))
 15075  0139CE  0100               	movlb	0	; () banked
 15076  0139D0  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 15077                           
 15078                           ; BSR set to: 0
 15079                           ;Motor.c: 39: Timer0_Init(1000);
 15080  0139D2  0EE8               	movlw	232
 15081  0139D4  0100               	movlb	0	; () banked
 15082  0139D6  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 15083  0139D8  0E03               	movlw	3
 15084  0139DA  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 15085  0139DC  0E00               	movlw	0
 15086  0139DE  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 15087  0139E0  0E00               	movlw	0
 15088  0139E2  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 15089  0139E4  ECE7  F096         	call	_Timer0_Init	;wreg free
 15090  0139E8  0012               	return		;funcret
 15091  0139EA                     __end_of_Motor_Init:
 15092                           	opt stack 0
 15093                           tosu	equ	0xFFF
 15094                           tosh	equ	0xFFE
 15095                           tosl	equ	0xFFD
 15096                           pclath	equ	0xFFA
 15097                           tblptru	equ	0xFF8
 15098                           tblptrh	equ	0xFF7
 15099                           tblptrl	equ	0xFF6
 15100                           tablat	equ	0xFF5
 15101                           prodh	equ	0xFF4
 15102                           prodl	equ	0xFF3
 15103                           intcon	equ	0xFF2
 15104                           postinc0	equ	0xFEE
 15105                           wreg	equ	0xFE8
 15106                           indf1	equ	0xFE7
 15107                           postdec1	equ	0xFE5
 15108                           fsr1h	equ	0xFE2
 15109                           fsr1l	equ	0xFE1
 15110                           indf2	equ	0xFDF
 15111                           postinc2	equ	0xFDE
 15112                           postdec2	equ	0xFDD
 15113                           plusw2	equ	0xFDB
 15114                           fsr2h	equ	0xFDA
 15115                           fsr2l	equ	0xFD9
 15116                           status	equ	0xFD8
 15117                           
 15118 ;; *************** function _Timer0_Init *****************
 15119 ;; Defined at:
 15120 ;;		line 25 in file "Library/Timer0.c"
 15121 ;; Parameters:    Size  Location     Type
 15122 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 15123 ;; Auto vars:     Size  Location     Type
 15124 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 15125 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 15126 ;; Return value:  Size  Location     Type
 15127 ;;                  1    wreg      void 
 15128 ;; Registers used:
 15129 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15130 ;; Tracked objects:
 15131 ;;		On entry : 0/0
 15132 ;;		On exit  : 0/0
 15133 ;;		Unchanged: 0/0
 15134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15135 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15136 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15137 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15138 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15139 ;;Total ram usage:       14 bytes
 15140 ;; Hardware stack levels used:    1
 15141 ;; Hardware stack levels required when called:    8
 15142 ;; This function calls:
 15143 ;;		_Timer0_Clear
 15144 ;;		___lldiv
 15145 ;; This function is called by:
 15146 ;;		_Motor_Init
 15147 ;;		_Motor_Speed
 15148 ;; This function uses a non-reentrant model
 15149 ;;
 15150                           
 15151                           	psect	text69
 15152  012DCE                     __ptext69:
 15153                           	opt stack 0
 15154  012DCE                     _Timer0_Init:
 15155                           	opt stack 20
 15156                           
 15157                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 15158                           
 15159                           ;incstack = 0
 15160  012DCE  0E80               	movlw	128
 15161  012DD0  0100               	movlb	0	; () banked
 15162  012DD2  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 15163  012DD4  0E8D               	movlw	141
 15164  012DD6  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 15165  012DD8  0E5B               	movlw	91
 15166  012DDA  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 15167  012DDC  0E00               	movlw	0
 15168  012DDE  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 15169                           
 15170                           ; BSR set to: 0
 15171                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 15172                           ;Timer0.c: 31: static UINT8 PRE = 0;
 15173                           ;Timer0.c: 32: static UINT32 DIV = 0;
 15174                           ;Timer0.c: 34: UINT32 DIVIDE;
 15175                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 15176  012DE0  9ED5               	bcf	4053,7,c	;volatile
 15177                           
 15178                           ; BSR set to: 0
 15179                           ;Timer0.c: 38: if (pFrequency == 0)
 15180  012DE2  0100               	movlb	0	; () banked
 15181  012DE4  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 15182  012DE6  0100               	movlb	0	; () banked
 15183  012DE8  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 15184  012DEA  0100               	movlb	0	; () banked
 15185  012DEC  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 15186  012DEE  0100               	movlb	0	; () banked
 15187  012DF0  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 15188  012DF2  B4D8               	btfsc	status,2,c
 15189  012DF4  0012               	return	
 15190                           
 15191                           ; BSR set to: 0
 15192                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 15193                           
 15194                           ; BSR set to: 0
 15195                           ;Timer0.c: 39: return;
 15196  012DF6  96D5               	bcf	4053,3,c	;volatile
 15197                           
 15198                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 15199  012DF8  9CD5               	bcf	4053,6,c	;volatile
 15200                           
 15201                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 15202  012DFA  9AD5               	bcf	4053,5,c	;volatile
 15203                           
 15204                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 15205  012DFC  98D5               	bcf	4053,4,c	;volatile
 15206                           
 15207                           ; BSR set to: 0
 15208                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 15209  012DFE  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 15210  012E02  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 15211  012E06  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 15212  012E0A  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 15213  012E0E  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 15214  012E12  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 15215  012E16  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 15216  012E1A  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 15217  012E1E  ECE9  F09E         	call	___lldiv	;wreg free
 15218  012E22  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 15219  012E26  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 15220  012E2A  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 15221  012E2E  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 15222                           
 15223                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 15224  012E32  D00C               	goto	l1787
 15225  012E34                     l13289:
 15226                           
 15227                           ;Timer0.c: 50: {
 15228                           ;Timer0.c: 51: INDEX ++;
 15229  012E34  0100               	movlb	0	; () banked
 15230  012E36  2B93               	incf	_INDEX& (0+255),f,b
 15231                           
 15232                           ; BSR set to: 0
 15233                           ;Timer0.c: 52: if (INDEX >= 3)
 15234  012E38  0E02               	movlw	2
 15235  012E3A  0100               	movlb	0	; () banked
 15236  012E3C  6593               	cpfsgt	_INDEX& (0+255),b
 15237  012E3E  D001               	goto	l1785
 15238  012E40  D02F               	goto	u9740
 15239  012E42                     l1785:
 15240                           
 15241                           ; BSR set to: 0
 15242                           ;Timer0.c: 56: if (INDEX >= 8)
 15243                           
 15244                           ; BSR set to: 0
 15245  012E42  0E07               	movlw	7
 15246  012E44  0100               	movlb	0	; () banked
 15247  012E46  6593               	cpfsgt	_INDEX& (0+255),b
 15248  012E48  D001               	goto	l1787
 15249  012E4A  0012               	return	
 15250  012E4C                     l1787:
 15251                           
 15252                           ; BSR set to: 0
 15253                           
 15254                           ; BSR set to: 0
 15255  012E4C  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 15256  012E50  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 15257  012E54  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 15258  012E58  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 15259  012E5C  0100               	movlb	0	; () banked
 15260  012E5E  5193               	movf	_INDEX& (0+255),w,b
 15261  012E60  0D02               	mullw	2
 15262  012E62  0E97               	movlw	low Timer0_Init@PRESCALE
 15263  012E64  24F3               	addwf	prodl,w,c
 15264  012E66  6EF6               	movwf	tblptrl,c
 15265  012E68  0EFD               	movlw	high Timer0_Init@PRESCALE
 15266  012E6A  20F4               	addwfc	prodh,w,c
 15267  012E6C  6EF7               	movwf	tblptrh,c
 15268  012E6E                     	if	1	;There are 3 active tblptr bytes
 15269  012E6E  6AF8               	clrf	tblptru,c
 15270  012E70  0E00               	movlw	low (__mediumconst shr (0+16))
 15271  012E72  22F8               	addwfc	tblptru,f,c
 15272  012E74                     	endif
 15273  012E74  0009               	tblrd		*+
 15274  012E76  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 15275  012E7A  0009               	tblrd		*+
 15276  012E7C  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 15277  012E80  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 15278  012E84  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 15279  012E88  0100               	movlb	0	; () banked
 15280  012E8A  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 15281  012E8C  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 15282  012E8E  ECE9  F09E         	call	___lldiv	;wreg free
 15283  012E92  0100               	movlb	0	; () banked
 15284  012E94  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 15285  012E96  E1CE               	bnz	l13289
 15286  012E98  0100               	movlb	0	; () banked
 15287  012E9A  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 15288  012E9C  B0D8               	btfsc	status,0,c
 15289  012E9E  D7CA               	goto	l1784
 15290  012EA0                     u9740:
 15291                           
 15292                           ; BSR set to: 0
 15293                           ;Timer0.c: 58: }
 15294                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 15295                           
 15296                           ; BSR set to: 0
 15297  012EA0  0100               	movlb	0	; () banked
 15298  012EA2  5193               	movf	_INDEX& (0+255),w,b
 15299  012EA4  0D02               	mullw	2
 15300  012EA6  0E97               	movlw	low Timer0_Init@PRESCALE
 15301  012EA8  24F3               	addwf	prodl,w,c
 15302  012EAA  6EF6               	movwf	tblptrl,c
 15303  012EAC  0EFD               	movlw	high Timer0_Init@PRESCALE
 15304  012EAE  20F4               	addwfc	prodh,w,c
 15305  012EB0  6EF7               	movwf	tblptrh,c
 15306  012EB2                     	if	1	;There are 3 active tblptr bytes
 15307  012EB2  6AF8               	clrf	tblptru,c
 15308  012EB4  0E00               	movlw	low (__mediumconst shr (0+16))
 15309  012EB6  22F8               	addwfc	tblptru,f,c
 15310  012EB8                     	endif
 15311  012EB8  0008               	tblrd		*
 15312  012EBA  CFF5 F092          	movff	tablat,Timer0_Init@PRE
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 15316  012EBE  0EFF               	movlw	255
 15317  012EC0  0100               	movlb	0	; () banked
 15318  012EC2  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 15319  012EC4  0103               	movlb	3	; () banked
 15320  012EC6  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 15321  012EC8  0EFF               	movlw	255
 15322  012ECA  0100               	movlb	0	; () banked
 15323  012ECC  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 15324  012ECE  0103               	movlb	3	; () banked
 15325  012ED0  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 15326  012ED2  0EFF               	movlw	255
 15327  012ED4  0100               	movlb	0	; () banked
 15328  012ED6  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 15329  012ED8  0103               	movlb	3	; () banked
 15330  012EDA  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 15331  012EDC  0EFF               	movlw	255
 15332  012EDE  0100               	movlb	0	; () banked
 15333  012EE0  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 15334  012EE2  0103               	movlb	3	; () banked
 15335  012EE4  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 15336                           
 15337                           ; BSR set to: 3
 15338                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 15339  012EE6  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 15340  012EEA  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 15341  012EEE  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 15342  012EF2  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 15343  012EF6  0100               	movlb	0	; () banked
 15344  012EF8  5192               	movf	Timer0_Init@PRE& (0+255),w,b
 15345  012EFA  0100               	movlb	0	; () banked
 15346  012EFC  6FBE               	movwf	___lldiv@divisor& (0+255),b
 15347  012EFE  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 15348  012F00  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 15349  012F02  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 15350  012F04  ECE9  F09E         	call	___lldiv	;wreg free
 15351  012F08  0100               	movlb	0	; () banked
 15352  012F0A  1FBA               	comf	?___lldiv& (0+255),f,b
 15353  012F0C  0100               	movlb	0	; () banked
 15354  012F0E  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 15355  012F10  0100               	movlb	0	; () banked
 15356  012F12  4BBA               	infsnz	?___lldiv& (0+255),f,b
 15357  012F14  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 15358  012F16  0EFF               	movlw	255
 15359  012F18  0100               	movlb	0	; () banked
 15360  012F1A  25BA               	addwf	?___lldiv& (0+255),w,b
 15361  012F1C  6E29               	movwf	_COUNTER,c
 15362  012F1E  0EFF               	movlw	255
 15363  012F20  0100               	movlb	0	; () banked
 15364  012F22  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 15365  012F24  6E2A               	movwf	_COUNTER+1,c
 15366                           
 15367                           ; BSR set to: 0
 15368                           ;Timer0.c: 68: Timer0_Clear();
 15369  012F26  EC8F  F0B0         	call	_Timer0_Clear	;wreg free
 15370                           
 15371                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 15372  012F2A  8ED5               	bsf	4053,7,c	;volatile
 15373  012F2C  0012               	return		;funcret
 15374  012F2E                     __end_of_Timer0_Init:
 15375                           	opt stack 0
 15376                           tosu	equ	0xFFF
 15377                           tosh	equ	0xFFE
 15378                           tosl	equ	0xFFD
 15379                           pclath	equ	0xFFA
 15380                           tblptru	equ	0xFF8
 15381                           tblptrh	equ	0xFF7
 15382                           tblptrl	equ	0xFF6
 15383                           tablat	equ	0xFF5
 15384                           prodh	equ	0xFF4
 15385                           prodl	equ	0xFF3
 15386                           intcon	equ	0xFF2
 15387                           postinc0	equ	0xFEE
 15388                           wreg	equ	0xFE8
 15389                           indf1	equ	0xFE7
 15390                           postdec1	equ	0xFE5
 15391                           fsr1h	equ	0xFE2
 15392                           fsr1l	equ	0xFE1
 15393                           indf2	equ	0xFDF
 15394                           postinc2	equ	0xFDE
 15395                           postdec2	equ	0xFDD
 15396                           plusw2	equ	0xFDB
 15397                           fsr2h	equ	0xFDA
 15398                           fsr2l	equ	0xFD9
 15399                           status	equ	0xFD8
 15400                           
 15401 ;; *************** function _Timer0_Clear *****************
 15402 ;; Defined at:
 15403 ;;		line 20 in file "Library/Timer0.c"
 15404 ;; Parameters:    Size  Location     Type
 15405 ;;		None
 15406 ;; Auto vars:     Size  Location     Type
 15407 ;;		None
 15408 ;; Return value:  Size  Location     Type
 15409 ;;                  1    wreg      void 
 15410 ;; Registers used:
 15411 ;;		None
 15412 ;; Tracked objects:
 15413 ;;		On entry : 0/0
 15414 ;;		On exit  : 0/0
 15415 ;;		Unchanged: 0/0
 15416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15417 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15419 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15420 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15421 ;;Total ram usage:        0 bytes
 15422 ;; Hardware stack levels used:    1
 15423 ;; Hardware stack levels required when called:    7
 15424 ;; This function calls:
 15425 ;;		Nothing
 15426 ;; This function is called by:
 15427 ;;		_Timer0_Init
 15428 ;; This function uses a non-reentrant model
 15429 ;;
 15430                           
 15431                           	psect	text70
 15432  01611E                     __ptext70:
 15433                           	opt stack 0
 15434  01611E                     _Timer0_Clear:
 15435                           	opt stack 20
 15436                           
 15437                           ;Timer0.c: 22: TMR0 = COUNTER;
 15438                           
 15439                           ;incstack = 0
 15440  01611E  C029  FFD6         	movff	_COUNTER,4054	;volatile
 15441  016122  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 15442                           
 15443                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 15444  016126  94F2               	bcf	intcon,2,c	;volatile
 15445  016128  0012               	return		;funcret
 15446  01612A                     __end_of_Timer0_Clear:
 15447                           	opt stack 0
 15448                           tosu	equ	0xFFF
 15449                           tosh	equ	0xFFE
 15450                           tosl	equ	0xFFD
 15451                           pclath	equ	0xFFA
 15452                           tblptru	equ	0xFF8
 15453                           tblptrh	equ	0xFF7
 15454                           tblptrl	equ	0xFF6
 15455                           tablat	equ	0xFF5
 15456                           prodh	equ	0xFF4
 15457                           prodl	equ	0xFF3
 15458                           intcon	equ	0xFF2
 15459                           postinc0	equ	0xFEE
 15460                           wreg	equ	0xFE8
 15461                           indf1	equ	0xFE7
 15462                           postdec1	equ	0xFE5
 15463                           fsr1h	equ	0xFE2
 15464                           fsr1l	equ	0xFE1
 15465                           indf2	equ	0xFDF
 15466                           postinc2	equ	0xFDE
 15467                           postdec2	equ	0xFDD
 15468                           plusw2	equ	0xFDB
 15469                           fsr2h	equ	0xFDA
 15470                           fsr2l	equ	0xFD9
 15471                           status	equ	0xFD8
 15472                           
 15473 ;; *************** function _MXK_Init *****************
 15474 ;; Defined at:
 15475 ;;		line 33 in file "Library/MXK.c"
 15476 ;; Parameters:    Size  Location     Type
 15477 ;;		None
 15478 ;; Auto vars:     Size  Location     Type
 15479 ;;		None
 15480 ;; Return value:  Size  Location     Type
 15481 ;;                  1    wreg      void 
 15482 ;; Registers used:
 15483 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15484 ;; Tracked objects:
 15485 ;;		On entry : 0/0
 15486 ;;		On exit  : 0/0
 15487 ;;		Unchanged: 0/0
 15488 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15489 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15492 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15493 ;;Total ram usage:        0 bytes
 15494 ;; Hardware stack levels used:    1
 15495 ;; Hardware stack levels required when called:   16
 15496 ;; This function calls:
 15497 ;;		_LED_Init
 15498 ;;		_Port_Init
 15499 ;;		_Port_SetPin
 15500 ;;		_Port_SetPinType
 15501 ;;		_Port_SetQuadType
 15502 ;;		_Port_SetType
 15503 ;;		_delay_ms
 15504 ;; This function is called by:
 15505 ;;		_init
 15506 ;; This function uses a non-reentrant model
 15507 ;;
 15508                           
 15509                           	psect	text71
 15510  012976                     __ptext71:
 15511                           	opt stack 0
 15512  012976                     _MXK_Init:
 15513                           	opt stack 13
 15514                           
 15515                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 15516                           
 15517                           ;incstack = 0
 15518  012976  0E01               	movlw	1
 15519  012978  6E4B               	movwf	_Bus_State,c
 15520                           
 15521                           ;MXK.c: 36: lQueue = (Function)0;
 15522  01297A  0E00               	movlw	0
 15523  01297C  0100               	movlb	0	; () banked
 15524  01297E  6F63               	movwf	_lQueue& (0+255),b	;volatile
 15525  012980  0E00               	movlw	0
 15526  012982  0100               	movlb	0	; () banked
 15527  012984  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 15528  012986  0E00               	movlw	0
 15529  012988  0100               	movlb	0	; () banked
 15530  01298A  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 15531                           
 15532                           ; BSR set to: 0
 15533                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 15534  01298C  0EB4               	movlw	low _PortA
 15535  01298E  0101               	movlb	1	; () banked
 15536  012990  6F01               	movwf	Port_Init@pInput& (0+255),b
 15537  012992  0E03               	movlw	high _PortA
 15538  012994  0101               	movlb	1	; () banked
 15539  012996  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15540  012998  0E00               	movlw	0
 15541  01299A  0101               	movlb	1	; () banked
 15542  01299C  6F03               	movwf	Port_Init@pPort& (0+255),b
 15543  01299E  EC2F  F093         	call	_Port_Init	;wreg free
 15544                           
 15545                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 15546  0129A2  0EAA               	movlw	low _PortB
 15547  0129A4  0101               	movlb	1	; () banked
 15548  0129A6  6F01               	movwf	Port_Init@pInput& (0+255),b
 15549  0129A8  0E03               	movlw	high _PortB
 15550  0129AA  0101               	movlb	1	; () banked
 15551  0129AC  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15552  0129AE  0E01               	movlw	1
 15553  0129B0  0101               	movlb	1	; () banked
 15554  0129B2  6F03               	movwf	Port_Init@pPort& (0+255),b
 15555  0129B4  EC2F  F093         	call	_Port_Init	;wreg free
 15556                           
 15557                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 15558  0129B8  0EAB               	movlw	low _PortC
 15559  0129BA  0101               	movlb	1	; () banked
 15560  0129BC  6F01               	movwf	Port_Init@pInput& (0+255),b
 15561  0129BE  0E00               	movlw	high _PortC
 15562  0129C0  0101               	movlb	1	; () banked
 15563  0129C2  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15564  0129C4  0E02               	movlw	2
 15565  0129C6  0101               	movlb	1	; () banked
 15566  0129C8  6F03               	movwf	Port_Init@pPort& (0+255),b
 15567  0129CA  EC2F  F093         	call	_Port_Init	;wreg free
 15568                           
 15569                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 15570  0129CE  0EA1               	movlw	low _PortD
 15571  0129D0  0101               	movlb	1	; () banked
 15572  0129D2  6F01               	movwf	Port_Init@pInput& (0+255),b
 15573  0129D4  0E00               	movlw	high _PortD
 15574  0129D6  0101               	movlb	1	; () banked
 15575  0129D8  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15576  0129DA  0E03               	movlw	3
 15577  0129DC  0101               	movlb	1	; () banked
 15578  0129DE  6F03               	movwf	Port_Init@pPort& (0+255),b
 15579  0129E0  EC2F  F093         	call	_Port_Init	;wreg free
 15580                           
 15581                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 15582  0129E4  0E97               	movlw	low _PortE
 15583  0129E6  0101               	movlb	1	; () banked
 15584  0129E8  6F01               	movwf	Port_Init@pInput& (0+255),b
 15585  0129EA  0E00               	movlw	high _PortE
 15586  0129EC  0101               	movlb	1	; () banked
 15587  0129EE  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15588  0129F0  0E04               	movlw	4
 15589  0129F2  0101               	movlb	1	; () banked
 15590  0129F4  6F03               	movwf	Port_Init@pPort& (0+255),b
 15591  0129F6  EC2F  F093         	call	_Port_Init	;wreg free
 15592                           
 15593                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 15594  0129FA  0EBE               	movlw	low _PortF
 15595  0129FC  0101               	movlb	1	; () banked
 15596  0129FE  6F01               	movwf	Port_Init@pInput& (0+255),b
 15597  012A00  0E03               	movlw	high _PortF
 15598  012A02  0101               	movlb	1	; () banked
 15599  012A04  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15600  012A06  0E05               	movlw	5
 15601  012A08  0101               	movlb	1	; () banked
 15602  012A0A  6F03               	movwf	Port_Init@pPort& (0+255),b
 15603  012A0C  EC2F  F093         	call	_Port_Init	;wreg free
 15604                           
 15605                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 15606  012A10  0EA0               	movlw	low _PortG
 15607  012A12  0101               	movlb	1	; () banked
 15608  012A14  6F01               	movwf	Port_Init@pInput& (0+255),b
 15609  012A16  0E03               	movlw	high _PortG
 15610  012A18  0101               	movlb	1	; () banked
 15611  012A1A  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 15612  012A1C  0E06               	movlw	6
 15613  012A1E  0101               	movlb	1	; () banked
 15614  012A20  6F03               	movwf	Port_Init@pPort& (0+255),b
 15615  012A22  EC2F  F093         	call	_Port_Init	;wreg free
 15616                           
 15617                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 15618  012A26  0EBE               	movlw	low _PortF
 15619  012A28  0100               	movlb	0	; () banked
 15620  012A2A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15621  012A2C  0E03               	movlw	high _PortF
 15622  012A2E  0100               	movlb	0	; () banked
 15623  012A30  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15624  012A32  0E05               	movlw	5
 15625  012A34  0100               	movlb	0	; () banked
 15626  012A36  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15627  012A38  0E00               	movlw	0
 15628  012A3A  0100               	movlb	0	; () banked
 15629  012A3C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15630  012A3E  EC80  F091         	call	_Port_SetPinType	;wreg free
 15631                           
 15632                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 15633  012A42  0EAA               	movlw	low _PortB
 15634  012A44  0100               	movlb	0	; () banked
 15635  012A46  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 15636  012A48  0E03               	movlw	high _PortB
 15637  012A4A  0100               	movlb	0	; () banked
 15638  012A4C  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 15639  012A4E  0E00               	movlw	0
 15640  012A50  0100               	movlb	0	; () banked
 15641  012A52  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 15642  012A54  0E00               	movlw	0
 15643  012A56  0100               	movlb	0	; () banked
 15644  012A58  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 15645  012A5A  EC73  F08B         	call	_Port_SetQuadType	;wreg free
 15646                           
 15647                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 15648  012A5E  0EBE               	movlw	low _PortF
 15649  012A60  0100               	movlb	0	; () banked
 15650  012A62  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 15651  012A64  0E03               	movlw	high _PortF
 15652  012A66  0100               	movlb	0	; () banked
 15653  012A68  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 15654  012A6A  0E06               	movlw	6
 15655  012A6C  0100               	movlb	0	; () banked
 15656  012A6E  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 15657  012A70  0E03               	movlw	3
 15658  012A72  0100               	movlb	0	; () banked
 15659  012A74  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15660  012A76  EC80  F091         	call	_Port_SetPinType	;wreg free
 15661                           
 15662                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 15663  012A7A  0EA0               	movlw	low _PortG
 15664  012A7C  0100               	movlb	0	; () banked
 15665  012A7E  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 15666  012A80  0E03               	movlw	high _PortG
 15667  012A82  0100               	movlb	0	; () banked
 15668  012A84  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 15669  012A86  0E03               	movlw	3
 15670  012A88  0100               	movlb	0	; () banked
 15671  012A8A  6FF6               	movwf	Port_SetType@pType& (0+255),b
 15672  012A8C  EC9E  F08C         	call	_Port_SetType	;wreg free
 15673                           
 15674                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 15675  012A90  0EA0               	movlw	low _PortG
 15676  012A92  0100               	movlb	0	; () banked
 15677  012A94  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 15678  012A96  0E03               	movlw	high _PortG
 15679  012A98  0100               	movlb	0	; () banked
 15680  012A9A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15681  012A9C  0E04               	movlw	4
 15682  012A9E  0100               	movlb	0	; () banked
 15683  012AA0  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 15684  012AA2  0E00               	movlw	0
 15685  012AA4  0100               	movlb	0	; () banked
 15686  012AA6  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 15687  012AA8  ECC7  F09D         	call	_Port_SetPin	;wreg free
 15688                           
 15689                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 15690  012AAC  0EBE               	movlw	low _PortF
 15691  012AAE  0100               	movlb	0	; () banked
 15692  012AB0  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 15693  012AB2  0E03               	movlw	high _PortF
 15694  012AB4  0100               	movlb	0	; () banked
 15695  012AB6  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 15696  012AB8  0E06               	movlw	6
 15697  012ABA  0100               	movlb	0	; () banked
 15698  012ABC  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 15699  012ABE  0E01               	movlw	1
 15700  012AC0  0100               	movlb	0	; () banked
 15701  012AC2  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 15702  012AC4  ECC7  F09D         	call	_Port_SetPin	;wreg free
 15703                           
 15704                           ;MXK.c: 55: LED_Init(eLED1);
 15705  012AC8  0E00               	movlw	0
 15706  012ACA  ECB1  F0A9         	call	_LED_Init
 15707                           
 15708                           ;MXK.c: 56: LED_Init(eLED2);
 15709  012ACE  0E01               	movlw	1
 15710  012AD0  ECB1  F0A9         	call	_LED_Init
 15711                           
 15712                           ;MXK.c: 58: PIR1 = 0;
 15713  012AD4  0E00               	movlw	0
 15714  012AD6  6E9E               	movwf	3998,c	;volatile
 15715                           
 15716                           ;MXK.c: 59: PIR2 = 0;
 15717  012AD8  0E00               	movlw	0
 15718  012ADA  6EA1               	movwf	4001,c	;volatile
 15719                           
 15720                           ;MXK.c: 60: PIR3 = 0;
 15721  012ADC  0E00               	movlw	0
 15722  012ADE  6EA4               	movwf	4004,c	;volatile
 15723                           
 15724                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 15725  012AE0  8E9B               	bsf	3995,7,c	;volatile
 15726                           
 15727                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 15728  012AE2  8C9B               	bsf	3995,6,c	;volatile
 15729                           
 15730                           ;MXK.c: 66: delay_ms(100);
 15731  012AE4  0E00               	movlw	0
 15732  012AE6  0100               	movlb	0	; () banked
 15733  012AE8  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 15734  012AEA  0E64               	movlw	100
 15735  012AEC  6FBA               	movwf	delay_ms@ms& (0+255),b
 15736  012AEE  EC7E  F0A8         	call	_delay_ms	;wreg free
 15737                           
 15738                           ;MXK.c: 68: RCONbits.IPEN = 1;
 15739  012AF2  8ED0               	bsf	4048,7,c	;volatile
 15740  012AF4  0012               	return		;funcret
 15741  012AF6                     __end_of_MXK_Init:
 15742                           	opt stack 0
 15743                           tosu	equ	0xFFF
 15744                           tosh	equ	0xFFE
 15745                           tosl	equ	0xFFD
 15746                           pclath	equ	0xFFA
 15747                           tblptru	equ	0xFF8
 15748                           tblptrh	equ	0xFF7
 15749                           tblptrl	equ	0xFF6
 15750                           tablat	equ	0xFF5
 15751                           prodh	equ	0xFF4
 15752                           prodl	equ	0xFF3
 15753                           intcon	equ	0xFF2
 15754                           postinc0	equ	0xFEE
 15755                           wreg	equ	0xFE8
 15756                           indf1	equ	0xFE7
 15757                           postdec1	equ	0xFE5
 15758                           fsr1h	equ	0xFE2
 15759                           fsr1l	equ	0xFE1
 15760                           indf2	equ	0xFDF
 15761                           postinc2	equ	0xFDE
 15762                           postdec2	equ	0xFDD
 15763                           plusw2	equ	0xFDB
 15764                           fsr2h	equ	0xFDA
 15765                           fsr2l	equ	0xFD9
 15766                           status	equ	0xFD8
 15767                           
 15768 ;; *************** function _Port_Init *****************
 15769 ;; Defined at:
 15770 ;;		line 150 in file "Library/Port.c"
 15771 ;; Parameters:    Size  Location     Type
 15772 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 15773 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15774 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15775 ;;  pPort           1    3[BANK1 ] enum E6786
 15776 ;; Auto vars:     Size  Location     Type
 15777 ;;  i               1    6[BANK1 ] unsigned char 
 15778 ;; Return value:  Size  Location     Type
 15779 ;;                  1    wreg      void 
 15780 ;; Registers used:
 15781 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15782 ;; Tracked objects:
 15783 ;;		On entry : 0/0
 15784 ;;		On exit  : 0/0
 15785 ;;		Unchanged: 0/0
 15786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15787 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15788 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15789 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15790 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15791 ;;Total ram usage:        6 bytes
 15792 ;; Hardware stack levels used:    1
 15793 ;; Hardware stack levels required when called:   15
 15794 ;; This function calls:
 15795 ;;		_GetPortPORT
 15796 ;;		_GetPortProperties
 15797 ;;		_GetPortTRIS
 15798 ;;		_Port_Set
 15799 ;;		_Port_SetPinType
 15800 ;;		_Port_SetType
 15801 ;;		_Word_GetPair
 15802 ;; This function is called by:
 15803 ;;		_MXK_Init
 15804 ;; This function uses a non-reentrant model
 15805 ;;
 15806                           
 15807                           	psect	text72
 15808  01265E                     __ptext72:
 15809                           	opt stack 0
 15810  01265E                     _Port_Init:
 15811                           	opt stack 13
 15812                           
 15813                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 15814                           
 15815                           ;incstack = 0
 15816  01265E  0101               	movlb	1	; () banked
 15817  012660  5103               	movf	Port_Init@pPort& (0+255),w,b
 15818  012662  EC08  F0A2         	call	_GetPortProperties
 15819  012666  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 15820  01266A  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15821  01266E  0100               	movlb	0	; () banked
 15822  012670  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 15823  012674  0100               	movlb	0	; () banked
 15824  012676  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 15825                           
 15826                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 15827  01267A  0101               	movlb	1	; () banked
 15828  01267C  5103               	movf	Port_Init@pPort& (0+255),w,b
 15829  01267E  EC5B  F0A2         	call	_GetPortPORT
 15830  012682  0101               	movlb	1	; () banked
 15831  012684  EE20 F006          	lfsr	2,6
 15832  012688  5101               	movf	Port_Init@pInput& (0+255),w,b
 15833  01268A  26D9               	addwf	fsr2l,f,c
 15834  01268C  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15835  01268E  22DA               	addwfc	fsr2h,f,c
 15836  012690  0100               	movlb	0	; () banked
 15837  012692  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 15838  012696  0100               	movlb	0	; () banked
 15839  012698  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 15840                           
 15841                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 15842  01269C  0101               	movlb	1	; () banked
 15843  01269E  5103               	movf	Port_Init@pPort& (0+255),w,b
 15844  0126A0  EC5B  F0A2         	call	_GetPortPORT
 15845  0126A4  0101               	movlb	1	; () banked
 15846  0126A6  EE20 F004          	lfsr	2,4
 15847  0126AA  5101               	movf	Port_Init@pInput& (0+255),w,b
 15848  0126AC  26D9               	addwf	fsr2l,f,c
 15849  0126AE  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15850  0126B0  22DA               	addwfc	fsr2h,f,c
 15851  0126B2  0100               	movlb	0	; () banked
 15852  0126B4  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 15853  0126B8  0100               	movlb	0	; () banked
 15854  0126BA  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 15855                           
 15856                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 15857  0126BE  0101               	movlb	1	; () banked
 15858  0126C0  5103               	movf	Port_Init@pPort& (0+255),w,b
 15859  0126C2  ECB5  F0A1         	call	_GetPortTRIS
 15860  0126C6  0101               	movlb	1	; () banked
 15861  0126C8  EE20 F002          	lfsr	2,2
 15862  0126CC  5101               	movf	Port_Init@pInput& (0+255),w,b
 15863  0126CE  26D9               	addwf	fsr2l,f,c
 15864  0126D0  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15865  0126D2  22DA               	addwfc	fsr2h,f,c
 15866  0126D4  0100               	movlb	0	; () banked
 15867  0126D6  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 15868  0126DA  0100               	movlb	0	; () banked
 15869  0126DC  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 15870                           
 15871                           ; BSR set to: 0
 15872                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 15873  0126E0  0101               	movlb	1	; () banked
 15874  0126E2  EE20 F004          	lfsr	2,4
 15875  0126E6  5101               	movf	Port_Init@pInput& (0+255),w,b
 15876  0126E8  26D9               	addwf	fsr2l,f,c
 15877  0126EA  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15878  0126EC  22DA               	addwfc	fsr2h,f,c
 15879  0126EE  CFDE F104          	movff	postinc2,??_Port_Init
 15880  0126F2  CFDD F105          	movff	postdec2,??_Port_Init+1
 15881  0126F6  C104  FFD9         	movff	??_Port_Init,fsr2l
 15882  0126FA  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 15883  0126FE  0E00               	movlw	0
 15884  012700  6EDF               	movwf	indf2,c
 15885                           
 15886                           ; BSR set to: 1
 15887                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 15888  012702  0101               	movlb	1	; () banked
 15889  012704  EE20 F002          	lfsr	2,2
 15890  012708  5101               	movf	Port_Init@pInput& (0+255),w,b
 15891  01270A  26D9               	addwf	fsr2l,f,c
 15892  01270C  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 15893  01270E  22DA               	addwfc	fsr2h,f,c
 15894  012710  CFDE F104          	movff	postinc2,??_Port_Init
 15895  012714  CFDD F105          	movff	postdec2,??_Port_Init+1
 15896  012718  C104  FFD9         	movff	??_Port_Init,fsr2l
 15897  01271C  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 15898  012720  0EFF               	movlw	255
 15899  012722  6EDF               	movwf	indf2,c
 15900                           
 15901                           ; BSR set to: 1
 15902                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 15903  012724  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 15904  012728  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 15905  01272C  0E00               	movlw	0
 15906  01272E  0100               	movlb	0	; () banked
 15907  012730  6FF6               	movwf	Port_SetType@pType& (0+255),b
 15908  012732  EC9E  F08C         	call	_Port_SetType	;wreg free
 15909                           
 15910                           ;Port.c: 166: UINT8 i;
 15911                           ;Port.c: 167: for (i=0; i<8; i++)
 15912  012736  0E00               	movlw	0
 15913  012738  0101               	movlb	1	; () banked
 15914  01273A  6F06               	movwf	Port_Init@i& (0+255),b
 15915  01273C                     l13143:
 15916                           
 15917                           ; BSR set to: 1
 15918  01273C  0E07               	movlw	7
 15919  01273E  0101               	movlb	1	; () banked
 15920  012740  6506               	cpfsgt	Port_Init@i& (0+255),b
 15921  012742  D031               	goto	l403
 15922  012744  D04B               	goto	u9540
 15923  012746                     
 15924                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 15925                           
 15926                           ; BSR set to: 1
 15927  012746  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15928  01274A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15929  01274E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15930  012752  0E03               	movlw	3
 15931  012754  0100               	movlb	0	; () banked
 15932  012756  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15933  012758  EC80  F091         	call	_Port_SetPinType	;wreg free
 15934                           
 15935                           ;Port.c: 173: break;
 15936  01275C  D03C               	goto	l405
 15937  01275E                     
 15938                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 15939  01275E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15940  012762  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15941  012766  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15942  01276A  0E02               	movlw	2
 15943  01276C  0100               	movlb	0	; () banked
 15944  01276E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15945  012770  EC80  F091         	call	_Port_SetPinType	;wreg free
 15946                           
 15947                           ;Port.c: 176: break;
 15948  012774  D030               	goto	l405
 15949  012776                     
 15950                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 15951  012776  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15952  01277A  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15953  01277E  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15954  012782  0E01               	movlw	1
 15955  012784  0100               	movlb	0	; () banked
 15956  012786  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15957  012788  EC80  F091         	call	_Port_SetPinType	;wreg free
 15958                           
 15959                           ;Port.c: 179: break;
 15960  01278C  D024               	goto	l405
 15961  01278E                     
 15962                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 15963  01278E  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 15964  012792  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 15965  012796  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 15966  01279A  0E00               	movlw	0
 15967  01279C  0100               	movlb	0	; () banked
 15968  01279E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 15969  0127A0  EC80  F091         	call	_Port_SetPinType	;wreg free
 15970                           
 15971                           ;Port.c: 183: }
 15972                           
 15973                           ;Port.c: 182: break;
 15974  0127A4  D018               	goto	l405
 15975  0127A6                     l403:
 15976  0127A6  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 15977  0127AA  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 15978  0127AE  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 15979  0127B2  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 15980  0127B6  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 15981  0127BA  EC37  F0AD         	call	_Word_GetPair	;wreg free
 15982                           
 15983                           ; Switch size 1, requested type "space"
 15984                           ; Number of cases is 4, Range of values is 0 to 3
 15985                           ; switch strategies available:
 15986                           ; Name         Instructions Cycles
 15987                           ; simple_byte           13     7 (average)
 15988                           ;	Chosen strategy is simple_byte
 15989  0127BE  0A00               	xorlw	0	; case 0
 15990  0127C0  B4D8               	btfsc	status,2,c
 15991  0127C2  D7C1               	goto	l404
 15992  0127C4  0A01               	xorlw	1	; case 1
 15993  0127C6  B4D8               	btfsc	status,2,c
 15994  0127C8  D7D6               	goto	l407
 15995  0127CA  0A03               	xorlw	3	; case 2
 15996  0127CC  B4D8               	btfsc	status,2,c
 15997  0127CE  D7C7               	goto	l406
 15998  0127D0  0A01               	xorlw	1	; case 3
 15999  0127D2  B4D8               	btfsc	status,2,c
 16000  0127D4  D7DC               	goto	l408
 16001  0127D6                     l405:
 16002  0127D6  0101               	movlb	1	; () banked
 16003  0127D8  2B06               	incf	Port_Init@i& (0+255),f,b
 16004  0127DA  D7B0               	goto	l13143
 16005  0127DC                     u9540:
 16006                           
 16007                           ; BSR set to: 1
 16008                           ;Port.c: 184: }
 16009                           ;Port.c: 185: Port_Set(pInput, 0x00);
 16010                           
 16011                           ; BSR set to: 1
 16012  0127DC  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 16013  0127E0  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 16014  0127E4  0E00               	movlw	0
 16015  0127E6  0100               	movlb	0	; () banked
 16016  0127E8  6FCB               	movwf	Port_Set@pValue& (0+255),b
 16017  0127EA  EC54  F088         	call	_Port_Set	;wreg free
 16018  0127EE  0012               	return		;funcret
 16019  0127F0                     __end_of_Port_Init:
 16020                           	opt stack 0
 16021                           tosu	equ	0xFFF
 16022                           tosh	equ	0xFFE
 16023                           tosl	equ	0xFFD
 16024                           pclath	equ	0xFFA
 16025                           tblptru	equ	0xFF8
 16026                           tblptrh	equ	0xFF7
 16027                           tblptrl	equ	0xFF6
 16028                           tablat	equ	0xFF5
 16029                           prodh	equ	0xFF4
 16030                           prodl	equ	0xFF3
 16031                           intcon	equ	0xFF2
 16032                           postinc0	equ	0xFEE
 16033                           wreg	equ	0xFE8
 16034                           indf1	equ	0xFE7
 16035                           postdec1	equ	0xFE5
 16036                           fsr1h	equ	0xFE2
 16037                           fsr1l	equ	0xFE1
 16038                           indf2	equ	0xFDF
 16039                           postinc2	equ	0xFDE
 16040                           postdec2	equ	0xFDD
 16041                           plusw2	equ	0xFDB
 16042                           fsr2h	equ	0xFDA
 16043                           fsr2l	equ	0xFD9
 16044                           status	equ	0xFD8
 16045                           
 16046 ;; *************** function _Port_SetType *****************
 16047 ;; Defined at:
 16048 ;;		line 513 in file "Library/Port.c"
 16049 ;; Parameters:    Size  Location     Type
 16050 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 16051 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16052 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16053 ;;  pType           1   60[BANK0 ] enum E6795
 16054 ;; Auto vars:     Size  Location     Type
 16055 ;;  Output          1    0[BANK1 ] enum E6475
 16056 ;; Return value:  Size  Location     Type
 16057 ;;                  1    wreg      enum E6475
 16058 ;; Registers used:
 16059 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16060 ;; Tracked objects:
 16061 ;;		On entry : 0/0
 16062 ;;		On exit  : 0/0
 16063 ;;		Unchanged: 0/0
 16064 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16065 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16066 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16067 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16068 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16069 ;;Total ram usage:        6 bytes
 16070 ;; Hardware stack levels used:    1
 16071 ;; Hardware stack levels required when called:   14
 16072 ;; This function calls:
 16073 ;;		_Port_CheckPortType
 16074 ;;		_Word_SetPair
 16075 ;; This function is called by:
 16076 ;;		_Port_Init
 16077 ;;		_MXK_Init
 16078 ;; This function uses a non-reentrant model
 16079 ;;
 16080                           
 16081                           	psect	text73
 16082  01193C                     __ptext73:
 16083                           	opt stack 0
 16084  01193C                     _Port_SetType:
 16085                           	opt stack 14
 16086                           
 16087                           ;Port.c: 515: ePinError Output = ePinErrorState;
 16088                           
 16089                           ;incstack = 0
 16090  01193C  0E05               	movlw	5
 16091  01193E  0101               	movlb	1	; () banked
 16092  011940  6F00               	movwf	Port_SetType@Output& (0+255),b
 16093                           
 16094                           ;Port.c: 517: switch (pType)
 16095  011942  D07A               	goto	l509
 16096  011944                     
 16097                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 16098                           
 16099                           ; BSR set to: 1
 16100  011944  0100               	movlb	0	; () banked
 16101  011946  EE20 F002          	lfsr	2,2
 16102  01194A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 16103  01194C  26D9               	addwf	fsr2l,f,c
 16104  01194E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16105  011950  22DA               	addwfc	fsr2h,f,c
 16106  011952  CFDE F0F7          	movff	postinc2,??_Port_SetType
 16107  011956  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 16108  01195A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 16109  01195E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 16110  011962  0EFF               	movlw	255
 16111  011964  D067               	goto	L10
 16112  011966                     
 16113                           ; BSR set to: 0
 16114                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 16115                           
 16116                           ; BSR set to: 0
 16117  011966  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16118  01196A  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16119  01196E  0E01               	movlw	1
 16120  011970  0100               	movlb	0	; () banked
 16121  011972  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16122  011974  EC82  F0AB         	call	_Port_CheckPortType	;wreg free
 16123  011978  0101               	movlb	1	; () banked
 16124  01197A  6F00               	movwf	Port_SetType@Output& (0+255),b
 16125  01197C  0101               	movlb	1	; () banked
 16126  01197E  5100               	movf	Port_SetType@Output& (0+255),w,b
 16127  011980  A4D8               	btfss	status,2,c
 16128  011982  0012               	return	
 16129                           
 16130                           ; BSR set to: 1
 16131                           ;Port.c: 527: {
 16132                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 16133  011984  0100               	movlb	0	; () banked
 16134  011986  EE20 F002          	lfsr	2,2
 16135  01198A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 16136  01198C  26D9               	addwf	fsr2l,f,c
 16137  01198E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16138  011990  22DA               	addwfc	fsr2h,f,c
 16139  011992  CFDE F0F7          	movff	postinc2,??_Port_SetType
 16140  011996  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 16141  01199A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 16142  01199E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 16143  0119A2  0E00               	movlw	0
 16144  0119A4  6EDF               	movwf	indf2,c
 16145                           
 16146                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 16147  0119A6  0100               	movlb	0	; () banked
 16148  0119A8  EE20 F004          	lfsr	2,4
 16149  0119AC  D036               	goto	L21
 16150  0119AE                     
 16151                           ; BSR set to: 0
 16152                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 16153                           
 16154                           ; BSR set to: 0
 16155  0119AE  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16156  0119B2  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16157  0119B6  0E02               	movlw	2
 16158  0119B8  0100               	movlb	0	; () banked
 16159  0119BA  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16160  0119BC  EC82  F0AB         	call	_Port_CheckPortType	;wreg free
 16161  0119C0  0101               	movlb	1	; () banked
 16162  0119C2  6F00               	movwf	Port_SetType@Output& (0+255),b
 16163  0119C4  0101               	movlb	1	; () banked
 16164  0119C6  5100               	movf	Port_SetType@Output& (0+255),w,b
 16165  0119C8  A4D8               	btfss	status,2,c
 16166  0119CA  0012               	return	
 16167                           
 16168                           ; BSR set to: 1
 16169                           ;Port.c: 538: {
 16170                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 16171  0119CC  0100               	movlb	0	; () banked
 16172  0119CE  EE20 F002          	lfsr	2,2
 16173  0119D2  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 16174  0119D4  26D9               	addwf	fsr2l,f,c
 16175  0119D6  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16176  0119D8  22DA               	addwfc	fsr2h,f,c
 16177  0119DA  CFDE F0F7          	movff	postinc2,??_Port_SetType
 16178  0119DE  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 16179  0119E2  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 16180  0119E6  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 16181  0119EA  0EFF               	movlw	255
 16182  0119EC  6EDF               	movwf	indf2,c
 16183                           
 16184                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 16185  0119EE  0100               	movlb	0	; () banked
 16186  0119F0  EE20 F004          	lfsr	2,4
 16187  0119F4  D7AA               	goto	L11
 16188  0119F6                     
 16189                           ; BSR set to: 0
 16190                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 16191                           
 16192                           ; BSR set to: 0
 16193  0119F6  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 16194  0119FA  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 16195  0119FE  0E00               	movlw	0
 16196  011A00  0100               	movlb	0	; () banked
 16197  011A02  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 16198  011A04  EC82  F0AB         	call	_Port_CheckPortType	;wreg free
 16199  011A08  0101               	movlb	1	; () banked
 16200  011A0A  6F00               	movwf	Port_SetType@Output& (0+255),b
 16201  011A0C  0101               	movlb	1	; () banked
 16202  011A0E  5100               	movf	Port_SetType@Output& (0+255),w,b
 16203  011A10  A4D8               	btfss	status,2,c
 16204  011A12  0012               	return	
 16205                           
 16206                           ; BSR set to: 1
 16207                           ;Port.c: 549: {
 16208                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 16209  011A14  0100               	movlb	0	; () banked
 16210  011A16  EE20 F002          	lfsr	2,2
 16211  011A1A                     L21:
 16212  011A1A  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 16213  011A1C  26D9               	addwf	fsr2l,f,c
 16214  011A1E  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 16215  011A20  22DA               	addwfc	fsr2h,f,c
 16216  011A22  CFDE F0F7          	movff	postinc2,??_Port_SetType
 16217  011A26  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 16218  011A2A  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 16219  011A2E  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 16220  011A32  0E00               	movlw	0
 16221  011A34                     L10:
 16222  011A34  6EDF               	movwf	indf2,c
 16223                           
 16224                           ;Port.c: 552: }
 16225  011A36  D00E               	goto	l511
 16226  011A38                     l509:
 16227                           
 16228                           ; BSR set to: 0
 16229  011A38  0100               	movlb	0	; () banked
 16230  011A3A  51F6               	movf	Port_SetType@pType& (0+255),w,b
 16231                           
 16232                           ; Switch size 1, requested type "space"
 16233                           ; Number of cases is 4, Range of values is 0 to 3
 16234                           ; switch strategies available:
 16235                           ; Name         Instructions Cycles
 16236                           ; simple_byte           13     7 (average)
 16237                           ;	Chosen strategy is simple_byte
 16238  011A3C  0A00               	xorlw	0	; case 0
 16239  011A3E  B4D8               	btfsc	status,2,c
 16240  011A40  D781               	goto	l510
 16241  011A42  0A01               	xorlw	1	; case 1
 16242  011A44  B4D8               	btfsc	status,2,c
 16243  011A46  D78F               	goto	l512
 16244  011A48  0A03               	xorlw	3	; case 2
 16245  011A4A  B4D8               	btfsc	status,2,c
 16246  011A4C  D7B0               	goto	l516
 16247  011A4E  0A01               	xorlw	1	; case 3
 16248  011A50  B4D8               	btfsc	status,2,c
 16249  011A52  D7D1               	goto	l519
 16250  011A54                     l511:
 16251                           
 16252                           ; BSR set to: 0
 16253                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 16254                           
 16255                           ; BSR set to: 0
 16256  011A54  0E08               	movlw	8
 16257  011A56  0100               	movlb	0	; () banked
 16258  011A58  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16259  011A5A  0100               	movlb	0	; () banked
 16260  011A5C  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16261  011A5E  0E00               	movlw	0
 16262  011A60  0100               	movlb	0	; () banked
 16263  011A62  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16264  011A64  0100               	movlb	0	; () banked
 16265  011A66  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16266  011A68  0E00               	movlw	0
 16267  011A6A  0100               	movlb	0	; () banked
 16268  011A6C  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16269  011A6E  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16270  011A72  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16271                           
 16272                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 16273  011A76  0E08               	movlw	8
 16274  011A78  0100               	movlb	0	; () banked
 16275  011A7A  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16276  011A7C  0100               	movlb	0	; () banked
 16277  011A7E  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16278  011A80  0E00               	movlw	0
 16279  011A82  0100               	movlb	0	; () banked
 16280  011A84  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16281  011A86  0100               	movlb	0	; () banked
 16282  011A88  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16283  011A8A  0E01               	movlw	1
 16284  011A8C  0100               	movlb	0	; () banked
 16285  011A8E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16286  011A90  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16287  011A94  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16288                           
 16289                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 16290  011A98  0E08               	movlw	8
 16291  011A9A  0100               	movlb	0	; () banked
 16292  011A9C  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16293  011A9E  0100               	movlb	0	; () banked
 16294  011AA0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16295  011AA2  0E00               	movlw	0
 16296  011AA4  0100               	movlb	0	; () banked
 16297  011AA6  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16298  011AA8  0100               	movlb	0	; () banked
 16299  011AAA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16300  011AAC  0E02               	movlw	2
 16301  011AAE  0100               	movlb	0	; () banked
 16302  011AB0  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16303  011AB2  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16304  011AB6  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16305                           
 16306                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 16307  011ABA  0E08               	movlw	8
 16308  011ABC  0100               	movlb	0	; () banked
 16309  011ABE  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16310  011AC0  0100               	movlb	0	; () banked
 16311  011AC2  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16312  011AC4  0E00               	movlw	0
 16313  011AC6  0100               	movlb	0	; () banked
 16314  011AC8  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16315  011ACA  0100               	movlb	0	; () banked
 16316  011ACC  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16317  011ACE  0E03               	movlw	3
 16318  011AD0  0100               	movlb	0	; () banked
 16319  011AD2  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16320  011AD4  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16321  011AD8  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16322                           
 16323                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 16324  011ADC  0E08               	movlw	8
 16325  011ADE  0100               	movlb	0	; () banked
 16326  011AE0  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16327  011AE2  0100               	movlb	0	; () banked
 16328  011AE4  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16329  011AE6  0E00               	movlw	0
 16330  011AE8  0100               	movlb	0	; () banked
 16331  011AEA  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16332  011AEC  0100               	movlb	0	; () banked
 16333  011AEE  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16334  011AF0  0E04               	movlw	4
 16335  011AF2  0100               	movlb	0	; () banked
 16336  011AF4  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16337  011AF6  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16338  011AFA  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16339                           
 16340                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 16341  011AFE  0E08               	movlw	8
 16342  011B00  0100               	movlb	0	; () banked
 16343  011B02  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16344  011B04  0100               	movlb	0	; () banked
 16345  011B06  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16346  011B08  0E00               	movlw	0
 16347  011B0A  0100               	movlb	0	; () banked
 16348  011B0C  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16349  011B0E  0100               	movlb	0	; () banked
 16350  011B10  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16351  011B12  0E05               	movlw	5
 16352  011B14  0100               	movlb	0	; () banked
 16353  011B16  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16354  011B18  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16355  011B1C  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16356                           
 16357                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 16358  011B20  0E08               	movlw	8
 16359  011B22  0100               	movlb	0	; () banked
 16360  011B24  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16361  011B26  0100               	movlb	0	; () banked
 16362  011B28  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16363  011B2A  0E00               	movlw	0
 16364  011B2C  0100               	movlb	0	; () banked
 16365  011B2E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16366  011B30  0100               	movlb	0	; () banked
 16367  011B32  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16368  011B34  0E06               	movlw	6
 16369  011B36  0100               	movlb	0	; () banked
 16370  011B38  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16371  011B3A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16372  011B3E  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16373                           
 16374                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 16375  011B42  0E08               	movlw	8
 16376  011B44  0100               	movlb	0	; () banked
 16377  011B46  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 16378  011B48  0100               	movlb	0	; () banked
 16379  011B4A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 16380  011B4C  0E00               	movlw	0
 16381  011B4E  0100               	movlb	0	; () banked
 16382  011B50  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 16383  011B52  0100               	movlb	0	; () banked
 16384  011B54  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 16385  011B56  0E07               	movlw	7
 16386  011B58  0100               	movlb	0	; () banked
 16387  011B5A  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 16388  011B5C  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 16389  011B60  EC11  F0AC         	call	_Word_SetPair	;wreg free
 16390  011B64  0012               	return	
 16391  011B66                     __end_of_Port_SetType:
 16392                           	opt stack 0
 16393                           tosu	equ	0xFFF
 16394                           tosh	equ	0xFFE
 16395                           tosl	equ	0xFFD
 16396                           pclath	equ	0xFFA
 16397                           tblptru	equ	0xFF8
 16398                           tblptrh	equ	0xFF7
 16399                           tblptrl	equ	0xFF6
 16400                           tablat	equ	0xFF5
 16401                           prodh	equ	0xFF4
 16402                           prodl	equ	0xFF3
 16403                           intcon	equ	0xFF2
 16404                           postinc0	equ	0xFEE
 16405                           wreg	equ	0xFE8
 16406                           indf1	equ	0xFE7
 16407                           postdec1	equ	0xFE5
 16408                           fsr1h	equ	0xFE2
 16409                           fsr1l	equ	0xFE1
 16410                           indf2	equ	0xFDF
 16411                           postinc2	equ	0xFDE
 16412                           postdec2	equ	0xFDD
 16413                           plusw2	equ	0xFDB
 16414                           fsr2h	equ	0xFDA
 16415                           fsr2l	equ	0xFD9
 16416                           status	equ	0xFD8
 16417                           
 16418 ;; *************** function _Port_CheckPortType *****************
 16419 ;; Defined at:
 16420 ;;		line 138 in file "Library/Port.c"
 16421 ;; Parameters:    Size  Location     Type
 16422 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 16423 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16424 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16425 ;;  pDrive          1   56[BANK0 ] enum E6469
 16426 ;; Auto vars:     Size  Location     Type
 16427 ;;  Output          1   57[BANK0 ] enum E6475
 16428 ;; Return value:  Size  Location     Type
 16429 ;;                  1    wreg      enum E6475
 16430 ;; Registers used:
 16431 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16432 ;; Tracked objects:
 16433 ;;		On entry : 0/0
 16434 ;;		On exit  : 0/0
 16435 ;;		Unchanged: 0/0
 16436 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16437 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16438 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16439 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16440 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16441 ;;Total ram usage:        4 bytes
 16442 ;; Hardware stack levels used:    1
 16443 ;; Hardware stack levels required when called:   13
 16444 ;; This function calls:
 16445 ;;		_Port_CheckQuadType
 16446 ;; This function is called by:
 16447 ;;		_Port_SetType
 16448 ;; This function uses a non-reentrant model
 16449 ;;
 16450                           
 16451                           	psect	text74
 16452  015704                     __ptext74:
 16453                           	opt stack 0
 16454  015704                     _Port_CheckPortType:
 16455                           	opt stack 14
 16456                           
 16457                           ;Port.c: 140: ePinError Output = ePinErrorState;
 16458                           
 16459                           ;incstack = 0
 16460  015704  0E05               	movlw	5
 16461  015706  0100               	movlb	0	; () banked
 16462  015708  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 16463                           
 16464                           ; BSR set to: 0
 16465                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 16466  01570A  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16467  01570E  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16468  015712  0E00               	movlw	0
 16469  015714  0100               	movlb	0	; () banked
 16470  015716  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16471  015718  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16472  01571C  EC10  F0AA         	call	_Port_CheckQuadType	;wreg free
 16473  015720  0100               	movlb	0	; () banked
 16474  015722  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 16475  015724  0100               	movlb	0	; () banked
 16476  015726  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 16477  015728  A4D8               	btfss	status,2,c
 16478  01572A  D00D               	goto	l397
 16479                           
 16480                           ; BSR set to: 0
 16481                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 16482  01572C  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 16483  015730  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 16484  015734  0E01               	movlw	1
 16485  015736  0100               	movlb	0	; () banked
 16486  015738  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 16487  01573A  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 16488  01573E  EC10  F0AA         	call	_Port_CheckQuadType	;wreg free
 16489  015742  0100               	movlb	0	; () banked
 16490  015744  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 16491  015746                     l397:
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;Port.c: 146: return Output;
 16495                           
 16496                           ; BSR set to: 0
 16497  015746  0100               	movlb	0	; () banked
 16498  015748  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 16499  01574A  0012               	return	
 16500  01574C                     __end_of_Port_CheckPortType:
 16501                           	opt stack 0
 16502                           tosu	equ	0xFFF
 16503                           tosh	equ	0xFFE
 16504                           tosl	equ	0xFFD
 16505                           pclath	equ	0xFFA
 16506                           tblptru	equ	0xFF8
 16507                           tblptrh	equ	0xFF7
 16508                           tblptrl	equ	0xFF6
 16509                           tablat	equ	0xFF5
 16510                           prodh	equ	0xFF4
 16511                           prodl	equ	0xFF3
 16512                           intcon	equ	0xFF2
 16513                           postinc0	equ	0xFEE
 16514                           wreg	equ	0xFE8
 16515                           indf1	equ	0xFE7
 16516                           postdec1	equ	0xFE5
 16517                           fsr1h	equ	0xFE2
 16518                           fsr1l	equ	0xFE1
 16519                           indf2	equ	0xFDF
 16520                           postinc2	equ	0xFDE
 16521                           postdec2	equ	0xFDD
 16522                           plusw2	equ	0xFDB
 16523                           fsr2h	equ	0xFDA
 16524                           fsr2l	equ	0xFD9
 16525                           status	equ	0xFD8
 16526                           
 16527 ;; *************** function _Port_Set *****************
 16528 ;; Defined at:
 16529 ;;		line 570 in file "Library/Port.c"
 16530 ;; Parameters:    Size  Location     Type
 16531 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 16532 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 16533 ;;		 -> PortD(10), PortC(10), PortF(10), 
 16534 ;;  pValue          1   17[BANK0 ] unsigned char 
 16535 ;; Auto vars:     Size  Location     Type
 16536 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 16537 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 16538 ;;  Type            1   38[BANK0 ] enum E6795
 16539 ;; Return value:  Size  Location     Type
 16540 ;;                  1    wreg      void 
 16541 ;; Registers used:
 16542 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16543 ;; Tracked objects:
 16544 ;;		On entry : 0/0
 16545 ;;		On exit  : 0/0
 16546 ;;		Unchanged: 0/0
 16547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16548 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16549 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16550 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16551 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16552 ;;Total ram usage:       24 bytes
 16553 ;; Hardware stack levels used:    1
 16554 ;; Hardware stack levels required when called:   10
 16555 ;; This function calls:
 16556 ;;		_Byte_SetByte
 16557 ;;		_Word_GetPair
 16558 ;; This function is called by:
 16559 ;;		_Port_Init
 16560 ;;		_Port_Toggle
 16561 ;; This function uses a non-reentrant model
 16562 ;;
 16563                           
 16564                           	psect	text75
 16565  0110A8                     __ptext75:
 16566                           	opt stack 0
 16567  0110A8                     _Port_Set:
 16568                           	opt stack 17
 16569                           
 16570                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 16571                           
 16572                           ; BSR set to: 0
 16573                           ;incstack = 0
 16574  0110A8  0E08               	movlw	8
 16575  0110AA  0100               	movlb	0	; () banked
 16576  0110AC  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16577  0110AE  0100               	movlb	0	; () banked
 16578  0110B0  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16579  0110B2  0E00               	movlw	0
 16580  0110B4  0100               	movlb	0	; () banked
 16581  0110B6  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16582  0110B8  0100               	movlb	0	; () banked
 16583  0110BA  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16584  0110BC  0E00               	movlw	0
 16585  0110BE  0100               	movlb	0	; () banked
 16586  0110C0  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16587  0110C2  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16588  0110C6  0100               	movlb	0	; () banked
 16589  0110C8  6FE0               	movwf	Port_Set@Type& (0+255),b
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 16593  0110CA  0100               	movlb	0	; () banked
 16594  0110CC  51E0               	movf	Port_Set@Type& (0+255),w,b
 16595  0110CE  0100               	movlb	0	; () banked
 16596  0110D0  6FCC               	movwf	??_Port_Set& (0+255),b
 16597  0110D2  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16598  0110D4  0E0E               	movlw	14
 16599  0110D6                     u9085:
 16600  0110D6  90D8               	bcf	status,0,c
 16601  0110D8  0100               	movlb	0	; () banked
 16602  0110DA  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16603  0110DC  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16604  0110DE  2EE8               	decfsz	wreg,f,c
 16605  0110E0  D7FA               	goto	u9085
 16606  0110E2  0100               	movlb	0	; () banked
 16607  0110E4  51E0               	movf	Port_Set@Type& (0+255),w,b
 16608  0110E6  0100               	movlb	0	; () banked
 16609  0110E8  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 16610  0110EA  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 16611  0110EC  0E0C               	movlw	12
 16612  0110EE                     u9095:
 16613  0110EE  90D8               	bcf	status,0,c
 16614  0110F0  0100               	movlb	0	; () banked
 16615  0110F2  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 16616  0110F4  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 16617  0110F6  2EE8               	decfsz	wreg,f,c
 16618  0110F8  D7FA               	goto	u9095
 16619  0110FA  0100               	movlb	0	; () banked
 16620  0110FC  51E0               	movf	Port_Set@Type& (0+255),w,b
 16621  0110FE  0100               	movlb	0	; () banked
 16622  011100  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 16623  011102  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 16624  011104  0E0A               	movlw	10
 16625  011106                     u9105:
 16626  011106  90D8               	bcf	status,0,c
 16627  011108  0100               	movlb	0	; () banked
 16628  01110A  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 16629  01110C  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 16630  01110E  2EE8               	decfsz	wreg,f,c
 16631  011110  D7FA               	goto	u9105
 16632  011112  0100               	movlb	0	; () banked
 16633  011114  51E0               	movf	Port_Set@Type& (0+255),w,b
 16634  011116  0100               	movlb	0	; () banked
 16635  011118  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 16636  01111A  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 16637  01111C  0100               	movlb	0	; () banked
 16638  01111E  51E0               	movf	Port_Set@Type& (0+255),w,b
 16639  011120  0100               	movlb	0	; () banked
 16640  011122  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 16641  011124  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 16642  011126  0E06               	movlw	6
 16643  011128                     u9115:
 16644  011128  90D8               	bcf	status,0,c
 16645  01112A  0100               	movlb	0	; () banked
 16646  01112C  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 16647  01112E  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 16648  011130  2EE8               	decfsz	wreg,f,c
 16649  011132  D7FA               	goto	u9115
 16650  011134  0100               	movlb	0	; () banked
 16651  011136  51E0               	movf	Port_Set@Type& (0+255),w,b
 16652  011138  0100               	movlb	0	; () banked
 16653  01113A  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 16654  01113C  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 16655  01113E  0100               	movlb	0	; () banked
 16656  011140  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 16657  011142  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 16658  011144  0EF0               	movlw	240
 16659  011146  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 16660  011148  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 16661  01114A  0B0F               	andlw	15
 16662  01114C  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 16663  01114E  0EF0               	movlw	240
 16664  011150  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 16665  011152  0100               	movlb	0	; () banked
 16666  011154  51E0               	movf	Port_Set@Type& (0+255),w,b
 16667  011156  0100               	movlb	0	; () banked
 16668  011158  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 16669  01115A  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 16670  01115C  0100               	movlb	0	; () banked
 16671  01115E  90D8               	bcf	status,0,c
 16672  011160  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16673  011162  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16674  011164  0100               	movlb	0	; () banked
 16675  011166  90D8               	bcf	status,0,c
 16676  011168  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 16677  01116A  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 16678  01116C  0100               	movlb	0	; () banked
 16679  01116E  51E0               	movf	Port_Set@Type& (0+255),w,b
 16680  011170  0100               	movlb	0	; () banked
 16681  011172  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 16682  011174  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 16683  011176  0100               	movlb	0	; () banked
 16684  011178  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 16685  01117A  0100               	movlb	0	; () banked
 16686  01117C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16687  01117E  0100               	movlb	0	; () banked
 16688  011180  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 16689  011182  0100               	movlb	0	; () banked
 16690  011184  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16691  011186  0100               	movlb	0	; () banked
 16692  011188  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 16693  01118A  0100               	movlb	0	; () banked
 16694  01118C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16695  01118E  0100               	movlb	0	; () banked
 16696  011190  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 16697  011192  0100               	movlb	0	; () banked
 16698  011194  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16699  011196  0100               	movlb	0	; () banked
 16700  011198  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 16701  01119A  0100               	movlb	0	; () banked
 16702  01119C  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16703  01119E  0100               	movlb	0	; () banked
 16704  0111A0  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 16705  0111A2  0100               	movlb	0	; () banked
 16706  0111A4  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16707  0111A6  0100               	movlb	0	; () banked
 16708  0111A8  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 16709  0111AA  0100               	movlb	0	; () banked
 16710  0111AC  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16711  0111AE  0100               	movlb	0	; () banked
 16712  0111B0  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 16713  0111B2  0100               	movlb	0	; () banked
 16714  0111B4  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16715  0111B6  0100               	movlb	0	; () banked
 16716  0111B8  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 16717  0111BA  0100               	movlb	0	; () banked
 16718  0111BC  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16719  0111BE  0100               	movlb	0	; () banked
 16720  0111C0  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 16721  0111C2  0100               	movlb	0	; () banked
 16722  0111C4  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16723  0111C6  0100               	movlb	0	; () banked
 16724  0111C8  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 16725  0111CA  0100               	movlb	0	; () banked
 16726  0111CC  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 16727  0111CE  0100               	movlb	0	; () banked
 16728  0111D0  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 16729  0111D2  0100               	movlb	0	; () banked
 16730  0111D4  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 16731  0111D6  0100               	movlb	0	; () banked
 16732  0111D8  51CC               	movf	??_Port_Set& (0+255),w,b
 16733  0111DA  0100               	movlb	0	; () banked
 16734  0111DC  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 16735  0111DE  0100               	movlb	0	; () banked
 16736  0111E0  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 16737  0111E2  0100               	movlb	0	; () banked
 16738  0111E4  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16739  0111E6  0100               	movlb	0	; () banked
 16740  0111E8  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 16741  0111EA  0100               	movlb	0	; () banked
 16742  0111EC  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 16743                           
 16744                           ; BSR set to: 0
 16745                           ;Port.c: 574: UINT16 TypeActual = Type;
 16746  0111EE  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 16747  0111F2  0100               	movlb	0	; () banked
 16748  0111F4  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 16749                           
 16750                           ; BSR set to: 0
 16751                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 16752  0111F6  0E08               	movlw	8
 16753  0111F8  0100               	movlb	0	; () banked
 16754  0111FA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16755  0111FC  0100               	movlb	0	; () banked
 16756  0111FE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16757  011200  0E00               	movlw	0
 16758  011202  0100               	movlb	0	; () banked
 16759  011204  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16760  011206  0100               	movlb	0	; () banked
 16761  011208  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16762  01120A  0E01               	movlw	1
 16763  01120C  0100               	movlb	0	; () banked
 16764  01120E  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16765  011210  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16766  011214  0100               	movlb	0	; () banked
 16767  011216  6FCC               	movwf	??_Port_Set& (0+255),b
 16768  011218  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16769  01121A  0100               	movlb	0	; () banked
 16770  01121C  90D8               	bcf	status,0,c
 16771  01121E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16772  011220  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16773  011222  0100               	movlb	0	; () banked
 16774  011224  90D8               	bcf	status,0,c
 16775  011226  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16776  011228  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16777  01122A  0100               	movlb	0	; () banked
 16778  01122C  51CC               	movf	??_Port_Set& (0+255),w,b
 16779  01122E  0100               	movlb	0	; () banked
 16780  011230  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16781  011232  0100               	movlb	0	; () banked
 16782  011234  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16783  011236  0100               	movlb	0	; () banked
 16784  011238  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16785                           
 16786                           ; BSR set to: 0
 16787                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 16788  01123A  0E08               	movlw	8
 16789  01123C  0100               	movlb	0	; () banked
 16790  01123E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16791  011240  0100               	movlb	0	; () banked
 16792  011242  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16793  011244  0E00               	movlw	0
 16794  011246  0100               	movlb	0	; () banked
 16795  011248  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16796  01124A  0100               	movlb	0	; () banked
 16797  01124C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16798  01124E  0E02               	movlw	2
 16799  011250  0100               	movlb	0	; () banked
 16800  011252  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16801  011254  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16802  011258  0100               	movlb	0	; () banked
 16803  01125A  6FCC               	movwf	??_Port_Set& (0+255),b
 16804  01125C  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16805  01125E  0100               	movlb	0	; () banked
 16806  011260  3BCC               	swapf	??_Port_Set& (0+255),f,b
 16807  011262  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 16808  011264  0EF0               	movlw	240
 16809  011266  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 16810  011268  51CC               	movf	??_Port_Set& (0+255),w,b
 16811  01126A  0B0F               	andlw	15
 16812  01126C  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 16813  01126E  0EF0               	movlw	240
 16814  011270  17CC               	andwf	??_Port_Set& (0+255),f,b
 16815  011272  0100               	movlb	0	; () banked
 16816  011274  51CC               	movf	??_Port_Set& (0+255),w,b
 16817  011276  0100               	movlb	0	; () banked
 16818  011278  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16819  01127A  0100               	movlb	0	; () banked
 16820  01127C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16821  01127E  0100               	movlb	0	; () banked
 16822  011280  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16823                           
 16824                           ; BSR set to: 0
 16825                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 16826  011282  0E08               	movlw	8
 16827  011284  0100               	movlb	0	; () banked
 16828  011286  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16829  011288  0100               	movlb	0	; () banked
 16830  01128A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16831  01128C  0E00               	movlw	0
 16832  01128E  0100               	movlb	0	; () banked
 16833  011290  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16834  011292  0100               	movlb	0	; () banked
 16835  011294  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16836  011296  0E03               	movlw	3
 16837  011298  0100               	movlb	0	; () banked
 16838  01129A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16839  01129C  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16840  0112A0  0100               	movlb	0	; () banked
 16841  0112A2  6FCC               	movwf	??_Port_Set& (0+255),b
 16842  0112A4  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16843  0112A6  0E06               	movlw	6
 16844  0112A8                     u9125:
 16845  0112A8  90D8               	bcf	status,0,c
 16846  0112AA  0100               	movlb	0	; () banked
 16847  0112AC  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16848  0112AE  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16849  0112B0  2EE8               	decfsz	wreg,f,c
 16850  0112B2  D7FA               	goto	u9125
 16851  0112B4  0100               	movlb	0	; () banked
 16852  0112B6  51CC               	movf	??_Port_Set& (0+255),w,b
 16853  0112B8  0100               	movlb	0	; () banked
 16854  0112BA  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16855  0112BC  0100               	movlb	0	; () banked
 16856  0112BE  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16857  0112C0  0100               	movlb	0	; () banked
 16858  0112C2  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16859                           
 16860                           ; BSR set to: 0
 16861                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 16862  0112C4  0E08               	movlw	8
 16863  0112C6  0100               	movlb	0	; () banked
 16864  0112C8  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16865  0112CA  0100               	movlb	0	; () banked
 16866  0112CC  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16867  0112CE  0E00               	movlw	0
 16868  0112D0  0100               	movlb	0	; () banked
 16869  0112D2  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16870  0112D4  0100               	movlb	0	; () banked
 16871  0112D6  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16872  0112D8  0E04               	movlw	4
 16873  0112DA  0100               	movlb	0	; () banked
 16874  0112DC  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16875  0112DE  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16876  0112E2  0100               	movlb	0	; () banked
 16877  0112E4  6FCC               	movwf	??_Port_Set& (0+255),b
 16878  0112E6  0100               	movlb	0	; () banked
 16879  0112E8  51CC               	movf	??_Port_Set& (0+255),w,b
 16880  0112EA  0100               	movlb	0	; () banked
 16881  0112EC  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 16882  0112EE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16883  0112F0  0100               	movlb	0	; () banked
 16884  0112F2  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16885  0112F4  0100               	movlb	0	; () banked
 16886  0112F6  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16887  0112F8  0100               	movlb	0	; () banked
 16888  0112FA  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 16889  0112FC  0100               	movlb	0	; () banked
 16890  0112FE  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16891                           
 16892                           ; BSR set to: 0
 16893                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 16894  011300  0E08               	movlw	8
 16895  011302  0100               	movlb	0	; () banked
 16896  011304  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16897  011306  0100               	movlb	0	; () banked
 16898  011308  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16899  01130A  0E00               	movlw	0
 16900  01130C  0100               	movlb	0	; () banked
 16901  01130E  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16902  011310  0100               	movlb	0	; () banked
 16903  011312  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16904  011314  0E05               	movlw	5
 16905  011316  0100               	movlb	0	; () banked
 16906  011318  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16907  01131A  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16908  01131E  0100               	movlb	0	; () banked
 16909  011320  6FCC               	movwf	??_Port_Set& (0+255),b
 16910  011322  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16911  011324  0E0A               	movlw	10
 16912  011326                     u9135:
 16913  011326  90D8               	bcf	status,0,c
 16914  011328  0100               	movlb	0	; () banked
 16915  01132A  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16916  01132C  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16917  01132E  2EE8               	decfsz	wreg,f,c
 16918  011330  D7FA               	goto	u9135
 16919  011332  0100               	movlb	0	; () banked
 16920  011334  51CC               	movf	??_Port_Set& (0+255),w,b
 16921  011336  0100               	movlb	0	; () banked
 16922  011338  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16923  01133A  0100               	movlb	0	; () banked
 16924  01133C  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16925  01133E  0100               	movlb	0	; () banked
 16926  011340  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16927                           
 16928                           ; BSR set to: 0
 16929                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 16930  011342  0E08               	movlw	8
 16931  011344  0100               	movlb	0	; () banked
 16932  011346  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16933  011348  0100               	movlb	0	; () banked
 16934  01134A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16935  01134C  0E00               	movlw	0
 16936  01134E  0100               	movlb	0	; () banked
 16937  011350  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16938  011352  0100               	movlb	0	; () banked
 16939  011354  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16940  011356  0E06               	movlw	6
 16941  011358  0100               	movlb	0	; () banked
 16942  01135A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16943  01135C  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16944  011360  0100               	movlb	0	; () banked
 16945  011362  6FCC               	movwf	??_Port_Set& (0+255),b
 16946  011364  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16947  011366  0E0C               	movlw	12
 16948  011368                     u9145:
 16949  011368  90D8               	bcf	status,0,c
 16950  01136A  0100               	movlb	0	; () banked
 16951  01136C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16952  01136E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16953  011370  2EE8               	decfsz	wreg,f,c
 16954  011372  D7FA               	goto	u9145
 16955  011374  0100               	movlb	0	; () banked
 16956  011376  51CC               	movf	??_Port_Set& (0+255),w,b
 16957  011378  0100               	movlb	0	; () banked
 16958  01137A  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16959  01137C  0100               	movlb	0	; () banked
 16960  01137E  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16961  011380  0100               	movlb	0	; () banked
 16962  011382  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16963                           
 16964                           ; BSR set to: 0
 16965                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 16966  011384  0E08               	movlw	8
 16967  011386  0100               	movlb	0	; () banked
 16968  011388  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 16969  01138A  0100               	movlb	0	; () banked
 16970  01138C  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 16971  01138E  0E00               	movlw	0
 16972  011390  0100               	movlb	0	; () banked
 16973  011392  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 16974  011394  0100               	movlb	0	; () banked
 16975  011396  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 16976  011398  0E07               	movlw	7
 16977  01139A  0100               	movlb	0	; () banked
 16978  01139C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 16979  01139E  EC37  F0AD         	call	_Word_GetPair	;wreg free
 16980  0113A2  0100               	movlb	0	; () banked
 16981  0113A4  6FCC               	movwf	??_Port_Set& (0+255),b
 16982  0113A6  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 16983  0113A8  0E0E               	movlw	14
 16984  0113AA                     u9155:
 16985  0113AA  90D8               	bcf	status,0,c
 16986  0113AC  0100               	movlb	0	; () banked
 16987  0113AE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 16988  0113B0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 16989  0113B2  2EE8               	decfsz	wreg,f,c
 16990  0113B4  D7FA               	goto	u9155
 16991  0113B6  0100               	movlb	0	; () banked
 16992  0113B8  51CC               	movf	??_Port_Set& (0+255),w,b
 16993  0113BA  0100               	movlb	0	; () banked
 16994  0113BC  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 16995  0113BE  0100               	movlb	0	; () banked
 16996  0113C0  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 16997  0113C2  0100               	movlb	0	; () banked
 16998  0113C4  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 16999                           
 17000                           ;Port.c: 584: if (TypeRequired == TypeActual)
 17001  0113C6  0100               	movlb	0	; () banked
 17002  0113C8  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 17003  0113CA  0100               	movlb	0	; () banked
 17004  0113CC  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 17005  0113CE  E148               	bnz	l528
 17006  0113D0  0100               	movlb	0	; () banked
 17007  0113D2  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 17008  0113D4  0100               	movlb	0	; () banked
 17009  0113D6  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 17010  0113D8  A4D8               	btfss	status,2,c
 17011  0113DA  0012               	return	
 17012  0113DC  D032               	goto	l526
 17013  0113DE                     
 17014                           ; BSR set to: 0
 17015                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 17016                           
 17017                           ; BSR set to: 0
 17018  0113DE  0100               	movlb	0	; () banked
 17019  0113E0  EE20 F002          	lfsr	2,2
 17020  0113E4  51C9               	movf	Port_Set@pInput& (0+255),w,b
 17021  0113E6  26D9               	addwf	fsr2l,f,c
 17022  0113E8  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17023  0113EA  22DA               	addwfc	fsr2h,f,c
 17024  0113EC  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 17025  0113F0  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 17026  0113F4  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17027  0113F8  EC74  F0B0         	call	_Byte_SetByte	;wreg free
 17028                           
 17029                           ;Port.c: 594: break;
 17030  0113FC  0012               	return	
 17031  0113FE                     
 17032                           ;Port.c: 597: pValue = ~pValue;
 17033  0113FE  0100               	movlb	0	; () banked
 17034  011400  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 17035                           
 17036                           ; BSR set to: 0
 17037                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 17038  011402  0100               	movlb	0	; () banked
 17039  011404  EE20 F002          	lfsr	2,2
 17040  011408  51C9               	movf	Port_Set@pInput& (0+255),w,b
 17041  01140A  26D9               	addwf	fsr2l,f,c
 17042  01140C  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17043  01140E  22DA               	addwfc	fsr2h,f,c
 17044  011410  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 17045  011414  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 17046  011418  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17047  01141C  EC74  F0B0         	call	_Byte_SetByte	;wreg free
 17048                           
 17049                           ;Port.c: 599: break;
 17050  011420  0012               	return	
 17051  011422                     
 17052                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 17053  011422  0100               	movlb	0	; () banked
 17054  011424  EE20 F004          	lfsr	2,4
 17055  011428  51C9               	movf	Port_Set@pInput& (0+255),w,b
 17056  01142A  26D9               	addwf	fsr2l,f,c
 17057  01142C  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 17058  01142E  22DA               	addwfc	fsr2h,f,c
 17059  011430  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 17060  011434  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 17061  011438  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 17062  01143C  EC74  F0B0         	call	_Byte_SetByte	;wreg free
 17063                           
 17064                           ;Port.c: 606: }
 17065                           
 17066                           ;Port.c: 605: break;
 17067                           
 17068                           ;Port.c: 604: default:
 17069                           
 17070                           ;Port.c: 603: break;
 17071  011440  0012               	return	
 17072  011442                     l526:
 17073  011442  0100               	movlb	0	; () banked
 17074  011444  51E0               	movf	Port_Set@Type& (0+255),w,b
 17075                           
 17076                           ; Switch size 1, requested type "space"
 17077                           ; Number of cases is 4, Range of values is 0 to 3
 17078                           ; switch strategies available:
 17079                           ; Name         Instructions Cycles
 17080                           ; simple_byte           13     7 (average)
 17081                           ;	Chosen strategy is simple_byte
 17082  011446  0A00               	xorlw	0	; case 0
 17083  011448  B4D8               	btfsc	status,2,c
 17084  01144A  0012               	return	
 17085  01144C  0A01               	xorlw	1	; case 1
 17086  01144E  B4D8               	btfsc	status,2,c
 17087  011450  D7C6               	goto	l529
 17088  011452  0A03               	xorlw	3	; case 2
 17089  011454  B4D8               	btfsc	status,2,c
 17090  011456  D7D3               	goto	l531
 17091  011458  0A01               	xorlw	1	; case 3
 17092  01145A  A4D8               	btfss	status,2,c
 17093                           
 17094                           ; BSR set to: 0
 17095                           
 17096                           ; BSR set to: 0
 17097                           ;Port.c: 607: }
 17098  01145C  0012               	return	
 17099  01145E  D7E1               	goto	l532
 17100  011460                     l528:
 17101  011460  0012               	return		;funcret
 17102  011462                     __end_of_Port_Set:
 17103                           	opt stack 0
 17104                           tosu	equ	0xFFF
 17105                           tosh	equ	0xFFE
 17106                           tosl	equ	0xFFD
 17107                           pclath	equ	0xFFA
 17108                           tblptru	equ	0xFF8
 17109                           tblptrh	equ	0xFF7
 17110                           tblptrl	equ	0xFF6
 17111                           tablat	equ	0xFF5
 17112                           prodh	equ	0xFF4
 17113                           prodl	equ	0xFF3
 17114                           intcon	equ	0xFF2
 17115                           postinc0	equ	0xFEE
 17116                           wreg	equ	0xFE8
 17117                           indf1	equ	0xFE7
 17118                           postdec1	equ	0xFE5
 17119                           fsr1h	equ	0xFE2
 17120                           fsr1l	equ	0xFE1
 17121                           indf2	equ	0xFDF
 17122                           postinc2	equ	0xFDE
 17123                           postdec2	equ	0xFDD
 17124                           plusw2	equ	0xFDB
 17125                           fsr2h	equ	0xFDA
 17126                           fsr2l	equ	0xFD9
 17127                           status	equ	0xFD8
 17128                           
 17129 ;; *************** function _Byte_SetByte *****************
 17130 ;; Defined at:
 17131 ;;		line 110 in file "Library/Types.c"
 17132 ;; Parameters:    Size  Location     Type
 17133 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 17134 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 17135 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 17136 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 17137 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 17138 ;;		 -> NULL(0), 
 17139 ;;  pValue          1    2[BANK0 ] unsigned char 
 17140 ;; Auto vars:     Size  Location     Type
 17141 ;;		None
 17142 ;; Return value:  Size  Location     Type
 17143 ;;                  1    wreg      void 
 17144 ;; Registers used:
 17145 ;;		fsr2l, fsr2h
 17146 ;; Tracked objects:
 17147 ;;		On entry : 0/0
 17148 ;;		On exit  : 0/0
 17149 ;;		Unchanged: 0/0
 17150 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17151 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17154 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17155 ;;Total ram usage:        3 bytes
 17156 ;; Hardware stack levels used:    1
 17157 ;; Hardware stack levels required when called:    7
 17158 ;; This function calls:
 17159 ;;		Nothing
 17160 ;; This function is called by:
 17161 ;;		_Port_Set
 17162 ;;		_I2C_Init
 17163 ;; This function uses a non-reentrant model
 17164 ;;
 17165                           
 17166                           	psect	text76
 17167  0160E8                     __ptext76:
 17168                           	opt stack 0
 17169  0160E8                     _Byte_SetByte:
 17170                           	opt stack 19
 17171                           
 17172                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 17173                           
 17174                           ;incstack = 0
 17175  0160E8  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 17176  0160EC  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 17177  0160F0  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 17178  0160F4  0012               	return		;funcret
 17179  0160F6                     __end_of_Byte_SetByte:
 17180                           	opt stack 0
 17181                           tosu	equ	0xFFF
 17182                           tosh	equ	0xFFE
 17183                           tosl	equ	0xFFD
 17184                           pclath	equ	0xFFA
 17185                           tblptru	equ	0xFF8
 17186                           tblptrh	equ	0xFF7
 17187                           tblptrl	equ	0xFF6
 17188                           tablat	equ	0xFF5
 17189                           prodh	equ	0xFF4
 17190                           prodl	equ	0xFF3
 17191                           intcon	equ	0xFF2
 17192                           postinc0	equ	0xFEE
 17193                           wreg	equ	0xFE8
 17194                           indf1	equ	0xFE7
 17195                           postdec1	equ	0xFE5
 17196                           fsr1h	equ	0xFE2
 17197                           fsr1l	equ	0xFE1
 17198                           indf2	equ	0xFDF
 17199                           postinc2	equ	0xFDE
 17200                           postdec2	equ	0xFDD
 17201                           plusw2	equ	0xFDB
 17202                           fsr2h	equ	0xFDA
 17203                           fsr2l	equ	0xFD9
 17204                           status	equ	0xFD8
 17205                           
 17206 ;; *************** function _GetPortTRIS *****************
 17207 ;; Defined at:
 17208 ;;		line 67 in file "Library/Port.c"
 17209 ;; Parameters:    Size  Location     Type
 17210 ;;  pInput          1    wreg     enum E6786
 17211 ;; Auto vars:     Size  Location     Type
 17212 ;;  pInput          1    2[BANK0 ] enum E6786
 17213 ;; Return value:  Size  Location     Type
 17214 ;;                  2    0[BANK0 ] PTR struct Byte
 17215 ;; Registers used:
 17216 ;;		wreg, status,2, status,0
 17217 ;; Tracked objects:
 17218 ;;		On entry : 0/0
 17219 ;;		On exit  : 0/0
 17220 ;;		Unchanged: 0/0
 17221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17222 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17223 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17224 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17225 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17226 ;;Total ram usage:        3 bytes
 17227 ;; Hardware stack levels used:    1
 17228 ;; Hardware stack levels required when called:    7
 17229 ;; This function calls:
 17230 ;;		Nothing
 17231 ;; This function is called by:
 17232 ;;		_Port_Init
 17233 ;; This function uses a non-reentrant model
 17234 ;;
 17235                           
 17236                           	psect	text77
 17237  01436A                     __ptext77:
 17238                           	opt stack 0
 17239  01436A                     _GetPortTRIS:
 17240                           	opt stack 20
 17241                           
 17242                           ;incstack = 0
 17243                           ;GetPortTRIS@pInput stored from wreg
 17244  01436A  0100               	movlb	0	; () banked
 17245  01436C  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 17246                           
 17247                           ;Port.c: 69: switch (pInput)
 17248  01436E  D038               	goto	l363
 17249  014370                     
 17250                           ;Port.c: 72: return (BytePtr)&TRISA;
 17251  014370  0E92               	movlw	146
 17252  014372  0100               	movlb	0	; () banked
 17253  014374  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17254  014376  0E0F               	movlw	15
 17255  014378  0100               	movlb	0	; () banked
 17256  01437A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17257                           
 17258                           ; BSR set to: 0
 17259  01437C  0012               	return	
 17260  01437E                     
 17261                           ; BSR set to: 0
 17262                           ;Port.c: 74: return (BytePtr)&TRISB;
 17263                           
 17264                           ; BSR set to: 0
 17265  01437E  0E93               	movlw	147
 17266  014380  0100               	movlb	0	; () banked
 17267  014382  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17268  014384  0E0F               	movlw	15
 17269  014386  0100               	movlb	0	; () banked
 17270  014388  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17271                           
 17272                           ; BSR set to: 0
 17273  01438A  0012               	return	
 17274  01438C                     
 17275                           ; BSR set to: 0
 17276                           ;Port.c: 76: return (BytePtr)&TRISC;
 17277                           
 17278                           ; BSR set to: 0
 17279  01438C  0E94               	movlw	148
 17280  01438E  0100               	movlb	0	; () banked
 17281  014390  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17282  014392  0E0F               	movlw	15
 17283  014394  0100               	movlb	0	; () banked
 17284  014396  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17285                           
 17286                           ; BSR set to: 0
 17287  014398  0012               	return	
 17288  01439A                     
 17289                           ; BSR set to: 0
 17290                           ;Port.c: 78: return (BytePtr)&TRISD;
 17291                           
 17292                           ; BSR set to: 0
 17293  01439A  0E95               	movlw	149
 17294  01439C  0100               	movlb	0	; () banked
 17295  01439E  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17296  0143A0  0E0F               	movlw	15
 17297  0143A2  0100               	movlb	0	; () banked
 17298  0143A4  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17299                           
 17300                           ; BSR set to: 0
 17301  0143A6  0012               	return	
 17302  0143A8                     
 17303                           ; BSR set to: 0
 17304                           ;Port.c: 80: return (BytePtr)&TRISE;
 17305                           
 17306                           ; BSR set to: 0
 17307  0143A8  0E96               	movlw	150
 17308  0143AA  0100               	movlb	0	; () banked
 17309  0143AC  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17310  0143AE  0E0F               	movlw	15
 17311  0143B0  0100               	movlb	0	; () banked
 17312  0143B2  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17313                           
 17314                           ; BSR set to: 0
 17315  0143B4  0012               	return	
 17316  0143B6                     
 17317                           ; BSR set to: 0
 17318                           ;Port.c: 82: return (BytePtr)&TRISF;
 17319                           
 17320                           ; BSR set to: 0
 17321  0143B6  0E97               	movlw	151
 17322  0143B8  0100               	movlb	0	; () banked
 17323  0143BA  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17324  0143BC  0E0F               	movlw	15
 17325  0143BE  0100               	movlb	0	; () banked
 17326  0143C0  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17327                           
 17328                           ; BSR set to: 0
 17329  0143C2  0012               	return	
 17330  0143C4                     
 17331                           ; BSR set to: 0
 17332                           ;Port.c: 84: return (BytePtr)&TRISG;
 17333                           
 17334                           ; BSR set to: 0
 17335  0143C4  0E98               	movlw	152
 17336  0143C6  0100               	movlb	0	; () banked
 17337  0143C8  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17338  0143CA  0E0F               	movlw	15
 17339  0143CC  0100               	movlb	0	; () banked
 17340  0143CE  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17341                           
 17342                           ; BSR set to: 0
 17343  0143D0  0012               	return	
 17344  0143D2                     
 17345                           ; BSR set to: 0
 17346                           ;Port.c: 86: return (void*)0;
 17347                           
 17348                           ; BSR set to: 0
 17349  0143D2  0E00               	movlw	0
 17350  0143D4  0100               	movlb	0	; () banked
 17351  0143D6  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 17352  0143D8  0E00               	movlw	0
 17353  0143DA  0100               	movlb	0	; () banked
 17354  0143DC  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 17355                           
 17356                           ; BSR set to: 0
 17357                           ;Port.c: 87: }
 17358                           
 17359                           ; BSR set to: 0
 17360  0143DE  0012               	return	
 17361  0143E0                     l363:
 17362                           
 17363                           ; BSR set to: 0
 17364  0143E0  0100               	movlb	0	; () banked
 17365  0143E2  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 17366                           
 17367                           ; Switch size 1, requested type "space"
 17368                           ; Number of cases is 7, Range of values is 0 to 6
 17369                           ; switch strategies available:
 17370                           ; Name         Instructions Cycles
 17371                           ; simple_byte           22    12 (average)
 17372                           ;	Chosen strategy is simple_byte
 17373  0143E4  0A00               	xorlw	0	; case 0
 17374  0143E6  B4D8               	btfsc	status,2,c
 17375  0143E8  D7C3               	goto	l364
 17376  0143EA  0A01               	xorlw	1	; case 1
 17377  0143EC  B4D8               	btfsc	status,2,c
 17378  0143EE  D7C7               	goto	l366
 17379  0143F0  0A03               	xorlw	3	; case 2
 17380  0143F2  B4D8               	btfsc	status,2,c
 17381  0143F4  D7CB               	goto	l367
 17382  0143F6  0A01               	xorlw	1	; case 3
 17383  0143F8  B4D8               	btfsc	status,2,c
 17384  0143FA  D7CF               	goto	l368
 17385  0143FC  0A07               	xorlw	7	; case 4
 17386  0143FE  B4D8               	btfsc	status,2,c
 17387  014400  D7D3               	goto	l369
 17388  014402  0A01               	xorlw	1	; case 5
 17389  014404  B4D8               	btfsc	status,2,c
 17390  014406  D7D7               	goto	l370
 17391  014408  0A03               	xorlw	3	; case 6
 17392  01440A  B4D8               	btfsc	status,2,c
 17393  01440C  D7DB               	goto	l371
 17394  01440E  D7E1               	goto	l372
 17395  014410                     __end_of_GetPortTRIS:
 17396                           	opt stack 0
 17397                           tosu	equ	0xFFF
 17398                           tosh	equ	0xFFE
 17399                           tosl	equ	0xFFD
 17400                           pclath	equ	0xFFA
 17401                           tblptru	equ	0xFF8
 17402                           tblptrh	equ	0xFF7
 17403                           tblptrl	equ	0xFF6
 17404                           tablat	equ	0xFF5
 17405                           prodh	equ	0xFF4
 17406                           prodl	equ	0xFF3
 17407                           intcon	equ	0xFF2
 17408                           postinc0	equ	0xFEE
 17409                           wreg	equ	0xFE8
 17410                           indf1	equ	0xFE7
 17411                           postdec1	equ	0xFE5
 17412                           fsr1h	equ	0xFE2
 17413                           fsr1l	equ	0xFE1
 17414                           indf2	equ	0xFDF
 17415                           postinc2	equ	0xFDE
 17416                           postdec2	equ	0xFDD
 17417                           plusw2	equ	0xFDB
 17418                           fsr2h	equ	0xFDA
 17419                           fsr2l	equ	0xFD9
 17420                           status	equ	0xFD8
 17421                           
 17422 ;; *************** function _GetPortProperties *****************
 17423 ;; Defined at:
 17424 ;;		line 21 in file "Library/Port.c"
 17425 ;; Parameters:    Size  Location     Type
 17426 ;;  pInput          1    wreg     enum E6786
 17427 ;; Auto vars:     Size  Location     Type
 17428 ;;  pInput          1    2[BANK0 ] enum E6786
 17429 ;; Return value:  Size  Location     Type
 17430 ;;                  2    0[BANK0 ] PTR struct PortProperty
 17431 ;; Registers used:
 17432 ;;		wreg, status,2, status,0
 17433 ;; Tracked objects:
 17434 ;;		On entry : 0/0
 17435 ;;		On exit  : 0/0
 17436 ;;		Unchanged: 0/0
 17437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17438 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17439 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17440 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17441 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17442 ;;Total ram usage:        3 bytes
 17443 ;; Hardware stack levels used:    1
 17444 ;; Hardware stack levels required when called:    7
 17445 ;; This function calls:
 17446 ;;		Nothing
 17447 ;; This function is called by:
 17448 ;;		_Port_Init
 17449 ;; This function uses a non-reentrant model
 17450 ;;
 17451                           
 17452                           	psect	text78
 17453  014410                     __ptext78:
 17454                           	opt stack 0
 17455  014410                     _GetPortProperties:
 17456                           	opt stack 20
 17457                           
 17458                           ; BSR set to: 0
 17459                           ;incstack = 0
 17460                           ;GetPortProperties@pInput stored from wreg
 17461  014410  0100               	movlb	0	; () banked
 17462  014412  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 17463                           
 17464                           ;Port.c: 23: switch (pInput)
 17465  014414  D038               	goto	l337
 17466  014416                     
 17467                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 17468  014416  0EBD               	movlw	low _PortA_Property
 17469  014418  0100               	movlb	0	; () banked
 17470  01441A  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17471  01441C  0EFF               	movlw	high _PortA_Property
 17472  01441E  0100               	movlb	0	; () banked
 17473  014420  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17474                           
 17475                           ; BSR set to: 0
 17476  014422  0012               	return	
 17477  014424                     
 17478                           ; BSR set to: 0
 17479                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 17480                           
 17481                           ; BSR set to: 0
 17482  014424  0EBB               	movlw	low _PortB_Property
 17483  014426  0100               	movlb	0	; () banked
 17484  014428  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17485  01442A  0EFF               	movlw	high _PortB_Property
 17486  01442C  0100               	movlb	0	; () banked
 17487  01442E  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17488                           
 17489                           ; BSR set to: 0
 17490  014430  0012               	return	
 17491  014432                     
 17492                           ; BSR set to: 0
 17493                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 17494                           
 17495                           ; BSR set to: 0
 17496  014432  0EB9               	movlw	low _PortC_Property
 17497  014434  0100               	movlb	0	; () banked
 17498  014436  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17499  014438  0EFF               	movlw	high _PortC_Property
 17500  01443A  0100               	movlb	0	; () banked
 17501  01443C  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17502                           
 17503                           ; BSR set to: 0
 17504  01443E  0012               	return	
 17505  014440                     
 17506                           ; BSR set to: 0
 17507                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 17508                           
 17509                           ; BSR set to: 0
 17510  014440  0EB7               	movlw	low _PortD_Property
 17511  014442  0100               	movlb	0	; () banked
 17512  014444  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17513  014446  0EFF               	movlw	high _PortD_Property
 17514  014448  0100               	movlb	0	; () banked
 17515  01444A  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17516                           
 17517                           ; BSR set to: 0
 17518  01444C  0012               	return	
 17519  01444E                     
 17520                           ; BSR set to: 0
 17521                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 17522                           
 17523                           ; BSR set to: 0
 17524  01444E  0EB5               	movlw	low _PortE_Property
 17525  014450  0100               	movlb	0	; () banked
 17526  014452  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17527  014454  0EFF               	movlw	high _PortE_Property
 17528  014456  0100               	movlb	0	; () banked
 17529  014458  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17530                           
 17531                           ; BSR set to: 0
 17532  01445A  0012               	return	
 17533  01445C                     
 17534                           ; BSR set to: 0
 17535                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 17536                           
 17537                           ; BSR set to: 0
 17538  01445C  0EB3               	movlw	low _PortF_Property
 17539  01445E  0100               	movlb	0	; () banked
 17540  014460  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17541  014462  0EFF               	movlw	high _PortF_Property
 17542  014464  0100               	movlb	0	; () banked
 17543  014466  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17544                           
 17545                           ; BSR set to: 0
 17546  014468  0012               	return	
 17547  01446A                     
 17548                           ; BSR set to: 0
 17549                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 17550                           
 17551                           ; BSR set to: 0
 17552  01446A  0EB1               	movlw	low _PortG_Property
 17553  01446C  0100               	movlb	0	; () banked
 17554  01446E  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17555  014470  0EFF               	movlw	high _PortG_Property
 17556  014472  0100               	movlb	0	; () banked
 17557  014474  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17558                           
 17559                           ; BSR set to: 0
 17560  014476  0012               	return	
 17561  014478                     
 17562                           ; BSR set to: 0
 17563                           ;Port.c: 40: return (void*)0;
 17564                           
 17565                           ; BSR set to: 0
 17566  014478  0E00               	movlw	0
 17567  01447A  0100               	movlb	0	; () banked
 17568  01447C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 17569  01447E  0E00               	movlw	0
 17570  014480  0100               	movlb	0	; () banked
 17571  014482  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 17572                           
 17573                           ; BSR set to: 0
 17574                           ;Port.c: 41: }
 17575                           
 17576                           ; BSR set to: 0
 17577  014484  0012               	return	
 17578  014486                     l337:
 17579                           
 17580                           ; BSR set to: 0
 17581  014486  0100               	movlb	0	; () banked
 17582  014488  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 17583                           
 17584                           ; Switch size 1, requested type "space"
 17585                           ; Number of cases is 7, Range of values is 0 to 6
 17586                           ; switch strategies available:
 17587                           ; Name         Instructions Cycles
 17588                           ; simple_byte           22    12 (average)
 17589                           ;	Chosen strategy is simple_byte
 17590  01448A  0A00               	xorlw	0	; case 0
 17591  01448C  B4D8               	btfsc	status,2,c
 17592  01448E  D7C3               	goto	l338
 17593  014490  0A01               	xorlw	1	; case 1
 17594  014492  B4D8               	btfsc	status,2,c
 17595  014494  D7C7               	goto	l340
 17596  014496  0A03               	xorlw	3	; case 2
 17597  014498  B4D8               	btfsc	status,2,c
 17598  01449A  D7CB               	goto	l341
 17599  01449C  0A01               	xorlw	1	; case 3
 17600  01449E  B4D8               	btfsc	status,2,c
 17601  0144A0  D7CF               	goto	l342
 17602  0144A2  0A07               	xorlw	7	; case 4
 17603  0144A4  B4D8               	btfsc	status,2,c
 17604  0144A6  D7D3               	goto	l343
 17605  0144A8  0A01               	xorlw	1	; case 5
 17606  0144AA  B4D8               	btfsc	status,2,c
 17607  0144AC  D7D7               	goto	l344
 17608  0144AE  0A03               	xorlw	3	; case 6
 17609  0144B0  B4D8               	btfsc	status,2,c
 17610  0144B2  D7DB               	goto	l345
 17611  0144B4  D7E1               	goto	l346
 17612  0144B6                     __end_of_GetPortProperties:
 17613                           	opt stack 0
 17614                           tosu	equ	0xFFF
 17615                           tosh	equ	0xFFE
 17616                           tosl	equ	0xFFD
 17617                           pclath	equ	0xFFA
 17618                           tblptru	equ	0xFF8
 17619                           tblptrh	equ	0xFF7
 17620                           tblptrl	equ	0xFF6
 17621                           tablat	equ	0xFF5
 17622                           prodh	equ	0xFF4
 17623                           prodl	equ	0xFF3
 17624                           intcon	equ	0xFF2
 17625                           postinc0	equ	0xFEE
 17626                           wreg	equ	0xFE8
 17627                           indf1	equ	0xFE7
 17628                           postdec1	equ	0xFE5
 17629                           fsr1h	equ	0xFE2
 17630                           fsr1l	equ	0xFE1
 17631                           indf2	equ	0xFDF
 17632                           postinc2	equ	0xFDE
 17633                           postdec2	equ	0xFDD
 17634                           plusw2	equ	0xFDB
 17635                           fsr2h	equ	0xFDA
 17636                           fsr2l	equ	0xFD9
 17637                           status	equ	0xFD8
 17638                           
 17639 ;; *************** function _GetPortPORT *****************
 17640 ;; Defined at:
 17641 ;;		line 44 in file "Library/Port.c"
 17642 ;; Parameters:    Size  Location     Type
 17643 ;;  pInput          1    wreg     enum E6786
 17644 ;; Auto vars:     Size  Location     Type
 17645 ;;  pInput          1    2[BANK0 ] enum E6786
 17646 ;; Return value:  Size  Location     Type
 17647 ;;                  2    0[BANK0 ] PTR struct Byte
 17648 ;; Registers used:
 17649 ;;		wreg, status,2, status,0
 17650 ;; Tracked objects:
 17651 ;;		On entry : 0/0
 17652 ;;		On exit  : 0/0
 17653 ;;		Unchanged: 0/0
 17654 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17655 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17656 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17657 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17658 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17659 ;;Total ram usage:        3 bytes
 17660 ;; Hardware stack levels used:    1
 17661 ;; Hardware stack levels required when called:    7
 17662 ;; This function calls:
 17663 ;;		Nothing
 17664 ;; This function is called by:
 17665 ;;		_Port_Init
 17666 ;; This function uses a non-reentrant model
 17667 ;;
 17668                           
 17669                           	psect	text79
 17670  0144B6                     __ptext79:
 17671                           	opt stack 0
 17672  0144B6                     _GetPortPORT:
 17673                           	opt stack 20
 17674                           
 17675                           ; BSR set to: 0
 17676                           ;incstack = 0
 17677                           ;GetPortPORT@pInput stored from wreg
 17678  0144B6  0100               	movlb	0	; () banked
 17679  0144B8  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 17680                           
 17681                           ;Port.c: 46: switch (pInput)
 17682  0144BA  D038               	goto	l350
 17683  0144BC                     
 17684                           ;Port.c: 49: return (BytePtr)&PORTA;
 17685  0144BC  0E80               	movlw	128
 17686  0144BE  0100               	movlb	0	; () banked
 17687  0144C0  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17688  0144C2  0E0F               	movlw	15
 17689  0144C4  0100               	movlb	0	; () banked
 17690  0144C6  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17691                           
 17692                           ; BSR set to: 0
 17693  0144C8  0012               	return	
 17694  0144CA                     
 17695                           ; BSR set to: 0
 17696                           ;Port.c: 51: return (BytePtr)&PORTB;
 17697                           
 17698                           ; BSR set to: 0
 17699  0144CA  0E81               	movlw	129
 17700  0144CC  0100               	movlb	0	; () banked
 17701  0144CE  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17702  0144D0  0E0F               	movlw	15
 17703  0144D2  0100               	movlb	0	; () banked
 17704  0144D4  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17705                           
 17706                           ; BSR set to: 0
 17707  0144D6  0012               	return	
 17708  0144D8                     
 17709                           ; BSR set to: 0
 17710                           ;Port.c: 53: return (BytePtr)&PORTC;
 17711                           
 17712                           ; BSR set to: 0
 17713  0144D8  0E82               	movlw	130
 17714  0144DA  0100               	movlb	0	; () banked
 17715  0144DC  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17716  0144DE  0E0F               	movlw	15
 17717  0144E0  0100               	movlb	0	; () banked
 17718  0144E2  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17719                           
 17720                           ; BSR set to: 0
 17721  0144E4  0012               	return	
 17722  0144E6                     
 17723                           ; BSR set to: 0
 17724                           ;Port.c: 55: return (BytePtr)&PORTD;
 17725                           
 17726                           ; BSR set to: 0
 17727  0144E6  0E83               	movlw	131
 17728  0144E8  0100               	movlb	0	; () banked
 17729  0144EA  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17730  0144EC  0E0F               	movlw	15
 17731  0144EE  0100               	movlb	0	; () banked
 17732  0144F0  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17733                           
 17734                           ; BSR set to: 0
 17735  0144F2  0012               	return	
 17736  0144F4                     
 17737                           ; BSR set to: 0
 17738                           ;Port.c: 57: return (BytePtr)&PORTE;
 17739                           
 17740                           ; BSR set to: 0
 17741  0144F4  0E84               	movlw	132
 17742  0144F6  0100               	movlb	0	; () banked
 17743  0144F8  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17744  0144FA  0E0F               	movlw	15
 17745  0144FC  0100               	movlb	0	; () banked
 17746  0144FE  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17747                           
 17748                           ; BSR set to: 0
 17749  014500  0012               	return	
 17750  014502                     
 17751                           ; BSR set to: 0
 17752                           ;Port.c: 59: return (BytePtr)&PORTF;
 17753                           
 17754                           ; BSR set to: 0
 17755  014502  0E85               	movlw	133
 17756  014504  0100               	movlb	0	; () banked
 17757  014506  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17758  014508  0E0F               	movlw	15
 17759  01450A  0100               	movlb	0	; () banked
 17760  01450C  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17761                           
 17762                           ; BSR set to: 0
 17763  01450E  0012               	return	
 17764  014510                     
 17765                           ; BSR set to: 0
 17766                           ;Port.c: 61: return (BytePtr)&PORTG;
 17767                           
 17768                           ; BSR set to: 0
 17769  014510  0E86               	movlw	134
 17770  014512  0100               	movlb	0	; () banked
 17771  014514  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17772  014516  0E0F               	movlw	15
 17773  014518  0100               	movlb	0	; () banked
 17774  01451A  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17775                           
 17776                           ; BSR set to: 0
 17777  01451C  0012               	return	
 17778  01451E                     
 17779                           ; BSR set to: 0
 17780                           ;Port.c: 63: return (void*)0;
 17781                           
 17782                           ; BSR set to: 0
 17783  01451E  0E00               	movlw	0
 17784  014520  0100               	movlb	0	; () banked
 17785  014522  6FBA               	movwf	?_GetPortPORT& (0+255),b
 17786  014524  0E00               	movlw	0
 17787  014526  0100               	movlb	0	; () banked
 17788  014528  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 17789                           
 17790                           ; BSR set to: 0
 17791                           ;Port.c: 64: }
 17792                           
 17793                           ; BSR set to: 0
 17794  01452A  0012               	return	
 17795  01452C                     l350:
 17796                           
 17797                           ; BSR set to: 0
 17798  01452C  0100               	movlb	0	; () banked
 17799  01452E  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 17800                           
 17801                           ; Switch size 1, requested type "space"
 17802                           ; Number of cases is 7, Range of values is 0 to 6
 17803                           ; switch strategies available:
 17804                           ; Name         Instructions Cycles
 17805                           ; simple_byte           22    12 (average)
 17806                           ;	Chosen strategy is simple_byte
 17807  014530  0A00               	xorlw	0	; case 0
 17808  014532  B4D8               	btfsc	status,2,c
 17809  014534  D7C3               	goto	l351
 17810  014536  0A01               	xorlw	1	; case 1
 17811  014538  B4D8               	btfsc	status,2,c
 17812  01453A  D7C7               	goto	l353
 17813  01453C  0A03               	xorlw	3	; case 2
 17814  01453E  B4D8               	btfsc	status,2,c
 17815  014540  D7CB               	goto	l354
 17816  014542  0A01               	xorlw	1	; case 3
 17817  014544  B4D8               	btfsc	status,2,c
 17818  014546  D7CF               	goto	l355
 17819  014548  0A07               	xorlw	7	; case 4
 17820  01454A  B4D8               	btfsc	status,2,c
 17821  01454C  D7D3               	goto	l356
 17822  01454E  0A01               	xorlw	1	; case 5
 17823  014550  B4D8               	btfsc	status,2,c
 17824  014552  D7D7               	goto	l357
 17825  014554  0A03               	xorlw	3	; case 6
 17826  014556  B4D8               	btfsc	status,2,c
 17827  014558  D7DB               	goto	l358
 17828  01455A  D7E1               	goto	l359
 17829  01455C                     __end_of_GetPortPORT:
 17830                           	opt stack 0
 17831                           tosu	equ	0xFFF
 17832                           tosh	equ	0xFFE
 17833                           tosl	equ	0xFFD
 17834                           pclath	equ	0xFFA
 17835                           tblptru	equ	0xFF8
 17836                           tblptrh	equ	0xFF7
 17837                           tblptrl	equ	0xFF6
 17838                           tablat	equ	0xFF5
 17839                           prodh	equ	0xFF4
 17840                           prodl	equ	0xFF3
 17841                           intcon	equ	0xFF2
 17842                           postinc0	equ	0xFEE
 17843                           wreg	equ	0xFE8
 17844                           indf1	equ	0xFE7
 17845                           postdec1	equ	0xFE5
 17846                           fsr1h	equ	0xFE2
 17847                           fsr1l	equ	0xFE1
 17848                           indf2	equ	0xFDF
 17849                           postinc2	equ	0xFDE
 17850                           postdec2	equ	0xFDD
 17851                           plusw2	equ	0xFDB
 17852                           fsr2h	equ	0xFDA
 17853                           fsr2l	equ	0xFD9
 17854                           status	equ	0xFD8
 17855                           
 17856 ;; *************** function _LED_Init *****************
 17857 ;; Defined at:
 17858 ;;		line 15 in file "Library/LED.c"
 17859 ;; Parameters:    Size  Location     Type
 17860 ;;  pLED            1    wreg     enum E6739
 17861 ;; Auto vars:     Size  Location     Type
 17862 ;;  pLED            1   45[BANK0 ] enum E6739
 17863 ;; Return value:  Size  Location     Type
 17864 ;;                  1    wreg      void 
 17865 ;; Registers used:
 17866 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17867 ;; Tracked objects:
 17868 ;;		On entry : 0/0
 17869 ;;		On exit  : 0/0
 17870 ;;		Unchanged: 0/0
 17871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17873 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17875 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17876 ;;Total ram usage:        1 bytes
 17877 ;; Hardware stack levels used:    1
 17878 ;; Hardware stack levels required when called:   12
 17879 ;; This function calls:
 17880 ;;		_LED_Set
 17881 ;;		_Port_SetPinType
 17882 ;; This function is called by:
 17883 ;;		_MXK_Init
 17884 ;; This function uses a non-reentrant model
 17885 ;;
 17886                           
 17887                           	psect	text80
 17888  015362                     __ptext80:
 17889                           	opt stack 0
 17890  015362                     _LED_Init:
 17891                           	opt stack 16
 17892                           
 17893                           ; BSR set to: 0
 17894                           ;incstack = 0
 17895                           ;LED_Init@pLED stored from wreg
 17896  015362  0100               	movlb	0	; () banked
 17897  015364  6FE7               	movwf	LED_Init@pLED& (0+255),b
 17898                           
 17899                           ;LED.c: 17: switch (pLED)
 17900  015366  D01E               	goto	l220
 17901  015368                     
 17902                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 17903  015368  0EAB               	movlw	low _PortC
 17904  01536A  0100               	movlb	0	; () banked
 17905  01536C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 17906  01536E  0E00               	movlw	high _PortC
 17907  015370  0100               	movlb	0	; () banked
 17908  015372  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17909  015374  0E00               	movlw	0
 17910  015376  0100               	movlb	0	; () banked
 17911  015378  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 17912  01537A  0E03               	movlw	3
 17913  01537C  0100               	movlb	0	; () banked
 17914  01537E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 17915  015380  EC80  F091         	call	_Port_SetPinType	;wreg free
 17916                           
 17917                           ;LED.c: 21: break;
 17918  015384  D017               	goto	l222
 17919  015386                     
 17920                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 17921  015386  0EAB               	movlw	low _PortC
 17922  015388  0100               	movlb	0	; () banked
 17923  01538A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 17924  01538C  0E00               	movlw	high _PortC
 17925  01538E  0100               	movlb	0	; () banked
 17926  015390  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 17927  015392  0E01               	movlw	1
 17928  015394  0100               	movlb	0	; () banked
 17929  015396  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 17930  015398  0E03               	movlw	3
 17931  01539A  0100               	movlb	0	; () banked
 17932  01539C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 17933  01539E  EC80  F091         	call	_Port_SetPinType	;wreg free
 17934                           
 17935                           ;LED.c: 25: }
 17936                           
 17937                           ;LED.c: 24: break;
 17938  0153A2  D008               	goto	l222
 17939  0153A4                     l220:
 17940  0153A4  0100               	movlb	0	; () banked
 17941  0153A6  51E7               	movf	LED_Init@pLED& (0+255),w,b
 17942                           
 17943                           ; Switch size 1, requested type "space"
 17944                           ; Number of cases is 2, Range of values is 0 to 1
 17945                           ; switch strategies available:
 17946                           ; Name         Instructions Cycles
 17947                           ; simple_byte            7     4 (average)
 17948                           ;	Chosen strategy is simple_byte
 17949  0153A8  0A00               	xorlw	0	; case 0
 17950  0153AA  B4D8               	btfsc	status,2,c
 17951  0153AC  D7DD               	goto	l221
 17952  0153AE  0A01               	xorlw	1	; case 1
 17953  0153B0  B4D8               	btfsc	status,2,c
 17954  0153B2  D7E9               	goto	l223
 17955  0153B4                     l222:
 17956                           
 17957                           ;LED.c: 26: LED_Set(pLED, 0);
 17958                           
 17959                           ; BSR set to: 0
 17960  0153B4  0E00               	movlw	0
 17961  0153B6  0100               	movlb	0	; () banked
 17962  0153B8  6FCE               	movwf	LED_Set@pValue& (0+255),b
 17963  0153BA  0100               	movlb	0	; () banked
 17964  0153BC  51E7               	movf	LED_Init@pLED& (0+255),w,b
 17965  0153BE  ECE7  F0AA         	call	_LED_Set
 17966  0153C2  0012               	return		;funcret
 17967  0153C4                     __end_of_LED_Init:
 17968                           	opt stack 0
 17969                           tosu	equ	0xFFF
 17970                           tosh	equ	0xFFE
 17971                           tosl	equ	0xFFD
 17972                           pclath	equ	0xFFA
 17973                           tblptru	equ	0xFF8
 17974                           tblptrh	equ	0xFF7
 17975                           tblptrl	equ	0xFF6
 17976                           tablat	equ	0xFF5
 17977                           prodh	equ	0xFF4
 17978                           prodl	equ	0xFF3
 17979                           intcon	equ	0xFF2
 17980                           postinc0	equ	0xFEE
 17981                           wreg	equ	0xFE8
 17982                           indf1	equ	0xFE7
 17983                           postdec1	equ	0xFE5
 17984                           fsr1h	equ	0xFE2
 17985                           fsr1l	equ	0xFE1
 17986                           indf2	equ	0xFDF
 17987                           postinc2	equ	0xFDE
 17988                           postdec2	equ	0xFDD
 17989                           plusw2	equ	0xFDB
 17990                           fsr2h	equ	0xFDA
 17991                           fsr2l	equ	0xFD9
 17992                           status	equ	0xFD8
 17993                           
 17994 ;; *************** function _LED_Set *****************
 17995 ;; Defined at:
 17996 ;;		line 33 in file "Library/LED.c"
 17997 ;; Parameters:    Size  Location     Type
 17998 ;;  pLED            1    wreg     enum E6739
 17999 ;;  pValue          1   20[BANK0 ] unsigned char 
 18000 ;; Auto vars:     Size  Location     Type
 18001 ;;  pLED            1   21[BANK0 ] enum E6739
 18002 ;; Return value:  Size  Location     Type
 18003 ;;                  1    wreg      void 
 18004 ;; Registers used:
 18005 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18006 ;; Tracked objects:
 18007 ;;		On entry : 0/0
 18008 ;;		On exit  : 0/0
 18009 ;;		Unchanged: 0/0
 18010 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18011 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18012 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18013 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18014 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18015 ;;Total ram usage:        2 bytes
 18016 ;; Hardware stack levels used:    1
 18017 ;; Hardware stack levels required when called:   11
 18018 ;; This function calls:
 18019 ;;		_Port_SetPin
 18020 ;; This function is called by:
 18021 ;;		_LED_Init
 18022 ;;		_SYSTEM_Initialize
 18023 ;; This function uses a non-reentrant model
 18024 ;;
 18025                           
 18026                           	psect	text81
 18027  0155CE                     __ptext81:
 18028                           	opt stack 0
 18029  0155CE                     _LED_Set:
 18030                           	opt stack 16
 18031                           
 18032                           ;incstack = 0
 18033                           ;LED_Set@pLED stored from wreg
 18034  0155CE  0100               	movlb	0	; () banked
 18035  0155D0  6FCF               	movwf	LED_Set@pLED& (0+255),b
 18036                           
 18037                           ;LED.c: 35: switch (pLED)
 18038  0155D2  D01C               	goto	l227
 18039  0155D4                     
 18040                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 18041  0155D4  0EAB               	movlw	low _PortC
 18042  0155D6  0100               	movlb	0	; () banked
 18043  0155D8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18044  0155DA  0E00               	movlw	high _PortC
 18045  0155DC  0100               	movlb	0	; () banked
 18046  0155DE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18047  0155E0  0E00               	movlw	0
 18048  0155E2  0100               	movlb	0	; () banked
 18049  0155E4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18050  0155E6  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 18051  0155EA  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18052                           
 18053                           ;LED.c: 39: break;
 18054  0155EE  0012               	return	
 18055  0155F0                     
 18056                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 18057  0155F0  0EAB               	movlw	low _PortC
 18058  0155F2  0100               	movlb	0	; () banked
 18059  0155F4  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18060  0155F6  0E00               	movlw	high _PortC
 18061  0155F8  0100               	movlb	0	; () banked
 18062  0155FA  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18063  0155FC  0E01               	movlw	1
 18064  0155FE  0100               	movlb	0	; () banked
 18065  015600  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18066  015602  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 18067  015606  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18068                           
 18069                           ;LED.c: 43: }
 18070                           
 18071                           ;LED.c: 42: break;
 18072  01560A  0012               	return	
 18073  01560C                     l227:
 18074  01560C  0100               	movlb	0	; () banked
 18075  01560E  51CF               	movf	LED_Set@pLED& (0+255),w,b
 18076                           
 18077                           ; Switch size 1, requested type "space"
 18078                           ; Number of cases is 2, Range of values is 0 to 1
 18079                           ; switch strategies available:
 18080                           ; Name         Instructions Cycles
 18081                           ; simple_byte            7     4 (average)
 18082                           ;	Chosen strategy is simple_byte
 18083  015610  0A00               	xorlw	0	; case 0
 18084  015612  B4D8               	btfsc	status,2,c
 18085  015614  D7DF               	goto	l228
 18086  015616  0A01               	xorlw	1	; case 1
 18087  015618  A4D8               	btfss	status,2,c
 18088  01561A  0012               	return	
 18089  01561C  D7E9               	goto	l230
 18090  01561E                     __end_of_LED_Set:
 18091                           	opt stack 0
 18092                           tosu	equ	0xFFF
 18093                           tosh	equ	0xFFE
 18094                           tosl	equ	0xFFD
 18095                           pclath	equ	0xFFA
 18096                           tblptru	equ	0xFF8
 18097                           tblptrh	equ	0xFF7
 18098                           tblptrl	equ	0xFF6
 18099                           tablat	equ	0xFF5
 18100                           prodh	equ	0xFF4
 18101                           prodl	equ	0xFF3
 18102                           intcon	equ	0xFF2
 18103                           postinc0	equ	0xFEE
 18104                           wreg	equ	0xFE8
 18105                           indf1	equ	0xFE7
 18106                           postdec1	equ	0xFE5
 18107                           fsr1h	equ	0xFE2
 18108                           fsr1l	equ	0xFE1
 18109                           indf2	equ	0xFDF
 18110                           postinc2	equ	0xFDE
 18111                           postdec2	equ	0xFDD
 18112                           plusw2	equ	0xFDB
 18113                           fsr2h	equ	0xFDA
 18114                           fsr2l	equ	0xFD9
 18115                           status	equ	0xFD8
 18116                           
 18117 ;; *************** function _MXK_Dequeue *****************
 18118 ;; Defined at:
 18119 ;;		line 153 in file "Library/MXK.c"
 18120 ;; Parameters:    Size  Location     Type
 18121 ;;		None
 18122 ;; Auto vars:     Size  Location     Type
 18123 ;;		None
 18124 ;; Return value:  Size  Location     Type
 18125 ;;                  1    wreg      void 
 18126 ;; Registers used:
 18127 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18128 ;; Tracked objects:
 18129 ;;		On entry : 0/0
 18130 ;;		On exit  : 0/0
 18131 ;;		Unchanged: 0/0
 18132 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18133 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18134 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18135 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18136 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18137 ;;Total ram usage:        0 bytes
 18138 ;; Hardware stack levels used:    1
 18139 ;; Hardware stack levels required when called:   12
 18140 ;; This function calls:
 18141 ;;		Absolute function
 18142 ;;		_Motor_Step
 18143 ;; This function is called by:
 18144 ;;		_init
 18145 ;;		_mode1
 18146 ;;		_mode2
 18147 ;; This function uses a non-reentrant model
 18148 ;;
 18149                           
 18150                           	psect	text82
 18151  0159F2                     __ptext82:
 18152                           	opt stack 0
 18153  0159F2                     _MXK_Dequeue:
 18154                           	opt stack 17
 18155                           
 18156                           ;MXK.c: 155: if (lQueue)
 18157                           
 18158                           ;incstack = 0
 18159  0159F2  0100               	movlb	0	; () banked
 18160  0159F4  5163               	movf	_lQueue& (0+255),w,b	;volatile
 18161  0159F6  0100               	movlb	0	; () banked
 18162  0159F8  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18163  0159FA  0100               	movlb	0	; () banked
 18164  0159FC  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18165  0159FE  B4D8               	btfsc	status,2,c
 18166  015A00  D00D               	goto	u12509
 18167                           
 18168                           ; BSR set to: 0
 18169                           ;MXK.c: 156: lQueue();
 18170  015A02  D801               	call	u12508
 18171  015A04  D00B               	goto	u12509
 18172  015A06                     u12508:
 18173  015A06  0005               	push	
 18174  015A08  6EFA               	movwf	pclath,c
 18175  015A0A  0100               	movlb	0	; () banked
 18176  015A0C  5163               	movf	_lQueue& (0+255),w,b	;volatile
 18177  015A0E  6EFD               	movwf	tosl,c
 18178  015A10  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 18179  015A12  6EFE               	movwf	tosh,c
 18180  015A14  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 18181  015A16  6EFF               	movwf	tosu,c
 18182  015A18  50FA               	movf	pclath,w,c
 18183  015A1A  0012               	return		;indir
 18184  015A1C                     u12509:
 18185                           
 18186                           ;MXK.c: 157: lQueue = 0;
 18187  015A1C  0E00               	movlw	0
 18188  015A1E  0100               	movlb	0	; () banked
 18189  015A20  6F63               	movwf	_lQueue& (0+255),b	;volatile
 18190  015A22  0E00               	movlw	0
 18191  015A24  0100               	movlb	0	; () banked
 18192  015A26  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 18193  015A28  0E00               	movlw	0
 18194  015A2A  0100               	movlb	0	; () banked
 18195  015A2C  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 18196                           
 18197                           ; BSR set to: 0
 18198  015A2E  0012               	return		;funcret
 18199  015A30                     __end_of_MXK_Dequeue:
 18200                           	opt stack 0
 18201                           tosu	equ	0xFFF
 18202                           tosh	equ	0xFFE
 18203                           tosl	equ	0xFFD
 18204                           pclath	equ	0xFFA
 18205                           tblptru	equ	0xFF8
 18206                           tblptrh	equ	0xFF7
 18207                           tblptrl	equ	0xFF6
 18208                           tablat	equ	0xFF5
 18209                           prodh	equ	0xFF4
 18210                           prodl	equ	0xFF3
 18211                           intcon	equ	0xFF2
 18212                           postinc0	equ	0xFEE
 18213                           wreg	equ	0xFE8
 18214                           indf1	equ	0xFE7
 18215                           postdec1	equ	0xFE5
 18216                           fsr1h	equ	0xFE2
 18217                           fsr1l	equ	0xFE1
 18218                           indf2	equ	0xFDF
 18219                           postinc2	equ	0xFDE
 18220                           postdec2	equ	0xFDD
 18221                           plusw2	equ	0xFDB
 18222                           fsr2h	equ	0xFDA
 18223                           fsr2l	equ	0xFD9
 18224                           status	equ	0xFD8
 18225                           
 18226 ;; *************** function _Motor_Step *****************
 18227 ;; Defined at:
 18228 ;;		line 75 in file "Library/Motor.c"
 18229 ;; Parameters:    Size  Location     Type
 18230 ;;		None
 18231 ;; Auto vars:     Size  Location     Type
 18232 ;;		None
 18233 ;; Return value:  Size  Location     Type
 18234 ;;                  1    wreg      void 
 18235 ;; Registers used:
 18236 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18237 ;; Tracked objects:
 18238 ;;		On entry : 0/0
 18239 ;;		On exit  : 0/0
 18240 ;;		Unchanged: 0/0
 18241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18242 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18244 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18245 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18246 ;;Total ram usage:        2 bytes
 18247 ;; Hardware stack levels used:    1
 18248 ;; Hardware stack levels required when called:   11
 18249 ;; This function calls:
 18250 ;;		_MXK_Queue
 18251 ;;		_MXK_Release
 18252 ;;		_MXK_SwitchTo
 18253 ;;		_Port_SetPin
 18254 ;;		_Timer0_Restart
 18255 ;;		_Timer0_Stop
 18256 ;; This function is called by:
 18257 ;;		_Motor_Init
 18258 ;;		_MXK_Dequeue
 18259 ;;		_Timer0_ISR
 18260 ;; This function uses a non-reentrant model
 18261 ;;
 18262                           
 18263                           	psect	text83
 18264  013342                     __ptext83:
 18265                           	opt stack 0
 18266  013342                     _Motor_Step:
 18267                           	opt stack 0
 18268                           
 18269                           ; BSR set to: 0
 18270                           ;Skip over the trampoline to the duplicate function for level 2
 18271  013342  B251               	btfsc	btemp,1,c
 18272  013344  EFBA  F09A         	goto	i2_Motor_Step
 18273  013348                     _Motor_Step$intlevel0:
 18274                           	opt stack 17
 18275                           
 18276                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 18277                           
 18278                           ;incstack = 0
 18279  013348  0100               	movlb	0	; () banked
 18280  01334A  EE20 F004          	lfsr	2,4
 18281  01334E  5185               	movf	_lMotor& (0+255),w,b
 18282  013350  26D9               	addwf	fsr2l,f,c
 18283  013352  5186               	movf	(_lMotor+1)& (0+255),w,b
 18284  013354  22DA               	addwfc	fsr2h,f,c
 18285  013356  50DF               	movf	indf2,w,c
 18286  013358  EC79  F0AC         	call	_MXK_SwitchTo
 18287  01335C  0900               	iorlw	0
 18288  01335E  B4D8               	btfsc	status,2,c
 18289  013360  D07A               	goto	l1627
 18290                           
 18291                           ;Motor.c: 78: {
 18292                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 18293  013362  C085  FFD9         	movff	_lMotor,fsr2l
 18294  013366  C086  FFDA         	movff	_lMotor+1,fsr2h
 18295  01336A  50DE               	movf	postinc2,w,c
 18296  01336C  10DE               	iorwf	postinc2,w,c
 18297  01336E  B4D8               	btfsc	status,2,c
 18298  013370  D06D               	goto	l1628
 18299                           
 18300                           ;Motor.c: 80: {
 18301                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 18302  013372  C085  FFD9         	movff	_lMotor,fsr2l
 18303  013376  C086  FFDA         	movff	_lMotor+1,fsr2h
 18304  01337A  0E01               	movlw	1
 18305  01337C  BEDB               	btfsc	plusw2,7,c
 18306  01337E  D026               	goto	l1629
 18307  013380  0E01               	movlw	1
 18308  013382  50DB               	movf	plusw2,w,c
 18309  013384  E103               	bnz	u9770
 18310  013386  04DE               	decf	postinc2,w,c
 18311  013388  A0D8               	btfss	status,0,c
 18312  01338A  D020               	goto	l1629
 18313  01338C                     u9770:
 18314                           
 18315                           ;Motor.c: 83: {
 18316                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 18317  01338C  C085  FFD9         	movff	_lMotor,fsr2l
 18318  013390  C086  FFDA         	movff	_lMotor+1,fsr2h
 18319  013394  28DE               	incf	postinc2,w,c
 18320  013396  E104               	bnz	u9780
 18321  013398  0E7F               	movlw	127
 18322  01339A  18DE               	xorwf	postinc2,w,c
 18323  01339C  B4D8               	btfsc	status,2,c
 18324  01339E  D007               	goto	l1630
 18325  0133A0                     u9780:
 18326                           
 18327                           ;Motor.c: 85: lMotor->mDelta --;
 18328  0133A0  C085  FFD9         	movff	_lMotor,fsr2l
 18329  0133A4  C086  FFDA         	movff	_lMotor+1,fsr2h
 18330  0133A8  06DE               	decf	postinc2,f,c
 18331  0133AA  0E00               	movlw	0
 18332  0133AC  5ADD               	subwfb	postdec2,f,c
 18333  0133AE                     l1630:
 18334                           
 18335                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 18336  0133AE  0E97               	movlw	low _PortE
 18337  0133B0  0100               	movlb	0	; () banked
 18338  0133B2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18339  0133B4  0E00               	movlw	high _PortE
 18340  0133B6  0100               	movlb	0	; () banked
 18341  0133B8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18342  0133BA  0E00               	movlw	0
 18343  0133BC  0100               	movlb	0	; () banked
 18344  0133BE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18345  0133C0  0E01               	movlw	1
 18346  0133C2  0100               	movlb	0	; () banked
 18347  0133C4  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 18348  0133C6  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18349                           
 18350                           ;Motor.c: 88: }
 18351  0133CA  D01F               	goto	l1631
 18352  0133CC                     l1629:
 18353                           
 18354                           ;Motor.c: 89: else
 18355                           ;Motor.c: 90: {
 18356                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 18357  0133CC  C085  FFD9         	movff	_lMotor,fsr2l
 18358  0133D0  C086  FFDA         	movff	_lMotor+1,fsr2h
 18359  0133D4  04DE               	decf	postinc2,w,c
 18360  0133D6  E104               	bnz	u9790
 18361  0133D8  0E80               	movlw	128
 18362  0133DA  18DE               	xorwf	postinc2,w,c
 18363  0133DC  B4D8               	btfsc	status,2,c
 18364  0133DE  D007               	goto	l1632
 18365  0133E0                     u9790:
 18366                           
 18367                           ;Motor.c: 92: lMotor->mDelta ++;
 18368  0133E0  C085  FFD9         	movff	_lMotor,fsr2l
 18369  0133E4  C086  FFDA         	movff	_lMotor+1,fsr2h
 18370  0133E8  2ADE               	incf	postinc2,f,c
 18371  0133EA  0E00               	movlw	0
 18372  0133EC  22DD               	addwfc	postdec2,f,c
 18373  0133EE                     l1632:
 18374                           
 18375                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 18376  0133EE  0E97               	movlw	low _PortE
 18377  0133F0  0100               	movlb	0	; () banked
 18378  0133F2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18379  0133F4  0E00               	movlw	high _PortE
 18380  0133F6  0100               	movlb	0	; () banked
 18381  0133F8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18382  0133FA  0E00               	movlw	0
 18383  0133FC  0100               	movlb	0	; () banked
 18384  0133FE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18385  013400  0E00               	movlw	0
 18386  013402  0100               	movlb	0	; () banked
 18387  013404  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 18388  013406  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18389  01340A                     l1631:
 18390                           
 18391                           ;Motor.c: 95: }
 18392                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 18393  01340A  0E97               	movlw	low _PortE
 18394  01340C  0100               	movlb	0	; () banked
 18395  01340E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18396  013410  0E00               	movlw	high _PortE
 18397  013412  0100               	movlb	0	; () banked
 18398  013414  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18399  013416  0E01               	movlw	1
 18400  013418  0100               	movlb	0	; () banked
 18401  01341A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18402  01341C  0E01               	movlw	1
 18403  01341E  0100               	movlb	0	; () banked
 18404  013420  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 18405  013422  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18406                           
 18407                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 18408  013426  0E97               	movlw	low _PortE
 18409  013428  0100               	movlb	0	; () banked
 18410  01342A  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 18411  01342C  0E00               	movlw	high _PortE
 18412  01342E  0100               	movlb	0	; () banked
 18413  013430  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 18414  013432  0E01               	movlw	1
 18415  013434  0100               	movlb	0	; () banked
 18416  013436  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 18417  013438  0E00               	movlw	0
 18418  01343A  0100               	movlb	0	; () banked
 18419  01343C  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 18420  01343E  ECC7  F09D         	call	_Port_SetPin	;wreg free
 18421                           
 18422                           ;Motor.c: 101: MXK_Release();
 18423  013442  ECA7  F0AF         	call	_MXK_Release	;wreg free
 18424                           
 18425                           ;Motor.c: 102: Timer0_Restart();
 18426  013446  EC95  F0B0         	call	_Timer0_Restart	;wreg free
 18427                           
 18428                           ;Motor.c: 103: return;
 18429  01344A  0012               	return	
 18430  01344C                     l1628:
 18431                           
 18432                           ;Motor.c: 104: }
 18433                           ;Motor.c: 105: MXK_Release();
 18434  01344C  ECA7  F0AF         	call	_MXK_Release	;wreg free
 18435                           
 18436                           ;Motor.c: 106: Timer0_Stop();
 18437  013450  ECC3  F0B0         	call	_Timer0_Stop	;wreg free
 18438                           
 18439                           ;Motor.c: 107: return;
 18440  013454  0012               	return	
 18441  013456                     l1627:
 18442                           
 18443                           ;Motor.c: 108: }
 18444                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 18445  013456  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 18446  01345A  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 18447  01345E  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 18448  013462  EC7B  F0B0         	call	_MXK_Queue	;wreg free
 18449  013466  0012               	return		;funcret
 18450  013468                     __end_of_Motor_Step:
 18451                           	opt stack 0
 18452                           tosu	equ	0xFFF
 18453                           tosh	equ	0xFFE
 18454                           tosl	equ	0xFFD
 18455                           pclath	equ	0xFFA
 18456                           tblptru	equ	0xFF8
 18457                           tblptrh	equ	0xFF7
 18458                           tblptrl	equ	0xFF6
 18459                           tablat	equ	0xFF5
 18460                           prodh	equ	0xFF4
 18461                           prodl	equ	0xFF3
 18462                           intcon	equ	0xFF2
 18463                           postinc0	equ	0xFEE
 18464                           wreg	equ	0xFE8
 18465                           indf1	equ	0xFE7
 18466                           postdec1	equ	0xFE5
 18467                           fsr1h	equ	0xFE2
 18468                           fsr1l	equ	0xFE1
 18469                           indf2	equ	0xFDF
 18470                           postinc2	equ	0xFDE
 18471                           postdec2	equ	0xFDD
 18472                           plusw2	equ	0xFDB
 18473                           fsr2h	equ	0xFDA
 18474                           fsr2l	equ	0xFD9
 18475                           status	equ	0xFD8
 18476                           
 18477 ;; *************** function _Timer0_Stop *****************
 18478 ;; Defined at:
 18479 ;;		line 89 in file "Library/Timer0.c"
 18480 ;; Parameters:    Size  Location     Type
 18481 ;;		None
 18482 ;; Auto vars:     Size  Location     Type
 18483 ;;		None
 18484 ;; Return value:  Size  Location     Type
 18485 ;;                  1    wreg      void 
 18486 ;; Registers used:
 18487 ;;		None
 18488 ;; Tracked objects:
 18489 ;;		On entry : 0/0
 18490 ;;		On exit  : 0/0
 18491 ;;		Unchanged: 0/0
 18492 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18493 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18494 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18495 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18496 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18497 ;;Total ram usage:        0 bytes
 18498 ;; Hardware stack levels used:    1
 18499 ;; Hardware stack levels required when called:    7
 18500 ;; This function calls:
 18501 ;;		Nothing
 18502 ;; This function is called by:
 18503 ;;		_Motor_Step
 18504 ;; This function uses a non-reentrant model
 18505 ;;
 18506                           
 18507                           	psect	text84
 18508  016186                     __ptext84:
 18509                           	opt stack 0
 18510  016186                     _Timer0_Stop:
 18511                           	opt stack 20
 18512                           
 18513                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 18514                           
 18515                           ;incstack = 0
 18516  016186  9AF2               	bcf	intcon,5,c	;volatile
 18517                           
 18518                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 18519  016188  94F2               	bcf	intcon,2,c	;volatile
 18520  01618A  0012               	return		;funcret
 18521  01618C                     __end_of_Timer0_Stop:
 18522                           	opt stack 0
 18523                           tosu	equ	0xFFF
 18524                           tosh	equ	0xFFE
 18525                           tosl	equ	0xFFD
 18526                           pclath	equ	0xFFA
 18527                           tblptru	equ	0xFF8
 18528                           tblptrh	equ	0xFF7
 18529                           tblptrl	equ	0xFF6
 18530                           tablat	equ	0xFF5
 18531                           prodh	equ	0xFF4
 18532                           prodl	equ	0xFF3
 18533                           intcon	equ	0xFF2
 18534                           postinc0	equ	0xFEE
 18535                           wreg	equ	0xFE8
 18536                           indf1	equ	0xFE7
 18537                           postdec1	equ	0xFE5
 18538                           fsr1h	equ	0xFE2
 18539                           fsr1l	equ	0xFE1
 18540                           indf2	equ	0xFDF
 18541                           postinc2	equ	0xFDE
 18542                           postdec2	equ	0xFDD
 18543                           plusw2	equ	0xFDB
 18544                           fsr2h	equ	0xFDA
 18545                           fsr2l	equ	0xFD9
 18546                           status	equ	0xFD8
 18547                           
 18548 ;; *************** function _Timer0_Restart *****************
 18549 ;; Defined at:
 18550 ;;		line 83 in file "Library/Timer0.c"
 18551 ;; Parameters:    Size  Location     Type
 18552 ;;		None
 18553 ;; Auto vars:     Size  Location     Type
 18554 ;;		None
 18555 ;; Return value:  Size  Location     Type
 18556 ;;                  1    wreg      void 
 18557 ;; Registers used:
 18558 ;;		None
 18559 ;; Tracked objects:
 18560 ;;		On entry : 0/0
 18561 ;;		On exit  : 0/0
 18562 ;;		Unchanged: 0/0
 18563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18564 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18565 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18566 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18567 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18568 ;;Total ram usage:        0 bytes
 18569 ;; Hardware stack levels used:    1
 18570 ;; Hardware stack levels required when called:    7
 18571 ;; This function calls:
 18572 ;;		Nothing
 18573 ;; This function is called by:
 18574 ;;		_Motor_Step
 18575 ;; This function uses a non-reentrant model
 18576 ;;
 18577                           
 18578                           	psect	text85
 18579  01612A                     __ptext85:
 18580                           	opt stack 0
 18581  01612A                     _Timer0_Restart:
 18582                           	opt stack 20
 18583                           
 18584                           ;Timer0.c: 85: TMR0 = COUNTER;
 18585                           
 18586                           ;incstack = 0
 18587  01612A  C029  FFD6         	movff	_COUNTER,4054	;volatile
 18588  01612E  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 18589                           
 18590                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 18591  016132  8AF2               	bsf	intcon,5,c	;volatile
 18592  016134  0012               	return		;funcret
 18593  016136                     __end_of_Timer0_Restart:
 18594                           	opt stack 0
 18595                           tosu	equ	0xFFF
 18596                           tosh	equ	0xFFE
 18597                           tosl	equ	0xFFD
 18598                           pclath	equ	0xFFA
 18599                           tblptru	equ	0xFF8
 18600                           tblptrh	equ	0xFF7
 18601                           tblptrl	equ	0xFF6
 18602                           tablat	equ	0xFF5
 18603                           prodh	equ	0xFF4
 18604                           prodl	equ	0xFF3
 18605                           intcon	equ	0xFF2
 18606                           postinc0	equ	0xFEE
 18607                           wreg	equ	0xFE8
 18608                           indf1	equ	0xFE7
 18609                           postdec1	equ	0xFE5
 18610                           fsr1h	equ	0xFE2
 18611                           fsr1l	equ	0xFE1
 18612                           indf2	equ	0xFDF
 18613                           postinc2	equ	0xFDE
 18614                           postdec2	equ	0xFDD
 18615                           plusw2	equ	0xFDB
 18616                           fsr2h	equ	0xFDA
 18617                           fsr2l	equ	0xFD9
 18618                           status	equ	0xFD8
 18619                           
 18620 ;; *************** function _MXK_SwitchTo *****************
 18621 ;; Defined at:
 18622 ;;		line 105 in file "Library/MXK.c"
 18623 ;; Parameters:    Size  Location     Type
 18624 ;;  pModule         1    wreg     enum E6927
 18625 ;; Auto vars:     Size  Location     Type
 18626 ;;  pModule         1    7[BANK0 ] enum E6927
 18627 ;;  CUR             1    6[BANK0 ] unsigned char 
 18628 ;; Return value:  Size  Location     Type
 18629 ;;                  1    wreg      unsigned char 
 18630 ;; Registers used:
 18631 ;;		wreg, status,2, status,0, cstack
 18632 ;; Tracked objects:
 18633 ;;		On entry : 0/0
 18634 ;;		On exit  : 0/0
 18635 ;;		Unchanged: 0/0
 18636 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18637 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18638 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18639 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18640 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18641 ;;Total ram usage:        2 bytes
 18642 ;; Hardware stack levels used:    1
 18643 ;; Hardware stack levels required when called:    8
 18644 ;; This function calls:
 18645 ;;		_delay_us
 18646 ;; This function is called by:
 18647 ;;		_Motor_Step
 18648 ;;		_mode1
 18649 ;;		_mode2
 18650 ;; This function uses a non-reentrant model
 18651 ;;
 18652                           
 18653                           	psect	text86
 18654  0158F2                     __ptext86:
 18655                           	opt stack 0
 18656  0158F2                     _MXK_SwitchTo:
 18657                           	opt stack 21
 18658                           
 18659                           ;incstack = 0
 18660                           ;MXK_SwitchTo@pModule stored from wreg
 18661  0158F2  0100               	movlb	0	; () banked
 18662  0158F4  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 18663                           
 18664                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 18665  0158F6  5086               	movf	3974,w,c	;volatile
 18666  0158F8  0B0F               	andlw	15
 18667  0158FA  0100               	movlb	0	; () banked
 18668  0158FC  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 18669                           
 18670                           ; BSR set to: 0
 18671                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 18672  0158FE  504B               	movf	_Bus_State,w,c
 18673  015900  A4D8               	btfss	status,2,c
 18674  015902  D002               	goto	l1730
 18675                           
 18676                           ; BSR set to: 0
 18677                           ;MXK.c: 110: return 0;
 18678  015904  0E00               	movlw	0
 18679                           
 18680                           ; BSR set to: 0
 18681  015906  0012               	return	
 18682  015908                     l1730:
 18683                           
 18684                           ; BSR set to: 0
 18685                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 18686                           
 18687                           ; BSR set to: 0
 18688  015908  0E00               	movlw	0
 18689  01590A  6E4B               	movwf	_Bus_State,c
 18690                           
 18691                           ; BSR set to: 0
 18692                           ;MXK.c: 114: if (CUR != pModule)
 18693  01590C  0100               	movlb	0	; () banked
 18694  01590E  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18695  015910  0100               	movlb	0	; () banked
 18696  015912  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 18697  015914  B4D8               	btfsc	status,2,c
 18698  015916  D00C               	goto	l1732
 18699                           
 18700                           ; BSR set to: 0
 18701                           ;MXK.c: 115: {
 18702                           ;MXK.c: 116: PORTG &= ~(0xF);
 18703  015918  0EF0               	movlw	240
 18704  01591A  1686               	andwf	3974,f,c	;volatile
 18705                           
 18706                           ;MXK.c: 117: PORTG |= pModule;
 18707  01591C  0100               	movlb	0	; () banked
 18708  01591E  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 18709  015920  1286               	iorwf	3974,f,c	;volatile
 18710                           
 18711                           ; BSR set to: 0
 18712                           ;MXK.c: 120: delay_us(10);
 18713  015922  0E00               	movlw	0
 18714  015924  0100               	movlb	0	; () banked
 18715  015926  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 18716  015928  0E0A               	movlw	10
 18717  01592A  6FBA               	movwf	delay_us@us& (0+255),b
 18718  01592C  ECBE  F0AA         	call	_delay_us	;wreg free
 18719  015930                     l1732:
 18720                           
 18721                           ;MXK.c: 121: }
 18722                           ;MXK.c: 122: return 1;
 18723  015930  0E01               	movlw	1
 18724  015932  0012               	return	
 18725  015934                     __end_of_MXK_SwitchTo:
 18726                           	opt stack 0
 18727                           tosu	equ	0xFFF
 18728                           tosh	equ	0xFFE
 18729                           tosl	equ	0xFFD
 18730                           pclath	equ	0xFFA
 18731                           tblptru	equ	0xFF8
 18732                           tblptrh	equ	0xFF7
 18733                           tblptrl	equ	0xFF6
 18734                           tablat	equ	0xFF5
 18735                           prodh	equ	0xFF4
 18736                           prodl	equ	0xFF3
 18737                           intcon	equ	0xFF2
 18738                           postinc0	equ	0xFEE
 18739                           wreg	equ	0xFE8
 18740                           indf1	equ	0xFE7
 18741                           postdec1	equ	0xFE5
 18742                           fsr1h	equ	0xFE2
 18743                           fsr1l	equ	0xFE1
 18744                           indf2	equ	0xFDF
 18745                           postinc2	equ	0xFDE
 18746                           postdec2	equ	0xFDD
 18747                           plusw2	equ	0xFDB
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function _MXK_Release *****************
 18753 ;; Defined at:
 18754 ;;		line 130 in file "Library/MXK.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;		None
 18757 ;; Auto vars:     Size  Location     Type
 18758 ;;		None
 18759 ;; Return value:  Size  Location     Type
 18760 ;;                  1    wreg      unsigned char 
 18761 ;; Registers used:
 18762 ;;		wreg, status,2, status,0
 18763 ;; Tracked objects:
 18764 ;;		On entry : 0/0
 18765 ;;		On exit  : 0/0
 18766 ;;		Unchanged: 0/0
 18767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18772 ;;Total ram usage:        0 bytes
 18773 ;; Hardware stack levels used:    1
 18774 ;; Hardware stack levels required when called:    7
 18775 ;; This function calls:
 18776 ;;		Nothing
 18777 ;; This function is called by:
 18778 ;;		_Motor_Step
 18779 ;;		_init
 18780 ;;		_mode1
 18781 ;;		_mode2
 18782 ;; This function uses a non-reentrant model
 18783 ;;
 18784                           
 18785                           	psect	text87
 18786  015F4E                     __ptext87:
 18787                           	opt stack 0
 18788  015F4E                     _MXK_Release:
 18789                           	opt stack 22
 18790                           
 18791                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 18792                           
 18793                           ;incstack = 0
 18794  015F4E  0E01               	movlw	1
 18795  015F50  6E4B               	movwf	_Bus_State,c
 18796                           
 18797                           ;MXK.c: 134: if (lQueue != 0)
 18798  015F52  0100               	movlb	0	; () banked
 18799  015F54  5163               	movf	_lQueue& (0+255),w,b	;volatile
 18800  015F56  0100               	movlb	0	; () banked
 18801  015F58  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 18802  015F5A  0100               	movlb	0	; () banked
 18803  015F5C  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 18804  015F5E  B4D8               	btfsc	status,2,c
 18805  015F60  D002               	goto	l1735
 18806                           
 18807                           ; BSR set to: 0
 18808                           ;MXK.c: 135: return 1;
 18809  015F62  0E01               	movlw	1
 18810                           
 18811                           ; BSR set to: 0
 18812  015F64  0012               	return	
 18813  015F66                     l1735:
 18814                           
 18815                           ; BSR set to: 0
 18816                           ;MXK.c: 137: return 0;
 18817                           
 18818                           ; BSR set to: 0
 18819  015F66  0E00               	movlw	0
 18820  015F68  0012               	return	
 18821  015F6A                     __end_of_MXK_Release:
 18822                           	opt stack 0
 18823                           tosu	equ	0xFFF
 18824                           tosh	equ	0xFFE
 18825                           tosl	equ	0xFFD
 18826                           pclath	equ	0xFFA
 18827                           tblptru	equ	0xFF8
 18828                           tblptrh	equ	0xFF7
 18829                           tblptrl	equ	0xFF6
 18830                           tablat	equ	0xFF5
 18831                           prodh	equ	0xFF4
 18832                           prodl	equ	0xFF3
 18833                           intcon	equ	0xFF2
 18834                           postinc0	equ	0xFEE
 18835                           wreg	equ	0xFE8
 18836                           indf1	equ	0xFE7
 18837                           postdec1	equ	0xFE5
 18838                           fsr1h	equ	0xFE2
 18839                           fsr1l	equ	0xFE1
 18840                           indf2	equ	0xFDF
 18841                           postinc2	equ	0xFDE
 18842                           postdec2	equ	0xFDD
 18843                           plusw2	equ	0xFDB
 18844                           fsr2h	equ	0xFDA
 18845                           fsr2l	equ	0xFD9
 18846                           status	equ	0xFD8
 18847                           
 18848 ;; *************** function _MXK_Queue *****************
 18849 ;; Defined at:
 18850 ;;		line 144 in file "Library/MXK.c"
 18851 ;; Parameters:    Size  Location     Type
 18852 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 18853 ;;		 -> Absolute function(1), Motor_Step(1), 
 18854 ;; Auto vars:     Size  Location     Type
 18855 ;;		None
 18856 ;; Return value:  Size  Location     Type
 18857 ;;                  1    wreg      void 
 18858 ;; Registers used:
 18859 ;;		wreg, status,2, status,0
 18860 ;; Tracked objects:
 18861 ;;		On entry : 0/0
 18862 ;;		On exit  : 0/0
 18863 ;;		Unchanged: 0/0
 18864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18865 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18866 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18868 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18869 ;;Total ram usage:        3 bytes
 18870 ;; Hardware stack levels used:    1
 18871 ;; Hardware stack levels required when called:    7
 18872 ;; This function calls:
 18873 ;;		Nothing
 18874 ;; This function is called by:
 18875 ;;		_Motor_Step
 18876 ;; This function uses a non-reentrant model
 18877 ;;
 18878                           
 18879                           	psect	text88
 18880  0160F6                     __ptext88:
 18881                           	opt stack 0
 18882  0160F6                     _MXK_Queue:
 18883                           	opt stack 20
 18884                           
 18885                           ;MXK.c: 146: lQueue = pCallback;
 18886                           
 18887                           ; BSR set to: 0
 18888                           ;incstack = 0
 18889  0160F6  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 18890  0160FA  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 18891  0160FE  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 18892  016102  0012               	return		;funcret
 18893  016104                     __end_of_MXK_Queue:
 18894                           	opt stack 0
 18895                           tosu	equ	0xFFF
 18896                           tosh	equ	0xFFE
 18897                           tosl	equ	0xFFD
 18898                           pclath	equ	0xFFA
 18899                           tblptru	equ	0xFF8
 18900                           tblptrh	equ	0xFF7
 18901                           tblptrl	equ	0xFF6
 18902                           tablat	equ	0xFF5
 18903                           prodh	equ	0xFF4
 18904                           prodl	equ	0xFF3
 18905                           intcon	equ	0xFF2
 18906                           postinc0	equ	0xFEE
 18907                           wreg	equ	0xFE8
 18908                           indf1	equ	0xFE7
 18909                           postdec1	equ	0xFE5
 18910                           fsr1h	equ	0xFE2
 18911                           fsr1l	equ	0xFE1
 18912                           indf2	equ	0xFDF
 18913                           postinc2	equ	0xFDE
 18914                           postdec2	equ	0xFDD
 18915                           plusw2	equ	0xFDB
 18916                           fsr2h	equ	0xFDA
 18917                           fsr2l	equ	0xFD9
 18918                           status	equ	0xFD8
 18919                           
 18920 ;; *************** function _MXK_BlockSwitchTo *****************
 18921 ;; Defined at:
 18922 ;;		line 82 in file "Library/MXK.c"
 18923 ;; Parameters:    Size  Location     Type
 18924 ;;  pModule         1    wreg     enum E6927
 18925 ;; Auto vars:     Size  Location     Type
 18926 ;;  pModule         1    7[BANK0 ] enum E6927
 18927 ;;  CUR             1    6[BANK0 ] unsigned char 
 18928 ;; Return value:  Size  Location     Type
 18929 ;;                  1    wreg      unsigned char 
 18930 ;; Registers used:
 18931 ;;		wreg, status,2, status,0, cstack
 18932 ;; Tracked objects:
 18933 ;;		On entry : 0/0
 18934 ;;		On exit  : 0/0
 18935 ;;		Unchanged: 0/0
 18936 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18937 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18938 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18939 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18940 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18941 ;;Total ram usage:        2 bytes
 18942 ;; Hardware stack levels used:    1
 18943 ;; Hardware stack levels required when called:    8
 18944 ;; This function calls:
 18945 ;;		_delay_us
 18946 ;; This function is called by:
 18947 ;;		_init
 18948 ;; This function uses a non-reentrant model
 18949 ;;
 18950                           
 18951                           	psect	text89
 18952  015A30                     __ptext89:
 18953                           	opt stack 0
 18954  015A30                     _MXK_BlockSwitchTo:
 18955                           	opt stack 21
 18956                           
 18957                           ;incstack = 0
 18958                           ;MXK_BlockSwitchTo@pModule stored from wreg
 18959  015A30  0100               	movlb	0	; () banked
 18960  015A32  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 18961                           
 18962                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 18963  015A34  5086               	movf	3974,w,c	;volatile
 18964  015A36  0B0F               	andlw	15
 18965  015A38  0100               	movlb	0	; () banked
 18966  015A3A  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 18967  015A3C                     
 18968                           ; BSR set to: 0
 18969                           
 18970                           ; BSR set to: 0
 18971  015A3C  504B               	movf	_Bus_State,w,c
 18972  015A3E  B4D8               	btfsc	status,2,c
 18973  015A40  D7FD               	goto	l1724
 18974                           
 18975                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 18976  015A42  0E00               	movlw	0
 18977  015A44  6E4B               	movwf	_Bus_State,c
 18978                           
 18979                           ;MXK.c: 90: if (CUR != pModule)
 18980  015A46  0100               	movlb	0	; () banked
 18981  015A48  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18982  015A4A  0100               	movlb	0	; () banked
 18983  015A4C  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 18984  015A4E  B4D8               	btfsc	status,2,c
 18985  015A50  D00C               	goto	l1726
 18986                           
 18987                           ; BSR set to: 0
 18988                           ;MXK.c: 91: {
 18989                           ;MXK.c: 92: PORTG &= ~(0xF);
 18990  015A52  0EF0               	movlw	240
 18991  015A54  1686               	andwf	3974,f,c	;volatile
 18992                           
 18993                           ;MXK.c: 93: PORTG |= pModule;
 18994  015A56  0100               	movlb	0	; () banked
 18995  015A58  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 18996  015A5A  1286               	iorwf	3974,f,c	;volatile
 18997                           
 18998                           ; BSR set to: 0
 18999                           ;MXK.c: 96: delay_us(10);
 19000  015A5C  0E00               	movlw	0
 19001  015A5E  0100               	movlb	0	; () banked
 19002  015A60  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 19003  015A62  0E0A               	movlw	10
 19004  015A64  6FBA               	movwf	delay_us@us& (0+255),b
 19005  015A66  ECBE  F0AA         	call	_delay_us	;wreg free
 19006  015A6A                     l1726:
 19007                           
 19008                           ;MXK.c: 97: }
 19009                           ;MXK.c: 98: return 1;
 19010  015A6A  0E01               	movlw	1
 19011  015A6C  0012               	return	
 19012  015A6E                     __end_of_MXK_BlockSwitchTo:
 19013                           	opt stack 0
 19014                           tosu	equ	0xFFF
 19015                           tosh	equ	0xFFE
 19016                           tosl	equ	0xFFD
 19017                           pclath	equ	0xFFA
 19018                           tblptru	equ	0xFF8
 19019                           tblptrh	equ	0xFF7
 19020                           tblptrl	equ	0xFF6
 19021                           tablat	equ	0xFF5
 19022                           prodh	equ	0xFF4
 19023                           prodl	equ	0xFF3
 19024                           intcon	equ	0xFF2
 19025                           postinc0	equ	0xFEE
 19026                           wreg	equ	0xFE8
 19027                           indf1	equ	0xFE7
 19028                           postdec1	equ	0xFE5
 19029                           fsr1h	equ	0xFE2
 19030                           fsr1l	equ	0xFE1
 19031                           indf2	equ	0xFDF
 19032                           postinc2	equ	0xFDE
 19033                           postdec2	equ	0xFDD
 19034                           plusw2	equ	0xFDB
 19035                           fsr2h	equ	0xFDA
 19036                           fsr2l	equ	0xFD9
 19037                           status	equ	0xFD8
 19038                           
 19039 ;; *************** function _delay_us *****************
 19040 ;; Defined at:
 19041 ;;		line 255 in file "Library/Types.c"
 19042 ;; Parameters:    Size  Location     Type
 19043 ;;  us              2    0[BANK0 ] unsigned short 
 19044 ;; Auto vars:     Size  Location     Type
 19045 ;;  u               4    2[BANK0 ] unsigned long 
 19046 ;; Return value:  Size  Location     Type
 19047 ;;                  1    wreg      void 
 19048 ;; Registers used:
 19049 ;;		wreg, status,2, status,0
 19050 ;; Tracked objects:
 19051 ;;		On entry : 0/0
 19052 ;;		On exit  : 0/0
 19053 ;;		Unchanged: 0/0
 19054 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19055 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19056 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19057 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19058 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19059 ;;Total ram usage:        6 bytes
 19060 ;; Hardware stack levels used:    1
 19061 ;; Hardware stack levels required when called:    7
 19062 ;; This function calls:
 19063 ;;		Nothing
 19064 ;; This function is called by:
 19065 ;;		_MXK_BlockSwitchTo
 19066 ;;		_MXK_SwitchTo
 19067 ;; This function uses a non-reentrant model
 19068 ;;
 19069                           
 19070                           	psect	text90
 19071  01557C                     __ptext90:
 19072                           	opt stack 0
 19073  01557C                     _delay_us:
 19074                           	opt stack 21
 19075                           
 19076                           ;Types.c: 256: unsigned long u;
 19077                           ;Types.c: 257: while (us--) {
 19078                           
 19079                           ;incstack = 0
 19080  01557C  D01C               	goto	u8940
 19081  01557E                     l12313:
 19082                           
 19083                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 19084  01557E  0E00               	movlw	0
 19085  015580  0100               	movlb	0	; () banked
 19086  015582  6FBC               	movwf	delay_us@u& (0+255),b
 19087  015584  0E00               	movlw	0
 19088  015586  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 19089  015588  0E00               	movlw	0
 19090  01558A  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 19091  01558C  0E00               	movlw	0
 19092  01558E  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 19093  015590                     l12315:
 19094                           
 19095                           ; BSR set to: 0
 19096  015590  0100               	movlb	0	; () banked
 19097  015592  51BC               	movf	delay_us@u& (0+255),w,b
 19098  015594  0100               	movlb	0	; () banked
 19099  015596  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 19100  015598  0100               	movlb	0	; () banked
 19101  01559A  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 19102  01559C  0100               	movlb	0	; () banked
 19103  01559E  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 19104  0155A0  A4D8               	btfss	status,2,c
 19105  0155A2  D009               	goto	u8940
 19106                           
 19107                           ; BSR set to: 0
 19108                           
 19109                           ; BSR set to: 0
 19110  0155A4  F000               	nop		; ;# 
 19111  0155A6  0E01               	movlw	1
 19112  0155A8  0100               	movlb	0	; () banked
 19113  0155AA  27BC               	addwf	delay_us@u& (0+255),f,b
 19114  0155AC  0E00               	movlw	0
 19115  0155AE  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 19116  0155B0  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 19117  0155B2  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 19118  0155B4  D7ED               	goto	l12315
 19119  0155B6                     u8940:
 19120                           
 19121                           ; BSR set to: 0
 19122                           
 19123                           ; BSR set to: 0
 19124  0155B6  0100               	movlb	0	; () banked
 19125  0155B8  07BA               	decf	delay_us@us& (0+255),f,b
 19126  0155BA  A0D8               	btfss	status,0,c
 19127  0155BC  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 19128  0155BE  0100               	movlb	0	; () banked
 19129  0155C0  29BA               	incf	delay_us@us& (0+255),w,b
 19130  0155C2  E1DD               	bnz	l12313
 19131  0155C4  0100               	movlb	0	; () banked
 19132  0155C6  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 19133  0155C8  B4D8               	btfsc	status,2,c
 19134  0155CA  0012               	return	
 19135  0155CC  D7D8               	goto	l832
 19136  0155CE                     __end_of_delay_us:
 19137                           	opt stack 0
 19138                           tosu	equ	0xFFF
 19139                           tosh	equ	0xFFE
 19140                           tosl	equ	0xFFD
 19141                           pclath	equ	0xFFA
 19142                           tblptru	equ	0xFF8
 19143                           tblptrh	equ	0xFF7
 19144                           tblptrl	equ	0xFF6
 19145                           tablat	equ	0xFF5
 19146                           prodh	equ	0xFF4
 19147                           prodl	equ	0xFF3
 19148                           intcon	equ	0xFF2
 19149                           postinc0	equ	0xFEE
 19150                           wreg	equ	0xFE8
 19151                           indf1	equ	0xFE7
 19152                           postdec1	equ	0xFE5
 19153                           fsr1h	equ	0xFE2
 19154                           fsr1l	equ	0xFE1
 19155                           indf2	equ	0xFDF
 19156                           postinc2	equ	0xFDE
 19157                           postdec2	equ	0xFDD
 19158                           plusw2	equ	0xFDB
 19159                           fsr2h	equ	0xFDA
 19160                           fsr2l	equ	0xFD9
 19161                           status	equ	0xFD8
 19162                           
 19163 ;; *************** function _LCD_Init *****************
 19164 ;; Defined at:
 19165 ;;		line 172 in file "Library/LCD.c"
 19166 ;; Parameters:    Size  Location     Type
 19167 ;;		None
 19168 ;; Auto vars:     Size  Location     Type
 19169 ;;  i               2   55[BANK0 ] unsigned short 
 19170 ;; Return value:  Size  Location     Type
 19171 ;;                  1    wreg      void 
 19172 ;; Registers used:
 19173 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19174 ;; Tracked objects:
 19175 ;;		On entry : 0/0
 19176 ;;		On exit  : 0/0
 19177 ;;		Unchanged: 0/0
 19178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19179 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19180 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19181 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19182 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19183 ;;Total ram usage:        4 bytes
 19184 ;; Hardware stack levels used:    1
 19185 ;; Hardware stack levels required when called:   15
 19186 ;; This function calls:
 19187 ;;		_Configure_GPIOs
 19188 ;;		_LCD_Fill
 19189 ;;		_LCD_Write
 19190 ;;		_Set_Rotation
 19191 ;;		_delay_ms
 19192 ;; This function is called by:
 19193 ;;		_init
 19194 ;; This function uses a non-reentrant model
 19195 ;;
 19196                           
 19197                           	psect	text91
 19198  012AF6                     __ptext91:
 19199                           	opt stack 0
 19200  012AF6                     _LCD_Init:
 19201                           	opt stack 14
 19202                           
 19203                           ;LCD.c: 174: UINT16 i;
 19204                           ;LCD.c: 175: Configure_GPIOs();
 19205                           
 19206                           ; BSR set to: 0
 19207                           ;incstack = 0
 19208  012AF6  ECA5  F0A7         	call	_Configure_GPIOs	;wreg free
 19209                           
 19210                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 19211  012AFA  0E00               	movlw	0
 19212  012AFC  0100               	movlb	0	; () banked
 19213  012AFE  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 19214  012B00  0E00               	movlw	0
 19215  012B02  6FF1               	movwf	LCD_Init@i& (0+255),b
 19216                           
 19217                           ; BSR set to: 0
 19218  012B04  0100               	movlb	0	; () banked
 19219  012B06  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 19220  012B08  E106               	bnz	u10380
 19221  012B0A  0E59               	movlw	89
 19222  012B0C  0100               	movlb	0	; () banked
 19223  012B0E  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 19224  012B10  B0D8               	btfsc	status,0,c
 19225  012B12  D08B               	goto	u10420
 19226  012B14  D001               	goto	l85
 19227  012B16                     u10380:
 19228                           
 19229                           ; BSR set to: 0
 19230  012B16  D089               	goto	u10420
 19231  012B18                     l85:
 19232                           
 19233                           ; BSR set to: 0
 19234                           ;LCD.c: 178: {
 19235                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 19236                           
 19237                           ; BSR set to: 0
 19238  012B18  90D8               	bcf	status,0,c
 19239  012B1A  0100               	movlb	0	; () banked
 19240  012B1C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 19241  012B1E  6EF6               	movwf	tblptrl,c
 19242  012B20  0100               	movlb	0	; () banked
 19243  012B22  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19244  012B24  6EF7               	movwf	tblptrh,c
 19245  012B26  0EE5               	movlw	low _InitList
 19246  012B28  26F6               	addwf	tblptrl,f,c
 19247  012B2A  0EFC               	movlw	high _InitList
 19248  012B2C  22F7               	addwfc	tblptrh,f,c
 19249  012B2E                     	if	1	;There are 3 active tblptr bytes
 19250  012B2E  6AF8               	clrf	tblptru,c
 19251  012B30  0E00               	movlw	low (__mediumconst shr (0+16))
 19252  012B32  22F8               	addwfc	tblptru,f,c
 19253  012B34                     	endif
 19254  012B34  0009               	tblrd		*+
 19255  012B36  0E80               	movlw	128
 19256  012B38  18F5               	xorwf	tablat,w,c
 19257  012B3A  0009               	tblrd		*+
 19258  012B3C  10F5               	iorwf	tablat,w,c
 19259  012B3E  A4D8               	btfss	status,2,c
 19260  012B40  D022               	goto	l87
 19261                           
 19262                           ; BSR set to: 0
 19263  012B42  0100               	movlb	0	; () banked
 19264  012B44  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 19265  012B46  E11F               	bnz	l13747
 19266  012B48  0E58               	movlw	88
 19267  012B4A  0100               	movlb	0	; () banked
 19268  012B4C  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 19269  012B4E  B0D8               	btfsc	status,0,c
 19270  012B50  D01A               	goto	l87
 19271                           
 19272                           ; BSR set to: 0
 19273                           ;LCD.c: 180: delay_ms(InitList[++i]);
 19274  012B52  0100               	movlb	0	; () banked
 19275  012B54  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 19276  012B56  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 19277  012B58  90D8               	bcf	status,0,c
 19278  012B5A  0100               	movlb	0	; () banked
 19279  012B5C  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 19280  012B5E  6EF6               	movwf	tblptrl,c
 19281  012B60  0100               	movlb	0	; () banked
 19282  012B62  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19283  012B64  6EF7               	movwf	tblptrh,c
 19284  012B66  0EE5               	movlw	low _InitList
 19285  012B68  26F6               	addwf	tblptrl,f,c
 19286  012B6A  0EFC               	movlw	high _InitList
 19287  012B6C  22F7               	addwfc	tblptrh,f,c
 19288  012B6E                     	if	1	;There are 3 active tblptr bytes
 19289  012B6E  6AF8               	clrf	tblptru,c
 19290  012B70  0E00               	movlw	low (__mediumconst shr (0+16))
 19291  012B72  22F8               	addwfc	tblptru,f,c
 19292  012B74                     	endif
 19293  012B74  0009               	tblrd		*+
 19294  012B76  CFF5 F0BA          	movff	tablat,delay_ms@ms
 19295  012B7A  000A               	tblrd		*-
 19296  012B7C  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 19297  012B80  EC7E  F0A8         	call	_delay_ms	;wreg free
 19298  012B84  D04B               	goto	l90
 19299  012B86                     l87:
 19300  012B86                     l13747:
 19301                           
 19302                           ;LCD.c: 181: else
 19303                           ;LCD.c: 182: {
 19304                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 19305  012B86  90D8               	bcf	status,0,c
 19306  012B88  0100               	movlb	0	; () banked
 19307  012B8A  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 19308  012B8C  6EF6               	movwf	tblptrl,c
 19309  012B8E  0100               	movlb	0	; () banked
 19310  012B90  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19311  012B92  6EF7               	movwf	tblptrh,c
 19312  012B94  0EE5               	movlw	low _InitList
 19313  012B96  26F6               	addwf	tblptrl,f,c
 19314  012B98  0EFC               	movlw	high _InitList
 19315  012B9A  22F7               	addwfc	tblptrh,f,c
 19316  012B9C                     	if	1	;There are 3 active tblptr bytes
 19317  012B9C  6AF8               	clrf	tblptru,c
 19318  012B9E  0E00               	movlw	low (__mediumconst shr (0+16))
 19319  012BA0  22F8               	addwfc	tblptru,f,c
 19320  012BA2                     	endif
 19321  012BA2  0009               	tblrd		*+
 19322  012BA4  0E00               	movlw	0
 19323  012BA6  5EF5               	subwf	tablat,f,c
 19324  012BA8  0009               	tblrd		*+
 19325  012BAA  0E01               	movlw	1
 19326  012BAC  5AF5               	subwfb	tablat,f,c
 19327  012BAE  A0D8               	btfss	status,0,c
 19328  012BB0  D020               	goto	l89
 19329                           
 19330                           ; BSR set to: 0
 19331  012BB2  0E00               	movlw	0
 19332  012BB4  0100               	movlb	0	; () banked
 19333  012BB6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19334  012BB8  90D8               	bcf	status,0,c
 19335  012BBA  0100               	movlb	0	; () banked
 19336  012BBC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 19337  012BBE  6EF6               	movwf	tblptrl,c
 19338  012BC0  0100               	movlb	0	; () banked
 19339  012BC2  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19340  012BC4  6EF7               	movwf	tblptrh,c
 19341  012BC6  0EE5               	movlw	low _InitList
 19342  012BC8  26F6               	addwf	tblptrl,f,c
 19343  012BCA  0EFC               	movlw	high _InitList
 19344  012BCC  22F7               	addwfc	tblptrh,f,c
 19345  012BCE                     	if	1	;There are 3 active tblptr bytes
 19346  012BCE  6AF8               	clrf	tblptru,c
 19347  012BD0  0E00               	movlw	low (__mediumconst shr (0+16))
 19348  012BD2  22F8               	addwfc	tblptru,f,c
 19349  012BD4                     	endif
 19350  012BD4  0009               	tblrd		*+
 19351  012BD6  CFF5 F0EF          	movff	tablat,??_LCD_Init
 19352  012BDA  0009               	tblrd		*+
 19353  012BDC  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 19354  012BE0  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 19355  012BE4  0100               	movlb	0	; () banked
 19356  012BE6  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 19357  012BE8  0100               	movlb	0	; () banked
 19358  012BEA  51EF               	movf	??_LCD_Init& (0+255),w,b
 19359  012BEC  ECDE  F0AE         	call	_LCD_Write
 19360  012BF0  D015               	goto	l90
 19361  012BF2                     l89:
 19362                           
 19363                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 19364  012BF2  0E01               	movlw	1
 19365  012BF4  0100               	movlb	0	; () banked
 19366  012BF6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19367  012BF8  90D8               	bcf	status,0,c
 19368  012BFA  0100               	movlb	0	; () banked
 19369  012BFC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 19370  012BFE  6EF6               	movwf	tblptrl,c
 19371  012C00  0100               	movlb	0	; () banked
 19372  012C02  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 19373  012C04  6EF7               	movwf	tblptrh,c
 19374  012C06  0EE5               	movlw	low _InitList
 19375  012C08  26F6               	addwf	tblptrl,f,c
 19376  012C0A  0EFC               	movlw	high _InitList
 19377  012C0C  22F7               	addwfc	tblptrh,f,c
 19378  012C0E                     	if	1	;There are 3 active tblptr bytes
 19379  012C0E  6AF8               	clrf	tblptru,c
 19380  012C10  0E00               	movlw	low (__mediumconst shr (0+16))
 19381  012C12  22F8               	addwfc	tblptru,f,c
 19382  012C14                     	endif
 19383  012C14  0008               	tblrd		*
 19384  012C16  50F5               	movf	tablat,w,c
 19385  012C18  ECDE  F0AE         	call	_LCD_Write
 19386  012C1C                     l90:
 19387  012C1C  0100               	movlb	0	; () banked
 19388  012C1E  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 19389  012C20  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 19390                           
 19391                           ; BSR set to: 0
 19392  012C22  0100               	movlb	0	; () banked
 19393  012C24  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 19394  012C26  E101               	bnz	l13757
 19395  012C28  D770               	goto	L12
 19396  012C2A                     u10420:
 19397  012C2A                     l13757:
 19398                           
 19399                           ; BSR set to: 0
 19400                           ;LCD.c: 185: }
 19401                           ;LCD.c: 186: }
 19402                           ;LCD.c: 187: delay_ms(100);
 19403  012C2A  0E00               	movlw	0
 19404  012C2C  0100               	movlb	0	; () banked
 19405  012C2E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19406  012C30  0E64               	movlw	100
 19407  012C32  6FBA               	movwf	delay_ms@ms& (0+255),b
 19408  012C34  EC7E  F0A8         	call	_delay_ms	;wreg free
 19409                           
 19410                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 19411  012C38  0E00               	movlw	0
 19412  012C3A  0100               	movlb	0	; () banked
 19413  012C3C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19414  012C3E  0E29               	movlw	41
 19415  012C40  ECDE  F0AE         	call	_LCD_Write
 19416                           
 19417                           ;LCD.c: 189: Set_Rotation(1);
 19418  012C44  0E01               	movlw	1
 19419  012C46  EC9F  F0A3         	call	_Set_Rotation
 19420                           
 19421                           ;LCD.c: 191: delay_ms(100);
 19422  012C4A  0E00               	movlw	0
 19423  012C4C  0100               	movlb	0	; () banked
 19424  012C4E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19425  012C50  0E64               	movlw	100
 19426  012C52  6FBA               	movwf	delay_ms@ms& (0+255),b
 19427  012C54  EC7E  F0A8         	call	_delay_ms	;wreg free
 19428                           
 19429                           ;LCD.c: 192: LCD_Fill(0x0000);
 19430  012C58  0E00               	movlw	0
 19431  012C5A  0100               	movlb	0	; () banked
 19432  012C5C  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 19433  012C5E  0E00               	movlw	0
 19434  012C60  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 19435  012C62  EC69  F0AA         	call	_LCD_Fill	;wreg free
 19436  012C66  0012               	return		;funcret
 19437  012C68                     __end_of_LCD_Init:
 19438                           	opt stack 0
 19439                           tosu	equ	0xFFF
 19440                           tosh	equ	0xFFE
 19441                           tosl	equ	0xFFD
 19442                           pclath	equ	0xFFA
 19443                           tblptru	equ	0xFF8
 19444                           tblptrh	equ	0xFF7
 19445                           tblptrl	equ	0xFF6
 19446                           tablat	equ	0xFF5
 19447                           prodh	equ	0xFF4
 19448                           prodl	equ	0xFF3
 19449                           intcon	equ	0xFF2
 19450                           postinc0	equ	0xFEE
 19451                           wreg	equ	0xFE8
 19452                           indf1	equ	0xFE7
 19453                           postdec1	equ	0xFE5
 19454                           fsr1h	equ	0xFE2
 19455                           fsr1l	equ	0xFE1
 19456                           indf2	equ	0xFDF
 19457                           postinc2	equ	0xFDE
 19458                           postdec2	equ	0xFDD
 19459                           plusw2	equ	0xFDB
 19460                           fsr2h	equ	0xFDA
 19461                           fsr2l	equ	0xFD9
 19462                           status	equ	0xFD8
 19463                           
 19464 ;; *************** function _Set_Rotation *****************
 19465 ;; Defined at:
 19466 ;;		line 248 in file "Library/LCD.c"
 19467 ;; Parameters:    Size  Location     Type
 19468 ;;  m               1    wreg     unsigned char 
 19469 ;; Auto vars:     Size  Location     Type
 19470 ;;  m               1    5[BANK0 ] unsigned char 
 19471 ;;  rotation        1    6[BANK0 ] unsigned char 
 19472 ;; Return value:  Size  Location     Type
 19473 ;;                  1    wreg      void 
 19474 ;; Registers used:
 19475 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19476 ;; Tracked objects:
 19477 ;;		On entry : 0/0
 19478 ;;		On exit  : 0/0
 19479 ;;		Unchanged: 0/0
 19480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19481 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19482 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19484 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19485 ;;Total ram usage:        2 bytes
 19486 ;; Hardware stack levels used:    1
 19487 ;; Hardware stack levels required when called:    9
 19488 ;; This function calls:
 19489 ;;		_LCD_Write
 19490 ;; This function is called by:
 19491 ;;		_LCD_Init
 19492 ;; This function uses a non-reentrant model
 19493 ;;
 19494                           
 19495                           	psect	text92
 19496  01473E                     __ptext92:
 19497                           	opt stack 0
 19498  01473E                     _Set_Rotation:
 19499                           	opt stack 19
 19500                           
 19501                           ;incstack = 0
 19502                           ;Set_Rotation@m stored from wreg
 19503  01473E  0100               	movlb	0	; () banked
 19504  014740  6FBF               	movwf	Set_Rotation@m& (0+255),b
 19505                           
 19506                           ;LCD.c: 250: UINT8 rotation = 0x00;
 19507  014742  0E00               	movlw	0
 19508  014744  0100               	movlb	0	; () banked
 19509  014746  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 19510                           
 19511                           ; BSR set to: 0
 19512                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 19513  014748  0E00               	movlw	0
 19514  01474A  0100               	movlb	0	; () banked
 19515  01474C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19516  01474E  0E36               	movlw	54
 19517  014750  ECDE  F0AE         	call	_LCD_Write
 19518                           
 19519                           ;LCD.c: 253: rotation = (m % 4);
 19520  014754  0100               	movlb	0	; () banked
 19521  014756  51BF               	movf	Set_Rotation@m& (0+255),w,b
 19522  014758  0B03               	andlw	3
 19523  01475A  0100               	movlb	0	; () banked
 19524  01475C  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 19525                           
 19526                           ;LCD.c: 255: switch(rotation)
 19527  01475E  D02C               	goto	l117
 19528  014760                     
 19529                           ; BSR set to: 0
 19530                           ;LCD.c: 258: {
 19531                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 19532                           
 19533                           ; BSR set to: 0
 19534  014760  0E01               	movlw	1
 19535  014762  0100               	movlb	0	; () banked
 19536  014764  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19537  014766  0EC8               	movlw	200
 19538  014768  ECDE  F0AE         	call	_LCD_Write
 19539                           
 19540                           ;LCD.c: 260: w = 128;
 19541  01476C  0E80               	movlw	128
 19542  01476E  6E50               	movwf	_w,c
 19543                           
 19544                           ;LCD.c: 261: l = 128;
 19545  014770  0E80               	movlw	128
 19546  014772  6E4F               	movwf	_l,c
 19547                           
 19548                           ;LCD.c: 262: break;
 19549  014774  0012               	return	
 19550  014776                     
 19551                           ;LCD.c: 265: {
 19552                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 19553  014776  0E01               	movlw	1
 19554  014778  0100               	movlb	0	; () banked
 19555  01477A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19556  01477C  0EA8               	movlw	168
 19557  01477E  ECDE  F0AE         	call	_LCD_Write
 19558                           
 19559                           ;LCD.c: 267: w = 128;
 19560  014782  0E80               	movlw	128
 19561  014784  6E50               	movwf	_w,c
 19562                           
 19563                           ;LCD.c: 268: l = 128;
 19564  014786  0E80               	movlw	128
 19565  014788  6E4F               	movwf	_l,c
 19566                           
 19567                           ;LCD.c: 269: break;
 19568  01478A  0012               	return	
 19569  01478C                     
 19570                           ;LCD.c: 272: {
 19571                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 19572  01478C  0E01               	movlw	1
 19573  01478E  0100               	movlb	0	; () banked
 19574  014790  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19575  014792  0E08               	movlw	8
 19576  014794  ECDE  F0AE         	call	_LCD_Write
 19577                           
 19578                           ;LCD.c: 274: w = 128;
 19579  014798  0E80               	movlw	128
 19580  01479A  6E50               	movwf	_w,c
 19581                           
 19582                           ;LCD.c: 275: l = 128;
 19583  01479C  0E80               	movlw	128
 19584  01479E  6E4F               	movwf	_l,c
 19585                           
 19586                           ;LCD.c: 276: break;
 19587  0147A0  0012               	return	
 19588  0147A2                     
 19589                           ;LCD.c: 279: {
 19590                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 19591  0147A2  0E01               	movlw	1
 19592  0147A4  0100               	movlb	0	; () banked
 19593  0147A6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19594  0147A8  0E68               	movlw	104
 19595  0147AA  ECDE  F0AE         	call	_LCD_Write
 19596                           
 19597                           ;LCD.c: 281: w = 128;
 19598  0147AE  0E80               	movlw	128
 19599  0147B0  6E50               	movwf	_w,c
 19600                           
 19601                           ;LCD.c: 282: l = 128;
 19602  0147B2  0E80               	movlw	128
 19603  0147B4  6E4F               	movwf	_l,c
 19604                           
 19605                           ;LCD.c: 284: }
 19606                           ;LCD.c: 285: }
 19607                           
 19608                           ;LCD.c: 283: break;
 19609  0147B6  0012               	return	
 19610  0147B8                     l117:
 19611  0147B8  0100               	movlb	0	; () banked
 19612  0147BA  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 19613                           
 19614                           ; Switch size 1, requested type "space"
 19615                           ; Number of cases is 4, Range of values is 0 to 3
 19616                           ; switch strategies available:
 19617                           ; Name         Instructions Cycles
 19618                           ; simple_byte           13     7 (average)
 19619                           ;	Chosen strategy is simple_byte
 19620  0147BC  0A00               	xorlw	0	; case 0
 19621  0147BE  B4D8               	btfsc	status,2,c
 19622  0147C0  D7CF               	goto	l118
 19623  0147C2  0A01               	xorlw	1	; case 1
 19624  0147C4  B4D8               	btfsc	status,2,c
 19625  0147C6  D7D7               	goto	l120
 19626  0147C8  0A03               	xorlw	3	; case 2
 19627  0147CA  B4D8               	btfsc	status,2,c
 19628  0147CC  D7DF               	goto	l121
 19629  0147CE  0A01               	xorlw	1	; case 3
 19630  0147D0  A4D8               	btfss	status,2,c
 19631  0147D2  0012               	return	
 19632  0147D4  D7E6               	goto	l122
 19633  0147D6                     __end_of_Set_Rotation:
 19634                           	opt stack 0
 19635                           tosu	equ	0xFFF
 19636                           tosh	equ	0xFFE
 19637                           tosl	equ	0xFFD
 19638                           pclath	equ	0xFFA
 19639                           tblptru	equ	0xFF8
 19640                           tblptrh	equ	0xFF7
 19641                           tblptrl	equ	0xFF6
 19642                           tablat	equ	0xFF5
 19643                           prodh	equ	0xFF4
 19644                           prodl	equ	0xFF3
 19645                           intcon	equ	0xFF2
 19646                           postinc0	equ	0xFEE
 19647                           wreg	equ	0xFE8
 19648                           indf1	equ	0xFE7
 19649                           postdec1	equ	0xFE5
 19650                           fsr1h	equ	0xFE2
 19651                           fsr1l	equ	0xFE1
 19652                           indf2	equ	0xFDF
 19653                           postinc2	equ	0xFDE
 19654                           postdec2	equ	0xFDD
 19655                           plusw2	equ	0xFDB
 19656                           fsr2h	equ	0xFDA
 19657                           fsr2l	equ	0xFD9
 19658                           status	equ	0xFD8
 19659                           
 19660 ;; *************** function _LCD_Fill *****************
 19661 ;; Defined at:
 19662 ;;		line 287 in file "Library/LCD.c"
 19663 ;; Parameters:    Size  Location     Type
 19664 ;;  pColour         2    9[BANK0 ] unsigned short 
 19665 ;; Auto vars:     Size  Location     Type
 19666 ;;  j               1   12[BANK0 ] unsigned char 
 19667 ;;  i               1   11[BANK0 ] unsigned char 
 19668 ;; Return value:  Size  Location     Type
 19669 ;;                  1    wreg      void 
 19670 ;; Registers used:
 19671 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19672 ;; Tracked objects:
 19673 ;;		On entry : 0/0
 19674 ;;		On exit  : 0/0
 19675 ;;		Unchanged: 0/0
 19676 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19677 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19678 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19679 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19680 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19681 ;;Total ram usage:        4 bytes
 19682 ;; Hardware stack levels used:    1
 19683 ;; Hardware stack levels required when called:   10
 19684 ;; This function calls:
 19685 ;;		_LCD_Word_Write
 19686 ;;		_Set_Addr_Window
 19687 ;; This function is called by:
 19688 ;;		_LCD_Init
 19689 ;; This function uses a non-reentrant model
 19690 ;;
 19691                           
 19692                           	psect	text93
 19693  0154D2                     __ptext93:
 19694                           	opt stack 0
 19695  0154D2                     _LCD_Fill:
 19696                           	opt stack 18
 19697                           
 19698                           ;LCD.c: 296: UINT8 i = 0x00;
 19699                           
 19700                           ;incstack = 0
 19701  0154D2  0E00               	movlw	0
 19702  0154D4  0100               	movlb	0	; () banked
 19703  0154D6  6FC5               	movwf	LCD_Fill@i& (0+255),b
 19704                           
 19705                           ;LCD.c: 297: UINT8 j = 0x00;
 19706  0154D8  0E00               	movlw	0
 19707  0154DA  0100               	movlb	0	; () banked
 19708  0154DC  6FC6               	movwf	LCD_Fill@j& (0+255),b
 19709                           
 19710                           ; BSR set to: 0
 19711                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 19712  0154DE  0E00               	movlw	0
 19713  0154E0  0100               	movlb	0	; () banked
 19714  0154E2  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 19715  0154E4  0450               	decf	_w,w,c
 19716  0154E6  0100               	movlb	0	; () banked
 19717  0154E8  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 19718  0154EA  044F               	decf	_l,w,c
 19719  0154EC  0100               	movlb	0	; () banked
 19720  0154EE  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 19721  0154F0  0E00               	movlw	0
 19722  0154F2  EC0B  F0A1         	call	_Set_Addr_Window
 19723                           
 19724                           ;LCD.c: 299: for (j = l; j > 0; j--)
 19725  0154F6  C04F  F0C6         	movff	_l,LCD_Fill@j
 19726  0154FA                     l13061:
 19727  0154FA  0100               	movlb	0	; () banked
 19728  0154FC  51C6               	movf	LCD_Fill@j& (0+255),w,b
 19729  0154FE  0100               	movlb	0	; () banked
 19730  015500  B4D8               	btfsc	status,2,c
 19731  015502  0012               	return	
 19732                           
 19733                           ; BSR set to: 0
 19734                           ;LCD.c: 300: for (i = w; i > 0; i--)
 19735                           
 19736                           ; BSR set to: 0
 19737  015504  C050  F0C5         	movff	_w,LCD_Fill@i
 19738  015508                     l13065:
 19739                           
 19740                           ; BSR set to: 0
 19741  015508  0100               	movlb	0	; () banked
 19742  01550A  51C5               	movf	LCD_Fill@i& (0+255),w,b
 19743  01550C  0100               	movlb	0	; () banked
 19744  01550E  B4D8               	btfsc	status,2,c
 19745  015510  D009               	goto	u9460
 19746                           
 19747                           ; BSR set to: 0
 19748                           ;LCD.c: 301: LCD_Word_Write(pColour);
 19749                           
 19750                           ; BSR set to: 0
 19751                           
 19752                           ; BSR set to: 0
 19753  015512  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 19754  015516  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 19755  01551A  EC3F  F0AF         	call	_LCD_Word_Write	;wreg free
 19756  01551E  0100               	movlb	0	; () banked
 19757  015520  07C5               	decf	LCD_Fill@i& (0+255),f,b
 19758  015522  D7F2               	goto	l13065
 19759  015524                     u9460:
 19760                           
 19761                           ; BSR set to: 0
 19762                           
 19763                           ; BSR set to: 0
 19764  015524  0100               	movlb	0	; () banked
 19765  015526  07C6               	decf	LCD_Fill@j& (0+255),f,b
 19766  015528  D7E8               	goto	l13061
 19767  01552A                     __end_of_LCD_Fill:
 19768                           	opt stack 0
 19769                           tosu	equ	0xFFF
 19770                           tosh	equ	0xFFE
 19771                           tosl	equ	0xFFD
 19772                           pclath	equ	0xFFA
 19773                           tblptru	equ	0xFF8
 19774                           tblptrh	equ	0xFF7
 19775                           tblptrl	equ	0xFF6
 19776                           tablat	equ	0xFF5
 19777                           prodh	equ	0xFF4
 19778                           prodl	equ	0xFF3
 19779                           intcon	equ	0xFF2
 19780                           postinc0	equ	0xFEE
 19781                           wreg	equ	0xFE8
 19782                           indf1	equ	0xFE7
 19783                           postdec1	equ	0xFE5
 19784                           fsr1h	equ	0xFE2
 19785                           fsr1l	equ	0xFE1
 19786                           indf2	equ	0xFDF
 19787                           postinc2	equ	0xFDE
 19788                           postdec2	equ	0xFDD
 19789                           plusw2	equ	0xFDB
 19790                           fsr2h	equ	0xFDA
 19791                           fsr2l	equ	0xFD9
 19792                           status	equ	0xFD8
 19793                           
 19794 ;; *************** function _Set_Addr_Window *****************
 19795 ;; Defined at:
 19796 ;;		line 214 in file "Library/LCD.c"
 19797 ;; Parameters:    Size  Location     Type
 19798 ;;  xs              1    wreg     unsigned char 
 19799 ;;  ys              1    5[BANK0 ] unsigned char 
 19800 ;;  xe              1    6[BANK0 ] unsigned char 
 19801 ;;  ye              1    7[BANK0 ] unsigned char 
 19802 ;; Auto vars:     Size  Location     Type
 19803 ;;  xs              1    8[BANK0 ] unsigned char 
 19804 ;; Return value:  Size  Location     Type
 19805 ;;                  1    wreg      void 
 19806 ;; Registers used:
 19807 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19808 ;; Tracked objects:
 19809 ;;		On entry : 0/0
 19810 ;;		On exit  : 0/0
 19811 ;;		Unchanged: 0/0
 19812 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19813 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19814 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19815 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19816 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19817 ;;Total ram usage:        4 bytes
 19818 ;; Hardware stack levels used:    1
 19819 ;; Hardware stack levels required when called:    9
 19820 ;; This function calls:
 19821 ;;		_LCD_Write
 19822 ;; This function is called by:
 19823 ;;		_LCD_Fill
 19824 ;;		_LCD_FillRectangle
 19825 ;;		_LCD_DrawField
 19826 ;;		_RAM_Address_Set
 19827 ;;		_LCD_DrawPixel
 19828 ;; This function uses a non-reentrant model
 19829 ;;
 19830                           
 19831                           	psect	text94
 19832  014216                     __ptext94:
 19833                           	opt stack 0
 19834  014216                     _Set_Addr_Window:
 19835                           	opt stack 18
 19836                           
 19837                           ; BSR set to: 0
 19838                           ;incstack = 0
 19839                           ;Set_Addr_Window@xs stored from wreg
 19840  014216  0100               	movlb	0	; () banked
 19841  014218  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 19842                           
 19843                           ;LCD.c: 216: ys+=2;
 19844  01421A  0E02               	movlw	2
 19845  01421C  0100               	movlb	0	; () banked
 19846  01421E  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 19847                           
 19848                           ;LCD.c: 217: ye+=2;
 19849  014220  0E02               	movlw	2
 19850  014222  0100               	movlb	0	; () banked
 19851  014224  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 19852                           
 19853                           ;LCD.c: 218: xs+=3;
 19854  014226  0E03               	movlw	3
 19855  014228  0100               	movlb	0	; () banked
 19856  01422A  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 19857                           
 19858                           ;LCD.c: 219: xe+=3;
 19859  01422C  0E03               	movlw	3
 19860  01422E  0100               	movlb	0	; () banked
 19861  014230  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 19862                           
 19863                           ; BSR set to: 0
 19864                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 19865  014232  0E00               	movlw	0
 19866  014234  0100               	movlb	0	; () banked
 19867  014236  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19868  014238  0E2A               	movlw	42
 19869  01423A  ECDE  F0AE         	call	_LCD_Write
 19870                           
 19871                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 19872  01423E  0E01               	movlw	1
 19873  014240  0100               	movlb	0	; () banked
 19874  014242  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19875  014244  0E00               	movlw	0
 19876  014246  ECDE  F0AE         	call	_LCD_Write
 19877                           
 19878                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 19879  01424A  0E01               	movlw	1
 19880  01424C  0100               	movlb	0	; () banked
 19881  01424E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19882  014250  0100               	movlb	0	; () banked
 19883  014252  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 19884  014254  ECDE  F0AE         	call	_LCD_Write
 19885                           
 19886                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 19887  014258  0E01               	movlw	1
 19888  01425A  0100               	movlb	0	; () banked
 19889  01425C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19890  01425E  0E00               	movlw	0
 19891  014260  ECDE  F0AE         	call	_LCD_Write
 19892                           
 19893                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 19894  014264  0E01               	movlw	1
 19895  014266  0100               	movlb	0	; () banked
 19896  014268  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19897  01426A  0100               	movlb	0	; () banked
 19898  01426C  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 19899  01426E  ECDE  F0AE         	call	_LCD_Write
 19900                           
 19901                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 19902  014272  0E00               	movlw	0
 19903  014274  0100               	movlb	0	; () banked
 19904  014276  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19905  014278  0E2B               	movlw	43
 19906  01427A  ECDE  F0AE         	call	_LCD_Write
 19907                           
 19908                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 19909  01427E  0E01               	movlw	1
 19910  014280  0100               	movlb	0	; () banked
 19911  014282  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19912  014284  0E00               	movlw	0
 19913  014286  ECDE  F0AE         	call	_LCD_Write
 19914                           
 19915                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 19916  01428A  0E01               	movlw	1
 19917  01428C  0100               	movlb	0	; () banked
 19918  01428E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19919  014290  0100               	movlb	0	; () banked
 19920  014292  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 19921  014294  ECDE  F0AE         	call	_LCD_Write
 19922                           
 19923                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 19924  014298  0E01               	movlw	1
 19925  01429A  0100               	movlb	0	; () banked
 19926  01429C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19927  01429E  0E00               	movlw	0
 19928  0142A0  ECDE  F0AE         	call	_LCD_Write
 19929                           
 19930                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 19931  0142A4  0E01               	movlw	1
 19932  0142A6  0100               	movlb	0	; () banked
 19933  0142A8  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19934  0142AA  0100               	movlb	0	; () banked
 19935  0142AC  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 19936  0142AE  ECDE  F0AE         	call	_LCD_Write
 19937                           
 19938                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 19939  0142B2  0E00               	movlw	0
 19940  0142B4  0100               	movlb	0	; () banked
 19941  0142B6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 19942  0142B8  0E2C               	movlw	44
 19943  0142BA  ECDE  F0AE         	call	_LCD_Write
 19944  0142BE  0012               	return		;funcret
 19945  0142C0                     __end_of_Set_Addr_Window:
 19946                           	opt stack 0
 19947                           tosu	equ	0xFFF
 19948                           tosh	equ	0xFFE
 19949                           tosl	equ	0xFFD
 19950                           pclath	equ	0xFFA
 19951                           tblptru	equ	0xFF8
 19952                           tblptrh	equ	0xFF7
 19953                           tblptrl	equ	0xFF6
 19954                           tablat	equ	0xFF5
 19955                           prodh	equ	0xFF4
 19956                           prodl	equ	0xFF3
 19957                           intcon	equ	0xFF2
 19958                           postinc0	equ	0xFEE
 19959                           wreg	equ	0xFE8
 19960                           indf1	equ	0xFE7
 19961                           postdec1	equ	0xFE5
 19962                           fsr1h	equ	0xFE2
 19963                           fsr1l	equ	0xFE1
 19964                           indf2	equ	0xFDF
 19965                           postinc2	equ	0xFDE
 19966                           postdec2	equ	0xFDD
 19967                           plusw2	equ	0xFDB
 19968                           fsr2h	equ	0xFDA
 19969                           fsr2l	equ	0xFD9
 19970                           status	equ	0xFD8
 19971                           
 19972 ;; *************** function _LCD_Word_Write *****************
 19973 ;; Defined at:
 19974 ;;		line 198 in file "Library/LCD.c"
 19975 ;; Parameters:    Size  Location     Type
 19976 ;;  value           2    5[BANK0 ] unsigned short 
 19977 ;; Auto vars:     Size  Location     Type
 19978 ;;		None
 19979 ;; Return value:  Size  Location     Type
 19980 ;;                  1    wreg      void 
 19981 ;; Registers used:
 19982 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 19983 ;; Tracked objects:
 19984 ;;		On entry : 0/0
 19985 ;;		On exit  : 0/0
 19986 ;;		Unchanged: 0/0
 19987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19988 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19991 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19992 ;;Total ram usage:        2 bytes
 19993 ;; Hardware stack levels used:    1
 19994 ;; Hardware stack levels required when called:    9
 19995 ;; This function calls:
 19996 ;;		_LCD_Write
 19997 ;; This function is called by:
 19998 ;;		_LCD_Fill
 19999 ;;		_LCD_FillRectangle
 20000 ;;		_LCD_DrawField
 20001 ;;		_LCD_DrawPixel
 20002 ;; This function uses a non-reentrant model
 20003 ;;
 20004                           
 20005                           	psect	text95
 20006  015E7E                     __ptext95:
 20007                           	opt stack 0
 20008  015E7E                     _LCD_Word_Write:
 20009                           	opt stack 18
 20010                           
 20011                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 20012                           
 20013                           ;incstack = 0
 20014  015E7E  0E01               	movlw	1
 20015  015E80  0100               	movlb	0	; () banked
 20016  015E82  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20017  015E84  0100               	movlb	0	; () banked
 20018  015E86  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 20019  015E88  ECDE  F0AE         	call	_LCD_Write
 20020                           
 20021                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 20022  015E8C  0E01               	movlw	1
 20023  015E8E  0100               	movlb	0	; () banked
 20024  015E90  6FBD               	movwf	LCD_Write@mode& (0+255),b
 20025  015E92  0100               	movlb	0	; () banked
 20026  015E94  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 20027  015E96  ECDE  F0AE         	call	_LCD_Write
 20028  015E9A  0012               	return		;funcret
 20029  015E9C                     __end_of_LCD_Word_Write:
 20030                           	opt stack 0
 20031                           tosu	equ	0xFFF
 20032                           tosh	equ	0xFFE
 20033                           tosl	equ	0xFFD
 20034                           pclath	equ	0xFFA
 20035                           tblptru	equ	0xFF8
 20036                           tblptrh	equ	0xFF7
 20037                           tblptrl	equ	0xFF6
 20038                           tablat	equ	0xFF5
 20039                           prodh	equ	0xFF4
 20040                           prodl	equ	0xFF3
 20041                           intcon	equ	0xFF2
 20042                           postinc0	equ	0xFEE
 20043                           wreg	equ	0xFE8
 20044                           indf1	equ	0xFE7
 20045                           postdec1	equ	0xFE5
 20046                           fsr1h	equ	0xFE2
 20047                           fsr1l	equ	0xFE1
 20048                           indf2	equ	0xFDF
 20049                           postinc2	equ	0xFDE
 20050                           postdec2	equ	0xFDD
 20051                           plusw2	equ	0xFDB
 20052                           fsr2h	equ	0xFDA
 20053                           fsr2l	equ	0xFD9
 20054                           status	equ	0xFD8
 20055                           
 20056 ;; *************** function _LCD_Write *****************
 20057 ;; Defined at:
 20058 ;;		line 67 in file "Library/LCD.c"
 20059 ;; Parameters:    Size  Location     Type
 20060 ;;  value           1    wreg     unsigned char 
 20061 ;;  mode            1    3[BANK0 ] enum E6761
 20062 ;; Auto vars:     Size  Location     Type
 20063 ;;  value           1    4[BANK0 ] unsigned char 
 20064 ;; Return value:  Size  Location     Type
 20065 ;;                  1    wreg      void 
 20066 ;; Registers used:
 20067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20068 ;; Tracked objects:
 20069 ;;		On entry : 0/0
 20070 ;;		On exit  : 0/0
 20071 ;;		Unchanged: 0/0
 20072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20073 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20074 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20076 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20077 ;;Total ram usage:        2 bytes
 20078 ;; Hardware stack levels used:    1
 20079 ;; Hardware stack levels required when called:    8
 20080 ;; This function calls:
 20081 ;;		_Mode_Set
 20082 ;;		_SPI_Send
 20083 ;; This function is called by:
 20084 ;;		_LCD_Init
 20085 ;;		_LCD_Word_Write
 20086 ;;		_Set_Addr_Window
 20087 ;;		_Set_Rotation
 20088 ;;		_LCD_WriteCMD
 20089 ;;		_LCD_WriteData
 20090 ;;		_LCD_Data_Write
 20091 ;;		_LCD_Data_Write_4k
 20092 ;;		_Invert_Display
 20093 ;; This function uses a non-reentrant model
 20094 ;;
 20095                           
 20096                           	psect	text96
 20097  015DBC                     __ptext96:
 20098                           	opt stack 0
 20099  015DBC                     _LCD_Write:
 20100                           	opt stack 18
 20101                           
 20102                           ;incstack = 0
 20103                           ;LCD_Write@value stored from wreg
 20104  015DBC  0100               	movlb	0	; () banked
 20105  015DBE  6FBE               	movwf	LCD_Write@value& (0+255),b
 20106                           
 20107                           ;LCD.c: 89: Mode_Set(mode);
 20108  015DC0  0100               	movlb	0	; () banked
 20109  015DC2  51BD               	movf	LCD_Write@mode& (0+255),w,b
 20110  015DC4  EC56  F0B0         	call	_Mode_Set
 20111                           
 20112                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 20113  015DC8  0E81               	movlw	low _SPI2
 20114  015DCA  0100               	movlb	0	; () banked
 20115  015DCC  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 20116  015DCE  0E03               	movlw	high _SPI2
 20117  015DD0  0100               	movlb	0	; () banked
 20118  015DD2  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 20119  015DD4  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 20120  015DD8  EC13  F0A8         	call	_SPI_Send	;wreg free
 20121  015DDC  0012               	return		;funcret
 20122  015DDE                     __end_of_LCD_Write:
 20123                           	opt stack 0
 20124                           tosu	equ	0xFFF
 20125                           tosh	equ	0xFFE
 20126                           tosl	equ	0xFFD
 20127                           pclath	equ	0xFFA
 20128                           tblptru	equ	0xFF8
 20129                           tblptrh	equ	0xFF7
 20130                           tblptrl	equ	0xFF6
 20131                           tablat	equ	0xFF5
 20132                           prodh	equ	0xFF4
 20133                           prodl	equ	0xFF3
 20134                           intcon	equ	0xFF2
 20135                           postinc0	equ	0xFEE
 20136                           wreg	equ	0xFE8
 20137                           indf1	equ	0xFE7
 20138                           postdec1	equ	0xFE5
 20139                           fsr1h	equ	0xFE2
 20140                           fsr1l	equ	0xFE1
 20141                           indf2	equ	0xFDF
 20142                           postinc2	equ	0xFDE
 20143                           postdec2	equ	0xFDD
 20144                           plusw2	equ	0xFDB
 20145                           fsr2h	equ	0xFDA
 20146                           fsr2l	equ	0xFD9
 20147                           status	equ	0xFD8
 20148                           
 20149 ;; *************** function _SPI_Send *****************
 20150 ;; Defined at:
 20151 ;;		line 226 in file "Library/SPI.c"
 20152 ;; Parameters:    Size  Location     Type
 20153 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 20154 ;;		 -> SPI1(11), SPI2(11), 
 20155 ;;  pData           1    2[BANK0 ] unsigned char 
 20156 ;; Auto vars:     Size  Location     Type
 20157 ;;		None
 20158 ;; Return value:  Size  Location     Type
 20159 ;;                  1    wreg      unsigned char 
 20160 ;; Registers used:
 20161 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 20162 ;; Tracked objects:
 20163 ;;		On entry : 0/0
 20164 ;;		On exit  : 0/0
 20165 ;;		Unchanged: 0/0
 20166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20167 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20170 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20171 ;;Total ram usage:        3 bytes
 20172 ;; Hardware stack levels used:    1
 20173 ;; Hardware stack levels required when called:    7
 20174 ;; This function calls:
 20175 ;;		Nothing
 20176 ;; This function is called by:
 20177 ;;		_LCD_Write
 20178 ;;		_OutSeg
 20179 ;; This function uses a non-reentrant model
 20180 ;;
 20181                           
 20182                           	psect	text97
 20183  015026                     __ptext97:
 20184                           	opt stack 0
 20185  015026                     _SPI_Send:
 20186                           	opt stack 18
 20187                           
 20188                           ;SPI.c: 253: switch (pInput->mChannel)
 20189                           
 20190                           ;incstack = 0
 20191  015026  D026               	goto	l678
 20192  015028                     
 20193                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 20194  015028  C0AF  FFD9         	movff	_PortC+4,fsr2l
 20195  01502C  C0B0  FFDA         	movff	_PortC+5,fsr2h
 20196  015030  0100               	movlb	0	; () banked
 20197  015032  94DF               	bcf	indf2,2,c
 20198                           
 20199                           ; BSR set to: 0
 20200                           ;SPI.c: 257: SSP1BUF = pData;
 20201  015034  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 20202  015038                     
 20203                           ; BSR set to: 0
 20204  015038  A0C7               	btfss	4039,0,c	;volatile
 20205  01503A  D7FE               	goto	l681
 20206                           
 20207                           ;SPI.c: 259: pData = SSP1BUF;
 20208  01503C  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 20209                           
 20210                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 20211  015040  C0AF  FFD9         	movff	_PortC+4,fsr2l
 20212  015044  C0B0  FFDA         	movff	_PortC+5,fsr2h
 20213  015048  0100               	movlb	0	; () banked
 20214  01504A  84DF               	bsf	indf2,2,c
 20215                           
 20216                           ; BSR set to: 0
 20217                           ;SPI.c: 261: return pData;
 20218                           ;	Return value of _SPI_Send is never used
 20219  01504C  0012               	return	
 20220  01504E                     
 20221                           ; BSR set to: 0
 20222                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 20223                           
 20224                           ; BSR set to: 0
 20225  01504E  C0A5  FFD9         	movff	_PortD+4,fsr2l
 20226  015052  C0A6  FFDA         	movff	_PortD+5,fsr2h
 20227  015056  0100               	movlb	0	; () banked
 20228  015058  9EDF               	bcf	indf2,7,c
 20229                           
 20230                           ; BSR set to: 0
 20231                           ;SPI.c: 264: SSP2BUF = pData;
 20232  01505A  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 20233  01505E                     
 20234                           ; BSR set to: 0
 20235  01505E  A06D               	btfss	3949,0,c	;volatile
 20236  015060  D7FE               	goto	l686
 20237                           
 20238                           ;SPI.c: 266: pData = SSP2BUF;
 20239  015062  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 20240                           
 20241                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 20242  015066  C0A5  FFD9         	movff	_PortD+4,fsr2l
 20243  01506A  C0A6  FFDA         	movff	_PortD+5,fsr2h
 20244  01506E  0100               	movlb	0	; () banked
 20245  015070  8EDF               	bsf	indf2,7,c
 20246                           
 20247                           ; BSR set to: 0
 20248                           ;SPI.c: 269: };
 20249                           
 20250                           ; BSR set to: 0
 20251                           ;SPI.c: 268: return pData;
 20252                           ;	Return value of _SPI_Send is never used
 20253  015072  0012               	return	
 20254  015074                     l678:
 20255                           
 20256                           ; BSR set to: 0
 20257  015074  0100               	movlb	0	; () banked
 20258  015076  EE20 F002          	lfsr	2,2
 20259  01507A  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 20260  01507C  26D9               	addwf	fsr2l,f,c
 20261  01507E  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 20262  015080  22DA               	addwfc	fsr2h,f,c
 20263  015082  50DF               	movf	indf2,w,c
 20264                           
 20265                           ; Switch size 1, requested type "space"
 20266                           ; Number of cases is 2, Range of values is 0 to 1
 20267                           ; switch strategies available:
 20268                           ; Name         Instructions Cycles
 20269                           ; simple_byte            7     4 (average)
 20270                           ;	Chosen strategy is simple_byte
 20271  015084  0A00               	xorlw	0	; case 0
 20272  015086  B4D8               	btfsc	status,2,c
 20273  015088  D7CF               	goto	l679
 20274  01508A  0A01               	xorlw	1	; case 1
 20275  01508C  A4D8               	btfss	status,2,c
 20276  01508E  0012               	return	
 20277  015090  D7DE               	goto	l684
 20278  015092                     __end_of_SPI_Send:
 20279                           	opt stack 0
 20280                           tosu	equ	0xFFF
 20281                           tosh	equ	0xFFE
 20282                           tosl	equ	0xFFD
 20283                           pclath	equ	0xFFA
 20284                           tblptru	equ	0xFF8
 20285                           tblptrh	equ	0xFF7
 20286                           tblptrl	equ	0xFF6
 20287                           tablat	equ	0xFF5
 20288                           prodh	equ	0xFF4
 20289                           prodl	equ	0xFF3
 20290                           intcon	equ	0xFF2
 20291                           postinc0	equ	0xFEE
 20292                           wreg	equ	0xFE8
 20293                           indf1	equ	0xFE7
 20294                           postdec1	equ	0xFE5
 20295                           fsr1h	equ	0xFE2
 20296                           fsr1l	equ	0xFE1
 20297                           indf2	equ	0xFDF
 20298                           postinc2	equ	0xFDE
 20299                           postdec2	equ	0xFDD
 20300                           plusw2	equ	0xFDB
 20301                           fsr2h	equ	0xFDA
 20302                           fsr2l	equ	0xFD9
 20303                           status	equ	0xFD8
 20304                           
 20305 ;; *************** function _Mode_Set *****************
 20306 ;; Defined at:
 20307 ;;		line 40 in file "Library/LCD.c"
 20308 ;; Parameters:    Size  Location     Type
 20309 ;;  pMode           1    wreg     enum E6761
 20310 ;; Auto vars:     Size  Location     Type
 20311 ;;  pMode           1    0[BANK0 ] enum E6761
 20312 ;; Return value:  Size  Location     Type
 20313 ;;                  1    wreg      void 
 20314 ;; Registers used:
 20315 ;;		wreg
 20316 ;; Tracked objects:
 20317 ;;		On entry : 0/0
 20318 ;;		On exit  : 0/0
 20319 ;;		Unchanged: 0/0
 20320 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20321 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20322 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20323 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20324 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20325 ;;Total ram usage:        1 bytes
 20326 ;; Hardware stack levels used:    1
 20327 ;; Hardware stack levels required when called:    7
 20328 ;; This function calls:
 20329 ;;		Nothing
 20330 ;; This function is called by:
 20331 ;;		_LCD_Write
 20332 ;; This function uses a non-reentrant model
 20333 ;;
 20334                           
 20335                           	psect	text98
 20336  0160AC                     __ptext98:
 20337                           	opt stack 0
 20338  0160AC                     _Mode_Set:
 20339                           	opt stack 18
 20340                           
 20341                           ; BSR set to: 0
 20342                           ;incstack = 0
 20343                           ;Mode_Set@pMode stored from wreg
 20344  0160AC  0100               	movlb	0	; () banked
 20345  0160AE  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 20346                           
 20347                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 20348  0160B0  0100               	movlb	0	; () banked
 20349  0160B2  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 20350  0160B4  D002               	bra	u8555
 20351  0160B6  9E85               	bcf	3973,7,c	;volatile
 20352  0160B8  D001               	bra	u8556
 20353  0160BA                     u8555:
 20354  0160BA  8E85               	bsf	3973,7,c	;volatile
 20355  0160BC                     u8556:
 20356  0160BC  0012               	return		;funcret
 20357  0160BE                     __end_of_Mode_Set:
 20358                           	opt stack 0
 20359                           tosu	equ	0xFFF
 20360                           tosh	equ	0xFFE
 20361                           tosl	equ	0xFFD
 20362                           pclath	equ	0xFFA
 20363                           tblptru	equ	0xFF8
 20364                           tblptrh	equ	0xFF7
 20365                           tblptrl	equ	0xFF6
 20366                           tablat	equ	0xFF5
 20367                           prodh	equ	0xFF4
 20368                           prodl	equ	0xFF3
 20369                           intcon	equ	0xFF2
 20370                           postinc0	equ	0xFEE
 20371                           wreg	equ	0xFE8
 20372                           indf1	equ	0xFE7
 20373                           postdec1	equ	0xFE5
 20374                           fsr1h	equ	0xFE2
 20375                           fsr1l	equ	0xFE1
 20376                           indf2	equ	0xFDF
 20377                           postinc2	equ	0xFDE
 20378                           postdec2	equ	0xFDD
 20379                           plusw2	equ	0xFDB
 20380                           fsr2h	equ	0xFDA
 20381                           fsr2l	equ	0xFD9
 20382                           status	equ	0xFD8
 20383                           
 20384 ;; *************** function _Configure_GPIOs *****************
 20385 ;; Defined at:
 20386 ;;		line 46 in file "Library/LCD.c"
 20387 ;; Parameters:    Size  Location     Type
 20388 ;;		None
 20389 ;; Auto vars:     Size  Location     Type
 20390 ;;		None
 20391 ;; Return value:  Size  Location     Type
 20392 ;;                  1    wreg      void 
 20393 ;; Registers used:
 20394 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20395 ;; Tracked objects:
 20396 ;;		On entry : 0/0
 20397 ;;		On exit  : 0/0
 20398 ;;		Unchanged: 0/0
 20399 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20404 ;;Total ram usage:        0 bytes
 20405 ;; Hardware stack levels used:    1
 20406 ;; Hardware stack levels required when called:   14
 20407 ;; This function calls:
 20408 ;;		_LCD_Reset
 20409 ;;		_Port_SetPinType
 20410 ;;		_SPI_Init
 20411 ;;		_SPI_MaxSpeed
 20412 ;; This function is called by:
 20413 ;;		_LCD_Init
 20414 ;; This function uses a non-reentrant model
 20415 ;;
 20416                           
 20417                           	psect	text99
 20418  014F4A                     __ptext99:
 20419                           	opt stack 0
 20420  014F4A                     _Configure_GPIOs:
 20421                           	opt stack 14
 20422                           
 20423                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 20424                           
 20425                           ;incstack = 0
 20426  014F4A  0EBE               	movlw	low _PortF
 20427  014F4C  0100               	movlb	0	; () banked
 20428  014F4E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20429  014F50  0E03               	movlw	high _PortF
 20430  014F52  0100               	movlb	0	; () banked
 20431  014F54  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20432  014F56  0E07               	movlw	7
 20433  014F58  0100               	movlb	0	; () banked
 20434  014F5A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20435  014F5C  0E03               	movlw	3
 20436  014F5E  0100               	movlb	0	; () banked
 20437  014F60  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20438  014F62  EC80  F091         	call	_Port_SetPinType	;wreg free
 20439                           
 20440                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 20441  014F66  0EBE               	movlw	low _PortF
 20442  014F68  0100               	movlb	0	; () banked
 20443  014F6A  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20444  014F6C  0E03               	movlw	high _PortF
 20445  014F6E  0100               	movlb	0	; () banked
 20446  014F70  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20447  014F72  0E06               	movlw	6
 20448  014F74  0100               	movlb	0	; () banked
 20449  014F76  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20450  014F78  0E03               	movlw	3
 20451  014F7A  0100               	movlb	0	; () banked
 20452  014F7C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20453  014F7E  EC80  F091         	call	_Port_SetPinType	;wreg free
 20454                           
 20455                           ;LCD.c: 55: LCD_Reset();
 20456  014F82  EC0F  F0AB         	call	_LCD_Reset	;wreg free
 20457                           
 20458                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 20459  014F86  0EC0               	movlw	192
 20460  014F88  0100               	movlb	0	; () banked
 20461  014F8A  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20462  014F8C  0EC6               	movlw	198
 20463  014F8E  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20464  014F90  0E2D               	movlw	45
 20465  014F92  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20466  014F94  0E00               	movlw	0
 20467  014F96  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20468  014F98  0E01               	movlw	1
 20469  014F9A  0100               	movlb	0	; () banked
 20470  014F9C  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20471  014F9E  0E01               	movlw	1
 20472  014FA0  0100               	movlb	0	; () banked
 20473  014FA2  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20474  014FA4  EC65  F084         	call	_SPI_Init	;wreg free
 20475                           
 20476                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 20477  014FA8  0E81               	movlw	low _SPI2
 20478  014FAA  0100               	movlb	0	; () banked
 20479  014FAC  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 20480  014FAE  0E03               	movlw	high _SPI2
 20481  014FB0  0100               	movlb	0	; () banked
 20482  014FB2  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 20483  014FB4  EC31  F0A7         	call	_SPI_MaxSpeed	;wreg free
 20484  014FB8  0012               	return		;funcret
 20485  014FBA                     __end_of_Configure_GPIOs:
 20486                           	opt stack 0
 20487                           tosu	equ	0xFFF
 20488                           tosh	equ	0xFFE
 20489                           tosl	equ	0xFFD
 20490                           pclath	equ	0xFFA
 20491                           tblptru	equ	0xFF8
 20492                           tblptrh	equ	0xFF7
 20493                           tblptrl	equ	0xFF6
 20494                           tablat	equ	0xFF5
 20495                           prodh	equ	0xFF4
 20496                           prodl	equ	0xFF3
 20497                           intcon	equ	0xFF2
 20498                           postinc0	equ	0xFEE
 20499                           wreg	equ	0xFE8
 20500                           indf1	equ	0xFE7
 20501                           postdec1	equ	0xFE5
 20502                           fsr1h	equ	0xFE2
 20503                           fsr1l	equ	0xFE1
 20504                           indf2	equ	0xFDF
 20505                           postinc2	equ	0xFDE
 20506                           postdec2	equ	0xFDD
 20507                           plusw2	equ	0xFDB
 20508                           fsr2h	equ	0xFDA
 20509                           fsr2l	equ	0xFD9
 20510                           status	equ	0xFD8
 20511                           
 20512 ;; *************** function _SPI_MaxSpeed *****************
 20513 ;; Defined at:
 20514 ;;		line 201 in file "Library/SPI.c"
 20515 ;; Parameters:    Size  Location     Type
 20516 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20517 ;;		 -> SPI2(11), 
 20518 ;; Auto vars:     Size  Location     Type
 20519 ;;		None
 20520 ;; Return value:  Size  Location     Type
 20521 ;;                  1    wreg      void 
 20522 ;; Registers used:
 20523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20524 ;; Tracked objects:
 20525 ;;		On entry : 0/0
 20526 ;;		On exit  : 0/0
 20527 ;;		Unchanged: 0/0
 20528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20529 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20532 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20533 ;;Total ram usage:        2 bytes
 20534 ;; Hardware stack levels used:    1
 20535 ;; Hardware stack levels required when called:    9
 20536 ;; This function calls:
 20537 ;;		_Byte_SetBit
 20538 ;;		_Byte_SetQuad
 20539 ;; This function is called by:
 20540 ;;		_Configure_GPIOs
 20541 ;; This function uses a non-reentrant model
 20542 ;;
 20543                           
 20544                           	psect	text100
 20545  014E62                     __ptext100:
 20546                           	opt stack 0
 20547  014E62                     _SPI_MaxSpeed:
 20548                           	opt stack 18
 20549                           
 20550                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20551                           
 20552                           ;incstack = 0
 20553  014E62  0100               	movlb	0	; () banked
 20554  014E64  EE20 F006          	lfsr	2,6
 20555  014E68  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20556  014E6A  26D9               	addwf	fsr2l,f,c
 20557  014E6C  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20558  014E6E  22DA               	addwfc	fsr2h,f,c
 20559  014E70  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20560  014E74  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20561  014E78  0E05               	movlw	5
 20562  014E7A  0100               	movlb	0	; () banked
 20563  014E7C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20564  014E7E  0E00               	movlw	0
 20565  014E80  0100               	movlb	0	; () banked
 20566  014E82  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20567  014E84  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 20568                           
 20569                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 20570  014E88  0100               	movlb	0	; () banked
 20571  014E8A  EE20 F006          	lfsr	2,6
 20572  014E8E  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20573  014E90  26D9               	addwf	fsr2l,f,c
 20574  014E92  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20575  014E94  22DA               	addwfc	fsr2h,f,c
 20576  014E96  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20577  014E9A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20578  014E9E  0E00               	movlw	0
 20579  014EA0  0100               	movlb	0	; () banked
 20580  014EA2  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20581  014EA4  0E00               	movlw	0
 20582  014EA6  0100               	movlb	0	; () banked
 20583  014EA8  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20584  014EAA  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 20585                           
 20586                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20587  014EAE  0100               	movlb	0	; () banked
 20588  014EB0  EE20 F006          	lfsr	2,6
 20589  014EB4  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 20590  014EB6  26D9               	addwf	fsr2l,f,c
 20591  014EB8  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 20592  014EBA  22DA               	addwfc	fsr2h,f,c
 20593  014EBC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20594  014EC0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20595  014EC4  0E05               	movlw	5
 20596  014EC6  0100               	movlb	0	; () banked
 20597  014EC8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20598  014ECA  0E01               	movlw	1
 20599  014ECC  0100               	movlb	0	; () banked
 20600  014ECE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20601  014ED0  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 20602  014ED4  0012               	return		;funcret
 20603  014ED6                     __end_of_SPI_MaxSpeed:
 20604                           	opt stack 0
 20605                           tosu	equ	0xFFF
 20606                           tosh	equ	0xFFE
 20607                           tosl	equ	0xFFD
 20608                           pclath	equ	0xFFA
 20609                           tblptru	equ	0xFF8
 20610                           tblptrh	equ	0xFF7
 20611                           tblptrl	equ	0xFF6
 20612                           tablat	equ	0xFF5
 20613                           prodh	equ	0xFF4
 20614                           prodl	equ	0xFF3
 20615                           intcon	equ	0xFF2
 20616                           postinc0	equ	0xFEE
 20617                           wreg	equ	0xFE8
 20618                           indf1	equ	0xFE7
 20619                           postdec1	equ	0xFE5
 20620                           fsr1h	equ	0xFE2
 20621                           fsr1l	equ	0xFE1
 20622                           indf2	equ	0xFDF
 20623                           postinc2	equ	0xFDE
 20624                           postdec2	equ	0xFDD
 20625                           plusw2	equ	0xFDB
 20626                           fsr2h	equ	0xFDA
 20627                           fsr2l	equ	0xFD9
 20628                           status	equ	0xFD8
 20629                           
 20630 ;; *************** function _LCD_Reset *****************
 20631 ;; Defined at:
 20632 ;;		line 95 in file "Library/LCD.c"
 20633 ;; Parameters:    Size  Location     Type
 20634 ;;		None
 20635 ;; Auto vars:     Size  Location     Type
 20636 ;;		None
 20637 ;; Return value:  Size  Location     Type
 20638 ;;                  1    wreg      void 
 20639 ;; Registers used:
 20640 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20641 ;; Tracked objects:
 20642 ;;		On entry : 0/0
 20643 ;;		On exit  : 0/0
 20644 ;;		Unchanged: 0/0
 20645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20649 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20650 ;;Total ram usage:        0 bytes
 20651 ;; Hardware stack levels used:    1
 20652 ;; Hardware stack levels required when called:   13
 20653 ;; This function calls:
 20654 ;;		_LED_Toggle
 20655 ;;		_Reset_High
 20656 ;;		_Reset_Low
 20657 ;;		_delay_ms
 20658 ;; This function is called by:
 20659 ;;		_Configure_GPIOs
 20660 ;; This function uses a non-reentrant model
 20661 ;;
 20662                           
 20663                           	psect	text101
 20664  01561E                     __ptext101:
 20665                           	opt stack 0
 20666  01561E                     _LCD_Reset:
 20667                           	opt stack 14
 20668                           
 20669                           ;LCD.c: 97: Reset_High();
 20670                           
 20671                           ;incstack = 0
 20672  01561E  EC5D  F0AF         	call	_Reset_High	;wreg free
 20673                           
 20674                           ;LCD.c: 98: LED_Toggle(eLED2);
 20675  015622  0E01               	movlw	1
 20676  015624  ECA6  F0AB         	call	_LED_Toggle
 20677                           
 20678                           ;LCD.c: 99: delay_ms(0x80);
 20679  015628  0E00               	movlw	0
 20680  01562A  0100               	movlb	0	; () banked
 20681  01562C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 20682  01562E  0E80               	movlw	128
 20683  015630  6FBA               	movwf	delay_ms@ms& (0+255),b
 20684  015632  EC7E  F0A8         	call	_delay_ms	;wreg free
 20685                           
 20686                           ;LCD.c: 100: LED_Toggle(eLED2);
 20687  015636  0E01               	movlw	1
 20688  015638  ECA6  F0AB         	call	_LED_Toggle
 20689                           
 20690                           ;LCD.c: 101: Reset_Low();
 20691  01563C  EC4E  F0AF         	call	_Reset_Low	;wreg free
 20692                           
 20693                           ;LCD.c: 102: delay_ms(0x80);
 20694  015640  0E00               	movlw	0
 20695  015642  0100               	movlb	0	; () banked
 20696  015644  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 20697  015646  0E80               	movlw	128
 20698  015648  6FBA               	movwf	delay_ms@ms& (0+255),b
 20699  01564A  EC7E  F0A8         	call	_delay_ms	;wreg free
 20700                           
 20701                           ;LCD.c: 103: LED_Toggle(eLED2);
 20702  01564E  0E01               	movlw	1
 20703  015650  ECA6  F0AB         	call	_LED_Toggle
 20704                           
 20705                           ;LCD.c: 104: Reset_High();
 20706  015654  EC5D  F0AF         	call	_Reset_High	;wreg free
 20707                           
 20708                           ;LCD.c: 105: delay_ms(0x80);
 20709  015658  0E00               	movlw	0
 20710  01565A  0100               	movlb	0	; () banked
 20711  01565C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 20712  01565E  0E80               	movlw	128
 20713  015660  6FBA               	movwf	delay_ms@ms& (0+255),b
 20714  015662  EC7E  F0A8         	call	_delay_ms	;wreg free
 20715                           
 20716                           ;LCD.c: 106: LED_Toggle(eLED2);
 20717  015666  0E01               	movlw	1
 20718  015668  ECA6  F0AB         	call	_LED_Toggle
 20719  01566C  0012               	return		;funcret
 20720  01566E                     __end_of_LCD_Reset:
 20721                           	opt stack 0
 20722                           tosu	equ	0xFFF
 20723                           tosh	equ	0xFFE
 20724                           tosl	equ	0xFFD
 20725                           pclath	equ	0xFFA
 20726                           tblptru	equ	0xFF8
 20727                           tblptrh	equ	0xFF7
 20728                           tblptrl	equ	0xFF6
 20729                           tablat	equ	0xFF5
 20730                           prodh	equ	0xFF4
 20731                           prodl	equ	0xFF3
 20732                           intcon	equ	0xFF2
 20733                           postinc0	equ	0xFEE
 20734                           wreg	equ	0xFE8
 20735                           indf1	equ	0xFE7
 20736                           postdec1	equ	0xFE5
 20737                           fsr1h	equ	0xFE2
 20738                           fsr1l	equ	0xFE1
 20739                           indf2	equ	0xFDF
 20740                           postinc2	equ	0xFDE
 20741                           postdec2	equ	0xFDD
 20742                           plusw2	equ	0xFDB
 20743                           fsr2h	equ	0xFDA
 20744                           fsr2l	equ	0xFD9
 20745                           status	equ	0xFD8
 20746                           
 20747 ;; *************** function _delay_ms *****************
 20748 ;; Defined at:
 20749 ;;		line 240 in file "Library/Types.c"
 20750 ;; Parameters:    Size  Location     Type
 20751 ;;  ms              2    0[BANK0 ] unsigned short 
 20752 ;; Auto vars:     Size  Location     Type
 20753 ;;  u               4    2[BANK0 ] volatile unsigned long 
 20754 ;; Return value:  Size  Location     Type
 20755 ;;                  1    wreg      void 
 20756 ;; Registers used:
 20757 ;;		wreg, status,2, status,0
 20758 ;; Tracked objects:
 20759 ;;		On entry : 0/0
 20760 ;;		On exit  : 0/0
 20761 ;;		Unchanged: 0/0
 20762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20763 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20764 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20765 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20766 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20767 ;;Total ram usage:        6 bytes
 20768 ;; Hardware stack levels used:    1
 20769 ;; Hardware stack levels required when called:    7
 20770 ;; This function calls:
 20771 ;;		Nothing
 20772 ;; This function is called by:
 20773 ;;		_LCD_Reset
 20774 ;;		_LCD_Init
 20775 ;;		_MXK_Init
 20776 ;;		_init
 20777 ;; This function uses a non-reentrant model
 20778 ;;
 20779                           
 20780                           	psect	text102
 20781  0150FC                     __ptext102:
 20782                           	opt stack 0
 20783  0150FC                     _delay_ms:
 20784                           	opt stack 22
 20785                           
 20786                           ;Types.c: 242: volatile unsigned long u;
 20787                           ;Types.c: 243: while (ms--)
 20788                           
 20789                           ;incstack = 0
 20790  0150FC  D01F               	goto	u8820
 20791  0150FE                     l12209:
 20792                           
 20793                           ;Types.c: 244: {
 20794                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 20795  0150FE  0E00               	movlw	0
 20796  015100  0100               	movlb	0	; () banked
 20797  015102  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 20798  015104  0E00               	movlw	0
 20799  015106  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20800  015108  0E00               	movlw	0
 20801  01510A  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20802  01510C  0E00               	movlw	0
 20803  01510E  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20804  015110                     l12211:
 20805                           
 20806                           ; BSR set to: 0
 20807  015110  0100               	movlb	0	; () banked
 20808  015112  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 20809  015114  0100               	movlb	0	; () banked
 20810  015116  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 20811  015118  E111               	bnz	l12217
 20812  01511A  0EB0               	movlw	176
 20813  01511C  0100               	movlb	0	; () banked
 20814  01511E  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 20815  015120  0E04               	movlw	4
 20816  015122  0100               	movlb	0	; () banked
 20817  015124  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 20818  015126  B0D8               	btfsc	status,0,c
 20819  015128  D009               	goto	u8820
 20820                           
 20821                           ; BSR set to: 0
 20822                           
 20823                           ; BSR set to: 0
 20824  01512A  F000               	nop		; ;# 
 20825  01512C  0E01               	movlw	1
 20826  01512E  0100               	movlb	0	; () banked
 20827  015130  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 20828  015132  0E00               	movlw	0
 20829  015134  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 20830  015136  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 20831  015138  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 20832  01513A  D7EA               	goto	l12211
 20833  01513C                     u8820:
 20834  01513C                     l12217:
 20835  01513C  0100               	movlb	0	; () banked
 20836  01513E  07BA               	decf	delay_ms@ms& (0+255),f,b
 20837  015140  A0D8               	btfss	status,0,c
 20838  015142  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 20839  015144  0100               	movlb	0	; () banked
 20840  015146  29BA               	incf	delay_ms@ms& (0+255),w,b
 20841  015148  E1DA               	bnz	l12209
 20842  01514A  0100               	movlb	0	; () banked
 20843  01514C  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 20844  01514E  A4D8               	btfss	status,2,c
 20845  015150  D7D6               	goto	l824
 20846                           
 20847                           ; BSR set to: 0
 20848                           ;Types.c: 251: }
 20849                           ;Types.c: 252: }
 20850                           ;Types.c: 253: u = 0x8008;
 20851                           
 20852                           ; BSR set to: 0
 20853  015152  0E08               	movlw	8
 20854  015154  0100               	movlb	0	; () banked
 20855  015156  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 20856  015158  0E80               	movlw	128
 20857  01515A  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 20858  01515C  0E00               	movlw	0
 20859  01515E  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 20860  015160  0E00               	movlw	0
 20861  015162  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 20862                           
 20863                           ; BSR set to: 0
 20864  015164  0012               	return		;funcret
 20865  015166                     __end_of_delay_ms:
 20866                           	opt stack 0
 20867                           tosu	equ	0xFFF
 20868                           tosh	equ	0xFFE
 20869                           tosl	equ	0xFFD
 20870                           pclath	equ	0xFFA
 20871                           tblptru	equ	0xFF8
 20872                           tblptrh	equ	0xFF7
 20873                           tblptrl	equ	0xFF6
 20874                           tablat	equ	0xFF5
 20875                           prodh	equ	0xFF4
 20876                           prodl	equ	0xFF3
 20877                           intcon	equ	0xFF2
 20878                           postinc0	equ	0xFEE
 20879                           wreg	equ	0xFE8
 20880                           indf1	equ	0xFE7
 20881                           postdec1	equ	0xFE5
 20882                           fsr1h	equ	0xFE2
 20883                           fsr1l	equ	0xFE1
 20884                           indf2	equ	0xFDF
 20885                           postinc2	equ	0xFDE
 20886                           postdec2	equ	0xFDD
 20887                           plusw2	equ	0xFDB
 20888                           fsr2h	equ	0xFDA
 20889                           fsr2l	equ	0xFD9
 20890                           status	equ	0xFD8
 20891                           
 20892 ;; *************** function _Reset_Low *****************
 20893 ;; Defined at:
 20894 ;;		line 32 in file "Library/LCD.c"
 20895 ;; Parameters:    Size  Location     Type
 20896 ;;		None
 20897 ;; Auto vars:     Size  Location     Type
 20898 ;;		None
 20899 ;; Return value:  Size  Location     Type
 20900 ;;                  1    wreg      void 
 20901 ;; Registers used:
 20902 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20903 ;; Tracked objects:
 20904 ;;		On entry : 0/0
 20905 ;;		On exit  : 0/0
 20906 ;;		Unchanged: 0/0
 20907 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20908 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20909 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20910 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20911 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20912 ;;Total ram usage:        0 bytes
 20913 ;; Hardware stack levels used:    1
 20914 ;; Hardware stack levels required when called:   11
 20915 ;; This function calls:
 20916 ;;		_Port_SetPin
 20917 ;; This function is called by:
 20918 ;;		_LCD_Reset
 20919 ;; This function uses a non-reentrant model
 20920 ;;
 20921                           
 20922                           	psect	text103
 20923  015E9C                     __ptext103:
 20924                           	opt stack 0
 20925  015E9C                     _Reset_Low:
 20926                           	opt stack 15
 20927                           
 20928                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 20929                           
 20930                           ; BSR set to: 0
 20931                           ;incstack = 0
 20932  015E9C  0EBE               	movlw	low _PortF
 20933  015E9E  0100               	movlb	0	; () banked
 20934  015EA0  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 20935  015EA2  0E03               	movlw	high _PortF
 20936  015EA4  0100               	movlb	0	; () banked
 20937  015EA6  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 20938  015EA8  0E06               	movlw	6
 20939  015EAA  0100               	movlb	0	; () banked
 20940  015EAC  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 20941  015EAE  0E01               	movlw	1
 20942  015EB0  0100               	movlb	0	; () banked
 20943  015EB2  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 20944  015EB4  ECC7  F09D         	call	_Port_SetPin	;wreg free
 20945  015EB8  0012               	return		;funcret
 20946  015EBA                     __end_of_Reset_Low:
 20947                           	opt stack 0
 20948                           tosu	equ	0xFFF
 20949                           tosh	equ	0xFFE
 20950                           tosl	equ	0xFFD
 20951                           pclath	equ	0xFFA
 20952                           tblptru	equ	0xFF8
 20953                           tblptrh	equ	0xFF7
 20954                           tblptrl	equ	0xFF6
 20955                           tablat	equ	0xFF5
 20956                           prodh	equ	0xFF4
 20957                           prodl	equ	0xFF3
 20958                           intcon	equ	0xFF2
 20959                           postinc0	equ	0xFEE
 20960                           wreg	equ	0xFE8
 20961                           indf1	equ	0xFE7
 20962                           postdec1	equ	0xFE5
 20963                           fsr1h	equ	0xFE2
 20964                           fsr1l	equ	0xFE1
 20965                           indf2	equ	0xFDF
 20966                           postinc2	equ	0xFDE
 20967                           postdec2	equ	0xFDD
 20968                           plusw2	equ	0xFDB
 20969                           fsr2h	equ	0xFDA
 20970                           fsr2l	equ	0xFD9
 20971                           status	equ	0xFD8
 20972                           
 20973 ;; *************** function _Reset_High *****************
 20974 ;; Defined at:
 20975 ;;		line 36 in file "Library/LCD.c"
 20976 ;; Parameters:    Size  Location     Type
 20977 ;;		None
 20978 ;; Auto vars:     Size  Location     Type
 20979 ;;		None
 20980 ;; Return value:  Size  Location     Type
 20981 ;;                  1    wreg      void 
 20982 ;; Registers used:
 20983 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20984 ;; Tracked objects:
 20985 ;;		On entry : 0/0
 20986 ;;		On exit  : 0/0
 20987 ;;		Unchanged: 0/0
 20988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20989 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20990 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20991 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20992 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20993 ;;Total ram usage:        0 bytes
 20994 ;; Hardware stack levels used:    1
 20995 ;; Hardware stack levels required when called:   11
 20996 ;; This function calls:
 20997 ;;		_Port_SetPin
 20998 ;; This function is called by:
 20999 ;;		_LCD_Reset
 21000 ;; This function uses a non-reentrant model
 21001 ;;
 21002                           
 21003                           	psect	text104
 21004  015EBA                     __ptext104:
 21005                           	opt stack 0
 21006  015EBA                     _Reset_High:
 21007                           	opt stack 15
 21008                           
 21009                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 21010                           
 21011                           ;incstack = 0
 21012  015EBA  0EBE               	movlw	low _PortF
 21013  015EBC  0100               	movlb	0	; () banked
 21014  015EBE  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 21015  015EC0  0E03               	movlw	high _PortF
 21016  015EC2  0100               	movlb	0	; () banked
 21017  015EC4  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 21018  015EC6  0E06               	movlw	6
 21019  015EC8  0100               	movlb	0	; () banked
 21020  015ECA  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 21021  015ECC  0E00               	movlw	0
 21022  015ECE  0100               	movlb	0	; () banked
 21023  015ED0  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 21024  015ED2  ECC7  F09D         	call	_Port_SetPin	;wreg free
 21025  015ED6  0012               	return		;funcret
 21026  015ED8                     __end_of_Reset_High:
 21027                           	opt stack 0
 21028                           tosu	equ	0xFFF
 21029                           tosh	equ	0xFFE
 21030                           tosl	equ	0xFFD
 21031                           pclath	equ	0xFFA
 21032                           tblptru	equ	0xFF8
 21033                           tblptrh	equ	0xFF7
 21034                           tblptrl	equ	0xFF6
 21035                           tablat	equ	0xFF5
 21036                           prodh	equ	0xFF4
 21037                           prodl	equ	0xFF3
 21038                           intcon	equ	0xFF2
 21039                           postinc0	equ	0xFEE
 21040                           wreg	equ	0xFE8
 21041                           indf1	equ	0xFE7
 21042                           postdec1	equ	0xFE5
 21043                           fsr1h	equ	0xFE2
 21044                           fsr1l	equ	0xFE1
 21045                           indf2	equ	0xFDF
 21046                           postinc2	equ	0xFDE
 21047                           postdec2	equ	0xFDD
 21048                           plusw2	equ	0xFDB
 21049                           fsr2h	equ	0xFDA
 21050                           fsr2l	equ	0xFD9
 21051                           status	equ	0xFD8
 21052                           
 21053 ;; *************** function _LED_Toggle *****************
 21054 ;; Defined at:
 21055 ;;		line 50 in file "Library/LED.c"
 21056 ;; Parameters:    Size  Location     Type
 21057 ;;  pLED            1    wreg     enum E6739
 21058 ;; Auto vars:     Size  Location     Type
 21059 ;;  pLED            1   24[BANK0 ] enum E6739
 21060 ;; Return value:  Size  Location     Type
 21061 ;;                  1    wreg      void 
 21062 ;; Registers used:
 21063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21064 ;; Tracked objects:
 21065 ;;		On entry : 0/0
 21066 ;;		On exit  : 0/0
 21067 ;;		Unchanged: 0/0
 21068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21070 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21072 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21073 ;;Total ram usage:        1 bytes
 21074 ;; Hardware stack levels used:    1
 21075 ;; Hardware stack levels required when called:   12
 21076 ;; This function calls:
 21077 ;;		_Port_TogglePin
 21078 ;; This function is called by:
 21079 ;;		_LCD_Reset
 21080 ;;		_Event_DIPSwitch
 21081 ;;		_Event_TestButton
 21082 ;;		_Event_ADCSequenceComplete
 21083 ;;		_Event_HMI_DIPSwitch
 21084 ;;		_Event_HMI_LeftButton
 21085 ;;		_Event_HMI_RightButton
 21086 ;;		_Event_HMI_UpButton
 21087 ;;		_Event_HMI_DownButton
 21088 ;; This function uses a non-reentrant model
 21089 ;;
 21090                           
 21091                           	psect	text105
 21092  01574C                     __ptext105:
 21093                           	opt stack 0
 21094  01574C                     _LED_Toggle:
 21095                           	opt stack 14
 21096                           
 21097                           ;incstack = 0
 21098                           ;LED_Toggle@pLED stored from wreg
 21099  01574C  0100               	movlb	0	; () banked
 21100  01574E  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 21101                           
 21102                           ;LED.c: 52: switch (pLED)
 21103  015750  D018               	goto	l234
 21104  015752                     
 21105                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 21106  015752  0EAB               	movlw	low _PortC
 21107  015754  0100               	movlb	0	; () banked
 21108  015756  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 21109  015758  0E00               	movlw	high _PortC
 21110  01575A  0100               	movlb	0	; () banked
 21111  01575C  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21112  01575E  0E00               	movlw	0
 21113  015760  0100               	movlb	0	; () banked
 21114  015762  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 21115  015764  EC17  F0AE         	call	_Port_TogglePin	;wreg free
 21116                           
 21117                           ;LED.c: 56: break;
 21118  015768  0012               	return	
 21119  01576A                     
 21120                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 21121  01576A  0EAB               	movlw	low _PortC
 21122  01576C  0100               	movlb	0	; () banked
 21123  01576E  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 21124  015770  0E00               	movlw	high _PortC
 21125  015772  0100               	movlb	0	; () banked
 21126  015774  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 21127  015776  0E01               	movlw	1
 21128  015778  0100               	movlb	0	; () banked
 21129  01577A  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 21130  01577C  EC17  F0AE         	call	_Port_TogglePin	;wreg free
 21131                           
 21132                           ;LED.c: 60: }
 21133                           
 21134                           ;LED.c: 59: break;
 21135  015780  0012               	return	
 21136  015782                     l234:
 21137  015782  0100               	movlb	0	; () banked
 21138  015784  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 21139                           
 21140                           ; Switch size 1, requested type "space"
 21141                           ; Number of cases is 2, Range of values is 0 to 1
 21142                           ; switch strategies available:
 21143                           ; Name         Instructions Cycles
 21144                           ; simple_byte            7     4 (average)
 21145                           ;	Chosen strategy is simple_byte
 21146  015786  0A00               	xorlw	0	; case 0
 21147  015788  B4D8               	btfsc	status,2,c
 21148  01578A  D7E3               	goto	l235
 21149  01578C  0A01               	xorlw	1	; case 1
 21150  01578E  A4D8               	btfss	status,2,c
 21151  015790  0012               	return	
 21152  015792  D7EB               	goto	l237
 21153  015794                     __end_of_LED_Toggle:
 21154                           	opt stack 0
 21155                           tosu	equ	0xFFF
 21156                           tosh	equ	0xFFE
 21157                           tosl	equ	0xFFD
 21158                           pclath	equ	0xFFA
 21159                           tblptru	equ	0xFF8
 21160                           tblptrh	equ	0xFF7
 21161                           tblptrl	equ	0xFF6
 21162                           tablat	equ	0xFF5
 21163                           prodh	equ	0xFF4
 21164                           prodl	equ	0xFF3
 21165                           intcon	equ	0xFF2
 21166                           postinc0	equ	0xFEE
 21167                           wreg	equ	0xFE8
 21168                           indf1	equ	0xFE7
 21169                           postdec1	equ	0xFE5
 21170                           fsr1h	equ	0xFE2
 21171                           fsr1l	equ	0xFE1
 21172                           indf2	equ	0xFDF
 21173                           postinc2	equ	0xFDE
 21174                           postdec2	equ	0xFDD
 21175                           plusw2	equ	0xFDB
 21176                           fsr2h	equ	0xFDA
 21177                           fsr2l	equ	0xFD9
 21178                           status	equ	0xFD8
 21179                           
 21180 ;; *************** function _Port_TogglePin *****************
 21181 ;; Defined at:
 21182 ;;		line 278 in file "Library/Port.c"
 21183 ;; Parameters:    Size  Location     Type
 21184 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 21185 ;;		 -> PortC(10), 
 21186 ;;  pPin            1   22[BANK0 ] enum E6750
 21187 ;; Auto vars:     Size  Location     Type
 21188 ;;  Value           1   23[BANK0 ] unsigned char 
 21189 ;; Return value:  Size  Location     Type
 21190 ;;                  1    wreg      void 
 21191 ;; Registers used:
 21192 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21193 ;; Tracked objects:
 21194 ;;		On entry : 0/0
 21195 ;;		On exit  : 0/0
 21196 ;;		Unchanged: 0/0
 21197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21198 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21199 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21200 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21201 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21202 ;;Total ram usage:        4 bytes
 21203 ;; Hardware stack levels used:    1
 21204 ;; Hardware stack levels required when called:   11
 21205 ;; This function calls:
 21206 ;;		_Port_GetPin
 21207 ;;		_Port_SetPin
 21208 ;; This function is called by:
 21209 ;;		_LED_Toggle
 21210 ;; This function uses a non-reentrant model
 21211 ;;
 21212                           
 21213                           	psect	text106
 21214  015C2E                     __ptext106:
 21215                           	opt stack 0
 21216  015C2E                     _Port_TogglePin:
 21217                           	opt stack 14
 21218                           
 21219                           ;Port.c: 280: UINT8 Value;
 21220                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 21221                           
 21222                           ;incstack = 0
 21223  015C2E  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 21224  015C32  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 21225  015C36  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 21226  015C3A  EC34  F0AC         	call	_Port_GetPin	;wreg free
 21227  015C3E  0100               	movlb	0	; () banked
 21228  015C40  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 21229                           
 21230                           ; BSR set to: 0
 21231                           ;Port.c: 282: Value ^= 0x01;
 21232  015C42  0E01               	movlw	1
 21233  015C44  0100               	movlb	0	; () banked
 21234  015C46  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 21235                           
 21236                           ; BSR set to: 0
 21237                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 21238  015C48  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 21239  015C4C  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 21240  015C50  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 21241  015C54  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 21242  015C58  ECC7  F09D         	call	_Port_SetPin	;wreg free
 21243  015C5C  0012               	return		;funcret
 21244  015C5E                     __end_of_Port_TogglePin:
 21245                           	opt stack 0
 21246                           tosu	equ	0xFFF
 21247                           tosh	equ	0xFFE
 21248                           tosl	equ	0xFFD
 21249                           pclath	equ	0xFFA
 21250                           tblptru	equ	0xFF8
 21251                           tblptrh	equ	0xFF7
 21252                           tblptrl	equ	0xFF6
 21253                           tablat	equ	0xFF5
 21254                           prodh	equ	0xFF4
 21255                           prodl	equ	0xFF3
 21256                           intcon	equ	0xFF2
 21257                           postinc0	equ	0xFEE
 21258                           wreg	equ	0xFE8
 21259                           indf1	equ	0xFE7
 21260                           postdec1	equ	0xFE5
 21261                           fsr1h	equ	0xFE2
 21262                           fsr1l	equ	0xFE1
 21263                           indf2	equ	0xFDF
 21264                           postinc2	equ	0xFDE
 21265                           postdec2	equ	0xFDD
 21266                           plusw2	equ	0xFDB
 21267                           fsr2h	equ	0xFDA
 21268                           fsr2l	equ	0xFD9
 21269                           status	equ	0xFD8
 21270                           
 21271 ;; *************** function _Port_SetPin *****************
 21272 ;; Defined at:
 21273 ;;		line 247 in file "Library/Port.c"
 21274 ;; Parameters:    Size  Location     Type
 21275 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 21276 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 21277 ;;  pPin            1   17[BANK0 ] enum E6750
 21278 ;;  pValue          1   18[BANK0 ] unsigned char 
 21279 ;; Auto vars:     Size  Location     Type
 21280 ;;  Type            1   19[BANK0 ] enum E6795
 21281 ;; Return value:  Size  Location     Type
 21282 ;;                  1    wreg      void 
 21283 ;; Registers used:
 21284 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21285 ;; Tracked objects:
 21286 ;;		On entry : 0/0
 21287 ;;		On exit  : 0/0
 21288 ;;		Unchanged: 0/0
 21289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21290 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21291 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21293 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21294 ;;Total ram usage:        5 bytes
 21295 ;; Hardware stack levels used:    1
 21296 ;; Hardware stack levels required when called:   10
 21297 ;; This function calls:
 21298 ;;		_Byte_SetBit
 21299 ;;		_Word_GetPair
 21300 ;; This function is called by:
 21301 ;;		_Reset_Low
 21302 ;;		_Reset_High
 21303 ;;		_LED_Set
 21304 ;;		_Port_TogglePin
 21305 ;;		_Motor_Init
 21306 ;;		_Motor_Step
 21307 ;;		_MXK_Init
 21308 ;; This function uses a non-reentrant model
 21309 ;;
 21310                           
 21311                           	psect	text107
 21312  013B8E                     __ptext107:
 21313                           	opt stack 0
 21314  013B8E                     _Port_SetPin:
 21315                           	opt stack 17
 21316                           
 21317                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 21318                           
 21319                           ;incstack = 0
 21320  013B8E  0E08               	movlw	8
 21321  013B90  0100               	movlb	0	; () banked
 21322  013B92  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 21323  013B94  0100               	movlb	0	; () banked
 21324  013B96  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 21325  013B98  0E00               	movlw	0
 21326  013B9A  0100               	movlb	0	; () banked
 21327  013B9C  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 21328  013B9E  0100               	movlb	0	; () banked
 21329  013BA0  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 21330  013BA2  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 21331  013BA6  EC37  F0AD         	call	_Word_GetPair	;wreg free
 21332  013BAA  0100               	movlb	0	; () banked
 21333  013BAC  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 21334                           
 21335                           ;Port.c: 250: switch (Type)
 21336  013BAE  D042               	goto	l427
 21337  013BB0                     
 21338                           ; BSR set to: 0
 21339                           ;Port.c: 256: pValue &= 1;
 21340                           
 21341                           ; BSR set to: 0
 21342  013BB0  0E01               	movlw	1
 21343  013BB2  0100               	movlb	0	; () banked
 21344  013BB4  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 21345                           
 21346                           ; BSR set to: 0
 21347                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 21348  013BB6  0100               	movlb	0	; () banked
 21349  013BB8  EE20 F002          	lfsr	2,2
 21350  013BBC  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 21351  013BBE  26D9               	addwf	fsr2l,f,c
 21352  013BC0  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21353  013BC2  22DA               	addwfc	fsr2h,f,c
 21354  013BC4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21355  013BC8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21356  013BCC  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21357  013BD0  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21358  013BD4  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 21359                           
 21360                           ;Port.c: 258: break;
 21361  013BD8  0012               	return	
 21362  013BDA                     
 21363                           ;Port.c: 261: pValue &= 1;
 21364  013BDA  0E01               	movlw	1
 21365  013BDC  0100               	movlb	0	; () banked
 21366  013BDE  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 21367                           
 21368                           ;Port.c: 262: pValue ^= 1;
 21369  013BE0  0E01               	movlw	1
 21370  013BE2  0100               	movlb	0	; () banked
 21371  013BE4  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 21372                           
 21373                           ; BSR set to: 0
 21374                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 21375  013BE6  0100               	movlb	0	; () banked
 21376  013BE8  EE20 F002          	lfsr	2,2
 21377  013BEC  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 21378  013BEE  26D9               	addwf	fsr2l,f,c
 21379  013BF0  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21380  013BF2  22DA               	addwfc	fsr2h,f,c
 21381  013BF4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21382  013BF8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21383  013BFC  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21384  013C00  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21385  013C04  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 21386                           
 21387                           ;Port.c: 264: break;
 21388  013C08  0012               	return	
 21389  013C0A                     
 21390                           ;Port.c: 266: pValue &= 1;
 21391  013C0A  0E01               	movlw	1
 21392  013C0C  0100               	movlb	0	; () banked
 21393  013C0E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 21394                           
 21395                           ; BSR set to: 0
 21396                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 21397  013C10  0100               	movlb	0	; () banked
 21398  013C12  EE20 F004          	lfsr	2,4
 21399  013C16  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 21400  013C18  26D9               	addwf	fsr2l,f,c
 21401  013C1A  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 21402  013C1C  22DA               	addwfc	fsr2h,f,c
 21403  013C1E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21404  013C22  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21405  013C26  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 21406  013C2A  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 21407  013C2E  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 21408                           
 21409                           ;Port.c: 269: }
 21410                           
 21411                           ;Port.c: 268: break;
 21412  013C32  0012               	return	
 21413  013C34                     l427:
 21414  013C34  0100               	movlb	0	; () banked
 21415  013C36  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 21416                           
 21417                           ; Switch size 1, requested type "space"
 21418                           ; Number of cases is 4, Range of values is 0 to 3
 21419                           ; switch strategies available:
 21420                           ; Name         Instructions Cycles
 21421                           ; simple_byte           13     7 (average)
 21422                           ;	Chosen strategy is simple_byte
 21423  013C38  0A00               	xorlw	0	; case 0
 21424  013C3A  B4D8               	btfsc	status,2,c
 21425  013C3C  0012               	return	
 21426  013C3E  0A01               	xorlw	1	; case 1
 21427  013C40  B4D8               	btfsc	status,2,c
 21428  013C42  D7B6               	goto	l430
 21429  013C44  0A03               	xorlw	3	; case 2
 21430  013C46  B4D8               	btfsc	status,2,c
 21431  013C48  D7C8               	goto	l432
 21432  013C4A  0A01               	xorlw	1	; case 3
 21433  013C4C  A4D8               	btfss	status,2,c
 21434  013C4E  0012               	return	
 21435  013C50  D7DC               	goto	l433
 21436  013C52                     __end_of_Port_SetPin:
 21437                           	opt stack 0
 21438                           tosu	equ	0xFFF
 21439                           tosh	equ	0xFFE
 21440                           tosl	equ	0xFFD
 21441                           pclath	equ	0xFFA
 21442                           tblptru	equ	0xFF8
 21443                           tblptrh	equ	0xFF7
 21444                           tblptrl	equ	0xFF6
 21445                           tablat	equ	0xFF5
 21446                           prodh	equ	0xFF4
 21447                           prodl	equ	0xFF3
 21448                           intcon	equ	0xFF2
 21449                           postinc0	equ	0xFEE
 21450                           wreg	equ	0xFE8
 21451                           indf1	equ	0xFE7
 21452                           postdec1	equ	0xFE5
 21453                           fsr1h	equ	0xFE2
 21454                           fsr1l	equ	0xFE1
 21455                           indf2	equ	0xFDF
 21456                           postinc2	equ	0xFDE
 21457                           postdec2	equ	0xFDD
 21458                           plusw2	equ	0xFDB
 21459                           fsr2h	equ	0xFDA
 21460                           fsr2l	equ	0xFD9
 21461                           status	equ	0xFD8
 21462                           
 21463 ;; *************** function _ISR_Enable *****************
 21464 ;; Defined at:
 21465 ;;		line 27 in file "Library/ISR.c"
 21466 ;; Parameters:    Size  Location     Type
 21467 ;;		None
 21468 ;; Auto vars:     Size  Location     Type
 21469 ;;		None
 21470 ;; Return value:  Size  Location     Type
 21471 ;;                  1    wreg      void 
 21472 ;; Registers used:
 21473 ;;		None
 21474 ;; Tracked objects:
 21475 ;;		On entry : 0/0
 21476 ;;		On exit  : 0/0
 21477 ;;		Unchanged: 0/0
 21478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;Total ram usage:        0 bytes
 21484 ;; Hardware stack levels used:    1
 21485 ;; Hardware stack levels required when called:    7
 21486 ;; This function calls:
 21487 ;;		Nothing
 21488 ;; This function is called by:
 21489 ;;		_init
 21490 ;; This function uses a non-reentrant model
 21491 ;;
 21492                           
 21493                           	psect	text108
 21494  016156                     __ptext108:
 21495                           	opt stack 0
 21496  016156                     _ISR_Enable:
 21497                           	opt stack 22
 21498                           
 21499                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 21500                           
 21501                           ;incstack = 0
 21502  016156  8CF2               	bsf	intcon,6,c	;volatile
 21503                           
 21504                           ;ISR.c: 30: INTCONbits.GIE = 1;
 21505  016158  8EF2               	bsf	intcon,7,c	;volatile
 21506                           
 21507                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 21508  01615A  88F2               	bsf	intcon,4,c	;volatile
 21509                           
 21510                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 21511  01615C  92F2               	bcf	intcon,1,c	;volatile
 21512  01615E  0012               	return		;funcret
 21513  016160                     __end_of_ISR_Enable:
 21514                           	opt stack 0
 21515                           tosu	equ	0xFFF
 21516                           tosh	equ	0xFFE
 21517                           tosl	equ	0xFFD
 21518                           pclath	equ	0xFFA
 21519                           tblptru	equ	0xFF8
 21520                           tblptrh	equ	0xFF7
 21521                           tblptrl	equ	0xFF6
 21522                           tablat	equ	0xFF5
 21523                           prodh	equ	0xFF4
 21524                           prodl	equ	0xFF3
 21525                           intcon	equ	0xFF2
 21526                           postinc0	equ	0xFEE
 21527                           wreg	equ	0xFE8
 21528                           indf1	equ	0xFE7
 21529                           postdec1	equ	0xFE5
 21530                           fsr1h	equ	0xFE2
 21531                           fsr1l	equ	0xFE1
 21532                           indf2	equ	0xFDF
 21533                           postinc2	equ	0xFDE
 21534                           postdec2	equ	0xFDD
 21535                           plusw2	equ	0xFDB
 21536                           fsr2h	equ	0xFDA
 21537                           fsr2l	equ	0xFD9
 21538                           status	equ	0xFD8
 21539                           
 21540 ;; *************** function _HMI_Init *****************
 21541 ;; Defined at:
 21542 ;;		line 104 in file "HMI.c"
 21543 ;; Parameters:    Size  Location     Type
 21544 ;;		None
 21545 ;; Auto vars:     Size  Location     Type
 21546 ;;  in              2   59[BANK0 ] unsigned short 
 21547 ;; Return value:  Size  Location     Type
 21548 ;;                  1    wreg      void 
 21549 ;; Registers used:
 21550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21551 ;; Tracked objects:
 21552 ;;		On entry : 0/0
 21553 ;;		On exit  : 0/0
 21554 ;;		Unchanged: 0/0
 21555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21560 ;;Total ram usage:        2 bytes
 21561 ;; Hardware stack levels used:    1
 21562 ;; Hardware stack levels required when called:   16
 21563 ;; This function calls:
 21564 ;;		_Button_Init
 21565 ;;		_SPI_Init
 21566 ;;		_SPI_MinSpeed
 21567 ;; This function is called by:
 21568 ;;		_init
 21569 ;; This function uses a non-reentrant model
 21570 ;;
 21571                           
 21572                           	psect	text109
 21573  011D76                     __ptext109:
 21574                           	opt stack 0
 21575  011D76                     _HMI_Init:
 21576                           	opt stack 13
 21577                           
 21578                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 21579                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 21580                           
 21581                           ;incstack = 0
 21582  011D76  0E6C               	movlw	low (_HMIBoard+48)
 21583  011D78  0101               	movlb	1	; () banked
 21584  011D7A  6F00               	movwf	Button_Init@pInput& (0+255),b
 21585  011D7C  0E03               	movlw	high (_HMIBoard+48)
 21586  011D7E  0101               	movlb	1	; () banked
 21587  011D80  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21588  011D82  0E00               	movlw	0
 21589  011D84  0101               	movlb	1	; () banked
 21590  011D86  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21591  011D88  0E02               	movlw	2
 21592  011D8A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21593  011D8C  0E8C               	movlw	low _HMI_InitButtons
 21594  011D8E  0101               	movlb	1	; () banked
 21595  011D90  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21596  011D92  0E61               	movlw	high _HMI_InitButtons
 21597  011D94  0101               	movlb	1	; () banked
 21598  011D96  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21599  011D98  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21600  011D9A  0101               	movlb	1	; () banked
 21601  011D9C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21602  011D9E  0ED0               	movlw	low _HMI_DIPSwitch
 21603  011DA0  0101               	movlb	1	; () banked
 21604  011DA2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21605  011DA4  0E5F               	movlw	high _HMI_DIPSwitch
 21606  011DA6  0101               	movlb	1	; () banked
 21607  011DA8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21608  011DAA  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 21609  011DAC  0101               	movlb	1	; () banked
 21610  011DAE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21611  011DB0  0EA6               	movlw	low _Event_NULL
 21612  011DB2  0101               	movlb	1	; () banked
 21613  011DB4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21614  011DB6  0E61               	movlw	high _Event_NULL
 21615  011DB8  0101               	movlb	1	; () banked
 21616  011DBA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21617  011DBC  0E01               	movlw	low (_Event_NULL shr (0+16))
 21618  011DBE  0101               	movlb	1	; () banked
 21619  011DC0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21620  011DC2  ECF5  F09C         	call	_Button_Init	;wreg free
 21621                           
 21622                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 21623                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 21624  011DC6  0E4E               	movlw	low (_HMIBoard+18)
 21625  011DC8  0101               	movlb	1	; () banked
 21626  011DCA  6F00               	movwf	Button_Init@pInput& (0+255),b
 21627  011DCC  0E03               	movlw	high (_HMIBoard+18)
 21628  011DCE  0101               	movlb	1	; () banked
 21629  011DD0  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21630  011DD2  0E00               	movlw	0
 21631  011DD4  0101               	movlb	1	; () banked
 21632  011DD6  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21633  011DD8  0E02               	movlw	2
 21634  011DDA  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21635  011DDC  0E8C               	movlw	low _HMI_InitButtons
 21636  011DDE  0101               	movlb	1	; () banked
 21637  011DE0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21638  011DE2  0E61               	movlw	high _HMI_InitButtons
 21639  011DE4  0101               	movlb	1	; () banked
 21640  011DE6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21641  011DE8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21642  011DEA  0101               	movlb	1	; () banked
 21643  011DEC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21644  011DEE  0E30               	movlw	low _HMI_LeftSwitch
 21645  011DF0  0101               	movlb	1	; () banked
 21646  011DF2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21647  011DF4  0E60               	movlw	high _HMI_LeftSwitch
 21648  011DF6  0101               	movlb	1	; () banked
 21649  011DF8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21650  011DFA  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 21651  011DFC  0101               	movlb	1	; () banked
 21652  011DFE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21653  011E00  0EA6               	movlw	low _Event_NULL
 21654  011E02  0101               	movlb	1	; () banked
 21655  011E04  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21656  011E06  0E61               	movlw	high _Event_NULL
 21657  011E08  0101               	movlb	1	; () banked
 21658  011E0A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21659  011E0C  0E01               	movlw	low (_Event_NULL shr (0+16))
 21660  011E0E  0101               	movlb	1	; () banked
 21661  011E10  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21662  011E12  ECF5  F09C         	call	_Button_Init	;wreg free
 21663                           
 21664                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 21665                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 21666  011E16  0E44               	movlw	low (_HMIBoard+8)
 21667  011E18  0101               	movlb	1	; () banked
 21668  011E1A  6F00               	movwf	Button_Init@pInput& (0+255),b
 21669  011E1C  0E03               	movlw	high (_HMIBoard+8)
 21670  011E1E  0101               	movlb	1	; () banked
 21671  011E20  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21672  011E22  0E00               	movlw	0
 21673  011E24  0101               	movlb	1	; () banked
 21674  011E26  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21675  011E28  0E02               	movlw	2
 21676  011E2A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21677  011E2C  0E8C               	movlw	low _HMI_InitButtons
 21678  011E2E  0101               	movlb	1	; () banked
 21679  011E30  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21680  011E32  0E61               	movlw	high _HMI_InitButtons
 21681  011E34  0101               	movlb	1	; () banked
 21682  011E36  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21683  011E38  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21684  011E3A  0101               	movlb	1	; () banked
 21685  011E3C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21686  011E3E  0E18               	movlw	low _HMI_RightSwitch
 21687  011E40  0101               	movlb	1	; () banked
 21688  011E42  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21689  011E44  0E60               	movlw	high _HMI_RightSwitch
 21690  011E46  0101               	movlb	1	; () banked
 21691  011E48  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21692  011E4A  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 21693  011E4C  0101               	movlb	1	; () banked
 21694  011E4E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21695  011E50  0EA6               	movlw	low _Event_NULL
 21696  011E52  0101               	movlb	1	; () banked
 21697  011E54  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21698  011E56  0E61               	movlw	high _Event_NULL
 21699  011E58  0101               	movlb	1	; () banked
 21700  011E5A  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21701  011E5C  0E01               	movlw	low (_Event_NULL shr (0+16))
 21702  011E5E  0101               	movlb	1	; () banked
 21703  011E60  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21704  011E62  ECF5  F09C         	call	_Button_Init	;wreg free
 21705                           
 21706                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 21707                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 21708  011E66  0E58               	movlw	low (_HMIBoard+28)
 21709  011E68  0101               	movlb	1	; () banked
 21710  011E6A  6F00               	movwf	Button_Init@pInput& (0+255),b
 21711  011E6C  0E03               	movlw	high (_HMIBoard+28)
 21712  011E6E  0101               	movlb	1	; () banked
 21713  011E70  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21714  011E72  0E00               	movlw	0
 21715  011E74  0101               	movlb	1	; () banked
 21716  011E76  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21717  011E78  0E02               	movlw	2
 21718  011E7A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21719  011E7C  0E8C               	movlw	low _HMI_InitButtons
 21720  011E7E  0101               	movlb	1	; () banked
 21721  011E80  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21722  011E82  0E61               	movlw	high _HMI_InitButtons
 21723  011E84  0101               	movlb	1	; () banked
 21724  011E86  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21725  011E88  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21726  011E8A  0101               	movlb	1	; () banked
 21727  011E8C  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21728  011E8E  0E00               	movlw	low _HMI_UpSwitch
 21729  011E90  0101               	movlb	1	; () banked
 21730  011E92  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21731  011E94  0E60               	movlw	high _HMI_UpSwitch
 21732  011E96  0101               	movlb	1	; () banked
 21733  011E98  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21734  011E9A  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 21735  011E9C  0101               	movlb	1	; () banked
 21736  011E9E  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21737  011EA0  0EA6               	movlw	low _Event_NULL
 21738  011EA2  0101               	movlb	1	; () banked
 21739  011EA4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21740  011EA6  0E61               	movlw	high _Event_NULL
 21741  011EA8  0101               	movlb	1	; () banked
 21742  011EAA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21743  011EAC  0E01               	movlw	low (_Event_NULL shr (0+16))
 21744  011EAE  0101               	movlb	1	; () banked
 21745  011EB0  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21746  011EB2  ECF5  F09C         	call	_Button_Init	;wreg free
 21747                           
 21748                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 21749                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 21750  011EB6  0E62               	movlw	low (_HMIBoard+38)
 21751  011EB8  0101               	movlb	1	; () banked
 21752  011EBA  6F00               	movwf	Button_Init@pInput& (0+255),b
 21753  011EBC  0E03               	movlw	high (_HMIBoard+38)
 21754  011EBE  0101               	movlb	1	; () banked
 21755  011EC0  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 21756  011EC2  0E00               	movlw	0
 21757  011EC4  0101               	movlb	1	; () banked
 21758  011EC6  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21759  011EC8  0E02               	movlw	2
 21760  011ECA  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21761  011ECC  0E8C               	movlw	low _HMI_InitButtons
 21762  011ECE  0101               	movlb	1	; () banked
 21763  011ED0  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 21764  011ED2  0E61               	movlw	high _HMI_InitButtons
 21765  011ED4  0101               	movlb	1	; () banked
 21766  011ED6  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 21767  011ED8  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 21768  011EDA  0101               	movlb	1	; () banked
 21769  011EDC  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 21770  011EDE  0EE8               	movlw	low _HMI_DownSwitch
 21771  011EE0  0101               	movlb	1	; () banked
 21772  011EE2  6F07               	movwf	Button_Init@pGetState& (0+255),b
 21773  011EE4  0E5F               	movlw	high _HMI_DownSwitch
 21774  011EE6  0101               	movlb	1	; () banked
 21775  011EE8  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 21776  011EEA  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 21777  011EEC  0101               	movlb	1	; () banked
 21778  011EEE  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 21779  011EF0  0EA6               	movlw	low _Event_NULL
 21780  011EF2  0101               	movlb	1	; () banked
 21781  011EF4  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 21782  011EF6  0E61               	movlw	high _Event_NULL
 21783  011EF8  0101               	movlb	1	; () banked
 21784  011EFA  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 21785  011EFC  0E01               	movlw	low (_Event_NULL shr (0+16))
 21786  011EFE  0101               	movlb	1	; () banked
 21787  011F00  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 21788  011F02  ECF5  F09C         	call	_Button_Init	;wreg free
 21789                           
 21790                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 21791  011F06  0EA0               	movlw	160
 21792  011F08  0100               	movlb	0	; () banked
 21793  011F0A  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 21794  011F0C  0E86               	movlw	134
 21795  011F0E  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 21796  011F10  0E01               	movlw	1
 21797  011F12  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 21798  011F14  0E00               	movlw	0
 21799  011F16  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 21800  011F18  0E00               	movlw	0
 21801  011F1A  0100               	movlb	0	; () banked
 21802  011F1C  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 21803  011F1E  0E02               	movlw	2
 21804  011F20  0100               	movlb	0	; () banked
 21805  011F22  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 21806  011F24  EC65  F084         	call	_SPI_Init	;wreg free
 21807                           
 21808                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 21809  011F28  0E76               	movlw	low _SPI1
 21810  011F2A  0100               	movlb	0	; () banked
 21811  011F2C  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 21812  011F2E  0E03               	movlw	high _SPI1
 21813  011F30  0100               	movlb	0	; () banked
 21814  011F32  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 21815  011F34  EC6B  F0A7         	call	_SPI_MinSpeed	;wreg free
 21816                           
 21817                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 21818  011F38  0E00               	movlw	0
 21819  011F3A  0100               	movlb	0	; () banked
 21820  011F3C  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 21821  011F3E  0E00               	movlw	0
 21822  011F40  6FF5               	movwf	HMI_Init@in& (0+255),b
 21823  011F42                     l13845:
 21824                           
 21825                           ; BSR set to: 0
 21826  011F42  0100               	movlb	0	; () banked
 21827  011F44  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 21828  011F46  E113               	bnz	l1153
 21829  011F48  0E08               	movlw	8
 21830  011F4A  0100               	movlb	0	; () banked
 21831  011F4C  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 21832  011F4E  B0D8               	btfsc	status,0,c
 21833  011F50  0012               	return	
 21834                           
 21835                           ; BSR set to: 0
 21836                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 21837                           
 21838                           ; BSR set to: 0
 21839                           
 21840                           ; BSR set to: 0
 21841  011F52  0E3C               	movlw	low _HMIBoard
 21842  011F54  0100               	movlb	0	; () banked
 21843  011F56  25F5               	addwf	HMI_Init@in& (0+255),w,b
 21844  011F58  6ED9               	movwf	fsr2l,c
 21845  011F5A  0E03               	movlw	high _HMIBoard
 21846  011F5C  0100               	movlb	0	; () banked
 21847  011F5E  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 21848  011F60  6EDA               	movwf	fsr2h,c
 21849  011F62  0E00               	movlw	0
 21850  011F64  6EDF               	movwf	indf2,c
 21851                           
 21852                           ; BSR set to: 0
 21853  011F66  0100               	movlb	0	; () banked
 21854  011F68  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 21855  011F6A  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 21856  011F6C  D7EA               	goto	l13845
 21857  011F6E                     l1153:
 21858                           
 21859                           ; BSR set to: 0
 21860  011F6E  0012               	return		;funcret
 21861  011F70                     __end_of_HMI_Init:
 21862                           	opt stack 0
 21863                           tosu	equ	0xFFF
 21864                           tosh	equ	0xFFE
 21865                           tosl	equ	0xFFD
 21866                           pclath	equ	0xFFA
 21867                           tblptru	equ	0xFF8
 21868                           tblptrh	equ	0xFF7
 21869                           tblptrl	equ	0xFF6
 21870                           tablat	equ	0xFF5
 21871                           prodh	equ	0xFF4
 21872                           prodl	equ	0xFF3
 21873                           intcon	equ	0xFF2
 21874                           postinc0	equ	0xFEE
 21875                           wreg	equ	0xFE8
 21876                           indf1	equ	0xFE7
 21877                           postdec1	equ	0xFE5
 21878                           fsr1h	equ	0xFE2
 21879                           fsr1l	equ	0xFE1
 21880                           indf2	equ	0xFDF
 21881                           postinc2	equ	0xFDE
 21882                           postdec2	equ	0xFDD
 21883                           plusw2	equ	0xFDB
 21884                           fsr2h	equ	0xFDA
 21885                           fsr2l	equ	0xFD9
 21886                           status	equ	0xFD8
 21887                           
 21888 ;; *************** function _SPI_MinSpeed *****************
 21889 ;; Defined at:
 21890 ;;		line 190 in file "Library/SPI.c"
 21891 ;; Parameters:    Size  Location     Type
 21892 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 21893 ;;		 -> SPI1(11), 
 21894 ;; Auto vars:     Size  Location     Type
 21895 ;;		None
 21896 ;; Return value:  Size  Location     Type
 21897 ;;                  1    wreg      void 
 21898 ;; Registers used:
 21899 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21900 ;; Tracked objects:
 21901 ;;		On entry : 0/0
 21902 ;;		On exit  : 0/0
 21903 ;;		Unchanged: 0/0
 21904 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21905 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21906 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21907 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21908 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21909 ;;Total ram usage:        2 bytes
 21910 ;; Hardware stack levels used:    1
 21911 ;; Hardware stack levels required when called:    9
 21912 ;; This function calls:
 21913 ;;		_Byte_SetBit
 21914 ;;		_Byte_SetQuad
 21915 ;; This function is called by:
 21916 ;;		_HMI_Init
 21917 ;; This function uses a non-reentrant model
 21918 ;;
 21919                           
 21920                           	psect	text110
 21921  014ED6                     __ptext110:
 21922                           	opt stack 0
 21923  014ED6                     _SPI_MinSpeed:
 21924                           	opt stack 19
 21925                           
 21926                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 21927                           
 21928                           ; BSR set to: 0
 21929                           ;incstack = 0
 21930  014ED6  0100               	movlb	0	; () banked
 21931  014ED8  EE20 F006          	lfsr	2,6
 21932  014EDC  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21933  014EDE  26D9               	addwf	fsr2l,f,c
 21934  014EE0  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21935  014EE2  22DA               	addwfc	fsr2h,f,c
 21936  014EE4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21937  014EE8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21938  014EEC  0E05               	movlw	5
 21939  014EEE  0100               	movlb	0	; () banked
 21940  014EF0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21941  014EF2  0E00               	movlw	0
 21942  014EF4  0100               	movlb	0	; () banked
 21943  014EF6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21944  014EF8  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 21945                           
 21946                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 21947  014EFC  0100               	movlb	0	; () banked
 21948  014EFE  EE20 F006          	lfsr	2,6
 21949  014F02  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21950  014F04  26D9               	addwf	fsr2l,f,c
 21951  014F06  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21952  014F08  22DA               	addwfc	fsr2h,f,c
 21953  014F0A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 21954  014F0E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 21955  014F12  0E00               	movlw	0
 21956  014F14  0100               	movlb	0	; () banked
 21957  014F16  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 21958  014F18  0E02               	movlw	2
 21959  014F1A  0100               	movlb	0	; () banked
 21960  014F1C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 21961  014F1E  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 21962                           
 21963                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 21964  014F22  0100               	movlb	0	; () banked
 21965  014F24  EE20 F006          	lfsr	2,6
 21966  014F28  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 21967  014F2A  26D9               	addwf	fsr2l,f,c
 21968  014F2C  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 21969  014F2E  22DA               	addwfc	fsr2h,f,c
 21970  014F30  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 21971  014F34  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 21972  014F38  0E05               	movlw	5
 21973  014F3A  0100               	movlb	0	; () banked
 21974  014F3C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 21975  014F3E  0E01               	movlw	1
 21976  014F40  0100               	movlb	0	; () banked
 21977  014F42  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 21978  014F44  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 21979  014F48  0012               	return		;funcret
 21980  014F4A                     __end_of_SPI_MinSpeed:
 21981                           	opt stack 0
 21982                           tosu	equ	0xFFF
 21983                           tosh	equ	0xFFE
 21984                           tosl	equ	0xFFD
 21985                           pclath	equ	0xFFA
 21986                           tblptru	equ	0xFF8
 21987                           tblptrh	equ	0xFF7
 21988                           tblptrl	equ	0xFF6
 21989                           tablat	equ	0xFF5
 21990                           prodh	equ	0xFF4
 21991                           prodl	equ	0xFF3
 21992                           intcon	equ	0xFF2
 21993                           postinc0	equ	0xFEE
 21994                           wreg	equ	0xFE8
 21995                           indf1	equ	0xFE7
 21996                           postdec1	equ	0xFE5
 21997                           fsr1h	equ	0xFE2
 21998                           fsr1l	equ	0xFE1
 21999                           indf2	equ	0xFDF
 22000                           postinc2	equ	0xFDE
 22001                           postdec2	equ	0xFDD
 22002                           plusw2	equ	0xFDB
 22003                           fsr2h	equ	0xFDA
 22004                           fsr2l	equ	0xFD9
 22005                           status	equ	0xFD8
 22006                           
 22007 ;; *************** function _SPI_Init *****************
 22008 ;; Defined at:
 22009 ;;		line 12 in file "Library/SPI.c"
 22010 ;; Parameters:    Size  Location     Type
 22011 ;;  pClock          4   45[BANK0 ] unsigned long 
 22012 ;;  pChannel        1   49[BANK0 ] enum E6744
 22013 ;;  pMode           1   50[BANK0 ] enum E6748
 22014 ;; Auto vars:     Size  Location     Type
 22015 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 22016 ;;		 -> SPI1(11), SPI2(11), 
 22017 ;; Return value:  Size  Location     Type
 22018 ;;                  1    wreg      void 
 22019 ;; Registers used:
 22020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22021 ;; Tracked objects:
 22022 ;;		On entry : 0/0
 22023 ;;		On exit  : 0/0
 22024 ;;		Unchanged: 0/0
 22025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22026 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22029 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22030 ;;Total ram usage:        8 bytes
 22031 ;; Hardware stack levels used:    1
 22032 ;; Hardware stack levels required when called:   12
 22033 ;; This function calls:
 22034 ;;		_Byte_SetBit
 22035 ;;		_Byte_SetQuad
 22036 ;;		_Port_SetPinType
 22037 ;;		_SPI_DCS
 22038 ;;		_SPI_DisableISR
 22039 ;;		_Timer2_Init
 22040 ;; This function is called by:
 22041 ;;		_Configure_GPIOs
 22042 ;;		_HMI_Init
 22043 ;; This function uses a non-reentrant model
 22044 ;;
 22045                           
 22046                           	psect	text111
 22047  0108CA                     __ptext111:
 22048                           	opt stack 0
 22049  0108CA                     _SPI_Init:
 22050                           	opt stack 15
 22051                           
 22052                           ;SPI.c: 14: SPIPtr pInput;
 22053                           ;SPI.c: 16: switch (pChannel)
 22054                           
 22055                           ;incstack = 0
 22056  0108CA  D00C               	goto	l597
 22057  0108CC                     
 22058                           ;SPI.c: 19: pInput = &SPI1;
 22059  0108CC  0E76               	movlw	low _SPI1
 22060  0108CE  0100               	movlb	0	; () banked
 22061  0108D0  6FED               	movwf	SPI_Init@pInput& (0+255),b
 22062  0108D2  0E03               	movlw	high _SPI1
 22063  0108D4  D004               	goto	L13
 22064  0108D6                     
 22065                           ; BSR set to: 0
 22066                           ;SPI.c: 22: pInput = &SPI2;
 22067                           
 22068                           ; BSR set to: 0
 22069  0108D6  0E81               	movlw	low _SPI2
 22070  0108D8  0100               	movlb	0	; () banked
 22071  0108DA  6FED               	movwf	SPI_Init@pInput& (0+255),b
 22072  0108DC  0E03               	movlw	high _SPI2
 22073  0108DE                     L13:
 22074  0108DE  0100               	movlb	0	; () banked
 22075  0108E0  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 22076                           
 22077                           ; BSR set to: 0
 22078                           ;SPI.c: 24: };
 22079                           
 22080                           ;SPI.c: 23: break;
 22081  0108E2  D008               	goto	l599
 22082  0108E4                     l597:
 22083                           
 22084                           ; BSR set to: 0
 22085  0108E4  0100               	movlb	0	; () banked
 22086  0108E6  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 22087                           
 22088                           ; Switch size 1, requested type "space"
 22089                           ; Number of cases is 2, Range of values is 0 to 1
 22090                           ; switch strategies available:
 22091                           ; Name         Instructions Cycles
 22092                           ; simple_byte            7     4 (average)
 22093                           ;	Chosen strategy is simple_byte
 22094  0108E8  0A00               	xorlw	0	; case 0
 22095  0108EA  B4D8               	btfsc	status,2,c
 22096  0108EC  D7EF               	goto	l598
 22097  0108EE  0A01               	xorlw	1	; case 1
 22098  0108F0  B4D8               	btfsc	status,2,c
 22099  0108F2  D7F1               	goto	l600
 22100  0108F4                     l599:
 22101                           
 22102                           ; BSR set to: 0
 22103                           ;SPI.c: 26: pInput->mChannel = pChannel;
 22104                           
 22105                           ; BSR set to: 0
 22106  0108F4  0100               	movlb	0	; () banked
 22107  0108F6  EE20 F002          	lfsr	2,2
 22108  0108FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22109  0108FC  26D9               	addwf	fsr2l,f,c
 22110  0108FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22111  010900  22DA               	addwfc	fsr2h,f,c
 22112  010902  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 22113                           
 22114                           ;SPI.c: 35: switch (pChannel)
 22115  010906  D0B1               	goto	l601
 22116  010908                     
 22117                           ; BSR set to: 0
 22118                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 22119                           
 22120                           ; BSR set to: 0
 22121  010908  0EAB               	movlw	low _PortC
 22122  01090A  0100               	movlb	0	; () banked
 22123  01090C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22124  01090E  0E00               	movlw	high _PortC
 22125  010910  0100               	movlb	0	; () banked
 22126  010912  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22127  010914  0E02               	movlw	2
 22128  010916  0100               	movlb	0	; () banked
 22129  010918  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22130  01091A  0E03               	movlw	3
 22131  01091C  0100               	movlb	0	; () banked
 22132  01091E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22133  010920  EC80  F091         	call	_Port_SetPinType	;wreg free
 22134                           
 22135                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 22136  010924  0EAB               	movlw	low _PortC
 22137  010926  0100               	movlb	0	; () banked
 22138  010928  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22139  01092A  0E00               	movlw	high _PortC
 22140  01092C  0100               	movlb	0	; () banked
 22141  01092E  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22142  010930  0E03               	movlw	3
 22143  010932  0100               	movlb	0	; () banked
 22144  010934  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22145  010936  0E03               	movlw	3
 22146  010938  0100               	movlb	0	; () banked
 22147  01093A  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22148  01093C  EC80  F091         	call	_Port_SetPinType	;wreg free
 22149                           
 22150                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 22151  010940  0EAB               	movlw	low _PortC
 22152  010942  0100               	movlb	0	; () banked
 22153  010944  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22154  010946  0E00               	movlw	high _PortC
 22155  010948  0100               	movlb	0	; () banked
 22156  01094A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22157  01094C  0E05               	movlw	5
 22158  01094E  0100               	movlb	0	; () banked
 22159  010950  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22160  010952  0E03               	movlw	3
 22161  010954  0100               	movlb	0	; () banked
 22162  010956  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22163  010958  EC80  F091         	call	_Port_SetPinType	;wreg free
 22164                           
 22165                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 22166  01095C  0EAB               	movlw	low _PortC
 22167  01095E  0100               	movlb	0	; () banked
 22168  010960  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22169  010962  0E00               	movlw	high _PortC
 22170  010964  0100               	movlb	0	; () banked
 22171  010966  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22172  010968  0E04               	movlw	4
 22173  01096A  0100               	movlb	0	; () banked
 22174  01096C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22175  01096E  0E00               	movlw	0
 22176  010970  0100               	movlb	0	; () banked
 22177  010972  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22178  010974  EC80  F091         	call	_Port_SetPinType	;wreg free
 22179                           
 22180                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 22181  010978  0100               	movlb	0	; () banked
 22182  01097A  EE20 F003          	lfsr	2,3
 22183  01097E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22184  010980  26D9               	addwf	fsr2l,f,c
 22185  010982  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22186  010984  22DA               	addwfc	fsr2h,f,c
 22187  010986  0EC7               	movlw	199
 22188  010988  6EDE               	movwf	postinc2,c
 22189  01098A  0E0F               	movlw	15
 22190  01098C  6EDD               	movwf	postdec2,c
 22191                           
 22192                           ; BSR set to: 0
 22193                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 22194  01098E  0100               	movlb	0	; () banked
 22195  010990  EE20 F006          	lfsr	2,6
 22196  010994  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22197  010996  26D9               	addwf	fsr2l,f,c
 22198  010998  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22199  01099A  22DA               	addwfc	fsr2h,f,c
 22200  01099C  0EC6               	movlw	198
 22201  01099E  6EDE               	movwf	postinc2,c
 22202  0109A0  0E0F               	movlw	15
 22203  0109A2  6EDD               	movwf	postdec2,c
 22204                           
 22205                           ; BSR set to: 0
 22206                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 22207  0109A4  0100               	movlb	0	; () banked
 22208  0109A6  EE20 F009          	lfsr	2,9
 22209  0109AA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22210  0109AC  26D9               	addwf	fsr2l,f,c
 22211  0109AE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22212  0109B0  22DA               	addwfc	fsr2h,f,c
 22213  0109B2  0EC9               	movlw	201
 22214  0109B4  D056               	goto	L14
 22215  0109B6                     
 22216                           ; BSR set to: 0
 22217                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 22218                           
 22219                           ; BSR set to: 0
 22220  0109B6  0EA1               	movlw	low _PortD
 22221  0109B8  0100               	movlb	0	; () banked
 22222  0109BA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22223  0109BC  0E00               	movlw	high _PortD
 22224  0109BE  0100               	movlb	0	; () banked
 22225  0109C0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22226  0109C2  0E07               	movlw	7
 22227  0109C4  0100               	movlb	0	; () banked
 22228  0109C6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22229  0109C8  0E03               	movlw	3
 22230  0109CA  0100               	movlb	0	; () banked
 22231  0109CC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22232  0109CE  EC80  F091         	call	_Port_SetPinType	;wreg free
 22233                           
 22234                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 22235  0109D2  0EA1               	movlw	low _PortD
 22236  0109D4  0100               	movlb	0	; () banked
 22237  0109D6  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22238  0109D8  0E00               	movlw	high _PortD
 22239  0109DA  0100               	movlb	0	; () banked
 22240  0109DC  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22241  0109DE  0E06               	movlw	6
 22242  0109E0  0100               	movlb	0	; () banked
 22243  0109E2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22244  0109E4  0E03               	movlw	3
 22245  0109E6  0100               	movlb	0	; () banked
 22246  0109E8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22247  0109EA  EC80  F091         	call	_Port_SetPinType	;wreg free
 22248                           
 22249                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 22250  0109EE  0EA1               	movlw	low _PortD
 22251  0109F0  0100               	movlb	0	; () banked
 22252  0109F2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22253  0109F4  0E00               	movlw	high _PortD
 22254  0109F6  0100               	movlb	0	; () banked
 22255  0109F8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22256  0109FA  0E04               	movlw	4
 22257  0109FC  0100               	movlb	0	; () banked
 22258  0109FE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22259  010A00  0E03               	movlw	3
 22260  010A02  0100               	movlb	0	; () banked
 22261  010A04  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22262  010A06  EC80  F091         	call	_Port_SetPinType	;wreg free
 22263                           
 22264                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 22265  010A0A  0EA1               	movlw	low _PortD
 22266  010A0C  0100               	movlb	0	; () banked
 22267  010A0E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22268  010A10  0E00               	movlw	high _PortD
 22269  010A12  0100               	movlb	0	; () banked
 22270  010A14  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22271  010A16  0E05               	movlw	5
 22272  010A18  0100               	movlb	0	; () banked
 22273  010A1A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22274  010A1C  0E00               	movlw	0
 22275  010A1E  0100               	movlb	0	; () banked
 22276  010A20  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22277  010A22  EC80  F091         	call	_Port_SetPinType	;wreg free
 22278                           
 22279                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 22280  010A26  0100               	movlb	0	; () banked
 22281  010A28  EE20 F003          	lfsr	2,3
 22282  010A2C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22283  010A2E  26D9               	addwf	fsr2l,f,c
 22284  010A30  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22285  010A32  22DA               	addwfc	fsr2h,f,c
 22286  010A34  0E6D               	movlw	109
 22287  010A36  6EDE               	movwf	postinc2,c
 22288  010A38  0E0F               	movlw	15
 22289  010A3A  6EDD               	movwf	postdec2,c
 22290                           
 22291                           ; BSR set to: 0
 22292                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 22293  010A3C  0100               	movlb	0	; () banked
 22294  010A3E  EE20 F006          	lfsr	2,6
 22295  010A42  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22296  010A44  26D9               	addwf	fsr2l,f,c
 22297  010A46  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22298  010A48  22DA               	addwfc	fsr2h,f,c
 22299  010A4A  0E6C               	movlw	108
 22300  010A4C  6EDE               	movwf	postinc2,c
 22301  010A4E  0E0F               	movlw	15
 22302  010A50  6EDD               	movwf	postdec2,c
 22303                           
 22304                           ; BSR set to: 0
 22305                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 22306  010A52  0100               	movlb	0	; () banked
 22307  010A54  EE20 F009          	lfsr	2,9
 22308  010A58  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22309  010A5A  26D9               	addwf	fsr2l,f,c
 22310  010A5C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22311  010A5E  22DA               	addwfc	fsr2h,f,c
 22312  010A60  0E6F               	movlw	111
 22313  010A62                     L14:
 22314  010A62  6EDE               	movwf	postinc2,c
 22315  010A64  0E0F               	movlw	15
 22316  010A66  6EDD               	movwf	postdec2,c
 22317                           
 22318                           ;SPI.c: 68: break;
 22319  010A68  D009               	goto	l603
 22320  010A6A                     l601:
 22321                           
 22322                           ; BSR set to: 0
 22323                           
 22324                           ; BSR set to: 0
 22325  010A6A  0100               	movlb	0	; () banked
 22326  010A6C  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 22327                           
 22328                           ; Switch size 1, requested type "space"
 22329                           ; Number of cases is 2, Range of values is 0 to 1
 22330                           ; switch strategies available:
 22331                           ; Name         Instructions Cycles
 22332                           ; simple_byte            7     4 (average)
 22333                           ;	Chosen strategy is simple_byte
 22334  010A6E  0A00               	xorlw	0	; case 0
 22335  010A70  B4D8               	btfsc	status,2,c
 22336  010A72  D74A               	goto	l602
 22337  010A74  0A01               	xorlw	1	; case 1
 22338  010A76  A4D8               	btfss	status,2,c
 22339  010A78  0012               	return	
 22340  010A7A  D79D               	goto	l604
 22341  010A7C                     l603:
 22342                           
 22343                           ; BSR set to: 0
 22344                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 22345                           
 22346                           ; BSR set to: 0
 22347  010A7C  0100               	movlb	0	; () banked
 22348  010A7E  EE20 F006          	lfsr	2,6
 22349  010A82  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22350  010A84  26D9               	addwf	fsr2l,f,c
 22351  010A86  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22352  010A88  22DA               	addwfc	fsr2h,f,c
 22353  010A8A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22354  010A8E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22355  010A92  0E05               	movlw	5
 22356  010A94  0100               	movlb	0	; () banked
 22357  010A96  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22358  010A98  0E00               	movlw	0
 22359  010A9A  0100               	movlb	0	; () banked
 22360  010A9C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22361  010A9E  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22362                           
 22363                           ;SPI.c: 77: switch(pMode)
 22364  010AA2  D09C               	goto	l607
 22365  010AA4                     
 22366                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22367  010AA4  0100               	movlb	0	; () banked
 22368  010AA6  EE20 F006          	lfsr	2,6
 22369  010AAA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22370  010AAC  26D9               	addwf	fsr2l,f,c
 22371  010AAE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22372  010AB0  22DA               	addwfc	fsr2h,f,c
 22373  010AB2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22374  010AB6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22375  010ABA  0E04               	movlw	4
 22376  010ABC  0100               	movlb	0	; () banked
 22377  010ABE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22378  010AC0  0E00               	movlw	0
 22379  010AC2  0100               	movlb	0	; () banked
 22380  010AC4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22381  010AC6  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22382                           
 22383                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22384  010ACA  0100               	movlb	0	; () banked
 22385  010ACC  EE20 F003          	lfsr	2,3
 22386  010AD0  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22387  010AD2  26D9               	addwf	fsr2l,f,c
 22388  010AD4  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22389  010AD6  22DA               	addwfc	fsr2h,f,c
 22390  010AD8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22391  010ADC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22392  010AE0  0E06               	movlw	6
 22393  010AE2  0100               	movlb	0	; () banked
 22394  010AE4  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22395  010AE6  0E00               	movlw	0
 22396  010AE8  0100               	movlb	0	; () banked
 22397  010AEA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22398  010AEC  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22399                           
 22400                           ;SPI.c: 82: break;
 22401  010AF0  D084               	goto	l609
 22402  010AF2                     
 22403                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 22404  010AF2  0100               	movlb	0	; () banked
 22405  010AF4  EE20 F006          	lfsr	2,6
 22406  010AF8  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22407  010AFA  26D9               	addwf	fsr2l,f,c
 22408  010AFC  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22409  010AFE  22DA               	addwfc	fsr2h,f,c
 22410  010B00  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22411  010B04  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22412  010B08  0E04               	movlw	4
 22413  010B0A  0100               	movlb	0	; () banked
 22414  010B0C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22415  010B0E  0E00               	movlw	0
 22416  010B10  0100               	movlb	0	; () banked
 22417  010B12  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22418  010B14  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22419                           
 22420                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22421  010B18  0100               	movlb	0	; () banked
 22422  010B1A  EE20 F003          	lfsr	2,3
 22423  010B1E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22424  010B20  26D9               	addwf	fsr2l,f,c
 22425  010B22  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22426  010B24  22DA               	addwfc	fsr2h,f,c
 22427  010B26  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22428  010B2A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22429  010B2E  0E06               	movlw	6
 22430  010B30  0100               	movlb	0	; () banked
 22431  010B32  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22432  010B34  0E01               	movlw	1
 22433  010B36  0100               	movlb	0	; () banked
 22434  010B38  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22435  010B3A  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22436                           
 22437                           ;SPI.c: 86: break;
 22438  010B3E  D05D               	goto	l609
 22439  010B40                     
 22440                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22441  010B40  0100               	movlb	0	; () banked
 22442  010B42  EE20 F006          	lfsr	2,6
 22443  010B46  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22444  010B48  26D9               	addwf	fsr2l,f,c
 22445  010B4A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22446  010B4C  22DA               	addwfc	fsr2h,f,c
 22447  010B4E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22448  010B52  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22449  010B56  0E04               	movlw	4
 22450  010B58  0100               	movlb	0	; () banked
 22451  010B5A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22452  010B5C  0E01               	movlw	1
 22453  010B5E  0100               	movlb	0	; () banked
 22454  010B60  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22455  010B62  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22456                           
 22457                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 22458  010B66  0100               	movlb	0	; () banked
 22459  010B68  EE20 F003          	lfsr	2,3
 22460  010B6C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22461  010B6E  26D9               	addwf	fsr2l,f,c
 22462  010B70  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22463  010B72  22DA               	addwfc	fsr2h,f,c
 22464  010B74  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22465  010B78  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22466  010B7C  0E06               	movlw	6
 22467  010B7E  0100               	movlb	0	; () banked
 22468  010B80  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22469  010B82  0E00               	movlw	0
 22470  010B84  0100               	movlb	0	; () banked
 22471  010B86  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22472  010B88  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22473                           
 22474                           ;SPI.c: 90: break;
 22475  010B8C  D036               	goto	l609
 22476  010B8E                     
 22477                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 22478  010B8E  0100               	movlb	0	; () banked
 22479  010B90  EE20 F006          	lfsr	2,6
 22480  010B94  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22481  010B96  26D9               	addwf	fsr2l,f,c
 22482  010B98  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22483  010B9A  22DA               	addwfc	fsr2h,f,c
 22484  010B9C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22485  010BA0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22486  010BA4  0E04               	movlw	4
 22487  010BA6  0100               	movlb	0	; () banked
 22488  010BA8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22489  010BAA  0E01               	movlw	1
 22490  010BAC  0100               	movlb	0	; () banked
 22491  010BAE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22492  010BB0  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22493                           
 22494                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 22495  010BB4  0100               	movlb	0	; () banked
 22496  010BB6  EE20 F003          	lfsr	2,3
 22497  010BBA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22498  010BBC  26D9               	addwf	fsr2l,f,c
 22499  010BBE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22500  010BC0  22DA               	addwfc	fsr2h,f,c
 22501  010BC2  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22502  010BC6  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22503  010BCA  0E06               	movlw	6
 22504  010BCC  0100               	movlb	0	; () banked
 22505  010BCE  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22506  010BD0  0E01               	movlw	1
 22507  010BD2  0100               	movlb	0	; () banked
 22508  010BD4  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22509  010BD6  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22510                           
 22511                           ;SPI.c: 94: break;
 22512  010BDA  D00F               	goto	l609
 22513  010BDC                     l607:
 22514  010BDC  0100               	movlb	0	; () banked
 22515  010BDE  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 22516                           
 22517                           ; Switch size 1, requested type "space"
 22518                           ; Number of cases is 4, Range of values is 0 to 3
 22519                           ; switch strategies available:
 22520                           ; Name         Instructions Cycles
 22521                           ; simple_byte           13     7 (average)
 22522                           ;	Chosen strategy is simple_byte
 22523  010BE0  0A00               	xorlw	0	; case 0
 22524  010BE2  B4D8               	btfsc	status,2,c
 22525  010BE4  D75F               	goto	l608
 22526  010BE6  0A01               	xorlw	1	; case 1
 22527  010BE8  B4D8               	btfsc	status,2,c
 22528  010BEA  D783               	goto	l610
 22529  010BEC  0A03               	xorlw	3	; case 2
 22530  010BEE  B4D8               	btfsc	status,2,c
 22531  010BF0  D7A7               	goto	l611
 22532  010BF2  0A01               	xorlw	1	; case 3
 22533  010BF4  A4D8               	btfss	status,2,c
 22534  010BF6  0012               	return	
 22535  010BF8  D7CA               	goto	l612
 22536  010BFA                     l609:
 22537                           
 22538                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 22539                           
 22540                           ; BSR set to: 0
 22541  010BFA  0100               	movlb	0	; () banked
 22542  010BFC  EE20 F006          	lfsr	2,6
 22543  010C00  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22544  010C02  26D9               	addwf	fsr2l,f,c
 22545  010C04  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22546  010C06  22DA               	addwfc	fsr2h,f,c
 22547  010C08  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22548  010C0C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22549  010C10  0E07               	movlw	7
 22550  010C12  0100               	movlb	0	; () banked
 22551  010C14  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22552  010C16  0E00               	movlw	0
 22553  010C18  0100               	movlb	0	; () banked
 22554  010C1A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22555  010C1C  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22556                           
 22557                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 22558  010C20  0100               	movlb	0	; () banked
 22559  010C22  EE20 F006          	lfsr	2,6
 22560  010C26  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22561  010C28  26D9               	addwf	fsr2l,f,c
 22562  010C2A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22563  010C2C  22DA               	addwfc	fsr2h,f,c
 22564  010C2E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22565  010C32  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22566  010C36  0E06               	movlw	6
 22567  010C38  0100               	movlb	0	; () banked
 22568  010C3A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22569  010C3C  0E00               	movlw	0
 22570  010C3E  0100               	movlb	0	; () banked
 22571  010C40  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22572  010C42  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22573                           
 22574                           ;SPI.c: 106: Timer2_Init(pClock);
 22575  010C46  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 22576  010C4A  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 22577  010C4E  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 22578  010C52  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 22579  010C56  EC97  F097         	call	_Timer2_Init	;wreg free
 22580                           
 22581                           ;SPI.c: 112: SPI_DisableISR(pInput);
 22582  010C5A  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 22583  010C5E  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 22584  010C62  ECB7  F0AE         	call	_SPI_DisableISR	;wreg free
 22585                           
 22586                           ;SPI.c: 116: switch (pChannel)
 22587  010C66  D004               	goto	l614
 22588  010C68                     l615:
 22589                           
 22590                           ; BSR set to: 0
 22591  010C68  869F               	bsf	3999,3,c	;volatile
 22592  010C6A  D00B               	goto	l616
 22593  010C6C                     l617:
 22594                           
 22595                           ; BSR set to: 0
 22596  010C6C  8EA5               	bsf	4005,7,c	;volatile
 22597  010C6E  D009               	goto	l616
 22598  010C70                     l614:
 22599                           
 22600                           ; BSR set to: 0
 22601  010C70  0100               	movlb	0	; () banked
 22602  010C72  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 22603                           
 22604                           ; Switch size 1, requested type "space"
 22605                           ; Number of cases is 2, Range of values is 0 to 1
 22606                           ; switch strategies available:
 22607                           ; Name         Instructions Cycles
 22608                           ; simple_byte            7     4 (average)
 22609                           ;	Chosen strategy is simple_byte
 22610  010C74  0A00               	xorlw	0	; case 0
 22611  010C76  B4D8               	btfsc	status,2,c
 22612  010C78  D7F7               	goto	l615
 22613  010C7A  0A01               	xorlw	1	; case 1
 22614  010C7C  A4D8               	btfss	status,2,c
 22615  010C7E  0012               	return	
 22616  010C80  D7F5               	goto	l617
 22617  010C82                     l616:
 22618                           
 22619                           ; BSR set to: 0
 22620                           ;SPI.c: 124: SPI_DCS(pInput);
 22621                           
 22622                           ; BSR set to: 0
 22623  010C82  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 22624  010C86  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 22625  010C8A  EC2F  F0AE         	call	_SPI_DCS	;wreg free
 22626                           
 22627                           ;SPI.c: 126: pInput->mBusy = 0;
 22628  010C8E  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 22629  010C92  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 22630  010C96  0E00               	movlw	0
 22631  010C98  6EDF               	movwf	indf2,c
 22632                           
 22633                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 22634  010C9A  0100               	movlb	0	; () banked
 22635  010C9C  EE20 F006          	lfsr	2,6
 22636  010CA0  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22637  010CA2  26D9               	addwf	fsr2l,f,c
 22638  010CA4  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22639  010CA6  22DA               	addwfc	fsr2h,f,c
 22640  010CA8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22641  010CAC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22642  010CB0  0E00               	movlw	0
 22643  010CB2  0100               	movlb	0	; () banked
 22644  010CB4  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 22645  010CB6  0E03               	movlw	3
 22646  010CB8  0100               	movlb	0	; () banked
 22647  010CBA  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22648  010CBC  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 22649                           
 22650                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 22651  010CC0  0100               	movlb	0	; () banked
 22652  010CC2  EE20 F006          	lfsr	2,6
 22653  010CC6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 22654  010CC8  26D9               	addwf	fsr2l,f,c
 22655  010CCA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 22656  010CCC  22DA               	addwfc	fsr2h,f,c
 22657  010CCE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22658  010CD2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22659  010CD6  0E05               	movlw	5
 22660  010CD8  0100               	movlb	0	; () banked
 22661  010CDA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 22662  010CDC  0E01               	movlw	1
 22663  010CDE  0100               	movlb	0	; () banked
 22664  010CE0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22665  010CE2  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 22666  010CE6  0012               	return		;funcret
 22667  010CE8                     __end_of_SPI_Init:
 22668                           	opt stack 0
 22669                           tosu	equ	0xFFF
 22670                           tosh	equ	0xFFE
 22671                           tosl	equ	0xFFD
 22672                           pclath	equ	0xFFA
 22673                           tblptru	equ	0xFF8
 22674                           tblptrh	equ	0xFF7
 22675                           tblptrl	equ	0xFF6
 22676                           tablat	equ	0xFF5
 22677                           prodh	equ	0xFF4
 22678                           prodl	equ	0xFF3
 22679                           intcon	equ	0xFF2
 22680                           postinc0	equ	0xFEE
 22681                           wreg	equ	0xFE8
 22682                           indf1	equ	0xFE7
 22683                           postdec1	equ	0xFE5
 22684                           fsr1h	equ	0xFE2
 22685                           fsr1l	equ	0xFE1
 22686                           indf2	equ	0xFDF
 22687                           postinc2	equ	0xFDE
 22688                           postdec2	equ	0xFDD
 22689                           plusw2	equ	0xFDB
 22690                           fsr2h	equ	0xFDA
 22691                           fsr2l	equ	0xFD9
 22692                           status	equ	0xFD8
 22693                           
 22694 ;; *************** function _Timer2_Init *****************
 22695 ;; Defined at:
 22696 ;;		line 10 in file "Library/Timer2.c"
 22697 ;; Parameters:    Size  Location     Type
 22698 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 22699 ;; Auto vars:     Size  Location     Type
 22700 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 22701 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 22702 ;;  RDIV            4   18[BANK0 ] unsigned long 
 22703 ;; Return value:  Size  Location     Type
 22704 ;;                  1    wreg      void 
 22705 ;; Registers used:
 22706 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22707 ;; Tracked objects:
 22708 ;;		On entry : 0/0
 22709 ;;		On exit  : 0/0
 22710 ;;		Unchanged: 0/0
 22711 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22712 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22713 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22714 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22715 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22716 ;;Total ram usage:       17 bytes
 22717 ;; Hardware stack levels used:    1
 22718 ;; Hardware stack levels required when called:    8
 22719 ;; This function calls:
 22720 ;;		_Timer2_Clear
 22721 ;;		___lldiv
 22722 ;; This function is called by:
 22723 ;;		_SPI_Init
 22724 ;; This function uses a non-reentrant model
 22725 ;;
 22726                           
 22727                           	psect	text112
 22728  012F2E                     __ptext112:
 22729                           	opt stack 0
 22730  012F2E                     _Timer2_Init:
 22731                           	opt stack 18
 22732                           
 22733                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 22734                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 22735                           ;Timer2.c: 14: static UINT8 PRE = 0;
 22736                           ;Timer2.c: 15: static UINT32 DIV = 0;
 22737                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 22738                           
 22739                           ;incstack = 0
 22740  012F2E  0E00               	movlw	0
 22741  012F30  0100               	movlb	0	; () banked
 22742  012F32  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 22743  012F34  0E6C               	movlw	108
 22744  012F36  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 22745  012F38  0EDC               	movlw	220
 22746  012F3A  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 22747  012F3C  0E02               	movlw	2
 22748  012F3E  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 22749                           
 22750                           ; BSR set to: 0
 22751                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 22752                           ;Timer2.c: 20: pFrequency *= 2;
 22753  012F40  0100               	movlb	0	; () banked
 22754  012F42  90D8               	bcf	status,0,c
 22755  012F44  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 22756  012F46  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 22757  012F48  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 22758  012F4A  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 22759                           
 22760                           ; BSR set to: 0
 22761                           ;Timer2.c: 23: pCPUClock /= 4;
 22762  012F4C  0E02               	movlw	2
 22763  012F4E  0100               	movlb	0	; () banked
 22764  012F50  6FCB               	movwf	??_Timer2_Init& (0+255),b
 22765  012F52                     u8895:
 22766  012F52  90D8               	bcf	status,0,c
 22767  012F54  0100               	movlb	0	; () banked
 22768  012F56  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 22769  012F58  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 22770  012F5A  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 22771  012F5C  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 22772  012F5E  0100               	movlb	0	; () banked
 22773  012F60  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 22774  012F62  D7F7               	goto	u8895
 22775                           
 22776                           ; BSR set to: 0
 22777                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 22778  012F64  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 22779  012F68  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 22780  012F6C  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 22781  012F70  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 22782  012F74  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 22783  012F78  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 22784  012F7C  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 22785  012F80  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 22786  012F84  ECE9  F09E         	call	___lldiv	;wreg free
 22787  012F88  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 22788  012F8C  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 22789  012F90  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 22790  012F94  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 22791                           
 22792                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 22793  012F98  D010               	goto	l1828
 22794  012F9A                     l12275:
 22795                           
 22796                           ;Timer2.c: 28: {
 22797                           ;Timer2.c: 29: RDIV = 0;
 22798  012F9A  0E00               	movlw	0
 22799  012F9C  0100               	movlb	0	; () banked
 22800  012F9E  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 22801  012FA0  0E00               	movlw	0
 22802  012FA2  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 22803  012FA4  0E00               	movlw	0
 22804  012FA6  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 22805  012FA8  0E00               	movlw	0
 22806  012FAA  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 22807                           
 22808                           ; BSR set to: 0
 22809                           ;Timer2.c: 30: INDEX ++;
 22810  012FAC  0100               	movlb	0	; () banked
 22811  012FAE  2B91               	incf	Timer2_Init@INDEX& (0+255),f,b
 22812                           
 22813                           ; BSR set to: 0
 22814                           ;Timer2.c: 31: if (INDEX >= 3)
 22815  012FB0  0E02               	movlw	2
 22816  012FB2  0100               	movlb	0	; () banked
 22817  012FB4  6591               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 22818  012FB6  D001               	goto	l1828
 22819  012FB8  D026               	goto	u8910
 22820  012FBA                     l1828:
 22821                           
 22822                           ; BSR set to: 0
 22823                           
 22824                           ; BSR set to: 0
 22825  012FBA  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 22826  012FBE  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 22827  012FC2  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 22828  012FC6  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 22829  012FCA  0100               	movlb	0	; () banked
 22830  012FCC  5191               	movf	Timer2_Init@INDEX& (0+255),w,b
 22831  012FCE  0D01               	mullw	1
 22832  012FD0  0ECE               	movlw	low Timer2_Init@PRESCALE
 22833  012FD2  24F3               	addwf	prodl,w,c
 22834  012FD4  6EF6               	movwf	tblptrl,c
 22835  012FD6  0EFD               	movlw	high Timer2_Init@PRESCALE
 22836  012FD8  20F4               	addwfc	prodh,w,c
 22837  012FDA  6EF7               	movwf	tblptrh,c
 22838  012FDC                     	if	1	;There are 3 active tblptr bytes
 22839  012FDC  6AF8               	clrf	tblptru,c
 22840  012FDE  0E00               	movlw	low (__mediumconst shr (0+16))
 22841  012FE0  22F8               	addwfc	tblptru,f,c
 22842  012FE2                     	endif
 22843  012FE2  0008               	tblrd		*
 22844  012FE4  50F5               	movf	tablat,w,c
 22845  012FE6  0100               	movlb	0	; () banked
 22846  012FE8  6FBE               	movwf	___lldiv@divisor& (0+255),b
 22847  012FEA  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 22848  012FEC  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 22849  012FEE  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 22850  012FF0  ECE9  F09E         	call	___lldiv	;wreg free
 22851  012FF4  0100               	movlb	0	; () banked
 22852  012FF6  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 22853  012FF8  0100               	movlb	0	; () banked
 22854  012FFA  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 22855  012FFC  E1CE               	bnz	l12275
 22856  012FFE  0100               	movlb	0	; () banked
 22857  013000  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 22858  013002  B0D8               	btfsc	status,0,c
 22859  013004  D7CA               	goto	l1827
 22860  013006                     u8910:
 22861                           
 22862                           ; BSR set to: 0
 22863                           ;Timer2.c: 33: }
 22864                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 22865                           
 22866                           ; BSR set to: 0
 22867  013006  50CA               	movf	4042,w,c	;volatile
 22868  013008  0100               	movlb	0	; () banked
 22869  01300A  1991               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22870  01300C  0BFC               	andlw	-4
 22871  01300E  1991               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 22872  013010  6ECA               	movwf	4042,c	;volatile
 22873                           
 22874                           ; BSR set to: 0
 22875                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 22876  013012  84CA               	bsf	4042,2,c	;volatile
 22877                           
 22878                           ; BSR set to: 0
 22879                           ;Timer2.c: 44: Timer2_Clear();
 22880  013014  ECB4  F0B0         	call	_Timer2_Clear	;wreg free
 22881                           
 22882                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 22883  013018  0100               	movlb	0	; () banked
 22884  01301A  5191               	movf	Timer2_Init@INDEX& (0+255),w,b
 22885  01301C  0D01               	mullw	1
 22886  01301E  0ECE               	movlw	low Timer2_Init@PRESCALE
 22887  013020  24F3               	addwf	prodl,w,c
 22888  013022  6EF6               	movwf	tblptrl,c
 22889  013024  0EFD               	movlw	high Timer2_Init@PRESCALE
 22890  013026  20F4               	addwfc	prodh,w,c
 22891  013028  6EF7               	movwf	tblptrh,c
 22892  01302A                     	if	1	;There are 3 active tblptr bytes
 22893  01302A  6AF8               	clrf	tblptru,c
 22894  01302C  0E00               	movlw	low (__mediumconst shr (0+16))
 22895  01302E  22F8               	addwfc	tblptru,f,c
 22896  013030                     	endif
 22897  013030  0008               	tblrd		*
 22898  013032  CFF5 F090          	movff	tablat,Timer2_Init@PRE
 22899                           
 22900                           ; BSR set to: 0
 22901                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 22902  013036  0EFF               	movlw	255
 22903  013038  0100               	movlb	0	; () banked
 22904  01303A  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 22905  01303C  0103               	movlb	3	; () banked
 22906  01303E  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 22907  013040  0EFF               	movlw	255
 22908  013042  0100               	movlb	0	; () banked
 22909  013044  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 22910  013046  0103               	movlb	3	; () banked
 22911  013048  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 22912  01304A  0EFF               	movlw	255
 22913  01304C  0100               	movlb	0	; () banked
 22914  01304E  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 22915  013050  0103               	movlb	3	; () banked
 22916  013052  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 22917  013054  0EFF               	movlw	255
 22918  013056  0100               	movlb	0	; () banked
 22919  013058  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 22920  01305A  0103               	movlb	3	; () banked
 22921  01305C  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 22922                           
 22923                           ; BSR set to: 3
 22924                           ;Timer2.c: 48: INDEX = DIV/PRE;
 22925  01305E  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 22926  013062  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 22927  013066  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 22928  01306A  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 22929  01306E  0100               	movlb	0	; () banked
 22930  013070  5190               	movf	Timer2_Init@PRE& (0+255),w,b
 22931  013072  0100               	movlb	0	; () banked
 22932  013074  6FBE               	movwf	___lldiv@divisor& (0+255),b
 22933  013076  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 22934  013078  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 22935  01307A  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 22936  01307C  ECE9  F09E         	call	___lldiv	;wreg free
 22937  013080  0100               	movlb	0	; () banked
 22938  013082  51BA               	movf	?___lldiv& (0+255),w,b
 22939  013084  0100               	movlb	0	; () banked
 22940  013086  6F91               	movwf	Timer2_Init@INDEX& (0+255),b
 22941                           
 22942                           ; BSR set to: 0
 22943                           ;Timer2.c: 49: PR2 = INDEX;
 22944  013088  C091  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 22945                           
 22946                           ; BSR set to: 0
 22947  01308C  0012               	return		;funcret
 22948  01308E                     __end_of_Timer2_Init:
 22949                           	opt stack 0
 22950                           tosu	equ	0xFFF
 22951                           tosh	equ	0xFFE
 22952                           tosl	equ	0xFFD
 22953                           pclath	equ	0xFFA
 22954                           tblptru	equ	0xFF8
 22955                           tblptrh	equ	0xFF7
 22956                           tblptrl	equ	0xFF6
 22957                           tablat	equ	0xFF5
 22958                           prodh	equ	0xFF4
 22959                           prodl	equ	0xFF3
 22960                           intcon	equ	0xFF2
 22961                           postinc0	equ	0xFEE
 22962                           wreg	equ	0xFE8
 22963                           indf1	equ	0xFE7
 22964                           postdec1	equ	0xFE5
 22965                           fsr1h	equ	0xFE2
 22966                           fsr1l	equ	0xFE1
 22967                           indf2	equ	0xFDF
 22968                           postinc2	equ	0xFDE
 22969                           postdec2	equ	0xFDD
 22970                           plusw2	equ	0xFDB
 22971                           fsr2h	equ	0xFDA
 22972                           fsr2l	equ	0xFD9
 22973                           status	equ	0xFD8
 22974                           
 22975 ;; *************** function ___lldiv *****************
 22976 ;; Defined at:
 22977 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 22978 ;; Parameters:    Size  Location     Type
 22979 ;;  dividend        4    0[BANK0 ] unsigned long 
 22980 ;;  divisor         4    4[BANK0 ] unsigned long 
 22981 ;; Auto vars:     Size  Location     Type
 22982 ;;  quotient        4    8[BANK0 ] unsigned long 
 22983 ;;  counter         1   12[BANK0 ] unsigned char 
 22984 ;; Return value:  Size  Location     Type
 22985 ;;                  4    0[BANK0 ] unsigned long 
 22986 ;; Registers used:
 22987 ;;		wreg, status,2, status,0
 22988 ;; Tracked objects:
 22989 ;;		On entry : 0/0
 22990 ;;		On exit  : 0/0
 22991 ;;		Unchanged: 0/0
 22992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22993 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22994 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22995 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22996 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22997 ;;Total ram usage:       13 bytes
 22998 ;; Hardware stack levels used:    1
 22999 ;; Hardware stack levels required when called:    7
 23000 ;; This function calls:
 23001 ;;		Nothing
 23002 ;; This function is called by:
 23003 ;;		_Timer0_Init
 23004 ;;		_Timer2_Init
 23005 ;;		_rand_between
 23006 ;;		_I2C_Init
 23007 ;; This function uses a non-reentrant model
 23008 ;;
 23009                           
 23010                           	psect	text113
 23011  013DD2                     __ptext113:
 23012                           	opt stack 0
 23013  013DD2                     ___lldiv:
 23014                           	opt stack 20
 23015                           
 23016                           ; BSR set to: 0
 23017                           ;incstack = 0
 23018  013DD2  0E00               	movlw	0
 23019  013DD4  0100               	movlb	0	; () banked
 23020  013DD6  6FC2               	movwf	___lldiv@quotient& (0+255),b
 23021  013DD8  0E00               	movlw	0
 23022  013DDA  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 23023  013DDC  0E00               	movlw	0
 23024  013DDE  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 23025  013DE0  0E00               	movlw	0
 23026  013DE2  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 23027                           
 23028                           ; BSR set to: 0
 23029  013DE4  0100               	movlb	0	; () banked
 23030  013DE6  51BE               	movf	___lldiv@divisor& (0+255),w,b
 23031  013DE8  0100               	movlb	0	; () banked
 23032  013DEA  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 23033  013DEC  0100               	movlb	0	; () banked
 23034  013DEE  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 23035  013DF0  0100               	movlb	0	; () banked
 23036  013DF2  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 23037  013DF4  B4D8               	btfsc	status,2,c
 23038  013DF6  D042               	goto	l2765
 23039                           
 23040                           ; BSR set to: 0
 23041  013DF8  0E01               	movlw	1
 23042  013DFA  0100               	movlb	0	; () banked
 23043  013DFC  6FC6               	movwf	___lldiv@counter& (0+255),b
 23044  013DFE  D008               	goto	l2760
 23045  013E00                     
 23046                           ; BSR set to: 0
 23047                           
 23048                           ; BSR set to: 0
 23049  013E00  0100               	movlb	0	; () banked
 23050  013E02  90D8               	bcf	status,0,c
 23051  013E04  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 23052  013E06  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 23053  013E08  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 23054  013E0A  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 23055  013E0C  0100               	movlb	0	; () banked
 23056  013E0E  2BC6               	incf	___lldiv@counter& (0+255),f,b
 23057  013E10                     l2760:
 23058                           
 23059                           ; BSR set to: 0
 23060                           
 23061                           ; BSR set to: 0
 23062  013E10  0100               	movlb	0	; () banked
 23063  013E12  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 23064  013E14  D7F5               	goto	l2761
 23065  013E16                     u8760:
 23066                           
 23067                           ; BSR set to: 0
 23068                           
 23069                           ; BSR set to: 0
 23070                           
 23071                           ; BSR set to: 0
 23072  013E16  0100               	movlb	0	; () banked
 23073  013E18  90D8               	bcf	status,0,c
 23074  013E1A  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 23075  013E1C  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 23076  013E1E  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 23077  013E20  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 23078                           
 23079                           ; BSR set to: 0
 23080  013E22  0100               	movlb	0	; () banked
 23081  013E24  51BE               	movf	___lldiv@divisor& (0+255),w,b
 23082  013E26  0100               	movlb	0	; () banked
 23083  013E28  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 23084  013E2A  0100               	movlb	0	; () banked
 23085  013E2C  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23086  013E2E  0100               	movlb	0	; () banked
 23087  013E30  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 23088  013E32  0100               	movlb	0	; () banked
 23089  013E34  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23090  013E36  0100               	movlb	0	; () banked
 23091  013E38  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 23092  013E3A  0100               	movlb	0	; () banked
 23093  013E3C  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23094  013E3E  0100               	movlb	0	; () banked
 23095  013E40  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 23096  013E42  A0D8               	btfss	status,0,c
 23097  013E44  D012               	goto	l2764
 23098                           
 23099                           ; BSR set to: 0
 23100  013E46  0100               	movlb	0	; () banked
 23101  013E48  51BE               	movf	___lldiv@divisor& (0+255),w,b
 23102  013E4A  0100               	movlb	0	; () banked
 23103  013E4C  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 23104  013E4E  0100               	movlb	0	; () banked
 23105  013E50  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 23106  013E52  0100               	movlb	0	; () banked
 23107  013E54  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 23108  013E56  0100               	movlb	0	; () banked
 23109  013E58  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 23110  013E5A  0100               	movlb	0	; () banked
 23111  013E5C  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 23112  013E5E  0100               	movlb	0	; () banked
 23113  013E60  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 23114  013E62  0100               	movlb	0	; () banked
 23115  013E64  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 23116                           
 23117                           ; BSR set to: 0
 23118  013E66  0100               	movlb	0	; () banked
 23119  013E68  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 23120  013E6A                     l2764:
 23121                           
 23122                           ; BSR set to: 0
 23123                           
 23124                           ; BSR set to: 0
 23125  013E6A  0100               	movlb	0	; () banked
 23126  013E6C  90D8               	bcf	status,0,c
 23127  013E6E  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 23128  013E70  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 23129  013E72  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 23130  013E74  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 23131                           
 23132                           ; BSR set to: 0
 23133  013E76  0100               	movlb	0	; () banked
 23134  013E78  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 23135  013E7A  D7CD               	goto	u8760
 23136  013E7C                     l2765:
 23137                           
 23138                           ; BSR set to: 0
 23139                           
 23140                           ; BSR set to: 0
 23141  013E7C  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 23142  013E80  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 23143  013E84  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 23144  013E88  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 23145                           
 23146                           ; BSR set to: 0
 23147  013E8C  0012               	return		;funcret
 23148  013E8E                     __end_of___lldiv:
 23149                           	opt stack 0
 23150                           tosu	equ	0xFFF
 23151                           tosh	equ	0xFFE
 23152                           tosl	equ	0xFFD
 23153                           pclath	equ	0xFFA
 23154                           tblptru	equ	0xFF8
 23155                           tblptrh	equ	0xFF7
 23156                           tblptrl	equ	0xFF6
 23157                           tablat	equ	0xFF5
 23158                           prodh	equ	0xFF4
 23159                           prodl	equ	0xFF3
 23160                           intcon	equ	0xFF2
 23161                           postinc0	equ	0xFEE
 23162                           wreg	equ	0xFE8
 23163                           indf1	equ	0xFE7
 23164                           postdec1	equ	0xFE5
 23165                           fsr1h	equ	0xFE2
 23166                           fsr1l	equ	0xFE1
 23167                           indf2	equ	0xFDF
 23168                           postinc2	equ	0xFDE
 23169                           postdec2	equ	0xFDD
 23170                           plusw2	equ	0xFDB
 23171                           fsr2h	equ	0xFDA
 23172                           fsr2l	equ	0xFD9
 23173                           status	equ	0xFD8
 23174                           
 23175 ;; *************** function _Timer2_Clear *****************
 23176 ;; Defined at:
 23177 ;;		line 3 in file "Library/Timer2.c"
 23178 ;; Parameters:    Size  Location     Type
 23179 ;;		None
 23180 ;; Auto vars:     Size  Location     Type
 23181 ;;		None
 23182 ;; Return value:  Size  Location     Type
 23183 ;;                  1    wreg      void 
 23184 ;; Registers used:
 23185 ;;		None
 23186 ;; Tracked objects:
 23187 ;;		On entry : 0/0
 23188 ;;		On exit  : 0/0
 23189 ;;		Unchanged: 0/0
 23190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23191 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23192 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23193 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23194 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23195 ;;Total ram usage:        0 bytes
 23196 ;; Hardware stack levels used:    1
 23197 ;; Hardware stack levels required when called:    7
 23198 ;; This function calls:
 23199 ;;		Nothing
 23200 ;; This function is called by:
 23201 ;;		_Timer2_Init
 23202 ;; This function uses a non-reentrant model
 23203 ;;
 23204                           
 23205                           	psect	text114
 23206  016168                     __ptext114:
 23207                           	opt stack 0
 23208  016168                     _Timer2_Clear:
 23209                           	opt stack 18
 23210                           
 23211                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 23212                           
 23213                           ; BSR set to: 0
 23214                           ;incstack = 0
 23215  016168  929E               	bcf	3998,1,c	;volatile
 23216                           
 23217                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 23218  01616A  929D               	bcf	3997,1,c	;volatile
 23219                           
 23220                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 23221  01616C  929F               	bcf	3999,1,c	;volatile
 23222  01616E  0012               	return		;funcret
 23223  016170                     __end_of_Timer2_Clear:
 23224                           	opt stack 0
 23225                           tosu	equ	0xFFF
 23226                           tosh	equ	0xFFE
 23227                           tosl	equ	0xFFD
 23228                           pclath	equ	0xFFA
 23229                           tblptru	equ	0xFF8
 23230                           tblptrh	equ	0xFF7
 23231                           tblptrl	equ	0xFF6
 23232                           tablat	equ	0xFF5
 23233                           prodh	equ	0xFF4
 23234                           prodl	equ	0xFF3
 23235                           intcon	equ	0xFF2
 23236                           postinc0	equ	0xFEE
 23237                           wreg	equ	0xFE8
 23238                           indf1	equ	0xFE7
 23239                           postdec1	equ	0xFE5
 23240                           fsr1h	equ	0xFE2
 23241                           fsr1l	equ	0xFE1
 23242                           indf2	equ	0xFDF
 23243                           postinc2	equ	0xFDE
 23244                           postdec2	equ	0xFDD
 23245                           plusw2	equ	0xFDB
 23246                           fsr2h	equ	0xFDA
 23247                           fsr2l	equ	0xFD9
 23248                           status	equ	0xFD8
 23249                           
 23250 ;; *************** function _SPI_DisableISR *****************
 23251 ;; Defined at:
 23252 ;;		line 181 in file "Library/SPI.c"
 23253 ;; Parameters:    Size  Location     Type
 23254 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23255 ;;		 -> SPI1(11), SPI2(11), 
 23256 ;; Auto vars:     Size  Location     Type
 23257 ;;		None
 23258 ;; Return value:  Size  Location     Type
 23259 ;;                  1    wreg      void 
 23260 ;; Registers used:
 23261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23262 ;; Tracked objects:
 23263 ;;		On entry : 0/0
 23264 ;;		On exit  : 0/0
 23265 ;;		Unchanged: 0/0
 23266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23267 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23268 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23269 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23270 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23271 ;;Total ram usage:        2 bytes
 23272 ;; Hardware stack levels used:    1
 23273 ;; Hardware stack levels required when called:    7
 23274 ;; This function calls:
 23275 ;;		Nothing
 23276 ;; This function is called by:
 23277 ;;		_SPI_Init
 23278 ;; This function uses a non-reentrant model
 23279 ;;
 23280                           
 23281                           	psect	text115
 23282  015D6E                     __ptext115:
 23283                           	opt stack 0
 23284  015D6E                     _SPI_DisableISR:
 23285                           	opt stack 19
 23286                           
 23287                           ;SPI.c: 183: switch (pInput->mChannel)
 23288                           
 23289                           ;incstack = 0
 23290  015D6E  D004               	goto	l654
 23291  015D70                     l655:
 23292                           
 23293                           ; BSR set to: 0
 23294  015D70  969D               	bcf	3997,3,c	;volatile
 23295  015D72  0012               	return	
 23296  015D74                     l657:
 23297                           
 23298                           ; BSR set to: 0
 23299  015D74  9EA3               	bcf	4003,7,c	;volatile
 23300                           
 23301                           ; BSR set to: 0
 23302                           ;SPI.c: 188: };
 23303                           
 23304                           ; BSR set to: 0
 23305                           
 23306                           ;SPI.c: 187: default: return;
 23307  015D76  0012               	return	
 23308  015D78                     l654:
 23309                           
 23310                           ; BSR set to: 0
 23311  015D78  0100               	movlb	0	; () banked
 23312  015D7A  EE20 F002          	lfsr	2,2
 23313  015D7E  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 23314  015D80  26D9               	addwf	fsr2l,f,c
 23315  015D82  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 23316  015D84  22DA               	addwfc	fsr2h,f,c
 23317  015D86  50DF               	movf	indf2,w,c
 23318                           
 23319                           ; Switch size 1, requested type "space"
 23320                           ; Number of cases is 2, Range of values is 0 to 1
 23321                           ; switch strategies available:
 23322                           ; Name         Instructions Cycles
 23323                           ; simple_byte            7     4 (average)
 23324                           ;	Chosen strategy is simple_byte
 23325  015D88  0A00               	xorlw	0	; case 0
 23326  015D8A  B4D8               	btfsc	status,2,c
 23327  015D8C  D7F1               	goto	l655
 23328  015D8E  0A01               	xorlw	1	; case 1
 23329  015D90  A4D8               	btfss	status,2,c
 23330  015D92  0012               	return	
 23331  015D94  D7EF               	goto	l657
 23332  015D96                     __end_of_SPI_DisableISR:
 23333                           	opt stack 0
 23334                           tosu	equ	0xFFF
 23335                           tosh	equ	0xFFE
 23336                           tosl	equ	0xFFD
 23337                           pclath	equ	0xFFA
 23338                           tblptru	equ	0xFF8
 23339                           tblptrh	equ	0xFF7
 23340                           tblptrl	equ	0xFF6
 23341                           tablat	equ	0xFF5
 23342                           prodh	equ	0xFF4
 23343                           prodl	equ	0xFF3
 23344                           intcon	equ	0xFF2
 23345                           postinc0	equ	0xFEE
 23346                           wreg	equ	0xFE8
 23347                           indf1	equ	0xFE7
 23348                           postdec1	equ	0xFE5
 23349                           fsr1h	equ	0xFE2
 23350                           fsr1l	equ	0xFE1
 23351                           indf2	equ	0xFDF
 23352                           postinc2	equ	0xFDE
 23353                           postdec2	equ	0xFDD
 23354                           plusw2	equ	0xFDB
 23355                           fsr2h	equ	0xFDA
 23356                           fsr2l	equ	0xFD9
 23357                           status	equ	0xFD8
 23358                           
 23359 ;; *************** function _SPI_DCS *****************
 23360 ;; Defined at:
 23361 ;;		line 219 in file "Library/SPI.c"
 23362 ;; Parameters:    Size  Location     Type
 23363 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 23364 ;;		 -> SPI1(11), SPI2(11), 
 23365 ;; Auto vars:     Size  Location     Type
 23366 ;;		None
 23367 ;; Return value:  Size  Location     Type
 23368 ;;                  1    wreg      void 
 23369 ;; Registers used:
 23370 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23371 ;; Tracked objects:
 23372 ;;		On entry : 0/0
 23373 ;;		On exit  : 0/0
 23374 ;;		Unchanged: 0/0
 23375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23380 ;;Total ram usage:        2 bytes
 23381 ;; Hardware stack levels used:    1
 23382 ;; Hardware stack levels required when called:    7
 23383 ;; This function calls:
 23384 ;;		Nothing
 23385 ;; This function is called by:
 23386 ;;		_SPI_Init
 23387 ;; This function uses a non-reentrant model
 23388 ;;
 23389                           
 23390                           	psect	text116
 23391  015C5E                     __ptext116:
 23392                           	opt stack 0
 23393  015C5E                     _SPI_DCS:
 23394                           	opt stack 19
 23395                           
 23396                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 23397                           
 23398                           ; BSR set to: 0
 23399                           ;incstack = 0
 23400  015C5E  0100               	movlb	0	; () banked
 23401  015C60  EE20 F002          	lfsr	2,2
 23402  015C64  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 23403  015C66  26D9               	addwf	fsr2l,f,c
 23404  015C68  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 23405  015C6A  22DA               	addwfc	fsr2h,f,c
 23406  015C6C  50DF               	movf	indf2,w,c
 23407  015C6E  A4D8               	btfss	status,2,c
 23408  015C70  D007               	goto	l673
 23409                           
 23410                           ; BSR set to: 0
 23411                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 23412  015C72  C0AF  FFD9         	movff	_PortC+4,fsr2l
 23413  015C76  C0B0  FFDA         	movff	_PortC+5,fsr2h
 23414  015C7A  0100               	movlb	0	; () banked
 23415  015C7C  84DF               	bsf	indf2,2,c
 23416  015C7E  0012               	return	
 23417  015C80                     l673:
 23418                           
 23419                           ; BSR set to: 0
 23420                           ;SPI.c: 223: else
 23421                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 23422                           
 23423                           ; BSR set to: 0
 23424  015C80  C0A5  FFD9         	movff	_PortD+4,fsr2l
 23425  015C84  C0A6  FFDA         	movff	_PortD+5,fsr2h
 23426  015C88  0100               	movlb	0	; () banked
 23427  015C8A  8EDF               	bsf	indf2,7,c
 23428  015C8C  0012               	return	
 23429  015C8E                     __end_of_SPI_DCS:
 23430                           	opt stack 0
 23431                           tosu	equ	0xFFF
 23432                           tosh	equ	0xFFE
 23433                           tosl	equ	0xFFD
 23434                           pclath	equ	0xFFA
 23435                           tblptru	equ	0xFF8
 23436                           tblptrh	equ	0xFF7
 23437                           tblptrl	equ	0xFF6
 23438                           tablat	equ	0xFF5
 23439                           prodh	equ	0xFF4
 23440                           prodl	equ	0xFF3
 23441                           intcon	equ	0xFF2
 23442                           postinc0	equ	0xFEE
 23443                           wreg	equ	0xFE8
 23444                           indf1	equ	0xFE7
 23445                           postdec1	equ	0xFE5
 23446                           fsr1h	equ	0xFE2
 23447                           fsr1l	equ	0xFE1
 23448                           indf2	equ	0xFDF
 23449                           postinc2	equ	0xFDE
 23450                           postdec2	equ	0xFDD
 23451                           plusw2	equ	0xFDB
 23452                           fsr2h	equ	0xFDA
 23453                           fsr2l	equ	0xFD9
 23454                           status	equ	0xFD8
 23455                           
 23456 ;; *************** function _Button_Init *****************
 23457 ;; Defined at:
 23458 ;;		line 18 in file "Library/Button.c"
 23459 ;; Parameters:    Size  Location     Type
 23460 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 23461 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 23462 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 23463 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 23464 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 23465 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 23466 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 23467 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 23468 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 23469 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 23470 ;; Auto vars:     Size  Location     Type
 23471 ;;		None
 23472 ;; Return value:  Size  Location     Type
 23473 ;;                  1    wreg      void 
 23474 ;; Registers used:
 23475 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23476 ;; Tracked objects:
 23477 ;;		On entry : 0/0
 23478 ;;		On exit  : 0/0
 23479 ;;		Unchanged: 0/0
 23480 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23481 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23482 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23483 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23484 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23485 ;;Total ram usage:       13 bytes
 23486 ;; Hardware stack levels used:    1
 23487 ;; Hardware stack levels required when called:   15
 23488 ;; This function calls:
 23489 ;;		_HMI_InitButtons
 23490 ;;		_MXK_InitDIPSwitch
 23491 ;;		_MXK_InitTestButton
 23492 ;; This function is called by:
 23493 ;;		_HMI_Init
 23494 ;;		_FunctInitButton
 23495 ;; This function uses a non-reentrant model
 23496 ;;
 23497                           
 23498                           	psect	text117
 23499  0139EA                     __ptext117:
 23500                           	opt stack 0
 23501  0139EA                     _Button_Init:
 23502                           	opt stack 13
 23503                           
 23504                           ;Button.c: 21: if(pInput==(void*)0)
 23505                           
 23506                           ; BSR set to: 0
 23507                           ;incstack = 0
 23508  0139EA  0101               	movlb	1	; () banked
 23509  0139EC  5100               	movf	Button_Init@pInput& (0+255),w,b
 23510  0139EE  0101               	movlb	1	; () banked
 23511  0139F0  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 23512  0139F2  B4D8               	btfsc	status,2,c
 23513  0139F4  0012               	return	
 23514                           
 23515                           ; BSR set to: 1
 23516                           ;Button.c: 23: if(pInitIO==(void*)0)
 23517                           
 23518                           ; BSR set to: 1
 23519                           
 23520                           ; BSR set to: 1
 23521                           ;Button.c: 22: return;
 23522  0139F6  0101               	movlb	1	; () banked
 23523  0139F8  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23524  0139FA  0101               	movlb	1	; () banked
 23525  0139FC  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 23526  0139FE  0101               	movlb	1	; () banked
 23527  013A00  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 23528  013A02  B4D8               	btfsc	status,2,c
 23529  013A04  0012               	return	
 23530                           
 23531                           ; BSR set to: 1
 23532                           ;Button.c: 25: if(pGetState==(void*)0)
 23533                           
 23534                           ; BSR set to: 1
 23535                           
 23536                           ; BSR set to: 1
 23537                           ;Button.c: 24: return;
 23538  013A06  0101               	movlb	1	; () banked
 23539  013A08  5107               	movf	Button_Init@pGetState& (0+255),w,b
 23540  013A0A  0101               	movlb	1	; () banked
 23541  013A0C  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 23542  013A0E  0101               	movlb	1	; () banked
 23543  013A10  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 23544  013A12  B4D8               	btfsc	status,2,c
 23545  013A14  0012               	return	
 23546                           
 23547                           ; BSR set to: 1
 23548                           ;Button.c: 27: if(pFunction==(void*)0)
 23549                           
 23550                           ; BSR set to: 1
 23551                           
 23552                           ; BSR set to: 1
 23553                           ;Button.c: 26: return;
 23554  013A16  0101               	movlb	1	; () banked
 23555  013A18  510A               	movf	Button_Init@pFunction& (0+255),w,b
 23556  013A1A  0101               	movlb	1	; () banked
 23557  013A1C  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 23558  013A1E  0101               	movlb	1	; () banked
 23559  013A20  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 23560  013A22  B4D8               	btfsc	status,2,c
 23561  013A24  0012               	return	
 23562                           
 23563                           ; BSR set to: 1
 23564                           ;Button.c: 30: if(pThreshold == 0)
 23565                           
 23566                           ; BSR set to: 1
 23567                           
 23568                           ; BSR set to: 1
 23569                           ;Button.c: 28: return;
 23570  013A26  0101               	movlb	1	; () banked
 23571  013A28  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 23572  013A2A  0101               	movlb	1	; () banked
 23573  013A2C  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 23574  013A2E  A4D8               	btfss	status,2,c
 23575  013A30  D005               	goto	l8
 23576                           
 23577                           ; BSR set to: 1
 23578                           ;Button.c: 31: pThreshold = 1;
 23579  013A32  0E00               	movlw	0
 23580  013A34  0101               	movlb	1	; () banked
 23581  013A36  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 23582  013A38  0E01               	movlw	1
 23583  013A3A  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 23584  013A3C                     l8:
 23585                           
 23586                           ; BSR set to: 1
 23587                           ;Button.c: 34: pInput->mState = 0;
 23588                           
 23589                           ; BSR set to: 1
 23590  013A3C  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 23591  013A40  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 23592  013A44  0E00               	movlw	0
 23593  013A46  6EDF               	movwf	indf2,c
 23594                           
 23595                           ; BSR set to: 1
 23596                           ;Button.c: 35: pInput->mCount = 0;
 23597  013A48  0101               	movlb	1	; () banked
 23598  013A4A  EE20 F001          	lfsr	2,1
 23599  013A4E  5100               	movf	Button_Init@pInput& (0+255),w,b
 23600  013A50  26D9               	addwf	fsr2l,f,c
 23601  013A52  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23602  013A54  22DA               	addwfc	fsr2h,f,c
 23603  013A56  0E00               	movlw	0
 23604  013A58  6EDF               	movwf	indf2,c
 23605                           
 23606                           ; BSR set to: 1
 23607                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 23608  013A5A  0101               	movlb	1	; () banked
 23609  013A5C  EE20 F002          	lfsr	2,2
 23610  013A60  5100               	movf	Button_Init@pInput& (0+255),w,b
 23611  013A62  26D9               	addwf	fsr2l,f,c
 23612  013A64  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23613  013A66  22DA               	addwfc	fsr2h,f,c
 23614  013A68  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 23615  013A6C  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 23616                           
 23617                           ; BSR set to: 1
 23618                           ;Button.c: 37: pInput->mFunction = pFunction;
 23619  013A70  0101               	movlb	1	; () banked
 23620  013A72  EE20 F004          	lfsr	2,4
 23621  013A76  5100               	movf	Button_Init@pInput& (0+255),w,b
 23622  013A78  26D9               	addwf	fsr2l,f,c
 23623  013A7A  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23624  013A7C  22DA               	addwfc	fsr2h,f,c
 23625  013A7E  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 23626  013A82  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 23627  013A86  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 23628                           
 23629                           ; BSR set to: 1
 23630                           ;Button.c: 38: pInput->mGetState = pGetState;
 23631  013A8A  0101               	movlb	1	; () banked
 23632  013A8C  EE20 F007          	lfsr	2,7
 23633  013A90  5100               	movf	Button_Init@pInput& (0+255),w,b
 23634  013A92  26D9               	addwf	fsr2l,f,c
 23635  013A94  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 23636  013A96  22DA               	addwfc	fsr2h,f,c
 23637  013A98  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 23638  013A9C  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 23639  013AA0  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 23640                           
 23641                           ; BSR set to: 1
 23642                           ;Button.c: 41: pInitIO();
 23643  013AA4  D801               	call	u9378
 23644  013AA6  0012               	return	
 23645  013AA8                     u9378:
 23646  013AA8  0005               	push	
 23647  013AAA  6EFA               	movwf	pclath,c
 23648  013AAC  0101               	movlb	1	; () banked
 23649  013AAE  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 23650  013AB0  6EFD               	movwf	tosl,c
 23651  013AB2  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 23652  013AB4  6EFE               	movwf	tosh,c
 23653  013AB6  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 23654  013AB8  6EFF               	movwf	tosu,c
 23655  013ABA  50FA               	movf	pclath,w,c
 23656  013ABC  0012               	return		;indir
 23657  013ABE                     __end_of_Button_Init:
 23658                           	opt stack 0
 23659                           tosu	equ	0xFFF
 23660                           tosh	equ	0xFFE
 23661                           tosl	equ	0xFFD
 23662                           pclath	equ	0xFFA
 23663                           tblptru	equ	0xFF8
 23664                           tblptrh	equ	0xFF7
 23665                           tblptrl	equ	0xFF6
 23666                           tablat	equ	0xFF5
 23667                           prodh	equ	0xFF4
 23668                           prodl	equ	0xFF3
 23669                           intcon	equ	0xFF2
 23670                           postinc0	equ	0xFEE
 23671                           wreg	equ	0xFE8
 23672                           indf1	equ	0xFE7
 23673                           postdec1	equ	0xFE5
 23674                           fsr1h	equ	0xFE2
 23675                           fsr1l	equ	0xFE1
 23676                           indf2	equ	0xFDF
 23677                           postinc2	equ	0xFDE
 23678                           postdec2	equ	0xFDD
 23679                           plusw2	equ	0xFDB
 23680                           fsr2h	equ	0xFDA
 23681                           fsr2l	equ	0xFD9
 23682                           status	equ	0xFD8
 23683                           
 23684 ;; *************** function _MXK_InitDIPSwitch *****************
 23685 ;; Defined at:
 23686 ;;		line 20 in file "Library/MXK.c"
 23687 ;; Parameters:    Size  Location     Type
 23688 ;;		None
 23689 ;; Auto vars:     Size  Location     Type
 23690 ;;		None
 23691 ;; Return value:  Size  Location     Type
 23692 ;;                  1    wreg      void 
 23693 ;; Registers used:
 23694 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23695 ;; Tracked objects:
 23696 ;;		On entry : 0/0
 23697 ;;		On exit  : 0/0
 23698 ;;		Unchanged: 0/0
 23699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23700 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23701 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23702 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23703 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23704 ;;Total ram usage:        0 bytes
 23705 ;; Hardware stack levels used:    1
 23706 ;; Hardware stack levels required when called:   14
 23707 ;; This function calls:
 23708 ;;		_Port_SetQuadType
 23709 ;; This function is called by:
 23710 ;;		_FunctInitButton
 23711 ;;		_Button_Init
 23712 ;; This function uses a non-reentrant model
 23713 ;;
 23714                           
 23715                           	psect	text118
 23716  015ED8                     __ptext118:
 23717                           	opt stack 0
 23718  015ED8                     _MXK_InitDIPSwitch:
 23719                           	opt stack 13
 23720                           
 23721                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 23722                           
 23723                           ;incstack = 0
 23724  015ED8  0EA1               	movlw	low _PortD
 23725  015EDA  0100               	movlb	0	; () banked
 23726  015EDC  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 23727  015EDE  0E00               	movlw	high _PortD
 23728  015EE0  0100               	movlb	0	; () banked
 23729  015EE2  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 23730  015EE4  0E00               	movlw	0
 23731  015EE6  0100               	movlb	0	; () banked
 23732  015EE8  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 23733  015EEA  0E00               	movlw	0
 23734  015EEC  0100               	movlb	0	; () banked
 23735  015EEE  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 23736  015EF0  EC73  F08B         	call	_Port_SetQuadType	;wreg free
 23737  015EF4  0012               	return		;funcret
 23738  015EF6                     __end_of_MXK_InitDIPSwitch:
 23739                           	opt stack 0
 23740                           tosu	equ	0xFFF
 23741                           tosh	equ	0xFFE
 23742                           tosl	equ	0xFFD
 23743                           pclath	equ	0xFFA
 23744                           tblptru	equ	0xFF8
 23745                           tblptrh	equ	0xFF7
 23746                           tblptrl	equ	0xFF6
 23747                           tablat	equ	0xFF5
 23748                           prodh	equ	0xFF4
 23749                           prodl	equ	0xFF3
 23750                           intcon	equ	0xFF2
 23751                           postinc0	equ	0xFEE
 23752                           wreg	equ	0xFE8
 23753                           indf1	equ	0xFE7
 23754                           postdec1	equ	0xFE5
 23755                           fsr1h	equ	0xFE2
 23756                           fsr1l	equ	0xFE1
 23757                           indf2	equ	0xFDF
 23758                           postinc2	equ	0xFDE
 23759                           postdec2	equ	0xFDD
 23760                           plusw2	equ	0xFDB
 23761                           fsr2h	equ	0xFDA
 23762                           fsr2l	equ	0xFD9
 23763                           status	equ	0xFD8
 23764                           
 23765 ;; *************** function _HMI_InitButtons *****************
 23766 ;; Defined at:
 23767 ;;		line 21 in file "HMI.c"
 23768 ;; Parameters:    Size  Location     Type
 23769 ;;		None
 23770 ;; Auto vars:     Size  Location     Type
 23771 ;;		None
 23772 ;; Return value:  Size  Location     Type
 23773 ;;                  1    wreg      void 
 23774 ;; Registers used:
 23775 ;;		wreg, status,2
 23776 ;; Tracked objects:
 23777 ;;		On entry : 0/0
 23778 ;;		On exit  : 0/0
 23779 ;;		Unchanged: 0/0
 23780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23781 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23784 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23785 ;;Total ram usage:        0 bytes
 23786 ;; Hardware stack levels used:    1
 23787 ;; Hardware stack levels required when called:    7
 23788 ;; This function calls:
 23789 ;;		Nothing
 23790 ;; This function is called by:
 23791 ;;		_HMI_Init
 23792 ;;		_Button_Init
 23793 ;; This function uses a non-reentrant model
 23794 ;;
 23795                           
 23796                           	psect	text119
 23797  01618C                     __ptext119:
 23798                           	opt stack 0
 23799  01618C                     _HMI_InitButtons:
 23800                           	opt stack 20
 23801                           
 23802                           ;HMI.c: 23: TRISE = 0xFC;
 23803                           
 23804                           ;incstack = 0
 23805  01618C  0EFC               	movlw	252
 23806  01618E  6E96               	movwf	3990,c	;volatile
 23807  016190  0012               	return		;funcret
 23808  016192                     __end_of_HMI_InitButtons:
 23809                           	opt stack 0
 23810                           tosu	equ	0xFFF
 23811                           tosh	equ	0xFFE
 23812                           tosl	equ	0xFFD
 23813                           pclath	equ	0xFFA
 23814                           tblptru	equ	0xFF8
 23815                           tblptrh	equ	0xFF7
 23816                           tblptrl	equ	0xFF6
 23817                           tablat	equ	0xFF5
 23818                           prodh	equ	0xFF4
 23819                           prodl	equ	0xFF3
 23820                           intcon	equ	0xFF2
 23821                           postinc0	equ	0xFEE
 23822                           wreg	equ	0xFE8
 23823                           indf1	equ	0xFE7
 23824                           postdec1	equ	0xFE5
 23825                           fsr1h	equ	0xFE2
 23826                           fsr1l	equ	0xFE1
 23827                           indf2	equ	0xFDF
 23828                           postinc2	equ	0xFDE
 23829                           postdec2	equ	0xFDD
 23830                           plusw2	equ	0xFDB
 23831                           fsr2h	equ	0xFDA
 23832                           fsr2l	equ	0xFD9
 23833                           status	equ	0xFD8
 23834                           
 23835 ;; *************** function _MXK_InitTestButton *****************
 23836 ;; Defined at:
 23837 ;;		line 10 in file "Library/MXK.c"
 23838 ;; Parameters:    Size  Location     Type
 23839 ;;		None
 23840 ;; Auto vars:     Size  Location     Type
 23841 ;;		None
 23842 ;; Return value:  Size  Location     Type
 23843 ;;                  1    wreg      void 
 23844 ;; Registers used:
 23845 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23846 ;; Tracked objects:
 23847 ;;		On entry : 0/0
 23848 ;;		On exit  : 0/0
 23849 ;;		Unchanged: 0/0
 23850 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23851 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23852 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23853 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23854 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23855 ;;Total ram usage:        0 bytes
 23856 ;; Hardware stack levels used:    1
 23857 ;; Hardware stack levels required when called:   12
 23858 ;; This function calls:
 23859 ;;		_Port_SetPinType
 23860 ;; This function is called by:
 23861 ;;		_FunctInitButton
 23862 ;;		_Button_Init
 23863 ;; This function uses a non-reentrant model
 23864 ;;
 23865                           
 23866                           	psect	text120
 23867  015EF6                     __ptext120:
 23868                           	opt stack 0
 23869  015EF6                     _MXK_InitTestButton:
 23870                           	opt stack 15
 23871                           
 23872                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 23873                           
 23874                           ;incstack = 0
 23875  015EF6  0EAA               	movlw	low _PortB
 23876  015EF8  0100               	movlb	0	; () banked
 23877  015EFA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 23878  015EFC  0E03               	movlw	high _PortB
 23879  015EFE  0100               	movlb	0	; () banked
 23880  015F00  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 23881  015F02  0E04               	movlw	4
 23882  015F04  0100               	movlb	0	; () banked
 23883  015F06  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 23884  015F08  0E00               	movlw	0
 23885  015F0A  0100               	movlb	0	; () banked
 23886  015F0C  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 23887  015F0E  EC80  F091         	call	_Port_SetPinType	;wreg free
 23888  015F12  0012               	return		;funcret
 23889  015F14                     __end_of_MXK_InitTestButton:
 23890                           	opt stack 0
 23891                           tosu	equ	0xFFF
 23892                           tosh	equ	0xFFE
 23893                           tosl	equ	0xFFD
 23894                           pclath	equ	0xFFA
 23895                           tblptru	equ	0xFF8
 23896                           tblptrh	equ	0xFF7
 23897                           tblptrl	equ	0xFF6
 23898                           tablat	equ	0xFF5
 23899                           prodh	equ	0xFF4
 23900                           prodl	equ	0xFF3
 23901                           intcon	equ	0xFF2
 23902                           postinc0	equ	0xFEE
 23903                           wreg	equ	0xFE8
 23904                           indf1	equ	0xFE7
 23905                           postdec1	equ	0xFE5
 23906                           fsr1h	equ	0xFE2
 23907                           fsr1l	equ	0xFE1
 23908                           indf2	equ	0xFDF
 23909                           postinc2	equ	0xFDE
 23910                           postdec2	equ	0xFDD
 23911                           plusw2	equ	0xFDB
 23912                           fsr2h	equ	0xFDA
 23913                           fsr2l	equ	0xFD9
 23914                           status	equ	0xFD8
 23915                           
 23916 ;; *************** function _Port_SetPinType *****************
 23917 ;; Defined at:
 23918 ;;		line 189 in file "Library/Port.c"
 23919 ;; Parameters:    Size  Location     Type
 23920 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23921 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23922 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23923 ;;  pPin            1   40[BANK0 ] enum E6750
 23924 ;;  pType           1   41[BANK0 ] enum E6795
 23925 ;; Auto vars:     Size  Location     Type
 23926 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 23927 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 23928 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 23929 ;;  Output          1   42[BANK0 ] enum E6475
 23930 ;; Return value:  Size  Location     Type
 23931 ;;                  1    wreg      enum E6475
 23932 ;; Registers used:
 23933 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23934 ;; Tracked objects:
 23935 ;;		On entry : 0/0
 23936 ;;		On exit  : 0/0
 23937 ;;		Unchanged: 0/0
 23938 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23939 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23940 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23941 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23942 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23943 ;;Total ram usage:        7 bytes
 23944 ;; Hardware stack levels used:    1
 23945 ;; Hardware stack levels required when called:   11
 23946 ;; This function calls:
 23947 ;;		_Byte_SetBit
 23948 ;;		_PortProperty_Valid
 23949 ;;		_Word_SetPair
 23950 ;; This function is called by:
 23951 ;;		_Configure_GPIOs
 23952 ;;		_LED_Init
 23953 ;;		_Port_Init
 23954 ;;		_SPI_Init
 23955 ;;		_Motor_Init
 23956 ;;		_MXK_InitTestButton
 23957 ;;		_MXK_Init
 23958 ;;		_I2C_Init
 23959 ;; This function uses a non-reentrant model
 23960 ;;
 23961                           
 23962                           	psect	text121
 23963  012300                     __ptext121:
 23964                           	opt stack 0
 23965  012300                     _Port_SetPinType:
 23966                           	opt stack 17
 23967                           
 23968                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 23969                           
 23970                           ;incstack = 0
 23971  012300  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 23972  012304  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 23973  012308  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 23974  01230C  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 23975                           
 23976                           ;Port.c: 192: ePinError Output = ePinErrorState;
 23977  012310  0E05               	movlw	5
 23978  012312  0100               	movlb	0	; () banked
 23979  012314  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 23980                           
 23981                           ;Port.c: 193: switch (pType)
 23982  012316  D0B5               	goto	l412
 23983  012318                     
 23984                           ; BSR set to: 0
 23985                           ;Port.c: 197: {
 23986                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 23987                           
 23988                           ; BSR set to: 0
 23989  012318  0100               	movlb	0	; () banked
 23990  01231A  EE20 F002          	lfsr	2,2
 23991  01231E  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 23992  012320  26D9               	addwf	fsr2l,f,c
 23993  012322  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 23994  012324  22DA               	addwfc	fsr2h,f,c
 23995  012326  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 23996  01232A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 23997  01232E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 23998  012332  0E01               	movlw	1
 23999  012334  0100               	movlb	0	; () banked
 24000  012336  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24001  012338  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24002                           
 24003                           ;Port.c: 203: break;
 24004  01233C  D0B0               	goto	l414
 24005  01233E                     
 24006                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 24007  01233E  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24008  012342  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24009  012346  0E01               	movlw	1
 24010  012348  0100               	movlb	0	; () banked
 24011  01234A  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24012  01234C  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24013  012350  ECCB  F0A5         	call	_PortProperty_Valid	;wreg free
 24014  012354  0100               	movlb	0	; () banked
 24015  012356  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 24016  012358  0100               	movlb	0	; () banked
 24017  01235A  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 24018  01235C  A4D8               	btfss	status,2,c
 24019  01235E  0012               	return	
 24020                           
 24021                           ; BSR set to: 0
 24022                           ;Port.c: 208: {
 24023                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24024  012360  0100               	movlb	0	; () banked
 24025  012362  EE20 F002          	lfsr	2,2
 24026  012366  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24027  012368  26D9               	addwf	fsr2l,f,c
 24028  01236A  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24029  01236C  22DA               	addwfc	fsr2h,f,c
 24030  01236E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24031  012372  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24032  012376  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24033  01237A  0E00               	movlw	0
 24034  01237C  0100               	movlb	0	; () banked
 24035  01237E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24036  012380  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24037                           
 24038                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24039  012384  0100               	movlb	0	; () banked
 24040  012386  EE20 F004          	lfsr	2,4
 24041  01238A  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24042  01238C  26D9               	addwf	fsr2l,f,c
 24043  01238E  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24044  012390  22DA               	addwfc	fsr2h,f,c
 24045  012392  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24046  012396  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24047  01239A  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24048  01239E  0E00               	movlw	0
 24049  0123A0  0100               	movlb	0	; () banked
 24050  0123A2  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24051  0123A4  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24052                           
 24053                           ;Port.c: 214: break;
 24054  0123A8  D07A               	goto	l414
 24055  0123AA                     
 24056                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 24057                           
 24058                           ;Port.c: 218: case eTypeOutputOpenSource:
 24059  0123AA  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24060  0123AE  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24061  0123B2  0E02               	movlw	2
 24062  0123B4  0100               	movlb	0	; () banked
 24063  0123B6  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24064  0123B8  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24065  0123BC  ECCB  F0A5         	call	_PortProperty_Valid	;wreg free
 24066  0123C0  0100               	movlb	0	; () banked
 24067  0123C2  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 24068  0123C4  0100               	movlb	0	; () banked
 24069  0123C6  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 24070  0123C8  A4D8               	btfss	status,2,c
 24071  0123CA  0012               	return	
 24072                           
 24073                           ; BSR set to: 0
 24074                           ;Port.c: 220: {
 24075                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 24076  0123CC  0100               	movlb	0	; () banked
 24077  0123CE  EE20 F002          	lfsr	2,2
 24078  0123D2  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24079  0123D4  26D9               	addwf	fsr2l,f,c
 24080  0123D6  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24081  0123D8  22DA               	addwfc	fsr2h,f,c
 24082  0123DA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24083  0123DE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24084  0123E2  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24085  0123E6  0E01               	movlw	1
 24086  0123E8  0100               	movlb	0	; () banked
 24087  0123EA  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24088  0123EC  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24089                           
 24090                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 24091  0123F0  0100               	movlb	0	; () banked
 24092  0123F2  EE20 F004          	lfsr	2,4
 24093  0123F6  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24094  0123F8  26D9               	addwf	fsr2l,f,c
 24095  0123FA  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24096  0123FC  22DA               	addwfc	fsr2h,f,c
 24097  0123FE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24098  012402  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24099  012406  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24100  01240A  0E01               	movlw	1
 24101  01240C  0100               	movlb	0	; () banked
 24102  01240E  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24103  012410  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24104                           
 24105                           ;Port.c: 226: break;
 24106  012414  D044               	goto	l414
 24107  012416                     
 24108                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 24109                           
 24110                           ;Port.c: 230: case eTypeOutputPushPull:
 24111  012416  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 24112  01241A  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 24113  01241E  0E00               	movlw	0
 24114  012420  0100               	movlb	0	; () banked
 24115  012422  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 24116  012424  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 24117  012428  ECCB  F0A5         	call	_PortProperty_Valid	;wreg free
 24118  01242C  0100               	movlb	0	; () banked
 24119  01242E  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 24120  012430  0100               	movlb	0	; () banked
 24121  012432  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 24122  012434  A4D8               	btfss	status,2,c
 24123  012436  0012               	return	
 24124                           
 24125                           ; BSR set to: 0
 24126                           ;Port.c: 232: {
 24127                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 24128  012438  0100               	movlb	0	; () banked
 24129  01243A  EE20 F002          	lfsr	2,2
 24130  01243E  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24131  012440  26D9               	addwf	fsr2l,f,c
 24132  012442  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24133  012444  22DA               	addwfc	fsr2h,f,c
 24134  012446  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24135  01244A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24136  01244E  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24137  012452  0E00               	movlw	0
 24138  012454  0100               	movlb	0	; () banked
 24139  012456  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24140  012458  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24141                           
 24142                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 24143  01245C  0100               	movlb	0	; () banked
 24144  01245E  EE20 F004          	lfsr	2,4
 24145  012462  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 24146  012464  26D9               	addwf	fsr2l,f,c
 24147  012466  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 24148  012468  22DA               	addwfc	fsr2h,f,c
 24149  01246A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 24150  01246E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 24151  012472  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 24152  012476  0E00               	movlw	0
 24153  012478  0100               	movlb	0	; () banked
 24154  01247A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 24155  01247C  EC4E  F0A9         	call	_Byte_SetBit	;wreg free
 24156                           
 24157                           ;Port.c: 239: }
 24158                           
 24159                           ;Port.c: 238: break;
 24160  012480  D00E               	goto	l414
 24161  012482                     l412:
 24162  012482  0100               	movlb	0	; () banked
 24163  012484  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 24164                           
 24165                           ; Switch size 1, requested type "space"
 24166                           ; Number of cases is 4, Range of values is 0 to 3
 24167                           ; switch strategies available:
 24168                           ; Name         Instructions Cycles
 24169                           ; simple_byte           13     7 (average)
 24170                           ;	Chosen strategy is simple_byte
 24171  012486  0A00               	xorlw	0	; case 0
 24172  012488  B4D8               	btfsc	status,2,c
 24173  01248A  D746               	goto	l413
 24174  01248C  0A01               	xorlw	1	; case 1
 24175  01248E  B4D8               	btfsc	status,2,c
 24176  012490  D756               	goto	l415
 24177  012492  0A03               	xorlw	3	; case 2
 24178  012494  B4D8               	btfsc	status,2,c
 24179  012496  D789               	goto	l417
 24180  012498  0A01               	xorlw	1	; case 3
 24181  01249A  B4D8               	btfsc	status,2,c
 24182  01249C  D7BC               	goto	l421
 24183  01249E                     l414:
 24184                           
 24185                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 24186                           
 24187                           ; BSR set to: 0
 24188  01249E  0E08               	movlw	8
 24189  0124A0  0100               	movlb	0	; () banked
 24190  0124A2  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 24191  0124A4  0100               	movlb	0	; () banked
 24192  0124A6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 24193  0124A8  0E00               	movlw	0
 24194  0124AA  0100               	movlb	0	; () banked
 24195  0124AC  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 24196  0124AE  0100               	movlb	0	; () banked
 24197  0124B0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24198  0124B2  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 24199  0124B6  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 24200  0124BA  EC11  F0AC         	call	_Word_SetPair	;wreg free
 24201  0124BE  0012               	return	
 24202  0124C0                     __end_of_Port_SetPinType:
 24203                           	opt stack 0
 24204                           tosu	equ	0xFFF
 24205                           tosh	equ	0xFFE
 24206                           tosl	equ	0xFFD
 24207                           pclath	equ	0xFFA
 24208                           tblptru	equ	0xFF8
 24209                           tblptrh	equ	0xFF7
 24210                           tblptrl	equ	0xFF6
 24211                           tablat	equ	0xFF5
 24212                           prodh	equ	0xFF4
 24213                           prodl	equ	0xFF3
 24214                           intcon	equ	0xFF2
 24215                           postinc0	equ	0xFEE
 24216                           wreg	equ	0xFE8
 24217                           indf1	equ	0xFE7
 24218                           postdec1	equ	0xFE5
 24219                           fsr1h	equ	0xFE2
 24220                           fsr1l	equ	0xFE1
 24221                           indf2	equ	0xFDF
 24222                           postinc2	equ	0xFDE
 24223                           postdec2	equ	0xFDD
 24224                           plusw2	equ	0xFDB
 24225                           fsr2h	equ	0xFDA
 24226                           fsr2l	equ	0xFD9
 24227                           status	equ	0xFD8
 24228                           
 24229 ;; *************** function _Byte_SetBit *****************
 24230 ;; Defined at:
 24231 ;;		line 32 in file "Library/Types.c"
 24232 ;; Parameters:    Size  Location     Type
 24233 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 24234 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 24235 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 24236 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 24237 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 24238 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 24239 ;;		 -> NULL(0), 
 24240 ;;  pBit            1    2[BANK0 ] unsigned char 
 24241 ;;  pValue          1    3[BANK0 ] unsigned char 
 24242 ;; Auto vars:     Size  Location     Type
 24243 ;;		None
 24244 ;; Return value:  Size  Location     Type
 24245 ;;                  1    wreg      void 
 24246 ;; Registers used:
 24247 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 24248 ;; Tracked objects:
 24249 ;;		On entry : 0/0
 24250 ;;		On exit  : 0/0
 24251 ;;		Unchanged: 0/0
 24252 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24253 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24254 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24255 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24256 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24257 ;;Total ram usage:        7 bytes
 24258 ;; Hardware stack levels used:    1
 24259 ;; Hardware stack levels required when called:    7
 24260 ;; This function calls:
 24261 ;;		Nothing
 24262 ;; This function is called by:
 24263 ;;		_Port_SetPinType
 24264 ;;		_Port_SetPin
 24265 ;;		_SPI_Init
 24266 ;;		_SPI_MinSpeed
 24267 ;;		_SPI_MaxSpeed
 24268 ;;		_Word_SetBit
 24269 ;;		_I2C_Init
 24270 ;; This function uses a non-reentrant model
 24271 ;;
 24272                           
 24273                           	psect	text122
 24274  01529C                     __ptext122:
 24275                           	opt stack 0
 24276  01529C                     _Byte_SetBit:
 24277                           	opt stack 19
 24278                           
 24279                           ;Types.c: 34: pValue &= 1;
 24280                           
 24281                           ;incstack = 0
 24282  01529C  0E01               	movlw	1
 24283  01529E  0100               	movlb	0	; () banked
 24284  0152A0  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 24285                           
 24286                           ; BSR set to: 0
 24287                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 24288  0152A2  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24289  0152A6  0E01               	movlw	1
 24290  0152A8  0100               	movlb	0	; () banked
 24291  0152AA  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 24292  0152AC  0100               	movlb	0	; () banked
 24293  0152AE  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 24294  0152B0  D003               	goto	u8354
 24295  0152B2                     u8355:
 24296  0152B2  0100               	movlb	0	; () banked
 24297  0152B4  90D8               	bcf	status,0,c
 24298  0152B6  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24299  0152B8                     u8354:
 24300  0152B8  0100               	movlb	0	; () banked
 24301  0152BA  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 24302  0152BC  D7FA               	goto	u8355
 24303  0152BE  0100               	movlb	0	; () banked
 24304  0152C0  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24305  0152C2  0AFF               	xorlw	255
 24306  0152C4  0100               	movlb	0	; () banked
 24307  0152C6  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 24308  0152C8  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24309  0152CC  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24310  0152D0  0100               	movlb	0	; () banked
 24311  0152D2  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 24312  0152D4  16DF               	andwf	indf2,f,c
 24313                           
 24314                           ; BSR set to: 0
 24315                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 24316  0152D6  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 24317  0152DA  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 24318  0152DE  0100               	movlb	0	; () banked
 24319  0152E0  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 24320  0152E2  D003               	goto	u8364
 24321  0152E4                     u8365:
 24322  0152E4  0100               	movlb	0	; () banked
 24323  0152E6  90D8               	bcf	status,0,c
 24324  0152E8  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 24325  0152EA                     u8364:
 24326  0152EA  0100               	movlb	0	; () banked
 24327  0152EC  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 24328  0152EE  D7FA               	goto	u8365
 24329  0152F0  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 24330  0152F4  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 24331  0152F8  0100               	movlb	0	; () banked
 24332  0152FA  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 24333  0152FC  12DF               	iorwf	indf2,f,c
 24334                           
 24335                           ; BSR set to: 0
 24336  0152FE  0012               	return		;funcret
 24337  015300                     __end_of_Byte_SetBit:
 24338                           	opt stack 0
 24339                           tosu	equ	0xFFF
 24340                           tosh	equ	0xFFE
 24341                           tosl	equ	0xFFD
 24342                           pclath	equ	0xFFA
 24343                           tblptru	equ	0xFF8
 24344                           tblptrh	equ	0xFF7
 24345                           tblptrl	equ	0xFF6
 24346                           tablat	equ	0xFF5
 24347                           prodh	equ	0xFF4
 24348                           prodl	equ	0xFF3
 24349                           intcon	equ	0xFF2
 24350                           postinc0	equ	0xFEE
 24351                           wreg	equ	0xFE8
 24352                           indf1	equ	0xFE7
 24353                           postdec1	equ	0xFE5
 24354                           fsr1h	equ	0xFE2
 24355                           fsr1l	equ	0xFE1
 24356                           indf2	equ	0xFDF
 24357                           postinc2	equ	0xFDE
 24358                           postdec2	equ	0xFDD
 24359                           plusw2	equ	0xFDB
 24360                           fsr2h	equ	0xFDA
 24361                           fsr2l	equ	0xFD9
 24362                           status	equ	0xFD8
 24363                           
 24364 ;; *************** function _Port_SetQuadType *****************
 24365 ;; Defined at:
 24366 ;;		line 399 in file "Library/Port.c"
 24367 ;; Parameters:    Size  Location     Type
 24368 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 24369 ;;		 -> PortB(10), PortD(10), 
 24370 ;;  pQuad           1   56[BANK0 ] enum E6776
 24371 ;;  pType           1   57[BANK0 ] enum E6795
 24372 ;; Auto vars:     Size  Location     Type
 24373 ;;  Output          1   58[BANK0 ] enum E6475
 24374 ;; Return value:  Size  Location     Type
 24375 ;;                  1    wreg      enum E6475
 24376 ;; Registers used:
 24377 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24378 ;; Tracked objects:
 24379 ;;		On entry : 0/0
 24380 ;;		On exit  : 0/0
 24381 ;;		Unchanged: 0/0
 24382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24383 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24385 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24386 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24387 ;;Total ram usage:        5 bytes
 24388 ;; Hardware stack levels used:    1
 24389 ;; Hardware stack levels required when called:   13
 24390 ;; This function calls:
 24391 ;;		_Byte_SetQuad
 24392 ;;		_Port_CheckQuadType
 24393 ;;		_Word_SetPair
 24394 ;; This function is called by:
 24395 ;;		_MXK_InitDIPSwitch
 24396 ;;		_MXK_Init
 24397 ;; This function uses a non-reentrant model
 24398 ;;
 24399                           
 24400                           	psect	text123
 24401  0116E6                     __ptext123:
 24402                           	opt stack 0
 24403  0116E6                     _Port_SetQuadType:
 24404                           	opt stack 15
 24405                           
 24406                           ;Port.c: 401: ePinError Output = ePinErrorState;
 24407                           
 24408                           ; BSR set to: 0
 24409                           ;incstack = 0
 24410  0116E6  0E05               	movlw	5
 24411  0116E8  0100               	movlb	0	; () banked
 24412  0116EA  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 24413                           
 24414                           ;Port.c: 403: switch (pType)
 24415  0116EC  D0C7               	goto	l476
 24416  0116EE                     
 24417                           ; BSR set to: 0
 24418                           ;Port.c: 407: {
 24419                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 24420                           
 24421                           ; BSR set to: 0
 24422  0116EE  0100               	movlb	0	; () banked
 24423  0116F0  EE20 F002          	lfsr	2,2
 24424  0116F4  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24425  0116F6  26D9               	addwf	fsr2l,f,c
 24426  0116F8  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24427  0116FA  22DA               	addwfc	fsr2h,f,c
 24428  0116FC  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24429  011700  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24430  011704  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24431  011708  0E0F               	movlw	15
 24432  01170A  0100               	movlb	0	; () banked
 24433  01170C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24434  01170E  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24435                           
 24436                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24437  011712  0100               	movlb	0	; () banked
 24438  011714  EE20 F004          	lfsr	2,4
 24439  011718  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24440  01171A  26D9               	addwf	fsr2l,f,c
 24441  01171C  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24442  01171E  22DA               	addwfc	fsr2h,f,c
 24443  011720  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24444  011724  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24445  011728  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24446  01172C  0E00               	movlw	0
 24447  01172E  0100               	movlb	0	; () banked
 24448  011730  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24449  011732  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24450                           
 24451                           ;Port.c: 413: }
 24452                           ;Port.c: 415: break;
 24453  011736  D0B0               	goto	l478
 24454  011738                     
 24455                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24456  011738  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24457  01173C  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24458  011740  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24459  011744  0E03               	movlw	3
 24460  011746  0100               	movlb	0	; () banked
 24461  011748  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24462  01174A  EC10  F0AA         	call	_Port_CheckQuadType	;wreg free
 24463  01174E  0100               	movlb	0	; () banked
 24464  011750  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 24465  011752  0100               	movlb	0	; () banked
 24466  011754  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 24467  011756  A4D8               	btfss	status,2,c
 24468  011758  0012               	return	
 24469                           
 24470                           ; BSR set to: 0
 24471                           ;Port.c: 418: {
 24472                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24473  01175A  0100               	movlb	0	; () banked
 24474  01175C  EE20 F002          	lfsr	2,2
 24475  011760  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24476  011762  26D9               	addwf	fsr2l,f,c
 24477  011764  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24478  011766  22DA               	addwfc	fsr2h,f,c
 24479  011768  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24480  01176C  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24481  011770  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24482  011774  0E00               	movlw	0
 24483  011776  0100               	movlb	0	; () banked
 24484  011778  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24485  01177A  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24486                           
 24487                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24488  01177E  0100               	movlb	0	; () banked
 24489  011780  EE20 F004          	lfsr	2,4
 24490  011784  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24491  011786  26D9               	addwf	fsr2l,f,c
 24492  011788  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24493  01178A  22DA               	addwfc	fsr2h,f,c
 24494  01178C  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24495  011790  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24496  011794  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24497  011798  0E00               	movlw	0
 24498  01179A  0100               	movlb	0	; () banked
 24499  01179C  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24500  01179E  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24501                           
 24502                           ;Port.c: 424: }
 24503  0117A2  D07A               	goto	l478
 24504  0117A4                     
 24505                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24506  0117A4  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24507  0117A8  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24508  0117AC  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24509  0117B0  0E03               	movlw	3
 24510  0117B2  0100               	movlb	0	; () banked
 24511  0117B4  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24512  0117B6  EC10  F0AA         	call	_Port_CheckQuadType	;wreg free
 24513  0117BA  0100               	movlb	0	; () banked
 24514  0117BC  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 24515  0117BE  0100               	movlb	0	; () banked
 24516  0117C0  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 24517  0117C2  A4D8               	btfss	status,2,c
 24518  0117C4  0012               	return	
 24519                           
 24520                           ; BSR set to: 0
 24521                           ;Port.c: 429: {
 24522                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 24523  0117C6  0100               	movlb	0	; () banked
 24524  0117C8  EE20 F002          	lfsr	2,2
 24525  0117CC  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24526  0117CE  26D9               	addwf	fsr2l,f,c
 24527  0117D0  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24528  0117D2  22DA               	addwfc	fsr2h,f,c
 24529  0117D4  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24530  0117D8  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24531  0117DC  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24532  0117E0  0E0F               	movlw	15
 24533  0117E2  0100               	movlb	0	; () banked
 24534  0117E4  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24535  0117E6  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24536                           
 24537                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 24538  0117EA  0100               	movlb	0	; () banked
 24539  0117EC  EE20 F004          	lfsr	2,4
 24540  0117F0  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24541  0117F2  26D9               	addwf	fsr2l,f,c
 24542  0117F4  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24543  0117F6  22DA               	addwfc	fsr2h,f,c
 24544  0117F8  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24545  0117FC  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24546  011800  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24547  011804  0E0F               	movlw	15
 24548  011806  0100               	movlb	0	; () banked
 24549  011808  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24550  01180A  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24551                           
 24552                           ;Port.c: 435: }
 24553  01180E  D044               	goto	l478
 24554  011810                     
 24555                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 24556  011810  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 24557  011814  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 24558  011818  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 24559  01181C  0E03               	movlw	3
 24560  01181E  0100               	movlb	0	; () banked
 24561  011820  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 24562  011822  EC10  F0AA         	call	_Port_CheckQuadType	;wreg free
 24563  011826  0100               	movlb	0	; () banked
 24564  011828  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 24565  01182A  0100               	movlb	0	; () banked
 24566  01182C  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 24567  01182E  A4D8               	btfss	status,2,c
 24568  011830  0012               	return	
 24569                           
 24570                           ; BSR set to: 0
 24571                           ;Port.c: 440: {
 24572                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 24573  011832  0100               	movlb	0	; () banked
 24574  011834  EE20 F002          	lfsr	2,2
 24575  011838  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24576  01183A  26D9               	addwf	fsr2l,f,c
 24577  01183C  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24578  01183E  22DA               	addwfc	fsr2h,f,c
 24579  011840  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24580  011844  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24581  011848  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24582  01184C  0E00               	movlw	0
 24583  01184E  0100               	movlb	0	; () banked
 24584  011850  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24585  011852  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24586                           
 24587                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 24588  011856  0100               	movlb	0	; () banked
 24589  011858  EE20 F004          	lfsr	2,4
 24590  01185C  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 24591  01185E  26D9               	addwf	fsr2l,f,c
 24592  011860  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24593  011862  22DA               	addwfc	fsr2h,f,c
 24594  011864  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 24595  011868  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 24596  01186C  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 24597  011870  0E00               	movlw	0
 24598  011872  0100               	movlb	0	; () banked
 24599  011874  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 24600  011876  EC00  F0AF         	call	_Byte_SetQuad	;wreg free
 24601                           
 24602                           ;Port.c: 446: }
 24603  01187A  D00E               	goto	l478
 24604  01187C                     l476:
 24605  01187C  0100               	movlb	0	; () banked
 24606  01187E  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 24607                           
 24608                           ; Switch size 1, requested type "space"
 24609                           ; Number of cases is 4, Range of values is 0 to 3
 24610                           ; switch strategies available:
 24611                           ; Name         Instructions Cycles
 24612                           ; simple_byte           13     7 (average)
 24613                           ;	Chosen strategy is simple_byte
 24614  011880  0A00               	xorlw	0	; case 0
 24615  011882  B4D8               	btfsc	status,2,c
 24616  011884  D734               	goto	l477
 24617  011886  0A01               	xorlw	1	; case 1
 24618  011888  B4D8               	btfsc	status,2,c
 24619  01188A  D756               	goto	l479
 24620  01188C  0A03               	xorlw	3	; case 2
 24621  01188E  B4D8               	btfsc	status,2,c
 24622  011890  D789               	goto	l483
 24623  011892  0A01               	xorlw	1	; case 3
 24624  011894  B4D8               	btfsc	status,2,c
 24625  011896  D7BC               	goto	l486
 24626  011898                     l478:
 24627                           
 24628                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 24629                           
 24630                           ; BSR set to: 0
 24631  011898  0E08               	movlw	8
 24632  01189A  0100               	movlb	0	; () banked
 24633  01189C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24634  01189E  0100               	movlb	0	; () banked
 24635  0118A0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 24636  0118A2  0E00               	movlw	0
 24637  0118A4  0100               	movlb	0	; () banked
 24638  0118A6  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24639  0118A8  0100               	movlb	0	; () banked
 24640  0118AA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24641  0118AC  0100               	movlb	0	; () banked
 24642  0118AE  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24643  0118B0  0D04               	mullw	4
 24644  0118B2  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 24645  0118B6  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24646  0118BA  EC11  F0AC         	call	_Word_SetPair	;wreg free
 24647                           
 24648                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 24649  0118BE  0E08               	movlw	8
 24650  0118C0  0100               	movlb	0	; () banked
 24651  0118C2  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24652  0118C4  0100               	movlb	0	; () banked
 24653  0118C6  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 24654  0118C8  0E00               	movlw	0
 24655  0118CA  0100               	movlb	0	; () banked
 24656  0118CC  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24657  0118CE  0100               	movlb	0	; () banked
 24658  0118D0  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24659  0118D2  0100               	movlb	0	; () banked
 24660  0118D4  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24661  0118D6  0D04               	mullw	4
 24662  0118D8  28F3               	incf	prodl,w,c
 24663  0118DA  0100               	movlb	0	; () banked
 24664  0118DC  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 24665  0118DE  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24666  0118E2  EC11  F0AC         	call	_Word_SetPair	;wreg free
 24667                           
 24668                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 24669  0118E6  0E08               	movlw	8
 24670  0118E8  0100               	movlb	0	; () banked
 24671  0118EA  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24672  0118EC  0100               	movlb	0	; () banked
 24673  0118EE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 24674  0118F0  0E00               	movlw	0
 24675  0118F2  0100               	movlb	0	; () banked
 24676  0118F4  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24677  0118F6  0100               	movlb	0	; () banked
 24678  0118F8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24679  0118FA  0100               	movlb	0	; () banked
 24680  0118FC  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24681  0118FE  0D04               	mullw	4
 24682  011900  50F3               	movf	prodl,w,c
 24683  011902  0F02               	addlw	2
 24684  011904  0100               	movlb	0	; () banked
 24685  011906  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 24686  011908  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24687  01190C  EC11  F0AC         	call	_Word_SetPair	;wreg free
 24688                           
 24689                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 24690  011910  0E08               	movlw	8
 24691  011912  0100               	movlb	0	; () banked
 24692  011914  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 24693  011916  0100               	movlb	0	; () banked
 24694  011918  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 24695  01191A  0E00               	movlw	0
 24696  01191C  0100               	movlb	0	; () banked
 24697  01191E  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 24698  011920  0100               	movlb	0	; () banked
 24699  011922  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 24700  011924  0100               	movlb	0	; () banked
 24701  011926  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 24702  011928  0D04               	mullw	4
 24703  01192A  50F3               	movf	prodl,w,c
 24704  01192C  0F03               	addlw	3
 24705  01192E  0100               	movlb	0	; () banked
 24706  011930  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 24707  011932  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 24708  011936  EC11  F0AC         	call	_Word_SetPair	;wreg free
 24709  01193A  0012               	return	
 24710  01193C                     __end_of_Port_SetQuadType:
 24711                           	opt stack 0
 24712                           tosu	equ	0xFFF
 24713                           tosh	equ	0xFFE
 24714                           tosl	equ	0xFFD
 24715                           pclath	equ	0xFFA
 24716                           tblptru	equ	0xFF8
 24717                           tblptrh	equ	0xFF7
 24718                           tblptrl	equ	0xFF6
 24719                           tablat	equ	0xFF5
 24720                           prodh	equ	0xFF4
 24721                           prodl	equ	0xFF3
 24722                           intcon	equ	0xFF2
 24723                           postinc0	equ	0xFEE
 24724                           wreg	equ	0xFE8
 24725                           indf1	equ	0xFE7
 24726                           postdec1	equ	0xFE5
 24727                           fsr1h	equ	0xFE2
 24728                           fsr1l	equ	0xFE1
 24729                           indf2	equ	0xFDF
 24730                           postinc2	equ	0xFDE
 24731                           postdec2	equ	0xFDD
 24732                           plusw2	equ	0xFDB
 24733                           fsr2h	equ	0xFDA
 24734                           fsr2l	equ	0xFD9
 24735                           status	equ	0xFD8
 24736                           
 24737 ;; *************** function _Word_SetPair *****************
 24738 ;; Defined at:
 24739 ;;		line 149 in file "Library/Types.c"
 24740 ;; Parameters:    Size  Location     Type
 24741 ;;  pInput          2   15[BANK0 ] PTR struct Word
 24742 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24743 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24744 ;;  pPair           1   17[BANK0 ] unsigned char 
 24745 ;;  pValue          1   18[BANK0 ] unsigned char 
 24746 ;; Auto vars:     Size  Location     Type
 24747 ;;		None
 24748 ;; Return value:  Size  Location     Type
 24749 ;;                  1    wreg      void 
 24750 ;; Registers used:
 24751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24752 ;; Tracked objects:
 24753 ;;		On entry : 0/0
 24754 ;;		On exit  : 0/0
 24755 ;;		Unchanged: 0/0
 24756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24757 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24760 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24761 ;;Total ram usage:        4 bytes
 24762 ;; Hardware stack levels used:    1
 24763 ;; Hardware stack levels required when called:    9
 24764 ;; This function calls:
 24765 ;;		_Byte_SetPair
 24766 ;; This function is called by:
 24767 ;;		_Port_SetPinType
 24768 ;;		_Port_SetQuadType
 24769 ;;		_Port_SetType
 24770 ;;		_Port_SetPairType
 24771 ;;		_PortProperty_Init
 24772 ;; This function uses a non-reentrant model
 24773 ;;
 24774                           
 24775                           	psect	text124
 24776  015822                     __ptext124:
 24777                           	opt stack 0
 24778  015822                     _Word_SetPair:
 24779                           	opt stack 18
 24780                           
 24781                           ;Types.c: 151: if (pPair >= 4)
 24782                           
 24783                           ;incstack = 0
 24784  015822  0E03               	movlw	3
 24785  015824  0100               	movlb	0	; () banked
 24786  015826  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 24787  015828  D014               	goto	l776
 24788                           
 24789                           ; BSR set to: 0
 24790                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 24791  01582A  0E01               	movlw	1
 24792  01582C  0100               	movlb	0	; () banked
 24793  01582E  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 24794  015830  0100               	movlb	0	; () banked
 24795  015832  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 24796  015834  0E00               	movlw	0
 24797  015836  0100               	movlb	0	; () banked
 24798  015838  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 24799  01583A  0100               	movlb	0	; () banked
 24800  01583C  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 24801  01583E  0100               	movlb	0	; () banked
 24802  015840  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 24803  015842  0FFC               	addlw	252
 24804  015844  0100               	movlb	0	; () banked
 24805  015846  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 24806  015848  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24807  01584C  ECEF  F0AE         	call	_Byte_SetPair	;wreg free
 24808  015850  0012               	return	
 24809  015852                     l776:
 24810                           
 24811                           ;Types.c: 153: else
 24812                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 24813  015852  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 24814  015856  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 24815  01585A  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 24816  01585E  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 24817  015862  ECEF  F0AE         	call	_Byte_SetPair	;wreg free
 24818  015866  0012               	return	
 24819  015868                     __end_of_Word_SetPair:
 24820                           	opt stack 0
 24821                           tosu	equ	0xFFF
 24822                           tosh	equ	0xFFE
 24823                           tosl	equ	0xFFD
 24824                           pclath	equ	0xFFA
 24825                           tblptru	equ	0xFF8
 24826                           tblptrh	equ	0xFF7
 24827                           tblptrl	equ	0xFF6
 24828                           tablat	equ	0xFF5
 24829                           prodh	equ	0xFF4
 24830                           prodl	equ	0xFF3
 24831                           intcon	equ	0xFF2
 24832                           postinc0	equ	0xFEE
 24833                           wreg	equ	0xFE8
 24834                           indf1	equ	0xFE7
 24835                           postdec1	equ	0xFE5
 24836                           fsr1h	equ	0xFE2
 24837                           fsr1l	equ	0xFE1
 24838                           indf2	equ	0xFDF
 24839                           postinc2	equ	0xFDE
 24840                           postdec2	equ	0xFDD
 24841                           plusw2	equ	0xFDB
 24842                           fsr2h	equ	0xFDA
 24843                           fsr2l	equ	0xFD9
 24844                           status	equ	0xFD8
 24845                           
 24846 ;; *************** function _Byte_SetPair *****************
 24847 ;; Defined at:
 24848 ;;		line 83 in file "Library/Types.c"
 24849 ;; Parameters:    Size  Location     Type
 24850 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 24851 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 24852 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 24853 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 24854 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 24855 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 24856 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 24857 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 24858 ;;		 -> NULL(0), 
 24859 ;;  pPair           1   13[BANK0 ] unsigned char 
 24860 ;;  pValue          1   14[BANK0 ] unsigned char 
 24861 ;; Auto vars:     Size  Location     Type
 24862 ;;		None
 24863 ;; Return value:  Size  Location     Type
 24864 ;;                  1    wreg      void 
 24865 ;; Registers used:
 24866 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24867 ;; Tracked objects:
 24868 ;;		On entry : 0/0
 24869 ;;		On exit  : 0/0
 24870 ;;		Unchanged: 0/0
 24871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24872 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24873 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24875 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24876 ;;Total ram usage:        4 bytes
 24877 ;; Hardware stack levels used:    1
 24878 ;; Hardware stack levels required when called:    8
 24879 ;; This function calls:
 24880 ;;		_Byte_SetZone
 24881 ;; This function is called by:
 24882 ;;		_Word_SetPair
 24883 ;;		_Port_SetPairType
 24884 ;;		_Port_SetPair
 24885 ;; This function uses a non-reentrant model
 24886 ;;
 24887                           
 24888                           	psect	text125
 24889  015DDE                     __ptext125:
 24890                           	opt stack 0
 24891  015DDE                     _Byte_SetPair:
 24892                           	opt stack 18
 24893                           
 24894                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 24895                           
 24896                           ;incstack = 0
 24897  015DDE  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 24898  015DE2  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 24899  015DE6  0E04               	movlw	4
 24900  015DE8  0100               	movlb	0	; () banked
 24901  015DEA  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 24902  015DEC  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 24903  015DF0  0E02               	movlw	2
 24904  015DF2  0100               	movlb	0	; () banked
 24905  015DF4  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 24906  015DF6  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 24907  015DFA  EC01  F0A0         	call	_Byte_SetZone	;wreg free
 24908  015DFE  0012               	return		;funcret
 24909  015E00                     __end_of_Byte_SetPair:
 24910                           	opt stack 0
 24911                           tosu	equ	0xFFF
 24912                           tosh	equ	0xFFE
 24913                           tosl	equ	0xFFD
 24914                           pclath	equ	0xFFA
 24915                           tblptru	equ	0xFF8
 24916                           tblptrh	equ	0xFF7
 24917                           tblptrl	equ	0xFF6
 24918                           tablat	equ	0xFF5
 24919                           prodh	equ	0xFF4
 24920                           prodl	equ	0xFF3
 24921                           intcon	equ	0xFF2
 24922                           postinc0	equ	0xFEE
 24923                           wreg	equ	0xFE8
 24924                           indf1	equ	0xFE7
 24925                           postdec1	equ	0xFE5
 24926                           fsr1h	equ	0xFE2
 24927                           fsr1l	equ	0xFE1
 24928                           indf2	equ	0xFDF
 24929                           postinc2	equ	0xFDE
 24930                           postdec2	equ	0xFDD
 24931                           plusw2	equ	0xFDB
 24932                           fsr2h	equ	0xFDA
 24933                           fsr2l	equ	0xFD9
 24934                           status	equ	0xFD8
 24935                           
 24936 ;; *************** function _Port_CheckQuadType *****************
 24937 ;; Defined at:
 24938 ;;		line 126 in file "Library/Port.c"
 24939 ;; Parameters:    Size  Location     Type
 24940 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 24941 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 24942 ;;		 -> PortD(10), PortC(10), PortF(10), 
 24943 ;;  pQuad           1   49[BANK0 ] enum E6776
 24944 ;;  pDrive          1   50[BANK0 ] enum E6469
 24945 ;; Auto vars:     Size  Location     Type
 24946 ;;  Output          1   53[BANK0 ] enum E6475
 24947 ;;  Pair2           1   52[BANK0 ] enum E6760
 24948 ;;  Pair1           1   51[BANK0 ] enum E6760
 24949 ;; Return value:  Size  Location     Type
 24950 ;;                  1    wreg      enum E6475
 24951 ;; Registers used:
 24952 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 24953 ;; Tracked objects:
 24954 ;;		On entry : 0/0
 24955 ;;		On exit  : 0/0
 24956 ;;		Unchanged: 0/0
 24957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24962 ;;Total ram usage:        7 bytes
 24963 ;; Hardware stack levels used:    1
 24964 ;; Hardware stack levels required when called:   12
 24965 ;; This function calls:
 24966 ;;		_Port_CheckPairType
 24967 ;; This function is called by:
 24968 ;;		_Port_CheckPortType
 24969 ;;		_Port_SetQuadType
 24970 ;; This function uses a non-reentrant model
 24971 ;;
 24972                           
 24973                           	psect	text126
 24974  015420                     __ptext126:
 24975                           	opt stack 0
 24976  015420                     _Port_CheckQuadType:
 24977                           	opt stack 14
 24978                           
 24979                           ;Port.c: 128: ePinError Output = ePinErrorState;
 24980                           
 24981                           ;incstack = 0
 24982  015420  0E05               	movlw	5
 24983  015422  0100               	movlb	0	; () banked
 24984  015424  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 24985                           
 24986                           ; BSR set to: 0
 24987                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 24988  015426  0100               	movlb	0	; () banked
 24989  015428  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24990  01542A  0D02               	mullw	2
 24991  01542C  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 24992                           
 24993                           ; BSR set to: 0
 24994                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 24995  015430  0100               	movlb	0	; () banked
 24996  015432  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 24997  015434  0D02               	mullw	2
 24998  015436  28F3               	incf	prodl,w,c
 24999  015438  0100               	movlb	0	; () banked
 25000  01543A  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 25001                           
 25002                           ; BSR set to: 0
 25003                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 25004  01543C  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25005  015440  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25006  015444  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 25007  015448  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25008  01544C  ECB3  F0A8         	call	_Port_CheckPairType	;wreg free
 25009  015450  0100               	movlb	0	; () banked
 25010  015452  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 25011  015454  0100               	movlb	0	; () banked
 25012  015456  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25013  015458  A4D8               	btfss	status,2,c
 25014  01545A  D00C               	goto	l393
 25015                           
 25016                           ; BSR set to: 0
 25017                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 25018  01545C  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 25019  015460  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 25020  015464  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 25021  015468  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 25022  01546C  ECB3  F0A8         	call	_Port_CheckPairType	;wreg free
 25023  015470  0100               	movlb	0	; () banked
 25024  015472  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 25025  015474                     l393:
 25026                           
 25027                           ; BSR set to: 0
 25028                           ;Port.c: 136: return Output;
 25029                           
 25030                           ; BSR set to: 0
 25031  015474  0100               	movlb	0	; () banked
 25032  015476  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 25033  015478  0012               	return	
 25034  01547A                     __end_of_Port_CheckQuadType:
 25035                           	opt stack 0
 25036                           tosu	equ	0xFFF
 25037                           tosh	equ	0xFFE
 25038                           tosl	equ	0xFFD
 25039                           pclath	equ	0xFFA
 25040                           tblptru	equ	0xFF8
 25041                           tblptrh	equ	0xFF7
 25042                           tblptrl	equ	0xFF6
 25043                           tablat	equ	0xFF5
 25044                           prodh	equ	0xFF4
 25045                           prodl	equ	0xFF3
 25046                           intcon	equ	0xFF2
 25047                           postinc0	equ	0xFEE
 25048                           wreg	equ	0xFE8
 25049                           indf1	equ	0xFE7
 25050                           postdec1	equ	0xFE5
 25051                           fsr1h	equ	0xFE2
 25052                           fsr1l	equ	0xFE1
 25053                           indf2	equ	0xFDF
 25054                           postinc2	equ	0xFDE
 25055                           postdec2	equ	0xFDD
 25056                           plusw2	equ	0xFDB
 25057                           fsr2h	equ	0xFDA
 25058                           fsr2l	equ	0xFD9
 25059                           status	equ	0xFD8
 25060                           
 25061 ;; *************** function _Port_CheckPairType *****************
 25062 ;; Defined at:
 25063 ;;		line 112 in file "Library/Port.c"
 25064 ;; Parameters:    Size  Location     Type
 25065 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 25066 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25067 ;;		 -> PortD(10), PortC(10), PortF(10), 
 25068 ;;  pPair           1   40[BANK0 ] enum E6760
 25069 ;;  pDrive          1   41[BANK0 ] enum E6469
 25070 ;; Auto vars:     Size  Location     Type
 25071 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 25072 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25073 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25074 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25075 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25076 ;;  Output          1   44[BANK0 ] enum E6475
 25077 ;;  Pin2            1   43[BANK0 ] enum E6750
 25078 ;;  Pin1            1   42[BANK0 ] enum E6750
 25079 ;; Return value:  Size  Location     Type
 25080 ;;                  1    wreg      enum E6475
 25081 ;; Registers used:
 25082 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25083 ;; Tracked objects:
 25084 ;;		On entry : 0/0
 25085 ;;		On exit  : 0/0
 25086 ;;		Unchanged: 0/0
 25087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25088 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25089 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25090 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25091 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25092 ;;Total ram usage:        9 bytes
 25093 ;; Hardware stack levels used:    1
 25094 ;; Hardware stack levels required when called:   11
 25095 ;; This function calls:
 25096 ;;		_PortProperty_Valid
 25097 ;; This function is called by:
 25098 ;;		_Port_CheckQuadType
 25099 ;;		_Port_SetPairType
 25100 ;; This function uses a non-reentrant model
 25101 ;;
 25102                           
 25103                           	psect	text127
 25104  015166                     __ptext127:
 25105                           	opt stack 0
 25106  015166                     _Port_CheckPairType:
 25107                           	opt stack 14
 25108                           
 25109                           ;Port.c: 114: ePinError Output = ePinErrorState;
 25110                           
 25111                           ; BSR set to: 0
 25112                           ;incstack = 0
 25113  015166  0E05               	movlw	5
 25114  015168  0100               	movlb	0	; () banked
 25115  01516A  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 25116                           
 25117                           ; BSR set to: 0
 25118                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 25119  01516C  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 25120  015170  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 25121  015174  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 25122  015178  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 25123                           
 25124                           ; BSR set to: 0
 25125                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 25126  01517C  0100               	movlb	0	; () banked
 25127  01517E  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25128  015180  0D02               	mullw	2
 25129  015182  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 25130                           
 25131                           ; BSR set to: 0
 25132                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 25133  015186  0100               	movlb	0	; () banked
 25134  015188  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 25135  01518A  0D02               	mullw	2
 25136  01518C  28F3               	incf	prodl,w,c
 25137  01518E  0100               	movlb	0	; () banked
 25138  015190  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 25139                           
 25140                           ; BSR set to: 0
 25141                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 25142  015192  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25143  015196  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25144  01519A  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25145  01519E  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 25146  0151A2  ECCB  F0A5         	call	_PortProperty_Valid	;wreg free
 25147  0151A6  0100               	movlb	0	; () banked
 25148  0151A8  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 25149  0151AA  0100               	movlb	0	; () banked
 25150  0151AC  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 25151  0151AE  A4D8               	btfss	status,2,c
 25152  0151B0  D00C               	goto	l389
 25153                           
 25154                           ; BSR set to: 0
 25155                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 25156  0151B2  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 25157  0151B6  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 25158  0151BA  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 25159  0151BE  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 25160  0151C2  ECCB  F0A5         	call	_PortProperty_Valid	;wreg free
 25161  0151C6  0100               	movlb	0	; () banked
 25162  0151C8  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 25163  0151CA                     l389:
 25164                           
 25165                           ; BSR set to: 0
 25166                           ;Port.c: 124: return Output;
 25167                           
 25168                           ; BSR set to: 0
 25169  0151CA  0100               	movlb	0	; () banked
 25170  0151CC  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 25171  0151CE  0012               	return	
 25172  0151D0                     __end_of_Port_CheckPairType:
 25173                           	opt stack 0
 25174                           tosu	equ	0xFFF
 25175                           tosh	equ	0xFFE
 25176                           tosl	equ	0xFFD
 25177                           pclath	equ	0xFFA
 25178                           tblptru	equ	0xFF8
 25179                           tblptrh	equ	0xFF7
 25180                           tblptrl	equ	0xFF6
 25181                           tablat	equ	0xFF5
 25182                           prodh	equ	0xFF4
 25183                           prodl	equ	0xFF3
 25184                           intcon	equ	0xFF2
 25185                           postinc0	equ	0xFEE
 25186                           wreg	equ	0xFE8
 25187                           indf1	equ	0xFE7
 25188                           postdec1	equ	0xFE5
 25189                           fsr1h	equ	0xFE2
 25190                           fsr1l	equ	0xFE1
 25191                           indf2	equ	0xFDF
 25192                           postinc2	equ	0xFDE
 25193                           postdec2	equ	0xFDD
 25194                           plusw2	equ	0xFDB
 25195                           fsr2h	equ	0xFDA
 25196                           fsr2l	equ	0xFD9
 25197                           status	equ	0xFD8
 25198                           
 25199 ;; *************** function _PortProperty_Valid *****************
 25200 ;; Defined at:
 25201 ;;		line 220 in file "Library/Types.c"
 25202 ;; Parameters:    Size  Location     Type
 25203 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 25204 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25205 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25206 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25207 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25208 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 25209 ;;  pPin            1   18[BANK0 ] unsigned char 
 25210 ;; Auto vars:     Size  Location     Type
 25211 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 25212 ;;  Pair            1   37[BANK0 ] enum E6469
 25213 ;; Return value:  Size  Location     Type
 25214 ;;                  1    wreg      enum E6475
 25215 ;; Registers used:
 25216 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25217 ;; Tracked objects:
 25218 ;;		On entry : 0/0
 25219 ;;		On exit  : 0/0
 25220 ;;		Unchanged: 0/0
 25221 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25222 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25223 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25224 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25225 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25226 ;;Total ram usage:       23 bytes
 25227 ;; Hardware stack levels used:    1
 25228 ;; Hardware stack levels required when called:   10
 25229 ;; This function calls:
 25230 ;;		_Word_GetPair
 25231 ;; This function is called by:
 25232 ;;		_Port_CheckPairType
 25233 ;;		_Port_SetPinType
 25234 ;; This function uses a non-reentrant model
 25235 ;;
 25236                           
 25237                           	psect	text128
 25238  014B96                     __ptext128:
 25239                           	opt stack 0
 25240  014B96                     _PortProperty_Valid:
 25241                           	opt stack 17
 25242                           
 25243                           ;Types.c: 222: ePinDrive Pair;
 25244                           ;Types.c: 223: const ePinError Errors[4][4] =
 25245                           ;Types.c: 224: {
 25246                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 25247                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 25248                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 25249                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 25250                           ;Types.c: 230: };
 25251                           
 25252                           ; BSR set to: 0
 25253                           ;incstack = 0
 25254  014B96  0EA7               	movlw	low PortProperty_Valid@F6830
 25255  014B98  6EF6               	movwf	tblptrl,c
 25256  014B9A                     	if	1	;There is more than 1 active tblptr byte
 25257  014B9A  0EFD               	movlw	high PortProperty_Valid@F6830
 25258  014B9C  6EF7               	movwf	tblptrh,c
 25259  014B9E                     	endif
 25260  014B9E                     	if	1	;There are 3 active tblptr bytes
 25261  014B9E  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 25262  014BA0  6EF8               	movwf	tblptru,c
 25263  014BA2                     	endif
 25264  014BA2  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 25265  014BA6  0E0F               	movlw	15
 25266  014BA8                     u8320:
 25267  014BA8  0009               	tblrd		*+
 25268  014BAA  CFF5 FFDE          	movff	tablat,postinc2
 25269  014BAE  06E8               	decf	wreg,f,c
 25270  014BB0  E2FB               	bc	u8320
 25271                           
 25272                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 25273  014BB2  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 25274  014BB6  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 25275  014BBA  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 25276  014BBE  EC37  F0AD         	call	_Word_GetPair	;wreg free
 25277  014BC2  0100               	movlb	0	; () banked
 25278  014BC4  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 25279                           
 25280                           ; BSR set to: 0
 25281                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 25282  014BC6  0E04               	movlw	4
 25283  014BC8  0100               	movlb	0	; () banked
 25284  014BCA  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 25285  014BCC  D020               	goto	l819
 25286                           
 25287                           ; BSR set to: 0
 25288  014BCE  0E04               	movlw	4
 25289  014BD0  0100               	movlb	0	; () banked
 25290  014BD2  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 25291  014BD4  D01C               	goto	l819
 25292                           
 25293                           ; BSR set to: 0
 25294                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 25295  014BD6  0100               	movlb	0	; () banked
 25296  014BD8  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 25297  014BDA  0D04               	mullw	4
 25298  014BDC  0ECF               	movlw	low PortProperty_Valid@Errors
 25299  014BDE  0100               	movlb	0	; () banked
 25300  014BE0  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 25301  014BE2  0E00               	movlw	high PortProperty_Valid@Errors
 25302  014BE4  0100               	movlb	0	; () banked
 25303  014BE6  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 25304  014BE8  50F3               	movf	prodl,w,c
 25305  014BEA  0100               	movlb	0	; () banked
 25306  014BEC  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 25307  014BEE  50F4               	movf	prodh,w,c
 25308  014BF0  0100               	movlb	0	; () banked
 25309  014BF2  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 25310  014BF4  0100               	movlb	0	; () banked
 25311  014BF6  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 25312  014BF8  0D01               	mullw	1
 25313  014BFA  50F3               	movf	prodl,w,c
 25314  014BFC  0100               	movlb	0	; () banked
 25315  014BFE  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 25316  014C00  6ED9               	movwf	fsr2l,c
 25317  014C02  50F4               	movf	prodh,w,c
 25318  014C04  0100               	movlb	0	; () banked
 25319  014C06  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 25320  014C08  6EDA               	movwf	fsr2h,c
 25321  014C0A  50DF               	movf	indf2,w,c
 25322                           
 25323                           ; BSR set to: 0
 25324  014C0C  0012               	return	
 25325  014C0E                     l819:
 25326                           
 25327                           ; BSR set to: 0
 25328                           ;Types.c: 237: return ePinErrorState;
 25329                           
 25330                           ; BSR set to: 0
 25331  014C0E  0E05               	movlw	5
 25332  014C10  0012               	return	
 25333  014C12                     __end_of_PortProperty_Valid:
 25334                           	opt stack 0
 25335                           tosu	equ	0xFFF
 25336                           tosh	equ	0xFFE
 25337                           tosl	equ	0xFFD
 25338                           pclath	equ	0xFFA
 25339                           tblptru	equ	0xFF8
 25340                           tblptrh	equ	0xFF7
 25341                           tblptrl	equ	0xFF6
 25342                           tablat	equ	0xFF5
 25343                           prodh	equ	0xFF4
 25344                           prodl	equ	0xFF3
 25345                           intcon	equ	0xFF2
 25346                           postinc0	equ	0xFEE
 25347                           wreg	equ	0xFE8
 25348                           indf1	equ	0xFE7
 25349                           postdec1	equ	0xFE5
 25350                           fsr1h	equ	0xFE2
 25351                           fsr1l	equ	0xFE1
 25352                           indf2	equ	0xFDF
 25353                           postinc2	equ	0xFDE
 25354                           postdec2	equ	0xFDD
 25355                           plusw2	equ	0xFDB
 25356                           fsr2h	equ	0xFDA
 25357                           fsr2l	equ	0xFD9
 25358                           status	equ	0xFD8
 25359                           
 25360 ;; *************** function _Word_GetPair *****************
 25361 ;; Defined at:
 25362 ;;		line 156 in file "Library/Types.c"
 25363 ;; Parameters:    Size  Location     Type
 25364 ;;  pInput          2   12[BANK0 ] PTR struct Word
 25365 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 25366 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 25367 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 25368 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25369 ;;  pPair           1   14[BANK0 ] unsigned char 
 25370 ;; Auto vars:     Size  Location     Type
 25371 ;;		None
 25372 ;; Return value:  Size  Location     Type
 25373 ;;                  1    wreg      unsigned char 
 25374 ;; Registers used:
 25375 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25376 ;; Tracked objects:
 25377 ;;		On entry : 0/0
 25378 ;;		On exit  : 0/0
 25379 ;;		Unchanged: 0/0
 25380 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25381 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25382 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25383 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25384 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25385 ;;Total ram usage:        3 bytes
 25386 ;; Hardware stack levels used:    1
 25387 ;; Hardware stack levels required when called:    9
 25388 ;; This function calls:
 25389 ;;		_Byte_GetPair
 25390 ;; This function is called by:
 25391 ;;		_Port_Init
 25392 ;;		_Port_SetPin
 25393 ;;		_Port_Set
 25394 ;;		_PortProperty_Valid
 25395 ;;		_Port_SetPair
 25396 ;;		_Port_SetQuad
 25397 ;; This function uses a non-reentrant model
 25398 ;;
 25399                           
 25400                           	psect	text129
 25401  015A6E                     __ptext129:
 25402                           	opt stack 0
 25403  015A6E                     _Word_GetPair:
 25404                           	opt stack 17
 25405                           
 25406                           ;Types.c: 158: if (pPair >= 4)
 25407                           
 25408                           ; BSR set to: 0
 25409                           ;incstack = 0
 25410  015A6E  0E03               	movlw	3
 25411  015A70  0100               	movlb	0	; () banked
 25412  015A72  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 25413  015A74  D012               	goto	l781
 25414                           
 25415                           ; BSR set to: 0
 25416                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 25417  015A76  0E01               	movlw	1
 25418  015A78  0100               	movlb	0	; () banked
 25419  015A7A  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 25420  015A7C  0100               	movlb	0	; () banked
 25421  015A7E  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 25422  015A80  0E00               	movlw	0
 25423  015A82  0100               	movlb	0	; () banked
 25424  015A84  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 25425  015A86  0100               	movlb	0	; () banked
 25426  015A88  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 25427  015A8A  0100               	movlb	0	; () banked
 25428  015A8C  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 25429  015A8E  0FFC               	addlw	252
 25430  015A90  0100               	movlb	0	; () banked
 25431  015A92  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 25432  015A94  EC8A  F0AF         	call	_Byte_GetPair	;wreg free
 25433  015A98  0012               	return	
 25434  015A9A                     l781:
 25435                           
 25436                           ;Types.c: 160: else
 25437                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 25438  015A9A  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 25439  015A9E  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 25440  015AA2  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 25441  015AA6  EC8A  F0AF         	call	_Byte_GetPair	;wreg free
 25442  015AAA  0012               	return	
 25443  015AAC                     __end_of_Word_GetPair:
 25444                           	opt stack 0
 25445                           tosu	equ	0xFFF
 25446                           tosh	equ	0xFFE
 25447                           tosl	equ	0xFFD
 25448                           pclath	equ	0xFFA
 25449                           tblptru	equ	0xFF8
 25450                           tblptrh	equ	0xFF7
 25451                           tblptrl	equ	0xFF6
 25452                           tablat	equ	0xFF5
 25453                           prodh	equ	0xFF4
 25454                           prodl	equ	0xFF3
 25455                           intcon	equ	0xFF2
 25456                           postinc0	equ	0xFEE
 25457                           wreg	equ	0xFE8
 25458                           indf1	equ	0xFE7
 25459                           postdec1	equ	0xFE5
 25460                           fsr1h	equ	0xFE2
 25461                           fsr1l	equ	0xFE1
 25462                           indf2	equ	0xFDF
 25463                           postinc2	equ	0xFDE
 25464                           postdec2	equ	0xFDD
 25465                           plusw2	equ	0xFDB
 25466                           fsr2h	equ	0xFDA
 25467                           fsr2l	equ	0xFD9
 25468                           status	equ	0xFD8
 25469                           
 25470 ;; *************** function _Byte_GetPair *****************
 25471 ;; Defined at:
 25472 ;;		line 87 in file "Library/Types.c"
 25473 ;; Parameters:    Size  Location     Type
 25474 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 25475 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 25476 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 25477 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 25478 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 25479 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 25480 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 25481 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 25482 ;;		 -> NULL(0), 
 25483 ;;  pPair           1   11[BANK0 ] unsigned char 
 25484 ;; Auto vars:     Size  Location     Type
 25485 ;;		None
 25486 ;; Return value:  Size  Location     Type
 25487 ;;                  1    wreg      unsigned char 
 25488 ;; Registers used:
 25489 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25490 ;; Tracked objects:
 25491 ;;		On entry : 0/0
 25492 ;;		On exit  : 0/0
 25493 ;;		Unchanged: 0/0
 25494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25495 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25496 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25497 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25498 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25499 ;;Total ram usage:        3 bytes
 25500 ;; Hardware stack levels used:    1
 25501 ;; Hardware stack levels required when called:    8
 25502 ;; This function calls:
 25503 ;;		_Byte_GetZone
 25504 ;; This function is called by:
 25505 ;;		_Word_GetPair
 25506 ;; This function uses a non-reentrant model
 25507 ;;
 25508                           
 25509                           	psect	text130
 25510  015F14                     __ptext130:
 25511                           	opt stack 0
 25512  015F14                     _Byte_GetPair:
 25513                           	opt stack 17
 25514                           
 25515                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 25516                           
 25517                           ;incstack = 0
 25518  015F14  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 25519  015F18  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 25520  015F1C  0E04               	movlw	4
 25521  015F1E  0100               	movlb	0	; () banked
 25522  015F20  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 25523  015F22  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 25524  015F26  0E02               	movlw	2
 25525  015F28  0100               	movlb	0	; () banked
 25526  015F2A  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 25527  015F2C  EC51  F0A3         	call	_Byte_GetZone	;wreg free
 25528  015F30  0012               	return	
 25529  015F32                     __end_of_Byte_GetPair:
 25530                           	opt stack 0
 25531                           tosu	equ	0xFFF
 25532                           tosh	equ	0xFFE
 25533                           tosl	equ	0xFFD
 25534                           pclath	equ	0xFFA
 25535                           tblptru	equ	0xFF8
 25536                           tblptrh	equ	0xFF7
 25537                           tblptrl	equ	0xFF6
 25538                           tablat	equ	0xFF5
 25539                           prodh	equ	0xFF4
 25540                           prodl	equ	0xFF3
 25541                           intcon	equ	0xFF2
 25542                           postinc0	equ	0xFEE
 25543                           wreg	equ	0xFE8
 25544                           indf1	equ	0xFE7
 25545                           postdec1	equ	0xFE5
 25546                           fsr1h	equ	0xFE2
 25547                           fsr1l	equ	0xFE1
 25548                           indf2	equ	0xFDF
 25549                           postinc2	equ	0xFDE
 25550                           postdec2	equ	0xFDD
 25551                           plusw2	equ	0xFDB
 25552                           fsr2h	equ	0xFDA
 25553                           fsr2l	equ	0xFD9
 25554                           status	equ	0xFD8
 25555                           
 25556 ;; *************** function _Byte_GetZone *****************
 25557 ;; Defined at:
 25558 ;;		line 64 in file "Library/Types.c"
 25559 ;; Parameters:    Size  Location     Type
 25560 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 25561 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 25562 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 25563 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 25564 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 25565 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 25566 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 25567 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 25568 ;;		 -> NULL(0), 
 25569 ;;  pMax            1    2[BANK0 ] unsigned char 
 25570 ;;  pChunk          1    3[BANK0 ] unsigned char 
 25571 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 25572 ;; Auto vars:     Size  Location     Type
 25573 ;;  Output          1    8[BANK0 ] unsigned char 
 25574 ;;  Offset          1    7[BANK0 ] unsigned char 
 25575 ;;  MASK            1    6[BANK0 ] unsigned char 
 25576 ;; Return value:  Size  Location     Type
 25577 ;;                  1    wreg      unsigned char 
 25578 ;; Registers used:
 25579 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 25580 ;; Tracked objects:
 25581 ;;		On entry : 0/0
 25582 ;;		On exit  : 0/0
 25583 ;;		Unchanged: 0/0
 25584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25585 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25586 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25587 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25588 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25589 ;;Total ram usage:        9 bytes
 25590 ;; Hardware stack levels used:    1
 25591 ;; Hardware stack levels required when called:    7
 25592 ;; This function calls:
 25593 ;;		Nothing
 25594 ;; This function is called by:
 25595 ;;		_Byte_GetPair
 25596 ;;		_Byte_GetTriple
 25597 ;;		_Byte_GetQuad
 25598 ;; This function uses a non-reentrant model
 25599 ;;
 25600                           
 25601                           	psect	text131
 25602  0146A2                     __ptext131:
 25603                           	opt stack 0
 25604  0146A2                     _Byte_GetZone:
 25605                           	opt stack 17
 25606                           
 25607                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 25608                           
 25609                           ;incstack = 0
 25610  0146A2  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 25611  0146A6  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 25612  0146AA  0E00               	movlw	low (__mediumconst shr (0+16))
 25613  0146AC  6EF8               	movwf	tblptru,c
 25614  0146AE  0E0F               	movlw	(high __ramtop+-1)
 25615  0146B0  64F7               	cpfsgt	tblptrh,c
 25616  0146B2  D003               	bra	u8287
 25617  0146B4  0008               	tblrd		*
 25618  0146B6  50F5               	movf	tablat,w,c
 25619  0146B8  D005               	bra	u8280
 25620  0146BA                     u8287:
 25621  0146BA  CFF6 FFE9          	movff	tblptrl,fsr0l
 25622  0146BE  CFF7 FFEA          	movff	tblptrh,fsr0h
 25623  0146C2  50EF               	movf	indf0,w,c
 25624  0146C4                     u8280:
 25625  0146C4  0100               	movlb	0	; () banked
 25626  0146C6  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 25627                           
 25628                           ; BSR set to: 0
 25629                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 25630  0146C8  0100               	movlb	0	; () banked
 25631  0146CA  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 25632  0146CC  0D01               	mullw	1
 25633  0146CE  0EC1               	movlw	low _MASKS
 25634  0146D0  24F3               	addwf	prodl,w,c
 25635  0146D2  6EF6               	movwf	tblptrl,c
 25636  0146D4  0EFD               	movlw	high _MASKS
 25637  0146D6  20F4               	addwfc	prodh,w,c
 25638  0146D8  6EF7               	movwf	tblptrh,c
 25639  0146DA                     	if	1	;There are 3 active tblptr bytes
 25640  0146DA  6AF8               	clrf	tblptru,c
 25641  0146DC  0E00               	movlw	low (__mediumconst shr (0+16))
 25642  0146DE  22F8               	addwfc	tblptru,f,c
 25643  0146E0                     	endif
 25644  0146E0  0008               	tblrd		*
 25645  0146E2  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 25646                           
 25647                           ; BSR set to: 0
 25648                           ;Types.c: 68: UINT8 Offset = 0;
 25649  0146E6  0E00               	movlw	0
 25650  0146E8  0100               	movlb	0	; () banked
 25651  0146EA  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 25652                           
 25653                           ;Types.c: 70: while (pChunk >= pMax)
 25654  0146EC  D006               	goto	l732
 25655  0146EE                     
 25656                           ; BSR set to: 0
 25657                           ;Types.c: 71: {
 25658                           ;Types.c: 72: pChunk -= pMax;
 25659                           
 25660                           ; BSR set to: 0
 25661  0146EE  0100               	movlb	0	; () banked
 25662  0146F0  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 25663  0146F2  0100               	movlb	0	; () banked
 25664  0146F4  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 25665                           
 25666                           ; BSR set to: 0
 25667                           ;Types.c: 73: Offset += 1;
 25668  0146F6  0100               	movlb	0	; () banked
 25669  0146F8  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 25670  0146FA                     l732:
 25671                           
 25672                           ; BSR set to: 0
 25673                           
 25674                           ; BSR set to: 0
 25675  0146FA  0100               	movlb	0	; () banked
 25676  0146FC  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 25677  0146FE  0100               	movlb	0	; () banked
 25678  014700  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 25679  014702  B0D8               	btfsc	status,0,c
 25680  014704  D7F4               	goto	l733
 25681                           
 25682                           ; BSR set to: 0
 25683                           ;Types.c: 74: }
 25684                           ;Types.c: 75: pChunk *= pChunkSize;
 25685                           
 25686                           ; BSR set to: 0
 25687  014706  0100               	movlb	0	; () banked
 25688  014708  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 25689  01470A  0100               	movlb	0	; () banked
 25690  01470C  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 25691  01470E  50F3               	movf	prodl,w,c
 25692  014710  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 25693                           
 25694                           ; BSR set to: 0
 25695                           ;Types.c: 76: pChunk += Offset;
 25696  014712  0100               	movlb	0	; () banked
 25697  014714  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 25698  014716  0100               	movlb	0	; () banked
 25699  014718  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 25700                           
 25701                           ; BSR set to: 0
 25702                           ;Types.c: 78: Output >>= pChunk;
 25703  01471A  0100               	movlb	0	; () banked
 25704  01471C  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 25705  01471E  0100               	movlb	0	; () banked
 25706  014720  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 25707  014722  D003               	goto	u8300
 25708  014724                     u8305:
 25709  014724  0100               	movlb	0	; () banked
 25710  014726  90D8               	bcf	status,0,c
 25711  014728  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 25712  01472A                     u8300:
 25713  01472A  0100               	movlb	0	; () banked
 25714  01472C  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 25715  01472E  D7FA               	goto	u8305
 25716                           
 25717                           ;Types.c: 79: Output &= MASK;
 25718  014730  0100               	movlb	0	; () banked
 25719  014732  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 25720  014734  0100               	movlb	0	; () banked
 25721  014736  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 25722                           
 25723                           ; BSR set to: 0
 25724                           ;Types.c: 80: return Output;
 25725  014738  0100               	movlb	0	; () banked
 25726  01473A  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 25727  01473C  0012               	return	
 25728  01473E                     __end_of_Byte_GetZone:
 25729                           	opt stack 0
 25730                           tosu	equ	0xFFF
 25731                           tosh	equ	0xFFE
 25732                           tosl	equ	0xFFD
 25733                           pclath	equ	0xFFA
 25734                           tblptru	equ	0xFF8
 25735                           tblptrh	equ	0xFF7
 25736                           tblptrl	equ	0xFF6
 25737                           tablat	equ	0xFF5
 25738                           prodh	equ	0xFF4
 25739                           prodl	equ	0xFF3
 25740                           intcon	equ	0xFF2
 25741                           indf0	equ	0xFEF
 25742                           postinc0	equ	0xFEE
 25743                           fsr0h	equ	0xFEA
 25744                           fsr0l	equ	0xFE9
 25745                           wreg	equ	0xFE8
 25746                           indf1	equ	0xFE7
 25747                           postdec1	equ	0xFE5
 25748                           fsr1h	equ	0xFE2
 25749                           fsr1l	equ	0xFE1
 25750                           indf2	equ	0xFDF
 25751                           postinc2	equ	0xFDE
 25752                           postdec2	equ	0xFDD
 25753                           plusw2	equ	0xFDB
 25754                           fsr2h	equ	0xFDA
 25755                           fsr2l	equ	0xFD9
 25756                           status	equ	0xFD8
 25757                           
 25758 ;; *************** function _Byte_SetQuad *****************
 25759 ;; Defined at:
 25760 ;;		line 101 in file "Library/Types.c"
 25761 ;; Parameters:    Size  Location     Type
 25762 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 25763 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 25764 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 25765 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 25766 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 25767 ;;		 -> NULL(0), 
 25768 ;;  pQuad           1   13[BANK0 ] unsigned char 
 25769 ;;  pValue          1   14[BANK0 ] unsigned char 
 25770 ;; Auto vars:     Size  Location     Type
 25771 ;;		None
 25772 ;; Return value:  Size  Location     Type
 25773 ;;                  1    wreg      void 
 25774 ;; Registers used:
 25775 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 25776 ;; Tracked objects:
 25777 ;;		On entry : 0/0
 25778 ;;		On exit  : 0/0
 25779 ;;		Unchanged: 0/0
 25780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25781 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25782 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25783 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25784 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25785 ;;Total ram usage:        4 bytes
 25786 ;; Hardware stack levels used:    1
 25787 ;; Hardware stack levels required when called:    8
 25788 ;; This function calls:
 25789 ;;		_Byte_SetZone
 25790 ;; This function is called by:
 25791 ;;		_Port_SetQuadType
 25792 ;;		_SPI_Init
 25793 ;;		_SPI_MinSpeed
 25794 ;;		_SPI_MaxSpeed
 25795 ;;		_Port_SetQuad
 25796 ;;		_Word_SetQuad
 25797 ;;		_I2C_Init
 25798 ;; This function uses a non-reentrant model
 25799 ;;
 25800                           
 25801                           	psect	text132
 25802  015E00                     __ptext132:
 25803                           	opt stack 0
 25804  015E00                     _Byte_SetQuad:
 25805                           	opt stack 19
 25806                           
 25807                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 25808                           
 25809                           ; BSR set to: 0
 25810                           ;incstack = 0
 25811  015E00  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 25812  015E04  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 25813  015E08  0E02               	movlw	2
 25814  015E0A  0100               	movlb	0	; () banked
 25815  015E0C  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 25816  015E0E  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 25817  015E12  0E04               	movlw	4
 25818  015E14  0100               	movlb	0	; () banked
 25819  015E16  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 25820  015E18  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 25821  015E1C  EC01  F0A0         	call	_Byte_SetZone	;wreg free
 25822  015E20  0012               	return		;funcret
 25823  015E22                     __end_of_Byte_SetQuad:
 25824                           	opt stack 0
 25825                           tosu	equ	0xFFF
 25826                           tosh	equ	0xFFE
 25827                           tosl	equ	0xFFD
 25828                           pclath	equ	0xFFA
 25829                           tblptru	equ	0xFF8
 25830                           tblptrh	equ	0xFF7
 25831                           tblptrl	equ	0xFF6
 25832                           tablat	equ	0xFF5
 25833                           prodh	equ	0xFF4
 25834                           prodl	equ	0xFF3
 25835                           intcon	equ	0xFF2
 25836                           indf0	equ	0xFEF
 25837                           postinc0	equ	0xFEE
 25838                           fsr0h	equ	0xFEA
 25839                           fsr0l	equ	0xFE9
 25840                           wreg	equ	0xFE8
 25841                           indf1	equ	0xFE7
 25842                           postdec1	equ	0xFE5
 25843                           fsr1h	equ	0xFE2
 25844                           fsr1l	equ	0xFE1
 25845                           indf2	equ	0xFDF
 25846                           postinc2	equ	0xFDE
 25847                           postdec2	equ	0xFDD
 25848                           plusw2	equ	0xFDB
 25849                           fsr2h	equ	0xFDA
 25850                           fsr2l	equ	0xFD9
 25851                           status	equ	0xFD8
 25852                           
 25853 ;; *************** function _Byte_SetZone *****************
 25854 ;; Defined at:
 25855 ;;		line 47 in file "Library/Types.c"
 25856 ;; Parameters:    Size  Location     Type
 25857 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 25858 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 25859 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 25860 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 25861 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 25862 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 25863 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 25864 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 25865 ;;		 -> PortC(10), PortF(10), NULL(0), 
 25866 ;;  pMax            1    2[BANK0 ] unsigned char 
 25867 ;;  pChunk          1    3[BANK0 ] unsigned char 
 25868 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 25869 ;;  pValue          1    5[BANK0 ] unsigned char 
 25870 ;; Auto vars:     Size  Location     Type
 25871 ;;  MASK            1   10[BANK0 ] unsigned char 
 25872 ;;  Offset          1    9[BANK0 ] unsigned char 
 25873 ;; Return value:  Size  Location     Type
 25874 ;;                  1    wreg      void 
 25875 ;; Registers used:
 25876 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 25877 ;; Tracked objects:
 25878 ;;		On entry : 0/0
 25879 ;;		On exit  : 0/0
 25880 ;;		Unchanged: 0/0
 25881 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25882 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25883 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25884 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25885 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25886 ;;Total ram usage:       11 bytes
 25887 ;; Hardware stack levels used:    1
 25888 ;; Hardware stack levels required when called:    7
 25889 ;; This function calls:
 25890 ;;		Nothing
 25891 ;; This function is called by:
 25892 ;;		_Byte_SetPair
 25893 ;;		_Byte_SetQuad
 25894 ;;		_Byte_SetTriple
 25895 ;; This function uses a non-reentrant model
 25896 ;;
 25897                           
 25898                           	psect	text133
 25899  014002                     __ptext133:
 25900                           	opt stack 0
 25901  014002                     _Byte_SetZone:
 25902                           	opt stack 18
 25903                           
 25904                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 25905                           
 25906                           ;incstack = 0
 25907  014002  0100               	movlb	0	; () banked
 25908  014004  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 25909  014006  0D01               	mullw	1
 25910  014008  0EC1               	movlw	low _MASKS
 25911  01400A  24F3               	addwf	prodl,w,c
 25912  01400C  6EF6               	movwf	tblptrl,c
 25913  01400E  0EFD               	movlw	high _MASKS
 25914  014010  20F4               	addwfc	prodh,w,c
 25915  014012  6EF7               	movwf	tblptrh,c
 25916  014014                     	if	1	;There are 3 active tblptr bytes
 25917  014014  6AF8               	clrf	tblptru,c
 25918  014016  0E00               	movlw	low (__mediumconst shr (0+16))
 25919  014018  22F8               	addwfc	tblptru,f,c
 25920  01401A                     	endif
 25921  01401A  0008               	tblrd		*
 25922  01401C  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 25923                           
 25924                           ; BSR set to: 0
 25925                           ;Types.c: 50: UINT8 Offset = 0;
 25926  014020  0E00               	movlw	0
 25927  014022  0100               	movlb	0	; () banked
 25928  014024  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 25929                           
 25930                           ;Types.c: 52: while (pChunk >= pMax)
 25931  014026  D006               	goto	l726
 25932  014028                     
 25933                           ; BSR set to: 0
 25934                           ;Types.c: 53: {
 25935                           ;Types.c: 54: pChunk -= pMax;
 25936                           
 25937                           ; BSR set to: 0
 25938  014028  0100               	movlb	0	; () banked
 25939  01402A  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 25940  01402C  0100               	movlb	0	; () banked
 25941  01402E  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 25942                           
 25943                           ; BSR set to: 0
 25944                           ;Types.c: 55: Offset += 1;
 25945  014030  0100               	movlb	0	; () banked
 25946  014032  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 25947  014034                     l726:
 25948                           
 25949                           ; BSR set to: 0
 25950                           
 25951                           ; BSR set to: 0
 25952  014034  0100               	movlb	0	; () banked
 25953  014036  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 25954  014038  0100               	movlb	0	; () banked
 25955  01403A  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 25956  01403C  B0D8               	btfsc	status,0,c
 25957  01403E  D7F4               	goto	l727
 25958                           
 25959                           ; BSR set to: 0
 25960                           ;Types.c: 56: }
 25961                           ;Types.c: 57: pChunk *= pChunkSize;
 25962                           
 25963                           ; BSR set to: 0
 25964  014040  0100               	movlb	0	; () banked
 25965  014042  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 25966  014044  0100               	movlb	0	; () banked
 25967  014046  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 25968  014048  50F3               	movf	prodl,w,c
 25969  01404A  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 25970                           
 25971                           ; BSR set to: 0
 25972                           ;Types.c: 58: pChunk += Offset;
 25973  01404C  0100               	movlb	0	; () banked
 25974  01404E  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 25975  014050  0100               	movlb	0	; () banked
 25976  014052  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 25977                           
 25978                           ; BSR set to: 0
 25979                           ;Types.c: 60: pValue &= MASK;
 25980  014054  0100               	movlb	0	; () banked
 25981  014056  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 25982  014058  0100               	movlb	0	; () banked
 25983  01405A  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 25984                           
 25985                           ; BSR set to: 0
 25986                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 25987  01405C  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 25988  014060  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 25989  014064  0100               	movlb	0	; () banked
 25990  014066  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 25991  014068  D003               	goto	u8384
 25992  01406A                     u8385:
 25993  01406A  0100               	movlb	0	; () banked
 25994  01406C  90D8               	bcf	status,0,c
 25995  01406E  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 25996  014070                     u8384:
 25997  014070  0100               	movlb	0	; () banked
 25998  014072  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 25999  014074  D7FA               	goto	u8385
 26000  014076  0100               	movlb	0	; () banked
 26001  014078  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26002  01407A  0AFF               	xorlw	255
 26003  01407C  0100               	movlb	0	; () banked
 26004  01407E  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 26005  014080  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26006  014084  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26007  014088  0100               	movlb	0	; () banked
 26008  01408A  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 26009  01408C  16DF               	andwf	indf2,f,c
 26010                           
 26011                           ; BSR set to: 0
 26012                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 26013  01408E  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 26014  014092  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 26015  014096  0100               	movlb	0	; () banked
 26016  014098  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 26017  01409A  D003               	goto	u8394
 26018  01409C                     u8395:
 26019  01409C  0100               	movlb	0	; () banked
 26020  01409E  90D8               	bcf	status,0,c
 26021  0140A0  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 26022  0140A2                     u8394:
 26023  0140A2  0100               	movlb	0	; () banked
 26024  0140A4  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 26025  0140A6  D7FA               	goto	u8395
 26026  0140A8  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 26027  0140AC  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 26028  0140B0  0100               	movlb	0	; () banked
 26029  0140B2  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 26030  0140B4  12DF               	iorwf	indf2,f,c
 26031                           
 26032                           ; BSR set to: 0
 26033  0140B6  0012               	return		;funcret
 26034  0140B8                     __end_of_Byte_SetZone:
 26035                           	opt stack 0
 26036                           tosu	equ	0xFFF
 26037                           tosh	equ	0xFFE
 26038                           tosl	equ	0xFFD
 26039                           pclath	equ	0xFFA
 26040                           tblptru	equ	0xFF8
 26041                           tblptrh	equ	0xFF7
 26042                           tblptrl	equ	0xFF6
 26043                           tablat	equ	0xFF5
 26044                           prodh	equ	0xFF4
 26045                           prodl	equ	0xFF3
 26046                           intcon	equ	0xFF2
 26047                           indf0	equ	0xFEF
 26048                           postinc0	equ	0xFEE
 26049                           fsr0h	equ	0xFEA
 26050                           fsr0l	equ	0xFE9
 26051                           wreg	equ	0xFE8
 26052                           indf1	equ	0xFE7
 26053                           postdec1	equ	0xFE5
 26054                           fsr1h	equ	0xFE2
 26055                           fsr1l	equ	0xFE1
 26056                           indf2	equ	0xFDF
 26057                           postinc2	equ	0xFDE
 26058                           postdec2	equ	0xFDD
 26059                           plusw2	equ	0xFDB
 26060                           fsr2h	equ	0xFDA
 26061                           fsr2l	equ	0xFD9
 26062                           status	equ	0xFD8
 26063                           
 26064 ;; *************** function _Console_Init *****************
 26065 ;; Defined at:
 26066 ;;		line 157 in file "Library/Console.c"
 26067 ;; Parameters:    Size  Location     Type
 26068 ;;		None
 26069 ;; Auto vars:     Size  Location     Type
 26070 ;;  y               1    3[BANK0 ] unsigned char 
 26071 ;;  x               1    2[BANK0 ] unsigned char 
 26072 ;; Return value:  Size  Location     Type
 26073 ;;                  1    wreg      void 
 26074 ;; Registers used:
 26075 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26076 ;; Tracked objects:
 26077 ;;		On entry : 0/0
 26078 ;;		On exit  : 0/0
 26079 ;;		Unchanged: 0/0
 26080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26081 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26082 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26083 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26084 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26085 ;;Total ram usage:        4 bytes
 26086 ;; Hardware stack levels used:    1
 26087 ;; Hardware stack levels required when called:    7
 26088 ;; This function calls:
 26089 ;;		Nothing
 26090 ;; This function is called by:
 26091 ;;		_init
 26092 ;; This function uses a non-reentrant model
 26093 ;;
 26094                           
 26095                           	psect	text134
 26096  0148F4                     __ptext134:
 26097                           	opt stack 0
 26098  0148F4                     _Console_Init:
 26099                           	opt stack 22
 26100                           
 26101                           ;Console.c: 160: lBufferX = 0;
 26102                           
 26103                           ; BSR set to: 0
 26104                           ;incstack = 0
 26105  0148F4  0E00               	movlw	0
 26106  0148F6  0100               	movlb	0	; () banked
 26107  0148F8  6F95               	movwf	_lBufferX& (0+255),b
 26108                           
 26109                           ;Console.c: 161: lBufferY = 0;
 26110  0148FA  0E00               	movlw	0
 26111  0148FC  0100               	movlb	0	; () banked
 26112  0148FE  6F94               	movwf	_lBufferY& (0+255),b
 26113                           
 26114                           ;Console.c: 163: UINT8 x, y;
 26115                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 26116  014900  0E00               	movlw	0
 26117  014902  0100               	movlb	0	; () banked
 26118  014904  6FBC               	movwf	Console_Init@x& (0+255),b
 26119  014906                     l13769:
 26120                           
 26121                           ; BSR set to: 0
 26122  014906  0E13               	movlw	19
 26123  014908  0100               	movlb	0	; () banked
 26124  01490A  65BC               	cpfsgt	Console_Init@x& (0+255),b
 26125  01490C  D001               	goto	l976
 26126  01490E  0012               	return	
 26127  014910                     l976:
 26128                           
 26129                           ; BSR set to: 0
 26130                           ;Console.c: 165: {
 26131                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 26132                           
 26133                           ; BSR set to: 0
 26134  014910  0E00               	movlw	0
 26135  014912  0100               	movlb	0	; () banked
 26136  014914  6FBD               	movwf	Console_Init@y& (0+255),b
 26137  014916                     l13775:
 26138                           
 26139                           ; BSR set to: 0
 26140  014916  0E0E               	movlw	14
 26141  014918  0100               	movlb	0	; () banked
 26142  01491A  65BD               	cpfsgt	Console_Init@y& (0+255),b
 26143  01491C  D001               	goto	l978
 26144  01491E  D02C               	goto	u10450
 26145  014920                     l978:
 26146                           
 26147                           ; BSR set to: 0
 26148                           ;Console.c: 167: {
 26149                           ;Console.c: 168: lBuffer[y][x] = '\0';
 26150                           
 26151                           ; BSR set to: 0
 26152  014920  0100               	movlb	0	; () banked
 26153  014922  51BD               	movf	Console_Init@y& (0+255),w,b
 26154  014924  0D14               	mullw	20
 26155  014926  0EAA               	movlw	low _lBuffer
 26156  014928  0100               	movlb	0	; () banked
 26157  01492A  6FBA               	movwf	??_Console_Init& (0+255),b
 26158  01492C  0E04               	movlw	high _lBuffer
 26159  01492E  0100               	movlb	0	; () banked
 26160  014930  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 26161  014932  50F3               	movf	prodl,w,c
 26162  014934  0100               	movlb	0	; () banked
 26163  014936  27BA               	addwf	??_Console_Init& (0+255),f,b
 26164  014938  50F4               	movf	prodh,w,c
 26165  01493A  0100               	movlb	0	; () banked
 26166  01493C  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 26167  01493E  0100               	movlb	0	; () banked
 26168  014940  51BC               	movf	Console_Init@x& (0+255),w,b
 26169  014942  0D01               	mullw	1
 26170  014944  50F3               	movf	prodl,w,c
 26171  014946  0100               	movlb	0	; () banked
 26172  014948  25BA               	addwf	??_Console_Init& (0+255),w,b
 26173  01494A  6ED9               	movwf	fsr2l,c
 26174  01494C  50F4               	movf	prodh,w,c
 26175  01494E  0100               	movlb	0	; () banked
 26176  014950  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 26177  014952  6EDA               	movwf	fsr2h,c
 26178  014954  0E00               	movlw	0
 26179  014956  6EDF               	movwf	indf2,c
 26180                           
 26181                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 26182  014958  0100               	movlb	0	; () banked
 26183  01495A  51BD               	movf	Console_Init@y& (0+255),w,b
 26184  01495C  0D02               	mullw	2
 26185  01495E  0E00               	movlw	low _lCBuffer
 26186  014960  24F3               	addwf	prodl,w,c
 26187  014962  6ED9               	movwf	fsr2l,c
 26188  014964  0E03               	movlw	high _lCBuffer
 26189  014966  20F4               	addwfc	prodh,w,c
 26190  014968  6EDA               	movwf	fsr2h,c
 26191  01496A  0EFF               	movlw	255
 26192  01496C  6EDE               	movwf	postinc2,c
 26193  01496E  0EFF               	movlw	255
 26194  014970  6EDD               	movwf	postdec2,c
 26195                           
 26196                           ; BSR set to: 0
 26197  014972  0100               	movlb	0	; () banked
 26198  014974  2BBD               	incf	Console_Init@y& (0+255),f,b
 26199  014976  D7CF               	goto	l13775
 26200  014978                     u10450:
 26201                           
 26202                           ; BSR set to: 0
 26203                           
 26204                           ; BSR set to: 0
 26205  014978  0100               	movlb	0	; () banked
 26206  01497A  2BBC               	incf	Console_Init@x& (0+255),f,b
 26207  01497C  D7C4               	goto	l13769
 26208  01497E                     __end_of_Console_Init:
 26209                           	opt stack 0
 26210                           tosu	equ	0xFFF
 26211                           tosh	equ	0xFFE
 26212                           tosl	equ	0xFFD
 26213                           pclath	equ	0xFFA
 26214                           tblptru	equ	0xFF8
 26215                           tblptrh	equ	0xFF7
 26216                           tblptrl	equ	0xFF6
 26217                           tablat	equ	0xFF5
 26218                           prodh	equ	0xFF4
 26219                           prodl	equ	0xFF3
 26220                           intcon	equ	0xFF2
 26221                           indf0	equ	0xFEF
 26222                           postinc0	equ	0xFEE
 26223                           fsr0h	equ	0xFEA
 26224                           fsr0l	equ	0xFE9
 26225                           wreg	equ	0xFE8
 26226                           indf1	equ	0xFE7
 26227                           postdec1	equ	0xFE5
 26228                           fsr1h	equ	0xFE2
 26229                           fsr1l	equ	0xFE1
 26230                           indf2	equ	0xFDF
 26231                           postinc2	equ	0xFDE
 26232                           postdec2	equ	0xFDD
 26233                           plusw2	equ	0xFDB
 26234                           fsr2h	equ	0xFDA
 26235                           fsr2l	equ	0xFD9
 26236                           status	equ	0xFD8
 26237                           
 26238 ;; *************** function _ADC_Start *****************
 26239 ;; Defined at:
 26240 ;;		line 114 in file "Library/ADC.c"
 26241 ;; Parameters:    Size  Location     Type
 26242 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 26243 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26244 ;;		 -> NULL(0), 
 26245 ;; Auto vars:     Size  Location     Type
 26246 ;;		None
 26247 ;; Return value:  Size  Location     Type
 26248 ;;                  1    wreg      void 
 26249 ;; Registers used:
 26250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26251 ;; Tracked objects:
 26252 ;;		On entry : 0/0
 26253 ;;		On exit  : 0/0
 26254 ;;		Unchanged: 0/0
 26255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26256 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26258 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26259 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26260 ;;Total ram usage:        4 bytes
 26261 ;; Hardware stack levels used:    1
 26262 ;; Hardware stack levels required when called:    8
 26263 ;; This function calls:
 26264 ;;		_ADC_Off
 26265 ;;		_ADC_On
 26266 ;;		_ADC_SetChannel
 26267 ;; This function is called by:
 26268 ;;		_init
 26269 ;;		_mode1
 26270 ;;		_FunctADC
 26271 ;; This function uses a non-reentrant model
 26272 ;;
 26273                           
 26274                           	psect	text135
 26275  014A90                     __ptext135:
 26276                           	opt stack 0
 26277  014A90                     _ADC_Start:
 26278                           	opt stack 21
 26279                           
 26280                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 26281                           
 26282                           ; BSR set to: 0
 26283                           ;incstack = 0
 26284  014A90  B2C2               	btfsc	4034,1,c	;volatile
 26285  014A92  0012               	return	
 26286  014A94                     
 26287                           ;ADC.c: 128: {
 26288                           ;ADC.c: 129: ADC_Off();
 26289                           
 26290                           ;ADC.c: 127: for(;;)
 26291  014A94  ECB8  F0B0         	call	_ADC_Off	;wreg free
 26292                           
 26293                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 26294  014A98  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 26295  014A9C  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 26296  014AA0  50DF               	movf	indf2,w,c
 26297  014AA2  ECB5  F0AF         	call	_ADC_SetChannel
 26298                           
 26299                           ;ADC.c: 131: ADC_On();
 26300  014AA6  ECC9  F0B0         	call	_ADC_On	;wreg free
 26301                           
 26302                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 26303  014AAA  82C2               	bsf	4034,1,c	;volatile
 26304  014AAC  B2C2               	btfsc	4034,1,c	;volatile
 26305  014AAE  D7FE               	goto	l1280
 26306                           
 26307                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 26308  014AB0  50C3               	movf	4035,w,c	;volatile
 26309  014AB2  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 26310  014AB6  0100               	movlb	0	; () banked
 26311  014AB8  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 26312  014ABA  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 26313  014ABE  0100               	movlb	0	; () banked
 26314  014AC0  6BBE               	clrf	??_ADC_Start& (0+255),b
 26315  014AC2  0100               	movlb	0	; () banked
 26316  014AC4  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 26317  014AC6  0E00               	movlw	0
 26318  014AC8  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 26319  014ACA  0100               	movlb	0	; () banked
 26320  014ACC  EE20 F001          	lfsr	2,1
 26321  014AD0  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 26322  014AD2  26D9               	addwf	fsr2l,f,c
 26323  014AD4  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26324  014AD6  22DA               	addwfc	fsr2h,f,c
 26325  014AD8  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 26326  014ADC  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 26327                           
 26328                           ;ADC.c: 141: if (pInput->mNext == 0)
 26329  014AE0  0100               	movlb	0	; () banked
 26330  014AE2  EE20 F003          	lfsr	2,3
 26331  014AE6  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 26332  014AE8  26D9               	addwf	fsr2l,f,c
 26333  014AEA  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26334  014AEC  22DA               	addwfc	fsr2h,f,c
 26335  014AEE  50DE               	movf	postinc2,w,c
 26336  014AF0  10DE               	iorwf	postinc2,w,c
 26337  014AF2  B4D8               	btfsc	status,2,c
 26338  014AF4  D00C               	goto	l1283
 26339                           
 26340                           ; BSR set to: 0
 26341                           ;ADC.c: 145: pInput = pInput->mNext;
 26342                           
 26343                           ; BSR set to: 0
 26344                           
 26345                           ; BSR set to: 0
 26346                           ;ADC.c: 142: break;
 26347  014AF6  0100               	movlb	0	; () banked
 26348  014AF8  EE20 F003          	lfsr	2,3
 26349  014AFC  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 26350  014AFE  26D9               	addwf	fsr2l,f,c
 26351  014B00  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 26352  014B02  22DA               	addwfc	fsr2h,f,c
 26353  014B04  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 26354  014B08  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 26355                           
 26356                           ;ADC.c: 146: }
 26357  014B0C  D7C3               	goto	l1276
 26358  014B0E                     l1283:
 26359                           
 26360                           ; BSR set to: 0
 26361                           ;ADC.c: 147: ADC_Off();
 26362                           
 26363                           ; BSR set to: 0
 26364  014B0E  ECB8  F0B0         	call	_ADC_Off	;wreg free
 26365  014B12  0012               	return		;funcret
 26366  014B14                     __end_of_ADC_Start:
 26367                           	opt stack 0
 26368                           tosu	equ	0xFFF
 26369                           tosh	equ	0xFFE
 26370                           tosl	equ	0xFFD
 26371                           pclath	equ	0xFFA
 26372                           tblptru	equ	0xFF8
 26373                           tblptrh	equ	0xFF7
 26374                           tblptrl	equ	0xFF6
 26375                           tablat	equ	0xFF5
 26376                           prodh	equ	0xFF4
 26377                           prodl	equ	0xFF3
 26378                           intcon	equ	0xFF2
 26379                           indf0	equ	0xFEF
 26380                           postinc0	equ	0xFEE
 26381                           fsr0h	equ	0xFEA
 26382                           fsr0l	equ	0xFE9
 26383                           wreg	equ	0xFE8
 26384                           indf1	equ	0xFE7
 26385                           postdec1	equ	0xFE5
 26386                           fsr1h	equ	0xFE2
 26387                           fsr1l	equ	0xFE1
 26388                           indf2	equ	0xFDF
 26389                           postinc2	equ	0xFDE
 26390                           postdec2	equ	0xFDD
 26391                           plusw2	equ	0xFDB
 26392                           fsr2h	equ	0xFDA
 26393                           fsr2l	equ	0xFD9
 26394                           status	equ	0xFD8
 26395                           
 26396 ;; *************** function _ADC_Init *****************
 26397 ;; Defined at:
 26398 ;;		line 19 in file "Library/ADC.c"
 26399 ;; Parameters:    Size  Location     Type
 26400 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 26401 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 26402 ;;  pChannel        1    6[BANK0 ] enum E6742
 26403 ;; Auto vars:     Size  Location     Type
 26404 ;;		None
 26405 ;; Return value:  Size  Location     Type
 26406 ;;                  1    wreg      void 
 26407 ;; Registers used:
 26408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26409 ;; Tracked objects:
 26410 ;;		On entry : 0/0
 26411 ;;		On exit  : 0/0
 26412 ;;		Unchanged: 0/0
 26413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26414 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26417 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26418 ;;Total ram usage:        3 bytes
 26419 ;; Hardware stack levels used:    1
 26420 ;; Hardware stack levels required when called:    9
 26421 ;; This function calls:
 26422 ;;		_ADC_Calibrate
 26423 ;;		_ADC_ClockDivision
 26424 ;;		_ADC_ConversionTime
 26425 ;;		_ADC_SetChannel
 26426 ;;		_ADC_SetupIO
 26427 ;; This function is called by:
 26428 ;;		_init
 26429 ;;		_FunctInitADC
 26430 ;; This function uses a non-reentrant model
 26431 ;;
 26432                           
 26433                           	psect	text136
 26434  014C12                     __ptext136:
 26435                           	opt stack 0
 26436  014C12                     _ADC_Init:
 26437                           	opt stack 20
 26438                           
 26439                           ;ADC.c: 21: if(pInput==(void*)0)
 26440                           
 26441                           ;incstack = 0
 26442  014C12  0100               	movlb	0	; () banked
 26443  014C14  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 26444  014C16  0100               	movlb	0	; () banked
 26445  014C18  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 26446  014C1A  B4D8               	btfsc	status,2,c
 26447  014C1C  0012               	return	
 26448                           
 26449                           ; BSR set to: 0
 26450                           ;ADC.c: 25: lCurrent = pInput;
 26451                           
 26452                           ; BSR set to: 0
 26453                           
 26454                           ; BSR set to: 0
 26455                           ;ADC.c: 22: return;
 26456  014C1E  C0BE  F087         	movff	ADC_Init@pInput,_lCurrent
 26457  014C22  C0BF  F088         	movff	ADC_Init@pInput+1,_lCurrent+1
 26458                           
 26459                           ; BSR set to: 0
 26460                           ;ADC.c: 27: pInput->mChannel = pChannel;
 26461  014C26  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 26462  014C2A  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 26463  014C2E  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 26464                           
 26465                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 26466  014C32  0100               	movlb	0	; () banked
 26467  014C34  EE20 F003          	lfsr	2,3
 26468  014C38  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 26469  014C3A  26D9               	addwf	fsr2l,f,c
 26470  014C3C  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 26471  014C3E  22DA               	addwfc	fsr2h,f,c
 26472  014C40  0E00               	movlw	0
 26473  014C42  6EDE               	movwf	postinc2,c
 26474  014C44  0E00               	movlw	0
 26475  014C46  6EDD               	movwf	postdec2,c
 26476                           
 26477                           ;ADC.c: 29: pInput->mValue = 0;
 26478  014C48  0100               	movlb	0	; () banked
 26479  014C4A  EE20 F001          	lfsr	2,1
 26480  014C4E  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 26481  014C50  26D9               	addwf	fsr2l,f,c
 26482  014C52  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 26483  014C54  22DA               	addwfc	fsr2h,f,c
 26484  014C56  0E00               	movlw	0
 26485  014C58  6EDE               	movwf	postinc2,c
 26486  014C5A  0E00               	movlw	0
 26487  014C5C  6EDD               	movwf	postdec2,c
 26488                           
 26489                           ; BSR set to: 0
 26490                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 26491  014C5E  0100               	movlb	0	; () banked
 26492  014C60  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 26493  014C62  ECB5  F0AF         	call	_ADC_SetChannel
 26494                           
 26495                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 26496  014C66  9EC2               	bcf	4034,7,c	;volatile
 26497                           
 26498                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 26499  014C68  9CC2               	bcf	4034,6,c	;volatile
 26500                           
 26501                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 26502  014C6A  8EC1               	bsf	4033,7,c	;volatile
 26503                           
 26504                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 26505  014C6C  8CC1               	bsf	4033,6,c	;volatile
 26506                           
 26507                           ;ADC.c: 43: ADC_ConversionTime(12);
 26508  014C6E  0E0C               	movlw	12
 26509  014C70  ECCA  F0AB         	call	_ADC_ConversionTime
 26510                           
 26511                           ;ADC.c: 47: ADC_ClockDivision(16);
 26512  014C74  0E10               	movlw	16
 26513  014C76  ECBF  F0A4         	call	_ADC_ClockDivision
 26514                           
 26515                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 26516  014C7A  0100               	movlb	0	; () banked
 26517  014C7C  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 26518  014C7E  ECFE  F0AD         	call	_ADC_SetupIO
 26519                           
 26520                           ;ADC.c: 58: ADC_Initialised = 1;
 26521  014C82  0E01               	movlw	1
 26522  014C84  6E3C               	movwf	_ADC_Initialised,c
 26523                           
 26524                           ;ADC.c: 61: ADC_Calibrate();
 26525  014C86  EC3A  F0B0         	call	_ADC_Calibrate	;wreg free
 26526  014C8A  0012               	return		;funcret
 26527  014C8C                     __end_of_ADC_Init:
 26528                           	opt stack 0
 26529                           tosu	equ	0xFFF
 26530                           tosh	equ	0xFFE
 26531                           tosl	equ	0xFFD
 26532                           pclath	equ	0xFFA
 26533                           tblptru	equ	0xFF8
 26534                           tblptrh	equ	0xFF7
 26535                           tblptrl	equ	0xFF6
 26536                           tablat	equ	0xFF5
 26537                           prodh	equ	0xFF4
 26538                           prodl	equ	0xFF3
 26539                           intcon	equ	0xFF2
 26540                           indf0	equ	0xFEF
 26541                           postinc0	equ	0xFEE
 26542                           fsr0h	equ	0xFEA
 26543                           fsr0l	equ	0xFE9
 26544                           wreg	equ	0xFE8
 26545                           indf1	equ	0xFE7
 26546                           postdec1	equ	0xFE5
 26547                           fsr1h	equ	0xFE2
 26548                           fsr1l	equ	0xFE1
 26549                           indf2	equ	0xFDF
 26550                           postinc2	equ	0xFDE
 26551                           postdec2	equ	0xFDD
 26552                           plusw2	equ	0xFDB
 26553                           fsr2h	equ	0xFDA
 26554                           fsr2l	equ	0xFD9
 26555                           status	equ	0xFD8
 26556                           
 26557 ;; *************** function _ADC_SetupIO *****************
 26558 ;; Defined at:
 26559 ;;		line 150 in file "Library/ADC.c"
 26560 ;; Parameters:    Size  Location     Type
 26561 ;;  pChannel        1    wreg     enum E6742
 26562 ;; Auto vars:     Size  Location     Type
 26563 ;;  pChannel        1    2[BANK0 ] enum E6742
 26564 ;;  MASK            1    3[BANK0 ] unsigned char 
 26565 ;; Return value:  Size  Location     Type
 26566 ;;                  1    wreg      void 
 26567 ;; Registers used:
 26568 ;;		wreg, status,2, status,0
 26569 ;; Tracked objects:
 26570 ;;		On entry : 0/0
 26571 ;;		On exit  : 0/0
 26572 ;;		Unchanged: 0/0
 26573 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26574 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26575 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26576 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26577 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26578 ;;Total ram usage:        4 bytes
 26579 ;; Hardware stack levels used:    1
 26580 ;; Hardware stack levels required when called:    7
 26581 ;; This function calls:
 26582 ;;		Nothing
 26583 ;; This function is called by:
 26584 ;;		_ADC_Init
 26585 ;; This function uses a non-reentrant model
 26586 ;;
 26587                           
 26588                           	psect	text137
 26589  015BFC                     __ptext137:
 26590                           	opt stack 0
 26591  015BFC                     _ADC_SetupIO:
 26592                           	opt stack 21
 26593                           
 26594                           ;incstack = 0
 26595                           ;ADC_SetupIO@pChannel stored from wreg
 26596  015BFC  0100               	movlb	0	; () banked
 26597  015BFE  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 26598                           
 26599                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 26600  015C00  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 26601  015C04  0E01               	movlw	1
 26602  015C06  0100               	movlb	0	; () banked
 26603  015C08  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 26604  015C0A  0100               	movlb	0	; () banked
 26605  015C0C  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 26606  015C0E  D003               	goto	u9694
 26607  015C10                     u9695:
 26608  015C10  0100               	movlb	0	; () banked
 26609  015C12  90D8               	bcf	status,0,c
 26610  015C14  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 26611  015C16                     u9694:
 26612  015C16  0100               	movlb	0	; () banked
 26613  015C18  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 26614  015C1A  D7FA               	goto	u9695
 26615  015C1C  0100               	movlb	0	; () banked
 26616  015C1E  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 26617  015C20  0AFF               	xorlw	255
 26618  015C22  0100               	movlb	0	; () banked
 26619  015C24  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 26620                           
 26621                           ;ADC.c: 153: ANCON0 &= MASK;
 26622  015C26  0100               	movlb	0	; () banked
 26623  015C28  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 26624  015C2A  16C1               	andwf	4033,f,c	;volatile
 26625                           
 26626                           ; BSR set to: 0
 26627  015C2C  0012               	return		;funcret
 26628  015C2E                     __end_of_ADC_SetupIO:
 26629                           	opt stack 0
 26630                           tosu	equ	0xFFF
 26631                           tosh	equ	0xFFE
 26632                           tosl	equ	0xFFD
 26633                           pclath	equ	0xFFA
 26634                           tblptru	equ	0xFF8
 26635                           tblptrh	equ	0xFF7
 26636                           tblptrl	equ	0xFF6
 26637                           tablat	equ	0xFF5
 26638                           prodh	equ	0xFF4
 26639                           prodl	equ	0xFF3
 26640                           intcon	equ	0xFF2
 26641                           indf0	equ	0xFEF
 26642                           postinc0	equ	0xFEE
 26643                           fsr0h	equ	0xFEA
 26644                           fsr0l	equ	0xFE9
 26645                           wreg	equ	0xFE8
 26646                           indf1	equ	0xFE7
 26647                           postdec1	equ	0xFE5
 26648                           fsr1h	equ	0xFE2
 26649                           fsr1l	equ	0xFE1
 26650                           indf2	equ	0xFDF
 26651                           postinc2	equ	0xFDE
 26652                           postdec2	equ	0xFDD
 26653                           plusw2	equ	0xFDB
 26654                           fsr2h	equ	0xFDA
 26655                           fsr2l	equ	0xFD9
 26656                           status	equ	0xFD8
 26657                           
 26658 ;; *************** function _ADC_SetChannel *****************
 26659 ;; Defined at:
 26660 ;;		line 155 in file "Library/ADC.c"
 26661 ;; Parameters:    Size  Location     Type
 26662 ;;  pChannel        1    wreg     enum E6742
 26663 ;; Auto vars:     Size  Location     Type
 26664 ;;  pChannel        1    1[BANK0 ] enum E6742
 26665 ;; Return value:  Size  Location     Type
 26666 ;;                  1    wreg      void 
 26667 ;; Registers used:
 26668 ;;		wreg, status,2, status,0
 26669 ;; Tracked objects:
 26670 ;;		On entry : 0/0
 26671 ;;		On exit  : 0/0
 26672 ;;		Unchanged: 0/0
 26673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26674 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26675 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26676 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26677 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26678 ;;Total ram usage:        2 bytes
 26679 ;; Hardware stack levels used:    1
 26680 ;; Hardware stack levels required when called:    7
 26681 ;; This function calls:
 26682 ;;		Nothing
 26683 ;; This function is called by:
 26684 ;;		_ADC_Init
 26685 ;;		_ADC_Start
 26686 ;;		_ADC_ISR
 26687 ;;		_ADC_Sample
 26688 ;; This function uses a non-reentrant model
 26689 ;;
 26690                           
 26691                           	psect	text138
 26692  015F6A                     __ptext138:
 26693                           	opt stack 0
 26694  015F6A                     _ADC_SetChannel:
 26695                           	opt stack 21
 26696                           
 26697                           ; BSR set to: 0
 26698                           ;incstack = 0
 26699                           ;ADC_SetChannel@pChannel stored from wreg
 26700  015F6A  0100               	movlb	0	; () banked
 26701  015F6C  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 26702                           
 26703                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 26704  015F6E  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 26705  015F72  0100               	movlb	0	; () banked
 26706  015F74  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 26707  015F76  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 26708  015F78  50C2               	movf	4034,w,c	;volatile
 26709  015F7A  0100               	movlb	0	; () banked
 26710  015F7C  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 26711  015F7E  0BC3               	andlw	-61
 26712  015F80  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 26713  015F82  6EC2               	movwf	4034,c	;volatile
 26714                           
 26715                           ; BSR set to: 0
 26716  015F84  0012               	return		;funcret
 26717  015F86                     __end_of_ADC_SetChannel:
 26718                           	opt stack 0
 26719                           tosu	equ	0xFFF
 26720                           tosh	equ	0xFFE
 26721                           tosl	equ	0xFFD
 26722                           pclath	equ	0xFFA
 26723                           tblptru	equ	0xFF8
 26724                           tblptrh	equ	0xFF7
 26725                           tblptrl	equ	0xFF6
 26726                           tablat	equ	0xFF5
 26727                           prodh	equ	0xFF4
 26728                           prodl	equ	0xFF3
 26729                           intcon	equ	0xFF2
 26730                           indf0	equ	0xFEF
 26731                           postinc0	equ	0xFEE
 26732                           fsr0h	equ	0xFEA
 26733                           fsr0l	equ	0xFE9
 26734                           wreg	equ	0xFE8
 26735                           indf1	equ	0xFE7
 26736                           postdec1	equ	0xFE5
 26737                           fsr1h	equ	0xFE2
 26738                           fsr1l	equ	0xFE1
 26739                           indf2	equ	0xFDF
 26740                           postinc2	equ	0xFDE
 26741                           postdec2	equ	0xFDD
 26742                           plusw2	equ	0xFDB
 26743                           fsr2h	equ	0xFDA
 26744                           fsr2l	equ	0xFD9
 26745                           status	equ	0xFD8
 26746                           
 26747 ;; *************** function _ADC_ConversionTime *****************
 26748 ;; Defined at:
 26749 ;;		line 199 in file "Library/ADC.c"
 26750 ;; Parameters:    Size  Location     Type
 26751 ;;  pCount          1    wreg     unsigned char 
 26752 ;; Auto vars:     Size  Location     Type
 26753 ;;  pCount          1    1[BANK0 ] unsigned char 
 26754 ;; Return value:  Size  Location     Type
 26755 ;;                  1    wreg      void 
 26756 ;; Registers used:
 26757 ;;		wreg, status,2, status,0
 26758 ;; Tracked objects:
 26759 ;;		On entry : 0/0
 26760 ;;		On exit  : 0/0
 26761 ;;		Unchanged: 0/0
 26762 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26763 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26764 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26765 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26766 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26767 ;;Total ram usage:        2 bytes
 26768 ;; Hardware stack levels used:    1
 26769 ;; Hardware stack levels required when called:    7
 26770 ;; This function calls:
 26771 ;;		Nothing
 26772 ;; This function is called by:
 26773 ;;		_ADC_Init
 26774 ;; This function uses a non-reentrant model
 26775 ;;
 26776                           
 26777                           	psect	text139
 26778  015794                     __ptext139:
 26779                           	opt stack 0
 26780  015794                     _ADC_ConversionTime:
 26781                           	opt stack 21
 26782                           
 26783                           ; BSR set to: 0
 26784                           ;incstack = 0
 26785                           ;ADC_ConversionTime@pCount stored from wreg
 26786  015794  0100               	movlb	0	; () banked
 26787  015796  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 26788                           
 26789                           ;ADC.c: 201: if (pCount == 10)
 26790  015798  0E0A               	movlw	10
 26791  01579A  0100               	movlb	0	; () banked
 26792  01579C  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26793  01579E  B4D8               	btfsc	status,2,c
 26794  0157A0  D00A               	goto	u9660
 26795                           
 26796                           ; BSR set to: 0
 26797                           ;ADC.c: 203: else if (pCount == 14)
 26798                           
 26799                           ; BSR set to: 0
 26800                           
 26801                           ; BSR set to: 0
 26802                           ;ADC.c: 202: pCount -= 2;
 26803  0157A2  0E0E               	movlw	14
 26804  0157A4  0100               	movlb	0	; () banked
 26805  0157A6  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26806  0157A8  B4D8               	btfsc	status,2,c
 26807  0157AA  D005               	goto	u9660
 26808                           
 26809                           ; BSR set to: 0
 26810                           ;ADC.c: 205: else if (pCount == 18)
 26811                           
 26812                           ; BSR set to: 0
 26813                           
 26814                           ; BSR set to: 0
 26815                           ;ADC.c: 204: pCount -= 2;
 26816  0157AC  0E12               	movlw	18
 26817  0157AE  0100               	movlb	0	; () banked
 26818  0157B0  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 26819  0157B2  A4D8               	btfss	status,2,c
 26820  0157B4  D003               	goto	l1313
 26821  0157B6                     u9660:
 26822                           
 26823                           ; BSR set to: 0
 26824                           ;ADC.c: 206: pCount -= 2;
 26825  0157B6  0E02               	movlw	2
 26826  0157B8  0100               	movlb	0	; () banked
 26827  0157BA  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 26828  0157BC                     l1313:
 26829                           
 26830                           ; BSR set to: 0
 26831                           ;ADC.c: 208: pCount <<= 1;
 26832                           
 26833                           ; BSR set to: 0
 26834                           
 26835                           ; BSR set to: 0
 26836  0157BC  0100               	movlb	0	; () banked
 26837  0157BE  90D8               	bcf	status,0,c
 26838  0157C0  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 26839                           
 26840                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 26841  0157C2  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 26842  0157C6  0100               	movlb	0	; () banked
 26843  0157C8  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 26844  0157CA  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 26845  0157CC  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 26846  0157CE  50C1               	movf	4033,w,c	;volatile
 26847  0157D0  0100               	movlb	0	; () banked
 26848  0157D2  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 26849  0157D4  0BC7               	andlw	-57
 26850  0157D6  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 26851  0157D8  6EC1               	movwf	4033,c	;volatile
 26852                           
 26853                           ; BSR set to: 0
 26854  0157DA  0012               	return		;funcret
 26855  0157DC                     __end_of_ADC_ConversionTime:
 26856                           	opt stack 0
 26857                           tosu	equ	0xFFF
 26858                           tosh	equ	0xFFE
 26859                           tosl	equ	0xFFD
 26860                           pclath	equ	0xFFA
 26861                           tblptru	equ	0xFF8
 26862                           tblptrh	equ	0xFF7
 26863                           tblptrl	equ	0xFF6
 26864                           tablat	equ	0xFF5
 26865                           prodh	equ	0xFF4
 26866                           prodl	equ	0xFF3
 26867                           intcon	equ	0xFF2
 26868                           indf0	equ	0xFEF
 26869                           postinc0	equ	0xFEE
 26870                           fsr0h	equ	0xFEA
 26871                           fsr0l	equ	0xFE9
 26872                           wreg	equ	0xFE8
 26873                           indf1	equ	0xFE7
 26874                           postdec1	equ	0xFE5
 26875                           fsr1h	equ	0xFE2
 26876                           fsr1l	equ	0xFE1
 26877                           indf2	equ	0xFDF
 26878                           postinc2	equ	0xFDE
 26879                           postdec2	equ	0xFDD
 26880                           plusw2	equ	0xFDB
 26881                           fsr2h	equ	0xFDA
 26882                           fsr2l	equ	0xFD9
 26883                           status	equ	0xFD8
 26884                           
 26885 ;; *************** function _ADC_ClockDivision *****************
 26886 ;; Defined at:
 26887 ;;		line 159 in file "Library/ADC.c"
 26888 ;; Parameters:    Size  Location     Type
 26889 ;;  pDivide         1    wreg     unsigned char 
 26890 ;; Auto vars:     Size  Location     Type
 26891 ;;  pDivide         1    0[BANK0 ] unsigned char 
 26892 ;;  unfound         1    2[BANK0 ] unsigned char 
 26893 ;;  reg             1    1[BANK0 ] unsigned char 
 26894 ;; Return value:  Size  Location     Type
 26895 ;;                  1    wreg      void 
 26896 ;; Registers used:
 26897 ;;		wreg, status,2, status,0
 26898 ;; Tracked objects:
 26899 ;;		On entry : 0/0
 26900 ;;		On exit  : 0/0
 26901 ;;		Unchanged: 0/0
 26902 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26903 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26904 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26905 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26906 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26907 ;;Total ram usage:        3 bytes
 26908 ;; Hardware stack levels used:    1
 26909 ;; Hardware stack levels required when called:    7
 26910 ;; This function calls:
 26911 ;;		Nothing
 26912 ;; This function is called by:
 26913 ;;		_ADC_Init
 26914 ;; This function uses a non-reentrant model
 26915 ;;
 26916                           
 26917                           	psect	text140
 26918  01497E                     __ptext140:
 26919                           	opt stack 0
 26920  01497E                     _ADC_ClockDivision:
 26921                           	opt stack 21
 26922                           
 26923                           ; BSR set to: 0
 26924                           ;incstack = 0
 26925                           ;ADC_ClockDivision@pDivide stored from wreg
 26926  01497E  0100               	movlb	0	; () banked
 26927  014980  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 26928                           
 26929                           ;ADC.c: 161: UINT8 reg = 0;
 26930  014982  0E00               	movlw	0
 26931  014984  0100               	movlb	0	; () banked
 26932  014986  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 26933                           
 26934                           ;ADC.c: 162: bool unfound = 1;
 26935  014988  0E01               	movlw	1
 26936  01498A  D002               	goto	L15
 26937  01498C                     
 26938                           ; BSR set to: 0
 26939                           ;ADC.c: 167: reg = 0;
 26940                           
 26941                           ; BSR set to: 0
 26942  01498C  0E00               	movlw	0
 26943  01498E  D00C               	goto	L20
 26944  014990                     L15:
 26945  014990  0100               	movlb	0	; () banked
 26946  014992  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 26947                           
 26948                           ;ADC.c: 169: break;
 26949  014994  D02D               	goto	l1296
 26950  014996                     
 26951                           ; BSR set to: 0
 26952                           ;ADC.c: 171: reg = 0b100;
 26953                           
 26954                           ; BSR set to: 0
 26955  014996  0E04               	movlw	4
 26956  014998  D007               	goto	L20
 26957  01499A                     
 26958                           ; BSR set to: 0
 26959                           ;ADC.c: 175: reg = 0b001;
 26960                           
 26961                           ; BSR set to: 0
 26962  01499A  0E01               	movlw	1
 26963  01499C  D005               	goto	L20
 26964  01499E                     
 26965                           ; BSR set to: 0
 26966                           ;ADC.c: 179: reg = 0b101;
 26967                           
 26968                           ; BSR set to: 0
 26969  01499E  0E05               	movlw	5
 26970  0149A0  D003               	goto	L20
 26971  0149A2                     
 26972                           ; BSR set to: 0
 26973                           ;ADC.c: 183: reg = 0b010;
 26974                           
 26975                           ; BSR set to: 0
 26976  0149A2  0E02               	movlw	2
 26977  0149A4  D001               	goto	L20
 26978  0149A6                     
 26979                           ; BSR set to: 0
 26980                           ;ADC.c: 187: reg = 0b110;
 26981                           
 26982                           ; BSR set to: 0
 26983  0149A6  0E06               	movlw	6
 26984  0149A8                     L20:
 26985  0149A8  0100               	movlb	0	; () banked
 26986  0149AA  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 26987                           
 26988                           ;ADC.c: 188: unfound = 0;
 26989  0149AC  0E00               	movlw	0
 26990  0149AE  D7F0               	goto	L15
 26991  0149B0                     
 26992                           ; BSR set to: 0
 26993                           ;ADC.c: 191: if (pDivide > 2)
 26994                           
 26995                           ; BSR set to: 0
 26996  0149B0  0E02               	movlw	2
 26997  0149B2  0100               	movlb	0	; () banked
 26998  0149B4  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 26999  0149B6  D003               	goto	l1303
 27000                           
 27001                           ; BSR set to: 0
 27002                           ;ADC.c: 192: pDivide --;
 27003  0149B8  0100               	movlb	0	; () banked
 27004  0149BA  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 27005  0149BC  D019               	goto	l1296
 27006  0149BE                     l1303:
 27007                           
 27008                           ; BSR set to: 0
 27009                           ;ADC.c: 193: else
 27010                           ;ADC.c: 194: pDivide = 2;
 27011                           
 27012                           ; BSR set to: 0
 27013  0149BE  0E02               	movlw	2
 27014  0149C0  0100               	movlb	0	; () banked
 27015  0149C2  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 27016                           
 27017                           ; BSR set to: 0
 27018                           ;ADC.c: 195: };
 27019  0149C4  D015               	goto	l1296
 27020  0149C6                     
 27021                           ; BSR set to: 0
 27022                           
 27023                           ; BSR set to: 0
 27024  0149C6  0100               	movlb	0	; () banked
 27025  0149C8  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 27026                           
 27027                           ; Switch size 1, requested type "space"
 27028                           ; Number of cases is 6, Range of values is 2 to 64
 27029                           ; switch strategies available:
 27030                           ; Name         Instructions Cycles
 27031                           ; simple_byte           19    10 (average)
 27032                           ;	Chosen strategy is simple_byte
 27033  0149CA  0A02               	xorlw	2	; case 2
 27034  0149CC  B4D8               	btfsc	status,2,c
 27035  0149CE  D7DE               	goto	l1295
 27036  0149D0  0A06               	xorlw	6	; case 4
 27037  0149D2  B4D8               	btfsc	status,2,c
 27038  0149D4  D7E0               	goto	l1297
 27039  0149D6  0A0C               	xorlw	12	; case 8
 27040  0149D8  B4D8               	btfsc	status,2,c
 27041  0149DA  D7DF               	goto	l1298
 27042  0149DC  0A18               	xorlw	24	; case 16
 27043  0149DE  B4D8               	btfsc	status,2,c
 27044  0149E0  D7DE               	goto	l1299
 27045  0149E2  0A30               	xorlw	48	; case 32
 27046  0149E4  B4D8               	btfsc	status,2,c
 27047  0149E6  D7DD               	goto	l1300
 27048  0149E8  0A60               	xorlw	96	; case 64
 27049  0149EA  B4D8               	btfsc	status,2,c
 27050  0149EC  D7DC               	goto	l1301
 27051  0149EE  D7E0               	goto	l1302
 27052  0149F0                     l1296:
 27053                           
 27054                           ; BSR set to: 0
 27055                           
 27056                           ; BSR set to: 0
 27057                           
 27058                           ; BSR set to: 0
 27059  0149F0  0100               	movlb	0	; () banked
 27060  0149F2  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 27061  0149F4  0100               	movlb	0	; () banked
 27062  0149F6  A4D8               	btfss	status,2,c
 27063  0149F8  D7E6               	goto	l1294
 27064                           
 27065                           ; BSR set to: 0
 27066                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 27067                           
 27068                           ; BSR set to: 0
 27069  0149FA  50C1               	movf	4033,w,c	;volatile
 27070  0149FC  0100               	movlb	0	; () banked
 27071  0149FE  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27072  014A00  0BF8               	andlw	-8
 27073  014A02  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 27074  014A04  6EC1               	movwf	4033,c	;volatile
 27075                           
 27076                           ; BSR set to: 0
 27077  014A06  0012               	return		;funcret
 27078  014A08                     __end_of_ADC_ClockDivision:
 27079                           	opt stack 0
 27080                           tosu	equ	0xFFF
 27081                           tosh	equ	0xFFE
 27082                           tosl	equ	0xFFD
 27083                           pclath	equ	0xFFA
 27084                           tblptru	equ	0xFF8
 27085                           tblptrh	equ	0xFF7
 27086                           tblptrl	equ	0xFF6
 27087                           tablat	equ	0xFF5
 27088                           prodh	equ	0xFF4
 27089                           prodl	equ	0xFF3
 27090                           intcon	equ	0xFF2
 27091                           indf0	equ	0xFEF
 27092                           postinc0	equ	0xFEE
 27093                           fsr0h	equ	0xFEA
 27094                           fsr0l	equ	0xFE9
 27095                           wreg	equ	0xFE8
 27096                           indf1	equ	0xFE7
 27097                           postdec1	equ	0xFE5
 27098                           fsr1h	equ	0xFE2
 27099                           fsr1l	equ	0xFE1
 27100                           indf2	equ	0xFDF
 27101                           postinc2	equ	0xFDE
 27102                           postdec2	equ	0xFDD
 27103                           plusw2	equ	0xFDB
 27104                           fsr2h	equ	0xFDA
 27105                           fsr2l	equ	0xFD9
 27106                           status	equ	0xFD8
 27107                           
 27108 ;; *************** function _ADC_Calibrate *****************
 27109 ;; Defined at:
 27110 ;;		line 63 in file "Library/ADC.c"
 27111 ;; Parameters:    Size  Location     Type
 27112 ;;		None
 27113 ;; Auto vars:     Size  Location     Type
 27114 ;;		None
 27115 ;; Return value:  Size  Location     Type
 27116 ;;                  1    wreg      void 
 27117 ;; Registers used:
 27118 ;;		cstack
 27119 ;; Tracked objects:
 27120 ;;		On entry : 0/0
 27121 ;;		On exit  : 0/0
 27122 ;;		Unchanged: 0/0
 27123 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27124 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27125 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27126 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27127 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27128 ;;Total ram usage:        0 bytes
 27129 ;; Hardware stack levels used:    1
 27130 ;; Hardware stack levels required when called:    8
 27131 ;; This function calls:
 27132 ;;		_ADC_Off
 27133 ;;		_ADC_On
 27134 ;; This function is called by:
 27135 ;;		_ADC_Init
 27136 ;; This function uses a non-reentrant model
 27137 ;;
 27138                           
 27139                           	psect	text141
 27140  016074                     __ptext141:
 27141                           	opt stack 0
 27142  016074                     _ADC_Calibrate:
 27143                           	opt stack 20
 27144                           
 27145                           ;ADC.c: 65: ADC_On();
 27146                           
 27147                           ; BSR set to: 0
 27148                           ;incstack = 0
 27149  016074  ECC9  F0B0         	call	_ADC_On	;wreg free
 27150                           
 27151                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 27152  016078  8CC1               	bsf	4033,6,c	;volatile
 27153                           
 27154                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 27155  01607A  82C2               	bsf	4034,1,c	;volatile
 27156  01607C  B2C2               	btfsc	4034,1,c	;volatile
 27157  01607E  D7FE               	goto	l1254
 27158                           
 27159                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 27160  016080  9CC1               	bcf	4033,6,c	;volatile
 27161                           
 27162                           ;ADC.c: 73: ADC_Off();
 27163  016082  ECB8  F0B0         	call	_ADC_Off	;wreg free
 27164  016086  0012               	return		;funcret
 27165  016088                     __end_of_ADC_Calibrate:
 27166                           	opt stack 0
 27167                           tosu	equ	0xFFF
 27168                           tosh	equ	0xFFE
 27169                           tosl	equ	0xFFD
 27170                           pclath	equ	0xFFA
 27171                           tblptru	equ	0xFF8
 27172                           tblptrh	equ	0xFF7
 27173                           tblptrl	equ	0xFF6
 27174                           tablat	equ	0xFF5
 27175                           prodh	equ	0xFF4
 27176                           prodl	equ	0xFF3
 27177                           intcon	equ	0xFF2
 27178                           indf0	equ	0xFEF
 27179                           postinc0	equ	0xFEE
 27180                           fsr0h	equ	0xFEA
 27181                           fsr0l	equ	0xFE9
 27182                           wreg	equ	0xFE8
 27183                           indf1	equ	0xFE7
 27184                           postdec1	equ	0xFE5
 27185                           fsr1h	equ	0xFE2
 27186                           fsr1l	equ	0xFE1
 27187                           indf2	equ	0xFDF
 27188                           postinc2	equ	0xFDE
 27189                           postdec2	equ	0xFDD
 27190                           plusw2	equ	0xFDB
 27191                           fsr2h	equ	0xFDA
 27192                           fsr2l	equ	0xFD9
 27193                           status	equ	0xFD8
 27194                           
 27195 ;; *************** function _ADC_On *****************
 27196 ;; Defined at:
 27197 ;;		line 85 in file "Library/ADC.c"
 27198 ;; Parameters:    Size  Location     Type
 27199 ;;		None
 27200 ;; Auto vars:     Size  Location     Type
 27201 ;;		None
 27202 ;; Return value:  Size  Location     Type
 27203 ;;                  1    wreg      void 
 27204 ;; Registers used:
 27205 ;;		None
 27206 ;; Tracked objects:
 27207 ;;		On entry : 0/0
 27208 ;;		On exit  : 0/0
 27209 ;;		Unchanged: 0/0
 27210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27212 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27213 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27214 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27215 ;;Total ram usage:        0 bytes
 27216 ;; Hardware stack levels used:    1
 27217 ;; Hardware stack levels required when called:    7
 27218 ;; This function calls:
 27219 ;;		Nothing
 27220 ;; This function is called by:
 27221 ;;		_ADC_Calibrate
 27222 ;;		_ADC_Start
 27223 ;;		_ADC_ISR
 27224 ;;		_ADC_Sample
 27225 ;; This function uses a non-reentrant model
 27226 ;;
 27227                           
 27228                           	psect	text142
 27229  016192                     __ptext142:
 27230                           	opt stack 0
 27231  016192                     _ADC_On:
 27232                           	opt stack 21
 27233                           
 27234                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 27235                           
 27236                           ;incstack = 0
 27237  016192  80C2               	bsf	4034,0,c	;volatile
 27238                           
 27239                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 27240  016194  9C9E               	bcf	3998,6,c	;volatile
 27241  016196  0012               	return		;funcret
 27242  016198                     __end_of_ADC_On:
 27243                           	opt stack 0
 27244                           tosu	equ	0xFFF
 27245                           tosh	equ	0xFFE
 27246                           tosl	equ	0xFFD
 27247                           pclath	equ	0xFFA
 27248                           tblptru	equ	0xFF8
 27249                           tblptrh	equ	0xFF7
 27250                           tblptrl	equ	0xFF6
 27251                           tablat	equ	0xFF5
 27252                           prodh	equ	0xFF4
 27253                           prodl	equ	0xFF3
 27254                           intcon	equ	0xFF2
 27255                           indf0	equ	0xFEF
 27256                           postinc0	equ	0xFEE
 27257                           fsr0h	equ	0xFEA
 27258                           fsr0l	equ	0xFE9
 27259                           wreg	equ	0xFE8
 27260                           indf1	equ	0xFE7
 27261                           postdec1	equ	0xFE5
 27262                           fsr1h	equ	0xFE2
 27263                           fsr1l	equ	0xFE1
 27264                           indf2	equ	0xFDF
 27265                           postinc2	equ	0xFDE
 27266                           postdec2	equ	0xFDD
 27267                           plusw2	equ	0xFDB
 27268                           fsr2h	equ	0xFDA
 27269                           fsr2l	equ	0xFD9
 27270                           status	equ	0xFD8
 27271                           
 27272 ;; *************** function _ADC_Off *****************
 27273 ;; Defined at:
 27274 ;;		line 94 in file "Library/ADC.c"
 27275 ;; Parameters:    Size  Location     Type
 27276 ;;		None
 27277 ;; Auto vars:     Size  Location     Type
 27278 ;;		None
 27279 ;; Return value:  Size  Location     Type
 27280 ;;                  1    wreg      void 
 27281 ;; Registers used:
 27282 ;;		None
 27283 ;; Tracked objects:
 27284 ;;		On entry : 0/0
 27285 ;;		On exit  : 0/0
 27286 ;;		Unchanged: 0/0
 27287 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27288 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27289 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27290 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27291 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27292 ;;Total ram usage:        0 bytes
 27293 ;; Hardware stack levels used:    1
 27294 ;; Hardware stack levels required when called:    7
 27295 ;; This function calls:
 27296 ;;		Nothing
 27297 ;; This function is called by:
 27298 ;;		_ADC_Calibrate
 27299 ;;		_ADC_Start
 27300 ;;		_ADC_ISR
 27301 ;;		_ADC_Sample
 27302 ;; This function uses a non-reentrant model
 27303 ;;
 27304                           
 27305                           	psect	text143
 27306  016170                     __ptext143:
 27307                           	opt stack 0
 27308  016170                     _ADC_Off:
 27309                           	opt stack 21
 27310                           
 27311                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 27312                           
 27313                           ;incstack = 0
 27314  016170  90C2               	bcf	4034,0,c	;volatile
 27315                           
 27316                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 27317  016172  9C9E               	bcf	3998,6,c	;volatile
 27318                           
 27319                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 27320  016174  9C9D               	bcf	3997,6,c	;volatile
 27321  016176  0012               	return		;funcret
 27322  016178                     __end_of_ADC_Off:
 27323                           	opt stack 0
 27324                           tosu	equ	0xFFF
 27325                           tosh	equ	0xFFE
 27326                           tosl	equ	0xFFD
 27327                           pclath	equ	0xFFA
 27328                           tblptru	equ	0xFF8
 27329                           tblptrh	equ	0xFF7
 27330                           tblptrl	equ	0xFF6
 27331                           tablat	equ	0xFF5
 27332                           prodh	equ	0xFF4
 27333                           prodl	equ	0xFF3
 27334                           intcon	equ	0xFF2
 27335                           indf0	equ	0xFEF
 27336                           postinc0	equ	0xFEE
 27337                           fsr0h	equ	0xFEA
 27338                           fsr0l	equ	0xFE9
 27339                           wreg	equ	0xFE8
 27340                           indf1	equ	0xFE7
 27341                           postdec1	equ	0xFE5
 27342                           fsr1h	equ	0xFE2
 27343                           fsr1l	equ	0xFE1
 27344                           indf2	equ	0xFDF
 27345                           postinc2	equ	0xFDE
 27346                           postdec2	equ	0xFDD
 27347                           plusw2	equ	0xFDB
 27348                           fsr2h	equ	0xFDA
 27349                           fsr2l	equ	0xFD9
 27350                           status	equ	0xFD8
 27351                           
 27352 ;; *************** function _getMode *****************
 27353 ;; Defined at:
 27354 ;;		line 105 in file "main.c"
 27355 ;; Parameters:    Size  Location     Type
 27356 ;;		None
 27357 ;; Auto vars:     Size  Location     Type
 27358 ;;		None
 27359 ;; Return value:  Size  Location     Type
 27360 ;;                  1    wreg      void 
 27361 ;; Registers used:
 27362 ;;		wreg, fsr2l, fsr2h, status,2, status,0, pclath, tosl, prodl, prodh, cstack
 27363 ;; Tracked objects:
 27364 ;;		On entry : 0/0
 27365 ;;		On exit  : 0/0
 27366 ;;		Unchanged: 0/0
 27367 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27368 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27369 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27370 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27371 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27372 ;;Total ram usage:        2 bytes
 27373 ;; Hardware stack levels used:    1
 27374 ;; Hardware stack levels required when called:    9
 27375 ;; This function calls:
 27376 ;;		_HMI_DIPSwitch
 27377 ;;		_HMI_DownSwitch
 27378 ;;		_HMI_LeftSwitch
 27379 ;;		_HMI_RightSwitch
 27380 ;;		_HMI_UpSwitch
 27381 ;;		_MXK_DIPSwitch
 27382 ;;		_MXK_TestButton
 27383 ;; This function is called by:
 27384 ;;		_main
 27385 ;; This function uses a non-reentrant model
 27386 ;;
 27387                           
 27388                           	psect	text144
 27389  0131EA                     __ptext144:
 27390                           	opt stack 0
 27391  0131EA                     _getMode:
 27392                           	opt stack 21
 27393                           
 27394                           ;main.c: 107: selectedMode1 = HMIBoard.mUp.mGetState();
 27395                           
 27396                           ;incstack = 0
 27397  0131EA  EE23  F05F         	lfsr	2,_HMIBoard+35
 27398  0131EE  D801               	call	u11088
 27399  0131F0  D00A               	goto	u11089
 27400  0131F2                     u11088:
 27401  0131F2  0005               	push	
 27402  0131F4  6EFA               	movwf	pclath,c
 27403  0131F6  50DE               	movf	postinc2,w,c
 27404  0131F8  6EFD               	movwf	tosl,c
 27405  0131FA  50DE               	movf	postinc2,w,c
 27406  0131FC  6EFE               	movwf	tosh,c
 27407  0131FE  50DE               	movf	postinc2,w,c
 27408  013200  6EFF               	movwf	tosu,c
 27409  013202  50FA               	movf	pclath,w,c
 27410  013204  0012               	return		;indir
 27411  013206                     u11089:
 27412  013206  0100               	movlb	0	; () banked
 27413  013208  6FC0               	movwf	??_getMode& (0+255),b
 27414  01320A  0100               	movlb	0	; () banked
 27415  01320C  51C0               	movf	??_getMode& (0+255),w,b
 27416  01320E  0100               	movlb	0	; () banked
 27417  013210  6F75               	movwf	_selectedMode1& (0+255),b
 27418  013212  6B76               	clrf	(_selectedMode1+1)& (0+255),b
 27419                           
 27420                           ;main.c: 108: selectedMode2 = HMIBoard.mRight.mGetState();
 27421  013214  EE23  F04B         	lfsr	2,_HMIBoard+15
 27422  013218  D801               	call	u11098
 27423  01321A  D00A               	goto	u11099
 27424  01321C                     u11098:
 27425  01321C  0005               	push	
 27426  01321E  6EFA               	movwf	pclath,c
 27427  013220  50DE               	movf	postinc2,w,c
 27428  013222  6EFD               	movwf	tosl,c
 27429  013224  50DE               	movf	postinc2,w,c
 27430  013226  6EFE               	movwf	tosh,c
 27431  013228  50DE               	movf	postinc2,w,c
 27432  01322A  6EFF               	movwf	tosu,c
 27433  01322C  50FA               	movf	pclath,w,c
 27434  01322E  0012               	return		;indir
 27435  013230                     u11099:
 27436  013230  0100               	movlb	0	; () banked
 27437  013232  6FC0               	movwf	??_getMode& (0+255),b
 27438  013234  0100               	movlb	0	; () banked
 27439  013236  51C0               	movf	??_getMode& (0+255),w,b
 27440  013238  0100               	movlb	0	; () banked
 27441  01323A  6F73               	movwf	_selectedMode2& (0+255),b
 27442  01323C  6B74               	clrf	(_selectedMode2+1)& (0+255),b
 27443                           
 27444                           ;main.c: 109: selectedMode3 = HMIBoard.mDown.mGetState();
 27445  01323E  EE23  F069         	lfsr	2,_HMIBoard+45
 27446  013242  D801               	call	u11108
 27447  013244  D00A               	goto	u11109
 27448  013246                     u11108:
 27449  013246  0005               	push	
 27450  013248  6EFA               	movwf	pclath,c
 27451  01324A  50DE               	movf	postinc2,w,c
 27452  01324C  6EFD               	movwf	tosl,c
 27453  01324E  50DE               	movf	postinc2,w,c
 27454  013250  6EFE               	movwf	tosh,c
 27455  013252  50DE               	movf	postinc2,w,c
 27456  013254  6EFF               	movwf	tosu,c
 27457  013256  50FA               	movf	pclath,w,c
 27458  013258  0012               	return		;indir
 27459  01325A                     u11109:
 27460  01325A  0100               	movlb	0	; () banked
 27461  01325C  6FC0               	movwf	??_getMode& (0+255),b
 27462  01325E  0100               	movlb	0	; () banked
 27463  013260  51C0               	movf	??_getMode& (0+255),w,b
 27464  013262  0100               	movlb	0	; () banked
 27465  013264  6F71               	movwf	_selectedMode3& (0+255),b
 27466  013266  6B72               	clrf	(_selectedMode3+1)& (0+255),b
 27467                           
 27468                           ;main.c: 110: selectedMode4 = HMIBoard.mLeft.mGetState();
 27469  013268  EE23  F055         	lfsr	2,_HMIBoard+25
 27470  01326C  D801               	call	u11118
 27471  01326E  D00A               	goto	u11119
 27472  013270                     u11118:
 27473  013270  0005               	push	
 27474  013272  6EFA               	movwf	pclath,c
 27475  013274  50DE               	movf	postinc2,w,c
 27476  013276  6EFD               	movwf	tosl,c
 27477  013278  50DE               	movf	postinc2,w,c
 27478  01327A  6EFE               	movwf	tosh,c
 27479  01327C  50DE               	movf	postinc2,w,c
 27480  01327E  6EFF               	movwf	tosu,c
 27481  013280  50FA               	movf	pclath,w,c
 27482  013282  0012               	return		;indir
 27483  013284                     u11119:
 27484  013284  0100               	movlb	0	; () banked
 27485  013286  6FC0               	movwf	??_getMode& (0+255),b
 27486  013288  0100               	movlb	0	; () banked
 27487  01328A  51C0               	movf	??_getMode& (0+255),w,b
 27488  01328C  0100               	movlb	0	; () banked
 27489  01328E  6F6F               	movwf	_selectedMode4& (0+255),b
 27490  013290  6B70               	clrf	(_selectedMode4+1)& (0+255),b
 27491                           
 27492                           ; BSR set to: 0
 27493                           ;main.c: 112: if((selectedMode1 + selectedMode2 + selectedMode3 + selectedMode4) != 1) {
 27494  013292  0100               	movlb	0	; () banked
 27495  013294  5173               	movf	_selectedMode2& (0+255),w,b
 27496  013296  0100               	movlb	0	; () banked
 27497  013298  2575               	addwf	_selectedMode1& (0+255),w,b
 27498  01329A  0100               	movlb	0	; () banked
 27499  01329C  6FC0               	movwf	??_getMode& (0+255),b
 27500  01329E  0100               	movlb	0	; () banked
 27501  0132A0  5174               	movf	(_selectedMode2+1)& (0+255),w,b
 27502  0132A2  0100               	movlb	0	; () banked
 27503  0132A4  2176               	addwfc	(_selectedMode1+1)& (0+255),w,b
 27504  0132A6  0100               	movlb	0	; () banked
 27505  0132A8  6FC1               	movwf	(??_getMode+1)& (0+255),b
 27506  0132AA  0100               	movlb	0	; () banked
 27507  0132AC  5171               	movf	_selectedMode3& (0+255),w,b
 27508  0132AE  0100               	movlb	0	; () banked
 27509  0132B0  27C0               	addwf	??_getMode& (0+255),f,b
 27510  0132B2  0100               	movlb	0	; () banked
 27511  0132B4  5172               	movf	(_selectedMode3+1)& (0+255),w,b
 27512  0132B6  0100               	movlb	0	; () banked
 27513  0132B8  23C1               	addwfc	(??_getMode+1)& (0+255),f,b
 27514  0132BA  0100               	movlb	0	; () banked
 27515  0132BC  516F               	movf	_selectedMode4& (0+255),w,b
 27516  0132BE  0100               	movlb	0	; () banked
 27517  0132C0  27C0               	addwf	??_getMode& (0+255),f,b
 27518  0132C2  0100               	movlb	0	; () banked
 27519  0132C4  5170               	movf	(_selectedMode4+1)& (0+255),w,b
 27520  0132C6  0100               	movlb	0	; () banked
 27521  0132C8  23C1               	addwfc	(??_getMode+1)& (0+255),f,b
 27522  0132CA  0100               	movlb	0	; () banked
 27523  0132CC  05C0               	decf	??_getMode& (0+255),w,b
 27524  0132CE  0100               	movlb	0	; () banked
 27525  0132D0  11C1               	iorwf	(??_getMode+1)& (0+255),w,b
 27526  0132D2  B4D8               	btfsc	status,2,c
 27527  0132D4  D006               	goto	l2304
 27528                           
 27529                           ; BSR set to: 0
 27530                           ;main.c: 113: mode = 0;
 27531  0132D6  0E00               	movlw	0
 27532  0132D8  0100               	movlb	0	; () banked
 27533  0132DA  6F78               	movwf	(_mode+1)& (0+255),b
 27534  0132DC  0E00               	movlw	0
 27535  0132DE  6F77               	movwf	_mode& (0+255),b
 27536                           
 27537                           ;main.c: 114: }
 27538  0132E0  0012               	return	
 27539  0132E2                     l2304:
 27540                           
 27541                           ; BSR set to: 0
 27542                           ;main.c: 116: else if (selectedMode1 == 1) {
 27543                           
 27544                           ; BSR set to: 0
 27545  0132E2  0100               	movlb	0	; () banked
 27546  0132E4  0575               	decf	_selectedMode1& (0+255),w,b
 27547  0132E6  0100               	movlb	0	; () banked
 27548  0132E8  1176               	iorwf	(_selectedMode1+1)& (0+255),w,b
 27549  0132EA  A4D8               	btfss	status,2,c
 27550  0132EC  D006               	goto	l2306
 27551                           
 27552                           ; BSR set to: 0
 27553                           ;main.c: 117: mode = 1;
 27554  0132EE  0E00               	movlw	0
 27555  0132F0  0100               	movlb	0	; () banked
 27556  0132F2  6F78               	movwf	(_mode+1)& (0+255),b
 27557  0132F4  0E01               	movlw	1
 27558  0132F6  6F77               	movwf	_mode& (0+255),b
 27559                           
 27560                           ;main.c: 118: }
 27561  0132F8  0012               	return	
 27562  0132FA                     l2306:
 27563                           
 27564                           ; BSR set to: 0
 27565                           ;main.c: 119: else if (selectedMode2 == 1) {
 27566                           
 27567                           ; BSR set to: 0
 27568  0132FA  0100               	movlb	0	; () banked
 27569  0132FC  0573               	decf	_selectedMode2& (0+255),w,b
 27570  0132FE  0100               	movlb	0	; () banked
 27571  013300  1174               	iorwf	(_selectedMode2+1)& (0+255),w,b
 27572  013302  A4D8               	btfss	status,2,c
 27573  013304  D006               	goto	l2308
 27574                           
 27575                           ; BSR set to: 0
 27576                           ;main.c: 120: mode = 2;
 27577  013306  0E00               	movlw	0
 27578  013308  0100               	movlb	0	; () banked
 27579  01330A  6F78               	movwf	(_mode+1)& (0+255),b
 27580  01330C  0E02               	movlw	2
 27581  01330E  6F77               	movwf	_mode& (0+255),b
 27582                           
 27583                           ;main.c: 121: }
 27584  013310  0012               	return	
 27585  013312                     l2308:
 27586                           
 27587                           ; BSR set to: 0
 27588                           ;main.c: 122: else if (selectedMode3 == 1) {
 27589                           
 27590                           ; BSR set to: 0
 27591  013312  0100               	movlb	0	; () banked
 27592  013314  0571               	decf	_selectedMode3& (0+255),w,b
 27593  013316  0100               	movlb	0	; () banked
 27594  013318  1172               	iorwf	(_selectedMode3+1)& (0+255),w,b
 27595  01331A  A4D8               	btfss	status,2,c
 27596  01331C  D006               	goto	l2310
 27597                           
 27598                           ; BSR set to: 0
 27599                           ;main.c: 123: mode = 3;
 27600  01331E  0E00               	movlw	0
 27601  013320  0100               	movlb	0	; () banked
 27602  013322  6F78               	movwf	(_mode+1)& (0+255),b
 27603  013324  0E03               	movlw	3
 27604  013326  6F77               	movwf	_mode& (0+255),b
 27605                           
 27606                           ;main.c: 124: }
 27607  013328  0012               	return	
 27608  01332A                     l2310:
 27609                           
 27610                           ; BSR set to: 0
 27611                           ;main.c: 125: else if (selectedMode4 == 1) {
 27612                           
 27613                           ; BSR set to: 0
 27614  01332A  0100               	movlb	0	; () banked
 27615  01332C  056F               	decf	_selectedMode4& (0+255),w,b
 27616  01332E  0100               	movlb	0	; () banked
 27617  013330  1170               	iorwf	(_selectedMode4+1)& (0+255),w,b
 27618  013332  A4D8               	btfss	status,2,c
 27619  013334  0012               	return	
 27620                           
 27621                           ; BSR set to: 0
 27622                           ;main.c: 126: mode = 4;
 27623  013336  0E00               	movlw	0
 27624  013338  0100               	movlb	0	; () banked
 27625  01333A  6F78               	movwf	(_mode+1)& (0+255),b
 27626  01333C  0E04               	movlw	4
 27627  01333E  6F77               	movwf	_mode& (0+255),b
 27628                           
 27629                           ; BSR set to: 0
 27630                           
 27631                           ; BSR set to: 0
 27632                           
 27633                           ; BSR set to: 0
 27634                           
 27635                           ; BSR set to: 0
 27636  013340  0012               	return	
 27637  013342                     __end_of_getMode:
 27638                           	opt stack 0
 27639                           tosu	equ	0xFFF
 27640                           tosh	equ	0xFFE
 27641                           tosl	equ	0xFFD
 27642                           pclath	equ	0xFFA
 27643                           tblptru	equ	0xFF8
 27644                           tblptrh	equ	0xFF7
 27645                           tblptrl	equ	0xFF6
 27646                           tablat	equ	0xFF5
 27647                           prodh	equ	0xFF4
 27648                           prodl	equ	0xFF3
 27649                           intcon	equ	0xFF2
 27650                           indf0	equ	0xFEF
 27651                           postinc0	equ	0xFEE
 27652                           fsr0h	equ	0xFEA
 27653                           fsr0l	equ	0xFE9
 27654                           wreg	equ	0xFE8
 27655                           indf1	equ	0xFE7
 27656                           postdec1	equ	0xFE5
 27657                           fsr1h	equ	0xFE2
 27658                           fsr1l	equ	0xFE1
 27659                           indf2	equ	0xFDF
 27660                           postinc2	equ	0xFDE
 27661                           postdec2	equ	0xFDD
 27662                           plusw2	equ	0xFDB
 27663                           fsr2h	equ	0xFDA
 27664                           fsr2l	equ	0xFD9
 27665                           status	equ	0xFD8
 27666                           
 27667 ;; *************** function _MXK_DIPSwitch *****************
 27668 ;; Defined at:
 27669 ;;		line 24 in file "Library/MXK.c"
 27670 ;; Parameters:    Size  Location     Type
 27671 ;;		None
 27672 ;; Auto vars:     Size  Location     Type
 27673 ;;		None
 27674 ;; Return value:  Size  Location     Type
 27675 ;;                  1    wreg      unsigned char 
 27676 ;; Registers used:
 27677 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27678 ;; Tracked objects:
 27679 ;;		On entry : 0/0
 27680 ;;		On exit  : 0/0
 27681 ;;		Unchanged: 0/0
 27682 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27683 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27684 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27685 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27686 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27687 ;;Total ram usage:        0 bytes
 27688 ;; Hardware stack levels used:    1
 27689 ;; Hardware stack levels required when called:    8
 27690 ;; This function calls:
 27691 ;;		_Port_GetQuad
 27692 ;; This function is called by:
 27693 ;;		_FunctInitButton
 27694 ;;		_Button_Poll
 27695 ;;		_getMode
 27696 ;;		_mode2
 27697 ;; This function uses a non-reentrant model
 27698 ;;
 27699                           
 27700                           	psect	text145
 27701  015FB8                     __ptext145:
 27702                           	opt stack 0
 27703  015FB8                     _MXK_DIPSwitch:
 27704                           	opt stack 21
 27705                           
 27706                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 27707                           
 27708                           ; BSR set to: 0
 27709                           ;incstack = 0
 27710  015FB8  0EA1               	movlw	low _PortD
 27711  015FBA  0100               	movlb	0	; () banked
 27712  015FBC  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 27713  015FBE  0E00               	movlw	high _PortD
 27714  015FC0  0100               	movlb	0	; () banked
 27715  015FC2  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 27716  015FC4  0E00               	movlw	0
 27717  015FC6  0100               	movlb	0	; () banked
 27718  015FC8  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 27719  015FCA  EC5D  F0AB         	call	_Port_GetQuad	;wreg free
 27720  015FCE  0012               	return	
 27721  015FD0                     __end_of_MXK_DIPSwitch:
 27722                           	opt stack 0
 27723                           tosu	equ	0xFFF
 27724                           tosh	equ	0xFFE
 27725                           tosl	equ	0xFFD
 27726                           pclath	equ	0xFFA
 27727                           tblptru	equ	0xFF8
 27728                           tblptrh	equ	0xFF7
 27729                           tblptrl	equ	0xFF6
 27730                           tablat	equ	0xFF5
 27731                           prodh	equ	0xFF4
 27732                           prodl	equ	0xFF3
 27733                           intcon	equ	0xFF2
 27734                           indf0	equ	0xFEF
 27735                           postinc0	equ	0xFEE
 27736                           fsr0h	equ	0xFEA
 27737                           fsr0l	equ	0xFE9
 27738                           wreg	equ	0xFE8
 27739                           indf1	equ	0xFE7
 27740                           postdec1	equ	0xFE5
 27741                           fsr1h	equ	0xFE2
 27742                           fsr1l	equ	0xFE1
 27743                           indf2	equ	0xFDF
 27744                           postinc2	equ	0xFDE
 27745                           postdec2	equ	0xFDD
 27746                           plusw2	equ	0xFDB
 27747                           fsr2h	equ	0xFDA
 27748                           fsr2l	equ	0xFD9
 27749                           status	equ	0xFD8
 27750                           
 27751 ;; *************** function _HMI_DIPSwitch *****************
 27752 ;; Defined at:
 27753 ;;		line 47 in file "HMI.c"
 27754 ;; Parameters:    Size  Location     Type
 27755 ;;		None
 27756 ;; Auto vars:     Size  Location     Type
 27757 ;;		None
 27758 ;; Return value:  Size  Location     Type
 27759 ;;                  1    wreg      unsigned char 
 27760 ;; Registers used:
 27761 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 27762 ;; Tracked objects:
 27763 ;;		On entry : 0/0
 27764 ;;		On exit  : 0/0
 27765 ;;		Unchanged: 0/0
 27766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27771 ;;Total ram usage:        0 bytes
 27772 ;; Hardware stack levels used:    1
 27773 ;; Hardware stack levels required when called:    8
 27774 ;; This function calls:
 27775 ;;		_Port_GetQuad
 27776 ;; This function is called by:
 27777 ;;		_HMI_Init
 27778 ;;		_Button_Poll
 27779 ;;		_getMode
 27780 ;;		_mode2
 27781 ;; This function uses a non-reentrant model
 27782 ;;
 27783                           
 27784                           	psect	text146
 27785  015FD0                     __ptext146:
 27786                           	opt stack 0
 27787  015FD0                     _HMI_DIPSwitch:
 27788                           	opt stack 19
 27789                           
 27790                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 27791                           
 27792                           ;incstack = 0
 27793  015FD0  0E97               	movlw	low _PortE
 27794  015FD2  0100               	movlb	0	; () banked
 27795  015FD4  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 27796  015FD6  0E00               	movlw	high _PortE
 27797  015FD8  0100               	movlb	0	; () banked
 27798  015FDA  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 27799  015FDC  0E00               	movlw	0
 27800  015FDE  0100               	movlb	0	; () banked
 27801  015FE0  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 27802  015FE2  EC5D  F0AB         	call	_Port_GetQuad	;wreg free
 27803  015FE6  0012               	return	
 27804  015FE8                     __end_of_HMI_DIPSwitch:
 27805                           	opt stack 0
 27806                           tosu	equ	0xFFF
 27807                           tosh	equ	0xFFE
 27808                           tosl	equ	0xFFD
 27809                           pclath	equ	0xFFA
 27810                           tblptru	equ	0xFF8
 27811                           tblptrh	equ	0xFF7
 27812                           tblptrl	equ	0xFF6
 27813                           tablat	equ	0xFF5
 27814                           prodh	equ	0xFF4
 27815                           prodl	equ	0xFF3
 27816                           intcon	equ	0xFF2
 27817                           indf0	equ	0xFEF
 27818                           postinc0	equ	0xFEE
 27819                           fsr0h	equ	0xFEA
 27820                           fsr0l	equ	0xFE9
 27821                           wreg	equ	0xFE8
 27822                           indf1	equ	0xFE7
 27823                           postdec1	equ	0xFE5
 27824                           fsr1h	equ	0xFE2
 27825                           fsr1l	equ	0xFE1
 27826                           indf2	equ	0xFDF
 27827                           postinc2	equ	0xFDE
 27828                           postdec2	equ	0xFDD
 27829                           plusw2	equ	0xFDB
 27830                           fsr2h	equ	0xFDA
 27831                           fsr2l	equ	0xFD9
 27832                           status	equ	0xFD8
 27833                           
 27834 ;; *************** function _HMI_DownSwitch *****************
 27835 ;; Defined at:
 27836 ;;		line 42 in file "HMI.c"
 27837 ;; Parameters:    Size  Location     Type
 27838 ;;		None
 27839 ;; Auto vars:     Size  Location     Type
 27840 ;;		None
 27841 ;; Return value:  Size  Location     Type
 27842 ;;                  1    wreg      unsigned char 
 27843 ;; Registers used:
 27844 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27845 ;; Tracked objects:
 27846 ;;		On entry : 0/0
 27847 ;;		On exit  : 0/0
 27848 ;;		Unchanged: 0/0
 27849 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27850 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27851 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27852 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27853 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27854 ;;Total ram usage:        0 bytes
 27855 ;; Hardware stack levels used:    1
 27856 ;; Hardware stack levels required when called:    8
 27857 ;; This function calls:
 27858 ;;		_Port_GetPin
 27859 ;; This function is called by:
 27860 ;;		_HMI_Init
 27861 ;;		_Button_Poll
 27862 ;;		_getMode
 27863 ;;		_mode2
 27864 ;; This function uses a non-reentrant model
 27865 ;;
 27866                           
 27867                           	psect	text147
 27868  015FE8                     __ptext147:
 27869                           	opt stack 0
 27870  015FE8                     _HMI_DownSwitch:
 27871                           	opt stack 19
 27872                           
 27873                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 27874                           
 27875                           ;incstack = 0
 27876  015FE8  0E97               	movlw	low _PortE
 27877  015FEA  0100               	movlb	0	; () banked
 27878  015FEC  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 27879  015FEE  0E00               	movlw	high _PortE
 27880  015FF0  0100               	movlb	0	; () banked
 27881  015FF2  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27882  015FF4  0E06               	movlw	6
 27883  015FF6  0100               	movlb	0	; () banked
 27884  015FF8  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 27885  015FFA  EC34  F0AC         	call	_Port_GetPin	;wreg free
 27886  015FFE  0012               	return	
 27887  016000                     __end_of_HMI_DownSwitch:
 27888                           	opt stack 0
 27889                           tosu	equ	0xFFF
 27890                           tosh	equ	0xFFE
 27891                           tosl	equ	0xFFD
 27892                           pclath	equ	0xFFA
 27893                           tblptru	equ	0xFF8
 27894                           tblptrh	equ	0xFF7
 27895                           tblptrl	equ	0xFF6
 27896                           tablat	equ	0xFF5
 27897                           prodh	equ	0xFF4
 27898                           prodl	equ	0xFF3
 27899                           intcon	equ	0xFF2
 27900                           indf0	equ	0xFEF
 27901                           postinc0	equ	0xFEE
 27902                           fsr0h	equ	0xFEA
 27903                           fsr0l	equ	0xFE9
 27904                           wreg	equ	0xFE8
 27905                           indf1	equ	0xFE7
 27906                           postdec1	equ	0xFE5
 27907                           fsr1h	equ	0xFE2
 27908                           fsr1l	equ	0xFE1
 27909                           indf2	equ	0xFDF
 27910                           postinc2	equ	0xFDE
 27911                           postdec2	equ	0xFDD
 27912                           plusw2	equ	0xFDB
 27913                           fsr2h	equ	0xFDA
 27914                           fsr2l	equ	0xFD9
 27915                           status	equ	0xFD8
 27916                           
 27917 ;; *************** function _HMI_UpSwitch *****************
 27918 ;; Defined at:
 27919 ;;		line 37 in file "HMI.c"
 27920 ;; Parameters:    Size  Location     Type
 27921 ;;		None
 27922 ;; Auto vars:     Size  Location     Type
 27923 ;;		None
 27924 ;; Return value:  Size  Location     Type
 27925 ;;                  1    wreg      unsigned char 
 27926 ;; Registers used:
 27927 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 27928 ;; Tracked objects:
 27929 ;;		On entry : 0/0
 27930 ;;		On exit  : 0/0
 27931 ;;		Unchanged: 0/0
 27932 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27933 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27934 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27935 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27936 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27937 ;;Total ram usage:        0 bytes
 27938 ;; Hardware stack levels used:    1
 27939 ;; Hardware stack levels required when called:    8
 27940 ;; This function calls:
 27941 ;;		_Port_GetPin
 27942 ;; This function is called by:
 27943 ;;		_HMI_Init
 27944 ;;		_Button_Poll
 27945 ;;		_getMode
 27946 ;;		_mode2
 27947 ;; This function uses a non-reentrant model
 27948 ;;
 27949                           
 27950                           	psect	text148
 27951  016000                     __ptext148:
 27952                           	opt stack 0
 27953  016000                     _HMI_UpSwitch:
 27954                           	opt stack 21
 27955                           
 27956                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 27957                           
 27958                           ;incstack = 0
 27959  016000  0E97               	movlw	low _PortE
 27960  016002  0100               	movlb	0	; () banked
 27961  016004  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 27962  016006  0E00               	movlw	high _PortE
 27963  016008  0100               	movlb	0	; () banked
 27964  01600A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 27965  01600C  0E07               	movlw	7
 27966  01600E  0100               	movlb	0	; () banked
 27967  016010  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 27968  016012  EC34  F0AC         	call	_Port_GetPin	;wreg free
 27969  016016  0012               	return	
 27970  016018                     __end_of_HMI_UpSwitch:
 27971                           	opt stack 0
 27972                           tosu	equ	0xFFF
 27973                           tosh	equ	0xFFE
 27974                           tosl	equ	0xFFD
 27975                           pclath	equ	0xFFA
 27976                           tblptru	equ	0xFF8
 27977                           tblptrh	equ	0xFF7
 27978                           tblptrl	equ	0xFF6
 27979                           tablat	equ	0xFF5
 27980                           prodh	equ	0xFF4
 27981                           prodl	equ	0xFF3
 27982                           intcon	equ	0xFF2
 27983                           indf0	equ	0xFEF
 27984                           postinc0	equ	0xFEE
 27985                           fsr0h	equ	0xFEA
 27986                           fsr0l	equ	0xFE9
 27987                           wreg	equ	0xFE8
 27988                           indf1	equ	0xFE7
 27989                           postdec1	equ	0xFE5
 27990                           fsr1h	equ	0xFE2
 27991                           fsr1l	equ	0xFE1
 27992                           indf2	equ	0xFDF
 27993                           postinc2	equ	0xFDE
 27994                           postdec2	equ	0xFDD
 27995                           plusw2	equ	0xFDB
 27996                           fsr2h	equ	0xFDA
 27997                           fsr2l	equ	0xFD9
 27998                           status	equ	0xFD8
 27999                           
 28000 ;; *************** function _HMI_RightSwitch *****************
 28001 ;; Defined at:
 28002 ;;		line 32 in file "HMI.c"
 28003 ;; Parameters:    Size  Location     Type
 28004 ;;		None
 28005 ;; Auto vars:     Size  Location     Type
 28006 ;;		None
 28007 ;; Return value:  Size  Location     Type
 28008 ;;                  1    wreg      unsigned char 
 28009 ;; Registers used:
 28010 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28011 ;; Tracked objects:
 28012 ;;		On entry : 0/0
 28013 ;;		On exit  : 0/0
 28014 ;;		Unchanged: 0/0
 28015 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28016 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28017 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28018 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28019 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28020 ;;Total ram usage:        0 bytes
 28021 ;; Hardware stack levels used:    1
 28022 ;; Hardware stack levels required when called:    8
 28023 ;; This function calls:
 28024 ;;		_Port_GetPin
 28025 ;; This function is called by:
 28026 ;;		_HMI_Init
 28027 ;;		_Button_Poll
 28028 ;;		_getMode
 28029 ;;		_mode2
 28030 ;; This function uses a non-reentrant model
 28031 ;;
 28032                           
 28033                           	psect	text149
 28034  016018                     __ptext149:
 28035                           	opt stack 0
 28036  016018                     _HMI_RightSwitch:
 28037                           	opt stack 21
 28038                           
 28039                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 28040                           
 28041                           ;incstack = 0
 28042  016018  0E97               	movlw	low _PortE
 28043  01601A  0100               	movlb	0	; () banked
 28044  01601C  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 28045  01601E  0E00               	movlw	high _PortE
 28046  016020  0100               	movlb	0	; () banked
 28047  016022  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28048  016024  0E04               	movlw	4
 28049  016026  0100               	movlb	0	; () banked
 28050  016028  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 28051  01602A  EC34  F0AC         	call	_Port_GetPin	;wreg free
 28052  01602E  0012               	return	
 28053  016030                     __end_of_HMI_RightSwitch:
 28054                           	opt stack 0
 28055                           tosu	equ	0xFFF
 28056                           tosh	equ	0xFFE
 28057                           tosl	equ	0xFFD
 28058                           pclath	equ	0xFFA
 28059                           tblptru	equ	0xFF8
 28060                           tblptrh	equ	0xFF7
 28061                           tblptrl	equ	0xFF6
 28062                           tablat	equ	0xFF5
 28063                           prodh	equ	0xFF4
 28064                           prodl	equ	0xFF3
 28065                           intcon	equ	0xFF2
 28066                           indf0	equ	0xFEF
 28067                           postinc0	equ	0xFEE
 28068                           fsr0h	equ	0xFEA
 28069                           fsr0l	equ	0xFE9
 28070                           wreg	equ	0xFE8
 28071                           indf1	equ	0xFE7
 28072                           postdec1	equ	0xFE5
 28073                           fsr1h	equ	0xFE2
 28074                           fsr1l	equ	0xFE1
 28075                           indf2	equ	0xFDF
 28076                           postinc2	equ	0xFDE
 28077                           postdec2	equ	0xFDD
 28078                           plusw2	equ	0xFDB
 28079                           fsr2h	equ	0xFDA
 28080                           fsr2l	equ	0xFD9
 28081                           status	equ	0xFD8
 28082                           
 28083 ;; *************** function _HMI_LeftSwitch *****************
 28084 ;; Defined at:
 28085 ;;		line 27 in file "HMI.c"
 28086 ;; Parameters:    Size  Location     Type
 28087 ;;		None
 28088 ;; Auto vars:     Size  Location     Type
 28089 ;;		None
 28090 ;; Return value:  Size  Location     Type
 28091 ;;                  1    wreg      unsigned char 
 28092 ;; Registers used:
 28093 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28094 ;; Tracked objects:
 28095 ;;		On entry : 0/0
 28096 ;;		On exit  : 0/0
 28097 ;;		Unchanged: 0/0
 28098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28099 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28100 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28102 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28103 ;;Total ram usage:        0 bytes
 28104 ;; Hardware stack levels used:    1
 28105 ;; Hardware stack levels required when called:    8
 28106 ;; This function calls:
 28107 ;;		_Port_GetPin
 28108 ;; This function is called by:
 28109 ;;		_HMI_Init
 28110 ;;		_Button_Poll
 28111 ;;		_getMode
 28112 ;;		_mode2
 28113 ;; This function uses a non-reentrant model
 28114 ;;
 28115                           
 28116                           	psect	text150
 28117  016030                     __ptext150:
 28118                           	opt stack 0
 28119  016030                     _HMI_LeftSwitch:
 28120                           	opt stack 19
 28121                           
 28122                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 28123                           
 28124                           ;incstack = 0
 28125  016030  0E97               	movlw	low _PortE
 28126  016032  0100               	movlb	0	; () banked
 28127  016034  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 28128  016036  0E00               	movlw	high _PortE
 28129  016038  0100               	movlb	0	; () banked
 28130  01603A  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28131  01603C  0E05               	movlw	5
 28132  01603E  0100               	movlb	0	; () banked
 28133  016040  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 28134  016042  EC34  F0AC         	call	_Port_GetPin	;wreg free
 28135  016046  0012               	return	
 28136  016048                     __end_of_HMI_LeftSwitch:
 28137                           	opt stack 0
 28138                           tosu	equ	0xFFF
 28139                           tosh	equ	0xFFE
 28140                           tosl	equ	0xFFD
 28141                           pclath	equ	0xFFA
 28142                           tblptru	equ	0xFF8
 28143                           tblptrh	equ	0xFF7
 28144                           tblptrl	equ	0xFF6
 28145                           tablat	equ	0xFF5
 28146                           prodh	equ	0xFF4
 28147                           prodl	equ	0xFF3
 28148                           intcon	equ	0xFF2
 28149                           indf0	equ	0xFEF
 28150                           postinc0	equ	0xFEE
 28151                           fsr0h	equ	0xFEA
 28152                           fsr0l	equ	0xFE9
 28153                           wreg	equ	0xFE8
 28154                           indf1	equ	0xFE7
 28155                           postdec1	equ	0xFE5
 28156                           fsr1h	equ	0xFE2
 28157                           fsr1l	equ	0xFE1
 28158                           indf2	equ	0xFDF
 28159                           postinc2	equ	0xFDE
 28160                           postdec2	equ	0xFDD
 28161                           plusw2	equ	0xFDB
 28162                           fsr2h	equ	0xFDA
 28163                           fsr2l	equ	0xFD9
 28164                           status	equ	0xFD8
 28165                           
 28166 ;; *************** function _MXK_TestButton *****************
 28167 ;; Defined at:
 28168 ;;		line 14 in file "Library/MXK.c"
 28169 ;; Parameters:    Size  Location     Type
 28170 ;;		None
 28171 ;; Auto vars:     Size  Location     Type
 28172 ;;		None
 28173 ;; Return value:  Size  Location     Type
 28174 ;;                  1    wreg      unsigned char 
 28175 ;; Registers used:
 28176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 28177 ;; Tracked objects:
 28178 ;;		On entry : 0/0
 28179 ;;		On exit  : 0/0
 28180 ;;		Unchanged: 0/0
 28181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28186 ;;Total ram usage:        0 bytes
 28187 ;; Hardware stack levels used:    1
 28188 ;; Hardware stack levels required when called:    8
 28189 ;; This function calls:
 28190 ;;		_Port_GetPin
 28191 ;; This function is called by:
 28192 ;;		_FunctInitButton
 28193 ;;		_Button_Poll
 28194 ;;		_getMode
 28195 ;;		_mode2
 28196 ;; This function uses a non-reentrant model
 28197 ;;
 28198                           
 28199                           	psect	text151
 28200  016048                     __ptext151:
 28201                           	opt stack 0
 28202  016048                     _MXK_TestButton:
 28203                           	opt stack 21
 28204                           
 28205                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 28206                           
 28207                           ;incstack = 0
 28208  016048  0EAA               	movlw	low _PortB
 28209  01604A  0100               	movlb	0	; () banked
 28210  01604C  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 28211  01604E  0E03               	movlw	high _PortB
 28212  016050  0100               	movlb	0	; () banked
 28213  016052  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 28214  016054  0E04               	movlw	4
 28215  016056  0100               	movlb	0	; () banked
 28216  016058  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 28217  01605A  EC34  F0AC         	call	_Port_GetPin	;wreg free
 28218  01605E  0012               	return	
 28219  016060                     __end_of_MXK_TestButton:
 28220                           	opt stack 0
 28221                           tosu	equ	0xFFF
 28222                           tosh	equ	0xFFE
 28223                           tosl	equ	0xFFD
 28224                           pclath	equ	0xFFA
 28225                           tblptru	equ	0xFF8
 28226                           tblptrh	equ	0xFF7
 28227                           tblptrl	equ	0xFF6
 28228                           tablat	equ	0xFF5
 28229                           prodh	equ	0xFF4
 28230                           prodl	equ	0xFF3
 28231                           intcon	equ	0xFF2
 28232                           indf0	equ	0xFEF
 28233                           postinc0	equ	0xFEE
 28234                           fsr0h	equ	0xFEA
 28235                           fsr0l	equ	0xFE9
 28236                           wreg	equ	0xFE8
 28237                           indf1	equ	0xFE7
 28238                           postdec1	equ	0xFE5
 28239                           fsr1h	equ	0xFE2
 28240                           fsr1l	equ	0xFE1
 28241                           indf2	equ	0xFDF
 28242                           postinc2	equ	0xFDE
 28243                           postdec2	equ	0xFDD
 28244                           plusw2	equ	0xFDB
 28245                           fsr2h	equ	0xFDA
 28246                           fsr2l	equ	0xFD9
 28247                           status	equ	0xFD8
 28248                           
 28249 ;; *************** function _Port_GetPin *****************
 28250 ;; Defined at:
 28251 ;;		line 271 in file "Library/Port.c"
 28252 ;; Parameters:    Size  Location     Type
 28253 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28254 ;;		 -> PortB(10), PortE(10), PortC(10), 
 28255 ;;  pPin            1    2[BANK0 ] enum E6750
 28256 ;; Auto vars:     Size  Location     Type
 28257 ;;  Output          1    5[BANK0 ] unsigned char 
 28258 ;; Return value:  Size  Location     Type
 28259 ;;                  1    wreg      unsigned char 
 28260 ;; Registers used:
 28261 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28262 ;; Tracked objects:
 28263 ;;		On entry : 0/0
 28264 ;;		On exit  : 0/0
 28265 ;;		Unchanged: 0/0
 28266 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28267 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28268 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28269 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28270 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28271 ;;Total ram usage:        6 bytes
 28272 ;; Hardware stack levels used:    1
 28273 ;; Hardware stack levels required when called:    7
 28274 ;; This function calls:
 28275 ;;		Nothing
 28276 ;; This function is called by:
 28277 ;;		_Port_TogglePin
 28278 ;;		_HMI_LeftSwitch
 28279 ;;		_HMI_RightSwitch
 28280 ;;		_HMI_UpSwitch
 28281 ;;		_HMI_DownSwitch
 28282 ;;		_MXK_TestButton
 28283 ;; This function uses a non-reentrant model
 28284 ;;
 28285                           
 28286                           	psect	text152
 28287  015868                     __ptext152:
 28288                           	opt stack 0
 28289  015868                     _Port_GetPin:
 28290                           	opt stack 21
 28291                           
 28292                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 28293                           
 28294                           ;incstack = 0
 28295  015868  0100               	movlb	0	; () banked
 28296  01586A  EE20 F006          	lfsr	2,6
 28297  01586E  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 28298  015870  26D9               	addwf	fsr2l,f,c
 28299  015872  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 28300  015874  22DA               	addwfc	fsr2h,f,c
 28301  015876  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 28302  01587A  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 28303  01587E  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 28304  015882  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 28305  015886  50DF               	movf	indf2,w,c
 28306  015888  0100               	movlb	0	; () banked
 28307  01588A  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 28308                           
 28309                           ; BSR set to: 0
 28310                           ;Port.c: 274: Output >>= (UINT8)pPin;
 28311  01588C  0100               	movlb	0	; () banked
 28312  01588E  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 28313  015890  0100               	movlb	0	; () banked
 28314  015892  6FBD               	movwf	??_Port_GetPin& (0+255),b
 28315  015894  D003               	goto	u8410
 28316  015896                     u8415:
 28317  015896  0100               	movlb	0	; () banked
 28318  015898  90D8               	bcf	status,0,c
 28319  01589A  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 28320  01589C                     u8410:
 28321  01589C  0100               	movlb	0	; () banked
 28322  01589E  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 28323  0158A0  D7FA               	goto	u8415
 28324                           
 28325                           ;Port.c: 275: Output &= 1;
 28326  0158A2  0E01               	movlw	1
 28327  0158A4  0100               	movlb	0	; () banked
 28328  0158A6  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 28329                           
 28330                           ; BSR set to: 0
 28331                           ;Port.c: 276: return Output;
 28332  0158A8  0100               	movlb	0	; () banked
 28333  0158AA  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 28334  0158AC  0012               	return	
 28335  0158AE                     __end_of_Port_GetPin:
 28336                           	opt stack 0
 28337                           tosu	equ	0xFFF
 28338                           tosh	equ	0xFFE
 28339                           tosl	equ	0xFFD
 28340                           pclath	equ	0xFFA
 28341                           tblptru	equ	0xFF8
 28342                           tblptrh	equ	0xFF7
 28343                           tblptrl	equ	0xFF6
 28344                           tablat	equ	0xFF5
 28345                           prodh	equ	0xFF4
 28346                           prodl	equ	0xFF3
 28347                           intcon	equ	0xFF2
 28348                           indf0	equ	0xFEF
 28349                           postinc0	equ	0xFEE
 28350                           fsr0h	equ	0xFEA
 28351                           fsr0l	equ	0xFE9
 28352                           wreg	equ	0xFE8
 28353                           indf1	equ	0xFE7
 28354                           postdec1	equ	0xFE5
 28355                           fsr1h	equ	0xFE2
 28356                           fsr1l	equ	0xFE1
 28357                           indf2	equ	0xFDF
 28358                           postinc2	equ	0xFDE
 28359                           postdec2	equ	0xFDD
 28360                           plusw2	equ	0xFDB
 28361                           fsr2h	equ	0xFDA
 28362                           fsr2l	equ	0xFD9
 28363                           status	equ	0xFD8
 28364                           
 28365 ;; *************** function _Port_GetQuad *****************
 28366 ;; Defined at:
 28367 ;;		line 498 in file "Library/Port.c"
 28368 ;; Parameters:    Size  Location     Type
 28369 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 28370 ;;		 -> PortE(10), PortD(10), 
 28371 ;;  pQuad           1    2[BANK0 ] enum E6776
 28372 ;; Auto vars:     Size  Location     Type
 28373 ;;  Output          1    5[BANK0 ] unsigned char 
 28374 ;; Return value:  Size  Location     Type
 28375 ;;                  1    wreg      unsigned char 
 28376 ;; Registers used:
 28377 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 28378 ;; Tracked objects:
 28379 ;;		On entry : 0/0
 28380 ;;		On exit  : 0/0
 28381 ;;		Unchanged: 0/0
 28382 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28383 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28384 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28385 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28386 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28387 ;;Total ram usage:        6 bytes
 28388 ;; Hardware stack levels used:    1
 28389 ;; Hardware stack levels required when called:    7
 28390 ;; This function calls:
 28391 ;;		Nothing
 28392 ;; This function is called by:
 28393 ;;		_HMI_DIPSwitch
 28394 ;;		_MXK_DIPSwitch
 28395 ;;		_Port_ToggleQuad
 28396 ;; This function uses a non-reentrant model
 28397 ;;
 28398                           
 28399                           	psect	text153
 28400  0156BA                     __ptext153:
 28401                           	opt stack 0
 28402  0156BA                     _Port_GetQuad:
 28403                           	opt stack 21
 28404                           
 28405                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 28406                           
 28407                           ; BSR set to: 0
 28408                           ;incstack = 0
 28409  0156BA  0100               	movlb	0	; () banked
 28410  0156BC  EE20 F006          	lfsr	2,6
 28411  0156C0  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 28412  0156C2  26D9               	addwf	fsr2l,f,c
 28413  0156C4  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 28414  0156C6  22DA               	addwfc	fsr2h,f,c
 28415  0156C8  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 28416  0156CC  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 28417  0156D0  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 28418  0156D4  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 28419  0156D8  50DF               	movf	indf2,w,c
 28420  0156DA  0100               	movlb	0	; () banked
 28421  0156DC  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 28422                           
 28423                           ; BSR set to: 0
 28424                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 28425  0156DE  0100               	movlb	0	; () banked
 28426  0156E0  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 28427  0156E2  0D04               	mullw	4
 28428  0156E4  28F3               	incf	prodl,w,c
 28429  0156E6  0100               	movlb	0	; () banked
 28430  0156E8  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 28431  0156EA  D003               	goto	u8880
 28432  0156EC                     u8885:
 28433  0156EC  0100               	movlb	0	; () banked
 28434  0156EE  90D8               	bcf	status,0,c
 28435  0156F0  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 28436  0156F2                     u8880:
 28437  0156F2  0100               	movlb	0	; () banked
 28438  0156F4  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 28439  0156F6  D7FA               	goto	u8885
 28440                           
 28441                           ;Port.c: 502: Output &= 0xF;
 28442  0156F8  0E0F               	movlw	15
 28443  0156FA  0100               	movlb	0	; () banked
 28444  0156FC  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 28445                           
 28446                           ; BSR set to: 0
 28447                           ;Port.c: 503: return Output;
 28448  0156FE  0100               	movlb	0	; () banked
 28449  015700  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 28450  015702  0012               	return	
 28451  015704                     __end_of_Port_GetQuad:
 28452                           	opt stack 0
 28453                           tosu	equ	0xFFF
 28454                           tosh	equ	0xFFE
 28455                           tosl	equ	0xFFD
 28456                           pclath	equ	0xFFA
 28457                           tblptru	equ	0xFF8
 28458                           tblptrh	equ	0xFF7
 28459                           tblptrl	equ	0xFF6
 28460                           tablat	equ	0xFF5
 28461                           prodh	equ	0xFF4
 28462                           prodl	equ	0xFF3
 28463                           intcon	equ	0xFF2
 28464                           indf0	equ	0xFEF
 28465                           postinc0	equ	0xFEE
 28466                           fsr0h	equ	0xFEA
 28467                           fsr0l	equ	0xFE9
 28468                           wreg	equ	0xFE8
 28469                           indf1	equ	0xFE7
 28470                           postdec1	equ	0xFE5
 28471                           fsr1h	equ	0xFE2
 28472                           fsr1l	equ	0xFE1
 28473                           indf2	equ	0xFDF
 28474                           postinc2	equ	0xFDE
 28475                           postdec2	equ	0xFDD
 28476                           plusw2	equ	0xFDB
 28477                           fsr2h	equ	0xFDA
 28478                           fsr2l	equ	0xFD9
 28479                           status	equ	0xFD8
 28480                           
 28481 ;; *************** function _ISR_Function *****************
 28482 ;; Defined at:
 28483 ;;		line 38 in file "Library/ISR.c"
 28484 ;; Parameters:    Size  Location     Type
 28485 ;;		None
 28486 ;; Auto vars:     Size  Location     Type
 28487 ;;		None
 28488 ;; Return value:  Size  Location     Type
 28489 ;;                  1    wreg      void 
 28490 ;; Registers used:
 28491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28492 ;; Tracked objects:
 28493 ;;		On entry : 0/0
 28494 ;;		On exit  : 0/0
 28495 ;;		Unchanged: 0/0
 28496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28498 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28499 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28500 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28501 ;;Total ram usage:       18 bytes
 28502 ;; Hardware stack levels used:    1
 28503 ;; Hardware stack levels required when called:    6
 28504 ;; This function calls:
 28505 ;;		_Timer0_ISR
 28506 ;; This function is called by:
 28507 ;;		Interrupt level 2
 28508 ;; This function uses a non-reentrant model
 28509 ;;
 28510                           
 28511                           	psect	intcode
 28512  001408                     __pintcode:
 28513                           	opt stack 0
 28514  001408                     _ISR_Function:
 28515                           	opt stack 13
 28516                           
 28517                           ; BSR set to: 0
 28518                           ;incstack = 0
 28519  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 28520  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 28521  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 28522  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 28523  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 28524  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 28525  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 28526  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 28527  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 28528  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 28529  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 28530  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 28531  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 28532  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 28533  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 28534  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 28535  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 28536  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 28537  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 28538                           
 28539                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 28540  001452  92F2               	bcf	intcon,1,c	;volatile
 28541                           
 28542                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 28543  001454  B4F2               	btfsc	intcon,2,c	;volatile
 28544  001456  AAF2               	btfss	intcon,5,c	;volatile
 28545  001458  D002               	goto	i2l1590
 28546                           
 28547                           ;ISR.c: 68: Timer0_ISR();
 28548  00145A  EC76  F0AE         	call	_Timer0_ISR	;wreg free
 28549  00145E                     i2l1590:
 28550  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 28551  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 28552  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 28553  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 28554  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 28555  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 28556  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 28557  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 28558  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 28559  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 28560  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 28561  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 28562  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 28563  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 28564  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 28565  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 28566  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 28567  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 28568  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 28569  0014A8  0011               	retfie		f
 28570  0014AA                     __end_of_ISR_Function:
 28571                           	opt stack 0
 28572                           tosu	equ	0xFFF
 28573                           tosh	equ	0xFFE
 28574                           tosl	equ	0xFFD
 28575                           pclatu	equ	0xFFB
 28576                           pclath	equ	0xFFA
 28577                           tblptru	equ	0xFF8
 28578                           tblptrh	equ	0xFF7
 28579                           tblptrl	equ	0xFF6
 28580                           tablat	equ	0xFF5
 28581                           prodh	equ	0xFF4
 28582                           prodl	equ	0xFF3
 28583                           intcon	equ	0xFF2
 28584                           indf0	equ	0xFEF
 28585                           postinc0	equ	0xFEE
 28586                           fsr0h	equ	0xFEA
 28587                           fsr0l	equ	0xFE9
 28588                           wreg	equ	0xFE8
 28589                           indf1	equ	0xFE7
 28590                           postdec1	equ	0xFE5
 28591                           fsr1h	equ	0xFE2
 28592                           fsr1l	equ	0xFE1
 28593                           indf2	equ	0xFDF
 28594                           postinc2	equ	0xFDE
 28595                           postdec2	equ	0xFDD
 28596                           plusw2	equ	0xFDB
 28597                           fsr2h	equ	0xFDA
 28598                           fsr2l	equ	0xFD9
 28599                           status	equ	0xFD8
 28600                           
 28601 ;; *************** function _Timer0_ISR *****************
 28602 ;; Defined at:
 28603 ;;		line 94 in file "Library/Timer0.c"
 28604 ;; Parameters:    Size  Location     Type
 28605 ;;		None
 28606 ;; Auto vars:     Size  Location     Type
 28607 ;;		None
 28608 ;; Return value:  Size  Location     Type
 28609 ;;                  1    wreg      void 
 28610 ;; Registers used:
 28611 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28612 ;; Tracked objects:
 28613 ;;		On entry : 0/0
 28614 ;;		On exit  : 0/0
 28615 ;;		Unchanged: 0/0
 28616 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28617 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28618 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28619 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28620 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28621 ;;Total ram usage:        0 bytes
 28622 ;; Hardware stack levels used:    1
 28623 ;; Hardware stack levels required when called:    5
 28624 ;; This function calls:
 28625 ;;		Absolute function
 28626 ;;		i2_Motor_Step
 28627 ;;		i2_Timer0_Stop
 28628 ;; This function is called by:
 28629 ;;		_ISR_Function
 28630 ;; This function uses a non-reentrant model
 28631 ;;
 28632                           
 28633                           	psect	text155
 28634  015CEC                     __ptext155:
 28635                           	opt stack 0
 28636  015CEC                     _Timer0_ISR:
 28637                           	opt stack 13
 28638                           
 28639                           ;Timer0.c: 96: Timer0_Stop();
 28640                           
 28641                           ;incstack = 0
 28642  015CEC  ECCC  F0B0         	call	i2_Timer0_Stop	;wreg free
 28643                           
 28644                           ;Timer0.c: 99: if (gISR != 0)
 28645  015CF0  0100               	movlb	0	; () banked
 28646  015CF2  5160               	movf	_gISR& (0+255),w,b
 28647  015CF4  0100               	movlb	0	; () banked
 28648  015CF6  1161               	iorwf	(_gISR+1)& (0+255),w,b
 28649  015CF8  0100               	movlb	0	; () banked
 28650  015CFA  1162               	iorwf	(_gISR+2)& (0+255),w,b
 28651  015CFC  B4D8               	btfsc	status,2,c
 28652  015CFE  0012               	return	
 28653                           
 28654                           ; BSR set to: 0
 28655                           ;Timer0.c: 100: gISR();
 28656  015D00  D801               	call	i2u1252_48
 28657  015D02  0012               	return	
 28658  015D04                     i2u1252_48:
 28659  015D04  0005               	push	
 28660  015D06  6EFA               	movwf	pclath,c
 28661  015D08  0100               	movlb	0	; () banked
 28662  015D0A  5160               	movf	_gISR& (0+255),w,b
 28663  015D0C  6EFD               	movwf	tosl,c
 28664  015D0E  5161               	movf	(_gISR+1)& (0+255),w,b
 28665  015D10  6EFE               	movwf	tosh,c
 28666  015D12  5162               	movf	(_gISR+2)& (0+255),w,b
 28667  015D14  6EFF               	movwf	tosu,c
 28668  015D16  50FA               	movf	pclath,w,c
 28669  015D18  0012               	return		;indir
 28670  015D1A                     __end_of_Timer0_ISR:
 28671                           	opt stack 0
 28672                           tosu	equ	0xFFF
 28673                           tosh	equ	0xFFE
 28674                           tosl	equ	0xFFD
 28675                           pclatu	equ	0xFFB
 28676                           pclath	equ	0xFFA
 28677                           tblptru	equ	0xFF8
 28678                           tblptrh	equ	0xFF7
 28679                           tblptrl	equ	0xFF6
 28680                           tablat	equ	0xFF5
 28681                           prodh	equ	0xFF4
 28682                           prodl	equ	0xFF3
 28683                           intcon	equ	0xFF2
 28684                           indf0	equ	0xFEF
 28685                           postinc0	equ	0xFEE
 28686                           fsr0h	equ	0xFEA
 28687                           fsr0l	equ	0xFE9
 28688                           wreg	equ	0xFE8
 28689                           indf1	equ	0xFE7
 28690                           postdec1	equ	0xFE5
 28691                           fsr1h	equ	0xFE2
 28692                           fsr1l	equ	0xFE1
 28693                           indf2	equ	0xFDF
 28694                           postinc2	equ	0xFDE
 28695                           postdec2	equ	0xFDD
 28696                           plusw2	equ	0xFDB
 28697                           fsr2h	equ	0xFDA
 28698                           fsr2l	equ	0xFD9
 28699                           status	equ	0xFD8
 28700                           
 28701 ;; *************** function i2_Motor_Step *****************
 28702 ;; Defined at:
 28703 ;;		line 75 in file "Library/Motor.c"
 28704 ;; Parameters:    Size  Location     Type
 28705 ;;		None
 28706 ;; Auto vars:     Size  Location     Type
 28707 ;;		None
 28708 ;; Return value:  Size  Location     Type
 28709 ;;                  1    wreg      void 
 28710 ;; Registers used:
 28711 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28712 ;; Tracked objects:
 28713 ;;		On entry : 0/0
 28714 ;;		On exit  : 0/0
 28715 ;;		Unchanged: 0/0
 28716 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28717 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28718 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28719 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28720 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28721 ;;Total ram usage:        2 bytes
 28722 ;; Hardware stack levels used:    1
 28723 ;; Hardware stack levels required when called:    4
 28724 ;; This function calls:
 28725 ;;		i2_MXK_Queue
 28726 ;;		i2_MXK_Release
 28727 ;;		i2_MXK_SwitchTo
 28728 ;;		i2_Port_SetPin
 28729 ;;		i2_Timer0_Restart
 28730 ;;		i2_Timer0_Stop
 28731 ;; This function is called by:
 28732 ;; This function uses a non-reentrant model
 28733 ;;
 28734                           
 28735                           	psect	text156
 28736  013574                     __ptext156:
 28737                           	opt stack 0
 28738  013574                     i2_Motor_Step:
 28739                           	opt stack 13
 28740                           
 28741                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 28742                           
 28743                           ;incstack = 0
 28744  013574  0100               	movlb	0	; () banked
 28745  013576  EE20 F004          	lfsr	2,4
 28746  01357A  5185               	movf	_lMotor& (0+255),w,b
 28747  01357C  26D9               	addwf	fsr2l,f,c
 28748  01357E  5186               	movf	(_lMotor+1)& (0+255),w,b
 28749  013580  22DA               	addwfc	fsr2h,f,c
 28750  013582  50DF               	movf	indf2,w,c
 28751  013584  ECC9  F0AD         	call	i2_MXK_SwitchTo
 28752  013588  0900               	iorlw	0
 28753  01358A  B4D8               	btfsc	status,2,c
 28754  01358C  D06A               	goto	i2l1627
 28755                           
 28756                           ;Motor.c: 78: {
 28757                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 28758  01358E  C085  FFD9         	movff	_lMotor,fsr2l
 28759  013592  C086  FFDA         	movff	_lMotor+1,fsr2h
 28760  013596  50DE               	movf	postinc2,w,c
 28761  013598  10DE               	iorwf	postinc2,w,c
 28762  01359A  B4D8               	btfsc	status,2,c
 28763  01359C  D05D               	goto	i2l1628
 28764                           
 28765                           ;Motor.c: 80: {
 28766                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 28767  01359E  C085  FFD9         	movff	_lMotor,fsr2l
 28768  0135A2  C086  FFDA         	movff	_lMotor+1,fsr2h
 28769  0135A6  0E01               	movlw	1
 28770  0135A8  BEDB               	btfsc	plusw2,7,c
 28771  0135AA  D022               	goto	i2l1629
 28772  0135AC  0E01               	movlw	1
 28773  0135AE  50DB               	movf	plusw2,w,c
 28774  0135B0  E103               	bnz	i2u691_40
 28775  0135B2  04DE               	decf	postinc2,w,c
 28776  0135B4  A0D8               	btfss	status,0,c
 28777  0135B6  D01C               	goto	i2l1629
 28778  0135B8                     i2u691_40:
 28779                           
 28780                           ;Motor.c: 83: {
 28781                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 28782  0135B8  C085  FFD9         	movff	_lMotor,fsr2l
 28783  0135BC  C086  FFDA         	movff	_lMotor+1,fsr2h
 28784  0135C0  28DE               	incf	postinc2,w,c
 28785  0135C2  E104               	bnz	i2u692_40
 28786  0135C4  0E7F               	movlw	127
 28787  0135C6  18DE               	xorwf	postinc2,w,c
 28788  0135C8  B4D8               	btfsc	status,2,c
 28789  0135CA  D007               	goto	i2l1630
 28790  0135CC                     i2u692_40:
 28791                           
 28792                           ;Motor.c: 85: lMotor->mDelta --;
 28793  0135CC  C085  FFD9         	movff	_lMotor,fsr2l
 28794  0135D0  C086  FFDA         	movff	_lMotor+1,fsr2h
 28795  0135D4  06DE               	decf	postinc2,f,c
 28796  0135D6  0E00               	movlw	0
 28797  0135D8  5ADD               	subwfb	postdec2,f,c
 28798  0135DA                     i2l1630:
 28799                           
 28800                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 28801  0135DA  0E97               	movlw	low _PortE
 28802  0135DC  6E10               	movwf	i2Port_SetPin@pInput,c
 28803  0135DE  0E00               	movlw	high _PortE
 28804  0135E0  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28805  0135E2  0E00               	movlw	0
 28806  0135E4  6E12               	movwf	i2Port_SetPin@pPin,c
 28807  0135E6  0E01               	movlw	1
 28808  0135E8  6E13               	movwf	i2Port_SetPin@pValue,c
 28809  0135EA  EC60  F0A1         	call	i2_Port_SetPin	;wreg free
 28810                           
 28811                           ;Motor.c: 88: }
 28812  0135EE  D01B               	goto	i2l1631
 28813  0135F0                     i2l1629:
 28814                           
 28815                           ;Motor.c: 89: else
 28816                           ;Motor.c: 90: {
 28817                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 28818  0135F0  C085  FFD9         	movff	_lMotor,fsr2l
 28819  0135F4  C086  FFDA         	movff	_lMotor+1,fsr2h
 28820  0135F8  04DE               	decf	postinc2,w,c
 28821  0135FA  E104               	bnz	i2u693_40
 28822  0135FC  0E80               	movlw	128
 28823  0135FE  18DE               	xorwf	postinc2,w,c
 28824  013600  B4D8               	btfsc	status,2,c
 28825  013602  D007               	goto	i2l1632
 28826  013604                     i2u693_40:
 28827                           
 28828                           ;Motor.c: 92: lMotor->mDelta ++;
 28829  013604  C085  FFD9         	movff	_lMotor,fsr2l
 28830  013608  C086  FFDA         	movff	_lMotor+1,fsr2h
 28831  01360C  2ADE               	incf	postinc2,f,c
 28832  01360E  0E00               	movlw	0
 28833  013610  22DD               	addwfc	postdec2,f,c
 28834  013612                     i2l1632:
 28835                           
 28836                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 28837  013612  0E97               	movlw	low _PortE
 28838  013614  6E10               	movwf	i2Port_SetPin@pInput,c
 28839  013616  0E00               	movlw	high _PortE
 28840  013618  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28841  01361A  0E00               	movlw	0
 28842  01361C  6E12               	movwf	i2Port_SetPin@pPin,c
 28843  01361E  0E00               	movlw	0
 28844  013620  6E13               	movwf	i2Port_SetPin@pValue,c
 28845  013622  EC60  F0A1         	call	i2_Port_SetPin	;wreg free
 28846  013626                     i2l1631:
 28847                           
 28848                           ;Motor.c: 95: }
 28849                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 28850  013626  0E97               	movlw	low _PortE
 28851  013628  6E10               	movwf	i2Port_SetPin@pInput,c
 28852  01362A  0E00               	movlw	high _PortE
 28853  01362C  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28854  01362E  0E01               	movlw	1
 28855  013630  6E12               	movwf	i2Port_SetPin@pPin,c
 28856  013632  0E01               	movlw	1
 28857  013634  6E13               	movwf	i2Port_SetPin@pValue,c
 28858  013636  EC60  F0A1         	call	i2_Port_SetPin	;wreg free
 28859                           
 28860                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 28861  01363A  0E97               	movlw	low _PortE
 28862  01363C  6E10               	movwf	i2Port_SetPin@pInput,c
 28863  01363E  0E00               	movlw	high _PortE
 28864  013640  6E11               	movwf	i2Port_SetPin@pInput+1,c
 28865  013642  0E01               	movlw	1
 28866  013644  6E12               	movwf	i2Port_SetPin@pPin,c
 28867  013646  0E00               	movlw	0
 28868  013648  6E13               	movwf	i2Port_SetPin@pValue,c
 28869  01364A  EC60  F0A1         	call	i2_Port_SetPin	;wreg free
 28870                           
 28871                           ;Motor.c: 101: MXK_Release();
 28872  01364E  ECCF  F0B0         	call	i2_MXK_Release	;wreg free
 28873                           
 28874                           ;Motor.c: 102: Timer0_Restart();
 28875  013652  EC9B  F0B0         	call	i2_Timer0_Restart	;wreg free
 28876                           
 28877                           ;Motor.c: 103: return;
 28878  013656  0012               	return	
 28879  013658                     i2l1628:
 28880                           
 28881                           ;Motor.c: 104: }
 28882                           ;Motor.c: 105: MXK_Release();
 28883  013658  ECCF  F0B0         	call	i2_MXK_Release	;wreg free
 28884                           
 28885                           ;Motor.c: 106: Timer0_Stop();
 28886  01365C  ECCC  F0B0         	call	i2_Timer0_Stop	;wreg free
 28887                           
 28888                           ;Motor.c: 107: return;
 28889  013660  0012               	return	
 28890  013662                     i2l1627:
 28891                           
 28892                           ;Motor.c: 108: }
 28893                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 28894  013662  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 28895  013666  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 28896  01366A  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 28897  01366E  EC82  F0B0         	call	i2_MXK_Queue	;wreg free
 28898  013672  0012               	return		;funcret
 28899  013674                     __end_ofi2_Motor_Step:
 28900                           	opt stack 0
 28901                           tosu	equ	0xFFF
 28902                           tosh	equ	0xFFE
 28903                           tosl	equ	0xFFD
 28904                           pclatu	equ	0xFFB
 28905                           pclath	equ	0xFFA
 28906                           tblptru	equ	0xFF8
 28907                           tblptrh	equ	0xFF7
 28908                           tblptrl	equ	0xFF6
 28909                           tablat	equ	0xFF5
 28910                           prodh	equ	0xFF4
 28911                           prodl	equ	0xFF3
 28912                           intcon	equ	0xFF2
 28913                           indf0	equ	0xFEF
 28914                           postinc0	equ	0xFEE
 28915                           fsr0h	equ	0xFEA
 28916                           fsr0l	equ	0xFE9
 28917                           wreg	equ	0xFE8
 28918                           indf1	equ	0xFE7
 28919                           postdec1	equ	0xFE5
 28920                           fsr1h	equ	0xFE2
 28921                           fsr1l	equ	0xFE1
 28922                           indf2	equ	0xFDF
 28923                           postinc2	equ	0xFDE
 28924                           postdec2	equ	0xFDD
 28925                           plusw2	equ	0xFDB
 28926                           fsr2h	equ	0xFDA
 28927                           fsr2l	equ	0xFD9
 28928                           status	equ	0xFD8
 28929                           
 28930 ;; *************** function i2_Timer0_Stop *****************
 28931 ;; Defined at:
 28932 ;;		line 89 in file "Library/Timer0.c"
 28933 ;; Parameters:    Size  Location     Type
 28934 ;;		None
 28935 ;; Auto vars:     Size  Location     Type
 28936 ;;		None
 28937 ;; Return value:  Size  Location     Type
 28938 ;;                  1    wreg      void 
 28939 ;; Registers used:
 28940 ;;		None
 28941 ;; Tracked objects:
 28942 ;;		On entry : 0/0
 28943 ;;		On exit  : 0/0
 28944 ;;		Unchanged: 0/0
 28945 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28946 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28947 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28948 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28949 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28950 ;;Total ram usage:        0 bytes
 28951 ;; Hardware stack levels used:    1
 28952 ;; This function calls:
 28953 ;;		Nothing
 28954 ;; This function is called by:
 28955 ;;		_Timer0_ISR
 28956 ;;		i2_Motor_Step
 28957 ;; This function uses a non-reentrant model
 28958 ;;
 28959                           
 28960                           	psect	text157
 28961  016198                     __ptext157:
 28962                           	opt stack 0
 28963  016198                     i2_Timer0_Stop:
 28964                           	opt stack 17
 28965                           
 28966                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 28967                           
 28968                           ;incstack = 0
 28969  016198  9AF2               	bcf	intcon,5,c	;volatile
 28970                           
 28971                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 28972  01619A  94F2               	bcf	intcon,2,c	;volatile
 28973  01619C  0012               	return		;funcret
 28974  01619E                     __end_ofi2_Timer0_Stop:
 28975                           	opt stack 0
 28976                           tosu	equ	0xFFF
 28977                           tosh	equ	0xFFE
 28978                           tosl	equ	0xFFD
 28979                           pclatu	equ	0xFFB
 28980                           pclath	equ	0xFFA
 28981                           tblptru	equ	0xFF8
 28982                           tblptrh	equ	0xFF7
 28983                           tblptrl	equ	0xFF6
 28984                           tablat	equ	0xFF5
 28985                           prodh	equ	0xFF4
 28986                           prodl	equ	0xFF3
 28987                           intcon	equ	0xFF2
 28988                           indf0	equ	0xFEF
 28989                           postinc0	equ	0xFEE
 28990                           fsr0h	equ	0xFEA
 28991                           fsr0l	equ	0xFE9
 28992                           wreg	equ	0xFE8
 28993                           indf1	equ	0xFE7
 28994                           postdec1	equ	0xFE5
 28995                           fsr1h	equ	0xFE2
 28996                           fsr1l	equ	0xFE1
 28997                           indf2	equ	0xFDF
 28998                           postinc2	equ	0xFDE
 28999                           postdec2	equ	0xFDD
 29000                           plusw2	equ	0xFDB
 29001                           fsr2h	equ	0xFDA
 29002                           fsr2l	equ	0xFD9
 29003                           status	equ	0xFD8
 29004                           
 29005 ;; *************** function i2_Timer0_Restart *****************
 29006 ;; Defined at:
 29007 ;;		line 83 in file "Library/Timer0.c"
 29008 ;; Parameters:    Size  Location     Type
 29009 ;;		None
 29010 ;; Auto vars:     Size  Location     Type
 29011 ;;		None
 29012 ;; Return value:  Size  Location     Type
 29013 ;;                  1    wreg      void 
 29014 ;; Registers used:
 29015 ;;		None
 29016 ;; Tracked objects:
 29017 ;;		On entry : 0/0
 29018 ;;		On exit  : 0/0
 29019 ;;		Unchanged: 0/0
 29020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29021 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29023 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29024 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29025 ;;Total ram usage:        0 bytes
 29026 ;; Hardware stack levels used:    1
 29027 ;; This function calls:
 29028 ;;		Nothing
 29029 ;; This function is called by:
 29030 ;;		i2_Motor_Step
 29031 ;; This function uses a non-reentrant model
 29032 ;;
 29033                           
 29034                           	psect	text158
 29035  016136                     __ptext158:
 29036                           	opt stack 0
 29037  016136                     i2_Timer0_Restart:
 29038                           	opt stack 16
 29039                           
 29040                           ;Timer0.c: 85: TMR0 = COUNTER;
 29041                           
 29042                           ;incstack = 0
 29043  016136  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29044  01613A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29045                           
 29046                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29047  01613E  8AF2               	bsf	intcon,5,c	;volatile
 29048  016140  0012               	return		;funcret
 29049  016142                     __end_ofi2_Timer0_Restart:
 29050                           	opt stack 0
 29051                           tosu	equ	0xFFF
 29052                           tosh	equ	0xFFE
 29053                           tosl	equ	0xFFD
 29054                           pclatu	equ	0xFFB
 29055                           pclath	equ	0xFFA
 29056                           tblptru	equ	0xFF8
 29057                           tblptrh	equ	0xFF7
 29058                           tblptrl	equ	0xFF6
 29059                           tablat	equ	0xFF5
 29060                           prodh	equ	0xFF4
 29061                           prodl	equ	0xFF3
 29062                           intcon	equ	0xFF2
 29063                           indf0	equ	0xFEF
 29064                           postinc0	equ	0xFEE
 29065                           fsr0h	equ	0xFEA
 29066                           fsr0l	equ	0xFE9
 29067                           wreg	equ	0xFE8
 29068                           indf1	equ	0xFE7
 29069                           postdec1	equ	0xFE5
 29070                           fsr1h	equ	0xFE2
 29071                           fsr1l	equ	0xFE1
 29072                           indf2	equ	0xFDF
 29073                           postinc2	equ	0xFDE
 29074                           postdec2	equ	0xFDD
 29075                           plusw2	equ	0xFDB
 29076                           fsr2h	equ	0xFDA
 29077                           fsr2l	equ	0xFD9
 29078                           status	equ	0xFD8
 29079                           
 29080 ;; *************** function i2_Port_SetPin *****************
 29081 ;; Defined at:
 29082 ;;		line 247 in file "Library/Port.c"
 29083 ;; Parameters:    Size  Location     Type
 29084 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29085 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29086 ;;  pPin            1   17[COMRAM] enum E6750
 29087 ;;  pValue          1   18[COMRAM] unsigned char 
 29088 ;; Auto vars:     Size  Location     Type
 29089 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29090 ;; Return value:  Size  Location     Type
 29091 ;;                  1    wreg      void 
 29092 ;; Registers used:
 29093 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29094 ;; Tracked objects:
 29095 ;;		On entry : 0/0
 29096 ;;		On exit  : 0/0
 29097 ;;		Unchanged: 0/0
 29098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29099 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29102 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29103 ;;Total ram usage:        5 bytes
 29104 ;; Hardware stack levels used:    1
 29105 ;; Hardware stack levels required when called:    3
 29106 ;; This function calls:
 29107 ;;		i2_Byte_SetBit
 29108 ;;		i2_Word_GetPair
 29109 ;; This function is called by:
 29110 ;;		i2_Motor_Step
 29111 ;; This function uses a non-reentrant model
 29112 ;;
 29113                           
 29114                           	psect	text159
 29115  0142C0                     __ptext159:
 29116                           	opt stack 0
 29117  0142C0                     i2_Port_SetPin:
 29118                           	opt stack 13
 29119                           
 29120                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 29121                           
 29122                           ;incstack = 0
 29123  0142C0  0E08               	movlw	8
 29124  0142C2  2410               	addwf	i2Port_SetPin@pInput,w,c
 29125  0142C4  6E0D               	movwf	i2Word_GetPair@pInput,c
 29126  0142C6  0E00               	movlw	0
 29127  0142C8  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 29128  0142CA  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 29129  0142CC  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 29130  0142D0  EC47  F0AE         	call	i2_Word_GetPair	;wreg free
 29131  0142D4  6E14               	movwf	i2Port_SetPin@Type,c
 29132                           
 29133                           ;Port.c: 250: switch (Type)
 29134  0142D6  D03B               	goto	i2l427
 29135  0142D8                     
 29136                           ;Port.c: 256: pValue &= 1;
 29137  0142D8  0E01               	movlw	1
 29138  0142DA  1613               	andwf	i2Port_SetPin@pValue,f,c
 29139                           
 29140                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29141  0142DC  EE20 F002          	lfsr	2,2
 29142  0142E0  5010               	movf	i2Port_SetPin@pInput,w,c
 29143  0142E2  26D9               	addwf	fsr2l,f,c
 29144  0142E4  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29145  0142E6  22DA               	addwfc	fsr2h,f,c
 29146  0142E8  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29147  0142EC  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29148  0142F0  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29149  0142F4  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29150  0142F8  EC37  F0AB         	call	i2_Byte_SetBit	;wreg free
 29151                           
 29152                           ;Port.c: 258: break;
 29153  0142FC  0012               	return	
 29154  0142FE                     
 29155                           ;Port.c: 261: pValue &= 1;
 29156  0142FE  0E01               	movlw	1
 29157  014300  1613               	andwf	i2Port_SetPin@pValue,f,c
 29158                           
 29159                           ;Port.c: 262: pValue ^= 1;
 29160  014302  0E01               	movlw	1
 29161  014304  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 29162                           
 29163                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 29164  014306  EE20 F002          	lfsr	2,2
 29165  01430A  5010               	movf	i2Port_SetPin@pInput,w,c
 29166  01430C  26D9               	addwf	fsr2l,f,c
 29167  01430E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29168  014310  22DA               	addwfc	fsr2h,f,c
 29169  014312  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29170  014316  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29171  01431A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29172  01431E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29173  014322  EC37  F0AB         	call	i2_Byte_SetBit	;wreg free
 29174                           
 29175                           ;Port.c: 264: break;
 29176  014326  0012               	return	
 29177  014328                     
 29178                           ;Port.c: 266: pValue &= 1;
 29179  014328  0E01               	movlw	1
 29180  01432A  1613               	andwf	i2Port_SetPin@pValue,f,c
 29181                           
 29182                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 29183  01432C  EE20 F004          	lfsr	2,4
 29184  014330  5010               	movf	i2Port_SetPin@pInput,w,c
 29185  014332  26D9               	addwf	fsr2l,f,c
 29186  014334  5011               	movf	i2Port_SetPin@pInput+1,w,c
 29187  014336  22DA               	addwfc	fsr2h,f,c
 29188  014338  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 29189  01433C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 29190  014340  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 29191  014344  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 29192  014348  EC37  F0AB         	call	i2_Byte_SetBit	;wreg free
 29193                           
 29194                           ;Port.c: 269: }
 29195                           
 29196                           ;Port.c: 268: break;
 29197  01434C  0012               	return	
 29198  01434E                     i2l427:
 29199  01434E  5014               	movf	i2Port_SetPin@Type,w,c
 29200                           
 29201                           ; Switch size 1, requested type "space"
 29202                           ; Number of cases is 4, Range of values is 0 to 3
 29203                           ; switch strategies available:
 29204                           ; Name         Instructions Cycles
 29205                           ; simple_byte           13     7 (average)
 29206                           ;	Chosen strategy is simple_byte
 29207  014350  0A00               	xorlw	0	; case 0
 29208  014352  B4D8               	btfsc	status,2,c
 29209  014354  0012               	return	
 29210  014356  0A01               	xorlw	1	; case 1
 29211  014358  B4D8               	btfsc	status,2,c
 29212  01435A  D7BE               	goto	i2l430
 29213  01435C  0A03               	xorlw	3	; case 2
 29214  01435E  B4D8               	btfsc	status,2,c
 29215  014360  D7CE               	goto	i2l432
 29216  014362  0A01               	xorlw	1	; case 3
 29217  014364  A4D8               	btfss	status,2,c
 29218  014366  0012               	return	
 29219  014368  D7DF               	goto	i2l433
 29220  01436A                     __end_ofi2_Port_SetPin:
 29221                           	opt stack 0
 29222                           tosu	equ	0xFFF
 29223                           tosh	equ	0xFFE
 29224                           tosl	equ	0xFFD
 29225                           pclatu	equ	0xFFB
 29226                           pclath	equ	0xFFA
 29227                           tblptru	equ	0xFF8
 29228                           tblptrh	equ	0xFF7
 29229                           tblptrl	equ	0xFF6
 29230                           tablat	equ	0xFF5
 29231                           prodh	equ	0xFF4
 29232                           prodl	equ	0xFF3
 29233                           intcon	equ	0xFF2
 29234                           indf0	equ	0xFEF
 29235                           postinc0	equ	0xFEE
 29236                           fsr0h	equ	0xFEA
 29237                           fsr0l	equ	0xFE9
 29238                           wreg	equ	0xFE8
 29239                           indf1	equ	0xFE7
 29240                           postdec1	equ	0xFE5
 29241                           fsr1h	equ	0xFE2
 29242                           fsr1l	equ	0xFE1
 29243                           indf2	equ	0xFDF
 29244                           postinc2	equ	0xFDE
 29245                           postdec2	equ	0xFDD
 29246                           plusw2	equ	0xFDB
 29247                           fsr2h	equ	0xFDA
 29248                           fsr2l	equ	0xFD9
 29249                           status	equ	0xFD8
 29250                           
 29251 ;; *************** function i2_Word_GetPair *****************
 29252 ;; Defined at:
 29253 ;;		line 156 in file "Library/Types.c"
 29254 ;; Parameters:    Size  Location     Type
 29255 ;;  pInput          2   12[COMRAM] PTR struct Word
 29256 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 29257 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 29258 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 29259 ;;		 -> PortC(10), PortF(10), NULL(0), 
 29260 ;;  pPair           1   14[COMRAM] unsigned char 
 29261 ;; Auto vars:     Size  Location     Type
 29262 ;;		None
 29263 ;; Return value:  Size  Location     Type
 29264 ;;                  1    wreg      unsigned char 
 29265 ;; Registers used:
 29266 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29267 ;; Tracked objects:
 29268 ;;		On entry : 0/0
 29269 ;;		On exit  : 0/0
 29270 ;;		Unchanged: 0/0
 29271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29272 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29275 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29276 ;;Total ram usage:        3 bytes
 29277 ;; Hardware stack levels used:    1
 29278 ;; Hardware stack levels required when called:    2
 29279 ;; This function calls:
 29280 ;;		i2_Byte_GetPair
 29281 ;; This function is called by:
 29282 ;;		i2_Port_SetPin
 29283 ;; This function uses a non-reentrant model
 29284 ;;
 29285                           
 29286                           	psect	text160
 29287  015C8E                     __ptext160:
 29288                           	opt stack 0
 29289  015C8E                     i2_Word_GetPair:
 29290                           	opt stack 13
 29291                           
 29292                           ;Types.c: 158: if (pPair >= 4)
 29293                           
 29294                           ;incstack = 0
 29295  015C8E  0E03               	movlw	3
 29296  015C90  640F               	cpfsgt	i2Word_GetPair@pPair,c
 29297  015C92  D00C               	goto	i2l781
 29298                           
 29299                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 29300  015C94  0E01               	movlw	1
 29301  015C96  240D               	addwf	i2Word_GetPair@pInput,w,c
 29302  015C98  6E0A               	movwf	i2Byte_GetPair@pInput,c
 29303  015C9A  0E00               	movlw	0
 29304  015C9C  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 29305  015C9E  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 29306  015CA0  500F               	movf	i2Word_GetPair@pPair,w,c
 29307  015CA2  0FFC               	addlw	252
 29308  015CA4  6E0C               	movwf	i2Byte_GetPair@pPair,c
 29309  015CA6  ECC3  F0AF         	call	i2_Byte_GetPair	;wreg free
 29310  015CAA  0012               	return	
 29311  015CAC                     i2l781:
 29312                           
 29313                           ;Types.c: 160: else
 29314                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 29315  015CAC  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 29316  015CB0  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 29317  015CB4  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 29318  015CB8  ECC3  F0AF         	call	i2_Byte_GetPair	;wreg free
 29319  015CBC  0012               	return	
 29320  015CBE                     __end_ofi2_Word_GetPair:
 29321                           	opt stack 0
 29322                           tosu	equ	0xFFF
 29323                           tosh	equ	0xFFE
 29324                           tosl	equ	0xFFD
 29325                           pclatu	equ	0xFFB
 29326                           pclath	equ	0xFFA
 29327                           tblptru	equ	0xFF8
 29328                           tblptrh	equ	0xFF7
 29329                           tblptrl	equ	0xFF6
 29330                           tablat	equ	0xFF5
 29331                           prodh	equ	0xFF4
 29332                           prodl	equ	0xFF3
 29333                           intcon	equ	0xFF2
 29334                           indf0	equ	0xFEF
 29335                           postinc0	equ	0xFEE
 29336                           fsr0h	equ	0xFEA
 29337                           fsr0l	equ	0xFE9
 29338                           wreg	equ	0xFE8
 29339                           indf1	equ	0xFE7
 29340                           postdec1	equ	0xFE5
 29341                           fsr1h	equ	0xFE2
 29342                           fsr1l	equ	0xFE1
 29343                           indf2	equ	0xFDF
 29344                           postinc2	equ	0xFDE
 29345                           postdec2	equ	0xFDD
 29346                           plusw2	equ	0xFDB
 29347                           fsr2h	equ	0xFDA
 29348                           fsr2l	equ	0xFD9
 29349                           status	equ	0xFD8
 29350                           
 29351 ;; *************** function i2_Byte_GetPair *****************
 29352 ;; Defined at:
 29353 ;;		line 87 in file "Library/Types.c"
 29354 ;; Parameters:    Size  Location     Type
 29355 ;;  pInput          2    9[COMRAM] PTR struct Byte
 29356 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29357 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29358 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29359 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29360 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29361 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29362 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29363 ;;		 -> NULL(0), 
 29364 ;;  pPair           1   11[COMRAM] unsigned char 
 29365 ;; Auto vars:     Size  Location     Type
 29366 ;;		None
 29367 ;; Return value:  Size  Location     Type
 29368 ;;                  1    wreg      unsigned char 
 29369 ;; Registers used:
 29370 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29371 ;; Tracked objects:
 29372 ;;		On entry : 0/0
 29373 ;;		On exit  : 0/0
 29374 ;;		Unchanged: 0/0
 29375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29376 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29379 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29380 ;;Total ram usage:        3 bytes
 29381 ;; Hardware stack levels used:    1
 29382 ;; Hardware stack levels required when called:    1
 29383 ;; This function calls:
 29384 ;;		i2_Byte_GetZone
 29385 ;; This function is called by:
 29386 ;;		i2_Word_GetPair
 29387 ;; This function uses a non-reentrant model
 29388 ;;
 29389                           
 29390                           	psect	text161
 29391  015F86                     __ptext161:
 29392                           	opt stack 0
 29393  015F86                     i2_Byte_GetPair:
 29394                           	opt stack 13
 29395                           
 29396                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 29397                           
 29398                           ;incstack = 0
 29399  015F86  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 29400  015F8A  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 29401  015F8E  0E04               	movlw	4
 29402  015F90  6E03               	movwf	i2Byte_GetZone@pMax,c
 29403  015F92  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 29404  015F96  0E02               	movlw	2
 29405  015F98  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 29406  015F9A  EC82  F0A6         	call	i2_Byte_GetZone	;wreg free
 29407  015F9E  0012               	return	
 29408  015FA0                     __end_ofi2_Byte_GetPair:
 29409                           	opt stack 0
 29410                           tosu	equ	0xFFF
 29411                           tosh	equ	0xFFE
 29412                           tosl	equ	0xFFD
 29413                           pclatu	equ	0xFFB
 29414                           pclath	equ	0xFFA
 29415                           tblptru	equ	0xFF8
 29416                           tblptrh	equ	0xFF7
 29417                           tblptrl	equ	0xFF6
 29418                           tablat	equ	0xFF5
 29419                           prodh	equ	0xFF4
 29420                           prodl	equ	0xFF3
 29421                           intcon	equ	0xFF2
 29422                           indf0	equ	0xFEF
 29423                           postinc0	equ	0xFEE
 29424                           fsr0h	equ	0xFEA
 29425                           fsr0l	equ	0xFE9
 29426                           wreg	equ	0xFE8
 29427                           indf1	equ	0xFE7
 29428                           postdec1	equ	0xFE5
 29429                           fsr1h	equ	0xFE2
 29430                           fsr1l	equ	0xFE1
 29431                           indf2	equ	0xFDF
 29432                           postinc2	equ	0xFDE
 29433                           postdec2	equ	0xFDD
 29434                           plusw2	equ	0xFDB
 29435                           fsr2h	equ	0xFDA
 29436                           fsr2l	equ	0xFD9
 29437                           status	equ	0xFD8
 29438                           
 29439 ;; *************** function i2_Byte_GetZone *****************
 29440 ;; Defined at:
 29441 ;;		line 64 in file "Library/Types.c"
 29442 ;; Parameters:    Size  Location     Type
 29443 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29444 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 29445 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 29446 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 29447 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 29448 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 29449 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 29450 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 29451 ;;		 -> NULL(0), 
 29452 ;;  pMax            1    2[COMRAM] unsigned char 
 29453 ;;  pChunk          1    3[COMRAM] unsigned char 
 29454 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 29455 ;; Auto vars:     Size  Location     Type
 29456 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 29457 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 29458 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 29459 ;; Return value:  Size  Location     Type
 29460 ;;                  1    wreg      unsigned char 
 29461 ;; Registers used:
 29462 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 29463 ;; Tracked objects:
 29464 ;;		On entry : 0/0
 29465 ;;		On exit  : 0/0
 29466 ;;		Unchanged: 0/0
 29467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29468 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29469 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29470 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29471 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29472 ;;Total ram usage:        9 bytes
 29473 ;; Hardware stack levels used:    1
 29474 ;; This function calls:
 29475 ;;		Nothing
 29476 ;; This function is called by:
 29477 ;;		i2_Byte_GetPair
 29478 ;; This function uses a non-reentrant model
 29479 ;;
 29480                           
 29481                           	psect	text162
 29482  014D04                     __ptext162:
 29483                           	opt stack 0
 29484  014D04                     i2_Byte_GetZone:
 29485                           	opt stack 13
 29486                           
 29487                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 29488                           
 29489                           ;incstack = 0
 29490  014D04  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 29491  014D08  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 29492  014D0C  0E00               	movlw	low (__mediumconst shr (0+16))
 29493  014D0E  6EF8               	movwf	tblptru,c
 29494  014D10  0E0F               	movlw	(high __ramtop+-1)
 29495  014D12  64F7               	cpfsgt	tblptrh,c
 29496  014D14  D003               	bra	i2u468_47
 29497  014D16  0008               	tblrd		*
 29498  014D18  50F5               	movf	tablat,w,c
 29499  014D1A  D005               	bra	i2u468_40
 29500  014D1C                     i2u468_47:
 29501  014D1C  CFF6 FFE9          	movff	tblptrl,fsr0l
 29502  014D20  CFF7 FFEA          	movff	tblptrh,fsr0h
 29503  014D24  50EF               	movf	indf0,w,c
 29504  014D26                     i2u468_40:
 29505  014D26  6E09               	movwf	i2Byte_GetZone@Output,c
 29506                           
 29507                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 29508  014D28  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29509  014D2A  0D01               	mullw	1
 29510  014D2C  0EC1               	movlw	low _MASKS
 29511  014D2E  24F3               	addwf	prodl,w,c
 29512  014D30  6EF6               	movwf	tblptrl,c
 29513  014D32  0EFD               	movlw	high _MASKS
 29514  014D34  20F4               	addwfc	prodh,w,c
 29515  014D36  6EF7               	movwf	tblptrh,c
 29516  014D38                     	if	1	;There are 3 active tblptr bytes
 29517  014D38  6AF8               	clrf	tblptru,c
 29518  014D3A  0E00               	movlw	low (__mediumconst shr (0+16))
 29519  014D3C  22F8               	addwfc	tblptru,f,c
 29520  014D3E                     	endif
 29521  014D3E  0008               	tblrd		*
 29522  014D40  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 29523                           
 29524                           ;Types.c: 68: UINT8 Offset = 0;
 29525  014D44  0E00               	movlw	0
 29526  014D46  6E08               	movwf	i2Byte_GetZone@Offset,c
 29527                           
 29528                           ;Types.c: 70: while (pChunk >= pMax)
 29529  014D48  D003               	goto	i2l732
 29530  014D4A                     
 29531                           ;Types.c: 71: {
 29532                           ;Types.c: 72: pChunk -= pMax;
 29533  014D4A  5003               	movf	i2Byte_GetZone@pMax,w,c
 29534  014D4C  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 29535                           
 29536                           ;Types.c: 73: Offset += 1;
 29537  014D4E  2A08               	incf	i2Byte_GetZone@Offset,f,c
 29538  014D50                     i2l732:
 29539  014D50  5003               	movf	i2Byte_GetZone@pMax,w,c
 29540  014D52  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 29541  014D54  B0D8               	btfsc	status,0,c
 29542  014D56  D7F9               	goto	i2l733
 29543                           
 29544                           ;Types.c: 74: }
 29545                           ;Types.c: 75: pChunk *= pChunkSize;
 29546  014D58  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 29547  014D5A  0204               	mulwf	i2Byte_GetZone@pChunk,c
 29548  014D5C  50F3               	movf	prodl,w,c
 29549  014D5E  6E04               	movwf	i2Byte_GetZone@pChunk,c
 29550                           
 29551                           ;Types.c: 76: pChunk += Offset;
 29552  014D60  5008               	movf	i2Byte_GetZone@Offset,w,c
 29553  014D62  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 29554                           
 29555                           ;Types.c: 78: Output >>= pChunk;
 29556  014D64  2804               	incf	i2Byte_GetZone@pChunk,w,c
 29557  014D66  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 29558  014D68  D002               	goto	i2u470_40
 29559  014D6A                     i2u470_45:
 29560  014D6A  90D8               	bcf	status,0,c
 29561  014D6C  3209               	rrcf	i2Byte_GetZone@Output,f,c
 29562  014D6E                     i2u470_40:
 29563  014D6E  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 29564  014D70  D7FC               	goto	i2u470_45
 29565                           
 29566                           ;Types.c: 79: Output &= MASK;
 29567  014D72  5007               	movf	i2Byte_GetZone@MASK,w,c
 29568  014D74  1609               	andwf	i2Byte_GetZone@Output,f,c
 29569                           
 29570                           ;Types.c: 80: return Output;
 29571  014D76  5009               	movf	i2Byte_GetZone@Output,w,c
 29572  014D78  0012               	return	
 29573  014D7A                     __end_ofi2_Byte_GetZone:
 29574                           	opt stack 0
 29575                           tosu	equ	0xFFF
 29576                           tosh	equ	0xFFE
 29577                           tosl	equ	0xFFD
 29578                           pclatu	equ	0xFFB
 29579                           pclath	equ	0xFFA
 29580                           tblptru	equ	0xFF8
 29581                           tblptrh	equ	0xFF7
 29582                           tblptrl	equ	0xFF6
 29583                           tablat	equ	0xFF5
 29584                           prodh	equ	0xFF4
 29585                           prodl	equ	0xFF3
 29586                           intcon	equ	0xFF2
 29587                           indf0	equ	0xFEF
 29588                           postinc0	equ	0xFEE
 29589                           fsr0h	equ	0xFEA
 29590                           fsr0l	equ	0xFE9
 29591                           wreg	equ	0xFE8
 29592                           indf1	equ	0xFE7
 29593                           postdec1	equ	0xFE5
 29594                           fsr1h	equ	0xFE2
 29595                           fsr1l	equ	0xFE1
 29596                           indf2	equ	0xFDF
 29597                           postinc2	equ	0xFDE
 29598                           postdec2	equ	0xFDD
 29599                           plusw2	equ	0xFDB
 29600                           fsr2h	equ	0xFDA
 29601                           fsr2l	equ	0xFD9
 29602                           status	equ	0xFD8
 29603                           
 29604 ;; *************** function i2_Byte_SetBit *****************
 29605 ;; Defined at:
 29606 ;;		line 32 in file "Library/Types.c"
 29607 ;; Parameters:    Size  Location     Type
 29608 ;;  pInput          2    0[COMRAM] PTR struct Byte
 29609 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 29610 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 29611 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 29612 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 29613 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 29614 ;;		 -> NULL(0), 
 29615 ;;  pBit            1    2[COMRAM] unsigned char 
 29616 ;;  pValue          1    3[COMRAM] unsigned char 
 29617 ;; Auto vars:     Size  Location     Type
 29618 ;;		None
 29619 ;; Return value:  Size  Location     Type
 29620 ;;                  1    wreg      void 
 29621 ;; Registers used:
 29622 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29623 ;; Tracked objects:
 29624 ;;		On entry : 0/0
 29625 ;;		On exit  : 0/0
 29626 ;;		Unchanged: 0/0
 29627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29628 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29630 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29631 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29632 ;;Total ram usage:        7 bytes
 29633 ;; Hardware stack levels used:    1
 29634 ;; This function calls:
 29635 ;;		Nothing
 29636 ;; This function is called by:
 29637 ;;		i2_Port_SetPin
 29638 ;; This function uses a non-reentrant model
 29639 ;;
 29640                           
 29641                           	psect	text163
 29642  01566E                     __ptext163:
 29643                           	opt stack 0
 29644  01566E                     i2_Byte_SetBit:
 29645                           	opt stack 15
 29646                           
 29647                           ;Types.c: 34: pValue &= 1;
 29648                           
 29649                           ;incstack = 0
 29650  01566E  0E01               	movlw	1
 29651  015670  1604               	andwf	i2Byte_SetBit@pValue,f,c
 29652                           
 29653                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29654  015672  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29655  015676  0E01               	movlw	1
 29656  015678  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 29657  01567A  2A05               	incf	??i2_Byte_SetBit,f,c
 29658  01567C  D002               	goto	i2u525_44
 29659  01567E                     i2u525_45:
 29660  01567E  90D8               	bcf	status,0,c
 29661  015680  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29662  015682                     i2u525_44:
 29663  015682  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29664  015684  D7FC               	goto	i2u525_45
 29665  015686  5006               	movf	??i2_Byte_SetBit+1,w,c
 29666  015688  0AFF               	xorlw	255
 29667  01568A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 29668  01568C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29669  015690  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29670  015694  5007               	movf	??i2_Byte_SetBit+2,w,c
 29671  015696  16DF               	andwf	indf2,f,c
 29672                           
 29673                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29674  015698  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 29675  01569C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 29676  0156A0  2A05               	incf	??i2_Byte_SetBit,f,c
 29677  0156A2  D002               	goto	i2u526_44
 29678  0156A4                     i2u526_45:
 29679  0156A4  90D8               	bcf	status,0,c
 29680  0156A6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 29681  0156A8                     i2u526_44:
 29682  0156A8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 29683  0156AA  D7FC               	goto	i2u526_45
 29684  0156AC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 29685  0156B0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 29686  0156B4  5006               	movf	??i2_Byte_SetBit+1,w,c
 29687  0156B6  12DF               	iorwf	indf2,f,c
 29688  0156B8  0012               	return		;funcret
 29689  0156BA                     __end_ofi2_Byte_SetBit:
 29690                           	opt stack 0
 29691                           tosu	equ	0xFFF
 29692                           tosh	equ	0xFFE
 29693                           tosl	equ	0xFFD
 29694                           pclatu	equ	0xFFB
 29695                           pclath	equ	0xFFA
 29696                           tblptru	equ	0xFF8
 29697                           tblptrh	equ	0xFF7
 29698                           tblptrl	equ	0xFF6
 29699                           tablat	equ	0xFF5
 29700                           prodh	equ	0xFF4
 29701                           prodl	equ	0xFF3
 29702                           intcon	equ	0xFF2
 29703                           indf0	equ	0xFEF
 29704                           postinc0	equ	0xFEE
 29705                           fsr0h	equ	0xFEA
 29706                           fsr0l	equ	0xFE9
 29707                           wreg	equ	0xFE8
 29708                           indf1	equ	0xFE7
 29709                           postdec1	equ	0xFE5
 29710                           fsr1h	equ	0xFE2
 29711                           fsr1l	equ	0xFE1
 29712                           indf2	equ	0xFDF
 29713                           postinc2	equ	0xFDE
 29714                           postdec2	equ	0xFDD
 29715                           plusw2	equ	0xFDB
 29716                           fsr2h	equ	0xFDA
 29717                           fsr2l	equ	0xFD9
 29718                           status	equ	0xFD8
 29719                           
 29720 ;; *************** function i2_MXK_SwitchTo *****************
 29721 ;; Defined at:
 29722 ;;		line 105 in file "Library/MXK.c"
 29723 ;; Parameters:    Size  Location     Type
 29724 ;;  pModule         1    wreg     enum E6927
 29725 ;; Auto vars:     Size  Location     Type
 29726 ;;  pModule         1    7[COMRAM] enum E6927
 29727 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 29728 ;; Return value:  Size  Location     Type
 29729 ;;                  1    wreg      unsigned char 
 29730 ;; Registers used:
 29731 ;;		wreg, status,2, status,0, cstack
 29732 ;; Tracked objects:
 29733 ;;		On entry : 0/0
 29734 ;;		On exit  : 0/0
 29735 ;;		Unchanged: 0/0
 29736 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29737 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29738 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29739 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29740 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29741 ;;Total ram usage:        2 bytes
 29742 ;; Hardware stack levels used:    1
 29743 ;; Hardware stack levels required when called:    1
 29744 ;; This function calls:
 29745 ;;		i2_delay_us
 29746 ;; This function is called by:
 29747 ;;		i2_Motor_Step
 29748 ;; This function uses a non-reentrant model
 29749 ;;
 29750                           
 29751                           	psect	text164
 29752  015B92                     __ptext164:
 29753                           	opt stack 0
 29754  015B92                     i2_MXK_SwitchTo:
 29755                           	opt stack 15
 29756                           
 29757                           ;incstack = 0
 29758                           ;i2MXK_SwitchTo@pModule stored from wreg
 29759  015B92  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 29760                           
 29761                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 29762  015B94  5086               	movf	3974,w,c	;volatile
 29763  015B96  0B0F               	andlw	15
 29764  015B98  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 29765                           
 29766                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 29767  015B9A  504B               	movf	_Bus_State,w,c
 29768  015B9C  A4D8               	btfss	status,2,c
 29769  015B9E  D002               	goto	i2l1730
 29770                           
 29771                           ;MXK.c: 110: return 0;
 29772  015BA0  0E00               	movlw	0
 29773  015BA2  0012               	return	
 29774  015BA4                     i2l1730:
 29775                           
 29776                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 29777  015BA4  0E00               	movlw	0
 29778  015BA6  6E4B               	movwf	_Bus_State,c
 29779                           
 29780                           ;MXK.c: 114: if (CUR != pModule)
 29781  015BA8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 29782  015BAA  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 29783  015BAC  B4D8               	btfsc	status,2,c
 29784  015BAE  D00A               	goto	i2l1732
 29785                           
 29786                           ;MXK.c: 115: {
 29787                           ;MXK.c: 116: PORTG &= ~(0xF);
 29788  015BB0  0EF0               	movlw	240
 29789  015BB2  1686               	andwf	3974,f,c	;volatile
 29790                           
 29791                           ;MXK.c: 117: PORTG |= pModule;
 29792  015BB4  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 29793  015BB6  1286               	iorwf	3974,f,c	;volatile
 29794                           
 29795                           ;MXK.c: 120: delay_us(10);
 29796  015BB8  0E00               	movlw	0
 29797  015BBA  6E02               	movwf	i2delay_us@us+1,c
 29798  015BBC  0E0A               	movlw	10
 29799  015BBE  6E01               	movwf	i2delay_us@us,c
 29800  015BC0  ECBA  F0AC         	call	i2_delay_us	;wreg free
 29801  015BC4                     i2l1732:
 29802                           
 29803                           ;MXK.c: 121: }
 29804                           ;MXK.c: 122: return 1;
 29805  015BC4  0E01               	movlw	1
 29806  015BC6  0012               	return	
 29807  015BC8                     __end_ofi2_MXK_SwitchTo:
 29808                           	opt stack 0
 29809                           tosu	equ	0xFFF
 29810                           tosh	equ	0xFFE
 29811                           tosl	equ	0xFFD
 29812                           pclatu	equ	0xFFB
 29813                           pclath	equ	0xFFA
 29814                           tblptru	equ	0xFF8
 29815                           tblptrh	equ	0xFF7
 29816                           tblptrl	equ	0xFF6
 29817                           tablat	equ	0xFF5
 29818                           prodh	equ	0xFF4
 29819                           prodl	equ	0xFF3
 29820                           intcon	equ	0xFF2
 29821                           indf0	equ	0xFEF
 29822                           postinc0	equ	0xFEE
 29823                           fsr0h	equ	0xFEA
 29824                           fsr0l	equ	0xFE9
 29825                           wreg	equ	0xFE8
 29826                           indf1	equ	0xFE7
 29827                           postdec1	equ	0xFE5
 29828                           fsr1h	equ	0xFE2
 29829                           fsr1l	equ	0xFE1
 29830                           indf2	equ	0xFDF
 29831                           postinc2	equ	0xFDE
 29832                           postdec2	equ	0xFDD
 29833                           plusw2	equ	0xFDB
 29834                           fsr2h	equ	0xFDA
 29835                           fsr2l	equ	0xFD9
 29836                           status	equ	0xFD8
 29837                           
 29838 ;; *************** function i2_delay_us *****************
 29839 ;; Defined at:
 29840 ;;		line 255 in file "Library/Types.c"
 29841 ;; Parameters:    Size  Location     Type
 29842 ;;  us              2    0[COMRAM] unsigned short 
 29843 ;; Auto vars:     Size  Location     Type
 29844 ;;  delay_us        4    2[COMRAM] unsigned long 
 29845 ;; Return value:  Size  Location     Type
 29846 ;;                  1    wreg      void 
 29847 ;; Registers used:
 29848 ;;		wreg, status,2, status,0
 29849 ;; Tracked objects:
 29850 ;;		On entry : 0/0
 29851 ;;		On exit  : 0/0
 29852 ;;		Unchanged: 0/0
 29853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29854 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29855 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29857 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29858 ;;Total ram usage:        6 bytes
 29859 ;; Hardware stack levels used:    1
 29860 ;; This function calls:
 29861 ;;		Nothing
 29862 ;; This function is called by:
 29863 ;;		i2_MXK_SwitchTo
 29864 ;; This function uses a non-reentrant model
 29865 ;;
 29866                           
 29867                           	psect	text165
 29868  015974                     __ptext165:
 29869                           	opt stack 0
 29870  015974                     i2_delay_us:
 29871                           	opt stack 15
 29872                           
 29873                           ;Types.c: 256: unsigned long u;
 29874                           ;Types.c: 257: while (us--) {
 29875                           
 29876                           ;incstack = 0
 29877  015974  D016               	goto	i2u529_40
 29878  015976                     i2l8887:
 29879                           
 29880                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 29881  015976  0E00               	movlw	0
 29882  015978  6E03               	movwf	i2delay_us@u,c
 29883  01597A  0E00               	movlw	0
 29884  01597C  6E04               	movwf	i2delay_us@u+1,c
 29885  01597E  0E00               	movlw	0
 29886  015980  6E05               	movwf	i2delay_us@u+2,c
 29887  015982  0E00               	movlw	0
 29888  015984  6E06               	movwf	i2delay_us@u+3,c
 29889  015986                     i2l8889:
 29890  015986  5003               	movf	i2delay_us@u,w,c
 29891  015988  1004               	iorwf	i2delay_us@u+1,w,c
 29892  01598A  1005               	iorwf	i2delay_us@u+2,w,c
 29893  01598C  1006               	iorwf	i2delay_us@u+3,w,c
 29894  01598E  A4D8               	btfss	status,2,c
 29895  015990  D008               	goto	i2u529_40
 29896  015992  F000               	nop		; ;# 
 29897  015994  0E01               	movlw	1
 29898  015996  2603               	addwf	i2delay_us@u,f,c
 29899  015998  0E00               	movlw	0
 29900  01599A  2204               	addwfc	i2delay_us@u+1,f,c
 29901  01599C  2205               	addwfc	i2delay_us@u+2,f,c
 29902  01599E  2206               	addwfc	i2delay_us@u+3,f,c
 29903  0159A0  D7F2               	goto	i2l8889
 29904  0159A2                     i2u529_40:
 29905  0159A2  0601               	decf	i2delay_us@us,f,c
 29906  0159A4  A0D8               	btfss	status,0,c
 29907  0159A6  0602               	decf	i2delay_us@us+1,f,c
 29908  0159A8  2801               	incf	i2delay_us@us,w,c
 29909  0159AA  E1E5               	bnz	i2l8887
 29910  0159AC  2802               	incf	i2delay_us@us+1,w,c
 29911  0159AE  B4D8               	btfsc	status,2,c
 29912  0159B0  0012               	return	
 29913  0159B2  D7E1               	goto	i2l832
 29914  0159B4                     __end_ofi2_delay_us:
 29915                           	opt stack 0
 29916                           tosu	equ	0xFFF
 29917                           tosh	equ	0xFFE
 29918                           tosl	equ	0xFFD
 29919                           pclatu	equ	0xFFB
 29920                           pclath	equ	0xFFA
 29921                           tblptru	equ	0xFF8
 29922                           tblptrh	equ	0xFF7
 29923                           tblptrl	equ	0xFF6
 29924                           tablat	equ	0xFF5
 29925                           prodh	equ	0xFF4
 29926                           prodl	equ	0xFF3
 29927                           intcon	equ	0xFF2
 29928                           indf0	equ	0xFEF
 29929                           postinc0	equ	0xFEE
 29930                           fsr0h	equ	0xFEA
 29931                           fsr0l	equ	0xFE9
 29932                           wreg	equ	0xFE8
 29933                           indf1	equ	0xFE7
 29934                           postdec1	equ	0xFE5
 29935                           fsr1h	equ	0xFE2
 29936                           fsr1l	equ	0xFE1
 29937                           indf2	equ	0xFDF
 29938                           postinc2	equ	0xFDE
 29939                           postdec2	equ	0xFDD
 29940                           plusw2	equ	0xFDB
 29941                           fsr2h	equ	0xFDA
 29942                           fsr2l	equ	0xFD9
 29943                           status	equ	0xFD8
 29944                           
 29945 ;; *************** function i2_MXK_Release *****************
 29946 ;; Defined at:
 29947 ;;		line 130 in file "Library/MXK.c"
 29948 ;; Parameters:    Size  Location     Type
 29949 ;;		None
 29950 ;; Auto vars:     Size  Location     Type
 29951 ;;		None
 29952 ;; Return value:  Size  Location     Type
 29953 ;;                  1    wreg      unsigned char 
 29954 ;; Registers used:
 29955 ;;		wreg, status,2, status,0
 29956 ;; Tracked objects:
 29957 ;;		On entry : 0/0
 29958 ;;		On exit  : 0/0
 29959 ;;		Unchanged: 0/0
 29960 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29961 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29962 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29963 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29964 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29965 ;;Total ram usage:        0 bytes
 29966 ;; Hardware stack levels used:    1
 29967 ;; This function calls:
 29968 ;;		Nothing
 29969 ;; This function is called by:
 29970 ;;		i2_Motor_Step
 29971 ;; This function uses a non-reentrant model
 29972 ;;
 29973                           
 29974                           	psect	text166
 29975  01619E                     __ptext166:
 29976                           	opt stack 0
 29977  01619E                     i2_MXK_Release:
 29978                           	opt stack 16
 29979                           
 29980                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 29981                           
 29982                           ;incstack = 0
 29983  01619E  0E01               	movlw	1
 29984  0161A0  6E4B               	movwf	_Bus_State,c
 29985                           
 29986                           ;MXK.c: 135: return 1;
 29987                           ;	Return value of i2_MXK_Release is never used
 29988  0161A2  0012               	return	
 29989  0161A4                     __end_ofi2_MXK_Release:
 29990                           	opt stack 0
 29991                           tosu	equ	0xFFF
 29992                           tosh	equ	0xFFE
 29993                           tosl	equ	0xFFD
 29994                           pclatu	equ	0xFFB
 29995                           pclath	equ	0xFFA
 29996                           tblptru	equ	0xFF8
 29997                           tblptrh	equ	0xFF7
 29998                           tblptrl	equ	0xFF6
 29999                           tablat	equ	0xFF5
 30000                           prodh	equ	0xFF4
 30001                           prodl	equ	0xFF3
 30002                           intcon	equ	0xFF2
 30003                           indf0	equ	0xFEF
 30004                           postinc0	equ	0xFEE
 30005                           fsr0h	equ	0xFEA
 30006                           fsr0l	equ	0xFE9
 30007                           wreg	equ	0xFE8
 30008                           indf1	equ	0xFE7
 30009                           postdec1	equ	0xFE5
 30010                           fsr1h	equ	0xFE2
 30011                           fsr1l	equ	0xFE1
 30012                           indf2	equ	0xFDF
 30013                           postinc2	equ	0xFDE
 30014                           postdec2	equ	0xFDD
 30015                           plusw2	equ	0xFDB
 30016                           fsr2h	equ	0xFDA
 30017                           fsr2l	equ	0xFD9
 30018                           status	equ	0xFD8
 30019                           
 30020 ;; *************** function i2_MXK_Queue *****************
 30021 ;; Defined at:
 30022 ;;		line 144 in file "Library/MXK.c"
 30023 ;; Parameters:    Size  Location     Type
 30024 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30025 ;;		 -> Absolute function(1), Motor_Step(1), 
 30026 ;; Auto vars:     Size  Location     Type
 30027 ;;		None
 30028 ;; Return value:  Size  Location     Type
 30029 ;;                  1    wreg      void 
 30030 ;; Registers used:
 30031 ;;		wreg, status,2, status,0
 30032 ;; Tracked objects:
 30033 ;;		On entry : 0/0
 30034 ;;		On exit  : 0/0
 30035 ;;		Unchanged: 0/0
 30036 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30037 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30038 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30039 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30040 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30041 ;;Total ram usage:        3 bytes
 30042 ;; Hardware stack levels used:    1
 30043 ;; This function calls:
 30044 ;;		Nothing
 30045 ;; This function is called by:
 30046 ;;		i2_Motor_Step
 30047 ;; This function uses a non-reentrant model
 30048 ;;
 30049                           
 30050                           	psect	text167
 30051  016104                     __ptext167:
 30052                           	opt stack 0
 30053  016104                     i2_MXK_Queue:
 30054                           	opt stack 16
 30055                           
 30056                           ;MXK.c: 146: lQueue = pCallback;
 30057                           
 30058                           ;incstack = 0
 30059  016104  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30060  016108  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30061  01610C  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30062  016110  0012               	return		;funcret
 30063  016112                     __end_ofi2_MXK_Queue:
 30064                           	opt stack 0
 30065                           tosu	equ	0xFFF
 30066                           tosh	equ	0xFFE
 30067                           tosl	equ	0xFFD
 30068                           pclatu	equ	0xFFB
 30069                           pclath	equ	0xFFA
 30070                           tblptru	equ	0xFF8
 30071                           tblptrh	equ	0xFF7
 30072                           tblptrl	equ	0xFF6
 30073                           tablat	equ	0xFF5
 30074                           prodh	equ	0xFF4
 30075                           prodl	equ	0xFF3
 30076                           intcon	equ	0xFF2
 30077                           indf0	equ	0xFEF
 30078                           postinc0	equ	0xFEE
 30079                           fsr0h	equ	0xFEA
 30080                           fsr0l	equ	0xFE9
 30081                           wreg	equ	0xFE8
 30082                           indf1	equ	0xFE7
 30083                           postdec1	equ	0xFE5
 30084                           fsr1h	equ	0xFE2
 30085                           fsr1l	equ	0xFE1
 30086                           indf2	equ	0xFDF
 30087                           postinc2	equ	0xFDE
 30088                           postdec2	equ	0xFDD
 30089                           plusw2	equ	0xFDB
 30090                           fsr2h	equ	0xFDA
 30091                           fsr2l	equ	0xFD9
 30092                           status	equ	0xFD8
 30093                           tosu	equ	0xFFF
 30094                           tosh	equ	0xFFE
 30095                           tosl	equ	0xFFD
 30096                           pclatu	equ	0xFFB
 30097                           pclath	equ	0xFFA
 30098                           tblptru	equ	0xFF8
 30099                           tblptrh	equ	0xFF7
 30100                           tblptrl	equ	0xFF6
 30101                           tablat	equ	0xFF5
 30102                           prodh	equ	0xFF4
 30103                           prodl	equ	0xFF3
 30104                           intcon	equ	0xFF2
 30105                           indf0	equ	0xFEF
 30106                           postinc0	equ	0xFEE
 30107                           fsr0h	equ	0xFEA
 30108                           fsr0l	equ	0xFE9
 30109                           wreg	equ	0xFE8
 30110                           indf1	equ	0xFE7
 30111                           postdec1	equ	0xFE5
 30112                           fsr1h	equ	0xFE2
 30113                           fsr1l	equ	0xFE1
 30114                           indf2	equ	0xFDF
 30115                           postinc2	equ	0xFDE
 30116                           postdec2	equ	0xFDD
 30117                           plusw2	equ	0xFDB
 30118                           fsr2h	equ	0xFDA
 30119                           fsr2l	equ	0xFD9
 30120                           status	equ	0xFD8
 30121                           
 30122                           	psect	text168
 30123  000000                     __ptext168:
 30124                           	opt stack 0
 30125                           tosu	equ	0xFFF
 30126                           tosh	equ	0xFFE
 30127                           tosl	equ	0xFFD
 30128                           pclatu	equ	0xFFB
 30129                           pclath	equ	0xFFA
 30130                           tblptru	equ	0xFF8
 30131                           tblptrh	equ	0xFF7
 30132                           tblptrl	equ	0xFF6
 30133                           tablat	equ	0xFF5
 30134                           prodh	equ	0xFF4
 30135                           prodl	equ	0xFF3
 30136                           intcon	equ	0xFF2
 30137                           indf0	equ	0xFEF
 30138                           postinc0	equ	0xFEE
 30139                           fsr0h	equ	0xFEA
 30140                           fsr0l	equ	0xFE9
 30141                           wreg	equ	0xFE8
 30142                           indf1	equ	0xFE7
 30143                           postdec1	equ	0xFE5
 30144                           fsr1h	equ	0xFE2
 30145                           fsr1l	equ	0xFE1
 30146                           indf2	equ	0xFDF
 30147                           postinc2	equ	0xFDE
 30148                           postdec2	equ	0xFDD
 30149                           plusw2	equ	0xFDB
 30150                           fsr2h	equ	0xFDA
 30151                           fsr2l	equ	0xFD9
 30152                           status	equ	0xFD8
 30153                           
 30154                           	psect	rparam
 30155  0000                     tosu	equ	0xFFF
 30156                           tosh	equ	0xFFE
 30157                           tosl	equ	0xFFD
 30158                           pclatu	equ	0xFFB
 30159                           pclath	equ	0xFFA
 30160                           tblptru	equ	0xFF8
 30161                           tblptrh	equ	0xFF7
 30162                           tblptrl	equ	0xFF6
 30163                           tablat	equ	0xFF5
 30164                           prodh	equ	0xFF4
 30165                           prodl	equ	0xFF3
 30166                           intcon	equ	0xFF2
 30167                           indf0	equ	0xFEF
 30168                           postinc0	equ	0xFEE
 30169                           fsr0h	equ	0xFEA
 30170                           fsr0l	equ	0xFE9
 30171                           wreg	equ	0xFE8
 30172                           indf1	equ	0xFE7
 30173                           postdec1	equ	0xFE5
 30174                           fsr1h	equ	0xFE2
 30175                           fsr1l	equ	0xFE1
 30176                           indf2	equ	0xFDF
 30177                           postinc2	equ	0xFDE
 30178                           postdec2	equ	0xFDD
 30179                           plusw2	equ	0xFDB
 30180                           fsr2h	equ	0xFDA
 30181                           fsr2l	equ	0xFD9
 30182                           status	equ	0xFD8
 30183                           
 30184                           	psect	temp
 30185  000051                     btemp:
 30186                           	opt stack 0
 30187  000051                     	ds	1
 30188  0000                     int$flags	set	btemp
 30189  0000                     wtemp6	set	btemp+1
 30190                           tosu	equ	0xFFF
 30191                           tosh	equ	0xFFE
 30192                           tosl	equ	0xFFD
 30193                           pclatu	equ	0xFFB
 30194                           pclath	equ	0xFFA
 30195                           tblptru	equ	0xFF8
 30196                           tblptrh	equ	0xFF7
 30197                           tblptrl	equ	0xFF6
 30198                           tablat	equ	0xFF5
 30199                           prodh	equ	0xFF4
 30200                           prodl	equ	0xFF3
 30201                           intcon	equ	0xFF2
 30202                           indf0	equ	0xFEF
 30203                           postinc0	equ	0xFEE
 30204                           fsr0h	equ	0xFEA
 30205                           fsr0l	equ	0xFE9
 30206                           wreg	equ	0xFE8
 30207                           indf1	equ	0xFE7
 30208                           postdec1	equ	0xFE5
 30209                           fsr1h	equ	0xFE2
 30210                           fsr1l	equ	0xFE1
 30211                           indf2	equ	0xFDF
 30212                           postinc2	equ	0xFDE
 30213                           postdec2	equ	0xFDD
 30214                           plusw2	equ	0xFDB
 30215                           fsr2h	equ	0xFDA
 30216                           fsr2l	equ	0xFD9
 30217                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    730
    Data        29
    BSS         826
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      2     250
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_6(CODE[14]), STR_5(CODE[3]), STR_4(CODE[46]), STR_3(CODE[3]), 
		 -> STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK3[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___fldiv
    _ADC_Voltage->___flmul
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 1377528
                                              0 BANK3      2     2      0
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  180440
                                             44 BANK0      2     2      0
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  188550
                                             53 BANK0      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                           _HMI_Poll
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _printf                                              25    17      8    5275
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (4) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (5) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (6) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (6) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (7) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (7) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (5) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (6) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (3) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (4) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) ___fltol                                             10     6      4     631
                                             43 BANK0     10     6      4
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
 ---------------------------------------------------------------------------------
 (2) _Motor_Speed                                          4     0      4    3839
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (2) _Motor_Move                                           6     2      4     915
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (3) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (2) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (3) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (2) _HMI_Poll                                             0     0      0   84861
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (3) _Button_Poll                                          9     6      3   84861
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (4) _Event_TestButton                                     1     1      0   37493
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetNumber                                        2     0      2    4398
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (6) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (7) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (7) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (4) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (4) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (5) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (5) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (3) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (3) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (4) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (2) _ADC_Voltage                                         18    14      4    7057
                                             25 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     544
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    2761
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    3095
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  996880
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (4) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (3) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (4) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (4) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (6) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (6) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (6) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (4) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (6) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (7) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (2) _ADC_Start                                            4     2      2     918
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (3) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              2     2      0   11658
                                              6 BANK0      2     2      0
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (2) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (2) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (4) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (3) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Poll
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
         ___xxtofl
       ___fldiv (ARG)
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_Dequeue *
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release *
     _MXK_SwitchTo *
       _delay_us
     _MXK_TestButton *
       _Port_GetPin
     _irobot_move_straight *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play *
       _eusart_putch
     _irobot_stop_motion *
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf *
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _update_angle *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_bump_and_cliff *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance *
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
   _mode4

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      2      FA      11       97.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     494      12        0.0%
DATA                 0      0     5C0       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sun Sep 10 16:18:05 2017

                                 _update_angle 609A                                  i2_Timer0_Stop 6198  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 3574                                              _A 004C  
                                            l8 3A3C                                   ___fldiv@aexp 00D2  
                                 ___fldiv@bexp 00D1                                              _a 004D  
                                            _i 003A                                              _j 0039  
                                            _l 004F                                              _u 0038  
                                            _w 0050                            _irobot_led_power_on 5F32  
                                 ___fldiv@sign 00C6                                             l11 2CE6  
                                           l12 2CD0                                             l90 2C1C  
                                           l85 2B18                                             l87 2B86  
                                           l89 2BF2                                   ___awdiv@sign 00BF  
                           __size_of_ADC_Start 0084                            ___wmul@multiplicand 00BC  
                                _HMI_DIPSwitch 5FD0                             LCD_DrawField@pSize 00D2  
                           LCD_DrawField@count 00D8                     __end_of_irobot_stop_motion 5822  
                            ?_Event_TestButton 0001                               i2_Timer0_Restart 6136  
                         ADC_ClockDivision@reg 00BB                                            l120 4776  
                                          l121 478C                                            l122 47A2  
                                          l220 53A4                                            l117 47B8  
                                          l221 5368                                            l118 4760  
                                          l230 55F0                                            l222 53B4  
                                          l223 5386                                    ?_LED_Toggle 0001  
                                          l234 5782                                            l235 5752  
                                          l227 560C                                            l403 27A6  
                                          l412 2482                                            l228 55D4  
                                          l340 4424                                            l404 2746  
                                          l421 2416                                            l413 2318  
                                          l237 576A                                            l341 4432  
                                          l405 27D6                                  ??_Console_Tab 00C2  
                                          l414 249E                                            l430 3BB0  
                                          l350 452C                                            l342 4440  
                                          l510 1944                                            l406 275E  
                                          l415 233E                                            l351 44BC  
                                          l343 444E                                            l511 1A54  
                                          l407 2776                                            l183 45E0  
                                          l600 08D6                                            l432 3BDA  
                                          l344 445C                                            l512 1966  
                                          l408 278E                                            l184 45BA  
                                          l417 23AA                                            l601 0A6A  
                                          l433 3C0A                                            l353 44CA  
                                          l337 4486                                            l345 446A  
                                          l610 0AF2                                            l602 0908  
                                          l354 44D8                                            l346 4478  
                                          l338 4416                                            l370 43B6  
                                          l611 0B40                                            l603 0A7C  
                                          l427 3C34                                            l355 44E6  
                                          l363 43E0                                            l371 43C4  
                                          l531 13FE                                    ?_HMI_GetBar 0001  
                                          l612 0B8E                                            l604 09B6  
                                          l356 44F4                                            l372 43D2  
                                          l364 4370                                            l532 1422  
                                          l516 19AE                                            l357 4502  
                                          l509 1A38                                            l614 0C70  
                                          l358 4510                                            l366 437E  
                                          l526 1442                                            l615 0C68  
                                          l607 0BDC                                            l359 451E  
                                          l367 438C                                            l519 19F6  
                                          l616 0C82                                            l608 0AA4  
                                          l368 439A                                            l528 1460  
                                          l393 5474                                            l617 0C6C  
                                          l609 0BFA                                            l369 43A8  
                                          l529 13DE                                            l483 17A4  
                                          l732 46FA                                            l476 187C  
                                          l900 151C                                            l733 46EE  
                                          l389 51CA                                            l477 16EE  
                                          l397 5746                                            l901 1520  
                                          l726 4034                                            l478 1898  
                                          l486 1810                                            l654 5D78  
                                          l910 1544                                            l902 1524  
                                          l727 4028                                            l479 1738  
                                          l655 5D70                                            l911 1548  
                                          l903 1528                                            l824 50FE  
                                          l832 557E                                            l912 154C  
                                          l904 152C                                            l673 5C80  
                                          l657 5D74                                            l681 5038  
                                          l913 1550                                            l905 1530  
                                          l921 5008                                            l914 1554  
                                          l906 1534                                            l922 4FD4  
                                          l930 37A2                                            l819 4C0E  
                                          l915 1558                                            l907 1538  
                                          l684 504E                                            l916 155C  
                                          l908 153C                                            l860 147C  
                                          l781 5A9A                                            l597 08E4  
                                          l853 1564                                            l917 1560  
                                          l909 1540                                            l861 1480  
                                          l598 08CC                                            l678 5074  
                                          l686 505E                                            l870 14A4  
                                          l862 1484                                            l854 1468  
                                          l599 08F4                                            l679 5028  
                                          l871 14A8                                            l863 1488  
                                          l776 5852                                            l880 14CC  
                                          l872 14AC                                            l864 148C  
                                          l856 146C                                            l928 3822  
                                          l881 14D0                                            l873 14B0  
                                          l865 1490                                            l857 1470  
                                          l929 37F2                                            l890 14F4  
                                          l882 14D4                                            l874 14B4  
                                          l866 1494                                            l858 1474  
                                          l891 14F8                                            l883 14D8  
                                          l875 14B8                                            l867 1498  
                                          l859 1478                                            l892 14FC  
                                          l884 14DC                                            l876 14BC  
                                          l868 149C                                            l893 1500  
                                          l885 14E0                                            l877 14C0  
                                          l869 14A0                                            l894 1504  
                                          l886 14E4                                            l878 14C4  
                                          l990 4882                                            l895 1508  
                                          l887 14E8                                            l879 14C8  
                                          l983 467E                                            l976 4910  
                                          l896 150C                                            l888 14EC  
                                          l992 4892                                            l984 4602  
                                          l897 1510                                            l889 14F0  
                                          l985 467A                                            l978 4920  
                                          l898 1514                                            l899 1518  
                                          l997 53DA                                            l999 53FE  
                                          _PR2 000FCB                                            _dip 033A  
                                          _val 0083                                __end_of_ADC_Off 6178  
                                  ?_HMI_SetBar 0001                             ??_Event_TestButton 00D3  
                                 _Word_GetPair 5A6E                                            prod 000FF3  
                                  ?_HMI_Render 0001                            MXK_SwitchTo@pModule 00C1  
                   __end_of_ADC_ConversionTime 57DC                                            tosl 000FFD  
                                          wreg 000FE8                             Console_MakeField@x 00CA  
                           Console_MakeField@y 00CB                                     _TXSTA1bits 000FAD  
                              _update_distance 6088                                   Console_Tab@c 00C9  
                                 Console_Tab@i 00C8                            LCD_DrawField@pField 00CC  
                                 Console_Tab@t 00C7                     __size_of_ADC_ClockDivision 008A  
                                 ___flmul@aexp 00C7                                   ___flmul@bexp 00CC  
                                   i2_delay_us 5974                           Port_Set@TypeRequired 00DC  
                                 ___flmul@sign 00C6                                   ___flmul@temp 00D1  
                                 ___flmul@prod 00CD                              Console_FormFeed@x 00BC  
                            Console_FormFeed@y 00BD                            LCD_DrawField@pPoint 00CE  
                               ?_LCD_DrawField 00CC                          Port_SetPinType@Output 00E4  
                              Port_SetPin@Type 00CD                                Port_SetPin@pPin 00CB  
                         ?_irobot_led_power_on 0001                                  ?_Byte_GetPair 00C3  
                              __end_of_LED_Set 561E                        __size_ofi2_Word_GetPair 0030  
                                i2_Port_SetPin 42C0                                   ___fltol@exp1 00EE  
                                 _Word_SetPair 5822                                           l1000 541A  
                                         l1010 3CA4                                           l1004 526A  
                                ?_Byte_GetZone 00BA                                           l1005 5298  
                                         l1200 3E9A                                           l1040 24CC  
                                         l1201 3EEE                                           l1009 3CB0  
                                         l1041 24D2                                           l1202 3F0A  
                                         l1042 24D8                                           l1043 24DE  
                                         l1300 49A2                                           l1204 3F34  
                                         l1036 2628                                           l1044 24E4  
                                         l2020 51DA                                           l2100 28B2  
                                         l1301 49A6                                           l1205 3F1A  
                                         l1045 24EA                                           l1037 24C6  
                                         l2021 51DE                                           l1302 49B0  
                                         l1062 1D00                                           l2110 58DC  
                                         l2022 51E2                                           l1303 49BE  
                                         l1063 1D2E                                           l1207 3F46  
                                         l1047 2590                                           l2023 51E6  
                                         l2031 3728                                           l1056 1B90  
                                         l2024 51EA                                           l2040 36A8  
                                         l2032 367A                                           l1313 57BC  
                                         l1153 1F6E                                           l1057 1D56  
                                         l2017 51FA                                           l2025 51EE  
                                         l2114 50E8                                           l1082 3B2A  
                                         l1058 1B98                                           l1146 4B30  
                                         l2106 58E8                                           l2026 51F2  
                                         l2018 51D6                                           l2042 36BC  
                                         l2034 3684                                           l2115 50AA  
                                         l1059 1BC2                                           l2027 51F6  
                                         l2035 368A                                           l2140 54B2  
                                         l1084 3B32                                           l2108 58D4  
                                         l2036 3690                                           l1077 3AFA  
                                         l2045 36E8                                           l2037 3696  
                                         l2310 332A                                           l1254 607C  
                                         l1158 59F0                                           l2070 4A8A  
                                         l2062 4A4A                                           l2054 4A10  
                                         l2038 369C                                           l1079 3B0A  
                                         l2135 4140                                           l2047 36FC  
                                         l2039 36A2                                           l2304 32E2  
                                         l1280 4AAC                                           l2400 221E  
                                         l2321 0548                                           l2306 32FA  
                                         l2066 4A6E                                           l2058 4A2A  
                                         l2330 076A                                           l1283 4B0E  
                                         l2163 5806                                           l2091 2868  
                                         l2331 06BC                                           l2323 0580  
                                         l2308 3312                                           l1276 4A94  
                                         l2404 2274                                           l2092 2822  
                                         l2316 04CE                                           l2405 22D2  
                                         l2341 0852                                           l2333 06F4  
                                         l2325 0620                                           l1294 49C6  
                                         l1630 33AE                                           l2406 227A  
                                         l2094 2898                                           l2326 0650  
                                         l1295 498C                                           l1631 340A  
                                         l2095 287C                                           l2319 04EA  
                                         l2351 31DA                                           l1296 49F0  
                                         l1632 33EE                                           l2328 069C  
                                         l2352 31BE                                           l1297 4996  
                                         l2097 2968                                           l2353 3174  
                                         l1298 499A                                           l1730 5908  
                                         l2098 28AC                                           l2338 08B4  
                                         l2346 30C6                                           l1299 499E  
                                         l1627 3456                                           l2099 28F4  
                                         l2339 081A                                           l2371 553A  
                                         l1724 5A3C                                           l1732 5930  
                                         l1628 344C                                           l2372 5540  
                                         l1629 33CC                                           l2349 30E2  
                                         l2373 5546                                           l1726 5A6A  
                                         l1735 5F66                                           l2367 552E  
                                         l2296 3F74                                           l2368 554C  
                                         l2641 3510                                           l2369 5534  
                                         l2298 3FA6                                           l2650 3562  
                                         l2642 34FC                                           l2394 21CC  
                                         l1827 2F9A                                           l2395 2168  
                                         l2387 214C                                           l1828 2FBA  
                                         l2900 0D06                                           l2580 3D70  
                                         l2396 2180                                           l2388 2160  
                                         l2901 0D34                                           l2813 4CB6  
                                         l2581 3D64                                           l2389 2190  
                                         l2397 218A                                           l2910 0E14  
                                         l2902 0D2A                                           l2814 4CAA  
                                         l2398 2204                                           l2911 0F16  
                                         l2823 5320                                           l2647 353C  
                                         l2639 348E                                           l2760 3E10  
                                         l1784 2E34                                           l2920 0F4E  
                                         l2912 0E92                                           l2904 0D64  
                                         l2824 5314                                           l2648 352C  
                                         l2584 3DA6                                           l2761 3E00  
                                         l1785 2E42                                           l2913 0ECA  
                                         l2905 0D92                                           l2817 4CEC  
                                         l1873 5AE0                                           l2585 3DB4  
                                         l2577 3D30                                           l2930 1080  
                                         l2914 0EBE                                           l2906 0D88  
                                         l2818 4CFA                                           l2586 3DC8  
                                         l2578 3D46                                           l1787 2E4C  
                                         l2931 1084                                           l2915 0F12  
                                         l2827 534A                                           l2764 3E6A  
                                         l2908 0DE6                                           l2940 009C  
                                         l2828 5358                                           l2765 3E7C  
                                         l2925 0FBC                                           l2941 00B4  
                                         l2918 0F62                                           l2942 00DC  
                                         l2934 001E                                           l2927 100C  
                                         l2919 0F38                                           l2935 0048  
                                         l2928 103A                                           l2960 0482  
                                         l2936 0042                                           l2929 1070  
                                         l2953 03BE                                           l2937 005A  
                                         l2946 0364                                           l2938 0078  
                                         l2970 2066                                           l2955 040E  
                                         l2947 033A                                           l2939 00A2  
                                         l2971 2048                                           l2963 1FBA  
                                         l2956 0434                                           l2948 0350  
                                         l2964 1FCA                                           l2973 20B4  
                                         l2965 1FF2                                           l2958 0462  
                                         l2974 20A4                                           l2959 048C  
                                         l2967 200A                                           l2968 1FFA  
                                         l2978 20DA                                           l2979 212C  
                               ??_Console_Init 00BA                          Port_SetPinType@pInput 00E0  
                                         STR_1 FFFB                                           STR_2 FFBF  
                                         STR_3 FFFB                                           STR_4 FFBF  
                                         STR_5 FFFB                                           STR_6 FFED  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 455C                       __end_of_irobot_song_play 6074  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u8300 472A  
                                         u8320 4BA8                            __end_of_GetPortTRIS 4410  
                                         u8305 4724                                           u9105 1106  
                                         u8410 589C                                           u9115 1128  
                                         u8500 4CBC                                           u9300 58C8  
                                         u9125 12A8                                           u6830 34AE  
                                         u8415 5896                                           u9135 1326  
                                         u8280 46C4                                           u9145 1368  
                                         u8354 52B8                                           u9170 5BEA  
                                         u8530 5326                                           u8355 52B2  
                                         u9155 13AA                                           u6835 34A2  
                                         u8364 52EA                                           u9500 4E5C  
                                         u8620 380E                                           u8365 52E4  
                                         u9085 10D6                                           u6870 3546  
                                         u8470 48D6                                           u8630 5266  
                                         u8287 46BA                                           u9095 10EE  
                                         u9175 5BE4                                           u8384 4070  
                                         u8480 48DC                                           u8640 5290  
                                         u8720 3D76                                           u8385 406A  
                                         u8394 40A2                                           u8395 409C  
                                         u8555 60BA                                           u8820 513C  
                                         u8556 60BC                                           u9460 5524  
                                         u9540 27DC                                           u8910 3006  
                                         u9438 2DB6                                           u9630 4B7E  
                                         u8760 3E16                                           u9625 4B40  
                                         u9378 3AA8                                           _SPI1 0376  
                                         u9660 57B6                                           u8940 55B6  
                                         u9740 2EA0                                           u9580 3B74  
                                         u9388 2C7A                                           _SPI2 0381  
                                         u9389 2C8E                                           u9590 3B80  
                                         u8880 56F2                                           u9770 338C  
                                         u9780 33A0                                           u8885 56EC  
                                         u9694 5C16                                           u9790 33E0  
                                         u9695 5C10                                           u8895 2F52  
                                         _TMR0 000FD6                                           u8994 4832  
                                         u8995 482C                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BF                                           _gISR 0060  
                           Event_DIPSwitch@Bar 00D4                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00BD                                  _iRVirtualWall 0030  
                         __size_of_ADC_SetupIO 0032                             SPI_MaxSpeed@pInput 00C9  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 5C8E                                           _main 552A  
                   irobot_leds@powerLuminosity 00CC                                           _init 3F48  
                                         _mode 0077                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3764  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 4C8C                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FFB1                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 5E22  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 552A  
                             __end_of_LCD_Init 2C68                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 53C4  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 1F70                                          l12211 5110  
                                        l12037 380E                                          l12209 50FE  
                                        l12217 513C                                          l12313 557E  
                                        l12315 5590                                          l13061 54FA  
                                        l13143 273C                                          l13215 4B28  
                                        l13065 5508                                          l12089 3F34  
                                        l12275 2F9A                                          l13085 4E32  
                                        l14135 2224                                          l13185 3B00  
                                        l13089 4E40                                          l11905 4888  
                                        l13179 3AF0                                          l13289 2E34  
                                        l12921 60DE                                          l13545 1070  
                                        l13803 1BB8                                          l13747 2B86  
                                        l11899 4878                                          l13845 1F42  
                                        l13757 2C2A                               __end_of_HMI_Poll 4DEE  
                                        l13775 4916                                          l13769 4906  
                                        l13857 59BE                                          l15651 06BC  
                                        l15685 081A                                          l15669 076A  
                                        _I2C1T 0040                                          _I2C2T 03C8  
                                ___fltol@sign1 00ED                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 10A8  
                              __end_of___awdiv 3DD2                                          ?_itos 00C6  
                              __end_of___flmul 04A6                                __end_of___fltol 3574  
                              _Event_DIPSwitch 5CBE                                __end_of___lldiv 3E8E  
                                        u10030 0FB6                                          u10060 1020  
                                        u10220 03B8                                          u10070 104E  
                                        u10160 00C8                                          u10250 0422  
                                        u10170 02DC                                          u11108 3246  
                                        u10420 2C2A                                          u10260 0448  
                                        u10340 20C2                                          u11109 325A  
                                        u11118 3270                                          u11119 3284  
                                        u10175 02D0                                          u10520 1D3E  
                                        u10450 4978                        __size_of_HMI_LeftSwitch 0018  
                                        u10380 2B16                                ___awdiv@divisor 00BC  
                                        u11088 31F2                                          u11089 3206  
                                        u11098 321C                                          u11099 3230  
                                        u10750 2260                                          u10770 22DE  
                                        u12508 5A06                                          u12700 077E  
                                        u12509 5A1C                                          u12580 04C2  
                                        u12590 04E4                                          u12818 3140  
                                        u12819 3154                                          u12780 30BA  
                                        u12790 30DC                                          _INDEX 0093  
                              __end_of___lwdiv 4D04                                          _MASKS FDC1  
                              __end_of___lwmod 5362                                          i2l430 42D8  
                                        i2l432 42FE                                          i2l433 4328  
                                        i2l427 434E                                          i2l732 4D50  
                                        i2l733 4D4A                                          i2l832 5976  
                                        i2l781 5CAC                                ___awdiv@counter 00BE  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00D0                                __end_of_getMode 3342  
                               __CFG_FCMEN$OFF 000000                                          _PortA 03B4  
                                        _PortB 03AA                                          _PortC 00AB  
                                        _PortD 00A1                                          _PortE 0097  
                                        _PortF 03BE                                          _PortG 03A0  
                      __end_of_Port_SetPinType 24C0                                _ADC_Initialised 003C  
                               ??_Byte_GetPair 00C6                          ??_irobot_led_power_on 00CE  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FDC1                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 04A6  
                                        _mode2 308E                                          _mode3 61A4  
                                        _mode4 1404                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 3D14  
                             __end_of_MXK_Init 2AF6                       __size_of_sort_iRBumpDrop 0088  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 60BE                               __end_of_SPI_Init 0CE8  
                             __end_of_SPI_Send 5092                          __end_ofi2_MXK_Release 61A4  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 5026                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 4B14  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 4F4A  
                         i2MXK_Queue@pCallback 0001                                    i2delay_us@u 0003  
                         ??_irobot_init_song_0 00BB                                 _LCD_Word_Write 5E7E  
                          __size_of_LED_Toggle 0048                            __size_of_HMI_GetBar 0006  
                                ?_HMI_UpSwitch 0001                                     _Event_NULL 61A6  
                  __size_of_Port_CheckPairType 006A                                    mode1@moveto 00F1  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00CA  
                                 ?_irobot_init 0001                                __initialization 4168  
                          __size_of_HMI_Render 003E                                   ?_irobot_move 00CA  
                          __end_of_Byte_GetBit 5BFC                         irobot_leds@powerColour 00CB  
                                 __end_of_main 557C                                   __end_of_init 4002  
             irobot_query_and_update@packetIDs 00CF                                   __end_of_itos 383C  
                         HMI_SetButton@reindex 00BC                                   SPI_Send9@dat 008B  
                          __end_of_Byte_SetBit 5300                               __end_of_InitList FD97  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 60BE  
                                    ??_ADC_Off 00BA                        __end_of_update_distance 609A  
                  __size_of_Port_CheckPortType 0048                                    HMI_Render@a 00C2  
                                       ??_main 03F8                                         ??_init 00F9  
                                       ??_itos 00CA                        _Console_MakeField$10974 00C8  
                                __activetblptr 000003                              Port_SetPin@pInput 00C9  
                            __end_of_LCD_Reset 566E                              Port_SetPin@pValue 00CC  
                                    ??_LED_Set 00CF                              _MXK_InitDIPSwitch 5ED8  
                            GetPortPORT@pInput 00BC                         Port_CheckPairType@Pin1 00E4  
                       Port_CheckPairType@Pin2 00E5                              __end_of_LCD_Write 5DDE  
                                  _GetPortPORT 44B6                                   ?i2_MXK_Queue 0001  
                                  _GetPortTRIS 436A                                ??_LCD_DrawField 00D6  
                   __end_of_PortProperty_Valid 4C12                               __end_of_Port_Set 1462  
                                  ?i2_delay_us 0001               __size_of_Console_IncrementCursor 0066  
                          __end_of_Button_Init 3ABE                            __end_of_Button_Poll 2DCE  
                            Word_GetPair@pPair 00C8                        LCD_FillRectangle@pPoint 00C5  
                           ?_MXK_InitDIPSwitch 0001                                  _HMI_SetButton 47D6  
                                    ??_SPI_DCS 00BC                                         ?_mode1 0001  
                                       ?_mode2 0001                                         ?_mode3 0001  
                                       ?_mode4 0001                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 6192  
                                _HMI_SetNumber 5D44                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4866  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 35DA  
                                       i2l1631 3626                                         i2l1632 3612  
                                       i2l1730 5BA4                                         i2l1627 3662  
                                       i2l1732 5BC4                                         i2l1628 3658  
                                       i2l1629 35F0                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l8887 5976                                         i2l8889 5986  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 5E9C                                 _Timer0_Restart 612A  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 213E  
                               i2_MXK_SwitchTo 5B92                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 5EBA  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 5166                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 55CE                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 5CEC                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 4B14  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3914  
                   __end_of_load_iRScriptStack 50FC                                     _Motor_Move 5B22  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 3342                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 5CEC                                         ___wmul 5B5C  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00C2                                         _lMotor 0085  
                                    ??___fltol 00E9                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 0396  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 193C  
                     i2Byte_GetZone@pChunkSize 0005                                   HMI_GRender@a 002B  
                         __end_of_Console_Init 497E                              GetPortTRIS@pInput 00BC  
                           __size_of_Reset_Low 001E                                         clear_0 41D0  
                                       clear_1 41E2                                         clear_2 41EE  
                                       clear_3 41FA                                         clear_4 4206  
                             ___awdiv@quotient 00C0                     irobot_stop_motion@isScript 00D3  
                                ?_eusart_getch 0001                                     Port_Init@i 0106  
                                   _iRDistance 007F                              __end_of_MXK_Queue 6104  
                   __end_ofHMI_SetButton@F7213 FDCE                                      ??_getMode 00C0  
                                   _iRBumpLeft 008D                                         _printf 213E  
                                   _iRBumpDrop 0036                      __end_of_MXK_InitDIPSwitch 5EF6  
                                _ADC_Calibrate 6074                                     _iRDropLeft 002E  
                               HMI_SetButton@v 00C1                                  ?_eusart_putch 0001  
                       HMI_SetSegments@pString 00BB                                    _Console_Tab 3C52  
                          LCD_Word_Write@value 00BF                                   __pdataCOMRAM 0047  
                           __size_of_Port_Init 0192                                  ??_Port_GetPin 00BD  
                     Port_CheckPortType@Output 00F3                                      ?_ADC_Init 00BE  
                           _twos_complement_of 58AE                                ??i2_Port_SetPin 0014  
                                 __mediumconst FCE4                    __end_ofTimer2_Init@PRESCALE FDD1  
                     Port_CheckPortType@pDrive 00F2                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00F0                                  ??_Port_SetPin 00CD  
                                    ??_reverse 00BE                                     _StepRotate 006D  
                        Console_MakeField@Fill 0464                               ?_Port_SetPinType 00E0  
                                       putch@c 00CE                              Motor_Speed@pMotor 00D5  
                               ?_HMI_SetNumber 00D0                                 i2_Word_GetPair 5C8E  
                      __end_of_Configure_GPIOs 4FBA                            irobot_leds@isScript 00CD  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 6136  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 5BC8  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 5AE8                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 420C  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 5BC8                                     _Stepstomin 006B  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 6142  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00E5                                    _Byte_SetBit 529C  
                                __end_of_MASKS FDCA                                 _PortA_Property FFBD  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FFBB                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 6178                                   __pidataBANK3 6112  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 5F32                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FD97  
                         __end_of_Byte_GetZone 473E                                  __end_of_mode1 08CA  
                                __end_of_mode2 31EA                                  __end_of_mode3 61A6  
                                __end_of_mode4 1406                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FFB9  
                          __end_of_Timer0_Init 2F2E                                  __end_of_putch 60CC  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 308E                            __end_of_Timer0_Stop 618C  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 39EA  
                            Port_SetType@pType 00F6                                    _Button_Poll 2C68  
                         __end_of_Byte_SetByte 60F6                           __end_of_Byte_SetPair 5E00  
                               _HMI_LeftSwitch 6030                                 _PortD_Property FFB7  
                         __end_of_Byte_SetQuad 5E22                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 40B8                            __end_of_Motor_Speed 5D44  
                               _HMI_DownSwitch 5FE8                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 5FD0                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FFB5                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 5CBE  
                               _PortF_Property FFB3                        Port_CheckQuadType@Pair1 00ED  
                      Port_CheckQuadType@Pair2 00EE                       MXK_BlockSwitchTo@pModule 00C1  
                                      ??_mode1 00EF                                        ??_mode2 00E6  
                                      ??_mode3 00BA                                        ??_mode4 00BA  
                                      ?_ADC_On 0001                              _Console_Backspace 53C4  
                              ?_Timer0_Restart 0001                                        ??_putch 00CE  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 5934  
                            __end_of_ToSegment 16E6                                 _PortG_Property FFB1  
                                   __pbssBANK0 0060                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 58AE  
                           _irobot_stop_motion 57DC                        Port_CheckQuadType@pQuad 00EB  
                              reverse@iterator 00BF                               ??_SPI_DisableISR 00BC  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 5EBA  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 00C5                                     ??_LCD_Init 00EF  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 3C52  
                       __end_of_PortA_Property FFBF               irobot_led_power_on@powerOnColour 00CE  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 00BA  
                                   ??_LED_Init 00E7                       ADC_ClockDivision@pDivide 00BA  
                           Byte_SetByte@pValue 00BC                                  ?_ISR_Function 0001  
                                  ?_Reset_High 0001                             _ADC_ConversionTime 5794  
                                ?_Timer0_Clear 0001                                     ??_HMI_Init 00F5  
                           ??_irobot_song_play 00BB                                     ??_HMI_Poll 00DE  
                                ?_Timer2_Clear 0001                        Port_CheckPairType@Props 00E7  
                       __end_of_PortB_Property FFBD                                  ?_Timer0_Start 00BA  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 27F0  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 00E2  
                           __end_of_LED_Toggle 5794                             __end_of_HMI_GetBar 6186  
                     LCD_FillRectangle@pColour 00C3                                     _angleTotal 0079  
                          ??_Console_Backspace 00BC                              Set_Addr_Window@xe 00C0  
                            Set_Addr_Window@ye 00C1                              Set_Addr_Window@xs 00C2  
                            Set_Addr_Window@ys 00BF                                        ?_OutSeg 00BD  
                                  ?_Motor_Init 00E7                             Byte_SetPair@pInput 00C5  
                                  ?_Motor_Move 00BD                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C8                             __end_of_HMI_SetBar 6156  
                       __end_of_PortC_Property FFBB                             Word_GetPair@pInput 00C6  
                           __end_of_HMI_Render 59F2                                 ??_Set_Rotation 00BF  
                                    ?_Port_Set 00C9                            ?_ADC_ConversionTime 0001  
                                      ?___wmul 00BA                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BF                                   ??_ISR_Enable 00BA  
                 __size_of_Console_ResetCursor 001E                           __size_of_irobot_leds 0058  
                         __size_of_irobot_init 000E                           ?_Console_ClearCursor 0001  
                         __size_of_irobot_move 00B0                         __end_of_HMI_LeftSwitch 6048  
                       __end_of_PortD_Property FFB9                                        _ADC_AN0 00B5  
                                      _ADC_AN1 03DF                                        _ADC_AN2 03DA  
                                      _ADC_AN3 03D5                                     ??_MXK_Init 00F9  
                            Port_GetPin@pInput 00BA                              _Console_MakeField 3ABE  
                                      _ADC_Off 6170                              ??_Console_NewLine 00BA  
                     ADC_ClockDivision@unfound 00BC                         __end_of_HMI_DownSwitch 6000  
                                   ??_SPI_Init 00ED                         Event_TestButton@pState 00D3  
                                   ??_SPI_Send 00BD                                        ?_printf 00CF  
                            ??_HMI_InitButtons 00BA                     __size_of_MXK_InitDIPSwitch 001E  
                       __end_of_PortE_Property FFB7                            Console_Render@F6956 03EC  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 6018  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 55CE  
                      _Console_IncrementCursor 5236                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FFB5                                    _gBackcolour 0089  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 5420  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 5F14                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FFB3                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 0069  
                                      _SPI_DCS 5C5E                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                              __size_of_ADC_On 0006                         ?_update_bump_and_cliff 0001  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00D7                             __end_of_ISR_Enable 6160  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 008F  
                                   ??_Mode_Set 00BA                                 ??_Timer2_Clear 00BA  
                                      _Font5x7 FDD1                           i2Byte_GetZone@pChunk 0004  
                     ADC_ConversionTime@pCount 00BB                                        _MinDist 00FB  
                         i2Byte_GetZone@pInput 0001                                 ??_Timer0_Start 00BD  
                         SPI_DisableISR@pInput 00BA                                  ?_Port_GetQuad 00BA  
                              Byte_SetBit@pBit 00BC                           Port_TogglePin@pInput 00CE  
                        __end_ofi2_Byte_SetBit 56BA                                      _ADC_Start 4A90  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00BC  
                                  _Timer0_Init 2DCE                                    _Timer2_Init 2F2E  
                                      __Lparam 0000                                    _Timer0_Stop 6186  
                        __size_of_Console_Init 008A                                        OutSeg@a 003D  
              __end_ofPortProperty_Valid@F6830 FDB7                                        _iRAngle 007D  
                                LCD_Write@mode 00BD                                __size_of_OutSeg 0082  
                                   ??_Port_Set 00CC                      __end_of_Console_MakeField 3B8E  
                            _Console_PrintChar 24C0                                    _Motor_Speed 5D1A  
                                      _Stepper 03CF                                  ?_Port_SetType 00F4  
                                      _gCursor 0047                                        ___fldiv 0CE8  
                                      ___awdiv 3D14                          ??_Console_ClearCursor 00BA  
                                      ___flmul 0000                                        ___fltol 3468  
                                      _lBuffer 04AA                                        ___lldiv 3DD2  
                              __size_of___wmul 0036                                ??_ADC_Calibrate 00BA  
                                      ___lwdiv 4C8C                                        ___lwmod 5300  
                              ?_HMI_LeftSwitch 0001                       __end_of_Console_FormFeed 48F4  
                           ?_Console_PrintChar 0001                                        __pcinit 4168  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      _getMode 31EA                                        __ptext0 552A  
                                      __ptext1 1404                                        __ptext2 61A4  
                                      __ptext3 308E                                        __ptext4 5FA0  
                                      __ptext5 04A6                                        __ptext6 6088  
                                      __ptext7 5AE8                                        __ptext8 609A  
                                      __ptext9 27F0                                __size_of_printf 01C2  
                                    _T0CONbits 000FD5                    __end_of_irobot_led_power_on 5F4E  
                            i2MXK_SwitchTo@CUR 0007                                        _dpowers FDB7  
                                    _T2CONbits 000FCA                                  LED_Set@pValue 00CE  
                          __size_of_Reset_High 001E                          Event_DIPSwitch@pState 00D3  
                                   ??___xxtofl 00BE                                   ?_GetPortPORT 00BA  
                                 ?_GetPortTRIS 00BA                            ??_Console_PrintChar 00CA  
                                  _Port_GetPin 5868                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 03E8                            LCD_DrawRectangle@p4 03E4  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00BC  
                                   ??_delay_us 00BC                                        _reverse 4FBA  
                                    _DIPSwitch 038C                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 3B8E                                    _iRBumpRight 008E  
                               LCD_DrawField@i 00DC                                      _LCD_Reset 561E  
                          __size_of_Motor_Init 00D6                            __size_of_Motor_Move 003A  
                          __size_of_Motor_Step 0126                                      _LCD_Write 5DBC  
                                  _iRDropRight 002F                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00BA                           end_of_initialization 420C  
                          ADC_SetupIO@pChannel 00BC                              ??_get_packet_size 00BA  
irobot_query_and_update@numberOfPacketRequests 00D2                                     delay_us@us 00BA  
                            ??_HMI_SetSegments 00BD                        Console_PrintChar@pInput 00CD  
                                 _Console_Init 48F4                           __end_of_eusart_getch 6168  
                      _irobot_query_and_update 27F0                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 51D0                           __end_of_eusart_putch 60E8  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 4B96                                      i2u1252_48 5D04  
                           Byte_SetQuad@pInput 00C5                             SPI_MinSpeed@pInput 00C9  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 5C2E  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 265E  
                          __end_of_ADC_Voltage 3914                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 547A                                        printf@c 00DE  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 3764  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 574C                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 59B4                             Button_Init@pInitIO 0104  
                        Timer0_Init@pFrequency 00C7                              ?_Port_SetQuadType 00F0  
                                  _gForecolour 00FD                      ??_Console_IncrementCursor 00BE  
                       __size_ofi2_MXK_Release 0006                                      _PORTFbits 000F85  
                           ??_Port_SetQuadType 00F4                                   ?_Console_Tab 0001  
                             Byte_GetZone@MASK 00C0                          Console_Render@lCursor 00E0  
                           _load_iRScriptStack 5092                                      _MXK_Queue 60F6  
                             __CFG_CPUDIV$OSC1 000000                                  ___xxtofl@sign 00C2  
                             Byte_GetZone@pMax 00BC                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C6  
                              _Set_Addr_Window 4216                                 SPI_Init@pClock 00E7  
                             ??_LCD_Word_Write 00C1                                _sort_iRBumpDrop 4A08  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4600                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 47D6  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 5F14  
                           HMI_SetButton@F7213 FDCA                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 46A2                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 6198                                 _Port_TogglePin 5C2E  
                             _Event_TestButton 5AAC                                    ___flmul@grs 00C8  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 60E8  
                                 _Byte_SetPair 5DDE                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 5E00                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4002                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 619E                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 __end_of_OutSeg 4B96  
                         ??_load_iRScriptStack 00C4                   __end_of_irobot_move_straight 5FB8  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 5B92  
                        __end_of_HMI_DIPSwitch 5FE8                                  __pidataCOMRAM 6142  
                                 ?_Button_Init 0100                                   ?_Button_Poll 00D5  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                           __end_of_Timer0_Clear 612A  
                            __size_of_MXK_Init 0180                           __end_of_Timer2_Clear 6170  
                               __end_of_printf 2300                              __size_of_SPI_Init 041E  
                      get_packet_size@packetID 00BA                              __size_of_SPI_Send 006C  
                                ?_Word_GetPair 00C6                               ??_Timer0_Restart 00BA  
                         __end_of_Timer0_Start 5DBC                             Port_SetType@Output 0100  
                          start_initialization 4168                                     ?_MXK_Queue 00BA  
                     PortProperty_Valid@Errors 00CF                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 4DEE                             Port_SetType@pInput 00F4  
                               _ADC_SetChannel 5F6A                                     HMI_Init@in 00F5  
                          HMI_SetNumber@pInput 00D0                          __end_ofi2_Port_SetPin 436A  
                           __end_of_Event_NULL 61A8                         rx_assign@packetIDValue 00BB  
                       __end_of_Port_TogglePin 5C5E                                  ?_Word_SetPair 00C9  
                            Byte_SetBit@pInput 00BA                                       ??_ADC_On 00BA  
                               ??_MXK_SwitchTo 00C0                              Byte_SetBit@pValue 00BD  
                           ?_LCD_FillRectangle 00C3                      ??_irobot_query_and_update 00CA  
                          _Console_ResetCursor 5E42                    PortProperty_Valid@pPinDrive 00CB  
                                  _ADC_SetupIO 5BFC                           MXK_BlockSwitchTo@CUR 00C0  
                     PortProperty_Valid@pInput 00C9                                  i2_MXK_Release 619E  
                                  _ADC_Voltage 383C                         LCD_FillRectangle@pSize 00C9  
                               SPI_Send@pInput 00BA                                   ??_Reset_High 00CE  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00CB  
                        Port_SetQuadType@pQuad 00F2                                      _ToSegment 1462  
                          ??_LCD_FillRectangle 00CD                          Port_SetQuadType@pType 00F3  
                              _Console_NewLine 4600                                 ??_SPI_MinSpeed 00CB  
                                  ??_ADC_Start 00BE                                   _HMI_UpSwitch 6000  
                                    _Reset_Low 5E9C                                   ??_Timer0_ISR 0017  
                              _HMI_InitButtons 618C                              __size_of_Mode_Set 0012  
                   __size_of_Console_PrintChar 019E                                 ??_update_angle 00D7  
                               ADC_Init@pInput 00BE                                      _gCharSize 03F4  
                             Timer2_Init@INDEX 0091                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                                   ??_Motor_Init 00EB  
                                     ??_OutSeg 00BE                                      OutSeg@out 00C1  
                      __size_of_Console_Render 0210                                   ??_Motor_Move 00C1  
                                 ??_Motor_Step 00CE                                      _iRAngleSS 031E  
                                    _iRCliffFL 0033                                      _iRCliffFR 0032  
                           Byte_SetZone@Offset 00C3                                       ??___wmul 00BE  
                         ?_Console_ResetCursor 0001                                      _Port_Init 265E  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03EC  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00BD  
                                     ?_ADC_Off 0001                               ??i2_Word_GetPair 0010  
                           Byte_SetZone@pInput 00BA                             Byte_SetZone@pValue 00BF  
                                Mode_Set@pMode 00BA                                       ??_printf 00D7  
                      __end_of_Set_Addr_Window 42C0                       Port_CheckQuadType@Output 00EF  
                      __end_of_sort_iRBumpDrop 4A90                                      _gLineSize 03F0  
                     Port_CheckQuadType@pDrive 00EC                                 ??_Word_GetPair 00C9  
                     Port_CheckQuadType@pInput 00E9                           __end_of_Port_GetQuad 5704  
                                    ___fldiv@a 00BE                                  _selectedMode1 0075  
                                    ___fldiv@b 00BA                                  _selectedMode2 0073  
                                _selectedMode3 0071                                  _selectedMode4 006F  
                    __end_of_LCD_FillRectangle 4E62                                    __pbssBIGRAM 04AA  
                       __end_of_ADC_SetChannel 5F86                                       ?_LED_Set 00CE  
                                    ___flmul@a 00BE                                      ___flmul@b 00BA  
                                  __pbssCOMRAM 0029                                ADC_Start@pInput 00BC  
                           __end_of_Reset_High 5ED8                                  __pcstackBANK0 00BA  
                                __pcstackBANK1 0100                                  __pcstackBANK2 0200  
                                __pcstackBANK3 03F8                        ??_update_bump_and_cliff 00D7  
                                   itos@Length 00CC                          __size_of_eusart_getch 0008  
                               ??_Word_SetPair 00CD                       __size_of_update_distance 0012  
                            __size_of___xxtofl 01CE                             __end_of_Timer0_ISR 5D1A  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 00D3  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 1B66  
                                     ?_SPI_DCS 00BA                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 00CE                                  ??_eusart_init 00BA  
                                  ??_LCD_Write 00BE                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                             __end_of_Motor_Init 39EA  
                          __CFG_CCP2MX$DEFAULT 000000                             __end_of_Motor_Move 5B5C  
                           __end_of_Motor_Step 3468                          Timer2_Init@pFrequency 00C7  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 00E6  
            twos_complement_of@complementValue 00BA                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00E3                       Port_CheckPairType@pInput 00E0  
                               reverse@tempVar 00BE                             _MXK_InitTestButton 5EF6  
                                   ?_Reset_Low 0001                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                  ??_irobot_move 00CE  
                                _lStepFunction 0066                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C7                               ??_HMI_DownSwitch 00C0  
                                    __pintcode 1408                                  __pmediumconst FCE4  
                                 ?_Motor_Speed 00D5                          ??_Console_ResetCursor 00BA  
                                     ?___fldiv 00BA                                       ?___awdiv 00BA  
                                    __ptext100 4E62                                      __ptext101 561E  
                                    __ptext110 4ED6                                      __ptext102 50FC  
                                    __ptext111 08CA                                      __ptext103 5E9C  
                                    __ptext120 5EF6                                      __ptext112 2F2E  
                                    __ptext104 5EBA                                      __ptext121 2300  
                                    __ptext113 3DD2                                      __ptext105 574C  
                                    __ptext130 5F14                                      __ptext122 529C  
                                    __ptext114 6168                                      __ptext106 5C2E  
                                    __ptext131 46A2                                      __ptext123 16E6  
                                    __ptext115 5D6E                                      __ptext107 3B8E  
                                    __ptext140 497E                                      __ptext132 5E00  
                                    __ptext124 5822                                      __ptext116 5C5E  
                                    __ptext108 6156                                      __ptext141 6074  
                                    __ptext133 4002                                      __ptext125 5DDE  
                                    __ptext117 39EA                                      __ptext109 1D76  
                                    __ptext150 6030                                      __ptext142 6192  
                                    __ptext134 48F4                                      __ptext126 5420  
                                    __ptext118 5ED8                                      __ptext151 6048  
                                    __ptext143 6170                                      __ptext135 4A90  
                                    __ptext127 5166                                      __ptext119 618C  
                                    __ptext160 5C8E                                      __ptext152 5868  
                                    __ptext144 31EA                                      __ptext136 4C12  
                                    __ptext128 4B96                                      __ptext161 5F86  
                                    __ptext153 56BA                                      __ptext145 5FB8  
                                    __ptext137 5BFC                                      __ptext129 5A6E  
                                    __ptext162 4D04                                      __ptext146 5FD0  
                                    __ptext138 5F6A                                      __ptext163 566E  
                                    __ptext155 5CEC                                      __ptext147 5FE8  
                                    __ptext139 5794                __end_of_irobot_query_and_update 2976  
                                    __ptext164 5B92                                      __ptext156 3574  
                                    __ptext148 6000                                      __ptext165 5974  
                                    __ptext157 6198                                      __ptext149 6018  
                                    __ptext166 619E                                      __ptext158 6136  
                                    _pShiftVal 0081                                      __ptext167 6104  
                                    __ptext159 42C0                                      __ptext168 0000  
                                     ?___flmul 00BA                                       ?___fltol 00E5  
                                     ?___lldiv 00BA                                     ?_Port_Init 0101  
                         Timer0_Init@pCPUClock 00CD                                       ?___lwdiv 00BA  
                                     ?___lwmod 00C1                            ?_MXK_InitTestButton 0001  
                            ?_Console_FormFeed 0001                              _GetPortProperties 4410  
                                     ?_getMode 0001                                   _eusart_getch 6160  
                  __end_ofTimer0_Init@PRESCALE FDA7                                _get_packet_size 51D0  
                                 _eusart_putch 60DA                             ??_Console_FormFeed 00BA  
                              _HMI_SetSegments 3E8E                             ?_GetPortProperties 00BA  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                ?_ADC_SetChannel 0001  
                                ??i2_MXK_Queue 0004                                    ??_MXK_Queue 00BD  
                  __size_of_irobot_stop_motion 0046                                   ?_Port_GetPin 00BA  
                                     _ADC_Init 4C12                          __end_of_HMI_SetButton 4866  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 5D6E                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 6018                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 0424                                 __size_of_mode2 015C  
                               __size_of_mode3 0002                                 __size_of_mode4 0002  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 46A2  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6192  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 5FA0  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 5F86  
                                     _LCD_Fill 54D2                                       _LCD_Init 2AF6  
                               ___wmul@product 00BE                                       _HMIBoard 033C  
                               i2_Byte_GetZone 4D04                                       _LED_Init 5362  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 1D76  
                                     _HMI_Poll 4D7A                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 5E7E  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5974  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C7                                       _PIR1bits 000F9E  
                                     _PIR3bits 000FA4                                       i2u525_44 5682  
                                     i2u525_45 567E                                       i2u470_40 4D6E  
                                     i2u526_44 56A8                                       i2u526_45 56A4  
                                     i2u470_45 4D6A                                       i2u529_40 59A2  
                                     i2u468_40 4D26                                       i2u468_47 4D1C  
                                     i2u691_40 35B8                                       i2u692_40 35CC  
                                     i2u693_40 3604                           __size_of_Byte_SetBit 0064  
                                     _RCONbits 000FD0                           i2Word_GetPair@pInput 000D  
                                  _mode1$15571 00F3                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00BB                               HMI_SetBar@pValue 00BA  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00E4  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                        __size_of_Timer0_Clear 000C                                       _SSP1STAT 000FC7  
                    __end_of_GetPortProperties 44B6                                       _SSP2STAT 000F6D  
                                 _Set_Rotation 473E                          __size_of_Timer2_Clear 0008  
                         __end_of_MXK_SwitchTo 5934                             _Port_CheckPairType 5166  
                                     _MXK_Init 2976                          __size_of_Timer0_Start 0026  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 6088  
                          __end_of_irobot_leds 54D2                                       _SPI_Init 08CA  
                          __end_of_irobot_init 60DA                       __end_of_Event_TestButton 5AE8  
                                     _SPI_Send 5026                            __end_of_irobot_move 4168  
                                    _rx_assign 3674                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00D9                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 4ED6                                     printf@prec 00D8  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                           _Port_CheckQuadType 5420                                  _MXK_DIPSwitch 5FB8  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 4F4A  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5704  
                         __end_of_update_angle 60AC                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FDA7                           __end_ofi2_Motor_Step 3674  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 417C                                      copy_data1 419C  
                                    copy_data2 41BC                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 5FA0                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 4D7A  
                          __end_ofi2_MXK_Queue 6112                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FCE5                     __end_of_irobot_init_song_0 5E42  
                         _Motor_Step$intlevel0 3348                                       _Mode_Set 60AC  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 611E                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 6168                           __end_of_Word_GetPair 5AAC  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 5D96                                   OutSeg@pInput 00C0  
                               _Console_Render 1B66                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 10A8                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5868  
                      __end_of_get_packet_size 5236                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 3F48                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 6060  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5A30  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 0095  
                                     _lBufferY 0094                            Timer2_Init@PRESCALE FDCE  
                                   ?_rx_assign 00BB                                LCD_Fill@pColour 00C3  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 0087                               __size_of_getMode 0158  
                      __end_of_HMI_RightSwitch 6030                         Byte_GetZone@pChunkSize 00BE  
                               ?_MXK_DIPSwitch 0001                         Byte_SetZone@pChunkSize 00BE  
                        __size_of_Port_SetType 022A                                  reverse@length 00BC  
                                    itos@input 00C6                          i2MXK_SwitchTo@pModule 0008  
                                     ___xxtofl 1F70                            irobot_move@isScript 00D2  
                           Motor_Init@pAddress 00E9                                       _delay_ms 50FC  
                                     _delay_us 557C                                       _clearall 0096  
                              ___lwdiv@divisor 00BC                                ___lwdiv@counter 00BE  
                              Port_GetPin@pPin 00BC                                       __ptext10 3674  
                                     __ptext11 4A08                                       __ptext20 4600  
                                     __ptext12 51D0                                       __ptext21 4866  
                                     __ptext13 6160                                       __ptext30 5D1A  
                                     __ptext22 5E42                                       __ptext14 213E  
                                     __ptext31 5B22                                       __ptext23 53C4  
                                     __ptext15 60BE                                       __ptext40 5D44  
                                     __ptext32 5D96                                       __ptext24 5934  
                                     __ptext16 24C0                                       __ptext41 3764  
                                     __ptext33 59B4                                       __ptext25 57DC  
                                     __ptext17 3C52                                       __ptext50 1B66  
                                     __ptext42 4FBA                                       __ptext34 4B14  
                                     __ptext26 40B8                                       __ptext18 3D14  
                                     __ptext51 4DEE                                       __ptext43 5300  
                                     __ptext35 4D7A                                       __ptext27 58AE  
                                     __ptext19 5236                                       __ptext60 3F48  
                                     __ptext52 455C                                       __ptext44 4C8C  
                                     __ptext36 2C68                                       __ptext28 6060  
                                     __ptext61 5F32                                       __ptext53 5B5C  
                                     __ptext45 3E8E                                       __ptext37 5CBE  
                                     __ptext29 3468                                       __ptext70 611E  
                                     __ptext62 547A                                       __ptext54 3ABE  
                                     __ptext46 1462                                       __ptext38 61A6  
                                     __ptext71 2976                                       __ptext63 5092  
                                     __ptext55 5BC8                                       __ptext47 47D6  
                                     __ptext39 5AAC                            ??_MXK_BlockSwitchTo 00C0  
                                     __ptext80 5362                                       __ptext72 265E  
                                     __ptext64 5E22                                       __ptext56 383C  
                                     __ptext48 614C                                       __ptext81 55CE  
                                     __ptext73 193C                                       __ptext65 60CC  
                                     __ptext57 1F70                                       __ptext49 6180  
                                     __ptext90 557C                                       __ptext82 59F2  
                                     __ptext74 5704                                       __ptext66 60DA  
                                     __ptext58 0000                                       __ptext91 2AF6  
                                     __ptext83 3342                                       __ptext75 10A8  
                                     __ptext67 5E60                                       __ptext59 0CE8  
                                     __ptext92 473E                                       __ptext84 6186  
                                     __ptext76 60E8                                       __ptext68 3914  
                                     __ptext93 54D2                                       __ptext85 612A  
                                     __ptext77 436A                                       __ptext69 2DCE  
                                     __ptext94 4216                                       __ptext86 58F2  
                                     __ptext78 4410                                       __ptext95 5E7E  
                                     __ptext87 5F4E                                       __ptext79 44B6  
                                     __ptext96 5DBC                                       __ptext88 60F6  
                                     __ptext97 5026                                       __ptext89 5A30  
                                     __ptext98 60AC                                       __ptext99 4F4A  
                                 _SSP1CON1bits 000FC6                               __size_of_reverse 006C  
                                 _SSP1CON2bits 000FC5                    __size_of_PortProperty_Valid 007C  
                           i2Byte_GetZone@MASK 0007                              _ADC_ClockDivision 497E  
                                 ?_ADC_SetupIO 0001                                   _SSP2CON1bits 000F6C  
                                 _SSP2CON2bits 000F6B                                    _eusart_init 5E60  
                              ?i2_Byte_GetPair 000A                               ?_Console_NewLine 0001  
                            ??_Event_DIPSwitch 00D3                                ?i2_Byte_GetZone 0001  
                           i2Byte_GetZone@pMax 0003                               ?_HMI_InitButtons 0001  
                           ?_ADC_ClockDivision 0001                                   ?_ADC_Voltage 00D3  
                          __end_of_MXK_Dequeue 5A30                              HMI_SetSegments@in 00BE  
                        Button_Init@pThreshold 0102                                  __size_of_main 0052  
                                __size_of_init 00BA                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 1D76  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 56BA                            __end_of_MXK_Release 5F6A  
                               _MXK_TestButton 6048                                  i2_Byte_SetBit 566E  
                          ??_ADC_ClockDivision 00BA                                   _iRDistanceSS 0322  
                                  _irobot_leds 547A                                    _irobot_init 60CC  
                          i2Word_GetPair@pPair 000F                                    _irobot_move 40B8  
                               ADC_Voltage@max 00D9                                 ADC_Voltage@ref 00DD  
                    __end_of_MXK_BlockSwitchTo 5A6E                       ?_Console_IncrementCursor 0001  
                         __size_of_Timer0_Init 0160                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 193C                                   Port_Set@Type 00E0  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 002D                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EF                                      printf@val 00DC  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 0092  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 574C  
                                   _HMI_GetBar 6180                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 614C  
                                   _HMI_Render 59B4                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 6104                      __end_of_ADC_ClockDivision 4A08  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 0090  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 5B22  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 6060                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 5D6E  
                   __end_of_twos_complement_of 58F2                                Port_Init@pInput 0101  
                                     printf@ap 00DA                               ?_get_packet_size 0001  
                       __size_ofi2_Port_SetPin 00AA                                     _ISR_Enable 6156  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00D3                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 59F2  
                            ADC_Voltage@output 00E1                                  _distanceTotal 007B  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 455C  
                             _Port_SetQuadType 16E6                                    _MXK_Release 5F4E  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 58F2  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 2300  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 5E60                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 529C  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 5D96  
                                 _SPI_MaxSpeed 4E62              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 4ED6                             Port_Set@TypeActual 00DE  
