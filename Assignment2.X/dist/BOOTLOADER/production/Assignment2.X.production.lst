

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Sat Sep 16 19:08:39 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1,inline
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1,group=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1,group=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1,group=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1,group=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1,group=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1,inline
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1,inline
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,inline
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1,group=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1,inline
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	text126,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	text140,global,reloc=2,class=CODE,delta=1
   164                           	psect	text141,global,reloc=2,class=CODE,delta=1
   165                           	psect	text142,global,reloc=2,class=CODE,delta=1
   166                           	psect	text143,global,reloc=2,class=CODE,delta=1,group=1
   167                           	psect	text144,global,reloc=2,class=CODE,delta=1,group=1
   168                           	psect	text145,global,reloc=2,class=CODE,delta=1
   169                           	psect	text146,global,reloc=2,class=CODE,delta=1
   170                           	psect	text147,global,reloc=2,class=CODE,delta=1
   171                           	psect	text148,global,reloc=2,class=CODE,delta=1
   172                           	psect	text149,global,reloc=2,class=CODE,delta=1
   173                           	psect	text150,global,reloc=2,class=CODE,delta=1
   174                           	psect	text151,global,reloc=2,class=CODE,delta=1
   175                           	psect	text152,global,reloc=2,class=CODE,delta=1
   176                           	psect	text153,global,reloc=2,class=CODE,delta=1,inline
   177                           	psect	text154,global,reloc=2,class=CODE,delta=1
   178                           	psect	text155,global,reloc=2,class=CODE,delta=1
   179                           	psect	text156,global,reloc=2,class=CODE,delta=1
   180                           	psect	text157,global,reloc=2,class=CODE,delta=1
   181                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   182                           	psect	text159,global,reloc=2,class=CODE,delta=1
   183                           	psect	text160,global,reloc=2,class=CODE,delta=1
   184                           	psect	text161,global,reloc=2,class=CODE,delta=1
   185                           	psect	text162,global,reloc=2,class=CODE,delta=1
   186                           	psect	text163,global,reloc=2,class=CODE,delta=1
   187                           	psect	text164,global,reloc=2,class=CODE,delta=1
   188                           	psect	text165,global,reloc=2,class=CODE,delta=1
   189                           	psect	text166,global,reloc=2,class=CODE,delta=1,inline
   190                           	psect	text167,global,reloc=2,class=CODE,delta=1
   191                           	psect	text168,global,reloc=2,class=CODE,delta=1
   192                           	psect	text169,global,reloc=2,class=CODE,delta=1
   193                           	psect	text170,global,reloc=2,class=CODE,delta=1
   194                           	psect	text171,global,reloc=2,class=CODE,delta=1
   195                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   196                           	psect	text172,global,reloc=2,class=CODE,delta=1
   197                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   198                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   199  0000                     
   200                           ; Version 1.43
   201                           ; Generated 25/07/2017 GMT
   202                           ; 
   203                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   204                           ; All rights reserved.
   205                           ; 
   206                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   207                           ; 
   208                           ; Redistribution and use in source and binary forms, with or without modification, are
   209                           ; permitted provided that the following conditions are met:
   210                           ; 
   211                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   212                           ;        conditions and the following disclaimer.
   213                           ; 
   214                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   215                           ;        of conditions and the following disclaimer in the documentation and/or other
   216                           ;        materials provided with the distribution.
   217                           ; 
   218                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   219                           ;        software without specific prior written permission.
   220                           ; 
   221                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   222                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   223                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   224                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   225                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   226                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   227                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   228                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   229                           ; 
   230                           ; 
   231                           ; Code-generator required, PIC18F67J50 Definitions
   232                           ; 
   233                           ; SFR Addresses
   234  0000                     
   235                           	psect	idataCOMRAM
   236  0166BC                     __pidataCOMRAM:
   237                           	opt stack 0
   238                           
   239                           ;initializer for _gCursor
   240  0166BC  0006               	dw	6
   241  0166BE  0006               	dw	6
   242                           
   243                           ;initializer for _Bus_State
   244  0166C0  01                 	db	1
   245                           
   246                           ;initializer for _A
   247  0166C1  41                 	db	65
   248                           
   249                           ;initializer for _a
   250  0166C2  61                 	db	97
   251                           
   252                           ;initializer for _zero
   253  0166C3  30                 	db	48
   254                           
   255                           ;initializer for _l
   256  0166C4  80                 	db	128
   257                           
   258                           ;initializer for _w
   259  0166C5  80                 	db	128
   260                           
   261                           	psect	idataBANK0
   262  0166F2                     __pidataBANK0:
   263                           	opt stack 0
   264                           
   265                           ;initializer for _TimerX
   266  0166F2  0008               	dw	8
   267                           
   268                           ;initializer for _MinDist
   269  0166F4  03E8               	dw	1000
   270                           
   271                           ;initializer for _gForecolour
   272  0166F6  FFFF               	dw	65535
   273                           
   274                           ;initializer for _change
   275  0166F8  01                 	db	1
   276                           
   277                           	psect	idataBANK3
   278  01668C                     __pidataBANK3:
   279                           	opt stack 0
   280                           
   281                           ;initializer for Console_Render@F6956
   282  01668C  0006               	dw	6
   283  01668E  0006               	dw	6
   284                           
   285                           ;initializer for _gLineSize
   286  016690  0080               	dw	128
   287  016692  0007               	dw	7
   288                           
   289                           ;initializer for _gCharSize
   290  016694  0005               	dw	5
   291  016696  0007               	dw	7
   292                           
   293                           	psect	mediumconst
   294  00FC32                     __pmediumconst:
   295                           	opt stack 0
   296  00FC32  00                 	db	0
   297  00FC33                     _InitList:
   298                           	opt stack 0
   299  00FC33  1100               	dw	4352
   300  00FC35  0080               	dw	128
   301  00FC37  012C               	dw	300
   302  00FC39  B100               	dw	45312
   303  00FC3B  0002               	dw	2
   304  00FC3D  0035               	dw	53
   305  00FC3F  0036               	dw	54
   306  00FC41  B200               	dw	45568
   307  00FC43  0002               	dw	2
   308  00FC45  0035               	dw	53
   309  00FC47  0036               	dw	54
   310  00FC49  B300               	dw	45824
   311  00FC4B  0002               	dw	2
   312  00FC4D  0035               	dw	53
   313  00FC4F  0036               	dw	54
   314  00FC51  0002               	dw	2
   315  00FC53  0035               	dw	53
   316  00FC55  0036               	dw	54
   317  00FC57  B400               	dw	46080
   318  00FC59  0000               	dw	0
   319  00FC5B  C000               	dw	49152
   320  00FC5D  00A2               	dw	162
   321  00FC5F  0002               	dw	2
   322  00FC61  0084               	dw	132
   323  00FC63  C100               	dw	49408
   324  00FC65  00C5               	dw	197
   325  00FC67  C200               	dw	49664
   326  00FC69  000D               	dw	13
   327  00FC6B  0000               	dw	0
   328  00FC6D  C300               	dw	49920
   329  00FC6F  008D               	dw	141
   330  00FC71  002A               	dw	42
   331  00FC73  C400               	dw	50176
   332  00FC75  008D               	dw	141
   333  00FC77  00EE               	dw	238
   334  00FC79  C500               	dw	50432
   335  00FC7B  000A               	dw	10
   336  00FC7D  3600               	dw	13824
   337  00FC7F  00C8               	dw	200
   338  00FC81  E000               	dw	57344
   339  00FC83  0012               	dw	18
   340  00FC85  001C               	dw	28
   341  00FC87  0010               	dw	16
   342  00FC89  0018               	dw	24
   343  00FC8B  0033               	dw	51
   344  00FC8D  002C               	dw	44
   345  00FC8F  0025               	dw	37
   346  00FC91  0028               	dw	40
   347  00FC93  0028               	dw	40
   348  00FC95  0027               	dw	39
   349  00FC97  002F               	dw	47
   350  00FC99  003C               	dw	60
   351  00FC9B  0000               	dw	0
   352  00FC9D  0003               	dw	3
   353  00FC9F  0003               	dw	3
   354  00FCA1  0010               	dw	16
   355  00FCA3  0080               	dw	128
   356  00FCA5  0078               	dw	120
   357  00FCA7  E100               	dw	57600
   358  00FCA9  0012               	dw	18
   359  00FCAB  001C               	dw	28
   360  00FCAD  0010               	dw	16
   361  00FCAF  0018               	dw	24
   362  00FCB1  002D               	dw	45
   363  00FCB3  0028               	dw	40
   364  00FCB5  0023               	dw	35
   365  00FCB7  0028               	dw	40
   366  00FCB9  0028               	dw	40
   367  00FCBB  0026               	dw	38
   368  00FCBD  002F               	dw	47
   369  00FCBF  003B               	dw	59
   370  00FCC1  0000               	dw	0
   371  00FCC3  0003               	dw	3
   372  00FCC5  0003               	dw	3
   373  00FCC7  0010               	dw	16
   374  00FCC9  3A00               	dw	14848
   375  00FCCB  0005               	dw	5
   376  00FCCD  2A00               	dw	10752
   377  00FCCF  0000               	dw	0
   378  00FCD1  0002               	dw	2
   379  00FCD3  0000               	dw	0
   380  00FCD5  0081               	dw	129
   381  00FCD7  2B00               	dw	11008
   382  00FCD9  0000               	dw	0
   383  00FCDB  0003               	dw	3
   384  00FCDD  0000               	dw	0
   385  00FCDF  00A2               	dw	162
   386  00FCE1  2900               	dw	10496
   387  00FCE3  2C00               	dw	11264
   388  00FCE5                     __end_of_InitList:
   389                           	opt stack 0
   390  00FCE5                     Timer0_Init@PRESCALE:
   391                           	opt stack 0
   392  00FCE5  0002               	dw	2
   393  00FCE7  0004               	dw	4
   394  00FCE9  0008               	dw	8
   395  00FCEB  0010               	dw	16
   396  00FCED  0020               	dw	32
   397  00FCEF  0040               	dw	64
   398  00FCF1  0080               	dw	128
   399  00FCF3  0100               	dw	256
   400  00FCF5                     __end_ofTimer0_Init@PRESCALE:
   401                           	opt stack 0
   402  00FCF5                     PortProperty_Valid@F6830:
   403                           	opt stack 0
   404  00FCF5  00                 	db	0
   405  00FCF6  01                 	db	1
   406  00FCF7  02                 	db	2
   407  00FCF8  00                 	db	0
   408  00FCF9  01                 	db	1
   409  00FCFA  00                 	db	0
   410  00FCFB  01                 	db	1
   411  00FCFC  00                 	db	0
   412  00FCFD  02                 	db	2
   413  00FCFE  02                 	db	2
   414  00FCFF  00                 	db	0
   415  00FD00  00                 	db	0
   416  00FD01  03                 	db	3
   417  00FD02  03                 	db	3
   418  00FD03  03                 	db	3
   419  00FD04  00                 	db	0
   420  00FD05                     __end_ofPortProperty_Valid@F6830:
   421                           	opt stack 0
   422  00FD05                     _dpowers:
   423                           	opt stack 0
   424  00FD05  0001               	dw	1
   425  00FD07  000A               	dw	10
   426  00FD09  0064               	dw	100
   427  00FD0B  03E8               	dw	1000
   428  00FD0D  2710               	dw	10000
   429  00FD0F                     __end_of_dpowers:
   430                           	opt stack 0
   431  00FD0F                     _MASKS:
   432                           	opt stack 0
   433  00FD0F  00                 	db	0
   434  00FD10  01                 	db	1
   435  00FD11  03                 	db	3
   436  00FD12  07                 	db	7
   437  00FD13  0F                 	db	15
   438  00FD14  1F                 	db	31
   439  00FD15  3F                 	db	63
   440  00FD16  7F                 	db	127
   441  00FD17  FF                 	db	255
   442  00FD18                     __end_of_MASKS:
   443                           	opt stack 0
   444  00FD18                     HMI_SetButton@F7213:
   445                           	opt stack 0
   446  00FD18  00                 	db	0
   447  00FD19  02                 	db	2
   448  00FD1A  01                 	db	1
   449  00FD1B  03                 	db	3
   450  00FD1C                     __end_ofHMI_SetButton@F7213:
   451                           	opt stack 0
   452  00FD1C                     Timer2_Init@PRESCALE:
   453                           	opt stack 0
   454  00FD1C  01                 	db	1
   455  00FD1D  04                 	db	4
   456  00FD1E  10                 	db	16
   457  00FD1F                     __end_ofTimer2_Init@PRESCALE:
   458                           	opt stack 0
   459  00FD1F                     _Font5x7:
   460                           	opt stack 0
   461  00FD1F  00                 	db	0
   462  00FD20  00                 	db	0
   463  00FD21  00                 	db	0
   464  00FD22  00                 	db	0
   465  00FD23  00                 	db	0
   466  00FD24  00                 	db	0
   467  00FD25  00                 	db	0
   468  00FD26  5F                 	db	95
   469  00FD27  00                 	db	0
   470  00FD28  00                 	db	0
   471  00FD29  00                 	db	0
   472  00FD2A  07                 	db	7
   473  00FD2B  00                 	db	0
   474  00FD2C  07                 	db	7
   475  00FD2D  00                 	db	0
   476  00FD2E  14                 	db	20
   477  00FD2F  7F                 	db	127
   478  00FD30  14                 	db	20
   479  00FD31  7F                 	db	127
   480  00FD32  14                 	db	20
   481  00FD33  24                 	db	36
   482  00FD34  2A                 	db	42
   483  00FD35  7F                 	db	127
   484  00FD36  2A                 	db	42
   485  00FD37  12                 	db	18
   486  00FD38  23                 	db	35
   487  00FD39  13                 	db	19
   488  00FD3A  08                 	db	8
   489  00FD3B  64                 	db	100
   490  00FD3C  62                 	db	98
   491  00FD3D  36                 	db	54
   492  00FD3E  49                 	db	73
   493  00FD3F  55                 	db	85
   494  00FD40  22                 	db	34
   495  00FD41  50                 	db	80
   496  00FD42  00                 	db	0
   497  00FD43  05                 	db	5
   498  00FD44  03                 	db	3
   499  00FD45  00                 	db	0
   500  00FD46  00                 	db	0
   501  00FD47  00                 	db	0
   502  00FD48  1C                 	db	28
   503  00FD49  22                 	db	34
   504  00FD4A  41                 	db	65
   505  00FD4B  00                 	db	0
   506  00FD4C  00                 	db	0
   507  00FD4D  41                 	db	65
   508  00FD4E  22                 	db	34
   509  00FD4F  1C                 	db	28
   510  00FD50  00                 	db	0
   511  00FD51  08                 	db	8
   512  00FD52  2A                 	db	42
   513  00FD53  1C                 	db	28
   514  00FD54  2A                 	db	42
   515  00FD55  08                 	db	8
   516  00FD56  08                 	db	8
   517  00FD57  08                 	db	8
   518  00FD58  3E                 	db	62
   519  00FD59  08                 	db	8
   520  00FD5A  08                 	db	8
   521  00FD5B  00                 	db	0
   522  00FD5C  50                 	db	80
   523  00FD5D  30                 	db	48
   524  00FD5E  00                 	db	0
   525  00FD5F  00                 	db	0
   526  00FD60  08                 	db	8
   527  00FD61  08                 	db	8
   528  00FD62  08                 	db	8
   529  00FD63  08                 	db	8
   530  00FD64  08                 	db	8
   531  00FD65  00                 	db	0
   532  00FD66  60                 	db	96
   533  00FD67  60                 	db	96
   534  00FD68  00                 	db	0
   535  00FD69  00                 	db	0
   536  00FD6A  20                 	db	32
   537  00FD6B  10                 	db	16
   538  00FD6C  08                 	db	8
   539  00FD6D  04                 	db	4
   540  00FD6E  02                 	db	2
   541  00FD6F  3E                 	db	62
   542  00FD70  51                 	db	81
   543  00FD71  49                 	db	73
   544  00FD72  45                 	db	69
   545  00FD73  3E                 	db	62
   546  00FD74  00                 	db	0
   547  00FD75  42                 	db	66
   548  00FD76  7F                 	db	127
   549  00FD77  40                 	db	64
   550  00FD78  00                 	db	0
   551  00FD79  42                 	db	66
   552  00FD7A  61                 	db	97
   553  00FD7B  51                 	db	81
   554  00FD7C  49                 	db	73
   555  00FD7D  46                 	db	70
   556  00FD7E  21                 	db	33
   557  00FD7F  41                 	db	65
   558  00FD80  45                 	db	69
   559  00FD81  4B                 	db	75
   560  00FD82  31                 	db	49
   561  00FD83  18                 	db	24
   562  00FD84  14                 	db	20
   563  00FD85  12                 	db	18
   564  00FD86  7F                 	db	127
   565  00FD87  10                 	db	16
   566  00FD88  27                 	db	39
   567  00FD89  45                 	db	69
   568  00FD8A  45                 	db	69
   569  00FD8B  45                 	db	69
   570  00FD8C  39                 	db	57
   571  00FD8D  3C                 	db	60
   572  00FD8E  4A                 	db	74
   573  00FD8F  49                 	db	73
   574  00FD90  49                 	db	73
   575  00FD91  30                 	db	48
   576  00FD92  01                 	db	1
   577  00FD93  71                 	db	113
   578  00FD94  09                 	db	9
   579  00FD95  05                 	db	5
   580  00FD96  03                 	db	3
   581  00FD97  36                 	db	54
   582  00FD98  49                 	db	73
   583  00FD99  49                 	db	73
   584  00FD9A  49                 	db	73
   585  00FD9B  36                 	db	54
   586  00FD9C  06                 	db	6
   587  00FD9D  49                 	db	73
   588  00FD9E  49                 	db	73
   589  00FD9F  29                 	db	41
   590  00FDA0  1E                 	db	30
   591  00FDA1  00                 	db	0
   592  00FDA2  36                 	db	54
   593  00FDA3  36                 	db	54
   594  00FDA4  00                 	db	0
   595  00FDA5  00                 	db	0
   596  00FDA6  00                 	db	0
   597  00FDA7  56                 	db	86
   598  00FDA8  36                 	db	54
   599  00FDA9  00                 	db	0
   600  00FDAA  00                 	db	0
   601  00FDAB  00                 	db	0
   602  00FDAC  08                 	db	8
   603  00FDAD  14                 	db	20
   604  00FDAE  22                 	db	34
   605  00FDAF  41                 	db	65
   606  00FDB0  14                 	db	20
   607  00FDB1  14                 	db	20
   608  00FDB2  14                 	db	20
   609  00FDB3  14                 	db	20
   610  00FDB4  14                 	db	20
   611  00FDB5  41                 	db	65
   612  00FDB6  22                 	db	34
   613  00FDB7  14                 	db	20
   614  00FDB8  08                 	db	8
   615  00FDB9  00                 	db	0
   616  00FDBA  02                 	db	2
   617  00FDBB  01                 	db	1
   618  00FDBC  51                 	db	81
   619  00FDBD  09                 	db	9
   620  00FDBE  06                 	db	6
   621  00FDBF  32                 	db	50
   622  00FDC0  49                 	db	73
   623  00FDC1  79                 	db	121
   624  00FDC2  41                 	db	65
   625  00FDC3  3E                 	db	62
   626  00FDC4  7E                 	db	126
   627  00FDC5  11                 	db	17
   628  00FDC6  11                 	db	17
   629  00FDC7  11                 	db	17
   630  00FDC8  7E                 	db	126
   631  00FDC9  7F                 	db	127
   632  00FDCA  49                 	db	73
   633  00FDCB  49                 	db	73
   634  00FDCC  49                 	db	73
   635  00FDCD  36                 	db	54
   636  00FDCE  3E                 	db	62
   637  00FDCF  41                 	db	65
   638  00FDD0  41                 	db	65
   639  00FDD1  41                 	db	65
   640  00FDD2  22                 	db	34
   641  00FDD3  7F                 	db	127
   642  00FDD4  41                 	db	65
   643  00FDD5  41                 	db	65
   644  00FDD6  22                 	db	34
   645  00FDD7  1C                 	db	28
   646  00FDD8  7F                 	db	127
   647  00FDD9  49                 	db	73
   648  00FDDA  49                 	db	73
   649  00FDDB  49                 	db	73
   650  00FDDC  41                 	db	65
   651  00FDDD  7F                 	db	127
   652  00FDDE  09                 	db	9
   653  00FDDF  09                 	db	9
   654  00FDE0  01                 	db	1
   655  00FDE1  01                 	db	1
   656  00FDE2  3E                 	db	62
   657  00FDE3  41                 	db	65
   658  00FDE4  41                 	db	65
   659  00FDE5  51                 	db	81
   660  00FDE6  32                 	db	50
   661  00FDE7  7F                 	db	127
   662  00FDE8  08                 	db	8
   663  00FDE9  08                 	db	8
   664  00FDEA  08                 	db	8
   665  00FDEB  7F                 	db	127
   666  00FDEC  00                 	db	0
   667  00FDED  41                 	db	65
   668  00FDEE  7F                 	db	127
   669  00FDEF  41                 	db	65
   670  00FDF0  00                 	db	0
   671  00FDF1  20                 	db	32
   672  00FDF2  40                 	db	64
   673  00FDF3  41                 	db	65
   674  00FDF4  3F                 	db	63
   675  00FDF5  01                 	db	1
   676  00FDF6  7F                 	db	127
   677  00FDF7  08                 	db	8
   678  00FDF8  14                 	db	20
   679  00FDF9  22                 	db	34
   680  00FDFA  41                 	db	65
   681  00FDFB  7F                 	db	127
   682  00FDFC  40                 	db	64
   683  00FDFD  40                 	db	64
   684  00FDFE  40                 	db	64
   685  00FDFF  40                 	db	64
   686  00FE00  7F                 	db	127
   687  00FE01  02                 	db	2
   688  00FE02  04                 	db	4
   689  00FE03  02                 	db	2
   690  00FE04  7F                 	db	127
   691  00FE05  7F                 	db	127
   692  00FE06  04                 	db	4
   693  00FE07  08                 	db	8
   694  00FE08  10                 	db	16
   695  00FE09  7F                 	db	127
   696  00FE0A  3E                 	db	62
   697  00FE0B  41                 	db	65
   698  00FE0C  41                 	db	65
   699  00FE0D  41                 	db	65
   700  00FE0E  3E                 	db	62
   701  00FE0F  7F                 	db	127
   702  00FE10  09                 	db	9
   703  00FE11  09                 	db	9
   704  00FE12  09                 	db	9
   705  00FE13  06                 	db	6
   706  00FE14  3E                 	db	62
   707  00FE15  41                 	db	65
   708  00FE16  51                 	db	81
   709  00FE17  21                 	db	33
   710  00FE18  5E                 	db	94
   711  00FE19  7F                 	db	127
   712  00FE1A  09                 	db	9
   713  00FE1B  19                 	db	25
   714  00FE1C  29                 	db	41
   715  00FE1D  46                 	db	70
   716  00FE1E  46                 	db	70
   717  00FE1F  49                 	db	73
   718  00FE20  49                 	db	73
   719  00FE21  49                 	db	73
   720  00FE22  31                 	db	49
   721  00FE23  01                 	db	1
   722  00FE24  01                 	db	1
   723  00FE25  7F                 	db	127
   724  00FE26  01                 	db	1
   725  00FE27  01                 	db	1
   726  00FE28  3F                 	db	63
   727  00FE29  40                 	db	64
   728  00FE2A  40                 	db	64
   729  00FE2B  40                 	db	64
   730  00FE2C  3F                 	db	63
   731  00FE2D  1F                 	db	31
   732  00FE2E  20                 	db	32
   733  00FE2F  40                 	db	64
   734  00FE30  20                 	db	32
   735  00FE31  1F                 	db	31
   736  00FE32  7F                 	db	127
   737  00FE33  20                 	db	32
   738  00FE34  18                 	db	24
   739  00FE35  20                 	db	32
   740  00FE36  7F                 	db	127
   741  00FE37  63                 	db	99
   742  00FE38  14                 	db	20
   743  00FE39  08                 	db	8
   744  00FE3A  14                 	db	20
   745  00FE3B  63                 	db	99
   746  00FE3C  03                 	db	3
   747  00FE3D  04                 	db	4
   748  00FE3E  78                 	db	120
   749  00FE3F  04                 	db	4
   750  00FE40  03                 	db	3
   751  00FE41  61                 	db	97
   752  00FE42  51                 	db	81
   753  00FE43  49                 	db	73
   754  00FE44  45                 	db	69
   755  00FE45  43                 	db	67
   756  00FE46  00                 	db	0
   757  00FE47  00                 	db	0
   758  00FE48  7F                 	db	127
   759  00FE49  41                 	db	65
   760  00FE4A  41                 	db	65
   761  00FE4B  02                 	db	2
   762  00FE4C  04                 	db	4
   763  00FE4D  08                 	db	8
   764  00FE4E  10                 	db	16
   765  00FE4F  20                 	db	32
   766  00FE50  41                 	db	65
   767  00FE51  41                 	db	65
   768  00FE52  7F                 	db	127
   769  00FE53  00                 	db	0
   770  00FE54  00                 	db	0
   771  00FE55  04                 	db	4
   772  00FE56  02                 	db	2
   773  00FE57  01                 	db	1
   774  00FE58  02                 	db	2
   775  00FE59  04                 	db	4
   776  00FE5A  40                 	db	64
   777  00FE5B  40                 	db	64
   778  00FE5C  40                 	db	64
   779  00FE5D  40                 	db	64
   780  00FE5E  40                 	db	64
   781  00FE5F  00                 	db	0
   782  00FE60  01                 	db	1
   783  00FE61  02                 	db	2
   784  00FE62  04                 	db	4
   785  00FE63  00                 	db	0
   786  00FE64  20                 	db	32
   787  00FE65  54                 	db	84
   788  00FE66  54                 	db	84
   789  00FE67  54                 	db	84
   790  00FE68  78                 	db	120
   791  00FE69  7F                 	db	127
   792  00FE6A  48                 	db	72
   793  00FE6B  44                 	db	68
   794  00FE6C  44                 	db	68
   795  00FE6D  38                 	db	56
   796  00FE6E  38                 	db	56
   797  00FE6F  44                 	db	68
   798  00FE70  44                 	db	68
   799  00FE71  44                 	db	68
   800  00FE72  20                 	db	32
   801  00FE73  38                 	db	56
   802  00FE74  44                 	db	68
   803  00FE75  44                 	db	68
   804  00FE76  48                 	db	72
   805  00FE77  7F                 	db	127
   806  00FE78  38                 	db	56
   807  00FE79  54                 	db	84
   808  00FE7A  54                 	db	84
   809  00FE7B  54                 	db	84
   810  00FE7C  18                 	db	24
   811  00FE7D  08                 	db	8
   812  00FE7E  7E                 	db	126
   813  00FE7F  09                 	db	9
   814  00FE80  01                 	db	1
   815  00FE81  02                 	db	2
   816  00FE82  08                 	db	8
   817  00FE83  14                 	db	20
   818  00FE84  54                 	db	84
   819  00FE85  54                 	db	84
   820  00FE86  3C                 	db	60
   821  00FE87  7F                 	db	127
   822  00FE88  08                 	db	8
   823  00FE89  04                 	db	4
   824  00FE8A  04                 	db	4
   825  00FE8B  78                 	db	120
   826  00FE8C  00                 	db	0
   827  00FE8D  44                 	db	68
   828  00FE8E  7D                 	db	125
   829  00FE8F  40                 	db	64
   830  00FE90  00                 	db	0
   831  00FE91  20                 	db	32
   832  00FE92  40                 	db	64
   833  00FE93  44                 	db	68
   834  00FE94  3D                 	db	61
   835  00FE95  00                 	db	0
   836  00FE96  00                 	db	0
   837  00FE97  7F                 	db	127
   838  00FE98  10                 	db	16
   839  00FE99  28                 	db	40
   840  00FE9A  44                 	db	68
   841  00FE9B  00                 	db	0
   842  00FE9C  41                 	db	65
   843  00FE9D  7F                 	db	127
   844  00FE9E  40                 	db	64
   845  00FE9F  00                 	db	0
   846  00FEA0  7C                 	db	124
   847  00FEA1  04                 	db	4
   848  00FEA2  18                 	db	24
   849  00FEA3  04                 	db	4
   850  00FEA4  78                 	db	120
   851  00FEA5  7C                 	db	124
   852  00FEA6  08                 	db	8
   853  00FEA7  04                 	db	4
   854  00FEA8  04                 	db	4
   855  00FEA9  78                 	db	120
   856  00FEAA  38                 	db	56
   857  00FEAB  44                 	db	68
   858  00FEAC  44                 	db	68
   859  00FEAD  44                 	db	68
   860  00FEAE  38                 	db	56
   861  00FEAF  7C                 	db	124
   862  00FEB0  14                 	db	20
   863  00FEB1  14                 	db	20
   864  00FEB2  14                 	db	20
   865  00FEB3  08                 	db	8
   866  00FEB4  08                 	db	8
   867  00FEB5  14                 	db	20
   868  00FEB6  14                 	db	20
   869  00FEB7  18                 	db	24
   870  00FEB8  7C                 	db	124
   871  00FEB9  7C                 	db	124
   872  00FEBA  08                 	db	8
   873  00FEBB  04                 	db	4
   874  00FEBC  04                 	db	4
   875  00FEBD  08                 	db	8
   876  00FEBE  48                 	db	72
   877  00FEBF  54                 	db	84
   878  00FEC0  54                 	db	84
   879  00FEC1  54                 	db	84
   880  00FEC2  20                 	db	32
   881  00FEC3  04                 	db	4
   882  00FEC4  3F                 	db	63
   883  00FEC5  44                 	db	68
   884  00FEC6  40                 	db	64
   885  00FEC7  20                 	db	32
   886  00FEC8  3C                 	db	60
   887  00FEC9  40                 	db	64
   888  00FECA  40                 	db	64
   889  00FECB  20                 	db	32
   890  00FECC  7C                 	db	124
   891  00FECD  1C                 	db	28
   892  00FECE  20                 	db	32
   893  00FECF  40                 	db	64
   894  00FED0  20                 	db	32
   895  00FED1  1C                 	db	28
   896  00FED2  3C                 	db	60
   897  00FED3  40                 	db	64
   898  00FED4  30                 	db	48
   899  00FED5  40                 	db	64
   900  00FED6  3C                 	db	60
   901  00FED7  44                 	db	68
   902  00FED8  28                 	db	40
   903  00FED9  10                 	db	16
   904  00FEDA  28                 	db	40
   905  00FEDB  44                 	db	68
   906  00FEDC  0C                 	db	12
   907  00FEDD  50                 	db	80
   908  00FEDE  50                 	db	80
   909  00FEDF  50                 	db	80
   910  00FEE0  3C                 	db	60
   911  00FEE1  44                 	db	68
   912  00FEE2  64                 	db	100
   913  00FEE3  54                 	db	84
   914  00FEE4  4C                 	db	76
   915  00FEE5  44                 	db	68
   916  00FEE6  00                 	db	0
   917  00FEE7  08                 	db	8
   918  00FEE8  36                 	db	54
   919  00FEE9  41                 	db	65
   920  00FEEA  00                 	db	0
   921  00FEEB  00                 	db	0
   922  00FEEC  00                 	db	0
   923  00FEED  7F                 	db	127
   924  00FEEE  00                 	db	0
   925  00FEEF  00                 	db	0
   926  00FEF0  00                 	db	0
   927  00FEF1  41                 	db	65
   928  00FEF2  36                 	db	54
   929  00FEF3  08                 	db	8
   930  00FEF4  00                 	db	0
   931  00FEF5  08                 	db	8
   932  00FEF6  08                 	db	8
   933  00FEF7  2A                 	db	42
   934  00FEF8  1C                 	db	28
   935  00FEF9  08                 	db	8
   936  00FEFA  08                 	db	8
   937  00FEFB  1C                 	db	28
   938  00FEFC  2A                 	db	42
   939  00FEFD  08                 	db	8
   940  00FEFE  08                 	db	8
   941  00FEFF                     __end_of_Font5x7:
   942                           	opt stack 0
   943  00FEFF                     _PortG_Property:
   944                           	opt stack 0
   945  00FEFF  FC00               	dw	64512
   946  00FF01                     __end_of_PortG_Property:
   947                           	opt stack 0
   948  00FF01                     _PortF_Property:
   949                           	opt stack 0
   950  00FF01  0FFF               	dw	4095
   951  00FF03                     __end_of_PortF_Property:
   952                           	opt stack 0
   953  00FF03                     _PortE_Property:
   954                           	opt stack 0
   955  00FF03  0000               	dw	0
   956  00FF05                     __end_of_PortE_Property:
   957                           	opt stack 0
   958  00FF05                     _PortD_Property:
   959                           	opt stack 0
   960  00FF05  FFFF               	dw	65535
   961  00FF07                     __end_of_PortD_Property:
   962                           	opt stack 0
   963  00FF07                     _PortC_Property:
   964                           	opt stack 0
   965  00FF07  FFF0               	dw	65520
   966  00FF09                     __end_of_PortC_Property:
   967                           	opt stack 0
   968  00FF09                     _PortB_Property:
   969                           	opt stack 0
   970  00FF09  FF00               	dw	65280
   971  00FF0B                     __end_of_PortB_Property:
   972                           	opt stack 0
   973  00FF0B                     _PortA_Property:
   974                           	opt stack 0
   975  00FF0B  00FF               	dw	255
   976  00FF0D                     __end_of_PortA_Property:
   977                           	opt stack 0
   978  0000                     _TMR0	set	4054
   979  0000                     _RCREG1	set	4015
   980  0000                     _TXREG1	set	4014
   981  0000                     _SPBRG1	set	4016
   982  0000                     _TXSTA1bits	set	4013
   983  0000                     _BAUDCON1bits	set	3966
   984  0000                     _RCSTA1	set	4012
   985  0000                     _TXSTA1	set	4013
   986  0000                     _TRISCbits	set	3988
   987  0000                     _PR2	set	4043
   988  0000                     _T2CONbits	set	4042
   989  0000                     _T0CONbits	set	4053
   990  0000                     _RCONbits	set	4048
   991  0000                     _OSCTUNEbits	set	3995
   992  0000                     _PIR3	set	4004
   993  0000                     _PIR2	set	4001
   994  0000                     _PIR1	set	3998
   995  0000                     _INTCONbits	set	4082
   996  0000                     _SSP2CON2bits	set	3947
   997  0000                     _SSP1CON2bits	set	4037
   998  0000                     _SSP1ADD	set	4040
   999  0000                     _ANCON0	set	4033
  1000  0000                     _ADRESL	set	4035
  1001  0000                     _ADRESH	set	4036
  1002  0000                     _ADCON1bits	set	4033
  1003  0000                     _ADCON0bits	set	4034
  1004  0000                     _SSP2CON1bits	set	3948
  1005  0000                     _SSP1CON1bits	set	4038
  1006  0000                     _SSP2STATbits	set	3949
  1007  0000                     _SSP1STATbits	set	4039
  1008  0000                     _PIE3bits	set	4003
  1009  0000                     _PIE1bits	set	3997
  1010  0000                     _PIR3bits	set	4004
  1011  0000                     _PIR1bits	set	3998
  1012  0000                     _IPR3bits	set	4005
  1013  0000                     _IPR1bits	set	3999
  1014  0000                     _PORTFbits	set	3973
  1015  0000                     _SSP2CON2	set	3947
  1016  0000                     _SSP1CON2	set	4037
  1017  0000                     _SSP2BUF	set	3951
  1018  0000                     _SSP2CON1	set	3948
  1019  0000                     _SSP2STAT	set	3949
  1020  0000                     _SSP1BUF	set	4041
  1021  0000                     _SSP1CON1	set	4038
  1022  0000                     _SSP1STAT	set	4039
  1023  0000                     _LATG	set	3983
  1024  0000                     _LATF	set	3982
  1025  0000                     _LATE	set	3981
  1026  0000                     _LATD	set	3980
  1027  0000                     _LATC	set	3979
  1028  0000                     _LATB	set	3978
  1029  0000                     _LATA	set	3977
  1030  0000                     _TRISG	set	3992
  1031  0000                     _TRISF	set	3991
  1032  0000                     _TRISE	set	3990
  1033  0000                     _TRISD	set	3989
  1034  0000                     _TRISC	set	3988
  1035  0000                     _TRISB	set	3987
  1036  0000                     _TRISA	set	3986
  1037  0000                     _PORTG	set	3974
  1038  0000                     _PORTF	set	3973
  1039  0000                     _PORTE	set	3972
  1040  0000                     _PORTD	set	3971
  1041  0000                     _PORTC	set	3970
  1042  0000                     _PORTB	set	3969
  1043  0000                     _PORTA	set	3968
  1044  00FF0D                     STR_10:
  1045  00FF0D  43                 	db	67	;'C'
  1046  00FF0E  6C                 	db	108	;'l'
  1047  00FF0F  6F                 	db	111	;'o'
  1048  00FF10  73                 	db	115	;'s'
  1049  00FF11  65                 	db	101	;'e'
  1050  00FF12  73                 	db	115	;'s'
  1051  00FF13  74                 	db	116	;'t'
  1052  00FF14  20                 	db	32
  1053  00FF15  57                 	db	87	;'W'
  1054  00FF16  61                 	db	97	;'a'
  1055  00FF17  6C                 	db	108	;'l'
  1056  00FF18  6C                 	db	108	;'l'
  1057  00FF19  3A                 	db	58	;':'
  1058  00FF1A  25                 	db	37
  1059  00FF1B  75                 	db	117	;'u'
  1060  00FF1C  0A                 	db	10
  1061  00FF1D  43                 	db	67	;'C'
  1062  00FF1E  6C                 	db	108	;'l'
  1063  00FF1F  6F                 	db	111	;'o'
  1064  00FF20  73                 	db	115	;'s'
  1065  00FF21  65                 	db	101	;'e'
  1066  00FF22  73                 	db	115	;'s'
  1067  00FF23  74                 	db	116	;'t'
  1068  00FF24  20                 	db	32
  1069  00FF25  41                 	db	65	;'A'
  1070  00FF26  6E                 	db	110	;'n'
  1071  00FF27  67                 	db	103	;'g'
  1072  00FF28  6C                 	db	108	;'l'
  1073  00FF29  65                 	db	101	;'e'
  1074  00FF2A  3A                 	db	58	;':'
  1075  00FF2B  25                 	db	37
  1076  00FF2C  64                 	db	100	;'d'
  1077  00FF2D  0A                 	db	10
  1078  00FF2E  4C                 	db	76	;'L'
  1079  00FF2F  65                 	db	101	;'e'
  1080  00FF30  66                 	db	102	;'f'
  1081  00FF31  74                 	db	116	;'t'
  1082  00FF32  20                 	db	32
  1083  00FF33  42                 	db	66	;'B'
  1084  00FF34  75                 	db	117	;'u'
  1085  00FF35  6D                 	db	109	;'m'
  1086  00FF36  70                 	db	112	;'p'
  1087  00FF37  3A                 	db	58	;':'
  1088  00FF38  25                 	db	37
  1089  00FF39  75                 	db	117	;'u'
  1090  00FF3A  0A                 	db	10
  1091  00FF3B  52                 	db	82	;'R'
  1092  00FF3C  69                 	db	105	;'i'
  1093  00FF3D  67                 	db	103	;'g'
  1094  00FF3E  68                 	db	104	;'h'
  1095  00FF3F  74                 	db	116	;'t'
  1096  00FF40  42                 	db	66	;'B'
  1097  00FF41  75                 	db	117	;'u'
  1098  00FF42  6D                 	db	109	;'m'
  1099  00FF43  70                 	db	112	;'p'
  1100  00FF44  3A                 	db	58	;':'
  1101  00FF45  25                 	db	37
  1102  00FF46  75                 	db	117	;'u'
  1103  00FF47  0A                 	db	10
  1104  00FF48  41                 	db	65	;'A'
  1105  00FF49  6E                 	db	110	;'n'
  1106  00FF4A  67                 	db	103	;'g'
  1107  00FF4B  6C                 	db	108	;'l'
  1108  00FF4C  65                 	db	101	;'e'
  1109  00FF4D  54                 	db	84	;'T'
  1110  00FF4E  6F                 	db	111	;'o'
  1111  00FF4F  54                 	db	84	;'T'
  1112  00FF50  75                 	db	117	;'u'
  1113  00FF51  72                 	db	114	;'r'
  1114  00FF52  6E                 	db	110	;'n'
  1115  00FF53  3A                 	db	58	;':'
  1116  00FF54  20                 	db	32
  1117  00FF55  25                 	db	37
  1118  00FF56  64                 	db	100	;'d'
  1119  00FF57  0A                 	db	10
  1120  00FF58  00                 	db	0
  1121  00FF59                     STR_2:
  1122  00FF59  43                 	db	67	;'C'
  1123  00FF5A  6C                 	db	108	;'l'
  1124  00FF5B  6F                 	db	111	;'o'
  1125  00FF5C  73                 	db	115	;'s'
  1126  00FF5D  65                 	db	101	;'e'
  1127  00FF5E  73                 	db	115	;'s'
  1128  00FF5F  74                 	db	116	;'t'
  1129  00FF60  20                 	db	32
  1130  00FF61  57                 	db	87	;'W'
  1131  00FF62  61                 	db	97	;'a'
  1132  00FF63  6C                 	db	108	;'l'
  1133  00FF64  6C                 	db	108	;'l'
  1134  00FF65  3A                 	db	58	;':'
  1135  00FF66  25                 	db	37
  1136  00FF67  75                 	db	117	;'u'
  1137  00FF68  0A                 	db	10
  1138  00FF69  43                 	db	67	;'C'
  1139  00FF6A  6C                 	db	108	;'l'
  1140  00FF6B  6F                 	db	111	;'o'
  1141  00FF6C  73                 	db	115	;'s'
  1142  00FF6D  65                 	db	101	;'e'
  1143  00FF6E  73                 	db	115	;'s'
  1144  00FF6F  74                 	db	116	;'t'
  1145  00FF70  20                 	db	32
  1146  00FF71  41                 	db	65	;'A'
  1147  00FF72  6E                 	db	110	;'n'
  1148  00FF73  67                 	db	103	;'g'
  1149  00FF74  6C                 	db	108	;'l'
  1150  00FF75  65                 	db	101	;'e'
  1151  00FF76  3A                 	db	58	;':'
  1152  00FF77  25                 	db	37
  1153  00FF78  64                 	db	100	;'d'
  1154  00FF79  0A                 	db	10
  1155  00FF7A  4C                 	db	76	;'L'
  1156  00FF7B  65                 	db	101	;'e'
  1157  00FF7C  66                 	db	102	;'f'
  1158  00FF7D  74                 	db	116	;'t'
  1159  00FF7E  20                 	db	32
  1160  00FF7F  42                 	db	66	;'B'
  1161  00FF80  75                 	db	117	;'u'
  1162  00FF81  6D                 	db	109	;'m'
  1163  00FF82  70                 	db	112	;'p'
  1164  00FF83  3A                 	db	58	;':'
  1165  00FF84  25                 	db	37
  1166  00FF85  75                 	db	117	;'u'
  1167  00FF86  0A                 	db	10
  1168  00FF87  52                 	db	82	;'R'
  1169  00FF88  69                 	db	105	;'i'
  1170  00FF89  67                 	db	103	;'g'
  1171  00FF8A  68                 	db	104	;'h'
  1172  00FF8B  74                 	db	116	;'t'
  1173  00FF8C  42                 	db	66	;'B'
  1174  00FF8D  75                 	db	117	;'u'
  1175  00FF8E  6D                 	db	109	;'m'
  1176  00FF8F  70                 	db	112	;'p'
  1177  00FF90  3A                 	db	58	;':'
  1178  00FF91  25                 	db	37
  1179  00FF92  75                 	db	117	;'u'
  1180  00FF93  0A                 	db	10
  1181  00FF94  00                 	db	0
  1182  00FF95                     STR_4:
  1183  00FF95  54                 	db	84	;'T'
  1184  00FF96  6F                 	db	111	;'o'
  1185  00FF97  74                 	db	116	;'t'
  1186  00FF98  61                 	db	97	;'a'
  1187  00FF99  6C                 	db	108	;'l'
  1188  00FF9A  20                 	db	32
  1189  00FF9B  44                 	db	68	;'D'
  1190  00FF9C  69                 	db	105	;'i'
  1191  00FF9D  73                 	db	115	;'s'
  1192  00FF9E  74                 	db	116	;'t'
  1193  00FF9F  61                 	db	97	;'a'
  1194  00FFA0  6E                 	db	110	;'n'
  1195  00FFA1  63                 	db	99	;'c'
  1196  00FFA2  65                 	db	101	;'e'
  1197  00FFA3  3A                 	db	58	;':'
  1198  00FFA4  25                 	db	37
  1199  00FFA5  75                 	db	117	;'u'
  1200  00FFA6  0A                 	db	10
  1201  00FFA7  4C                 	db	76	;'L'
  1202  00FFA8  65                 	db	101	;'e'
  1203  00FFA9  66                 	db	102	;'f'
  1204  00FFAA  74                 	db	116	;'t'
  1205  00FFAB  20                 	db	32
  1206  00FFAC  42                 	db	66	;'B'
  1207  00FFAD  75                 	db	117	;'u'
  1208  00FFAE  6D                 	db	109	;'m'
  1209  00FFAF  70                 	db	112	;'p'
  1210  00FFB0  3A                 	db	58	;':'
  1211  00FFB1  25                 	db	37
  1212  00FFB2  75                 	db	117	;'u'
  1213  00FFB3  0A                 	db	10
  1214  00FFB4  52                 	db	82	;'R'
  1215  00FFB5  69                 	db	105	;'i'
  1216  00FFB6  67                 	db	103	;'g'
  1217  00FFB7  68                 	db	104	;'h'
  1218  00FFB8  74                 	db	116	;'t'
  1219  00FFB9  20                 	db	32
  1220  00FFBA  42                 	db	66	;'B'
  1221  00FFBB  75                 	db	117	;'u'
  1222  00FFBC  6D                 	db	109	;'m'
  1223  00FFBD  70                 	db	112	;'p'
  1224  00FFBE  3A                 	db	58	;':'
  1225  00FFBF  25                 	db	37
  1226  00FFC0  75                 	db	117	;'u'
  1227  00FFC1  0A                 	db	10
  1228  00FFC2  00                 	db	0
  1229  00FFC3                     STR_13:
  1230  00FFC3  20                 	db	32
  1231  00FFC4  20                 	db	32
  1232  00FFC5  20                 	db	32
  1233  00FFC6  20                 	db	32
  1234  00FFC7  20                 	db	32
  1235  00FFC8  20                 	db	32
  1236  00FFC9  20                 	db	32
  1237  00FFCA  20                 	db	32
  1238  00FFCB  20                 	db	32
  1239  00FFCC  20                 	db	32
  1240  00FFCD  20                 	db	32
  1241  00FFCE  20                 	db	32
  1242  00FFCF  20                 	db	32
  1243  00FFD0  20                 	db	32
  1244  00FFD1  20                 	db	32
  1245  00FFD2  20                 	db	32
  1246  00FFD3  20                 	db	32
  1247  00FFD4  20                 	db	32
  1248  00FFD5  20                 	db	32
  1249  00FFD6  0A                 	db	10
  1250  00FFD7  00                 	db	0
  1251  00FFD8                     STR_12:
  1252  00FFD8  50                 	db	80	;'P'
  1253  00FFD9  6C                 	db	108	;'l'
  1254  00FFDA  65                 	db	101	;'e'
  1255  00FFDB  61                 	db	97	;'a'
  1256  00FFDC  73                 	db	115	;'s'
  1257  00FFDD  65                 	db	101	;'e'
  1258  00FFDE  20                 	db	32
  1259  00FFDF  73                 	db	115	;'s'
  1260  00FFE0  65                 	db	101	;'e'
  1261  00FFE1  6C                 	db	108	;'l'
  1262  00FFE2  65                 	db	101	;'e'
  1263  00FFE3  63                 	db	99	;'c'
  1264  00FFE4  74                 	db	116	;'t'
  1265  00FFE5  20                 	db	32
  1266  00FFE6  6D                 	db	109	;'m'
  1267  00FFE7  6F                 	db	111	;'o'
  1268  00FFE8  64                 	db	100	;'d'
  1269  00FFE9  65                 	db	101	;'e'
  1270  00FFEA  2E                 	db	46
  1271  00FFEB  0A                 	db	10
  1272  00FFEC  00                 	db	0
  1273  00FFED                     STR_8:
  1274  00FFED  44                 	db	68	;'D'
  1275  00FFEE  69                 	db	105	;'i'
  1276  00FFEF  73                 	db	115	;'s'
  1277  00FFF0  74                 	db	116	;'t'
  1278  00FFF1  61                 	db	97	;'a'
  1279  00FFF2  6E                 	db	110	;'n'
  1280  00FFF3  63                 	db	99	;'c'
  1281  00FFF4  65                 	db	101	;'e'
  1282  00FFF5  3A                 	db	58	;':'
  1283  00FFF6  20                 	db	32
  1284  00FFF7  25                 	db	37
  1285  00FFF8  64                 	db	100	;'d'
  1286  00FFF9  0A                 	db	10
  1287  00FFFA  00                 	db	0
  1288  00FFFB                     STR_1:
  1289  00FFFB  25                 	db	37
  1290  00FFFC  63                 	db	99	;'c'
  1291  00FFFD  00                 	db	0
  1292  0000                     
  1293                           ; #config settings
  1294  00FFFE  00                 	db	0	; dummy byte at the end
  1295  0000                     
  1296                           	psect	cinit
  1297  0144FE                     __pcinit:
  1298                           	opt stack 0
  1299  0144FE                     start_initialization:
  1300                           	opt stack 0
  1301  0144FE                     __initialization:
  1302                           	opt stack 0
  1303                           
  1304                           ; Initialize objects allocated to BANK3 (12 bytes)
  1305                           ; load TBLPTR registers with __pidataBANK3
  1306  0144FE  0E8C               	movlw	low __pidataBANK3
  1307  014500  6EF6               	movwf	tblptrl,c
  1308  014502  0E66               	movlw	high __pidataBANK3
  1309  014504  6EF7               	movwf	tblptrh,c
  1310  014506  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1311  014508  6EF8               	movwf	tblptru,c
  1312  01450A  EE03  F0EA         	lfsr	0,__pdataBANK3
  1313  01450E  EE10 F00C          	lfsr	1,12
  1314  014512                     copy_data0:
  1315  014512  0009               	tblrd		*+
  1316  014514  CFF5 FFEE          	movff	tablat,postinc0
  1317  014518  50E5               	movf	postdec1,w,c
  1318  01451A  50E1               	movf	fsr1l,w,c
  1319  01451C  E1FA               	bnz	copy_data0
  1320                           
  1321                           ; Initialize objects allocated to BANK0 (7 bytes)
  1322                           ; load TBLPTR registers with __pidataBANK0
  1323  01451E  0EF2               	movlw	low __pidataBANK0
  1324  014520  6EF6               	movwf	tblptrl,c
  1325  014522  0E66               	movlw	high __pidataBANK0
  1326  014524  6EF7               	movwf	tblptrh,c
  1327  014526  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1328  014528  6EF8               	movwf	tblptru,c
  1329  01452A  EE00  F0F9         	lfsr	0,__pdataBANK0
  1330  01452E  EE10 F007          	lfsr	1,7
  1331  014532                     copy_data1:
  1332  014532  0009               	tblrd		*+
  1333  014534  CFF5 FFEE          	movff	tablat,postinc0
  1334  014538  50E5               	movf	postdec1,w,c
  1335  01453A  50E1               	movf	fsr1l,w,c
  1336  01453C  E1FA               	bnz	copy_data1
  1337                           
  1338                           ; Initialize objects allocated to COMRAM (10 bytes)
  1339                           ; load TBLPTR registers with __pidataCOMRAM
  1340  01453E  0EBC               	movlw	low __pidataCOMRAM
  1341  014540  6EF6               	movwf	tblptrl,c
  1342  014542  0E66               	movlw	high __pidataCOMRAM
  1343  014544  6EF7               	movwf	tblptrh,c
  1344  014546  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1345  014548  6EF8               	movwf	tblptru,c
  1346  01454A  EE00  F047         	lfsr	0,__pdataCOMRAM
  1347  01454E  EE10 F00A          	lfsr	1,10
  1348  014552                     copy_data2:
  1349  014552  0009               	tblrd		*+
  1350  014554  CFF5 FFEE          	movff	tablat,postinc0
  1351  014558  50E5               	movf	postdec1,w,c
  1352  01455A  50E1               	movf	fsr1l,w,c
  1353  01455C  E1FA               	bnz	copy_data2
  1354                           
  1355                           ; Clear objects allocated to BIGRAM (300 bytes)
  1356  01455E  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1357  014562  EE11 F02C          	lfsr	1,300
  1358  014566                     clear_0:
  1359  014566  6AEE               	clrf	postinc0,c
  1360  014568  50E5               	movf	postdec1,w,c
  1361  01456A  50E1               	movf	fsr1l,w,c
  1362  01456C  E1FC               	bnz	clear_0
  1363  01456E  50E2               	movf	fsr1h,w,c
  1364  014570  E1FA               	bnz	clear_0
  1365                           
  1366                           ; Clear objects allocated to BANK4 (170 bytes)
  1367  014572  EE04  F000         	lfsr	0,__pbssBANK4
  1368  014576  0EAA               	movlw	170
  1369  014578                     clear_1:
  1370  014578  6AEE               	clrf	postinc0,c
  1371  01457A  06E8               	decf	wreg,f,c
  1372  01457C  E1FD               	bnz	clear_1
  1373                           
  1374                           ; Clear objects allocated to BANK3 (234 bytes)
  1375  01457E  EE03  F000         	lfsr	0,__pbssBANK3
  1376  014582  0EEA               	movlw	234
  1377  014584                     clear_2:
  1378  014584  6AEE               	clrf	postinc0,c
  1379  014586  06E8               	decf	wreg,f,c
  1380  014588  E1FD               	bnz	clear_2
  1381                           
  1382                           ; Clear objects allocated to BANK0 (90 bytes)
  1383  01458A  EE00  F060         	lfsr	0,__pbssBANK0
  1384  01458E  0E5A               	movlw	90
  1385  014590                     clear_3:
  1386  014590  6AEE               	clrf	postinc0,c
  1387  014592  06E8               	decf	wreg,f,c
  1388  014594  E1FD               	bnz	clear_3
  1389                           
  1390                           ; Clear objects allocated to COMRAM (30 bytes)
  1391  014596  EE00  F029         	lfsr	0,__pbssCOMRAM
  1392  01459A  0E1E               	movlw	30
  1393  01459C                     clear_4:
  1394  01459C  6AEE               	clrf	postinc0,c
  1395  01459E  06E8               	decf	wreg,f,c
  1396  0145A0  E1FD               	bnz	clear_4
  1397  0145A2                     end_of_initialization:
  1398                           	opt stack 0
  1399  0145A2                     __end_of__initialization:
  1400                           	opt stack 0
  1401  0145A2  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1402  0145A4  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1403  0145A6  0100               	movlb	0
  1404  0145A8  EF0A  F09D         	goto	_main	;jump to C main() function
  1405                           tblptru	equ	0xFF8
  1406                           tblptrh	equ	0xFF7
  1407                           tblptrl	equ	0xFF6
  1408                           tablat	equ	0xFF5
  1409                           postinc0	equ	0xFEE
  1410                           wreg	equ	0xFE8
  1411                           postdec1	equ	0xFE5
  1412                           fsr1h	equ	0xFE2
  1413                           fsr1l	equ	0xFE1
  1414                           
  1415                           	psect	bssCOMRAM
  1416  000029                     __pbssCOMRAM:
  1417                           	opt stack 0
  1418  000029                     _COUNTER:
  1419                           	opt stack 0
  1420  000029                     	ds	2
  1421  00002B                     HMI_GRender@a:
  1422                           	opt stack 0
  1423  00002B                     	ds	2
  1424  00002D                     SPI_Send9@dat:
  1425                           	opt stack 0
  1426  00002D                     	ds	2
  1427  00002F                     _iRDropCaster:
  1428                           	opt stack 0
  1429  00002F                     	ds	1
  1430  000030                     _iRVirtualWall:
  1431                           	opt stack 0
  1432  000030                     	ds	1
  1433  000031                     _iRCliffR:
  1434                           	opt stack 0
  1435  000031                     	ds	1
  1436  000032                     _iRCliffFR:
  1437                           	opt stack 0
  1438  000032                     	ds	1
  1439  000033                     _iRCliffFL:
  1440                           	opt stack 0
  1441  000033                     	ds	1
  1442  000034                     _iRCliffL:
  1443                           	opt stack 0
  1444  000034                     	ds	1
  1445  000035                     _iRWall:
  1446                           	opt stack 0
  1447  000035                     	ds	1
  1448  000036                     _iRBumpDrop:
  1449                           	opt stack 0
  1450  000036                     	ds	1
  1451  000037                     _iRScriptIndex:
  1452                           	opt stack 0
  1453  000037                     	ds	1
  1454  000038                     _u:
  1455                           	opt stack 0
  1456  000038                     	ds	1
  1457  000039                     _j:
  1458                           	opt stack 0
  1459  000039                     	ds	1
  1460  00003A                     _i:
  1461                           	opt stack 0
  1462  00003A                     	ds	1
  1463  00003B                     rand@screw:
  1464                           	opt stack 0
  1465  00003B                     	ds	1
  1466  00003C                     _ADC_Initialised:
  1467                           	opt stack 0
  1468  00003C                     	ds	1
  1469  00003D                     OutSeg@a:
  1470                           	opt stack 0
  1471  00003D                     	ds	1
  1472  00003E                     OutSeg@segset:
  1473                           	opt stack 0
  1474  00003E                     	ds	1
  1475  00003F                     OutSeg@cur:
  1476                           	opt stack 0
  1477  00003F                     	ds	1
  1478  000040                     _I2C1T:
  1479                           	opt stack 0
  1480  000040                     	ds	7
  1481                           tblptru	equ	0xFF8
  1482                           tblptrh	equ	0xFF7
  1483                           tblptrl	equ	0xFF6
  1484                           tablat	equ	0xFF5
  1485                           postinc0	equ	0xFEE
  1486                           wreg	equ	0xFE8
  1487                           postdec1	equ	0xFE5
  1488                           fsr1h	equ	0xFE2
  1489                           fsr1l	equ	0xFE1
  1490                           
  1491                           	psect	dataCOMRAM
  1492  000047                     __pdataCOMRAM:
  1493                           	opt stack 0
  1494  000047                     _gCursor:
  1495                           	opt stack 0
  1496  000047                     	ds	4
  1497  00004B                     _Bus_State:
  1498                           	opt stack 0
  1499  00004B                     	ds	1
  1500  00004C                     	ds	1
  1501  00004D                     	ds	1
  1502  00004E                     	ds	1
  1503  00004F                     _l:
  1504                           	opt stack 0
  1505  00004F                     	ds	1
  1506  000050                     _w:
  1507                           	opt stack 0
  1508  000050                     	ds	1
  1509                           tblptru	equ	0xFF8
  1510                           tblptrh	equ	0xFF7
  1511                           tblptrl	equ	0xFF6
  1512                           tablat	equ	0xFF5
  1513                           postinc0	equ	0xFEE
  1514                           wreg	equ	0xFE8
  1515                           postdec1	equ	0xFE5
  1516                           fsr1h	equ	0xFE2
  1517                           fsr1l	equ	0xFE1
  1518                           
  1519                           	psect	bssBANK0
  1520  000060                     __pbssBANK0:
  1521                           	opt stack 0
  1522  000060                     _gISR:
  1523                           	opt stack 0
  1524  000060                     	ds	3
  1525  000063                     _lQueue:
  1526                           	opt stack 0
  1527  000063                     	ds	3
  1528  000066                     _lStepFunction:
  1529                           	opt stack 0
  1530  000066                     	ds	3
  1531  000069                     _dist:
  1532                           	opt stack 0
  1533  000069                     	ds	2
  1534  00006B                     _angleToClosestWall:
  1535                           	opt stack 0
  1536  00006B                     	ds	2
  1537  00006D                     _IRValue:
  1538                           	opt stack 0
  1539  00006D                     	ds	2
  1540  00006F                     _Stepstomin:
  1541                           	opt stack 0
  1542  00006F                     	ds	2
  1543  000071                     _StepRotate:
  1544                           	opt stack 0
  1545  000071                     	ds	2
  1546  000073                     _angleTotal:
  1547                           	opt stack 0
  1548  000073                     	ds	2
  1549  000075                     _distanceTotal:
  1550                           	opt stack 0
  1551  000075                     	ds	2
  1552  000077                     _iRAngle:
  1553                           	opt stack 0
  1554  000077                     	ds	2
  1555  000079                     _iRDistance:
  1556                           	opt stack 0
  1557  000079                     	ds	2
  1558  00007B                     _pShiftVal:
  1559                           	opt stack 0
  1560  00007B                     	ds	2
  1561  00007D                     _val:
  1562                           	opt stack 0
  1563  00007D                     	ds	2
  1564  00007F                     _lMotor:
  1565                           	opt stack 0
  1566  00007F                     	ds	2
  1567  000081                     _lCurrent:
  1568                           	opt stack 0
  1569  000081                     	ds	2
  1570  000083                     _gBackcolour:
  1571                           	opt stack 0
  1572  000083                     	ds	2
  1573  000085                     _iRDropLeft:
  1574                           	opt stack 0
  1575  000085                     	ds	1
  1576  000086                     _iRDropRight:
  1577                           	opt stack 0
  1578  000086                     	ds	1
  1579  000087                     _iRBumpLeft:
  1580                           	opt stack 0
  1581  000087                     	ds	1
  1582  000088                     _iRBumpRight:
  1583                           	opt stack 0
  1584  000088                     	ds	1
  1585  000089                     Event_TestButton@j:
  1586                           	opt stack 0
  1587  000089                     	ds	1
  1588  00008A                     Timer2_Init@PRE:
  1589                           	opt stack 0
  1590  00008A                     	ds	1
  1591  00008B                     Timer2_Init@INDEX:
  1592                           	opt stack 0
  1593  00008B                     	ds	1
  1594  00008C                     Timer0_Init@PRE:
  1595                           	opt stack 0
  1596  00008C                     	ds	1
  1597  00008D                     _INDEX:
  1598                           	opt stack 0
  1599  00008D                     	ds	1
  1600  00008E                     _lBufferY:
  1601                           	opt stack 0
  1602  00008E                     	ds	1
  1603  00008F                     _lBufferX:
  1604                           	opt stack 0
  1605  00008F                     	ds	1
  1606  000090                     _clearall:
  1607                           	opt stack 0
  1608  000090                     	ds	1
  1609  000091                     _PortE:
  1610                           	opt stack 0
  1611  000091                     	ds	10
  1612  00009B                     _PortD:
  1613                           	opt stack 0
  1614  00009B                     	ds	10
  1615  0000A5                     _PortC:
  1616                           	opt stack 0
  1617  0000A5                     	ds	10
  1618  0000AF                     _Stepper:
  1619                           	opt stack 0
  1620  0000AF                     	ds	6
  1621  0000B5                     _ADC_AN0:
  1622                           	opt stack 0
  1623  0000B5                     	ds	5
  1624                           tblptru	equ	0xFF8
  1625                           tblptrh	equ	0xFF7
  1626                           tblptrl	equ	0xFF6
  1627                           tablat	equ	0xFF5
  1628                           postinc0	equ	0xFEE
  1629                           wreg	equ	0xFE8
  1630                           postdec1	equ	0xFE5
  1631                           fsr1h	equ	0xFE2
  1632                           fsr1l	equ	0xFE1
  1633                           
  1634                           	psect	dataBANK0
  1635  0000F9                     __pdataBANK0:
  1636                           	opt stack 0
  1637  0000F9                     _TimerX:
  1638                           	opt stack 0
  1639  0000F9                     	ds	2
  1640  0000FB                     _MinDist:
  1641                           	opt stack 0
  1642  0000FB                     	ds	2
  1643  0000FD                     _gForecolour:
  1644                           	opt stack 0
  1645  0000FD                     	ds	2
  1646  0000FF                     _change:
  1647                           	opt stack 0
  1648  0000FF                     	ds	1
  1649                           tblptru	equ	0xFF8
  1650                           tblptrh	equ	0xFF7
  1651                           tblptrl	equ	0xFF6
  1652                           tablat	equ	0xFF5
  1653                           postinc0	equ	0xFEE
  1654                           wreg	equ	0xFE8
  1655                           postdec1	equ	0xFE5
  1656                           fsr1h	equ	0xFE2
  1657                           fsr1l	equ	0xFE1
  1658                           
  1659                           	psect	bssBANK3
  1660  000300                     __pbssBANK3:
  1661                           	opt stack 0
  1662  000300                     _lCBuffer:
  1663                           	opt stack 0
  1664  000300                     	ds	30
  1665  00031E                     _iRAngleSS:
  1666                           	opt stack 0
  1667  00031E                     	ds	4
  1668  000322                     _iRDistanceSS:
  1669                           	opt stack 0
  1670  000322                     	ds	4
  1671  000326                     Timer2_Init@DIV:
  1672                           	opt stack 0
  1673  000326                     	ds	4
  1674  00032A                     Timer0_Init@DIV:
  1675                           	opt stack 0
  1676  00032A                     	ds	4
  1677  00032E                     _I2C2_More:
  1678                           	opt stack 0
  1679  00032E                     	ds	3
  1680  000331                     _I2C1_More:
  1681                           	opt stack 0
  1682  000331                     	ds	3
  1683  000334                     _I2C2_Done:
  1684                           	opt stack 0
  1685  000334                     	ds	3
  1686  000337                     _I2C1_Done:
  1687                           	opt stack 0
  1688  000337                     	ds	3
  1689  00033A                     _angle:
  1690                           	opt stack 0
  1691  00033A                     	ds	2
  1692  00033C                     _mode:
  1693                           	opt stack 0
  1694  00033C                     	ds	2
  1695  00033E                     _dip:
  1696                           	opt stack 0
  1697  00033E                     	ds	2
  1698  000340                     _HMIBoard:
  1699                           	opt stack 0
  1700  000340                     	ds	58
  1701  00037A                     _SPI1:
  1702                           	opt stack 0
  1703  00037A                     	ds	11
  1704  000385                     _SPI2:
  1705                           	opt stack 0
  1706  000385                     	ds	11
  1707  000390                     _DIPSwitch:
  1708                           	opt stack 0
  1709  000390                     	ds	10
  1710  00039A                     _TestButton:
  1711                           	opt stack 0
  1712  00039A                     	ds	10
  1713  0003A4                     _PortG:
  1714                           	opt stack 0
  1715  0003A4                     	ds	10
  1716  0003AE                     _PortB:
  1717                           	opt stack 0
  1718  0003AE                     	ds	10
  1719  0003B8                     _PortA:
  1720                           	opt stack 0
  1721  0003B8                     	ds	10
  1722  0003C2                     _PortF:
  1723                           	opt stack 0
  1724  0003C2                     	ds	10
  1725  0003CC                     _I2C2T:
  1726                           	opt stack 0
  1727  0003CC                     	ds	7
  1728  0003D3                     _ADC_AN3:
  1729                           	opt stack 0
  1730  0003D3                     	ds	5
  1731  0003D8                     _ADC_AN2:
  1732                           	opt stack 0
  1733  0003D8                     	ds	5
  1734  0003DD                     _ADC_AN1:
  1735                           	opt stack 0
  1736  0003DD                     	ds	5
  1737  0003E2                     LCD_DrawRectangle@p4:
  1738                           	opt stack 0
  1739  0003E2                     	ds	4
  1740  0003E6                     LCD_DrawRectangle@p2:
  1741                           	opt stack 0
  1742  0003E6                     	ds	4
  1743                           tblptru	equ	0xFF8
  1744                           tblptrh	equ	0xFF7
  1745                           tblptrl	equ	0xFF6
  1746                           tablat	equ	0xFF5
  1747                           postinc0	equ	0xFEE
  1748                           wreg	equ	0xFE8
  1749                           postdec1	equ	0xFE5
  1750                           fsr1h	equ	0xFE2
  1751                           fsr1l	equ	0xFE1
  1752                           
  1753                           	psect	dataBANK3
  1754  0003EA                     __pdataBANK3:
  1755                           	opt stack 0
  1756  0003EA                     Console_Render@F6956:
  1757                           	opt stack 0
  1758  0003EA                     	ds	4
  1759  0003EE                     _gLineSize:
  1760                           	opt stack 0
  1761  0003EE                     	ds	4
  1762  0003F2                     _gCharSize:
  1763                           	opt stack 0
  1764  0003F2                     	ds	4
  1765                           tblptru	equ	0xFF8
  1766                           tblptrh	equ	0xFF7
  1767                           tblptrl	equ	0xFF6
  1768                           tablat	equ	0xFF5
  1769                           postinc0	equ	0xFEE
  1770                           wreg	equ	0xFE8
  1771                           postdec1	equ	0xFE5
  1772                           fsr1h	equ	0xFE2
  1773                           fsr1l	equ	0xFE1
  1774                           
  1775                           	psect	bssBANK4
  1776  000400                     __pbssBANK4:
  1777                           	opt stack 0
  1778  000400                     _iRScriptStack:
  1779                           	opt stack 0
  1780  000400                     	ds	100
  1781  000464                     Console_MakeField@Fill:
  1782                           	opt stack 0
  1783  000464                     	ds	70
  1784                           tblptru	equ	0xFF8
  1785                           tblptrh	equ	0xFF7
  1786                           tblptrl	equ	0xFF6
  1787                           tablat	equ	0xFF5
  1788                           postinc0	equ	0xFEE
  1789                           wreg	equ	0xFE8
  1790                           postdec1	equ	0xFE5
  1791                           fsr1h	equ	0xFE2
  1792                           fsr1l	equ	0xFE1
  1793                           
  1794                           	psect	bssBIGRAM
  1795  0004AA                     __pbssBIGRAM:
  1796                           	opt stack 0
  1797  0004AA                     _lBuffer:
  1798                           	opt stack 0
  1799  0004AA                     	ds	300
  1800                           tblptru	equ	0xFF8
  1801                           tblptrh	equ	0xFF7
  1802                           tblptrl	equ	0xFF6
  1803                           tablat	equ	0xFF5
  1804                           postinc0	equ	0xFEE
  1805                           wreg	equ	0xFE8
  1806                           postdec1	equ	0xFE5
  1807                           fsr1h	equ	0xFE2
  1808                           fsr1l	equ	0xFE1
  1809                           
  1810                           	psect	cstackBANK3
  1811  0003F6                     __pcstackBANK3:
  1812                           	opt stack 0
  1813  0003F6                     ??_findClosestWall:
  1814  0003F6                     ??_mode1:
  1815                           
  1816                           ; 1 bytes @ 0x0
  1817  0003F6                     	ds	2
  1818  0003F8                     mode1@moveto:
  1819                           	opt stack 0
  1820  0003F8                     _findClosestWall$15599:
  1821                           	opt stack 0
  1822                           
  1823                           ; 4 bytes @ 0x2
  1824  0003F8                     	ds	2
  1825  0003FA                     _mode1$15600:
  1826                           	opt stack 0
  1827                           
  1828                           ; 4 bytes @ 0x4
  1829  0003FA                     	ds	4
  1830  0003FE                     ??_main:
  1831                           
  1832                           ; 1 bytes @ 0x8
  1833  0003FE                     	ds	2
  1834                           tblptru	equ	0xFF8
  1835                           tblptrh	equ	0xFF7
  1836                           tblptrl	equ	0xFF6
  1837                           tablat	equ	0xFF5
  1838                           postinc0	equ	0xFEE
  1839                           wreg	equ	0xFE8
  1840                           postdec1	equ	0xFE5
  1841                           fsr1h	equ	0xFE2
  1842                           fsr1l	equ	0xFE1
  1843                           
  1844                           	psect	cstackBANK2
  1845  000200                     __pcstackBANK2:
  1846                           	opt stack 0
  1847  000200                     irobot_query_and_update@TXArray:
  1848                           	opt stack 0
  1849                           
  1850                           ; 256 bytes @ 0x0
  1851  000200                     	ds	256
  1852                           tblptru	equ	0xFF8
  1853                           tblptrh	equ	0xFF7
  1854                           tblptrl	equ	0xFF6
  1855                           tablat	equ	0xFF5
  1856                           postinc0	equ	0xFEE
  1857                           wreg	equ	0xFE8
  1858                           postdec1	equ	0xFE5
  1859                           fsr1h	equ	0xFE2
  1860                           fsr1l	equ	0xFE1
  1861                           
  1862                           	psect	cstackBANK1
  1863  000100                     __pcstackBANK1:
  1864                           	opt stack 0
  1865  000100                     ??___fltol:
  1866  000100                     Port_SetType@Output:
  1867                           	opt stack 0
  1868  000100                     Button_Init@pInput:
  1869                           	opt stack 0
  1870  000100                     irobot_query_and_update@RXArray:
  1871                           	opt stack 0
  1872                           
  1873                           ; 256 bytes @ 0x0
  1874  000100                     	ds	1
  1875  000101                     Port_Init@pInput:
  1876                           	opt stack 0
  1877                           
  1878                           ; 2 bytes @ 0x1
  1879  000101                     	ds	1
  1880  000102                     Button_Init@pThreshold:
  1881                           	opt stack 0
  1882                           
  1883                           ; 2 bytes @ 0x2
  1884  000102                     	ds	1
  1885  000103                     Port_Init@pPort:
  1886                           	opt stack 0
  1887                           
  1888                           ; 1 bytes @ 0x3
  1889  000103                     	ds	1
  1890  000104                     ??_Port_Init:
  1891  000104                     Button_Init@pInitIO:
  1892                           	opt stack 0
  1893                           
  1894                           ; 3 bytes @ 0x4
  1895  000104                     	ds	2
  1896  000106                     Port_Init@i:
  1897                           	opt stack 0
  1898                           
  1899                           ; 1 bytes @ 0x6
  1900  000106                     	ds	1
  1901  000107                     Button_Init@pGetState:
  1902                           	opt stack 0
  1903                           
  1904                           ; 3 bytes @ 0x7
  1905  000107                     	ds	3
  1906  00010A                     Button_Init@pFunction:
  1907                           	opt stack 0
  1908                           
  1909                           ; 3 bytes @ 0xA
  1910  00010A                     	ds	246
  1911                           tblptru	equ	0xFF8
  1912                           tblptrh	equ	0xFF7
  1913                           tblptrl	equ	0xFF6
  1914                           tablat	equ	0xFF5
  1915                           postinc0	equ	0xFEE
  1916                           wreg	equ	0xFE8
  1917                           postdec1	equ	0xFE5
  1918                           fsr1h	equ	0xFE2
  1919                           fsr1l	equ	0xFE1
  1920                           
  1921                           	psect	cstackBANK0
  1922  0000BA                     __pcstackBANK0:
  1923                           	opt stack 0
  1924  0000BA                     ??_Console_ClearCursor:
  1925  0000BA                     ??_ADC_SetChannel:
  1926  0000BA                     ??_ADC_ConversionTime:
  1927  0000BA                     ??_ADC_SetupIO:
  1928  0000BA                     ??_sort_iRBumpDrop:
  1929  0000BA                     ?_load_iRScriptStack:
  1930                           	opt stack 0
  1931  0000BA                     ??_Console_Init:
  1932  0000BA                     ??_Console_NewLine:
  1933  0000BA                     ??_Console_FormFeed:
  1934  0000BA                     ??_HMI_SetButton:
  1935  0000BA                     ?_GetPortProperties:
  1936                           	opt stack 0
  1937  0000BA                     ?_GetPortPORT:
  1938                           	opt stack 0
  1939  0000BA                     ?_GetPortTRIS:
  1940                           	opt stack 0
  1941  0000BA                     ?_twos_complement_of:
  1942                           	opt stack 0
  1943  0000BA                     ?___wmul:
  1944                           	opt stack 0
  1945  0000BA                     ?___awdiv:
  1946                           	opt stack 0
  1947  0000BA                     ?___lwdiv:
  1948                           	opt stack 0
  1949  0000BA                     ?___fldiv:
  1950                           	opt stack 0
  1951  0000BA                     ?___lldiv:
  1952                           	opt stack 0
  1953  0000BA                     ?___xxtofl:
  1954                           	opt stack 0
  1955  0000BA                     Mode_Set@pMode:
  1956                           	opt stack 0
  1957  0000BA                     ToSegment@pCHR:
  1958                           	opt stack 0
  1959  0000BA                     HMI_SetBar@pValue:
  1960                           	opt stack 0
  1961  0000BA                     ADC_ClockDivision@pDivide:
  1962                           	opt stack 0
  1963  0000BA                     get_packet_size@packetID:
  1964                           	opt stack 0
  1965  0000BA                     eusart_putch@eusartSendChar:
  1966                           	opt stack 0
  1967  0000BA                     Port_GetPin@pInput:
  1968                           	opt stack 0
  1969  0000BA                     Port_GetQuad@pInput:
  1970                           	opt stack 0
  1971  0000BA                     SPI_DisableISR@pInput:
  1972                           	opt stack 0
  1973  0000BA                     SPI_DCS@pInput:
  1974                           	opt stack 0
  1975  0000BA                     SPI_Send@pInput:
  1976                           	opt stack 0
  1977  0000BA                     Byte_SetBit@pInput:
  1978                           	opt stack 0
  1979  0000BA                     Byte_GetBit@pInput:
  1980                           	opt stack 0
  1981  0000BA                     Byte_SetZone@pInput:
  1982                           	opt stack 0
  1983  0000BA                     Byte_GetZone@pInput:
  1984                           	opt stack 0
  1985  0000BA                     Byte_SetByte@pInput:
  1986                           	opt stack 0
  1987  0000BA                     delay_ms@ms:
  1988                           	opt stack 0
  1989  0000BA                     delay_us@us:
  1990                           	opt stack 0
  1991  0000BA                     reverse@input:
  1992                           	opt stack 0
  1993  0000BA                     twos_complement_of@complementValue:
  1994                           	opt stack 0
  1995  0000BA                     ___wmul@multiplier:
  1996                           	opt stack 0
  1997  0000BA                     ___awdiv@dividend:
  1998                           	opt stack 0
  1999  0000BA                     ___lwdiv@dividend:
  2000                           	opt stack 0
  2001  0000BA                     MXK_Queue@pCallback:
  2002                           	opt stack 0
  2003  0000BA                     Timer0_Start@pFunction:
  2004                           	opt stack 0
  2005  0000BA                     ___lldiv@dividend:
  2006                           	opt stack 0
  2007  0000BA                     ___fldiv@b:
  2008                           	opt stack 0
  2009  0000BA                     ___xxtofl@val:
  2010                           	opt stack 0
  2011                           
  2012                           ; 4 bytes @ 0x0
  2013  0000BA                     	ds	1
  2014  0000BB                     ADC_SetChannel@pChannel:
  2015                           	opt stack 0
  2016  0000BB                     ADC_ClockDivision@reg:
  2017                           	opt stack 0
  2018  0000BB                     ADC_ConversionTime@pCount:
  2019                           	opt stack 0
  2020  0000BB                     rx_assign@packetIDValue:
  2021                           	opt stack 0
  2022  0000BB                     irobot_song_play@songNumber:
  2023                           	opt stack 0
  2024  0000BB                     HMI_SetSegments@pString:
  2025                           	opt stack 0
  2026                           
  2027                           ; 2 bytes @ 0x1
  2028  0000BB                     	ds	1
  2029  0000BC                     GetPortProperties@pInput:
  2030                           	opt stack 0
  2031  0000BC                     GetPortPORT@pInput:
  2032                           	opt stack 0
  2033  0000BC                     GetPortTRIS@pInput:
  2034                           	opt stack 0
  2035  0000BC                     Port_GetPin@pPin:
  2036                           	opt stack 0
  2037  0000BC                     Port_GetQuad@pQuad:
  2038                           	opt stack 0
  2039  0000BC                     SPI_Send@pData:
  2040                           	opt stack 0
  2041  0000BC                     Byte_SetBit@pBit:
  2042                           	opt stack 0
  2043  0000BC                     Byte_GetBit@pBit:
  2044                           	opt stack 0
  2045  0000BC                     Byte_SetZone@pMax:
  2046                           	opt stack 0
  2047  0000BC                     Byte_GetZone@pMax:
  2048                           	opt stack 0
  2049  0000BC                     Byte_SetByte@pValue:
  2050                           	opt stack 0
  2051  0000BC                     Console_Init@x:
  2052                           	opt stack 0
  2053  0000BC                     Console_FormFeed@x:
  2054                           	opt stack 0
  2055  0000BC                     ADC_SetupIO@pChannel:
  2056                           	opt stack 0
  2057  0000BC                     ADC_ClockDivision@unfound:
  2058                           	opt stack 0
  2059  0000BC                     rx_assign@byteNumber:
  2060                           	opt stack 0
  2061  0000BC                     reverse@length:
  2062                           	opt stack 0
  2063  0000BC                     ADC_Start@pInput:
  2064                           	opt stack 0
  2065  0000BC                     ___wmul@multiplicand:
  2066                           	opt stack 0
  2067  0000BC                     ___awdiv@divisor:
  2068                           	opt stack 0
  2069  0000BC                     ___lwdiv@divisor:
  2070                           	opt stack 0
  2071  0000BC                     delay_ms@u:
  2072                           	opt stack 0
  2073  0000BC                     delay_us@u:
  2074                           	opt stack 0
  2075  0000BC                     HMI_SetButton@reindex:
  2076                           	opt stack 0
  2077                           
  2078                           ; 4 bytes @ 0x2
  2079  0000BC                     	ds	1
  2080  0000BD                     ??_Port_GetPin:
  2081  0000BD                     ??_Port_GetQuad:
  2082  0000BD                     ??_Byte_GetBit:
  2083  0000BD                     ??_rx_assign:
  2084  0000BD                     LCD_Write@mode:
  2085                           	opt stack 0
  2086  0000BD                     Byte_SetBit@pValue:
  2087                           	opt stack 0
  2088  0000BD                     Byte_SetZone@pChunk:
  2089                           	opt stack 0
  2090  0000BD                     Byte_GetZone@pChunk:
  2091                           	opt stack 0
  2092  0000BD                     Console_Init@y:
  2093                           	opt stack 0
  2094  0000BD                     Console_FormFeed@y:
  2095                           	opt stack 0
  2096  0000BD                     OutSeg@pSegment:
  2097                           	opt stack 0
  2098  0000BD                     ADC_SetupIO@MASK:
  2099                           	opt stack 0
  2100  0000BD                     Motor_Move@pMotor:
  2101                           	opt stack 0
  2102                           
  2103                           ; 2 bytes @ 0x3
  2104  0000BD                     	ds	1
  2105  0000BE                     ??_Byte_SetBit:
  2106  0000BE                     ??_Console_IncrementCursor:
  2107  0000BE                     ??_OutSeg:
  2108  0000BE                     ??_ADC_Start:
  2109  0000BE                     ??___xxtofl:
  2110  0000BE                     LCD_Write@value:
  2111                           	opt stack 0
  2112  0000BE                     Byte_GetBit@Output:
  2113                           	opt stack 0
  2114  0000BE                     Byte_SetZone@pChunkSize:
  2115                           	opt stack 0
  2116  0000BE                     Byte_GetZone@pChunkSize:
  2117                           	opt stack 0
  2118  0000BE                     reverse@tempVar:
  2119                           	opt stack 0
  2120  0000BE                     ___awdiv@counter:
  2121                           	opt stack 0
  2122  0000BE                     ___lwdiv@counter:
  2123                           	opt stack 0
  2124  0000BE                     HMI_SetSegments@in:
  2125                           	opt stack 0
  2126  0000BE                     ADC_Init@pInput:
  2127                           	opt stack 0
  2128  0000BE                     ___wmul@product:
  2129                           	opt stack 0
  2130  0000BE                     ___lldiv@divisor:
  2131                           	opt stack 0
  2132  0000BE                     ___fldiv@a:
  2133                           	opt stack 0
  2134                           
  2135                           ; 4 bytes @ 0x4
  2136  0000BE                     	ds	1
  2137  0000BF                     ??_Byte_GetZone:
  2138  0000BF                     ?_Console_MakeField:
  2139                           	opt stack 0
  2140  0000BF                     Set_Addr_Window@ys:
  2141                           	opt stack 0
  2142  0000BF                     Set_Rotation@m:
  2143                           	opt stack 0
  2144  0000BF                     Port_GetPin@Output:
  2145                           	opt stack 0
  2146  0000BF                     Port_GetQuad@Output:
  2147                           	opt stack 0
  2148  0000BF                     Byte_SetZone@pValue:
  2149                           	opt stack 0
  2150  0000BF                     rx_assign@packetID:
  2151                           	opt stack 0
  2152  0000BF                     ___awdiv@sign:
  2153                           	opt stack 0
  2154  0000BF                     LCD_Word_Write@value:
  2155                           	opt stack 0
  2156  0000BF                     reverse@iterator:
  2157                           	opt stack 0
  2158  0000BF                     Motor_Move@pDelta:
  2159                           	opt stack 0
  2160  0000BF                     ___lwdiv@quotient:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x5
  2164  0000BF                     	ds	1
  2165  0000C0                     ?_irobot_query_and_update:
  2166                           	opt stack 0
  2167  0000C0                     ??_Byte_SetZone:
  2168  0000C0                     Set_Addr_Window@xe:
  2169                           	opt stack 0
  2170  0000C0                     Set_Rotation@rotation:
  2171                           	opt stack 0
  2172  0000C0                     Byte_GetZone@MASK:
  2173                           	opt stack 0
  2174  0000C0                     OutSeg@pInput:
  2175                           	opt stack 0
  2176  0000C0                     HMI_SetButton@pValue:
  2177                           	opt stack 0
  2178  0000C0                     ADC_Init@pChannel:
  2179                           	opt stack 0
  2180  0000C0                     MXK_BlockSwitchTo@CUR:
  2181                           	opt stack 0
  2182  0000C0                     MXK_SwitchTo@CUR:
  2183                           	opt stack 0
  2184  0000C0                     ___awdiv@quotient:
  2185                           	opt stack 0
  2186                           
  2187                           ; 2 bytes @ 0x6
  2188  0000C0                     	ds	1
  2189  0000C1                     ??_Console_MakeField:
  2190  0000C1                     ?___lwmod:
  2191                           	opt stack 0
  2192  0000C1                     Set_Addr_Window@ye:
  2193                           	opt stack 0
  2194  0000C1                     Byte_GetZone@Offset:
  2195                           	opt stack 0
  2196  0000C1                     OutSeg@out:
  2197                           	opt stack 0
  2198  0000C1                     HMI_SetButton@v:
  2199                           	opt stack 0
  2200  0000C1                     MXK_BlockSwitchTo@pModule:
  2201                           	opt stack 0
  2202  0000C1                     MXK_SwitchTo@pModule:
  2203                           	opt stack 0
  2204  0000C1                     ___lwmod@dividend:
  2205                           	opt stack 0
  2206                           
  2207                           ; 2 bytes @ 0x7
  2208  0000C1                     	ds	1
  2209  0000C2                     ??___fldiv:
  2210  0000C2                     ??_Console_Tab:
  2211  0000C2                     Set_Addr_Window@xs:
  2212                           	opt stack 0
  2213  0000C2                     Byte_GetZone@Output:
  2214                           	opt stack 0
  2215  0000C2                     ___xxtofl@sign:
  2216                           	opt stack 0
  2217  0000C2                     HMI_Render@a:
  2218                           	opt stack 0
  2219  0000C2                     ___lldiv@quotient:
  2220                           	opt stack 0
  2221                           
  2222                           ; 4 bytes @ 0x8
  2223  0000C2                     	ds	1
  2224  0000C3                     Byte_SetZone@Offset:
  2225                           	opt stack 0
  2226  0000C3                     ___xxtofl@exp:
  2227                           	opt stack 0
  2228  0000C3                     LCD_Fill@pColour:
  2229                           	opt stack 0
  2230  0000C3                     LCD_FillRectangle@pColour:
  2231                           	opt stack 0
  2232  0000C3                     Byte_GetPair@pInput:
  2233                           	opt stack 0
  2234  0000C3                     Console_MakeField@Index:
  2235                           	opt stack 0
  2236  0000C3                     ___lwmod@divisor:
  2237                           	opt stack 0
  2238                           
  2239                           ; 2 bytes @ 0x9
  2240  0000C3                     	ds	1
  2241  0000C4                     ??_load_iRScriptStack:
  2242  0000C4                     Byte_SetZone@MASK:
  2243                           	opt stack 0
  2244  0000C4                     ___xxtofl@arg:
  2245                           	opt stack 0
  2246                           
  2247                           ; 4 bytes @ 0xA
  2248  0000C4                     	ds	1
  2249  0000C5                     LCD_Fill@i:
  2250                           	opt stack 0
  2251  0000C5                     Byte_GetPair@pPair:
  2252                           	opt stack 0
  2253  0000C5                     Console_MakeField@pInput:
  2254                           	opt stack 0
  2255  0000C5                     ___lwmod@counter:
  2256                           	opt stack 0
  2257  0000C5                     Byte_SetPair@pInput:
  2258                           	opt stack 0
  2259  0000C5                     Byte_SetQuad@pInput:
  2260                           	opt stack 0
  2261  0000C5                     LCD_FillRectangle@pPoint:
  2262                           	opt stack 0
  2263                           
  2264                           ; 4 bytes @ 0xB
  2265  0000C5                     	ds	1
  2266  0000C6                     LCD_Fill@j:
  2267                           	opt stack 0
  2268  0000C6                     ___lldiv@counter:
  2269                           	opt stack 0
  2270  0000C6                     ___fldiv@sign:
  2271                           	opt stack 0
  2272  0000C6                     Word_GetPair@pInput:
  2273                           	opt stack 0
  2274  0000C6                     itos@input:
  2275                           	opt stack 0
  2276  0000C6                     Console_MakeField@Column:
  2277                           	opt stack 0
  2278  0000C6                     load_iRScriptStack@loadByte:
  2279                           	opt stack 0
  2280                           
  2281                           ; 2 bytes @ 0xC
  2282  0000C6                     	ds	1
  2283  0000C7                     Byte_SetPair@pPair:
  2284                           	opt stack 0
  2285  0000C7                     Byte_SetQuad@pQuad:
  2286                           	opt stack 0
  2287  0000C7                     Console_Tab@t:
  2288                           	opt stack 0
  2289  0000C7                     Timer0_Init@pFrequency:
  2290                           	opt stack 0
  2291  0000C7                     Timer2_Init@pFrequency:
  2292                           	opt stack 0
  2293  0000C7                     ___fldiv@rem:
  2294                           	opt stack 0
  2295                           
  2296                           ; 4 bytes @ 0xD
  2297  0000C7                     	ds	1
  2298  0000C8                     ?___flmul:
  2299                           	opt stack 0
  2300  0000C8                     Byte_SetPair@pValue:
  2301                           	opt stack 0
  2302  0000C8                     Byte_SetQuad@pValue:
  2303                           	opt stack 0
  2304  0000C8                     Word_GetPair@pPair:
  2305                           	opt stack 0
  2306  0000C8                     Console_Tab@i:
  2307                           	opt stack 0
  2308  0000C8                     load_iRScriptStack@bytesToLoad:
  2309                           	opt stack 0
  2310  0000C8                     itos@destination:
  2311                           	opt stack 0
  2312  0000C8                     _Console_MakeField$10974:
  2313                           	opt stack 0
  2314  0000C8                     ___flmul@b:
  2315                           	opt stack 0
  2316                           
  2317                           ; 4 bytes @ 0xE
  2318  0000C8                     	ds	1
  2319  0000C9                     Console_Tab@c:
  2320                           	opt stack 0
  2321  0000C9                     load_iRScriptStack@i:
  2322                           	opt stack 0
  2323  0000C9                     Port_SetPin@pInput:
  2324                           	opt stack 0
  2325  0000C9                     Port_Set@pInput:
  2326                           	opt stack 0
  2327  0000C9                     SPI_MinSpeed@pInput:
  2328                           	opt stack 0
  2329  0000C9                     SPI_MaxSpeed@pInput:
  2330                           	opt stack 0
  2331  0000C9                     Word_SetPair@pInput:
  2332                           	opt stack 0
  2333  0000C9                     PortProperty_Valid@pInput:
  2334                           	opt stack 0
  2335  0000C9                     LCD_FillRectangle@pSize:
  2336                           	opt stack 0
  2337                           
  2338                           ; 4 bytes @ 0xF
  2339  0000C9                     	ds	1
  2340  0000CA                     ??_irobot_query_and_update:
  2341  0000CA                     ??_Console_PrintChar:
  2342  0000CA                     Console_MakeField@x:
  2343                           	opt stack 0
  2344  0000CA                     irobot_leds@LEDBit:
  2345                           	opt stack 0
  2346  0000CA                     itos@Data:
  2347                           	opt stack 0
  2348  0000CA                     irobot_move@moveSpeed:
  2349                           	opt stack 0
  2350                           
  2351                           ; 2 bytes @ 0x10
  2352  0000CA                     	ds	1
  2353  0000CB                     ??_Timer2_Init:
  2354  0000CB                     ??_Timer0_Init:
  2355  0000CB                     Port_SetPin@pPin:
  2356                           	opt stack 0
  2357  0000CB                     Port_Set@pValue:
  2358                           	opt stack 0
  2359  0000CB                     Word_SetPair@pPair:
  2360                           	opt stack 0
  2361  0000CB                     PortProperty_Valid@pPinDrive:
  2362                           	opt stack 0
  2363  0000CB                     Console_MakeField@y:
  2364                           	opt stack 0
  2365  0000CB                     irobot_leds@powerColour:
  2366                           	opt stack 0
  2367  0000CB                     ___fldiv@new_exp:
  2368                           	opt stack 0
  2369                           
  2370                           ; 2 bytes @ 0x11
  2371  0000CB                     	ds	1
  2372  0000CC                     ??_Port_Set:
  2373  0000CC                     Port_SetPin@pValue:
  2374                           	opt stack 0
  2375  0000CC                     Word_SetPair@pValue:
  2376                           	opt stack 0
  2377  0000CC                     PortProperty_Valid@pPin:
  2378                           	opt stack 0
  2379  0000CC                     irobot_leds@powerLuminosity:
  2380                           	opt stack 0
  2381  0000CC                     LCD_DrawField@pField:
  2382                           	opt stack 0
  2383  0000CC                     itos@Length:
  2384                           	opt stack 0
  2385  0000CC                     irobot_move@moveTurnRadius:
  2386                           	opt stack 0
  2387  0000CC                     Timer2_Init@RDIV:
  2388                           	opt stack 0
  2389  0000CC                     ___flmul@a:
  2390                           	opt stack 0
  2391                           
  2392                           ; 4 bytes @ 0x12
  2393  0000CC                     	ds	1
  2394  0000CD                     ??_PortProperty_Valid:
  2395  0000CD                     ??_LCD_FillRectangle:
  2396  0000CD                     Port_SetPin@Type:
  2397                           	opt stack 0
  2398  0000CD                     Console_PrintChar@pInput:
  2399                           	opt stack 0
  2400  0000CD                     irobot_leds@isScript:
  2401                           	opt stack 0
  2402  0000CD                     Timer0_Init@pCPUClock:
  2403                           	opt stack 0
  2404  0000CD                     ___fldiv@grs:
  2405                           	opt stack 0
  2406                           
  2407                           ; 4 bytes @ 0x13
  2408  0000CD                     	ds	1
  2409  0000CE                     ??_irobot_move:
  2410  0000CE                     LED_Set@pValue:
  2411                           	opt stack 0
  2412  0000CE                     putch@c:
  2413                           	opt stack 0
  2414  0000CE                     irobot_led_power_on@powerOnColour:
  2415                           	opt stack 0
  2416  0000CE                     Port_TogglePin@pInput:
  2417                           	opt stack 0
  2418  0000CE                     itos@Out:
  2419                           	opt stack 0
  2420  0000CE                     LCD_DrawField@pPoint:
  2421                           	opt stack 0
  2422                           
  2423                           ; 4 bytes @ 0x14
  2424  0000CE                     	ds	1
  2425  0000CF                     ?_printf:
  2426                           	opt stack 0
  2427  0000CF                     LCD_FillRectangle@i:
  2428                           	opt stack 0
  2429  0000CF                     LED_Set@pLED:
  2430                           	opt stack 0
  2431  0000CF                     irobot_query_and_update@packetIDs:
  2432                           	opt stack 0
  2433  0000CF                     printf@f:
  2434                           	opt stack 0
  2435  0000CF                     PortProperty_Valid@Errors:
  2436                           	opt stack 0
  2437                           
  2438                           ; 16 bytes @ 0x15
  2439  0000CF                     	ds	1
  2440  0000D0                     ??___flmul:
  2441  0000D0                     LCD_FillRectangle@j:
  2442                           	opt stack 0
  2443  0000D0                     Port_TogglePin@pPin:
  2444                           	opt stack 0
  2445  0000D0                     HMI_SetNumber@pInput:
  2446                           	opt stack 0
  2447  0000D0                     Timer2_Init@pCPUClock:
  2448                           	opt stack 0
  2449                           
  2450                           ; 4 bytes @ 0x16
  2451  0000D0                     	ds	1
  2452  0000D1                     Port_TogglePin@Value:
  2453                           	opt stack 0
  2454  0000D1                     irobot_query_and_update@streamSize:
  2455                           	opt stack 0
  2456  0000D1                     ___fldiv@bexp:
  2457                           	opt stack 0
  2458  0000D1                     Timer0_Init@DIVIDE:
  2459                           	opt stack 0
  2460                           
  2461                           ; 4 bytes @ 0x17
  2462  0000D1                     	ds	1
  2463  0000D2                     LED_Toggle@pLED:
  2464                           	opt stack 0
  2465  0000D2                     irobot_query_and_update@numberOfPacketRequests:
  2466                           	opt stack 0
  2467  0000D2                     irobot_move@isScript:
  2468                           	opt stack 0
  2469  0000D2                     ___fldiv@aexp:
  2470                           	opt stack 0
  2471  0000D2                     LCD_DrawField@pSize:
  2472                           	opt stack 0
  2473                           
  2474                           ; 4 bytes @ 0x18
  2475  0000D2                     	ds	1
  2476  0000D3                     Event_DIPSwitch@pState:
  2477                           	opt stack 0
  2478  0000D3                     Event_TestButton@pState:
  2479                           	opt stack 0
  2480  0000D3                     irobot_query_and_update@packetVariable:
  2481                           	opt stack 0
  2482  0000D3                     irobot_stop_motion@isScript:
  2483                           	opt stack 0
  2484  0000D3                     irobot_move_straight@straightSpeed:
  2485                           	opt stack 0
  2486                           
  2487                           ; 2 bytes @ 0x19
  2488  0000D3                     	ds	1
  2489  0000D4                     Event_DIPSwitch@Bar:
  2490                           	opt stack 0
  2491  0000D4                     irobot_query_and_update@j:
  2492                           	opt stack 0
  2493  0000D4                     ___flmul@sign:
  2494                           	opt stack 0
  2495  0000D4                     Timer2_Init@DIVIDE:
  2496                           	opt stack 0
  2497                           
  2498                           ; 4 bytes @ 0x1A
  2499  0000D4                     	ds	1
  2500  0000D5                     irobot_query_and_update@startIndex:
  2501                           	opt stack 0
  2502  0000D5                     ___flmul@aexp:
  2503                           	opt stack 0
  2504  0000D5                     Button_Poll@pButton:
  2505                           	opt stack 0
  2506  0000D5                     Motor_Speed@pMotor:
  2507                           	opt stack 0
  2508                           
  2509                           ; 2 bytes @ 0x1B
  2510  0000D5                     	ds	1
  2511  0000D6                     ??_LCD_DrawField:
  2512  0000D6                     irobot_query_and_update@i:
  2513                           	opt stack 0
  2514  0000D6                     ___flmul@grs:
  2515                           	opt stack 0
  2516                           
  2517                           ; 4 bytes @ 0x1C
  2518  0000D6                     	ds	1
  2519  0000D7                     Button_Poll@pIncrement:
  2520                           	opt stack 0
  2521  0000D7                     Motor_Speed@pFrequency:
  2522                           	opt stack 0
  2523  0000D7                     irobot_rotate@rotateAngle:
  2524                           	opt stack 0
  2525                           
  2526                           ; 2 bytes @ 0x1D
  2527  0000D7                     	ds	1
  2528  0000D8                     ??_Button_Poll:
  2529  0000D8                     LCD_DrawField@count:
  2530                           	opt stack 0
  2531                           
  2532                           ; 2 bytes @ 0x1E
  2533  0000D8                     	ds	1
  2534  0000D9                     irobot_rotate@rotateSpeed:
  2535                           	opt stack 0
  2536                           
  2537                           ; 2 bytes @ 0x1F
  2538  0000D9                     	ds	1
  2539  0000DA                     LCD_DrawField@xmax:
  2540                           	opt stack 0
  2541  0000DA                     ___flmul@bexp:
  2542                           	opt stack 0
  2543                           
  2544                           ; 1 bytes @ 0x20
  2545  0000DA                     	ds	1
  2546  0000DB                     ??_printf:
  2547  0000DB                     ??_irobot_rotate:
  2548  0000DB                     LCD_DrawField@ymax:
  2549                           	opt stack 0
  2550  0000DB                     ___flmul@prod:
  2551                           	opt stack 0
  2552                           
  2553                           ; 4 bytes @ 0x21
  2554  0000DB                     	ds	1
  2555  0000DC                     LCD_DrawField@i:
  2556                           	opt stack 0
  2557  0000DC                     irobot_rotate@isScript:
  2558                           	opt stack 0
  2559  0000DC                     printf@prec:
  2560                           	opt stack 0
  2561  0000DC                     Port_Set@TypeRequired:
  2562                           	opt stack 0
  2563                           
  2564                           ; 2 bytes @ 0x22
  2565  0000DC                     	ds	1
  2566  0000DD                     ??_Console_Render:
  2567  0000DD                     Button_Poll@Pin:
  2568                           	opt stack 0
  2569  0000DD                     printf@flag:
  2570                           	opt stack 0
  2571  0000DD                     irobot_rotate@angleTotal:
  2572                           	opt stack 0
  2573                           
  2574                           ; 2 bytes @ 0x23
  2575  0000DD                     	ds	1
  2576  0000DE                     Port_Set@TypeActual:
  2577                           	opt stack 0
  2578  0000DE                     printf@ap:
  2579                           	opt stack 0
  2580                           
  2581                           ; 2 bytes @ 0x24
  2582  0000DE                     	ds	1
  2583  0000DF                     PortProperty_Valid@Pair:
  2584                           	opt stack 0
  2585  0000DF                     Console_Render@temp:
  2586                           	opt stack 0
  2587  0000DF                     irobot_rotate@rotateDirection:
  2588                           	opt stack 0
  2589  0000DF                     ___flmul@temp:
  2590                           	opt stack 0
  2591                           
  2592                           ; 2 bytes @ 0x25
  2593  0000DF                     	ds	1
  2594  0000E0                     Port_Set@Type:
  2595                           	opt stack 0
  2596  0000E0                     Port_CheckPairType@pInput:
  2597                           	opt stack 0
  2598  0000E0                     Port_SetPinType@pInput:
  2599                           	opt stack 0
  2600  0000E0                     printf@val:
  2601                           	opt stack 0
  2602  0000E0                     Console_Render@lCursor:
  2603                           	opt stack 0
  2604                           
  2605                           ; 4 bytes @ 0x26
  2606  0000E0                     	ds	1
  2607  0000E1                     ?_ADC_Voltage:
  2608                           	opt stack 0
  2609  0000E1                     ADC_Voltage@pInput:
  2610                           	opt stack 0
  2611                           
  2612                           ; 2 bytes @ 0x27
  2613  0000E1                     	ds	1
  2614  0000E2                     Port_CheckPairType@pPair:
  2615                           	opt stack 0
  2616  0000E2                     Port_SetPinType@pPin:
  2617                           	opt stack 0
  2618  0000E2                     printf@c:
  2619                           	opt stack 0
  2620                           
  2621                           ; 1 bytes @ 0x28
  2622  0000E2                     	ds	1
  2623  0000E3                     Port_CheckPairType@pDrive:
  2624                           	opt stack 0
  2625  0000E3                     Port_SetPinType@pType:
  2626                           	opt stack 0
  2627                           
  2628                           ; 1 bytes @ 0x29
  2629  0000E3                     	ds	1
  2630  0000E4                     Port_CheckPairType@Pin1:
  2631                           	opt stack 0
  2632  0000E4                     Port_SetPinType@Output:
  2633                           	opt stack 0
  2634  0000E4                     Console_Render@x:
  2635                           	opt stack 0
  2636                           
  2637                           ; 1 bytes @ 0x2A
  2638  0000E4                     	ds	1
  2639  0000E5                     ??_ADC_Voltage:
  2640  0000E5                     Port_CheckPairType@Pin2:
  2641                           	opt stack 0
  2642  0000E5                     Console_Render@y:
  2643                           	opt stack 0
  2644  0000E5                     Port_SetPinType@Props:
  2645                           	opt stack 0
  2646                           
  2647                           ; 2 bytes @ 0x2B
  2648  0000E5                     	ds	1
  2649  0000E6                     Port_CheckPairType@Output:
  2650                           	opt stack 0
  2651  0000E6                     mode2@dist:
  2652                           	opt stack 0
  2653                           
  2654                           ; 2 bytes @ 0x2C
  2655  0000E6                     	ds	1
  2656  0000E7                     LED_Init@pLED:
  2657                           	opt stack 0
  2658  0000E7                     Port_CheckPairType@Props:
  2659                           	opt stack 0
  2660  0000E7                     Motor_Init@pMotor:
  2661                           	opt stack 0
  2662  0000E7                     SPI_Init@pClock:
  2663                           	opt stack 0
  2664  0000E7                     ADC_Voltage@max:
  2665                           	opt stack 0
  2666                           
  2667                           ; 4 bytes @ 0x2D
  2668  0000E7                     	ds	2
  2669  0000E9                     Port_CheckQuadType@pInput:
  2670                           	opt stack 0
  2671  0000E9                     Motor_Init@pAddress:
  2672                           	opt stack 0
  2673                           
  2674                           ; 2 bytes @ 0x2F
  2675  0000E9                     	ds	2
  2676  0000EB                     Port_CheckQuadType@pQuad:
  2677                           	opt stack 0
  2678  0000EB                     SPI_Init@pChannel:
  2679                           	opt stack 0
  2680  0000EB                     ADC_Voltage@ref:
  2681                           	opt stack 0
  2682                           
  2683                           ; 4 bytes @ 0x31
  2684  0000EB                     	ds	1
  2685  0000EC                     Port_CheckQuadType@pDrive:
  2686                           	opt stack 0
  2687  0000EC                     SPI_Init@pMode:
  2688                           	opt stack 0
  2689                           
  2690                           ; 1 bytes @ 0x32
  2691  0000EC                     	ds	1
  2692  0000ED                     Port_CheckQuadType@Pair1:
  2693                           	opt stack 0
  2694  0000ED                     SPI_Init@pInput:
  2695                           	opt stack 0
  2696                           
  2697                           ; 2 bytes @ 0x33
  2698  0000ED                     	ds	1
  2699  0000EE                     Port_CheckQuadType@Pair2:
  2700                           	opt stack 0
  2701                           
  2702                           ; 1 bytes @ 0x34
  2703  0000EE                     	ds	1
  2704  0000EF                     ??_LCD_Init:
  2705  0000EF                     Port_CheckQuadType@Output:
  2706                           	opt stack 0
  2707  0000EF                     ADC_Voltage@output:
  2708                           	opt stack 0
  2709                           
  2710                           ; 4 bytes @ 0x35
  2711  0000EF                     	ds	1
  2712  0000F0                     Port_CheckPortType@pInput:
  2713                           	opt stack 0
  2714  0000F0                     Port_SetQuadType@pInput:
  2715                           	opt stack 0
  2716                           
  2717                           ; 2 bytes @ 0x36
  2718  0000F0                     	ds	1
  2719  0000F1                     LCD_Init@i:
  2720                           	opt stack 0
  2721                           
  2722                           ; 2 bytes @ 0x37
  2723  0000F1                     	ds	1
  2724  0000F2                     Port_CheckPortType@pDrive:
  2725                           	opt stack 0
  2726  0000F2                     Port_SetQuadType@pQuad:
  2727                           	opt stack 0
  2728                           
  2729                           ; 1 bytes @ 0x38
  2730  0000F2                     	ds	1
  2731  0000F3                     ?___fltol:
  2732                           	opt stack 0
  2733  0000F3                     Port_CheckPortType@Output:
  2734                           	opt stack 0
  2735  0000F3                     Port_SetQuadType@pType:
  2736                           	opt stack 0
  2737  0000F3                     ___fltol@f1:
  2738                           	opt stack 0
  2739                           
  2740                           ; 4 bytes @ 0x39
  2741  0000F3                     	ds	1
  2742  0000F4                     Port_SetQuadType@Output:
  2743                           	opt stack 0
  2744  0000F4                     Port_SetType@pInput:
  2745                           	opt stack 0
  2746                           
  2747                           ; 2 bytes @ 0x3A
  2748  0000F4                     	ds	1
  2749  0000F5                     HMI_Init@in:
  2750                           	opt stack 0
  2751                           
  2752                           ; 2 bytes @ 0x3B
  2753  0000F5                     	ds	1
  2754  0000F6                     Port_SetType@pType:
  2755                           	opt stack 0
  2756                           
  2757                           ; 1 bytes @ 0x3C
  2758  0000F6                     	ds	1
  2759  0000F7                     ??_Port_SetType:
  2760  0000F7                     ___fltol@sign1:
  2761                           	opt stack 0
  2762                           
  2763                           ; 1 bytes @ 0x3D
  2764  0000F7                     	ds	1
  2765  0000F8                     ___fltol@exp1:
  2766                           	opt stack 0
  2767                           
  2768                           ; 1 bytes @ 0x3E
  2769  0000F8                     	ds	1
  2770  0000F9                     tblptru	equ	0xFF8
  2771                           tblptrh	equ	0xFF7
  2772                           tblptrl	equ	0xFF6
  2773                           tablat	equ	0xFF5
  2774                           postinc0	equ	0xFEE
  2775                           wreg	equ	0xFE8
  2776                           postdec1	equ	0xFE5
  2777                           fsr1h	equ	0xFE2
  2778                           fsr1l	equ	0xFE1
  2779                           
  2780                           ; 1 bytes @ 0x3F
  2781                           
  2782                           	psect	cstackCOMRAM
  2783  000001                     __pcstackCOMRAM:
  2784                           	opt stack 0
  2785  000001                     i2Byte_SetBit@pInput:
  2786                           	opt stack 0
  2787  000001                     i2Byte_GetZone@pInput:
  2788                           	opt stack 0
  2789  000001                     i2delay_us@us:
  2790                           	opt stack 0
  2791  000001                     i2MXK_Queue@pCallback:
  2792                           	opt stack 0
  2793                           
  2794                           ; 3 bytes @ 0x0
  2795  000001                     	ds	2
  2796  000003                     i2Byte_SetBit@pBit:
  2797                           	opt stack 0
  2798  000003                     i2Byte_GetZone@pMax:
  2799                           	opt stack 0
  2800  000003                     i2delay_us@u:
  2801                           	opt stack 0
  2802                           
  2803                           ; 4 bytes @ 0x2
  2804  000003                     	ds	1
  2805  000004                     i2Byte_SetBit@pValue:
  2806                           	opt stack 0
  2807  000004                     i2Byte_GetZone@pChunk:
  2808                           	opt stack 0
  2809                           
  2810                           ; 1 bytes @ 0x3
  2811  000004                     	ds	1
  2812  000005                     ??i2_Byte_SetBit:
  2813  000005                     i2Byte_GetZone@pChunkSize:
  2814                           	opt stack 0
  2815                           
  2816                           ; 1 bytes @ 0x4
  2817  000005                     	ds	1
  2818  000006                     ??i2_Byte_GetZone:
  2819                           
  2820                           ; 1 bytes @ 0x5
  2821  000006                     	ds	1
  2822  000007                     i2Byte_GetZone@MASK:
  2823                           	opt stack 0
  2824  000007                     i2MXK_SwitchTo@CUR:
  2825                           	opt stack 0
  2826                           
  2827                           ; 1 bytes @ 0x6
  2828  000007                     	ds	1
  2829  000008                     i2Byte_GetZone@Offset:
  2830                           	opt stack 0
  2831  000008                     i2MXK_SwitchTo@pModule:
  2832                           	opt stack 0
  2833                           
  2834                           ; 1 bytes @ 0x7
  2835  000008                     	ds	1
  2836  000009                     i2Byte_GetZone@Output:
  2837                           	opt stack 0
  2838                           
  2839                           ; 1 bytes @ 0x8
  2840  000009                     	ds	1
  2841  00000A                     i2Byte_GetPair@pInput:
  2842                           	opt stack 0
  2843                           
  2844                           ; 2 bytes @ 0x9
  2845  00000A                     	ds	2
  2846  00000C                     i2Byte_GetPair@pPair:
  2847                           	opt stack 0
  2848                           
  2849                           ; 1 bytes @ 0xB
  2850  00000C                     	ds	1
  2851  00000D                     i2Word_GetPair@pInput:
  2852                           	opt stack 0
  2853                           
  2854                           ; 2 bytes @ 0xC
  2855  00000D                     	ds	2
  2856  00000F                     i2Word_GetPair@pPair:
  2857                           	opt stack 0
  2858                           
  2859                           ; 1 bytes @ 0xE
  2860  00000F                     	ds	1
  2861  000010                     i2Port_SetPin@pInput:
  2862                           	opt stack 0
  2863                           
  2864                           ; 2 bytes @ 0xF
  2865  000010                     	ds	2
  2866  000012                     i2Port_SetPin@pPin:
  2867                           	opt stack 0
  2868                           
  2869                           ; 1 bytes @ 0x11
  2870  000012                     	ds	1
  2871  000013                     i2Port_SetPin@pValue:
  2872                           	opt stack 0
  2873                           
  2874                           ; 1 bytes @ 0x12
  2875  000013                     	ds	1
  2876  000014                     i2Port_SetPin@Type:
  2877                           	opt stack 0
  2878                           
  2879                           ; 1 bytes @ 0x13
  2880  000014                     	ds	1
  2881  000015                     
  2882                           ; 1 bytes @ 0x14
  2883  000015                     	ds	2
  2884  000017                     ??_ISR_Function:
  2885                           
  2886                           ; 1 bytes @ 0x16
  2887  000017                     	ds	18
  2888                           tblptru	equ	0xFF8
  2889                           tblptrh	equ	0xFF7
  2890                           tblptrl	equ	0xFF6
  2891                           tablat	equ	0xFF5
  2892                           postinc0	equ	0xFEE
  2893                           wreg	equ	0xFE8
  2894                           postdec1	equ	0xFE5
  2895                           fsr1h	equ	0xFE2
  2896                           fsr1l	equ	0xFE1
  2897                           
  2898 ;;
  2899 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  2900 ;;
  2901 ;; *************** function _main *****************
  2902 ;; Defined at:
  2903 ;;		line 344 in file "main.c"
  2904 ;; Parameters:    Size  Location     Type
  2905 ;;		None
  2906 ;; Auto vars:     Size  Location     Type
  2907 ;;		None
  2908 ;; Return value:  Size  Location     Type
  2909 ;;                  1    wreg      void 
  2910 ;; Registers used:
  2911 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2912 ;; Tracked objects:
  2913 ;;		On entry : 0/0
  2914 ;;		On exit  : 0/0
  2915 ;;		Unchanged: 0/0
  2916 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2917 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2918 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2919 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2920 ;;      Totals:         0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2921 ;;Total ram usage:        2 bytes
  2922 ;; Hardware stack levels required when called:   18
  2923 ;; This function calls:
  2924 ;;		_Console_Render
  2925 ;;		_HMI_Poll
  2926 ;;		_MXK_Dequeue
  2927 ;;		_MXK_Release
  2928 ;;		_MXK_SwitchTo
  2929 ;;		_getMode
  2930 ;;		_init
  2931 ;;		_mode1
  2932 ;;		_mode2
  2933 ;;		_mode3
  2934 ;;		_mode4
  2935 ;;		_printf
  2936 ;; This function is called by:
  2937 ;;		Startup code after reset
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940                           
  2941                           	psect	text0
  2942  013A14                     __ptext0:
  2943                           	opt stack 0
  2944  013A14                     _main:
  2945                           	opt stack 13
  2946                           
  2947                           ;main.c: 345: init();
  2948                           
  2949                           ;incstack = 0
  2950  013A14  ECD5  F0A3         	call	_init	;wreg free
  2951  013A18                     l2400:
  2952                           
  2953                           ;main.c: 347: getMode();
  2954  013A18  EC52  F0A0         	call	_getMode	;wreg free
  2955                           
  2956                           ;main.c: 348: switch (mode) {
  2957  013A1C  D053               	goto	l2401
  2958  013A1E                     
  2959                           ;main.c: 350: mode1();
  2960  013A1E  EC62  F084         	call	_mode1	;wreg free
  2961                           
  2962                           ;main.c: 351: break;
  2963  013A22  D7FA               	goto	l2400
  2964  013A24                     
  2965                           ;main.c: 353: mode2();
  2966  013A24  EC97  F09C         	call	_mode2	;wreg free
  2967                           
  2968                           ;main.c: 354: break;
  2969  013A28  D7F7               	goto	l2400
  2970  013A2A                     
  2971                           ;main.c: 356: mode3();
  2972  013A2A  ECE2  F0B2         	call	_mode3	;wreg free
  2973                           
  2974                           ;main.c: 357: break;
  2975  013A2E  D7F4               	goto	l2400
  2976  013A30                     
  2977                           ;main.c: 359: mode4();
  2978  013A30  EC93  F09A         	call	_mode4	;wreg free
  2979                           
  2980                           ;main.c: 360: break;
  2981  013A34  D7F1               	goto	l2400
  2982  013A36                     
  2983                           ;main.c: 362: if (MXK_SwitchTo(eMXK_HMI)) {
  2984  013A36  0E01               	movlw	1
  2985  013A38  EC2B  F0AF         	call	_MXK_SwitchTo
  2986  013A3C  0900               	iorlw	0
  2987  013A3E  B4D8               	btfsc	status,2,c
  2988  013A40  D7EB               	goto	l2400
  2989                           
  2990                           ;main.c: 363: printf("%c", (char)35);
  2991  013A42  0EFB               	movlw	low STR_1
  2992  013A44  0100               	movlb	0	; () banked
  2993  013A46  6FCF               	movwf	printf@f& (0+255),b
  2994  013A48  0EFF               	movlw	high STR_1
  2995  013A4A  0100               	movlb	0	; () banked
  2996  013A4C  6FD0               	movwf	(printf@f+1)& (0+255),b
  2997  013A4E  0E00               	movlw	0
  2998  013A50  0100               	movlb	0	; () banked
  2999  013A52  6FD2               	movwf	(?_printf+3)& (0+255),b
  3000  013A54  0E23               	movlw	35
  3001  013A56  6FD1               	movwf	(?_printf+2)& (0+255),b
  3002  013A58  EC58  F092         	call	_printf	;wreg free
  3003                           
  3004                           ;main.c: 364: printf("Please select mode.\n");
  3005  013A5C  0ED8               	movlw	low STR_12
  3006  013A5E  0100               	movlb	0	; () banked
  3007  013A60  6FCF               	movwf	printf@f& (0+255),b
  3008  013A62  0EFF               	movlw	high STR_12
  3009  013A64  0100               	movlb	0	; () banked
  3010  013A66  6FD0               	movwf	(printf@f+1)& (0+255),b
  3011  013A68  EC58  F092         	call	_printf	;wreg free
  3012                           
  3013                           ;main.c: 365: printf("                   \n");
  3014  013A6C  0EC3               	movlw	low STR_13
  3015  013A6E  0100               	movlb	0	; () banked
  3016  013A70  6FCF               	movwf	printf@f& (0+255),b
  3017  013A72  0EFF               	movlw	high STR_13
  3018  013A74  0100               	movlb	0	; () banked
  3019  013A76  6FD0               	movwf	(printf@f+1)& (0+255),b
  3020  013A78  EC58  F092         	call	_printf	;wreg free
  3021                           
  3022                           ;main.c: 366: printf("                   \n");
  3023  013A7C  0EC3               	movlw	low STR_13
  3024  013A7E  0100               	movlb	0	; () banked
  3025  013A80  6FCF               	movwf	printf@f& (0+255),b
  3026  013A82  0EFF               	movlw	high STR_13
  3027  013A84  0100               	movlb	0	; () banked
  3028  013A86  6FD0               	movwf	(printf@f+1)& (0+255),b
  3029  013A88  EC58  F092         	call	_printf	;wreg free
  3030                           
  3031                           ;main.c: 367: printf("                   \n");
  3032  013A8C  0EC3               	movlw	low STR_13
  3033  013A8E  0100               	movlb	0	; () banked
  3034  013A90  6FCF               	movwf	printf@f& (0+255),b
  3035  013A92  0EFF               	movlw	high STR_13
  3036  013A94  0100               	movlb	0	; () banked
  3037  013A96  6FD0               	movwf	(printf@f+1)& (0+255),b
  3038  013A98  EC58  F092         	call	_printf	;wreg free
  3039                           
  3040                           ;main.c: 368: printf("                   \n");
  3041  013A9C  0EC3               	movlw	low STR_13
  3042  013A9E  0100               	movlb	0	; () banked
  3043  013AA0  6FCF               	movwf	printf@f& (0+255),b
  3044  013AA2  0EFF               	movlw	high STR_13
  3045  013AA4  0100               	movlb	0	; () banked
  3046  013AA6  6FD0               	movwf	(printf@f+1)& (0+255),b
  3047  013AA8  EC58  F092         	call	_printf	;wreg free
  3048                           
  3049                           ;main.c: 369: Console_Render();
  3050  013AAC  EC6C  F08F         	call	_Console_Render	;wreg free
  3051                           
  3052                           ;main.c: 370: HMI_Poll();
  3053  013AB0  EC21  F0AA         	call	_HMI_Poll	;wreg free
  3054                           
  3055                           ;main.c: 371: if (MXK_Release())
  3056  013AB4  EC59  F0B2         	call	_MXK_Release	;wreg free
  3057  013AB8  0900               	iorlw	0
  3058  013ABA  B4D8               	btfsc	status,2,c
  3059  013ABC  D7AD               	goto	l2400
  3060                           
  3061                           ;main.c: 372: MXK_Dequeue();
  3062  013ABE  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3063                           
  3064                           ;main.c: 373: }
  3065                           ;main.c: 374: }
  3066  013AC2  D7AA               	goto	l2400
  3067  013AC4                     l2401:
  3068  013AC4  C33C  F3FE         	movff	_mode,??_main
  3069  013AC8  C33D  F3FF         	movff	_mode+1,??_main+1
  3070                           
  3071                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3072                           ; Switch size 1, requested type "space"
  3073                           ; Number of cases is 1, Range of values is 0 to 0
  3074                           ; switch strategies available:
  3075                           ; Name         Instructions Cycles
  3076                           ; simple_byte            4     3 (average)
  3077                           ;	Chosen strategy is simple_byte
  3078  013ACC  0103               	movlb	3	; () banked
  3079  013ACE  51FF               	movf	(??_main+1)& (0+255),w,b
  3080  013AD0  0A00               	xorlw	0	; case 0
  3081  013AD2  A4D8               	btfss	status,2,c
  3082  013AD4  D7B0               	goto	l2407
  3083                           
  3084                           ; BSR set to: 3
  3085                           ; Switch size 1, requested type "space"
  3086                           ; Number of cases is 4, Range of values is 1 to 4
  3087                           ; switch strategies available:
  3088                           ; Name         Instructions Cycles
  3089                           ; simple_byte           13     7 (average)
  3090                           ;	Chosen strategy is simple_byte
  3091  013AD6  0103               	movlb	3	; () banked
  3092  013AD8  51FE               	movf	??_main& (0+255),w,b
  3093  013ADA  0A01               	xorlw	1	; case 1
  3094  013ADC  B4D8               	btfsc	status,2,c
  3095  013ADE  D79F               	goto	l2402
  3096  013AE0  0A03               	xorlw	3	; case 2
  3097  013AE2  B4D8               	btfsc	status,2,c
  3098  013AE4  D79F               	goto	l2404
  3099  013AE6  0A01               	xorlw	1	; case 3
  3100  013AE8  B4D8               	btfsc	status,2,c
  3101  013AEA  D79F               	goto	l2405
  3102  013AEC  0A07               	xorlw	7	; case 4
  3103  013AEE  B4D8               	btfsc	status,2,c
  3104  013AF0  D79F               	goto	l2406
  3105  013AF2  D7A1               	goto	l2407
  3106  013AF4                     __end_of_main:
  3107                           	opt stack 0
  3108                           tblptru	equ	0xFF8
  3109                           tblptrh	equ	0xFF7
  3110                           tblptrl	equ	0xFF6
  3111                           tablat	equ	0xFF5
  3112                           postinc0	equ	0xFEE
  3113                           wreg	equ	0xFE8
  3114                           postdec1	equ	0xFE5
  3115                           fsr1h	equ	0xFE2
  3116                           fsr1l	equ	0xFE1
  3117                           status	equ	0xFD8
  3118                           
  3119 ;; *************** function _mode4 *****************
  3120 ;; Defined at:
  3121 ;;		line 318 in file "main.c"
  3122 ;; Parameters:    Size  Location     Type
  3123 ;;		None
  3124 ;; Auto vars:     Size  Location     Type
  3125 ;;		None
  3126 ;; Return value:  Size  Location     Type
  3127 ;;                  1    wreg      void 
  3128 ;; Registers used:
  3129 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3130 ;; Tracked objects:
  3131 ;;		On entry : 0/0
  3132 ;;		On exit  : 0/0
  3133 ;;		Unchanged: 0/0
  3134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;Total ram usage:        0 bytes
  3140 ;; Hardware stack levels used:    1
  3141 ;; Hardware stack levels required when called:   17
  3142 ;; This function calls:
  3143 ;;		_Console_Render
  3144 ;;		_MXK_Dequeue
  3145 ;;		_MXK_Release
  3146 ;;		_MXK_SwitchTo
  3147 ;;		_delay_ms
  3148 ;;		_findClosestWall
  3149 ;;		_irobot_move_straight
  3150 ;;		_irobot_song_play
  3151 ;;		_irobot_stop_motion
  3152 ;;		_printf
  3153 ;;		_safeToGo
  3154 ;;		_update_bump_and_cliff
  3155 ;;		_update_distance
  3156 ;; This function is called by:
  3157 ;;		_main
  3158 ;; This function uses a non-reentrant model
  3159 ;;
  3160                           
  3161                           	psect	text1
  3162  013526                     __ptext1:
  3163                           	opt stack 0
  3164  013526                     _mode4:
  3165                           	opt stack 13
  3166                           
  3167                           ;main.c: 319: safeToGo();
  3168                           
  3169                           ; BSR set to: 3
  3170                           ;incstack = 0
  3171  013526  ECEA  F0AD         	call	_safeToGo	;wreg free
  3172                           
  3173                           ;main.c: 320: findClosestWall();
  3174  01352A  EC4C  F086         	call	_findClosestWall	;wreg free
  3175                           
  3176                           ;main.c: 321: delay_ms(100);
  3177  01352E  0E00               	movlw	0
  3178  013530  0100               	movlb	0	; () banked
  3179  013532  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  3180  013534  0E64               	movlw	100
  3181  013536  6FBA               	movwf	delay_ms@ms& (0+255),b
  3182  013538  EC34  F0AB         	call	_delay_ms	;wreg free
  3183                           
  3184                           ;main.c: 322: irobot_move_straight(200);
  3185  01353C  0E00               	movlw	0
  3186  01353E  0100               	movlb	0	; () banked
  3187  013540  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  3188  013542  0EC8               	movlw	200
  3189  013544  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  3190  013546  EC82  F0B2         	call	_irobot_move_straight	;wreg free
  3191                           
  3192                           ;main.c: 323: dist = 0;
  3193  01354A  0E00               	movlw	0
  3194  01354C  0100               	movlb	0	; () banked
  3195  01354E  6F6A               	movwf	(_dist+1)& (0+255),b
  3196  013550  0E00               	movlw	0
  3197  013552  6F69               	movwf	_dist& (0+255),b
  3198                           
  3199                           ;main.c: 324: while (dist < 300 && !iRBumpLeft && !iRBumpRight && !iRDropRight && !iRDro
      +                          pLeft) {
  3200  013554  D00C               	goto	l2388
  3201  013556                     
  3202                           ; BSR set to: 0
  3203                           ;main.c: 325: update_distance();
  3204                           
  3205                           ; BSR set to: 0
  3206  013556  EC01  F0B3         	call	_update_distance	;wreg free
  3207                           
  3208                           ;main.c: 326: dist += iRDistance;
  3209  01355A  0100               	movlb	0	; () banked
  3210  01355C  5179               	movf	_iRDistance& (0+255),w,b
  3211  01355E  0100               	movlb	0	; () banked
  3212  013560  2769               	addwf	_dist& (0+255),f,b
  3213  013562  0100               	movlb	0	; () banked
  3214  013564  517A               	movf	(_iRDistance+1)& (0+255),w,b
  3215  013566  0100               	movlb	0	; () banked
  3216  013568  236A               	addwfc	(_dist+1)& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;main.c: 327: update_bump_and_cliff();
  3220  01356A  EC26  F0B0         	call	_update_bump_and_cliff	;wreg free
  3221  01356E                     l2388:
  3222  01356E  0100               	movlb	0	; () banked
  3223  013570  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  3224  013572  D008               	goto	u13790
  3225  013574  0E2C               	movlw	44
  3226  013576  0100               	movlb	0	; () banked
  3227  013578  5D69               	subwf	_dist& (0+255),w,b
  3228  01357A  0E01               	movlw	1
  3229  01357C  0100               	movlb	0	; () banked
  3230  01357E  596A               	subwfb	(_dist+1)& (0+255),w,b
  3231  013580  B0D8               	btfsc	status,0,c
  3232  013582  D010               	goto	u13830
  3233  013584                     u13790:
  3234                           
  3235                           ; BSR set to: 0
  3236  013584  0100               	movlb	0	; () banked
  3237  013586  5187               	movf	_iRBumpLeft& (0+255),w,b
  3238  013588  A4D8               	btfss	status,2,c
  3239  01358A  D00C               	goto	u13830
  3240                           
  3241                           ; BSR set to: 0
  3242  01358C  0100               	movlb	0	; () banked
  3243  01358E  5188               	movf	_iRBumpRight& (0+255),w,b
  3244  013590  A4D8               	btfss	status,2,c
  3245  013592  D008               	goto	u13830
  3246                           
  3247                           ; BSR set to: 0
  3248  013594  0100               	movlb	0	; () banked
  3249  013596  5186               	movf	_iRDropRight& (0+255),w,b
  3250  013598  A4D8               	btfss	status,2,c
  3251  01359A  D004               	goto	u13830
  3252                           
  3253                           ; BSR set to: 0
  3254  01359C  0100               	movlb	0	; () banked
  3255  01359E  5185               	movf	_iRDropLeft& (0+255),w,b
  3256  0135A0  B4D8               	btfsc	status,2,c
  3257  0135A2  D7D9               	goto	l2389
  3258  0135A4                     u13830:
  3259                           
  3260                           ; BSR set to: 0
  3261                           ;main.c: 328: }
  3262                           ;main.c: 330: irobot_stop_motion(0);
  3263                           
  3264                           ; BSR set to: 0
  3265                           
  3266                           ; BSR set to: 0
  3267  0135A4  0E00               	movlw	0
  3268  0135A6  ECA0  F0AE         	call	_irobot_stop_motion
  3269                           
  3270                           ;main.c: 331: if (MXK_SwitchTo(eMXK_HMI)) {
  3271  0135AA  0E01               	movlw	1
  3272  0135AC  EC2B  F0AF         	call	_MXK_SwitchTo
  3273  0135B0  0900               	iorlw	0
  3274  0135B2  B4D8               	btfsc	status,2,c
  3275  0135B4  D037               	goto	l2394
  3276                           
  3277                           ;main.c: 332: printf("%c", (char)35);
  3278  0135B6  0EFB               	movlw	low STR_1
  3279  0135B8  0100               	movlb	0	; () banked
  3280  0135BA  6FCF               	movwf	printf@f& (0+255),b
  3281  0135BC  0EFF               	movlw	high STR_1
  3282  0135BE  0100               	movlb	0	; () banked
  3283  0135C0  6FD0               	movwf	(printf@f+1)& (0+255),b
  3284  0135C2  0E00               	movlw	0
  3285  0135C4  0100               	movlb	0	; () banked
  3286  0135C6  6FD2               	movwf	(?_printf+3)& (0+255),b
  3287  0135C8  0E23               	movlw	35
  3288  0135CA  6FD1               	movwf	(?_printf+2)& (0+255),b
  3289  0135CC  EC58  F092         	call	_printf	;wreg free
  3290                           
  3291                           ;main.c: 333: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\nAng
      +                          leToTurn: %d\n", MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight, angleToClosestWal
      +                          l -67);
  3292  0135D0  0E0D               	movlw	low STR_10
  3293  0135D2  0100               	movlb	0	; () banked
  3294  0135D4  6FCF               	movwf	printf@f& (0+255),b
  3295  0135D6  0EFF               	movlw	high STR_10
  3296  0135D8  0100               	movlb	0	; () banked
  3297  0135DA  6FD0               	movwf	(printf@f+1)& (0+255),b
  3298  0135DC  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3299  0135E0  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3300  0135E4  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3301  0135E8  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3302  0135EC  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3303  0135F0  0100               	movlb	0	; () banked
  3304  0135F2  6BD6               	clrf	(?_printf+7)& (0+255),b
  3305  0135F4  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3306  0135F8  0100               	movlb	0	; () banked
  3307  0135FA  6BD8               	clrf	(?_printf+9)& (0+255),b
  3308  0135FC  0EBD               	movlw	189
  3309  0135FE  0100               	movlb	0	; () banked
  3310  013600  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3311  013602  0100               	movlb	0	; () banked
  3312  013604  6FD9               	movwf	(?_printf+10)& (0+255),b
  3313  013606  0EFF               	movlw	255
  3314  013608  0100               	movlb	0	; () banked
  3315  01360A  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3316  01360C  0100               	movlb	0	; () banked
  3317  01360E  6FDA               	movwf	(?_printf+11)& (0+255),b
  3318  013610  EC58  F092         	call	_printf	;wreg free
  3319                           
  3320                           ;main.c: 334: Console_Render();
  3321  013614  EC6C  F08F         	call	_Console_Render	;wreg free
  3322                           
  3323                           ;main.c: 335: if (MXK_Release())
  3324  013618  EC59  F0B2         	call	_MXK_Release	;wreg free
  3325  01361C  0900               	iorlw	0
  3326  01361E  A4D8               	btfss	status,2,c
  3327                           
  3328                           ;main.c: 336: MXK_Dequeue();
  3329  013620  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3330  013624                     l2394:
  3331                           
  3332                           ;main.c: 337: }
  3333                           ;main.c: 339: irobot_song_play(0);
  3334  013624  0E00               	movlw	0
  3335  013626  ECED  F0B2         	call	_irobot_song_play
  3336                           
  3337                           ;main.c: 340: irobot_stop_motion(0);
  3338  01362A  0E00               	movlw	0
  3339  01362C  ECA0  F0AE         	call	_irobot_stop_motion
  3340  013630  0012               	return		;funcret
  3341  013632                     __end_of_mode4:
  3342                           	opt stack 0
  3343                           tblptru	equ	0xFF8
  3344                           tblptrh	equ	0xFF7
  3345                           tblptrl	equ	0xFF6
  3346                           tablat	equ	0xFF5
  3347                           postinc0	equ	0xFEE
  3348                           wreg	equ	0xFE8
  3349                           postdec1	equ	0xFE5
  3350                           fsr1h	equ	0xFE2
  3351                           fsr1l	equ	0xFE1
  3352                           status	equ	0xFD8
  3353                           
  3354 ;; *************** function _findClosestWall *****************
  3355 ;; Defined at:
  3356 ;;		line 152 in file "main.c"
  3357 ;; Parameters:    Size  Location     Type
  3358 ;;		None
  3359 ;; Auto vars:     Size  Location     Type
  3360 ;;		None
  3361 ;; Return value:  Size  Location     Type
  3362 ;;                  1    wreg      void 
  3363 ;; Registers used:
  3364 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3365 ;; Tracked objects:
  3366 ;;		On entry : 0/0
  3367 ;;		On exit  : 0/0
  3368 ;;		Unchanged: 0/0
  3369 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3370 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3371 ;;      Locals:         0       0       0       0       4       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3372 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3373 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3374 ;;Total ram usage:        6 bytes
  3375 ;; Hardware stack levels used:    1
  3376 ;; Hardware stack levels required when called:   13
  3377 ;; This function calls:
  3378 ;;		_ADC_Start
  3379 ;;		_ADC_Voltage
  3380 ;;		_Console_Render
  3381 ;;		_HMI_Render
  3382 ;;		_HMI_SetNumber
  3383 ;;		_MXK_Dequeue
  3384 ;;		_MXK_Release
  3385 ;;		_MXK_SwitchTo
  3386 ;;		_Motor_Move
  3387 ;;		_Motor_Speed
  3388 ;;		___fldiv
  3389 ;;		___flmul
  3390 ;;		___fltol
  3391 ;;		___xxtofl
  3392 ;;		_irobot_rotate
  3393 ;;		_printf
  3394 ;; This function is called by:
  3395 ;;		_mode4
  3396 ;; This function uses a non-reentrant model
  3397 ;;
  3398                           
  3399                           	psect	text2
  3400  010C98                     __ptext2:
  3401                           	opt stack 0
  3402  010C98                     _findClosestWall:
  3403                           	opt stack 16
  3404                           
  3405                           ;main.c: 153: StepRotate = 400;
  3406                           
  3407                           ;incstack = 0
  3408  010C98  0E01               	movlw	1
  3409  010C9A  0100               	movlb	0	; () banked
  3410  010C9C  6F72               	movwf	(_StepRotate+1)& (0+255),b
  3411  010C9E  0E90               	movlw	144
  3412  010CA0  6F71               	movwf	_StepRotate& (0+255),b
  3413                           
  3414                           ;main.c: 154: MinDist = 1000;
  3415  010CA2  0E03               	movlw	3
  3416  010CA4  0100               	movlb	0	; () banked
  3417  010CA6  6FFC               	movwf	(_MinDist+1)& (0+255),b
  3418  010CA8  0EE8               	movlw	232
  3419  010CAA  6FFB               	movwf	_MinDist& (0+255),b
  3420                           
  3421                           ;main.c: 155: Stepstomin = 0;
  3422  010CAC  0E00               	movlw	0
  3423  010CAE  0100               	movlb	0	; () banked
  3424  010CB0  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  3425  010CB2  0E00               	movlw	0
  3426  010CB4  6F6F               	movwf	_Stepstomin& (0+255),b
  3427                           
  3428                           ;main.c: 156: angleToClosestWall = 1000;
  3429  010CB6  0E03               	movlw	3
  3430  010CB8  0100               	movlb	0	; () banked
  3431  010CBA  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3432  010CBC  0EE8               	movlw	232
  3433  010CBE  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3434                           
  3435                           ;main.c: 157: IRValue = 0;
  3436  010CC0  0E00               	movlw	0
  3437  010CC2  0100               	movlb	0	; () banked
  3438  010CC4  6F6E               	movwf	(_IRValue+1)& (0+255),b
  3439  010CC6  0E00               	movlw	0
  3440  010CC8  6F6D               	movwf	_IRValue& (0+255),b
  3441                           
  3442                           ;main.c: 158: TimerX = 8;
  3443  010CCA  0E00               	movlw	0
  3444  010CCC  0100               	movlb	0	; () banked
  3445  010CCE  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3446  010CD0  0E08               	movlw	8
  3447  010CD2  6FF9               	movwf	_TimerX& (0+255),b
  3448                           
  3449                           ;main.c: 159: angle = 0;
  3450  010CD4  0E00               	movlw	0
  3451  010CD6  0103               	movlb	3	; () banked
  3452  010CD8  6F3B               	movwf	(_angle+1)& (0+255),b
  3453  010CDA  0E00               	movlw	0
  3454  010CDC  6F3A               	movwf	_angle& (0+255),b
  3455                           
  3456                           ;main.c: 160: while (StepRotate > 0) {
  3457  010CDE  D15A               	goto	l2345
  3458  010CE0                     
  3459                           ;main.c: 161: StepRotate--;
  3460                           
  3461                           ; BSR set to: 3
  3462  010CE0  0100               	movlb	0	; () banked
  3463  010CE2  0771               	decf	_StepRotate& (0+255),f,b
  3464  010CE4  A0D8               	btfss	status,0,c
  3465  010CE6  0772               	decf	(_StepRotate+1)& (0+255),f,b
  3466                           
  3467                           ; BSR set to: 0
  3468                           ;main.c: 162: ADC_Start(&ADC_AN0);
  3469  010CE8  0EB5               	movlw	low _ADC_AN0
  3470  010CEA  0100               	movlb	0	; () banked
  3471  010CEC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3472  010CEE  0E00               	movlw	high _ADC_AN0
  3473  010CF0  0100               	movlb	0	; () banked
  3474  010CF2  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3475  010CF4  ECBD  F0A7         	call	_ADC_Start	;wreg free
  3476                           
  3477                           ;main.c: 163: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3478  010CF8  0EB5               	movlw	low _ADC_AN0
  3479  010CFA  0100               	movlb	0	; () banked
  3480  010CFC  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3481  010CFE  0E00               	movlw	high _ADC_AN0
  3482  010D00  0100               	movlb	0	; () banked
  3483  010D02  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3484  010D04  EC7A  F09D         	call	_ADC_Voltage	;wreg free
  3485  010D08  C0E1  F3F8         	movff	?_ADC_Voltage,_findClosestWall$15599
  3486  010D0C  C0E2  F3F9         	movff	?_ADC_Voltage+1,_findClosestWall$15599+1
  3487  010D10  C0E3  F3FA         	movff	?_ADC_Voltage+2,_findClosestWall$15599+2
  3488  010D14  C0E4  F3FB         	movff	?_ADC_Voltage+3,_findClosestWall$15599+3
  3489                           
  3490                           ;main.c: 163: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3491  010D18  C3F8  F0BE         	movff	_findClosestWall$15599,___fldiv@a
  3492  010D1C  C3F9  F0BF         	movff	_findClosestWall$15599+1,___fldiv@a+1
  3493  010D20  C3FA  F0C0         	movff	_findClosestWall$15599+2,___fldiv@a+2
  3494  010D24  C3FB  F0C1         	movff	_findClosestWall$15599+3,___fldiv@a+3
  3495  010D28  0E00               	movlw	0
  3496  010D2A  0100               	movlb	0	; () banked
  3497  010D2C  6FBA               	movwf	___fldiv@b& (0+255),b
  3498  010D2E  0E00               	movlw	0
  3499  010D30  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3500  010D32  0E6C               	movlw	108
  3501  010D34  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3502  010D36  0E42               	movlw	66
  3503  010D38  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3504  010D3A  EC2D  F088         	call	___fldiv	;wreg free
  3505  010D3E  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3506  010D42  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3507  010D46  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3508  010D4A  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3509  010D4E  EC19  F09B         	call	___fltol	;wreg free
  3510  010D52  C0F3  F06D         	movff	?___fltol,_IRValue
  3511  010D56  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3512                           
  3513                           ;main.c: 164: if (MXK_SwitchTo(eMXK_HMI)) {
  3514  010D5A  0E01               	movlw	1
  3515  010D5C  EC2B  F0AF         	call	_MXK_SwitchTo
  3516  010D60  0900               	iorlw	0
  3517  010D62  B4D8               	btfsc	status,2,c
  3518  010D64  D00E               	goto	l2334
  3519                           
  3520                           ;main.c: 165: HMI_SetNumber(IRValue);
  3521  010D66  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3522  010D6A  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3523  010D6E  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
  3524                           
  3525                           ;main.c: 166: HMI_Render();
  3526  010D72  EC8C  F0AF         	call	_HMI_Render	;wreg free
  3527                           
  3528                           ;main.c: 167: if (MXK_Release())
  3529  010D76  EC59  F0B2         	call	_MXK_Release	;wreg free
  3530  010D7A  0900               	iorlw	0
  3531  010D7C  A4D8               	btfss	status,2,c
  3532                           
  3533                           ;main.c: 168: MXK_Dequeue();
  3534  010D7E  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3535  010D82                     l2334:
  3536                           
  3537                           ;main.c: 169: }
  3538                           ;main.c: 170: if (IRValue < MinDist) {
  3539  010D82  0100               	movlb	0	; () banked
  3540  010D84  51FB               	movf	_MinDist& (0+255),w,b
  3541  010D86  0100               	movlb	0	; () banked
  3542  010D88  5D6D               	subwf	_IRValue& (0+255),w,b
  3543  010D8A  0100               	movlb	0	; () banked
  3544  010D8C  516E               	movf	(_IRValue+1)& (0+255),w,b
  3545  010D8E  0A80               	xorlw	128
  3546  010D90  0103               	movlb	3	; () banked
  3547  010D92  6FF6               	movwf	??_findClosestWall& (0+255),b
  3548  010D94  0100               	movlb	0	; () banked
  3549  010D96  51FC               	movf	(_MinDist+1)& (0+255),w,b
  3550  010D98  0A80               	xorlw	128
  3551  010D9A  0103               	movlb	3	; () banked
  3552  010D9C  59F6               	subwfb	??_findClosestWall& (0+255),w,b
  3553  010D9E  B0D8               	btfsc	status,0,c
  3554  010DA0  D036               	goto	l2335
  3555                           
  3556                           ; BSR set to: 3
  3557                           ;main.c: 171: MinDist = IRValue;
  3558  010DA2  C06D  F0FB         	movff	_IRValue,_MinDist
  3559  010DA6  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  3560                           
  3561                           ;main.c: 172: Stepstomin = StepRotate;
  3562  010DAA  C071  F06F         	movff	_StepRotate,_Stepstomin
  3563  010DAE  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  3564                           
  3565                           ; BSR set to: 3
  3566                           ;main.c: 173: angleToClosestWall = Stepstomin * 0.675;
  3567  010DB2  0ECD               	movlw	205
  3568  010DB4  0100               	movlb	0	; () banked
  3569  010DB6  6FCC               	movwf	___flmul@a& (0+255),b
  3570  010DB8  0ECC               	movlw	204
  3571  010DBA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
  3572  010DBC  0E2C               	movlw	44
  3573  010DBE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
  3574  010DC0  0E3F               	movlw	63
  3575  010DC2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
  3576  010DC4  C06F  F0BA         	movff	_Stepstomin,___xxtofl@val
  3577  010DC8  C070  F0BB         	movff	_Stepstomin+1,___xxtofl@val+1
  3578  010DCC  0100               	movlb	0	; () banked
  3579  010DCE  0E00               	movlw	0
  3580  010DD0  BFBB               	btfsc	(___xxtofl@val+1)& (0+255),7,b
  3581  010DD2  0EFF               	movlw	-1
  3582  010DD4  6FBC               	movwf	(___xxtofl@val+2)& (0+255),b
  3583  010DD6  6FBD               	movwf	(___xxtofl@val+3)& (0+255),b
  3584  010DD8  0E01               	movlw	1
  3585  010DDA  EC71  F091         	call	___xxtofl
  3586  010DDE  C0BA  F0C8         	movff	?___xxtofl,___flmul@b
  3587  010DE2  C0BB  F0C9         	movff	?___xxtofl+1,___flmul@b+1
  3588  010DE6  C0BC  F0CA         	movff	?___xxtofl+2,___flmul@b+2
  3589  010DEA  C0BD  F0CB         	movff	?___xxtofl+3,___flmul@b+3
  3590  010DEE  EC00  F080         	call	___flmul	;wreg free
  3591  010DF2  C0C8  F0F3         	movff	?___flmul,___fltol@f1
  3592  010DF6  C0C9  F0F4         	movff	?___flmul+1,___fltol@f1+1
  3593  010DFA  C0CA  F0F5         	movff	?___flmul+2,___fltol@f1+2
  3594  010DFE  C0CB  F0F6         	movff	?___flmul+3,___fltol@f1+3
  3595  010E02  EC19  F09B         	call	___fltol	;wreg free
  3596  010E06  C0F3  F06B         	movff	?___fltol,_angleToClosestWall
  3597  010E0A  C0F4  F06C         	movff	?___fltol+1,_angleToClosestWall+1
  3598  010E0E                     l2335:
  3599                           
  3600                           ;main.c: 174: }
  3601                           ;main.c: 175: if (MXK_SwitchTo(eMXK_Motor)) {
  3602  010E0E  0E08               	movlw	8
  3603  010E10  EC2B  F0AF         	call	_MXK_SwitchTo
  3604  010E14  0900               	iorlw	0
  3605  010E16  B4D8               	btfsc	status,2,c
  3606  010E18  D01F               	goto	l2337
  3607                           
  3608                           ;main.c: 176: Motor_Speed(&Stepper, (100));
  3609  010E1A  0EAF               	movlw	low _Stepper
  3610  010E1C  0100               	movlb	0	; () banked
  3611  010E1E  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3612  010E20  0E00               	movlw	high _Stepper
  3613  010E22  0100               	movlb	0	; () banked
  3614  010E24  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3615  010E26  0E00               	movlw	0
  3616  010E28  0100               	movlb	0	; () banked
  3617  010E2A  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3618  010E2C  0E64               	movlw	100
  3619  010E2E  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3620  010E30  EC3F  F0B1         	call	_Motor_Speed	;wreg free
  3621                           
  3622                           ;main.c: 177: Motor_Move(&Stepper, -1);
  3623  010E34  0EAF               	movlw	low _Stepper
  3624  010E36  0100               	movlb	0	; () banked
  3625  010E38  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3626  010E3A  0E00               	movlw	high _Stepper
  3627  010E3C  0100               	movlb	0	; () banked
  3628  010E3E  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3629  010E40  0EFF               	movlw	255
  3630  010E42  0100               	movlb	0	; () banked
  3631  010E44  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3632  010E46  69BF               	setf	Motor_Move@pDelta& (0+255),b
  3633  010E48  EC43  F0B0         	call	_Motor_Move	;wreg free
  3634                           
  3635                           ;main.c: 178: if (MXK_Release())
  3636  010E4C  EC59  F0B2         	call	_MXK_Release	;wreg free
  3637  010E50  0900               	iorlw	0
  3638  010E52  A4D8               	btfss	status,2,c
  3639                           
  3640                           ;main.c: 179: MXK_Dequeue();
  3641  010E54  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3642  010E58                     l2337:
  3643                           
  3644                           ;main.c: 180: }
  3645                           ;main.c: 181: TimerX = 10;
  3646  010E58  0E00               	movlw	0
  3647  010E5A  0100               	movlb	0	; () banked
  3648  010E5C  6FFA               	movwf	(_TimerX+1)& (0+255),b
  3649  010E5E  0E0A               	movlw	10
  3650  010E60  6FF9               	movwf	_TimerX& (0+255),b
  3651                           
  3652                           ; BSR set to: 0
  3653                           ;main.c: 182: if (TimerX > 0) {
  3654  010E62  0100               	movlb	0	; () banked
  3655  010E64  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3656  010E66  D063               	goto	u13480
  3657  010E68  0100               	movlb	0	; () banked
  3658  010E6A  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3659  010E6C  E156               	bnz	l16289
  3660  010E6E  0100               	movlb	0	; () banked
  3661  010E70  05F9               	decf	_TimerX& (0+255),w,b
  3662  010E72  B0D8               	btfsc	status,0,c
  3663  010E74  D052               	goto	l2339
  3664  010E76  D05B               	goto	u13480
  3665  010E78                     l16271:
  3666                           
  3667                           ; BSR set to: 0
  3668                           ;main.c: 184: ADC_Start(&ADC_AN0);
  3669  010E78  0EB5               	movlw	low _ADC_AN0
  3670  010E7A  0100               	movlb	0	; () banked
  3671  010E7C  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  3672  010E7E  0E00               	movlw	high _ADC_AN0
  3673  010E80  0100               	movlb	0	; () banked
  3674  010E82  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  3675  010E84  ECBD  F0A7         	call	_ADC_Start	;wreg free
  3676                           
  3677                           ;main.c: 185: if (MXK_SwitchTo(eMXK_HMI)) {
  3678  010E88  0E01               	movlw	1
  3679  010E8A  EC2B  F0AF         	call	_MXK_SwitchTo
  3680  010E8E  0900               	iorlw	0
  3681  010E90  B4D8               	btfsc	status,2,c
  3682  010E92  D00E               	goto	l2342
  3683                           
  3684                           ;main.c: 186: HMI_SetNumber(IRValue);
  3685  010E94  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  3686  010E98  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  3687  010E9C  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
  3688                           
  3689                           ;main.c: 187: HMI_Render();
  3690  010EA0  EC8C  F0AF         	call	_HMI_Render	;wreg free
  3691                           
  3692                           ;main.c: 188: if (MXK_Release())
  3693  010EA4  EC59  F0B2         	call	_MXK_Release	;wreg free
  3694  010EA8  0900               	iorlw	0
  3695  010EAA  A4D8               	btfss	status,2,c
  3696                           
  3697                           ;main.c: 189: MXK_Dequeue();
  3698  010EAC  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3699  010EB0                     l2342:
  3700                           
  3701                           ;main.c: 190: }
  3702                           ;main.c: 191: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3703  010EB0  0EB5               	movlw	low _ADC_AN0
  3704  010EB2  0100               	movlb	0	; () banked
  3705  010EB4  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  3706  010EB6  0E00               	movlw	high _ADC_AN0
  3707  010EB8  0100               	movlb	0	; () banked
  3708  010EBA  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  3709  010EBC  EC7A  F09D         	call	_ADC_Voltage	;wreg free
  3710  010EC0  C0E1  F3F8         	movff	?_ADC_Voltage,_findClosestWall$15599
  3711  010EC4  C0E2  F3F9         	movff	?_ADC_Voltage+1,_findClosestWall$15599+1
  3712  010EC8  C0E3  F3FA         	movff	?_ADC_Voltage+2,_findClosestWall$15599+2
  3713  010ECC  C0E4  F3FB         	movff	?_ADC_Voltage+3,_findClosestWall$15599+3
  3714                           
  3715                           ;main.c: 190: }
  3716                           ;main.c: 191: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  3717  010ED0  C3F8  F0BE         	movff	_findClosestWall$15599,___fldiv@a
  3718  010ED4  C3F9  F0BF         	movff	_findClosestWall$15599+1,___fldiv@a+1
  3719  010ED8  C3FA  F0C0         	movff	_findClosestWall$15599+2,___fldiv@a+2
  3720  010EDC  C3FB  F0C1         	movff	_findClosestWall$15599+3,___fldiv@a+3
  3721  010EE0  0E00               	movlw	0
  3722  010EE2  0100               	movlb	0	; () banked
  3723  010EE4  6FBA               	movwf	___fldiv@b& (0+255),b
  3724  010EE6  0E00               	movlw	0
  3725  010EE8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  3726  010EEA  0E6C               	movlw	108
  3727  010EEC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  3728  010EEE  0E42               	movlw	66
  3729  010EF0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  3730  010EF2  EC2D  F088         	call	___fldiv	;wreg free
  3731  010EF6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  3732  010EFA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  3733  010EFE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  3734  010F02  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  3735  010F06  EC19  F09B         	call	___fltol	;wreg free
  3736  010F0A  C0F3  F06D         	movff	?___fltol,_IRValue
  3737  010F0E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  3738                           
  3739                           ;main.c: 192: TimerX--;
  3740  010F12  0100               	movlb	0	; () banked
  3741  010F14  07F9               	decf	_TimerX& (0+255),f,b
  3742  010F16  A0D8               	btfss	status,0,c
  3743  010F18  07FA               	decf	(_TimerX+1)& (0+255),f,b
  3744  010F1A                     l2339:
  3745  010F1A                     l16289:
  3746                           
  3747                           ; BSR set to: 0
  3748  010F1A  0100               	movlb	0	; () banked
  3749  010F1C  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  3750  010F1E  D007               	goto	u13480
  3751  010F20  0100               	movlb	0	; () banked
  3752  010F22  51FA               	movf	(_TimerX+1)& (0+255),w,b
  3753  010F24  E1A9               	bnz	l16271
  3754  010F26  0100               	movlb	0	; () banked
  3755  010F28  05F9               	decf	_TimerX& (0+255),w,b
  3756  010F2A  B0D8               	btfsc	status,0,c
  3757  010F2C  D7A5               	goto	l2340
  3758  010F2E                     u13480:
  3759                           
  3760                           ; BSR set to: 0
  3761                           ;main.c: 193: }
  3762                           ;main.c: 194: }
  3763                           ;main.c: 195: if (MXK_SwitchTo(eMXK_HMI)) {
  3764                           
  3765                           ; BSR set to: 0
  3766                           
  3767                           ; BSR set to: 0
  3768  010F2E  0E01               	movlw	1
  3769  010F30  EC2B  F0AF         	call	_MXK_SwitchTo
  3770  010F34  0900               	iorlw	0
  3771  010F36  B4D8               	btfsc	status,2,c
  3772  010F38  D02D               	goto	l2345
  3773                           
  3774                           ;main.c: 196: printf("%c", (char)35);
  3775  010F3A  0EFB               	movlw	low STR_1
  3776  010F3C  0100               	movlb	0	; () banked
  3777  010F3E  6FCF               	movwf	printf@f& (0+255),b
  3778  010F40  0EFF               	movlw	high STR_1
  3779  010F42  0100               	movlb	0	; () banked
  3780  010F44  6FD0               	movwf	(printf@f+1)& (0+255),b
  3781  010F46  0E00               	movlw	0
  3782  010F48  0100               	movlb	0	; () banked
  3783  010F4A  6FD2               	movwf	(?_printf+3)& (0+255),b
  3784  010F4C  0E23               	movlw	35
  3785  010F4E  6FD1               	movwf	(?_printf+2)& (0+255),b
  3786  010F50  EC58  F092         	call	_printf	;wreg free
  3787                           
  3788                           ;main.c: 197: printf("Closest Wall:%u\nClosest Angle:%d\nLeft Bump:%u\nRightBump:%u\n", 
      +                          MinDist, angleToClosestWall, iRBumpLeft, iRBumpRight);
  3789  010F54  0E59               	movlw	low STR_2
  3790  010F56  0100               	movlb	0	; () banked
  3791  010F58  6FCF               	movwf	printf@f& (0+255),b
  3792  010F5A  0EFF               	movlw	high STR_2
  3793  010F5C  0100               	movlb	0	; () banked
  3794  010F5E  6FD0               	movwf	(printf@f+1)& (0+255),b
  3795  010F60  C0FB  F0D1         	movff	_MinDist,?_printf+2
  3796  010F64  C0FC  F0D2         	movff	_MinDist+1,?_printf+3
  3797  010F68  C06B  F0D3         	movff	_angleToClosestWall,?_printf+4
  3798  010F6C  C06C  F0D4         	movff	_angleToClosestWall+1,?_printf+5
  3799  010F70  C087  F0D5         	movff	_iRBumpLeft,?_printf+6
  3800  010F74  0100               	movlb	0	; () banked
  3801  010F76  6BD6               	clrf	(?_printf+7)& (0+255),b
  3802  010F78  C088  F0D7         	movff	_iRBumpRight,?_printf+8
  3803  010F7C  0100               	movlb	0	; () banked
  3804  010F7E  6BD8               	clrf	(?_printf+9)& (0+255),b
  3805  010F80  EC58  F092         	call	_printf	;wreg free
  3806                           
  3807                           ;main.c: 198: Console_Render();
  3808  010F84  EC6C  F08F         	call	_Console_Render	;wreg free
  3809                           
  3810                           ;main.c: 199: if (MXK_Release())
  3811  010F88  EC59  F0B2         	call	_MXK_Release	;wreg free
  3812  010F8C  0900               	iorlw	0
  3813  010F8E  A4D8               	btfss	status,2,c
  3814                           
  3815                           ;main.c: 200: MXK_Dequeue();
  3816  010F90  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  3817  010F94                     l2345:
  3818  010F94  0100               	movlb	0	; () banked
  3819  010F96  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  3820  010F98  D007               	goto	u13510
  3821  010F9A  0100               	movlb	0	; () banked
  3822  010F9C  5172               	movf	(_StepRotate+1)& (0+255),w,b
  3823  010F9E  E103               	bnz	u13511
  3824  010FA0  0100               	movlb	0	; () banked
  3825  010FA2  0571               	decf	_StepRotate& (0+255),w,b
  3826  010FA4  B0D8               	btfsc	status,0,c
  3827  010FA6                     u13511:
  3828  010FA6  D69C               	goto	l2332
  3829  010FA8                     u13510:
  3830                           
  3831                           ; BSR set to: 0
  3832                           ;main.c: 201: }
  3833                           ;main.c: 202: }
  3834                           ;main.c: 203: Motor_Speed(&Stepper, (400));
  3835                           
  3836                           ; BSR set to: 0
  3837  010FA8  0EAF               	movlw	low _Stepper
  3838  010FAA  0100               	movlb	0	; () banked
  3839  010FAC  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  3840  010FAE  0E00               	movlw	high _Stepper
  3841  010FB0  0100               	movlb	0	; () banked
  3842  010FB2  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  3843  010FB4  0E01               	movlw	1
  3844  010FB6  0100               	movlb	0	; () banked
  3845  010FB8  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  3846  010FBA  0E90               	movlw	144
  3847  010FBC  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  3848  010FBE  EC3F  F0B1         	call	_Motor_Speed	;wreg free
  3849                           
  3850                           ;main.c: 204: Motor_Move(&Stepper, 300);
  3851  010FC2  0EAF               	movlw	low _Stepper
  3852  010FC4  0100               	movlb	0	; () banked
  3853  010FC6  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  3854  010FC8  0E00               	movlw	high _Stepper
  3855  010FCA  0100               	movlb	0	; () banked
  3856  010FCC  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  3857  010FCE  0E01               	movlw	1
  3858  010FD0  0100               	movlb	0	; () banked
  3859  010FD2  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  3860  010FD4  0E2C               	movlw	44
  3861  010FD6  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  3862  010FD8  EC43  F0B0         	call	_Motor_Move	;wreg free
  3863                           
  3864                           ;main.c: 205: angleToClosestWall = angleToClosestWall + 67;
  3865  010FDC  0E43               	movlw	67
  3866  010FDE  0100               	movlb	0	; () banked
  3867  010FE0  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3868  010FE2  0100               	movlb	0	; () banked
  3869  010FE4  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3870  010FE6  0E00               	movlw	0
  3871  010FE8  0100               	movlb	0	; () banked
  3872  010FEA  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3873  010FEC  0100               	movlb	0	; () banked
  3874  010FEE  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3875                           
  3876                           ; BSR set to: 0
  3877                           ;main.c: 206: if(angleToClosestWall > 270) {
  3878  010FF0  0100               	movlb	0	; () banked
  3879  010FF2  BF6C               	btfsc	(_angleToClosestWall+1)& (0+255),7,b
  3880  010FF4  D012               	goto	l2347
  3881  010FF6  0E0F               	movlw	15
  3882  010FF8  0100               	movlb	0	; () banked
  3883  010FFA  5D6B               	subwf	_angleToClosestWall& (0+255),w,b
  3884  010FFC  0E01               	movlw	1
  3885  010FFE  0100               	movlb	0	; () banked
  3886  011000  596C               	subwfb	(_angleToClosestWall+1)& (0+255),w,b
  3887  011002  A0D8               	btfss	status,0,c
  3888  011004  D00A               	goto	l2347
  3889                           
  3890                           ; BSR set to: 0
  3891                           ;main.c: 207: angleToClosestWall = angleToClosestWall - 270;
  3892  011006  0EF2               	movlw	242
  3893  011008  0100               	movlb	0	; () banked
  3894  01100A  256B               	addwf	_angleToClosestWall& (0+255),w,b
  3895  01100C  0100               	movlb	0	; () banked
  3896  01100E  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3897  011010  0EFE               	movlw	254
  3898  011012  0100               	movlb	0	; () banked
  3899  011014  216C               	addwfc	(_angleToClosestWall+1)& (0+255),w,b
  3900  011016  0100               	movlb	0	; () banked
  3901  011018  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3902  01101A                     l2347:
  3903                           
  3904                           ; BSR set to: 0
  3905                           ;main.c: 208: }
  3906                           ;main.c: 209: angleToClosestWall = 270 - angleToClosestWall;
  3907  01101A  C06B  F3F6         	movff	_angleToClosestWall,??_findClosestWall
  3908  01101E  C06C  F3F7         	movff	_angleToClosestWall+1,??_findClosestWall+1
  3909  011022  0103               	movlb	3	; () banked
  3910  011024  1FF6               	comf	??_findClosestWall& (0+255),f,b
  3911  011026  1FF7               	comf	(??_findClosestWall+1)& (0+255),f,b
  3912  011028  4BF6               	infsnz	??_findClosestWall& (0+255),f,b
  3913  01102A  2BF7               	incf	(??_findClosestWall+1)& (0+255),f,b
  3914  01102C  0E0E               	movlw	14
  3915  01102E  0103               	movlb	3	; () banked
  3916  011030  25F6               	addwf	??_findClosestWall& (0+255),w,b
  3917  011032  0100               	movlb	0	; () banked
  3918  011034  6F6B               	movwf	_angleToClosestWall& (0+255),b
  3919  011036  0E01               	movlw	1
  3920  011038  0103               	movlb	3	; () banked
  3921  01103A  21F7               	addwfc	(??_findClosestWall+1)& (0+255),w,b
  3922  01103C  0100               	movlb	0	; () banked
  3923  01103E  6F6C               	movwf	(_angleToClosestWall+1)& (0+255),b
  3924                           
  3925                           ; BSR set to: 0
  3926                           ;main.c: 210: irobot_rotate(0, angleToClosestWall, 200);
  3927  011040  C06B  F0D7         	movff	_angleToClosestWall,irobot_rotate@rotateAngle
  3928  011044  C06C  F0D8         	movff	_angleToClosestWall+1,irobot_rotate@rotateAngle+1
  3929  011048  0E00               	movlw	0
  3930  01104A  0100               	movlb	0	; () banked
  3931  01104C  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  3932  01104E  0EC8               	movlw	200
  3933  011050  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  3934  011052  0E00               	movlw	0
  3935  011054  ECD6  F0A2         	call	_irobot_rotate
  3936  011058  0012               	return		;funcret
  3937  01105A                     __end_of_findClosestWall:
  3938                           	opt stack 0
  3939                           tblptru	equ	0xFF8
  3940                           tblptrh	equ	0xFF7
  3941                           tblptrl	equ	0xFF6
  3942                           tablat	equ	0xFF5
  3943                           postinc0	equ	0xFEE
  3944                           wreg	equ	0xFE8
  3945                           postdec1	equ	0xFE5
  3946                           fsr1h	equ	0xFE2
  3947                           fsr1l	equ	0xFE1
  3948                           status	equ	0xFD8
  3949                           
  3950 ;; *************** function _mode3 *****************
  3951 ;; Defined at:
  3952 ;;		line 309 in file "main.c"
  3953 ;; Parameters:    Size  Location     Type
  3954 ;;		None
  3955 ;; Auto vars:     Size  Location     Type
  3956 ;;		None
  3957 ;; Return value:  Size  Location     Type
  3958 ;;                  1    wreg      void 
  3959 ;; Registers used:
  3960 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  3961 ;; Tracked objects:
  3962 ;;		On entry : 0/0
  3963 ;;		On exit  : 0/0
  3964 ;;		Unchanged: 0/0
  3965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3966 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3969 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3970 ;;Total ram usage:        0 bytes
  3971 ;; Hardware stack levels used:    1
  3972 ;; Hardware stack levels required when called:   17
  3973 ;; This function calls:
  3974 ;;		_move_and_rotate
  3975 ;;		_safeToGo
  3976 ;; This function is called by:
  3977 ;;		_main
  3978 ;; This function uses a non-reentrant model
  3979 ;;
  3980                           
  3981                           	psect	text3
  3982  0165C4                     __ptext3:
  3983                           	opt stack 0
  3984  0165C4                     _mode3:
  3985                           	opt stack 13
  3986                           
  3987                           ;main.c: 310: safeToGo();
  3988                           
  3989                           ;incstack = 0
  3990  0165C4  ECEA  F0AD         	call	_safeToGo	;wreg free
  3991                           
  3992                           ;main.c: 311: move_and_rotate();
  3993  0165C8  ECFF  F0A7         	call	_move_and_rotate	;wreg free
  3994                           
  3995                           ;main.c: 312: move_and_rotate();
  3996  0165CC  ECFF  F0A7         	call	_move_and_rotate	;wreg free
  3997                           
  3998                           ;main.c: 313: move_and_rotate();
  3999  0165D0  ECFF  F0A7         	call	_move_and_rotate	;wreg free
  4000                           
  4001                           ;main.c: 314: move_and_rotate();
  4002  0165D4  ECFF  F0A7         	call	_move_and_rotate	;wreg free
  4003  0165D8  0012               	return		;funcret
  4004  0165DA                     __end_of_mode3:
  4005                           	opt stack 0
  4006                           tblptru	equ	0xFF8
  4007                           tblptrh	equ	0xFF7
  4008                           tblptrl	equ	0xFF6
  4009                           tablat	equ	0xFF5
  4010                           postinc0	equ	0xFEE
  4011                           wreg	equ	0xFE8
  4012                           postdec1	equ	0xFE5
  4013                           fsr1h	equ	0xFE2
  4014                           fsr1l	equ	0xFE1
  4015                           status	equ	0xFD8
  4016                           
  4017 ;; *************** function _move_and_rotate *****************
  4018 ;; Defined at:
  4019 ;;		line 138 in file "main.c"
  4020 ;; Parameters:    Size  Location     Type
  4021 ;;		None
  4022 ;; Auto vars:     Size  Location     Type
  4023 ;;		None
  4024 ;; Return value:  Size  Location     Type
  4025 ;;                  1    wreg      void 
  4026 ;; Registers used:
  4027 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4028 ;; Tracked objects:
  4029 ;;		On entry : 0/0
  4030 ;;		On exit  : 0/0
  4031 ;;		Unchanged: 0/0
  4032 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4035 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4036 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4037 ;;Total ram usage:        0 bytes
  4038 ;; Hardware stack levels used:    1
  4039 ;; Hardware stack levels required when called:   12
  4040 ;; This function calls:
  4041 ;;		_delay_ms
  4042 ;;		_irobot_move_straight
  4043 ;;		_irobot_rotate
  4044 ;;		_irobot_stop_motion
  4045 ;;		_update_distance
  4046 ;; This function is called by:
  4047 ;;		_mode3
  4048 ;; This function uses a non-reentrant model
  4049 ;;
  4050                           
  4051                           	psect	text4
  4052  014FFE                     __ptext4:
  4053                           	opt stack 0
  4054  014FFE                     _move_and_rotate:
  4055                           	opt stack 17
  4056                           
  4057                           ;main.c: 139: dist = 0;
  4058                           
  4059                           ;incstack = 0
  4060  014FFE  0E00               	movlw	0
  4061  015000  0100               	movlb	0	; () banked
  4062  015002  6F6A               	movwf	(_dist+1)& (0+255),b
  4063  015004  0E00               	movlw	0
  4064  015006  6F69               	movwf	_dist& (0+255),b
  4065                           
  4066                           ; BSR set to: 0
  4067                           ;main.c: 140: irobot_move_straight(100);
  4068  015008  0E00               	movlw	0
  4069  01500A  0100               	movlb	0	; () banked
  4070  01500C  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4071  01500E  0E64               	movlw	100
  4072  015010  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4073  015012  EC82  F0B2         	call	_irobot_move_straight	;wreg free
  4074                           
  4075                           ;main.c: 141: while (dist < 1000) {
  4076  015016  D00A               	goto	l2325
  4077  015018                     
  4078                           ;main.c: 142: update_distance();
  4079  015018  EC01  F0B3         	call	_update_distance	;wreg free
  4080                           
  4081                           ;main.c: 143: dist += iRDistance;
  4082  01501C  0100               	movlb	0	; () banked
  4083  01501E  5179               	movf	_iRDistance& (0+255),w,b
  4084  015020  0100               	movlb	0	; () banked
  4085  015022  2769               	addwf	_dist& (0+255),f,b
  4086  015024  0100               	movlb	0	; () banked
  4087  015026  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4088  015028  0100               	movlb	0	; () banked
  4089  01502A  236A               	addwfc	(_dist+1)& (0+255),f,b
  4090  01502C                     l2325:
  4091                           
  4092                           ; BSR set to: 0
  4093  01502C  0100               	movlb	0	; () banked
  4094  01502E  BF6A               	btfsc	(_dist+1)& (0+255),7,b
  4095  015030  D7F3               	goto	l2326
  4096  015032  0EE8               	movlw	232
  4097  015034  0100               	movlb	0	; () banked
  4098  015036  5D69               	subwf	_dist& (0+255),w,b
  4099  015038  0E03               	movlw	3
  4100  01503A  0100               	movlb	0	; () banked
  4101  01503C  596A               	subwfb	(_dist+1)& (0+255),w,b
  4102  01503E  A0D8               	btfss	status,0,c
  4103  015040  D7EB               	goto	l2326
  4104                           
  4105                           ; BSR set to: 0
  4106                           ;main.c: 144: }
  4107                           ;main.c: 145: irobot_stop_motion(0);
  4108                           
  4109                           ; BSR set to: 0
  4110  015042  0E00               	movlw	0
  4111  015044  ECA0  F0AE         	call	_irobot_stop_motion
  4112                           
  4113                           ;main.c: 146: delay_ms(100);
  4114  015048  0E00               	movlw	0
  4115  01504A  0100               	movlb	0	; () banked
  4116  01504C  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4117  01504E  0E64               	movlw	100
  4118  015050  6FBA               	movwf	delay_ms@ms& (0+255),b
  4119  015052  EC34  F0AB         	call	_delay_ms	;wreg free
  4120                           
  4121                           ;main.c: 147: irobot_rotate(0, 67, -200);
  4122  015056  0E00               	movlw	0
  4123  015058  0100               	movlb	0	; () banked
  4124  01505A  6FD8               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4125  01505C  0E43               	movlw	67
  4126  01505E  6FD7               	movwf	irobot_rotate@rotateAngle& (0+255),b
  4127  015060  0EFF               	movlw	255
  4128  015062  0100               	movlb	0	; () banked
  4129  015064  6FDA               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  4130  015066  0E38               	movlw	56
  4131  015068  6FD9               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  4132  01506A  0E00               	movlw	0
  4133  01506C  ECD6  F0A2         	call	_irobot_rotate
  4134                           
  4135                           ;main.c: 148: delay_ms(100);
  4136  015070  0E00               	movlw	0
  4137  015072  0100               	movlb	0	; () banked
  4138  015074  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
  4139  015076  0E64               	movlw	100
  4140  015078  6FBA               	movwf	delay_ms@ms& (0+255),b
  4141  01507A  EC34  F0AB         	call	_delay_ms	;wreg free
  4142  01507E  0012               	return		;funcret
  4143  015080                     __end_of_move_and_rotate:
  4144                           	opt stack 0
  4145                           tblptru	equ	0xFF8
  4146                           tblptrh	equ	0xFF7
  4147                           tblptrl	equ	0xFF6
  4148                           tablat	equ	0xFF5
  4149                           postinc0	equ	0xFEE
  4150                           wreg	equ	0xFE8
  4151                           postdec1	equ	0xFE5
  4152                           fsr1h	equ	0xFE2
  4153                           fsr1l	equ	0xFE1
  4154                           status	equ	0xFD8
  4155                           
  4156 ;; *************** function _irobot_rotate *****************
  4157 ;; Defined at:
  4158 ;;		line 280 in file "Library/iRobotSerial.c"
  4159 ;; Parameters:    Size  Location     Type
  4160 ;;  isScript        1    wreg     unsigned char 
  4161 ;;  rotateAngle     2   29[BANK0 ] short 
  4162 ;;  rotateSpeed     2   31[BANK0 ] short 
  4163 ;; Auto vars:     Size  Location     Type
  4164 ;;  isScript        1   34[BANK0 ] unsigned char 
  4165 ;;  rotateDirect    2   37[BANK0 ] short 
  4166 ;;  angleTotal      2   35[BANK0 ] short 
  4167 ;; Return value:  Size  Location     Type
  4168 ;;                  1    wreg      void 
  4169 ;; Registers used:
  4170 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4171 ;; Tracked objects:
  4172 ;;		On entry : 0/0
  4173 ;;		On exit  : 0/0
  4174 ;;		Unchanged: 0/0
  4175 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4176 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4177 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4178 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4179 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4180 ;;Total ram usage:       10 bytes
  4181 ;; Hardware stack levels used:    1
  4182 ;; Hardware stack levels required when called:   11
  4183 ;; This function calls:
  4184 ;;		_irobot_move
  4185 ;;		_irobot_stop_motion
  4186 ;;		_update_angle
  4187 ;; This function is called by:
  4188 ;;		_move_and_rotate
  4189 ;;		_findClosestWall
  4190 ;;		_irobot_rotate_to
  4191 ;; This function uses a non-reentrant model
  4192 ;;
  4193                           
  4194                           	psect	text5
  4195  0145AC                     __ptext5:
  4196                           	opt stack 0
  4197  0145AC                     _irobot_rotate:
  4198                           	opt stack 17
  4199                           
  4200                           ;incstack = 0
  4201                           ;irobot_rotate@isScript stored from wreg
  4202  0145AC  0100               	movlb	0	; () banked
  4203  0145AE  6FDC               	movwf	irobot_rotate@isScript& (0+255),b
  4204                           
  4205                           ;iRobotSerial.c: 281: INT16 angleTotal = 0;
  4206  0145B0  0E00               	movlw	0
  4207  0145B2  0100               	movlb	0	; () banked
  4208  0145B4  6FDE               	movwf	(irobot_rotate@angleTotal+1)& (0+255),b
  4209  0145B6  0E00               	movlw	0
  4210  0145B8  6FDD               	movwf	irobot_rotate@angleTotal& (0+255),b
  4211                           
  4212                           ; BSR set to: 0
  4213                           ;iRobotSerial.c: 282: INT16 rotateDirection;
  4214                           ;iRobotSerial.c: 284: (rotateAngle > 0) ? (rotateDirection = iR_CONST_CCW) : (rotateAngl
      +                          e = iR_CONST_CW);
  4215  0145BA  0100               	movlb	0	; () banked
  4216  0145BC  BFD8               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  4217  0145BE  D00D               	goto	l2156
  4218  0145C0  0100               	movlb	0	; () banked
  4219  0145C2  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4220  0145C4  E104               	bnz	u10910
  4221  0145C6  0100               	movlb	0	; () banked
  4222  0145C8  05D7               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  4223  0145CA  A0D8               	btfss	status,0,c
  4224  0145CC  D006               	goto	l2156
  4225  0145CE                     u10910:
  4226                           
  4227                           ; BSR set to: 0
  4228  0145CE  0E00               	movlw	0
  4229  0145D0  0100               	movlb	0	; () banked
  4230  0145D2  6FE0               	movwf	(irobot_rotate@rotateDirection+1)& (0+255),b
  4231  0145D4  0E01               	movlw	1
  4232  0145D6  6FDF               	movwf	irobot_rotate@rotateDirection& (0+255),b
  4233  0145D8  D003               	goto	l2158
  4234  0145DA                     l2156:
  4235                           
  4236                           ; BSR set to: 0
  4237  0145DA  0100               	movlb	0	; () banked
  4238  0145DC  69D7               	setf	irobot_rotate@rotateAngle& (0+255),b
  4239  0145DE  69D8               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  4240  0145E0                     l2158:
  4241                           
  4242                           ; BSR set to: 0
  4243                           ;iRobotSerial.c: 285: if (isScript) {
  4244                           
  4245                           ; BSR set to: 0
  4246  0145E0  0100               	movlb	0	; () banked
  4247  0145E2  51DC               	movf	irobot_rotate@isScript& (0+255),w,b
  4248  0145E4  0100               	movlb	0	; () banked
  4249  0145E6  B4D8               	btfsc	status,2,c
  4250  0145E8  D00C               	goto	l2159
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;iRobotSerial.c: 286: irobot_move(1, rotateSpeed, rotateDirection);
  4254  0145EA  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4255  0145EE  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4256  0145F2  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4257  0145F6  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4258  0145FA  0E01               	movlw	1
  4259  0145FC  EC27  F0A2         	call	_irobot_move
  4260                           
  4261                           ;iRobotSerial.c: 287: }
  4262  014600  0012               	return	
  4263  014602                     l2159:
  4264                           
  4265                           ;iRobotSerial.c: 288: else {
  4266                           ;iRobotSerial.c: 289: irobot_move(0, rotateSpeed, rotateDirection);
  4267  014602  C0D9  F0CA         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  4268  014606  C0DA  F0CB         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  4269  01460A  C0DF  F0CC         	movff	irobot_rotate@rotateDirection,irobot_move@moveTurnRadius
  4270  01460E  C0E0  F0CD         	movff	irobot_rotate@rotateDirection+1,irobot_move@moveTurnRadius+1
  4271  014612  0E00               	movlw	0
  4272  014614  EC27  F0A2         	call	_irobot_move
  4273                           
  4274                           ;iRobotSerial.c: 290: while (angleTotal < rotateAngle) {
  4275  014618  D00A               	goto	l2161
  4276  01461A                     
  4277                           ;iRobotSerial.c: 291: update_angle();
  4278  01461A  EC0A  F0B3         	call	_update_angle	;wreg free
  4279                           
  4280                           ;iRobotSerial.c: 292: angleTotal += iRAngle;
  4281  01461E  0100               	movlb	0	; () banked
  4282  014620  5177               	movf	_iRAngle& (0+255),w,b
  4283  014622  0100               	movlb	0	; () banked
  4284  014624  27DD               	addwf	irobot_rotate@angleTotal& (0+255),f,b
  4285  014626  0100               	movlb	0	; () banked
  4286  014628  5178               	movf	(_iRAngle+1)& (0+255),w,b
  4287  01462A  0100               	movlb	0	; () banked
  4288  01462C  23DE               	addwfc	(irobot_rotate@angleTotal+1)& (0+255),f,b
  4289  01462E                     l2161:
  4290                           
  4291                           ; BSR set to: 0
  4292  01462E  0100               	movlb	0	; () banked
  4293  014630  51D7               	movf	irobot_rotate@rotateAngle& (0+255),w,b
  4294  014632  0100               	movlb	0	; () banked
  4295  014634  5DDD               	subwf	irobot_rotate@angleTotal& (0+255),w,b
  4296  014636  0100               	movlb	0	; () banked
  4297  014638  51DE               	movf	(irobot_rotate@angleTotal+1)& (0+255),w,b
  4298  01463A  0A80               	xorlw	128
  4299  01463C  0100               	movlb	0	; () banked
  4300  01463E  6FDB               	movwf	??_irobot_rotate& (0+255),b
  4301  014640  0100               	movlb	0	; () banked
  4302  014642  51D8               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  4303  014644  0A80               	xorlw	128
  4304  014646  0100               	movlb	0	; () banked
  4305  014648  59DB               	subwfb	??_irobot_rotate& (0+255),w,b
  4306  01464A  A0D8               	btfss	status,0,c
  4307  01464C  D7E6               	goto	l2162
  4308                           
  4309                           ; BSR set to: 0
  4310                           ;iRobotSerial.c: 293: }
  4311                           ;iRobotSerial.c: 294: irobot_stop_motion(0);
  4312                           
  4313                           ; BSR set to: 0
  4314  01464E  0E00               	movlw	0
  4315  014650  ECA0  F0AE         	call	_irobot_stop_motion
  4316  014654  0012               	return	
  4317  014656                     __end_of_irobot_rotate:
  4318                           	opt stack 0
  4319                           tblptru	equ	0xFF8
  4320                           tblptrh	equ	0xFF7
  4321                           tblptrl	equ	0xFF6
  4322                           tablat	equ	0xFF5
  4323                           postinc0	equ	0xFEE
  4324                           wreg	equ	0xFE8
  4325                           postdec1	equ	0xFE5
  4326                           fsr1h	equ	0xFE2
  4327                           fsr1l	equ	0xFE1
  4328                           status	equ	0xFD8
  4329                           
  4330 ;; *************** function _mode2 *****************
  4331 ;; Defined at:
  4332 ;;		line 285 in file "main.c"
  4333 ;; Parameters:    Size  Location     Type
  4334 ;;		None
  4335 ;; Auto vars:     Size  Location     Type
  4336 ;;  dist            2   44[BANK0 ] int 
  4337 ;; Return value:  Size  Location     Type
  4338 ;;                  1    wreg      void 
  4339 ;; Registers used:
  4340 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4341 ;; Tracked objects:
  4342 ;;		On entry : 0/0
  4343 ;;		On exit  : 0/0
  4344 ;;		Unchanged: 0/0
  4345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4346 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4347 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4349 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4350 ;;Total ram usage:        2 bytes
  4351 ;; Hardware stack levels used:    1
  4352 ;; Hardware stack levels required when called:   17
  4353 ;; This function calls:
  4354 ;;		_Console_Render
  4355 ;;		_MXK_Dequeue
  4356 ;;		_MXK_Release
  4357 ;;		_MXK_SwitchTo
  4358 ;;		_irobot_move_straight
  4359 ;;		_irobot_stop_motion
  4360 ;;		_printf
  4361 ;;		_safeToGo
  4362 ;;		_update_distance
  4363 ;; This function is called by:
  4364 ;;		_main
  4365 ;; This function uses a non-reentrant model
  4366 ;;
  4367                           
  4368                           	psect	text6
  4369  01392E                     __ptext6:
  4370                           	opt stack 0
  4371  01392E                     _mode2:
  4372                           	opt stack 13
  4373                           
  4374                           ;main.c: 286: safeToGo();
  4375                           
  4376                           ;incstack = 0
  4377  01392E  ECEA  F0AD         	call	_safeToGo	;wreg free
  4378                           
  4379                           ;main.c: 287: if (MXK_SwitchTo(eMXK_HMI)) {
  4380  013932  0E01               	movlw	1
  4381  013934  EC2B  F0AF         	call	_MXK_SwitchTo
  4382  013938  0900               	iorlw	0
  4383  01393A  B4D8               	btfsc	status,2,c
  4384  01393C  0012               	return	
  4385                           
  4386                           ;main.c: 288: printf("%c", (char)35);
  4387  01393E  0EFB               	movlw	low STR_1
  4388  013940  0100               	movlb	0	; () banked
  4389  013942  6FCF               	movwf	printf@f& (0+255),b
  4390  013944  0EFF               	movlw	high STR_1
  4391  013946  0100               	movlb	0	; () banked
  4392  013948  6FD0               	movwf	(printf@f+1)& (0+255),b
  4393  01394A  0E00               	movlw	0
  4394  01394C  0100               	movlb	0	; () banked
  4395  01394E  6FD2               	movwf	(?_printf+3)& (0+255),b
  4396  013950  0E23               	movlw	35
  4397  013952  6FD1               	movwf	(?_printf+2)& (0+255),b
  4398  013954  EC58  F092         	call	_printf	;wreg free
  4399                           
  4400                           ;main.c: 289: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4401  013958  0E95               	movlw	low STR_4
  4402  01395A  0100               	movlb	0	; () banked
  4403  01395C  6FCF               	movwf	printf@f& (0+255),b
  4404  01395E  0EFF               	movlw	high STR_4
  4405  013960  0100               	movlb	0	; () banked
  4406  013962  6FD0               	movwf	(printf@f+1)& (0+255),b
  4407  013964  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4408  013968  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4409  01396C  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4410  013970  0100               	movlb	0	; () banked
  4411  013972  6BD4               	clrf	(?_printf+5)& (0+255),b
  4412  013974  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4413  013978  0100               	movlb	0	; () banked
  4414  01397A  6BD6               	clrf	(?_printf+7)& (0+255),b
  4415  01397C  EC58  F092         	call	_printf	;wreg free
  4416                           
  4417                           ;main.c: 290: Console_Render();
  4418  013980  EC6C  F08F         	call	_Console_Render	;wreg free
  4419                           
  4420                           ;main.c: 292: int dist = 0;
  4421  013984  0E00               	movlw	0
  4422  013986  0100               	movlb	0	; () banked
  4423  013988  6FE7               	movwf	(mode2@dist+1)& (0+255),b
  4424  01398A  0E00               	movlw	0
  4425  01398C  6FE6               	movwf	mode2@dist& (0+255),b
  4426                           
  4427                           ; BSR set to: 0
  4428                           ;main.c: 293: irobot_move_straight(200);
  4429  01398E  0E00               	movlw	0
  4430  013990  0100               	movlb	0	; () banked
  4431  013992  6FD4               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  4432  013994  0EC8               	movlw	200
  4433  013996  6FD3               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  4434  013998  EC82  F0B2         	call	_irobot_move_straight	;wreg free
  4435                           
  4436                           ;main.c: 294: while (dist < 5000) {
  4437  01399C  D025               	goto	l2378
  4438  01399E                     
  4439                           ;main.c: 295: update_distance();
  4440  01399E  EC01  F0B3         	call	_update_distance	;wreg free
  4441                           
  4442                           ;main.c: 296: dist += iRDistance;
  4443  0139A2  0100               	movlb	0	; () banked
  4444  0139A4  5179               	movf	_iRDistance& (0+255),w,b
  4445  0139A6  0100               	movlb	0	; () banked
  4446  0139A8  27E6               	addwf	mode2@dist& (0+255),f,b
  4447  0139AA  0100               	movlb	0	; () banked
  4448  0139AC  517A               	movf	(_iRDistance+1)& (0+255),w,b
  4449  0139AE  0100               	movlb	0	; () banked
  4450  0139B0  23E7               	addwfc	(mode2@dist+1)& (0+255),f,b
  4451                           
  4452                           ; BSR set to: 0
  4453                           ;main.c: 297: printf("%c", (char)35);
  4454  0139B2  0EFB               	movlw	low STR_1
  4455  0139B4  0100               	movlb	0	; () banked
  4456  0139B6  6FCF               	movwf	printf@f& (0+255),b
  4457  0139B8  0EFF               	movlw	high STR_1
  4458  0139BA  0100               	movlb	0	; () banked
  4459  0139BC  6FD0               	movwf	(printf@f+1)& (0+255),b
  4460  0139BE  0E00               	movlw	0
  4461  0139C0  0100               	movlb	0	; () banked
  4462  0139C2  6FD2               	movwf	(?_printf+3)& (0+255),b
  4463  0139C4  0E23               	movlw	35
  4464  0139C6  6FD1               	movwf	(?_printf+2)& (0+255),b
  4465  0139C8  EC58  F092         	call	_printf	;wreg free
  4466                           
  4467                           ;main.c: 298: printf("Distance: %d\n", dist);
  4468  0139CC  0EED               	movlw	low STR_8
  4469  0139CE  0100               	movlb	0	; () banked
  4470  0139D0  6FCF               	movwf	printf@f& (0+255),b
  4471  0139D2  0EFF               	movlw	high STR_8
  4472  0139D4  0100               	movlb	0	; () banked
  4473  0139D6  6FD0               	movwf	(printf@f+1)& (0+255),b
  4474  0139D8  C0E6  F0D1         	movff	mode2@dist,?_printf+2
  4475  0139DC  C0E7  F0D2         	movff	mode2@dist+1,?_printf+3
  4476  0139E0  EC58  F092         	call	_printf	;wreg free
  4477                           
  4478                           ;main.c: 299: Console_Render();
  4479  0139E4  EC6C  F08F         	call	_Console_Render	;wreg free
  4480  0139E8                     l2378:
  4481  0139E8  0100               	movlb	0	; () banked
  4482  0139EA  BFE7               	btfsc	(mode2@dist+1)& (0+255),7,b
  4483  0139EC  D7D8               	goto	l2379
  4484  0139EE  0E88               	movlw	136
  4485  0139F0  0100               	movlb	0	; () banked
  4486  0139F2  5DE6               	subwf	mode2@dist& (0+255),w,b
  4487  0139F4  0E13               	movlw	19
  4488  0139F6  0100               	movlb	0	; () banked
  4489  0139F8  59E7               	subwfb	(mode2@dist+1)& (0+255),w,b
  4490  0139FA  A0D8               	btfss	status,0,c
  4491  0139FC  D7D0               	goto	l2379
  4492                           
  4493                           ; BSR set to: 0
  4494                           ;main.c: 300: }
  4495                           ;main.c: 301: irobot_stop_motion(0);
  4496                           
  4497                           ; BSR set to: 0
  4498  0139FE  0E00               	movlw	0
  4499  013A00  ECA0  F0AE         	call	_irobot_stop_motion
  4500                           
  4501                           ;main.c: 303: if (MXK_Release())
  4502  013A04  EC59  F0B2         	call	_MXK_Release	;wreg free
  4503  013A08  0900               	iorlw	0
  4504  013A0A  B4D8               	btfsc	status,2,c
  4505  013A0C  0012               	return	
  4506                           
  4507                           ;main.c: 304: MXK_Dequeue();
  4508  013A0E  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  4509  013A12  0012               	return	
  4510  013A14                     __end_of_mode2:
  4511                           	opt stack 0
  4512                           tblptru	equ	0xFF8
  4513                           tblptrh	equ	0xFF7
  4514                           tblptrl	equ	0xFF6
  4515                           tablat	equ	0xFF5
  4516                           postinc0	equ	0xFEE
  4517                           wreg	equ	0xFE8
  4518                           postdec1	equ	0xFE5
  4519                           fsr1h	equ	0xFE2
  4520                           fsr1l	equ	0xFE1
  4521                           status	equ	0xFD8
  4522                           
  4523 ;; *************** function _irobot_move_straight *****************
  4524 ;; Defined at:
  4525 ;;		line 314 in file "Library/iRobotSerial.c"
  4526 ;; Parameters:    Size  Location     Type
  4527 ;;  straightSpee    2   25[BANK0 ] short 
  4528 ;; Auto vars:     Size  Location     Type
  4529 ;;		None
  4530 ;; Return value:  Size  Location     Type
  4531 ;;                  1    wreg      void 
  4532 ;; Registers used:
  4533 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  4534 ;; Tracked objects:
  4535 ;;		On entry : 0/0
  4536 ;;		On exit  : 0/0
  4537 ;;		Unchanged: 0/0
  4538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4539 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4540 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4541 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4542 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4543 ;;Total ram usage:        2 bytes
  4544 ;; Hardware stack levels used:    1
  4545 ;; Hardware stack levels required when called:    9
  4546 ;; This function calls:
  4547 ;;		_irobot_move
  4548 ;; This function is called by:
  4549 ;;		_move_and_rotate
  4550 ;;		_mode2
  4551 ;;		_mode4
  4552 ;; This function uses a non-reentrant model
  4553 ;;
  4554                           
  4555                           	psect	text7
  4556  016504                     __ptext7:
  4557                           	opt stack 0
  4558  016504                     _irobot_move_straight:
  4559                           	opt stack 20
  4560                           
  4561                           ;iRobotSerial.c: 315: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  4562                           
  4563                           ;incstack = 0
  4564  016504  C0D3  F0CA         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  4565  016508  C0D4  F0CB         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  4566  01650C  0E7F               	movlw	127
  4567  01650E  0100               	movlb	0	; () banked
  4568  016510  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  4569  016512  69CC               	setf	irobot_move@moveTurnRadius& (0+255),b
  4570  016514  0E00               	movlw	0
  4571  016516  EC27  F0A2         	call	_irobot_move
  4572  01651A  0012               	return		;funcret
  4573  01651C                     __end_of_irobot_move_straight:
  4574                           	opt stack 0
  4575                           tblptru	equ	0xFF8
  4576                           tblptrh	equ	0xFF7
  4577                           tblptrl	equ	0xFF6
  4578                           tablat	equ	0xFF5
  4579                           postinc0	equ	0xFEE
  4580                           wreg	equ	0xFE8
  4581                           postdec1	equ	0xFE5
  4582                           fsr1h	equ	0xFE2
  4583                           fsr1l	equ	0xFE1
  4584                           status	equ	0xFD8
  4585                           
  4586 ;; *************** function _mode1 *****************
  4587 ;; Defined at:
  4588 ;;		line 215 in file "main.c"
  4589 ;; Parameters:    Size  Location     Type
  4590 ;;		None
  4591 ;; Auto vars:     Size  Location     Type
  4592 ;;  moveto          2    2[BANK3 ] int 
  4593 ;; Return value:  Size  Location     Type
  4594 ;;                  1    wreg      void 
  4595 ;; Registers used:
  4596 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  4597 ;; Tracked objects:
  4598 ;;		On entry : 0/0
  4599 ;;		On exit  : 0/0
  4600 ;;		Unchanged: 0/0
  4601 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4602 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4603 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4604 ;;      Temps:          0       0       0       0       2       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4605 ;;      Totals:         0       0       0       0       8       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4606 ;;Total ram usage:        8 bytes
  4607 ;; Hardware stack levels used:    1
  4608 ;; Hardware stack levels required when called:   17
  4609 ;; This function calls:
  4610 ;;		_ADC_Start
  4611 ;;		_ADC_Voltage
  4612 ;;		_Console_Render
  4613 ;;		_HMI_Render
  4614 ;;		_HMI_SetNumber
  4615 ;;		_MXK_Dequeue
  4616 ;;		_MXK_Release
  4617 ;;		_MXK_SwitchTo
  4618 ;;		_Motor_Move
  4619 ;;		_Motor_Speed
  4620 ;;		___fldiv
  4621 ;;		___fltol
  4622 ;;		_printf
  4623 ;;		_safeToGo
  4624 ;; This function is called by:
  4625 ;;		_main
  4626 ;; This function uses a non-reentrant model
  4627 ;;
  4628                           
  4629                           	psect	text8
  4630  0108C4                     __ptext8:
  4631                           	opt stack 0
  4632  0108C4                     _mode1:
  4633                           	opt stack 13
  4634                           
  4635                           ;main.c: 216: safeToGo();
  4636                           
  4637                           ;incstack = 0
  4638  0108C4  ECEA  F0AD         	call	_safeToGo	;wreg free
  4639                           
  4640                           ;main.c: 217: if (MXK_SwitchTo(eMXK_HMI)) {
  4641  0108C8  0E01               	movlw	1
  4642  0108CA  EC2B  F0AF         	call	_MXK_SwitchTo
  4643  0108CE  0900               	iorlw	0
  4644  0108D0  B4D8               	btfsc	status,2,c
  4645  0108D2  D029               	goto	l2352
  4646                           
  4647                           ;main.c: 218: printf("%c", (char)35);
  4648  0108D4  0EFB               	movlw	low STR_1
  4649  0108D6  0100               	movlb	0	; () banked
  4650  0108D8  6FCF               	movwf	printf@f& (0+255),b
  4651  0108DA  0EFF               	movlw	high STR_1
  4652  0108DC  0100               	movlb	0	; () banked
  4653  0108DE  6FD0               	movwf	(printf@f+1)& (0+255),b
  4654  0108E0  0E00               	movlw	0
  4655  0108E2  0100               	movlb	0	; () banked
  4656  0108E4  6FD2               	movwf	(?_printf+3)& (0+255),b
  4657  0108E6  0E23               	movlw	35
  4658  0108E8  6FD1               	movwf	(?_printf+2)& (0+255),b
  4659  0108EA  EC58  F092         	call	_printf	;wreg free
  4660                           
  4661                           ;main.c: 219: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, 
      +                          iRBumpLeft, iRBumpRight);
  4662  0108EE  0E95               	movlw	low STR_4
  4663  0108F0  0100               	movlb	0	; () banked
  4664  0108F2  6FCF               	movwf	printf@f& (0+255),b
  4665  0108F4  0EFF               	movlw	high STR_4
  4666  0108F6  0100               	movlb	0	; () banked
  4667  0108F8  6FD0               	movwf	(printf@f+1)& (0+255),b
  4668  0108FA  C075  F0D1         	movff	_distanceTotal,?_printf+2
  4669  0108FE  C076  F0D2         	movff	_distanceTotal+1,?_printf+3
  4670  010902  C087  F0D3         	movff	_iRBumpLeft,?_printf+4
  4671  010906  0100               	movlb	0	; () banked
  4672  010908  6BD4               	clrf	(?_printf+5)& (0+255),b
  4673  01090A  C088  F0D5         	movff	_iRBumpRight,?_printf+6
  4674  01090E  0100               	movlb	0	; () banked
  4675  010910  6BD6               	clrf	(?_printf+7)& (0+255),b
  4676  010912  EC58  F092         	call	_printf	;wreg free
  4677                           
  4678                           ;main.c: 220: Console_Render();
  4679  010916  EC6C  F08F         	call	_Console_Render	;wreg free
  4680                           
  4681                           ;main.c: 221: if (MXK_Release())
  4682  01091A  EC59  F0B2         	call	_MXK_Release	;wreg free
  4683  01091E  0900               	iorlw	0
  4684  010920  A4D8               	btfss	status,2,c
  4685                           
  4686                           ;main.c: 222: MXK_Dequeue();
  4687  010922  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  4688  010926                     l2352:
  4689                           
  4690                           ;main.c: 223: }
  4691                           ;main.c: 224: StepRotate = 0;
  4692  010926  0E00               	movlw	0
  4693  010928  0100               	movlb	0	; () banked
  4694  01092A  6F72               	movwf	(_StepRotate+1)& (0+255),b
  4695  01092C  0E00               	movlw	0
  4696  01092E  6F71               	movwf	_StepRotate& (0+255),b
  4697                           
  4698                           ; BSR set to: 0
  4699                           ;main.c: 225: MinDist = 1000;
  4700  010930  0E03               	movlw	3
  4701  010932  0100               	movlb	0	; () banked
  4702  010934  6FFC               	movwf	(_MinDist+1)& (0+255),b
  4703  010936  0EE8               	movlw	232
  4704  010938  6FFB               	movwf	_MinDist& (0+255),b
  4705                           
  4706                           ; BSR set to: 0
  4707                           ;main.c: 226: Stepstomin = 0;
  4708  01093A  0E00               	movlw	0
  4709  01093C  0100               	movlb	0	; () banked
  4710  01093E  6F70               	movwf	(_Stepstomin+1)& (0+255),b
  4711  010940  0E00               	movlw	0
  4712  010942  6F6F               	movwf	_Stepstomin& (0+255),b
  4713                           
  4714                           ; BSR set to: 0
  4715                           ;main.c: 227: IRValue = 0;
  4716  010944  0E00               	movlw	0
  4717  010946  0100               	movlb	0	; () banked
  4718  010948  6F6E               	movwf	(_IRValue+1)& (0+255),b
  4719  01094A  0E00               	movlw	0
  4720  01094C  6F6D               	movwf	_IRValue& (0+255),b
  4721                           
  4722                           ; BSR set to: 0
  4723                           ;main.c: 228: TimerX = 8;
  4724  01094E  0E00               	movlw	0
  4725  010950  0100               	movlb	0	; () banked
  4726  010952  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4727  010954  0E08               	movlw	8
  4728  010956  6FF9               	movwf	_TimerX& (0+255),b
  4729                           
  4730                           ;main.c: 229: while (StepRotate < 400) {
  4731  010958  D0F9               	goto	u13690
  4732  01095A                     
  4733                           ; BSR set to: 0
  4734                           ;main.c: 230: StepRotate++;
  4735                           
  4736                           ; BSR set to: 0
  4737  01095A  0100               	movlb	0	; () banked
  4738  01095C  4B71               	infsnz	_StepRotate& (0+255),f,b
  4739  01095E  2B72               	incf	(_StepRotate+1)& (0+255),f,b
  4740                           
  4741                           ; BSR set to: 0
  4742                           ;main.c: 231: ADC_Start(&ADC_AN0);
  4743  010960  0EB5               	movlw	low _ADC_AN0
  4744  010962  0100               	movlb	0	; () banked
  4745  010964  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4746  010966  0E00               	movlw	high _ADC_AN0
  4747  010968  0100               	movlb	0	; () banked
  4748  01096A  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4749  01096C  ECBD  F0A7         	call	_ADC_Start	;wreg free
  4750                           
  4751                           ;main.c: 232: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4752  010970  0EB5               	movlw	low _ADC_AN0
  4753  010972  0100               	movlb	0	; () banked
  4754  010974  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4755  010976  0E00               	movlw	high _ADC_AN0
  4756  010978  0100               	movlb	0	; () banked
  4757  01097A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4758  01097C  EC7A  F09D         	call	_ADC_Voltage	;wreg free
  4759  010980  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  4760  010984  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  4761  010988  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  4762  01098C  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  4763                           
  4764                           ;main.c: 232: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4765  010990  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  4766  010994  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  4767  010998  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  4768  01099C  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  4769  0109A0  0E00               	movlw	0
  4770  0109A2  0100               	movlb	0	; () banked
  4771  0109A4  6FBA               	movwf	___fldiv@b& (0+255),b
  4772  0109A6  0E00               	movlw	0
  4773  0109A8  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4774  0109AA  0E6C               	movlw	108
  4775  0109AC  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4776  0109AE  0E42               	movlw	66
  4777  0109B0  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4778  0109B2  EC2D  F088         	call	___fldiv	;wreg free
  4779  0109B6  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4780  0109BA  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4781  0109BE  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4782  0109C2  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4783  0109C6  EC19  F09B         	call	___fltol	;wreg free
  4784  0109CA  C0F3  F06D         	movff	?___fltol,_IRValue
  4785  0109CE  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4786                           
  4787                           ;main.c: 233: if (MXK_SwitchTo(eMXK_HMI)) {
  4788  0109D2  0E01               	movlw	1
  4789  0109D4  EC2B  F0AF         	call	_MXK_SwitchTo
  4790  0109D8  0900               	iorlw	0
  4791  0109DA  B4D8               	btfsc	status,2,c
  4792  0109DC  D00E               	goto	l2356
  4793                           
  4794                           ;main.c: 234: HMI_SetNumber(IRValue);
  4795  0109DE  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4796  0109E2  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4797  0109E6  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
  4798                           
  4799                           ;main.c: 235: HMI_Render();
  4800  0109EA  EC8C  F0AF         	call	_HMI_Render	;wreg free
  4801                           
  4802                           ;main.c: 236: if (MXK_Release())
  4803  0109EE  EC59  F0B2         	call	_MXK_Release	;wreg free
  4804  0109F2  0900               	iorlw	0
  4805  0109F4  A4D8               	btfss	status,2,c
  4806                           
  4807                           ;main.c: 237: MXK_Dequeue();
  4808  0109F6  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  4809  0109FA                     l2356:
  4810                           
  4811                           ;main.c: 238: }
  4812                           ;main.c: 239: if (IRValue < MinDist) {
  4813  0109FA  0100               	movlb	0	; () banked
  4814  0109FC  51FB               	movf	_MinDist& (0+255),w,b
  4815  0109FE  0100               	movlb	0	; () banked
  4816  010A00  5D6D               	subwf	_IRValue& (0+255),w,b
  4817  010A02  0100               	movlb	0	; () banked
  4818  010A04  516E               	movf	(_IRValue+1)& (0+255),w,b
  4819  010A06  0A80               	xorlw	128
  4820  010A08  0103               	movlb	3	; () banked
  4821  010A0A  6FF6               	movwf	??_mode1& (0+255),b
  4822  010A0C  0100               	movlb	0	; () banked
  4823  010A0E  51FC               	movf	(_MinDist+1)& (0+255),w,b
  4824  010A10  0A80               	xorlw	128
  4825  010A12  0103               	movlb	3	; () banked
  4826  010A14  59F6               	subwfb	??_mode1& (0+255),w,b
  4827  010A16  B0D8               	btfsc	status,0,c
  4828  010A18  D008               	goto	l2357
  4829                           
  4830                           ; BSR set to: 3
  4831                           ;main.c: 240: MinDist = IRValue;
  4832  010A1A  C06D  F0FB         	movff	_IRValue,_MinDist
  4833  010A1E  C06E  F0FC         	movff	_IRValue+1,_MinDist+1
  4834                           
  4835                           ;main.c: 241: Stepstomin = StepRotate;
  4836  010A22  C071  F06F         	movff	_StepRotate,_Stepstomin
  4837  010A26  C072  F070         	movff	_StepRotate+1,_Stepstomin+1
  4838  010A2A                     l2357:
  4839                           
  4840                           ; BSR set to: 3
  4841                           ;main.c: 242: }
  4842                           ;main.c: 243: if (MXK_SwitchTo(eMXK_Motor)) {
  4843                           
  4844                           ; BSR set to: 3
  4845  010A2A  0E08               	movlw	8
  4846  010A2C  EC2B  F0AF         	call	_MXK_SwitchTo
  4847  010A30  0900               	iorlw	0
  4848  010A32  B4D8               	btfsc	status,2,c
  4849  010A34  D020               	goto	l2359
  4850                           
  4851                           ;main.c: 244: Motor_Speed(&Stepper, (50));
  4852  010A36  0EAF               	movlw	low _Stepper
  4853  010A38  0100               	movlb	0	; () banked
  4854  010A3A  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  4855  010A3C  0E00               	movlw	high _Stepper
  4856  010A3E  0100               	movlb	0	; () banked
  4857  010A40  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  4858  010A42  0E00               	movlw	0
  4859  010A44  0100               	movlb	0	; () banked
  4860  010A46  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  4861  010A48  0E32               	movlw	50
  4862  010A4A  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  4863  010A4C  EC3F  F0B1         	call	_Motor_Speed	;wreg free
  4864                           
  4865                           ;main.c: 245: Motor_Move(&Stepper, 1);
  4866  010A50  0EAF               	movlw	low _Stepper
  4867  010A52  0100               	movlb	0	; () banked
  4868  010A54  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  4869  010A56  0E00               	movlw	high _Stepper
  4870  010A58  0100               	movlb	0	; () banked
  4871  010A5A  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  4872  010A5C  0E00               	movlw	0
  4873  010A5E  0100               	movlb	0	; () banked
  4874  010A60  6FC0               	movwf	(Motor_Move@pDelta+1)& (0+255),b
  4875  010A62  0E01               	movlw	1
  4876  010A64  6FBF               	movwf	Motor_Move@pDelta& (0+255),b
  4877  010A66  EC43  F0B0         	call	_Motor_Move	;wreg free
  4878                           
  4879                           ;main.c: 246: if (MXK_Release())
  4880  010A6A  EC59  F0B2         	call	_MXK_Release	;wreg free
  4881  010A6E  0900               	iorlw	0
  4882  010A70  A4D8               	btfss	status,2,c
  4883                           
  4884                           ;main.c: 247: MXK_Dequeue();
  4885  010A72  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  4886  010A76                     l2359:
  4887                           
  4888                           ;main.c: 248: }
  4889                           ;main.c: 249: TimerX = 10;
  4890  010A76  0E00               	movlw	0
  4891  010A78  0100               	movlb	0	; () banked
  4892  010A7A  6FFA               	movwf	(_TimerX+1)& (0+255),b
  4893  010A7C  0E0A               	movlw	10
  4894  010A7E  6FF9               	movwf	_TimerX& (0+255),b
  4895                           
  4896                           ; BSR set to: 0
  4897                           ;main.c: 250: if (TimerX > 0) {
  4898  010A80  0100               	movlb	0	; () banked
  4899  010A82  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4900  010A84  D063               	goto	u13690
  4901  010A86  0100               	movlb	0	; () banked
  4902  010A88  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4903  010A8A  E156               	bnz	l16433
  4904  010A8C  0100               	movlb	0	; () banked
  4905  010A8E  05F9               	decf	_TimerX& (0+255),w,b
  4906  010A90  B0D8               	btfsc	status,0,c
  4907  010A92  D052               	goto	l2361
  4908  010A94  D05B               	goto	u13690
  4909  010A96                     l16415:
  4910                           
  4911                           ; BSR set to: 0
  4912                           ;main.c: 252: ADC_Start(&ADC_AN0);
  4913  010A96  0EB5               	movlw	low _ADC_AN0
  4914  010A98  0100               	movlb	0	; () banked
  4915  010A9A  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  4916  010A9C  0E00               	movlw	high _ADC_AN0
  4917  010A9E  0100               	movlb	0	; () banked
  4918  010AA0  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  4919  010AA2  ECBD  F0A7         	call	_ADC_Start	;wreg free
  4920                           
  4921                           ;main.c: 253: if (MXK_SwitchTo(eMXK_HMI)) {
  4922  010AA6  0E01               	movlw	1
  4923  010AA8  EC2B  F0AF         	call	_MXK_SwitchTo
  4924  010AAC  0900               	iorlw	0
  4925  010AAE  B4D8               	btfsc	status,2,c
  4926  010AB0  D00E               	goto	l2364
  4927                           
  4928                           ;main.c: 254: HMI_SetNumber(IRValue);
  4929  010AB2  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  4930  010AB6  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  4931  010ABA  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
  4932                           
  4933                           ;main.c: 255: HMI_Render();
  4934  010ABE  EC8C  F0AF         	call	_HMI_Render	;wreg free
  4935                           
  4936                           ;main.c: 256: if (MXK_Release())
  4937  010AC2  EC59  F0B2         	call	_MXK_Release	;wreg free
  4938  010AC6  0900               	iorlw	0
  4939  010AC8  A4D8               	btfss	status,2,c
  4940                           
  4941                           ;main.c: 257: MXK_Dequeue();
  4942  010ACA  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  4943  010ACE                     l2364:
  4944                           
  4945                           ;main.c: 258: }
  4946                           ;main.c: 259: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4947  010ACE  0EB5               	movlw	low _ADC_AN0
  4948  010AD0  0100               	movlb	0	; () banked
  4949  010AD2  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  4950  010AD4  0E00               	movlw	high _ADC_AN0
  4951  010AD6  0100               	movlb	0	; () banked
  4952  010AD8  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  4953  010ADA  EC7A  F09D         	call	_ADC_Voltage	;wreg free
  4954  010ADE  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  4955  010AE2  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  4956  010AE6  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  4957  010AEA  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  4958                           
  4959                           ;main.c: 258: }
  4960                           ;main.c: 259: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  4961  010AEE  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  4962  010AF2  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  4963  010AF6  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  4964  010AFA  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  4965  010AFE  0E00               	movlw	0
  4966  010B00  0100               	movlb	0	; () banked
  4967  010B02  6FBA               	movwf	___fldiv@b& (0+255),b
  4968  010B04  0E00               	movlw	0
  4969  010B06  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  4970  010B08  0E6C               	movlw	108
  4971  010B0A  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  4972  010B0C  0E42               	movlw	66
  4973  010B0E  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  4974  010B10  EC2D  F088         	call	___fldiv	;wreg free
  4975  010B14  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  4976  010B18  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  4977  010B1C  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  4978  010B20  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  4979  010B24  EC19  F09B         	call	___fltol	;wreg free
  4980  010B28  C0F3  F06D         	movff	?___fltol,_IRValue
  4981  010B2C  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  4982                           
  4983                           ;main.c: 260: TimerX--;
  4984  010B30  0100               	movlb	0	; () banked
  4985  010B32  07F9               	decf	_TimerX& (0+255),f,b
  4986  010B34  A0D8               	btfss	status,0,c
  4987  010B36  07FA               	decf	(_TimerX+1)& (0+255),f,b
  4988  010B38                     l2361:
  4989  010B38                     l16433:
  4990                           
  4991                           ; BSR set to: 0
  4992  010B38  0100               	movlb	0	; () banked
  4993  010B3A  BFFA               	btfsc	(_TimerX+1)& (0+255),7,b
  4994  010B3C  D007               	goto	u13690
  4995  010B3E  0100               	movlb	0	; () banked
  4996  010B40  51FA               	movf	(_TimerX+1)& (0+255),w,b
  4997  010B42  E1A9               	bnz	l16415
  4998  010B44  0100               	movlb	0	; () banked
  4999  010B46  05F9               	decf	_TimerX& (0+255),w,b
  5000  010B48  B0D8               	btfsc	status,0,c
  5001  010B4A  D7A5               	goto	l2362
  5002  010B4C                     u13690:
  5003                           
  5004                           ; BSR set to: 0
  5005                           
  5006                           ; BSR set to: 0
  5007                           
  5008                           ; BSR set to: 0
  5009                           
  5010                           ; BSR set to: 0
  5011  010B4C  0100               	movlb	0	; () banked
  5012  010B4E  BF72               	btfsc	(_StepRotate+1)& (0+255),7,b
  5013  010B50  D704               	goto	l2354
  5014  010B52  0E90               	movlw	144
  5015  010B54  0100               	movlb	0	; () banked
  5016  010B56  5D71               	subwf	_StepRotate& (0+255),w,b
  5017  010B58  0E01               	movlw	1
  5018  010B5A  0100               	movlb	0	; () banked
  5019  010B5C  5972               	subwfb	(_StepRotate+1)& (0+255),w,b
  5020  010B5E  A0D8               	btfss	status,0,c
  5021  010B60  D6FC               	goto	l2354
  5022                           
  5023                           ; BSR set to: 0
  5024                           ;main.c: 261: }
  5025                           ;main.c: 262: }
  5026                           ;main.c: 263: }
  5027                           ;main.c: 264: if (MXK_SwitchTo(eMXK_Motor)) {
  5028                           
  5029                           ; BSR set to: 0
  5030  010B62  0E08               	movlw	8
  5031  010B64  EC2B  F0AF         	call	_MXK_SwitchTo
  5032  010B68  0900               	iorlw	0
  5033  010B6A  B4D8               	btfsc	status,2,c
  5034  010B6C  D08A               	goto	l2369
  5035                           
  5036                           ;main.c: 265: Motor_Speed(&Stepper, (50));
  5037  010B6E  0EAF               	movlw	low _Stepper
  5038  010B70  0100               	movlb	0	; () banked
  5039  010B72  6FD5               	movwf	Motor_Speed@pMotor& (0+255),b
  5040  010B74  0E00               	movlw	high _Stepper
  5041  010B76  0100               	movlb	0	; () banked
  5042  010B78  6FD6               	movwf	(Motor_Speed@pMotor+1)& (0+255),b
  5043  010B7A  0E00               	movlw	0
  5044  010B7C  0100               	movlb	0	; () banked
  5045  010B7E  6FD8               	movwf	(Motor_Speed@pFrequency+1)& (0+255),b
  5046  010B80  0E32               	movlw	50
  5047  010B82  6FD7               	movwf	Motor_Speed@pFrequency& (0+255),b
  5048  010B84  EC3F  F0B1         	call	_Motor_Speed	;wreg free
  5049                           
  5050                           ;main.c: 266: int moveto = 400 - Stepstomin;
  5051  010B88  C06F  F3F6         	movff	_Stepstomin,??_mode1
  5052  010B8C  C070  F3F7         	movff	_Stepstomin+1,??_mode1+1
  5053  010B90  0103               	movlb	3	; () banked
  5054  010B92  1FF6               	comf	??_mode1& (0+255),f,b
  5055  010B94  1FF7               	comf	(??_mode1+1)& (0+255),f,b
  5056  010B96  4BF6               	infsnz	??_mode1& (0+255),f,b
  5057  010B98  2BF7               	incf	(??_mode1+1)& (0+255),f,b
  5058  010B9A  0E90               	movlw	144
  5059  010B9C  0103               	movlb	3	; () banked
  5060  010B9E  25F6               	addwf	??_mode1& (0+255),w,b
  5061  010BA0  0103               	movlb	3	; () banked
  5062  010BA2  6FF8               	movwf	mode1@moveto& (0+255),b
  5063  010BA4  0E01               	movlw	1
  5064  010BA6  0103               	movlb	3	; () banked
  5065  010BA8  21F7               	addwfc	(??_mode1+1)& (0+255),w,b
  5066  010BAA  0103               	movlb	3	; () banked
  5067  010BAC  6FF9               	movwf	(mode1@moveto+1)& (0+255),b
  5068                           
  5069                           ; BSR set to: 3
  5070                           ;main.c: 268: Motor_Move(&Stepper, (-moveto));
  5071  010BAE  0EAF               	movlw	low _Stepper
  5072  010BB0  0100               	movlb	0	; () banked
  5073  010BB2  6FBD               	movwf	Motor_Move@pMotor& (0+255),b
  5074  010BB4  0E00               	movlw	high _Stepper
  5075  010BB6  0100               	movlb	0	; () banked
  5076  010BB8  6FBE               	movwf	(Motor_Move@pMotor+1)& (0+255),b
  5077  010BBA  C3F8  F3F6         	movff	mode1@moveto,??_mode1
  5078  010BBE  C3F9  F3F7         	movff	mode1@moveto+1,??_mode1+1
  5079  010BC2  0103               	movlb	3	; () banked
  5080  010BC4  1FF6               	comf	??_mode1& (0+255),f,b
  5081  010BC6  1FF7               	comf	(??_mode1+1)& (0+255),f,b
  5082  010BC8  4BF6               	infsnz	??_mode1& (0+255),f,b
  5083  010BCA  2BF7               	incf	(??_mode1+1)& (0+255),f,b
  5084  010BCC  C3F6  F0BF         	movff	??_mode1,Motor_Move@pDelta
  5085  010BD0  C3F7  F0C0         	movff	??_mode1+1,Motor_Move@pDelta+1
  5086  010BD4  EC43  F0B0         	call	_Motor_Move	;wreg free
  5087                           
  5088                           ;main.c: 269: if (MXK_Release())
  5089  010BD8  EC59  F0B2         	call	_MXK_Release	;wreg free
  5090  010BDC  0900               	iorlw	0
  5091  010BDE  B4D8               	btfsc	status,2,c
  5092  010BE0  D050               	goto	l2369
  5093                           
  5094                           ;main.c: 270: MXK_Dequeue();
  5095  010BE2  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  5096                           
  5097                           ;main.c: 271: }
  5098                           ;main.c: 272: while (Stepper.mDelta > 0) {
  5099  010BE6  D04D               	goto	l2369
  5100  010BE8                     l16449:
  5101                           
  5102                           ;main.c: 273: ADC_Start(&ADC_AN0);
  5103  010BE8  0EB5               	movlw	low _ADC_AN0
  5104  010BEA  0100               	movlb	0	; () banked
  5105  010BEC  6FBC               	movwf	ADC_Start@pInput& (0+255),b
  5106  010BEE  0E00               	movlw	high _ADC_AN0
  5107  010BF0  0100               	movlb	0	; () banked
  5108  010BF2  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
  5109  010BF4  ECBD  F0A7         	call	_ADC_Start	;wreg free
  5110                           
  5111                           ;main.c: 274: if (MXK_SwitchTo(eMXK_HMI)) {
  5112  010BF8  0E01               	movlw	1
  5113  010BFA  EC2B  F0AF         	call	_MXK_SwitchTo
  5114  010BFE  0900               	iorlw	0
  5115  010C00  B4D8               	btfsc	status,2,c
  5116  010C02  D00E               	goto	l2372
  5117                           
  5118                           ;main.c: 275: HMI_SetNumber(IRValue);
  5119  010C04  C06D  F0D0         	movff	_IRValue,HMI_SetNumber@pInput
  5120  010C08  C06E  F0D1         	movff	_IRValue+1,HMI_SetNumber@pInput+1
  5121  010C0C  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
  5122                           
  5123                           ;main.c: 276: HMI_Render();
  5124  010C10  EC8C  F0AF         	call	_HMI_Render	;wreg free
  5125                           
  5126                           ;main.c: 277: if (MXK_Release())
  5127  010C14  EC59  F0B2         	call	_MXK_Release	;wreg free
  5128  010C18  0900               	iorlw	0
  5129  010C1A  A4D8               	btfss	status,2,c
  5130                           
  5131                           ;main.c: 278: MXK_Dequeue();
  5132  010C1C  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
  5133  010C20                     l2372:
  5134                           
  5135                           ;main.c: 279: }
  5136                           ;main.c: 280: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5137  010C20  0EB5               	movlw	low _ADC_AN0
  5138  010C22  0100               	movlb	0	; () banked
  5139  010C24  6FE1               	movwf	ADC_Voltage@pInput& (0+255),b
  5140  010C26  0E00               	movlw	high _ADC_AN0
  5141  010C28  0100               	movlb	0	; () banked
  5142  010C2A  6FE2               	movwf	(ADC_Voltage@pInput+1)& (0+255),b
  5143  010C2C  EC7A  F09D         	call	_ADC_Voltage	;wreg free
  5144  010C30  C0E1  F3FA         	movff	?_ADC_Voltage,_mode1$15600
  5145  010C34  C0E2  F3FB         	movff	?_ADC_Voltage+1,_mode1$15600+1
  5146  010C38  C0E3  F3FC         	movff	?_ADC_Voltage+2,_mode1$15600+2
  5147  010C3C  C0E4  F3FD         	movff	?_ADC_Voltage+3,_mode1$15600+3
  5148                           
  5149                           ;main.c: 279: }
  5150                           ;main.c: 280: IRValue = (59 / ADC_Voltage(&ADC_AN0));
  5151  010C40  C3FA  F0BE         	movff	_mode1$15600,___fldiv@a
  5152  010C44  C3FB  F0BF         	movff	_mode1$15600+1,___fldiv@a+1
  5153  010C48  C3FC  F0C0         	movff	_mode1$15600+2,___fldiv@a+2
  5154  010C4C  C3FD  F0C1         	movff	_mode1$15600+3,___fldiv@a+3
  5155  010C50  0E00               	movlw	0
  5156  010C52  0100               	movlb	0	; () banked
  5157  010C54  6FBA               	movwf	___fldiv@b& (0+255),b
  5158  010C56  0E00               	movlw	0
  5159  010C58  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
  5160  010C5A  0E6C               	movlw	108
  5161  010C5C  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
  5162  010C5E  0E42               	movlw	66
  5163  010C60  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
  5164  010C62  EC2D  F088         	call	___fldiv	;wreg free
  5165  010C66  C0BA  F0F3         	movff	?___fldiv,___fltol@f1
  5166  010C6A  C0BB  F0F4         	movff	?___fldiv+1,___fltol@f1+1
  5167  010C6E  C0BC  F0F5         	movff	?___fldiv+2,___fltol@f1+2
  5168  010C72  C0BD  F0F6         	movff	?___fldiv+3,___fltol@f1+3
  5169  010C76  EC19  F09B         	call	___fltol	;wreg free
  5170  010C7A  C0F3  F06D         	movff	?___fltol,_IRValue
  5171  010C7E  C0F4  F06E         	movff	?___fltol+1,_IRValue+1
  5172  010C82                     l2369:
  5173  010C82  0100               	movlb	0	; () banked
  5174  010C84  BFB0               	btfsc	(_Stepper+1)& (0+255),7,b
  5175  010C86  0012               	return	
  5176  010C88  0100               	movlb	0	; () banked
  5177  010C8A  51B0               	movf	(_Stepper+1)& (0+255),w,b
  5178  010C8C  E1AD               	bnz	l16449
  5179  010C8E  0100               	movlb	0	; () banked
  5180  010C90  05AF               	decf	_Stepper& (0+255),w,b
  5181  010C92  A0D8               	btfss	status,0,c
  5182  010C94  0012               	return	
  5183  010C96  D7A8               	goto	l2370
  5184  010C98                     __end_of_mode1:
  5185                           	opt stack 0
  5186                           tblptru	equ	0xFF8
  5187                           tblptrh	equ	0xFF7
  5188                           tblptrl	equ	0xFF6
  5189                           tablat	equ	0xFF5
  5190                           postinc0	equ	0xFEE
  5191                           wreg	equ	0xFE8
  5192                           postdec1	equ	0xFE5
  5193                           fsr1h	equ	0xFE2
  5194                           fsr1l	equ	0xFE1
  5195                           status	equ	0xFD8
  5196                           
  5197 ;; *************** function _safeToGo *****************
  5198 ;; Defined at:
  5199 ;;		line 123 in file "main.c"
  5200 ;; Parameters:    Size  Location     Type
  5201 ;;		None
  5202 ;; Auto vars:     Size  Location     Type
  5203 ;;		None
  5204 ;; Return value:  Size  Location     Type
  5205 ;;                  1    wreg      void 
  5206 ;; Registers used:
  5207 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  5208 ;; Tracked objects:
  5209 ;;		On entry : 0/0
  5210 ;;		On exit  : 0/0
  5211 ;;		Unchanged: 0/0
  5212 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5213 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5214 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5215 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5216 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5217 ;;Total ram usage:        0 bytes
  5218 ;; Hardware stack levels used:    1
  5219 ;; Hardware stack levels required when called:   16
  5220 ;; This function calls:
  5221 ;;		_HMI_Poll
  5222 ;;		_irobot_song_play
  5223 ;;		_irobot_stop_motion
  5224 ;;		_update_angle
  5225 ;;		_update_bump_and_cliff
  5226 ;;		_update_distance
  5227 ;; This function is called by:
  5228 ;;		_mode1
  5229 ;;		_mode2
  5230 ;;		_mode3
  5231 ;;		_mode4
  5232 ;; This function uses a non-reentrant model
  5233 ;;
  5234                           
  5235                           	psect	text9
  5236  015BD4                     __ptext9:
  5237                           	opt stack 0
  5238  015BD4                     _safeToGo:
  5239                           	opt stack 13
  5240                           
  5241                           ;main.c: 124: update_bump_and_cliff();
  5242                           
  5243                           ; BSR set to: 0
  5244                           ;incstack = 0
  5245  015BD4  EC26  F0B0         	call	_update_bump_and_cliff	;wreg free
  5246                           
  5247                           ;main.c: 125: update_distance();
  5248  015BD8  EC01  F0B3         	call	_update_distance	;wreg free
  5249                           
  5250                           ;main.c: 126: update_angle();
  5251  015BDC  EC0A  F0B3         	call	_update_angle	;wreg free
  5252                           
  5253                           ;main.c: 127: if (iRBumpLeft || iRBumpRight) {
  5254  015BE0  0100               	movlb	0	; () banked
  5255  015BE2  5187               	movf	_iRBumpLeft& (0+255),w,b
  5256  015BE4  A4D8               	btfss	status,2,c
  5257  015BE6  D004               	goto	u11260
  5258                           
  5259                           ; BSR set to: 0
  5260  015BE8  0100               	movlb	0	; () banked
  5261  015BEA  5188               	movf	_iRBumpRight& (0+255),w,b
  5262  015BEC  B4D8               	btfsc	status,2,c
  5263  015BEE  D006               	goto	l2318
  5264  015BF0                     u11260:
  5265                           
  5266                           ; BSR set to: 0
  5267                           ;main.c: 128: irobot_song_play(0);
  5268                           
  5269                           ; BSR set to: 0
  5270  015BF0  0E00               	movlw	0
  5271  015BF2  ECED  F0B2         	call	_irobot_song_play
  5272                           
  5273                           ;main.c: 129: irobot_stop_motion(0);
  5274  015BF6  0E00               	movlw	0
  5275  015BF8  ECA0  F0AE         	call	_irobot_stop_motion
  5276  015BFC                     l2318:
  5277                           
  5278                           ;main.c: 130: }
  5279                           ;main.c: 131: if (angleTotal > 83) {
  5280  015BFC  0100               	movlb	0	; () banked
  5281  015BFE  BF74               	btfsc	(_angleTotal+1)& (0+255),7,b
  5282  015C00  D00B               	goto	l2321
  5283  015C02  0100               	movlb	0	; () banked
  5284  015C04  5174               	movf	(_angleTotal+1)& (0+255),w,b
  5285  015C06  E105               	bnz	u11270
  5286  015C08  0E54               	movlw	84
  5287  015C0A  0100               	movlb	0	; () banked
  5288  015C0C  5D73               	subwf	_angleTotal& (0+255),w,b
  5289  015C0E  A0D8               	btfss	status,0,c
  5290  015C10  D003               	goto	l2321
  5291  015C12                     u11270:
  5292                           
  5293                           ; BSR set to: 0
  5294                           ;main.c: 132: irobot_stop_motion(0);
  5295  015C12  0E00               	movlw	0
  5296  015C14  ECA0  F0AE         	call	_irobot_stop_motion
  5297  015C18                     l2321:
  5298                           
  5299                           ;main.c: 133: }
  5300                           ;main.c: 134: HMI_Poll();
  5301  015C18  EC21  F0AA         	call	_HMI_Poll	;wreg free
  5302  015C1C  0012               	return		;funcret
  5303  015C1E                     __end_of_safeToGo:
  5304                           	opt stack 0
  5305                           tblptru	equ	0xFF8
  5306                           tblptrh	equ	0xFF7
  5307                           tblptrl	equ	0xFF6
  5308                           tablat	equ	0xFF5
  5309                           postinc0	equ	0xFEE
  5310                           wreg	equ	0xFE8
  5311                           postdec1	equ	0xFE5
  5312                           fsr1h	equ	0xFE2
  5313                           fsr1l	equ	0xFE1
  5314                           status	equ	0xFD8
  5315                           
  5316 ;; *************** function _update_distance *****************
  5317 ;; Defined at:
  5318 ;;		line 326 in file "Library/iRobotSerial.c"
  5319 ;; Parameters:    Size  Location     Type
  5320 ;;		None
  5321 ;; Auto vars:     Size  Location     Type
  5322 ;;		None
  5323 ;; Return value:  Size  Location     Type
  5324 ;;                  1    wreg      void 
  5325 ;; Registers used:
  5326 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5327 ;; Tracked objects:
  5328 ;;		On entry : 0/0
  5329 ;;		On exit  : 0/0
  5330 ;;		Unchanged: 0/0
  5331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5335 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5336 ;;Total ram usage:        0 bytes
  5337 ;; Hardware stack levels used:    1
  5338 ;; Hardware stack levels required when called:   10
  5339 ;; This function calls:
  5340 ;;		_irobot_query_and_update
  5341 ;; This function is called by:
  5342 ;;		_safeToGo
  5343 ;;		_move_and_rotate
  5344 ;;		_mode2
  5345 ;;		_mode4
  5346 ;; This function uses a non-reentrant model
  5347 ;;
  5348                           
  5349                           	psect	text10
  5350  016602                     __ptext10:
  5351                           	opt stack 0
  5352  016602                     _update_distance:
  5353                           	opt stack 19
  5354                           
  5355                           ;iRobotSerial.c: 327: irobot_query_and_update(1, iR_PKT_DISTANCE);
  5356                           
  5357                           ;incstack = 0
  5358  016602  0E00               	movlw	0
  5359  016604  0100               	movlb	0	; () banked
  5360  016606  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5361  016608  0E13               	movlw	19
  5362  01660A  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5363  01660C  0E01               	movlw	1
  5364  01660E  ECB1  F095         	call	_irobot_query_and_update
  5365  016612  0012               	return		;funcret
  5366  016614                     __end_of_update_distance:
  5367                           	opt stack 0
  5368                           tblptru	equ	0xFF8
  5369                           tblptrh	equ	0xFF7
  5370                           tblptrl	equ	0xFF6
  5371                           tablat	equ	0xFF5
  5372                           postinc0	equ	0xFEE
  5373                           wreg	equ	0xFE8
  5374                           postdec1	equ	0xFE5
  5375                           fsr1h	equ	0xFE2
  5376                           fsr1l	equ	0xFE1
  5377                           status	equ	0xFD8
  5378                           
  5379 ;; *************** function _update_bump_and_cliff *****************
  5380 ;; Defined at:
  5381 ;;		line 319 in file "Library/iRobotSerial.c"
  5382 ;; Parameters:    Size  Location     Type
  5383 ;;		None
  5384 ;; Auto vars:     Size  Location     Type
  5385 ;;		None
  5386 ;; Return value:  Size  Location     Type
  5387 ;;                  1    wreg      void 
  5388 ;; Registers used:
  5389 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5390 ;; Tracked objects:
  5391 ;;		On entry : 0/0
  5392 ;;		On exit  : 0/0
  5393 ;;		Unchanged: 0/0
  5394 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5395 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5396 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5397 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5398 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5399 ;;Total ram usage:        0 bytes
  5400 ;; Hardware stack levels used:    1
  5401 ;; Hardware stack levels required when called:   10
  5402 ;; This function calls:
  5403 ;;		_irobot_query_and_update
  5404 ;; This function is called by:
  5405 ;;		_safeToGo
  5406 ;;		_mode4
  5407 ;; This function uses a non-reentrant model
  5408 ;;
  5409                           
  5410                           	psect	text11
  5411  01604C                     __ptext11:
  5412                           	opt stack 0
  5413  01604C                     _update_bump_and_cliff:
  5414                           	opt stack 19
  5415                           
  5416                           ;iRobotSerial.c: 320: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  5417                           ;iRobotSerial.c: 321: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  5418                           ;iRobotSerial.c: 322: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  5419                           
  5420                           ;incstack = 0
  5421  01604C  0E00               	movlw	0
  5422  01604E  0100               	movlb	0	; () banked
  5423  016050  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5424  016052  0E07               	movlw	7
  5425  016054  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5426  016056  0E00               	movlw	0
  5427  016058  0100               	movlb	0	; () banked
  5428  01605A  6FC3               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  5429  01605C  0E09               	movlw	9
  5430  01605E  6FC2               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  5431  016060  0E00               	movlw	0
  5432  016062  0100               	movlb	0	; () banked
  5433  016064  6FC5               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  5434  016066  0E0A               	movlw	10
  5435  016068  6FC4               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  5436  01606A  0E00               	movlw	0
  5437  01606C  0100               	movlb	0	; () banked
  5438  01606E  6FC7               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  5439  016070  0E0B               	movlw	11
  5440  016072  6FC6               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  5441  016074  0E00               	movlw	0
  5442  016076  0100               	movlb	0	; () banked
  5443  016078  6FC9               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  5444  01607A  0E0C               	movlw	12
  5445  01607C  6FC8               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  5446  01607E  0E05               	movlw	5
  5447  016080  ECB1  F095         	call	_irobot_query_and_update
  5448  016084  0012               	return		;funcret
  5449  016086                     __end_of_update_bump_and_cliff:
  5450                           	opt stack 0
  5451                           tblptru	equ	0xFF8
  5452                           tblptrh	equ	0xFF7
  5453                           tblptrl	equ	0xFF6
  5454                           tablat	equ	0xFF5
  5455                           postinc0	equ	0xFEE
  5456                           wreg	equ	0xFE8
  5457                           postdec1	equ	0xFE5
  5458                           fsr1h	equ	0xFE2
  5459                           fsr1l	equ	0xFE1
  5460                           status	equ	0xFD8
  5461                           
  5462 ;; *************** function _update_angle *****************
  5463 ;; Defined at:
  5464 ;;		line 331 in file "Library/iRobotSerial.c"
  5465 ;; Parameters:    Size  Location     Type
  5466 ;;		None
  5467 ;; Auto vars:     Size  Location     Type
  5468 ;;		None
  5469 ;; Return value:  Size  Location     Type
  5470 ;;                  1    wreg      void 
  5471 ;; Registers used:
  5472 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5473 ;; Tracked objects:
  5474 ;;		On entry : 0/0
  5475 ;;		On exit  : 0/0
  5476 ;;		Unchanged: 0/0
  5477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5478 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5481 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5482 ;;Total ram usage:        0 bytes
  5483 ;; Hardware stack levels used:    1
  5484 ;; Hardware stack levels required when called:   10
  5485 ;; This function calls:
  5486 ;;		_irobot_query_and_update
  5487 ;; This function is called by:
  5488 ;;		_irobot_rotate
  5489 ;;		_safeToGo
  5490 ;; This function uses a non-reentrant model
  5491 ;;
  5492                           
  5493                           	psect	text12
  5494  016614                     __ptext12:
  5495                           	opt stack 0
  5496  016614                     _update_angle:
  5497                           	opt stack 18
  5498                           
  5499                           ;iRobotSerial.c: 332: irobot_query_and_update(1, iR_PKT_ANGLE);
  5500                           
  5501                           ;incstack = 0
  5502  016614  0E00               	movlw	0
  5503  016616  0100               	movlb	0	; () banked
  5504  016618  6FC1               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  5505  01661A  0E14               	movlw	20
  5506  01661C  6FC0               	movwf	?_irobot_query_and_update& (0+255),b
  5507  01661E  0E01               	movlw	1
  5508  016620  ECB1  F095         	call	_irobot_query_and_update
  5509  016624  0012               	return		;funcret
  5510  016626                     __end_of_update_angle:
  5511                           	opt stack 0
  5512                           tblptru	equ	0xFF8
  5513                           tblptrh	equ	0xFF7
  5514                           tblptrl	equ	0xFF6
  5515                           tablat	equ	0xFF5
  5516                           postinc0	equ	0xFEE
  5517                           wreg	equ	0xFE8
  5518                           postdec1	equ	0xFE5
  5519                           fsr1h	equ	0xFE2
  5520                           fsr1l	equ	0xFE1
  5521                           status	equ	0xFD8
  5522                           
  5523 ;; *************** function _irobot_query_and_update *****************
  5524 ;; Defined at:
  5525 ;;		line 130 in file "Library/iRobotSerial.c"
  5526 ;; Parameters:    Size  Location     Type
  5527 ;;  numberOfPack    1    wreg     unsigned char 
  5528 ;; Auto vars:     Size  Location     Type
  5529 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  5530 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  5531 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  5532 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  5533 ;;		 -> ?_irobot_query_and_update(1), 
  5534 ;;  i               1   28[BANK0 ] unsigned char 
  5535 ;;  startIndex      1   27[BANK0 ] unsigned char 
  5536 ;;  j               1   26[BANK0 ] unsigned char 
  5537 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  5538 ;;  streamSize      1   23[BANK0 ] unsigned char 
  5539 ;; Return value:  Size  Location     Type
  5540 ;;                  1    wreg      void 
  5541 ;; Registers used:
  5542 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5543 ;; Tracked objects:
  5544 ;;		On entry : 0/0
  5545 ;;		On exit  : 0/0
  5546 ;;		Unchanged: 0/0
  5547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5548 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5549 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5550 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5551 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5552 ;;Total ram usage:      535 bytes
  5553 ;; Hardware stack levels used:    1
  5554 ;; Hardware stack levels required when called:    9
  5555 ;; This function calls:
  5556 ;;		_eusart_getch
  5557 ;;		_eusart_putch
  5558 ;;		_get_packet_size
  5559 ;;		_rx_assign
  5560 ;; This function is called by:
  5561 ;;		_update_bump_and_cliff
  5562 ;;		_update_distance
  5563 ;;		_update_angle
  5564 ;; This function uses a non-reentrant model
  5565 ;;
  5566                           
  5567                           	psect	text13
  5568  012B62                     __ptext13:
  5569                           	opt stack 0
  5570  012B62                     _irobot_query_and_update:
  5571                           	opt stack 19
  5572                           
  5573                           ;incstack = 0
  5574                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  5575  012B62  0100               	movlb	0	; () banked
  5576  012B64  6FD2               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  5577                           
  5578                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  5579  012B66  0E00               	movlw	0
  5580  012B68  0100               	movlb	0	; () banked
  5581  012B6A  6FD1               	movwf	irobot_query_and_update@streamSize& (0+255),b
  5582  012B6C  0E00               	movlw	0
  5583  012B6E  0100               	movlb	0	; () banked
  5584  012B70  6FD5               	movwf	irobot_query_and_update@startIndex& (0+255),b
  5585                           
  5586                           ;iRobotSerial.c: 133: va_list packetIDs;
  5587                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  5588  012B72  0EC0               	movlw	low ?_irobot_query_and_update
  5589  012B74  0100               	movlb	0	; () banked
  5590  012B76  6FCF               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  5591  012B78  0E00               	movlw	high ?_irobot_query_and_update
  5592  012B7A  0100               	movlb	0	; () banked
  5593  012B7C  6FD0               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  5594                           
  5595                           ; BSR set to: 0
  5596                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  5597  012B7E  0E95               	movlw	149
  5598  012B80  EC2A  F0B3         	call	_eusart_putch
  5599                           
  5600                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  5601  012B84  0100               	movlb	0	; () banked
  5602  012B86  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5603  012B88  EC2A  F0B3         	call	_eusart_putch
  5604                           
  5605                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++){
  5606  012B8C  0E00               	movlw	0
  5607  012B8E  0100               	movlb	0	; () banked
  5608  012B90  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5609  012B92  D023               	goto	l2095
  5610  012B94                     
  5611                           ; BSR set to: 0
  5612                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  5613                           
  5614                           ; BSR set to: 0
  5615  012B94  C0CF  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  5616  012B98  C0D0  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  5617  012B9C  50DF               	movf	indf2,w,c
  5618  012B9E  0100               	movlb	0	; () banked
  5619  012BA0  6FD3               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  5620                           
  5621                           ; BSR set to: 0
  5622  012BA2  0E02               	movlw	2
  5623  012BA4  0100               	movlb	0	; () banked
  5624  012BA6  27CF               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  5625  012BA8  0E00               	movlw	0
  5626  012BAA  23D0               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  5627                           
  5628                           ; BSR set to: 0
  5629                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  5630  012BAC  0100               	movlb	0	; () banked
  5631  012BAE  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5632  012BB0  EC9E  F0AB         	call	_get_packet_size
  5633  012BB4  0100               	movlb	0	; () banked
  5634  012BB6  27D1               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  5635                           
  5636                           ; BSR set to: 0
  5637                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  5638  012BB8  0100               	movlb	0	; () banked
  5639  012BBA  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5640  012BBC  0D01               	mullw	1
  5641  012BBE  0E00               	movlw	low irobot_query_and_update@TXArray
  5642  012BC0  24F3               	addwf	prodl,w,c
  5643  012BC2  6ED9               	movwf	fsr2l,c
  5644  012BC4  0E02               	movlw	high irobot_query_and_update@TXArray
  5645  012BC6  20F4               	addwfc	prodh,w,c
  5646  012BC8  6EDA               	movwf	fsr2h,c
  5647  012BCA  C0D3  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  5648                           
  5649                           ; BSR set to: 0
  5650                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  5651  012BCE  0100               	movlb	0	; () banked
  5652  012BD0  51D3               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  5653  012BD2  EC2A  F0B3         	call	_eusart_putch
  5654  012BD6  0100               	movlb	0	; () banked
  5655  012BD8  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5656  012BDA                     l2095:
  5657                           
  5658                           ; BSR set to: 0
  5659                           
  5660                           ; BSR set to: 0
  5661  012BDA  0100               	movlb	0	; () banked
  5662  012BDC  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5663  012BDE  0100               	movlb	0	; () banked
  5664  012BE0  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5665  012BE2  A0D8               	btfss	status,0,c
  5666  012BE4  D7D7               	goto	l2096
  5667                           
  5668                           ; BSR set to: 0
  5669                           ;iRobotSerial.c: 142: }
  5670                           ;iRobotSerial.c: 143: ;
  5671                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++){RXArray[i] = eusart_getch();}
  5672                           
  5673                           ; BSR set to: 0
  5674  012BE6  0E00               	movlw	0
  5675  012BE8  0100               	movlb	0	; () banked
  5676  012BEA  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5677  012BEC  D00E               	goto	l2098
  5678  012BEE                     
  5679                           ; BSR set to: 0
  5680                           
  5681                           ; BSR set to: 0
  5682  012BEE  0100               	movlb	0	; () banked
  5683  012BF0  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5684  012BF2  0D01               	mullw	1
  5685  012BF4  0E00               	movlw	low irobot_query_and_update@RXArray
  5686  012BF6  24F3               	addwf	prodl,w,c
  5687  012BF8  6ED9               	movwf	fsr2l,c
  5688  012BFA  0E01               	movlw	high irobot_query_and_update@RXArray
  5689  012BFC  20F4               	addwfc	prodh,w,c
  5690  012BFE  6EDA               	movwf	fsr2h,c
  5691  012C00  EC6D  F0B3         	call	_eusart_getch	;wreg free
  5692  012C04  6EDF               	movwf	indf2,c
  5693  012C06  0100               	movlb	0	; () banked
  5694  012C08  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5695  012C0A                     l2098:
  5696                           
  5697                           ; BSR set to: 0
  5698                           
  5699                           ; BSR set to: 0
  5700  012C0A  0100               	movlb	0	; () banked
  5701  012C0C  51D1               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  5702  012C0E  0100               	movlb	0	; () banked
  5703  012C10  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5704  012C12  A0D8               	btfss	status,0,c
  5705  012C14  D7EC               	goto	l2099
  5706                           
  5707                           ; BSR set to: 0
  5708                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++){
  5709                           
  5710                           ; BSR set to: 0
  5711  012C16  0E00               	movlw	0
  5712  012C18  0100               	movlb	0	; () banked
  5713  012C1A  6FD6               	movwf	irobot_query_and_update@i& (0+255),b
  5714  012C1C  D05E               	goto	l2101
  5715  012C1E                     l2102:
  5716                           
  5717                           ; BSR set to: 0
  5718                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++){
  5719  012C1E  C0D5  F0D4         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  5720  012C22  D021               	goto	l2103
  5721  012C24                     
  5722                           ; BSR set to: 0
  5723                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  5724                           
  5725                           ; BSR set to: 0
  5726  012C24  0100               	movlb	0	; () banked
  5727  012C26  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5728  012C28  0D01               	mullw	1
  5729  012C2A  0E00               	movlw	low irobot_query_and_update@RXArray
  5730  012C2C  24F3               	addwf	prodl,w,c
  5731  012C2E  6ED9               	movwf	fsr2l,c
  5732  012C30  0E01               	movlw	high irobot_query_and_update@RXArray
  5733  012C32  20F4               	addwfc	prodh,w,c
  5734  012C34  6EDA               	movwf	fsr2h,c
  5735  012C36  50DF               	movf	indf2,w,c
  5736  012C38  0100               	movlb	0	; () banked
  5737  012C3A  6FBB               	movwf	rx_assign@packetIDValue& (0+255),b
  5738  012C3C  0100               	movlb	0	; () banked
  5739  012C3E  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5740  012C40  0800               	sublw	0
  5741  012C42  0100               	movlb	0	; () banked
  5742  012C44  25D4               	addwf	irobot_query_and_update@j& (0+255),w,b
  5743  012C46  0100               	movlb	0	; () banked
  5744  012C48  6FBC               	movwf	rx_assign@byteNumber& (0+255),b
  5745  012C4A  0100               	movlb	0	; () banked
  5746  012C4C  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5747  012C4E  0D01               	mullw	1
  5748  012C50  0E00               	movlw	low irobot_query_and_update@TXArray
  5749  012C52  24F3               	addwf	prodl,w,c
  5750  012C54  6ED9               	movwf	fsr2l,c
  5751  012C56  0E02               	movlw	high irobot_query_and_update@TXArray
  5752  012C58  20F4               	addwfc	prodh,w,c
  5753  012C5A  6EDA               	movwf	fsr2h,c
  5754  012C5C  50DF               	movf	indf2,w,c
  5755  012C5E  EC1F  F09C         	call	_rx_assign
  5756  012C62  0100               	movlb	0	; () banked
  5757  012C64  2BD4               	incf	irobot_query_and_update@j& (0+255),f,b
  5758  012C66                     l2103:
  5759                           
  5760                           ; BSR set to: 0
  5761                           
  5762                           ; BSR set to: 0
  5763  012C66  0100               	movlb	0	; () banked
  5764  012C68  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5765  012C6A  0D01               	mullw	1
  5766  012C6C  0E00               	movlw	low irobot_query_and_update@TXArray
  5767  012C6E  24F3               	addwf	prodl,w,c
  5768  012C70  6ED9               	movwf	fsr2l,c
  5769  012C72  0E02               	movlw	high irobot_query_and_update@TXArray
  5770  012C74  20F4               	addwfc	prodh,w,c
  5771  012C76  6EDA               	movwf	fsr2h,c
  5772  012C78  50DF               	movf	indf2,w,c
  5773  012C7A  EC9E  F0AB         	call	_get_packet_size
  5774  012C7E  0100               	movlb	0	; () banked
  5775  012C80  6FCA               	movwf	??_irobot_query_and_update& (0+255),b
  5776  012C82  6BCB               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  5777  012C84  0100               	movlb	0	; () banked
  5778  012C86  51D5               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  5779  012C88  0100               	movlb	0	; () banked
  5780  012C8A  27CA               	addwf	??_irobot_query_and_update& (0+255),f,b
  5781  012C8C  0E00               	movlw	0
  5782  012C8E  23CB               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  5783  012C90  0100               	movlb	0	; () banked
  5784  012C92  51D4               	movf	irobot_query_and_update@j& (0+255),w,b
  5785  012C94  0100               	movlb	0	; () banked
  5786  012C96  6FCC               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  5787  012C98  6BCD               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  5788  012C9A  0100               	movlb	0	; () banked
  5789  012C9C  51CA               	movf	??_irobot_query_and_update& (0+255),w,b
  5790  012C9E  0100               	movlb	0	; () banked
  5791  012CA0  5DCC               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  5792  012CA2  0100               	movlb	0	; () banked
  5793  012CA4  51CD               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  5794  012CA6  0A80               	xorlw	128
  5795  012CA8  0100               	movlb	0	; () banked
  5796  012CAA  6FCE               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  5797  012CAC  0100               	movlb	0	; () banked
  5798  012CAE  51CB               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  5799  012CB0  0A80               	xorlw	128
  5800  012CB2  0100               	movlb	0	; () banked
  5801  012CB4  59CE               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  5802  012CB6  A0D8               	btfss	status,0,c
  5803  012CB8  D7B5               	goto	l2104
  5804                           
  5805                           ; BSR set to: 0
  5806                           ;iRobotSerial.c: 150: }
  5807                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  5808                           
  5809                           ; BSR set to: 0
  5810  012CBA  0100               	movlb	0	; () banked
  5811  012CBC  51D6               	movf	irobot_query_and_update@i& (0+255),w,b
  5812  012CBE  0D01               	mullw	1
  5813  012CC0  0E00               	movlw	low irobot_query_and_update@TXArray
  5814  012CC2  24F3               	addwf	prodl,w,c
  5815  012CC4  6ED9               	movwf	fsr2l,c
  5816  012CC6  0E02               	movlw	high irobot_query_and_update@TXArray
  5817  012CC8  20F4               	addwfc	prodh,w,c
  5818  012CCA  6EDA               	movwf	fsr2h,c
  5819  012CCC  50DF               	movf	indf2,w,c
  5820  012CCE  EC9E  F0AB         	call	_get_packet_size
  5821  012CD2  0100               	movlb	0	; () banked
  5822  012CD4  27D5               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  5823                           
  5824                           ; BSR set to: 0
  5825  012CD6  0100               	movlb	0	; () banked
  5826  012CD8  2BD6               	incf	irobot_query_and_update@i& (0+255),f,b
  5827  012CDA                     l2101:
  5828                           
  5829                           ; BSR set to: 0
  5830                           
  5831                           ; BSR set to: 0
  5832  012CDA  0100               	movlb	0	; () banked
  5833  012CDC  51D2               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  5834  012CDE  0100               	movlb	0	; () banked
  5835  012CE0  5DD6               	subwf	irobot_query_and_update@i& (0+255),w,b
  5836  012CE2  B0D8               	btfsc	status,0,c
  5837  012CE4  0012               	return	
  5838  012CE6  D79B               	goto	l2102
  5839  012CE8                     __end_of_irobot_query_and_update:
  5840                           	opt stack 0
  5841                           tblptru	equ	0xFF8
  5842                           tblptrh	equ	0xFF7
  5843                           tblptrl	equ	0xFF6
  5844                           tablat	equ	0xFF5
  5845                           prodh	equ	0xFF4
  5846                           prodl	equ	0xFF3
  5847                           postinc0	equ	0xFEE
  5848                           wreg	equ	0xFE8
  5849                           postdec1	equ	0xFE5
  5850                           fsr1h	equ	0xFE2
  5851                           fsr1l	equ	0xFE1
  5852                           indf2	equ	0xFDF
  5853                           fsr2h	equ	0xFDA
  5854                           fsr2l	equ	0xFD9
  5855                           status	equ	0xFD8
  5856                           
  5857 ;; *************** function _rx_assign *****************
  5858 ;; Defined at:
  5859 ;;		line 74 in file "Library/iRobotSerial.c"
  5860 ;; Parameters:    Size  Location     Type
  5861 ;;  packetID        1    wreg     unsigned char 
  5862 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  5863 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  5864 ;; Auto vars:     Size  Location     Type
  5865 ;;  packetID        1    5[BANK0 ] unsigned char 
  5866 ;; Return value:  Size  Location     Type
  5867 ;;                  1    wreg      void 
  5868 ;; Registers used:
  5869 ;;		wreg, status,2, status,0, cstack
  5870 ;; Tracked objects:
  5871 ;;		On entry : 0/0
  5872 ;;		On exit  : 0/0
  5873 ;;		Unchanged: 0/0
  5874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5875 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5876 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5878 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5879 ;;Total ram usage:        5 bytes
  5880 ;; Hardware stack levels used:    1
  5881 ;; Hardware stack levels required when called:    8
  5882 ;; This function calls:
  5883 ;;		_sort_iRBumpDrop
  5884 ;; This function is called by:
  5885 ;;		_irobot_query_and_update
  5886 ;; This function uses a non-reentrant model
  5887 ;;
  5888                           
  5889                           	psect	text14
  5890  01383E                     __ptext14:
  5891                           	opt stack 0
  5892  01383E                     _rx_assign:
  5893                           	opt stack 19
  5894                           
  5895                           ; BSR set to: 0
  5896                           ;incstack = 0
  5897                           ;rx_assign@packetID stored from wreg
  5898  01383E  0100               	movlb	0	; () banked
  5899  013840  6FBF               	movwf	rx_assign@packetID& (0+255),b
  5900                           
  5901                           ;iRobotSerial.c: 75: switch (packetID){
  5902  013842  D057               	goto	l2035
  5903  013844                     l2036:
  5904                           
  5905                           ; BSR set to: 0
  5906  013844  C0BB  F036         	movff	rx_assign@packetIDValue,_iRBumpDrop
  5907                           
  5908                           ; BSR set to: 0
  5909  013848  ECED  F0A6         	call	_sort_iRBumpDrop	;wreg free
  5910  01384C  0012               	return	
  5911  01384E                     l2038:
  5912                           
  5913                           ; BSR set to: 0
  5914  01384E  C0BB  F035         	movff	rx_assign@packetIDValue,_iRWall
  5915  013852  0012               	return	
  5916  013854                     l2039:
  5917                           
  5918                           ; BSR set to: 0
  5919  013854  C0BB  F034         	movff	rx_assign@packetIDValue,_iRCliffL
  5920  013858  0012               	return	
  5921  01385A                     l2040:
  5922                           
  5923                           ; BSR set to: 0
  5924  01385A  C0BB  F033         	movff	rx_assign@packetIDValue,_iRCliffFL
  5925  01385E  0012               	return	
  5926  013860                     l2041:
  5927                           
  5928                           ; BSR set to: 0
  5929  013860  C0BB  F032         	movff	rx_assign@packetIDValue,_iRCliffFR
  5930  013864  0012               	return	
  5931  013866                     l2042:
  5932                           
  5933                           ; BSR set to: 0
  5934  013866  C0BB  F031         	movff	rx_assign@packetIDValue,_iRCliffR
  5935  01386A  0012               	return	
  5936  01386C                     l2043:
  5937                           
  5938                           ; BSR set to: 0
  5939  01386C  C0BB  F030         	movff	rx_assign@packetIDValue,_iRVirtualWall
  5940  013870  0012               	return	
  5941  013872                     
  5942                           ; BSR set to: 0
  5943                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  5944                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  5945                           
  5946                           ; BSR set to: 0
  5947  013872  0100               	movlb	0	; () banked
  5948  013874  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5949  013876  0100               	movlb	0	; () banked
  5950  013878  A4D8               	btfss	status,2,c
  5951  01387A  D005               	goto	l2046
  5952                           
  5953                           ; BSR set to: 0
  5954  01387C  C0BB  F322         	movff	rx_assign@packetIDValue,_iRDistanceSS
  5955  013880  0103               	movlb	3	; () banked
  5956  013882  6B23               	clrf	(_iRDistanceSS+1)& (0+255),b
  5957  013884  0012               	return	
  5958  013886                     l2046:
  5959                           
  5960                           ; BSR set to: 0
  5961  013886  C0BB  F324         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  5962  01388A  0103               	movlb	3	; () banked
  5963  01388C  6B25               	clrf	(_iRDistanceSS+3)& (0+255),b
  5964                           
  5965                           ; BSR set to: 3
  5966  01388E  0103               	movlb	3	; () banked
  5967  013890  5122               	movf	_iRDistanceSS& (0+255),w,b
  5968  013892  0100               	movlb	0	; () banked
  5969  013894  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  5970  013896  6BBD               	clrf	??_rx_assign& (0+255),b
  5971  013898  0103               	movlb	3	; () banked
  5972  01389A  5124               	movf	(_iRDistanceSS+2)& (0+255),w,b
  5973  01389C  0100               	movlb	0	; () banked
  5974  01389E  25BD               	addwf	??_rx_assign& (0+255),w,b
  5975  0138A0  0100               	movlb	0	; () banked
  5976  0138A2  6F79               	movwf	_iRDistance& (0+255),b
  5977  0138A4  0103               	movlb	3	; () banked
  5978  0138A6  5125               	movf	(_iRDistanceSS+3)& (0+255),w,b
  5979  0138A8  0100               	movlb	0	; () banked
  5980  0138AA  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  5981  0138AC  0100               	movlb	0	; () banked
  5982  0138AE  6F7A               	movwf	(_iRDistance+1)& (0+255),b
  5983                           
  5984                           ; BSR set to: 0
  5985  0138B0  0012               	return	
  5986  0138B2                     
  5987                           ; BSR set to: 0
  5988                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  5989                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  5990                           
  5991                           ; BSR set to: 0
  5992  0138B2  0100               	movlb	0	; () banked
  5993  0138B4  51BC               	movf	rx_assign@byteNumber& (0+255),w,b
  5994  0138B6  0100               	movlb	0	; () banked
  5995  0138B8  A4D8               	btfss	status,2,c
  5996  0138BA  D005               	goto	l2051
  5997                           
  5998                           ; BSR set to: 0
  5999  0138BC  C0BB  F31E         	movff	rx_assign@packetIDValue,_iRAngleSS
  6000  0138C0  0103               	movlb	3	; () banked
  6001  0138C2  6B1F               	clrf	(_iRAngleSS+1)& (0+255),b
  6002  0138C4  0012               	return	
  6003  0138C6                     l2051:
  6004                           
  6005                           ; BSR set to: 0
  6006  0138C6  C0BB  F320         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  6007  0138CA  0103               	movlb	3	; () banked
  6008  0138CC  6B21               	clrf	(_iRAngleSS+3)& (0+255),b
  6009                           
  6010                           ; BSR set to: 3
  6011  0138CE  0103               	movlb	3	; () banked
  6012  0138D0  511E               	movf	_iRAngleSS& (0+255),w,b
  6013  0138D2  0100               	movlb	0	; () banked
  6014  0138D4  6FBE               	movwf	(??_rx_assign+1)& (0+255),b
  6015  0138D6  6BBD               	clrf	??_rx_assign& (0+255),b
  6016  0138D8  0103               	movlb	3	; () banked
  6017  0138DA  5120               	movf	(_iRAngleSS+2)& (0+255),w,b
  6018  0138DC  0100               	movlb	0	; () banked
  6019  0138DE  25BD               	addwf	??_rx_assign& (0+255),w,b
  6020  0138E0  0100               	movlb	0	; () banked
  6021  0138E2  6F77               	movwf	_iRAngle& (0+255),b
  6022  0138E4  0103               	movlb	3	; () banked
  6023  0138E6  5121               	movf	(_iRAngleSS+3)& (0+255),w,b
  6024  0138E8  0100               	movlb	0	; () banked
  6025  0138EA  21BE               	addwfc	(??_rx_assign+1)& (0+255),w,b
  6026  0138EC  0100               	movlb	0	; () banked
  6027  0138EE  6F78               	movwf	(_iRAngle+1)& (0+255),b
  6028                           
  6029                           ; BSR set to: 0
  6030                           ;iRobotSerial.c: 89: }
  6031                           
  6032                           ; BSR set to: 0
  6033  0138F0  0012               	return	
  6034  0138F2                     l2035:
  6035                           
  6036                           ; BSR set to: 0
  6037  0138F2  0100               	movlb	0	; () banked
  6038  0138F4  51BF               	movf	rx_assign@packetID& (0+255),w,b
  6039                           
  6040                           ; Switch size 1, requested type "space"
  6041                           ; Number of cases is 9, Range of values is 7 to 20
  6042                           ; switch strategies available:
  6043                           ; Name         Instructions Cycles
  6044                           ; simple_byte           28    15 (average)
  6045                           ;	Chosen strategy is simple_byte
  6046  0138F6  0A07               	xorlw	7	; case 7
  6047  0138F8  B4D8               	btfsc	status,2,c
  6048  0138FA  D7A4               	goto	l2036
  6049  0138FC  0A0F               	xorlw	15	; case 8
  6050  0138FE  B4D8               	btfsc	status,2,c
  6051  013900  D7A6               	goto	l2038
  6052  013902  0A01               	xorlw	1	; case 9
  6053  013904  B4D8               	btfsc	status,2,c
  6054  013906  D7A6               	goto	l2039
  6055  013908  0A03               	xorlw	3	; case 10
  6056  01390A  B4D8               	btfsc	status,2,c
  6057  01390C  D7A6               	goto	l2040
  6058  01390E  0A01               	xorlw	1	; case 11
  6059  013910  B4D8               	btfsc	status,2,c
  6060  013912  D7A6               	goto	l2041
  6061  013914  0A07               	xorlw	7	; case 12
  6062  013916  B4D8               	btfsc	status,2,c
  6063  013918  D7A6               	goto	l2042
  6064  01391A  0A01               	xorlw	1	; case 13
  6065  01391C  B4D8               	btfsc	status,2,c
  6066  01391E  D7A6               	goto	l2043
  6067  013920  0A1E               	xorlw	30	; case 19
  6068  013922  B4D8               	btfsc	status,2,c
  6069  013924  D7A6               	goto	l2044
  6070  013926  0A07               	xorlw	7	; case 20
  6071  013928  A4D8               	btfss	status,2,c
  6072  01392A  0012               	return	
  6073  01392C  D7C2               	goto	l2049
  6074  01392E                     __end_of_rx_assign:
  6075                           	opt stack 0
  6076                           tblptru	equ	0xFF8
  6077                           tblptrh	equ	0xFF7
  6078                           tblptrl	equ	0xFF6
  6079                           tablat	equ	0xFF5
  6080                           prodh	equ	0xFF4
  6081                           prodl	equ	0xFF3
  6082                           postinc0	equ	0xFEE
  6083                           wreg	equ	0xFE8
  6084                           postdec1	equ	0xFE5
  6085                           fsr1h	equ	0xFE2
  6086                           fsr1l	equ	0xFE1
  6087                           indf2	equ	0xFDF
  6088                           fsr2h	equ	0xFDA
  6089                           fsr2l	equ	0xFD9
  6090                           status	equ	0xFD8
  6091                           
  6092 ;; *************** function _sort_iRBumpDrop *****************
  6093 ;; Defined at:
  6094 ;;		line 92 in file "Library/iRobotSerial.c"
  6095 ;; Parameters:    Size  Location     Type
  6096 ;;		None
  6097 ;; Auto vars:     Size  Location     Type
  6098 ;;		None
  6099 ;; Return value:  Size  Location     Type
  6100 ;;                  1    wreg      void 
  6101 ;; Registers used:
  6102 ;;		wreg, status,2, status,0
  6103 ;; Tracked objects:
  6104 ;;		On entry : 0/0
  6105 ;;		On exit  : 0/0
  6106 ;;		Unchanged: 0/0
  6107 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6108 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6109 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6110 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6111 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6112 ;;Total ram usage:        1 bytes
  6113 ;; Hardware stack levels used:    1
  6114 ;; Hardware stack levels required when called:    7
  6115 ;; This function calls:
  6116 ;;		Nothing
  6117 ;; This function is called by:
  6118 ;;		_rx_assign
  6119 ;; This function uses a non-reentrant model
  6120 ;;
  6121                           
  6122                           	psect	text15
  6123  014DDA                     __ptext15:
  6124                           	opt stack 0
  6125  014DDA                     _sort_iRBumpDrop:
  6126                           	opt stack 19
  6127                           
  6128                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  6129                           
  6130                           ;incstack = 0
  6131  014DDA  A036               	btfss	_iRBumpDrop,0,c
  6132  014DDC  D002               	goto	l2058
  6133  014DDE  0E01               	movlw	1
  6134  014DE0  D001               	goto	L1
  6135  014DE2                     l2058:
  6136                           
  6137                           ; BSR set to: 0
  6138  014DE2  0E00               	movlw	0
  6139  014DE4                     L1:
  6140  014DE4  0100               	movlb	0	; () banked
  6141  014DE6  6F88               	movwf	_iRBumpRight& (0+255),b
  6142                           
  6143                           ; BSR set to: 0
  6144                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  6145                           
  6146                           ; BSR set to: 0
  6147  014DE8  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6148  014DEC  0100               	movlb	0	; () banked
  6149  014DEE  90D8               	bcf	status,0,c
  6150  014DF0  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6151  014DF2  0100               	movlb	0	; () banked
  6152  014DF4  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6153  014DF6  D002               	goto	l2062
  6154                           
  6155                           ; BSR set to: 0
  6156  014DF8  0E01               	movlw	1
  6157  014DFA  D001               	goto	L2
  6158  014DFC                     l2062:
  6159                           
  6160                           ; BSR set to: 0
  6161                           
  6162                           ; BSR set to: 0
  6163  014DFC  0E00               	movlw	0
  6164  014DFE                     L2:
  6165  014DFE  0100               	movlb	0	; () banked
  6166  014E00  6F87               	movwf	_iRBumpLeft& (0+255),b
  6167                           
  6168                           ; BSR set to: 0
  6169                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  6170                           
  6171                           ; BSR set to: 0
  6172  014E02  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6173  014E06  0100               	movlb	0	; () banked
  6174  014E08  90D8               	bcf	status,0,c
  6175  014E0A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6176  014E0C  0100               	movlb	0	; () banked
  6177  014E0E  90D8               	bcf	status,0,c
  6178  014E10  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6179  014E12  0100               	movlb	0	; () banked
  6180  014E14  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6181  014E16  D002               	goto	l2066
  6182                           
  6183                           ; BSR set to: 0
  6184  014E18  0E01               	movlw	1
  6185  014E1A  D001               	goto	L3
  6186  014E1C                     l2066:
  6187                           
  6188                           ; BSR set to: 0
  6189                           
  6190                           ; BSR set to: 0
  6191  014E1C  0E00               	movlw	0
  6192  014E1E                     L3:
  6193  014E1E  0100               	movlb	0	; () banked
  6194  014E20  6F86               	movwf	_iRDropRight& (0+255),b
  6195                           
  6196                           ; BSR set to: 0
  6197                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  6198                           
  6199                           ; BSR set to: 0
  6200  014E22  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6201  014E26  0100               	movlb	0	; () banked
  6202  014E28  90D8               	bcf	status,0,c
  6203  014E2A  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6204  014E2C  0100               	movlb	0	; () banked
  6205  014E2E  90D8               	bcf	status,0,c
  6206  014E30  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6207  014E32  0100               	movlb	0	; () banked
  6208  014E34  90D8               	bcf	status,0,c
  6209  014E36  33BA               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  6210  014E38  0100               	movlb	0	; () banked
  6211  014E3A  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6212  014E3C  D002               	goto	l2070
  6213                           
  6214                           ; BSR set to: 0
  6215  014E3E  0E01               	movlw	1
  6216  014E40  D001               	goto	L4
  6217  014E42                     l2070:
  6218                           
  6219                           ; BSR set to: 0
  6220                           
  6221                           ; BSR set to: 0
  6222  014E42  0E00               	movlw	0
  6223  014E44                     L4:
  6224  014E44  0100               	movlb	0	; () banked
  6225  014E46  6F85               	movwf	_iRDropLeft& (0+255),b
  6226                           
  6227                           ; BSR set to: 0
  6228                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  6229                           
  6230                           ; BSR set to: 0
  6231  014E48  C036  F0BA         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  6232  014E4C  0100               	movlb	0	; () banked
  6233  014E4E  3BBA               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  6234  014E50  0E0F               	movlw	15
  6235  014E52  17BA               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  6236  014E54  0100               	movlb	0	; () banked
  6237  014E56  A1BA               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  6238  014E58  D003               	goto	l2074
  6239                           
  6240                           ; BSR set to: 0
  6241  014E5A  0E01               	movlw	1
  6242  014E5C  6E2F               	movwf	_iRDropCaster,c
  6243  014E5E  0012               	return	
  6244  014E60                     l2074:
  6245                           
  6246                           ; BSR set to: 0
  6247                           
  6248                           ; BSR set to: 0
  6249  014E60  0E00               	movlw	0
  6250  014E62  6E2F               	movwf	_iRDropCaster,c
  6251  014E64  0012               	return	
  6252  014E66                     __end_of_sort_iRBumpDrop:
  6253                           	opt stack 0
  6254                           tblptru	equ	0xFF8
  6255                           tblptrh	equ	0xFF7
  6256                           tblptrl	equ	0xFF6
  6257                           tablat	equ	0xFF5
  6258                           prodh	equ	0xFF4
  6259                           prodl	equ	0xFF3
  6260                           postinc0	equ	0xFEE
  6261                           wreg	equ	0xFE8
  6262                           postdec1	equ	0xFE5
  6263                           fsr1h	equ	0xFE2
  6264                           fsr1l	equ	0xFE1
  6265                           indf2	equ	0xFDF
  6266                           fsr2h	equ	0xFDA
  6267                           fsr2l	equ	0xFD9
  6268                           status	equ	0xFD8
  6269                           
  6270 ;; *************** function _get_packet_size *****************
  6271 ;; Defined at:
  6272 ;;		line 60 in file "Library/iRobotSerial.c"
  6273 ;; Parameters:    Size  Location     Type
  6274 ;;  packetID        1    wreg     unsigned char 
  6275 ;; Auto vars:     Size  Location     Type
  6276 ;;  packetID        1    0[BANK0 ] unsigned char 
  6277 ;; Return value:  Size  Location     Type
  6278 ;;                  1    wreg      unsigned char 
  6279 ;; Registers used:
  6280 ;;		wreg, status,2, status,0
  6281 ;; Tracked objects:
  6282 ;;		On entry : 0/0
  6283 ;;		On exit  : 0/0
  6284 ;;		Unchanged: 0/0
  6285 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6286 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6287 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6288 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6289 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6290 ;;Total ram usage:        1 bytes
  6291 ;; Hardware stack levels used:    1
  6292 ;; Hardware stack levels required when called:    7
  6293 ;; This function calls:
  6294 ;;		Nothing
  6295 ;; This function is called by:
  6296 ;;		_irobot_query_and_update
  6297 ;; This function uses a non-reentrant model
  6298 ;;
  6299                           
  6300                           	psect	text16
  6301  01573C                     __ptext16:
  6302                           	opt stack 0
  6303  01573C                     _get_packet_size:
  6304                           	opt stack 20
  6305                           
  6306                           ; BSR set to: 0
  6307                           ;incstack = 0
  6308                           ;get_packet_size@packetID stored from wreg
  6309  01573C  0100               	movlb	0	; () banked
  6310  01573E  6FBA               	movwf	get_packet_size@packetID& (0+255),b
  6311                           
  6312                           ;iRobotSerial.c: 61: switch (packetID){
  6313  015740  D012               	goto	l2021
  6314  015742  0E01               	movlw	1
  6315  015744  0012               	return	
  6316  015746  0E01               	movlw	1
  6317  015748  0012               	return	
  6318  01574A  0E01               	movlw	1
  6319  01574C  0012               	return	
  6320  01574E  0E01               	movlw	1
  6321  015750  0012               	return	
  6322  015752  0E01               	movlw	1
  6323  015754  0012               	return	
  6324  015756  0E01               	movlw	1
  6325  015758  0012               	return	
  6326  01575A  0E01               	movlw	1
  6327  01575C  0012               	return	
  6328  01575E  0E02               	movlw	2
  6329  015760  0012               	return	
  6330  015762  0E02               	movlw	2
  6331                           
  6332                           ;iRobotSerial.c: 71: }
  6333  015764  0012               	return	
  6334  015766                     l2021:
  6335  015766  0100               	movlb	0	; () banked
  6336  015768  51BA               	movf	get_packet_size@packetID& (0+255),w,b
  6337                           
  6338                           ; Switch size 1, requested type "space"
  6339                           ; Number of cases is 9, Range of values is 7 to 20
  6340                           ; switch strategies available:
  6341                           ; Name         Instructions Cycles
  6342                           ; simple_byte           28    15 (average)
  6343                           ;	Chosen strategy is simple_byte
  6344  01576A  0A07               	xorlw	7	; case 7
  6345  01576C  B4D8               	btfsc	status,2,c
  6346  01576E  D7E9               	goto	l2022
  6347  015770  0A0F               	xorlw	15	; case 8
  6348  015772  B4D8               	btfsc	status,2,c
  6349  015774  D7E8               	goto	l2024
  6350  015776  0A01               	xorlw	1	; case 9
  6351  015778  B4D8               	btfsc	status,2,c
  6352  01577A  D7E7               	goto	l2025
  6353  01577C  0A03               	xorlw	3	; case 10
  6354  01577E  B4D8               	btfsc	status,2,c
  6355  015780  D7E6               	goto	l2026
  6356  015782  0A01               	xorlw	1	; case 11
  6357  015784  B4D8               	btfsc	status,2,c
  6358  015786  D7E5               	goto	l2027
  6359  015788  0A07               	xorlw	7	; case 12
  6360  01578A  B4D8               	btfsc	status,2,c
  6361  01578C  D7E4               	goto	l2028
  6362  01578E  0A01               	xorlw	1	; case 13
  6363  015790  B4D8               	btfsc	status,2,c
  6364  015792  D7E3               	goto	l2029
  6365  015794  0A1E               	xorlw	30	; case 19
  6366  015796  B4D8               	btfsc	status,2,c
  6367  015798  D7E2               	goto	l2030
  6368  01579A  0A07               	xorlw	7	; case 20
  6369  01579C  A4D8               	btfss	status,2,c
  6370  01579E  0012               	return	
  6371  0157A0  D7E0               	goto	l2031
  6372  0157A2                     __end_of_get_packet_size:
  6373                           	opt stack 0
  6374                           tblptru	equ	0xFF8
  6375                           tblptrh	equ	0xFF7
  6376                           tblptrl	equ	0xFF6
  6377                           tablat	equ	0xFF5
  6378                           prodh	equ	0xFF4
  6379                           prodl	equ	0xFF3
  6380                           postinc0	equ	0xFEE
  6381                           wreg	equ	0xFE8
  6382                           postdec1	equ	0xFE5
  6383                           fsr1h	equ	0xFE2
  6384                           fsr1l	equ	0xFE1
  6385                           indf2	equ	0xFDF
  6386                           fsr2h	equ	0xFDA
  6387                           fsr2l	equ	0xFD9
  6388                           status	equ	0xFD8
  6389                           
  6390 ;; *************** function _eusart_getch *****************
  6391 ;; Defined at:
  6392 ;;		line 125 in file "Library/iRobotSerial.c"
  6393 ;; Parameters:    Size  Location     Type
  6394 ;;		None
  6395 ;; Auto vars:     Size  Location     Type
  6396 ;;		None
  6397 ;; Return value:  Size  Location     Type
  6398 ;;                  1    wreg      unsigned char 
  6399 ;; Registers used:
  6400 ;;		wreg, status,2
  6401 ;; Tracked objects:
  6402 ;;		On entry : 0/0
  6403 ;;		On exit  : 0/0
  6404 ;;		Unchanged: 0/0
  6405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6406 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6409 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6410 ;;Total ram usage:        0 bytes
  6411 ;; Hardware stack levels used:    1
  6412 ;; Hardware stack levels required when called:    7
  6413 ;; This function calls:
  6414 ;;		Nothing
  6415 ;; This function is called by:
  6416 ;;		_irobot_query_and_update
  6417 ;; This function uses a non-reentrant model
  6418 ;;
  6419                           
  6420                           	psect	text17
  6421  0166DA                     __ptext17:
  6422                           	opt stack 0
  6423  0166DA                     _eusart_getch:
  6424                           	opt stack 20
  6425                           
  6426                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  6427                           
  6428                           ;incstack = 0
  6429  0166DA  AA9E               	btfss	3998,5,c	;volatile
  6430  0166DC  D7FE               	goto	_eusart_getch
  6431                           
  6432                           ;iRobotSerial.c: 127: return RCREG1;
  6433  0166DE  50AF               	movf	4015,w,c	;volatile
  6434  0166E0  0012               	return	
  6435  0166E2                     __end_of_eusart_getch:
  6436                           	opt stack 0
  6437                           tblptru	equ	0xFF8
  6438                           tblptrh	equ	0xFF7
  6439                           tblptrl	equ	0xFF6
  6440                           tablat	equ	0xFF5
  6441                           prodh	equ	0xFF4
  6442                           prodl	equ	0xFF3
  6443                           postinc0	equ	0xFEE
  6444                           wreg	equ	0xFE8
  6445                           postdec1	equ	0xFE5
  6446                           fsr1h	equ	0xFE2
  6447                           fsr1l	equ	0xFE1
  6448                           indf2	equ	0xFDF
  6449                           fsr2h	equ	0xFDA
  6450                           fsr2l	equ	0xFD9
  6451                           status	equ	0xFD8
  6452                           
  6453 ;; *************** function _irobot_stop_motion *****************
  6454 ;; Defined at:
  6455 ;;		line 299 in file "Library/iRobotSerial.c"
  6456 ;; Parameters:    Size  Location     Type
  6457 ;;  isScript        1    wreg     unsigned char 
  6458 ;; Auto vars:     Size  Location     Type
  6459 ;;  isScript        1   25[BANK0 ] unsigned char 
  6460 ;; Return value:  Size  Location     Type
  6461 ;;                  1    wreg      void 
  6462 ;; Registers used:
  6463 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6464 ;; Tracked objects:
  6465 ;;		On entry : 0/0
  6466 ;;		On exit  : 0/0
  6467 ;;		Unchanged: 0/0
  6468 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6469 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6470 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6471 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6472 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6473 ;;Total ram usage:        1 bytes
  6474 ;; Hardware stack levels used:    1
  6475 ;; Hardware stack levels required when called:    9
  6476 ;; This function calls:
  6477 ;;		_irobot_move
  6478 ;; This function is called by:
  6479 ;;		_irobot_rotate
  6480 ;;		_safeToGo
  6481 ;;		_move_and_rotate
  6482 ;;		_mode2
  6483 ;;		_mode4
  6484 ;;		_irobot_move_to_simple
  6485 ;;		_irobot_rotate_to
  6486 ;; This function uses a non-reentrant model
  6487 ;;
  6488                           
  6489                           	psect	text18
  6490  015D40                     __ptext18:
  6491                           	opt stack 0
  6492  015D40                     _irobot_stop_motion:
  6493                           	opt stack 19
  6494                           
  6495                           ;incstack = 0
  6496                           ;irobot_stop_motion@isScript stored from wreg
  6497  015D40  0100               	movlb	0	; () banked
  6498  015D42  6FD3               	movwf	irobot_stop_motion@isScript& (0+255),b
  6499                           
  6500                           ;iRobotSerial.c: 300: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6501  015D44  0100               	movlb	0	; () banked
  6502  015D46  51D3               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6503  015D48  0100               	movlb	0	; () banked
  6504  015D4A  B4D8               	btfsc	status,2,c
  6505  015D4C  D00E               	goto	l2168
  6506                           
  6507                           ; BSR set to: 0
  6508  015D4E  0E00               	movlw	0
  6509  015D50  0100               	movlb	0	; () banked
  6510  015D52  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6511  015D54  0E00               	movlw	0
  6512  015D56  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6513  015D58  0E00               	movlw	0
  6514  015D5A  0100               	movlb	0	; () banked
  6515  015D5C  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6516  015D5E  0E00               	movlw	0
  6517  015D60  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6518  015D62  0E01               	movlw	1
  6519  015D64  EC27  F0A2         	call	_irobot_move
  6520  015D68  0012               	return	
  6521  015D6A                     l2168:
  6522  015D6A  0E00               	movlw	0
  6523  015D6C  0100               	movlb	0	; () banked
  6524  015D6E  6FCB               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6525  015D70  0E00               	movlw	0
  6526  015D72  6FCA               	movwf	irobot_move@moveSpeed& (0+255),b
  6527  015D74  0E00               	movlw	0
  6528  015D76  0100               	movlb	0	; () banked
  6529  015D78  6FCD               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6530  015D7A  0E00               	movlw	0
  6531  015D7C  6FCC               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6532  015D7E  0E00               	movlw	0
  6533  015D80  EC27  F0A2         	call	_irobot_move
  6534  015D84  0012               	return	
  6535  015D86                     __end_of_irobot_stop_motion:
  6536                           	opt stack 0
  6537                           tblptru	equ	0xFF8
  6538                           tblptrh	equ	0xFF7
  6539                           tblptrl	equ	0xFF6
  6540                           tablat	equ	0xFF5
  6541                           prodh	equ	0xFF4
  6542                           prodl	equ	0xFF3
  6543                           postinc0	equ	0xFEE
  6544                           wreg	equ	0xFE8
  6545                           postdec1	equ	0xFE5
  6546                           fsr1h	equ	0xFE2
  6547                           fsr1l	equ	0xFE1
  6548                           indf2	equ	0xFDF
  6549                           fsr2h	equ	0xFDA
  6550                           fsr2l	equ	0xFD9
  6551                           status	equ	0xFD8
  6552                           
  6553 ;; *************** function _irobot_move *****************
  6554 ;; Defined at:
  6555 ;;		line 220 in file "Library/iRobotSerial.c"
  6556 ;; Parameters:    Size  Location     Type
  6557 ;;  isScript        1    wreg     unsigned char 
  6558 ;;  moveSpeed       2   16[BANK0 ] short 
  6559 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6560 ;; Auto vars:     Size  Location     Type
  6561 ;;  isScript        1   24[BANK0 ] unsigned char 
  6562 ;; Return value:  Size  Location     Type
  6563 ;;                  1    wreg      void 
  6564 ;; Registers used:
  6565 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6566 ;; Tracked objects:
  6567 ;;		On entry : 0/0
  6568 ;;		On exit  : 0/0
  6569 ;;		Unchanged: 0/0
  6570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6571 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6572 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6573 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6574 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6575 ;;Total ram usage:        9 bytes
  6576 ;; Hardware stack levels used:    1
  6577 ;; Hardware stack levels required when called:    8
  6578 ;; This function calls:
  6579 ;;		_eusart_putch
  6580 ;;		_load_iRScriptStack
  6581 ;;		_twos_complement_of
  6582 ;; This function is called by:
  6583 ;;		_irobot_rotate
  6584 ;;		_irobot_stop_motion
  6585 ;;		_irobot_move_straight
  6586 ;;		_irobot_move_to_simple
  6587 ;; This function uses a non-reentrant model
  6588 ;;
  6589                           
  6590                           	psect	text19
  6591  01444E                     __ptext19:
  6592                           	opt stack 0
  6593  01444E                     _irobot_move:
  6594                           	opt stack 19
  6595                           
  6596                           ;incstack = 0
  6597                           ;irobot_move@isScript stored from wreg
  6598  01444E  0100               	movlb	0	; () banked
  6599  014450  6FD2               	movwf	irobot_move@isScript& (0+255),b
  6600                           
  6601                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  6602  014452  C0CA  F0BA         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6603  014456  C0CB  F0BB         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6604  01445A  EC09  F0AF         	call	_twos_complement_of	;wreg free
  6605  01445E  C0BA  F0CA         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6606  014462  C0BB  F0CB         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6607                           
  6608                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6609  014466  C0CC  F0BA         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6610  01446A  C0CD  F0BB         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6611  01446E  EC09  F0AF         	call	_twos_complement_of	;wreg free
  6612  014472  C0BA  F0CC         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6613  014476  C0BB  F0CD         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6614                           
  6615                           ;iRobotSerial.c: 224: if (isScript){
  6616  01447A  0100               	movlb	0	; () banked
  6617  01447C  51D2               	movf	irobot_move@isScript& (0+255),w,b
  6618  01447E  0100               	movlb	0	; () banked
  6619  014480  B4D8               	btfsc	status,2,c
  6620  014482  D029               	goto	l2139
  6621                           
  6622                           ; BSR set to: 0
  6623                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  6624                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6625                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6626  014484  0E00               	movlw	0
  6627  014486  0100               	movlb	0	; () banked
  6628  014488  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6629  01448A  0E89               	movlw	137
  6630  01448C  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
  6631  01448E  C0CB  F0CE         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6632  014492  0100               	movlb	0	; () banked
  6633  014494  6BCF               	clrf	(??_irobot_move+1)& (0+255),b
  6634  014496  BFCE               	btfsc	??_irobot_move& (0+255),7,b
  6635  014498  69CF               	setf	(??_irobot_move+1)& (0+255),b
  6636  01449A  0100               	movlb	0	; () banked
  6637  01449C  51CE               	movf	??_irobot_move& (0+255),w,b
  6638  01449E  0100               	movlb	0	; () banked
  6639  0144A0  6FBC               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6640  0144A2  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6641  0144A4  0100               	movlb	0	; () banked
  6642  0144A6  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6643  0144A8  0100               	movlb	0	; () banked
  6644  0144AA  6FBE               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6645  0144AC  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6646  0144AE  C0CD  F0D0         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6647  0144B2  0100               	movlb	0	; () banked
  6648  0144B4  6BD1               	clrf	(??_irobot_move+3)& (0+255),b
  6649  0144B6  BFD0               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6650  0144B8  69D1               	setf	(??_irobot_move+3)& (0+255),b
  6651  0144BA  0100               	movlb	0	; () banked
  6652  0144BC  51D0               	movf	(??_irobot_move+2)& (0+255),w,b
  6653  0144BE  0100               	movlb	0	; () banked
  6654  0144C0  6FC0               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6655  0144C2  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6656  0144C4  0100               	movlb	0	; () banked
  6657  0144C6  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6658  0144C8  0100               	movlb	0	; () banked
  6659  0144CA  6FC2               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6660  0144CC  6BC3               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6661  0144CE  0E05               	movlw	5
  6662  0144D0  ECFF  F0AA         	call	_load_iRScriptStack
  6663                           
  6664                           ;iRobotSerial.c: 228: }
  6665  0144D4  0012               	return	
  6666  0144D6                     l2139:
  6667                           
  6668                           ;iRobotSerial.c: 229: else{
  6669                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  6670  0144D6  0E89               	movlw	137
  6671  0144D8  EC2A  F0B3         	call	_eusart_putch
  6672                           
  6673                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6674  0144DC  0100               	movlb	0	; () banked
  6675  0144DE  51CB               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6676  0144E0  EC2A  F0B3         	call	_eusart_putch
  6677                           
  6678                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  6679  0144E4  0100               	movlb	0	; () banked
  6680  0144E6  51CA               	movf	irobot_move@moveSpeed& (0+255),w,b
  6681  0144E8  EC2A  F0B3         	call	_eusart_putch
  6682                           
  6683                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6684  0144EC  0100               	movlb	0	; () banked
  6685  0144EE  51CD               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6686  0144F0  EC2A  F0B3         	call	_eusart_putch
  6687                           
  6688                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  6689  0144F4  0100               	movlb	0	; () banked
  6690  0144F6  51CC               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6691  0144F8  EC2A  F0B3         	call	_eusart_putch
  6692  0144FC  0012               	return	
  6693  0144FE                     __end_of_irobot_move:
  6694                           	opt stack 0
  6695                           tblptru	equ	0xFF8
  6696                           tblptrh	equ	0xFF7
  6697                           tblptrl	equ	0xFF6
  6698                           tablat	equ	0xFF5
  6699                           prodh	equ	0xFF4
  6700                           prodl	equ	0xFF3
  6701                           postinc0	equ	0xFEE
  6702                           wreg	equ	0xFE8
  6703                           postdec1	equ	0xFE5
  6704                           fsr1h	equ	0xFE2
  6705                           fsr1l	equ	0xFE1
  6706                           indf2	equ	0xFDF
  6707                           fsr2h	equ	0xFDA
  6708                           fsr2l	equ	0xFD9
  6709                           status	equ	0xFD8
  6710                           
  6711 ;; *************** function _twos_complement_of *****************
  6712 ;; Defined at:
  6713 ;;		line 167 in file "Library/iRobotSerial.c"
  6714 ;; Parameters:    Size  Location     Type
  6715 ;;  complementVa    2    0[BANK0 ] short 
  6716 ;; Auto vars:     Size  Location     Type
  6717 ;;		None
  6718 ;; Return value:  Size  Location     Type
  6719 ;;                  2    0[BANK0 ] unsigned short 
  6720 ;; Registers used:
  6721 ;;		wreg, status,2, status,0
  6722 ;; Tracked objects:
  6723 ;;		On entry : 0/0
  6724 ;;		On exit  : 0/0
  6725 ;;		Unchanged: 0/0
  6726 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6727 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6728 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6729 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6730 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6731 ;;Total ram usage:        2 bytes
  6732 ;; Hardware stack levels used:    1
  6733 ;; Hardware stack levels required when called:    7
  6734 ;; This function calls:
  6735 ;;		Nothing
  6736 ;; This function is called by:
  6737 ;;		_irobot_move
  6738 ;;		_irobot_angle_wait
  6739 ;;		_irobot_distance_wait
  6740 ;; This function uses a non-reentrant model
  6741 ;;
  6742                           
  6743                           	psect	text20
  6744  015E12                     __ptext20:
  6745                           	opt stack 0
  6746  015E12                     _twos_complement_of:
  6747                           	opt stack 19
  6748                           
  6749                           ;iRobotSerial.c: 168: if (complementValue < 0){
  6750                           
  6751                           ;incstack = 0
  6752  015E12  0100               	movlb	0	; () banked
  6753  015E14  AFBB               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6754  015E16  D01A               	goto	l2110
  6755                           
  6756                           ; BSR set to: 0
  6757                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6758  015E18  0100               	movlb	0	; () banked
  6759  015E1A  BFBB               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6760  015E1C  D007               	goto	u9290
  6761  015E1E  0100               	movlb	0	; () banked
  6762  015E20  51BB               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6763  015E22  E10A               	bnz	l2112
  6764  015E24  0100               	movlb	0	; () banked
  6765  015E26  05BA               	decf	twos_complement_of@complementValue& (0+255),w,b
  6766  015E28  B0D8               	btfsc	status,0,c
  6767  015E2A  D006               	goto	l2112
  6768  015E2C                     u9290:
  6769                           
  6770                           ; BSR set to: 0
  6771  015E2C  0100               	movlb	0	; () banked
  6772  015E2E  6DBA               	negf	twos_complement_of@complementValue& (0+255),b
  6773  015E30  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6774  015E32  B0D8               	btfsc	status,0,c
  6775  015E34  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6776  015E36  D004               	goto	l2114
  6777  015E38                     l2112:
  6778                           
  6779                           ; BSR set to: 0
  6780  015E38  C0BA  F0BA         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6781  015E3C  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6782  015E40                     l2114:
  6783                           
  6784                           ; BSR set to: 0
  6785                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  6786                           
  6787                           ; BSR set to: 0
  6788  015E40  0100               	movlb	0	; () banked
  6789  015E42  1FBA               	comf	twos_complement_of@complementValue& (0+255),f,b
  6790  015E44  1FBB               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6791                           
  6792                           ;iRobotSerial.c: 171: complementValue += 1;
  6793  015E46  0100               	movlb	0	; () banked
  6794  015E48  4BBA               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6795  015E4A  2BBB               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6796  015E4C                     l2110:
  6797                           
  6798                           ; BSR set to: 0
  6799                           ;iRobotSerial.c: 172: }
  6800                           ;iRobotSerial.c: 173: return complementValue;
  6801                           
  6802                           ; BSR set to: 0
  6803  015E4C  C0BA  F0BA         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6804  015E50  C0BB  F0BB         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6805  015E54  0012               	return	
  6806  015E56                     __end_of_twos_complement_of:
  6807                           	opt stack 0
  6808                           tblptru	equ	0xFF8
  6809                           tblptrh	equ	0xFF7
  6810                           tblptrl	equ	0xFF6
  6811                           tablat	equ	0xFF5
  6812                           prodh	equ	0xFF4
  6813                           prodl	equ	0xFF3
  6814                           postinc0	equ	0xFEE
  6815                           wreg	equ	0xFE8
  6816                           postdec1	equ	0xFE5
  6817                           fsr1h	equ	0xFE2
  6818                           fsr1l	equ	0xFE1
  6819                           indf2	equ	0xFDF
  6820                           fsr2h	equ	0xFDA
  6821                           fsr2l	equ	0xFD9
  6822                           status	equ	0xFD8
  6823                           
  6824 ;; *************** function _irobot_song_play *****************
  6825 ;; Defined at:
  6826 ;;		line 274 in file "Library/iRobotSerial.c"
  6827 ;; Parameters:    Size  Location     Type
  6828 ;;  songNumber      1    wreg     unsigned char 
  6829 ;; Auto vars:     Size  Location     Type
  6830 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6831 ;; Return value:  Size  Location     Type
  6832 ;;                  1    wreg      void 
  6833 ;; Registers used:
  6834 ;;		wreg, status,2, cstack
  6835 ;; Tracked objects:
  6836 ;;		On entry : 0/0
  6837 ;;		On exit  : 0/0
  6838 ;;		Unchanged: 0/0
  6839 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6840 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6841 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6842 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6843 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6844 ;;Total ram usage:        1 bytes
  6845 ;; Hardware stack levels used:    1
  6846 ;; Hardware stack levels required when called:    8
  6847 ;; This function calls:
  6848 ;;		_eusart_putch
  6849 ;; This function is called by:
  6850 ;;		_safeToGo
  6851 ;;		_mode4
  6852 ;; This function uses a non-reentrant model
  6853 ;;
  6854                           
  6855                           	psect	text21
  6856  0165DA                     __ptext21:
  6857                           	opt stack 0
  6858  0165DA                     _irobot_song_play:
  6859                           	opt stack 20
  6860                           
  6861                           ; BSR set to: 0
  6862                           ;incstack = 0
  6863                           ;irobot_song_play@songNumber stored from wreg
  6864  0165DA  0100               	movlb	0	; () banked
  6865  0165DC  6FBB               	movwf	irobot_song_play@songNumber& (0+255),b
  6866                           
  6867                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6868  0165DE  0E8D               	movlw	141
  6869  0165E0  EC2A  F0B3         	call	_eusart_putch
  6870                           
  6871                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6872  0165E4  0100               	movlb	0	; () banked
  6873  0165E6  51BB               	movf	irobot_song_play@songNumber& (0+255),w,b
  6874  0165E8  EC2A  F0B3         	call	_eusart_putch
  6875  0165EC  0012               	return		;funcret
  6876  0165EE                     __end_of_irobot_song_play:
  6877                           	opt stack 0
  6878                           tblptru	equ	0xFF8
  6879                           tblptrh	equ	0xFF7
  6880                           tblptrl	equ	0xFF6
  6881                           tablat	equ	0xFF5
  6882                           prodh	equ	0xFF4
  6883                           prodl	equ	0xFF3
  6884                           postinc0	equ	0xFEE
  6885                           wreg	equ	0xFE8
  6886                           postdec1	equ	0xFE5
  6887                           fsr1h	equ	0xFE2
  6888                           fsr1l	equ	0xFE1
  6889                           indf2	equ	0xFDF
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _printf *****************
  6895 ;; Defined at:
  6896 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  6899 ;;		 -> STR_16(21), STR_15(21), STR_14(21), STR_13(21), 
  6900 ;;		 -> STR_12(21), STR_11(3), STR_10(76), STR_9(3), 
  6901 ;;		 -> STR_8(14), STR_7(3), STR_6(46), STR_5(3), 
  6902 ;;		 -> STR_4(46), STR_3(3), STR_2(60), STR_1(3), 
  6903 ;; Auto vars:     Size  Location     Type
  6904 ;;  tmpval          4    0        struct .
  6905 ;;  cp              3    0        PTR const unsigned char 
  6906 ;;  val             2   38[BANK0 ] unsigned int 
  6907 ;;  ap              2   36[BANK0 ] PTR void [1]
  6908 ;;		 -> ?_printf(2), 
  6909 ;;  len             2    0        unsigned int 
  6910 ;;  c               1   40[BANK0 ] char 
  6911 ;;  flag            1   35[BANK0 ] unsigned char 
  6912 ;;  prec            1   34[BANK0 ] char 
  6913 ;; Return value:  Size  Location     Type
  6914 ;;                  2   21[BANK0 ] int 
  6915 ;; Registers used:
  6916 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6917 ;; Tracked objects:
  6918 ;;		On entry : 0/0
  6919 ;;		On exit  : 0/0
  6920 ;;		Unchanged: 0/0
  6921 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6922 ;;      Params:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6923 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6924 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6925 ;;      Totals:         0      20       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6926 ;;Total ram usage:       20 bytes
  6927 ;; Hardware stack levels used:    1
  6928 ;; Hardware stack levels required when called:   12
  6929 ;; This function calls:
  6930 ;;		___lwdiv
  6931 ;;		___lwmod
  6932 ;;		_putch
  6933 ;; This function is called by:
  6934 ;;		_findClosestWall
  6935 ;;		_mode1
  6936 ;;		_mode2
  6937 ;;		_mode4
  6938 ;;		_main
  6939 ;; This function uses a non-reentrant model
  6940 ;;
  6941                           
  6942                           	psect	text22
  6943  0124B0                     __ptext22:
  6944                           	opt stack 0
  6945  0124B0                     _printf:
  6946                           	opt stack 18
  6947                           
  6948                           ;doprnt.c: 466: va_list ap;
  6949                           ;doprnt.c: 499: signed char c;
  6950                           ;doprnt.c: 506: signed char prec;
  6951                           ;doprnt.c: 508: unsigned char flag;
  6952                           ;doprnt.c: 523: union {
  6953                           ;doprnt.c: 524: unsigned long vd;
  6954                           ;doprnt.c: 525: double integ;
  6955                           ;doprnt.c: 526: } tmpval;
  6956                           ;doprnt.c: 528: unsigned int val;
  6957                           ;doprnt.c: 529: unsigned len;
  6958                           ;doprnt.c: 530: const char * cp;
  6959                           ;doprnt.c: 533: *ap = __va_start();
  6960                           
  6961                           ;incstack = 0
  6962  0124B0  0ED1               	movlw	low (?_printf+2)
  6963  0124B2  0100               	movlb	0	; () banked
  6964  0124B4  6FDE               	movwf	printf@ap& (0+255),b
  6965  0124B6  0E00               	movlw	high (?_printf+2)
  6966  0124B8  0100               	movlb	0	; () banked
  6967  0124BA  6FDF               	movwf	(printf@ap+1)& (0+255),b
  6968                           
  6969                           ;doprnt.c: 536: while(c = *f++) {
  6970  0124BC  D0C9               	goto	u11010
  6971  0124BE                     
  6972                           ; BSR set to: 0
  6973                           ;doprnt.c: 538: if(c != '%')
  6974                           
  6975                           ; BSR set to: 0
  6976  0124BE  0E25               	movlw	37
  6977  0124C0  0100               	movlb	0	; () banked
  6978  0124C2  19E2               	xorwf	printf@c& (0+255),w,b
  6979  0124C4  B4D8               	btfsc	status,2,c
  6980  0124C6  D005               	goto	l2424
  6981                           
  6982                           ; BSR set to: 0
  6983                           ;doprnt.c: 540: {
  6984                           ;doprnt.c: 541: (putch(c) );
  6985  0124C8  0100               	movlb	0	; () banked
  6986  0124CA  51E2               	movf	printf@c& (0+255),w,b
  6987  0124CC  EC1C  F0B3         	call	_putch
  6988                           
  6989                           ;doprnt.c: 542: continue;
  6990  0124D0  D0BF               	goto	u11010
  6991  0124D2                     l2424:
  6992                           
  6993                           ;doprnt.c: 543: }
  6994                           ;doprnt.c: 548: flag = 0;
  6995  0124D2  0E00               	movlw	0
  6996  0124D4  0100               	movlb	0	; () banked
  6997  0124D6  6FDD               	movwf	printf@flag& (0+255),b
  6998                           
  6999                           ;doprnt.c: 635: switch(c = *f++) {
  7000  0124D8  D014               	goto	l2425
  7001  0124DA                     
  7002                           ; BSR set to: 0
  7003                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  7004                           
  7005                           ; BSR set to: 0
  7006  0124DA  C0DE  FFD9         	movff	printf@ap,fsr2l
  7007  0124DE  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7008  0124E2  50DF               	movf	indf2,w,c
  7009  0124E4  0100               	movlb	0	; () banked
  7010  0124E6  6FE2               	movwf	printf@c& (0+255),b
  7011                           
  7012                           ; BSR set to: 0
  7013  0124E8  0E02               	movlw	2
  7014  0124EA  0100               	movlb	0	; () banked
  7015  0124EC  27DE               	addwf	printf@ap& (0+255),f,b
  7016  0124EE  0E00               	movlw	0
  7017  0124F0  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7018  0124F2                     
  7019                           ; BSR set to: 0
  7020                           ;doprnt.c: 809: (putch(c) );
  7021                           
  7022                           ; BSR set to: 0
  7023  0124F2  0100               	movlb	0	; () banked
  7024  0124F4  51E2               	movf	printf@c& (0+255),w,b
  7025  0124F6  EC1C  F0B3         	call	_putch
  7026                           
  7027                           ;doprnt.c: 810: continue;
  7028  0124FA  D0AA               	goto	u11010
  7029  0124FC                     
  7030                           ;doprnt.c: 818: flag |= 0x40;
  7031  0124FC  0100               	movlb	0	; () banked
  7032  0124FE  8DDD               	bsf	printf@flag& (0+255),6,b
  7033                           
  7034                           ; BSR set to: 0
  7035                           ;doprnt.c: 822: }
  7036                           
  7037                           ;doprnt.c: 819: break;
  7038  012500  D01E               	goto	l2430
  7039  012502                     l2425:
  7040                           
  7041                           ; BSR set to: 0
  7042                           
  7043                           ; BSR set to: 0
  7044  012502  C0CF  FFF6         	movff	printf@f,tblptrl
  7045  012506  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7046  01250A  0100               	movlb	0	; () banked
  7047  01250C  4BCF               	infsnz	printf@f& (0+255),f,b
  7048  01250E  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7049  012510                     	if	0	;tblptru may be non-zero
  7050  012510                     	endif
  7051  012510                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7052  012510  0E00               	movlw	low (__mediumconst shr (0+16))
  7053  012512  6EF8               	movwf	tblptru,c
  7054  012514                     	endif
  7055  012514  0008               	tblrd		*
  7056  012516  CFF5 F0E2          	movff	tablat,printf@c
  7057  01251A  0100               	movlb	0	; () banked
  7058  01251C  51E2               	movf	printf@c& (0+255),w,b
  7059                           
  7060                           ; Switch size 1, requested type "space"
  7061                           ; Number of cases is 5, Range of values is 0 to 117
  7062                           ; switch strategies available:
  7063                           ; Name         Instructions Cycles
  7064                           ; simple_byte           16     9 (average)
  7065                           ;	Chosen strategy is simple_byte
  7066  01251E  0A00               	xorlw	0	; case 0
  7067  012520  B4D8               	btfsc	status,2,c
  7068  012522  0012               	return	
  7069  012524  0A63               	xorlw	99	; case 99
  7070  012526  B4D8               	btfsc	status,2,c
  7071  012528  D7D8               	goto	l2431
  7072  01252A  0A07               	xorlw	7	; case 100
  7073  01252C  B4D8               	btfsc	status,2,c
  7074  01252E  D007               	goto	l2430
  7075  012530  0A0D               	xorlw	13	; case 105
  7076  012532  B4D8               	btfsc	status,2,c
  7077  012534  D004               	goto	l2430
  7078  012536  0A1C               	xorlw	28	; case 117
  7079  012538  B4D8               	btfsc	status,2,c
  7080  01253A  D7E0               	goto	l2433
  7081  01253C  D7DA               	goto	l2432
  7082  01253E                     l2430:
  7083                           
  7084                           ; BSR set to: 0
  7085                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  7086  01253E  0100               	movlb	0	; () banked
  7087  012540  BDDD               	btfsc	printf@flag& (0+255),6,b
  7088  012542  D019               	goto	l2434
  7089                           
  7090                           ; BSR set to: 0
  7091                           ;doprnt.c: 1253: {
  7092                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  7093  012544  C0DE  FFD9         	movff	printf@ap,fsr2l
  7094  012548  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7095  01254C  CFDE F0E0          	movff	postinc2,printf@val
  7096  012550  CFDD F0E1          	movff	postdec2,printf@val+1
  7097                           
  7098                           ; BSR set to: 0
  7099  012554  0E02               	movlw	2
  7100  012556  0100               	movlb	0	; () banked
  7101  012558  27DE               	addwf	printf@ap& (0+255),f,b
  7102  01255A  0E00               	movlw	0
  7103  01255C  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7104                           
  7105                           ; BSR set to: 0
  7106                           ;doprnt.c: 1261: if((int)val < 0) {
  7107  01255E  0100               	movlb	0	; () banked
  7108  012560  AFE1               	btfss	(printf@val+1)& (0+255),7,b
  7109  012562  D016               	goto	l2436
  7110                           
  7111                           ; BSR set to: 0
  7112                           ;doprnt.c: 1262: flag |= 0x03;
  7113  012564  0E03               	movlw	3
  7114  012566  0100               	movlb	0	; () banked
  7115  012568  13DD               	iorwf	printf@flag& (0+255),f,b
  7116                           
  7117                           ; BSR set to: 0
  7118                           ;doprnt.c: 1263: val = -val;
  7119  01256A  0100               	movlb	0	; () banked
  7120  01256C  6DE0               	negf	printf@val& (0+255),b
  7121  01256E  1FE1               	comf	(printf@val+1)& (0+255),f,b
  7122  012570  B0D8               	btfsc	status,0,c
  7123  012572  2BE1               	incf	(printf@val+1)& (0+255),f,b
  7124                           
  7125                           ; BSR set to: 0
  7126                           ;doprnt.c: 1264: }
  7127                           ;doprnt.c: 1266: }
  7128  012574  D00D               	goto	l2436
  7129  012576                     l2434:
  7130                           
  7131                           ; BSR set to: 0
  7132                           ;doprnt.c: 1268: else
  7133                           ;doprnt.c: 1273: {
  7134                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  7135                           
  7136                           ; BSR set to: 0
  7137  012576  C0DE  FFD9         	movff	printf@ap,fsr2l
  7138  01257A  C0DF  FFDA         	movff	printf@ap+1,fsr2h
  7139  01257E  CFDE F0E0          	movff	postinc2,printf@val
  7140  012582  CFDD F0E1          	movff	postdec2,printf@val+1
  7141                           
  7142                           ; BSR set to: 0
  7143  012586  0E02               	movlw	2
  7144  012588  0100               	movlb	0	; () banked
  7145  01258A  27DE               	addwf	printf@ap& (0+255),f,b
  7146  01258C  0E00               	movlw	0
  7147  01258E  23DF               	addwfc	(printf@ap+1)& (0+255),f,b
  7148  012590                     l2436:
  7149                           
  7150                           ; BSR set to: 0
  7151                           ;doprnt.c: 1287: }
  7152                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  7153                           
  7154                           ; BSR set to: 0
  7155  012590  0E01               	movlw	1
  7156  012592  0100               	movlb	0	; () banked
  7157  012594  6FE2               	movwf	printf@c& (0+255),b
  7158  012596                     l14263:
  7159                           
  7160                           ; BSR set to: 0
  7161  012596  0E05               	movlw	5
  7162  012598  0100               	movlb	0	; () banked
  7163  01259A  19E2               	xorwf	printf@c& (0+255),w,b
  7164  01259C  B4D8               	btfsc	status,2,c
  7165  01259E  D019               	goto	u10990
  7166                           
  7167                           ; BSR set to: 0
  7168                           ;doprnt.c: 1306: if(val < dpowers[c])
  7169                           
  7170                           ; BSR set to: 0
  7171                           
  7172                           ; BSR set to: 0
  7173  0125A0  0100               	movlb	0	; () banked
  7174  0125A2  51E2               	movf	printf@c& (0+255),w,b
  7175  0125A4  0D02               	mullw	2
  7176  0125A6  0E05               	movlw	low _dpowers
  7177  0125A8  24F3               	addwf	prodl,w,c
  7178  0125AA  6EF6               	movwf	tblptrl,c
  7179  0125AC  0EFD               	movlw	high _dpowers
  7180  0125AE  20F4               	addwfc	prodh,w,c
  7181  0125B0  6EF7               	movwf	tblptrh,c
  7182  0125B2                     	if	1	;There are 3 active tblptr bytes
  7183  0125B2  6AF8               	clrf	tblptru,c
  7184  0125B4  0E00               	movlw	low (__mediumconst shr (0+16))
  7185  0125B6  22F8               	addwfc	tblptru,f,c
  7186  0125B8                     	endif
  7187  0125B8  0009               	tblrd		*+
  7188  0125BA  50F5               	movf	tablat,w,c
  7189  0125BC  0100               	movlb	0	; () banked
  7190  0125BE  5DE0               	subwf	printf@val& (0+255),w,b
  7191  0125C0  0009               	tblrd		*+
  7192  0125C2  50F5               	movf	tablat,w,c
  7193  0125C4  0100               	movlb	0	; () banked
  7194  0125C6  59E1               	subwfb	(printf@val+1)& (0+255),w,b
  7195  0125C8  A0D8               	btfss	status,0,c
  7196  0125CA  D003               	goto	u10990
  7197                           
  7198                           ; BSR set to: 0
  7199                           
  7200                           ; BSR set to: 0
  7201                           
  7202                           ; BSR set to: 0
  7203                           ;doprnt.c: 1307: break;
  7204  0125CC  0100               	movlb	0	; () banked
  7205  0125CE  2BE2               	incf	printf@c& (0+255),f,b
  7206  0125D0  D7E2               	goto	l14263
  7207  0125D2                     u10990:
  7208                           
  7209                           ; BSR set to: 0
  7210                           ;doprnt.c: 1422: {
  7211                           ;doprnt.c: 1438: if(flag & 0x03)
  7212                           
  7213                           ; BSR set to: 0
  7214  0125D2  C0DD  F0DB         	movff	printf@flag,??_printf
  7215  0125D6  0E03               	movlw	3
  7216  0125D8  0100               	movlb	0	; () banked
  7217  0125DA  17DB               	andwf	??_printf& (0+255),f,b
  7218  0125DC  B4D8               	btfsc	status,2,c
  7219  0125DE  D003               	goto	l2440
  7220                           
  7221                           ; BSR set to: 0
  7222                           ;doprnt.c: 1439: (putch('-') );
  7223  0125E0  0E2D               	movlw	45
  7224  0125E2  EC1C  F0B3         	call	_putch
  7225  0125E6                     l2440:
  7226                           
  7227                           ;doprnt.c: 1469: }
  7228                           ;doprnt.c: 1472: prec = c;
  7229  0125E6  C0E2  F0DC         	movff	printf@c,printf@prec
  7230                           
  7231                           ;doprnt.c: 1474: while(prec--) {
  7232  0125EA  D02C               	goto	l2441
  7233  0125EC                     
  7234                           ;doprnt.c: 1478: {
  7235                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  7236  0125EC  0100               	movlb	0	; () banked
  7237  0125EE  51DC               	movf	printf@prec& (0+255),w,b
  7238  0125F0  0D02               	mullw	2
  7239  0125F2  0E05               	movlw	low _dpowers
  7240  0125F4  24F3               	addwf	prodl,w,c
  7241  0125F6  6EF6               	movwf	tblptrl,c
  7242  0125F8  0EFD               	movlw	high _dpowers
  7243  0125FA  20F4               	addwfc	prodh,w,c
  7244  0125FC  6EF7               	movwf	tblptrh,c
  7245  0125FE                     	if	1	;There are 3 active tblptr bytes
  7246  0125FE  6AF8               	clrf	tblptru,c
  7247  012600  0E00               	movlw	low (__mediumconst shr (0+16))
  7248  012602  22F8               	addwfc	tblptru,f,c
  7249  012604                     	endif
  7250  012604  0009               	tblrd		*+
  7251  012606  CFF5 F0BC          	movff	tablat,___lwdiv@divisor
  7252  01260A  000A               	tblrd		*-
  7253  01260C  CFF5 F0BD          	movff	tablat,___lwdiv@divisor+1
  7254  012610  C0E0  F0BA         	movff	printf@val,___lwdiv@dividend
  7255  012614  C0E1  F0BB         	movff	printf@val+1,___lwdiv@dividend+1
  7256  012618  ECFC  F0A8         	call	___lwdiv	;wreg free
  7257  01261C  C0BA  F0C1         	movff	?___lwdiv,___lwmod@dividend
  7258  012620  C0BB  F0C2         	movff	?___lwdiv+1,___lwmod@dividend+1
  7259  012624  0E00               	movlw	0
  7260  012626  0100               	movlb	0	; () banked
  7261  012628  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
  7262  01262A  0E0A               	movlw	10
  7263  01262C  6FC3               	movwf	___lwmod@divisor& (0+255),b
  7264  01262E  EC67  F0AC         	call	___lwmod	;wreg free
  7265  012632  0100               	movlb	0	; () banked
  7266  012634  51C1               	movf	?___lwmod& (0+255),w,b
  7267  012636  0F30               	addlw	48
  7268  012638  0100               	movlb	0	; () banked
  7269  01263A  6FE2               	movwf	printf@c& (0+255),b
  7270                           
  7271                           ; BSR set to: 0
  7272                           ;doprnt.c: 1523: }
  7273                           ;doprnt.c: 1524: (putch(c) );
  7274  01263C  0100               	movlb	0	; () banked
  7275  01263E  51E2               	movf	printf@c& (0+255),w,b
  7276  012640  EC1C  F0B3         	call	_putch
  7277  012644                     l2441:
  7278  012644  0100               	movlb	0	; () banked
  7279  012646  07DC               	decf	printf@prec& (0+255),f,b
  7280  012648  0100               	movlb	0	; () banked
  7281  01264A  29DC               	incf	printf@prec& (0+255),w,b
  7282  01264C  A4D8               	btfss	status,2,c
  7283  01264E  D7CE               	goto	l2442
  7284  012650                     u11010:
  7285                           
  7286                           ; BSR set to: 0
  7287                           
  7288                           ; BSR set to: 0
  7289  012650  C0CF  FFF6         	movff	printf@f,tblptrl
  7290  012654  C0D0  FFF7         	movff	printf@f+1,tblptrh
  7291  012658  0100               	movlb	0	; () banked
  7292  01265A  4BCF               	infsnz	printf@f& (0+255),f,b
  7293  01265C  2BD0               	incf	(printf@f+1)& (0+255),f,b
  7294  01265E                     	if	0	;tblptru may be non-zero
  7295  01265E                     	endif
  7296  01265E                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7297  01265E  0E00               	movlw	low (__mediumconst shr (0+16))
  7298  012660  6EF8               	movwf	tblptru,c
  7299  012662                     	endif
  7300  012662  0008               	tblrd		*
  7301  012664  CFF5 F0E2          	movff	tablat,printf@c
  7302  012668  0100               	movlb	0	; () banked
  7303  01266A  51E2               	movf	printf@c& (0+255),w,b
  7304  01266C  B4D8               	btfsc	status,2,c
  7305  01266E  0012               	return	
  7306  012670  D726               	goto	l2423
  7307  012672                     __end_of_printf:
  7308                           	opt stack 0
  7309                           tblptru	equ	0xFF8
  7310                           tblptrh	equ	0xFF7
  7311                           tblptrl	equ	0xFF6
  7312                           tablat	equ	0xFF5
  7313                           prodh	equ	0xFF4
  7314                           prodl	equ	0xFF3
  7315                           postinc0	equ	0xFEE
  7316                           wreg	equ	0xFE8
  7317                           postdec1	equ	0xFE5
  7318                           fsr1h	equ	0xFE2
  7319                           fsr1l	equ	0xFE1
  7320                           indf2	equ	0xFDF
  7321                           postinc2	equ	0xFDE
  7322                           postdec2	equ	0xFDD
  7323                           fsr2h	equ	0xFDA
  7324                           fsr2l	equ	0xFD9
  7325                           status	equ	0xFD8
  7326                           
  7327 ;; *************** function _putch *****************
  7328 ;; Defined at:
  7329 ;;		line 454 in file "Library/Console.c"
  7330 ;; Parameters:    Size  Location     Type
  7331 ;;  c               1    wreg     unsigned char 
  7332 ;; Auto vars:     Size  Location     Type
  7333 ;;  c               1   20[BANK0 ] unsigned char 
  7334 ;; Return value:  Size  Location     Type
  7335 ;;                  1    wreg      void 
  7336 ;; Registers used:
  7337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7338 ;; Tracked objects:
  7339 ;;		On entry : 0/0
  7340 ;;		On exit  : 0/0
  7341 ;;		Unchanged: 0/0
  7342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7343 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7344 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7346 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7347 ;;Total ram usage:        1 bytes
  7348 ;; Hardware stack levels used:    1
  7349 ;; Hardware stack levels required when called:   11
  7350 ;; This function calls:
  7351 ;;		_Console_PrintChar
  7352 ;; This function is called by:
  7353 ;;		_printf
  7354 ;; This function uses a non-reentrant model
  7355 ;;
  7356                           
  7357                           	psect	text23
  7358  016638                     __ptext23:
  7359                           	opt stack 0
  7360  016638                     _putch:
  7361                           	opt stack 18
  7362                           
  7363                           ; BSR set to: 0
  7364                           ;incstack = 0
  7365                           ;putch@c stored from wreg
  7366  016638  0100               	movlb	0	; () banked
  7367  01663A  6FCE               	movwf	putch@c& (0+255),b
  7368                           
  7369                           ;Console.c: 456: Console_PrintChar(c);
  7370  01663C  0100               	movlb	0	; () banked
  7371  01663E  51CE               	movf	putch@c& (0+255),w,b
  7372  016640  EC19  F094         	call	_Console_PrintChar
  7373  016644  0012               	return		;funcret
  7374  016646                     __end_of_putch:
  7375                           	opt stack 0
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           postdec1	equ	0xFE5
  7385                           fsr1h	equ	0xFE2
  7386                           fsr1l	equ	0xFE1
  7387                           indf2	equ	0xFDF
  7388                           postinc2	equ	0xFDE
  7389                           postdec2	equ	0xFDD
  7390                           fsr2h	equ	0xFDA
  7391                           fsr2l	equ	0xFD9
  7392                           status	equ	0xFD8
  7393                           
  7394 ;; *************** function _Console_PrintChar *****************
  7395 ;; Defined at:
  7396 ;;		line 322 in file "Library/Console.c"
  7397 ;; Parameters:    Size  Location     Type
  7398 ;;  pInput          1    wreg     unsigned char 
  7399 ;; Auto vars:     Size  Location     Type
  7400 ;;  pInput          1   19[BANK0 ] unsigned char 
  7401 ;; Return value:  Size  Location     Type
  7402 ;;                  1    wreg      void 
  7403 ;; Registers used:
  7404 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7405 ;; Tracked objects:
  7406 ;;		On entry : 0/0
  7407 ;;		On exit  : 0/0
  7408 ;;		Unchanged: 0/0
  7409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7410 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7411 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;Total ram usage:        4 bytes
  7415 ;; Hardware stack levels used:    1
  7416 ;; Hardware stack levels required when called:   10
  7417 ;; This function calls:
  7418 ;;		_Console_Backspace
  7419 ;;		_Console_FormFeed
  7420 ;;		_Console_IncrementCursor
  7421 ;;		_Console_NewLine
  7422 ;;		_Console_ResetCursor
  7423 ;;		_Console_Tab
  7424 ;; This function is called by:
  7425 ;;		_putch
  7426 ;;		_Console_PrintString
  7427 ;; This function uses a non-reentrant model
  7428 ;;
  7429                           
  7430                           	psect	text24
  7431  012832                     __ptext24:
  7432                           	opt stack 0
  7433  012832                     _Console_PrintChar:
  7434                           	opt stack 18
  7435                           
  7436                           ;incstack = 0
  7437                           ;Console_PrintChar@pInput stored from wreg
  7438  012832  0100               	movlb	0	; () banked
  7439  012834  6FCD               	movwf	Console_PrintChar@pInput& (0+255),b
  7440                           
  7441                           ;Console.c: 324: switch(pInput)
  7442  012836  D0B1               	goto	l1036
  7443  012838                     
  7444                           ;Console.c: 327: case '\n':
  7445                           ;Console.c: 328: Console_NewLine();
  7446  012838  EC73  F0A5         	call	_Console_NewLine	;wreg free
  7447                           
  7448                           ;Console.c: 329: return;
  7449  01283C  0012               	return	
  7450  01283E                     
  7451                           ;Console.c: 331: Console_Backspace();
  7452  01283E  EC98  F0AC         	call	_Console_Backspace	;wreg free
  7453                           
  7454                           ;Console.c: 332: return;
  7455  012842  0012               	return	
  7456  012844                     
  7457                           ;Console.c: 334: Console_FormFeed();
  7458  012844  ECA6  F0A6         	call	_Console_FormFeed	;wreg free
  7459                           
  7460                           ;Console.c: 335: return;
  7461  012848  0012               	return	
  7462  01284A                     
  7463                           ;Console.c: 337: Console_Tab();
  7464  01284A  ECF1  F09F         	call	_Console_Tab	;wreg free
  7465                           
  7466                           ;Console.c: 338: return;
  7467  01284E  0012               	return	
  7468  012850                     
  7469                           ;Console.c: 340: Console_IncrementCursor();
  7470  012850  ECD1  F0AB         	call	_Console_IncrementCursor	;wreg free
  7471                           
  7472                           ;Console.c: 341: return;
  7473  012854  0012               	return	
  7474  012856                     
  7475                           ;Console.c: 343: Console_ResetCursor();
  7476  012856  ECD3  F0B1         	call	_Console_ResetCursor	;wreg free
  7477                           
  7478                           ;Console.c: 344: return;
  7479  01285A  0012               	return	
  7480  01285C                     
  7481                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7482                           
  7483                           ;Console.c: 349: default:
  7484  01285C  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7485  012860  0E7F               	movlw	127
  7486  012862  0100               	movlb	0	; () banked
  7487  012864  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7488  012866  0100               	movlb	0	; () banked
  7489  012868  518E               	movf	_lBufferY& (0+255),w,b
  7490  01286A  0D14               	mullw	20
  7491  01286C  0EAA               	movlw	low _lBuffer
  7492  01286E  0100               	movlb	0	; () banked
  7493  012870  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7494  012872  0E04               	movlw	high _lBuffer
  7495  012874  0100               	movlb	0	; () banked
  7496  012876  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7497  012878  50F3               	movf	prodl,w,c
  7498  01287A  0100               	movlb	0	; () banked
  7499  01287C  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7500  01287E  50F4               	movf	prodh,w,c
  7501  012880  0100               	movlb	0	; () banked
  7502  012882  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7503  012884  0100               	movlb	0	; () banked
  7504  012886  518F               	movf	_lBufferX& (0+255),w,b
  7505  012888  0D01               	mullw	1
  7506  01288A  50F3               	movf	prodl,w,c
  7507  01288C  0100               	movlb	0	; () banked
  7508  01288E  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7509  012890  6ED9               	movwf	fsr2l,c
  7510  012892  50F4               	movf	prodh,w,c
  7511  012894  0100               	movlb	0	; () banked
  7512  012896  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7513  012898  6EDA               	movwf	fsr2h,c
  7514  01289A  50DF               	movf	indf2,w,c
  7515  01289C  0B7F               	andlw	127
  7516  01289E  0100               	movlb	0	; () banked
  7517  0128A0  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7518  0128A2  B4D8               	btfsc	status,2,c
  7519  0128A4  D02E               	goto	l1047
  7520                           
  7521                           ; BSR set to: 0
  7522                           ;Console.c: 351: {
  7523                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7524  0128A6  0E01               	movlw	1
  7525  0128A8  0100               	movlb	0	; () banked
  7526  0128AA  6FFF               	movwf	_change& (0+255),b
  7527                           
  7528                           ; BSR set to: 0
  7529  0128AC  0100               	movlb	0	; () banked
  7530  0128AE  518E               	movf	_lBufferY& (0+255),w,b
  7531  0128B0  0D14               	mullw	20
  7532  0128B2  0EAA               	movlw	low _lBuffer
  7533  0128B4  0100               	movlb	0	; () banked
  7534  0128B6  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7535  0128B8  0E04               	movlw	high _lBuffer
  7536  0128BA  0100               	movlb	0	; () banked
  7537  0128BC  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7538  0128BE  50F3               	movf	prodl,w,c
  7539  0128C0  0100               	movlb	0	; () banked
  7540  0128C2  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7541  0128C4  50F4               	movf	prodh,w,c
  7542  0128C6  0100               	movlb	0	; () banked
  7543  0128C8  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7544  0128CA  0100               	movlb	0	; () banked
  7545  0128CC  518F               	movf	_lBufferX& (0+255),w,b
  7546  0128CE  0D01               	mullw	1
  7547  0128D0  50F3               	movf	prodl,w,c
  7548  0128D2  0100               	movlb	0	; () banked
  7549  0128D4  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7550  0128D6  6ED9               	movwf	fsr2l,c
  7551  0128D8  50F4               	movf	prodh,w,c
  7552  0128DA  0100               	movlb	0	; () banked
  7553  0128DC  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7554  0128DE  6EDA               	movwf	fsr2h,c
  7555  0128E0  0100               	movlb	0	; () banked
  7556  0128E2  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7557  0128E4  0980               	iorlw	128
  7558  0128E6  6EDF               	movwf	indf2,c
  7559                           
  7560                           ; BSR set to: 0
  7561                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  7562  0128E8  0100               	movlb	0	; () banked
  7563  0128EA  518E               	movf	_lBufferY& (0+255),w,b
  7564  0128EC  0D02               	mullw	2
  7565  0128EE  0E00               	movlw	low _lCBuffer
  7566  0128F0  24F3               	addwf	prodl,w,c
  7567  0128F2  6ED9               	movwf	fsr2l,c
  7568  0128F4  0E03               	movlw	high _lCBuffer
  7569  0128F6  20F4               	addwfc	prodh,w,c
  7570  0128F8  6EDA               	movwf	fsr2h,c
  7571  0128FA  C0FD  FFDE         	movff	_gForecolour,postinc2
  7572  0128FE  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  7573  012902                     l1047:
  7574                           
  7575                           ; BSR set to: 0
  7576                           ;Console.c: 354: }
  7577                           ;Console.c: 368: if(Console_IncrementCursor())
  7578                           
  7579                           ; BSR set to: 0
  7580  012902  ECD1  F0AB         	call	_Console_IncrementCursor	;wreg free
  7581  012906  0900               	iorlw	0
  7582  012908  B4D8               	btfsc	status,2,c
  7583  01290A  0012               	return	
  7584                           
  7585                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  7586  01290C  C0CD  F0CA         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  7587  012910  0E7F               	movlw	127
  7588  012912  0100               	movlb	0	; () banked
  7589  012914  17CA               	andwf	??_Console_PrintChar& (0+255),f,b
  7590  012916  0100               	movlb	0	; () banked
  7591  012918  518E               	movf	_lBufferY& (0+255),w,b
  7592  01291A  0D14               	mullw	20
  7593  01291C  0EAA               	movlw	low _lBuffer
  7594  01291E  0100               	movlb	0	; () banked
  7595  012920  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7596  012922  0E04               	movlw	high _lBuffer
  7597  012924  0100               	movlb	0	; () banked
  7598  012926  6FCC               	movwf	(??_Console_PrintChar+2)& (0+255),b
  7599  012928  50F3               	movf	prodl,w,c
  7600  01292A  0100               	movlb	0	; () banked
  7601  01292C  27CB               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  7602  01292E  50F4               	movf	prodh,w,c
  7603  012930  0100               	movlb	0	; () banked
  7604  012932  23CC               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  7605  012934  0100               	movlb	0	; () banked
  7606  012936  518F               	movf	_lBufferX& (0+255),w,b
  7607  012938  0D01               	mullw	1
  7608  01293A  50F3               	movf	prodl,w,c
  7609  01293C  0100               	movlb	0	; () banked
  7610  01293E  25CB               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  7611  012940  6ED9               	movwf	fsr2l,c
  7612  012942  50F4               	movf	prodh,w,c
  7613  012944  0100               	movlb	0	; () banked
  7614  012946  21CC               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  7615  012948  6EDA               	movwf	fsr2h,c
  7616  01294A  50DF               	movf	indf2,w,c
  7617  01294C  0B7F               	andlw	127
  7618  01294E  0100               	movlb	0	; () banked
  7619  012950  19CA               	xorwf	??_Console_PrintChar& (0+255),w,b
  7620  012952  B4D8               	btfsc	status,2,c
  7621  012954  0012               	return	
  7622                           
  7623                           ; BSR set to: 0
  7624                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  7625  012956  0E01               	movlw	1
  7626  012958  0100               	movlb	0	; () banked
  7627  01295A  6FFF               	movwf	_change& (0+255),b
  7628                           
  7629                           ; BSR set to: 0
  7630  01295C  0100               	movlb	0	; () banked
  7631  01295E  518E               	movf	_lBufferY& (0+255),w,b
  7632  012960  0D14               	mullw	20
  7633  012962  0EAA               	movlw	low _lBuffer
  7634  012964  0100               	movlb	0	; () banked
  7635  012966  6FCA               	movwf	??_Console_PrintChar& (0+255),b
  7636  012968  0E04               	movlw	high _lBuffer
  7637  01296A  0100               	movlb	0	; () banked
  7638  01296C  6FCB               	movwf	(??_Console_PrintChar+1)& (0+255),b
  7639  01296E  50F3               	movf	prodl,w,c
  7640  012970  0100               	movlb	0	; () banked
  7641  012972  27CA               	addwf	??_Console_PrintChar& (0+255),f,b
  7642  012974  50F4               	movf	prodh,w,c
  7643  012976  0100               	movlb	0	; () banked
  7644  012978  23CB               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  7645  01297A  0100               	movlb	0	; () banked
  7646  01297C  518F               	movf	_lBufferX& (0+255),w,b
  7647  01297E  0D01               	mullw	1
  7648  012980  50F3               	movf	prodl,w,c
  7649  012982  0100               	movlb	0	; () banked
  7650  012984  25CA               	addwf	??_Console_PrintChar& (0+255),w,b
  7651  012986  6ED9               	movwf	fsr2l,c
  7652  012988  50F4               	movf	prodh,w,c
  7653  01298A  0100               	movlb	0	; () banked
  7654  01298C  21CB               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  7655  01298E  6EDA               	movwf	fsr2h,c
  7656  012990  0100               	movlb	0	; () banked
  7657  012992  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7658  012994  0980               	iorlw	128
  7659  012996  6EDF               	movwf	indf2,c
  7660                           
  7661                           ; BSR set to: 0
  7662                           ;Console.c: 372: };
  7663                           
  7664                           ; BSR set to: 0
  7665                           ;Console.c: 371: return;
  7666                           
  7667                           ; BSR set to: 0
  7668                           
  7669                           ; BSR set to: 0
  7670  012998  0012               	return	
  7671  01299A                     l1036:
  7672                           
  7673                           ; BSR set to: 0
  7674  01299A  0100               	movlb	0	; () banked
  7675  01299C  51CD               	movf	Console_PrintChar@pInput& (0+255),w,b
  7676                           
  7677                           ; Switch size 1, requested type "space"
  7678                           ; Number of cases is 8, Range of values is 7 to 35
  7679                           ; switch strategies available:
  7680                           ; Name         Instructions Cycles
  7681                           ; simple_byte           25    13 (average)
  7682                           ;	Chosen strategy is simple_byte
  7683  01299E  0A07               	xorlw	7	; case 7
  7684  0129A0  B4D8               	btfsc	status,2,c
  7685  0129A2  D756               	goto	l1043
  7686  0129A4  0A0F               	xorlw	15	; case 8
  7687  0129A6  B4D8               	btfsc	status,2,c
  7688  0129A8  D74A               	goto	l1040
  7689  0129AA  0A01               	xorlw	1	; case 9
  7690  0129AC  B4D8               	btfsc	status,2,c
  7691  0129AE  D74D               	goto	l1042
  7692  0129B0  0A03               	xorlw	3	; case 10
  7693  0129B2  B4D8               	btfsc	status,2,c
  7694  0129B4  D741               	goto	l1037
  7695  0129B6  0A06               	xorlw	6	; case 12
  7696  0129B8  B4D8               	btfsc	status,2,c
  7697  0129BA  D744               	goto	l1041
  7698  0129BC  0A01               	xorlw	1	; case 13
  7699  0129BE  B4D8               	btfsc	status,2,c
  7700  0129C0  D73B               	goto	l1037
  7701  0129C2  0A2D               	xorlw	45	; case 32
  7702  0129C4  B4D8               	btfsc	status,2,c
  7703  0129C6  D74A               	goto	l1045
  7704  0129C8  0A03               	xorlw	3	; case 35
  7705  0129CA  B4D8               	btfsc	status,2,c
  7706  0129CC  D744               	goto	l1044
  7707  0129CE  D746               	goto	l1045
  7708  0129D0                     __end_of_Console_PrintChar:
  7709                           	opt stack 0
  7710                           tblptru	equ	0xFF8
  7711                           tblptrh	equ	0xFF7
  7712                           tblptrl	equ	0xFF6
  7713                           tablat	equ	0xFF5
  7714                           prodh	equ	0xFF4
  7715                           prodl	equ	0xFF3
  7716                           postinc0	equ	0xFEE
  7717                           wreg	equ	0xFE8
  7718                           postdec1	equ	0xFE5
  7719                           fsr1h	equ	0xFE2
  7720                           fsr1l	equ	0xFE1
  7721                           indf2	equ	0xFDF
  7722                           postinc2	equ	0xFDE
  7723                           postdec2	equ	0xFDD
  7724                           fsr2h	equ	0xFDA
  7725                           fsr2l	equ	0xFD9
  7726                           status	equ	0xFD8
  7727                           
  7728 ;; *************** function _Console_Tab *****************
  7729 ;; Defined at:
  7730 ;;		line 260 in file "Library/Console.c"
  7731 ;; Parameters:    Size  Location     Type
  7732 ;;		None
  7733 ;; Auto vars:     Size  Location     Type
  7734 ;;  c               1   15[BANK0 ] unsigned char 
  7735 ;;  i               1   14[BANK0 ] unsigned char 
  7736 ;;  t               1   13[BANK0 ] unsigned char 
  7737 ;; Return value:  Size  Location     Type
  7738 ;;                  1    wreg      void 
  7739 ;; Registers used:
  7740 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7741 ;; Tracked objects:
  7742 ;;		On entry : 0/0
  7743 ;;		On exit  : 0/0
  7744 ;;		Unchanged: 0/0
  7745 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7746 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7747 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7748 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7749 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7750 ;;Total ram usage:        8 bytes
  7751 ;; Hardware stack levels used:    1
  7752 ;; Hardware stack levels required when called:    9
  7753 ;; This function calls:
  7754 ;;		_Console_ClearCursor
  7755 ;;		_Console_IncrementCursor
  7756 ;;		___awdiv
  7757 ;; This function is called by:
  7758 ;;		_Console_PrintChar
  7759 ;; This function uses a non-reentrant model
  7760 ;;
  7761                           
  7762                           	psect	text25
  7763  013FE2                     __ptext25:
  7764                           	opt stack 0
  7765  013FE2                     _Console_Tab:
  7766                           	opt stack 18
  7767                           
  7768                           ;Console.c: 262: UINT8 i = 0;
  7769                           
  7770                           ;incstack = 0
  7771  013FE2  0E00               	movlw	0
  7772  013FE4  0100               	movlb	0	; () banked
  7773  013FE6  6FC8               	movwf	Console_Tab@i& (0+255),b
  7774                           
  7775                           ; BSR set to: 0
  7776                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  7777  013FE8  0EFA               	movlw	250
  7778  013FEA  2447               	addwf	_gCursor,w,c
  7779  013FEC  0100               	movlb	0	; () banked
  7780  013FEE  6FBA               	movwf	___awdiv@dividend& (0+255),b
  7781  013FF0  0EFF               	movlw	255
  7782  013FF2  2048               	addwfc	_gCursor+1,w,c
  7783  013FF4  0100               	movlb	0	; () banked
  7784  013FF6  6FBB               	movwf	(___awdiv@dividend+1)& (0+255),b
  7785  013FF8  0E00               	movlw	0
  7786  013FFA  0100               	movlb	0	; () banked
  7787  013FFC  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7788  013FFE  0E06               	movlw	6
  7789  014000  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7790  014002  ECB2  F0A0         	call	___awdiv	;wreg free
  7791  014006  0100               	movlb	0	; () banked
  7792  014008  51BA               	movf	?___awdiv& (0+255),w,b
  7793  01400A  0100               	movlb	0	; () banked
  7794  01400C  6FC9               	movwf	Console_Tab@c& (0+255),b
  7795                           
  7796                           ; BSR set to: 0
  7797                           ;Console.c: 264: UINT8 t = c/4;
  7798  01400E  C0C9  F0BA         	movff	Console_Tab@c,___awdiv@dividend
  7799  014012  0100               	movlb	0	; () banked
  7800  014014  6BBB               	clrf	(___awdiv@dividend+1)& (0+255),b
  7801  014016  0E00               	movlw	0
  7802  014018  0100               	movlb	0	; () banked
  7803  01401A  6FBD               	movwf	(___awdiv@divisor+1)& (0+255),b
  7804  01401C  0E04               	movlw	4
  7805  01401E  6FBC               	movwf	___awdiv@divisor& (0+255),b
  7806  014020  ECB2  F0A0         	call	___awdiv	;wreg free
  7807  014024  0100               	movlb	0	; () banked
  7808  014026  51BA               	movf	?___awdiv& (0+255),w,b
  7809  014028  0100               	movlb	0	; () banked
  7810  01402A  6FC7               	movwf	Console_Tab@t& (0+255),b
  7811                           
  7812                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  7813  01402C  0E00               	movlw	0
  7814  01402E  0100               	movlb	0	; () banked
  7815  014030  6FC8               	movwf	Console_Tab@i& (0+255),b
  7816  014032  D006               	goto	l1009
  7817  014034                     
  7818                           ; BSR set to: 0
  7819                           ;Console.c: 266: {
  7820                           ;Console.c: 267: Console_ClearCursor();
  7821                           
  7822                           ; BSR set to: 0
  7823  014034  EC4C  F0AF         	call	_Console_ClearCursor	;wreg free
  7824                           
  7825                           ;Console.c: 268: Console_IncrementCursor();
  7826  014038  ECD1  F0AB         	call	_Console_IncrementCursor	;wreg free
  7827  01403C  0100               	movlb	0	; () banked
  7828  01403E  2BC8               	incf	Console_Tab@i& (0+255),f,b
  7829  014040                     l1009:
  7830                           
  7831                           ; BSR set to: 0
  7832                           
  7833                           ; BSR set to: 0
  7834  014040  0100               	movlb	0	; () banked
  7835  014042  51C7               	movf	Console_Tab@t& (0+255),w,b
  7836  014044  0D04               	mullw	4
  7837  014046  1EF3               	comf	prodl,f,c
  7838  014048  1EF4               	comf	prodh,f,c
  7839  01404A  4AF3               	infsnz	prodl,f,c
  7840  01404C  2AF4               	incf	prodh,f,c
  7841  01404E  0100               	movlb	0	; () banked
  7842  014050  51C9               	movf	Console_Tab@c& (0+255),w,b
  7843  014052  0100               	movlb	0	; () banked
  7844  014054  6FC2               	movwf	??_Console_Tab& (0+255),b
  7845  014056  6BC3               	clrf	(??_Console_Tab+1)& (0+255),b
  7846  014058  50F3               	movf	prodl,w,c
  7847  01405A  0100               	movlb	0	; () banked
  7848  01405C  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7849  01405E  50F4               	movf	prodh,w,c
  7850  014060  0100               	movlb	0	; () banked
  7851  014062  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7852  014064  0100               	movlb	0	; () banked
  7853  014066  1FC2               	comf	??_Console_Tab& (0+255),f,b
  7854  014068  1FC3               	comf	(??_Console_Tab+1)& (0+255),f,b
  7855  01406A  4BC2               	infsnz	??_Console_Tab& (0+255),f,b
  7856  01406C  2BC3               	incf	(??_Console_Tab+1)& (0+255),f,b
  7857  01406E  0E04               	movlw	4
  7858  014070  0100               	movlb	0	; () banked
  7859  014072  27C2               	addwf	??_Console_Tab& (0+255),f,b
  7860  014074  0E00               	movlw	0
  7861  014076  23C3               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  7862  014078  0100               	movlb	0	; () banked
  7863  01407A  51C8               	movf	Console_Tab@i& (0+255),w,b
  7864  01407C  0100               	movlb	0	; () banked
  7865  01407E  6FC4               	movwf	(??_Console_Tab+2)& (0+255),b
  7866  014080  6BC5               	clrf	(??_Console_Tab+3)& (0+255),b
  7867  014082  0100               	movlb	0	; () banked
  7868  014084  51C2               	movf	??_Console_Tab& (0+255),w,b
  7869  014086  0100               	movlb	0	; () banked
  7870  014088  5DC4               	subwf	(??_Console_Tab+2)& (0+255),w,b
  7871  01408A  0100               	movlb	0	; () banked
  7872  01408C  51C5               	movf	(??_Console_Tab+3)& (0+255),w,b
  7873  01408E  0A80               	xorlw	128
  7874  014090  0100               	movlb	0	; () banked
  7875  014092  6FC6               	movwf	(??_Console_Tab+4)& (0+255),b
  7876  014094  0100               	movlb	0	; () banked
  7877  014096  51C3               	movf	(??_Console_Tab+1)& (0+255),w,b
  7878  014098  0A80               	xorlw	128
  7879  01409A  0100               	movlb	0	; () banked
  7880  01409C  59C6               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  7881  01409E  B0D8               	btfsc	status,0,c
  7882  0140A0  0012               	return	
  7883  0140A2  D7C8               	goto	l1010
  7884  0140A4                     __end_of_Console_Tab:
  7885                           	opt stack 0
  7886                           tblptru	equ	0xFF8
  7887                           tblptrh	equ	0xFF7
  7888                           tblptrl	equ	0xFF6
  7889                           tablat	equ	0xFF5
  7890                           prodh	equ	0xFF4
  7891                           prodl	equ	0xFF3
  7892                           postinc0	equ	0xFEE
  7893                           wreg	equ	0xFE8
  7894                           postdec1	equ	0xFE5
  7895                           fsr1h	equ	0xFE2
  7896                           fsr1l	equ	0xFE1
  7897                           indf2	equ	0xFDF
  7898                           postinc2	equ	0xFDE
  7899                           postdec2	equ	0xFDD
  7900                           fsr2h	equ	0xFDA
  7901                           fsr2l	equ	0xFD9
  7902                           status	equ	0xFD8
  7903                           
  7904 ;; *************** function ___awdiv *****************
  7905 ;; Defined at:
  7906 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  7907 ;; Parameters:    Size  Location     Type
  7908 ;;  dividend        2    0[BANK0 ] int 
  7909 ;;  divisor         2    2[BANK0 ] int 
  7910 ;; Auto vars:     Size  Location     Type
  7911 ;;  quotient        2    6[BANK0 ] int 
  7912 ;;  sign            1    5[BANK0 ] unsigned char 
  7913 ;;  counter         1    4[BANK0 ] unsigned char 
  7914 ;; Return value:  Size  Location     Type
  7915 ;;                  2    0[BANK0 ] int 
  7916 ;; Registers used:
  7917 ;;		wreg, status,2, status,0
  7918 ;; Tracked objects:
  7919 ;;		On entry : 0/0
  7920 ;;		On exit  : 0/0
  7921 ;;		Unchanged: 0/0
  7922 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7923 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7924 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7925 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7926 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7927 ;;Total ram usage:        8 bytes
  7928 ;; Hardware stack levels used:    1
  7929 ;; Hardware stack levels required when called:    7
  7930 ;; This function calls:
  7931 ;;		Nothing
  7932 ;; This function is called by:
  7933 ;;		_Console_Tab
  7934 ;; This function uses a non-reentrant model
  7935 ;;
  7936                           
  7937                           	psect	text26
  7938  014164                     __ptext26:
  7939                           	opt stack 0
  7940  014164                     ___awdiv:
  7941                           	opt stack 19
  7942                           
  7943                           ; BSR set to: 0
  7944                           ;incstack = 0
  7945  014164  0E00               	movlw	0
  7946  014166  0100               	movlb	0	; () banked
  7947  014168  6FBF               	movwf	___awdiv@sign& (0+255),b
  7948                           
  7949                           ; BSR set to: 0
  7950  01416A  0100               	movlb	0	; () banked
  7951  01416C  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  7952  01416E  D008               	goto	l2613
  7953                           
  7954                           ; BSR set to: 0
  7955  014170  0100               	movlb	0	; () banked
  7956  014172  6DBC               	negf	___awdiv@divisor& (0+255),b
  7957  014174  1FBD               	comf	(___awdiv@divisor+1)& (0+255),f,b
  7958  014176  B0D8               	btfsc	status,0,c
  7959  014178  2BBD               	incf	(___awdiv@divisor+1)& (0+255),f,b
  7960                           
  7961                           ; BSR set to: 0
  7962  01417A  0E01               	movlw	1
  7963  01417C  0100               	movlb	0	; () banked
  7964  01417E  6FBF               	movwf	___awdiv@sign& (0+255),b
  7965  014180                     l2613:
  7966                           
  7967                           ; BSR set to: 0
  7968                           
  7969                           ; BSR set to: 0
  7970  014180  0100               	movlb	0	; () banked
  7971  014182  AFBB               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  7972  014184  D008               	goto	l2614
  7973                           
  7974                           ; BSR set to: 0
  7975  014186  0100               	movlb	0	; () banked
  7976  014188  6DBA               	negf	___awdiv@dividend& (0+255),b
  7977  01418A  1FBB               	comf	(___awdiv@dividend+1)& (0+255),f,b
  7978  01418C  B0D8               	btfsc	status,0,c
  7979  01418E  2BBB               	incf	(___awdiv@dividend+1)& (0+255),f,b
  7980                           
  7981                           ; BSR set to: 0
  7982  014190  0E01               	movlw	1
  7983  014192  0100               	movlb	0	; () banked
  7984  014194  1BBF               	xorwf	___awdiv@sign& (0+255),f,b
  7985  014196                     l2614:
  7986                           
  7987                           ; BSR set to: 0
  7988                           
  7989                           ; BSR set to: 0
  7990  014196  0E00               	movlw	0
  7991  014198  0100               	movlb	0	; () banked
  7992  01419A  6FC1               	movwf	(___awdiv@quotient+1)& (0+255),b
  7993  01419C  0E00               	movlw	0
  7994  01419E  6FC0               	movwf	___awdiv@quotient& (0+255),b
  7995                           
  7996                           ; BSR set to: 0
  7997  0141A0  0100               	movlb	0	; () banked
  7998  0141A2  51BC               	movf	___awdiv@divisor& (0+255),w,b
  7999  0141A4  0100               	movlb	0	; () banked
  8000  0141A6  11BD               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  8001  0141A8  B4D8               	btfsc	status,2,c
  8002  0141AA  D02C               	goto	l2621
  8003                           
  8004                           ; BSR set to: 0
  8005  0141AC  0E01               	movlw	1
  8006  0141AE  0100               	movlb	0	; () banked
  8007  0141B0  6FBE               	movwf	___awdiv@counter& (0+255),b
  8008  0141B2  D006               	goto	l2616
  8009  0141B4                     
  8010                           ; BSR set to: 0
  8011                           
  8012                           ; BSR set to: 0
  8013  0141B4  0100               	movlb	0	; () banked
  8014  0141B6  90D8               	bcf	status,0,c
  8015  0141B8  37BC               	rlcf	___awdiv@divisor& (0+255),f,b
  8016  0141BA  37BD               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  8017  0141BC  0100               	movlb	0	; () banked
  8018  0141BE  2BBE               	incf	___awdiv@counter& (0+255),f,b
  8019  0141C0                     l2616:
  8020                           
  8021                           ; BSR set to: 0
  8022                           
  8023                           ; BSR set to: 0
  8024  0141C0  0100               	movlb	0	; () banked
  8025  0141C2  AFBD               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  8026  0141C4  D7F7               	goto	l2617
  8027  0141C6                     u9110:
  8028                           
  8029                           ; BSR set to: 0
  8030                           
  8031                           ; BSR set to: 0
  8032                           
  8033                           ; BSR set to: 0
  8034  0141C6  0100               	movlb	0	; () banked
  8035  0141C8  90D8               	bcf	status,0,c
  8036  0141CA  37C0               	rlcf	___awdiv@quotient& (0+255),f,b
  8037  0141CC  37C1               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  8038                           
  8039                           ; BSR set to: 0
  8040  0141CE  0100               	movlb	0	; () banked
  8041  0141D0  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8042  0141D2  0100               	movlb	0	; () banked
  8043  0141D4  5DBA               	subwf	___awdiv@dividend& (0+255),w,b
  8044  0141D6  0100               	movlb	0	; () banked
  8045  0141D8  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8046  0141DA  0100               	movlb	0	; () banked
  8047  0141DC  59BB               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  8048  0141DE  A0D8               	btfss	status,0,c
  8049  0141E0  D00A               	goto	l2620
  8050                           
  8051                           ; BSR set to: 0
  8052  0141E2  0100               	movlb	0	; () banked
  8053  0141E4  51BC               	movf	___awdiv@divisor& (0+255),w,b
  8054  0141E6  0100               	movlb	0	; () banked
  8055  0141E8  5FBA               	subwf	___awdiv@dividend& (0+255),f,b
  8056  0141EA  0100               	movlb	0	; () banked
  8057  0141EC  51BD               	movf	(___awdiv@divisor+1)& (0+255),w,b
  8058  0141EE  0100               	movlb	0	; () banked
  8059  0141F0  5BBB               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  8060                           
  8061                           ; BSR set to: 0
  8062  0141F2  0100               	movlb	0	; () banked
  8063  0141F4  81C0               	bsf	___awdiv@quotient& (0+255),0,b
  8064  0141F6                     l2620:
  8065                           
  8066                           ; BSR set to: 0
  8067                           
  8068                           ; BSR set to: 0
  8069  0141F6  0100               	movlb	0	; () banked
  8070  0141F8  90D8               	bcf	status,0,c
  8071  0141FA  33BD               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  8072  0141FC  33BC               	rrcf	___awdiv@divisor& (0+255),f,b
  8073                           
  8074                           ; BSR set to: 0
  8075  0141FE  0100               	movlb	0	; () banked
  8076  014200  2FBE               	decfsz	___awdiv@counter& (0+255),f,b
  8077  014202  D7E1               	goto	u9110
  8078  014204                     l2621:
  8079                           
  8080                           ; BSR set to: 0
  8081                           
  8082                           ; BSR set to: 0
  8083                           
  8084                           ; BSR set to: 0
  8085  014204  0100               	movlb	0	; () banked
  8086  014206  51BF               	movf	___awdiv@sign& (0+255),w,b
  8087  014208  0100               	movlb	0	; () banked
  8088  01420A  B4D8               	btfsc	status,2,c
  8089  01420C  D005               	goto	l2622
  8090                           
  8091                           ; BSR set to: 0
  8092  01420E  0100               	movlb	0	; () banked
  8093  014210  6DC0               	negf	___awdiv@quotient& (0+255),b
  8094  014212  1FC1               	comf	(___awdiv@quotient+1)& (0+255),f,b
  8095  014214  B0D8               	btfsc	status,0,c
  8096  014216  2BC1               	incf	(___awdiv@quotient+1)& (0+255),f,b
  8097  014218                     l2622:
  8098                           
  8099                           ; BSR set to: 0
  8100                           
  8101                           ; BSR set to: 0
  8102  014218  C0C0  F0BA         	movff	___awdiv@quotient,?___awdiv
  8103  01421C  C0C1  F0BB         	movff	___awdiv@quotient+1,?___awdiv+1
  8104  014220  0012               	return	
  8105  014222                     __end_of___awdiv:
  8106                           	opt stack 0
  8107                           tblptru	equ	0xFF8
  8108                           tblptrh	equ	0xFF7
  8109                           tblptrl	equ	0xFF6
  8110                           tablat	equ	0xFF5
  8111                           prodh	equ	0xFF4
  8112                           prodl	equ	0xFF3
  8113                           postinc0	equ	0xFEE
  8114                           wreg	equ	0xFE8
  8115                           postdec1	equ	0xFE5
  8116                           fsr1h	equ	0xFE2
  8117                           fsr1l	equ	0xFE1
  8118                           indf2	equ	0xFDF
  8119                           postinc2	equ	0xFDE
  8120                           postdec2	equ	0xFDD
  8121                           fsr2h	equ	0xFDA
  8122                           fsr2l	equ	0xFD9
  8123                           status	equ	0xFD8
  8124                           
  8125 ;; *************** function _Console_IncrementCursor *****************
  8126 ;; Defined at:
  8127 ;;		line 243 in file "Library/Console.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;		None
  8130 ;; Auto vars:     Size  Location     Type
  8131 ;;		None
  8132 ;; Return value:  Size  Location     Type
  8133 ;;                  1    wreg      unsigned char 
  8134 ;; Registers used:
  8135 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8136 ;; Tracked objects:
  8137 ;;		On entry : 0/0
  8138 ;;		On exit  : 0/0
  8139 ;;		Unchanged: 0/0
  8140 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8141 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8142 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8143 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8144 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8145 ;;Total ram usage:        2 bytes
  8146 ;; Hardware stack levels used:    1
  8147 ;; Hardware stack levels required when called:    8
  8148 ;; This function calls:
  8149 ;;		_Console_FormFeed
  8150 ;;		_Console_NewLine
  8151 ;; This function is called by:
  8152 ;;		_Console_Tab
  8153 ;;		_Console_PrintChar
  8154 ;; This function uses a non-reentrant model
  8155 ;;
  8156                           
  8157                           	psect	text27
  8158  0157A2                     __ptext27:
  8159                           	opt stack 0
  8160  0157A2                     _Console_IncrementCursor:
  8161                           	opt stack 18
  8162                           
  8163                           ;Console.c: 246: lBufferX += 1;
  8164                           
  8165                           ; BSR set to: 0
  8166                           ;incstack = 0
  8167  0157A2  0100               	movlb	0	; () banked
  8168  0157A4  2B8F               	incf	_lBufferX& (0+255),f,b
  8169                           
  8170                           ; BSR set to: 0
  8171                           ;Console.c: 248: gCursor.x += 6;
  8172  0157A6  0E06               	movlw	6
  8173  0157A8  2647               	addwf	_gCursor,f,c
  8174  0157AA  0E00               	movlw	0
  8175  0157AC  2248               	addwfc	_gCursor+1,f,c
  8176                           
  8177                           ; BSR set to: 0
  8178                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  8179  0157AE  0E06               	movlw	6
  8180  0157B0  2447               	addwf	_gCursor,w,c
  8181  0157B2  0100               	movlb	0	; () banked
  8182  0157B4  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8183  0157B6  0E00               	movlw	0
  8184  0157B8  2048               	addwfc	_gCursor+1,w,c
  8185  0157BA  0100               	movlb	0	; () banked
  8186  0157BC  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8187  0157BE  0100               	movlb	0	; () banked
  8188  0157C0  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8189  0157C2  D009               	goto	l1004
  8190  0157C4  0100               	movlb	0	; () banked
  8191  0157C6  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8192  0157C8  E104               	bnz	u8970
  8193  0157CA  0E80               	movlw	128
  8194  0157CC  0100               	movlb	0	; () banked
  8195  0157CE  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8196  0157D0  B0D8               	btfsc	status,0,c
  8197  0157D2                     u8970:
  8198                           
  8199                           ; BSR set to: 0
  8200                           ;Console.c: 250: Console_NewLine();
  8201  0157D2  EC73  F0A5         	call	_Console_NewLine	;wreg free
  8202  0157D6                     l1004:
  8203                           
  8204                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  8205  0157D6  0E08               	movlw	8
  8206  0157D8  2449               	addwf	_gCursor+2,w,c
  8207  0157DA  0100               	movlb	0	; () banked
  8208  0157DC  6FBE               	movwf	??_Console_IncrementCursor& (0+255),b
  8209  0157DE  0E00               	movlw	0
  8210  0157E0  204A               	addwfc	_gCursor+3,w,c
  8211  0157E2  0100               	movlb	0	; () banked
  8212  0157E4  6FBF               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  8213  0157E6  0100               	movlb	0	; () banked
  8214  0157E8  BFBF               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  8215  0157EA  D00C               	goto	l1005
  8216  0157EC  0100               	movlb	0	; () banked
  8217  0157EE  51BF               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  8218  0157F0  E105               	bnz	u8980
  8219  0157F2  0E80               	movlw	128
  8220  0157F4  0100               	movlb	0	; () banked
  8221  0157F6  5DBE               	subwf	??_Console_IncrementCursor& (0+255),w,b
  8222  0157F8  A0D8               	btfss	status,0,c
  8223  0157FA  D004               	goto	l1005
  8224  0157FC                     u8980:
  8225                           
  8226                           ; BSR set to: 0
  8227                           ;Console.c: 252: {
  8228                           ;Console.c: 253: Console_FormFeed();
  8229  0157FC  ECA6  F0A6         	call	_Console_FormFeed	;wreg free
  8230                           
  8231                           ;Console.c: 254: return 1;
  8232  015800  0E01               	movlw	1
  8233  015802  0012               	return	
  8234  015804                     l1005:
  8235                           
  8236                           ;Console.c: 255: }
  8237                           ;Console.c: 257: return 0;
  8238  015804  0E00               	movlw	0
  8239  015806  0012               	return	
  8240  015808                     __end_of_Console_IncrementCursor:
  8241                           	opt stack 0
  8242                           tblptru	equ	0xFF8
  8243                           tblptrh	equ	0xFF7
  8244                           tblptrl	equ	0xFF6
  8245                           tablat	equ	0xFF5
  8246                           prodh	equ	0xFF4
  8247                           prodl	equ	0xFF3
  8248                           postinc0	equ	0xFEE
  8249                           wreg	equ	0xFE8
  8250                           postdec1	equ	0xFE5
  8251                           fsr1h	equ	0xFE2
  8252                           fsr1l	equ	0xFE1
  8253                           indf2	equ	0xFDF
  8254                           postinc2	equ	0xFDE
  8255                           postdec2	equ	0xFDD
  8256                           fsr2h	equ	0xFDA
  8257                           fsr2l	equ	0xFD9
  8258                           status	equ	0xFD8
  8259                           
  8260 ;; *************** function _Console_NewLine *****************
  8261 ;; Defined at:
  8262 ;;		line 175 in file "Library/Console.c"
  8263 ;; Parameters:    Size  Location     Type
  8264 ;;		None
  8265 ;; Auto vars:     Size  Location     Type
  8266 ;;		None
  8267 ;; Return value:  Size  Location     Type
  8268 ;;                  1    wreg      void 
  8269 ;; Registers used:
  8270 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8271 ;; Tracked objects:
  8272 ;;		On entry : 0/0
  8273 ;;		On exit  : 0/0
  8274 ;;		Unchanged: 0/0
  8275 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8276 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8277 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8278 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8279 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8280 ;;Total ram usage:        2 bytes
  8281 ;; Hardware stack levels used:    1
  8282 ;; Hardware stack levels required when called:    7
  8283 ;; This function calls:
  8284 ;;		Nothing
  8285 ;; This function is called by:
  8286 ;;		_Console_IncrementCursor
  8287 ;;		_Console_PrintChar
  8288 ;; This function uses a non-reentrant model
  8289 ;;
  8290                           
  8291                           	psect	text28
  8292  014AE6                     __ptext28:
  8293                           	opt stack 0
  8294  014AE6                     _Console_NewLine:
  8295                           	opt stack 18
  8296                           
  8297                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  8298                           
  8299                           ;incstack = 0
  8300  014AE6  D03E               	goto	l983
  8301  014AE8                     
  8302                           ;Console.c: 179: {
  8303                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  8304  014AE8  0100               	movlb	0	; () banked
  8305  014AEA  518E               	movf	_lBufferY& (0+255),w,b
  8306  014AEC  0D14               	mullw	20
  8307  014AEE  0EAA               	movlw	low _lBuffer
  8308  014AF0  0100               	movlb	0	; () banked
  8309  014AF2  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8310  014AF4  0E04               	movlw	high _lBuffer
  8311  014AF6  0100               	movlb	0	; () banked
  8312  014AF8  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8313  014AFA  50F3               	movf	prodl,w,c
  8314  014AFC  0100               	movlb	0	; () banked
  8315  014AFE  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8316  014B00  50F4               	movf	prodh,w,c
  8317  014B02  0100               	movlb	0	; () banked
  8318  014B04  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8319  014B06  0100               	movlb	0	; () banked
  8320  014B08  518F               	movf	_lBufferX& (0+255),w,b
  8321  014B0A  0D01               	mullw	1
  8322  014B0C  50F3               	movf	prodl,w,c
  8323  014B0E  0100               	movlb	0	; () banked
  8324  014B10  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8325  014B12  6ED9               	movwf	fsr2l,c
  8326  014B14  50F4               	movf	prodh,w,c
  8327  014B16  0100               	movlb	0	; () banked
  8328  014B18  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8329  014B1A  6EDA               	movwf	fsr2h,c
  8330  014B1C  50DF               	movf	indf2,w,c
  8331  014B1E  B4D8               	btfsc	status,2,c
  8332  014B20  D01F               	goto	l985
  8333                           
  8334                           ; BSR set to: 0
  8335                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  8336  014B22  0E01               	movlw	1
  8337  014B24  0100               	movlb	0	; () banked
  8338  014B26  6FFF               	movwf	_change& (0+255),b
  8339                           
  8340                           ; BSR set to: 0
  8341  014B28  0100               	movlb	0	; () banked
  8342  014B2A  518E               	movf	_lBufferY& (0+255),w,b
  8343  014B2C  0D14               	mullw	20
  8344  014B2E  0EAA               	movlw	low _lBuffer
  8345  014B30  0100               	movlb	0	; () banked
  8346  014B32  6FBA               	movwf	??_Console_NewLine& (0+255),b
  8347  014B34  0E04               	movlw	high _lBuffer
  8348  014B36  0100               	movlb	0	; () banked
  8349  014B38  6FBB               	movwf	(??_Console_NewLine+1)& (0+255),b
  8350  014B3A  50F3               	movf	prodl,w,c
  8351  014B3C  0100               	movlb	0	; () banked
  8352  014B3E  27BA               	addwf	??_Console_NewLine& (0+255),f,b
  8353  014B40  50F4               	movf	prodh,w,c
  8354  014B42  0100               	movlb	0	; () banked
  8355  014B44  23BB               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  8356  014B46  0100               	movlb	0	; () banked
  8357  014B48  518F               	movf	_lBufferX& (0+255),w,b
  8358  014B4A  0D01               	mullw	1
  8359  014B4C  50F3               	movf	prodl,w,c
  8360  014B4E  0100               	movlb	0	; () banked
  8361  014B50  25BA               	addwf	??_Console_NewLine& (0+255),w,b
  8362  014B52  6ED9               	movwf	fsr2l,c
  8363  014B54  50F4               	movf	prodh,w,c
  8364  014B56  0100               	movlb	0	; () banked
  8365  014B58  21BB               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  8366  014B5A  6EDA               	movwf	fsr2h,c
  8367  014B5C  0E80               	movlw	128
  8368  014B5E  6EDF               	movwf	indf2,c
  8369  014B60                     l985:
  8370                           
  8371                           ; BSR set to: 0
  8372                           ;Console.c: 182: lBufferX ++;
  8373                           
  8374                           ; BSR set to: 0
  8375  014B60  0100               	movlb	0	; () banked
  8376  014B62  2B8F               	incf	_lBufferX& (0+255),f,b
  8377  014B64                     l983:
  8378                           
  8379                           ; BSR set to: 0
  8380  014B64  0E13               	movlw	19
  8381  014B66  0100               	movlb	0	; () banked
  8382  014B68  658F               	cpfsgt	_lBufferX& (0+255),b
  8383  014B6A  D7BE               	goto	l984
  8384                           
  8385                           ; BSR set to: 0
  8386                           ;Console.c: 183: }
  8387                           ;Console.c: 185: lBufferX = 0;
  8388                           
  8389                           ; BSR set to: 0
  8390  014B6C  0E00               	movlw	0
  8391  014B6E  0100               	movlb	0	; () banked
  8392  014B70  6F8F               	movwf	_lBufferX& (0+255),b
  8393                           
  8394                           ; BSR set to: 0
  8395                           ;Console.c: 186: lBufferY ++;
  8396  014B72  0100               	movlb	0	; () banked
  8397  014B74  2B8E               	incf	_lBufferY& (0+255),f,b
  8398                           
  8399                           ; BSR set to: 0
  8400                           ;Console.c: 188: gCursor.y += 8;
  8401  014B76  0E08               	movlw	8
  8402  014B78  2649               	addwf	_gCursor+2,f,c
  8403  014B7A  0E00               	movlw	0
  8404  014B7C  224A               	addwfc	_gCursor+3,f,c
  8405                           
  8406                           ; BSR set to: 0
  8407                           ;Console.c: 189: gCursor.x = 6;
  8408  014B7E  0E00               	movlw	0
  8409  014B80  6E48               	movwf	_gCursor+1,c
  8410  014B82  0E06               	movlw	6
  8411  014B84  6E47               	movwf	_gCursor,c
  8412                           
  8413                           ; BSR set to: 0
  8414  014B86  0012               	return		;funcret
  8415  014B88                     __end_of_Console_NewLine:
  8416                           	opt stack 0
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           postinc0	equ	0xFEE
  8424                           wreg	equ	0xFE8
  8425                           postdec1	equ	0xFE5
  8426                           fsr1h	equ	0xFE2
  8427                           fsr1l	equ	0xFE1
  8428                           indf2	equ	0xFDF
  8429                           postinc2	equ	0xFDE
  8430                           postdec2	equ	0xFDD
  8431                           fsr2h	equ	0xFDA
  8432                           fsr2l	equ	0xFD9
  8433                           status	equ	0xFD8
  8434                           
  8435 ;; *************** function _Console_FormFeed *****************
  8436 ;; Defined at:
  8437 ;;		line 192 in file "Library/Console.c"
  8438 ;; Parameters:    Size  Location     Type
  8439 ;;		None
  8440 ;; Auto vars:     Size  Location     Type
  8441 ;;  y               1    3[BANK0 ] unsigned char 
  8442 ;;  x               1    2[BANK0 ] unsigned char 
  8443 ;; Return value:  Size  Location     Type
  8444 ;;                  1    wreg      void 
  8445 ;; Registers used:
  8446 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8447 ;; Tracked objects:
  8448 ;;		On entry : 0/0
  8449 ;;		On exit  : 0/0
  8450 ;;		Unchanged: 0/0
  8451 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8452 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8453 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8454 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8455 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;Total ram usage:        4 bytes
  8457 ;; Hardware stack levels used:    1
  8458 ;; Hardware stack levels required when called:    7
  8459 ;; This function calls:
  8460 ;;		Nothing
  8461 ;; This function is called by:
  8462 ;;		_Console_IncrementCursor
  8463 ;;		_Console_PrintChar
  8464 ;; This function uses a non-reentrant model
  8465 ;;
  8466                           
  8467                           	psect	text29
  8468  014D4C                     __ptext29:
  8469                           	opt stack 0
  8470  014D4C                     _Console_FormFeed:
  8471                           	opt stack 18
  8472                           
  8473                           ;Console.c: 195: lBufferX = 0;
  8474                           
  8475                           ; BSR set to: 0
  8476                           ;incstack = 0
  8477  014D4C  0E00               	movlw	0
  8478  014D4E  0100               	movlb	0	; () banked
  8479  014D50  6F8F               	movwf	_lBufferX& (0+255),b
  8480                           
  8481                           ;Console.c: 196: lBufferY = 0;
  8482  014D52  0E00               	movlw	0
  8483  014D54  0100               	movlb	0	; () banked
  8484  014D56  6F8E               	movwf	_lBufferY& (0+255),b
  8485                           
  8486                           ;Console.c: 197: UINT8 x, y;
  8487                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  8488  014D58  0E00               	movlw	0
  8489  014D5A  0100               	movlb	0	; () banked
  8490  014D5C  6FBD               	movwf	Console_FormFeed@y& (0+255),b
  8491  014D5E                     l12209:
  8492                           
  8493                           ; BSR set to: 0
  8494  014D5E  0E0E               	movlw	14
  8495  014D60  0100               	movlb	0	; () banked
  8496  014D62  65BD               	cpfsgt	Console_FormFeed@y& (0+255),b
  8497  014D64  D001               	goto	l990
  8498  014D66  D02D               	goto	u8830
  8499  014D68                     l990:
  8500                           
  8501                           ; BSR set to: 0
  8502                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  8503                           
  8504                           ; BSR set to: 0
  8505  014D68  0E00               	movlw	0
  8506  014D6A  0100               	movlb	0	; () banked
  8507  014D6C  6FBC               	movwf	Console_FormFeed@x& (0+255),b
  8508  014D6E                     l12215:
  8509                           
  8510                           ; BSR set to: 0
  8511  014D6E  0E13               	movlw	19
  8512  014D70  0100               	movlb	0	; () banked
  8513  014D72  65BC               	cpfsgt	Console_FormFeed@x& (0+255),b
  8514  014D74  D001               	goto	l992
  8515  014D76  D022               	goto	u8820
  8516  014D78                     l992:
  8517                           
  8518                           ; BSR set to: 0
  8519                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  8520                           
  8521                           ; BSR set to: 0
  8522  014D78  0E01               	movlw	1
  8523  014D7A  0100               	movlb	0	; () banked
  8524  014D7C  6FFF               	movwf	_change& (0+255),b
  8525                           
  8526                           ; BSR set to: 0
  8527  014D7E  0100               	movlb	0	; () banked
  8528  014D80  51BD               	movf	Console_FormFeed@y& (0+255),w,b
  8529  014D82  0D14               	mullw	20
  8530  014D84  0EAA               	movlw	low _lBuffer
  8531  014D86  0100               	movlb	0	; () banked
  8532  014D88  6FBA               	movwf	??_Console_FormFeed& (0+255),b
  8533  014D8A  0E04               	movlw	high _lBuffer
  8534  014D8C  0100               	movlb	0	; () banked
  8535  014D8E  6FBB               	movwf	(??_Console_FormFeed+1)& (0+255),b
  8536  014D90  50F3               	movf	prodl,w,c
  8537  014D92  0100               	movlb	0	; () banked
  8538  014D94  27BA               	addwf	??_Console_FormFeed& (0+255),f,b
  8539  014D96  50F4               	movf	prodh,w,c
  8540  014D98  0100               	movlb	0	; () banked
  8541  014D9A  23BB               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  8542  014D9C  0100               	movlb	0	; () banked
  8543  014D9E  51BC               	movf	Console_FormFeed@x& (0+255),w,b
  8544  014DA0  0D01               	mullw	1
  8545  014DA2  50F3               	movf	prodl,w,c
  8546  014DA4  0100               	movlb	0	; () banked
  8547  014DA6  25BA               	addwf	??_Console_FormFeed& (0+255),w,b
  8548  014DA8  6ED9               	movwf	fsr2l,c
  8549  014DAA  50F4               	movf	prodh,w,c
  8550  014DAC  0100               	movlb	0	; () banked
  8551  014DAE  21BB               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  8552  014DB0  6EDA               	movwf	fsr2h,c
  8553  014DB2  0E80               	movlw	128
  8554  014DB4  6EDF               	movwf	indf2,c
  8555                           
  8556                           ; BSR set to: 0
  8557  014DB6  0100               	movlb	0	; () banked
  8558  014DB8  2BBC               	incf	Console_FormFeed@x& (0+255),f,b
  8559  014DBA  D7D9               	goto	l12215
  8560  014DBC                     u8820:
  8561                           
  8562                           ; BSR set to: 0
  8563                           
  8564                           ; BSR set to: 0
  8565  014DBC  0100               	movlb	0	; () banked
  8566  014DBE  2BBD               	incf	Console_FormFeed@y& (0+255),f,b
  8567  014DC0  D7CE               	goto	l12209
  8568  014DC2                     u8830:
  8569                           
  8570                           ; BSR set to: 0
  8571                           ;Console.c: 204: clearall = 1;
  8572                           
  8573                           ; BSR set to: 0
  8574  014DC2  0E01               	movlw	1
  8575  014DC4  0100               	movlb	0	; () banked
  8576  014DC6  6F90               	movwf	_clearall& (0+255),b
  8577                           
  8578                           ;Console.c: 205: gCursor.x = 6;
  8579  014DC8  0E00               	movlw	0
  8580  014DCA  6E48               	movwf	_gCursor+1,c
  8581  014DCC  0E06               	movlw	6
  8582  014DCE  6E47               	movwf	_gCursor,c
  8583                           
  8584                           ;Console.c: 206: gCursor.y = 6;
  8585  014DD0  0E00               	movlw	0
  8586  014DD2  6E4A               	movwf	_gCursor+3,c
  8587  014DD4  0E06               	movlw	6
  8588  014DD6  6E49               	movwf	_gCursor+2,c
  8589                           
  8590                           ; BSR set to: 0
  8591  014DD8  0012               	return		;funcret
  8592  014DDA                     __end_of_Console_FormFeed:
  8593                           	opt stack 0
  8594                           tblptru	equ	0xFF8
  8595                           tblptrh	equ	0xFF7
  8596                           tblptrl	equ	0xFF6
  8597                           tablat	equ	0xFF5
  8598                           prodh	equ	0xFF4
  8599                           prodl	equ	0xFF3
  8600                           postinc0	equ	0xFEE
  8601                           wreg	equ	0xFE8
  8602                           postdec1	equ	0xFE5
  8603                           fsr1h	equ	0xFE2
  8604                           fsr1l	equ	0xFE1
  8605                           indf2	equ	0xFDF
  8606                           postinc2	equ	0xFDE
  8607                           postdec2	equ	0xFDD
  8608                           fsr2h	equ	0xFDA
  8609                           fsr2l	equ	0xFD9
  8610                           status	equ	0xFD8
  8611                           
  8612 ;; *************** function _Console_ResetCursor *****************
  8613 ;; Defined at:
  8614 ;;		line 297 in file "Library/Console.c"
  8615 ;; Parameters:    Size  Location     Type
  8616 ;;		None
  8617 ;; Auto vars:     Size  Location     Type
  8618 ;;		None
  8619 ;; Return value:  Size  Location     Type
  8620 ;;                  1    wreg      void 
  8621 ;; Registers used:
  8622 ;;		wreg, status,2
  8623 ;; Tracked objects:
  8624 ;;		On entry : 0/0
  8625 ;;		On exit  : 0/0
  8626 ;;		Unchanged: 0/0
  8627 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8628 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8629 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8630 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8631 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8632 ;;Total ram usage:        0 bytes
  8633 ;; Hardware stack levels used:    1
  8634 ;; Hardware stack levels required when called:    7
  8635 ;; This function calls:
  8636 ;;		Nothing
  8637 ;; This function is called by:
  8638 ;;		_Console_PrintChar
  8639 ;; This function uses a non-reentrant model
  8640 ;;
  8641                           
  8642                           	psect	text30
  8643  0163A6                     __ptext30:
  8644                           	opt stack 0
  8645  0163A6                     _Console_ResetCursor:
  8646                           	opt stack 20
  8647                           
  8648                           ;Console.c: 299: gCursor.x = 6;
  8649                           
  8650                           ; BSR set to: 0
  8651                           ;incstack = 0
  8652  0163A6  0E00               	movlw	0
  8653  0163A8  6E48               	movwf	_gCursor+1,c
  8654  0163AA  0E06               	movlw	6
  8655  0163AC  6E47               	movwf	_gCursor,c
  8656                           
  8657                           ;Console.c: 300: gCursor.y = 6;
  8658  0163AE  0E00               	movlw	0
  8659  0163B0  6E4A               	movwf	_gCursor+3,c
  8660  0163B2  0E06               	movlw	6
  8661  0163B4  6E49               	movwf	_gCursor+2,c
  8662                           
  8663                           ;Console.c: 303: lBufferX = 0;
  8664  0163B6  0E00               	movlw	0
  8665  0163B8  0100               	movlb	0	; () banked
  8666  0163BA  6F8F               	movwf	_lBufferX& (0+255),b
  8667                           
  8668                           ;Console.c: 304: lBufferY = 0;
  8669  0163BC  0E00               	movlw	0
  8670  0163BE  0100               	movlb	0	; () banked
  8671  0163C0  6F8E               	movwf	_lBufferY& (0+255),b
  8672                           
  8673                           ; BSR set to: 0
  8674  0163C2  0012               	return		;funcret
  8675  0163C4                     __end_of_Console_ResetCursor:
  8676                           	opt stack 0
  8677                           tblptru	equ	0xFF8
  8678                           tblptrh	equ	0xFF7
  8679                           tblptrl	equ	0xFF6
  8680                           tablat	equ	0xFF5
  8681                           prodh	equ	0xFF4
  8682                           prodl	equ	0xFF3
  8683                           postinc0	equ	0xFEE
  8684                           wreg	equ	0xFE8
  8685                           postdec1	equ	0xFE5
  8686                           fsr1h	equ	0xFE2
  8687                           fsr1l	equ	0xFE1
  8688                           indf2	equ	0xFDF
  8689                           postinc2	equ	0xFDE
  8690                           postdec2	equ	0xFDD
  8691                           fsr2h	equ	0xFDA
  8692                           fsr2l	equ	0xFD9
  8693                           status	equ	0xFD8
  8694                           
  8695 ;; *************** function _Console_Backspace *****************
  8696 ;; Defined at:
  8697 ;;		line 209 in file "Library/Console.c"
  8698 ;; Parameters:    Size  Location     Type
  8699 ;;		None
  8700 ;; Auto vars:     Size  Location     Type
  8701 ;;		None
  8702 ;; Return value:  Size  Location     Type
  8703 ;;                  1    wreg      void 
  8704 ;; Registers used:
  8705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8706 ;; Tracked objects:
  8707 ;;		On entry : 0/0
  8708 ;;		On exit  : 0/0
  8709 ;;		Unchanged: 0/0
  8710 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8715 ;;Total ram usage:        0 bytes
  8716 ;; Hardware stack levels used:    1
  8717 ;; Hardware stack levels required when called:    8
  8718 ;; This function calls:
  8719 ;;		_Console_ClearCursor
  8720 ;; This function is called by:
  8721 ;;		_Console_PrintChar
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           	psect	text31
  8726  015930                     __ptext31:
  8727                           	opt stack 0
  8728  015930                     _Console_Backspace:
  8729                           	opt stack 19
  8730                           
  8731                           ;Console.c: 211: if (lBufferX > 0)
  8732                           
  8733                           ; BSR set to: 0
  8734                           ;incstack = 0
  8735  015930  0100               	movlb	0	; () banked
  8736  015932  518F               	movf	_lBufferX& (0+255),w,b
  8737  015934  B4D8               	btfsc	status,2,c
  8738  015936  D007               	goto	l997
  8739                           
  8740                           ; BSR set to: 0
  8741                           ;Console.c: 212: {
  8742                           ;Console.c: 213: gCursor.x -= 6;
  8743  015938  0EFA               	movlw	250
  8744  01593A  2647               	addwf	_gCursor,f,c
  8745  01593C  0EFF               	movlw	255
  8746  01593E  2248               	addwfc	_gCursor+1,f,c
  8747                           
  8748                           ; BSR set to: 0
  8749                           ;Console.c: 216: lBufferX --;
  8750  015940  0100               	movlb	0	; () banked
  8751  015942  078F               	decf	_lBufferX& (0+255),f,b
  8752                           
  8753                           ;Console.c: 218: }
  8754  015944  D020               	goto	l1000
  8755  015946                     l997:
  8756                           
  8757                           ; BSR set to: 0
  8758                           ;Console.c: 219: else if (lBufferY > 0)
  8759                           
  8760                           ; BSR set to: 0
  8761  015946  0100               	movlb	0	; () banked
  8762  015948  518E               	movf	_lBufferY& (0+255),w,b
  8763  01594A  B4D8               	btfsc	status,2,c
  8764  01594C  D00E               	goto	l999
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;Console.c: 220: {
  8768                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  8769  01594E  0E00               	movlw	0
  8770  015950  6E48               	movwf	_gCursor+1,c
  8771  015952  0E72               	movlw	114
  8772  015954  6E47               	movwf	_gCursor,c
  8773                           
  8774                           ; BSR set to: 0
  8775                           ;Console.c: 222: gCursor.y -= 8;
  8776  015956  0EF8               	movlw	248
  8777  015958  2649               	addwf	_gCursor+2,f,c
  8778  01595A  0EFF               	movlw	255
  8779  01595C  224A               	addwfc	_gCursor+3,f,c
  8780                           
  8781                           ; BSR set to: 0
  8782                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  8783  01595E  0E13               	movlw	19
  8784  015960  0100               	movlb	0	; () banked
  8785  015962  6F8F               	movwf	_lBufferX& (0+255),b
  8786                           
  8787                           ; BSR set to: 0
  8788                           ;Console.c: 226: lBufferY --;
  8789  015964  0100               	movlb	0	; () banked
  8790  015966  078E               	decf	_lBufferY& (0+255),f,b
  8791                           
  8792                           ;Console.c: 228: }
  8793  015968  D00E               	goto	l1000
  8794  01596A                     l999:
  8795                           
  8796                           ; BSR set to: 0
  8797                           ;Console.c: 229: else
  8798                           ;Console.c: 230: {
  8799                           ;Console.c: 231: gCursor.x = 6;
  8800                           
  8801                           ; BSR set to: 0
  8802  01596A  0E00               	movlw	0
  8803  01596C  6E48               	movwf	_gCursor+1,c
  8804  01596E  0E06               	movlw	6
  8805  015970  6E47               	movwf	_gCursor,c
  8806                           
  8807                           ;Console.c: 232: gCursor.y = 6;
  8808  015972  0E00               	movlw	0
  8809  015974  6E4A               	movwf	_gCursor+3,c
  8810  015976  0E06               	movlw	6
  8811  015978  6E49               	movwf	_gCursor+2,c
  8812                           
  8813                           ;Console.c: 235: lBufferX = 0;
  8814  01597A  0E00               	movlw	0
  8815  01597C  0100               	movlb	0	; () banked
  8816  01597E  6F8F               	movwf	_lBufferX& (0+255),b
  8817                           
  8818                           ;Console.c: 236: lBufferY = 0;
  8819  015980  0E00               	movlw	0
  8820  015982  0100               	movlb	0	; () banked
  8821  015984  6F8E               	movwf	_lBufferY& (0+255),b
  8822  015986                     l1000:
  8823                           
  8824                           ; BSR set to: 0
  8825                           ;Console.c: 238: }
  8826                           ;Console.c: 240: Console_ClearCursor();
  8827                           
  8828                           ; BSR set to: 0
  8829                           
  8830                           ; BSR set to: 0
  8831  015986  EC4C  F0AF         	call	_Console_ClearCursor	;wreg free
  8832  01598A  0012               	return		;funcret
  8833  01598C                     __end_of_Console_Backspace:
  8834                           	opt stack 0
  8835                           tblptru	equ	0xFF8
  8836                           tblptrh	equ	0xFF7
  8837                           tblptrl	equ	0xFF6
  8838                           tablat	equ	0xFF5
  8839                           prodh	equ	0xFF4
  8840                           prodl	equ	0xFF3
  8841                           postinc0	equ	0xFEE
  8842                           wreg	equ	0xFE8
  8843                           postdec1	equ	0xFE5
  8844                           fsr1h	equ	0xFE2
  8845                           fsr1l	equ	0xFE1
  8846                           indf2	equ	0xFDF
  8847                           postinc2	equ	0xFDE
  8848                           postdec2	equ	0xFDD
  8849                           fsr2h	equ	0xFDA
  8850                           fsr2l	equ	0xFD9
  8851                           status	equ	0xFD8
  8852                           
  8853 ;; *************** function _Console_ClearCursor *****************
  8854 ;; Defined at:
  8855 ;;		line 308 in file "Library/Console.c"
  8856 ;; Parameters:    Size  Location     Type
  8857 ;;		None
  8858 ;; Auto vars:     Size  Location     Type
  8859 ;;		None
  8860 ;; Return value:  Size  Location     Type
  8861 ;;                  1    wreg      void 
  8862 ;; Registers used:
  8863 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8864 ;; Tracked objects:
  8865 ;;		On entry : 0/0
  8866 ;;		On exit  : 0/0
  8867 ;;		Unchanged: 0/0
  8868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8869 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8871 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8872 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8873 ;;Total ram usage:        2 bytes
  8874 ;; Hardware stack levels used:    1
  8875 ;; Hardware stack levels required when called:    7
  8876 ;; This function calls:
  8877 ;;		Nothing
  8878 ;; This function is called by:
  8879 ;;		_Console_Backspace
  8880 ;;		_Console_Tab
  8881 ;; This function uses a non-reentrant model
  8882 ;;
  8883                           
  8884                           	psect	text32
  8885  015E98                     __ptext32:
  8886                           	opt stack 0
  8887  015E98                     _Console_ClearCursor:
  8888                           	opt stack 19
  8889                           
  8890                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  8891                           
  8892                           ;incstack = 0
  8893  015E98  0E01               	movlw	1
  8894  015E9A  0100               	movlb	0	; () banked
  8895  015E9C  6FFF               	movwf	_change& (0+255),b
  8896                           
  8897                           ; BSR set to: 0
  8898  015E9E  0100               	movlb	0	; () banked
  8899  015EA0  518E               	movf	_lBufferY& (0+255),w,b
  8900  015EA2  0D14               	mullw	20
  8901  015EA4  0EAA               	movlw	low _lBuffer
  8902  015EA6  0100               	movlb	0	; () banked
  8903  015EA8  6FBA               	movwf	??_Console_ClearCursor& (0+255),b
  8904  015EAA  0E04               	movlw	high _lBuffer
  8905  015EAC  0100               	movlb	0	; () banked
  8906  015EAE  6FBB               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  8907  015EB0  50F3               	movf	prodl,w,c
  8908  015EB2  0100               	movlb	0	; () banked
  8909  015EB4  27BA               	addwf	??_Console_ClearCursor& (0+255),f,b
  8910  015EB6  50F4               	movf	prodh,w,c
  8911  015EB8  0100               	movlb	0	; () banked
  8912  015EBA  23BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  8913  015EBC  0100               	movlb	0	; () banked
  8914  015EBE  518F               	movf	_lBufferX& (0+255),w,b
  8915  015EC0  0D01               	mullw	1
  8916  015EC2  50F3               	movf	prodl,w,c
  8917  015EC4  0100               	movlb	0	; () banked
  8918  015EC6  25BA               	addwf	??_Console_ClearCursor& (0+255),w,b
  8919  015EC8  6ED9               	movwf	fsr2l,c
  8920  015ECA  50F4               	movf	prodh,w,c
  8921  015ECC  0100               	movlb	0	; () banked
  8922  015ECE  21BB               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  8923  015ED0  6EDA               	movwf	fsr2h,c
  8924  015ED2  0E80               	movlw	128
  8925  015ED4  6EDF               	movwf	indf2,c
  8926                           
  8927                           ; BSR set to: 0
  8928  015ED6  0012               	return		;funcret
  8929  015ED8                     __end_of_Console_ClearCursor:
  8930                           	opt stack 0
  8931                           tblptru	equ	0xFF8
  8932                           tblptrh	equ	0xFF7
  8933                           tblptrl	equ	0xFF6
  8934                           tablat	equ	0xFF5
  8935                           prodh	equ	0xFF4
  8936                           prodl	equ	0xFF3
  8937                           postinc0	equ	0xFEE
  8938                           wreg	equ	0xFE8
  8939                           postdec1	equ	0xFE5
  8940                           fsr1h	equ	0xFE2
  8941                           fsr1l	equ	0xFE1
  8942                           indf2	equ	0xFDF
  8943                           postinc2	equ	0xFDE
  8944                           postdec2	equ	0xFDD
  8945                           fsr2h	equ	0xFDA
  8946                           fsr2l	equ	0xFD9
  8947                           status	equ	0xFD8
  8948                           
  8949 ;; *************** function ___fltol *****************
  8950 ;; Defined at:
  8951 ;;		line 43 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\fltol.c"
  8952 ;; Parameters:    Size  Location     Type
  8953 ;;  f1              4   57[BANK0 ] void 
  8954 ;; Auto vars:     Size  Location     Type
  8955 ;;  exp1            1   62[BANK0 ] unsigned char 
  8956 ;;  sign1           1   61[BANK0 ] unsigned char 
  8957 ;; Return value:  Size  Location     Type
  8958 ;;                  4   57[BANK0 ] long 
  8959 ;; Registers used:
  8960 ;;		wreg, status,2, status,0
  8961 ;; Tracked objects:
  8962 ;;		On entry : 0/0
  8963 ;;		On exit  : 0/0
  8964 ;;		Unchanged: 0/0
  8965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8966 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8967 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8968 ;;      Temps:          0       0       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8969 ;;      Totals:         0       6       4       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8970 ;;Total ram usage:       10 bytes
  8971 ;; Hardware stack levels used:    1
  8972 ;; Hardware stack levels required when called:    7
  8973 ;; This function calls:
  8974 ;;		Nothing
  8975 ;; This function is called by:
  8976 ;;		_findClosestWall
  8977 ;;		_mode1
  8978 ;; This function uses a non-reentrant model
  8979 ;;
  8980                           
  8981                           	psect	text33
  8982  013632                     __ptext33:
  8983                           	opt stack 0
  8984  013632                     ___fltol:
  8985                           	opt stack 21
  8986                           
  8987                           ; BSR set to: 0
  8988                           ;incstack = 0
  8989  013632  0100               	movlb	0	; () banked
  8990  013634  35F5               	rlcf	(___fltol@f1+2)& (0+255),w,b
  8991  013636  35F6               	rlcf	(___fltol@f1+3)& (0+255),w,b
  8992  013638  0100               	movlb	0	; () banked
  8993  01363A  6FF8               	movwf	___fltol@exp1& (0+255),b
  8994  01363C  0100               	movlb	0	; () banked
  8995  01363E  51F8               	movf	___fltol@exp1& (0+255),w,b
  8996  013640  A4D8               	btfss	status,2,c
  8997  013642  D00A               	goto	l2675
  8998                           
  8999                           ; BSR set to: 0
  9000  013644  0E00               	movlw	0
  9001  013646  0100               	movlb	0	; () banked
  9002  013648  6FF3               	movwf	?___fltol& (0+255),b
  9003  01364A  0E00               	movlw	0
  9004  01364C  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9005  01364E  0E00               	movlw	0
  9006  013650  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9007  013652  0E00               	movlw	0
  9008  013654  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9009                           
  9010                           ; BSR set to: 0
  9011  013656  0012               	return	
  9012  013658                     l2675:
  9013                           
  9014                           ; BSR set to: 0
  9015                           
  9016                           ; BSR set to: 0
  9017  013658  C0F3  F100         	movff	___fltol@f1,??___fltol
  9018  01365C  C0F4  F101         	movff	___fltol@f1+1,??___fltol+1
  9019  013660  C0F5  F102         	movff	___fltol@f1+2,??___fltol+2
  9020  013664  C0F6  F103         	movff	___fltol@f1+3,??___fltol+3
  9021  013668  0E20               	movlw	32
  9022  01366A  D006               	goto	u11040
  9023  01366C                     u11045:
  9024  01366C  0101               	movlb	1	; () banked
  9025  01366E  90D8               	bcf	status,0,c
  9026  013670  3303               	rrcf	(??___fltol+3)& (0+255),f,b
  9027  013672  3302               	rrcf	(??___fltol+2)& (0+255),f,b
  9028  013674  3301               	rrcf	(??___fltol+1)& (0+255),f,b
  9029  013676  3300               	rrcf	??___fltol& (0+255),f,b
  9030  013678                     u11040:
  9031  013678  2EE8               	decfsz	wreg,f,c
  9032  01367A  D7F8               	goto	u11045
  9033  01367C  0101               	movlb	1	; () banked
  9034  01367E  5100               	movf	??___fltol& (0+255),w,b
  9035  013680  0100               	movlb	0	; () banked
  9036  013682  6FF7               	movwf	___fltol@sign1& (0+255),b
  9037                           
  9038                           ; BSR set to: 0
  9039  013684  0100               	movlb	0	; () banked
  9040  013686  8FF5               	bsf	(___fltol@f1+2)& (0+255),7,b
  9041                           
  9042                           ; BSR set to: 0
  9043  013688  0EFF               	movlw	255
  9044  01368A  0100               	movlb	0	; () banked
  9045  01368C  17F3               	andwf	___fltol@f1& (0+255),f,b
  9046  01368E  0EFF               	movlw	255
  9047  013690  17F4               	andwf	(___fltol@f1+1)& (0+255),f,b
  9048  013692  0EFF               	movlw	255
  9049  013694  17F5               	andwf	(___fltol@f1+2)& (0+255),f,b
  9050  013696  0E00               	movlw	0
  9051  013698  17F6               	andwf	(___fltol@f1+3)& (0+255),f,b
  9052                           
  9053                           ; BSR set to: 0
  9054  01369A  0E96               	movlw	150
  9055  01369C  0100               	movlb	0	; () banked
  9056  01369E  5FF8               	subwf	___fltol@exp1& (0+255),f,b
  9057                           
  9058                           ; BSR set to: 0
  9059  0136A0  0100               	movlb	0	; () banked
  9060  0136A2  AFF8               	btfss	___fltol@exp1& (0+255),7,b
  9061  0136A4  D01A               	goto	l2677
  9062                           
  9063                           ; BSR set to: 0
  9064  0136A6  0100               	movlb	0	; () banked
  9065  0136A8  51F8               	movf	___fltol@exp1& (0+255),w,b
  9066  0136AA  0A80               	xorlw	128
  9067  0136AC  0F97               	addlw	151
  9068  0136AE  B0D8               	btfsc	status,0,c
  9069  0136B0  D00A               	goto	l2678
  9070                           
  9071                           ; BSR set to: 0
  9072  0136B2  0E00               	movlw	0
  9073  0136B4  0100               	movlb	0	; () banked
  9074  0136B6  6FF3               	movwf	?___fltol& (0+255),b
  9075  0136B8  0E00               	movlw	0
  9076  0136BA  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9077  0136BC  0E00               	movlw	0
  9078  0136BE  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9079  0136C0  0E00               	movlw	0
  9080  0136C2  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9081                           
  9082                           ; BSR set to: 0
  9083  0136C4  0012               	return	
  9084  0136C6                     l2678:
  9085                           
  9086                           ; BSR set to: 0
  9087                           
  9088                           ; BSR set to: 0
  9089                           
  9090                           ; BSR set to: 0
  9091  0136C6  0100               	movlb	0	; () banked
  9092  0136C8  90D8               	bcf	status,0,c
  9093  0136CA  33F6               	rrcf	(___fltol@f1+3)& (0+255),f,b
  9094  0136CC  33F5               	rrcf	(___fltol@f1+2)& (0+255),f,b
  9095  0136CE  33F4               	rrcf	(___fltol@f1+1)& (0+255),f,b
  9096  0136D0  33F3               	rrcf	___fltol@f1& (0+255),f,b
  9097                           
  9098                           ; BSR set to: 0
  9099  0136D2  0100               	movlb	0	; () banked
  9100  0136D4  3FF8               	incfsz	___fltol@exp1& (0+255),f,b
  9101  0136D6  D7F7               	goto	l2678
  9102                           
  9103                           ; BSR set to: 0
  9104  0136D8  D01B               	goto	u11080
  9105  0136DA                     l2677:
  9106                           
  9107                           ; BSR set to: 0
  9108                           
  9109                           ; BSR set to: 0
  9110  0136DA  0E1F               	movlw	31
  9111  0136DC  0100               	movlb	0	; () banked
  9112  0136DE  65F8               	cpfsgt	___fltol@exp1& (0+255),b
  9113  0136E0  D012               	goto	l2683
  9114                           
  9115                           ; BSR set to: 0
  9116  0136E2  0E00               	movlw	0
  9117  0136E4  0100               	movlb	0	; () banked
  9118  0136E6  6FF3               	movwf	?___fltol& (0+255),b
  9119  0136E8  0E00               	movlw	0
  9120  0136EA  6FF4               	movwf	(?___fltol+1)& (0+255),b
  9121  0136EC  0E00               	movlw	0
  9122  0136EE  6FF5               	movwf	(?___fltol+2)& (0+255),b
  9123  0136F0  0E00               	movlw	0
  9124  0136F2  6FF6               	movwf	(?___fltol+3)& (0+255),b
  9125                           
  9126                           ; BSR set to: 0
  9127  0136F4  0012               	return	
  9128  0136F6                     
  9129                           ; BSR set to: 0
  9130                           
  9131                           ; BSR set to: 0
  9132  0136F6  0100               	movlb	0	; () banked
  9133  0136F8  90D8               	bcf	status,0,c
  9134  0136FA  37F3               	rlcf	___fltol@f1& (0+255),f,b
  9135  0136FC  37F4               	rlcf	(___fltol@f1+1)& (0+255),f,b
  9136  0136FE  37F5               	rlcf	(___fltol@f1+2)& (0+255),f,b
  9137  013700  37F6               	rlcf	(___fltol@f1+3)& (0+255),f,b
  9138  013702  0100               	movlb	0	; () banked
  9139  013704  07F8               	decf	___fltol@exp1& (0+255),f,b
  9140  013706                     l2683:
  9141                           
  9142                           ; BSR set to: 0
  9143                           
  9144                           ; BSR set to: 0
  9145  013706  0100               	movlb	0	; () banked
  9146  013708  51F8               	movf	___fltol@exp1& (0+255),w,b
  9147  01370A  0100               	movlb	0	; () banked
  9148  01370C  A4D8               	btfss	status,2,c
  9149  01370E  D7F3               	goto	l2684
  9150  013710                     u11080:
  9151                           
  9152                           ; BSR set to: 0
  9153                           
  9154                           ; BSR set to: 0
  9155                           
  9156                           ; BSR set to: 0
  9157  013710  0100               	movlb	0	; () banked
  9158  013712  51F7               	movf	___fltol@sign1& (0+255),w,b
  9159  013714  0100               	movlb	0	; () banked
  9160  013716  B4D8               	btfsc	status,2,c
  9161  013718  D009               	goto	l2686
  9162                           
  9163                           ; BSR set to: 0
  9164  01371A  0100               	movlb	0	; () banked
  9165  01371C  1FF6               	comf	(___fltol@f1+3)& (0+255),f,b
  9166  01371E  1FF5               	comf	(___fltol@f1+2)& (0+255),f,b
  9167  013720  1FF4               	comf	(___fltol@f1+1)& (0+255),f,b
  9168  013722  6DF3               	negf	___fltol@f1& (0+255),b
  9169  013724  0E00               	movlw	0
  9170  013726  23F4               	addwfc	(___fltol@f1+1)& (0+255),f,b
  9171  013728  23F5               	addwfc	(___fltol@f1+2)& (0+255),f,b
  9172  01372A  23F6               	addwfc	(___fltol@f1+3)& (0+255),f,b
  9173  01372C                     l2686:
  9174                           
  9175                           ; BSR set to: 0
  9176                           
  9177                           ; BSR set to: 0
  9178  01372C  C0F3  F0F3         	movff	___fltol@f1,?___fltol
  9179  013730  C0F4  F0F4         	movff	___fltol@f1+1,?___fltol+1
  9180  013734  C0F5  F0F5         	movff	___fltol@f1+2,?___fltol+2
  9181  013738  C0F6  F0F6         	movff	___fltol@f1+3,?___fltol+3
  9182  01373C  0012               	return	
  9183  01373E                     __end_of___fltol:
  9184                           	opt stack 0
  9185                           tblptru	equ	0xFF8
  9186                           tblptrh	equ	0xFF7
  9187                           tblptrl	equ	0xFF6
  9188                           tablat	equ	0xFF5
  9189                           prodh	equ	0xFF4
  9190                           prodl	equ	0xFF3
  9191                           postinc0	equ	0xFEE
  9192                           wreg	equ	0xFE8
  9193                           postdec1	equ	0xFE5
  9194                           fsr1h	equ	0xFE2
  9195                           fsr1l	equ	0xFE1
  9196                           indf2	equ	0xFDF
  9197                           postinc2	equ	0xFDE
  9198                           postdec2	equ	0xFDD
  9199                           fsr2h	equ	0xFDA
  9200                           fsr2l	equ	0xFD9
  9201                           status	equ	0xFD8
  9202                           
  9203 ;; *************** function _Motor_Speed *****************
  9204 ;; Defined at:
  9205 ;;		line 117 in file "Library/Motor.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;  pMotor          2   27[BANK0 ] PTR struct Motor
  9208 ;;		 -> Stepper(6), 
  9209 ;;  pFrequency      2   29[BANK0 ] unsigned short 
  9210 ;; Auto vars:     Size  Location     Type
  9211 ;;		None
  9212 ;; Return value:  Size  Location     Type
  9213 ;;                  1    wreg      unsigned char 
  9214 ;; Registers used:
  9215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9216 ;; Tracked objects:
  9217 ;;		On entry : 0/0
  9218 ;;		On exit  : 0/0
  9219 ;;		Unchanged: 0/0
  9220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9221 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9223 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9224 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9225 ;;Total ram usage:        4 bytes
  9226 ;; Hardware stack levels used:    1
  9227 ;; Hardware stack levels required when called:    9
  9228 ;; This function calls:
  9229 ;;		_Timer0_Init
  9230 ;; This function is called by:
  9231 ;;		_findClosestWall
  9232 ;;		_mode1
  9233 ;; This function uses a non-reentrant model
  9234 ;;
  9235                           
  9236                           	psect	text34
  9237  01627E                     __ptext34:
  9238                           	opt stack 0
  9239  01627E                     _Motor_Speed:
  9240                           	opt stack 19
  9241                           
  9242                           ;Motor.c: 119: pMotor->mFrequency = pFrequency;
  9243                           
  9244                           ; BSR set to: 0
  9245                           ;incstack = 0
  9246  01627E  0100               	movlb	0	; () banked
  9247  016280  EE20 F002          	lfsr	2,2
  9248  016284  51D5               	movf	Motor_Speed@pMotor& (0+255),w,b
  9249  016286  26D9               	addwf	fsr2l,f,c
  9250  016288  51D6               	movf	(Motor_Speed@pMotor+1)& (0+255),w,b
  9251  01628A  22DA               	addwfc	fsr2h,f,c
  9252  01628C  C0D7  FFDE         	movff	Motor_Speed@pFrequency,postinc2
  9253  016290  C0D8  FFDD         	movff	Motor_Speed@pFrequency+1,postdec2
  9254                           
  9255                           ; BSR set to: 0
  9256                           ;Motor.c: 120: Timer0_Init(pFrequency);
  9257  016294  C0D7  F0C7         	movff	Motor_Speed@pFrequency,Timer0_Init@pFrequency
  9258  016298  C0D8  F0C8         	movff	Motor_Speed@pFrequency+1,Timer0_Init@pFrequency+1
  9259  01629C  0100               	movlb	0	; () banked
  9260  01629E  6BC9               	clrf	(Timer0_Init@pFrequency+2)& (0+255),b
  9261  0162A0  6BCA               	clrf	(Timer0_Init@pFrequency+3)& (0+255),b
  9262  0162A2  ECA0  F098         	call	_Timer0_Init	;wreg free
  9263  0162A6  0012               	return	
  9264  0162A8                     __end_of_Motor_Speed:
  9265                           	opt stack 0
  9266                           tblptru	equ	0xFF8
  9267                           tblptrh	equ	0xFF7
  9268                           tblptrl	equ	0xFF6
  9269                           tablat	equ	0xFF5
  9270                           prodh	equ	0xFF4
  9271                           prodl	equ	0xFF3
  9272                           postinc0	equ	0xFEE
  9273                           wreg	equ	0xFE8
  9274                           postdec1	equ	0xFE5
  9275                           fsr1h	equ	0xFE2
  9276                           fsr1l	equ	0xFE1
  9277                           indf2	equ	0xFDF
  9278                           postinc2	equ	0xFDE
  9279                           postdec2	equ	0xFDD
  9280                           fsr2h	equ	0xFDA
  9281                           fsr2l	equ	0xFD9
  9282                           status	equ	0xFD8
  9283                           
  9284 ;; *************** function _Motor_Move *****************
  9285 ;; Defined at:
  9286 ;;		line 51 in file "Library/Motor.c"
  9287 ;; Parameters:    Size  Location     Type
  9288 ;;  pMotor          2    3[BANK0 ] PTR struct Motor
  9289 ;;		 -> Stepper(6), 
  9290 ;;  pDelta          2    5[BANK0 ] short 
  9291 ;; Auto vars:     Size  Location     Type
  9292 ;;		None
  9293 ;; Return value:  Size  Location     Type
  9294 ;;                  1    wreg      unsigned char 
  9295 ;; Registers used:
  9296 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9297 ;; Tracked objects:
  9298 ;;		On entry : 0/0
  9299 ;;		On exit  : 0/0
  9300 ;;		Unchanged: 0/0
  9301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9302 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9303 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9304 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9305 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9306 ;;Total ram usage:        6 bytes
  9307 ;; Hardware stack levels used:    1
  9308 ;; Hardware stack levels required when called:    8
  9309 ;; This function calls:
  9310 ;;		_Timer0_Start
  9311 ;; This function is called by:
  9312 ;;		_findClosestWall
  9313 ;;		_mode1
  9314 ;; This function uses a non-reentrant model
  9315 ;;
  9316                           
  9317                           	psect	text35
  9318  016086                     __ptext35:
  9319                           	opt stack 0
  9320  016086                     _Motor_Move:
  9321                           	opt stack 20
  9322                           
  9323                           ;Motor.c: 54: lMotor = pMotor;
  9324                           
  9325                           ;incstack = 0
  9326  016086  C0BD  F07F         	movff	Motor_Move@pMotor,_lMotor
  9327  01608A  C0BE  F080         	movff	Motor_Move@pMotor+1,_lMotor+1
  9328                           
  9329                           ;Motor.c: 58: if (pMotor->mDelta != 0)
  9330  01608E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9331  016092  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9332  016096  50DE               	movf	postinc2,w,c
  9333  016098  10DE               	iorwf	postinc2,w,c
  9334  01609A  A4D8               	btfss	status,2,c
  9335  01609C  0012               	return	
  9336                           
  9337                           ;Motor.c: 63: pMotor->mDelta = pDelta;
  9338                           
  9339                           ;Motor.c: 59: return 0;
  9340                           ;	Return value of _Motor_Move is never used
  9341  01609E  C0BD  FFD9         	movff	Motor_Move@pMotor,fsr2l
  9342  0160A2  C0BE  FFDA         	movff	Motor_Move@pMotor+1,fsr2h
  9343  0160A6  C0BF  FFDE         	movff	Motor_Move@pDelta,postinc2
  9344  0160AA  C0C0  FFDD         	movff	Motor_Move@pDelta+1,postdec2
  9345                           
  9346                           ;Motor.c: 67: Timer0_Start(lStepFunction);
  9347  0160AE  C066  F0BA         	movff	_lStepFunction,Timer0_Start@pFunction
  9348  0160B2  C067  F0BB         	movff	_lStepFunction+1,Timer0_Start@pFunction+1
  9349  0160B6  C068  F0BC         	movff	_lStepFunction+2,Timer0_Start@pFunction+2
  9350  0160BA  EC7D  F0B1         	call	_Timer0_Start	;wreg free
  9351  0160BE  0012               	return	
  9352  0160C0                     __end_of_Motor_Move:
  9353                           	opt stack 0
  9354                           tblptru	equ	0xFF8
  9355                           tblptrh	equ	0xFF7
  9356                           tblptrl	equ	0xFF6
  9357                           tablat	equ	0xFF5
  9358                           prodh	equ	0xFF4
  9359                           prodl	equ	0xFF3
  9360                           postinc0	equ	0xFEE
  9361                           wreg	equ	0xFE8
  9362                           postdec1	equ	0xFE5
  9363                           fsr1h	equ	0xFE2
  9364                           fsr1l	equ	0xFE1
  9365                           indf2	equ	0xFDF
  9366                           postinc2	equ	0xFDE
  9367                           postdec2	equ	0xFDD
  9368                           fsr2h	equ	0xFDA
  9369                           fsr2l	equ	0xFD9
  9370                           status	equ	0xFD8
  9371                           
  9372 ;; *************** function _Timer0_Start *****************
  9373 ;; Defined at:
  9374 ;;		line 75 in file "Library/Timer0.c"
  9375 ;; Parameters:    Size  Location     Type
  9376 ;;  pFunction       3    0[BANK0 ] PTR FTN()void 
  9377 ;;		 -> Absolute function(1), Motor_Step(1), 
  9378 ;; Auto vars:     Size  Location     Type
  9379 ;;		None
  9380 ;; Return value:  Size  Location     Type
  9381 ;;                  1    wreg      void 
  9382 ;; Registers used:
  9383 ;;		wreg, status,2, status,0
  9384 ;; Tracked objects:
  9385 ;;		On entry : 0/0
  9386 ;;		On exit  : 0/0
  9387 ;;		Unchanged: 0/0
  9388 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9389 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9392 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9393 ;;Total ram usage:        3 bytes
  9394 ;; Hardware stack levels used:    1
  9395 ;; Hardware stack levels required when called:    7
  9396 ;; This function calls:
  9397 ;;		Nothing
  9398 ;; This function is called by:
  9399 ;;		_Motor_Move
  9400 ;; This function uses a non-reentrant model
  9401 ;;
  9402                           
  9403                           	psect	text36
  9404  0162FA                     __ptext36:
  9405                           	opt stack 0
  9406  0162FA                     _Timer0_Start:
  9407                           	opt stack 20
  9408                           
  9409                           ;Timer0.c: 77: gISR = pFunction;
  9410                           
  9411                           ;incstack = 0
  9412  0162FA  C0BA  F060         	movff	Timer0_Start@pFunction,_gISR
  9413  0162FE  C0BB  F061         	movff	Timer0_Start@pFunction+1,_gISR+1
  9414  016302  C0BC  F062         	movff	Timer0_Start@pFunction+2,_gISR+2
  9415                           
  9416                           ;Timer0.c: 78: TMR0 = COUNTER;
  9417  016306  C029  FFD6         	movff	_COUNTER,4054	;volatile
  9418  01630A  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
  9419                           
  9420                           ;Timer0.c: 79: T0CONbits.T0PS = INDEX;
  9421  01630E  50D5               	movf	4053,w,c	;volatile
  9422  016310  0100               	movlb	0	; () banked
  9423  016312  198D               	xorwf	_INDEX& (0+255),w,b
  9424  016314  0BF8               	andlw	-8
  9425  016316  198D               	xorwf	_INDEX& (0+255),w,b
  9426  016318  6ED5               	movwf	4053,c	;volatile
  9427                           
  9428                           ; BSR set to: 0
  9429                           ;Timer0.c: 80: INTCONbits.TMR0IF = 0;
  9430  01631A  94F2               	bcf	intcon,2,c	;volatile
  9431                           
  9432                           ; BSR set to: 0
  9433                           ;Timer0.c: 81: INTCONbits.TMR0IE = 1;
  9434  01631C  8AF2               	bsf	intcon,5,c	;volatile
  9435                           
  9436                           ; BSR set to: 0
  9437  01631E  0012               	return		;funcret
  9438  016320                     __end_of_Timer0_Start:
  9439                           	opt stack 0
  9440                           tblptru	equ	0xFF8
  9441                           tblptrh	equ	0xFF7
  9442                           tblptrl	equ	0xFF6
  9443                           tablat	equ	0xFF5
  9444                           prodh	equ	0xFF4
  9445                           prodl	equ	0xFF3
  9446                           intcon	equ	0xFF2
  9447                           postinc0	equ	0xFEE
  9448                           wreg	equ	0xFE8
  9449                           postdec1	equ	0xFE5
  9450                           fsr1h	equ	0xFE2
  9451                           fsr1l	equ	0xFE1
  9452                           indf2	equ	0xFDF
  9453                           postinc2	equ	0xFDE
  9454                           postdec2	equ	0xFDD
  9455                           fsr2h	equ	0xFDA
  9456                           fsr2l	equ	0xFD9
  9457                           status	equ	0xFD8
  9458                           
  9459 ;; *************** function _HMI_Render *****************
  9460 ;; Defined at:
  9461 ;;		line 138 in file "HMI.c"
  9462 ;; Parameters:    Size  Location     Type
  9463 ;;		None
  9464 ;; Auto vars:     Size  Location     Type
  9465 ;;  a               2    8[BANK0 ] unsigned short 
  9466 ;; Return value:  Size  Location     Type
  9467 ;;                  1    wreg      void 
  9468 ;; Registers used:
  9469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9470 ;; Tracked objects:
  9471 ;;		On entry : 0/0
  9472 ;;		On exit  : 0/0
  9473 ;;		Unchanged: 0/0
  9474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9476 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9479 ;;Total ram usage:        2 bytes
  9480 ;; Hardware stack levels used:    1
  9481 ;; Hardware stack levels required when called:    9
  9482 ;; This function calls:
  9483 ;;		_OutSeg
  9484 ;; This function is called by:
  9485 ;;		_findClosestWall
  9486 ;;		_mode1
  9487 ;; This function uses a non-reentrant model
  9488 ;;
  9489                           
  9490                           	psect	text37
  9491  015F18                     __ptext37:
  9492                           	opt stack 0
  9493  015F18                     _HMI_Render:
  9494                           	opt stack 19
  9495                           
  9496                           ;HMI.c: 141: for (UINT16 a = 0; a < sizeof(HMIBoard.Bytes); a++)
  9497                           
  9498                           ; BSR set to: 0
  9499                           ;incstack = 0
  9500  015F18  0E00               	movlw	0
  9501  015F1A  0100               	movlb	0	; () banked
  9502  015F1C  6FC3               	movwf	(HMI_Render@a+1)& (0+255),b
  9503  015F1E  0E00               	movlw	0
  9504  015F20  6FC2               	movwf	HMI_Render@a& (0+255),b
  9505  015F22                     l14059:
  9506                           
  9507                           ; BSR set to: 0
  9508  015F22  0100               	movlb	0	; () banked
  9509  015F24  51C3               	movf	(HMI_Render@a+1)& (0+255),w,b
  9510  015F26  E116               	bnz	l1158
  9511  015F28  0E08               	movlw	8
  9512  015F2A  0100               	movlb	0	; () banked
  9513  015F2C  5DC2               	subwf	HMI_Render@a& (0+255),w,b
  9514  015F2E  B0D8               	btfsc	status,0,c
  9515  015F30  0012               	return	
  9516                           
  9517                           ; BSR set to: 0
  9518                           ;HMI.c: 142: OutSeg(HMIBoard.Bytes[a], a);
  9519                           
  9520                           ; BSR set to: 0
  9521                           
  9522                           ; BSR set to: 0
  9523  015F32  C0C2  F0BD         	movff	HMI_Render@a,OutSeg@pSegment
  9524  015F36  0E40               	movlw	low _HMIBoard
  9525  015F38  0100               	movlb	0	; () banked
  9526  015F3A  25C2               	addwf	HMI_Render@a& (0+255),w,b
  9527  015F3C  6ED9               	movwf	fsr2l,c
  9528  015F3E  0E03               	movlw	high _HMIBoard
  9529  015F40  0100               	movlb	0	; () banked
  9530  015F42  21C3               	addwfc	(HMI_Render@a+1)& (0+255),w,b
  9531  015F44  6EDA               	movwf	fsr2h,c
  9532  015F46  50DF               	movf	indf2,w,c
  9533  015F48  EC40  F0A8         	call	_OutSeg
  9534  015F4C  0100               	movlb	0	; () banked
  9535  015F4E  4BC2               	infsnz	HMI_Render@a& (0+255),f,b
  9536  015F50  2BC3               	incf	(HMI_Render@a+1)& (0+255),f,b
  9537  015F52  D7E7               	goto	l14059
  9538  015F54                     l1158:
  9539                           
  9540                           ; BSR set to: 0
  9541  015F54  0012               	return		;funcret
  9542  015F56                     __end_of_HMI_Render:
  9543                           	opt stack 0
  9544                           tblptru	equ	0xFF8
  9545                           tblptrh	equ	0xFF7
  9546                           tblptrl	equ	0xFF6
  9547                           tablat	equ	0xFF5
  9548                           prodh	equ	0xFF4
  9549                           prodl	equ	0xFF3
  9550                           intcon	equ	0xFF2
  9551                           postinc0	equ	0xFEE
  9552                           wreg	equ	0xFE8
  9553                           postdec1	equ	0xFE5
  9554                           fsr1h	equ	0xFE2
  9555                           fsr1l	equ	0xFE1
  9556                           indf2	equ	0xFDF
  9557                           postinc2	equ	0xFDE
  9558                           postdec2	equ	0xFDD
  9559                           fsr2h	equ	0xFDA
  9560                           fsr2l	equ	0xFD9
  9561                           status	equ	0xFD8
  9562                           
  9563 ;; *************** function _OutSeg *****************
  9564 ;; Defined at:
  9565 ;;		line 54 in file "HMI.c"
  9566 ;; Parameters:    Size  Location     Type
  9567 ;;  pInput          1    wreg     unsigned char 
  9568 ;;  pSegment        1    3[BANK0 ] unsigned char 
  9569 ;; Auto vars:     Size  Location     Type
  9570 ;;  pInput          1    6[BANK0 ] unsigned char 
  9571 ;;  out             1    7[BANK0 ] volatile unsigned char 
  9572 ;; Return value:  Size  Location     Type
  9573 ;;                  1    wreg      void 
  9574 ;; Registers used:
  9575 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  9576 ;; Tracked objects:
  9577 ;;		On entry : 0/0
  9578 ;;		On exit  : 0/0
  9579 ;;		Unchanged: 0/0
  9580 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9581 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9582 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9583 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9584 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9585 ;;Total ram usage:        5 bytes
  9586 ;; Hardware stack levels used:    1
  9587 ;; Hardware stack levels required when called:    8
  9588 ;; This function calls:
  9589 ;;		_SPI_Send
  9590 ;; This function is called by:
  9591 ;;		_HMI_Render
  9592 ;;		_HMI_GRender
  9593 ;; This function uses a non-reentrant model
  9594 ;;
  9595                           
  9596                           	psect	text38
  9597  015080                     __ptext38:
  9598                           	opt stack 0
  9599  015080                     _OutSeg:
  9600                           	opt stack 19
  9601                           
  9602                           ; BSR set to: 0
  9603                           ;incstack = 0
  9604                           ;OutSeg@pInput stored from wreg
  9605  015080  0100               	movlb	0	; () banked
  9606  015082  6FC0               	movwf	OutSeg@pInput& (0+255),b
  9607                           
  9608                           ;HMI.c: 58: static UINT8 cur;
  9609                           ;HMI.c: 59: volatile UINT8 out;
  9610                           ;HMI.c: 60: static UINT8 segset;
  9611                           ;HMI.c: 61: static UINT8 a;
  9612                           ;HMI.c: 83: if (pSegment <= 8)
  9613  015084  0E09               	movlw	9
  9614  015086  0100               	movlb	0	; () banked
  9615  015088  61BD               	cpfslt	OutSeg@pSegment& (0+255),b
  9616  01508A  0012               	return	
  9617                           
  9618                           ; BSR set to: 0
  9619                           ;HMI.c: 84: {
  9620                           ;HMI.c: 85: cur = pInput;
  9621  01508C  C0C0  F03F         	movff	OutSeg@pInput,OutSeg@cur
  9622                           
  9623                           ; BSR set to: 0
  9624                           ;HMI.c: 86: for (a = 0u; a<8u; a++)
  9625  015090  0E00               	movlw	0
  9626  015092  6E3D               	movwf	OutSeg@a,c
  9627  015094                     l13449:
  9628                           
  9629                           ; BSR set to: 0
  9630  015094  0E07               	movlw	7
  9631  015096  643D               	cpfsgt	OutSeg@a,c
  9632  015098  D001               	goto	l1146
  9633  01509A  D027               	goto	u9920
  9634  01509C                     l1146:
  9635                           
  9636                           ;HMI.c: 87: {
  9637                           ;HMI.c: 88: segset = (cur & 1u)<<6u;
  9638                           
  9639                           ; BSR set to: 0
  9640  01509C  C03F  F0BE         	movff	OutSeg@cur,??_OutSeg
  9641  0150A0  0E01               	movlw	1
  9642  0150A2  0100               	movlb	0	; () banked
  9643  0150A4  17BE               	andwf	??_OutSeg& (0+255),f,b
  9644  0150A6  0E06               	movlw	6
  9645  0150A8  0100               	movlb	0	; () banked
  9646  0150AA  6FBF               	movwf	(??_OutSeg+1)& (0+255),b
  9647  0150AC                     u9915:
  9648  0150AC  0100               	movlb	0	; () banked
  9649  0150AE  90D8               	bcf	status,0,c
  9650  0150B0  37BE               	rlcf	??_OutSeg& (0+255),f,b
  9651  0150B2  0100               	movlb	0	; () banked
  9652  0150B4  2FBF               	decfsz	(??_OutSeg+1)& (0+255),f,b
  9653  0150B6  D7FA               	goto	u9915
  9654  0150B8  0100               	movlb	0	; () banked
  9655  0150BA  51BE               	movf	??_OutSeg& (0+255),w,b
  9656  0150BC  6E3E               	movwf	OutSeg@segset,c
  9657                           
  9658                           ;HMI.c: 89: out = (pSegment<<3u) | a | segset;
  9659  0150BE  0100               	movlb	0	; () banked
  9660  0150C0  39BD               	swapf	OutSeg@pSegment& (0+255),w,b
  9661  0150C2  42E8               	rrncf	wreg,f,c
  9662  0150C4  0BF8               	andlw	248
  9663  0150C6  103D               	iorwf	OutSeg@a,w,c
  9664  0150C8  103E               	iorwf	OutSeg@segset,w,c
  9665  0150CA  0100               	movlb	0	; () banked
  9666  0150CC  6FC1               	movwf	OutSeg@out& (0+255),b	;volatile
  9667                           
  9668                           ;HMI.c: 90: cur >>= 1;
  9669  0150CE  90D8               	bcf	status,0,c
  9670  0150D0  323F               	rrcf	OutSeg@cur,f,c
  9671                           
  9672                           ; BSR set to: 0
  9673                           ;HMI.c: 91: SPI_Send(&SPI1, out);
  9674  0150D2  0E7A               	movlw	low _SPI1
  9675  0150D4  0100               	movlb	0	; () banked
  9676  0150D6  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9677  0150D8  0E03               	movlw	high _SPI1
  9678  0150DA  0100               	movlb	0	; () banked
  9679  0150DC  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9680  0150DE  C0C1  F0BC         	movff	OutSeg@out,SPI_Send@pData	;volatile
  9681  0150E2  EC93  F0AA         	call	_SPI_Send	;wreg free
  9682  0150E6  2A3D               	incf	OutSeg@a,f,c
  9683  0150E8  D7D5               	goto	l13449
  9684  0150EA                     u9920:
  9685                           
  9686                           ;HMI.c: 96: }
  9687                           ;HMI.c: 97: SPI_Send(&SPI1, 0);
  9688  0150EA  0E7A               	movlw	low _SPI1
  9689  0150EC  0100               	movlb	0	; () banked
  9690  0150EE  6FBA               	movwf	SPI_Send@pInput& (0+255),b
  9691  0150F0  0E03               	movlw	high _SPI1
  9692  0150F2  0100               	movlb	0	; () banked
  9693  0150F4  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
  9694  0150F6  0E00               	movlw	0
  9695  0150F8  0100               	movlb	0	; () banked
  9696  0150FA  6FBC               	movwf	SPI_Send@pData& (0+255),b
  9697  0150FC  EC93  F0AA         	call	_SPI_Send	;wreg free
  9698  015100  0012               	return	
  9699  015102                     __end_of_OutSeg:
  9700                           	opt stack 0
  9701                           tblptru	equ	0xFF8
  9702                           tblptrh	equ	0xFF7
  9703                           tblptrl	equ	0xFF6
  9704                           tablat	equ	0xFF5
  9705                           prodh	equ	0xFF4
  9706                           prodl	equ	0xFF3
  9707                           intcon	equ	0xFF2
  9708                           postinc0	equ	0xFEE
  9709                           wreg	equ	0xFE8
  9710                           postdec1	equ	0xFE5
  9711                           fsr1h	equ	0xFE2
  9712                           fsr1l	equ	0xFE1
  9713                           indf2	equ	0xFDF
  9714                           postinc2	equ	0xFDE
  9715                           postdec2	equ	0xFDD
  9716                           fsr2h	equ	0xFDA
  9717                           fsr2l	equ	0xFD9
  9718                           status	equ	0xFD8
  9719                           
  9720 ;; *************** function _Console_Render *****************
  9721 ;; Defined at:
  9722 ;;		line 377 in file "Library/Console.c"
  9723 ;; Parameters:    Size  Location     Type
  9724 ;;		None
  9725 ;; Auto vars:     Size  Location     Type
  9726 ;;  lCursor         4   38[BANK0 ] struct Point
  9727 ;;  y               1   43[BANK0 ] unsigned char 
  9728 ;;  x               1   42[BANK0 ] unsigned char 
  9729 ;;  temp            1   37[BANK0 ] unsigned char 
  9730 ;;  Temp            2    0        unsigned short 
  9731 ;; Return value:  Size  Location     Type
  9732 ;;                  1    wreg      void 
  9733 ;; Registers used:
  9734 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9735 ;; Tracked objects:
  9736 ;;		On entry : 0/0
  9737 ;;		On exit  : 0/0
  9738 ;;		Unchanged: 0/0
  9739 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9740 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9741 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9742 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9743 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9744 ;;Total ram usage:        9 bytes
  9745 ;; Hardware stack levels used:    1
  9746 ;; Hardware stack levels required when called:   11
  9747 ;; This function calls:
  9748 ;;		_Console_MakeField
  9749 ;;		_LCD_DrawField
  9750 ;;		_LCD_FillRectangle
  9751 ;; This function is called by:
  9752 ;;		_findClosestWall
  9753 ;;		_mode1
  9754 ;;		_mode2
  9755 ;;		_mode4
  9756 ;;		_main
  9757 ;; This function uses a non-reentrant model
  9758 ;;
  9759                           
  9760                           	psect	text39
  9761  011ED8                     __ptext39:
  9762                           	opt stack 0
  9763  011ED8                     _Console_Render:
  9764                           	opt stack 17
  9765                           
  9766                           ;Console.c: 379: Colour Temp;
  9767                           ;Console.c: 380: if (change)
  9768                           
  9769                           ;incstack = 0
  9770  011ED8  0100               	movlb	0	; () banked
  9771  011EDA  51FF               	movf	_change& (0+255),w,b
  9772  011EDC  B4D8               	btfsc	status,2,c
  9773  011EDE  0012               	return	
  9774                           
  9775                           ; BSR set to: 0
  9776                           ;Console.c: 381: {
  9777                           ;Console.c: 382: UINT8 x, y, temp;
  9778                           ;Console.c: 383: Point lCursor = {6,6};
  9779  011EE0  C3EA  F0E0         	movff	Console_Render@F6956,Console_Render@lCursor
  9780  011EE4  C3EB  F0E1         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
  9781  011EE8  C3EC  F0E2         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
  9782  011EEC  C3ED  F0E3         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
  9783                           
  9784                           ; BSR set to: 0
  9785                           ;Console.c: 385: if (clearall)
  9786  011EF0  0100               	movlb	0	; () banked
  9787  011EF2  5190               	movf	_clearall& (0+255),w,b
  9788  011EF4  B4D8               	btfsc	status,2,c
  9789  011EF6  D005               	goto	l1056
  9790                           
  9791                           ; BSR set to: 0
  9792                           ;Console.c: 386: {
  9793                           ;Console.c: 389: temp = lBufferY;
  9794  011EF8  C08E  F0DF         	movff	_lBufferY,Console_Render@temp
  9795                           
  9796                           ; BSR set to: 0
  9797                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
  9798  011EFC  0E0F               	movlw	15
  9799  011EFE  0100               	movlb	0	; () banked
  9800  011F00  6F8E               	movwf	_lBufferY& (0+255),b
  9801  011F02                     l1056:
  9802                           
  9803                           ; BSR set to: 0
  9804                           ;Console.c: 391: }
  9805                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
  9806  011F02  0E00               	movlw	0
  9807  011F04  0100               	movlb	0	; () banked
  9808  011F06  6FE5               	movwf	Console_Render@y& (0+255),b
  9809  011F08  D0DF               	goto	l1057
  9810  011F0A                     
  9811                           ; BSR set to: 0
  9812                           ;Console.c: 394: {
  9813                           ;Console.c: 395: gForecolour = lCBuffer[y];
  9814                           
  9815                           ; BSR set to: 0
  9816  011F0A  0100               	movlb	0	; () banked
  9817  011F0C  51E5               	movf	Console_Render@y& (0+255),w,b
  9818  011F0E  0D02               	mullw	2
  9819  011F10  0E00               	movlw	low _lCBuffer
  9820  011F12  24F3               	addwf	prodl,w,c
  9821  011F14  6ED9               	movwf	fsr2l,c
  9822  011F16  0E03               	movlw	high _lCBuffer
  9823  011F18  20F4               	addwfc	prodh,w,c
  9824  011F1A  6EDA               	movwf	fsr2h,c
  9825  011F1C  CFDE F0FD          	movff	postinc2,_gForecolour
  9826  011F20  CFDD F0FE          	movff	postdec2,_gForecolour+1
  9827                           
  9828                           ; BSR set to: 0
  9829                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
  9830  011F24  0E00               	movlw	0
  9831  011F26  0100               	movlb	0	; () banked
  9832  011F28  6FE4               	movwf	Console_Render@x& (0+255),b
  9833  011F2A                     l14023:
  9834                           
  9835                           ; BSR set to: 0
  9836  011F2A  0E13               	movlw	19
  9837  011F2C  0100               	movlb	0	; () banked
  9838  011F2E  65E4               	cpfsgt	Console_Render@x& (0+255),b
  9839  011F30  D001               	goto	l1059
  9840  011F32  D0BE               	goto	u10720
  9841  011F34                     l1059:
  9842                           
  9843                           ; BSR set to: 0
  9844                           ;Console.c: 397: {
  9845                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
  9846                           
  9847                           ; BSR set to: 0
  9848  011F34  0100               	movlb	0	; () banked
  9849  011F36  51E5               	movf	Console_Render@y& (0+255),w,b
  9850  011F38  0D14               	mullw	20
  9851  011F3A  0EAA               	movlw	low _lBuffer
  9852  011F3C  0100               	movlb	0	; () banked
  9853  011F3E  6FDD               	movwf	??_Console_Render& (0+255),b
  9854  011F40  0E04               	movlw	high _lBuffer
  9855  011F42  0100               	movlb	0	; () banked
  9856  011F44  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9857  011F46  50F3               	movf	prodl,w,c
  9858  011F48  0100               	movlb	0	; () banked
  9859  011F4A  27DD               	addwf	??_Console_Render& (0+255),f,b
  9860  011F4C  50F4               	movf	prodh,w,c
  9861  011F4E  0100               	movlb	0	; () banked
  9862  011F50  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9863  011F52  0100               	movlb	0	; () banked
  9864  011F54  51E4               	movf	Console_Render@x& (0+255),w,b
  9865  011F56  0D01               	mullw	1
  9866  011F58  50F3               	movf	prodl,w,c
  9867  011F5A  0100               	movlb	0	; () banked
  9868  011F5C  25DD               	addwf	??_Console_Render& (0+255),w,b
  9869  011F5E  6ED9               	movwf	fsr2l,c
  9870  011F60  50F4               	movf	prodh,w,c
  9871  011F62  0100               	movlb	0	; () banked
  9872  011F64  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9873  011F66  6EDA               	movwf	fsr2h,c
  9874  011F68  AEDF               	btfss	indf2,7,c
  9875  011F6A  D09A               	goto	l1063
  9876                           
  9877                           ; BSR set to: 0
  9878                           ;Console.c: 399: {
  9879                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
  9880  011F6C  0100               	movlb	0	; () banked
  9881  011F6E  51E5               	movf	Console_Render@y& (0+255),w,b
  9882  011F70  0D14               	mullw	20
  9883  011F72  0EAA               	movlw	low _lBuffer
  9884  011F74  0100               	movlb	0	; () banked
  9885  011F76  6FDD               	movwf	??_Console_Render& (0+255),b
  9886  011F78  0E04               	movlw	high _lBuffer
  9887  011F7A  0100               	movlb	0	; () banked
  9888  011F7C  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9889  011F7E  50F3               	movf	prodl,w,c
  9890  011F80  0100               	movlb	0	; () banked
  9891  011F82  27DD               	addwf	??_Console_Render& (0+255),f,b
  9892  011F84  50F4               	movf	prodh,w,c
  9893  011F86  0100               	movlb	0	; () banked
  9894  011F88  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9895  011F8A  0100               	movlb	0	; () banked
  9896  011F8C  51E4               	movf	Console_Render@x& (0+255),w,b
  9897  011F8E  0D01               	mullw	1
  9898  011F90  50F3               	movf	prodl,w,c
  9899  011F92  0100               	movlb	0	; () banked
  9900  011F94  25DD               	addwf	??_Console_Render& (0+255),w,b
  9901  011F96  6ED9               	movwf	fsr2l,c
  9902  011F98  50F4               	movf	prodh,w,c
  9903  011F9A  0100               	movlb	0	; () banked
  9904  011F9C  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9905  011F9E  6EDA               	movwf	fsr2h,c
  9906  011FA0  0E7F               	movlw	127
  9907  011FA2  16DF               	andwf	indf2,f,c
  9908                           
  9909                           ;Console.c: 401: if (lBuffer[y][x])
  9910  011FA4  0100               	movlb	0	; () banked
  9911  011FA6  51E5               	movf	Console_Render@y& (0+255),w,b
  9912  011FA8  0D14               	mullw	20
  9913  011FAA  0EAA               	movlw	low _lBuffer
  9914  011FAC  0100               	movlb	0	; () banked
  9915  011FAE  6FDD               	movwf	??_Console_Render& (0+255),b
  9916  011FB0  0E04               	movlw	high _lBuffer
  9917  011FB2  0100               	movlb	0	; () banked
  9918  011FB4  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9919  011FB6  50F3               	movf	prodl,w,c
  9920  011FB8  0100               	movlb	0	; () banked
  9921  011FBA  27DD               	addwf	??_Console_Render& (0+255),f,b
  9922  011FBC  50F4               	movf	prodh,w,c
  9923  011FBE  0100               	movlb	0	; () banked
  9924  011FC0  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9925  011FC2  0100               	movlb	0	; () banked
  9926  011FC4  51E4               	movf	Console_Render@x& (0+255),w,b
  9927  011FC6  0D01               	mullw	1
  9928  011FC8  50F3               	movf	prodl,w,c
  9929  011FCA  0100               	movlb	0	; () banked
  9930  011FCC  25DD               	addwf	??_Console_Render& (0+255),w,b
  9931  011FCE  6ED9               	movwf	fsr2l,c
  9932  011FD0  50F4               	movf	prodh,w,c
  9933  011FD2  0100               	movlb	0	; () banked
  9934  011FD4  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9935  011FD6  6EDA               	movwf	fsr2h,c
  9936  011FD8  50DF               	movf	indf2,w,c
  9937  011FDA  B4D8               	btfsc	status,2,c
  9938  011FDC  D04A               	goto	l1062
  9939                           
  9940                           ; BSR set to: 0
  9941                           ;Console.c: 402: {
  9942                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
  9943  011FDE  C083  F0C3         	movff	_gBackcolour,LCD_FillRectangle@pColour
  9944  011FE2  C084  F0C4         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
  9945  011FE6  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
  9946  011FEA  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
  9947  011FEE  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
  9948  011FF2  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
  9949  011FF6  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
  9950  011FFA  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
  9951  011FFE  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
  9952  012002  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
  9953  012006  EC73  F0A9         	call	_LCD_FillRectangle	;wreg free
  9954                           
  9955                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
  9956  01200A  0100               	movlb	0	; () banked
  9957  01200C  51E5               	movf	Console_Render@y& (0+255),w,b
  9958  01200E  0D14               	mullw	20
  9959  012010  0EAA               	movlw	low _lBuffer
  9960  012012  0100               	movlb	0	; () banked
  9961  012014  6FDD               	movwf	??_Console_Render& (0+255),b
  9962  012016  0E04               	movlw	high _lBuffer
  9963  012018  0100               	movlb	0	; () banked
  9964  01201A  6FDE               	movwf	(??_Console_Render+1)& (0+255),b
  9965  01201C  50F3               	movf	prodl,w,c
  9966  01201E  0100               	movlb	0	; () banked
  9967  012020  27DD               	addwf	??_Console_Render& (0+255),f,b
  9968  012022  50F4               	movf	prodh,w,c
  9969  012024  0100               	movlb	0	; () banked
  9970  012026  23DE               	addwfc	(??_Console_Render+1)& (0+255),f,b
  9971  012028  0100               	movlb	0	; () banked
  9972  01202A  51E4               	movf	Console_Render@x& (0+255),w,b
  9973  01202C  0D01               	mullw	1
  9974  01202E  50F3               	movf	prodl,w,c
  9975  012030  0100               	movlb	0	; () banked
  9976  012032  25DD               	addwf	??_Console_Render& (0+255),w,b
  9977  012034  6ED9               	movwf	fsr2l,c
  9978  012036  50F4               	movf	prodh,w,c
  9979  012038  0100               	movlb	0	; () banked
  9980  01203A  21DE               	addwfc	(??_Console_Render+1)& (0+255),w,b
  9981  01203C  6EDA               	movwf	fsr2h,c
  9982  01203E  50DF               	movf	indf2,w,c
  9983  012040  EC27  F09F         	call	_Console_MakeField
  9984  012044  C0BF  F0CC         	movff	?_Console_MakeField,LCD_DrawField@pField
  9985  012048  C0C0  F0CD         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
  9986  01204C  C0E0  F0CE         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
  9987  012050  C0E1  F0CF         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
  9988  012054  C0E2  F0D0         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
  9989  012058  C0E3  F0D1         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
  9990  01205C  C3F2  F0D2         	movff	_gCharSize,LCD_DrawField@pSize
  9991  012060  C3F3  F0D3         	movff	_gCharSize+1,LCD_DrawField@pSize+1
  9992  012064  C3F4  F0D4         	movff	_gCharSize+2,LCD_DrawField@pSize+2
  9993  012068  C3F5  F0D5         	movff	_gCharSize+3,LCD_DrawField@pSize+3
  9994  01206C  EC21  F0A5         	call	_LCD_DrawField	;wreg free
  9995                           
  9996                           ;Console.c: 405: }
  9997  012070  D017               	goto	l1063
  9998  012072                     l1062:
  9999                           
 10000                           ;Console.c: 406: else
 10001                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 10002  012072  0E00               	movlw	0
 10003  012074  0100               	movlb	0	; () banked
 10004  012076  6FC4               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 10005  012078  0E00               	movlw	0
 10006  01207A  6FC3               	movwf	LCD_FillRectangle@pColour& (0+255),b
 10007  01207C  C0E0  F0C5         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 10008  012080  C0E1  F0C6         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 10009  012084  C0E2  F0C7         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 10010  012088  C0E3  F0C8         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 10011  01208C  C3F2  F0C9         	movff	_gCharSize,LCD_FillRectangle@pSize
 10012  012090  C3F3  F0CA         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 10013  012094  C3F4  F0CB         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 10014  012098  C3F5  F0CC         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 10015  01209C  EC73  F0A9         	call	_LCD_FillRectangle	;wreg free
 10016  0120A0                     l1063:
 10017                           
 10018                           ;Console.c: 408: }
 10019                           ;Console.c: 409: lCursor.x += (5 + 1);
 10020  0120A0  0E06               	movlw	6
 10021  0120A2  0100               	movlb	0	; () banked
 10022  0120A4  27E0               	addwf	Console_Render@lCursor& (0+255),f,b
 10023  0120A6  0E00               	movlw	0
 10024  0120A8  23E1               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 10025                           
 10026                           ; BSR set to: 0
 10027  0120AA  0100               	movlb	0	; () banked
 10028  0120AC  2BE4               	incf	Console_Render@x& (0+255),f,b
 10029  0120AE  D73D               	goto	l14023
 10030  0120B0                     u10720:
 10031                           
 10032                           ; BSR set to: 0
 10033                           ;Console.c: 410: }
 10034                           ;Console.c: 411: lCursor.y += (7 + 1);
 10035                           
 10036                           ; BSR set to: 0
 10037  0120B0  0E08               	movlw	8
 10038  0120B2  0100               	movlb	0	; () banked
 10039  0120B4  27E2               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 10040  0120B6  0E00               	movlw	0
 10041  0120B8  23E3               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 10042                           
 10043                           ; BSR set to: 0
 10044                           ;Console.c: 412: lCursor.x = 6;
 10045  0120BA  0E00               	movlw	0
 10046  0120BC  0100               	movlb	0	; () banked
 10047  0120BE  6FE1               	movwf	(Console_Render@lCursor+1)& (0+255),b
 10048  0120C0  0E06               	movlw	6
 10049  0120C2  6FE0               	movwf	Console_Render@lCursor& (0+255),b
 10050                           
 10051                           ; BSR set to: 0
 10052  0120C4  0100               	movlb	0	; () banked
 10053  0120C6  2BE5               	incf	Console_Render@y& (0+255),f,b
 10054  0120C8                     l1057:
 10055                           
 10056                           ; BSR set to: 0
 10057                           
 10058                           ; BSR set to: 0
 10059  0120C8  0100               	movlb	0	; () banked
 10060  0120CA  51E5               	movf	Console_Render@y& (0+255),w,b
 10061  0120CC  0100               	movlb	0	; () banked
 10062  0120CE  5D8E               	subwf	_lBufferY& (0+255),w,b
 10063  0120D0  B0D8               	btfsc	status,0,c
 10064  0120D2  D71B               	goto	l1058
 10065                           
 10066                           ; BSR set to: 0
 10067                           ;Console.c: 413: }
 10068                           ;Console.c: 415: if (clearall)
 10069                           
 10070                           ; BSR set to: 0
 10071  0120D4  0100               	movlb	0	; () banked
 10072  0120D6  5190               	movf	_clearall& (0+255),w,b
 10073  0120D8  B4D8               	btfsc	status,2,c
 10074  0120DA  0012               	return	
 10075                           
 10076                           ; BSR set to: 0
 10077                           ;Console.c: 416: {
 10078                           ;Console.c: 417: clearall = 0;
 10079  0120DC  0E00               	movlw	0
 10080  0120DE  0100               	movlb	0	; () banked
 10081  0120E0  6F90               	movwf	_clearall& (0+255),b
 10082                           
 10083                           ; BSR set to: 0
 10084                           ;Console.c: 418: lBufferY = temp;
 10085  0120E2  C0DF  F08E         	movff	Console_Render@temp,_lBufferY
 10086                           
 10087                           ; BSR set to: 0
 10088  0120E6  0012               	return	
 10089  0120E8                     __end_of_Console_Render:
 10090                           	opt stack 0
 10091                           tblptru	equ	0xFF8
 10092                           tblptrh	equ	0xFF7
 10093                           tblptrl	equ	0xFF6
 10094                           tablat	equ	0xFF5
 10095                           prodh	equ	0xFF4
 10096                           prodl	equ	0xFF3
 10097                           intcon	equ	0xFF2
 10098                           postinc0	equ	0xFEE
 10099                           wreg	equ	0xFE8
 10100                           postdec1	equ	0xFE5
 10101                           fsr1h	equ	0xFE2
 10102                           fsr1l	equ	0xFE1
 10103                           indf2	equ	0xFDF
 10104                           postinc2	equ	0xFDE
 10105                           postdec2	equ	0xFDD
 10106                           fsr2h	equ	0xFDA
 10107                           fsr2l	equ	0xFD9
 10108                           status	equ	0xFD8
 10109                           
 10110 ;; *************** function _LCD_FillRectangle *****************
 10111 ;; Defined at:
 10112 ;;		line 318 in file "Library/LCD.c"
 10113 ;; Parameters:    Size  Location     Type
 10114 ;;  pColour         2    9[BANK0 ] unsigned short 
 10115 ;;  pPoint          4   11[BANK0 ] struct Point
 10116 ;;  pSize           4   15[BANK0 ] struct Point
 10117 ;; Auto vars:     Size  Location     Type
 10118 ;;  j               1   22[BANK0 ] unsigned char 
 10119 ;;  i               1   21[BANK0 ] unsigned char 
 10120 ;; Return value:  Size  Location     Type
 10121 ;;                  1    wreg      void 
 10122 ;; Registers used:
 10123 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 10124 ;; Tracked objects:
 10125 ;;		On entry : 0/0
 10126 ;;		On exit  : 0/0
 10127 ;;		Unchanged: 0/0
 10128 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10129 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10130 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10131 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10132 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10133 ;;Total ram usage:       14 bytes
 10134 ;; Hardware stack levels used:    1
 10135 ;; Hardware stack levels required when called:   10
 10136 ;; This function calls:
 10137 ;;		_LCD_Word_Write
 10138 ;;		_Set_Addr_Window
 10139 ;; This function is called by:
 10140 ;;		_Console_Render
 10141 ;;		_Console_ClearLine
 10142 ;; This function uses a non-reentrant model
 10143 ;;
 10144                           
 10145                           	psect	text40
 10146  0152E6                     __ptext40:
 10147                           	opt stack 0
 10148  0152E6                     _LCD_FillRectangle:
 10149                           	opt stack 17
 10150                           
 10151                           ;LCD.c: 320: UINT8 i = 0x00;
 10152                           
 10153                           ; BSR set to: 0
 10154                           ;incstack = 0
 10155  0152E6  0E00               	movlw	0
 10156  0152E8  0100               	movlb	0	; () banked
 10157  0152EA  6FCF               	movwf	LCD_FillRectangle@i& (0+255),b
 10158                           
 10159                           ;LCD.c: 321: UINT8 j = 0x00;
 10160  0152EC  0E00               	movlw	0
 10161  0152EE  0100               	movlb	0	; () banked
 10162  0152F0  6FD0               	movwf	LCD_FillRectangle@j& (0+255),b
 10163                           
 10164                           ; BSR set to: 0
 10165                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 10166  0152F2  C0C7  F0BF         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 10167  0152F6  0100               	movlb	0	; () banked
 10168  0152F8  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10169  0152FA  0100               	movlb	0	; () banked
 10170  0152FC  25C9               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 10171  0152FE  0100               	movlb	0	; () banked
 10172  015300  6FCD               	movwf	??_LCD_FillRectangle& (0+255),b
 10173  015302  0100               	movlb	0	; () banked
 10174  015304  05CD               	decf	??_LCD_FillRectangle& (0+255),w,b
 10175  015306  0100               	movlb	0	; () banked
 10176  015308  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10177  01530A  0100               	movlb	0	; () banked
 10178  01530C  51C7               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 10179  01530E  0100               	movlb	0	; () banked
 10180  015310  25CB               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 10181  015312  0100               	movlb	0	; () banked
 10182  015314  6FCE               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 10183  015316  0100               	movlb	0	; () banked
 10184  015318  05CE               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 10185  01531A  0100               	movlb	0	; () banked
 10186  01531C  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10187  01531E  0100               	movlb	0	; () banked
 10188  015320  51C5               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 10189  015322  EC2B  F0A3         	call	_Set_Addr_Window
 10190                           
 10191                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 10192  015326  C0CB  F0D0         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 10193  01532A                     l13185:
 10194  01532A  0100               	movlb	0	; () banked
 10195  01532C  51D0               	movf	LCD_FillRectangle@j& (0+255),w,b
 10196  01532E  0100               	movlb	0	; () banked
 10197  015330  B4D8               	btfsc	status,2,c
 10198  015332  0012               	return	
 10199                           
 10200                           ; BSR set to: 0
 10201                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 10202                           
 10203                           ; BSR set to: 0
 10204  015334  C0C9  F0CF         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 10205  015338                     l13189:
 10206                           
 10207                           ; BSR set to: 0
 10208  015338  0100               	movlb	0	; () banked
 10209  01533A  51CF               	movf	LCD_FillRectangle@i& (0+255),w,b
 10210  01533C  0100               	movlb	0	; () banked
 10211  01533E  B4D8               	btfsc	status,2,c
 10212  015340  D009               	goto	u9690
 10213                           
 10214                           ; BSR set to: 0
 10215                           ;LCD.c: 333: LCD_Word_Write(pColour);
 10216                           
 10217                           ; BSR set to: 0
 10218                           
 10219                           ; BSR set to: 0
 10220  015342  C0C3  F0BF         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 10221  015346  C0C4  F0C0         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 10222  01534A  ECF1  F0B1         	call	_LCD_Word_Write	;wreg free
 10223  01534E  0100               	movlb	0	; () banked
 10224  015350  07CF               	decf	LCD_FillRectangle@i& (0+255),f,b
 10225  015352  D7F2               	goto	l13189
 10226  015354                     u9690:
 10227                           
 10228                           ; BSR set to: 0
 10229                           
 10230                           ; BSR set to: 0
 10231  015354  0100               	movlb	0	; () banked
 10232  015356  07D0               	decf	LCD_FillRectangle@j& (0+255),f,b
 10233  015358  D7E8               	goto	l13185
 10234  01535A                     __end_of_LCD_FillRectangle:
 10235                           	opt stack 0
 10236                           tblptru	equ	0xFF8
 10237                           tblptrh	equ	0xFF7
 10238                           tblptrl	equ	0xFF6
 10239                           tablat	equ	0xFF5
 10240                           prodh	equ	0xFF4
 10241                           prodl	equ	0xFF3
 10242                           intcon	equ	0xFF2
 10243                           postinc0	equ	0xFEE
 10244                           wreg	equ	0xFE8
 10245                           postdec1	equ	0xFE5
 10246                           fsr1h	equ	0xFE2
 10247                           fsr1l	equ	0xFE1
 10248                           indf2	equ	0xFDF
 10249                           postinc2	equ	0xFDE
 10250                           postdec2	equ	0xFDD
 10251                           fsr2h	equ	0xFDA
 10252                           fsr2l	equ	0xFD9
 10253                           status	equ	0xFD8
 10254                           
 10255 ;; *************** function _LCD_DrawField *****************
 10256 ;; Defined at:
 10257 ;;		line 393 in file "Library/LCD.c"
 10258 ;; Parameters:    Size  Location     Type
 10259 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 10260 ;;		 -> Console_MakeField@Fill(70), 
 10261 ;;  pPoint          4   20[BANK0 ] struct Point
 10262 ;;  pSize           4   24[BANK0 ] struct Point
 10263 ;; Auto vars:     Size  Location     Type
 10264 ;;  count           2   30[BANK0 ] unsigned short 
 10265 ;;  i               1   34[BANK0 ] unsigned char 
 10266 ;;  ymax            1   33[BANK0 ] unsigned char 
 10267 ;;  xmax            1   32[BANK0 ] unsigned char 
 10268 ;; Return value:  Size  Location     Type
 10269 ;;                  1    wreg      void 
 10270 ;; Registers used:
 10271 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10272 ;; Tracked objects:
 10273 ;;		On entry : 0/0
 10274 ;;		On exit  : 0/0
 10275 ;;		Unchanged: 0/0
 10276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10277 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10278 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10279 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10280 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10281 ;;Total ram usage:       17 bytes
 10282 ;; Hardware stack levels used:    1
 10283 ;; Hardware stack levels required when called:   10
 10284 ;; This function calls:
 10285 ;;		_LCD_Word_Write
 10286 ;;		_Set_Addr_Window
 10287 ;;		___wmul
 10288 ;; This function is called by:
 10289 ;;		_Console_Render
 10290 ;; This function uses a non-reentrant model
 10291 ;;
 10292                           
 10293                           	psect	text41
 10294  014A42                     __ptext41:
 10295                           	opt stack 0
 10296  014A42                     _LCD_DrawField:
 10297                           	opt stack 17
 10298                           
 10299                           ;LCD.c: 396: UINT8 i = 0x00;
 10300                           
 10301                           ; BSR set to: 0
 10302                           ;incstack = 0
 10303  014A42  0E00               	movlw	0
 10304  014A44  0100               	movlb	0	; () banked
 10305  014A46  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10306                           
 10307                           ; BSR set to: 0
 10308                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 10309  014A48  0100               	movlb	0	; () banked
 10310  014A4A  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10311  014A4C  0100               	movlb	0	; () banked
 10312  014A4E  25D2               	addwf	LCD_DrawField@pSize& (0+255),w,b
 10313  014A50  0100               	movlb	0	; () banked
 10314  014A52  6FDA               	movwf	LCD_DrawField@xmax& (0+255),b
 10315                           
 10316                           ; BSR set to: 0
 10317                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 10318  014A54  0100               	movlb	0	; () banked
 10319  014A56  51D0               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 10320  014A58  0100               	movlb	0	; () banked
 10321  014A5A  25D4               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 10322  014A5C  0100               	movlb	0	; () banked
 10323  014A5E  6FDB               	movwf	LCD_DrawField@ymax& (0+255),b
 10324                           
 10325                           ; BSR set to: 0
 10326                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 10327  014A60  C0D4  F0BA         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 10328  014A64  C0D5  F0BB         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 10329  014A68  C0D2  F0BC         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 10330  014A6C  C0D3  F0BD         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 10331  014A70  EC60  F0B0         	call	___wmul	;wreg free
 10332  014A74  C0BA  F0D8         	movff	?___wmul,LCD_DrawField@count
 10333  014A78  C0BB  F0D9         	movff	?___wmul+1,LCD_DrawField@count+1
 10334                           
 10335                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 10336  014A7C  C0D0  F0BF         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 10337  014A80  0100               	movlb	0	; () banked
 10338  014A82  05DA               	decf	LCD_DrawField@xmax& (0+255),w,b
 10339  014A84  0100               	movlb	0	; () banked
 10340  014A86  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 10341  014A88  0100               	movlb	0	; () banked
 10342  014A8A  05DB               	decf	LCD_DrawField@ymax& (0+255),w,b
 10343  014A8C  0100               	movlb	0	; () banked
 10344  014A8E  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 10345  014A90  0100               	movlb	0	; () banked
 10346  014A92  51CE               	movf	LCD_DrawField@pPoint& (0+255),w,b
 10347  014A94  EC2B  F0A3         	call	_Set_Addr_Window
 10348                           
 10349                           ;LCD.c: 403: for(i = 0; i < count; i++)
 10350  014A98  0E00               	movlw	0
 10351  014A9A  0100               	movlb	0	; () banked
 10352  014A9C  6FDC               	movwf	LCD_DrawField@i& (0+255),b
 10353  014A9E  D013               	goto	l183
 10354  014AA0                     
 10355                           ; BSR set to: 0
 10356                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 10357                           
 10358                           ; BSR set to: 0
 10359  014AA0  0100               	movlb	0	; () banked
 10360  014AA2  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10361  014AA4  0D02               	mullw	2
 10362  014AA6  50F3               	movf	prodl,w,c
 10363  014AA8  0100               	movlb	0	; () banked
 10364  014AAA  25CC               	addwf	LCD_DrawField@pField& (0+255),w,b
 10365  014AAC  6ED9               	movwf	fsr2l,c
 10366  014AAE  50F4               	movf	prodh,w,c
 10367  014AB0  0100               	movlb	0	; () banked
 10368  014AB2  21CD               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 10369  014AB4  6EDA               	movwf	fsr2h,c
 10370  014AB6  CFDE F0BF          	movff	postinc2,LCD_Word_Write@value
 10371  014ABA  CFDD F0C0          	movff	postdec2,LCD_Word_Write@value+1
 10372  014ABE  ECF1  F0B1         	call	_LCD_Word_Write	;wreg free
 10373  014AC2  0100               	movlb	0	; () banked
 10374  014AC4  2BDC               	incf	LCD_DrawField@i& (0+255),f,b
 10375  014AC6                     l183:
 10376                           
 10377                           ; BSR set to: 0
 10378                           
 10379                           ; BSR set to: 0
 10380  014AC6  0100               	movlb	0	; () banked
 10381  014AC8  51DC               	movf	LCD_DrawField@i& (0+255),w,b
 10382  014ACA  0100               	movlb	0	; () banked
 10383  014ACC  6FD6               	movwf	??_LCD_DrawField& (0+255),b
 10384  014ACE  6BD7               	clrf	(??_LCD_DrawField+1)& (0+255),b
 10385  014AD0  0100               	movlb	0	; () banked
 10386  014AD2  51D8               	movf	LCD_DrawField@count& (0+255),w,b
 10387  014AD4  0100               	movlb	0	; () banked
 10388  014AD6  5DD6               	subwf	??_LCD_DrawField& (0+255),w,b
 10389  014AD8  0100               	movlb	0	; () banked
 10390  014ADA  51D9               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 10391  014ADC  0100               	movlb	0	; () banked
 10392  014ADE  59D7               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 10393  014AE0  B0D8               	btfsc	status,0,c
 10394  014AE2  0012               	return	
 10395  014AE4  D7DD               	goto	l184
 10396  014AE6                     __end_of_LCD_DrawField:
 10397                           	opt stack 0
 10398                           tblptru	equ	0xFF8
 10399                           tblptrh	equ	0xFF7
 10400                           tblptrl	equ	0xFF6
 10401                           tablat	equ	0xFF5
 10402                           prodh	equ	0xFF4
 10403                           prodl	equ	0xFF3
 10404                           intcon	equ	0xFF2
 10405                           postinc0	equ	0xFEE
 10406                           wreg	equ	0xFE8
 10407                           postdec1	equ	0xFE5
 10408                           fsr1h	equ	0xFE2
 10409                           fsr1l	equ	0xFE1
 10410                           indf2	equ	0xFDF
 10411                           postinc2	equ	0xFDE
 10412                           postdec2	equ	0xFDD
 10413                           fsr2h	equ	0xFDA
 10414                           fsr2l	equ	0xFD9
 10415                           status	equ	0xFD8
 10416                           
 10417 ;; *************** function ___wmul *****************
 10418 ;; Defined at:
 10419 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 10420 ;; Parameters:    Size  Location     Type
 10421 ;;  multiplier      2    0[BANK0 ] unsigned int 
 10422 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 10423 ;; Auto vars:     Size  Location     Type
 10424 ;;  product         2    4[BANK0 ] unsigned int 
 10425 ;; Return value:  Size  Location     Type
 10426 ;;                  2    0[BANK0 ] unsigned int 
 10427 ;; Registers used:
 10428 ;;		wreg, status,2, status,0, prodl, prodh
 10429 ;; Tracked objects:
 10430 ;;		On entry : 0/0
 10431 ;;		On exit  : 0/0
 10432 ;;		Unchanged: 0/0
 10433 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10434 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10435 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10436 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10437 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10438 ;;Total ram usage:        6 bytes
 10439 ;; Hardware stack levels used:    1
 10440 ;; Hardware stack levels required when called:    7
 10441 ;; This function calls:
 10442 ;;		Nothing
 10443 ;; This function is called by:
 10444 ;;		_LCD_DrawField
 10445 ;; This function uses a non-reentrant model
 10446 ;;
 10447                           
 10448                           	psect	text42
 10449  0160C0                     __ptext42:
 10450                           	opt stack 0
 10451  0160C0                     ___wmul:
 10452                           	opt stack 19
 10453                           
 10454                           ; BSR set to: 0
 10455                           ;incstack = 0
 10456  0160C0  0100               	movlb	0	; () banked
 10457  0160C2  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10458  0160C4  0100               	movlb	0	; () banked
 10459  0160C6  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10460  0160C8  CFF3 F0BE          	movff	prodl,___wmul@product
 10461  0160CC  CFF4 F0BF          	movff	prodh,___wmul@product+1
 10462  0160D0  0100               	movlb	0	; () banked
 10463  0160D2  51BA               	movf	___wmul@multiplier& (0+255),w,b
 10464  0160D4  0100               	movlb	0	; () banked
 10465  0160D6  03BD               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 10466  0160D8  50F3               	movf	prodl,w,c
 10467  0160DA  0100               	movlb	0	; () banked
 10468  0160DC  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10469  0160DE  0100               	movlb	0	; () banked
 10470  0160E0  51BB               	movf	(___wmul@multiplier+1)& (0+255),w,b
 10471  0160E2  0100               	movlb	0	; () banked
 10472  0160E4  03BC               	mulwf	___wmul@multiplicand& (0+255),b
 10473  0160E6  50F3               	movf	prodl,w,c
 10474  0160E8  0100               	movlb	0	; () banked
 10475  0160EA  27BF               	addwf	(___wmul@product+1)& (0+255),f,b
 10476                           
 10477                           ; BSR set to: 0
 10478  0160EC  C0BE  F0BA         	movff	___wmul@product,?___wmul
 10479  0160F0  C0BF  F0BB         	movff	___wmul@product+1,?___wmul+1
 10480  0160F4  0012               	return	
 10481  0160F6                     __end_of___wmul:
 10482                           	opt stack 0
 10483                           tblptru	equ	0xFF8
 10484                           tblptrh	equ	0xFF7
 10485                           tblptrl	equ	0xFF6
 10486                           tablat	equ	0xFF5
 10487                           prodh	equ	0xFF4
 10488                           prodl	equ	0xFF3
 10489                           intcon	equ	0xFF2
 10490                           postinc0	equ	0xFEE
 10491                           wreg	equ	0xFE8
 10492                           postdec1	equ	0xFE5
 10493                           fsr1h	equ	0xFE2
 10494                           fsr1l	equ	0xFE1
 10495                           indf2	equ	0xFDF
 10496                           postinc2	equ	0xFDE
 10497                           postdec2	equ	0xFDD
 10498                           fsr2h	equ	0xFDA
 10499                           fsr2l	equ	0xFD9
 10500                           status	equ	0xFD8
 10501                           
 10502 ;; *************** function _Console_MakeField *****************
 10503 ;; Defined at:
 10504 ;;		line 435 in file "Library/Console.c"
 10505 ;; Parameters:    Size  Location     Type
 10506 ;;  pInput          1    wreg     unsigned char 
 10507 ;; Auto vars:     Size  Location     Type
 10508 ;;  pInput          1   11[BANK0 ] unsigned char 
 10509 ;;  y               1   17[BANK0 ] unsigned char 
 10510 ;;  x               1   16[BANK0 ] unsigned char 
 10511 ;;  Column          2   12[BANK0 ] PTR struct Byte
 10512 ;;		 -> Font5x7(480), 
 10513 ;;  Index           2    9[BANK0 ] unsigned short 
 10514 ;; Return value:  Size  Location     Type
 10515 ;;                  2    5[BANK0 ] PTR unsigned short 
 10516 ;; Registers used:
 10517 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10518 ;; Tracked objects:
 10519 ;;		On entry : 0/0
 10520 ;;		On exit  : 0/0
 10521 ;;		Unchanged: 0/0
 10522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10523 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10524 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10525 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10526 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10527 ;;Total ram usage:       13 bytes
 10528 ;; Hardware stack levels used:    1
 10529 ;; Hardware stack levels required when called:    8
 10530 ;; This function calls:
 10531 ;;		_Byte_GetBit
 10532 ;; This function is called by:
 10533 ;;		_Console_Render
 10534 ;; This function uses a non-reentrant model
 10535 ;;
 10536                           
 10537                           	psect	text43
 10538  013E4E                     __ptext43:
 10539                           	opt stack 0
 10540  013E4E                     _Console_MakeField:
 10541                           	opt stack 19
 10542                           
 10543                           ; BSR set to: 0
 10544                           ;incstack = 0
 10545                           ;Console_MakeField@pInput stored from wreg
 10546  013E4E  0100               	movlb	0	; () banked
 10547  013E50  6FC5               	movwf	Console_MakeField@pInput& (0+255),b
 10548                           
 10549                           ;Console.c: 437: static Colour Fill[7][5];
 10550                           ;Console.c: 438: pInput -= 32;
 10551  013E52  0E20               	movlw	32
 10552  013E54  0100               	movlb	0	; () banked
 10553  013E56  5FC5               	subwf	Console_MakeField@pInput& (0+255),f,b
 10554                           
 10555                           ; BSR set to: 0
 10556                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 10557  013E58  0100               	movlb	0	; () banked
 10558  013E5A  51C5               	movf	Console_MakeField@pInput& (0+255),w,b
 10559  013E5C  0D05               	mullw	5
 10560  013E5E  CFF3 F0C3          	movff	prodl,Console_MakeField@Index
 10561  013E62  CFF4 F0C4          	movff	prodh,Console_MakeField@Index+1
 10562                           
 10563                           ; BSR set to: 0
 10564                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 10565  013E66  0E1F               	movlw	low _Font5x7
 10566  013E68  0100               	movlb	0	; () banked
 10567  013E6A  25C3               	addwf	Console_MakeField@Index& (0+255),w,b
 10568  013E6C  0100               	movlb	0	; () banked
 10569  013E6E  6FC6               	movwf	Console_MakeField@Column& (0+255),b
 10570  013E70  0EFD               	movlw	high _Font5x7
 10571  013E72  0100               	movlb	0	; () banked
 10572  013E74  21C4               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 10573  013E76  0100               	movlb	0	; () banked
 10574  013E78  6FC7               	movwf	(Console_MakeField@Column+1)& (0+255),b
 10575                           
 10576                           ; BSR set to: 0
 10577                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 10578  013E7A  0E00               	movlw	0
 10579  013E7C  0100               	movlb	0	; () banked
 10580  013E7E  6FCA               	movwf	Console_MakeField@x& (0+255),b
 10581  013E80                     l13411:
 10582                           
 10583                           ; BSR set to: 0
 10584  013E80  0E04               	movlw	4
 10585  013E82  0100               	movlb	0	; () banked
 10586  013E84  65CA               	cpfsgt	Console_MakeField@x& (0+255),b
 10587  013E86  D001               	goto	l1077
 10588  013E88  D043               	goto	u9880
 10589  013E8A                     l1077:
 10590                           
 10591                           ; BSR set to: 0
 10592                           ;Console.c: 444: {
 10593                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 10594                           
 10595                           ; BSR set to: 0
 10596  013E8A  0E00               	movlw	0
 10597  013E8C  0100               	movlb	0	; () banked
 10598  013E8E  6FCB               	movwf	Console_MakeField@y& (0+255),b
 10599  013E90                     l13417:
 10600                           
 10601                           ; BSR set to: 0
 10602  013E90  0E06               	movlw	6
 10603  013E92  0100               	movlb	0	; () banked
 10604  013E94  65CB               	cpfsgt	Console_MakeField@y& (0+255),b
 10605  013E96  D001               	goto	l1079
 10606  013E98  D035               	goto	u9870
 10607  013E9A                     l1079:
 10608                           
 10609                           ; BSR set to: 0
 10610                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 10611                           
 10612                           ; BSR set to: 0
 10613  013E9A  C0C6  F0BA         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 10614  013E9E  C0C7  F0BB         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 10615  013EA2  C0CB  F0BC         	movff	Console_MakeField@y,Byte_GetBit@pBit
 10616  013EA6  EC96  F0B0         	call	_Byte_GetBit	;wreg free
 10617  013EAA  0900               	iorlw	0
 10618  013EAC  A4D8               	btfss	status,2,c
 10619  013EAE  D005               	goto	l1082
 10620  013EB0  C083  F0C8         	movff	_gBackcolour,_Console_MakeField$10974
 10621  013EB4  C084  F0C9         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 10622  013EB8  D004               	goto	l1084
 10623  013EBA                     l1082:
 10624  013EBA  C0FD  F0C8         	movff	_gForecolour,_Console_MakeField$10974
 10625  013EBE  C0FE  F0C9         	movff	_gForecolour+1,_Console_MakeField$10974+1
 10626  013EC2                     l1084:
 10627  013EC2  0100               	movlb	0	; () banked
 10628  013EC4  51CB               	movf	Console_MakeField@y& (0+255),w,b
 10629  013EC6  0D0A               	mullw	10
 10630  013EC8  0E64               	movlw	low Console_MakeField@Fill
 10631  013ECA  0100               	movlb	0	; () banked
 10632  013ECC  6FC1               	movwf	??_Console_MakeField& (0+255),b
 10633  013ECE  0E04               	movlw	high Console_MakeField@Fill
 10634  013ED0  0100               	movlb	0	; () banked
 10635  013ED2  6FC2               	movwf	(??_Console_MakeField+1)& (0+255),b
 10636  013ED4  50F3               	movf	prodl,w,c
 10637  013ED6  0100               	movlb	0	; () banked
 10638  013ED8  27C1               	addwf	??_Console_MakeField& (0+255),f,b
 10639  013EDA  50F4               	movf	prodh,w,c
 10640  013EDC  0100               	movlb	0	; () banked
 10641  013EDE  23C2               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 10642  013EE0  0100               	movlb	0	; () banked
 10643  013EE2  51CA               	movf	Console_MakeField@x& (0+255),w,b
 10644  013EE4  0D02               	mullw	2
 10645  013EE6  50F3               	movf	prodl,w,c
 10646  013EE8  0100               	movlb	0	; () banked
 10647  013EEA  25C1               	addwf	??_Console_MakeField& (0+255),w,b
 10648  013EEC  6ED9               	movwf	fsr2l,c
 10649  013EEE  50F4               	movf	prodh,w,c
 10650  013EF0  0100               	movlb	0	; () banked
 10651  013EF2  21C2               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 10652  013EF4  6EDA               	movwf	fsr2h,c
 10653  013EF6  C0C8  FFDE         	movff	_Console_MakeField$10974,postinc2
 10654  013EFA  C0C9  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 10655                           
 10656                           ; BSR set to: 0
 10657  013EFE  0100               	movlb	0	; () banked
 10658  013F00  2BCB               	incf	Console_MakeField@y& (0+255),f,b
 10659  013F02  D7C6               	goto	l13417
 10660  013F04                     u9870:
 10661                           
 10662                           ; BSR set to: 0
 10663                           ;Console.c: 447: Column += 1;
 10664                           
 10665                           ; BSR set to: 0
 10666  013F04  0100               	movlb	0	; () banked
 10667  013F06  4BC6               	infsnz	Console_MakeField@Column& (0+255),f,b
 10668  013F08  2BC7               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 10669  013F0A  0100               	movlb	0	; () banked
 10670  013F0C  2BCA               	incf	Console_MakeField@x& (0+255),f,b
 10671  013F0E  D7B8               	goto	l13411
 10672  013F10                     u9880:
 10673                           
 10674                           ; BSR set to: 0
 10675                           ;Console.c: 448: }
 10676                           ;Console.c: 449: return (ColourPtr)Fill;
 10677                           
 10678                           ; BSR set to: 0
 10679  013F10  0E64               	movlw	low Console_MakeField@Fill
 10680  013F12  0100               	movlb	0	; () banked
 10681  013F14  6FBF               	movwf	?_Console_MakeField& (0+255),b
 10682  013F16  0E04               	movlw	high Console_MakeField@Fill
 10683  013F18  0100               	movlb	0	; () banked
 10684  013F1A  6FC0               	movwf	(?_Console_MakeField+1)& (0+255),b
 10685  013F1C  0012               	return	
 10686  013F1E                     __end_of_Console_MakeField:
 10687                           	opt stack 0
 10688                           tblptru	equ	0xFF8
 10689                           tblptrh	equ	0xFF7
 10690                           tblptrl	equ	0xFF6
 10691                           tablat	equ	0xFF5
 10692                           prodh	equ	0xFF4
 10693                           prodl	equ	0xFF3
 10694                           intcon	equ	0xFF2
 10695                           postinc0	equ	0xFEE
 10696                           wreg	equ	0xFE8
 10697                           postdec1	equ	0xFE5
 10698                           fsr1h	equ	0xFE2
 10699                           fsr1l	equ	0xFE1
 10700                           indf2	equ	0xFDF
 10701                           postinc2	equ	0xFDE
 10702                           postdec2	equ	0xFDD
 10703                           fsr2h	equ	0xFDA
 10704                           fsr2l	equ	0xFD9
 10705                           status	equ	0xFD8
 10706                           
 10707 ;; *************** function _Byte_GetBit *****************
 10708 ;; Defined at:
 10709 ;;		line 38 in file "Library/Types.c"
 10710 ;; Parameters:    Size  Location     Type
 10711 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 10712 ;;		 -> Font5x7(480), 
 10713 ;;  pBit            1    2[BANK0 ] unsigned char 
 10714 ;; Auto vars:     Size  Location     Type
 10715 ;;  Output          1    4[BANK0 ] unsigned char 
 10716 ;; Return value:  Size  Location     Type
 10717 ;;                  1    wreg      unsigned char 
 10718 ;; Registers used:
 10719 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 10720 ;; Tracked objects:
 10721 ;;		On entry : 0/0
 10722 ;;		On exit  : 0/0
 10723 ;;		Unchanged: 0/0
 10724 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10725 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10726 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10727 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10728 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10729 ;;Total ram usage:        5 bytes
 10730 ;; Hardware stack levels used:    1
 10731 ;; Hardware stack levels required when called:    7
 10732 ;; This function calls:
 10733 ;;		Nothing
 10734 ;; This function is called by:
 10735 ;;		_Console_MakeField
 10736 ;;		_Word_GetBit
 10737 ;; This function uses a non-reentrant model
 10738 ;;
 10739                           
 10740                           	psect	text44
 10741  01612C                     __ptext44:
 10742                           	opt stack 0
 10743  01612C                     _Byte_GetBit:
 10744                           	opt stack 19
 10745                           
 10746                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 10747                           
 10748                           ; BSR set to: 0
 10749                           ;incstack = 0
 10750  01612C  C0BA  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 10751  016130  C0BB  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 10752  016134                     	if	0	;tblptru may be non-zero
 10753  016134                     	endif
 10754  016134                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 10755  016134  0E00               	movlw	low (__mediumconst shr (0+16))
 10756  016136  6EF8               	movwf	tblptru,c
 10757  016138                     	endif
 10758  016138  0008               	tblrd		*
 10759  01613A  CFF5 F0BE          	movff	tablat,Byte_GetBit@Output
 10760                           
 10761                           ;Types.c: 42: Output >>= pBit;
 10762  01613E  0100               	movlb	0	; () banked
 10763  016140  29BC               	incf	Byte_GetBit@pBit& (0+255),w,b
 10764  016142  0100               	movlb	0	; () banked
 10765  016144  6FBD               	movwf	??_Byte_GetBit& (0+255),b
 10766  016146  D003               	goto	u9480
 10767  016148                     u9485:
 10768  016148  0100               	movlb	0	; () banked
 10769  01614A  90D8               	bcf	status,0,c
 10770  01614C  33BE               	rrcf	Byte_GetBit@Output& (0+255),f,b
 10771  01614E                     u9480:
 10772  01614E  0100               	movlb	0	; () banked
 10773  016150  2FBD               	decfsz	??_Byte_GetBit& (0+255),f,b
 10774  016152  D7FA               	goto	u9485
 10775                           
 10776                           ;Types.c: 43: Output &= 1;
 10777  016154  0E01               	movlw	1
 10778  016156  0100               	movlb	0	; () banked
 10779  016158  17BE               	andwf	Byte_GetBit@Output& (0+255),f,b
 10780                           
 10781                           ; BSR set to: 0
 10782                           ;Types.c: 44: return Output;
 10783  01615A  0100               	movlb	0	; () banked
 10784  01615C  51BE               	movf	Byte_GetBit@Output& (0+255),w,b
 10785  01615E  0012               	return	
 10786  016160                     __end_of_Byte_GetBit:
 10787                           	opt stack 0
 10788                           tblptru	equ	0xFF8
 10789                           tblptrh	equ	0xFF7
 10790                           tblptrl	equ	0xFF6
 10791                           tablat	equ	0xFF5
 10792                           prodh	equ	0xFF4
 10793                           prodl	equ	0xFF3
 10794                           intcon	equ	0xFF2
 10795                           postinc0	equ	0xFEE
 10796                           wreg	equ	0xFE8
 10797                           postdec1	equ	0xFE5
 10798                           fsr1h	equ	0xFE2
 10799                           fsr1l	equ	0xFE1
 10800                           indf2	equ	0xFDF
 10801                           postinc2	equ	0xFDE
 10802                           postdec2	equ	0xFDD
 10803                           fsr2h	equ	0xFDA
 10804                           fsr2l	equ	0xFD9
 10805                           status	equ	0xFD8
 10806                           
 10807 ;; *************** function _ADC_Voltage *****************
 10808 ;; Defined at:
 10809 ;;		line 259 in file "Library/ADC.c"
 10810 ;; Parameters:    Size  Location     Type
 10811 ;;  pInput          2   39[BANK0 ] PTR struct ADC
 10812 ;;		 -> ADC_AN0(5), 
 10813 ;; Auto vars:     Size  Location     Type
 10814 ;;  output          4   53[BANK0 ] float 
 10815 ;;  ref             4   49[BANK0 ] const float 
 10816 ;;  max             4   45[BANK0 ] const float 
 10817 ;; Return value:  Size  Location     Type
 10818 ;;                  4   39[BANK0 ] float 
 10819 ;; Registers used:
 10820 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 10821 ;; Tracked objects:
 10822 ;;		On entry : 0/0
 10823 ;;		On exit  : 0/0
 10824 ;;		Unchanged: 0/0
 10825 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10826 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10827 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10828 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10829 ;;      Totals:         0      18       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10830 ;;Total ram usage:       18 bytes
 10831 ;; Hardware stack levels used:    1
 10832 ;; Hardware stack levels required when called:    8
 10833 ;; This function calls:
 10834 ;;		___fldiv
 10835 ;;		___flmul
 10836 ;;		___xxtofl
 10837 ;; This function is called by:
 10838 ;;		_findClosestWall
 10839 ;;		_mode1
 10840 ;; This function uses a non-reentrant model
 10841 ;;
 10842                           
 10843                           	psect	text45
 10844  013AF4                     __ptext45:
 10845                           	opt stack 0
 10846  013AF4                     _ADC_Voltage:
 10847                           	opt stack 20
 10848                           
 10849                           ;ADC.c: 261: const float max = 1024;
 10850                           
 10851                           ; BSR set to: 0
 10852                           ;incstack = 0
 10853  013AF4  0E00               	movlw	0
 10854  013AF6  0100               	movlb	0	; () banked
 10855  013AF8  6FE7               	movwf	ADC_Voltage@max& (0+255),b
 10856  013AFA  0E00               	movlw	0
 10857  013AFC  6FE8               	movwf	(ADC_Voltage@max+1)& (0+255),b
 10858  013AFE  0E80               	movlw	128
 10859  013B00  6FE9               	movwf	(ADC_Voltage@max+2)& (0+255),b
 10860  013B02  0E44               	movlw	68
 10861  013B04  6FEA               	movwf	(ADC_Voltage@max+3)& (0+255),b
 10862                           
 10863                           ;ADC.c: 262: const float ref = ((float)3.3-(float)0.000);
 10864  013B06  0E33               	movlw	51
 10865  013B08  0100               	movlb	0	; () banked
 10866  013B0A  6FEB               	movwf	ADC_Voltage@ref& (0+255),b
 10867  013B0C  0E33               	movlw	51
 10868  013B0E  6FEC               	movwf	(ADC_Voltage@ref+1)& (0+255),b
 10869  013B10  0E53               	movlw	83
 10870  013B12  6FED               	movwf	(ADC_Voltage@ref+2)& (0+255),b
 10871  013B14  0E40               	movlw	64
 10872  013B16  6FEE               	movwf	(ADC_Voltage@ref+3)& (0+255),b
 10873                           
 10874                           ; BSR set to: 0
 10875                           ;ADC.c: 263: float output = pInput->mValue;
 10876  013B18  0100               	movlb	0	; () banked
 10877  013B1A  EE20 F001          	lfsr	2,1
 10878  013B1E  51E1               	movf	ADC_Voltage@pInput& (0+255),w,b
 10879  013B20  26D9               	addwf	fsr2l,f,c
 10880  013B22  51E2               	movf	(ADC_Voltage@pInput+1)& (0+255),w,b
 10881  013B24  22DA               	addwfc	fsr2h,f,c
 10882  013B26  CFDE F0E5          	movff	postinc2,??_ADC_Voltage
 10883  013B2A  CFDD F0E6          	movff	postdec2,??_ADC_Voltage+1
 10884  013B2E  C0E5  F0BA         	movff	??_ADC_Voltage,___xxtofl@val
 10885  013B32  C0E6  F0BB         	movff	??_ADC_Voltage+1,___xxtofl@val+1
 10886  013B36  0100               	movlb	0	; () banked
 10887  013B38  6BBC               	clrf	(___xxtofl@val+2)& (0+255),b
 10888  013B3A  6BBD               	clrf	(___xxtofl@val+3)& (0+255),b
 10889  013B3C  0E00               	movlw	0
 10890  013B3E  EC71  F091         	call	___xxtofl
 10891  013B42  C0BA  F0EF         	movff	?___xxtofl,ADC_Voltage@output
 10892  013B46  C0BB  F0F0         	movff	?___xxtofl+1,ADC_Voltage@output+1
 10893  013B4A  C0BC  F0F1         	movff	?___xxtofl+2,ADC_Voltage@output+2
 10894  013B4E  C0BD  F0F2         	movff	?___xxtofl+3,ADC_Voltage@output+3
 10895                           
 10896                           ;ADC.c: 265: output /= max;
 10897  013B52  C0EF  F0BA         	movff	ADC_Voltage@output,___fldiv@b
 10898  013B56  C0F0  F0BB         	movff	ADC_Voltage@output+1,___fldiv@b+1
 10899  013B5A  C0F1  F0BC         	movff	ADC_Voltage@output+2,___fldiv@b+2
 10900  013B5E  C0F2  F0BD         	movff	ADC_Voltage@output+3,___fldiv@b+3
 10901  013B62  C0E7  F0BE         	movff	ADC_Voltage@max,___fldiv@a
 10902  013B66  C0E8  F0BF         	movff	ADC_Voltage@max+1,___fldiv@a+1
 10903  013B6A  C0E9  F0C0         	movff	ADC_Voltage@max+2,___fldiv@a+2
 10904  013B6E  C0EA  F0C1         	movff	ADC_Voltage@max+3,___fldiv@a+3
 10905  013B72  EC2D  F088         	call	___fldiv	;wreg free
 10906  013B76  C0BA  F0EF         	movff	?___fldiv,ADC_Voltage@output
 10907  013B7A  C0BB  F0F0         	movff	?___fldiv+1,ADC_Voltage@output+1
 10908  013B7E  C0BC  F0F1         	movff	?___fldiv+2,ADC_Voltage@output+2
 10909  013B82  C0BD  F0F2         	movff	?___fldiv+3,ADC_Voltage@output+3
 10910                           
 10911                           ;ADC.c: 266: output *= ref;
 10912  013B86  C0EF  F0C8         	movff	ADC_Voltage@output,___flmul@b
 10913  013B8A  C0F0  F0C9         	movff	ADC_Voltage@output+1,___flmul@b+1
 10914  013B8E  C0F1  F0CA         	movff	ADC_Voltage@output+2,___flmul@b+2
 10915  013B92  C0F2  F0CB         	movff	ADC_Voltage@output+3,___flmul@b+3
 10916  013B96  C0EB  F0CC         	movff	ADC_Voltage@ref,___flmul@a
 10917  013B9A  C0EC  F0CD         	movff	ADC_Voltage@ref+1,___flmul@a+1
 10918  013B9E  C0ED  F0CE         	movff	ADC_Voltage@ref+2,___flmul@a+2
 10919  013BA2  C0EE  F0CF         	movff	ADC_Voltage@ref+3,___flmul@a+3
 10920  013BA6  EC00  F080         	call	___flmul	;wreg free
 10921  013BAA  C0C8  F0EF         	movff	?___flmul,ADC_Voltage@output
 10922  013BAE  C0C9  F0F0         	movff	?___flmul+1,ADC_Voltage@output+1
 10923  013BB2  C0CA  F0F1         	movff	?___flmul+2,ADC_Voltage@output+2
 10924  013BB6  C0CB  F0F2         	movff	?___flmul+3,ADC_Voltage@output+3
 10925                           
 10926                           ;ADC.c: 268: return output + (float)0.000;
 10927  013BBA  C0EF  F0E1         	movff	ADC_Voltage@output,?_ADC_Voltage
 10928  013BBE  C0F0  F0E2         	movff	ADC_Voltage@output+1,?_ADC_Voltage+1
 10929  013BC2  C0F1  F0E3         	movff	ADC_Voltage@output+2,?_ADC_Voltage+2
 10930  013BC6  C0F2  F0E4         	movff	ADC_Voltage@output+3,?_ADC_Voltage+3
 10931  013BCA  0012               	return	
 10932  013BCC                     __end_of_ADC_Voltage:
 10933                           	opt stack 0
 10934                           tblptru	equ	0xFF8
 10935                           tblptrh	equ	0xFF7
 10936                           tblptrl	equ	0xFF6
 10937                           tablat	equ	0xFF5
 10938                           prodh	equ	0xFF4
 10939                           prodl	equ	0xFF3
 10940                           intcon	equ	0xFF2
 10941                           postinc0	equ	0xFEE
 10942                           wreg	equ	0xFE8
 10943                           postdec1	equ	0xFE5
 10944                           fsr1h	equ	0xFE2
 10945                           fsr1l	equ	0xFE1
 10946                           indf2	equ	0xFDF
 10947                           postinc2	equ	0xFDE
 10948                           postdec2	equ	0xFDD
 10949                           fsr2h	equ	0xFDA
 10950                           fsr2l	equ	0xFD9
 10951                           status	equ	0xFD8
 10952                           
 10953 ;; *************** function ___xxtofl *****************
 10954 ;; Defined at:
 10955 ;;		line 10 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\xxtofl.c"
 10956 ;; Parameters:    Size  Location     Type
 10957 ;;  sign            1    wreg     unsigned char 
 10958 ;;  val             4    0[BANK0 ] long 
 10959 ;; Auto vars:     Size  Location     Type
 10960 ;;  sign            1    8[BANK0 ] unsigned char 
 10961 ;;  arg             4   10[BANK0 ] unsigned long 
 10962 ;;  exp             1    9[BANK0 ] unsigned char 
 10963 ;; Return value:  Size  Location     Type
 10964 ;;                  4    0[BANK0 ] unsigned char 
 10965 ;; Registers used:
 10966 ;;		wreg, status,2, status,0
 10967 ;; Tracked objects:
 10968 ;;		On entry : 0/0
 10969 ;;		On exit  : 0/0
 10970 ;;		Unchanged: 0/0
 10971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10972 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10973 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10974 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10975 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10976 ;;Total ram usage:       14 bytes
 10977 ;; Hardware stack levels used:    1
 10978 ;; Hardware stack levels required when called:    7
 10979 ;; This function calls:
 10980 ;;		Nothing
 10981 ;; This function is called by:
 10982 ;;		_ADC_Voltage
 10983 ;;		_findClosestWall
 10984 ;; This function uses a non-reentrant model
 10985 ;;
 10986                           
 10987                           	psect	text46
 10988  0122E2                     __ptext46:
 10989                           	opt stack 0
 10990  0122E2                     ___xxtofl:
 10991                           	opt stack 21
 10992                           
 10993                           ;incstack = 0
 10994                           ;___xxtofl@sign stored from wreg
 10995  0122E2  0100               	movlb	0	; () banked
 10996  0122E4  6FC2               	movwf	___xxtofl@sign& (0+255),b
 10997  0122E6  0100               	movlb	0	; () banked
 10998  0122E8  51C2               	movf	___xxtofl@sign& (0+255),w,b
 10999  0122EA  0100               	movlb	0	; () banked
 11000  0122EC  B4D8               	btfsc	status,2,c
 11001  0122EE  D01E               	goto	l2999
 11002                           
 11003                           ; BSR set to: 0
 11004  0122F0  0100               	movlb	0	; () banked
 11005  0122F2  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11006  0122F4  D01B               	goto	l2999
 11007                           
 11008                           ; BSR set to: 0
 11009  0122F6  C0BA  F0BE         	movff	___xxtofl@val,??___xxtofl
 11010  0122FA  C0BB  F0BF         	movff	___xxtofl@val+1,??___xxtofl+1
 11011  0122FE  C0BC  F0C0         	movff	___xxtofl@val+2,??___xxtofl+2
 11012  012302  C0BD  F0C1         	movff	___xxtofl@val+3,??___xxtofl+3
 11013  012306  0100               	movlb	0	; () banked
 11014  012308  1FBE               	comf	??___xxtofl& (0+255),f,b
 11015  01230A  1FBF               	comf	(??___xxtofl+1)& (0+255),f,b
 11016  01230C  1FC0               	comf	(??___xxtofl+2)& (0+255),f,b
 11017  01230E  1FC1               	comf	(??___xxtofl+3)& (0+255),f,b
 11018  012310  2BBE               	incf	??___xxtofl& (0+255),f,b
 11019  012312  0E00               	movlw	0
 11020  012314  23BF               	addwfc	(??___xxtofl+1)& (0+255),f,b
 11021  012316  23C0               	addwfc	(??___xxtofl+2)& (0+255),f,b
 11022  012318  23C1               	addwfc	(??___xxtofl+3)& (0+255),f,b
 11023  01231A  C0BE  F0C4         	movff	??___xxtofl,___xxtofl@arg
 11024  01231E  C0BF  F0C5         	movff	??___xxtofl+1,___xxtofl@arg+1
 11025  012322  C0C0  F0C6         	movff	??___xxtofl+2,___xxtofl@arg+2
 11026  012326  C0C1  F0C7         	movff	??___xxtofl+3,___xxtofl@arg+3
 11027  01232A  D008               	goto	l3000
 11028  01232C                     l2999:
 11029                           
 11030                           ; BSR set to: 0
 11031  01232C  C0BA  F0C4         	movff	___xxtofl@val,___xxtofl@arg
 11032  012330  C0BB  F0C5         	movff	___xxtofl@val+1,___xxtofl@arg+1
 11033  012334  C0BC  F0C6         	movff	___xxtofl@val+2,___xxtofl@arg+2
 11034  012338  C0BD  F0C7         	movff	___xxtofl@val+3,___xxtofl@arg+3
 11035  01233C                     l3000:
 11036                           
 11037                           ; BSR set to: 0
 11038                           
 11039                           ; BSR set to: 0
 11040  01233C  0100               	movlb	0	; () banked
 11041  01233E  51BA               	movf	___xxtofl@val& (0+255),w,b
 11042  012340  0100               	movlb	0	; () banked
 11043  012342  11BB               	iorwf	(___xxtofl@val+1)& (0+255),w,b
 11044  012344  0100               	movlb	0	; () banked
 11045  012346  11BC               	iorwf	(___xxtofl@val+2)& (0+255),w,b
 11046  012348  0100               	movlb	0	; () banked
 11047  01234A  11BD               	iorwf	(___xxtofl@val+3)& (0+255),w,b
 11048  01234C  A4D8               	btfss	status,2,c
 11049  01234E  D00A               	goto	l3001
 11050                           
 11051                           ; BSR set to: 0
 11052  012350  0E00               	movlw	0
 11053  012352  0100               	movlb	0	; () banked
 11054  012354  6FBA               	movwf	?___xxtofl& (0+255),b
 11055  012356  0E00               	movlw	0
 11056  012358  6FBB               	movwf	(?___xxtofl+1)& (0+255),b
 11057  01235A  0E00               	movlw	0
 11058  01235C  6FBC               	movwf	(?___xxtofl+2)& (0+255),b
 11059  01235E  0E00               	movlw	0
 11060  012360  6FBD               	movwf	(?___xxtofl+3)& (0+255),b
 11061                           
 11062                           ; BSR set to: 0
 11063  012362  0012               	return	
 11064  012364                     l3001:
 11065                           
 11066                           ; BSR set to: 0
 11067                           
 11068                           ; BSR set to: 0
 11069  012364  0E96               	movlw	150
 11070  012366  0100               	movlb	0	; () banked
 11071  012368  6FC3               	movwf	___xxtofl@exp& (0+255),b
 11072  01236A  D008               	goto	l3003
 11073  01236C                     
 11074                           ; BSR set to: 0
 11075                           
 11076                           ; BSR set to: 0
 11077  01236C  0100               	movlb	0	; () banked
 11078  01236E  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11079  012370  0100               	movlb	0	; () banked
 11080  012372  90D8               	bcf	status,0,c
 11081  012374  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11082  012376  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11083  012378  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11084  01237A  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11085  01237C                     l3003:
 11086                           
 11087                           ; BSR set to: 0
 11088                           
 11089                           ; BSR set to: 0
 11090  01237C  0E00               	movlw	0
 11091  01237E  0100               	movlb	0	; () banked
 11092  012380  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11093  012382  0100               	movlb	0	; () banked
 11094  012384  6FBE               	movwf	??___xxtofl& (0+255),b
 11095  012386  0E00               	movlw	0
 11096  012388  0100               	movlb	0	; () banked
 11097  01238A  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11098  01238C  0100               	movlb	0	; () banked
 11099  01238E  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11100  012390  0E00               	movlw	0
 11101  012392  0100               	movlb	0	; () banked
 11102  012394  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11103  012396  0100               	movlb	0	; () banked
 11104  012398  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11105  01239A  0EFE               	movlw	254
 11106  01239C  0100               	movlb	0	; () banked
 11107  01239E  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11108  0123A0  0100               	movlb	0	; () banked
 11109  0123A2  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11110  0123A4  0100               	movlb	0	; () banked
 11111  0123A6  51BE               	movf	??___xxtofl& (0+255),w,b
 11112  0123A8  0100               	movlb	0	; () banked
 11113  0123AA  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11114  0123AC  0100               	movlb	0	; () banked
 11115  0123AE  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11116  0123B0  0100               	movlb	0	; () banked
 11117  0123B2  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11118  0123B4  B4D8               	btfsc	status,2,c
 11119  0123B6  D010               	goto	l3006
 11120  0123B8  D7D9               	goto	l3004
 11121  0123BA                     
 11122                           ; BSR set to: 0
 11123                           
 11124                           ; BSR set to: 0
 11125  0123BA  0100               	movlb	0	; () banked
 11126  0123BC  2BC3               	incf	___xxtofl@exp& (0+255),f,b
 11127                           
 11128                           ; BSR set to: 0
 11129  0123BE  0E01               	movlw	1
 11130  0123C0  0100               	movlb	0	; () banked
 11131  0123C2  27C4               	addwf	___xxtofl@arg& (0+255),f,b
 11132  0123C4  0E00               	movlw	0
 11133  0123C6  23C5               	addwfc	(___xxtofl@arg+1)& (0+255),f,b
 11134  0123C8  23C6               	addwfc	(___xxtofl@arg+2)& (0+255),f,b
 11135  0123CA  23C7               	addwfc	(___xxtofl@arg+3)& (0+255),f,b
 11136                           
 11137                           ; BSR set to: 0
 11138  0123CC  0100               	movlb	0	; () banked
 11139  0123CE  90D8               	bcf	status,0,c
 11140  0123D0  33C7               	rrcf	(___xxtofl@arg+3)& (0+255),f,b
 11141  0123D2  33C6               	rrcf	(___xxtofl@arg+2)& (0+255),f,b
 11142  0123D4  33C5               	rrcf	(___xxtofl@arg+1)& (0+255),f,b
 11143  0123D6  33C4               	rrcf	___xxtofl@arg& (0+255),f,b
 11144  0123D8                     l3006:
 11145                           
 11146                           ; BSR set to: 0
 11147  0123D8  0E00               	movlw	0
 11148  0123DA  0100               	movlb	0	; () banked
 11149  0123DC  15C4               	andwf	___xxtofl@arg& (0+255),w,b
 11150  0123DE  0100               	movlb	0	; () banked
 11151  0123E0  6FBE               	movwf	??___xxtofl& (0+255),b
 11152  0123E2  0E00               	movlw	0
 11153  0123E4  0100               	movlb	0	; () banked
 11154  0123E6  15C5               	andwf	(___xxtofl@arg+1)& (0+255),w,b
 11155  0123E8  0100               	movlb	0	; () banked
 11156  0123EA  6FBF               	movwf	(??___xxtofl+1)& (0+255),b
 11157  0123EC  0E00               	movlw	0
 11158  0123EE  0100               	movlb	0	; () banked
 11159  0123F0  15C6               	andwf	(___xxtofl@arg+2)& (0+255),w,b
 11160  0123F2  0100               	movlb	0	; () banked
 11161  0123F4  6FC0               	movwf	(??___xxtofl+2)& (0+255),b
 11162  0123F6  0EFF               	movlw	255
 11163  0123F8  0100               	movlb	0	; () banked
 11164  0123FA  15C7               	andwf	(___xxtofl@arg+3)& (0+255),w,b
 11165  0123FC  0100               	movlb	0	; () banked
 11166  0123FE  6FC1               	movwf	(??___xxtofl+3)& (0+255),b
 11167  012400  0100               	movlb	0	; () banked
 11168  012402  51BE               	movf	??___xxtofl& (0+255),w,b
 11169  012404  0100               	movlb	0	; () banked
 11170  012406  11BF               	iorwf	(??___xxtofl+1)& (0+255),w,b
 11171  012408  0100               	movlb	0	; () banked
 11172  01240A  11C0               	iorwf	(??___xxtofl+2)& (0+255),w,b
 11173  01240C  0100               	movlb	0	; () banked
 11174  01240E  11C1               	iorwf	(??___xxtofl+3)& (0+255),w,b
 11175  012410  B4D8               	btfsc	status,2,c
 11176  012412  D009               	goto	l3009
 11177  012414  D7D2               	goto	l3007
 11178  012416                     
 11179                           ; BSR set to: 0
 11180                           
 11181                           ; BSR set to: 0
 11182  012416  0100               	movlb	0	; () banked
 11183  012418  07C3               	decf	___xxtofl@exp& (0+255),f,b
 11184  01241A  0100               	movlb	0	; () banked
 11185  01241C  90D8               	bcf	status,0,c
 11186  01241E  37C4               	rlcf	___xxtofl@arg& (0+255),f,b
 11187  012420  37C5               	rlcf	(___xxtofl@arg+1)& (0+255),f,b
 11188  012422  37C6               	rlcf	(___xxtofl@arg+2)& (0+255),f,b
 11189  012424  37C7               	rlcf	(___xxtofl@arg+3)& (0+255),f,b
 11190  012426                     l3009:
 11191                           
 11192                           ; BSR set to: 0
 11193                           
 11194                           ; BSR set to: 0
 11195  012426  0100               	movlb	0	; () banked
 11196  012428  BFC6               	btfsc	(___xxtofl@arg+2)& (0+255),7,b
 11197  01242A  D004               	goto	u10510
 11198                           
 11199                           ; BSR set to: 0
 11200  01242C  0E02               	movlw	2
 11201  01242E  0100               	movlb	0	; () banked
 11202  012430  61C3               	cpfslt	___xxtofl@exp& (0+255),b
 11203  012432  D7F1               	goto	l3010
 11204  012434                     u10510:
 11205                           
 11206                           ; BSR set to: 0
 11207                           
 11208                           ; BSR set to: 0
 11209  012434  0100               	movlb	0	; () banked
 11210  012436  B1C3               	btfsc	___xxtofl@exp& (0+255),0,b
 11211  012438  D009               	goto	l3014
 11212                           
 11213                           ; BSR set to: 0
 11214  01243A  0EFF               	movlw	255
 11215  01243C  0100               	movlb	0	; () banked
 11216  01243E  17C4               	andwf	___xxtofl@arg& (0+255),f,b
 11217  012440  0EFF               	movlw	255
 11218  012442  17C5               	andwf	(___xxtofl@arg+1)& (0+255),f,b
 11219  012444  0E7F               	movlw	127
 11220  012446  17C6               	andwf	(___xxtofl@arg+2)& (0+255),f,b
 11221  012448  0EFF               	movlw	255
 11222  01244A  17C7               	andwf	(___xxtofl@arg+3)& (0+255),f,b
 11223  01244C                     l3014:
 11224                           
 11225                           ; BSR set to: 0
 11226  01244C  0100               	movlb	0	; () banked
 11227  01244E  90D8               	bcf	status,0,c
 11228  012450  33C3               	rrcf	___xxtofl@exp& (0+255),f,b
 11229  012452  C0C3  F0BE         	movff	___xxtofl@exp,??___xxtofl
 11230  012456  0100               	movlb	0	; () banked
 11231  012458  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11232  01245A  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11233  01245C  6BC1               	clrf	(??___xxtofl+3)& (0+255),b
 11234  01245E  C0BE  F0C1         	movff	??___xxtofl,??___xxtofl+3
 11235  012462  0100               	movlb	0	; () banked
 11236  012464  6BC0               	clrf	(??___xxtofl+2)& (0+255),b
 11237  012466  6BBF               	clrf	(??___xxtofl+1)& (0+255),b
 11238  012468  6BBE               	clrf	??___xxtofl& (0+255),b
 11239  01246A  0100               	movlb	0	; () banked
 11240  01246C  51BE               	movf	??___xxtofl& (0+255),w,b
 11241  01246E  0100               	movlb	0	; () banked
 11242  012470  13C4               	iorwf	___xxtofl@arg& (0+255),f,b
 11243  012472  0100               	movlb	0	; () banked
 11244  012474  51BF               	movf	(??___xxtofl+1)& (0+255),w,b
 11245  012476  0100               	movlb	0	; () banked
 11246  012478  13C5               	iorwf	(___xxtofl@arg+1)& (0+255),f,b
 11247  01247A  0100               	movlb	0	; () banked
 11248  01247C  51C0               	movf	(??___xxtofl+2)& (0+255),w,b
 11249  01247E  0100               	movlb	0	; () banked
 11250  012480  13C6               	iorwf	(___xxtofl@arg+2)& (0+255),f,b
 11251  012482  0100               	movlb	0	; () banked
 11252  012484  51C1               	movf	(??___xxtofl+3)& (0+255),w,b
 11253  012486  0100               	movlb	0	; () banked
 11254  012488  13C7               	iorwf	(___xxtofl@arg+3)& (0+255),f,b
 11255                           
 11256                           ; BSR set to: 0
 11257  01248A  0100               	movlb	0	; () banked
 11258  01248C  51C2               	movf	___xxtofl@sign& (0+255),w,b
 11259  01248E  0100               	movlb	0	; () banked
 11260  012490  B4D8               	btfsc	status,2,c
 11261  012492  D005               	goto	l3015
 11262                           
 11263                           ; BSR set to: 0
 11264  012494  0100               	movlb	0	; () banked
 11265  012496  AFBD               	btfss	(___xxtofl@val+3)& (0+255),7,b
 11266  012498  D002               	goto	l3015
 11267                           
 11268                           ; BSR set to: 0
 11269  01249A  0100               	movlb	0	; () banked
 11270  01249C  8FC7               	bsf	(___xxtofl@arg+3)& (0+255),7,b
 11271  01249E                     l3015:
 11272                           
 11273                           ; BSR set to: 0
 11274                           
 11275                           ; BSR set to: 0
 11276  01249E  C0C4  F0BA         	movff	___xxtofl@arg,?___xxtofl
 11277  0124A2  C0C5  F0BB         	movff	___xxtofl@arg+1,?___xxtofl+1
 11278  0124A6  C0C6  F0BC         	movff	___xxtofl@arg+2,?___xxtofl+2
 11279  0124AA  C0C7  F0BD         	movff	___xxtofl@arg+3,?___xxtofl+3
 11280  0124AE  0012               	return	
 11281  0124B0                     __end_of___xxtofl:
 11282                           	opt stack 0
 11283                           tblptru	equ	0xFF8
 11284                           tblptrh	equ	0xFF7
 11285                           tblptrl	equ	0xFF6
 11286                           tablat	equ	0xFF5
 11287                           prodh	equ	0xFF4
 11288                           prodl	equ	0xFF3
 11289                           intcon	equ	0xFF2
 11290                           postinc0	equ	0xFEE
 11291                           wreg	equ	0xFE8
 11292                           postdec1	equ	0xFE5
 11293                           fsr1h	equ	0xFE2
 11294                           fsr1l	equ	0xFE1
 11295                           indf2	equ	0xFDF
 11296                           postinc2	equ	0xFDE
 11297                           postdec2	equ	0xFDD
 11298                           fsr2h	equ	0xFDA
 11299                           fsr2l	equ	0xFD9
 11300                           status	equ	0xFD8
 11301                           
 11302 ;; *************** function ___flmul *****************
 11303 ;; Defined at:
 11304 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcmul.c"
 11305 ;; Parameters:    Size  Location     Type
 11306 ;;  b               4   14[BANK0 ] unsigned char 
 11307 ;;  a               4   18[BANK0 ] unsigned char 
 11308 ;; Auto vars:     Size  Location     Type
 11309 ;;  prod            4   33[BANK0 ] struct .
 11310 ;;  grs             4   28[BANK0 ] unsigned long 
 11311 ;;  temp            2   37[BANK0 ] struct .
 11312 ;;  bexp            1   32[BANK0 ] unsigned char 
 11313 ;;  aexp            1   27[BANK0 ] unsigned char 
 11314 ;;  sign            1   26[BANK0 ] unsigned char 
 11315 ;; Return value:  Size  Location     Type
 11316 ;;                  4   14[BANK0 ] unsigned char 
 11317 ;; Registers used:
 11318 ;;		wreg, status,2, status,0, prodl, prodh
 11319 ;; Tracked objects:
 11320 ;;		On entry : 0/0
 11321 ;;		On exit  : 0/0
 11322 ;;		Unchanged: 0/0
 11323 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11324 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11325 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11326 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11327 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11328 ;;Total ram usage:       25 bytes
 11329 ;; Hardware stack levels used:    1
 11330 ;; Hardware stack levels required when called:    7
 11331 ;; This function calls:
 11332 ;;		Nothing
 11333 ;; This function is called by:
 11334 ;;		_ADC_Voltage
 11335 ;;		_findClosestWall
 11336 ;; This function uses a non-reentrant model
 11337 ;;
 11338                           
 11339                           	psect	text47
 11340  010000                     __ptext47:
 11341                           	opt stack 0
 11342  010000                     ___flmul:
 11343                           	opt stack 21
 11344                           
 11345                           ; BSR set to: 0
 11346                           ;incstack = 0
 11347  010000  0100               	movlb	0	; () banked
 11348  010002  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11349  010004  0B80               	andlw	128
 11350  010006  0100               	movlb	0	; () banked
 11351  010008  6FD4               	movwf	___flmul@sign& (0+255),b
 11352  01000A  0100               	movlb	0	; () banked
 11353  01000C  51CB               	movf	(___flmul@b+3)& (0+255),w,b
 11354  01000E  25CB               	addwf	(___flmul@b+3)& (0+255),w,b
 11355  010010  0100               	movlb	0	; () banked
 11356  010012  6FDA               	movwf	___flmul@bexp& (0+255),b
 11357                           
 11358                           ; BSR set to: 0
 11359  010014  0100               	movlb	0	; () banked
 11360  010016  AFCA               	btfss	(___flmul@b+2)& (0+255),7,b
 11361  010018  D002               	goto	l2970
 11362                           
 11363                           ; BSR set to: 0
 11364  01001A  0100               	movlb	0	; () banked
 11365  01001C  81DA               	bsf	___flmul@bexp& (0+255),0,b
 11366  01001E                     l2970:
 11367                           
 11368                           ; BSR set to: 0
 11369                           
 11370                           ; BSR set to: 0
 11371  01001E  0100               	movlb	0	; () banked
 11372  010020  51DA               	movf	___flmul@bexp& (0+255),w,b
 11373  010022  0100               	movlb	0	; () banked
 11374  010024  B4D8               	btfsc	status,2,c
 11375  010026  D010               	goto	l2971
 11376                           
 11377                           ; BSR set to: 0
 11378  010028  0100               	movlb	0	; () banked
 11379  01002A  29DA               	incf	___flmul@bexp& (0+255),w,b
 11380  01002C  A4D8               	btfss	status,2,c
 11381  01002E  D009               	goto	l2972
 11382                           
 11383                           ; BSR set to: 0
 11384  010030  0E00               	movlw	0
 11385  010032  0100               	movlb	0	; () banked
 11386  010034  6FC8               	movwf	___flmul@b& (0+255),b
 11387  010036  0E00               	movlw	0
 11388  010038  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11389  01003A  0E00               	movlw	0
 11390  01003C  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11391  01003E  0E00               	movlw	0
 11392  010040  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11393  010042                     l2972:
 11394                           
 11395                           ; BSR set to: 0
 11396                           
 11397                           ; BSR set to: 0
 11398  010042  0100               	movlb	0	; () banked
 11399  010044  8FCA               	bsf	(___flmul@b+2)& (0+255),7,b
 11400  010046  D009               	goto	l2973
 11401  010048                     l2971:
 11402                           
 11403                           ; BSR set to: 0
 11404                           
 11405                           ; BSR set to: 0
 11406  010048  0E00               	movlw	0
 11407  01004A  0100               	movlb	0	; () banked
 11408  01004C  6FC8               	movwf	___flmul@b& (0+255),b
 11409  01004E  0E00               	movlw	0
 11410  010050  6FC9               	movwf	(___flmul@b+1)& (0+255),b
 11411  010052  0E00               	movlw	0
 11412  010054  6FCA               	movwf	(___flmul@b+2)& (0+255),b
 11413  010056  0E00               	movlw	0
 11414  010058  6FCB               	movwf	(___flmul@b+3)& (0+255),b
 11415  01005A                     l2973:
 11416                           
 11417                           ; BSR set to: 0
 11418                           
 11419                           ; BSR set to: 0
 11420  01005A  0100               	movlb	0	; () banked
 11421  01005C  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11422  01005E  0B80               	andlw	128
 11423  010060  0100               	movlb	0	; () banked
 11424  010062  1BD4               	xorwf	___flmul@sign& (0+255),f,b
 11425                           
 11426                           ; BSR set to: 0
 11427  010064  0100               	movlb	0	; () banked
 11428  010066  51CF               	movf	(___flmul@a+3)& (0+255),w,b
 11429  010068  25CF               	addwf	(___flmul@a+3)& (0+255),w,b
 11430  01006A  0100               	movlb	0	; () banked
 11431  01006C  6FD5               	movwf	___flmul@aexp& (0+255),b
 11432                           
 11433                           ; BSR set to: 0
 11434  01006E  0100               	movlb	0	; () banked
 11435  010070  AFCE               	btfss	(___flmul@a+2)& (0+255),7,b
 11436  010072  D002               	goto	l2974
 11437                           
 11438                           ; BSR set to: 0
 11439  010074  0100               	movlb	0	; () banked
 11440  010076  81D5               	bsf	___flmul@aexp& (0+255),0,b
 11441  010078                     l2974:
 11442                           
 11443                           ; BSR set to: 0
 11444                           
 11445                           ; BSR set to: 0
 11446  010078  0100               	movlb	0	; () banked
 11447  01007A  51D5               	movf	___flmul@aexp& (0+255),w,b
 11448  01007C  0100               	movlb	0	; () banked
 11449  01007E  B4D8               	btfsc	status,2,c
 11450  010080  D010               	goto	l2975
 11451                           
 11452                           ; BSR set to: 0
 11453  010082  0100               	movlb	0	; () banked
 11454  010084  29D5               	incf	___flmul@aexp& (0+255),w,b
 11455  010086  A4D8               	btfss	status,2,c
 11456  010088  D009               	goto	l2976
 11457                           
 11458                           ; BSR set to: 0
 11459  01008A  0E00               	movlw	0
 11460  01008C  0100               	movlb	0	; () banked
 11461  01008E  6FCC               	movwf	___flmul@a& (0+255),b
 11462  010090  0E00               	movlw	0
 11463  010092  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11464  010094  0E00               	movlw	0
 11465  010096  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11466  010098  0E00               	movlw	0
 11467  01009A  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11468  01009C                     l2976:
 11469                           
 11470                           ; BSR set to: 0
 11471                           
 11472                           ; BSR set to: 0
 11473  01009C  0100               	movlb	0	; () banked
 11474  01009E  8FCE               	bsf	(___flmul@a+2)& (0+255),7,b
 11475  0100A0  D009               	goto	l2977
 11476  0100A2                     l2975:
 11477                           
 11478                           ; BSR set to: 0
 11479                           
 11480                           ; BSR set to: 0
 11481  0100A2  0E00               	movlw	0
 11482  0100A4  0100               	movlb	0	; () banked
 11483  0100A6  6FCC               	movwf	___flmul@a& (0+255),b
 11484  0100A8  0E00               	movlw	0
 11485  0100AA  6FCD               	movwf	(___flmul@a+1)& (0+255),b
 11486  0100AC  0E00               	movlw	0
 11487  0100AE  6FCE               	movwf	(___flmul@a+2)& (0+255),b
 11488  0100B0  0E00               	movlw	0
 11489  0100B2  6FCF               	movwf	(___flmul@a+3)& (0+255),b
 11490  0100B4                     l2977:
 11491                           
 11492                           ; BSR set to: 0
 11493  0100B4  0100               	movlb	0	; () banked
 11494  0100B6  51D5               	movf	___flmul@aexp& (0+255),w,b
 11495  0100B8  0100               	movlb	0	; () banked
 11496  0100BA  B4D8               	btfsc	status,2,c
 11497  0100BC  D005               	goto	u10330
 11498                           
 11499                           ; BSR set to: 0
 11500  0100BE  0100               	movlb	0	; () banked
 11501  0100C0  51DA               	movf	___flmul@bexp& (0+255),w,b
 11502  0100C2  0100               	movlb	0	; () banked
 11503  0100C4  A4D8               	btfss	status,2,c
 11504  0100C6  D00A               	goto	l2978
 11505  0100C8                     u10330:
 11506                           
 11507                           ; BSR set to: 0
 11508                           
 11509                           ; BSR set to: 0
 11510  0100C8  0E00               	movlw	0
 11511  0100CA  0100               	movlb	0	; () banked
 11512  0100CC  6FC8               	movwf	?___flmul& (0+255),b
 11513  0100CE  0E00               	movlw	0
 11514  0100D0  6FC9               	movwf	(?___flmul+1)& (0+255),b
 11515  0100D2  0E00               	movlw	0
 11516  0100D4  6FCA               	movwf	(?___flmul+2)& (0+255),b
 11517  0100D6  0E00               	movlw	0
 11518  0100D8  6FCB               	movwf	(?___flmul+3)& (0+255),b
 11519                           
 11520                           ; BSR set to: 0
 11521  0100DA  0012               	return	
 11522  0100DC                     l2978:
 11523                           
 11524                           ; BSR set to: 0
 11525                           
 11526                           ; BSR set to: 0
 11527  0100DC  0100               	movlb	0	; () banked
 11528  0100DE  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11529  0100E0  0100               	movlb	0	; () banked
 11530  0100E2  03C8               	mulwf	___flmul@b& (0+255),b
 11531  0100E4  CFF3 F0DF          	movff	prodl,___flmul@temp
 11532  0100E8  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11533                           
 11534                           ; BSR set to: 0
 11535  0100EC  0100               	movlb	0	; () banked
 11536  0100EE  51DF               	movf	___flmul@temp& (0+255),w,b
 11537  0100F0  0100               	movlb	0	; () banked
 11538  0100F2  6FD6               	movwf	___flmul@grs& (0+255),b
 11539  0100F4  6BD7               	clrf	(___flmul@grs+1)& (0+255),b
 11540  0100F6  6BD8               	clrf	(___flmul@grs+2)& (0+255),b
 11541  0100F8  6BD9               	clrf	(___flmul@grs+3)& (0+255),b
 11542                           
 11543                           ; BSR set to: 0
 11544  0100FA  0100               	movlb	0	; () banked
 11545  0100FC  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11546  0100FE  0100               	movlb	0	; () banked
 11547  010100  6FDB               	movwf	___flmul@prod& (0+255),b
 11548  010102  6BDC               	clrf	(___flmul@prod+1)& (0+255),b
 11549  010104  6BDD               	clrf	(___flmul@prod+2)& (0+255),b
 11550  010106  6BDE               	clrf	(___flmul@prod+3)& (0+255),b
 11551  010108  0100               	movlb	0	; () banked
 11552  01010A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11553  01010C  0100               	movlb	0	; () banked
 11554  01010E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11555  010110  CFF3 F0DF          	movff	prodl,___flmul@temp
 11556  010114  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11557                           
 11558                           ; BSR set to: 0
 11559  010118  0100               	movlb	0	; () banked
 11560  01011A  51DF               	movf	___flmul@temp& (0+255),w,b
 11561  01011C  0100               	movlb	0	; () banked
 11562  01011E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11563  010120  0E00               	movlw	0
 11564  010122  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11565  010124  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11566  010126  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11567                           
 11568                           ; BSR set to: 0
 11569  010128  0100               	movlb	0	; () banked
 11570  01012A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11571  01012C  0100               	movlb	0	; () banked
 11572  01012E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11573  010130  0E00               	movlw	0
 11574  010132  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11575  010134  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11576  010136  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11577  010138  0100               	movlb	0	; () banked
 11578  01013A  51CC               	movf	___flmul@a& (0+255),w,b
 11579  01013C  0100               	movlb	0	; () banked
 11580  01013E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11581  010140  CFF3 F0DF          	movff	prodl,___flmul@temp
 11582  010144  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11583                           
 11584                           ; BSR set to: 0
 11585  010148  0100               	movlb	0	; () banked
 11586  01014A  51DF               	movf	___flmul@temp& (0+255),w,b
 11587  01014C  0100               	movlb	0	; () banked
 11588  01014E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11589  010150  0E00               	movlw	0
 11590  010152  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11591  010154  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11592  010156  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11593                           
 11594                           ; BSR set to: 0
 11595  010158  0100               	movlb	0	; () banked
 11596  01015A  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11597  01015C  0100               	movlb	0	; () banked
 11598  01015E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11599  010160  0E00               	movlw	0
 11600  010162  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11601  010164  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11602  010166  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11603                           
 11604                           ; BSR set to: 0
 11605  010168  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11606  01016C  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11607  010170  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11608  010174  0100               	movlb	0	; () banked
 11609  010176  6BD6               	clrf	___flmul@grs& (0+255),b
 11610                           
 11611                           ; BSR set to: 0
 11612  010178  0100               	movlb	0	; () banked
 11613  01017A  51CC               	movf	___flmul@a& (0+255),w,b
 11614  01017C  0100               	movlb	0	; () banked
 11615  01017E  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11616  010180  CFF3 F0DF          	movff	prodl,___flmul@temp
 11617  010184  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11618                           
 11619                           ; BSR set to: 0
 11620  010188  0100               	movlb	0	; () banked
 11621  01018A  51DF               	movf	___flmul@temp& (0+255),w,b
 11622  01018C  0100               	movlb	0	; () banked
 11623  01018E  27D6               	addwf	___flmul@grs& (0+255),f,b
 11624  010190  0100               	movlb	0	; () banked
 11625  010192  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11626  010194  0100               	movlb	0	; () banked
 11627  010196  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11628  010198  0E00               	movlw	0
 11629  01019A  0100               	movlb	0	; () banked
 11630  01019C  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11631  01019E  0E00               	movlw	0
 11632  0101A0  0100               	movlb	0	; () banked
 11633  0101A2  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11634                           
 11635                           ; BSR set to: 0
 11636  0101A4  0100               	movlb	0	; () banked
 11637  0101A6  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11638  0101A8  0100               	movlb	0	; () banked
 11639  0101AA  03C8               	mulwf	___flmul@b& (0+255),b
 11640  0101AC  CFF3 F0DF          	movff	prodl,___flmul@temp
 11641  0101B0  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11642                           
 11643                           ; BSR set to: 0
 11644  0101B4  0100               	movlb	0	; () banked
 11645  0101B6  51DF               	movf	___flmul@temp& (0+255),w,b
 11646  0101B8  0100               	movlb	0	; () banked
 11647  0101BA  27D6               	addwf	___flmul@grs& (0+255),f,b
 11648  0101BC  0100               	movlb	0	; () banked
 11649  0101BE  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11650  0101C0  0100               	movlb	0	; () banked
 11651  0101C2  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11652  0101C4  0E00               	movlw	0
 11653  0101C6  0100               	movlb	0	; () banked
 11654  0101C8  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11655  0101CA  0E00               	movlw	0
 11656  0101CC  0100               	movlb	0	; () banked
 11657  0101CE  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11658                           
 11659                           ; BSR set to: 0
 11660  0101D0  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11661  0101D4  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11662  0101D8  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11663  0101DC  0100               	movlb	0	; () banked
 11664  0101DE  6BD6               	clrf	___flmul@grs& (0+255),b
 11665  0101E0  0100               	movlb	0	; () banked
 11666  0101E2  51CC               	movf	___flmul@a& (0+255),w,b
 11667  0101E4  0100               	movlb	0	; () banked
 11668  0101E6  03C8               	mulwf	___flmul@b& (0+255),b
 11669  0101E8  CFF3 F0DF          	movff	prodl,___flmul@temp
 11670  0101EC  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11671                           
 11672                           ; BSR set to: 0
 11673  0101F0  0100               	movlb	0	; () banked
 11674  0101F2  51DF               	movf	___flmul@temp& (0+255),w,b
 11675  0101F4  0100               	movlb	0	; () banked
 11676  0101F6  27D6               	addwf	___flmul@grs& (0+255),f,b
 11677  0101F8  0100               	movlb	0	; () banked
 11678  0101FA  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11679  0101FC  0100               	movlb	0	; () banked
 11680  0101FE  23D7               	addwfc	(___flmul@grs+1)& (0+255),f,b
 11681  010200  0E00               	movlw	0
 11682  010202  0100               	movlb	0	; () banked
 11683  010204  23D8               	addwfc	(___flmul@grs+2)& (0+255),f,b
 11684  010206  0E00               	movlw	0
 11685  010208  0100               	movlb	0	; () banked
 11686  01020A  23D9               	addwfc	(___flmul@grs+3)& (0+255),f,b
 11687                           
 11688                           ; BSR set to: 0
 11689  01020C  0100               	movlb	0	; () banked
 11690  01020E  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11691  010210  0100               	movlb	0	; () banked
 11692  010212  03C9               	mulwf	(___flmul@b+1)& (0+255),b
 11693  010214  CFF3 F0DF          	movff	prodl,___flmul@temp
 11694  010218  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11695  01021C  0100               	movlb	0	; () banked
 11696  01021E  51DF               	movf	___flmul@temp& (0+255),w,b
 11697  010220  0100               	movlb	0	; () banked
 11698  010222  27DB               	addwf	___flmul@prod& (0+255),f,b
 11699  010224  0100               	movlb	0	; () banked
 11700  010226  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11701  010228  0100               	movlb	0	; () banked
 11702  01022A  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11703  01022C  0E00               	movlw	0
 11704  01022E  0100               	movlb	0	; () banked
 11705  010230  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11706  010232  0E00               	movlw	0
 11707  010234  0100               	movlb	0	; () banked
 11708  010236  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11709                           
 11710                           ; BSR set to: 0
 11711  010238  0100               	movlb	0	; () banked
 11712  01023A  51CD               	movf	(___flmul@a+1)& (0+255),w,b
 11713  01023C  0100               	movlb	0	; () banked
 11714  01023E  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11715  010240  CFF3 F0DF          	movff	prodl,___flmul@temp
 11716  010244  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11717                           
 11718                           ; BSR set to: 0
 11719  010248  0100               	movlb	0	; () banked
 11720  01024A  51DF               	movf	___flmul@temp& (0+255),w,b
 11721  01024C  0100               	movlb	0	; () banked
 11722  01024E  27DB               	addwf	___flmul@prod& (0+255),f,b
 11723  010250  0100               	movlb	0	; () banked
 11724  010252  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11725  010254  0100               	movlb	0	; () banked
 11726  010256  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11727  010258  0E00               	movlw	0
 11728  01025A  0100               	movlb	0	; () banked
 11729  01025C  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11730  01025E  0E00               	movlw	0
 11731  010260  0100               	movlb	0	; () banked
 11732  010262  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11733  010264  0100               	movlb	0	; () banked
 11734  010266  51CE               	movf	(___flmul@a+2)& (0+255),w,b
 11735  010268  0100               	movlb	0	; () banked
 11736  01026A  03CA               	mulwf	(___flmul@b+2)& (0+255),b
 11737  01026C  CFF3 F0DF          	movff	prodl,___flmul@temp
 11738  010270  CFF4 F0E0          	movff	prodh,___flmul@temp+1
 11739                           
 11740                           ; BSR set to: 0
 11741  010274  0100               	movlb	0	; () banked
 11742  010276  51DF               	movf	___flmul@temp& (0+255),w,b
 11743  010278  0100               	movlb	0	; () banked
 11744  01027A  6FD0               	movwf	??___flmul& (0+255),b
 11745  01027C  0100               	movlb	0	; () banked
 11746  01027E  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11747  010280  0100               	movlb	0	; () banked
 11748  010282  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11749  010284  0100               	movlb	0	; () banked
 11750  010286  6BD2               	clrf	(??___flmul+2)& (0+255),b
 11751  010288  0100               	movlb	0	; () banked
 11752  01028A  6BD3               	clrf	(??___flmul+3)& (0+255),b
 11753  01028C  C0D2  F0D3         	movff	??___flmul+2,??___flmul+3
 11754  010290  C0D1  F0D2         	movff	??___flmul+1,??___flmul+2
 11755  010294  C0D0  F0D1         	movff	??___flmul,??___flmul+1
 11756  010298  0100               	movlb	0	; () banked
 11757  01029A  6BD0               	clrf	??___flmul& (0+255),b
 11758  01029C  0100               	movlb	0	; () banked
 11759  01029E  51D0               	movf	??___flmul& (0+255),w,b
 11760  0102A0  0100               	movlb	0	; () banked
 11761  0102A2  27DB               	addwf	___flmul@prod& (0+255),f,b
 11762  0102A4  0100               	movlb	0	; () banked
 11763  0102A6  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11764  0102A8  0100               	movlb	0	; () banked
 11765  0102AA  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11766  0102AC  0100               	movlb	0	; () banked
 11767  0102AE  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11768  0102B0  0100               	movlb	0	; () banked
 11769  0102B2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11770  0102B4  0100               	movlb	0	; () banked
 11771  0102B6  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11772  0102B8  0100               	movlb	0	; () banked
 11773  0102BA  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11774                           
 11775                           ; BSR set to: 0
 11776  0102BC  C0D6  F0D0         	movff	___flmul@grs,??___flmul
 11777  0102C0  C0D7  F0D1         	movff	___flmul@grs+1,??___flmul+1
 11778  0102C4  C0D8  F0D2         	movff	___flmul@grs+2,??___flmul+2
 11779  0102C8  C0D9  F0D3         	movff	___flmul@grs+3,??___flmul+3
 11780  0102CC  0E19               	movlw	25
 11781  0102CE  D006               	goto	u10340
 11782  0102D0                     u10345:
 11783  0102D0  0100               	movlb	0	; () banked
 11784  0102D2  90D8               	bcf	status,0,c
 11785  0102D4  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11786  0102D6  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11787  0102D8  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11788  0102DA  33D0               	rrcf	??___flmul& (0+255),f,b
 11789  0102DC                     u10340:
 11790  0102DC  2EE8               	decfsz	wreg,f,c
 11791  0102DE  D7F8               	goto	u10345
 11792  0102E0  0100               	movlb	0	; () banked
 11793  0102E2  51D0               	movf	??___flmul& (0+255),w,b
 11794  0102E4  0100               	movlb	0	; () banked
 11795  0102E6  27DB               	addwf	___flmul@prod& (0+255),f,b
 11796  0102E8  0100               	movlb	0	; () banked
 11797  0102EA  51D1               	movf	(??___flmul+1)& (0+255),w,b
 11798  0102EC  0100               	movlb	0	; () banked
 11799  0102EE  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11800  0102F0  0100               	movlb	0	; () banked
 11801  0102F2  51D2               	movf	(??___flmul+2)& (0+255),w,b
 11802  0102F4  0100               	movlb	0	; () banked
 11803  0102F6  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11804  0102F8  0100               	movlb	0	; () banked
 11805  0102FA  51D3               	movf	(??___flmul+3)& (0+255),w,b
 11806  0102FC  0100               	movlb	0	; () banked
 11807  0102FE  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11808                           
 11809                           ; BSR set to: 0
 11810  010300  C0D8  F0D9         	movff	___flmul@grs+2,___flmul@grs+3
 11811  010304  C0D7  F0D8         	movff	___flmul@grs+1,___flmul@grs+2
 11812  010308  C0D6  F0D7         	movff	___flmul@grs,___flmul@grs+1
 11813  01030C  0100               	movlb	0	; () banked
 11814  01030E  6BD6               	clrf	___flmul@grs& (0+255),b
 11815                           
 11816                           ; BSR set to: 0
 11817  010310  0100               	movlb	0	; () banked
 11818  010312  51D5               	movf	___flmul@aexp& (0+255),w,b
 11819  010314  C0DA  F0D0         	movff	___flmul@bexp,??___flmul
 11820  010318  0100               	movlb	0	; () banked
 11821  01031A  6BD1               	clrf	(??___flmul+1)& (0+255),b
 11822  01031C  0100               	movlb	0	; () banked
 11823  01031E  27D0               	addwf	??___flmul& (0+255),f,b
 11824  010320  0E00               	movlw	0
 11825  010322  23D1               	addwfc	(??___flmul+1)& (0+255),f,b
 11826  010324  0E82               	movlw	130
 11827  010326  0100               	movlb	0	; () banked
 11828  010328  25D0               	addwf	??___flmul& (0+255),w,b
 11829  01032A  0100               	movlb	0	; () banked
 11830  01032C  6FDF               	movwf	___flmul@temp& (0+255),b
 11831  01032E  0EFF               	movlw	255
 11832  010330  0100               	movlb	0	; () banked
 11833  010332  21D1               	addwfc	(??___flmul+1)& (0+255),w,b
 11834  010334  0100               	movlb	0	; () banked
 11835  010336  6FE0               	movwf	(___flmul@temp+1)& (0+255),b
 11836  010338  D015               	goto	l2982
 11837  01033A                     
 11838                           ; BSR set to: 0
 11839                           
 11840                           ; BSR set to: 0
 11841  01033A  0100               	movlb	0	; () banked
 11842  01033C  90D8               	bcf	status,0,c
 11843  01033E  37DB               	rlcf	___flmul@prod& (0+255),f,b
 11844  010340  37DC               	rlcf	(___flmul@prod+1)& (0+255),f,b
 11845  010342  37DD               	rlcf	(___flmul@prod+2)& (0+255),f,b
 11846  010344  37DE               	rlcf	(___flmul@prod+3)& (0+255),f,b
 11847                           
 11848                           ; BSR set to: 0
 11849  010346  0100               	movlb	0	; () banked
 11850  010348  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11851  01034A  D002               	goto	l2984
 11852                           
 11853                           ; BSR set to: 0
 11854  01034C  0100               	movlb	0	; () banked
 11855  01034E  81DB               	bsf	___flmul@prod& (0+255),0,b
 11856  010350                     l2984:
 11857                           
 11858                           ; BSR set to: 0
 11859  010350  0100               	movlb	0	; () banked
 11860  010352  90D8               	bcf	status,0,c
 11861  010354  37D6               	rlcf	___flmul@grs& (0+255),f,b
 11862  010356  37D7               	rlcf	(___flmul@grs+1)& (0+255),f,b
 11863  010358  37D8               	rlcf	(___flmul@grs+2)& (0+255),f,b
 11864  01035A  37D9               	rlcf	(___flmul@grs+3)& (0+255),f,b
 11865  01035C  0100               	movlb	0	; () banked
 11866  01035E  07DF               	decf	___flmul@temp& (0+255),f,b
 11867  010360  A0D8               	btfss	status,0,c
 11868  010362  07E0               	decf	(___flmul@temp+1)& (0+255),f,b
 11869  010364                     l2982:
 11870                           
 11871                           ; BSR set to: 0
 11872                           
 11873                           ; BSR set to: 0
 11874  010364  0100               	movlb	0	; () banked
 11875  010366  AFDD               	btfss	(___flmul@prod+2)& (0+255),7,b
 11876  010368  D7E8               	goto	l2983
 11877                           
 11878                           ; BSR set to: 0
 11879                           
 11880                           ; BSR set to: 0
 11881  01036A  0E00               	movlw	0
 11882  01036C  0100               	movlb	0	; () banked
 11883  01036E  6FD5               	movwf	___flmul@aexp& (0+255),b
 11884                           
 11885                           ; BSR set to: 0
 11886  010370  0100               	movlb	0	; () banked
 11887  010372  AFD9               	btfss	(___flmul@grs+3)& (0+255),7,b
 11888  010374  D024               	goto	l2989
 11889                           
 11890                           ; BSR set to: 0
 11891  010376  0EFF               	movlw	255
 11892  010378  0100               	movlb	0	; () banked
 11893  01037A  15D6               	andwf	___flmul@grs& (0+255),w,b
 11894  01037C  0100               	movlb	0	; () banked
 11895  01037E  6FD0               	movwf	??___flmul& (0+255),b
 11896  010380  0EFF               	movlw	255
 11897  010382  0100               	movlb	0	; () banked
 11898  010384  15D7               	andwf	(___flmul@grs+1)& (0+255),w,b
 11899  010386  0100               	movlb	0	; () banked
 11900  010388  6FD1               	movwf	(??___flmul+1)& (0+255),b
 11901  01038A  0EFF               	movlw	255
 11902  01038C  0100               	movlb	0	; () banked
 11903  01038E  15D8               	andwf	(___flmul@grs+2)& (0+255),w,b
 11904  010390  0100               	movlb	0	; () banked
 11905  010392  6FD2               	movwf	(??___flmul+2)& (0+255),b
 11906  010394  0E7F               	movlw	127
 11907  010396  0100               	movlb	0	; () banked
 11908  010398  15D9               	andwf	(___flmul@grs+3)& (0+255),w,b
 11909  01039A  0100               	movlb	0	; () banked
 11910  01039C  6FD3               	movwf	(??___flmul+3)& (0+255),b
 11911  01039E  0100               	movlb	0	; () banked
 11912  0103A0  51D0               	movf	??___flmul& (0+255),w,b
 11913  0103A2  0100               	movlb	0	; () banked
 11914  0103A4  11D1               	iorwf	(??___flmul+1)& (0+255),w,b
 11915  0103A6  0100               	movlb	0	; () banked
 11916  0103A8  11D2               	iorwf	(??___flmul+2)& (0+255),w,b
 11917  0103AA  0100               	movlb	0	; () banked
 11918  0103AC  11D3               	iorwf	(??___flmul+3)& (0+255),w,b
 11919  0103AE  A4D8               	btfss	status,2,c
 11920  0103B0  D003               	goto	u10390
 11921                           
 11922                           ; BSR set to: 0
 11923                           
 11924                           ; BSR set to: 0
 11925  0103B2  0100               	movlb	0	; () banked
 11926  0103B4  A1DB               	btfss	___flmul@prod& (0+255),0,b
 11927  0103B6  D003               	goto	l2989
 11928  0103B8                     u10390:
 11929                           
 11930                           ; BSR set to: 0
 11931  0103B8  0E01               	movlw	1
 11932  0103BA  0100               	movlb	0	; () banked
 11933  0103BC  6FD5               	movwf	___flmul@aexp& (0+255),b
 11934  0103BE                     l2989:
 11935                           
 11936                           ; BSR set to: 0
 11937                           
 11938                           ; BSR set to: 0
 11939                           
 11940                           ; BSR set to: 0
 11941  0103BE  0100               	movlb	0	; () banked
 11942  0103C0  51D5               	movf	___flmul@aexp& (0+255),w,b
 11943  0103C2  0100               	movlb	0	; () banked
 11944  0103C4  B4D8               	btfsc	status,2,c
 11945  0103C6  D023               	goto	l2991
 11946                           
 11947                           ; BSR set to: 0
 11948  0103C8  0E01               	movlw	1
 11949  0103CA  0100               	movlb	0	; () banked
 11950  0103CC  27DB               	addwf	___flmul@prod& (0+255),f,b
 11951  0103CE  0E00               	movlw	0
 11952  0103D0  23DC               	addwfc	(___flmul@prod+1)& (0+255),f,b
 11953  0103D2  23DD               	addwfc	(___flmul@prod+2)& (0+255),f,b
 11954  0103D4  23DE               	addwfc	(___flmul@prod+3)& (0+255),f,b
 11955                           
 11956                           ; BSR set to: 0
 11957  0103D6  0100               	movlb	0	; () banked
 11958  0103D8  A1DE               	btfss	(___flmul@prod+3)& (0+255),0,b
 11959  0103DA  D019               	goto	l2991
 11960                           
 11961                           ; BSR set to: 0
 11962  0103DC  C0DB  F0D0         	movff	___flmul@prod,??___flmul
 11963  0103E0  C0DC  F0D1         	movff	___flmul@prod+1,??___flmul+1
 11964  0103E4  C0DD  F0D2         	movff	___flmul@prod+2,??___flmul+2
 11965  0103E8  C0DE  F0D3         	movff	___flmul@prod+3,??___flmul+3
 11966  0103EC  0100               	movlb	0	; () banked
 11967  0103EE  35D3               	rlcf	(??___flmul+3)& (0+255),w,b
 11968  0103F0  33D3               	rrcf	(??___flmul+3)& (0+255),f,b
 11969  0103F2  33D2               	rrcf	(??___flmul+2)& (0+255),f,b
 11970  0103F4  33D1               	rrcf	(??___flmul+1)& (0+255),f,b
 11971  0103F6  33D0               	rrcf	??___flmul& (0+255),f,b
 11972  0103F8  C0D0  F0DB         	movff	??___flmul,___flmul@prod
 11973  0103FC  C0D1  F0DC         	movff	??___flmul+1,___flmul@prod+1
 11974  010400  C0D2  F0DD         	movff	??___flmul+2,___flmul@prod+2
 11975  010404  C0D3  F0DE         	movff	??___flmul+3,___flmul@prod+3
 11976                           
 11977                           ; BSR set to: 0
 11978  010408  0100               	movlb	0	; () banked
 11979  01040A  4BDF               	infsnz	___flmul@temp& (0+255),f,b
 11980  01040C  2BE0               	incf	(___flmul@temp+1)& (0+255),f,b
 11981  01040E                     l2991:
 11982                           
 11983                           ; BSR set to: 0
 11984                           
 11985                           ; BSR set to: 0
 11986                           
 11987                           ; BSR set to: 0
 11988  01040E  0100               	movlb	0	; () banked
 11989  010410  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 11990  010412  D010               	goto	l2992
 11991  010414  0100               	movlb	0	; () banked
 11992  010416  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 11993  010418  E104               	bnz	u10420
 11994  01041A  0100               	movlb	0	; () banked
 11995  01041C  29DF               	incf	___flmul@temp& (0+255),w,b
 11996  01041E  A0D8               	btfss	status,0,c
 11997  010420  D009               	goto	l2992
 11998  010422                     u10420:
 11999                           
 12000                           ; BSR set to: 0
 12001  010422  0E00               	movlw	0
 12002  010424  0100               	movlb	0	; () banked
 12003  010426  6FDB               	movwf	___flmul@prod& (0+255),b
 12004  010428  0E00               	movlw	0
 12005  01042A  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12006  01042C  0E80               	movlw	128
 12007  01042E  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12008  010430  0E7F               	movlw	127
 12009  010432  D02B               	goto	L5
 12010  010434                     l2992:
 12011                           
 12012                           ; BSR set to: 0
 12013                           
 12014                           ; BSR set to: 0
 12015  010434  0100               	movlb	0	; () banked
 12016  010436  BFE0               	btfsc	(___flmul@temp+1)& (0+255),7,b
 12017  010438  D007               	goto	u10430
 12018  01043A  0100               	movlb	0	; () banked
 12019  01043C  51E0               	movf	(___flmul@temp+1)& (0+255),w,b
 12020  01043E  E111               	bnz	l2994
 12021  010440  0100               	movlb	0	; () banked
 12022  010442  05DF               	decf	___flmul@temp& (0+255),w,b
 12023  010444  B0D8               	btfsc	status,0,c
 12024  010446  D00D               	goto	l2994
 12025  010448                     u10430:
 12026                           
 12027                           ; BSR set to: 0
 12028  010448  0E00               	movlw	0
 12029  01044A  0100               	movlb	0	; () banked
 12030  01044C  6FDB               	movwf	___flmul@prod& (0+255),b
 12031  01044E  0E00               	movlw	0
 12032  010450  6FDC               	movwf	(___flmul@prod+1)& (0+255),b
 12033  010452  0E00               	movlw	0
 12034  010454  6FDD               	movwf	(___flmul@prod+2)& (0+255),b
 12035  010456  0E00               	movlw	0
 12036  010458  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12037  01045A  0E00               	movlw	0
 12038  01045C  0100               	movlb	0	; () banked
 12039  01045E  6FD4               	movwf	___flmul@sign& (0+255),b
 12040  010460  D015               	goto	l2995
 12041  010462                     l2994:
 12042                           
 12043                           ; BSR set to: 0
 12044  010462  C0DF  F0DA         	movff	___flmul@temp,___flmul@bexp
 12045                           
 12046                           ; BSR set to: 0
 12047  010466  0EFF               	movlw	255
 12048  010468  0100               	movlb	0	; () banked
 12049  01046A  17DB               	andwf	___flmul@prod& (0+255),f,b
 12050  01046C  0EFF               	movlw	255
 12051  01046E  17DC               	andwf	(___flmul@prod+1)& (0+255),f,b
 12052  010470  0E7F               	movlw	127
 12053  010472  17DD               	andwf	(___flmul@prod+2)& (0+255),f,b
 12054  010474  0E00               	movlw	0
 12055  010476  17DE               	andwf	(___flmul@prod+3)& (0+255),f,b
 12056                           
 12057                           ; BSR set to: 0
 12058  010478  0100               	movlb	0	; () banked
 12059  01047A  A1DA               	btfss	___flmul@bexp& (0+255),0,b
 12060  01047C  D002               	goto	l2996
 12061                           
 12062                           ; BSR set to: 0
 12063  01047E  0100               	movlb	0	; () banked
 12064  010480  8FDD               	bsf	(___flmul@prod+2)& (0+255),7,b
 12065  010482                     l2996:
 12066                           
 12067                           ; BSR set to: 0
 12068                           
 12069                           ; BSR set to: 0
 12070  010482  0100               	movlb	0	; () banked
 12071  010484  90D8               	bcf	status,0,c
 12072  010486  31DA               	rrcf	___flmul@bexp& (0+255),w,b
 12073  010488  0100               	movlb	0	; () banked
 12074  01048A                     L5:
 12075  01048A  6FDE               	movwf	(___flmul@prod+3)& (0+255),b
 12076  01048C                     l2995:
 12077                           
 12078                           ; BSR set to: 0
 12079                           
 12080                           ; BSR set to: 0
 12081                           
 12082                           ; BSR set to: 0
 12083  01048C  0100               	movlb	0	; () banked
 12084  01048E  51D4               	movf	___flmul@sign& (0+255),w,b
 12085  010490  0100               	movlb	0	; () banked
 12086  010492  13DE               	iorwf	(___flmul@prod+3)& (0+255),f,b
 12087                           
 12088                           ; BSR set to: 0
 12089  010494  C0DB  F0C8         	movff	___flmul@prod,?___flmul
 12090  010498  C0DC  F0C9         	movff	___flmul@prod+1,?___flmul+1
 12091  01049C  C0DD  F0CA         	movff	___flmul@prod+2,?___flmul+2
 12092  0104A0  C0DE  F0CB         	movff	___flmul@prod+3,?___flmul+3
 12093  0104A4  0012               	return	
 12094  0104A6                     __end_of___flmul:
 12095                           	opt stack 0
 12096                           tblptru	equ	0xFF8
 12097                           tblptrh	equ	0xFF7
 12098                           tblptrl	equ	0xFF6
 12099                           tablat	equ	0xFF5
 12100                           prodh	equ	0xFF4
 12101                           prodl	equ	0xFF3
 12102                           intcon	equ	0xFF2
 12103                           postinc0	equ	0xFEE
 12104                           wreg	equ	0xFE8
 12105                           postdec1	equ	0xFE5
 12106                           fsr1h	equ	0xFE2
 12107                           fsr1l	equ	0xFE1
 12108                           indf2	equ	0xFDF
 12109                           postinc2	equ	0xFDE
 12110                           postdec2	equ	0xFDD
 12111                           fsr2h	equ	0xFDA
 12112                           fsr2l	equ	0xFD9
 12113                           status	equ	0xFD8
 12114                           
 12115 ;; *************** function ___fldiv *****************
 12116 ;; Defined at:
 12117 ;;		line 11 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\sprcdiv.c"
 12118 ;; Parameters:    Size  Location     Type
 12119 ;;  b               4    0[BANK0 ] unsigned char 
 12120 ;;  a               4    4[BANK0 ] unsigned char 
 12121 ;; Auto vars:     Size  Location     Type
 12122 ;;  grs             4   19[BANK0 ] unsigned long 
 12123 ;;  rem             4   13[BANK0 ] unsigned long 
 12124 ;;  new_exp         2   17[BANK0 ] int 
 12125 ;;  aexp            1   24[BANK0 ] unsigned char 
 12126 ;;  bexp            1   23[BANK0 ] unsigned char 
 12127 ;;  sign            1   12[BANK0 ] unsigned char 
 12128 ;; Return value:  Size  Location     Type
 12129 ;;                  4    0[BANK0 ] unsigned char 
 12130 ;; Registers used:
 12131 ;;		wreg, status,2, status,0
 12132 ;; Tracked objects:
 12133 ;;		On entry : 0/0
 12134 ;;		On exit  : 0/0
 12135 ;;		Unchanged: 0/0
 12136 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12137 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12138 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12139 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12140 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12141 ;;Total ram usage:       25 bytes
 12142 ;; Hardware stack levels used:    1
 12143 ;; Hardware stack levels required when called:    7
 12144 ;; This function calls:
 12145 ;;		Nothing
 12146 ;; This function is called by:
 12147 ;;		_ADC_Voltage
 12148 ;;		_findClosestWall
 12149 ;;		_mode1
 12150 ;; This function uses a non-reentrant model
 12151 ;;
 12152                           
 12153                           	psect	text48
 12154  01105A                     __ptext48:
 12155                           	opt stack 0
 12156  01105A                     ___fldiv:
 12157                           	opt stack 21
 12158                           
 12159                           ; BSR set to: 0
 12160                           ;incstack = 0
 12161  01105A  0100               	movlb	0	; () banked
 12162  01105C  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12163  01105E  0B80               	andlw	128
 12164  011060  0100               	movlb	0	; () banked
 12165  011062  6FC6               	movwf	___fldiv@sign& (0+255),b
 12166  011064  0100               	movlb	0	; () banked
 12167  011066  51BD               	movf	(___fldiv@b+3)& (0+255),w,b
 12168  011068  25BD               	addwf	(___fldiv@b+3)& (0+255),w,b
 12169  01106A  0100               	movlb	0	; () banked
 12170  01106C  6FD1               	movwf	___fldiv@bexp& (0+255),b
 12171                           
 12172                           ; BSR set to: 0
 12173  01106E  0100               	movlb	0	; () banked
 12174  011070  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12175  011072  D002               	goto	l2936
 12176                           
 12177                           ; BSR set to: 0
 12178  011074  0100               	movlb	0	; () banked
 12179  011076  81D1               	bsf	___fldiv@bexp& (0+255),0,b
 12180  011078                     l2936:
 12181                           
 12182                           ; BSR set to: 0
 12183                           
 12184                           ; BSR set to: 0
 12185  011078  0100               	movlb	0	; () banked
 12186  01107A  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12187  01107C  0100               	movlb	0	; () banked
 12188  01107E  B4D8               	btfsc	status,2,c
 12189  011080  D012               	goto	l2937
 12190                           
 12191                           ; BSR set to: 0
 12192  011082  0100               	movlb	0	; () banked
 12193  011084  29D1               	incf	___fldiv@bexp& (0+255),w,b
 12194  011086  A4D8               	btfss	status,2,c
 12195  011088  D009               	goto	l2938
 12196                           
 12197                           ; BSR set to: 0
 12198  01108A  0E00               	movlw	0
 12199  01108C  0100               	movlb	0	; () banked
 12200  01108E  6FBA               	movwf	___fldiv@b& (0+255),b
 12201  011090  0E00               	movlw	0
 12202  011092  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12203  011094  0E00               	movlw	0
 12204  011096  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12205  011098  0E00               	movlw	0
 12206  01109A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12207  01109C                     l2938:
 12208                           
 12209                           ; BSR set to: 0
 12210                           
 12211                           ; BSR set to: 0
 12212  01109C  0100               	movlb	0	; () banked
 12213  01109E  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12214                           
 12215                           ; BSR set to: 0
 12216  0110A0  0E00               	movlw	0
 12217  0110A2  0100               	movlb	0	; () banked
 12218  0110A4  D008               	goto	L6
 12219  0110A6                     l2937:
 12220                           
 12221                           ; BSR set to: 0
 12222                           
 12223                           ; BSR set to: 0
 12224  0110A6  0E00               	movlw	0
 12225  0110A8  0100               	movlb	0	; () banked
 12226  0110AA  6FBA               	movwf	___fldiv@b& (0+255),b
 12227  0110AC  0E00               	movlw	0
 12228  0110AE  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12229  0110B0  0E00               	movlw	0
 12230  0110B2  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12231  0110B4  0E00               	movlw	0
 12232  0110B6                     L6:
 12233  0110B6  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12234                           
 12235                           ; BSR set to: 0
 12236                           
 12237                           ; BSR set to: 0
 12238  0110B8  0100               	movlb	0	; () banked
 12239  0110BA  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12240  0110BC  0B80               	andlw	128
 12241  0110BE  0100               	movlb	0	; () banked
 12242  0110C0  1BC6               	xorwf	___fldiv@sign& (0+255),f,b
 12243                           
 12244                           ; BSR set to: 0
 12245  0110C2  0100               	movlb	0	; () banked
 12246  0110C4  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12247  0110C6  25C1               	addwf	(___fldiv@a+3)& (0+255),w,b
 12248  0110C8  0100               	movlb	0	; () banked
 12249  0110CA  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12250                           
 12251                           ; BSR set to: 0
 12252  0110CC  0100               	movlb	0	; () banked
 12253  0110CE  AFC0               	btfss	(___fldiv@a+2)& (0+255),7,b
 12254  0110D0  D002               	goto	l2940
 12255                           
 12256                           ; BSR set to: 0
 12257  0110D2  0100               	movlb	0	; () banked
 12258  0110D4  81D2               	bsf	___fldiv@aexp& (0+255),0,b
 12259  0110D6                     l2940:
 12260                           
 12261                           ; BSR set to: 0
 12262                           
 12263                           ; BSR set to: 0
 12264  0110D6  0100               	movlb	0	; () banked
 12265  0110D8  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12266  0110DA  0100               	movlb	0	; () banked
 12267  0110DC  B4D8               	btfsc	status,2,c
 12268  0110DE  D012               	goto	l2941
 12269                           
 12270                           ; BSR set to: 0
 12271  0110E0  0100               	movlb	0	; () banked
 12272  0110E2  29D2               	incf	___fldiv@aexp& (0+255),w,b
 12273  0110E4  A4D8               	btfss	status,2,c
 12274  0110E6  D009               	goto	l2942
 12275                           
 12276                           ; BSR set to: 0
 12277  0110E8  0E00               	movlw	0
 12278  0110EA  0100               	movlb	0	; () banked
 12279  0110EC  6FBE               	movwf	___fldiv@a& (0+255),b
 12280  0110EE  0E00               	movlw	0
 12281  0110F0  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12282  0110F2  0E00               	movlw	0
 12283  0110F4  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12284  0110F6  0E00               	movlw	0
 12285  0110F8  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12286  0110FA                     l2942:
 12287                           
 12288                           ; BSR set to: 0
 12289                           
 12290                           ; BSR set to: 0
 12291  0110FA  0100               	movlb	0	; () banked
 12292  0110FC  8FC0               	bsf	(___fldiv@a+2)& (0+255),7,b
 12293                           
 12294                           ; BSR set to: 0
 12295  0110FE  0E00               	movlw	0
 12296  011100  0100               	movlb	0	; () banked
 12297  011102  D008               	goto	L7
 12298  011104                     l2941:
 12299                           
 12300                           ; BSR set to: 0
 12301                           
 12302                           ; BSR set to: 0
 12303  011104  0E00               	movlw	0
 12304  011106  0100               	movlb	0	; () banked
 12305  011108  6FBE               	movwf	___fldiv@a& (0+255),b
 12306  01110A  0E00               	movlw	0
 12307  01110C  6FBF               	movwf	(___fldiv@a+1)& (0+255),b
 12308  01110E  0E00               	movlw	0
 12309  011110  6FC0               	movwf	(___fldiv@a+2)& (0+255),b
 12310  011112  0E00               	movlw	0
 12311  011114                     L7:
 12312  011114  6FC1               	movwf	(___fldiv@a+3)& (0+255),b
 12313                           
 12314                           ; BSR set to: 0
 12315                           
 12316                           ; BSR set to: 0
 12317  011116  0100               	movlb	0	; () banked
 12318  011118  51BE               	movf	___fldiv@a& (0+255),w,b
 12319  01111A  0100               	movlb	0	; () banked
 12320  01111C  11BF               	iorwf	(___fldiv@a+1)& (0+255),w,b
 12321  01111E  0100               	movlb	0	; () banked
 12322  011120  11C0               	iorwf	(___fldiv@a+2)& (0+255),w,b
 12323  011122  0100               	movlb	0	; () banked
 12324  011124  11C1               	iorwf	(___fldiv@a+3)& (0+255),w,b
 12325  011126  A4D8               	btfss	status,2,c
 12326  011128  D017               	goto	l2944
 12327                           
 12328                           ; BSR set to: 0
 12329  01112A  0E00               	movlw	0
 12330  01112C  0100               	movlb	0	; () banked
 12331  01112E  6FBA               	movwf	___fldiv@b& (0+255),b
 12332  011130  0E00               	movlw	0
 12333  011132  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12334  011134  0E00               	movlw	0
 12335  011136  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12336  011138  0E00               	movlw	0
 12337  01113A  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12338                           
 12339                           ; BSR set to: 0
 12340  01113C  0100               	movlb	0	; () banked
 12341  01113E  0E80               	movlw	128
 12342  011140  13BC               	iorwf	(___fldiv@b+2)& (0+255),f,b
 12343  011142  0E7F               	movlw	127
 12344  011144  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12345                           
 12346                           ; BSR set to: 0
 12347  011146  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12348  01114A  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12349  01114E  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12350  011152  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12351                           
 12352                           ; BSR set to: 0
 12353  011156  0012               	return	
 12354  011158                     l2944:
 12355                           
 12356                           ; BSR set to: 0
 12357                           
 12358                           ; BSR set to: 0
 12359  011158  0100               	movlb	0	; () banked
 12360  01115A  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12361  01115C  0100               	movlb	0	; () banked
 12362  01115E  A4D8               	btfss	status,2,c
 12363  011160  D012               	goto	l2946
 12364                           
 12365                           ; BSR set to: 0
 12366  011162  0E00               	movlw	0
 12367  011164  0100               	movlb	0	; () banked
 12368  011166  6FBA               	movwf	___fldiv@b& (0+255),b
 12369  011168  0E00               	movlw	0
 12370  01116A  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12371  01116C  0E00               	movlw	0
 12372  01116E  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12373  011170  0E00               	movlw	0
 12374  011172  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12375                           
 12376                           ; BSR set to: 0
 12377  011174  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12378  011178  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12379  01117C  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12380  011180  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12381                           
 12382                           ; BSR set to: 0
 12383  011184  0012               	return	
 12384  011186                     l2946:
 12385                           
 12386                           ; BSR set to: 0
 12387                           
 12388                           ; BSR set to: 0
 12389  011186  0100               	movlb	0	; () banked
 12390  011188  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12391  01118A  0100               	movlb	0	; () banked
 12392  01118C  6FC2               	movwf	??___fldiv& (0+255),b
 12393  01118E  6BC3               	clrf	(??___fldiv+1)& (0+255),b
 12394  011190  0100               	movlb	0	; () banked
 12395  011192  1FC2               	comf	??___fldiv& (0+255),f,b
 12396  011194  1FC3               	comf	(??___fldiv+1)& (0+255),f,b
 12397  011196  4BC2               	infsnz	??___fldiv& (0+255),f,b
 12398  011198  2BC3               	incf	(??___fldiv+1)& (0+255),f,b
 12399  01119A  0100               	movlb	0	; () banked
 12400  01119C  51D1               	movf	___fldiv@bexp& (0+255),w,b
 12401  01119E  0100               	movlb	0	; () banked
 12402  0111A0  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12403  0111A2  6BC5               	clrf	(??___fldiv+3)& (0+255),b
 12404  0111A4  0100               	movlb	0	; () banked
 12405  0111A6  51C2               	movf	??___fldiv& (0+255),w,b
 12406  0111A8  0100               	movlb	0	; () banked
 12407  0111AA  27C4               	addwf	(??___fldiv+2)& (0+255),f,b
 12408  0111AC  0100               	movlb	0	; () banked
 12409  0111AE  51C3               	movf	(??___fldiv+1)& (0+255),w,b
 12410  0111B0  0100               	movlb	0	; () banked
 12411  0111B2  23C5               	addwfc	(??___fldiv+3)& (0+255),f,b
 12412  0111B4  0E7F               	movlw	127
 12413  0111B6  0100               	movlb	0	; () banked
 12414  0111B8  25C4               	addwf	(??___fldiv+2)& (0+255),w,b
 12415  0111BA  0100               	movlb	0	; () banked
 12416  0111BC  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12417  0111BE  0E00               	movlw	0
 12418  0111C0  0100               	movlb	0	; () banked
 12419  0111C2  21C5               	addwfc	(??___fldiv+3)& (0+255),w,b
 12420  0111C4  0100               	movlb	0	; () banked
 12421  0111C6  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12422                           
 12423                           ; BSR set to: 0
 12424  0111C8  C0BA  F0C7         	movff	___fldiv@b,___fldiv@rem
 12425  0111CC  C0BB  F0C8         	movff	___fldiv@b+1,___fldiv@rem+1
 12426  0111D0  C0BC  F0C9         	movff	___fldiv@b+2,___fldiv@rem+2
 12427  0111D4  C0BD  F0CA         	movff	___fldiv@b+3,___fldiv@rem+3
 12428                           
 12429                           ; BSR set to: 0
 12430  0111D8  0E00               	movlw	0
 12431  0111DA  0100               	movlb	0	; () banked
 12432  0111DC  6FBA               	movwf	___fldiv@b& (0+255),b
 12433  0111DE  0E00               	movlw	0
 12434  0111E0  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12435  0111E2  0E00               	movlw	0
 12436  0111E4  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12437  0111E6  0E00               	movlw	0
 12438  0111E8  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12439                           
 12440                           ; BSR set to: 0
 12441  0111EA  0E00               	movlw	0
 12442  0111EC  0100               	movlb	0	; () banked
 12443  0111EE  6FCD               	movwf	___fldiv@grs& (0+255),b
 12444  0111F0  0E00               	movlw	0
 12445  0111F2  6FCE               	movwf	(___fldiv@grs+1)& (0+255),b
 12446  0111F4  0E00               	movlw	0
 12447  0111F6  6FCF               	movwf	(___fldiv@grs+2)& (0+255),b
 12448  0111F8  0E00               	movlw	0
 12449  0111FA  6FD0               	movwf	(___fldiv@grs+3)& (0+255),b
 12450                           
 12451                           ; BSR set to: 0
 12452  0111FC  0E00               	movlw	0
 12453  0111FE  0100               	movlb	0	; () banked
 12454  011200  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12455  011202  D042               	goto	l2947
 12456  011204                     
 12457                           ; BSR set to: 0
 12458                           
 12459                           ; BSR set to: 0
 12460  011204  0100               	movlb	0	; () banked
 12461  011206  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12462  011208  0100               	movlb	0	; () banked
 12463  01120A  B4D8               	btfsc	status,2,c
 12464  01120C  D017               	goto	l2949
 12465                           
 12466                           ; BSR set to: 0
 12467  01120E  0100               	movlb	0	; () banked
 12468  011210  90D8               	bcf	status,0,c
 12469  011212  37C7               	rlcf	___fldiv@rem& (0+255),f,b
 12470  011214  37C8               	rlcf	(___fldiv@rem+1)& (0+255),f,b
 12471  011216  37C9               	rlcf	(___fldiv@rem+2)& (0+255),f,b
 12472  011218  37CA               	rlcf	(___fldiv@rem+3)& (0+255),f,b
 12473  01121A  0100               	movlb	0	; () banked
 12474  01121C  90D8               	bcf	status,0,c
 12475  01121E  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12476  011220  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12477  011222  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12478  011224  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12479                           
 12480                           ; BSR set to: 0
 12481  011226  0100               	movlb	0	; () banked
 12482  011228  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12483  01122A  D002               	goto	l2950
 12484                           
 12485                           ; BSR set to: 0
 12486  01122C  0100               	movlb	0	; () banked
 12487  01122E  81BA               	bsf	___fldiv@b& (0+255),0,b
 12488  011230                     l2950:
 12489                           
 12490                           ; BSR set to: 0
 12491  011230  0100               	movlb	0	; () banked
 12492  011232  90D8               	bcf	status,0,c
 12493  011234  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12494  011236  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12495  011238  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12496  01123A  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12497  01123C                     l2949:
 12498                           
 12499                           ; BSR set to: 0
 12500                           
 12501                           ; BSR set to: 0
 12502  01123C  0100               	movlb	0	; () banked
 12503  01123E  51BE               	movf	___fldiv@a& (0+255),w,b
 12504  011240  0100               	movlb	0	; () banked
 12505  011242  5DC7               	subwf	___fldiv@rem& (0+255),w,b
 12506  011244  0100               	movlb	0	; () banked
 12507  011246  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12508  011248  0100               	movlb	0	; () banked
 12509  01124A  59C8               	subwfb	(___fldiv@rem+1)& (0+255),w,b
 12510  01124C  0100               	movlb	0	; () banked
 12511  01124E  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12512  011250  0100               	movlb	0	; () banked
 12513  011252  59C9               	subwfb	(___fldiv@rem+2)& (0+255),w,b
 12514  011254  0100               	movlb	0	; () banked
 12515  011256  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12516  011258  0100               	movlb	0	; () banked
 12517  01125A  59CA               	subwfb	(___fldiv@rem+3)& (0+255),w,b
 12518  01125C  A0D8               	btfss	status,0,c
 12519  01125E  D012               	goto	l2951
 12520                           
 12521                           ; BSR set to: 0
 12522  011260  0100               	movlb	0	; () banked
 12523  011262  8DD0               	bsf	(___fldiv@grs+3)& (0+255),6,b
 12524                           
 12525                           ; BSR set to: 0
 12526  011264  0100               	movlb	0	; () banked
 12527  011266  51BE               	movf	___fldiv@a& (0+255),w,b
 12528  011268  0100               	movlb	0	; () banked
 12529  01126A  5FC7               	subwf	___fldiv@rem& (0+255),f,b
 12530  01126C  0100               	movlb	0	; () banked
 12531  01126E  51BF               	movf	(___fldiv@a+1)& (0+255),w,b
 12532  011270  0100               	movlb	0	; () banked
 12533  011272  5BC8               	subwfb	(___fldiv@rem+1)& (0+255),f,b
 12534  011274  0100               	movlb	0	; () banked
 12535  011276  51C0               	movf	(___fldiv@a+2)& (0+255),w,b
 12536  011278  0100               	movlb	0	; () banked
 12537  01127A  5BC9               	subwfb	(___fldiv@rem+2)& (0+255),f,b
 12538  01127C  0100               	movlb	0	; () banked
 12539  01127E  51C1               	movf	(___fldiv@a+3)& (0+255),w,b
 12540  011280  0100               	movlb	0	; () banked
 12541  011282  5BCA               	subwfb	(___fldiv@rem+3)& (0+255),f,b
 12542  011284                     l2951:
 12543                           
 12544                           ; BSR set to: 0
 12545                           
 12546                           ; BSR set to: 0
 12547  011284  0100               	movlb	0	; () banked
 12548  011286  2BD2               	incf	___fldiv@aexp& (0+255),f,b
 12549  011288                     l2947:
 12550                           
 12551                           ; BSR set to: 0
 12552  011288  0E19               	movlw	25
 12553  01128A  0100               	movlb	0	; () banked
 12554  01128C  65D2               	cpfsgt	___fldiv@aexp& (0+255),b
 12555  01128E  D7BA               	goto	l2948
 12556                           
 12557                           ; BSR set to: 0
 12558                           
 12559                           ; BSR set to: 0
 12560  011290  0100               	movlb	0	; () banked
 12561  011292  51C7               	movf	___fldiv@rem& (0+255),w,b
 12562  011294  0100               	movlb	0	; () banked
 12563  011296  11C8               	iorwf	(___fldiv@rem+1)& (0+255),w,b
 12564  011298  0100               	movlb	0	; () banked
 12565  01129A  11C9               	iorwf	(___fldiv@rem+2)& (0+255),w,b
 12566  01129C  0100               	movlb	0	; () banked
 12567  01129E  11CA               	iorwf	(___fldiv@rem+3)& (0+255),w,b
 12568  0112A0  B4D8               	btfsc	status,2,c
 12569  0112A2  D018               	goto	l2954
 12570                           
 12571                           ; BSR set to: 0
 12572  0112A4  0100               	movlb	0	; () banked
 12573  0112A6  81CD               	bsf	___fldiv@grs& (0+255),0,b
 12574                           
 12575                           ; BSR set to: 0
 12576  0112A8  D015               	goto	l2954
 12577  0112AA                     
 12578                           ; BSR set to: 0
 12579                           
 12580                           ; BSR set to: 0
 12581  0112AA  0100               	movlb	0	; () banked
 12582  0112AC  90D8               	bcf	status,0,c
 12583  0112AE  37BA               	rlcf	___fldiv@b& (0+255),f,b
 12584  0112B0  37BB               	rlcf	(___fldiv@b+1)& (0+255),f,b
 12585  0112B2  37BC               	rlcf	(___fldiv@b+2)& (0+255),f,b
 12586  0112B4  37BD               	rlcf	(___fldiv@b+3)& (0+255),f,b
 12587                           
 12588                           ; BSR set to: 0
 12589  0112B6  0100               	movlb	0	; () banked
 12590  0112B8  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12591  0112BA  D002               	goto	l2956
 12592                           
 12593                           ; BSR set to: 0
 12594  0112BC  0100               	movlb	0	; () banked
 12595  0112BE  81BA               	bsf	___fldiv@b& (0+255),0,b
 12596  0112C0                     l2956:
 12597                           
 12598                           ; BSR set to: 0
 12599  0112C0  0100               	movlb	0	; () banked
 12600  0112C2  90D8               	bcf	status,0,c
 12601  0112C4  37CD               	rlcf	___fldiv@grs& (0+255),f,b
 12602  0112C6  37CE               	rlcf	(___fldiv@grs+1)& (0+255),f,b
 12603  0112C8  37CF               	rlcf	(___fldiv@grs+2)& (0+255),f,b
 12604  0112CA  37D0               	rlcf	(___fldiv@grs+3)& (0+255),f,b
 12605  0112CC  0100               	movlb	0	; () banked
 12606  0112CE  07CB               	decf	___fldiv@new_exp& (0+255),f,b
 12607  0112D0  A0D8               	btfss	status,0,c
 12608  0112D2  07CC               	decf	(___fldiv@new_exp+1)& (0+255),f,b
 12609  0112D4                     l2954:
 12610                           
 12611                           ; BSR set to: 0
 12612                           
 12613                           ; BSR set to: 0
 12614  0112D4  0100               	movlb	0	; () banked
 12615  0112D6  AFBC               	btfss	(___fldiv@b+2)& (0+255),7,b
 12616  0112D8  D7E8               	goto	l2955
 12617                           
 12618                           ; BSR set to: 0
 12619                           
 12620                           ; BSR set to: 0
 12621  0112DA  0E00               	movlw	0
 12622  0112DC  0100               	movlb	0	; () banked
 12623  0112DE  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12624                           
 12625                           ; BSR set to: 0
 12626  0112E0  0100               	movlb	0	; () banked
 12627  0112E2  AFD0               	btfss	(___fldiv@grs+3)& (0+255),7,b
 12628  0112E4  D024               	goto	l2961
 12629                           
 12630                           ; BSR set to: 0
 12631  0112E6  0EFF               	movlw	255
 12632  0112E8  0100               	movlb	0	; () banked
 12633  0112EA  15CD               	andwf	___fldiv@grs& (0+255),w,b
 12634  0112EC  0100               	movlb	0	; () banked
 12635  0112EE  6FC2               	movwf	??___fldiv& (0+255),b
 12636  0112F0  0EFF               	movlw	255
 12637  0112F2  0100               	movlb	0	; () banked
 12638  0112F4  15CE               	andwf	(___fldiv@grs+1)& (0+255),w,b
 12639  0112F6  0100               	movlb	0	; () banked
 12640  0112F8  6FC3               	movwf	(??___fldiv+1)& (0+255),b
 12641  0112FA  0EFF               	movlw	255
 12642  0112FC  0100               	movlb	0	; () banked
 12643  0112FE  15CF               	andwf	(___fldiv@grs+2)& (0+255),w,b
 12644  011300  0100               	movlb	0	; () banked
 12645  011302  6FC4               	movwf	(??___fldiv+2)& (0+255),b
 12646  011304  0E7F               	movlw	127
 12647  011306  0100               	movlb	0	; () banked
 12648  011308  15D0               	andwf	(___fldiv@grs+3)& (0+255),w,b
 12649  01130A  0100               	movlb	0	; () banked
 12650  01130C  6FC5               	movwf	(??___fldiv+3)& (0+255),b
 12651  01130E  0100               	movlb	0	; () banked
 12652  011310  51C2               	movf	??___fldiv& (0+255),w,b
 12653  011312  0100               	movlb	0	; () banked
 12654  011314  11C3               	iorwf	(??___fldiv+1)& (0+255),w,b
 12655  011316  0100               	movlb	0	; () banked
 12656  011318  11C4               	iorwf	(??___fldiv+2)& (0+255),w,b
 12657  01131A  0100               	movlb	0	; () banked
 12658  01131C  11C5               	iorwf	(??___fldiv+3)& (0+255),w,b
 12659  01131E  A4D8               	btfss	status,2,c
 12660  011320  D003               	goto	u10200
 12661                           
 12662                           ; BSR set to: 0
 12663                           
 12664                           ; BSR set to: 0
 12665  011322  0100               	movlb	0	; () banked
 12666  011324  A1BA               	btfss	___fldiv@b& (0+255),0,b
 12667  011326  D003               	goto	l2961
 12668  011328                     u10200:
 12669                           
 12670                           ; BSR set to: 0
 12671  011328  0E01               	movlw	1
 12672  01132A  0100               	movlb	0	; () banked
 12673  01132C  6FD2               	movwf	___fldiv@aexp& (0+255),b
 12674  01132E                     l2961:
 12675                           
 12676                           ; BSR set to: 0
 12677                           
 12678                           ; BSR set to: 0
 12679                           
 12680                           ; BSR set to: 0
 12681  01132E  0100               	movlb	0	; () banked
 12682  011330  51D2               	movf	___fldiv@aexp& (0+255),w,b
 12683  011332  0100               	movlb	0	; () banked
 12684  011334  B4D8               	btfsc	status,2,c
 12685  011336  D023               	goto	l2963
 12686                           
 12687                           ; BSR set to: 0
 12688  011338  0E01               	movlw	1
 12689  01133A  0100               	movlb	0	; () banked
 12690  01133C  27BA               	addwf	___fldiv@b& (0+255),f,b
 12691  01133E  0E00               	movlw	0
 12692  011340  23BB               	addwfc	(___fldiv@b+1)& (0+255),f,b
 12693  011342  23BC               	addwfc	(___fldiv@b+2)& (0+255),f,b
 12694  011344  23BD               	addwfc	(___fldiv@b+3)& (0+255),f,b
 12695                           
 12696                           ; BSR set to: 0
 12697  011346  0100               	movlb	0	; () banked
 12698  011348  A1BD               	btfss	(___fldiv@b+3)& (0+255),0,b
 12699  01134A  D019               	goto	l2963
 12700                           
 12701                           ; BSR set to: 0
 12702  01134C  C0BA  F0C2         	movff	___fldiv@b,??___fldiv
 12703  011350  C0BB  F0C3         	movff	___fldiv@b+1,??___fldiv+1
 12704  011354  C0BC  F0C4         	movff	___fldiv@b+2,??___fldiv+2
 12705  011358  C0BD  F0C5         	movff	___fldiv@b+3,??___fldiv+3
 12706  01135C  0100               	movlb	0	; () banked
 12707  01135E  35C5               	rlcf	(??___fldiv+3)& (0+255),w,b
 12708  011360  33C5               	rrcf	(??___fldiv+3)& (0+255),f,b
 12709  011362  33C4               	rrcf	(??___fldiv+2)& (0+255),f,b
 12710  011364  33C3               	rrcf	(??___fldiv+1)& (0+255),f,b
 12711  011366  33C2               	rrcf	??___fldiv& (0+255),f,b
 12712  011368  C0C2  F0BA         	movff	??___fldiv,___fldiv@b
 12713  01136C  C0C3  F0BB         	movff	??___fldiv+1,___fldiv@b+1
 12714  011370  C0C4  F0BC         	movff	??___fldiv+2,___fldiv@b+2
 12715  011374  C0C5  F0BD         	movff	??___fldiv+3,___fldiv@b+3
 12716                           
 12717                           ; BSR set to: 0
 12718  011378  0100               	movlb	0	; () banked
 12719  01137A  4BCB               	infsnz	___fldiv@new_exp& (0+255),f,b
 12720  01137C  2BCC               	incf	(___fldiv@new_exp+1)& (0+255),f,b
 12721  01137E                     l2963:
 12722                           
 12723                           ; BSR set to: 0
 12724                           
 12725                           ; BSR set to: 0
 12726                           
 12727                           ; BSR set to: 0
 12728  01137E  0100               	movlb	0	; () banked
 12729  011380  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12730  011382  D014               	goto	l2964
 12731  011384  0100               	movlb	0	; () banked
 12732  011386  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12733  011388  E104               	bnz	u10230
 12734  01138A  0100               	movlb	0	; () banked
 12735  01138C  29CB               	incf	___fldiv@new_exp& (0+255),w,b
 12736  01138E  A0D8               	btfss	status,0,c
 12737  011390  D00D               	goto	l2964
 12738  011392                     u10230:
 12739                           
 12740                           ; BSR set to: 0
 12741  011392  0E00               	movlw	0
 12742  011394  0100               	movlb	0	; () banked
 12743  011396  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12744  011398  69CB               	setf	___fldiv@new_exp& (0+255),b
 12745  01139A  0E00               	movlw	0
 12746  01139C  0100               	movlb	0	; () banked
 12747  01139E  6FBA               	movwf	___fldiv@b& (0+255),b
 12748  0113A0  0E00               	movlw	0
 12749  0113A2  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12750  0113A4  0E00               	movlw	0
 12751  0113A6  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12752  0113A8  0E00               	movlw	0
 12753  0113AA  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12754  0113AC                     l2964:
 12755                           
 12756                           ; BSR set to: 0
 12757                           
 12758                           ; BSR set to: 0
 12759  0113AC  0100               	movlb	0	; () banked
 12760  0113AE  BFCC               	btfsc	(___fldiv@new_exp+1)& (0+255),7,b
 12761  0113B0  D007               	goto	u10240
 12762  0113B2  0100               	movlb	0	; () banked
 12763  0113B4  51CC               	movf	(___fldiv@new_exp+1)& (0+255),w,b
 12764  0113B6  E115               	bnz	l13677
 12765  0113B8  0100               	movlb	0	; () banked
 12766  0113BA  05CB               	decf	___fldiv@new_exp& (0+255),w,b
 12767  0113BC  B0D8               	btfsc	status,0,c
 12768  0113BE  D011               	goto	l2965
 12769  0113C0                     u10240:
 12770                           
 12771                           ; BSR set to: 0
 12772  0113C0  0E00               	movlw	0
 12773  0113C2  0100               	movlb	0	; () banked
 12774  0113C4  6FCC               	movwf	(___fldiv@new_exp+1)& (0+255),b
 12775  0113C6  0E00               	movlw	0
 12776  0113C8  6FCB               	movwf	___fldiv@new_exp& (0+255),b
 12777  0113CA  0E00               	movlw	0
 12778  0113CC  0100               	movlb	0	; () banked
 12779  0113CE  6FBA               	movwf	___fldiv@b& (0+255),b
 12780  0113D0  0E00               	movlw	0
 12781  0113D2  6FBB               	movwf	(___fldiv@b+1)& (0+255),b
 12782  0113D4  0E00               	movlw	0
 12783  0113D6  6FBC               	movwf	(___fldiv@b+2)& (0+255),b
 12784  0113D8  0E00               	movlw	0
 12785  0113DA  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12786  0113DC  0E00               	movlw	0
 12787  0113DE  0100               	movlb	0	; () banked
 12788  0113E0  6FC6               	movwf	___fldiv@sign& (0+255),b
 12789  0113E2                     l2965:
 12790  0113E2                     l13677:
 12791                           
 12792                           ; BSR set to: 0
 12793  0113E2  C0CB  F0D1         	movff	___fldiv@new_exp,___fldiv@bexp
 12794                           
 12795                           ; BSR set to: 0
 12796  0113E6  0100               	movlb	0	; () banked
 12797  0113E8  A1D1               	btfss	___fldiv@bexp& (0+255),0,b
 12798  0113EA  D003               	goto	l2966
 12799                           
 12800                           ; BSR set to: 0
 12801  0113EC  0100               	movlb	0	; () banked
 12802  0113EE  8FBC               	bsf	(___fldiv@b+2)& (0+255),7,b
 12803  0113F0  D002               	goto	l2967
 12804  0113F2                     l2966:
 12805                           
 12806                           ; BSR set to: 0
 12807                           
 12808                           ; BSR set to: 0
 12809  0113F2  0100               	movlb	0	; () banked
 12810  0113F4  9FBC               	bcf	(___fldiv@b+2)& (0+255),7,b
 12811  0113F6                     l2967:
 12812                           
 12813                           ; BSR set to: 0
 12814                           
 12815                           ; BSR set to: 0
 12816  0113F6  0100               	movlb	0	; () banked
 12817  0113F8  90D8               	bcf	status,0,c
 12818  0113FA  31D1               	rrcf	___fldiv@bexp& (0+255),w,b
 12819  0113FC  0100               	movlb	0	; () banked
 12820  0113FE  6FBD               	movwf	(___fldiv@b+3)& (0+255),b
 12821                           
 12822                           ; BSR set to: 0
 12823  011400  0100               	movlb	0	; () banked
 12824  011402  51C6               	movf	___fldiv@sign& (0+255),w,b
 12825  011404  0100               	movlb	0	; () banked
 12826  011406  13BD               	iorwf	(___fldiv@b+3)& (0+255),f,b
 12827                           
 12828                           ; BSR set to: 0
 12829  011408  C0BA  F0BA         	movff	___fldiv@b,?___fldiv
 12830  01140C  C0BB  F0BB         	movff	___fldiv@b+1,?___fldiv+1
 12831  011410  C0BC  F0BC         	movff	___fldiv@b+2,?___fldiv+2
 12832  011414  C0BD  F0BD         	movff	___fldiv@b+3,?___fldiv+3
 12833  011418  0012               	return	
 12834  01141A                     __end_of___fldiv:
 12835                           	opt stack 0
 12836                           tblptru	equ	0xFF8
 12837                           tblptrh	equ	0xFF7
 12838                           tblptrl	equ	0xFF6
 12839                           tablat	equ	0xFF5
 12840                           prodh	equ	0xFF4
 12841                           prodl	equ	0xFF3
 12842                           intcon	equ	0xFF2
 12843                           postinc0	equ	0xFEE
 12844                           wreg	equ	0xFE8
 12845                           postdec1	equ	0xFE5
 12846                           fsr1h	equ	0xFE2
 12847                           fsr1l	equ	0xFE1
 12848                           indf2	equ	0xFDF
 12849                           postinc2	equ	0xFDE
 12850                           postdec2	equ	0xFDD
 12851                           fsr2h	equ	0xFDA
 12852                           fsr2l	equ	0xFD9
 12853                           status	equ	0xFD8
 12854                           
 12855 ;; *************** function _init *****************
 12856 ;; Defined at:
 12857 ;;		line 66 in file "main.c"
 12858 ;; Parameters:    Size  Location     Type
 12859 ;;		None
 12860 ;; Auto vars:     Size  Location     Type
 12861 ;;		None
 12862 ;; Return value:  Size  Location     Type
 12863 ;;                  1    wreg      void 
 12864 ;; Registers used:
 12865 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12866 ;; Tracked objects:
 12867 ;;		On entry : 0/0
 12868 ;;		On exit  : 0/0
 12869 ;;		Unchanged: 0/0
 12870 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12871 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12872 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12873 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12874 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12875 ;;Total ram usage:        0 bytes
 12876 ;; Hardware stack levels used:    1
 12877 ;; Hardware stack levels required when called:   17
 12878 ;; This function calls:
 12879 ;;		_ADC_Init
 12880 ;;		_ADC_Start
 12881 ;;		_Console_Init
 12882 ;;		_HMI_Init
 12883 ;;		_ISR_Enable
 12884 ;;		_LCD_Init
 12885 ;;		_MXK_BlockSwitchTo
 12886 ;;		_MXK_Dequeue
 12887 ;;		_MXK_Init
 12888 ;;		_MXK_Release
 12889 ;;		_Motor_Init
 12890 ;;		_delay_ms
 12891 ;;		_eusart_init
 12892 ;;		_irobot_init
 12893 ;;		_irobot_init_song_0
 12894 ;;		_irobot_led_power_on
 12895 ;; This function is called by:
 12896 ;;		_main
 12897 ;; This function uses a non-reentrant model
 12898 ;;
 12899                           
 12900                           	psect	text49
 12901  0147AA                     __ptext49:
 12902                           	opt stack 0
 12903  0147AA                     _init:
 12904                           	opt stack 13
 12905                           
 12906                           ;main.c: 68: MXK_Init();
 12907                           
 12908                           ; BSR set to: 0
 12909                           ;incstack = 0
 12910  0147AA  EC74  F096         	call	_MXK_Init	;wreg free
 12911                           
 12912                           ;main.c: 71: ISR_Enable();
 12913  0147AE  EC63  F0B3         	call	_ISR_Enable	;wreg free
 12914                           
 12915                           ;main.c: 74: if (MXK_BlockSwitchTo(eMXK_HMI)) {
 12916  0147B2  0E01               	movlw	1
 12917  0147B4  ECCA  F0AF         	call	_MXK_BlockSwitchTo
 12918  0147B8  0900               	iorlw	0
 12919  0147BA  B4D8               	btfsc	status,2,c
 12920  0147BC  D00C               	goto	l2303
 12921                           
 12922                           ;main.c: 75: Console_Init();
 12923  0147BE  EC33  F0A7         	call	_Console_Init	;wreg free
 12924                           
 12925                           ;main.c: 76: HMI_Init();
 12926  0147C2  EC74  F090         	call	_HMI_Init	;wreg free
 12927                           
 12928                           ;main.c: 77: LCD_Init();
 12929  0147C6  EC34  F097         	call	_LCD_Init	;wreg free
 12930                           
 12931                           ;main.c: 78: if (MXK_Release())
 12932  0147CA  EC59  F0B2         	call	_MXK_Release	;wreg free
 12933  0147CE  0900               	iorlw	0
 12934  0147D0  A4D8               	btfss	status,2,c
 12935                           
 12936                           ;main.c: 79: MXK_Dequeue();
 12937  0147D2  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
 12938  0147D6                     l2303:
 12939                           
 12940                           ;main.c: 80: }
 12941                           ;main.c: 83: if (MXK_BlockSwitchTo(eMXK_Motor)) {
 12942  0147D6  0E08               	movlw	8
 12943  0147D8  ECCA  F0AF         	call	_MXK_BlockSwitchTo
 12944  0147DC  0900               	iorlw	0
 12945  0147DE  B4D8               	btfsc	status,2,c
 12946  0147E0  D013               	goto	l2305
 12947                           
 12948                           ;main.c: 84: Motor_Init(&Stepper, 0b1000);
 12949  0147E2  0EAF               	movlw	low _Stepper
 12950  0147E4  0100               	movlb	0	; () banked
 12951  0147E6  6FE7               	movwf	Motor_Init@pMotor& (0+255),b
 12952  0147E8  0E00               	movlw	high _Stepper
 12953  0147EA  0100               	movlb	0	; () banked
 12954  0147EC  6FE8               	movwf	(Motor_Init@pMotor+1)& (0+255),b
 12955  0147EE  0E00               	movlw	0
 12956  0147F0  0100               	movlb	0	; () banked
 12957  0147F2  6FEA               	movwf	(Motor_Init@pAddress+1)& (0+255),b
 12958  0147F4  0E08               	movlw	8
 12959  0147F6  6FE9               	movwf	Motor_Init@pAddress& (0+255),b
 12960  0147F8  EC52  F09E         	call	_Motor_Init	;wreg free
 12961                           
 12962                           ;main.c: 85: if (MXK_Release())
 12963  0147FC  EC59  F0B2         	call	_MXK_Release	;wreg free
 12964  014800  0900               	iorlw	0
 12965  014802  A4D8               	btfss	status,2,c
 12966                           
 12967                           ;main.c: 86: MXK_Dequeue();
 12968  014804  ECAB  F0AF         	call	_MXK_Dequeue	;wreg free
 12969  014808                     l2305:
 12970                           
 12971                           ;main.c: 87: }
 12972                           ;main.c: 90: ADC_Init(&ADC_AN0, eADC_Ch0);
 12973  014808  0EB5               	movlw	low _ADC_AN0
 12974  01480A  0100               	movlb	0	; () banked
 12975  01480C  6FBE               	movwf	ADC_Init@pInput& (0+255),b
 12976  01480E  0E00               	movlw	high _ADC_AN0
 12977  014810  0100               	movlb	0	; () banked
 12978  014812  6FBF               	movwf	(ADC_Init@pInput+1)& (0+255),b
 12979  014814  0E00               	movlw	0
 12980  014816  0100               	movlb	0	; () banked
 12981  014818  6FC0               	movwf	ADC_Init@pChannel& (0+255),b
 12982  01481A  ECBF  F0A8         	call	_ADC_Init	;wreg free
 12983                           
 12984                           ;main.c: 91: float ADC_Voltage(ADCPtr plnput);
 12985                           ;main.c: 92: ADC_Start(&ADC_AN0);
 12986  01481E  0EB5               	movlw	low _ADC_AN0
 12987  014820  0100               	movlb	0	; () banked
 12988  014822  6FBC               	movwf	ADC_Start@pInput& (0+255),b
 12989  014824  0E00               	movlw	high _ADC_AN0
 12990  014826  0100               	movlb	0	; () banked
 12991  014828  6FBD               	movwf	(ADC_Start@pInput+1)& (0+255),b
 12992  01482A  ECBD  F0A7         	call	_ADC_Start	;wreg free
 12993                           
 12994                           ;main.c: 94: eusart_init();
 12995  01482E  ECE2  F0B1         	call	_eusart_init	;wreg free
 12996                           
 12997                           ;main.c: 95: irobot_init();
 12998  014832  EC23  F0B3         	call	_irobot_init	;wreg free
 12999                           
 13000                           ;main.c: 97: irobot_led_power_on(0xA);
 13001  014836  0E0A               	movlw	10
 13002  014838  EC4B  F0B2         	call	_irobot_led_power_on
 13003                           
 13004                           ;main.c: 98: irobot_init_song_0();
 13005  01483C  ECC3  F0B1         	call	_irobot_init_song_0	;wreg free
 13006                           
 13007                           ;main.c: 99: delay_ms(20);
 13008  014840  0E00               	movlw	0
 13009  014842  0100               	movlb	0	; () banked
 13010  014844  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 13011  014846  0E14               	movlw	20
 13012  014848  6FBA               	movwf	delay_ms@ms& (0+255),b
 13013  01484A  EC34  F0AB         	call	_delay_ms	;wreg free
 13014  01484E  0012               	return		;funcret
 13015  014850                     __end_of_init:
 13016                           	opt stack 0
 13017                           tblptru	equ	0xFF8
 13018                           tblptrh	equ	0xFF7
 13019                           tblptrl	equ	0xFF6
 13020                           tablat	equ	0xFF5
 13021                           prodh	equ	0xFF4
 13022                           prodl	equ	0xFF3
 13023                           intcon	equ	0xFF2
 13024                           postinc0	equ	0xFEE
 13025                           wreg	equ	0xFE8
 13026                           postdec1	equ	0xFE5
 13027                           fsr1h	equ	0xFE2
 13028                           fsr1l	equ	0xFE1
 13029                           indf2	equ	0xFDF
 13030                           postinc2	equ	0xFDE
 13031                           postdec2	equ	0xFDD
 13032                           fsr2h	equ	0xFDA
 13033                           fsr2l	equ	0xFD9
 13034                           status	equ	0xFD8
 13035                           
 13036 ;; *************** function _irobot_led_power_on *****************
 13037 ;; Defined at:
 13038 ;;		line 304 in file "Library/iRobotSerial.c"
 13039 ;; Parameters:    Size  Location     Type
 13040 ;;  powerOnColou    1    wreg     unsigned char 
 13041 ;; Auto vars:     Size  Location     Type
 13042 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
 13043 ;; Return value:  Size  Location     Type
 13044 ;;                  1    wreg      void 
 13045 ;; Registers used:
 13046 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13047 ;; Tracked objects:
 13048 ;;		On entry : 0/0
 13049 ;;		On exit  : 0/0
 13050 ;;		Unchanged: 0/0
 13051 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13052 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13053 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13054 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13055 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13056 ;;Total ram usage:        1 bytes
 13057 ;; Hardware stack levels used:    1
 13058 ;; Hardware stack levels required when called:    9
 13059 ;; This function calls:
 13060 ;;		_irobot_leds
 13061 ;; This function is called by:
 13062 ;;		_init
 13063 ;; This function uses a non-reentrant model
 13064 ;;
 13065                           
 13066                           	psect	text50
 13067  016496                     __ptext50:
 13068                           	opt stack 0
 13069  016496                     _irobot_led_power_on:
 13070                           	opt stack 20
 13071                           
 13072                           ;incstack = 0
 13073                           ;irobot_led_power_on@powerOnColour stored from wreg
 13074  016496  0100               	movlb	0	; () banked
 13075  016498  6FCE               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
 13076                           
 13077                           ;iRobotSerial.c: 305: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
 13078  01649A  0E00               	movlw	0
 13079  01649C  0100               	movlb	0	; () banked
 13080  01649E  6FCA               	movwf	irobot_leds@LEDBit& (0+255),b
 13081  0164A0  C0CE  F0CB         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
 13082  0164A4  0EFF               	movlw	255
 13083  0164A6  0100               	movlb	0	; () banked
 13084  0164A8  6FCC               	movwf	irobot_leds@powerLuminosity& (0+255),b
 13085  0164AA  0E00               	movlw	0
 13086  0164AC  ECF3  F0AC         	call	_irobot_leds
 13087  0164B0  0012               	return		;funcret
 13088  0164B2                     __end_of_irobot_led_power_on:
 13089                           	opt stack 0
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           postinc0	equ	0xFEE
 13098                           wreg	equ	0xFE8
 13099                           postdec1	equ	0xFE5
 13100                           fsr1h	equ	0xFE2
 13101                           fsr1l	equ	0xFE1
 13102                           indf2	equ	0xFDF
 13103                           postinc2	equ	0xFDE
 13104                           postdec2	equ	0xFDD
 13105                           fsr2h	equ	0xFDA
 13106                           fsr2l	equ	0xFD9
 13107                           status	equ	0xFD8
 13108                           
 13109 ;; *************** function _irobot_leds *****************
 13110 ;; Defined at:
 13111 ;;		line 239 in file "Library/iRobotSerial.c"
 13112 ;; Parameters:    Size  Location     Type
 13113 ;;  isScript        1    wreg     unsigned char 
 13114 ;;  LEDBit          1   16[BANK0 ] unsigned char 
 13115 ;;  powerColour     1   17[BANK0 ] unsigned char 
 13116 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
 13117 ;; Auto vars:     Size  Location     Type
 13118 ;;  isScript        1   19[BANK0 ] unsigned char 
 13119 ;; Return value:  Size  Location     Type
 13120 ;;                  1    wreg      void 
 13121 ;; Registers used:
 13122 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13123 ;; Tracked objects:
 13124 ;;		On entry : 0/0
 13125 ;;		On exit  : 0/0
 13126 ;;		Unchanged: 0/0
 13127 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13128 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13132 ;;Total ram usage:        4 bytes
 13133 ;; Hardware stack levels used:    1
 13134 ;; Hardware stack levels required when called:    8
 13135 ;; This function calls:
 13136 ;;		_eusart_putch
 13137 ;;		_load_iRScriptStack
 13138 ;; This function is called by:
 13139 ;;		_irobot_led_power_on
 13140 ;;		_irobot_led_power_off
 13141 ;; This function uses a non-reentrant model
 13142 ;;
 13143                           
 13144                           	psect	text51
 13145  0159E6                     __ptext51:
 13146                           	opt stack 0
 13147  0159E6                     _irobot_leds:
 13148                           	opt stack 20
 13149                           
 13150                           ;incstack = 0
 13151                           ;irobot_leds@isScript stored from wreg
 13152  0159E6  0100               	movlb	0	; () banked
 13153  0159E8  6FCD               	movwf	irobot_leds@isScript& (0+255),b
 13154                           
 13155                           ;iRobotSerial.c: 240: if (isScript){
 13156  0159EA  0100               	movlb	0	; () banked
 13157  0159EC  51CD               	movf	irobot_leds@isScript& (0+255),w,b
 13158  0159EE  0100               	movlb	0	; () banked
 13159  0159F0  B4D8               	btfsc	status,2,c
 13160  0159F2  D015               	goto	l2144
 13161                           
 13162                           ; BSR set to: 0
 13163                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
 13164                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
 13165  0159F4  0E00               	movlw	0
 13166  0159F6  0100               	movlb	0	; () banked
 13167  0159F8  6FBB               	movwf	(?_load_iRScriptStack+1)& (0+255),b
 13168  0159FA  0E8B               	movlw	139
 13169  0159FC  6FBA               	movwf	?_load_iRScriptStack& (0+255),b
 13170  0159FE  C0CA  F0BC         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
 13171  015A02  0100               	movlb	0	; () banked
 13172  015A04  6BBD               	clrf	(?_load_iRScriptStack+3)& (0+255),b
 13173  015A06  C0CB  F0BE         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
 13174  015A0A  0100               	movlb	0	; () banked
 13175  015A0C  6BBF               	clrf	(?_load_iRScriptStack+5)& (0+255),b
 13176  015A0E  C0CC  F0C0         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
 13177  015A12  0100               	movlb	0	; () banked
 13178  015A14  6BC1               	clrf	(?_load_iRScriptStack+7)& (0+255),b
 13179  015A16  0E04               	movlw	4
 13180  015A18  ECFF  F0AA         	call	_load_iRScriptStack
 13181                           
 13182                           ;iRobotSerial.c: 243: }
 13183  015A1C  0012               	return	
 13184  015A1E                     l2144:
 13185                           
 13186                           ;iRobotSerial.c: 244: else{
 13187                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
 13188  015A1E  0E8B               	movlw	139
 13189  015A20  EC2A  F0B3         	call	_eusart_putch
 13190                           
 13191                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
 13192  015A24  0100               	movlb	0	; () banked
 13193  015A26  51CA               	movf	irobot_leds@LEDBit& (0+255),w,b
 13194  015A28  EC2A  F0B3         	call	_eusart_putch
 13195                           
 13196                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
 13197  015A2C  0100               	movlb	0	; () banked
 13198  015A2E  51CB               	movf	irobot_leds@powerColour& (0+255),w,b
 13199  015A30  EC2A  F0B3         	call	_eusart_putch
 13200                           
 13201                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
 13202  015A34  0100               	movlb	0	; () banked
 13203  015A36  51CC               	movf	irobot_leds@powerLuminosity& (0+255),w,b
 13204  015A38  EC2A  F0B3         	call	_eusart_putch
 13205  015A3C  0012               	return	
 13206  015A3E                     __end_of_irobot_leds:
 13207                           	opt stack 0
 13208                           tblptru	equ	0xFF8
 13209                           tblptrh	equ	0xFF7
 13210                           tblptrl	equ	0xFF6
 13211                           tablat	equ	0xFF5
 13212                           prodh	equ	0xFF4
 13213                           prodl	equ	0xFF3
 13214                           intcon	equ	0xFF2
 13215                           postinc0	equ	0xFEE
 13216                           wreg	equ	0xFE8
 13217                           postdec1	equ	0xFE5
 13218                           fsr1h	equ	0xFE2
 13219                           fsr1l	equ	0xFE1
 13220                           indf2	equ	0xFDF
 13221                           postinc2	equ	0xFDE
 13222                           postdec2	equ	0xFDD
 13223                           fsr2h	equ	0xFDA
 13224                           fsr2l	equ	0xFD9
 13225                           status	equ	0xFD8
 13226                           
 13227 ;; *************** function _load_iRScriptStack *****************
 13228 ;; Defined at:
 13229 ;;		line 176 in file "Library/iRobotSerial.c"
 13230 ;; Parameters:    Size  Location     Type
 13231 ;;  bytesToLoad     1    wreg     unsigned char 
 13232 ;; Auto vars:     Size  Location     Type
 13233 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
 13234 ;;  i               1   15[BANK0 ] unsigned char 
 13235 ;;  loadByte        2   12[BANK0 ] PTR void [1]
 13236 ;;		 -> ?_load_iRScriptStack(1), 
 13237 ;; Return value:  Size  Location     Type
 13238 ;;                  1    wreg      void 
 13239 ;; Registers used:
 13240 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 13241 ;; Tracked objects:
 13242 ;;		On entry : 0/0
 13243 ;;		On exit  : 0/0
 13244 ;;		Unchanged: 0/0
 13245 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13246 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13247 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13248 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13249 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13250 ;;Total ram usage:       16 bytes
 13251 ;; Hardware stack levels used:    1
 13252 ;; Hardware stack levels required when called:    7
 13253 ;; This function calls:
 13254 ;;		Nothing
 13255 ;; This function is called by:
 13256 ;;		_irobot_move
 13257 ;;		_irobot_leds
 13258 ;;		_irobot_angle_wait
 13259 ;;		_irobot_distance_wait
 13260 ;; This function uses a non-reentrant model
 13261 ;;
 13262                           
 13263                           	psect	text52
 13264  0155FE                     __ptext52:
 13265                           	opt stack 0
 13266  0155FE                     _load_iRScriptStack:
 13267                           	opt stack 19
 13268                           
 13269                           ;incstack = 0
 13270                           ;load_iRScriptStack@bytesToLoad stored from wreg
 13271  0155FE  0100               	movlb	0	; () banked
 13272  015600  6FC8               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
 13273                           
 13274                           ;iRobotSerial.c: 177: va_list loadByte;
 13275                           ;iRobotSerial.c: 178: *loadByte = __va_start();
 13276  015602  0EBA               	movlw	low ?_load_iRScriptStack
 13277  015604  0100               	movlb	0	; () banked
 13278  015606  6FC6               	movwf	load_iRScriptStack@loadByte& (0+255),b
 13279  015608  0E00               	movlw	high ?_load_iRScriptStack
 13280  01560A  0100               	movlb	0	; () banked
 13281  01560C  6FC7               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
 13282                           
 13283                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++){
 13284  01560E  0E00               	movlw	0
 13285  015610  0100               	movlb	0	; () banked
 13286  015612  6FC9               	movwf	load_iRScriptStack@i& (0+255),b
 13287  015614  D01F               	goto	l2118
 13288  015616                     
 13289                           ; BSR set to: 0
 13290                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
 13291                           
 13292                           ; BSR set to: 0
 13293  015616  C0C6  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
 13294  01561A  C0C7  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
 13295  01561E  0100               	movlb	0	; () banked
 13296  015620  51C9               	movf	load_iRScriptStack@i& (0+255),w,b
 13297  015622  C037  F0C4         	movff	_iRScriptIndex,??_load_iRScriptStack
 13298  015626  0100               	movlb	0	; () banked
 13299  015628  6BC5               	clrf	(??_load_iRScriptStack+1)& (0+255),b
 13300  01562A  0100               	movlb	0	; () banked
 13301  01562C  27C4               	addwf	??_load_iRScriptStack& (0+255),f,b
 13302  01562E  0E00               	movlw	0
 13303  015630  23C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
 13304  015632  0E00               	movlw	low _iRScriptStack
 13305  015634  0100               	movlb	0	; () banked
 13306  015636  25C4               	addwf	??_load_iRScriptStack& (0+255),w,b
 13307  015638  6EE1               	movwf	fsr1l,c
 13308  01563A  0E04               	movlw	high _iRScriptStack
 13309  01563C  0100               	movlb	0	; () banked
 13310  01563E  21C5               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
 13311  015640  6EE2               	movwf	fsr1h,c
 13312  015642  CFDF FFE7          	movff	indf2,indf1
 13313                           
 13314                           ; BSR set to: 0
 13315  015646  0E02               	movlw	2
 13316  015648  0100               	movlb	0	; () banked
 13317  01564A  27C6               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
 13318  01564C  0E00               	movlw	0
 13319  01564E  23C7               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
 13320                           
 13321                           ; BSR set to: 0
 13322  015650  0100               	movlb	0	; () banked
 13323  015652  2BC9               	incf	load_iRScriptStack@i& (0+255),f,b
 13324  015654                     l2118:
 13325                           
 13326                           ; BSR set to: 0
 13327                           
 13328                           ; BSR set to: 0
 13329  015654  0100               	movlb	0	; () banked
 13330  015656  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13331  015658  0100               	movlb	0	; () banked
 13332  01565A  5DC9               	subwf	load_iRScriptStack@i& (0+255),w,b
 13333  01565C  A0D8               	btfss	status,0,c
 13334  01565E  D7DB               	goto	l2119
 13335                           
 13336                           ; BSR set to: 0
 13337                           ;iRobotSerial.c: 181: }
 13338                           ;iRobotSerial.c: 182: ;
 13339                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
 13340                           
 13341                           ; BSR set to: 0
 13342  015660  0100               	movlb	0	; () banked
 13343  015662  51C8               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
 13344  015664  2637               	addwf	_iRScriptIndex,f,c
 13345                           
 13346                           ; BSR set to: 0
 13347  015666  0012               	return		;funcret
 13348  015668                     __end_of_load_iRScriptStack:
 13349                           	opt stack 0
 13350                           tblptru	equ	0xFF8
 13351                           tblptrh	equ	0xFF7
 13352                           tblptrl	equ	0xFF6
 13353                           tablat	equ	0xFF5
 13354                           prodh	equ	0xFF4
 13355                           prodl	equ	0xFF3
 13356                           intcon	equ	0xFF2
 13357                           postinc0	equ	0xFEE
 13358                           wreg	equ	0xFE8
 13359                           indf1	equ	0xFE7
 13360                           postdec1	equ	0xFE5
 13361                           fsr1h	equ	0xFE2
 13362                           fsr1l	equ	0xFE1
 13363                           indf2	equ	0xFDF
 13364                           postinc2	equ	0xFDE
 13365                           postdec2	equ	0xFDD
 13366                           fsr2h	equ	0xFDA
 13367                           fsr2l	equ	0xFD9
 13368                           status	equ	0xFD8
 13369                           
 13370 ;; *************** function _irobot_init_song_0 *****************
 13371 ;; Defined at:
 13372 ;;		line 252 in file "Library/iRobotSerial.c"
 13373 ;; Parameters:    Size  Location     Type
 13374 ;;		None
 13375 ;; Auto vars:     Size  Location     Type
 13376 ;;		None
 13377 ;; Return value:  Size  Location     Type
 13378 ;;                  1    wreg      void 
 13379 ;; Registers used:
 13380 ;;		wreg, cstack
 13381 ;; Tracked objects:
 13382 ;;		On entry : 0/0
 13383 ;;		On exit  : 0/0
 13384 ;;		Unchanged: 0/0
 13385 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13386 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13387 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13388 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13389 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13390 ;;Total ram usage:        0 bytes
 13391 ;; Hardware stack levels used:    1
 13392 ;; Hardware stack levels required when called:    8
 13393 ;; This function calls:
 13394 ;;		_eusart_putch
 13395 ;; This function is called by:
 13396 ;;		_init
 13397 ;; This function uses a non-reentrant model
 13398 ;;
 13399                           
 13400                           	psect	text53
 13401  016386                     __ptext53:
 13402                           	opt stack 0
 13403  016386                     _irobot_init_song_0:
 13404                           	opt stack 21
 13405                           
 13406                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
 13407                           
 13408                           ; BSR set to: 0
 13409                           ;incstack = 0
 13410  016386  0E8C               	movlw	140
 13411  016388  EC2A  F0B3         	call	_eusart_putch
 13412                           
 13413                           ;iRobotSerial.c: 254: eusart_putch(0);
 13414  01638C  0E00               	movlw	0
 13415  01638E  EC2A  F0B3         	call	_eusart_putch
 13416                           
 13417                           ;iRobotSerial.c: 255: eusart_putch(1);
 13418  016392  0E01               	movlw	1
 13419  016394  EC2A  F0B3         	call	_eusart_putch
 13420                           
 13421                           ;iRobotSerial.c: 256: eusart_putch(60);
 13422  016398  0E3C               	movlw	60
 13423  01639A  EC2A  F0B3         	call	_eusart_putch
 13424                           
 13425                           ;iRobotSerial.c: 257: eusart_putch(4);
 13426  01639E  0E04               	movlw	4
 13427  0163A0  EC2A  F0B3         	call	_eusart_putch
 13428  0163A4  0012               	return		;funcret
 13429  0163A6                     __end_of_irobot_init_song_0:
 13430                           	opt stack 0
 13431                           tblptru	equ	0xFF8
 13432                           tblptrh	equ	0xFF7
 13433                           tblptrl	equ	0xFF6
 13434                           tablat	equ	0xFF5
 13435                           prodh	equ	0xFF4
 13436                           prodl	equ	0xFF3
 13437                           intcon	equ	0xFF2
 13438                           postinc0	equ	0xFEE
 13439                           wreg	equ	0xFE8
 13440                           indf1	equ	0xFE7
 13441                           postdec1	equ	0xFE5
 13442                           fsr1h	equ	0xFE2
 13443                           fsr1l	equ	0xFE1
 13444                           indf2	equ	0xFDF
 13445                           postinc2	equ	0xFDE
 13446                           postdec2	equ	0xFDD
 13447                           fsr2h	equ	0xFDA
 13448                           fsr2l	equ	0xFD9
 13449                           status	equ	0xFD8
 13450                           
 13451 ;; *************** function _irobot_init *****************
 13452 ;; Defined at:
 13453 ;;		line 198 in file "Library/iRobotSerial.c"
 13454 ;; Parameters:    Size  Location     Type
 13455 ;;		None
 13456 ;; Auto vars:     Size  Location     Type
 13457 ;;		None
 13458 ;; Return value:  Size  Location     Type
 13459 ;;                  1    wreg      void 
 13460 ;; Registers used:
 13461 ;;		wreg, cstack
 13462 ;; Tracked objects:
 13463 ;;		On entry : 0/0
 13464 ;;		On exit  : 0/0
 13465 ;;		Unchanged: 0/0
 13466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13469 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13470 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13471 ;;Total ram usage:        0 bytes
 13472 ;; Hardware stack levels used:    1
 13473 ;; Hardware stack levels required when called:    8
 13474 ;; This function calls:
 13475 ;;		_eusart_putch
 13476 ;; This function is called by:
 13477 ;;		_init
 13478 ;; This function uses a non-reentrant model
 13479 ;;
 13480                           
 13481                           	psect	text54
 13482  016646                     __ptext54:
 13483                           	opt stack 0
 13484  016646                     _irobot_init:
 13485                           	opt stack 21
 13486                           
 13487                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
 13488                           
 13489                           ;incstack = 0
 13490  016646  0E80               	movlw	128
 13491  016648  EC2A  F0B3         	call	_eusart_putch
 13492                           
 13493                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
 13494  01664C  0E84               	movlw	132
 13495  01664E  EC2A  F0B3         	call	_eusart_putch
 13496  016652  0012               	return		;funcret
 13497  016654                     __end_of_irobot_init:
 13498                           	opt stack 0
 13499                           tblptru	equ	0xFF8
 13500                           tblptrh	equ	0xFF7
 13501                           tblptrl	equ	0xFF6
 13502                           tablat	equ	0xFF5
 13503                           prodh	equ	0xFF4
 13504                           prodl	equ	0xFF3
 13505                           intcon	equ	0xFF2
 13506                           postinc0	equ	0xFEE
 13507                           wreg	equ	0xFE8
 13508                           indf1	equ	0xFE7
 13509                           postdec1	equ	0xFE5
 13510                           fsr1h	equ	0xFE2
 13511                           fsr1l	equ	0xFE1
 13512                           indf2	equ	0xFDF
 13513                           postinc2	equ	0xFDE
 13514                           postdec2	equ	0xFDD
 13515                           fsr2h	equ	0xFDA
 13516                           fsr2l	equ	0xFD9
 13517                           status	equ	0xFD8
 13518                           
 13519 ;; *************** function _eusart_putch *****************
 13520 ;; Defined at:
 13521 ;;		line 120 in file "Library/iRobotSerial.c"
 13522 ;; Parameters:    Size  Location     Type
 13523 ;;  eusartSendCh    1    wreg     unsigned char 
 13524 ;; Auto vars:     Size  Location     Type
 13525 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
 13526 ;; Return value:  Size  Location     Type
 13527 ;;                  1    wreg      void 
 13528 ;; Registers used:
 13529 ;;		wreg
 13530 ;; Tracked objects:
 13531 ;;		On entry : 0/0
 13532 ;;		On exit  : 0/0
 13533 ;;		Unchanged: 0/0
 13534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13535 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13536 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13538 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13539 ;;Total ram usage:        1 bytes
 13540 ;; Hardware stack levels used:    1
 13541 ;; Hardware stack levels required when called:    7
 13542 ;; This function calls:
 13543 ;;		Nothing
 13544 ;; This function is called by:
 13545 ;;		_irobot_query_and_update
 13546 ;;		_irobot_init
 13547 ;;		_irobot_move
 13548 ;;		_irobot_leds
 13549 ;;		_irobot_init_song_0
 13550 ;;		_irobot_song_play
 13551 ;;		_irobot_script_play
 13552 ;; This function uses a non-reentrant model
 13553 ;;
 13554                           
 13555                           	psect	text55
 13556  016654                     __ptext55:
 13557                           	opt stack 0
 13558  016654                     _eusart_putch:
 13559                           	opt stack 20
 13560                           
 13561                           ;incstack = 0
 13562                           ;eusart_putch@eusartSendChar stored from wreg
 13563  016654  0100               	movlb	0	; () banked
 13564  016656  6FBA               	movwf	eusart_putch@eusartSendChar& (0+255),b
 13565  016658                     
 13566                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
 13567  016658  A2AD               	btfss	4013,1,c	;volatile
 13568  01665A  D7FE               	goto	l12649
 13569                           
 13570                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
 13571  01665C  C0BA  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
 13572  016660  0012               	return		;funcret
 13573  016662                     __end_of_eusart_putch:
 13574                           	opt stack 0
 13575                           tblptru	equ	0xFF8
 13576                           tblptrh	equ	0xFF7
 13577                           tblptrl	equ	0xFF6
 13578                           tablat	equ	0xFF5
 13579                           prodh	equ	0xFF4
 13580                           prodl	equ	0xFF3
 13581                           intcon	equ	0xFF2
 13582                           postinc0	equ	0xFEE
 13583                           wreg	equ	0xFE8
 13584                           indf1	equ	0xFE7
 13585                           postdec1	equ	0xFE5
 13586                           fsr1h	equ	0xFE2
 13587                           fsr1l	equ	0xFE1
 13588                           indf2	equ	0xFDF
 13589                           postinc2	equ	0xFDE
 13590                           postdec2	equ	0xFDD
 13591                           fsr2h	equ	0xFDA
 13592                           fsr2l	equ	0xFD9
 13593                           status	equ	0xFD8
 13594                           
 13595 ;; *************** function _eusart_init *****************
 13596 ;; Defined at:
 13597 ;;		line 103 in file "Library/iRobotSerial.c"
 13598 ;; Parameters:    Size  Location     Type
 13599 ;;		None
 13600 ;; Auto vars:     Size  Location     Type
 13601 ;;		None
 13602 ;; Return value:  Size  Location     Type
 13603 ;;                  1    wreg      void 
 13604 ;; Registers used:
 13605 ;;		wreg, status,2
 13606 ;; Tracked objects:
 13607 ;;		On entry : 0/0
 13608 ;;		On exit  : 0/0
 13609 ;;		Unchanged: 0/0
 13610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13611 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13612 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13613 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13614 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13615 ;;Total ram usage:        0 bytes
 13616 ;; Hardware stack levels used:    1
 13617 ;; Hardware stack levels required when called:    7
 13618 ;; This function calls:
 13619 ;;		Nothing
 13620 ;; This function is called by:
 13621 ;;		_init
 13622 ;; This function uses a non-reentrant model
 13623 ;;
 13624                           
 13625                           	psect	text56
 13626  0163C4                     __ptext56:
 13627                           	opt stack 0
 13628  0163C4                     _eusart_init:
 13629                           	opt stack 22
 13630                           
 13631                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
 13632                           
 13633                           ;incstack = 0
 13634  0163C4  9C94               	bcf	3988,6,c	;volatile
 13635                           
 13636                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
 13637  0163C6  8E94               	bsf	3988,7,c	;volatile
 13638                           
 13639                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
 13640  0163C8  0E24               	movlw	36
 13641  0163CA  6EAD               	movwf	4013,c	;volatile
 13642                           
 13643                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
 13644  0163CC  0E98               	movlw	152
 13645  0163CE  6EAC               	movwf	4012,c	;volatile
 13646                           
 13647                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
 13648  0163D0  9A7E               	bcf	3966,5,c	;volatile
 13649                           
 13650                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
 13651  0163D2  987E               	bcf	3966,4,c	;volatile
 13652                           
 13653                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
 13654  0163D4  927E               	bcf	3966,1,c	;volatile
 13655                           
 13656                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
 13657  0163D6  907E               	bcf	3966,0,c	;volatile
 13658                           
 13659                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
 13660  0163D8  84AD               	bsf	4013,2,c	;volatile
 13661                           
 13662                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
 13663  0163DA  967E               	bcf	3966,3,c	;volatile
 13664                           
 13665                           ;iRobotSerial.c: 117: SPBRG1 = 51;
 13666  0163DC  0E33               	movlw	51
 13667  0163DE  6EB0               	movwf	4016,c	;volatile
 13668  0163E0  0012               	return		;funcret
 13669  0163E2                     __end_of_eusart_init:
 13670                           	opt stack 0
 13671                           tblptru	equ	0xFF8
 13672                           tblptrh	equ	0xFF7
 13673                           tblptrl	equ	0xFF6
 13674                           tablat	equ	0xFF5
 13675                           prodh	equ	0xFF4
 13676                           prodl	equ	0xFF3
 13677                           intcon	equ	0xFF2
 13678                           postinc0	equ	0xFEE
 13679                           wreg	equ	0xFE8
 13680                           indf1	equ	0xFE7
 13681                           postdec1	equ	0xFE5
 13682                           fsr1h	equ	0xFE2
 13683                           fsr1l	equ	0xFE1
 13684                           indf2	equ	0xFDF
 13685                           postinc2	equ	0xFDE
 13686                           postdec2	equ	0xFDD
 13687                           fsr2h	equ	0xFDA
 13688                           fsr2l	equ	0xFD9
 13689                           status	equ	0xFD8
 13690                           
 13691 ;; *************** function _Motor_Init *****************
 13692 ;; Defined at:
 13693 ;;		line 26 in file "Library/Motor.c"
 13694 ;; Parameters:    Size  Location     Type
 13695 ;;  pMotor          2   45[BANK0 ] PTR struct Motor
 13696 ;;		 -> Stepper(6), 
 13697 ;;  pAddress        2   47[BANK0 ] unsigned short 
 13698 ;; Auto vars:     Size  Location     Type
 13699 ;;		None
 13700 ;; Return value:  Size  Location     Type
 13701 ;;                  1    wreg      void 
 13702 ;; Registers used:
 13703 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13704 ;; Tracked objects:
 13705 ;;		On entry : 0/0
 13706 ;;		On exit  : 0/0
 13707 ;;		Unchanged: 0/0
 13708 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13709 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13710 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13711 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13712 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13713 ;;Total ram usage:        4 bytes
 13714 ;; Hardware stack levels used:    1
 13715 ;; Hardware stack levels required when called:   12
 13716 ;; This function calls:
 13717 ;;		_Port_SetPin
 13718 ;;		_Port_SetPinType
 13719 ;;		_Timer0_Init
 13720 ;; This function is called by:
 13721 ;;		_init
 13722 ;; This function uses a non-reentrant model
 13723 ;;
 13724                           
 13725                           	psect	text57
 13726  013CA4                     __ptext57:
 13727                           	opt stack 0
 13728  013CA4                     _Motor_Init:
 13729                           	opt stack 17
 13730                           
 13731                           ;Motor.c: 28: pMotor->mDelta = 0;
 13732                           
 13733                           ;incstack = 0
 13734  013CA4  C0E7  FFD9         	movff	Motor_Init@pMotor,fsr2l
 13735  013CA8  C0E8  FFDA         	movff	Motor_Init@pMotor+1,fsr2h
 13736  013CAC  0E00               	movlw	0
 13737  013CAE  6EDE               	movwf	postinc2,c
 13738  013CB0  0E00               	movlw	0
 13739  013CB2  6EDD               	movwf	postdec2,c
 13740                           
 13741                           ;Motor.c: 29: pMotor->mFrequency = 0;
 13742  013CB4  0100               	movlb	0	; () banked
 13743  013CB6  EE20 F002          	lfsr	2,2
 13744  013CBA  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13745  013CBC  26D9               	addwf	fsr2l,f,c
 13746  013CBE  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13747  013CC0  22DA               	addwfc	fsr2h,f,c
 13748  013CC2  0E00               	movlw	0
 13749  013CC4  6EDE               	movwf	postinc2,c
 13750  013CC6  0E00               	movlw	0
 13751  013CC8  6EDD               	movwf	postdec2,c
 13752                           
 13753                           ; BSR set to: 0
 13754                           ;Motor.c: 30: pMotor->mAddress = pAddress;
 13755  013CCA  0100               	movlb	0	; () banked
 13756  013CCC  EE20 F004          	lfsr	2,4
 13757  013CD0  51E7               	movf	Motor_Init@pMotor& (0+255),w,b
 13758  013CD2  26D9               	addwf	fsr2l,f,c
 13759  013CD4  51E8               	movf	(Motor_Init@pMotor+1)& (0+255),w,b
 13760  013CD6  22DA               	addwfc	fsr2h,f,c
 13761  013CD8  C0E9  FFDE         	movff	Motor_Init@pAddress,postinc2
 13762  013CDC  C0EA  FFDD         	movff	Motor_Init@pAddress+1,postdec2
 13763                           
 13764                           ; BSR set to: 0
 13765                           ;Motor.c: 33: Port_SetPinType (&PortE, eP0, eTypeOutputPushPull);
 13766  013CE0  0E91               	movlw	low _PortE
 13767  013CE2  0100               	movlb	0	; () banked
 13768  013CE4  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13769  013CE6  0E00               	movlw	high _PortE
 13770  013CE8  0100               	movlb	0	; () banked
 13771  013CEA  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13772  013CEC  0E00               	movlw	0
 13773  013CEE  0100               	movlb	0	; () banked
 13774  013CF0  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13775  013CF2  0E03               	movlw	3
 13776  013CF4  0100               	movlb	0	; () banked
 13777  013CF6  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13778  013CF8  EC39  F093         	call	_Port_SetPinType	;wreg free
 13779                           
 13780                           ;Motor.c: 34: Port_SetPinType (&PortE, eP1, eTypeOutputPushPull);
 13781  013CFC  0E91               	movlw	low _PortE
 13782  013CFE  0100               	movlb	0	; () banked
 13783  013D00  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 13784  013D02  0E00               	movlw	high _PortE
 13785  013D04  0100               	movlb	0	; () banked
 13786  013D06  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 13787  013D08  0E01               	movlw	1
 13788  013D0A  0100               	movlb	0	; () banked
 13789  013D0C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 13790  013D0E  0E03               	movlw	3
 13791  013D10  0100               	movlb	0	; () banked
 13792  013D12  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 13793  013D14  EC39  F093         	call	_Port_SetPinType	;wreg free
 13794                           
 13795                           ;Motor.c: 35: Port_SetPin (&PortE, eP0, 0);
 13796  013D18  0E91               	movlw	low _PortE
 13797  013D1A  0100               	movlb	0	; () banked
 13798  013D1C  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13799  013D1E  0E00               	movlw	high _PortE
 13800  013D20  0100               	movlb	0	; () banked
 13801  013D22  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13802  013D24  0E00               	movlw	0
 13803  013D26  0100               	movlb	0	; () banked
 13804  013D28  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13805  013D2A  0E00               	movlw	0
 13806  013D2C  0100               	movlb	0	; () banked
 13807  013D2E  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13808  013D30  EC8F  F09F         	call	_Port_SetPin	;wreg free
 13809                           
 13810                           ;Motor.c: 36: Port_SetPin (&PortE, eP1, 0);
 13811  013D34  0E91               	movlw	low _PortE
 13812  013D36  0100               	movlb	0	; () banked
 13813  013D38  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 13814  013D3A  0E00               	movlw	high _PortE
 13815  013D3C  0100               	movlb	0	; () banked
 13816  013D3E  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 13817  013D40  0E01               	movlw	1
 13818  013D42  0100               	movlb	0	; () banked
 13819  013D44  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 13820  013D46  0E00               	movlw	0
 13821  013D48  0100               	movlb	0	; () banked
 13822  013D4A  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 13823  013D4C  EC8F  F09F         	call	_Port_SetPin	;wreg free
 13824                           
 13825                           ;Motor.c: 38: lStepFunction = Motor_Step;
 13826  013D50  0E00               	movlw	low _Motor_Step
 13827  013D52  0100               	movlb	0	; () banked
 13828  013D54  6F66               	movwf	_lStepFunction& (0+255),b
 13829  013D56  0E34               	movlw	high _Motor_Step
 13830  013D58  0100               	movlb	0	; () banked
 13831  013D5A  6F67               	movwf	(_lStepFunction+1)& (0+255),b
 13832  013D5C  0E01               	movlw	low (_Motor_Step shr (0+16))
 13833  013D5E  0100               	movlb	0	; () banked
 13834  013D60  6F68               	movwf	(_lStepFunction+2)& (0+255),b
 13835                           
 13836                           ; BSR set to: 0
 13837                           ;Motor.c: 39: Timer0_Init(1000);
 13838  013D62  0EE8               	movlw	232
 13839  013D64  0100               	movlb	0	; () banked
 13840  013D66  6FC7               	movwf	Timer0_Init@pFrequency& (0+255),b
 13841  013D68  0E03               	movlw	3
 13842  013D6A  6FC8               	movwf	(Timer0_Init@pFrequency+1)& (0+255),b
 13843  013D6C  0E00               	movlw	0
 13844  013D6E  6FC9               	movwf	(Timer0_Init@pFrequency+2)& (0+255),b
 13845  013D70  0E00               	movlw	0
 13846  013D72  6FCA               	movwf	(Timer0_Init@pFrequency+3)& (0+255),b
 13847  013D74  ECA0  F098         	call	_Timer0_Init	;wreg free
 13848  013D78  0012               	return		;funcret
 13849  013D7A                     __end_of_Motor_Init:
 13850                           	opt stack 0
 13851                           tblptru	equ	0xFF8
 13852                           tblptrh	equ	0xFF7
 13853                           tblptrl	equ	0xFF6
 13854                           tablat	equ	0xFF5
 13855                           prodh	equ	0xFF4
 13856                           prodl	equ	0xFF3
 13857                           intcon	equ	0xFF2
 13858                           postinc0	equ	0xFEE
 13859                           wreg	equ	0xFE8
 13860                           indf1	equ	0xFE7
 13861                           postdec1	equ	0xFE5
 13862                           fsr1h	equ	0xFE2
 13863                           fsr1l	equ	0xFE1
 13864                           indf2	equ	0xFDF
 13865                           postinc2	equ	0xFDE
 13866                           postdec2	equ	0xFDD
 13867                           fsr2h	equ	0xFDA
 13868                           fsr2l	equ	0xFD9
 13869                           status	equ	0xFD8
 13870                           
 13871 ;; *************** function _Timer0_Init *****************
 13872 ;; Defined at:
 13873 ;;		line 25 in file "Library/Timer0.c"
 13874 ;; Parameters:    Size  Location     Type
 13875 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 13876 ;; Auto vars:     Size  Location     Type
 13877 ;;  DIVIDE          4   23[BANK0 ] unsigned long 
 13878 ;;  pCPUClock       4   19[BANK0 ] unsigned long 
 13879 ;; Return value:  Size  Location     Type
 13880 ;;                  1    wreg      void 
 13881 ;; Registers used:
 13882 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13883 ;; Tracked objects:
 13884 ;;		On entry : 0/0
 13885 ;;		On exit  : 0/0
 13886 ;;		Unchanged: 0/0
 13887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13888 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13889 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13890 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13891 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13892 ;;Total ram usage:       14 bytes
 13893 ;; Hardware stack levels used:    1
 13894 ;; Hardware stack levels required when called:    8
 13895 ;; This function calls:
 13896 ;;		_Timer0_Clear
 13897 ;;		___lldiv
 13898 ;; This function is called by:
 13899 ;;		_Motor_Init
 13900 ;;		_Motor_Speed
 13901 ;; This function uses a non-reentrant model
 13902 ;;
 13903                           
 13904                           	psect	text58
 13905  013140                     __ptext58:
 13906                           	opt stack 0
 13907  013140                     _Timer0_Init:
 13908                           	opt stack 19
 13909                           
 13910                           ;Timer0.c: 27: UINT32 pCPUClock = (48*1000000L)/8;
 13911                           
 13912                           ;incstack = 0
 13913  013140  0E80               	movlw	128
 13914  013142  0100               	movlb	0	; () banked
 13915  013144  6FCD               	movwf	Timer0_Init@pCPUClock& (0+255),b
 13916  013146  0E8D               	movlw	141
 13917  013148  6FCE               	movwf	(Timer0_Init@pCPUClock+1)& (0+255),b
 13918  01314A  0E5B               	movlw	91
 13919  01314C  6FCF               	movwf	(Timer0_Init@pCPUClock+2)& (0+255),b
 13920  01314E  0E00               	movlw	0
 13921  013150  6FD0               	movwf	(Timer0_Init@pCPUClock+3)& (0+255),b
 13922                           
 13923                           ; BSR set to: 0
 13924                           ;Timer0.c: 29: static const UINT16 PRESCALE[] = {2, 4, 8, 16, 32, 64 ,128, 256};
 13925                           ;Timer0.c: 31: static UINT8 PRE = 0;
 13926                           ;Timer0.c: 32: static UINT32 DIV = 0;
 13927                           ;Timer0.c: 34: UINT32 DIVIDE;
 13928                           ;Timer0.c: 37: T0CONbits.TMR0ON = 0;
 13929  013152  9ED5               	bcf	4053,7,c	;volatile
 13930                           
 13931                           ; BSR set to: 0
 13932                           ;Timer0.c: 38: if (pFrequency == 0)
 13933  013154  0100               	movlb	0	; () banked
 13934  013156  51C7               	movf	Timer0_Init@pFrequency& (0+255),w,b
 13935  013158  0100               	movlb	0	; () banked
 13936  01315A  11C8               	iorwf	(Timer0_Init@pFrequency+1)& (0+255),w,b
 13937  01315C  0100               	movlb	0	; () banked
 13938  01315E  11C9               	iorwf	(Timer0_Init@pFrequency+2)& (0+255),w,b
 13939  013160  0100               	movlb	0	; () banked
 13940  013162  11CA               	iorwf	(Timer0_Init@pFrequency+3)& (0+255),w,b
 13941  013164  B4D8               	btfsc	status,2,c
 13942  013166  0012               	return	
 13943                           
 13944                           ; BSR set to: 0
 13945                           ;Timer0.c: 41: T0CONbits.PSA = 0;
 13946                           
 13947                           ; BSR set to: 0
 13948                           ;Timer0.c: 39: return;
 13949  013168  96D5               	bcf	4053,3,c	;volatile
 13950                           
 13951                           ;Timer0.c: 42: T0CONbits.T08BIT = 0;
 13952  01316A  9CD5               	bcf	4053,6,c	;volatile
 13953                           
 13954                           ;Timer0.c: 43: T0CONbits.T0CS = 0;
 13955  01316C  9AD5               	bcf	4053,5,c	;volatile
 13956                           
 13957                           ;Timer0.c: 44: T0CONbits.T0SE = 0;
 13958  01316E  98D5               	bcf	4053,4,c	;volatile
 13959                           
 13960                           ; BSR set to: 0
 13961                           ;Timer0.c: 46: DIVIDE = pCPUClock / pFrequency;
 13962  013170  C0CD  F0BA         	movff	Timer0_Init@pCPUClock,___lldiv@dividend
 13963  013174  C0CE  F0BB         	movff	Timer0_Init@pCPUClock+1,___lldiv@dividend+1
 13964  013178  C0CF  F0BC         	movff	Timer0_Init@pCPUClock+2,___lldiv@dividend+2
 13965  01317C  C0D0  F0BD         	movff	Timer0_Init@pCPUClock+3,___lldiv@dividend+3
 13966  013180  C0C7  F0BE         	movff	Timer0_Init@pFrequency,___lldiv@divisor
 13967  013184  C0C8  F0BF         	movff	Timer0_Init@pFrequency+1,___lldiv@divisor+1
 13968  013188  C0C9  F0C0         	movff	Timer0_Init@pFrequency+2,___lldiv@divisor+2
 13969  01318C  C0CA  F0C1         	movff	Timer0_Init@pFrequency+3,___lldiv@divisor+3
 13970  013190  EC11  F0A1         	call	___lldiv	;wreg free
 13971  013194  C0BA  F0D1         	movff	?___lldiv,Timer0_Init@DIVIDE
 13972  013198  C0BB  F0D2         	movff	?___lldiv+1,Timer0_Init@DIVIDE+1
 13973  01319C  C0BC  F0D3         	movff	?___lldiv+2,Timer0_Init@DIVIDE+2
 13974  0131A0  C0BD  F0D4         	movff	?___lldiv+3,Timer0_Init@DIVIDE+3
 13975                           
 13976                           ;Timer0.c: 49: while ((DIVIDE/PRESCALE[INDEX]) > 0xFFFF)
 13977  0131A4  D00C               	goto	l1787
 13978  0131A6                     l13479:
 13979                           
 13980                           ;Timer0.c: 50: {
 13981                           ;Timer0.c: 51: INDEX ++;
 13982  0131A6  0100               	movlb	0	; () banked
 13983  0131A8  2B8D               	incf	_INDEX& (0+255),f,b
 13984                           
 13985                           ; BSR set to: 0
 13986                           ;Timer0.c: 52: if (INDEX >= 3)
 13987  0131AA  0E02               	movlw	2
 13988  0131AC  0100               	movlb	0	; () banked
 13989  0131AE  658D               	cpfsgt	_INDEX& (0+255),b
 13990  0131B0  D001               	goto	l1785
 13991  0131B2  D02F               	goto	u9960
 13992  0131B4                     l1785:
 13993                           
 13994                           ; BSR set to: 0
 13995                           ;Timer0.c: 56: if (INDEX >= 8)
 13996                           
 13997                           ; BSR set to: 0
 13998  0131B4  0E07               	movlw	7
 13999  0131B6  0100               	movlb	0	; () banked
 14000  0131B8  658D               	cpfsgt	_INDEX& (0+255),b
 14001  0131BA  D001               	goto	l1787
 14002  0131BC  0012               	return	
 14003  0131BE                     l1787:
 14004                           
 14005                           ; BSR set to: 0
 14006                           
 14007                           ; BSR set to: 0
 14008  0131BE  C0D1  F0BA         	movff	Timer0_Init@DIVIDE,___lldiv@dividend
 14009  0131C2  C0D2  F0BB         	movff	Timer0_Init@DIVIDE+1,___lldiv@dividend+1
 14010  0131C6  C0D3  F0BC         	movff	Timer0_Init@DIVIDE+2,___lldiv@dividend+2
 14011  0131CA  C0D4  F0BD         	movff	Timer0_Init@DIVIDE+3,___lldiv@dividend+3
 14012  0131CE  0100               	movlb	0	; () banked
 14013  0131D0  518D               	movf	_INDEX& (0+255),w,b
 14014  0131D2  0D02               	mullw	2
 14015  0131D4  0EE5               	movlw	low Timer0_Init@PRESCALE
 14016  0131D6  24F3               	addwf	prodl,w,c
 14017  0131D8  6EF6               	movwf	tblptrl,c
 14018  0131DA  0EFC               	movlw	high Timer0_Init@PRESCALE
 14019  0131DC  20F4               	addwfc	prodh,w,c
 14020  0131DE  6EF7               	movwf	tblptrh,c
 14021  0131E0                     	if	1	;There are 3 active tblptr bytes
 14022  0131E0  6AF8               	clrf	tblptru,c
 14023  0131E2  0E00               	movlw	low (__mediumconst shr (0+16))
 14024  0131E4  22F8               	addwfc	tblptru,f,c
 14025  0131E6                     	endif
 14026  0131E6  0009               	tblrd		*+
 14027  0131E8  CFF5 F0CB          	movff	tablat,??_Timer0_Init
 14028  0131EC  0009               	tblrd		*+
 14029  0131EE  CFF5 F0CC          	movff	tablat,??_Timer0_Init+1
 14030  0131F2  C0CB  F0BE         	movff	??_Timer0_Init,___lldiv@divisor
 14031  0131F6  C0CC  F0BF         	movff	??_Timer0_Init+1,___lldiv@divisor+1
 14032  0131FA  0100               	movlb	0	; () banked
 14033  0131FC  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14034  0131FE  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14035  013200  EC11  F0A1         	call	___lldiv	;wreg free
 14036  013204  0100               	movlb	0	; () banked
 14037  013206  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 14038  013208  E1CE               	bnz	l13479
 14039  01320A  0100               	movlb	0	; () banked
 14040  01320C  05BC               	decf	(?___lldiv+2)& (0+255),w,b
 14041  01320E  B0D8               	btfsc	status,0,c
 14042  013210  D7CA               	goto	l1784
 14043  013212                     u9960:
 14044                           
 14045                           ; BSR set to: 0
 14046                           ;Timer0.c: 58: }
 14047                           ;Timer0.c: 62: PRE = PRESCALE[INDEX];
 14048                           
 14049                           ; BSR set to: 0
 14050  013212  0100               	movlb	0	; () banked
 14051  013214  518D               	movf	_INDEX& (0+255),w,b
 14052  013216  0D02               	mullw	2
 14053  013218  0EE5               	movlw	low Timer0_Init@PRESCALE
 14054  01321A  24F3               	addwf	prodl,w,c
 14055  01321C  6EF6               	movwf	tblptrl,c
 14056  01321E  0EFC               	movlw	high Timer0_Init@PRESCALE
 14057  013220  20F4               	addwfc	prodh,w,c
 14058  013222  6EF7               	movwf	tblptrh,c
 14059  013224                     	if	1	;There are 3 active tblptr bytes
 14060  013224  6AF8               	clrf	tblptru,c
 14061  013226  0E00               	movlw	low (__mediumconst shr (0+16))
 14062  013228  22F8               	addwfc	tblptru,f,c
 14063  01322A                     	endif
 14064  01322A  0008               	tblrd		*
 14065  01322C  CFF5 F08C          	movff	tablat,Timer0_Init@PRE
 14066                           
 14067                           ; BSR set to: 0
 14068                           ;Timer0.c: 63: DIV = (DIVIDE-1);
 14069  013230  0EFF               	movlw	255
 14070  013232  0100               	movlb	0	; () banked
 14071  013234  25D1               	addwf	Timer0_Init@DIVIDE& (0+255),w,b
 14072  013236  0103               	movlb	3	; () banked
 14073  013238  6F2A               	movwf	Timer0_Init@DIV& (0+255),b
 14074  01323A  0EFF               	movlw	255
 14075  01323C  0100               	movlb	0	; () banked
 14076  01323E  21D2               	addwfc	(Timer0_Init@DIVIDE+1)& (0+255),w,b
 14077  013240  0103               	movlb	3	; () banked
 14078  013242  6F2B               	movwf	(Timer0_Init@DIV+1)& (0+255),b
 14079  013244  0EFF               	movlw	255
 14080  013246  0100               	movlb	0	; () banked
 14081  013248  21D3               	addwfc	(Timer0_Init@DIVIDE+2)& (0+255),w,b
 14082  01324A  0103               	movlb	3	; () banked
 14083  01324C  6F2C               	movwf	(Timer0_Init@DIV+2)& (0+255),b
 14084  01324E  0EFF               	movlw	255
 14085  013250  0100               	movlb	0	; () banked
 14086  013252  21D4               	addwfc	(Timer0_Init@DIVIDE+3)& (0+255),w,b
 14087  013254  0103               	movlb	3	; () banked
 14088  013256  6F2D               	movwf	(Timer0_Init@DIV+3)& (0+255),b
 14089                           
 14090                           ; BSR set to: 3
 14091                           ;Timer0.c: 65: COUNTER = 0xFFFF-DIV/PRE;
 14092  013258  C32A  F0BA         	movff	Timer0_Init@DIV,___lldiv@dividend
 14093  01325C  C32B  F0BB         	movff	Timer0_Init@DIV+1,___lldiv@dividend+1
 14094  013260  C32C  F0BC         	movff	Timer0_Init@DIV+2,___lldiv@dividend+2
 14095  013264  C32D  F0BD         	movff	Timer0_Init@DIV+3,___lldiv@dividend+3
 14096  013268  0100               	movlb	0	; () banked
 14097  01326A  518C               	movf	Timer0_Init@PRE& (0+255),w,b
 14098  01326C  0100               	movlb	0	; () banked
 14099  01326E  6FBE               	movwf	___lldiv@divisor& (0+255),b
 14100  013270  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 14101  013272  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 14102  013274  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 14103  013276  EC11  F0A1         	call	___lldiv	;wreg free
 14104  01327A  0100               	movlb	0	; () banked
 14105  01327C  1FBA               	comf	?___lldiv& (0+255),f,b
 14106  01327E  0100               	movlb	0	; () banked
 14107  013280  1FBB               	comf	(?___lldiv+1)& (0+255),f,b
 14108  013282  0100               	movlb	0	; () banked
 14109  013284  4BBA               	infsnz	?___lldiv& (0+255),f,b
 14110  013286  2BBB               	incf	(?___lldiv+1)& (0+255),f,b
 14111  013288  0EFF               	movlw	255
 14112  01328A  0100               	movlb	0	; () banked
 14113  01328C  25BA               	addwf	?___lldiv& (0+255),w,b
 14114  01328E  6E29               	movwf	_COUNTER,c
 14115  013290  0EFF               	movlw	255
 14116  013292  0100               	movlb	0	; () banked
 14117  013294  21BB               	addwfc	(?___lldiv+1)& (0+255),w,b
 14118  013296  6E2A               	movwf	_COUNTER+1,c
 14119                           
 14120                           ; BSR set to: 0
 14121                           ;Timer0.c: 68: Timer0_Clear();
 14122  013298  EC4C  F0B3         	call	_Timer0_Clear	;wreg free
 14123                           
 14124                           ;Timer0.c: 71: T0CONbits.TMR0ON = 1;
 14125  01329C  8ED5               	bsf	4053,7,c	;volatile
 14126  01329E  0012               	return		;funcret
 14127  0132A0                     __end_of_Timer0_Init:
 14128                           	opt stack 0
 14129                           tblptru	equ	0xFF8
 14130                           tblptrh	equ	0xFF7
 14131                           tblptrl	equ	0xFF6
 14132                           tablat	equ	0xFF5
 14133                           prodh	equ	0xFF4
 14134                           prodl	equ	0xFF3
 14135                           intcon	equ	0xFF2
 14136                           postinc0	equ	0xFEE
 14137                           wreg	equ	0xFE8
 14138                           indf1	equ	0xFE7
 14139                           postdec1	equ	0xFE5
 14140                           fsr1h	equ	0xFE2
 14141                           fsr1l	equ	0xFE1
 14142                           indf2	equ	0xFDF
 14143                           postinc2	equ	0xFDE
 14144                           postdec2	equ	0xFDD
 14145                           fsr2h	equ	0xFDA
 14146                           fsr2l	equ	0xFD9
 14147                           status	equ	0xFD8
 14148                           
 14149 ;; *************** function _Timer0_Clear *****************
 14150 ;; Defined at:
 14151 ;;		line 20 in file "Library/Timer0.c"
 14152 ;; Parameters:    Size  Location     Type
 14153 ;;		None
 14154 ;; Auto vars:     Size  Location     Type
 14155 ;;		None
 14156 ;; Return value:  Size  Location     Type
 14157 ;;                  1    wreg      void 
 14158 ;; Registers used:
 14159 ;;		None
 14160 ;; Tracked objects:
 14161 ;;		On entry : 0/0
 14162 ;;		On exit  : 0/0
 14163 ;;		Unchanged: 0/0
 14164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14165 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14168 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14169 ;;Total ram usage:        0 bytes
 14170 ;; Hardware stack levels used:    1
 14171 ;; Hardware stack levels required when called:    7
 14172 ;; This function calls:
 14173 ;;		Nothing
 14174 ;; This function is called by:
 14175 ;;		_Timer0_Init
 14176 ;; This function uses a non-reentrant model
 14177 ;;
 14178                           
 14179                           	psect	text59
 14180  016698                     __ptext59:
 14181                           	opt stack 0
 14182  016698                     _Timer0_Clear:
 14183                           	opt stack 19
 14184                           
 14185                           ;Timer0.c: 22: TMR0 = COUNTER;
 14186                           
 14187                           ;incstack = 0
 14188  016698  C029  FFD6         	movff	_COUNTER,4054	;volatile
 14189  01669C  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 14190                           
 14191                           ;Timer0.c: 23: INTCONbits.TMR0IF = 0;
 14192  0166A0  94F2               	bcf	intcon,2,c	;volatile
 14193  0166A2  0012               	return		;funcret
 14194  0166A4                     __end_of_Timer0_Clear:
 14195                           	opt stack 0
 14196                           tblptru	equ	0xFF8
 14197                           tblptrh	equ	0xFF7
 14198                           tblptrl	equ	0xFF6
 14199                           tablat	equ	0xFF5
 14200                           prodh	equ	0xFF4
 14201                           prodl	equ	0xFF3
 14202                           intcon	equ	0xFF2
 14203                           postinc0	equ	0xFEE
 14204                           wreg	equ	0xFE8
 14205                           indf1	equ	0xFE7
 14206                           postdec1	equ	0xFE5
 14207                           fsr1h	equ	0xFE2
 14208                           fsr1l	equ	0xFE1
 14209                           indf2	equ	0xFDF
 14210                           postinc2	equ	0xFDE
 14211                           postdec2	equ	0xFDD
 14212                           fsr2h	equ	0xFDA
 14213                           fsr2l	equ	0xFD9
 14214                           status	equ	0xFD8
 14215                           
 14216 ;; *************** function _MXK_Init *****************
 14217 ;; Defined at:
 14218 ;;		line 33 in file "Library/MXK.c"
 14219 ;; Parameters:    Size  Location     Type
 14220 ;;		None
 14221 ;; Auto vars:     Size  Location     Type
 14222 ;;		None
 14223 ;; Return value:  Size  Location     Type
 14224 ;;                  1    wreg      void 
 14225 ;; Registers used:
 14226 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14227 ;; Tracked objects:
 14228 ;;		On entry : 0/0
 14229 ;;		On exit  : 0/0
 14230 ;;		Unchanged: 0/0
 14231 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14236 ;;Total ram usage:        0 bytes
 14237 ;; Hardware stack levels used:    1
 14238 ;; Hardware stack levels required when called:   16
 14239 ;; This function calls:
 14240 ;;		_LED_Init
 14241 ;;		_Port_Init
 14242 ;;		_Port_SetPin
 14243 ;;		_Port_SetPinType
 14244 ;;		_Port_SetQuadType
 14245 ;;		_Port_SetType
 14246 ;;		_delay_ms
 14247 ;; This function is called by:
 14248 ;;		_init
 14249 ;; This function uses a non-reentrant model
 14250 ;;
 14251                           
 14252                           	psect	text60
 14253  012CE8                     __ptext60:
 14254                           	opt stack 0
 14255  012CE8                     _MXK_Init:
 14256                           	opt stack 13
 14257                           
 14258                           ;MXK.c: 35: Bus_State = eMXK_Idle;
 14259                           
 14260                           ;incstack = 0
 14261  012CE8  0E01               	movlw	1
 14262  012CEA  6E4B               	movwf	_Bus_State,c
 14263                           
 14264                           ;MXK.c: 36: lQueue = (Function)0;
 14265  012CEC  0E00               	movlw	0
 14266  012CEE  0100               	movlb	0	; () banked
 14267  012CF0  6F63               	movwf	_lQueue& (0+255),b	;volatile
 14268  012CF2  0E00               	movlw	0
 14269  012CF4  0100               	movlb	0	; () banked
 14270  012CF6  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 14271  012CF8  0E00               	movlw	0
 14272  012CFA  0100               	movlb	0	; () banked
 14273  012CFC  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 14274                           
 14275                           ; BSR set to: 0
 14276                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
 14277  012CFE  0EB8               	movlw	low _PortA
 14278  012D00  0101               	movlb	1	; () banked
 14279  012D02  6F01               	movwf	Port_Init@pInput& (0+255),b
 14280  012D04  0E03               	movlw	high _PortA
 14281  012D06  0101               	movlb	1	; () banked
 14282  012D08  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14283  012D0A  0E00               	movlw	0
 14284  012D0C  0101               	movlb	1	; () banked
 14285  012D0E  6F03               	movwf	Port_Init@pPort& (0+255),b
 14286  012D10  ECE8  F094         	call	_Port_Init	;wreg free
 14287                           
 14288                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
 14289  012D14  0EAE               	movlw	low _PortB
 14290  012D16  0101               	movlb	1	; () banked
 14291  012D18  6F01               	movwf	Port_Init@pInput& (0+255),b
 14292  012D1A  0E03               	movlw	high _PortB
 14293  012D1C  0101               	movlb	1	; () banked
 14294  012D1E  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14295  012D20  0E01               	movlw	1
 14296  012D22  0101               	movlb	1	; () banked
 14297  012D24  6F03               	movwf	Port_Init@pPort& (0+255),b
 14298  012D26  ECE8  F094         	call	_Port_Init	;wreg free
 14299                           
 14300                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
 14301  012D2A  0EA5               	movlw	low _PortC
 14302  012D2C  0101               	movlb	1	; () banked
 14303  012D2E  6F01               	movwf	Port_Init@pInput& (0+255),b
 14304  012D30  0E00               	movlw	high _PortC
 14305  012D32  0101               	movlb	1	; () banked
 14306  012D34  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14307  012D36  0E02               	movlw	2
 14308  012D38  0101               	movlb	1	; () banked
 14309  012D3A  6F03               	movwf	Port_Init@pPort& (0+255),b
 14310  012D3C  ECE8  F094         	call	_Port_Init	;wreg free
 14311                           
 14312                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
 14313  012D40  0E9B               	movlw	low _PortD
 14314  012D42  0101               	movlb	1	; () banked
 14315  012D44  6F01               	movwf	Port_Init@pInput& (0+255),b
 14316  012D46  0E00               	movlw	high _PortD
 14317  012D48  0101               	movlb	1	; () banked
 14318  012D4A  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14319  012D4C  0E03               	movlw	3
 14320  012D4E  0101               	movlb	1	; () banked
 14321  012D50  6F03               	movwf	Port_Init@pPort& (0+255),b
 14322  012D52  ECE8  F094         	call	_Port_Init	;wreg free
 14323                           
 14324                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
 14325  012D56  0E91               	movlw	low _PortE
 14326  012D58  0101               	movlb	1	; () banked
 14327  012D5A  6F01               	movwf	Port_Init@pInput& (0+255),b
 14328  012D5C  0E00               	movlw	high _PortE
 14329  012D5E  0101               	movlb	1	; () banked
 14330  012D60  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14331  012D62  0E04               	movlw	4
 14332  012D64  0101               	movlb	1	; () banked
 14333  012D66  6F03               	movwf	Port_Init@pPort& (0+255),b
 14334  012D68  ECE8  F094         	call	_Port_Init	;wreg free
 14335                           
 14336                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
 14337  012D6C  0EC2               	movlw	low _PortF
 14338  012D6E  0101               	movlb	1	; () banked
 14339  012D70  6F01               	movwf	Port_Init@pInput& (0+255),b
 14340  012D72  0E03               	movlw	high _PortF
 14341  012D74  0101               	movlb	1	; () banked
 14342  012D76  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14343  012D78  0E05               	movlw	5
 14344  012D7A  0101               	movlb	1	; () banked
 14345  012D7C  6F03               	movwf	Port_Init@pPort& (0+255),b
 14346  012D7E  ECE8  F094         	call	_Port_Init	;wreg free
 14347                           
 14348                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
 14349  012D82  0EA4               	movlw	low _PortG
 14350  012D84  0101               	movlb	1	; () banked
 14351  012D86  6F01               	movwf	Port_Init@pInput& (0+255),b
 14352  012D88  0E03               	movlw	high _PortG
 14353  012D8A  0101               	movlb	1	; () banked
 14354  012D8C  6F02               	movwf	(Port_Init@pInput+1)& (0+255),b
 14355  012D8E  0E06               	movlw	6
 14356  012D90  0101               	movlb	1	; () banked
 14357  012D92  6F03               	movwf	Port_Init@pPort& (0+255),b
 14358  012D94  ECE8  F094         	call	_Port_Init	;wreg free
 14359                           
 14360                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
 14361  012D98  0EC2               	movlw	low _PortF
 14362  012D9A  0100               	movlb	0	; () banked
 14363  012D9C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14364  012D9E  0E03               	movlw	high _PortF
 14365  012DA0  0100               	movlb	0	; () banked
 14366  012DA2  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14367  012DA4  0E05               	movlw	5
 14368  012DA6  0100               	movlb	0	; () banked
 14369  012DA8  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14370  012DAA  0E00               	movlw	0
 14371  012DAC  0100               	movlb	0	; () banked
 14372  012DAE  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14373  012DB0  EC39  F093         	call	_Port_SetPinType	;wreg free
 14374                           
 14375                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
 14376  012DB4  0EAE               	movlw	low _PortB
 14377  012DB6  0100               	movlb	0	; () banked
 14378  012DB8  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 14379  012DBA  0E03               	movlw	high _PortB
 14380  012DBC  0100               	movlb	0	; () banked
 14381  012DBE  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 14382  012DC0  0E00               	movlw	0
 14383  012DC2  0100               	movlb	0	; () banked
 14384  012DC4  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 14385  012DC6  0E00               	movlw	0
 14386  012DC8  0100               	movlb	0	; () banked
 14387  012DCA  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 14388  012DCC  EC2C  F08D         	call	_Port_SetQuadType	;wreg free
 14389                           
 14390                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
 14391  012DD0  0EC2               	movlw	low _PortF
 14392  012DD2  0100               	movlb	0	; () banked
 14393  012DD4  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 14394  012DD6  0E03               	movlw	high _PortF
 14395  012DD8  0100               	movlb	0	; () banked
 14396  012DDA  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 14397  012DDC  0E06               	movlw	6
 14398  012DDE  0100               	movlb	0	; () banked
 14399  012DE0  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 14400  012DE2  0E03               	movlw	3
 14401  012DE4  0100               	movlb	0	; () banked
 14402  012DE6  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14403  012DE8  EC39  F093         	call	_Port_SetPinType	;wreg free
 14404                           
 14405                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
 14406  012DEC  0EA4               	movlw	low _PortG
 14407  012DEE  0100               	movlb	0	; () banked
 14408  012DF0  6FF4               	movwf	Port_SetType@pInput& (0+255),b
 14409  012DF2  0E03               	movlw	high _PortG
 14410  012DF4  0100               	movlb	0	; () banked
 14411  012DF6  6FF5               	movwf	(Port_SetType@pInput+1)& (0+255),b
 14412  012DF8  0E03               	movlw	3
 14413  012DFA  0100               	movlb	0	; () banked
 14414  012DFC  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14415  012DFE  EC57  F08E         	call	_Port_SetType	;wreg free
 14416                           
 14417                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
 14418  012E02  0EA4               	movlw	low _PortG
 14419  012E04  0100               	movlb	0	; () banked
 14420  012E06  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14421  012E08  0E03               	movlw	high _PortG
 14422  012E0A  0100               	movlb	0	; () banked
 14423  012E0C  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14424  012E0E  0E04               	movlw	4
 14425  012E10  0100               	movlb	0	; () banked
 14426  012E12  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14427  012E14  0E00               	movlw	0
 14428  012E16  0100               	movlb	0	; () banked
 14429  012E18  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14430  012E1A  EC8F  F09F         	call	_Port_SetPin	;wreg free
 14431                           
 14432                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
 14433  012E1E  0EC2               	movlw	low _PortF
 14434  012E20  0100               	movlb	0	; () banked
 14435  012E22  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 14436  012E24  0E03               	movlw	high _PortF
 14437  012E26  0100               	movlb	0	; () banked
 14438  012E28  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 14439  012E2A  0E06               	movlw	6
 14440  012E2C  0100               	movlb	0	; () banked
 14441  012E2E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 14442  012E30  0E01               	movlw	1
 14443  012E32  0100               	movlb	0	; () banked
 14444  012E34  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 14445  012E36  EC8F  F09F         	call	_Port_SetPin	;wreg free
 14446                           
 14447                           ;MXK.c: 55: LED_Init(eLED1);
 14448  012E3A  0E00               	movlw	0
 14449  012E3C  EC36  F0AC         	call	_LED_Init
 14450                           
 14451                           ;MXK.c: 56: LED_Init(eLED2);
 14452  012E40  0E01               	movlw	1
 14453  012E42  EC36  F0AC         	call	_LED_Init
 14454                           
 14455                           ;MXK.c: 58: PIR1 = 0;
 14456  012E46  0E00               	movlw	0
 14457  012E48  6E9E               	movwf	3998,c	;volatile
 14458                           
 14459                           ;MXK.c: 59: PIR2 = 0;
 14460  012E4A  0E00               	movlw	0
 14461  012E4C  6EA1               	movwf	4001,c	;volatile
 14462                           
 14463                           ;MXK.c: 60: PIR3 = 0;
 14464  012E4E  0E00               	movlw	0
 14465  012E50  6EA4               	movwf	4004,c	;volatile
 14466                           
 14467                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
 14468  012E52  8E9B               	bsf	3995,7,c	;volatile
 14469                           
 14470                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
 14471  012E54  8C9B               	bsf	3995,6,c	;volatile
 14472                           
 14473                           ;MXK.c: 66: delay_ms(100);
 14474  012E56  0E00               	movlw	0
 14475  012E58  0100               	movlb	0	; () banked
 14476  012E5A  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 14477  012E5C  0E64               	movlw	100
 14478  012E5E  6FBA               	movwf	delay_ms@ms& (0+255),b
 14479  012E60  EC34  F0AB         	call	_delay_ms	;wreg free
 14480                           
 14481                           ;MXK.c: 68: RCONbits.IPEN = 1;
 14482  012E64  8ED0               	bsf	4048,7,c	;volatile
 14483  012E66  0012               	return		;funcret
 14484  012E68                     __end_of_MXK_Init:
 14485                           	opt stack 0
 14486                           tblptru	equ	0xFF8
 14487                           tblptrh	equ	0xFF7
 14488                           tblptrl	equ	0xFF6
 14489                           tablat	equ	0xFF5
 14490                           prodh	equ	0xFF4
 14491                           prodl	equ	0xFF3
 14492                           intcon	equ	0xFF2
 14493                           postinc0	equ	0xFEE
 14494                           wreg	equ	0xFE8
 14495                           indf1	equ	0xFE7
 14496                           postdec1	equ	0xFE5
 14497                           fsr1h	equ	0xFE2
 14498                           fsr1l	equ	0xFE1
 14499                           indf2	equ	0xFDF
 14500                           postinc2	equ	0xFDE
 14501                           postdec2	equ	0xFDD
 14502                           fsr2h	equ	0xFDA
 14503                           fsr2l	equ	0xFD9
 14504                           status	equ	0xFD8
 14505                           
 14506 ;; *************** function _Port_Init *****************
 14507 ;; Defined at:
 14508 ;;		line 150 in file "Library/Port.c"
 14509 ;; Parameters:    Size  Location     Type
 14510 ;;  pInput          2    1[BANK1 ] const PTR struct Port
 14511 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14512 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14513 ;;  pPort           1    3[BANK1 ] enum E6786
 14514 ;; Auto vars:     Size  Location     Type
 14515 ;;  i               1    6[BANK1 ] unsigned char 
 14516 ;; Return value:  Size  Location     Type
 14517 ;;                  1    wreg      void 
 14518 ;; Registers used:
 14519 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14520 ;; Tracked objects:
 14521 ;;		On entry : 0/0
 14522 ;;		On exit  : 0/0
 14523 ;;		Unchanged: 0/0
 14524 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14525 ;;      Params:         0       0       3       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14526 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14527 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14528 ;;      Totals:         0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14529 ;;Total ram usage:        6 bytes
 14530 ;; Hardware stack levels used:    1
 14531 ;; Hardware stack levels required when called:   15
 14532 ;; This function calls:
 14533 ;;		_GetPortPORT
 14534 ;;		_GetPortProperties
 14535 ;;		_GetPortTRIS
 14536 ;;		_Port_Set
 14537 ;;		_Port_SetPinType
 14538 ;;		_Port_SetType
 14539 ;;		_Word_GetPair
 14540 ;; This function is called by:
 14541 ;;		_MXK_Init
 14542 ;; This function uses a non-reentrant model
 14543 ;;
 14544                           
 14545                           	psect	text61
 14546  0129D0                     __ptext61:
 14547                           	opt stack 0
 14548  0129D0                     _Port_Init:
 14549                           	opt stack 13
 14550                           
 14551                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
 14552                           
 14553                           ;incstack = 0
 14554  0129D0  0101               	movlb	1	; () banked
 14555  0129D2  5103               	movf	Port_Init@pPort& (0+255),w,b
 14556  0129D4  EC7B  F0A4         	call	_GetPortProperties
 14557  0129D8  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14558  0129DC  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14559  0129E0  0100               	movlb	0	; () banked
 14560  0129E2  C0BA  FFDE         	movff	?_GetPortProperties,postinc2
 14561  0129E6  0100               	movlb	0	; () banked
 14562  0129E8  C0BB  FFDD         	movff	?_GetPortProperties+1,postdec2
 14563                           
 14564                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
 14565  0129EC  0101               	movlb	1	; () banked
 14566  0129EE  5103               	movf	Port_Init@pPort& (0+255),w,b
 14567  0129F0  ECCE  F0A4         	call	_GetPortPORT
 14568  0129F4  0101               	movlb	1	; () banked
 14569  0129F6  EE20 F006          	lfsr	2,6
 14570  0129FA  5101               	movf	Port_Init@pInput& (0+255),w,b
 14571  0129FC  26D9               	addwf	fsr2l,f,c
 14572  0129FE  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14573  012A00  22DA               	addwfc	fsr2h,f,c
 14574  012A02  0100               	movlb	0	; () banked
 14575  012A04  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14576  012A08  0100               	movlb	0	; () banked
 14577  012A0A  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14578                           
 14579                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
 14580  012A0E  0101               	movlb	1	; () banked
 14581  012A10  5103               	movf	Port_Init@pPort& (0+255),w,b
 14582  012A12  ECCE  F0A4         	call	_GetPortPORT
 14583  012A16  0101               	movlb	1	; () banked
 14584  012A18  EE20 F004          	lfsr	2,4
 14585  012A1C  5101               	movf	Port_Init@pInput& (0+255),w,b
 14586  012A1E  26D9               	addwf	fsr2l,f,c
 14587  012A20  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14588  012A22  22DA               	addwfc	fsr2h,f,c
 14589  012A24  0100               	movlb	0	; () banked
 14590  012A26  C0BA  FFDE         	movff	?_GetPortPORT,postinc2
 14591  012A2A  0100               	movlb	0	; () banked
 14592  012A2C  C0BB  FFDD         	movff	?_GetPortPORT+1,postdec2
 14593                           
 14594                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
 14595  012A30  0101               	movlb	1	; () banked
 14596  012A32  5103               	movf	Port_Init@pPort& (0+255),w,b
 14597  012A34  EC28  F0A4         	call	_GetPortTRIS
 14598  012A38  0101               	movlb	1	; () banked
 14599  012A3A  EE20 F002          	lfsr	2,2
 14600  012A3E  5101               	movf	Port_Init@pInput& (0+255),w,b
 14601  012A40  26D9               	addwf	fsr2l,f,c
 14602  012A42  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14603  012A44  22DA               	addwfc	fsr2h,f,c
 14604  012A46  0100               	movlb	0	; () banked
 14605  012A48  C0BA  FFDE         	movff	?_GetPortTRIS,postinc2
 14606  012A4C  0100               	movlb	0	; () banked
 14607  012A4E  C0BB  FFDD         	movff	?_GetPortTRIS+1,postdec2
 14608                           
 14609                           ; BSR set to: 0
 14610                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
 14611  012A52  0101               	movlb	1	; () banked
 14612  012A54  EE20 F004          	lfsr	2,4
 14613  012A58  5101               	movf	Port_Init@pInput& (0+255),w,b
 14614  012A5A  26D9               	addwf	fsr2l,f,c
 14615  012A5C  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14616  012A5E  22DA               	addwfc	fsr2h,f,c
 14617  012A60  CFDE F104          	movff	postinc2,??_Port_Init
 14618  012A64  CFDD F105          	movff	postdec2,??_Port_Init+1
 14619  012A68  C104  FFD9         	movff	??_Port_Init,fsr2l
 14620  012A6C  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14621  012A70  0E00               	movlw	0
 14622  012A72  6EDF               	movwf	indf2,c
 14623                           
 14624                           ; BSR set to: 1
 14625                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
 14626  012A74  0101               	movlb	1	; () banked
 14627  012A76  EE20 F002          	lfsr	2,2
 14628  012A7A  5101               	movf	Port_Init@pInput& (0+255),w,b
 14629  012A7C  26D9               	addwf	fsr2l,f,c
 14630  012A7E  5102               	movf	(Port_Init@pInput+1)& (0+255),w,b
 14631  012A80  22DA               	addwfc	fsr2h,f,c
 14632  012A82  CFDE F104          	movff	postinc2,??_Port_Init
 14633  012A86  CFDD F105          	movff	postdec2,??_Port_Init+1
 14634  012A8A  C104  FFD9         	movff	??_Port_Init,fsr2l
 14635  012A8E  C105  FFDA         	movff	??_Port_Init+1,fsr2h
 14636  012A92  0EFF               	movlw	255
 14637  012A94  6EDF               	movwf	indf2,c
 14638                           
 14639                           ; BSR set to: 1
 14640                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
 14641  012A96  C101  F0F4         	movff	Port_Init@pInput,Port_SetType@pInput
 14642  012A9A  C102  F0F5         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
 14643  012A9E  0E00               	movlw	0
 14644  012AA0  0100               	movlb	0	; () banked
 14645  012AA2  6FF6               	movwf	Port_SetType@pType& (0+255),b
 14646  012AA4  EC57  F08E         	call	_Port_SetType	;wreg free
 14647                           
 14648                           ;Port.c: 166: UINT8 i;
 14649                           ;Port.c: 167: for (i=0; i<8; i++)
 14650  012AA8  0E00               	movlw	0
 14651  012AAA  0101               	movlb	1	; () banked
 14652  012AAC  6F06               	movwf	Port_Init@i& (0+255),b
 14653  012AAE                     l13981:
 14654                           
 14655                           ; BSR set to: 1
 14656  012AAE  0E07               	movlw	7
 14657  012AB0  0101               	movlb	1	; () banked
 14658  012AB2  6506               	cpfsgt	Port_Init@i& (0+255),b
 14659  012AB4  D031               	goto	l403
 14660  012AB6  D04B               	goto	u10660
 14661  012AB8                     
 14662                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
 14663                           
 14664                           ; BSR set to: 1
 14665  012AB8  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14666  012ABC  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14667  012AC0  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14668  012AC4  0E03               	movlw	3
 14669  012AC6  0100               	movlb	0	; () banked
 14670  012AC8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14671  012ACA  EC39  F093         	call	_Port_SetPinType	;wreg free
 14672                           
 14673                           ;Port.c: 173: break;
 14674  012ACE  D03C               	goto	l405
 14675  012AD0                     
 14676                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
 14677  012AD0  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14678  012AD4  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14679  012AD8  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14680  012ADC  0E02               	movlw	2
 14681  012ADE  0100               	movlb	0	; () banked
 14682  012AE0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14683  012AE2  EC39  F093         	call	_Port_SetPinType	;wreg free
 14684                           
 14685                           ;Port.c: 176: break;
 14686  012AE6  D030               	goto	l405
 14687  012AE8                     
 14688                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
 14689  012AE8  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14690  012AEC  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14691  012AF0  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14692  012AF4  0E01               	movlw	1
 14693  012AF6  0100               	movlb	0	; () banked
 14694  012AF8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14695  012AFA  EC39  F093         	call	_Port_SetPinType	;wreg free
 14696                           
 14697                           ;Port.c: 179: break;
 14698  012AFE  D024               	goto	l405
 14699  012B00                     
 14700                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
 14701  012B00  C101  F0E0         	movff	Port_Init@pInput,Port_SetPinType@pInput
 14702  012B04  C102  F0E1         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
 14703  012B08  C106  F0E2         	movff	Port_Init@i,Port_SetPinType@pPin
 14704  012B0C  0E00               	movlw	0
 14705  012B0E  0100               	movlb	0	; () banked
 14706  012B10  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 14707  012B12  EC39  F093         	call	_Port_SetPinType	;wreg free
 14708                           
 14709                           ;Port.c: 183: }
 14710                           
 14711                           ;Port.c: 182: break;
 14712  012B16  D018               	goto	l405
 14713  012B18                     l403:
 14714  012B18  C101  FFD9         	movff	Port_Init@pInput,fsr2l
 14715  012B1C  C102  FFDA         	movff	Port_Init@pInput+1,fsr2h
 14716  012B20  CFDE F0C6          	movff	postinc2,Word_GetPair@pInput
 14717  012B24  CFDD F0C7          	movff	postdec2,Word_GetPair@pInput+1
 14718  012B28  C106  F0C8         	movff	Port_Init@i,Word_GetPair@pPair
 14719  012B2C  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 14720                           
 14721                           ; Switch size 1, requested type "space"
 14722                           ; Number of cases is 4, Range of values is 0 to 3
 14723                           ; switch strategies available:
 14724                           ; Name         Instructions Cycles
 14725                           ; simple_byte           13     7 (average)
 14726                           ;	Chosen strategy is simple_byte
 14727  012B30  0A00               	xorlw	0	; case 0
 14728  012B32  B4D8               	btfsc	status,2,c
 14729  012B34  D7C1               	goto	l404
 14730  012B36  0A01               	xorlw	1	; case 1
 14731  012B38  B4D8               	btfsc	status,2,c
 14732  012B3A  D7D6               	goto	l407
 14733  012B3C  0A03               	xorlw	3	; case 2
 14734  012B3E  B4D8               	btfsc	status,2,c
 14735  012B40  D7C7               	goto	l406
 14736  012B42  0A01               	xorlw	1	; case 3
 14737  012B44  B4D8               	btfsc	status,2,c
 14738  012B46  D7DC               	goto	l408
 14739  012B48                     l405:
 14740  012B48  0101               	movlb	1	; () banked
 14741  012B4A  2B06               	incf	Port_Init@i& (0+255),f,b
 14742  012B4C  D7B0               	goto	l13981
 14743  012B4E                     u10660:
 14744                           
 14745                           ; BSR set to: 1
 14746                           ;Port.c: 184: }
 14747                           ;Port.c: 185: Port_Set(pInput, 0x00);
 14748                           
 14749                           ; BSR set to: 1
 14750  012B4E  C101  F0C9         	movff	Port_Init@pInput,Port_Set@pInput
 14751  012B52  C102  F0CA         	movff	Port_Init@pInput+1,Port_Set@pInput+1
 14752  012B56  0E00               	movlw	0
 14753  012B58  0100               	movlb	0	; () banked
 14754  012B5A  6FCB               	movwf	Port_Set@pValue& (0+255),b
 14755  012B5C  EC0D  F08A         	call	_Port_Set	;wreg free
 14756  012B60  0012               	return		;funcret
 14757  012B62                     __end_of_Port_Init:
 14758                           	opt stack 0
 14759                           tblptru	equ	0xFF8
 14760                           tblptrh	equ	0xFF7
 14761                           tblptrl	equ	0xFF6
 14762                           tablat	equ	0xFF5
 14763                           prodh	equ	0xFF4
 14764                           prodl	equ	0xFF3
 14765                           intcon	equ	0xFF2
 14766                           postinc0	equ	0xFEE
 14767                           wreg	equ	0xFE8
 14768                           indf1	equ	0xFE7
 14769                           postdec1	equ	0xFE5
 14770                           fsr1h	equ	0xFE2
 14771                           fsr1l	equ	0xFE1
 14772                           indf2	equ	0xFDF
 14773                           postinc2	equ	0xFDE
 14774                           postdec2	equ	0xFDD
 14775                           fsr2h	equ	0xFDA
 14776                           fsr2l	equ	0xFD9
 14777                           status	equ	0xFD8
 14778                           
 14779 ;; *************** function _Port_SetType *****************
 14780 ;; Defined at:
 14781 ;;		line 513 in file "Library/Port.c"
 14782 ;; Parameters:    Size  Location     Type
 14783 ;;  pInput          2   58[BANK0 ] const PTR struct Port
 14784 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 14785 ;;		 -> PortD(10), PortC(10), PortF(10), 
 14786 ;;  pType           1   60[BANK0 ] enum E6795
 14787 ;; Auto vars:     Size  Location     Type
 14788 ;;  Output          1    0[BANK1 ] enum E6475
 14789 ;; Return value:  Size  Location     Type
 14790 ;;                  1    wreg      enum E6475
 14791 ;; Registers used:
 14792 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 14793 ;; Tracked objects:
 14794 ;;		On entry : 0/0
 14795 ;;		On exit  : 0/0
 14796 ;;		Unchanged: 0/0
 14797 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14798 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14799 ;;      Locals:         0       0       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14800 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14801 ;;      Totals:         0       5       1       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14802 ;;Total ram usage:        6 bytes
 14803 ;; Hardware stack levels used:    1
 14804 ;; Hardware stack levels required when called:   14
 14805 ;; This function calls:
 14806 ;;		_Port_CheckPortType
 14807 ;;		_Word_SetPair
 14808 ;; This function is called by:
 14809 ;;		_Port_Init
 14810 ;;		_MXK_Init
 14811 ;; This function uses a non-reentrant model
 14812 ;;
 14813                           
 14814                           	psect	text62
 14815  011CAE                     __ptext62:
 14816                           	opt stack 0
 14817  011CAE                     _Port_SetType:
 14818                           	opt stack 14
 14819                           
 14820                           ;Port.c: 515: ePinError Output = ePinErrorState;
 14821                           
 14822                           ;incstack = 0
 14823  011CAE  0E05               	movlw	5
 14824  011CB0  0101               	movlb	1	; () banked
 14825  011CB2  6F00               	movwf	Port_SetType@Output& (0+255),b
 14826                           
 14827                           ;Port.c: 517: switch (pType)
 14828  011CB4  D07A               	goto	l509
 14829  011CB6                     
 14830                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
 14831                           
 14832                           ; BSR set to: 1
 14833  011CB6  0100               	movlb	0	; () banked
 14834  011CB8  EE20 F002          	lfsr	2,2
 14835  011CBC  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14836  011CBE  26D9               	addwf	fsr2l,f,c
 14837  011CC0  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14838  011CC2  22DA               	addwfc	fsr2h,f,c
 14839  011CC4  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14840  011CC8  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14841  011CCC  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14842  011CD0  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14843  011CD4  0EFF               	movlw	255
 14844  011CD6  D067               	goto	L10
 14845  011CD8                     
 14846                           ; BSR set to: 0
 14847                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
 14848                           
 14849                           ; BSR set to: 0
 14850  011CD8  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14851  011CDC  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14852  011CE0  0E01               	movlw	1
 14853  011CE2  0100               	movlb	0	; () banked
 14854  011CE4  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14855  011CE6  EC34  F0AE         	call	_Port_CheckPortType	;wreg free
 14856  011CEA  0101               	movlb	1	; () banked
 14857  011CEC  6F00               	movwf	Port_SetType@Output& (0+255),b
 14858  011CEE  0101               	movlb	1	; () banked
 14859  011CF0  5100               	movf	Port_SetType@Output& (0+255),w,b
 14860  011CF2  A4D8               	btfss	status,2,c
 14861  011CF4  0012               	return	
 14862                           
 14863                           ; BSR set to: 1
 14864                           ;Port.c: 527: {
 14865                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
 14866  011CF6  0100               	movlb	0	; () banked
 14867  011CF8  EE20 F002          	lfsr	2,2
 14868  011CFC  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14869  011CFE  26D9               	addwf	fsr2l,f,c
 14870  011D00  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14871  011D02  22DA               	addwfc	fsr2h,f,c
 14872  011D04  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14873  011D08  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14874  011D0C  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14875  011D10  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14876  011D14  0E00               	movlw	0
 14877  011D16  6EDF               	movwf	indf2,c
 14878                           
 14879                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
 14880  011D18  0100               	movlb	0	; () banked
 14881  011D1A  EE20 F004          	lfsr	2,4
 14882  011D1E  D036               	goto	L21
 14883  011D20                     
 14884                           ; BSR set to: 0
 14885                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
 14886                           
 14887                           ; BSR set to: 0
 14888  011D20  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14889  011D24  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14890  011D28  0E02               	movlw	2
 14891  011D2A  0100               	movlb	0	; () banked
 14892  011D2C  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14893  011D2E  EC34  F0AE         	call	_Port_CheckPortType	;wreg free
 14894  011D32  0101               	movlb	1	; () banked
 14895  011D34  6F00               	movwf	Port_SetType@Output& (0+255),b
 14896  011D36  0101               	movlb	1	; () banked
 14897  011D38  5100               	movf	Port_SetType@Output& (0+255),w,b
 14898  011D3A  A4D8               	btfss	status,2,c
 14899  011D3C  0012               	return	
 14900                           
 14901                           ; BSR set to: 1
 14902                           ;Port.c: 538: {
 14903                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
 14904  011D3E  0100               	movlb	0	; () banked
 14905  011D40  EE20 F002          	lfsr	2,2
 14906  011D44  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14907  011D46  26D9               	addwf	fsr2l,f,c
 14908  011D48  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14909  011D4A  22DA               	addwfc	fsr2h,f,c
 14910  011D4C  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14911  011D50  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14912  011D54  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14913  011D58  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14914  011D5C  0EFF               	movlw	255
 14915  011D5E  6EDF               	movwf	indf2,c
 14916                           
 14917                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
 14918  011D60  0100               	movlb	0	; () banked
 14919  011D62  EE20 F004          	lfsr	2,4
 14920  011D66  D7AA               	goto	L11
 14921  011D68                     
 14922                           ; BSR set to: 0
 14923                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
 14924                           
 14925                           ; BSR set to: 0
 14926  011D68  C0F4  F0F0         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
 14927  011D6C  C0F5  F0F1         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
 14928  011D70  0E00               	movlw	0
 14929  011D72  0100               	movlb	0	; () banked
 14930  011D74  6FF2               	movwf	Port_CheckPortType@pDrive& (0+255),b
 14931  011D76  EC34  F0AE         	call	_Port_CheckPortType	;wreg free
 14932  011D7A  0101               	movlb	1	; () banked
 14933  011D7C  6F00               	movwf	Port_SetType@Output& (0+255),b
 14934  011D7E  0101               	movlb	1	; () banked
 14935  011D80  5100               	movf	Port_SetType@Output& (0+255),w,b
 14936  011D82  A4D8               	btfss	status,2,c
 14937  011D84  0012               	return	
 14938                           
 14939                           ; BSR set to: 1
 14940                           ;Port.c: 549: {
 14941                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
 14942  011D86  0100               	movlb	0	; () banked
 14943  011D88  EE20 F002          	lfsr	2,2
 14944  011D8C                     L21:
 14945  011D8C  51F4               	movf	Port_SetType@pInput& (0+255),w,b
 14946  011D8E  26D9               	addwf	fsr2l,f,c
 14947  011D90  51F5               	movf	(Port_SetType@pInput+1)& (0+255),w,b
 14948  011D92  22DA               	addwfc	fsr2h,f,c
 14949  011D94  CFDE F0F7          	movff	postinc2,??_Port_SetType
 14950  011D98  CFDD F0F8          	movff	postdec2,??_Port_SetType+1
 14951  011D9C  C0F7  FFD9         	movff	??_Port_SetType,fsr2l
 14952  011DA0  C0F8  FFDA         	movff	??_Port_SetType+1,fsr2h
 14953  011DA4  0E00               	movlw	0
 14954  011DA6                     L10:
 14955  011DA6  6EDF               	movwf	indf2,c
 14956                           
 14957                           ;Port.c: 552: }
 14958  011DA8  D00E               	goto	l511
 14959  011DAA                     l509:
 14960                           
 14961                           ; BSR set to: 0
 14962  011DAA  0100               	movlb	0	; () banked
 14963  011DAC  51F6               	movf	Port_SetType@pType& (0+255),w,b
 14964                           
 14965                           ; Switch size 1, requested type "space"
 14966                           ; Number of cases is 4, Range of values is 0 to 3
 14967                           ; switch strategies available:
 14968                           ; Name         Instructions Cycles
 14969                           ; simple_byte           13     7 (average)
 14970                           ;	Chosen strategy is simple_byte
 14971  011DAE  0A00               	xorlw	0	; case 0
 14972  011DB0  B4D8               	btfsc	status,2,c
 14973  011DB2  D781               	goto	l510
 14974  011DB4  0A01               	xorlw	1	; case 1
 14975  011DB6  B4D8               	btfsc	status,2,c
 14976  011DB8  D78F               	goto	l512
 14977  011DBA  0A03               	xorlw	3	; case 2
 14978  011DBC  B4D8               	btfsc	status,2,c
 14979  011DBE  D7B0               	goto	l516
 14980  011DC0  0A01               	xorlw	1	; case 3
 14981  011DC2  B4D8               	btfsc	status,2,c
 14982  011DC4  D7D1               	goto	l519
 14983  011DC6                     l511:
 14984                           
 14985                           ; BSR set to: 0
 14986                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
 14987                           
 14988                           ; BSR set to: 0
 14989  011DC6  0E08               	movlw	8
 14990  011DC8  0100               	movlb	0	; () banked
 14991  011DCA  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 14992  011DCC  0100               	movlb	0	; () banked
 14993  011DCE  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 14994  011DD0  0E00               	movlw	0
 14995  011DD2  0100               	movlb	0	; () banked
 14996  011DD4  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 14997  011DD6  0100               	movlb	0	; () banked
 14998  011DD8  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 14999  011DDA  0E00               	movlw	0
 15000  011DDC  0100               	movlb	0	; () banked
 15001  011DDE  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15002  011DE0  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15003  011DE4  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15004                           
 15005                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
 15006  011DE8  0E08               	movlw	8
 15007  011DEA  0100               	movlb	0	; () banked
 15008  011DEC  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15009  011DEE  0100               	movlb	0	; () banked
 15010  011DF0  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15011  011DF2  0E00               	movlw	0
 15012  011DF4  0100               	movlb	0	; () banked
 15013  011DF6  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15014  011DF8  0100               	movlb	0	; () banked
 15015  011DFA  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15016  011DFC  0E01               	movlw	1
 15017  011DFE  0100               	movlb	0	; () banked
 15018  011E00  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15019  011E02  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15020  011E06  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15021                           
 15022                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
 15023  011E0A  0E08               	movlw	8
 15024  011E0C  0100               	movlb	0	; () banked
 15025  011E0E  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15026  011E10  0100               	movlb	0	; () banked
 15027  011E12  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15028  011E14  0E00               	movlw	0
 15029  011E16  0100               	movlb	0	; () banked
 15030  011E18  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15031  011E1A  0100               	movlb	0	; () banked
 15032  011E1C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15033  011E1E  0E02               	movlw	2
 15034  011E20  0100               	movlb	0	; () banked
 15035  011E22  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15036  011E24  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15037  011E28  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15038                           
 15039                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
 15040  011E2C  0E08               	movlw	8
 15041  011E2E  0100               	movlb	0	; () banked
 15042  011E30  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15043  011E32  0100               	movlb	0	; () banked
 15044  011E34  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15045  011E36  0E00               	movlw	0
 15046  011E38  0100               	movlb	0	; () banked
 15047  011E3A  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15048  011E3C  0100               	movlb	0	; () banked
 15049  011E3E  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15050  011E40  0E03               	movlw	3
 15051  011E42  0100               	movlb	0	; () banked
 15052  011E44  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15053  011E46  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15054  011E4A  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15055                           
 15056                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
 15057  011E4E  0E08               	movlw	8
 15058  011E50  0100               	movlb	0	; () banked
 15059  011E52  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15060  011E54  0100               	movlb	0	; () banked
 15061  011E56  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15062  011E58  0E00               	movlw	0
 15063  011E5A  0100               	movlb	0	; () banked
 15064  011E5C  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15065  011E5E  0100               	movlb	0	; () banked
 15066  011E60  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15067  011E62  0E04               	movlw	4
 15068  011E64  0100               	movlb	0	; () banked
 15069  011E66  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15070  011E68  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15071  011E6C  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15072                           
 15073                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
 15074  011E70  0E08               	movlw	8
 15075  011E72  0100               	movlb	0	; () banked
 15076  011E74  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15077  011E76  0100               	movlb	0	; () banked
 15078  011E78  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15079  011E7A  0E00               	movlw	0
 15080  011E7C  0100               	movlb	0	; () banked
 15081  011E7E  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15082  011E80  0100               	movlb	0	; () banked
 15083  011E82  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15084  011E84  0E05               	movlw	5
 15085  011E86  0100               	movlb	0	; () banked
 15086  011E88  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15087  011E8A  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15088  011E8E  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15089                           
 15090                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
 15091  011E92  0E08               	movlw	8
 15092  011E94  0100               	movlb	0	; () banked
 15093  011E96  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15094  011E98  0100               	movlb	0	; () banked
 15095  011E9A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15096  011E9C  0E00               	movlw	0
 15097  011E9E  0100               	movlb	0	; () banked
 15098  011EA0  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15099  011EA2  0100               	movlb	0	; () banked
 15100  011EA4  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15101  011EA6  0E06               	movlw	6
 15102  011EA8  0100               	movlb	0	; () banked
 15103  011EAA  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15104  011EAC  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15105  011EB0  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15106                           
 15107                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
 15108  011EB4  0E08               	movlw	8
 15109  011EB6  0100               	movlb	0	; () banked
 15110  011EB8  25F4               	addwf	Port_SetType@pInput& (0+255),w,b
 15111  011EBA  0100               	movlb	0	; () banked
 15112  011EBC  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 15113  011EBE  0E00               	movlw	0
 15114  011EC0  0100               	movlb	0	; () banked
 15115  011EC2  21F5               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
 15116  011EC4  0100               	movlb	0	; () banked
 15117  011EC6  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 15118  011EC8  0E07               	movlw	7
 15119  011ECA  0100               	movlb	0	; () banked
 15120  011ECC  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 15121  011ECE  C0F6  F0CC         	movff	Port_SetType@pType,Word_SetPair@pValue
 15122  011ED2  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 15123  011ED6  0012               	return	
 15124  011ED8                     __end_of_Port_SetType:
 15125                           	opt stack 0
 15126                           tblptru	equ	0xFF8
 15127                           tblptrh	equ	0xFF7
 15128                           tblptrl	equ	0xFF6
 15129                           tablat	equ	0xFF5
 15130                           prodh	equ	0xFF4
 15131                           prodl	equ	0xFF3
 15132                           intcon	equ	0xFF2
 15133                           postinc0	equ	0xFEE
 15134                           wreg	equ	0xFE8
 15135                           indf1	equ	0xFE7
 15136                           postdec1	equ	0xFE5
 15137                           fsr1h	equ	0xFE2
 15138                           fsr1l	equ	0xFE1
 15139                           indf2	equ	0xFDF
 15140                           postinc2	equ	0xFDE
 15141                           postdec2	equ	0xFDD
 15142                           fsr2h	equ	0xFDA
 15143                           fsr2l	equ	0xFD9
 15144                           status	equ	0xFD8
 15145                           
 15146 ;; *************** function _Port_CheckPortType *****************
 15147 ;; Defined at:
 15148 ;;		line 138 in file "Library/Port.c"
 15149 ;; Parameters:    Size  Location     Type
 15150 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 15151 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15152 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15153 ;;  pDrive          1   56[BANK0 ] enum E6469
 15154 ;; Auto vars:     Size  Location     Type
 15155 ;;  Output          1   57[BANK0 ] enum E6475
 15156 ;; Return value:  Size  Location     Type
 15157 ;;                  1    wreg      enum E6475
 15158 ;; Registers used:
 15159 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15160 ;; Tracked objects:
 15161 ;;		On entry : 0/0
 15162 ;;		On exit  : 0/0
 15163 ;;		Unchanged: 0/0
 15164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15165 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15166 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15168 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15169 ;;Total ram usage:        4 bytes
 15170 ;; Hardware stack levels used:    1
 15171 ;; Hardware stack levels required when called:   13
 15172 ;; This function calls:
 15173 ;;		_Port_CheckQuadType
 15174 ;; This function is called by:
 15175 ;;		_Port_SetType
 15176 ;; This function uses a non-reentrant model
 15177 ;;
 15178                           
 15179                           	psect	text63
 15180  015C68                     __ptext63:
 15181                           	opt stack 0
 15182  015C68                     _Port_CheckPortType:
 15183                           	opt stack 14
 15184                           
 15185                           ;Port.c: 140: ePinError Output = ePinErrorState;
 15186                           
 15187                           ;incstack = 0
 15188  015C68  0E05               	movlw	5
 15189  015C6A  0100               	movlb	0	; () banked
 15190  015C6C  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15191                           
 15192                           ; BSR set to: 0
 15193                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
 15194  015C6E  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15195  015C72  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15196  015C76  0E00               	movlw	0
 15197  015C78  0100               	movlb	0	; () banked
 15198  015C7A  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15199  015C7C  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15200  015C80  ECC6  F0AC         	call	_Port_CheckQuadType	;wreg free
 15201  015C84  0100               	movlb	0	; () banked
 15202  015C86  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15203  015C88  0100               	movlb	0	; () banked
 15204  015C8A  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15205  015C8C  A4D8               	btfss	status,2,c
 15206  015C8E  D00D               	goto	l397
 15207                           
 15208                           ; BSR set to: 0
 15209                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
 15210  015C90  C0F0  F0E9         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
 15211  015C94  C0F1  F0EA         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
 15212  015C98  0E01               	movlw	1
 15213  015C9A  0100               	movlb	0	; () banked
 15214  015C9C  6FEB               	movwf	Port_CheckQuadType@pQuad& (0+255),b
 15215  015C9E  C0F2  F0EC         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
 15216  015CA2  ECC6  F0AC         	call	_Port_CheckQuadType	;wreg free
 15217  015CA6  0100               	movlb	0	; () banked
 15218  015CA8  6FF3               	movwf	Port_CheckPortType@Output& (0+255),b
 15219  015CAA                     l397:
 15220                           
 15221                           ; BSR set to: 0
 15222                           ;Port.c: 146: return Output;
 15223                           
 15224                           ; BSR set to: 0
 15225  015CAA  0100               	movlb	0	; () banked
 15226  015CAC  51F3               	movf	Port_CheckPortType@Output& (0+255),w,b
 15227  015CAE  0012               	return	
 15228  015CB0                     __end_of_Port_CheckPortType:
 15229                           	opt stack 0
 15230                           tblptru	equ	0xFF8
 15231                           tblptrh	equ	0xFF7
 15232                           tblptrl	equ	0xFF6
 15233                           tablat	equ	0xFF5
 15234                           prodh	equ	0xFF4
 15235                           prodl	equ	0xFF3
 15236                           intcon	equ	0xFF2
 15237                           postinc0	equ	0xFEE
 15238                           wreg	equ	0xFE8
 15239                           indf1	equ	0xFE7
 15240                           postdec1	equ	0xFE5
 15241                           fsr1h	equ	0xFE2
 15242                           fsr1l	equ	0xFE1
 15243                           indf2	equ	0xFDF
 15244                           postinc2	equ	0xFDE
 15245                           postdec2	equ	0xFDD
 15246                           fsr2h	equ	0xFDA
 15247                           fsr2l	equ	0xFD9
 15248                           status	equ	0xFD8
 15249                           
 15250 ;; *************** function _Port_Set *****************
 15251 ;; Defined at:
 15252 ;;		line 570 in file "Library/Port.c"
 15253 ;; Parameters:    Size  Location     Type
 15254 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15255 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 15256 ;;		 -> PortD(10), PortC(10), PortF(10), 
 15257 ;;  pValue          1   17[BANK0 ] unsigned char 
 15258 ;; Auto vars:     Size  Location     Type
 15259 ;;  TypeActual      2   36[BANK0 ] unsigned short 
 15260 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
 15261 ;;  Type            1   38[BANK0 ] enum E6795
 15262 ;; Return value:  Size  Location     Type
 15263 ;;                  1    wreg      void 
 15264 ;; Registers used:
 15265 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15266 ;; Tracked objects:
 15267 ;;		On entry : 0/0
 15268 ;;		On exit  : 0/0
 15269 ;;		Unchanged: 0/0
 15270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15271 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15272 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15273 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15274 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15275 ;;Total ram usage:       24 bytes
 15276 ;; Hardware stack levels used:    1
 15277 ;; Hardware stack levels required when called:   10
 15278 ;; This function calls:
 15279 ;;		_Byte_SetByte
 15280 ;;		_Word_GetPair
 15281 ;; This function is called by:
 15282 ;;		_Port_Init
 15283 ;;		_Port_Toggle
 15284 ;; This function uses a non-reentrant model
 15285 ;;
 15286                           
 15287                           	psect	text64
 15288  01141A                     __ptext64:
 15289                           	opt stack 0
 15290  01141A                     _Port_Set:
 15291                           	opt stack 17
 15292                           
 15293                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
 15294                           
 15295                           ; BSR set to: 0
 15296                           ;incstack = 0
 15297  01141A  0E08               	movlw	8
 15298  01141C  0100               	movlb	0	; () banked
 15299  01141E  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15300  011420  0100               	movlb	0	; () banked
 15301  011422  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15302  011424  0E00               	movlw	0
 15303  011426  0100               	movlb	0	; () banked
 15304  011428  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15305  01142A  0100               	movlb	0	; () banked
 15306  01142C  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15307  01142E  0E00               	movlw	0
 15308  011430  0100               	movlb	0	; () banked
 15309  011432  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15310  011434  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15311  011438  0100               	movlb	0	; () banked
 15312  01143A  6FE0               	movwf	Port_Set@Type& (0+255),b
 15313                           
 15314                           ; BSR set to: 0
 15315                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
 15316  01143C  0100               	movlb	0	; () banked
 15317  01143E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15318  011440  0100               	movlb	0	; () banked
 15319  011442  6FCC               	movwf	??_Port_Set& (0+255),b
 15320  011444  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15321  011446  0E0E               	movlw	14
 15322  011448                     u9755:
 15323  011448  90D8               	bcf	status,0,c
 15324  01144A  0100               	movlb	0	; () banked
 15325  01144C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15326  01144E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15327  011450  2EE8               	decfsz	wreg,f,c
 15328  011452  D7FA               	goto	u9755
 15329  011454  0100               	movlb	0	; () banked
 15330  011456  51E0               	movf	Port_Set@Type& (0+255),w,b
 15331  011458  0100               	movlb	0	; () banked
 15332  01145A  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15333  01145C  6BCF               	clrf	(??_Port_Set+3)& (0+255),b
 15334  01145E  0E0C               	movlw	12
 15335  011460                     u9765:
 15336  011460  90D8               	bcf	status,0,c
 15337  011462  0100               	movlb	0	; () banked
 15338  011464  37CE               	rlcf	(??_Port_Set+2)& (0+255),f,b
 15339  011466  37CF               	rlcf	(??_Port_Set+3)& (0+255),f,b
 15340  011468  2EE8               	decfsz	wreg,f,c
 15341  01146A  D7FA               	goto	u9765
 15342  01146C  0100               	movlb	0	; () banked
 15343  01146E  51E0               	movf	Port_Set@Type& (0+255),w,b
 15344  011470  0100               	movlb	0	; () banked
 15345  011472  6FD0               	movwf	(??_Port_Set+4)& (0+255),b
 15346  011474  6BD1               	clrf	(??_Port_Set+5)& (0+255),b
 15347  011476  0E0A               	movlw	10
 15348  011478                     u9775:
 15349  011478  90D8               	bcf	status,0,c
 15350  01147A  0100               	movlb	0	; () banked
 15351  01147C  37D0               	rlcf	(??_Port_Set+4)& (0+255),f,b
 15352  01147E  37D1               	rlcf	(??_Port_Set+5)& (0+255),f,b
 15353  011480  2EE8               	decfsz	wreg,f,c
 15354  011482  D7FA               	goto	u9775
 15355  011484  0100               	movlb	0	; () banked
 15356  011486  51E0               	movf	Port_Set@Type& (0+255),w,b
 15357  011488  0100               	movlb	0	; () banked
 15358  01148A  6FD3               	movwf	(??_Port_Set+7)& (0+255),b
 15359  01148C  6BD2               	clrf	(??_Port_Set+6)& (0+255),b
 15360  01148E  0100               	movlb	0	; () banked
 15361  011490  51E0               	movf	Port_Set@Type& (0+255),w,b
 15362  011492  0100               	movlb	0	; () banked
 15363  011494  6FD4               	movwf	(??_Port_Set+8)& (0+255),b
 15364  011496  6BD5               	clrf	(??_Port_Set+9)& (0+255),b
 15365  011498  0E06               	movlw	6
 15366  01149A                     u9785:
 15367  01149A  90D8               	bcf	status,0,c
 15368  01149C  0100               	movlb	0	; () banked
 15369  01149E  37D4               	rlcf	(??_Port_Set+8)& (0+255),f,b
 15370  0114A0  37D5               	rlcf	(??_Port_Set+9)& (0+255),f,b
 15371  0114A2  2EE8               	decfsz	wreg,f,c
 15372  0114A4  D7FA               	goto	u9785
 15373  0114A6  0100               	movlb	0	; () banked
 15374  0114A8  51E0               	movf	Port_Set@Type& (0+255),w,b
 15375  0114AA  0100               	movlb	0	; () banked
 15376  0114AC  6FD6               	movwf	(??_Port_Set+10)& (0+255),b
 15377  0114AE  6BD7               	clrf	(??_Port_Set+11)& (0+255),b
 15378  0114B0  0100               	movlb	0	; () banked
 15379  0114B2  3BD6               	swapf	(??_Port_Set+10)& (0+255),f,b
 15380  0114B4  3BD7               	swapf	(??_Port_Set+11)& (0+255),f,b
 15381  0114B6  0EF0               	movlw	240
 15382  0114B8  17D7               	andwf	(??_Port_Set+11)& (0+255),f,b
 15383  0114BA  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15384  0114BC  0B0F               	andlw	15
 15385  0114BE  13D7               	iorwf	(??_Port_Set+11)& (0+255),f,b
 15386  0114C0  0EF0               	movlw	240
 15387  0114C2  17D6               	andwf	(??_Port_Set+10)& (0+255),f,b
 15388  0114C4  0100               	movlb	0	; () banked
 15389  0114C6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15390  0114C8  0100               	movlb	0	; () banked
 15391  0114CA  6FD8               	movwf	(??_Port_Set+12)& (0+255),b
 15392  0114CC  6BD9               	clrf	(??_Port_Set+13)& (0+255),b
 15393  0114CE  0100               	movlb	0	; () banked
 15394  0114D0  90D8               	bcf	status,0,c
 15395  0114D2  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15396  0114D4  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15397  0114D6  0100               	movlb	0	; () banked
 15398  0114D8  90D8               	bcf	status,0,c
 15399  0114DA  37D8               	rlcf	(??_Port_Set+12)& (0+255),f,b
 15400  0114DC  37D9               	rlcf	(??_Port_Set+13)& (0+255),f,b
 15401  0114DE  0100               	movlb	0	; () banked
 15402  0114E0  51E0               	movf	Port_Set@Type& (0+255),w,b
 15403  0114E2  0100               	movlb	0	; () banked
 15404  0114E4  6FDA               	movwf	(??_Port_Set+14)& (0+255),b
 15405  0114E6  6BDB               	clrf	(??_Port_Set+15)& (0+255),b
 15406  0114E8  0100               	movlb	0	; () banked
 15407  0114EA  51D8               	movf	(??_Port_Set+12)& (0+255),w,b
 15408  0114EC  0100               	movlb	0	; () banked
 15409  0114EE  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15410  0114F0  0100               	movlb	0	; () banked
 15411  0114F2  51D9               	movf	(??_Port_Set+13)& (0+255),w,b
 15412  0114F4  0100               	movlb	0	; () banked
 15413  0114F6  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15414  0114F8  0100               	movlb	0	; () banked
 15415  0114FA  51D6               	movf	(??_Port_Set+10)& (0+255),w,b
 15416  0114FC  0100               	movlb	0	; () banked
 15417  0114FE  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15418  011500  0100               	movlb	0	; () banked
 15419  011502  51D7               	movf	(??_Port_Set+11)& (0+255),w,b
 15420  011504  0100               	movlb	0	; () banked
 15421  011506  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15422  011508  0100               	movlb	0	; () banked
 15423  01150A  51D4               	movf	(??_Port_Set+8)& (0+255),w,b
 15424  01150C  0100               	movlb	0	; () banked
 15425  01150E  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15426  011510  0100               	movlb	0	; () banked
 15427  011512  51D5               	movf	(??_Port_Set+9)& (0+255),w,b
 15428  011514  0100               	movlb	0	; () banked
 15429  011516  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15430  011518  0100               	movlb	0	; () banked
 15431  01151A  51D2               	movf	(??_Port_Set+6)& (0+255),w,b
 15432  01151C  0100               	movlb	0	; () banked
 15433  01151E  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15434  011520  0100               	movlb	0	; () banked
 15435  011522  51D3               	movf	(??_Port_Set+7)& (0+255),w,b
 15436  011524  0100               	movlb	0	; () banked
 15437  011526  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15438  011528  0100               	movlb	0	; () banked
 15439  01152A  51D0               	movf	(??_Port_Set+4)& (0+255),w,b
 15440  01152C  0100               	movlb	0	; () banked
 15441  01152E  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15442  011530  0100               	movlb	0	; () banked
 15443  011532  51D1               	movf	(??_Port_Set+5)& (0+255),w,b
 15444  011534  0100               	movlb	0	; () banked
 15445  011536  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15446  011538  0100               	movlb	0	; () banked
 15447  01153A  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15448  01153C  0100               	movlb	0	; () banked
 15449  01153E  13DA               	iorwf	(??_Port_Set+14)& (0+255),f,b
 15450  011540  0100               	movlb	0	; () banked
 15451  011542  51CF               	movf	(??_Port_Set+3)& (0+255),w,b
 15452  011544  0100               	movlb	0	; () banked
 15453  011546  13DB               	iorwf	(??_Port_Set+15)& (0+255),f,b
 15454  011548  0100               	movlb	0	; () banked
 15455  01154A  51CC               	movf	??_Port_Set& (0+255),w,b
 15456  01154C  0100               	movlb	0	; () banked
 15457  01154E  11DA               	iorwf	(??_Port_Set+14)& (0+255),w,b
 15458  011550  0100               	movlb	0	; () banked
 15459  011552  6FDC               	movwf	Port_Set@TypeRequired& (0+255),b
 15460  011554  0100               	movlb	0	; () banked
 15461  011556  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15462  011558  0100               	movlb	0	; () banked
 15463  01155A  11DB               	iorwf	(??_Port_Set+15)& (0+255),w,b
 15464  01155C  0100               	movlb	0	; () banked
 15465  01155E  6FDD               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
 15466                           
 15467                           ; BSR set to: 0
 15468                           ;Port.c: 574: UINT16 TypeActual = Type;
 15469  011560  C0E0  F0DE         	movff	Port_Set@Type,Port_Set@TypeActual
 15470  011564  0100               	movlb	0	; () banked
 15471  011566  6BDF               	clrf	(Port_Set@TypeActual+1)& (0+255),b
 15472                           
 15473                           ; BSR set to: 0
 15474                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
 15475  011568  0E08               	movlw	8
 15476  01156A  0100               	movlb	0	; () banked
 15477  01156C  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15478  01156E  0100               	movlb	0	; () banked
 15479  011570  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15480  011572  0E00               	movlw	0
 15481  011574  0100               	movlb	0	; () banked
 15482  011576  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15483  011578  0100               	movlb	0	; () banked
 15484  01157A  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15485  01157C  0E01               	movlw	1
 15486  01157E  0100               	movlb	0	; () banked
 15487  011580  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15488  011582  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15489  011586  0100               	movlb	0	; () banked
 15490  011588  6FCC               	movwf	??_Port_Set& (0+255),b
 15491  01158A  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15492  01158C  0100               	movlb	0	; () banked
 15493  01158E  90D8               	bcf	status,0,c
 15494  011590  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15495  011592  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15496  011594  0100               	movlb	0	; () banked
 15497  011596  90D8               	bcf	status,0,c
 15498  011598  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15499  01159A  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15500  01159C  0100               	movlb	0	; () banked
 15501  01159E  51CC               	movf	??_Port_Set& (0+255),w,b
 15502  0115A0  0100               	movlb	0	; () banked
 15503  0115A2  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15504  0115A4  0100               	movlb	0	; () banked
 15505  0115A6  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15506  0115A8  0100               	movlb	0	; () banked
 15507  0115AA  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15508                           
 15509                           ; BSR set to: 0
 15510                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
 15511  0115AC  0E08               	movlw	8
 15512  0115AE  0100               	movlb	0	; () banked
 15513  0115B0  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15514  0115B2  0100               	movlb	0	; () banked
 15515  0115B4  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15516  0115B6  0E00               	movlw	0
 15517  0115B8  0100               	movlb	0	; () banked
 15518  0115BA  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15519  0115BC  0100               	movlb	0	; () banked
 15520  0115BE  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15521  0115C0  0E02               	movlw	2
 15522  0115C2  0100               	movlb	0	; () banked
 15523  0115C4  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15524  0115C6  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15525  0115CA  0100               	movlb	0	; () banked
 15526  0115CC  6FCC               	movwf	??_Port_Set& (0+255),b
 15527  0115CE  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15528  0115D0  0100               	movlb	0	; () banked
 15529  0115D2  3BCC               	swapf	??_Port_Set& (0+255),f,b
 15530  0115D4  3BCD               	swapf	(??_Port_Set+1)& (0+255),f,b
 15531  0115D6  0EF0               	movlw	240
 15532  0115D8  17CD               	andwf	(??_Port_Set+1)& (0+255),f,b
 15533  0115DA  51CC               	movf	??_Port_Set& (0+255),w,b
 15534  0115DC  0B0F               	andlw	15
 15535  0115DE  13CD               	iorwf	(??_Port_Set+1)& (0+255),f,b
 15536  0115E0  0EF0               	movlw	240
 15537  0115E2  17CC               	andwf	??_Port_Set& (0+255),f,b
 15538  0115E4  0100               	movlb	0	; () banked
 15539  0115E6  51CC               	movf	??_Port_Set& (0+255),w,b
 15540  0115E8  0100               	movlb	0	; () banked
 15541  0115EA  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15542  0115EC  0100               	movlb	0	; () banked
 15543  0115EE  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15544  0115F0  0100               	movlb	0	; () banked
 15545  0115F2  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15546                           
 15547                           ; BSR set to: 0
 15548                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
 15549  0115F4  0E08               	movlw	8
 15550  0115F6  0100               	movlb	0	; () banked
 15551  0115F8  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15552  0115FA  0100               	movlb	0	; () banked
 15553  0115FC  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15554  0115FE  0E00               	movlw	0
 15555  011600  0100               	movlb	0	; () banked
 15556  011602  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15557  011604  0100               	movlb	0	; () banked
 15558  011606  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15559  011608  0E03               	movlw	3
 15560  01160A  0100               	movlb	0	; () banked
 15561  01160C  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15562  01160E  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15563  011612  0100               	movlb	0	; () banked
 15564  011614  6FCC               	movwf	??_Port_Set& (0+255),b
 15565  011616  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15566  011618  0E06               	movlw	6
 15567  01161A                     u9795:
 15568  01161A  90D8               	bcf	status,0,c
 15569  01161C  0100               	movlb	0	; () banked
 15570  01161E  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15571  011620  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15572  011622  2EE8               	decfsz	wreg,f,c
 15573  011624  D7FA               	goto	u9795
 15574  011626  0100               	movlb	0	; () banked
 15575  011628  51CC               	movf	??_Port_Set& (0+255),w,b
 15576  01162A  0100               	movlb	0	; () banked
 15577  01162C  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15578  01162E  0100               	movlb	0	; () banked
 15579  011630  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15580  011632  0100               	movlb	0	; () banked
 15581  011634  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15582                           
 15583                           ; BSR set to: 0
 15584                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
 15585  011636  0E08               	movlw	8
 15586  011638  0100               	movlb	0	; () banked
 15587  01163A  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15588  01163C  0100               	movlb	0	; () banked
 15589  01163E  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15590  011640  0E00               	movlw	0
 15591  011642  0100               	movlb	0	; () banked
 15592  011644  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15593  011646  0100               	movlb	0	; () banked
 15594  011648  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15595  01164A  0E04               	movlw	4
 15596  01164C  0100               	movlb	0	; () banked
 15597  01164E  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15598  011650  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15599  011654  0100               	movlb	0	; () banked
 15600  011656  6FCC               	movwf	??_Port_Set& (0+255),b
 15601  011658  0100               	movlb	0	; () banked
 15602  01165A  51CC               	movf	??_Port_Set& (0+255),w,b
 15603  01165C  0100               	movlb	0	; () banked
 15604  01165E  6FCE               	movwf	(??_Port_Set+2)& (0+255),b
 15605  011660  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15606  011662  0100               	movlb	0	; () banked
 15607  011664  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15608  011666  0100               	movlb	0	; () banked
 15609  011668  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15610  01166A  0100               	movlb	0	; () banked
 15611  01166C  51CE               	movf	(??_Port_Set+2)& (0+255),w,b
 15612  01166E  0100               	movlb	0	; () banked
 15613  011670  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15614                           
 15615                           ; BSR set to: 0
 15616                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
 15617  011672  0E08               	movlw	8
 15618  011674  0100               	movlb	0	; () banked
 15619  011676  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15620  011678  0100               	movlb	0	; () banked
 15621  01167A  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15622  01167C  0E00               	movlw	0
 15623  01167E  0100               	movlb	0	; () banked
 15624  011680  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15625  011682  0100               	movlb	0	; () banked
 15626  011684  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15627  011686  0E05               	movlw	5
 15628  011688  0100               	movlb	0	; () banked
 15629  01168A  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15630  01168C  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15631  011690  0100               	movlb	0	; () banked
 15632  011692  6FCC               	movwf	??_Port_Set& (0+255),b
 15633  011694  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15634  011696  0E0A               	movlw	10
 15635  011698                     u9805:
 15636  011698  90D8               	bcf	status,0,c
 15637  01169A  0100               	movlb	0	; () banked
 15638  01169C  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15639  01169E  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15640  0116A0  2EE8               	decfsz	wreg,f,c
 15641  0116A2  D7FA               	goto	u9805
 15642  0116A4  0100               	movlb	0	; () banked
 15643  0116A6  51CC               	movf	??_Port_Set& (0+255),w,b
 15644  0116A8  0100               	movlb	0	; () banked
 15645  0116AA  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15646  0116AC  0100               	movlb	0	; () banked
 15647  0116AE  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15648  0116B0  0100               	movlb	0	; () banked
 15649  0116B2  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15650                           
 15651                           ; BSR set to: 0
 15652                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
 15653  0116B4  0E08               	movlw	8
 15654  0116B6  0100               	movlb	0	; () banked
 15655  0116B8  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15656  0116BA  0100               	movlb	0	; () banked
 15657  0116BC  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15658  0116BE  0E00               	movlw	0
 15659  0116C0  0100               	movlb	0	; () banked
 15660  0116C2  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15661  0116C4  0100               	movlb	0	; () banked
 15662  0116C6  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15663  0116C8  0E06               	movlw	6
 15664  0116CA  0100               	movlb	0	; () banked
 15665  0116CC  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15666  0116CE  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15667  0116D2  0100               	movlb	0	; () banked
 15668  0116D4  6FCC               	movwf	??_Port_Set& (0+255),b
 15669  0116D6  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15670  0116D8  0E0C               	movlw	12
 15671  0116DA                     u9815:
 15672  0116DA  90D8               	bcf	status,0,c
 15673  0116DC  0100               	movlb	0	; () banked
 15674  0116DE  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15675  0116E0  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15676  0116E2  2EE8               	decfsz	wreg,f,c
 15677  0116E4  D7FA               	goto	u9815
 15678  0116E6  0100               	movlb	0	; () banked
 15679  0116E8  51CC               	movf	??_Port_Set& (0+255),w,b
 15680  0116EA  0100               	movlb	0	; () banked
 15681  0116EC  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15682  0116EE  0100               	movlb	0	; () banked
 15683  0116F0  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15684  0116F2  0100               	movlb	0	; () banked
 15685  0116F4  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15686                           
 15687                           ; BSR set to: 0
 15688                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
 15689  0116F6  0E08               	movlw	8
 15690  0116F8  0100               	movlb	0	; () banked
 15691  0116FA  25C9               	addwf	Port_Set@pInput& (0+255),w,b
 15692  0116FC  0100               	movlb	0	; () banked
 15693  0116FE  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 15694  011700  0E00               	movlw	0
 15695  011702  0100               	movlb	0	; () banked
 15696  011704  21CA               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
 15697  011706  0100               	movlb	0	; () banked
 15698  011708  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15699  01170A  0E07               	movlw	7
 15700  01170C  0100               	movlb	0	; () banked
 15701  01170E  6FC8               	movwf	Word_GetPair@pPair& (0+255),b
 15702  011710  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 15703  011714  0100               	movlb	0	; () banked
 15704  011716  6FCC               	movwf	??_Port_Set& (0+255),b
 15705  011718  6BCD               	clrf	(??_Port_Set+1)& (0+255),b
 15706  01171A  0E0E               	movlw	14
 15707  01171C                     u9825:
 15708  01171C  90D8               	bcf	status,0,c
 15709  01171E  0100               	movlb	0	; () banked
 15710  011720  37CC               	rlcf	??_Port_Set& (0+255),f,b
 15711  011722  37CD               	rlcf	(??_Port_Set+1)& (0+255),f,b
 15712  011724  2EE8               	decfsz	wreg,f,c
 15713  011726  D7FA               	goto	u9825
 15714  011728  0100               	movlb	0	; () banked
 15715  01172A  51CC               	movf	??_Port_Set& (0+255),w,b
 15716  01172C  0100               	movlb	0	; () banked
 15717  01172E  13DE               	iorwf	Port_Set@TypeActual& (0+255),f,b
 15718  011730  0100               	movlb	0	; () banked
 15719  011732  51CD               	movf	(??_Port_Set+1)& (0+255),w,b
 15720  011734  0100               	movlb	0	; () banked
 15721  011736  13DF               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
 15722                           
 15723                           ;Port.c: 584: if (TypeRequired == TypeActual)
 15724  011738  0100               	movlb	0	; () banked
 15725  01173A  51DE               	movf	Port_Set@TypeActual& (0+255),w,b
 15726  01173C  0100               	movlb	0	; () banked
 15727  01173E  19DC               	xorwf	Port_Set@TypeRequired& (0+255),w,b
 15728  011740  E148               	bnz	l528
 15729  011742  0100               	movlb	0	; () banked
 15730  011744  51DF               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
 15731  011746  0100               	movlb	0	; () banked
 15732  011748  19DD               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
 15733  01174A  A4D8               	btfss	status,2,c
 15734  01174C  0012               	return	
 15735  01174E  D032               	goto	l526
 15736  011750                     
 15737                           ; BSR set to: 0
 15738                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
 15739                           
 15740                           ; BSR set to: 0
 15741  011750  0100               	movlb	0	; () banked
 15742  011752  EE20 F002          	lfsr	2,2
 15743  011756  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15744  011758  26D9               	addwf	fsr2l,f,c
 15745  01175A  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15746  01175C  22DA               	addwfc	fsr2h,f,c
 15747  01175E  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15748  011762  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15749  011766  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15750  01176A  EC31  F0B3         	call	_Byte_SetByte	;wreg free
 15751                           
 15752                           ;Port.c: 594: break;
 15753  01176E  0012               	return	
 15754  011770                     
 15755                           ;Port.c: 597: pValue = ~pValue;
 15756  011770  0100               	movlb	0	; () banked
 15757  011772  1FCB               	comf	Port_Set@pValue& (0+255),f,b
 15758                           
 15759                           ; BSR set to: 0
 15760                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
 15761  011774  0100               	movlb	0	; () banked
 15762  011776  EE20 F002          	lfsr	2,2
 15763  01177A  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15764  01177C  26D9               	addwf	fsr2l,f,c
 15765  01177E  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15766  011780  22DA               	addwfc	fsr2h,f,c
 15767  011782  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15768  011786  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15769  01178A  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15770  01178E  EC31  F0B3         	call	_Byte_SetByte	;wreg free
 15771                           
 15772                           ;Port.c: 599: break;
 15773  011792  0012               	return	
 15774  011794                     
 15775                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
 15776  011794  0100               	movlb	0	; () banked
 15777  011796  EE20 F004          	lfsr	2,4
 15778  01179A  51C9               	movf	Port_Set@pInput& (0+255),w,b
 15779  01179C  26D9               	addwf	fsr2l,f,c
 15780  01179E  51CA               	movf	(Port_Set@pInput+1)& (0+255),w,b
 15781  0117A0  22DA               	addwfc	fsr2h,f,c
 15782  0117A2  CFDE F0BA          	movff	postinc2,Byte_SetByte@pInput
 15783  0117A6  CFDD F0BB          	movff	postdec2,Byte_SetByte@pInput+1
 15784  0117AA  C0CB  F0BC         	movff	Port_Set@pValue,Byte_SetByte@pValue
 15785  0117AE  EC31  F0B3         	call	_Byte_SetByte	;wreg free
 15786                           
 15787                           ;Port.c: 606: }
 15788                           
 15789                           ;Port.c: 605: break;
 15790                           
 15791                           ;Port.c: 604: default:
 15792                           
 15793                           ;Port.c: 603: break;
 15794  0117B2  0012               	return	
 15795  0117B4                     l526:
 15796  0117B4  0100               	movlb	0	; () banked
 15797  0117B6  51E0               	movf	Port_Set@Type& (0+255),w,b
 15798                           
 15799                           ; Switch size 1, requested type "space"
 15800                           ; Number of cases is 4, Range of values is 0 to 3
 15801                           ; switch strategies available:
 15802                           ; Name         Instructions Cycles
 15803                           ; simple_byte           13     7 (average)
 15804                           ;	Chosen strategy is simple_byte
 15805  0117B8  0A00               	xorlw	0	; case 0
 15806  0117BA  B4D8               	btfsc	status,2,c
 15807  0117BC  0012               	return	
 15808  0117BE  0A01               	xorlw	1	; case 1
 15809  0117C0  B4D8               	btfsc	status,2,c
 15810  0117C2  D7C6               	goto	l529
 15811  0117C4  0A03               	xorlw	3	; case 2
 15812  0117C6  B4D8               	btfsc	status,2,c
 15813  0117C8  D7D3               	goto	l531
 15814  0117CA  0A01               	xorlw	1	; case 3
 15815  0117CC  A4D8               	btfss	status,2,c
 15816                           
 15817                           ; BSR set to: 0
 15818                           
 15819                           ; BSR set to: 0
 15820                           ;Port.c: 607: }
 15821  0117CE  0012               	return	
 15822  0117D0  D7E1               	goto	l532
 15823  0117D2                     l528:
 15824  0117D2  0012               	return		;funcret
 15825  0117D4                     __end_of_Port_Set:
 15826                           	opt stack 0
 15827                           tblptru	equ	0xFF8
 15828                           tblptrh	equ	0xFF7
 15829                           tblptrl	equ	0xFF6
 15830                           tablat	equ	0xFF5
 15831                           prodh	equ	0xFF4
 15832                           prodl	equ	0xFF3
 15833                           intcon	equ	0xFF2
 15834                           postinc0	equ	0xFEE
 15835                           wreg	equ	0xFE8
 15836                           indf1	equ	0xFE7
 15837                           postdec1	equ	0xFE5
 15838                           fsr1h	equ	0xFE2
 15839                           fsr1l	equ	0xFE1
 15840                           indf2	equ	0xFDF
 15841                           postinc2	equ	0xFDE
 15842                           postdec2	equ	0xFDD
 15843                           fsr2h	equ	0xFDA
 15844                           fsr2l	equ	0xFD9
 15845                           status	equ	0xFD8
 15846                           
 15847 ;; *************** function _Byte_SetByte *****************
 15848 ;; Defined at:
 15849 ;;		line 110 in file "Library/Types.c"
 15850 ;; Parameters:    Size  Location     Type
 15851 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 15852 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
 15853 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 15854 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 15855 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 15856 ;;		 -> NULL(0), 
 15857 ;;  pValue          1    2[BANK0 ] unsigned char 
 15858 ;; Auto vars:     Size  Location     Type
 15859 ;;		None
 15860 ;; Return value:  Size  Location     Type
 15861 ;;                  1    wreg      void 
 15862 ;; Registers used:
 15863 ;;		fsr2l, fsr2h
 15864 ;; Tracked objects:
 15865 ;;		On entry : 0/0
 15866 ;;		On exit  : 0/0
 15867 ;;		Unchanged: 0/0
 15868 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15869 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15870 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15871 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15872 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15873 ;;Total ram usage:        3 bytes
 15874 ;; Hardware stack levels used:    1
 15875 ;; Hardware stack levels required when called:    7
 15876 ;; This function calls:
 15877 ;;		Nothing
 15878 ;; This function is called by:
 15879 ;;		_Port_Set
 15880 ;;		_I2C_Init
 15881 ;; This function uses a non-reentrant model
 15882 ;;
 15883                           
 15884                           	psect	text65
 15885  016662                     __ptext65:
 15886                           	opt stack 0
 15887  016662                     _Byte_SetByte:
 15888                           	opt stack 19
 15889                           
 15890                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
 15891                           
 15892                           ;incstack = 0
 15893  016662  C0BA  FFD9         	movff	Byte_SetByte@pInput,fsr2l
 15894  016666  C0BB  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
 15895  01666A  C0BC  FFDF         	movff	Byte_SetByte@pValue,indf2
 15896  01666E  0012               	return		;funcret
 15897  016670                     __end_of_Byte_SetByte:
 15898                           	opt stack 0
 15899                           tblptru	equ	0xFF8
 15900                           tblptrh	equ	0xFF7
 15901                           tblptrl	equ	0xFF6
 15902                           tablat	equ	0xFF5
 15903                           prodh	equ	0xFF4
 15904                           prodl	equ	0xFF3
 15905                           intcon	equ	0xFF2
 15906                           postinc0	equ	0xFEE
 15907                           wreg	equ	0xFE8
 15908                           indf1	equ	0xFE7
 15909                           postdec1	equ	0xFE5
 15910                           fsr1h	equ	0xFE2
 15911                           fsr1l	equ	0xFE1
 15912                           indf2	equ	0xFDF
 15913                           postinc2	equ	0xFDE
 15914                           postdec2	equ	0xFDD
 15915                           fsr2h	equ	0xFDA
 15916                           fsr2l	equ	0xFD9
 15917                           status	equ	0xFD8
 15918                           
 15919 ;; *************** function _GetPortTRIS *****************
 15920 ;; Defined at:
 15921 ;;		line 67 in file "Library/Port.c"
 15922 ;; Parameters:    Size  Location     Type
 15923 ;;  pInput          1    wreg     enum E6786
 15924 ;; Auto vars:     Size  Location     Type
 15925 ;;  pInput          1    2[BANK0 ] enum E6786
 15926 ;; Return value:  Size  Location     Type
 15927 ;;                  2    0[BANK0 ] PTR struct Byte
 15928 ;; Registers used:
 15929 ;;		wreg, status,2, status,0
 15930 ;; Tracked objects:
 15931 ;;		On entry : 0/0
 15932 ;;		On exit  : 0/0
 15933 ;;		Unchanged: 0/0
 15934 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15935 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15936 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15937 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15938 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15939 ;;Total ram usage:        3 bytes
 15940 ;; Hardware stack levels used:    1
 15941 ;; Hardware stack levels required when called:    7
 15942 ;; This function calls:
 15943 ;;		Nothing
 15944 ;; This function is called by:
 15945 ;;		_Port_Init
 15946 ;; This function uses a non-reentrant model
 15947 ;;
 15948                           
 15949                           	psect	text66
 15950  014850                     __ptext66:
 15951                           	opt stack 0
 15952  014850                     _GetPortTRIS:
 15953                           	opt stack 20
 15954                           
 15955                           ;incstack = 0
 15956                           ;GetPortTRIS@pInput stored from wreg
 15957  014850  0100               	movlb	0	; () banked
 15958  014852  6FBC               	movwf	GetPortTRIS@pInput& (0+255),b
 15959                           
 15960                           ;Port.c: 69: switch (pInput)
 15961  014854  D038               	goto	l363
 15962  014856                     
 15963                           ;Port.c: 72: return (BytePtr)&TRISA;
 15964  014856  0E92               	movlw	146
 15965  014858  0100               	movlb	0	; () banked
 15966  01485A  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15967  01485C  0E0F               	movlw	15
 15968  01485E  0100               	movlb	0	; () banked
 15969  014860  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15970                           
 15971                           ; BSR set to: 0
 15972  014862  0012               	return	
 15973  014864                     
 15974                           ; BSR set to: 0
 15975                           ;Port.c: 74: return (BytePtr)&TRISB;
 15976                           
 15977                           ; BSR set to: 0
 15978  014864  0E93               	movlw	147
 15979  014866  0100               	movlb	0	; () banked
 15980  014868  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15981  01486A  0E0F               	movlw	15
 15982  01486C  0100               	movlb	0	; () banked
 15983  01486E  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15984                           
 15985                           ; BSR set to: 0
 15986  014870  0012               	return	
 15987  014872                     
 15988                           ; BSR set to: 0
 15989                           ;Port.c: 76: return (BytePtr)&TRISC;
 15990                           
 15991                           ; BSR set to: 0
 15992  014872  0E94               	movlw	148
 15993  014874  0100               	movlb	0	; () banked
 15994  014876  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 15995  014878  0E0F               	movlw	15
 15996  01487A  0100               	movlb	0	; () banked
 15997  01487C  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 15998                           
 15999                           ; BSR set to: 0
 16000  01487E  0012               	return	
 16001  014880                     
 16002                           ; BSR set to: 0
 16003                           ;Port.c: 78: return (BytePtr)&TRISD;
 16004                           
 16005                           ; BSR set to: 0
 16006  014880  0E95               	movlw	149
 16007  014882  0100               	movlb	0	; () banked
 16008  014884  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16009  014886  0E0F               	movlw	15
 16010  014888  0100               	movlb	0	; () banked
 16011  01488A  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16012                           
 16013                           ; BSR set to: 0
 16014  01488C  0012               	return	
 16015  01488E                     
 16016                           ; BSR set to: 0
 16017                           ;Port.c: 80: return (BytePtr)&TRISE;
 16018                           
 16019                           ; BSR set to: 0
 16020  01488E  0E96               	movlw	150
 16021  014890  0100               	movlb	0	; () banked
 16022  014892  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16023  014894  0E0F               	movlw	15
 16024  014896  0100               	movlb	0	; () banked
 16025  014898  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16026                           
 16027                           ; BSR set to: 0
 16028  01489A  0012               	return	
 16029  01489C                     
 16030                           ; BSR set to: 0
 16031                           ;Port.c: 82: return (BytePtr)&TRISF;
 16032                           
 16033                           ; BSR set to: 0
 16034  01489C  0E97               	movlw	151
 16035  01489E  0100               	movlb	0	; () banked
 16036  0148A0  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16037  0148A2  0E0F               	movlw	15
 16038  0148A4  0100               	movlb	0	; () banked
 16039  0148A6  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16040                           
 16041                           ; BSR set to: 0
 16042  0148A8  0012               	return	
 16043  0148AA                     
 16044                           ; BSR set to: 0
 16045                           ;Port.c: 84: return (BytePtr)&TRISG;
 16046                           
 16047                           ; BSR set to: 0
 16048  0148AA  0E98               	movlw	152
 16049  0148AC  0100               	movlb	0	; () banked
 16050  0148AE  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16051  0148B0  0E0F               	movlw	15
 16052  0148B2  0100               	movlb	0	; () banked
 16053  0148B4  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16054                           
 16055                           ; BSR set to: 0
 16056  0148B6  0012               	return	
 16057  0148B8                     
 16058                           ; BSR set to: 0
 16059                           ;Port.c: 86: return (void*)0;
 16060                           
 16061                           ; BSR set to: 0
 16062  0148B8  0E00               	movlw	0
 16063  0148BA  0100               	movlb	0	; () banked
 16064  0148BC  6FBA               	movwf	?_GetPortTRIS& (0+255),b
 16065  0148BE  0E00               	movlw	0
 16066  0148C0  0100               	movlb	0	; () banked
 16067  0148C2  6FBB               	movwf	(?_GetPortTRIS+1)& (0+255),b
 16068                           
 16069                           ; BSR set to: 0
 16070                           ;Port.c: 87: }
 16071                           
 16072                           ; BSR set to: 0
 16073  0148C4  0012               	return	
 16074  0148C6                     l363:
 16075                           
 16076                           ; BSR set to: 0
 16077  0148C6  0100               	movlb	0	; () banked
 16078  0148C8  51BC               	movf	GetPortTRIS@pInput& (0+255),w,b
 16079                           
 16080                           ; Switch size 1, requested type "space"
 16081                           ; Number of cases is 7, Range of values is 0 to 6
 16082                           ; switch strategies available:
 16083                           ; Name         Instructions Cycles
 16084                           ; simple_byte           22    12 (average)
 16085                           ;	Chosen strategy is simple_byte
 16086  0148CA  0A00               	xorlw	0	; case 0
 16087  0148CC  B4D8               	btfsc	status,2,c
 16088  0148CE  D7C3               	goto	l364
 16089  0148D0  0A01               	xorlw	1	; case 1
 16090  0148D2  B4D8               	btfsc	status,2,c
 16091  0148D4  D7C7               	goto	l366
 16092  0148D6  0A03               	xorlw	3	; case 2
 16093  0148D8  B4D8               	btfsc	status,2,c
 16094  0148DA  D7CB               	goto	l367
 16095  0148DC  0A01               	xorlw	1	; case 3
 16096  0148DE  B4D8               	btfsc	status,2,c
 16097  0148E0  D7CF               	goto	l368
 16098  0148E2  0A07               	xorlw	7	; case 4
 16099  0148E4  B4D8               	btfsc	status,2,c
 16100  0148E6  D7D3               	goto	l369
 16101  0148E8  0A01               	xorlw	1	; case 5
 16102  0148EA  B4D8               	btfsc	status,2,c
 16103  0148EC  D7D7               	goto	l370
 16104  0148EE  0A03               	xorlw	3	; case 6
 16105  0148F0  B4D8               	btfsc	status,2,c
 16106  0148F2  D7DB               	goto	l371
 16107  0148F4  D7E1               	goto	l372
 16108  0148F6                     __end_of_GetPortTRIS:
 16109                           	opt stack 0
 16110                           tblptru	equ	0xFF8
 16111                           tblptrh	equ	0xFF7
 16112                           tblptrl	equ	0xFF6
 16113                           tablat	equ	0xFF5
 16114                           prodh	equ	0xFF4
 16115                           prodl	equ	0xFF3
 16116                           intcon	equ	0xFF2
 16117                           postinc0	equ	0xFEE
 16118                           wreg	equ	0xFE8
 16119                           indf1	equ	0xFE7
 16120                           postdec1	equ	0xFE5
 16121                           fsr1h	equ	0xFE2
 16122                           fsr1l	equ	0xFE1
 16123                           indf2	equ	0xFDF
 16124                           postinc2	equ	0xFDE
 16125                           postdec2	equ	0xFDD
 16126                           fsr2h	equ	0xFDA
 16127                           fsr2l	equ	0xFD9
 16128                           status	equ	0xFD8
 16129                           
 16130 ;; *************** function _GetPortProperties *****************
 16131 ;; Defined at:
 16132 ;;		line 21 in file "Library/Port.c"
 16133 ;; Parameters:    Size  Location     Type
 16134 ;;  pInput          1    wreg     enum E6786
 16135 ;; Auto vars:     Size  Location     Type
 16136 ;;  pInput          1    2[BANK0 ] enum E6786
 16137 ;; Return value:  Size  Location     Type
 16138 ;;                  2    0[BANK0 ] PTR struct PortProperty
 16139 ;; Registers used:
 16140 ;;		wreg, status,2, status,0
 16141 ;; Tracked objects:
 16142 ;;		On entry : 0/0
 16143 ;;		On exit  : 0/0
 16144 ;;		Unchanged: 0/0
 16145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16146 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16147 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16148 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16149 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16150 ;;Total ram usage:        3 bytes
 16151 ;; Hardware stack levels used:    1
 16152 ;; Hardware stack levels required when called:    7
 16153 ;; This function calls:
 16154 ;;		Nothing
 16155 ;; This function is called by:
 16156 ;;		_Port_Init
 16157 ;; This function uses a non-reentrant model
 16158 ;;
 16159                           
 16160                           	psect	text67
 16161  0148F6                     __ptext67:
 16162                           	opt stack 0
 16163  0148F6                     _GetPortProperties:
 16164                           	opt stack 20
 16165                           
 16166                           ; BSR set to: 0
 16167                           ;incstack = 0
 16168                           ;GetPortProperties@pInput stored from wreg
 16169  0148F6  0100               	movlb	0	; () banked
 16170  0148F8  6FBC               	movwf	GetPortProperties@pInput& (0+255),b
 16171                           
 16172                           ;Port.c: 23: switch (pInput)
 16173  0148FA  D038               	goto	l337
 16174  0148FC                     
 16175                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
 16176  0148FC  0E0B               	movlw	low _PortA_Property
 16177  0148FE  0100               	movlb	0	; () banked
 16178  014900  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16179  014902  0EFF               	movlw	high _PortA_Property
 16180  014904  0100               	movlb	0	; () banked
 16181  014906  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16182                           
 16183                           ; BSR set to: 0
 16184  014908  0012               	return	
 16185  01490A                     
 16186                           ; BSR set to: 0
 16187                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
 16188                           
 16189                           ; BSR set to: 0
 16190  01490A  0E09               	movlw	low _PortB_Property
 16191  01490C  0100               	movlb	0	; () banked
 16192  01490E  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16193  014910  0EFF               	movlw	high _PortB_Property
 16194  014912  0100               	movlb	0	; () banked
 16195  014914  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16196                           
 16197                           ; BSR set to: 0
 16198  014916  0012               	return	
 16199  014918                     
 16200                           ; BSR set to: 0
 16201                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
 16202                           
 16203                           ; BSR set to: 0
 16204  014918  0E07               	movlw	low _PortC_Property
 16205  01491A  0100               	movlb	0	; () banked
 16206  01491C  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16207  01491E  0EFF               	movlw	high _PortC_Property
 16208  014920  0100               	movlb	0	; () banked
 16209  014922  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16210                           
 16211                           ; BSR set to: 0
 16212  014924  0012               	return	
 16213  014926                     
 16214                           ; BSR set to: 0
 16215                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
 16216                           
 16217                           ; BSR set to: 0
 16218  014926  0E05               	movlw	low _PortD_Property
 16219  014928  0100               	movlb	0	; () banked
 16220  01492A  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16221  01492C  0EFF               	movlw	high _PortD_Property
 16222  01492E  0100               	movlb	0	; () banked
 16223  014930  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16224                           
 16225                           ; BSR set to: 0
 16226  014932  0012               	return	
 16227  014934                     
 16228                           ; BSR set to: 0
 16229                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
 16230                           
 16231                           ; BSR set to: 0
 16232  014934  0E03               	movlw	low _PortE_Property
 16233  014936  0100               	movlb	0	; () banked
 16234  014938  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16235  01493A  0EFF               	movlw	high _PortE_Property
 16236  01493C  0100               	movlb	0	; () banked
 16237  01493E  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16238                           
 16239                           ; BSR set to: 0
 16240  014940  0012               	return	
 16241  014942                     
 16242                           ; BSR set to: 0
 16243                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
 16244                           
 16245                           ; BSR set to: 0
 16246  014942  0E01               	movlw	low _PortF_Property
 16247  014944  0100               	movlb	0	; () banked
 16248  014946  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16249  014948  0EFF               	movlw	high _PortF_Property
 16250  01494A  0100               	movlb	0	; () banked
 16251  01494C  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16252                           
 16253                           ; BSR set to: 0
 16254  01494E  0012               	return	
 16255  014950                     
 16256                           ; BSR set to: 0
 16257                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
 16258                           
 16259                           ; BSR set to: 0
 16260  014950  0EFF               	movlw	low _PortG_Property
 16261  014952  0100               	movlb	0	; () banked
 16262  014954  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16263  014956  0EFE               	movlw	high _PortG_Property
 16264  014958  0100               	movlb	0	; () banked
 16265  01495A  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16266                           
 16267                           ; BSR set to: 0
 16268  01495C  0012               	return	
 16269  01495E                     
 16270                           ; BSR set to: 0
 16271                           ;Port.c: 40: return (void*)0;
 16272                           
 16273                           ; BSR set to: 0
 16274  01495E  0E00               	movlw	0
 16275  014960  0100               	movlb	0	; () banked
 16276  014962  6FBA               	movwf	?_GetPortProperties& (0+255),b
 16277  014964  0E00               	movlw	0
 16278  014966  0100               	movlb	0	; () banked
 16279  014968  6FBB               	movwf	(?_GetPortProperties+1)& (0+255),b
 16280                           
 16281                           ; BSR set to: 0
 16282                           ;Port.c: 41: }
 16283                           
 16284                           ; BSR set to: 0
 16285  01496A  0012               	return	
 16286  01496C                     l337:
 16287                           
 16288                           ; BSR set to: 0
 16289  01496C  0100               	movlb	0	; () banked
 16290  01496E  51BC               	movf	GetPortProperties@pInput& (0+255),w,b
 16291                           
 16292                           ; Switch size 1, requested type "space"
 16293                           ; Number of cases is 7, Range of values is 0 to 6
 16294                           ; switch strategies available:
 16295                           ; Name         Instructions Cycles
 16296                           ; simple_byte           22    12 (average)
 16297                           ;	Chosen strategy is simple_byte
 16298  014970  0A00               	xorlw	0	; case 0
 16299  014972  B4D8               	btfsc	status,2,c
 16300  014974  D7C3               	goto	l338
 16301  014976  0A01               	xorlw	1	; case 1
 16302  014978  B4D8               	btfsc	status,2,c
 16303  01497A  D7C7               	goto	l340
 16304  01497C  0A03               	xorlw	3	; case 2
 16305  01497E  B4D8               	btfsc	status,2,c
 16306  014980  D7CB               	goto	l341
 16307  014982  0A01               	xorlw	1	; case 3
 16308  014984  B4D8               	btfsc	status,2,c
 16309  014986  D7CF               	goto	l342
 16310  014988  0A07               	xorlw	7	; case 4
 16311  01498A  B4D8               	btfsc	status,2,c
 16312  01498C  D7D3               	goto	l343
 16313  01498E  0A01               	xorlw	1	; case 5
 16314  014990  B4D8               	btfsc	status,2,c
 16315  014992  D7D7               	goto	l344
 16316  014994  0A03               	xorlw	3	; case 6
 16317  014996  B4D8               	btfsc	status,2,c
 16318  014998  D7DB               	goto	l345
 16319  01499A  D7E1               	goto	l346
 16320  01499C                     __end_of_GetPortProperties:
 16321                           	opt stack 0
 16322                           tblptru	equ	0xFF8
 16323                           tblptrh	equ	0xFF7
 16324                           tblptrl	equ	0xFF6
 16325                           tablat	equ	0xFF5
 16326                           prodh	equ	0xFF4
 16327                           prodl	equ	0xFF3
 16328                           intcon	equ	0xFF2
 16329                           postinc0	equ	0xFEE
 16330                           wreg	equ	0xFE8
 16331                           indf1	equ	0xFE7
 16332                           postdec1	equ	0xFE5
 16333                           fsr1h	equ	0xFE2
 16334                           fsr1l	equ	0xFE1
 16335                           indf2	equ	0xFDF
 16336                           postinc2	equ	0xFDE
 16337                           postdec2	equ	0xFDD
 16338                           fsr2h	equ	0xFDA
 16339                           fsr2l	equ	0xFD9
 16340                           status	equ	0xFD8
 16341                           
 16342 ;; *************** function _GetPortPORT *****************
 16343 ;; Defined at:
 16344 ;;		line 44 in file "Library/Port.c"
 16345 ;; Parameters:    Size  Location     Type
 16346 ;;  pInput          1    wreg     enum E6786
 16347 ;; Auto vars:     Size  Location     Type
 16348 ;;  pInput          1    2[BANK0 ] enum E6786
 16349 ;; Return value:  Size  Location     Type
 16350 ;;                  2    0[BANK0 ] PTR struct Byte
 16351 ;; Registers used:
 16352 ;;		wreg, status,2, status,0
 16353 ;; Tracked objects:
 16354 ;;		On entry : 0/0
 16355 ;;		On exit  : 0/0
 16356 ;;		Unchanged: 0/0
 16357 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16358 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16359 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16361 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16362 ;;Total ram usage:        3 bytes
 16363 ;; Hardware stack levels used:    1
 16364 ;; Hardware stack levels required when called:    7
 16365 ;; This function calls:
 16366 ;;		Nothing
 16367 ;; This function is called by:
 16368 ;;		_Port_Init
 16369 ;; This function uses a non-reentrant model
 16370 ;;
 16371                           
 16372                           	psect	text68
 16373  01499C                     __ptext68:
 16374                           	opt stack 0
 16375  01499C                     _GetPortPORT:
 16376                           	opt stack 20
 16377                           
 16378                           ; BSR set to: 0
 16379                           ;incstack = 0
 16380                           ;GetPortPORT@pInput stored from wreg
 16381  01499C  0100               	movlb	0	; () banked
 16382  01499E  6FBC               	movwf	GetPortPORT@pInput& (0+255),b
 16383                           
 16384                           ;Port.c: 46: switch (pInput)
 16385  0149A0  D038               	goto	l350
 16386  0149A2                     
 16387                           ;Port.c: 49: return (BytePtr)&PORTA;
 16388  0149A2  0E80               	movlw	128
 16389  0149A4  0100               	movlb	0	; () banked
 16390  0149A6  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16391  0149A8  0E0F               	movlw	15
 16392  0149AA  0100               	movlb	0	; () banked
 16393  0149AC  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16394                           
 16395                           ; BSR set to: 0
 16396  0149AE  0012               	return	
 16397  0149B0                     
 16398                           ; BSR set to: 0
 16399                           ;Port.c: 51: return (BytePtr)&PORTB;
 16400                           
 16401                           ; BSR set to: 0
 16402  0149B0  0E81               	movlw	129
 16403  0149B2  0100               	movlb	0	; () banked
 16404  0149B4  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16405  0149B6  0E0F               	movlw	15
 16406  0149B8  0100               	movlb	0	; () banked
 16407  0149BA  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16408                           
 16409                           ; BSR set to: 0
 16410  0149BC  0012               	return	
 16411  0149BE                     
 16412                           ; BSR set to: 0
 16413                           ;Port.c: 53: return (BytePtr)&PORTC;
 16414                           
 16415                           ; BSR set to: 0
 16416  0149BE  0E82               	movlw	130
 16417  0149C0  0100               	movlb	0	; () banked
 16418  0149C2  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16419  0149C4  0E0F               	movlw	15
 16420  0149C6  0100               	movlb	0	; () banked
 16421  0149C8  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16422                           
 16423                           ; BSR set to: 0
 16424  0149CA  0012               	return	
 16425  0149CC                     
 16426                           ; BSR set to: 0
 16427                           ;Port.c: 55: return (BytePtr)&PORTD;
 16428                           
 16429                           ; BSR set to: 0
 16430  0149CC  0E83               	movlw	131
 16431  0149CE  0100               	movlb	0	; () banked
 16432  0149D0  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16433  0149D2  0E0F               	movlw	15
 16434  0149D4  0100               	movlb	0	; () banked
 16435  0149D6  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16436                           
 16437                           ; BSR set to: 0
 16438  0149D8  0012               	return	
 16439  0149DA                     
 16440                           ; BSR set to: 0
 16441                           ;Port.c: 57: return (BytePtr)&PORTE;
 16442                           
 16443                           ; BSR set to: 0
 16444  0149DA  0E84               	movlw	132
 16445  0149DC  0100               	movlb	0	; () banked
 16446  0149DE  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16447  0149E0  0E0F               	movlw	15
 16448  0149E2  0100               	movlb	0	; () banked
 16449  0149E4  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16450                           
 16451                           ; BSR set to: 0
 16452  0149E6  0012               	return	
 16453  0149E8                     
 16454                           ; BSR set to: 0
 16455                           ;Port.c: 59: return (BytePtr)&PORTF;
 16456                           
 16457                           ; BSR set to: 0
 16458  0149E8  0E85               	movlw	133
 16459  0149EA  0100               	movlb	0	; () banked
 16460  0149EC  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16461  0149EE  0E0F               	movlw	15
 16462  0149F0  0100               	movlb	0	; () banked
 16463  0149F2  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16464                           
 16465                           ; BSR set to: 0
 16466  0149F4  0012               	return	
 16467  0149F6                     
 16468                           ; BSR set to: 0
 16469                           ;Port.c: 61: return (BytePtr)&PORTG;
 16470                           
 16471                           ; BSR set to: 0
 16472  0149F6  0E86               	movlw	134
 16473  0149F8  0100               	movlb	0	; () banked
 16474  0149FA  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16475  0149FC  0E0F               	movlw	15
 16476  0149FE  0100               	movlb	0	; () banked
 16477  014A00  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16478                           
 16479                           ; BSR set to: 0
 16480  014A02  0012               	return	
 16481  014A04                     
 16482                           ; BSR set to: 0
 16483                           ;Port.c: 63: return (void*)0;
 16484                           
 16485                           ; BSR set to: 0
 16486  014A04  0E00               	movlw	0
 16487  014A06  0100               	movlb	0	; () banked
 16488  014A08  6FBA               	movwf	?_GetPortPORT& (0+255),b
 16489  014A0A  0E00               	movlw	0
 16490  014A0C  0100               	movlb	0	; () banked
 16491  014A0E  6FBB               	movwf	(?_GetPortPORT+1)& (0+255),b
 16492                           
 16493                           ; BSR set to: 0
 16494                           ;Port.c: 64: }
 16495                           
 16496                           ; BSR set to: 0
 16497  014A10  0012               	return	
 16498  014A12                     l350:
 16499                           
 16500                           ; BSR set to: 0
 16501  014A12  0100               	movlb	0	; () banked
 16502  014A14  51BC               	movf	GetPortPORT@pInput& (0+255),w,b
 16503                           
 16504                           ; Switch size 1, requested type "space"
 16505                           ; Number of cases is 7, Range of values is 0 to 6
 16506                           ; switch strategies available:
 16507                           ; Name         Instructions Cycles
 16508                           ; simple_byte           22    12 (average)
 16509                           ;	Chosen strategy is simple_byte
 16510  014A16  0A00               	xorlw	0	; case 0
 16511  014A18  B4D8               	btfsc	status,2,c
 16512  014A1A  D7C3               	goto	l351
 16513  014A1C  0A01               	xorlw	1	; case 1
 16514  014A1E  B4D8               	btfsc	status,2,c
 16515  014A20  D7C7               	goto	l353
 16516  014A22  0A03               	xorlw	3	; case 2
 16517  014A24  B4D8               	btfsc	status,2,c
 16518  014A26  D7CB               	goto	l354
 16519  014A28  0A01               	xorlw	1	; case 3
 16520  014A2A  B4D8               	btfsc	status,2,c
 16521  014A2C  D7CF               	goto	l355
 16522  014A2E  0A07               	xorlw	7	; case 4
 16523  014A30  B4D8               	btfsc	status,2,c
 16524  014A32  D7D3               	goto	l356
 16525  014A34  0A01               	xorlw	1	; case 5
 16526  014A36  B4D8               	btfsc	status,2,c
 16527  014A38  D7D7               	goto	l357
 16528  014A3A  0A03               	xorlw	3	; case 6
 16529  014A3C  B4D8               	btfsc	status,2,c
 16530  014A3E  D7DB               	goto	l358
 16531  014A40  D7E1               	goto	l359
 16532  014A42                     __end_of_GetPortPORT:
 16533                           	opt stack 0
 16534                           tblptru	equ	0xFF8
 16535                           tblptrh	equ	0xFF7
 16536                           tblptrl	equ	0xFF6
 16537                           tablat	equ	0xFF5
 16538                           prodh	equ	0xFF4
 16539                           prodl	equ	0xFF3
 16540                           intcon	equ	0xFF2
 16541                           postinc0	equ	0xFEE
 16542                           wreg	equ	0xFE8
 16543                           indf1	equ	0xFE7
 16544                           postdec1	equ	0xFE5
 16545                           fsr1h	equ	0xFE2
 16546                           fsr1l	equ	0xFE1
 16547                           indf2	equ	0xFDF
 16548                           postinc2	equ	0xFDE
 16549                           postdec2	equ	0xFDD
 16550                           fsr2h	equ	0xFDA
 16551                           fsr2l	equ	0xFD9
 16552                           status	equ	0xFD8
 16553                           
 16554 ;; *************** function _LED_Init *****************
 16555 ;; Defined at:
 16556 ;;		line 15 in file "Library/LED.c"
 16557 ;; Parameters:    Size  Location     Type
 16558 ;;  pLED            1    wreg     enum E6739
 16559 ;; Auto vars:     Size  Location     Type
 16560 ;;  pLED            1   45[BANK0 ] enum E6739
 16561 ;; Return value:  Size  Location     Type
 16562 ;;                  1    wreg      void 
 16563 ;; Registers used:
 16564 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16565 ;; Tracked objects:
 16566 ;;		On entry : 0/0
 16567 ;;		On exit  : 0/0
 16568 ;;		Unchanged: 0/0
 16569 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16570 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16571 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16572 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16573 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16574 ;;Total ram usage:        1 bytes
 16575 ;; Hardware stack levels used:    1
 16576 ;; Hardware stack levels required when called:   12
 16577 ;; This function calls:
 16578 ;;		_LED_Set
 16579 ;;		_Port_SetPinType
 16580 ;; This function is called by:
 16581 ;;		_MXK_Init
 16582 ;; This function uses a non-reentrant model
 16583 ;;
 16584                           
 16585                           	psect	text69
 16586  01586C                     __ptext69:
 16587                           	opt stack 0
 16588  01586C                     _LED_Init:
 16589                           	opt stack 16
 16590                           
 16591                           ; BSR set to: 0
 16592                           ;incstack = 0
 16593                           ;LED_Init@pLED stored from wreg
 16594  01586C  0100               	movlb	0	; () banked
 16595  01586E  6FE7               	movwf	LED_Init@pLED& (0+255),b
 16596                           
 16597                           ;LED.c: 17: switch (pLED)
 16598  015870  D01E               	goto	l220
 16599  015872                     
 16600                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
 16601  015872  0EA5               	movlw	low _PortC
 16602  015874  0100               	movlb	0	; () banked
 16603  015876  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16604  015878  0E00               	movlw	high _PortC
 16605  01587A  0100               	movlb	0	; () banked
 16606  01587C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16607  01587E  0E00               	movlw	0
 16608  015880  0100               	movlb	0	; () banked
 16609  015882  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16610  015884  0E03               	movlw	3
 16611  015886  0100               	movlb	0	; () banked
 16612  015888  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16613  01588A  EC39  F093         	call	_Port_SetPinType	;wreg free
 16614                           
 16615                           ;LED.c: 21: break;
 16616  01588E  D017               	goto	l222
 16617  015890                     
 16618                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
 16619  015890  0EA5               	movlw	low _PortC
 16620  015892  0100               	movlb	0	; () banked
 16621  015894  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 16622  015896  0E00               	movlw	high _PortC
 16623  015898  0100               	movlb	0	; () banked
 16624  01589A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16625  01589C  0E01               	movlw	1
 16626  01589E  0100               	movlb	0	; () banked
 16627  0158A0  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 16628  0158A2  0E03               	movlw	3
 16629  0158A4  0100               	movlb	0	; () banked
 16630  0158A6  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 16631  0158A8  EC39  F093         	call	_Port_SetPinType	;wreg free
 16632                           
 16633                           ;LED.c: 25: }
 16634                           
 16635                           ;LED.c: 24: break;
 16636  0158AC  D008               	goto	l222
 16637  0158AE                     l220:
 16638  0158AE  0100               	movlb	0	; () banked
 16639  0158B0  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16640                           
 16641                           ; Switch size 1, requested type "space"
 16642                           ; Number of cases is 2, Range of values is 0 to 1
 16643                           ; switch strategies available:
 16644                           ; Name         Instructions Cycles
 16645                           ; simple_byte            7     4 (average)
 16646                           ;	Chosen strategy is simple_byte
 16647  0158B2  0A00               	xorlw	0	; case 0
 16648  0158B4  B4D8               	btfsc	status,2,c
 16649  0158B6  D7DD               	goto	l221
 16650  0158B8  0A01               	xorlw	1	; case 1
 16651  0158BA  B4D8               	btfsc	status,2,c
 16652  0158BC  D7E9               	goto	l223
 16653  0158BE                     l222:
 16654                           
 16655                           ;LED.c: 26: LED_Set(pLED, 0);
 16656                           
 16657                           ; BSR set to: 0
 16658  0158BE  0E00               	movlw	0
 16659  0158C0  0100               	movlb	0	; () banked
 16660  0158C2  6FCE               	movwf	LED_Set@pValue& (0+255),b
 16661  0158C4  0100               	movlb	0	; () banked
 16662  0158C6  51E7               	movf	LED_Init@pLED& (0+255),w,b
 16663  0158C8  EC74  F0AD         	call	_LED_Set
 16664  0158CC  0012               	return		;funcret
 16665  0158CE                     __end_of_LED_Init:
 16666                           	opt stack 0
 16667                           tblptru	equ	0xFF8
 16668                           tblptrh	equ	0xFF7
 16669                           tblptrl	equ	0xFF6
 16670                           tablat	equ	0xFF5
 16671                           prodh	equ	0xFF4
 16672                           prodl	equ	0xFF3
 16673                           intcon	equ	0xFF2
 16674                           postinc0	equ	0xFEE
 16675                           wreg	equ	0xFE8
 16676                           indf1	equ	0xFE7
 16677                           postdec1	equ	0xFE5
 16678                           fsr1h	equ	0xFE2
 16679                           fsr1l	equ	0xFE1
 16680                           indf2	equ	0xFDF
 16681                           postinc2	equ	0xFDE
 16682                           postdec2	equ	0xFDD
 16683                           fsr2h	equ	0xFDA
 16684                           fsr2l	equ	0xFD9
 16685                           status	equ	0xFD8
 16686                           
 16687 ;; *************** function _LED_Set *****************
 16688 ;; Defined at:
 16689 ;;		line 33 in file "Library/LED.c"
 16690 ;; Parameters:    Size  Location     Type
 16691 ;;  pLED            1    wreg     enum E6739
 16692 ;;  pValue          1   20[BANK0 ] unsigned char 
 16693 ;; Auto vars:     Size  Location     Type
 16694 ;;  pLED            1   21[BANK0 ] enum E6739
 16695 ;; Return value:  Size  Location     Type
 16696 ;;                  1    wreg      void 
 16697 ;; Registers used:
 16698 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16699 ;; Tracked objects:
 16700 ;;		On entry : 0/0
 16701 ;;		On exit  : 0/0
 16702 ;;		Unchanged: 0/0
 16703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16704 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16705 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16706 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16707 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16708 ;;Total ram usage:        2 bytes
 16709 ;; Hardware stack levels used:    1
 16710 ;; Hardware stack levels required when called:   11
 16711 ;; This function calls:
 16712 ;;		_Port_SetPin
 16713 ;; This function is called by:
 16714 ;;		_LED_Init
 16715 ;;		_SYSTEM_Initialize
 16716 ;; This function uses a non-reentrant model
 16717 ;;
 16718                           
 16719                           	psect	text70
 16720  015AE8                     __ptext70:
 16721                           	opt stack 0
 16722  015AE8                     _LED_Set:
 16723                           	opt stack 16
 16724                           
 16725                           ;incstack = 0
 16726                           ;LED_Set@pLED stored from wreg
 16727  015AE8  0100               	movlb	0	; () banked
 16728  015AEA  6FCF               	movwf	LED_Set@pLED& (0+255),b
 16729                           
 16730                           ;LED.c: 35: switch (pLED)
 16731  015AEC  D01C               	goto	l227
 16732  015AEE                     
 16733                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 16734  015AEE  0EA5               	movlw	low _PortC
 16735  015AF0  0100               	movlb	0	; () banked
 16736  015AF2  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16737  015AF4  0E00               	movlw	high _PortC
 16738  015AF6  0100               	movlb	0	; () banked
 16739  015AF8  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16740  015AFA  0E00               	movlw	0
 16741  015AFC  0100               	movlb	0	; () banked
 16742  015AFE  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16743  015B00  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16744  015B04  EC8F  F09F         	call	_Port_SetPin	;wreg free
 16745                           
 16746                           ;LED.c: 39: break;
 16747  015B08  0012               	return	
 16748  015B0A                     
 16749                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 16750  015B0A  0EA5               	movlw	low _PortC
 16751  015B0C  0100               	movlb	0	; () banked
 16752  015B0E  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 16753  015B10  0E00               	movlw	high _PortC
 16754  015B12  0100               	movlb	0	; () banked
 16755  015B14  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 16756  015B16  0E01               	movlw	1
 16757  015B18  0100               	movlb	0	; () banked
 16758  015B1A  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 16759  015B1C  C0CE  F0CC         	movff	LED_Set@pValue,Port_SetPin@pValue
 16760  015B20  EC8F  F09F         	call	_Port_SetPin	;wreg free
 16761                           
 16762                           ;LED.c: 43: }
 16763                           
 16764                           ;LED.c: 42: break;
 16765  015B24  0012               	return	
 16766  015B26                     l227:
 16767  015B26  0100               	movlb	0	; () banked
 16768  015B28  51CF               	movf	LED_Set@pLED& (0+255),w,b
 16769                           
 16770                           ; Switch size 1, requested type "space"
 16771                           ; Number of cases is 2, Range of values is 0 to 1
 16772                           ; switch strategies available:
 16773                           ; Name         Instructions Cycles
 16774                           ; simple_byte            7     4 (average)
 16775                           ;	Chosen strategy is simple_byte
 16776  015B2A  0A00               	xorlw	0	; case 0
 16777  015B2C  B4D8               	btfsc	status,2,c
 16778  015B2E  D7DF               	goto	l228
 16779  015B30  0A01               	xorlw	1	; case 1
 16780  015B32  A4D8               	btfss	status,2,c
 16781  015B34  0012               	return	
 16782  015B36  D7E9               	goto	l230
 16783  015B38                     __end_of_LED_Set:
 16784                           	opt stack 0
 16785                           tblptru	equ	0xFF8
 16786                           tblptrh	equ	0xFF7
 16787                           tblptrl	equ	0xFF6
 16788                           tablat	equ	0xFF5
 16789                           prodh	equ	0xFF4
 16790                           prodl	equ	0xFF3
 16791                           intcon	equ	0xFF2
 16792                           postinc0	equ	0xFEE
 16793                           wreg	equ	0xFE8
 16794                           indf1	equ	0xFE7
 16795                           postdec1	equ	0xFE5
 16796                           fsr1h	equ	0xFE2
 16797                           fsr1l	equ	0xFE1
 16798                           indf2	equ	0xFDF
 16799                           postinc2	equ	0xFDE
 16800                           postdec2	equ	0xFDD
 16801                           fsr2h	equ	0xFDA
 16802                           fsr2l	equ	0xFD9
 16803                           status	equ	0xFD8
 16804                           
 16805 ;; *************** function _MXK_Dequeue *****************
 16806 ;; Defined at:
 16807 ;;		line 153 in file "Library/MXK.c"
 16808 ;; Parameters:    Size  Location     Type
 16809 ;;		None
 16810 ;; Auto vars:     Size  Location     Type
 16811 ;;		None
 16812 ;; Return value:  Size  Location     Type
 16813 ;;                  1    wreg      void 
 16814 ;; Registers used:
 16815 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16816 ;; Tracked objects:
 16817 ;;		On entry : 0/0
 16818 ;;		On exit  : 0/0
 16819 ;;		Unchanged: 0/0
 16820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16822 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16823 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16824 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16825 ;;Total ram usage:        0 bytes
 16826 ;; Hardware stack levels used:    1
 16827 ;; Hardware stack levels required when called:   12
 16828 ;; This function calls:
 16829 ;;		Absolute function
 16830 ;;		_Motor_Step
 16831 ;; This function is called by:
 16832 ;;		_init
 16833 ;;		_findClosestWall
 16834 ;;		_mode1
 16835 ;;		_mode2
 16836 ;;		_mode4
 16837 ;;		_main
 16838 ;; This function uses a non-reentrant model
 16839 ;;
 16840                           
 16841                           	psect	text71
 16842  015F56                     __ptext71:
 16843                           	opt stack 0
 16844  015F56                     _MXK_Dequeue:
 16845                           	opt stack 16
 16846                           
 16847                           ;MXK.c: 155: if (lQueue)
 16848                           
 16849                           ;incstack = 0
 16850  015F56  0100               	movlb	0	; () banked
 16851  015F58  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16852  015F5A  0100               	movlb	0	; () banked
 16853  015F5C  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 16854  015F5E  0100               	movlb	0	; () banked
 16855  015F60  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 16856  015F62  B4D8               	btfsc	status,2,c
 16857  015F64  D00D               	goto	u13399
 16858                           
 16859                           ; BSR set to: 0
 16860                           ;MXK.c: 156: lQueue();
 16861  015F66  D801               	call	u13398
 16862  015F68  D00B               	goto	u13399
 16863  015F6A                     u13398:
 16864  015F6A  0005               	push	
 16865  015F6C  6EFA               	movwf	pclath,c
 16866  015F6E  0100               	movlb	0	; () banked
 16867  015F70  5163               	movf	_lQueue& (0+255),w,b	;volatile
 16868  015F72  6EFD               	movwf	tosl,c
 16869  015F74  5164               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 16870  015F76  6EFE               	movwf	tosh,c
 16871  015F78  5165               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 16872  015F7A  6EFF               	movwf	tosu,c
 16873  015F7C  50FA               	movf	pclath,w,c
 16874  015F7E  0012               	return		;indir
 16875  015F80                     u13399:
 16876                           
 16877                           ;MXK.c: 157: lQueue = 0;
 16878  015F80  0E00               	movlw	0
 16879  015F82  0100               	movlb	0	; () banked
 16880  015F84  6F63               	movwf	_lQueue& (0+255),b	;volatile
 16881  015F86  0E00               	movlw	0
 16882  015F88  0100               	movlb	0	; () banked
 16883  015F8A  6F64               	movwf	(_lQueue+1)& (0+255),b	;volatile
 16884  015F8C  0E00               	movlw	0
 16885  015F8E  0100               	movlb	0	; () banked
 16886  015F90  6F65               	movwf	(_lQueue+2)& (0+255),b	;volatile
 16887                           
 16888                           ; BSR set to: 0
 16889  015F92  0012               	return		;funcret
 16890  015F94                     __end_of_MXK_Dequeue:
 16891                           	opt stack 0
 16892                           tosu	equ	0xFFF
 16893                           tosh	equ	0xFFE
 16894                           tosl	equ	0xFFD
 16895                           pclath	equ	0xFFA
 16896                           tblptru	equ	0xFF8
 16897                           tblptrh	equ	0xFF7
 16898                           tblptrl	equ	0xFF6
 16899                           tablat	equ	0xFF5
 16900                           prodh	equ	0xFF4
 16901                           prodl	equ	0xFF3
 16902                           intcon	equ	0xFF2
 16903                           postinc0	equ	0xFEE
 16904                           wreg	equ	0xFE8
 16905                           indf1	equ	0xFE7
 16906                           postdec1	equ	0xFE5
 16907                           fsr1h	equ	0xFE2
 16908                           fsr1l	equ	0xFE1
 16909                           indf2	equ	0xFDF
 16910                           postinc2	equ	0xFDE
 16911                           postdec2	equ	0xFDD
 16912                           fsr2h	equ	0xFDA
 16913                           fsr2l	equ	0xFD9
 16914                           status	equ	0xFD8
 16915                           
 16916 ;; *************** function _Motor_Step *****************
 16917 ;; Defined at:
 16918 ;;		line 75 in file "Library/Motor.c"
 16919 ;; Parameters:    Size  Location     Type
 16920 ;;		None
 16921 ;; Auto vars:     Size  Location     Type
 16922 ;;		None
 16923 ;; Return value:  Size  Location     Type
 16924 ;;                  1    wreg      void 
 16925 ;; Registers used:
 16926 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16927 ;; Tracked objects:
 16928 ;;		On entry : 0/0
 16929 ;;		On exit  : 0/0
 16930 ;;		Unchanged: 0/0
 16931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16932 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16934 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16935 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16936 ;;Total ram usage:        2 bytes
 16937 ;; Hardware stack levels used:    1
 16938 ;; Hardware stack levels required when called:   11
 16939 ;; This function calls:
 16940 ;;		_MXK_Queue
 16941 ;;		_MXK_Release
 16942 ;;		_MXK_SwitchTo
 16943 ;;		_Port_SetPin
 16944 ;;		_Timer0_Restart
 16945 ;;		_Timer0_Stop
 16946 ;; This function is called by:
 16947 ;;		_Motor_Init
 16948 ;;		_MXK_Dequeue
 16949 ;;		_Timer0_ISR
 16950 ;; This function uses a non-reentrant model
 16951 ;;
 16952                           
 16953                           	psect	text72
 16954  013400                     __ptext72:
 16955                           	opt stack 0
 16956  013400                     _Motor_Step:
 16957                           	opt stack 0
 16958                           
 16959                           ; BSR set to: 0
 16960                           ;Skip over the trampoline to the duplicate function for level 2
 16961  013400  B251               	btfsc	btemp,1,c
 16962  013402  EF9F  F09B         	goto	i2_Motor_Step
 16963  013406                     _Motor_Step$intlevel0:
 16964                           	opt stack 16
 16965                           
 16966                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 16967                           
 16968                           ;incstack = 0
 16969  013406  0100               	movlb	0	; () banked
 16970  013408  EE20 F004          	lfsr	2,4
 16971  01340C  517F               	movf	_lMotor& (0+255),w,b
 16972  01340E  26D9               	addwf	fsr2l,f,c
 16973  013410  5180               	movf	(_lMotor+1)& (0+255),w,b
 16974  013412  22DA               	addwfc	fsr2h,f,c
 16975  013414  50DF               	movf	indf2,w,c
 16976  013416  EC2B  F0AF         	call	_MXK_SwitchTo
 16977  01341A  0900               	iorlw	0
 16978  01341C  B4D8               	btfsc	status,2,c
 16979  01341E  D07A               	goto	l1627
 16980                           
 16981                           ;Motor.c: 78: {
 16982                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 16983  013420  C07F  FFD9         	movff	_lMotor,fsr2l
 16984  013424  C080  FFDA         	movff	_lMotor+1,fsr2h
 16985  013428  50DE               	movf	postinc2,w,c
 16986  01342A  10DE               	iorwf	postinc2,w,c
 16987  01342C  B4D8               	btfsc	status,2,c
 16988  01342E  D06D               	goto	l1628
 16989                           
 16990                           ;Motor.c: 80: {
 16991                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 16992  013430  C07F  FFD9         	movff	_lMotor,fsr2l
 16993  013434  C080  FFDA         	movff	_lMotor+1,fsr2h
 16994  013438  0E01               	movlw	1
 16995  01343A  BEDB               	btfsc	plusw2,7,c
 16996  01343C  D026               	goto	l1629
 16997  01343E  0E01               	movlw	1
 16998  013440  50DB               	movf	plusw2,w,c
 16999  013442  E103               	bnz	u9990
 17000  013444  04DE               	decf	postinc2,w,c
 17001  013446  A0D8               	btfss	status,0,c
 17002  013448  D020               	goto	l1629
 17003  01344A                     u9990:
 17004                           
 17005                           ;Motor.c: 83: {
 17006                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 17007  01344A  C07F  FFD9         	movff	_lMotor,fsr2l
 17008  01344E  C080  FFDA         	movff	_lMotor+1,fsr2h
 17009  013452  28DE               	incf	postinc2,w,c
 17010  013454  E104               	bnz	u10000
 17011  013456  0E7F               	movlw	127
 17012  013458  18DE               	xorwf	postinc2,w,c
 17013  01345A  B4D8               	btfsc	status,2,c
 17014  01345C  D007               	goto	l1630
 17015  01345E                     u10000:
 17016                           
 17017                           ;Motor.c: 85: lMotor->mDelta --;
 17018  01345E  C07F  FFD9         	movff	_lMotor,fsr2l
 17019  013462  C080  FFDA         	movff	_lMotor+1,fsr2h
 17020  013466  06DE               	decf	postinc2,f,c
 17021  013468  0E00               	movlw	0
 17022  01346A  5ADD               	subwfb	postdec2,f,c
 17023  01346C                     l1630:
 17024                           
 17025                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 17026  01346C  0E91               	movlw	low _PortE
 17027  01346E  0100               	movlb	0	; () banked
 17028  013470  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17029  013472  0E00               	movlw	high _PortE
 17030  013474  0100               	movlb	0	; () banked
 17031  013476  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17032  013478  0E00               	movlw	0
 17033  01347A  0100               	movlb	0	; () banked
 17034  01347C  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17035  01347E  0E01               	movlw	1
 17036  013480  0100               	movlb	0	; () banked
 17037  013482  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17038  013484  EC8F  F09F         	call	_Port_SetPin	;wreg free
 17039                           
 17040                           ;Motor.c: 88: }
 17041  013488  D01F               	goto	l1631
 17042  01348A                     l1629:
 17043                           
 17044                           ;Motor.c: 89: else
 17045                           ;Motor.c: 90: {
 17046                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 17047  01348A  C07F  FFD9         	movff	_lMotor,fsr2l
 17048  01348E  C080  FFDA         	movff	_lMotor+1,fsr2h
 17049  013492  04DE               	decf	postinc2,w,c
 17050  013494  E104               	bnz	u10010
 17051  013496  0E80               	movlw	128
 17052  013498  18DE               	xorwf	postinc2,w,c
 17053  01349A  B4D8               	btfsc	status,2,c
 17054  01349C  D007               	goto	l1632
 17055  01349E                     u10010:
 17056                           
 17057                           ;Motor.c: 92: lMotor->mDelta ++;
 17058  01349E  C07F  FFD9         	movff	_lMotor,fsr2l
 17059  0134A2  C080  FFDA         	movff	_lMotor+1,fsr2h
 17060  0134A6  2ADE               	incf	postinc2,f,c
 17061  0134A8  0E00               	movlw	0
 17062  0134AA  22DD               	addwfc	postdec2,f,c
 17063  0134AC                     l1632:
 17064                           
 17065                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 17066  0134AC  0E91               	movlw	low _PortE
 17067  0134AE  0100               	movlb	0	; () banked
 17068  0134B0  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17069  0134B2  0E00               	movlw	high _PortE
 17070  0134B4  0100               	movlb	0	; () banked
 17071  0134B6  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17072  0134B8  0E00               	movlw	0
 17073  0134BA  0100               	movlb	0	; () banked
 17074  0134BC  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17075  0134BE  0E00               	movlw	0
 17076  0134C0  0100               	movlb	0	; () banked
 17077  0134C2  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17078  0134C4  EC8F  F09F         	call	_Port_SetPin	;wreg free
 17079  0134C8                     l1631:
 17080                           
 17081                           ;Motor.c: 95: }
 17082                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 17083  0134C8  0E91               	movlw	low _PortE
 17084  0134CA  0100               	movlb	0	; () banked
 17085  0134CC  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17086  0134CE  0E00               	movlw	high _PortE
 17087  0134D0  0100               	movlb	0	; () banked
 17088  0134D2  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17089  0134D4  0E01               	movlw	1
 17090  0134D6  0100               	movlb	0	; () banked
 17091  0134D8  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17092  0134DA  0E01               	movlw	1
 17093  0134DC  0100               	movlb	0	; () banked
 17094  0134DE  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17095  0134E0  EC8F  F09F         	call	_Port_SetPin	;wreg free
 17096                           
 17097                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 17098  0134E4  0E91               	movlw	low _PortE
 17099  0134E6  0100               	movlb	0	; () banked
 17100  0134E8  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 17101  0134EA  0E00               	movlw	high _PortE
 17102  0134EC  0100               	movlb	0	; () banked
 17103  0134EE  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 17104  0134F0  0E01               	movlw	1
 17105  0134F2  0100               	movlb	0	; () banked
 17106  0134F4  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 17107  0134F6  0E00               	movlw	0
 17108  0134F8  0100               	movlb	0	; () banked
 17109  0134FA  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 17110  0134FC  EC8F  F09F         	call	_Port_SetPin	;wreg free
 17111                           
 17112                           ;Motor.c: 101: MXK_Release();
 17113  013500  EC59  F0B2         	call	_MXK_Release	;wreg free
 17114                           
 17115                           ;Motor.c: 102: Timer0_Restart();
 17116  013504  EC52  F0B3         	call	_Timer0_Restart	;wreg free
 17117                           
 17118                           ;Motor.c: 103: return;
 17119  013508  0012               	return	
 17120  01350A                     l1628:
 17121                           
 17122                           ;Motor.c: 104: }
 17123                           ;Motor.c: 105: MXK_Release();
 17124  01350A  EC59  F0B2         	call	_MXK_Release	;wreg free
 17125                           
 17126                           ;Motor.c: 106: Timer0_Stop();
 17127  01350E  EC7D  F0B3         	call	_Timer0_Stop	;wreg free
 17128                           
 17129                           ;Motor.c: 107: return;
 17130  013512  0012               	return	
 17131  013514                     l1627:
 17132                           
 17133                           ;Motor.c: 108: }
 17134                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 17135  013514  C066  F0BA         	movff	_lStepFunction,MXK_Queue@pCallback
 17136  013518  C067  F0BB         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 17137  01351C  C068  F0BC         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 17138  013520  EC38  F0B3         	call	_MXK_Queue	;wreg free
 17139  013524  0012               	return		;funcret
 17140  013526                     __end_of_Motor_Step:
 17141                           	opt stack 0
 17142                           tosu	equ	0xFFF
 17143                           tosh	equ	0xFFE
 17144                           tosl	equ	0xFFD
 17145                           pclath	equ	0xFFA
 17146                           tblptru	equ	0xFF8
 17147                           tblptrh	equ	0xFF7
 17148                           tblptrl	equ	0xFF6
 17149                           tablat	equ	0xFF5
 17150                           prodh	equ	0xFF4
 17151                           prodl	equ	0xFF3
 17152                           intcon	equ	0xFF2
 17153                           postinc0	equ	0xFEE
 17154                           wreg	equ	0xFE8
 17155                           indf1	equ	0xFE7
 17156                           postdec1	equ	0xFE5
 17157                           fsr1h	equ	0xFE2
 17158                           fsr1l	equ	0xFE1
 17159                           indf2	equ	0xFDF
 17160                           postinc2	equ	0xFDE
 17161                           postdec2	equ	0xFDD
 17162                           plusw2	equ	0xFDB
 17163                           fsr2h	equ	0xFDA
 17164                           fsr2l	equ	0xFD9
 17165                           status	equ	0xFD8
 17166                           
 17167 ;; *************** function _Timer0_Stop *****************
 17168 ;; Defined at:
 17169 ;;		line 89 in file "Library/Timer0.c"
 17170 ;; Parameters:    Size  Location     Type
 17171 ;;		None
 17172 ;; Auto vars:     Size  Location     Type
 17173 ;;		None
 17174 ;; Return value:  Size  Location     Type
 17175 ;;                  1    wreg      void 
 17176 ;; Registers used:
 17177 ;;		None
 17178 ;; Tracked objects:
 17179 ;;		On entry : 0/0
 17180 ;;		On exit  : 0/0
 17181 ;;		Unchanged: 0/0
 17182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17183 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17184 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17185 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17186 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17187 ;;Total ram usage:        0 bytes
 17188 ;; Hardware stack levels used:    1
 17189 ;; Hardware stack levels required when called:    7
 17190 ;; This function calls:
 17191 ;;		Nothing
 17192 ;; This function is called by:
 17193 ;;		_Motor_Step
 17194 ;; This function uses a non-reentrant model
 17195 ;;
 17196                           
 17197                           	psect	text73
 17198  0166FA                     __ptext73:
 17199                           	opt stack 0
 17200  0166FA                     _Timer0_Stop:
 17201                           	opt stack 19
 17202                           
 17203                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 17204                           
 17205                           ;incstack = 0
 17206  0166FA  9AF2               	bcf	intcon,5,c	;volatile
 17207                           
 17208                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 17209  0166FC  94F2               	bcf	intcon,2,c	;volatile
 17210  0166FE  0012               	return		;funcret
 17211  016700                     __end_of_Timer0_Stop:
 17212                           	opt stack 0
 17213                           tosu	equ	0xFFF
 17214                           tosh	equ	0xFFE
 17215                           tosl	equ	0xFFD
 17216                           pclath	equ	0xFFA
 17217                           tblptru	equ	0xFF8
 17218                           tblptrh	equ	0xFF7
 17219                           tblptrl	equ	0xFF6
 17220                           tablat	equ	0xFF5
 17221                           prodh	equ	0xFF4
 17222                           prodl	equ	0xFF3
 17223                           intcon	equ	0xFF2
 17224                           postinc0	equ	0xFEE
 17225                           wreg	equ	0xFE8
 17226                           indf1	equ	0xFE7
 17227                           postdec1	equ	0xFE5
 17228                           fsr1h	equ	0xFE2
 17229                           fsr1l	equ	0xFE1
 17230                           indf2	equ	0xFDF
 17231                           postinc2	equ	0xFDE
 17232                           postdec2	equ	0xFDD
 17233                           plusw2	equ	0xFDB
 17234                           fsr2h	equ	0xFDA
 17235                           fsr2l	equ	0xFD9
 17236                           status	equ	0xFD8
 17237                           
 17238 ;; *************** function _Timer0_Restart *****************
 17239 ;; Defined at:
 17240 ;;		line 83 in file "Library/Timer0.c"
 17241 ;; Parameters:    Size  Location     Type
 17242 ;;		None
 17243 ;; Auto vars:     Size  Location     Type
 17244 ;;		None
 17245 ;; Return value:  Size  Location     Type
 17246 ;;                  1    wreg      void 
 17247 ;; Registers used:
 17248 ;;		None
 17249 ;; Tracked objects:
 17250 ;;		On entry : 0/0
 17251 ;;		On exit  : 0/0
 17252 ;;		Unchanged: 0/0
 17253 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17254 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17255 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17256 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17257 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17258 ;;Total ram usage:        0 bytes
 17259 ;; Hardware stack levels used:    1
 17260 ;; Hardware stack levels required when called:    7
 17261 ;; This function calls:
 17262 ;;		Nothing
 17263 ;; This function is called by:
 17264 ;;		_Motor_Step
 17265 ;; This function uses a non-reentrant model
 17266 ;;
 17267                           
 17268                           	psect	text74
 17269  0166A4                     __ptext74:
 17270                           	opt stack 0
 17271  0166A4                     _Timer0_Restart:
 17272                           	opt stack 19
 17273                           
 17274                           ;Timer0.c: 85: TMR0 = COUNTER;
 17275                           
 17276                           ;incstack = 0
 17277  0166A4  C029  FFD6         	movff	_COUNTER,4054	;volatile
 17278  0166A8  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 17279                           
 17280                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 17281  0166AC  8AF2               	bsf	intcon,5,c	;volatile
 17282  0166AE  0012               	return		;funcret
 17283  0166B0                     __end_of_Timer0_Restart:
 17284                           	opt stack 0
 17285                           tosu	equ	0xFFF
 17286                           tosh	equ	0xFFE
 17287                           tosl	equ	0xFFD
 17288                           pclath	equ	0xFFA
 17289                           tblptru	equ	0xFF8
 17290                           tblptrh	equ	0xFF7
 17291                           tblptrl	equ	0xFF6
 17292                           tablat	equ	0xFF5
 17293                           prodh	equ	0xFF4
 17294                           prodl	equ	0xFF3
 17295                           intcon	equ	0xFF2
 17296                           postinc0	equ	0xFEE
 17297                           wreg	equ	0xFE8
 17298                           indf1	equ	0xFE7
 17299                           postdec1	equ	0xFE5
 17300                           fsr1h	equ	0xFE2
 17301                           fsr1l	equ	0xFE1
 17302                           indf2	equ	0xFDF
 17303                           postinc2	equ	0xFDE
 17304                           postdec2	equ	0xFDD
 17305                           plusw2	equ	0xFDB
 17306                           fsr2h	equ	0xFDA
 17307                           fsr2l	equ	0xFD9
 17308                           status	equ	0xFD8
 17309                           
 17310 ;; *************** function _MXK_SwitchTo *****************
 17311 ;; Defined at:
 17312 ;;		line 105 in file "Library/MXK.c"
 17313 ;; Parameters:    Size  Location     Type
 17314 ;;  pModule         1    wreg     enum E6927
 17315 ;; Auto vars:     Size  Location     Type
 17316 ;;  pModule         1    7[BANK0 ] enum E6927
 17317 ;;  CUR             1    6[BANK0 ] unsigned char 
 17318 ;; Return value:  Size  Location     Type
 17319 ;;                  1    wreg      unsigned char 
 17320 ;; Registers used:
 17321 ;;		wreg, status,2, status,0, cstack
 17322 ;; Tracked objects:
 17323 ;;		On entry : 0/0
 17324 ;;		On exit  : 0/0
 17325 ;;		Unchanged: 0/0
 17326 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17327 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17328 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17329 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17330 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17331 ;;Total ram usage:        2 bytes
 17332 ;; Hardware stack levels used:    1
 17333 ;; Hardware stack levels required when called:    8
 17334 ;; This function calls:
 17335 ;;		_delay_us
 17336 ;; This function is called by:
 17337 ;;		_Motor_Step
 17338 ;;		_findClosestWall
 17339 ;;		_mode1
 17340 ;;		_mode2
 17341 ;;		_mode4
 17342 ;;		_main
 17343 ;; This function uses a non-reentrant model
 17344 ;;
 17345                           
 17346                           	psect	text75
 17347  015E56                     __ptext75:
 17348                           	opt stack 0
 17349  015E56                     _MXK_SwitchTo:
 17350                           	opt stack 20
 17351                           
 17352                           ;incstack = 0
 17353                           ;MXK_SwitchTo@pModule stored from wreg
 17354  015E56  0100               	movlb	0	; () banked
 17355  015E58  6FC1               	movwf	MXK_SwitchTo@pModule& (0+255),b
 17356                           
 17357                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 17358  015E5A  5086               	movf	3974,w,c	;volatile
 17359  015E5C  0B0F               	andlw	15
 17360  015E5E  0100               	movlb	0	; () banked
 17361  015E60  6FC0               	movwf	MXK_SwitchTo@CUR& (0+255),b
 17362                           
 17363                           ; BSR set to: 0
 17364                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 17365  015E62  504B               	movf	_Bus_State,w,c
 17366  015E64  A4D8               	btfss	status,2,c
 17367  015E66  D002               	goto	l1730
 17368                           
 17369                           ; BSR set to: 0
 17370                           ;MXK.c: 110: return 0;
 17371  015E68  0E00               	movlw	0
 17372                           
 17373                           ; BSR set to: 0
 17374  015E6A  0012               	return	
 17375  015E6C                     l1730:
 17376                           
 17377                           ; BSR set to: 0
 17378                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 17379                           
 17380                           ; BSR set to: 0
 17381  015E6C  0E00               	movlw	0
 17382  015E6E  6E4B               	movwf	_Bus_State,c
 17383                           
 17384                           ; BSR set to: 0
 17385                           ;MXK.c: 114: if (CUR != pModule)
 17386  015E70  0100               	movlb	0	; () banked
 17387  015E72  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17388  015E74  0100               	movlb	0	; () banked
 17389  015E76  19C0               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 17390  015E78  B4D8               	btfsc	status,2,c
 17391  015E7A  D00C               	goto	l1732
 17392                           
 17393                           ; BSR set to: 0
 17394                           ;MXK.c: 115: {
 17395                           ;MXK.c: 116: PORTG &= ~(0xF);
 17396  015E7C  0EF0               	movlw	240
 17397  015E7E  1686               	andwf	3974,f,c	;volatile
 17398                           
 17399                           ;MXK.c: 117: PORTG |= pModule;
 17400  015E80  0100               	movlb	0	; () banked
 17401  015E82  51C1               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 17402  015E84  1286               	iorwf	3974,f,c	;volatile
 17403                           
 17404                           ; BSR set to: 0
 17405                           ;MXK.c: 120: delay_us(10);
 17406  015E86  0E00               	movlw	0
 17407  015E88  0100               	movlb	0	; () banked
 17408  015E8A  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17409  015E8C  0E0A               	movlw	10
 17410  015E8E  6FBA               	movwf	delay_us@us& (0+255),b
 17411  015E90  EC4B  F0AD         	call	_delay_us	;wreg free
 17412  015E94                     l1732:
 17413                           
 17414                           ;MXK.c: 121: }
 17415                           ;MXK.c: 122: return 1;
 17416  015E94  0E01               	movlw	1
 17417  015E96  0012               	return	
 17418  015E98                     __end_of_MXK_SwitchTo:
 17419                           	opt stack 0
 17420                           tosu	equ	0xFFF
 17421                           tosh	equ	0xFFE
 17422                           tosl	equ	0xFFD
 17423                           pclath	equ	0xFFA
 17424                           tblptru	equ	0xFF8
 17425                           tblptrh	equ	0xFF7
 17426                           tblptrl	equ	0xFF6
 17427                           tablat	equ	0xFF5
 17428                           prodh	equ	0xFF4
 17429                           prodl	equ	0xFF3
 17430                           intcon	equ	0xFF2
 17431                           postinc0	equ	0xFEE
 17432                           wreg	equ	0xFE8
 17433                           indf1	equ	0xFE7
 17434                           postdec1	equ	0xFE5
 17435                           fsr1h	equ	0xFE2
 17436                           fsr1l	equ	0xFE1
 17437                           indf2	equ	0xFDF
 17438                           postinc2	equ	0xFDE
 17439                           postdec2	equ	0xFDD
 17440                           plusw2	equ	0xFDB
 17441                           fsr2h	equ	0xFDA
 17442                           fsr2l	equ	0xFD9
 17443                           status	equ	0xFD8
 17444                           
 17445 ;; *************** function _MXK_Release *****************
 17446 ;; Defined at:
 17447 ;;		line 130 in file "Library/MXK.c"
 17448 ;; Parameters:    Size  Location     Type
 17449 ;;		None
 17450 ;; Auto vars:     Size  Location     Type
 17451 ;;		None
 17452 ;; Return value:  Size  Location     Type
 17453 ;;                  1    wreg      unsigned char 
 17454 ;; Registers used:
 17455 ;;		wreg, status,2, status,0
 17456 ;; Tracked objects:
 17457 ;;		On entry : 0/0
 17458 ;;		On exit  : 0/0
 17459 ;;		Unchanged: 0/0
 17460 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17461 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17462 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17463 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17464 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;Total ram usage:        0 bytes
 17466 ;; Hardware stack levels used:    1
 17467 ;; Hardware stack levels required when called:    7
 17468 ;; This function calls:
 17469 ;;		Nothing
 17470 ;; This function is called by:
 17471 ;;		_Motor_Step
 17472 ;;		_init
 17473 ;;		_findClosestWall
 17474 ;;		_mode1
 17475 ;;		_mode2
 17476 ;;		_mode4
 17477 ;;		_main
 17478 ;; This function uses a non-reentrant model
 17479 ;;
 17480                           
 17481                           	psect	text76
 17482  0164B2                     __ptext76:
 17483                           	opt stack 0
 17484  0164B2                     _MXK_Release:
 17485                           	opt stack 21
 17486                           
 17487                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 17488                           
 17489                           ;incstack = 0
 17490  0164B2  0E01               	movlw	1
 17491  0164B4  6E4B               	movwf	_Bus_State,c
 17492                           
 17493                           ;MXK.c: 134: if (lQueue != 0)
 17494  0164B6  0100               	movlb	0	; () banked
 17495  0164B8  5163               	movf	_lQueue& (0+255),w,b	;volatile
 17496  0164BA  0100               	movlb	0	; () banked
 17497  0164BC  1164               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 17498  0164BE  0100               	movlb	0	; () banked
 17499  0164C0  1165               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 17500  0164C2  B4D8               	btfsc	status,2,c
 17501  0164C4  D002               	goto	l1735
 17502                           
 17503                           ; BSR set to: 0
 17504                           ;MXK.c: 135: return 1;
 17505  0164C6  0E01               	movlw	1
 17506                           
 17507                           ; BSR set to: 0
 17508  0164C8  0012               	return	
 17509  0164CA                     l1735:
 17510                           
 17511                           ; BSR set to: 0
 17512                           ;MXK.c: 137: return 0;
 17513                           
 17514                           ; BSR set to: 0
 17515  0164CA  0E00               	movlw	0
 17516  0164CC  0012               	return	
 17517  0164CE                     __end_of_MXK_Release:
 17518                           	opt stack 0
 17519                           tosu	equ	0xFFF
 17520                           tosh	equ	0xFFE
 17521                           tosl	equ	0xFFD
 17522                           pclath	equ	0xFFA
 17523                           tblptru	equ	0xFF8
 17524                           tblptrh	equ	0xFF7
 17525                           tblptrl	equ	0xFF6
 17526                           tablat	equ	0xFF5
 17527                           prodh	equ	0xFF4
 17528                           prodl	equ	0xFF3
 17529                           intcon	equ	0xFF2
 17530                           postinc0	equ	0xFEE
 17531                           wreg	equ	0xFE8
 17532                           indf1	equ	0xFE7
 17533                           postdec1	equ	0xFE5
 17534                           fsr1h	equ	0xFE2
 17535                           fsr1l	equ	0xFE1
 17536                           indf2	equ	0xFDF
 17537                           postinc2	equ	0xFDE
 17538                           postdec2	equ	0xFDD
 17539                           plusw2	equ	0xFDB
 17540                           fsr2h	equ	0xFDA
 17541                           fsr2l	equ	0xFD9
 17542                           status	equ	0xFD8
 17543                           
 17544 ;; *************** function _MXK_Queue *****************
 17545 ;; Defined at:
 17546 ;;		line 144 in file "Library/MXK.c"
 17547 ;; Parameters:    Size  Location     Type
 17548 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 17549 ;;		 -> Absolute function(1), Motor_Step(1), 
 17550 ;; Auto vars:     Size  Location     Type
 17551 ;;		None
 17552 ;; Return value:  Size  Location     Type
 17553 ;;                  1    wreg      void 
 17554 ;; Registers used:
 17555 ;;		wreg, status,2, status,0
 17556 ;; Tracked objects:
 17557 ;;		On entry : 0/0
 17558 ;;		On exit  : 0/0
 17559 ;;		Unchanged: 0/0
 17560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17561 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17564 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17565 ;;Total ram usage:        3 bytes
 17566 ;; Hardware stack levels used:    1
 17567 ;; Hardware stack levels required when called:    7
 17568 ;; This function calls:
 17569 ;;		Nothing
 17570 ;; This function is called by:
 17571 ;;		_Motor_Step
 17572 ;; This function uses a non-reentrant model
 17573 ;;
 17574                           
 17575                           	psect	text77
 17576  016670                     __ptext77:
 17577                           	opt stack 0
 17578  016670                     _MXK_Queue:
 17579                           	opt stack 19
 17580                           
 17581                           ;MXK.c: 146: lQueue = pCallback;
 17582                           
 17583                           ; BSR set to: 0
 17584                           ;incstack = 0
 17585  016670  C0BA  F063         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 17586  016674  C0BB  F064         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 17587  016678  C0BC  F065         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 17588  01667C  0012               	return		;funcret
 17589  01667E                     __end_of_MXK_Queue:
 17590                           	opt stack 0
 17591                           tosu	equ	0xFFF
 17592                           tosh	equ	0xFFE
 17593                           tosl	equ	0xFFD
 17594                           pclath	equ	0xFFA
 17595                           tblptru	equ	0xFF8
 17596                           tblptrh	equ	0xFF7
 17597                           tblptrl	equ	0xFF6
 17598                           tablat	equ	0xFF5
 17599                           prodh	equ	0xFF4
 17600                           prodl	equ	0xFF3
 17601                           intcon	equ	0xFF2
 17602                           postinc0	equ	0xFEE
 17603                           wreg	equ	0xFE8
 17604                           indf1	equ	0xFE7
 17605                           postdec1	equ	0xFE5
 17606                           fsr1h	equ	0xFE2
 17607                           fsr1l	equ	0xFE1
 17608                           indf2	equ	0xFDF
 17609                           postinc2	equ	0xFDE
 17610                           postdec2	equ	0xFDD
 17611                           plusw2	equ	0xFDB
 17612                           fsr2h	equ	0xFDA
 17613                           fsr2l	equ	0xFD9
 17614                           status	equ	0xFD8
 17615                           
 17616 ;; *************** function _MXK_BlockSwitchTo *****************
 17617 ;; Defined at:
 17618 ;;		line 82 in file "Library/MXK.c"
 17619 ;; Parameters:    Size  Location     Type
 17620 ;;  pModule         1    wreg     enum E6927
 17621 ;; Auto vars:     Size  Location     Type
 17622 ;;  pModule         1    7[BANK0 ] enum E6927
 17623 ;;  CUR             1    6[BANK0 ] unsigned char 
 17624 ;; Return value:  Size  Location     Type
 17625 ;;                  1    wreg      unsigned char 
 17626 ;; Registers used:
 17627 ;;		wreg, status,2, status,0, cstack
 17628 ;; Tracked objects:
 17629 ;;		On entry : 0/0
 17630 ;;		On exit  : 0/0
 17631 ;;		Unchanged: 0/0
 17632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17633 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17635 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17636 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17637 ;;Total ram usage:        2 bytes
 17638 ;; Hardware stack levels used:    1
 17639 ;; Hardware stack levels required when called:    8
 17640 ;; This function calls:
 17641 ;;		_delay_us
 17642 ;; This function is called by:
 17643 ;;		_init
 17644 ;; This function uses a non-reentrant model
 17645 ;;
 17646                           
 17647                           	psect	text78
 17648  015F94                     __ptext78:
 17649                           	opt stack 0
 17650  015F94                     _MXK_BlockSwitchTo:
 17651                           	opt stack 21
 17652                           
 17653                           ;incstack = 0
 17654                           ;MXK_BlockSwitchTo@pModule stored from wreg
 17655  015F94  0100               	movlb	0	; () banked
 17656  015F96  6FC1               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 17657                           
 17658                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 17659  015F98  5086               	movf	3974,w,c	;volatile
 17660  015F9A  0B0F               	andlw	15
 17661  015F9C  0100               	movlb	0	; () banked
 17662  015F9E  6FC0               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 17663  015FA0                     
 17664                           ; BSR set to: 0
 17665                           
 17666                           ; BSR set to: 0
 17667  015FA0  504B               	movf	_Bus_State,w,c
 17668  015FA2  B4D8               	btfsc	status,2,c
 17669  015FA4  D7FD               	goto	l1724
 17670                           
 17671                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 17672  015FA6  0E00               	movlw	0
 17673  015FA8  6E4B               	movwf	_Bus_State,c
 17674                           
 17675                           ;MXK.c: 90: if (CUR != pModule)
 17676  015FAA  0100               	movlb	0	; () banked
 17677  015FAC  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17678  015FAE  0100               	movlb	0	; () banked
 17679  015FB0  19C0               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 17680  015FB2  B4D8               	btfsc	status,2,c
 17681  015FB4  D00C               	goto	l1726
 17682                           
 17683                           ; BSR set to: 0
 17684                           ;MXK.c: 91: {
 17685                           ;MXK.c: 92: PORTG &= ~(0xF);
 17686  015FB6  0EF0               	movlw	240
 17687  015FB8  1686               	andwf	3974,f,c	;volatile
 17688                           
 17689                           ;MXK.c: 93: PORTG |= pModule;
 17690  015FBA  0100               	movlb	0	; () banked
 17691  015FBC  51C1               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 17692  015FBE  1286               	iorwf	3974,f,c	;volatile
 17693                           
 17694                           ; BSR set to: 0
 17695                           ;MXK.c: 96: delay_us(10);
 17696  015FC0  0E00               	movlw	0
 17697  015FC2  0100               	movlb	0	; () banked
 17698  015FC4  6FBB               	movwf	(delay_us@us+1)& (0+255),b
 17699  015FC6  0E0A               	movlw	10
 17700  015FC8  6FBA               	movwf	delay_us@us& (0+255),b
 17701  015FCA  EC4B  F0AD         	call	_delay_us	;wreg free
 17702  015FCE                     l1726:
 17703                           
 17704                           ;MXK.c: 97: }
 17705                           ;MXK.c: 98: return 1;
 17706  015FCE  0E01               	movlw	1
 17707  015FD0  0012               	return	
 17708  015FD2                     __end_of_MXK_BlockSwitchTo:
 17709                           	opt stack 0
 17710                           tosu	equ	0xFFF
 17711                           tosh	equ	0xFFE
 17712                           tosl	equ	0xFFD
 17713                           pclath	equ	0xFFA
 17714                           tblptru	equ	0xFF8
 17715                           tblptrh	equ	0xFF7
 17716                           tblptrl	equ	0xFF6
 17717                           tablat	equ	0xFF5
 17718                           prodh	equ	0xFF4
 17719                           prodl	equ	0xFF3
 17720                           intcon	equ	0xFF2
 17721                           postinc0	equ	0xFEE
 17722                           wreg	equ	0xFE8
 17723                           indf1	equ	0xFE7
 17724                           postdec1	equ	0xFE5
 17725                           fsr1h	equ	0xFE2
 17726                           fsr1l	equ	0xFE1
 17727                           indf2	equ	0xFDF
 17728                           postinc2	equ	0xFDE
 17729                           postdec2	equ	0xFDD
 17730                           plusw2	equ	0xFDB
 17731                           fsr2h	equ	0xFDA
 17732                           fsr2l	equ	0xFD9
 17733                           status	equ	0xFD8
 17734                           
 17735 ;; *************** function _delay_us *****************
 17736 ;; Defined at:
 17737 ;;		line 255 in file "Library/Types.c"
 17738 ;; Parameters:    Size  Location     Type
 17739 ;;  us              2    0[BANK0 ] unsigned short 
 17740 ;; Auto vars:     Size  Location     Type
 17741 ;;  u               4    2[BANK0 ] unsigned long 
 17742 ;; Return value:  Size  Location     Type
 17743 ;;                  1    wreg      void 
 17744 ;; Registers used:
 17745 ;;		wreg, status,2, status,0
 17746 ;; Tracked objects:
 17747 ;;		On entry : 0/0
 17748 ;;		On exit  : 0/0
 17749 ;;		Unchanged: 0/0
 17750 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17751 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17752 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17753 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17754 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17755 ;;Total ram usage:        6 bytes
 17756 ;; Hardware stack levels used:    1
 17757 ;; Hardware stack levels required when called:    7
 17758 ;; This function calls:
 17759 ;;		Nothing
 17760 ;; This function is called by:
 17761 ;;		_MXK_BlockSwitchTo
 17762 ;;		_MXK_SwitchTo
 17763 ;; This function uses a non-reentrant model
 17764 ;;
 17765                           
 17766                           	psect	text79
 17767  015A96                     __ptext79:
 17768                           	opt stack 0
 17769  015A96                     _delay_us:
 17770                           	opt stack 20
 17771                           
 17772                           ;Types.c: 256: unsigned long u;
 17773                           ;Types.c: 257: while (us--) {
 17774                           
 17775                           ;incstack = 0
 17776  015A96  D01C               	goto	u9180
 17777  015A98                     l12519:
 17778                           
 17779                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 17780  015A98  0E00               	movlw	0
 17781  015A9A  0100               	movlb	0	; () banked
 17782  015A9C  6FBC               	movwf	delay_us@u& (0+255),b
 17783  015A9E  0E00               	movlw	0
 17784  015AA0  6FBD               	movwf	(delay_us@u+1)& (0+255),b
 17785  015AA2  0E00               	movlw	0
 17786  015AA4  6FBE               	movwf	(delay_us@u+2)& (0+255),b
 17787  015AA6  0E00               	movlw	0
 17788  015AA8  6FBF               	movwf	(delay_us@u+3)& (0+255),b
 17789  015AAA                     l12521:
 17790                           
 17791                           ; BSR set to: 0
 17792  015AAA  0100               	movlb	0	; () banked
 17793  015AAC  51BC               	movf	delay_us@u& (0+255),w,b
 17794  015AAE  0100               	movlb	0	; () banked
 17795  015AB0  11BD               	iorwf	(delay_us@u+1)& (0+255),w,b
 17796  015AB2  0100               	movlb	0	; () banked
 17797  015AB4  11BE               	iorwf	(delay_us@u+2)& (0+255),w,b
 17798  015AB6  0100               	movlb	0	; () banked
 17799  015AB8  11BF               	iorwf	(delay_us@u+3)& (0+255),w,b
 17800  015ABA  A4D8               	btfss	status,2,c
 17801  015ABC  D009               	goto	u9180
 17802                           
 17803                           ; BSR set to: 0
 17804                           
 17805                           ; BSR set to: 0
 17806  015ABE  F000               	nop		; ;# 
 17807  015AC0  0E01               	movlw	1
 17808  015AC2  0100               	movlb	0	; () banked
 17809  015AC4  27BC               	addwf	delay_us@u& (0+255),f,b
 17810  015AC6  0E00               	movlw	0
 17811  015AC8  23BD               	addwfc	(delay_us@u+1)& (0+255),f,b
 17812  015ACA  23BE               	addwfc	(delay_us@u+2)& (0+255),f,b
 17813  015ACC  23BF               	addwfc	(delay_us@u+3)& (0+255),f,b
 17814  015ACE  D7ED               	goto	l12521
 17815  015AD0                     u9180:
 17816                           
 17817                           ; BSR set to: 0
 17818                           
 17819                           ; BSR set to: 0
 17820  015AD0  0100               	movlb	0	; () banked
 17821  015AD2  07BA               	decf	delay_us@us& (0+255),f,b
 17822  015AD4  A0D8               	btfss	status,0,c
 17823  015AD6  07BB               	decf	(delay_us@us+1)& (0+255),f,b
 17824  015AD8  0100               	movlb	0	; () banked
 17825  015ADA  29BA               	incf	delay_us@us& (0+255),w,b
 17826  015ADC  E1DD               	bnz	l12519
 17827  015ADE  0100               	movlb	0	; () banked
 17828  015AE0  29BB               	incf	(delay_us@us+1)& (0+255),w,b
 17829  015AE2  B4D8               	btfsc	status,2,c
 17830  015AE4  0012               	return	
 17831  015AE6  D7D8               	goto	l832
 17832  015AE8                     __end_of_delay_us:
 17833                           	opt stack 0
 17834                           tosu	equ	0xFFF
 17835                           tosh	equ	0xFFE
 17836                           tosl	equ	0xFFD
 17837                           pclath	equ	0xFFA
 17838                           tblptru	equ	0xFF8
 17839                           tblptrh	equ	0xFF7
 17840                           tblptrl	equ	0xFF6
 17841                           tablat	equ	0xFF5
 17842                           prodh	equ	0xFF4
 17843                           prodl	equ	0xFF3
 17844                           intcon	equ	0xFF2
 17845                           postinc0	equ	0xFEE
 17846                           wreg	equ	0xFE8
 17847                           indf1	equ	0xFE7
 17848                           postdec1	equ	0xFE5
 17849                           fsr1h	equ	0xFE2
 17850                           fsr1l	equ	0xFE1
 17851                           indf2	equ	0xFDF
 17852                           postinc2	equ	0xFDE
 17853                           postdec2	equ	0xFDD
 17854                           plusw2	equ	0xFDB
 17855                           fsr2h	equ	0xFDA
 17856                           fsr2l	equ	0xFD9
 17857                           status	equ	0xFD8
 17858                           
 17859 ;; *************** function _LCD_Init *****************
 17860 ;; Defined at:
 17861 ;;		line 172 in file "Library/LCD.c"
 17862 ;; Parameters:    Size  Location     Type
 17863 ;;		None
 17864 ;; Auto vars:     Size  Location     Type
 17865 ;;  i               2   55[BANK0 ] unsigned short 
 17866 ;; Return value:  Size  Location     Type
 17867 ;;                  1    wreg      void 
 17868 ;; Registers used:
 17869 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17870 ;; Tracked objects:
 17871 ;;		On entry : 0/0
 17872 ;;		On exit  : 0/0
 17873 ;;		Unchanged: 0/0
 17874 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17875 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17876 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17877 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17878 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17879 ;;Total ram usage:        4 bytes
 17880 ;; Hardware stack levels used:    1
 17881 ;; Hardware stack levels required when called:   15
 17882 ;; This function calls:
 17883 ;;		_Configure_GPIOs
 17884 ;;		_LCD_Fill
 17885 ;;		_LCD_Write
 17886 ;;		_Set_Rotation
 17887 ;;		_delay_ms
 17888 ;; This function is called by:
 17889 ;;		_init
 17890 ;; This function uses a non-reentrant model
 17891 ;;
 17892                           
 17893                           	psect	text80
 17894  012E68                     __ptext80:
 17895                           	opt stack 0
 17896  012E68                     _LCD_Init:
 17897                           	opt stack 14
 17898                           
 17899                           ;LCD.c: 174: UINT16 i;
 17900                           ;LCD.c: 175: Configure_GPIOs();
 17901                           
 17902                           ; BSR set to: 0
 17903                           ;incstack = 0
 17904  012E68  EC5B  F0AA         	call	_Configure_GPIOs	;wreg free
 17905                           
 17906                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 17907  012E6C  0E00               	movlw	0
 17908  012E6E  0100               	movlb	0	; () banked
 17909  012E70  6FF2               	movwf	(LCD_Init@i+1)& (0+255),b
 17910  012E72  0E00               	movlw	0
 17911  012E74  6FF1               	movwf	LCD_Init@i& (0+255),b
 17912                           
 17913                           ; BSR set to: 0
 17914  012E76  0100               	movlb	0	; () banked
 17915  012E78  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17916  012E7A  E106               	bnz	u11100
 17917  012E7C  0E59               	movlw	89
 17918  012E7E  0100               	movlb	0	; () banked
 17919  012E80  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17920  012E82  B0D8               	btfsc	status,0,c
 17921  012E84  D08B               	goto	u11140
 17922  012E86  D001               	goto	l85
 17923  012E88                     u11100:
 17924                           
 17925                           ; BSR set to: 0
 17926  012E88  D089               	goto	u11140
 17927  012E8A                     l85:
 17928                           
 17929                           ; BSR set to: 0
 17930                           ;LCD.c: 178: {
 17931                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 17932                           
 17933                           ; BSR set to: 0
 17934  012E8A  90D8               	bcf	status,0,c
 17935  012E8C  0100               	movlb	0	; () banked
 17936  012E8E  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17937  012E90  6EF6               	movwf	tblptrl,c
 17938  012E92  0100               	movlb	0	; () banked
 17939  012E94  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17940  012E96  6EF7               	movwf	tblptrh,c
 17941  012E98  0E33               	movlw	low _InitList
 17942  012E9A  26F6               	addwf	tblptrl,f,c
 17943  012E9C  0EFC               	movlw	high _InitList
 17944  012E9E  22F7               	addwfc	tblptrh,f,c
 17945  012EA0                     	if	1	;There are 3 active tblptr bytes
 17946  012EA0  6AF8               	clrf	tblptru,c
 17947  012EA2  0E00               	movlw	low (__mediumconst shr (0+16))
 17948  012EA4  22F8               	addwfc	tblptru,f,c
 17949  012EA6                     	endif
 17950  012EA6  0009               	tblrd		*+
 17951  012EA8  0E80               	movlw	128
 17952  012EAA  18F5               	xorwf	tablat,w,c
 17953  012EAC  0009               	tblrd		*+
 17954  012EAE  10F5               	iorwf	tablat,w,c
 17955  012EB0  A4D8               	btfss	status,2,c
 17956  012EB2  D022               	goto	l87
 17957                           
 17958                           ; BSR set to: 0
 17959  012EB4  0100               	movlb	0	; () banked
 17960  012EB6  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 17961  012EB8  E11F               	bnz	l14347
 17962  012EBA  0E58               	movlw	88
 17963  012EBC  0100               	movlb	0	; () banked
 17964  012EBE  5DF1               	subwf	LCD_Init@i& (0+255),w,b
 17965  012EC0  B0D8               	btfsc	status,0,c
 17966  012EC2  D01A               	goto	l87
 17967                           
 17968                           ; BSR set to: 0
 17969                           ;LCD.c: 180: delay_ms(InitList[++i]);
 17970  012EC4  0100               	movlb	0	; () banked
 17971  012EC6  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 17972  012EC8  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 17973  012ECA  90D8               	bcf	status,0,c
 17974  012ECC  0100               	movlb	0	; () banked
 17975  012ECE  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 17976  012ED0  6EF6               	movwf	tblptrl,c
 17977  012ED2  0100               	movlb	0	; () banked
 17978  012ED4  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 17979  012ED6  6EF7               	movwf	tblptrh,c
 17980  012ED8  0E33               	movlw	low _InitList
 17981  012EDA  26F6               	addwf	tblptrl,f,c
 17982  012EDC  0EFC               	movlw	high _InitList
 17983  012EDE  22F7               	addwfc	tblptrh,f,c
 17984  012EE0                     	if	1	;There are 3 active tblptr bytes
 17985  012EE0  6AF8               	clrf	tblptru,c
 17986  012EE2  0E00               	movlw	low (__mediumconst shr (0+16))
 17987  012EE4  22F8               	addwfc	tblptru,f,c
 17988  012EE6                     	endif
 17989  012EE6  0009               	tblrd		*+
 17990  012EE8  CFF5 F0BA          	movff	tablat,delay_ms@ms
 17991  012EEC  000A               	tblrd		*-
 17992  012EEE  CFF5 F0BB          	movff	tablat,delay_ms@ms+1
 17993  012EF2  EC34  F0AB         	call	_delay_ms	;wreg free
 17994  012EF6  D04B               	goto	l90
 17995  012EF8                     l87:
 17996  012EF8                     l14347:
 17997                           
 17998                           ;LCD.c: 181: else
 17999                           ;LCD.c: 182: {
 18000                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 18001  012EF8  90D8               	bcf	status,0,c
 18002  012EFA  0100               	movlb	0	; () banked
 18003  012EFC  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18004  012EFE  6EF6               	movwf	tblptrl,c
 18005  012F00  0100               	movlb	0	; () banked
 18006  012F02  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18007  012F04  6EF7               	movwf	tblptrh,c
 18008  012F06  0E33               	movlw	low _InitList
 18009  012F08  26F6               	addwf	tblptrl,f,c
 18010  012F0A  0EFC               	movlw	high _InitList
 18011  012F0C  22F7               	addwfc	tblptrh,f,c
 18012  012F0E                     	if	1	;There are 3 active tblptr bytes
 18013  012F0E  6AF8               	clrf	tblptru,c
 18014  012F10  0E00               	movlw	low (__mediumconst shr (0+16))
 18015  012F12  22F8               	addwfc	tblptru,f,c
 18016  012F14                     	endif
 18017  012F14  0009               	tblrd		*+
 18018  012F16  0E00               	movlw	0
 18019  012F18  5EF5               	subwf	tablat,f,c
 18020  012F1A  0009               	tblrd		*+
 18021  012F1C  0E01               	movlw	1
 18022  012F1E  5AF5               	subwfb	tablat,f,c
 18023  012F20  A0D8               	btfss	status,0,c
 18024  012F22  D020               	goto	l89
 18025                           
 18026                           ; BSR set to: 0
 18027  012F24  0E00               	movlw	0
 18028  012F26  0100               	movlb	0	; () banked
 18029  012F28  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18030  012F2A  90D8               	bcf	status,0,c
 18031  012F2C  0100               	movlb	0	; () banked
 18032  012F2E  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18033  012F30  6EF6               	movwf	tblptrl,c
 18034  012F32  0100               	movlb	0	; () banked
 18035  012F34  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18036  012F36  6EF7               	movwf	tblptrh,c
 18037  012F38  0E33               	movlw	low _InitList
 18038  012F3A  26F6               	addwf	tblptrl,f,c
 18039  012F3C  0EFC               	movlw	high _InitList
 18040  012F3E  22F7               	addwfc	tblptrh,f,c
 18041  012F40                     	if	1	;There are 3 active tblptr bytes
 18042  012F40  6AF8               	clrf	tblptru,c
 18043  012F42  0E00               	movlw	low (__mediumconst shr (0+16))
 18044  012F44  22F8               	addwfc	tblptru,f,c
 18045  012F46                     	endif
 18046  012F46  0009               	tblrd		*+
 18047  012F48  CFF5 F0EF          	movff	tablat,??_LCD_Init
 18048  012F4C  0009               	tblrd		*+
 18049  012F4E  CFF5 F0F0          	movff	tablat,??_LCD_Init+1
 18050  012F52  C0F0  F0EF         	movff	??_LCD_Init+1,??_LCD_Init
 18051  012F56  0100               	movlb	0	; () banked
 18052  012F58  6BF0               	clrf	(??_LCD_Init+1)& (0+255),b
 18053  012F5A  0100               	movlb	0	; () banked
 18054  012F5C  51EF               	movf	??_LCD_Init& (0+255),w,b
 18055  012F5E  EC90  F0B1         	call	_LCD_Write
 18056  012F62  D015               	goto	l90
 18057  012F64                     l89:
 18058                           
 18059                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 18060  012F64  0E01               	movlw	1
 18061  012F66  0100               	movlb	0	; () banked
 18062  012F68  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18063  012F6A  90D8               	bcf	status,0,c
 18064  012F6C  0100               	movlb	0	; () banked
 18065  012F6E  35F1               	rlcf	LCD_Init@i& (0+255),w,b
 18066  012F70  6EF6               	movwf	tblptrl,c
 18067  012F72  0100               	movlb	0	; () banked
 18068  012F74  35F2               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 18069  012F76  6EF7               	movwf	tblptrh,c
 18070  012F78  0E33               	movlw	low _InitList
 18071  012F7A  26F6               	addwf	tblptrl,f,c
 18072  012F7C  0EFC               	movlw	high _InitList
 18073  012F7E  22F7               	addwfc	tblptrh,f,c
 18074  012F80                     	if	1	;There are 3 active tblptr bytes
 18075  012F80  6AF8               	clrf	tblptru,c
 18076  012F82  0E00               	movlw	low (__mediumconst shr (0+16))
 18077  012F84  22F8               	addwfc	tblptru,f,c
 18078  012F86                     	endif
 18079  012F86  0008               	tblrd		*
 18080  012F88  50F5               	movf	tablat,w,c
 18081  012F8A  EC90  F0B1         	call	_LCD_Write
 18082  012F8E                     l90:
 18083  012F8E  0100               	movlb	0	; () banked
 18084  012F90  4BF1               	infsnz	LCD_Init@i& (0+255),f,b
 18085  012F92  2BF2               	incf	(LCD_Init@i+1)& (0+255),f,b
 18086                           
 18087                           ; BSR set to: 0
 18088  012F94  0100               	movlb	0	; () banked
 18089  012F96  51F2               	movf	(LCD_Init@i+1)& (0+255),w,b
 18090  012F98  E101               	bnz	l14357
 18091  012F9A  D770               	goto	L12
 18092  012F9C                     u11140:
 18093  012F9C                     l14357:
 18094                           
 18095                           ; BSR set to: 0
 18096                           ;LCD.c: 185: }
 18097                           ;LCD.c: 186: }
 18098                           ;LCD.c: 187: delay_ms(100);
 18099  012F9C  0E00               	movlw	0
 18100  012F9E  0100               	movlb	0	; () banked
 18101  012FA0  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18102  012FA2  0E64               	movlw	100
 18103  012FA4  6FBA               	movwf	delay_ms@ms& (0+255),b
 18104  012FA6  EC34  F0AB         	call	_delay_ms	;wreg free
 18105                           
 18106                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 18107  012FAA  0E00               	movlw	0
 18108  012FAC  0100               	movlb	0	; () banked
 18109  012FAE  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18110  012FB0  0E29               	movlw	41
 18111  012FB2  EC90  F0B1         	call	_LCD_Write
 18112                           
 18113                           ;LCD.c: 189: Set_Rotation(1);
 18114  012FB6  0E01               	movlw	1
 18115  012FB8  EC12  F0A6         	call	_Set_Rotation
 18116                           
 18117                           ;LCD.c: 191: delay_ms(100);
 18118  012FBC  0E00               	movlw	0
 18119  012FBE  0100               	movlb	0	; () banked
 18120  012FC0  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 18121  012FC2  0E64               	movlw	100
 18122  012FC4  6FBA               	movwf	delay_ms@ms& (0+255),b
 18123  012FC6  EC34  F0AB         	call	_delay_ms	;wreg free
 18124                           
 18125                           ;LCD.c: 192: LCD_Fill(0x0000);
 18126  012FCA  0E00               	movlw	0
 18127  012FCC  0100               	movlb	0	; () banked
 18128  012FCE  6FC4               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 18129  012FD0  0E00               	movlw	0
 18130  012FD2  6FC3               	movwf	LCD_Fill@pColour& (0+255),b
 18131  012FD4  EC1F  F0AD         	call	_LCD_Fill	;wreg free
 18132  012FD8  0012               	return		;funcret
 18133  012FDA                     __end_of_LCD_Init:
 18134                           	opt stack 0
 18135                           tosu	equ	0xFFF
 18136                           tosh	equ	0xFFE
 18137                           tosl	equ	0xFFD
 18138                           pclath	equ	0xFFA
 18139                           tblptru	equ	0xFF8
 18140                           tblptrh	equ	0xFF7
 18141                           tblptrl	equ	0xFF6
 18142                           tablat	equ	0xFF5
 18143                           prodh	equ	0xFF4
 18144                           prodl	equ	0xFF3
 18145                           intcon	equ	0xFF2
 18146                           postinc0	equ	0xFEE
 18147                           wreg	equ	0xFE8
 18148                           indf1	equ	0xFE7
 18149                           postdec1	equ	0xFE5
 18150                           fsr1h	equ	0xFE2
 18151                           fsr1l	equ	0xFE1
 18152                           indf2	equ	0xFDF
 18153                           postinc2	equ	0xFDE
 18154                           postdec2	equ	0xFDD
 18155                           plusw2	equ	0xFDB
 18156                           fsr2h	equ	0xFDA
 18157                           fsr2l	equ	0xFD9
 18158                           status	equ	0xFD8
 18159                           
 18160 ;; *************** function _Set_Rotation *****************
 18161 ;; Defined at:
 18162 ;;		line 248 in file "Library/LCD.c"
 18163 ;; Parameters:    Size  Location     Type
 18164 ;;  m               1    wreg     unsigned char 
 18165 ;; Auto vars:     Size  Location     Type
 18166 ;;  m               1    5[BANK0 ] unsigned char 
 18167 ;;  rotation        1    6[BANK0 ] unsigned char 
 18168 ;; Return value:  Size  Location     Type
 18169 ;;                  1    wreg      void 
 18170 ;; Registers used:
 18171 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18172 ;; Tracked objects:
 18173 ;;		On entry : 0/0
 18174 ;;		On exit  : 0/0
 18175 ;;		Unchanged: 0/0
 18176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18178 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18180 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18181 ;;Total ram usage:        2 bytes
 18182 ;; Hardware stack levels used:    1
 18183 ;; Hardware stack levels required when called:    9
 18184 ;; This function calls:
 18185 ;;		_LCD_Write
 18186 ;; This function is called by:
 18187 ;;		_LCD_Init
 18188 ;; This function uses a non-reentrant model
 18189 ;;
 18190                           
 18191                           	psect	text81
 18192  014C24                     __ptext81:
 18193                           	opt stack 0
 18194  014C24                     _Set_Rotation:
 18195                           	opt stack 19
 18196                           
 18197                           ;incstack = 0
 18198                           ;Set_Rotation@m stored from wreg
 18199  014C24  0100               	movlb	0	; () banked
 18200  014C26  6FBF               	movwf	Set_Rotation@m& (0+255),b
 18201                           
 18202                           ;LCD.c: 250: UINT8 rotation = 0x00;
 18203  014C28  0E00               	movlw	0
 18204  014C2A  0100               	movlb	0	; () banked
 18205  014C2C  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18206                           
 18207                           ; BSR set to: 0
 18208                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 18209  014C2E  0E00               	movlw	0
 18210  014C30  0100               	movlb	0	; () banked
 18211  014C32  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18212  014C34  0E36               	movlw	54
 18213  014C36  EC90  F0B1         	call	_LCD_Write
 18214                           
 18215                           ;LCD.c: 253: rotation = (m % 4);
 18216  014C3A  0100               	movlb	0	; () banked
 18217  014C3C  51BF               	movf	Set_Rotation@m& (0+255),w,b
 18218  014C3E  0B03               	andlw	3
 18219  014C40  0100               	movlb	0	; () banked
 18220  014C42  6FC0               	movwf	Set_Rotation@rotation& (0+255),b
 18221                           
 18222                           ;LCD.c: 255: switch(rotation)
 18223  014C44  D02C               	goto	l117
 18224  014C46                     
 18225                           ; BSR set to: 0
 18226                           ;LCD.c: 258: {
 18227                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 18228                           
 18229                           ; BSR set to: 0
 18230  014C46  0E01               	movlw	1
 18231  014C48  0100               	movlb	0	; () banked
 18232  014C4A  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18233  014C4C  0EC8               	movlw	200
 18234  014C4E  EC90  F0B1         	call	_LCD_Write
 18235                           
 18236                           ;LCD.c: 260: w = 128;
 18237  014C52  0E80               	movlw	128
 18238  014C54  6E50               	movwf	_w,c
 18239                           
 18240                           ;LCD.c: 261: l = 128;
 18241  014C56  0E80               	movlw	128
 18242  014C58  6E4F               	movwf	_l,c
 18243                           
 18244                           ;LCD.c: 262: break;
 18245  014C5A  0012               	return	
 18246  014C5C                     
 18247                           ;LCD.c: 265: {
 18248                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 18249  014C5C  0E01               	movlw	1
 18250  014C5E  0100               	movlb	0	; () banked
 18251  014C60  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18252  014C62  0EA8               	movlw	168
 18253  014C64  EC90  F0B1         	call	_LCD_Write
 18254                           
 18255                           ;LCD.c: 267: w = 128;
 18256  014C68  0E80               	movlw	128
 18257  014C6A  6E50               	movwf	_w,c
 18258                           
 18259                           ;LCD.c: 268: l = 128;
 18260  014C6C  0E80               	movlw	128
 18261  014C6E  6E4F               	movwf	_l,c
 18262                           
 18263                           ;LCD.c: 269: break;
 18264  014C70  0012               	return	
 18265  014C72                     
 18266                           ;LCD.c: 272: {
 18267                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 18268  014C72  0E01               	movlw	1
 18269  014C74  0100               	movlb	0	; () banked
 18270  014C76  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18271  014C78  0E08               	movlw	8
 18272  014C7A  EC90  F0B1         	call	_LCD_Write
 18273                           
 18274                           ;LCD.c: 274: w = 128;
 18275  014C7E  0E80               	movlw	128
 18276  014C80  6E50               	movwf	_w,c
 18277                           
 18278                           ;LCD.c: 275: l = 128;
 18279  014C82  0E80               	movlw	128
 18280  014C84  6E4F               	movwf	_l,c
 18281                           
 18282                           ;LCD.c: 276: break;
 18283  014C86  0012               	return	
 18284  014C88                     
 18285                           ;LCD.c: 279: {
 18286                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 18287  014C88  0E01               	movlw	1
 18288  014C8A  0100               	movlb	0	; () banked
 18289  014C8C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18290  014C8E  0E68               	movlw	104
 18291  014C90  EC90  F0B1         	call	_LCD_Write
 18292                           
 18293                           ;LCD.c: 281: w = 128;
 18294  014C94  0E80               	movlw	128
 18295  014C96  6E50               	movwf	_w,c
 18296                           
 18297                           ;LCD.c: 282: l = 128;
 18298  014C98  0E80               	movlw	128
 18299  014C9A  6E4F               	movwf	_l,c
 18300                           
 18301                           ;LCD.c: 284: }
 18302                           ;LCD.c: 285: }
 18303                           
 18304                           ;LCD.c: 283: break;
 18305  014C9C  0012               	return	
 18306  014C9E                     l117:
 18307  014C9E  0100               	movlb	0	; () banked
 18308  014CA0  51C0               	movf	Set_Rotation@rotation& (0+255),w,b
 18309                           
 18310                           ; Switch size 1, requested type "space"
 18311                           ; Number of cases is 4, Range of values is 0 to 3
 18312                           ; switch strategies available:
 18313                           ; Name         Instructions Cycles
 18314                           ; simple_byte           13     7 (average)
 18315                           ;	Chosen strategy is simple_byte
 18316  014CA2  0A00               	xorlw	0	; case 0
 18317  014CA4  B4D8               	btfsc	status,2,c
 18318  014CA6  D7CF               	goto	l118
 18319  014CA8  0A01               	xorlw	1	; case 1
 18320  014CAA  B4D8               	btfsc	status,2,c
 18321  014CAC  D7D7               	goto	l120
 18322  014CAE  0A03               	xorlw	3	; case 2
 18323  014CB0  B4D8               	btfsc	status,2,c
 18324  014CB2  D7DF               	goto	l121
 18325  014CB4  0A01               	xorlw	1	; case 3
 18326  014CB6  A4D8               	btfss	status,2,c
 18327  014CB8  0012               	return	
 18328  014CBA  D7E6               	goto	l122
 18329  014CBC                     __end_of_Set_Rotation:
 18330                           	opt stack 0
 18331                           tosu	equ	0xFFF
 18332                           tosh	equ	0xFFE
 18333                           tosl	equ	0xFFD
 18334                           pclath	equ	0xFFA
 18335                           tblptru	equ	0xFF8
 18336                           tblptrh	equ	0xFF7
 18337                           tblptrl	equ	0xFF6
 18338                           tablat	equ	0xFF5
 18339                           prodh	equ	0xFF4
 18340                           prodl	equ	0xFF3
 18341                           intcon	equ	0xFF2
 18342                           postinc0	equ	0xFEE
 18343                           wreg	equ	0xFE8
 18344                           indf1	equ	0xFE7
 18345                           postdec1	equ	0xFE5
 18346                           fsr1h	equ	0xFE2
 18347                           fsr1l	equ	0xFE1
 18348                           indf2	equ	0xFDF
 18349                           postinc2	equ	0xFDE
 18350                           postdec2	equ	0xFDD
 18351                           plusw2	equ	0xFDB
 18352                           fsr2h	equ	0xFDA
 18353                           fsr2l	equ	0xFD9
 18354                           status	equ	0xFD8
 18355                           
 18356 ;; *************** function _LCD_Fill *****************
 18357 ;; Defined at:
 18358 ;;		line 287 in file "Library/LCD.c"
 18359 ;; Parameters:    Size  Location     Type
 18360 ;;  pColour         2    9[BANK0 ] unsigned short 
 18361 ;; Auto vars:     Size  Location     Type
 18362 ;;  j               1   12[BANK0 ] unsigned char 
 18363 ;;  i               1   11[BANK0 ] unsigned char 
 18364 ;; Return value:  Size  Location     Type
 18365 ;;                  1    wreg      void 
 18366 ;; Registers used:
 18367 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18368 ;; Tracked objects:
 18369 ;;		On entry : 0/0
 18370 ;;		On exit  : 0/0
 18371 ;;		Unchanged: 0/0
 18372 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18373 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18374 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18375 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18376 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18377 ;;Total ram usage:        4 bytes
 18378 ;; Hardware stack levels used:    1
 18379 ;; Hardware stack levels required when called:   10
 18380 ;; This function calls:
 18381 ;;		_LCD_Word_Write
 18382 ;;		_Set_Addr_Window
 18383 ;; This function is called by:
 18384 ;;		_LCD_Init
 18385 ;; This function uses a non-reentrant model
 18386 ;;
 18387                           
 18388                           	psect	text82
 18389  015A3E                     __ptext82:
 18390                           	opt stack 0
 18391  015A3E                     _LCD_Fill:
 18392                           	opt stack 18
 18393                           
 18394                           ;LCD.c: 296: UINT8 i = 0x00;
 18395                           
 18396                           ;incstack = 0
 18397  015A3E  0E00               	movlw	0
 18398  015A40  0100               	movlb	0	; () banked
 18399  015A42  6FC5               	movwf	LCD_Fill@i& (0+255),b
 18400                           
 18401                           ;LCD.c: 297: UINT8 j = 0x00;
 18402  015A44  0E00               	movlw	0
 18403  015A46  0100               	movlb	0	; () banked
 18404  015A48  6FC6               	movwf	LCD_Fill@j& (0+255),b
 18405                           
 18406                           ; BSR set to: 0
 18407                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 18408  015A4A  0E00               	movlw	0
 18409  015A4C  0100               	movlb	0	; () banked
 18410  015A4E  6FBF               	movwf	Set_Addr_Window@ys& (0+255),b
 18411  015A50  0450               	decf	_w,w,c
 18412  015A52  0100               	movlb	0	; () banked
 18413  015A54  6FC0               	movwf	Set_Addr_Window@xe& (0+255),b
 18414  015A56  044F               	decf	_l,w,c
 18415  015A58  0100               	movlb	0	; () banked
 18416  015A5A  6FC1               	movwf	Set_Addr_Window@ye& (0+255),b
 18417  015A5C  0E00               	movlw	0
 18418  015A5E  EC2B  F0A3         	call	_Set_Addr_Window
 18419                           
 18420                           ;LCD.c: 299: for (j = l; j > 0; j--)
 18421  015A62  C04F  F0C6         	movff	_l,LCD_Fill@j
 18422  015A66                     l13941:
 18423  015A66  0100               	movlb	0	; () banked
 18424  015A68  51C6               	movf	LCD_Fill@j& (0+255),w,b
 18425  015A6A  0100               	movlb	0	; () banked
 18426  015A6C  B4D8               	btfsc	status,2,c
 18427  015A6E  0012               	return	
 18428                           
 18429                           ; BSR set to: 0
 18430                           ;LCD.c: 300: for (i = w; i > 0; i--)
 18431                           
 18432                           ; BSR set to: 0
 18433  015A70  C050  F0C5         	movff	_w,LCD_Fill@i
 18434  015A74                     l13945:
 18435                           
 18436                           ; BSR set to: 0
 18437  015A74  0100               	movlb	0	; () banked
 18438  015A76  51C5               	movf	LCD_Fill@i& (0+255),w,b
 18439  015A78  0100               	movlb	0	; () banked
 18440  015A7A  B4D8               	btfsc	status,2,c
 18441  015A7C  D009               	goto	u10630
 18442                           
 18443                           ; BSR set to: 0
 18444                           ;LCD.c: 301: LCD_Word_Write(pColour);
 18445                           
 18446                           ; BSR set to: 0
 18447                           
 18448                           ; BSR set to: 0
 18449  015A7E  C0C3  F0BF         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 18450  015A82  C0C4  F0C0         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 18451  015A86  ECF1  F0B1         	call	_LCD_Word_Write	;wreg free
 18452  015A8A  0100               	movlb	0	; () banked
 18453  015A8C  07C5               	decf	LCD_Fill@i& (0+255),f,b
 18454  015A8E  D7F2               	goto	l13945
 18455  015A90                     u10630:
 18456                           
 18457                           ; BSR set to: 0
 18458                           
 18459                           ; BSR set to: 0
 18460  015A90  0100               	movlb	0	; () banked
 18461  015A92  07C6               	decf	LCD_Fill@j& (0+255),f,b
 18462  015A94  D7E8               	goto	l13941
 18463  015A96                     __end_of_LCD_Fill:
 18464                           	opt stack 0
 18465                           tosu	equ	0xFFF
 18466                           tosh	equ	0xFFE
 18467                           tosl	equ	0xFFD
 18468                           pclath	equ	0xFFA
 18469                           tblptru	equ	0xFF8
 18470                           tblptrh	equ	0xFF7
 18471                           tblptrl	equ	0xFF6
 18472                           tablat	equ	0xFF5
 18473                           prodh	equ	0xFF4
 18474                           prodl	equ	0xFF3
 18475                           intcon	equ	0xFF2
 18476                           postinc0	equ	0xFEE
 18477                           wreg	equ	0xFE8
 18478                           indf1	equ	0xFE7
 18479                           postdec1	equ	0xFE5
 18480                           fsr1h	equ	0xFE2
 18481                           fsr1l	equ	0xFE1
 18482                           indf2	equ	0xFDF
 18483                           postinc2	equ	0xFDE
 18484                           postdec2	equ	0xFDD
 18485                           plusw2	equ	0xFDB
 18486                           fsr2h	equ	0xFDA
 18487                           fsr2l	equ	0xFD9
 18488                           status	equ	0xFD8
 18489                           
 18490 ;; *************** function _Set_Addr_Window *****************
 18491 ;; Defined at:
 18492 ;;		line 214 in file "Library/LCD.c"
 18493 ;; Parameters:    Size  Location     Type
 18494 ;;  xs              1    wreg     unsigned char 
 18495 ;;  ys              1    5[BANK0 ] unsigned char 
 18496 ;;  xe              1    6[BANK0 ] unsigned char 
 18497 ;;  ye              1    7[BANK0 ] unsigned char 
 18498 ;; Auto vars:     Size  Location     Type
 18499 ;;  xs              1    8[BANK0 ] unsigned char 
 18500 ;; Return value:  Size  Location     Type
 18501 ;;                  1    wreg      void 
 18502 ;; Registers used:
 18503 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18504 ;; Tracked objects:
 18505 ;;		On entry : 0/0
 18506 ;;		On exit  : 0/0
 18507 ;;		Unchanged: 0/0
 18508 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18509 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18510 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18511 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18512 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18513 ;;Total ram usage:        4 bytes
 18514 ;; Hardware stack levels used:    1
 18515 ;; Hardware stack levels required when called:    9
 18516 ;; This function calls:
 18517 ;;		_LCD_Write
 18518 ;; This function is called by:
 18519 ;;		_LCD_Fill
 18520 ;;		_LCD_FillRectangle
 18521 ;;		_LCD_DrawField
 18522 ;;		_RAM_Address_Set
 18523 ;;		_LCD_DrawPixel
 18524 ;; This function uses a non-reentrant model
 18525 ;;
 18526                           
 18527                           	psect	text83
 18528  014656                     __ptext83:
 18529                           	opt stack 0
 18530  014656                     _Set_Addr_Window:
 18531                           	opt stack 17
 18532                           
 18533                           ; BSR set to: 0
 18534                           ;incstack = 0
 18535                           ;Set_Addr_Window@xs stored from wreg
 18536  014656  0100               	movlb	0	; () banked
 18537  014658  6FC2               	movwf	Set_Addr_Window@xs& (0+255),b
 18538                           
 18539                           ;LCD.c: 216: ys+=2;
 18540  01465A  0E02               	movlw	2
 18541  01465C  0100               	movlb	0	; () banked
 18542  01465E  27BF               	addwf	Set_Addr_Window@ys& (0+255),f,b
 18543                           
 18544                           ;LCD.c: 217: ye+=2;
 18545  014660  0E02               	movlw	2
 18546  014662  0100               	movlb	0	; () banked
 18547  014664  27C1               	addwf	Set_Addr_Window@ye& (0+255),f,b
 18548                           
 18549                           ;LCD.c: 218: xs+=3;
 18550  014666  0E03               	movlw	3
 18551  014668  0100               	movlb	0	; () banked
 18552  01466A  27C2               	addwf	Set_Addr_Window@xs& (0+255),f,b
 18553                           
 18554                           ;LCD.c: 219: xe+=3;
 18555  01466C  0E03               	movlw	3
 18556  01466E  0100               	movlb	0	; () banked
 18557  014670  27C0               	addwf	Set_Addr_Window@xe& (0+255),f,b
 18558                           
 18559                           ; BSR set to: 0
 18560                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 18561  014672  0E00               	movlw	0
 18562  014674  0100               	movlb	0	; () banked
 18563  014676  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18564  014678  0E2A               	movlw	42
 18565  01467A  EC90  F0B1         	call	_LCD_Write
 18566                           
 18567                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 18568  01467E  0E01               	movlw	1
 18569  014680  0100               	movlb	0	; () banked
 18570  014682  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18571  014684  0E00               	movlw	0
 18572  014686  EC90  F0B1         	call	_LCD_Write
 18573                           
 18574                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 18575  01468A  0E01               	movlw	1
 18576  01468C  0100               	movlb	0	; () banked
 18577  01468E  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18578  014690  0100               	movlb	0	; () banked
 18579  014692  51C2               	movf	Set_Addr_Window@xs& (0+255),w,b
 18580  014694  EC90  F0B1         	call	_LCD_Write
 18581                           
 18582                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 18583  014698  0E01               	movlw	1
 18584  01469A  0100               	movlb	0	; () banked
 18585  01469C  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18586  01469E  0E00               	movlw	0
 18587  0146A0  EC90  F0B1         	call	_LCD_Write
 18588                           
 18589                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 18590  0146A4  0E01               	movlw	1
 18591  0146A6  0100               	movlb	0	; () banked
 18592  0146A8  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18593  0146AA  0100               	movlb	0	; () banked
 18594  0146AC  51C0               	movf	Set_Addr_Window@xe& (0+255),w,b
 18595  0146AE  EC90  F0B1         	call	_LCD_Write
 18596                           
 18597                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 18598  0146B2  0E00               	movlw	0
 18599  0146B4  0100               	movlb	0	; () banked
 18600  0146B6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18601  0146B8  0E2B               	movlw	43
 18602  0146BA  EC90  F0B1         	call	_LCD_Write
 18603                           
 18604                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 18605  0146BE  0E01               	movlw	1
 18606  0146C0  0100               	movlb	0	; () banked
 18607  0146C2  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18608  0146C4  0E00               	movlw	0
 18609  0146C6  EC90  F0B1         	call	_LCD_Write
 18610                           
 18611                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 18612  0146CA  0E01               	movlw	1
 18613  0146CC  0100               	movlb	0	; () banked
 18614  0146CE  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18615  0146D0  0100               	movlb	0	; () banked
 18616  0146D2  51BF               	movf	Set_Addr_Window@ys& (0+255),w,b
 18617  0146D4  EC90  F0B1         	call	_LCD_Write
 18618                           
 18619                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 18620  0146D8  0E01               	movlw	1
 18621  0146DA  0100               	movlb	0	; () banked
 18622  0146DC  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18623  0146DE  0E00               	movlw	0
 18624  0146E0  EC90  F0B1         	call	_LCD_Write
 18625                           
 18626                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 18627  0146E4  0E01               	movlw	1
 18628  0146E6  0100               	movlb	0	; () banked
 18629  0146E8  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18630  0146EA  0100               	movlb	0	; () banked
 18631  0146EC  51C1               	movf	Set_Addr_Window@ye& (0+255),w,b
 18632  0146EE  EC90  F0B1         	call	_LCD_Write
 18633                           
 18634                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 18635  0146F2  0E00               	movlw	0
 18636  0146F4  0100               	movlb	0	; () banked
 18637  0146F6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18638  0146F8  0E2C               	movlw	44
 18639  0146FA  EC90  F0B1         	call	_LCD_Write
 18640  0146FE  0012               	return		;funcret
 18641  014700                     __end_of_Set_Addr_Window:
 18642                           	opt stack 0
 18643                           tosu	equ	0xFFF
 18644                           tosh	equ	0xFFE
 18645                           tosl	equ	0xFFD
 18646                           pclath	equ	0xFFA
 18647                           tblptru	equ	0xFF8
 18648                           tblptrh	equ	0xFF7
 18649                           tblptrl	equ	0xFF6
 18650                           tablat	equ	0xFF5
 18651                           prodh	equ	0xFF4
 18652                           prodl	equ	0xFF3
 18653                           intcon	equ	0xFF2
 18654                           postinc0	equ	0xFEE
 18655                           wreg	equ	0xFE8
 18656                           indf1	equ	0xFE7
 18657                           postdec1	equ	0xFE5
 18658                           fsr1h	equ	0xFE2
 18659                           fsr1l	equ	0xFE1
 18660                           indf2	equ	0xFDF
 18661                           postinc2	equ	0xFDE
 18662                           postdec2	equ	0xFDD
 18663                           plusw2	equ	0xFDB
 18664                           fsr2h	equ	0xFDA
 18665                           fsr2l	equ	0xFD9
 18666                           status	equ	0xFD8
 18667                           
 18668 ;; *************** function _LCD_Word_Write *****************
 18669 ;; Defined at:
 18670 ;;		line 198 in file "Library/LCD.c"
 18671 ;; Parameters:    Size  Location     Type
 18672 ;;  value           2    5[BANK0 ] unsigned short 
 18673 ;; Auto vars:     Size  Location     Type
 18674 ;;		None
 18675 ;; Return value:  Size  Location     Type
 18676 ;;                  1    wreg      void 
 18677 ;; Registers used:
 18678 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18679 ;; Tracked objects:
 18680 ;;		On entry : 0/0
 18681 ;;		On exit  : 0/0
 18682 ;;		Unchanged: 0/0
 18683 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18684 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18685 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18686 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18687 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18688 ;;Total ram usage:        2 bytes
 18689 ;; Hardware stack levels used:    1
 18690 ;; Hardware stack levels required when called:    9
 18691 ;; This function calls:
 18692 ;;		_LCD_Write
 18693 ;; This function is called by:
 18694 ;;		_LCD_Fill
 18695 ;;		_LCD_FillRectangle
 18696 ;;		_LCD_DrawField
 18697 ;;		_LCD_DrawPixel
 18698 ;; This function uses a non-reentrant model
 18699 ;;
 18700                           
 18701                           	psect	text84
 18702  0163E2                     __ptext84:
 18703                           	opt stack 0
 18704  0163E2                     _LCD_Word_Write:
 18705                           	opt stack 17
 18706                           
 18707                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 18708                           
 18709                           ;incstack = 0
 18710  0163E2  0E01               	movlw	1
 18711  0163E4  0100               	movlb	0	; () banked
 18712  0163E6  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18713  0163E8  0100               	movlb	0	; () banked
 18714  0163EA  51C0               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 18715  0163EC  EC90  F0B1         	call	_LCD_Write
 18716                           
 18717                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 18718  0163F0  0E01               	movlw	1
 18719  0163F2  0100               	movlb	0	; () banked
 18720  0163F4  6FBD               	movwf	LCD_Write@mode& (0+255),b
 18721  0163F6  0100               	movlb	0	; () banked
 18722  0163F8  51BF               	movf	LCD_Word_Write@value& (0+255),w,b
 18723  0163FA  EC90  F0B1         	call	_LCD_Write
 18724  0163FE  0012               	return		;funcret
 18725  016400                     __end_of_LCD_Word_Write:
 18726                           	opt stack 0
 18727                           tosu	equ	0xFFF
 18728                           tosh	equ	0xFFE
 18729                           tosl	equ	0xFFD
 18730                           pclath	equ	0xFFA
 18731                           tblptru	equ	0xFF8
 18732                           tblptrh	equ	0xFF7
 18733                           tblptrl	equ	0xFF6
 18734                           tablat	equ	0xFF5
 18735                           prodh	equ	0xFF4
 18736                           prodl	equ	0xFF3
 18737                           intcon	equ	0xFF2
 18738                           postinc0	equ	0xFEE
 18739                           wreg	equ	0xFE8
 18740                           indf1	equ	0xFE7
 18741                           postdec1	equ	0xFE5
 18742                           fsr1h	equ	0xFE2
 18743                           fsr1l	equ	0xFE1
 18744                           indf2	equ	0xFDF
 18745                           postinc2	equ	0xFDE
 18746                           postdec2	equ	0xFDD
 18747                           plusw2	equ	0xFDB
 18748                           fsr2h	equ	0xFDA
 18749                           fsr2l	equ	0xFD9
 18750                           status	equ	0xFD8
 18751                           
 18752 ;; *************** function _LCD_Write *****************
 18753 ;; Defined at:
 18754 ;;		line 67 in file "Library/LCD.c"
 18755 ;; Parameters:    Size  Location     Type
 18756 ;;  value           1    wreg     unsigned char 
 18757 ;;  mode            1    3[BANK0 ] enum E6761
 18758 ;; Auto vars:     Size  Location     Type
 18759 ;;  value           1    4[BANK0 ] unsigned char 
 18760 ;; Return value:  Size  Location     Type
 18761 ;;                  1    wreg      void 
 18762 ;; Registers used:
 18763 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 18764 ;; Tracked objects:
 18765 ;;		On entry : 0/0
 18766 ;;		On exit  : 0/0
 18767 ;;		Unchanged: 0/0
 18768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18769 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18770 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18772 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18773 ;;Total ram usage:        2 bytes
 18774 ;; Hardware stack levels used:    1
 18775 ;; Hardware stack levels required when called:    8
 18776 ;; This function calls:
 18777 ;;		_Mode_Set
 18778 ;;		_SPI_Send
 18779 ;; This function is called by:
 18780 ;;		_LCD_Init
 18781 ;;		_LCD_Word_Write
 18782 ;;		_Set_Addr_Window
 18783 ;;		_Set_Rotation
 18784 ;;		_LCD_WriteCMD
 18785 ;;		_LCD_WriteData
 18786 ;;		_LCD_Data_Write
 18787 ;;		_LCD_Data_Write_4k
 18788 ;;		_Invert_Display
 18789 ;; This function uses a non-reentrant model
 18790 ;;
 18791                           
 18792                           	psect	text85
 18793  016320                     __ptext85:
 18794                           	opt stack 0
 18795  016320                     _LCD_Write:
 18796                           	opt stack 17
 18797                           
 18798                           ;incstack = 0
 18799                           ;LCD_Write@value stored from wreg
 18800  016320  0100               	movlb	0	; () banked
 18801  016322  6FBE               	movwf	LCD_Write@value& (0+255),b
 18802                           
 18803                           ;LCD.c: 89: Mode_Set(mode);
 18804  016324  0100               	movlb	0	; () banked
 18805  016326  51BD               	movf	LCD_Write@mode& (0+255),w,b
 18806  016328  EC13  F0B3         	call	_Mode_Set
 18807                           
 18808                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 18809  01632C  0E85               	movlw	low _SPI2
 18810  01632E  0100               	movlb	0	; () banked
 18811  016330  6FBA               	movwf	SPI_Send@pInput& (0+255),b
 18812  016332  0E03               	movlw	high _SPI2
 18813  016334  0100               	movlb	0	; () banked
 18814  016336  6FBB               	movwf	(SPI_Send@pInput+1)& (0+255),b
 18815  016338  C0BE  F0BC         	movff	LCD_Write@value,SPI_Send@pData
 18816  01633C  EC93  F0AA         	call	_SPI_Send	;wreg free
 18817  016340  0012               	return		;funcret
 18818  016342                     __end_of_LCD_Write:
 18819                           	opt stack 0
 18820                           tosu	equ	0xFFF
 18821                           tosh	equ	0xFFE
 18822                           tosl	equ	0xFFD
 18823                           pclath	equ	0xFFA
 18824                           tblptru	equ	0xFF8
 18825                           tblptrh	equ	0xFF7
 18826                           tblptrl	equ	0xFF6
 18827                           tablat	equ	0xFF5
 18828                           prodh	equ	0xFF4
 18829                           prodl	equ	0xFF3
 18830                           intcon	equ	0xFF2
 18831                           postinc0	equ	0xFEE
 18832                           wreg	equ	0xFE8
 18833                           indf1	equ	0xFE7
 18834                           postdec1	equ	0xFE5
 18835                           fsr1h	equ	0xFE2
 18836                           fsr1l	equ	0xFE1
 18837                           indf2	equ	0xFDF
 18838                           postinc2	equ	0xFDE
 18839                           postdec2	equ	0xFDD
 18840                           plusw2	equ	0xFDB
 18841                           fsr2h	equ	0xFDA
 18842                           fsr2l	equ	0xFD9
 18843                           status	equ	0xFD8
 18844                           
 18845 ;; *************** function _SPI_Send *****************
 18846 ;; Defined at:
 18847 ;;		line 226 in file "Library/SPI.c"
 18848 ;; Parameters:    Size  Location     Type
 18849 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 18850 ;;		 -> SPI1(11), SPI2(11), 
 18851 ;;  pData           1    2[BANK0 ] unsigned char 
 18852 ;; Auto vars:     Size  Location     Type
 18853 ;;		None
 18854 ;; Return value:  Size  Location     Type
 18855 ;;                  1    wreg      unsigned char 
 18856 ;; Registers used:
 18857 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18858 ;; Tracked objects:
 18859 ;;		On entry : 0/0
 18860 ;;		On exit  : 0/0
 18861 ;;		Unchanged: 0/0
 18862 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18863 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18864 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18865 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18866 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18867 ;;Total ram usage:        3 bytes
 18868 ;; Hardware stack levels used:    1
 18869 ;; Hardware stack levels required when called:    7
 18870 ;; This function calls:
 18871 ;;		Nothing
 18872 ;; This function is called by:
 18873 ;;		_LCD_Write
 18874 ;;		_OutSeg
 18875 ;; This function uses a non-reentrant model
 18876 ;;
 18877                           
 18878                           	psect	text86
 18879  015526                     __ptext86:
 18880                           	opt stack 0
 18881  015526                     _SPI_Send:
 18882                           	opt stack 19
 18883                           
 18884                           ;SPI.c: 253: switch (pInput->mChannel)
 18885                           
 18886                           ;incstack = 0
 18887  015526  D026               	goto	l678
 18888  015528                     
 18889                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 18890  015528  C0A9  FFD9         	movff	_PortC+4,fsr2l
 18891  01552C  C0AA  FFDA         	movff	_PortC+5,fsr2h
 18892  015530  0100               	movlb	0	; () banked
 18893  015532  94DF               	bcf	indf2,2,c
 18894                           
 18895                           ; BSR set to: 0
 18896                           ;SPI.c: 257: SSP1BUF = pData;
 18897  015534  C0BC  FFC9         	movff	SPI_Send@pData,4041	;volatile
 18898  015538                     
 18899                           ; BSR set to: 0
 18900  015538  A0C7               	btfss	4039,0,c	;volatile
 18901  01553A  D7FE               	goto	l681
 18902                           
 18903                           ;SPI.c: 259: pData = SSP1BUF;
 18904  01553C  CFC9 F0BC          	movff	4041,SPI_Send@pData	;volatile
 18905                           
 18906                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 18907  015540  C0A9  FFD9         	movff	_PortC+4,fsr2l
 18908  015544  C0AA  FFDA         	movff	_PortC+5,fsr2h
 18909  015548  0100               	movlb	0	; () banked
 18910  01554A  84DF               	bsf	indf2,2,c
 18911                           
 18912                           ; BSR set to: 0
 18913                           ;SPI.c: 261: return pData;
 18914                           ;	Return value of _SPI_Send is never used
 18915  01554C  0012               	return	
 18916  01554E                     
 18917                           ; BSR set to: 0
 18918                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 18919                           
 18920                           ; BSR set to: 0
 18921  01554E  C09F  FFD9         	movff	_PortD+4,fsr2l
 18922  015552  C0A0  FFDA         	movff	_PortD+5,fsr2h
 18923  015556  0100               	movlb	0	; () banked
 18924  015558  9EDF               	bcf	indf2,7,c
 18925                           
 18926                           ; BSR set to: 0
 18927                           ;SPI.c: 264: SSP2BUF = pData;
 18928  01555A  C0BC  FF6F         	movff	SPI_Send@pData,3951	;volatile
 18929  01555E                     
 18930                           ; BSR set to: 0
 18931  01555E  A06D               	btfss	3949,0,c	;volatile
 18932  015560  D7FE               	goto	l686
 18933                           
 18934                           ;SPI.c: 266: pData = SSP2BUF;
 18935  015562  CF6F F0BC          	movff	3951,SPI_Send@pData	;volatile
 18936                           
 18937                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 18938  015566  C09F  FFD9         	movff	_PortD+4,fsr2l
 18939  01556A  C0A0  FFDA         	movff	_PortD+5,fsr2h
 18940  01556E  0100               	movlb	0	; () banked
 18941  015570  8EDF               	bsf	indf2,7,c
 18942                           
 18943                           ; BSR set to: 0
 18944                           ;SPI.c: 269: };
 18945                           
 18946                           ; BSR set to: 0
 18947                           ;SPI.c: 268: return pData;
 18948                           ;	Return value of _SPI_Send is never used
 18949  015572  0012               	return	
 18950  015574                     l678:
 18951                           
 18952                           ; BSR set to: 0
 18953  015574  0100               	movlb	0	; () banked
 18954  015576  EE20 F002          	lfsr	2,2
 18955  01557A  51BA               	movf	SPI_Send@pInput& (0+255),w,b
 18956  01557C  26D9               	addwf	fsr2l,f,c
 18957  01557E  51BB               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 18958  015580  22DA               	addwfc	fsr2h,f,c
 18959  015582  50DF               	movf	indf2,w,c
 18960                           
 18961                           ; Switch size 1, requested type "space"
 18962                           ; Number of cases is 2, Range of values is 0 to 1
 18963                           ; switch strategies available:
 18964                           ; Name         Instructions Cycles
 18965                           ; simple_byte            7     4 (average)
 18966                           ;	Chosen strategy is simple_byte
 18967  015584  0A00               	xorlw	0	; case 0
 18968  015586  B4D8               	btfsc	status,2,c
 18969  015588  D7CF               	goto	l679
 18970  01558A  0A01               	xorlw	1	; case 1
 18971  01558C  A4D8               	btfss	status,2,c
 18972  01558E  0012               	return	
 18973  015590  D7DE               	goto	l684
 18974  015592                     __end_of_SPI_Send:
 18975                           	opt stack 0
 18976                           tosu	equ	0xFFF
 18977                           tosh	equ	0xFFE
 18978                           tosl	equ	0xFFD
 18979                           pclath	equ	0xFFA
 18980                           tblptru	equ	0xFF8
 18981                           tblptrh	equ	0xFF7
 18982                           tblptrl	equ	0xFF6
 18983                           tablat	equ	0xFF5
 18984                           prodh	equ	0xFF4
 18985                           prodl	equ	0xFF3
 18986                           intcon	equ	0xFF2
 18987                           postinc0	equ	0xFEE
 18988                           wreg	equ	0xFE8
 18989                           indf1	equ	0xFE7
 18990                           postdec1	equ	0xFE5
 18991                           fsr1h	equ	0xFE2
 18992                           fsr1l	equ	0xFE1
 18993                           indf2	equ	0xFDF
 18994                           postinc2	equ	0xFDE
 18995                           postdec2	equ	0xFDD
 18996                           plusw2	equ	0xFDB
 18997                           fsr2h	equ	0xFDA
 18998                           fsr2l	equ	0xFD9
 18999                           status	equ	0xFD8
 19000                           
 19001 ;; *************** function _Mode_Set *****************
 19002 ;; Defined at:
 19003 ;;		line 40 in file "Library/LCD.c"
 19004 ;; Parameters:    Size  Location     Type
 19005 ;;  pMode           1    wreg     enum E6761
 19006 ;; Auto vars:     Size  Location     Type
 19007 ;;  pMode           1    0[BANK0 ] enum E6761
 19008 ;; Return value:  Size  Location     Type
 19009 ;;                  1    wreg      void 
 19010 ;; Registers used:
 19011 ;;		wreg
 19012 ;; Tracked objects:
 19013 ;;		On entry : 0/0
 19014 ;;		On exit  : 0/0
 19015 ;;		Unchanged: 0/0
 19016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19018 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19020 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19021 ;;Total ram usage:        1 bytes
 19022 ;; Hardware stack levels used:    1
 19023 ;; Hardware stack levels required when called:    7
 19024 ;; This function calls:
 19025 ;;		Nothing
 19026 ;; This function is called by:
 19027 ;;		_LCD_Write
 19028 ;; This function uses a non-reentrant model
 19029 ;;
 19030                           
 19031                           	psect	text87
 19032  016626                     __ptext87:
 19033                           	opt stack 0
 19034  016626                     _Mode_Set:
 19035                           	opt stack 17
 19036                           
 19037                           ; BSR set to: 0
 19038                           ;incstack = 0
 19039                           ;Mode_Set@pMode stored from wreg
 19040  016626  0100               	movlb	0	; () banked
 19041  016628  6FBA               	movwf	Mode_Set@pMode& (0+255),b
 19042                           
 19043                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 19044  01662A  0100               	movlb	0	; () banked
 19045  01662C  B1BA               	btfsc	Mode_Set@pMode& (0+255),0,b
 19046  01662E  D002               	bra	u8905
 19047  016630  9E85               	bcf	3973,7,c	;volatile
 19048  016632  D001               	bra	u8906
 19049  016634                     u8905:
 19050  016634  8E85               	bsf	3973,7,c	;volatile
 19051  016636                     u8906:
 19052  016636  0012               	return		;funcret
 19053  016638                     __end_of_Mode_Set:
 19054                           	opt stack 0
 19055                           tosu	equ	0xFFF
 19056                           tosh	equ	0xFFE
 19057                           tosl	equ	0xFFD
 19058                           pclath	equ	0xFFA
 19059                           tblptru	equ	0xFF8
 19060                           tblptrh	equ	0xFF7
 19061                           tblptrl	equ	0xFF6
 19062                           tablat	equ	0xFF5
 19063                           prodh	equ	0xFF4
 19064                           prodl	equ	0xFF3
 19065                           intcon	equ	0xFF2
 19066                           postinc0	equ	0xFEE
 19067                           wreg	equ	0xFE8
 19068                           indf1	equ	0xFE7
 19069                           postdec1	equ	0xFE5
 19070                           fsr1h	equ	0xFE2
 19071                           fsr1l	equ	0xFE1
 19072                           indf2	equ	0xFDF
 19073                           postinc2	equ	0xFDE
 19074                           postdec2	equ	0xFDD
 19075                           plusw2	equ	0xFDB
 19076                           fsr2h	equ	0xFDA
 19077                           fsr2l	equ	0xFD9
 19078                           status	equ	0xFD8
 19079                           
 19080 ;; *************** function _Configure_GPIOs *****************
 19081 ;; Defined at:
 19082 ;;		line 46 in file "Library/LCD.c"
 19083 ;; Parameters:    Size  Location     Type
 19084 ;;		None
 19085 ;; Auto vars:     Size  Location     Type
 19086 ;;		None
 19087 ;; Return value:  Size  Location     Type
 19088 ;;                  1    wreg      void 
 19089 ;; Registers used:
 19090 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19091 ;; Tracked objects:
 19092 ;;		On entry : 0/0
 19093 ;;		On exit  : 0/0
 19094 ;;		Unchanged: 0/0
 19095 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19096 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19097 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19098 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19099 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19100 ;;Total ram usage:        0 bytes
 19101 ;; Hardware stack levels used:    1
 19102 ;; Hardware stack levels required when called:   14
 19103 ;; This function calls:
 19104 ;;		_LCD_Reset
 19105 ;;		_Port_SetPinType
 19106 ;;		_SPI_Init
 19107 ;;		_SPI_MaxSpeed
 19108 ;; This function is called by:
 19109 ;;		_LCD_Init
 19110 ;; This function uses a non-reentrant model
 19111 ;;
 19112                           
 19113                           	psect	text88
 19114  0154B6                     __ptext88:
 19115                           	opt stack 0
 19116  0154B6                     _Configure_GPIOs:
 19117                           	opt stack 14
 19118                           
 19119                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 19120                           
 19121                           ;incstack = 0
 19122  0154B6  0EC2               	movlw	low _PortF
 19123  0154B8  0100               	movlb	0	; () banked
 19124  0154BA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19125  0154BC  0E03               	movlw	high _PortF
 19126  0154BE  0100               	movlb	0	; () banked
 19127  0154C0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19128  0154C2  0E07               	movlw	7
 19129  0154C4  0100               	movlb	0	; () banked
 19130  0154C6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19131  0154C8  0E03               	movlw	3
 19132  0154CA  0100               	movlb	0	; () banked
 19133  0154CC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19134  0154CE  EC39  F093         	call	_Port_SetPinType	;wreg free
 19135                           
 19136                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 19137  0154D2  0EC2               	movlw	low _PortF
 19138  0154D4  0100               	movlb	0	; () banked
 19139  0154D6  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 19140  0154D8  0E03               	movlw	high _PortF
 19141  0154DA  0100               	movlb	0	; () banked
 19142  0154DC  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 19143  0154DE  0E06               	movlw	6
 19144  0154E0  0100               	movlb	0	; () banked
 19145  0154E2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 19146  0154E4  0E03               	movlw	3
 19147  0154E6  0100               	movlb	0	; () banked
 19148  0154E8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 19149  0154EA  EC39  F093         	call	_Port_SetPinType	;wreg free
 19150                           
 19151                           ;LCD.c: 55: LCD_Reset();
 19152  0154EE  EC9C  F0AD         	call	_LCD_Reset	;wreg free
 19153                           
 19154                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 19155  0154F2  0EC0               	movlw	192
 19156  0154F4  0100               	movlb	0	; () banked
 19157  0154F6  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 19158  0154F8  0EC6               	movlw	198
 19159  0154FA  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 19160  0154FC  0E2D               	movlw	45
 19161  0154FE  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 19162  015500  0E00               	movlw	0
 19163  015502  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 19164  015504  0E01               	movlw	1
 19165  015506  0100               	movlb	0	; () banked
 19166  015508  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 19167  01550A  0E01               	movlw	1
 19168  01550C  0100               	movlb	0	; () banked
 19169  01550E  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 19170  015510  EC53  F082         	call	_SPI_Init	;wreg free
 19171                           
 19172                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 19173  015514  0E85               	movlw	low _SPI2
 19174  015516  0100               	movlb	0	; () banked
 19175  015518  6FC9               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 19176  01551A  0E03               	movlw	high _SPI2
 19177  01551C  0100               	movlb	0	; () banked
 19178  01551E  6FCA               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 19179  015520  ECAD  F0A9         	call	_SPI_MaxSpeed	;wreg free
 19180  015524  0012               	return		;funcret
 19181  015526                     __end_of_Configure_GPIOs:
 19182                           	opt stack 0
 19183                           tosu	equ	0xFFF
 19184                           tosh	equ	0xFFE
 19185                           tosl	equ	0xFFD
 19186                           pclath	equ	0xFFA
 19187                           tblptru	equ	0xFF8
 19188                           tblptrh	equ	0xFF7
 19189                           tblptrl	equ	0xFF6
 19190                           tablat	equ	0xFF5
 19191                           prodh	equ	0xFF4
 19192                           prodl	equ	0xFF3
 19193                           intcon	equ	0xFF2
 19194                           postinc0	equ	0xFEE
 19195                           wreg	equ	0xFE8
 19196                           indf1	equ	0xFE7
 19197                           postdec1	equ	0xFE5
 19198                           fsr1h	equ	0xFE2
 19199                           fsr1l	equ	0xFE1
 19200                           indf2	equ	0xFDF
 19201                           postinc2	equ	0xFDE
 19202                           postdec2	equ	0xFDD
 19203                           plusw2	equ	0xFDB
 19204                           fsr2h	equ	0xFDA
 19205                           fsr2l	equ	0xFD9
 19206                           status	equ	0xFD8
 19207                           
 19208 ;; *************** function _SPI_MaxSpeed *****************
 19209 ;; Defined at:
 19210 ;;		line 201 in file "Library/SPI.c"
 19211 ;; Parameters:    Size  Location     Type
 19212 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 19213 ;;		 -> SPI2(11), 
 19214 ;; Auto vars:     Size  Location     Type
 19215 ;;		None
 19216 ;; Return value:  Size  Location     Type
 19217 ;;                  1    wreg      void 
 19218 ;; Registers used:
 19219 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19220 ;; Tracked objects:
 19221 ;;		On entry : 0/0
 19222 ;;		On exit  : 0/0
 19223 ;;		Unchanged: 0/0
 19224 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19225 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19226 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19227 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19228 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;Total ram usage:        2 bytes
 19230 ;; Hardware stack levels used:    1
 19231 ;; Hardware stack levels required when called:    9
 19232 ;; This function calls:
 19233 ;;		_Byte_SetBit
 19234 ;;		_Byte_SetQuad
 19235 ;; This function is called by:
 19236 ;;		_Configure_GPIOs
 19237 ;; This function uses a non-reentrant model
 19238 ;;
 19239                           
 19240                           	psect	text89
 19241  01535A                     __ptext89:
 19242                           	opt stack 0
 19243  01535A                     _SPI_MaxSpeed:
 19244                           	opt stack 18
 19245                           
 19246                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 19247                           
 19248                           ;incstack = 0
 19249  01535A  0100               	movlb	0	; () banked
 19250  01535C  EE20 F006          	lfsr	2,6
 19251  015360  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19252  015362  26D9               	addwf	fsr2l,f,c
 19253  015364  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19254  015366  22DA               	addwfc	fsr2h,f,c
 19255  015368  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19256  01536C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19257  015370  0E05               	movlw	5
 19258  015372  0100               	movlb	0	; () banked
 19259  015374  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19260  015376  0E00               	movlw	0
 19261  015378  0100               	movlb	0	; () banked
 19262  01537A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19263  01537C  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 19264                           
 19265                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 19266  015380  0100               	movlb	0	; () banked
 19267  015382  EE20 F006          	lfsr	2,6
 19268  015386  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19269  015388  26D9               	addwf	fsr2l,f,c
 19270  01538A  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19271  01538C  22DA               	addwfc	fsr2h,f,c
 19272  01538E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 19273  015392  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 19274  015396  0E00               	movlw	0
 19275  015398  0100               	movlb	0	; () banked
 19276  01539A  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 19277  01539C  0E00               	movlw	0
 19278  01539E  0100               	movlb	0	; () banked
 19279  0153A0  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 19280  0153A2  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 19281                           
 19282                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 19283  0153A6  0100               	movlb	0	; () banked
 19284  0153A8  EE20 F006          	lfsr	2,6
 19285  0153AC  51C9               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 19286  0153AE  26D9               	addwf	fsr2l,f,c
 19287  0153B0  51CA               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 19288  0153B2  22DA               	addwfc	fsr2h,f,c
 19289  0153B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 19290  0153B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 19291  0153BC  0E05               	movlw	5
 19292  0153BE  0100               	movlb	0	; () banked
 19293  0153C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 19294  0153C2  0E01               	movlw	1
 19295  0153C4  0100               	movlb	0	; () banked
 19296  0153C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 19297  0153C8  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 19298  0153CC  0012               	return		;funcret
 19299  0153CE                     __end_of_SPI_MaxSpeed:
 19300                           	opt stack 0
 19301                           tosu	equ	0xFFF
 19302                           tosh	equ	0xFFE
 19303                           tosl	equ	0xFFD
 19304                           pclath	equ	0xFFA
 19305                           tblptru	equ	0xFF8
 19306                           tblptrh	equ	0xFF7
 19307                           tblptrl	equ	0xFF6
 19308                           tablat	equ	0xFF5
 19309                           prodh	equ	0xFF4
 19310                           prodl	equ	0xFF3
 19311                           intcon	equ	0xFF2
 19312                           postinc0	equ	0xFEE
 19313                           wreg	equ	0xFE8
 19314                           indf1	equ	0xFE7
 19315                           postdec1	equ	0xFE5
 19316                           fsr1h	equ	0xFE2
 19317                           fsr1l	equ	0xFE1
 19318                           indf2	equ	0xFDF
 19319                           postinc2	equ	0xFDE
 19320                           postdec2	equ	0xFDD
 19321                           plusw2	equ	0xFDB
 19322                           fsr2h	equ	0xFDA
 19323                           fsr2l	equ	0xFD9
 19324                           status	equ	0xFD8
 19325                           
 19326 ;; *************** function _LCD_Reset *****************
 19327 ;; Defined at:
 19328 ;;		line 95 in file "Library/LCD.c"
 19329 ;; Parameters:    Size  Location     Type
 19330 ;;		None
 19331 ;; Auto vars:     Size  Location     Type
 19332 ;;		None
 19333 ;; Return value:  Size  Location     Type
 19334 ;;                  1    wreg      void 
 19335 ;; Registers used:
 19336 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19337 ;; Tracked objects:
 19338 ;;		On entry : 0/0
 19339 ;;		On exit  : 0/0
 19340 ;;		Unchanged: 0/0
 19341 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19342 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19343 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19345 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;Total ram usage:        0 bytes
 19347 ;; Hardware stack levels used:    1
 19348 ;; Hardware stack levels required when called:   13
 19349 ;; This function calls:
 19350 ;;		_LED_Toggle
 19351 ;;		_Reset_High
 19352 ;;		_Reset_Low
 19353 ;;		_delay_ms
 19354 ;; This function is called by:
 19355 ;;		_Configure_GPIOs
 19356 ;; This function uses a non-reentrant model
 19357 ;;
 19358                           
 19359                           	psect	text90
 19360  015B38                     __ptext90:
 19361                           	opt stack 0
 19362  015B38                     _LCD_Reset:
 19363                           	opt stack 14
 19364                           
 19365                           ;LCD.c: 97: Reset_High();
 19366                           
 19367                           ;incstack = 0
 19368  015B38  EC0F  F0B2         	call	_Reset_High	;wreg free
 19369                           
 19370                           ;LCD.c: 98: LED_Toggle(eLED2);
 19371  015B3C  0E01               	movlw	1
 19372  015B3E  EC7C  F0AE         	call	_LED_Toggle
 19373                           
 19374                           ;LCD.c: 99: delay_ms(0x80);
 19375  015B42  0E00               	movlw	0
 19376  015B44  0100               	movlb	0	; () banked
 19377  015B46  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19378  015B48  0E80               	movlw	128
 19379  015B4A  6FBA               	movwf	delay_ms@ms& (0+255),b
 19380  015B4C  EC34  F0AB         	call	_delay_ms	;wreg free
 19381                           
 19382                           ;LCD.c: 100: LED_Toggle(eLED2);
 19383  015B50  0E01               	movlw	1
 19384  015B52  EC7C  F0AE         	call	_LED_Toggle
 19385                           
 19386                           ;LCD.c: 101: Reset_Low();
 19387  015B56  EC00  F0B2         	call	_Reset_Low	;wreg free
 19388                           
 19389                           ;LCD.c: 102: delay_ms(0x80);
 19390  015B5A  0E00               	movlw	0
 19391  015B5C  0100               	movlb	0	; () banked
 19392  015B5E  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19393  015B60  0E80               	movlw	128
 19394  015B62  6FBA               	movwf	delay_ms@ms& (0+255),b
 19395  015B64  EC34  F0AB         	call	_delay_ms	;wreg free
 19396                           
 19397                           ;LCD.c: 103: LED_Toggle(eLED2);
 19398  015B68  0E01               	movlw	1
 19399  015B6A  EC7C  F0AE         	call	_LED_Toggle
 19400                           
 19401                           ;LCD.c: 104: Reset_High();
 19402  015B6E  EC0F  F0B2         	call	_Reset_High	;wreg free
 19403                           
 19404                           ;LCD.c: 105: delay_ms(0x80);
 19405  015B72  0E00               	movlw	0
 19406  015B74  0100               	movlb	0	; () banked
 19407  015B76  6FBB               	movwf	(delay_ms@ms+1)& (0+255),b
 19408  015B78  0E80               	movlw	128
 19409  015B7A  6FBA               	movwf	delay_ms@ms& (0+255),b
 19410  015B7C  EC34  F0AB         	call	_delay_ms	;wreg free
 19411                           
 19412                           ;LCD.c: 106: LED_Toggle(eLED2);
 19413  015B80  0E01               	movlw	1
 19414  015B82  EC7C  F0AE         	call	_LED_Toggle
 19415  015B86  0012               	return		;funcret
 19416  015B88                     __end_of_LCD_Reset:
 19417                           	opt stack 0
 19418                           tosu	equ	0xFFF
 19419                           tosh	equ	0xFFE
 19420                           tosl	equ	0xFFD
 19421                           pclath	equ	0xFFA
 19422                           tblptru	equ	0xFF8
 19423                           tblptrh	equ	0xFF7
 19424                           tblptrl	equ	0xFF6
 19425                           tablat	equ	0xFF5
 19426                           prodh	equ	0xFF4
 19427                           prodl	equ	0xFF3
 19428                           intcon	equ	0xFF2
 19429                           postinc0	equ	0xFEE
 19430                           wreg	equ	0xFE8
 19431                           indf1	equ	0xFE7
 19432                           postdec1	equ	0xFE5
 19433                           fsr1h	equ	0xFE2
 19434                           fsr1l	equ	0xFE1
 19435                           indf2	equ	0xFDF
 19436                           postinc2	equ	0xFDE
 19437                           postdec2	equ	0xFDD
 19438                           plusw2	equ	0xFDB
 19439                           fsr2h	equ	0xFDA
 19440                           fsr2l	equ	0xFD9
 19441                           status	equ	0xFD8
 19442                           
 19443 ;; *************** function _delay_ms *****************
 19444 ;; Defined at:
 19445 ;;		line 240 in file "Library/Types.c"
 19446 ;; Parameters:    Size  Location     Type
 19447 ;;  ms              2    0[BANK0 ] unsigned short 
 19448 ;; Auto vars:     Size  Location     Type
 19449 ;;  u               4    2[BANK0 ] volatile unsigned long 
 19450 ;; Return value:  Size  Location     Type
 19451 ;;                  1    wreg      void 
 19452 ;; Registers used:
 19453 ;;		wreg, status,2, status,0
 19454 ;; Tracked objects:
 19455 ;;		On entry : 0/0
 19456 ;;		On exit  : 0/0
 19457 ;;		Unchanged: 0/0
 19458 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19459 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19460 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19461 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19462 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19463 ;;Total ram usage:        6 bytes
 19464 ;; Hardware stack levels used:    1
 19465 ;; Hardware stack levels required when called:    7
 19466 ;; This function calls:
 19467 ;;		Nothing
 19468 ;; This function is called by:
 19469 ;;		_LCD_Reset
 19470 ;;		_LCD_Init
 19471 ;;		_MXK_Init
 19472 ;;		_init
 19473 ;;		_move_and_rotate
 19474 ;;		_mode4
 19475 ;; This function uses a non-reentrant model
 19476 ;;
 19477                           
 19478                           	psect	text91
 19479  015668                     __ptext91:
 19480                           	opt stack 0
 19481  015668                     _delay_ms:
 19482                           	opt stack 22
 19483                           
 19484                           ;Types.c: 242: volatile unsigned long u;
 19485                           ;Types.c: 243: while (ms--)
 19486                           
 19487                           ;incstack = 0
 19488  015668  D01F               	goto	u9380
 19489  01566A                     l12741:
 19490                           
 19491                           ;Types.c: 244: {
 19492                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 19493  01566A  0E00               	movlw	0
 19494  01566C  0100               	movlb	0	; () banked
 19495  01566E  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19496  015670  0E00               	movlw	0
 19497  015672  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19498  015674  0E00               	movlw	0
 19499  015676  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19500  015678  0E00               	movlw	0
 19501  01567A  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19502  01567C                     l12743:
 19503                           
 19504                           ; BSR set to: 0
 19505  01567C  0100               	movlb	0	; () banked
 19506  01567E  51BF               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 19507  015680  0100               	movlb	0	; () banked
 19508  015682  11BE               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 19509  015684  E111               	bnz	l12749
 19510  015686  0EB0               	movlw	176
 19511  015688  0100               	movlb	0	; () banked
 19512  01568A  5DBC               	subwf	delay_ms@u& (0+255),w,b	;volatile
 19513  01568C  0E04               	movlw	4
 19514  01568E  0100               	movlb	0	; () banked
 19515  015690  59BD               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 19516  015692  B0D8               	btfsc	status,0,c
 19517  015694  D009               	goto	u9380
 19518                           
 19519                           ; BSR set to: 0
 19520                           
 19521                           ; BSR set to: 0
 19522  015696  F000               	nop		; ;# 
 19523  015698  0E01               	movlw	1
 19524  01569A  0100               	movlb	0	; () banked
 19525  01569C  27BC               	addwf	delay_ms@u& (0+255),f,b	;volatile
 19526  01569E  0E00               	movlw	0
 19527  0156A0  23BD               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 19528  0156A2  23BE               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 19529  0156A4  23BF               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 19530  0156A6  D7EA               	goto	l12743
 19531  0156A8                     u9380:
 19532  0156A8                     l12749:
 19533  0156A8  0100               	movlb	0	; () banked
 19534  0156AA  07BA               	decf	delay_ms@ms& (0+255),f,b
 19535  0156AC  A0D8               	btfss	status,0,c
 19536  0156AE  07BB               	decf	(delay_ms@ms+1)& (0+255),f,b
 19537  0156B0  0100               	movlb	0	; () banked
 19538  0156B2  29BA               	incf	delay_ms@ms& (0+255),w,b
 19539  0156B4  E1DA               	bnz	l12741
 19540  0156B6  0100               	movlb	0	; () banked
 19541  0156B8  29BB               	incf	(delay_ms@ms+1)& (0+255),w,b
 19542  0156BA  A4D8               	btfss	status,2,c
 19543  0156BC  D7D6               	goto	l824
 19544                           
 19545                           ; BSR set to: 0
 19546                           ;Types.c: 251: }
 19547                           ;Types.c: 252: }
 19548                           ;Types.c: 253: u = 0x8008;
 19549                           
 19550                           ; BSR set to: 0
 19551  0156BE  0E08               	movlw	8
 19552  0156C0  0100               	movlb	0	; () banked
 19553  0156C2  6FBC               	movwf	delay_ms@u& (0+255),b	;volatile
 19554  0156C4  0E80               	movlw	128
 19555  0156C6  6FBD               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 19556  0156C8  0E00               	movlw	0
 19557  0156CA  6FBE               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 19558  0156CC  0E00               	movlw	0
 19559  0156CE  6FBF               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 19560                           
 19561                           ; BSR set to: 0
 19562  0156D0  0012               	return		;funcret
 19563  0156D2                     __end_of_delay_ms:
 19564                           	opt stack 0
 19565                           tosu	equ	0xFFF
 19566                           tosh	equ	0xFFE
 19567                           tosl	equ	0xFFD
 19568                           pclath	equ	0xFFA
 19569                           tblptru	equ	0xFF8
 19570                           tblptrh	equ	0xFF7
 19571                           tblptrl	equ	0xFF6
 19572                           tablat	equ	0xFF5
 19573                           prodh	equ	0xFF4
 19574                           prodl	equ	0xFF3
 19575                           intcon	equ	0xFF2
 19576                           postinc0	equ	0xFEE
 19577                           wreg	equ	0xFE8
 19578                           indf1	equ	0xFE7
 19579                           postdec1	equ	0xFE5
 19580                           fsr1h	equ	0xFE2
 19581                           fsr1l	equ	0xFE1
 19582                           indf2	equ	0xFDF
 19583                           postinc2	equ	0xFDE
 19584                           postdec2	equ	0xFDD
 19585                           plusw2	equ	0xFDB
 19586                           fsr2h	equ	0xFDA
 19587                           fsr2l	equ	0xFD9
 19588                           status	equ	0xFD8
 19589                           
 19590 ;; *************** function _Reset_Low *****************
 19591 ;; Defined at:
 19592 ;;		line 32 in file "Library/LCD.c"
 19593 ;; Parameters:    Size  Location     Type
 19594 ;;		None
 19595 ;; Auto vars:     Size  Location     Type
 19596 ;;		None
 19597 ;; Return value:  Size  Location     Type
 19598 ;;                  1    wreg      void 
 19599 ;; Registers used:
 19600 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19601 ;; Tracked objects:
 19602 ;;		On entry : 0/0
 19603 ;;		On exit  : 0/0
 19604 ;;		Unchanged: 0/0
 19605 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19606 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19607 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19608 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19609 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19610 ;;Total ram usage:        0 bytes
 19611 ;; Hardware stack levels used:    1
 19612 ;; Hardware stack levels required when called:   11
 19613 ;; This function calls:
 19614 ;;		_Port_SetPin
 19615 ;; This function is called by:
 19616 ;;		_LCD_Reset
 19617 ;; This function uses a non-reentrant model
 19618 ;;
 19619                           
 19620                           	psect	text92
 19621  016400                     __ptext92:
 19622                           	opt stack 0
 19623  016400                     _Reset_Low:
 19624                           	opt stack 15
 19625                           
 19626                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 19627                           
 19628                           ; BSR set to: 0
 19629                           ;incstack = 0
 19630  016400  0EC2               	movlw	low _PortF
 19631  016402  0100               	movlb	0	; () banked
 19632  016404  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19633  016406  0E03               	movlw	high _PortF
 19634  016408  0100               	movlb	0	; () banked
 19635  01640A  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19636  01640C  0E06               	movlw	6
 19637  01640E  0100               	movlb	0	; () banked
 19638  016410  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19639  016412  0E01               	movlw	1
 19640  016414  0100               	movlb	0	; () banked
 19641  016416  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19642  016418  EC8F  F09F         	call	_Port_SetPin	;wreg free
 19643  01641C  0012               	return		;funcret
 19644  01641E                     __end_of_Reset_Low:
 19645                           	opt stack 0
 19646                           tosu	equ	0xFFF
 19647                           tosh	equ	0xFFE
 19648                           tosl	equ	0xFFD
 19649                           pclath	equ	0xFFA
 19650                           tblptru	equ	0xFF8
 19651                           tblptrh	equ	0xFF7
 19652                           tblptrl	equ	0xFF6
 19653                           tablat	equ	0xFF5
 19654                           prodh	equ	0xFF4
 19655                           prodl	equ	0xFF3
 19656                           intcon	equ	0xFF2
 19657                           postinc0	equ	0xFEE
 19658                           wreg	equ	0xFE8
 19659                           indf1	equ	0xFE7
 19660                           postdec1	equ	0xFE5
 19661                           fsr1h	equ	0xFE2
 19662                           fsr1l	equ	0xFE1
 19663                           indf2	equ	0xFDF
 19664                           postinc2	equ	0xFDE
 19665                           postdec2	equ	0xFDD
 19666                           plusw2	equ	0xFDB
 19667                           fsr2h	equ	0xFDA
 19668                           fsr2l	equ	0xFD9
 19669                           status	equ	0xFD8
 19670                           
 19671 ;; *************** function _Reset_High *****************
 19672 ;; Defined at:
 19673 ;;		line 36 in file "Library/LCD.c"
 19674 ;; Parameters:    Size  Location     Type
 19675 ;;		None
 19676 ;; Auto vars:     Size  Location     Type
 19677 ;;		None
 19678 ;; Return value:  Size  Location     Type
 19679 ;;                  1    wreg      void 
 19680 ;; Registers used:
 19681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19682 ;; Tracked objects:
 19683 ;;		On entry : 0/0
 19684 ;;		On exit  : 0/0
 19685 ;;		Unchanged: 0/0
 19686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19689 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19690 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19691 ;;Total ram usage:        0 bytes
 19692 ;; Hardware stack levels used:    1
 19693 ;; Hardware stack levels required when called:   11
 19694 ;; This function calls:
 19695 ;;		_Port_SetPin
 19696 ;; This function is called by:
 19697 ;;		_LCD_Reset
 19698 ;; This function uses a non-reentrant model
 19699 ;;
 19700                           
 19701                           	psect	text93
 19702  01641E                     __ptext93:
 19703                           	opt stack 0
 19704  01641E                     _Reset_High:
 19705                           	opt stack 15
 19706                           
 19707                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 19708                           
 19709                           ;incstack = 0
 19710  01641E  0EC2               	movlw	low _PortF
 19711  016420  0100               	movlb	0	; () banked
 19712  016422  6FC9               	movwf	Port_SetPin@pInput& (0+255),b
 19713  016424  0E03               	movlw	high _PortF
 19714  016426  0100               	movlb	0	; () banked
 19715  016428  6FCA               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 19716  01642A  0E06               	movlw	6
 19717  01642C  0100               	movlb	0	; () banked
 19718  01642E  6FCB               	movwf	Port_SetPin@pPin& (0+255),b
 19719  016430  0E00               	movlw	0
 19720  016432  0100               	movlb	0	; () banked
 19721  016434  6FCC               	movwf	Port_SetPin@pValue& (0+255),b
 19722  016436  EC8F  F09F         	call	_Port_SetPin	;wreg free
 19723  01643A  0012               	return		;funcret
 19724  01643C                     __end_of_Reset_High:
 19725                           	opt stack 0
 19726                           tosu	equ	0xFFF
 19727                           tosh	equ	0xFFE
 19728                           tosl	equ	0xFFD
 19729                           pclath	equ	0xFFA
 19730                           tblptru	equ	0xFF8
 19731                           tblptrh	equ	0xFF7
 19732                           tblptrl	equ	0xFF6
 19733                           tablat	equ	0xFF5
 19734                           prodh	equ	0xFF4
 19735                           prodl	equ	0xFF3
 19736                           intcon	equ	0xFF2
 19737                           postinc0	equ	0xFEE
 19738                           wreg	equ	0xFE8
 19739                           indf1	equ	0xFE7
 19740                           postdec1	equ	0xFE5
 19741                           fsr1h	equ	0xFE2
 19742                           fsr1l	equ	0xFE1
 19743                           indf2	equ	0xFDF
 19744                           postinc2	equ	0xFDE
 19745                           postdec2	equ	0xFDD
 19746                           plusw2	equ	0xFDB
 19747                           fsr2h	equ	0xFDA
 19748                           fsr2l	equ	0xFD9
 19749                           status	equ	0xFD8
 19750                           
 19751 ;; *************** function _ISR_Enable *****************
 19752 ;; Defined at:
 19753 ;;		line 27 in file "Library/ISR.c"
 19754 ;; Parameters:    Size  Location     Type
 19755 ;;		None
 19756 ;; Auto vars:     Size  Location     Type
 19757 ;;		None
 19758 ;; Return value:  Size  Location     Type
 19759 ;;                  1    wreg      void 
 19760 ;; Registers used:
 19761 ;;		None
 19762 ;; Tracked objects:
 19763 ;;		On entry : 0/0
 19764 ;;		On exit  : 0/0
 19765 ;;		Unchanged: 0/0
 19766 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19767 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19768 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19769 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19770 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19771 ;;Total ram usage:        0 bytes
 19772 ;; Hardware stack levels used:    1
 19773 ;; Hardware stack levels required when called:    7
 19774 ;; This function calls:
 19775 ;;		Nothing
 19776 ;; This function is called by:
 19777 ;;		_init
 19778 ;; This function uses a non-reentrant model
 19779 ;;
 19780                           
 19781                           	psect	text94
 19782  0166C6                     __ptext94:
 19783                           	opt stack 0
 19784  0166C6                     _ISR_Enable:
 19785                           	opt stack 22
 19786                           
 19787                           ;ISR.c: 29: INTCONbits.PEIE = 1;
 19788                           
 19789                           ;incstack = 0
 19790  0166C6  8CF2               	bsf	intcon,6,c	;volatile
 19791                           
 19792                           ;ISR.c: 30: INTCONbits.GIE = 1;
 19793  0166C8  8EF2               	bsf	intcon,7,c	;volatile
 19794                           
 19795                           ;ISR.c: 31: INTCONbits.INT0IE = 1;
 19796  0166CA  88F2               	bsf	intcon,4,c	;volatile
 19797                           
 19798                           ;ISR.c: 32: INTCONbits.INT0IF = 0;
 19799  0166CC  92F2               	bcf	intcon,1,c	;volatile
 19800  0166CE  0012               	return		;funcret
 19801  0166D0                     __end_of_ISR_Enable:
 19802                           	opt stack 0
 19803                           tosu	equ	0xFFF
 19804                           tosh	equ	0xFFE
 19805                           tosl	equ	0xFFD
 19806                           pclath	equ	0xFFA
 19807                           tblptru	equ	0xFF8
 19808                           tblptrh	equ	0xFF7
 19809                           tblptrl	equ	0xFF6
 19810                           tablat	equ	0xFF5
 19811                           prodh	equ	0xFF4
 19812                           prodl	equ	0xFF3
 19813                           intcon	equ	0xFF2
 19814                           postinc0	equ	0xFEE
 19815                           wreg	equ	0xFE8
 19816                           indf1	equ	0xFE7
 19817                           postdec1	equ	0xFE5
 19818                           fsr1h	equ	0xFE2
 19819                           fsr1l	equ	0xFE1
 19820                           indf2	equ	0xFDF
 19821                           postinc2	equ	0xFDE
 19822                           postdec2	equ	0xFDD
 19823                           plusw2	equ	0xFDB
 19824                           fsr2h	equ	0xFDA
 19825                           fsr2l	equ	0xFD9
 19826                           status	equ	0xFD8
 19827                           
 19828 ;; *************** function _HMI_Init *****************
 19829 ;; Defined at:
 19830 ;;		line 104 in file "HMI.c"
 19831 ;; Parameters:    Size  Location     Type
 19832 ;;		None
 19833 ;; Auto vars:     Size  Location     Type
 19834 ;;  in              2   59[BANK0 ] unsigned short 
 19835 ;; Return value:  Size  Location     Type
 19836 ;;                  1    wreg      void 
 19837 ;; Registers used:
 19838 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19839 ;; Tracked objects:
 19840 ;;		On entry : 0/0
 19841 ;;		On exit  : 0/0
 19842 ;;		Unchanged: 0/0
 19843 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19844 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19845 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19846 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19847 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19848 ;;Total ram usage:        2 bytes
 19849 ;; Hardware stack levels used:    1
 19850 ;; Hardware stack levels required when called:   16
 19851 ;; This function calls:
 19852 ;;		_Button_Init
 19853 ;;		_SPI_Init
 19854 ;;		_SPI_MinSpeed
 19855 ;; This function is called by:
 19856 ;;		_init
 19857 ;; This function uses a non-reentrant model
 19858 ;;
 19859                           
 19860                           	psect	text95
 19861  0120E8                     __ptext95:
 19862                           	opt stack 0
 19863  0120E8                     _HMI_Init:
 19864                           	opt stack 13
 19865                           
 19866                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 19867                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 19868                           
 19869                           ;incstack = 0
 19870  0120E8  0E70               	movlw	low (_HMIBoard+48)
 19871  0120EA  0101               	movlb	1	; () banked
 19872  0120EC  6F00               	movwf	Button_Init@pInput& (0+255),b
 19873  0120EE  0E03               	movlw	high (_HMIBoard+48)
 19874  0120F0  0101               	movlb	1	; () banked
 19875  0120F2  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19876  0120F4  0E00               	movlw	0
 19877  0120F6  0101               	movlb	1	; () banked
 19878  0120F8  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19879  0120FA  0E02               	movlw	2
 19880  0120FC  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19881  0120FE  0E00               	movlw	low _HMI_InitButtons
 19882  012100  0101               	movlb	1	; () banked
 19883  012102  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19884  012104  0E67               	movlw	high _HMI_InitButtons
 19885  012106  0101               	movlb	1	; () banked
 19886  012108  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19887  01210A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19888  01210C  0101               	movlb	1	; () banked
 19889  01210E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19890  012110  0E34               	movlw	low _HMI_DIPSwitch
 19891  012112  0101               	movlb	1	; () banked
 19892  012114  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19893  012116  0E65               	movlw	high _HMI_DIPSwitch
 19894  012118  0101               	movlb	1	; () banked
 19895  01211A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19896  01211C  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 19897  01211E  0101               	movlb	1	; () banked
 19898  012120  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19899  012122  0E04               	movlw	low _Event_NULL
 19900  012124  0101               	movlb	1	; () banked
 19901  012126  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19902  012128  0E14               	movlw	high _Event_NULL
 19903  01212A  0101               	movlb	1	; () banked
 19904  01212C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19905  01212E  0E00               	movlw	low (_Event_NULL shr (0+16))
 19906  012130  0101               	movlb	1	; () banked
 19907  012132  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19908  012134  ECBD  F09E         	call	_Button_Init	;wreg free
 19909                           
 19910                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 19911                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 19912  012138  0E52               	movlw	low (_HMIBoard+18)
 19913  01213A  0101               	movlb	1	; () banked
 19914  01213C  6F00               	movwf	Button_Init@pInput& (0+255),b
 19915  01213E  0E03               	movlw	high (_HMIBoard+18)
 19916  012140  0101               	movlb	1	; () banked
 19917  012142  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19918  012144  0E00               	movlw	0
 19919  012146  0101               	movlb	1	; () banked
 19920  012148  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19921  01214A  0E02               	movlw	2
 19922  01214C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19923  01214E  0E00               	movlw	low _HMI_InitButtons
 19924  012150  0101               	movlb	1	; () banked
 19925  012152  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19926  012154  0E67               	movlw	high _HMI_InitButtons
 19927  012156  0101               	movlb	1	; () banked
 19928  012158  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19929  01215A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19930  01215C  0101               	movlb	1	; () banked
 19931  01215E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19932  012160  0E94               	movlw	low _HMI_LeftSwitch
 19933  012162  0101               	movlb	1	; () banked
 19934  012164  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19935  012166  0E65               	movlw	high _HMI_LeftSwitch
 19936  012168  0101               	movlb	1	; () banked
 19937  01216A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19938  01216C  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 19939  01216E  0101               	movlb	1	; () banked
 19940  012170  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19941  012172  0E04               	movlw	low _Event_NULL
 19942  012174  0101               	movlb	1	; () banked
 19943  012176  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19944  012178  0E14               	movlw	high _Event_NULL
 19945  01217A  0101               	movlb	1	; () banked
 19946  01217C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19947  01217E  0E00               	movlw	low (_Event_NULL shr (0+16))
 19948  012180  0101               	movlb	1	; () banked
 19949  012182  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19950  012184  ECBD  F09E         	call	_Button_Init	;wreg free
 19951                           
 19952                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 19953                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 19954  012188  0E48               	movlw	low (_HMIBoard+8)
 19955  01218A  0101               	movlb	1	; () banked
 19956  01218C  6F00               	movwf	Button_Init@pInput& (0+255),b
 19957  01218E  0E03               	movlw	high (_HMIBoard+8)
 19958  012190  0101               	movlb	1	; () banked
 19959  012192  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 19960  012194  0E00               	movlw	0
 19961  012196  0101               	movlb	1	; () banked
 19962  012198  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 19963  01219A  0E02               	movlw	2
 19964  01219C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 19965  01219E  0E00               	movlw	low _HMI_InitButtons
 19966  0121A0  0101               	movlb	1	; () banked
 19967  0121A2  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 19968  0121A4  0E67               	movlw	high _HMI_InitButtons
 19969  0121A6  0101               	movlb	1	; () banked
 19970  0121A8  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 19971  0121AA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 19972  0121AC  0101               	movlb	1	; () banked
 19973  0121AE  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 19974  0121B0  0E7C               	movlw	low _HMI_RightSwitch
 19975  0121B2  0101               	movlb	1	; () banked
 19976  0121B4  6F07               	movwf	Button_Init@pGetState& (0+255),b
 19977  0121B6  0E65               	movlw	high _HMI_RightSwitch
 19978  0121B8  0101               	movlb	1	; () banked
 19979  0121BA  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 19980  0121BC  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 19981  0121BE  0101               	movlb	1	; () banked
 19982  0121C0  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 19983  0121C2  0E04               	movlw	low _Event_NULL
 19984  0121C4  0101               	movlb	1	; () banked
 19985  0121C6  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 19986  0121C8  0E14               	movlw	high _Event_NULL
 19987  0121CA  0101               	movlb	1	; () banked
 19988  0121CC  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 19989  0121CE  0E00               	movlw	low (_Event_NULL shr (0+16))
 19990  0121D0  0101               	movlb	1	; () banked
 19991  0121D2  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 19992  0121D4  ECBD  F09E         	call	_Button_Init	;wreg free
 19993                           
 19994                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 19995                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 19996  0121D8  0E5C               	movlw	low (_HMIBoard+28)
 19997  0121DA  0101               	movlb	1	; () banked
 19998  0121DC  6F00               	movwf	Button_Init@pInput& (0+255),b
 19999  0121DE  0E03               	movlw	high (_HMIBoard+28)
 20000  0121E0  0101               	movlb	1	; () banked
 20001  0121E2  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20002  0121E4  0E00               	movlw	0
 20003  0121E6  0101               	movlb	1	; () banked
 20004  0121E8  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20005  0121EA  0E02               	movlw	2
 20006  0121EC  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20007  0121EE  0E00               	movlw	low _HMI_InitButtons
 20008  0121F0  0101               	movlb	1	; () banked
 20009  0121F2  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20010  0121F4  0E67               	movlw	high _HMI_InitButtons
 20011  0121F6  0101               	movlb	1	; () banked
 20012  0121F8  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20013  0121FA  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20014  0121FC  0101               	movlb	1	; () banked
 20015  0121FE  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20016  012200  0E64               	movlw	low _HMI_UpSwitch
 20017  012202  0101               	movlb	1	; () banked
 20018  012204  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20019  012206  0E65               	movlw	high _HMI_UpSwitch
 20020  012208  0101               	movlb	1	; () banked
 20021  01220A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20022  01220C  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 20023  01220E  0101               	movlb	1	; () banked
 20024  012210  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20025  012212  0E04               	movlw	low _Event_NULL
 20026  012214  0101               	movlb	1	; () banked
 20027  012216  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20028  012218  0E14               	movlw	high _Event_NULL
 20029  01221A  0101               	movlb	1	; () banked
 20030  01221C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20031  01221E  0E00               	movlw	low (_Event_NULL shr (0+16))
 20032  012220  0101               	movlb	1	; () banked
 20033  012222  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20034  012224  ECBD  F09E         	call	_Button_Init	;wreg free
 20035                           
 20036                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 20037                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 20038  012228  0E66               	movlw	low (_HMIBoard+38)
 20039  01222A  0101               	movlb	1	; () banked
 20040  01222C  6F00               	movwf	Button_Init@pInput& (0+255),b
 20041  01222E  0E03               	movlw	high (_HMIBoard+38)
 20042  012230  0101               	movlb	1	; () banked
 20043  012232  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 20044  012234  0E00               	movlw	0
 20045  012236  0101               	movlb	1	; () banked
 20046  012238  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 20047  01223A  0E02               	movlw	2
 20048  01223C  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 20049  01223E  0E00               	movlw	low _HMI_InitButtons
 20050  012240  0101               	movlb	1	; () banked
 20051  012242  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 20052  012244  0E67               	movlw	high _HMI_InitButtons
 20053  012246  0101               	movlb	1	; () banked
 20054  012248  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 20055  01224A  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 20056  01224C  0101               	movlb	1	; () banked
 20057  01224E  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 20058  012250  0E4C               	movlw	low _HMI_DownSwitch
 20059  012252  0101               	movlb	1	; () banked
 20060  012254  6F07               	movwf	Button_Init@pGetState& (0+255),b
 20061  012256  0E65               	movlw	high _HMI_DownSwitch
 20062  012258  0101               	movlb	1	; () banked
 20063  01225A  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 20064  01225C  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 20065  01225E  0101               	movlb	1	; () banked
 20066  012260  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 20067  012262  0E04               	movlw	low _Event_NULL
 20068  012264  0101               	movlb	1	; () banked
 20069  012266  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 20070  012268  0E14               	movlw	high _Event_NULL
 20071  01226A  0101               	movlb	1	; () banked
 20072  01226C  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 20073  01226E  0E00               	movlw	low (_Event_NULL shr (0+16))
 20074  012270  0101               	movlb	1	; () banked
 20075  012272  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 20076  012274  ECBD  F09E         	call	_Button_Init	;wreg free
 20077                           
 20078                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 20079  012278  0EA0               	movlw	160
 20080  01227A  0100               	movlb	0	; () banked
 20081  01227C  6FE7               	movwf	SPI_Init@pClock& (0+255),b
 20082  01227E  0E86               	movlw	134
 20083  012280  6FE8               	movwf	(SPI_Init@pClock+1)& (0+255),b
 20084  012282  0E01               	movlw	1
 20085  012284  6FE9               	movwf	(SPI_Init@pClock+2)& (0+255),b
 20086  012286  0E00               	movlw	0
 20087  012288  6FEA               	movwf	(SPI_Init@pClock+3)& (0+255),b
 20088  01228A  0E00               	movlw	0
 20089  01228C  0100               	movlb	0	; () banked
 20090  01228E  6FEB               	movwf	SPI_Init@pChannel& (0+255),b
 20091  012290  0E02               	movlw	2
 20092  012292  0100               	movlb	0	; () banked
 20093  012294  6FEC               	movwf	SPI_Init@pMode& (0+255),b
 20094  012296  EC53  F082         	call	_SPI_Init	;wreg free
 20095                           
 20096                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 20097  01229A  0E7A               	movlw	low _SPI1
 20098  01229C  0100               	movlb	0	; () banked
 20099  01229E  6FC9               	movwf	SPI_MinSpeed@pInput& (0+255),b
 20100  0122A0  0E03               	movlw	high _SPI1
 20101  0122A2  0100               	movlb	0	; () banked
 20102  0122A4  6FCA               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 20103  0122A6  ECE7  F0A9         	call	_SPI_MinSpeed	;wreg free
 20104                           
 20105                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 20106  0122AA  0E00               	movlw	0
 20107  0122AC  0100               	movlb	0	; () banked
 20108  0122AE  6FF6               	movwf	(HMI_Init@in+1)& (0+255),b
 20109  0122B0  0E00               	movlw	0
 20110  0122B2  6FF5               	movwf	HMI_Init@in& (0+255),b
 20111  0122B4                     l14397:
 20112                           
 20113                           ; BSR set to: 0
 20114  0122B4  0100               	movlb	0	; () banked
 20115  0122B6  51F6               	movf	(HMI_Init@in+1)& (0+255),w,b
 20116  0122B8  E113               	bnz	l1153
 20117  0122BA  0E08               	movlw	8
 20118  0122BC  0100               	movlb	0	; () banked
 20119  0122BE  5DF5               	subwf	HMI_Init@in& (0+255),w,b
 20120  0122C0  B0D8               	btfsc	status,0,c
 20121  0122C2  0012               	return	
 20122                           
 20123                           ; BSR set to: 0
 20124                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 20125                           
 20126                           ; BSR set to: 0
 20127                           
 20128                           ; BSR set to: 0
 20129  0122C4  0E40               	movlw	low _HMIBoard
 20130  0122C6  0100               	movlb	0	; () banked
 20131  0122C8  25F5               	addwf	HMI_Init@in& (0+255),w,b
 20132  0122CA  6ED9               	movwf	fsr2l,c
 20133  0122CC  0E03               	movlw	high _HMIBoard
 20134  0122CE  0100               	movlb	0	; () banked
 20135  0122D0  21F6               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 20136  0122D2  6EDA               	movwf	fsr2h,c
 20137  0122D4  0E00               	movlw	0
 20138  0122D6  6EDF               	movwf	indf2,c
 20139                           
 20140                           ; BSR set to: 0
 20141  0122D8  0100               	movlb	0	; () banked
 20142  0122DA  4BF5               	infsnz	HMI_Init@in& (0+255),f,b
 20143  0122DC  2BF6               	incf	(HMI_Init@in+1)& (0+255),f,b
 20144  0122DE  D7EA               	goto	l14397
 20145  0122E0                     l1153:
 20146                           
 20147                           ; BSR set to: 0
 20148  0122E0  0012               	return		;funcret
 20149  0122E2                     __end_of_HMI_Init:
 20150                           	opt stack 0
 20151                           tosu	equ	0xFFF
 20152                           tosh	equ	0xFFE
 20153                           tosl	equ	0xFFD
 20154                           pclath	equ	0xFFA
 20155                           tblptru	equ	0xFF8
 20156                           tblptrh	equ	0xFF7
 20157                           tblptrl	equ	0xFF6
 20158                           tablat	equ	0xFF5
 20159                           prodh	equ	0xFF4
 20160                           prodl	equ	0xFF3
 20161                           intcon	equ	0xFF2
 20162                           postinc0	equ	0xFEE
 20163                           wreg	equ	0xFE8
 20164                           indf1	equ	0xFE7
 20165                           postdec1	equ	0xFE5
 20166                           fsr1h	equ	0xFE2
 20167                           fsr1l	equ	0xFE1
 20168                           indf2	equ	0xFDF
 20169                           postinc2	equ	0xFDE
 20170                           postdec2	equ	0xFDD
 20171                           plusw2	equ	0xFDB
 20172                           fsr2h	equ	0xFDA
 20173                           fsr2l	equ	0xFD9
 20174                           status	equ	0xFD8
 20175                           
 20176 ;; *************** function _SPI_MinSpeed *****************
 20177 ;; Defined at:
 20178 ;;		line 190 in file "Library/SPI.c"
 20179 ;; Parameters:    Size  Location     Type
 20180 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 20181 ;;		 -> SPI1(11), 
 20182 ;; Auto vars:     Size  Location     Type
 20183 ;;		None
 20184 ;; Return value:  Size  Location     Type
 20185 ;;                  1    wreg      void 
 20186 ;; Registers used:
 20187 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20188 ;; Tracked objects:
 20189 ;;		On entry : 0/0
 20190 ;;		On exit  : 0/0
 20191 ;;		Unchanged: 0/0
 20192 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20193 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20194 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20195 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20196 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20197 ;;Total ram usage:        2 bytes
 20198 ;; Hardware stack levels used:    1
 20199 ;; Hardware stack levels required when called:    9
 20200 ;; This function calls:
 20201 ;;		_Byte_SetBit
 20202 ;;		_Byte_SetQuad
 20203 ;; This function is called by:
 20204 ;;		_HMI_Init
 20205 ;; This function uses a non-reentrant model
 20206 ;;
 20207                           
 20208                           	psect	text96
 20209  0153CE                     __ptext96:
 20210                           	opt stack 0
 20211  0153CE                     _SPI_MinSpeed:
 20212                           	opt stack 19
 20213                           
 20214                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20215                           
 20216                           ; BSR set to: 0
 20217                           ;incstack = 0
 20218  0153CE  0100               	movlb	0	; () banked
 20219  0153D0  EE20 F006          	lfsr	2,6
 20220  0153D4  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20221  0153D6  26D9               	addwf	fsr2l,f,c
 20222  0153D8  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20223  0153DA  22DA               	addwfc	fsr2h,f,c
 20224  0153DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20225  0153E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20226  0153E4  0E05               	movlw	5
 20227  0153E6  0100               	movlb	0	; () banked
 20228  0153E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20229  0153EA  0E00               	movlw	0
 20230  0153EC  0100               	movlb	0	; () banked
 20231  0153EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20232  0153F0  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20233                           
 20234                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 20235  0153F4  0100               	movlb	0	; () banked
 20236  0153F6  EE20 F006          	lfsr	2,6
 20237  0153FA  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20238  0153FC  26D9               	addwf	fsr2l,f,c
 20239  0153FE  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20240  015400  22DA               	addwfc	fsr2h,f,c
 20241  015402  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20242  015406  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20243  01540A  0E00               	movlw	0
 20244  01540C  0100               	movlb	0	; () banked
 20245  01540E  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20246  015410  0E02               	movlw	2
 20247  015412  0100               	movlb	0	; () banked
 20248  015414  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20249  015416  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 20250                           
 20251                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20252  01541A  0100               	movlb	0	; () banked
 20253  01541C  EE20 F006          	lfsr	2,6
 20254  015420  51C9               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 20255  015422  26D9               	addwf	fsr2l,f,c
 20256  015424  51CA               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 20257  015426  22DA               	addwfc	fsr2h,f,c
 20258  015428  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20259  01542C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20260  015430  0E05               	movlw	5
 20261  015432  0100               	movlb	0	; () banked
 20262  015434  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20263  015436  0E01               	movlw	1
 20264  015438  0100               	movlb	0	; () banked
 20265  01543A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20266  01543C  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20267  015440  0012               	return		;funcret
 20268  015442                     __end_of_SPI_MinSpeed:
 20269                           	opt stack 0
 20270                           tosu	equ	0xFFF
 20271                           tosh	equ	0xFFE
 20272                           tosl	equ	0xFFD
 20273                           pclath	equ	0xFFA
 20274                           tblptru	equ	0xFF8
 20275                           tblptrh	equ	0xFF7
 20276                           tblptrl	equ	0xFF6
 20277                           tablat	equ	0xFF5
 20278                           prodh	equ	0xFF4
 20279                           prodl	equ	0xFF3
 20280                           intcon	equ	0xFF2
 20281                           postinc0	equ	0xFEE
 20282                           wreg	equ	0xFE8
 20283                           indf1	equ	0xFE7
 20284                           postdec1	equ	0xFE5
 20285                           fsr1h	equ	0xFE2
 20286                           fsr1l	equ	0xFE1
 20287                           indf2	equ	0xFDF
 20288                           postinc2	equ	0xFDE
 20289                           postdec2	equ	0xFDD
 20290                           plusw2	equ	0xFDB
 20291                           fsr2h	equ	0xFDA
 20292                           fsr2l	equ	0xFD9
 20293                           status	equ	0xFD8
 20294                           
 20295 ;; *************** function _SPI_Init *****************
 20296 ;; Defined at:
 20297 ;;		line 12 in file "Library/SPI.c"
 20298 ;; Parameters:    Size  Location     Type
 20299 ;;  pClock          4   45[BANK0 ] unsigned long 
 20300 ;;  pChannel        1   49[BANK0 ] enum E6744
 20301 ;;  pMode           1   50[BANK0 ] enum E6748
 20302 ;; Auto vars:     Size  Location     Type
 20303 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 20304 ;;		 -> SPI1(11), SPI2(11), 
 20305 ;; Return value:  Size  Location     Type
 20306 ;;                  1    wreg      void 
 20307 ;; Registers used:
 20308 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20309 ;; Tracked objects:
 20310 ;;		On entry : 0/0
 20311 ;;		On exit  : 0/0
 20312 ;;		Unchanged: 0/0
 20313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20314 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20316 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20317 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20318 ;;Total ram usage:        8 bytes
 20319 ;; Hardware stack levels used:    1
 20320 ;; Hardware stack levels required when called:   12
 20321 ;; This function calls:
 20322 ;;		_Byte_SetBit
 20323 ;;		_Byte_SetQuad
 20324 ;;		_Port_SetPinType
 20325 ;;		_SPI_DCS
 20326 ;;		_SPI_DisableISR
 20327 ;;		_Timer2_Init
 20328 ;; This function is called by:
 20329 ;;		_Configure_GPIOs
 20330 ;;		_HMI_Init
 20331 ;; This function uses a non-reentrant model
 20332 ;;
 20333                           
 20334                           	psect	text97
 20335  0104A6                     __ptext97:
 20336                           	opt stack 0
 20337  0104A6                     _SPI_Init:
 20338                           	opt stack 15
 20339                           
 20340                           ;SPI.c: 14: SPIPtr pInput;
 20341                           ;SPI.c: 16: switch (pChannel)
 20342                           
 20343                           ;incstack = 0
 20344  0104A6  D00C               	goto	l597
 20345  0104A8                     
 20346                           ;SPI.c: 19: pInput = &SPI1;
 20347  0104A8  0E7A               	movlw	low _SPI1
 20348  0104AA  0100               	movlb	0	; () banked
 20349  0104AC  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20350  0104AE  0E03               	movlw	high _SPI1
 20351  0104B0  D004               	goto	L13
 20352  0104B2                     
 20353                           ; BSR set to: 0
 20354                           ;SPI.c: 22: pInput = &SPI2;
 20355                           
 20356                           ; BSR set to: 0
 20357  0104B2  0E85               	movlw	low _SPI2
 20358  0104B4  0100               	movlb	0	; () banked
 20359  0104B6  6FED               	movwf	SPI_Init@pInput& (0+255),b
 20360  0104B8  0E03               	movlw	high _SPI2
 20361  0104BA                     L13:
 20362  0104BA  0100               	movlb	0	; () banked
 20363  0104BC  6FEE               	movwf	(SPI_Init@pInput+1)& (0+255),b
 20364                           
 20365                           ; BSR set to: 0
 20366                           ;SPI.c: 24: };
 20367                           
 20368                           ;SPI.c: 23: break;
 20369  0104BE  D008               	goto	l599
 20370  0104C0                     l597:
 20371                           
 20372                           ; BSR set to: 0
 20373  0104C0  0100               	movlb	0	; () banked
 20374  0104C2  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20375                           
 20376                           ; Switch size 1, requested type "space"
 20377                           ; Number of cases is 2, Range of values is 0 to 1
 20378                           ; switch strategies available:
 20379                           ; Name         Instructions Cycles
 20380                           ; simple_byte            7     4 (average)
 20381                           ;	Chosen strategy is simple_byte
 20382  0104C4  0A00               	xorlw	0	; case 0
 20383  0104C6  B4D8               	btfsc	status,2,c
 20384  0104C8  D7EF               	goto	l598
 20385  0104CA  0A01               	xorlw	1	; case 1
 20386  0104CC  B4D8               	btfsc	status,2,c
 20387  0104CE  D7F1               	goto	l600
 20388  0104D0                     l599:
 20389                           
 20390                           ; BSR set to: 0
 20391                           ;SPI.c: 26: pInput->mChannel = pChannel;
 20392                           
 20393                           ; BSR set to: 0
 20394  0104D0  0100               	movlb	0	; () banked
 20395  0104D2  EE20 F002          	lfsr	2,2
 20396  0104D6  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20397  0104D8  26D9               	addwf	fsr2l,f,c
 20398  0104DA  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20399  0104DC  22DA               	addwfc	fsr2h,f,c
 20400  0104DE  C0EB  FFDF         	movff	SPI_Init@pChannel,indf2
 20401                           
 20402                           ;SPI.c: 35: switch (pChannel)
 20403  0104E2  D0B1               	goto	l601
 20404  0104E4                     
 20405                           ; BSR set to: 0
 20406                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 20407                           
 20408                           ; BSR set to: 0
 20409  0104E4  0EA5               	movlw	low _PortC
 20410  0104E6  0100               	movlb	0	; () banked
 20411  0104E8  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20412  0104EA  0E00               	movlw	high _PortC
 20413  0104EC  0100               	movlb	0	; () banked
 20414  0104EE  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20415  0104F0  0E02               	movlw	2
 20416  0104F2  0100               	movlb	0	; () banked
 20417  0104F4  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20418  0104F6  0E03               	movlw	3
 20419  0104F8  0100               	movlb	0	; () banked
 20420  0104FA  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20421  0104FC  EC39  F093         	call	_Port_SetPinType	;wreg free
 20422                           
 20423                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 20424  010500  0EA5               	movlw	low _PortC
 20425  010502  0100               	movlb	0	; () banked
 20426  010504  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20427  010506  0E00               	movlw	high _PortC
 20428  010508  0100               	movlb	0	; () banked
 20429  01050A  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20430  01050C  0E03               	movlw	3
 20431  01050E  0100               	movlb	0	; () banked
 20432  010510  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20433  010512  0E03               	movlw	3
 20434  010514  0100               	movlb	0	; () banked
 20435  010516  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20436  010518  EC39  F093         	call	_Port_SetPinType	;wreg free
 20437                           
 20438                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 20439  01051C  0EA5               	movlw	low _PortC
 20440  01051E  0100               	movlb	0	; () banked
 20441  010520  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20442  010522  0E00               	movlw	high _PortC
 20443  010524  0100               	movlb	0	; () banked
 20444  010526  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20445  010528  0E05               	movlw	5
 20446  01052A  0100               	movlb	0	; () banked
 20447  01052C  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20448  01052E  0E03               	movlw	3
 20449  010530  0100               	movlb	0	; () banked
 20450  010532  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20451  010534  EC39  F093         	call	_Port_SetPinType	;wreg free
 20452                           
 20453                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 20454  010538  0EA5               	movlw	low _PortC
 20455  01053A  0100               	movlb	0	; () banked
 20456  01053C  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20457  01053E  0E00               	movlw	high _PortC
 20458  010540  0100               	movlb	0	; () banked
 20459  010542  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20460  010544  0E04               	movlw	4
 20461  010546  0100               	movlb	0	; () banked
 20462  010548  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20463  01054A  0E00               	movlw	0
 20464  01054C  0100               	movlb	0	; () banked
 20465  01054E  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20466  010550  EC39  F093         	call	_Port_SetPinType	;wreg free
 20467                           
 20468                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 20469  010554  0100               	movlb	0	; () banked
 20470  010556  EE20 F003          	lfsr	2,3
 20471  01055A  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20472  01055C  26D9               	addwf	fsr2l,f,c
 20473  01055E  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20474  010560  22DA               	addwfc	fsr2h,f,c
 20475  010562  0EC7               	movlw	199
 20476  010564  6EDE               	movwf	postinc2,c
 20477  010566  0E0F               	movlw	15
 20478  010568  6EDD               	movwf	postdec2,c
 20479                           
 20480                           ; BSR set to: 0
 20481                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 20482  01056A  0100               	movlb	0	; () banked
 20483  01056C  EE20 F006          	lfsr	2,6
 20484  010570  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20485  010572  26D9               	addwf	fsr2l,f,c
 20486  010574  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20487  010576  22DA               	addwfc	fsr2h,f,c
 20488  010578  0EC6               	movlw	198
 20489  01057A  6EDE               	movwf	postinc2,c
 20490  01057C  0E0F               	movlw	15
 20491  01057E  6EDD               	movwf	postdec2,c
 20492                           
 20493                           ; BSR set to: 0
 20494                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 20495  010580  0100               	movlb	0	; () banked
 20496  010582  EE20 F009          	lfsr	2,9
 20497  010586  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20498  010588  26D9               	addwf	fsr2l,f,c
 20499  01058A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20500  01058C  22DA               	addwfc	fsr2h,f,c
 20501  01058E  0EC9               	movlw	201
 20502  010590  D056               	goto	L14
 20503  010592                     
 20504                           ; BSR set to: 0
 20505                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 20506                           
 20507                           ; BSR set to: 0
 20508  010592  0E9B               	movlw	low _PortD
 20509  010594  0100               	movlb	0	; () banked
 20510  010596  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20511  010598  0E00               	movlw	high _PortD
 20512  01059A  0100               	movlb	0	; () banked
 20513  01059C  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20514  01059E  0E07               	movlw	7
 20515  0105A0  0100               	movlb	0	; () banked
 20516  0105A2  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20517  0105A4  0E03               	movlw	3
 20518  0105A6  0100               	movlb	0	; () banked
 20519  0105A8  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20520  0105AA  EC39  F093         	call	_Port_SetPinType	;wreg free
 20521                           
 20522                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 20523  0105AE  0E9B               	movlw	low _PortD
 20524  0105B0  0100               	movlb	0	; () banked
 20525  0105B2  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20526  0105B4  0E00               	movlw	high _PortD
 20527  0105B6  0100               	movlb	0	; () banked
 20528  0105B8  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20529  0105BA  0E06               	movlw	6
 20530  0105BC  0100               	movlb	0	; () banked
 20531  0105BE  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20532  0105C0  0E03               	movlw	3
 20533  0105C2  0100               	movlb	0	; () banked
 20534  0105C4  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20535  0105C6  EC39  F093         	call	_Port_SetPinType	;wreg free
 20536                           
 20537                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 20538  0105CA  0E9B               	movlw	low _PortD
 20539  0105CC  0100               	movlb	0	; () banked
 20540  0105CE  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20541  0105D0  0E00               	movlw	high _PortD
 20542  0105D2  0100               	movlb	0	; () banked
 20543  0105D4  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20544  0105D6  0E04               	movlw	4
 20545  0105D8  0100               	movlb	0	; () banked
 20546  0105DA  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20547  0105DC  0E03               	movlw	3
 20548  0105DE  0100               	movlb	0	; () banked
 20549  0105E0  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20550  0105E2  EC39  F093         	call	_Port_SetPinType	;wreg free
 20551                           
 20552                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 20553  0105E6  0E9B               	movlw	low _PortD
 20554  0105E8  0100               	movlb	0	; () banked
 20555  0105EA  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 20556  0105EC  0E00               	movlw	high _PortD
 20557  0105EE  0100               	movlb	0	; () banked
 20558  0105F0  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 20559  0105F2  0E05               	movlw	5
 20560  0105F4  0100               	movlb	0	; () banked
 20561  0105F6  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 20562  0105F8  0E00               	movlw	0
 20563  0105FA  0100               	movlb	0	; () banked
 20564  0105FC  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 20565  0105FE  EC39  F093         	call	_Port_SetPinType	;wreg free
 20566                           
 20567                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 20568  010602  0100               	movlb	0	; () banked
 20569  010604  EE20 F003          	lfsr	2,3
 20570  010608  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20571  01060A  26D9               	addwf	fsr2l,f,c
 20572  01060C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20573  01060E  22DA               	addwfc	fsr2h,f,c
 20574  010610  0E6D               	movlw	109
 20575  010612  6EDE               	movwf	postinc2,c
 20576  010614  0E0F               	movlw	15
 20577  010616  6EDD               	movwf	postdec2,c
 20578                           
 20579                           ; BSR set to: 0
 20580                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 20581  010618  0100               	movlb	0	; () banked
 20582  01061A  EE20 F006          	lfsr	2,6
 20583  01061E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20584  010620  26D9               	addwf	fsr2l,f,c
 20585  010622  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20586  010624  22DA               	addwfc	fsr2h,f,c
 20587  010626  0E6C               	movlw	108
 20588  010628  6EDE               	movwf	postinc2,c
 20589  01062A  0E0F               	movlw	15
 20590  01062C  6EDD               	movwf	postdec2,c
 20591                           
 20592                           ; BSR set to: 0
 20593                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 20594  01062E  0100               	movlb	0	; () banked
 20595  010630  EE20 F009          	lfsr	2,9
 20596  010634  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20597  010636  26D9               	addwf	fsr2l,f,c
 20598  010638  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20599  01063A  22DA               	addwfc	fsr2h,f,c
 20600  01063C  0E6F               	movlw	111
 20601  01063E                     L14:
 20602  01063E  6EDE               	movwf	postinc2,c
 20603  010640  0E0F               	movlw	15
 20604  010642  6EDD               	movwf	postdec2,c
 20605                           
 20606                           ;SPI.c: 68: break;
 20607  010644  D009               	goto	l603
 20608  010646                     l601:
 20609                           
 20610                           ; BSR set to: 0
 20611                           
 20612                           ; BSR set to: 0
 20613  010646  0100               	movlb	0	; () banked
 20614  010648  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20615                           
 20616                           ; Switch size 1, requested type "space"
 20617                           ; Number of cases is 2, Range of values is 0 to 1
 20618                           ; switch strategies available:
 20619                           ; Name         Instructions Cycles
 20620                           ; simple_byte            7     4 (average)
 20621                           ;	Chosen strategy is simple_byte
 20622  01064A  0A00               	xorlw	0	; case 0
 20623  01064C  B4D8               	btfsc	status,2,c
 20624  01064E  D74A               	goto	l602
 20625  010650  0A01               	xorlw	1	; case 1
 20626  010652  A4D8               	btfss	status,2,c
 20627  010654  0012               	return	
 20628  010656  D79D               	goto	l604
 20629  010658                     l603:
 20630                           
 20631                           ; BSR set to: 0
 20632                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 20633                           
 20634                           ; BSR set to: 0
 20635  010658  0100               	movlb	0	; () banked
 20636  01065A  EE20 F006          	lfsr	2,6
 20637  01065E  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20638  010660  26D9               	addwf	fsr2l,f,c
 20639  010662  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20640  010664  22DA               	addwfc	fsr2h,f,c
 20641  010666  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20642  01066A  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20643  01066E  0E05               	movlw	5
 20644  010670  0100               	movlb	0	; () banked
 20645  010672  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20646  010674  0E00               	movlw	0
 20647  010676  0100               	movlb	0	; () banked
 20648  010678  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20649  01067A  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20650                           
 20651                           ;SPI.c: 77: switch(pMode)
 20652  01067E  D09C               	goto	l607
 20653  010680                     
 20654                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20655  010680  0100               	movlb	0	; () banked
 20656  010682  EE20 F006          	lfsr	2,6
 20657  010686  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20658  010688  26D9               	addwf	fsr2l,f,c
 20659  01068A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20660  01068C  22DA               	addwfc	fsr2h,f,c
 20661  01068E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20662  010692  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20663  010696  0E04               	movlw	4
 20664  010698  0100               	movlb	0	; () banked
 20665  01069A  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20666  01069C  0E00               	movlw	0
 20667  01069E  0100               	movlb	0	; () banked
 20668  0106A0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20669  0106A2  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20670                           
 20671                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20672  0106A6  0100               	movlb	0	; () banked
 20673  0106A8  EE20 F003          	lfsr	2,3
 20674  0106AC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20675  0106AE  26D9               	addwf	fsr2l,f,c
 20676  0106B0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20677  0106B2  22DA               	addwfc	fsr2h,f,c
 20678  0106B4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20679  0106B8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20680  0106BC  0E06               	movlw	6
 20681  0106BE  0100               	movlb	0	; () banked
 20682  0106C0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20683  0106C2  0E00               	movlw	0
 20684  0106C4  0100               	movlb	0	; () banked
 20685  0106C6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20686  0106C8  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20687                           
 20688                           ;SPI.c: 82: break;
 20689  0106CC  D084               	goto	l609
 20690  0106CE                     
 20691                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 20692  0106CE  0100               	movlb	0	; () banked
 20693  0106D0  EE20 F006          	lfsr	2,6
 20694  0106D4  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20695  0106D6  26D9               	addwf	fsr2l,f,c
 20696  0106D8  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20697  0106DA  22DA               	addwfc	fsr2h,f,c
 20698  0106DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20699  0106E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20700  0106E4  0E04               	movlw	4
 20701  0106E6  0100               	movlb	0	; () banked
 20702  0106E8  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20703  0106EA  0E00               	movlw	0
 20704  0106EC  0100               	movlb	0	; () banked
 20705  0106EE  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20706  0106F0  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20707                           
 20708                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20709  0106F4  0100               	movlb	0	; () banked
 20710  0106F6  EE20 F003          	lfsr	2,3
 20711  0106FA  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20712  0106FC  26D9               	addwf	fsr2l,f,c
 20713  0106FE  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20714  010700  22DA               	addwfc	fsr2h,f,c
 20715  010702  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20716  010706  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20717  01070A  0E06               	movlw	6
 20718  01070C  0100               	movlb	0	; () banked
 20719  01070E  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20720  010710  0E01               	movlw	1
 20721  010712  0100               	movlb	0	; () banked
 20722  010714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20723  010716  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20724                           
 20725                           ;SPI.c: 86: break;
 20726  01071A  D05D               	goto	l609
 20727  01071C                     
 20728                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20729  01071C  0100               	movlb	0	; () banked
 20730  01071E  EE20 F006          	lfsr	2,6
 20731  010722  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20732  010724  26D9               	addwf	fsr2l,f,c
 20733  010726  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20734  010728  22DA               	addwfc	fsr2h,f,c
 20735  01072A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20736  01072E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20737  010732  0E04               	movlw	4
 20738  010734  0100               	movlb	0	; () banked
 20739  010736  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20740  010738  0E01               	movlw	1
 20741  01073A  0100               	movlb	0	; () banked
 20742  01073C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20743  01073E  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20744                           
 20745                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 20746  010742  0100               	movlb	0	; () banked
 20747  010744  EE20 F003          	lfsr	2,3
 20748  010748  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20749  01074A  26D9               	addwf	fsr2l,f,c
 20750  01074C  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20751  01074E  22DA               	addwfc	fsr2h,f,c
 20752  010750  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20753  010754  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20754  010758  0E06               	movlw	6
 20755  01075A  0100               	movlb	0	; () banked
 20756  01075C  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20757  01075E  0E00               	movlw	0
 20758  010760  0100               	movlb	0	; () banked
 20759  010762  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20760  010764  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20761                           
 20762                           ;SPI.c: 90: break;
 20763  010768  D036               	goto	l609
 20764  01076A                     
 20765                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 20766  01076A  0100               	movlb	0	; () banked
 20767  01076C  EE20 F006          	lfsr	2,6
 20768  010770  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20769  010772  26D9               	addwf	fsr2l,f,c
 20770  010774  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20771  010776  22DA               	addwfc	fsr2h,f,c
 20772  010778  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20773  01077C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20774  010780  0E04               	movlw	4
 20775  010782  0100               	movlb	0	; () banked
 20776  010784  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20777  010786  0E01               	movlw	1
 20778  010788  0100               	movlb	0	; () banked
 20779  01078A  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20780  01078C  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20781                           
 20782                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 20783  010790  0100               	movlb	0	; () banked
 20784  010792  EE20 F003          	lfsr	2,3
 20785  010796  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20786  010798  26D9               	addwf	fsr2l,f,c
 20787  01079A  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20788  01079C  22DA               	addwfc	fsr2h,f,c
 20789  01079E  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20790  0107A2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20791  0107A6  0E06               	movlw	6
 20792  0107A8  0100               	movlb	0	; () banked
 20793  0107AA  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20794  0107AC  0E01               	movlw	1
 20795  0107AE  0100               	movlb	0	; () banked
 20796  0107B0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20797  0107B2  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20798                           
 20799                           ;SPI.c: 94: break;
 20800  0107B6  D00F               	goto	l609
 20801  0107B8                     l607:
 20802  0107B8  0100               	movlb	0	; () banked
 20803  0107BA  51EC               	movf	SPI_Init@pMode& (0+255),w,b
 20804                           
 20805                           ; Switch size 1, requested type "space"
 20806                           ; Number of cases is 4, Range of values is 0 to 3
 20807                           ; switch strategies available:
 20808                           ; Name         Instructions Cycles
 20809                           ; simple_byte           13     7 (average)
 20810                           ;	Chosen strategy is simple_byte
 20811  0107BC  0A00               	xorlw	0	; case 0
 20812  0107BE  B4D8               	btfsc	status,2,c
 20813  0107C0  D75F               	goto	l608
 20814  0107C2  0A01               	xorlw	1	; case 1
 20815  0107C4  B4D8               	btfsc	status,2,c
 20816  0107C6  D783               	goto	l610
 20817  0107C8  0A03               	xorlw	3	; case 2
 20818  0107CA  B4D8               	btfsc	status,2,c
 20819  0107CC  D7A7               	goto	l611
 20820  0107CE  0A01               	xorlw	1	; case 3
 20821  0107D0  A4D8               	btfss	status,2,c
 20822  0107D2  0012               	return	
 20823  0107D4  D7CA               	goto	l612
 20824  0107D6                     l609:
 20825                           
 20826                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 20827                           
 20828                           ; BSR set to: 0
 20829  0107D6  0100               	movlb	0	; () banked
 20830  0107D8  EE20 F006          	lfsr	2,6
 20831  0107DC  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20832  0107DE  26D9               	addwf	fsr2l,f,c
 20833  0107E0  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20834  0107E2  22DA               	addwfc	fsr2h,f,c
 20835  0107E4  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20836  0107E8  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20837  0107EC  0E07               	movlw	7
 20838  0107EE  0100               	movlb	0	; () banked
 20839  0107F0  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20840  0107F2  0E00               	movlw	0
 20841  0107F4  0100               	movlb	0	; () banked
 20842  0107F6  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20843  0107F8  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20844                           
 20845                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 20846  0107FC  0100               	movlb	0	; () banked
 20847  0107FE  EE20 F006          	lfsr	2,6
 20848  010802  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20849  010804  26D9               	addwf	fsr2l,f,c
 20850  010806  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20851  010808  22DA               	addwfc	fsr2h,f,c
 20852  01080A  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20853  01080E  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20854  010812  0E06               	movlw	6
 20855  010814  0100               	movlb	0	; () banked
 20856  010816  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20857  010818  0E00               	movlw	0
 20858  01081A  0100               	movlb	0	; () banked
 20859  01081C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20860  01081E  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20861                           
 20862                           ;SPI.c: 106: Timer2_Init(pClock);
 20863  010822  C0E7  F0C7         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 20864  010826  C0E8  F0C8         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 20865  01082A  C0E9  F0C9         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 20866  01082E  C0EA  F0CA         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 20867  010832  EC50  F099         	call	_Timer2_Init	;wreg free
 20868                           
 20869                           ;SPI.c: 112: SPI_DisableISR(pInput);
 20870  010836  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 20871  01083A  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 20872  01083E  EC69  F0B1         	call	_SPI_DisableISR	;wreg free
 20873                           
 20874                           ;SPI.c: 116: switch (pChannel)
 20875  010842  D004               	goto	l614
 20876  010844                     l615:
 20877                           
 20878                           ; BSR set to: 0
 20879  010844  869F               	bsf	3999,3,c	;volatile
 20880  010846  D00B               	goto	l616
 20881  010848                     l617:
 20882                           
 20883                           ; BSR set to: 0
 20884  010848  8EA5               	bsf	4005,7,c	;volatile
 20885  01084A  D009               	goto	l616
 20886  01084C                     l614:
 20887                           
 20888                           ; BSR set to: 0
 20889  01084C  0100               	movlb	0	; () banked
 20890  01084E  51EB               	movf	SPI_Init@pChannel& (0+255),w,b
 20891                           
 20892                           ; Switch size 1, requested type "space"
 20893                           ; Number of cases is 2, Range of values is 0 to 1
 20894                           ; switch strategies available:
 20895                           ; Name         Instructions Cycles
 20896                           ; simple_byte            7     4 (average)
 20897                           ;	Chosen strategy is simple_byte
 20898  010850  0A00               	xorlw	0	; case 0
 20899  010852  B4D8               	btfsc	status,2,c
 20900  010854  D7F7               	goto	l615
 20901  010856  0A01               	xorlw	1	; case 1
 20902  010858  A4D8               	btfss	status,2,c
 20903  01085A  0012               	return	
 20904  01085C  D7F5               	goto	l617
 20905  01085E                     l616:
 20906                           
 20907                           ; BSR set to: 0
 20908                           ;SPI.c: 124: SPI_DCS(pInput);
 20909                           
 20910                           ; BSR set to: 0
 20911  01085E  C0ED  F0BA         	movff	SPI_Init@pInput,SPI_DCS@pInput
 20912  010862  C0EE  F0BB         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 20913  010866  ECC9  F0B0         	call	_SPI_DCS	;wreg free
 20914                           
 20915                           ;SPI.c: 126: pInput->mBusy = 0;
 20916  01086A  C0ED  FFD9         	movff	SPI_Init@pInput,fsr2l
 20917  01086E  C0EE  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 20918  010872  0E00               	movlw	0
 20919  010874  6EDF               	movwf	indf2,c
 20920                           
 20921                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 20922  010876  0100               	movlb	0	; () banked
 20923  010878  EE20 F006          	lfsr	2,6
 20924  01087C  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20925  01087E  26D9               	addwf	fsr2l,f,c
 20926  010880  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20927  010882  22DA               	addwfc	fsr2h,f,c
 20928  010884  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 20929  010888  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 20930  01088C  0E00               	movlw	0
 20931  01088E  0100               	movlb	0	; () banked
 20932  010890  6FC7               	movwf	Byte_SetQuad@pQuad& (0+255),b
 20933  010892  0E03               	movlw	3
 20934  010894  0100               	movlb	0	; () banked
 20935  010896  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 20936  010898  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 20937                           
 20938                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 20939  01089C  0100               	movlb	0	; () banked
 20940  01089E  EE20 F006          	lfsr	2,6
 20941  0108A2  51ED               	movf	SPI_Init@pInput& (0+255),w,b
 20942  0108A4  26D9               	addwf	fsr2l,f,c
 20943  0108A6  51EE               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 20944  0108A8  22DA               	addwfc	fsr2h,f,c
 20945  0108AA  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 20946  0108AE  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 20947  0108B2  0E05               	movlw	5
 20948  0108B4  0100               	movlb	0	; () banked
 20949  0108B6  6FBC               	movwf	Byte_SetBit@pBit& (0+255),b
 20950  0108B8  0E01               	movlw	1
 20951  0108BA  0100               	movlb	0	; () banked
 20952  0108BC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 20953  0108BE  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 20954  0108C2  0012               	return		;funcret
 20955  0108C4                     __end_of_SPI_Init:
 20956                           	opt stack 0
 20957                           tosu	equ	0xFFF
 20958                           tosh	equ	0xFFE
 20959                           tosl	equ	0xFFD
 20960                           pclath	equ	0xFFA
 20961                           tblptru	equ	0xFF8
 20962                           tblptrh	equ	0xFF7
 20963                           tblptrl	equ	0xFF6
 20964                           tablat	equ	0xFF5
 20965                           prodh	equ	0xFF4
 20966                           prodl	equ	0xFF3
 20967                           intcon	equ	0xFF2
 20968                           postinc0	equ	0xFEE
 20969                           wreg	equ	0xFE8
 20970                           indf1	equ	0xFE7
 20971                           postdec1	equ	0xFE5
 20972                           fsr1h	equ	0xFE2
 20973                           fsr1l	equ	0xFE1
 20974                           indf2	equ	0xFDF
 20975                           postinc2	equ	0xFDE
 20976                           postdec2	equ	0xFDD
 20977                           plusw2	equ	0xFDB
 20978                           fsr2h	equ	0xFDA
 20979                           fsr2l	equ	0xFD9
 20980                           status	equ	0xFD8
 20981                           
 20982 ;; *************** function _Timer2_Init *****************
 20983 ;; Defined at:
 20984 ;;		line 10 in file "Library/Timer2.c"
 20985 ;; Parameters:    Size  Location     Type
 20986 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 20987 ;; Auto vars:     Size  Location     Type
 20988 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 20989 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 20990 ;;  RDIV            4   18[BANK0 ] unsigned long 
 20991 ;; Return value:  Size  Location     Type
 20992 ;;                  1    wreg      void 
 20993 ;; Registers used:
 20994 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20995 ;; Tracked objects:
 20996 ;;		On entry : 0/0
 20997 ;;		On exit  : 0/0
 20998 ;;		Unchanged: 0/0
 20999 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21000 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21001 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21002 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21003 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21004 ;;Total ram usage:       17 bytes
 21005 ;; Hardware stack levels used:    1
 21006 ;; Hardware stack levels required when called:    8
 21007 ;; This function calls:
 21008 ;;		_Timer2_Clear
 21009 ;;		___lldiv
 21010 ;; This function is called by:
 21011 ;;		_SPI_Init
 21012 ;; This function uses a non-reentrant model
 21013 ;;
 21014                           
 21015                           	psect	text98
 21016  0132A0                     __ptext98:
 21017                           	opt stack 0
 21018  0132A0                     _Timer2_Init:
 21019                           	opt stack 18
 21020                           
 21021                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 21022                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 21023                           ;Timer2.c: 14: static UINT8 PRE = 0;
 21024                           ;Timer2.c: 15: static UINT32 DIV = 0;
 21025                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 21026                           
 21027                           ;incstack = 0
 21028  0132A0  0E00               	movlw	0
 21029  0132A2  0100               	movlb	0	; () banked
 21030  0132A4  6FD0               	movwf	Timer2_Init@pCPUClock& (0+255),b
 21031  0132A6  0E6C               	movlw	108
 21032  0132A8  6FD1               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 21033  0132AA  0EDC               	movlw	220
 21034  0132AC  6FD2               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 21035  0132AE  0E02               	movlw	2
 21036  0132B0  6FD3               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 21037                           
 21038                           ; BSR set to: 0
 21039                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 21040                           ;Timer2.c: 20: pFrequency *= 2;
 21041  0132B2  0100               	movlb	0	; () banked
 21042  0132B4  90D8               	bcf	status,0,c
 21043  0132B6  37C7               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 21044  0132B8  37C8               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 21045  0132BA  37C9               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 21046  0132BC  37CA               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 21047                           
 21048                           ; BSR set to: 0
 21049                           ;Timer2.c: 23: pCPUClock /= 4;
 21050  0132BE  0E02               	movlw	2
 21051  0132C0  0100               	movlb	0	; () banked
 21052  0132C2  6FCB               	movwf	??_Timer2_Init& (0+255),b
 21053  0132C4                     u9445:
 21054  0132C4  90D8               	bcf	status,0,c
 21055  0132C6  0100               	movlb	0	; () banked
 21056  0132C8  33D3               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 21057  0132CA  33D2               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 21058  0132CC  33D1               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 21059  0132CE  33D0               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 21060  0132D0  0100               	movlb	0	; () banked
 21061  0132D2  2FCB               	decfsz	??_Timer2_Init& (0+255),f,b
 21062  0132D4  D7F7               	goto	u9445
 21063                           
 21064                           ; BSR set to: 0
 21065                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 21066  0132D6  C0D0  F0BA         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 21067  0132DA  C0D1  F0BB         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 21068  0132DE  C0D2  F0BC         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 21069  0132E2  C0D3  F0BD         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 21070  0132E6  C0C7  F0BE         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 21071  0132EA  C0C8  F0BF         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 21072  0132EE  C0C9  F0C0         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 21073  0132F2  C0CA  F0C1         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 21074  0132F6  EC11  F0A1         	call	___lldiv	;wreg free
 21075  0132FA  C0BA  F0D4         	movff	?___lldiv,Timer2_Init@DIVIDE
 21076  0132FE  C0BB  F0D5         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 21077  013302  C0BC  F0D6         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 21078  013306  C0BD  F0D7         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 21079                           
 21080                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 21081  01330A  D010               	goto	l1828
 21082  01330C                     l12823:
 21083                           
 21084                           ;Timer2.c: 28: {
 21085                           ;Timer2.c: 29: RDIV = 0;
 21086  01330C  0E00               	movlw	0
 21087  01330E  0100               	movlb	0	; () banked
 21088  013310  6FCC               	movwf	Timer2_Init@RDIV& (0+255),b
 21089  013312  0E00               	movlw	0
 21090  013314  6FCD               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 21091  013316  0E00               	movlw	0
 21092  013318  6FCE               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 21093  01331A  0E00               	movlw	0
 21094  01331C  6FCF               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 21095                           
 21096                           ; BSR set to: 0
 21097                           ;Timer2.c: 30: INDEX ++;
 21098  01331E  0100               	movlb	0	; () banked
 21099  013320  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 21100                           
 21101                           ; BSR set to: 0
 21102                           ;Timer2.c: 31: if (INDEX >= 3)
 21103  013322  0E02               	movlw	2
 21104  013324  0100               	movlb	0	; () banked
 21105  013326  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 21106  013328  D001               	goto	l1828
 21107  01332A  D026               	goto	u9460
 21108  01332C                     l1828:
 21109                           
 21110                           ; BSR set to: 0
 21111                           
 21112                           ; BSR set to: 0
 21113  01332C  C0D4  F0BA         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 21114  013330  C0D5  F0BB         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 21115  013334  C0D6  F0BC         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 21116  013338  C0D7  F0BD         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 21117  01333C  0100               	movlb	0	; () banked
 21118  01333E  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21119  013340  0D01               	mullw	1
 21120  013342  0E1C               	movlw	low Timer2_Init@PRESCALE
 21121  013344  24F3               	addwf	prodl,w,c
 21122  013346  6EF6               	movwf	tblptrl,c
 21123  013348  0EFD               	movlw	high Timer2_Init@PRESCALE
 21124  01334A  20F4               	addwfc	prodh,w,c
 21125  01334C  6EF7               	movwf	tblptrh,c
 21126  01334E                     	if	1	;There are 3 active tblptr bytes
 21127  01334E  6AF8               	clrf	tblptru,c
 21128  013350  0E00               	movlw	low (__mediumconst shr (0+16))
 21129  013352  22F8               	addwfc	tblptru,f,c
 21130  013354                     	endif
 21131  013354  0008               	tblrd		*
 21132  013356  50F5               	movf	tablat,w,c
 21133  013358  0100               	movlb	0	; () banked
 21134  01335A  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21135  01335C  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21136  01335E  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21137  013360  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21138  013362  EC11  F0A1         	call	___lldiv	;wreg free
 21139  013366  0100               	movlb	0	; () banked
 21140  013368  51BD               	movf	(?___lldiv+3)& (0+255),w,b
 21141  01336A  0100               	movlb	0	; () banked
 21142  01336C  11BC               	iorwf	(?___lldiv+2)& (0+255),w,b
 21143  01336E  E1CE               	bnz	l12823
 21144  013370  0100               	movlb	0	; () banked
 21145  013372  05BB               	decf	(?___lldiv+1)& (0+255),w,b
 21146  013374  B0D8               	btfsc	status,0,c
 21147  013376  D7CA               	goto	l1827
 21148  013378                     u9460:
 21149                           
 21150                           ; BSR set to: 0
 21151                           ;Timer2.c: 33: }
 21152                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 21153                           
 21154                           ; BSR set to: 0
 21155  013378  50CA               	movf	4042,w,c	;volatile
 21156  01337A  0100               	movlb	0	; () banked
 21157  01337C  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21158  01337E  0BFC               	andlw	-4
 21159  013380  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 21160  013382  6ECA               	movwf	4042,c	;volatile
 21161                           
 21162                           ; BSR set to: 0
 21163                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 21164  013384  84CA               	bsf	4042,2,c	;volatile
 21165                           
 21166                           ; BSR set to: 0
 21167                           ;Timer2.c: 44: Timer2_Clear();
 21168  013386  EC71  F0B3         	call	_Timer2_Clear	;wreg free
 21169                           
 21170                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 21171  01338A  0100               	movlb	0	; () banked
 21172  01338C  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 21173  01338E  0D01               	mullw	1
 21174  013390  0E1C               	movlw	low Timer2_Init@PRESCALE
 21175  013392  24F3               	addwf	prodl,w,c
 21176  013394  6EF6               	movwf	tblptrl,c
 21177  013396  0EFD               	movlw	high Timer2_Init@PRESCALE
 21178  013398  20F4               	addwfc	prodh,w,c
 21179  01339A  6EF7               	movwf	tblptrh,c
 21180  01339C                     	if	1	;There are 3 active tblptr bytes
 21181  01339C  6AF8               	clrf	tblptru,c
 21182  01339E  0E00               	movlw	low (__mediumconst shr (0+16))
 21183  0133A0  22F8               	addwfc	tblptru,f,c
 21184  0133A2                     	endif
 21185  0133A2  0008               	tblrd		*
 21186  0133A4  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 21187                           
 21188                           ; BSR set to: 0
 21189                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 21190  0133A8  0EFF               	movlw	255
 21191  0133AA  0100               	movlb	0	; () banked
 21192  0133AC  25D4               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 21193  0133AE  0103               	movlb	3	; () banked
 21194  0133B0  6F26               	movwf	Timer2_Init@DIV& (0+255),b
 21195  0133B2  0EFF               	movlw	255
 21196  0133B4  0100               	movlb	0	; () banked
 21197  0133B6  21D5               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 21198  0133B8  0103               	movlb	3	; () banked
 21199  0133BA  6F27               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 21200  0133BC  0EFF               	movlw	255
 21201  0133BE  0100               	movlb	0	; () banked
 21202  0133C0  21D6               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 21203  0133C2  0103               	movlb	3	; () banked
 21204  0133C4  6F28               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 21205  0133C6  0EFF               	movlw	255
 21206  0133C8  0100               	movlb	0	; () banked
 21207  0133CA  21D7               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 21208  0133CC  0103               	movlb	3	; () banked
 21209  0133CE  6F29               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 21210                           
 21211                           ; BSR set to: 3
 21212                           ;Timer2.c: 48: INDEX = DIV/PRE;
 21213  0133D0  C326  F0BA         	movff	Timer2_Init@DIV,___lldiv@dividend
 21214  0133D4  C327  F0BB         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 21215  0133D8  C328  F0BC         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 21216  0133DC  C329  F0BD         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 21217  0133E0  0100               	movlb	0	; () banked
 21218  0133E2  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 21219  0133E4  0100               	movlb	0	; () banked
 21220  0133E6  6FBE               	movwf	___lldiv@divisor& (0+255),b
 21221  0133E8  6BBF               	clrf	(___lldiv@divisor+1)& (0+255),b
 21222  0133EA  6BC0               	clrf	(___lldiv@divisor+2)& (0+255),b
 21223  0133EC  6BC1               	clrf	(___lldiv@divisor+3)& (0+255),b
 21224  0133EE  EC11  F0A1         	call	___lldiv	;wreg free
 21225  0133F2  0100               	movlb	0	; () banked
 21226  0133F4  51BA               	movf	?___lldiv& (0+255),w,b
 21227  0133F6  0100               	movlb	0	; () banked
 21228  0133F8  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 21229                           
 21230                           ; BSR set to: 0
 21231                           ;Timer2.c: 49: PR2 = INDEX;
 21232  0133FA  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 21233                           
 21234                           ; BSR set to: 0
 21235  0133FE  0012               	return		;funcret
 21236  013400                     __end_of_Timer2_Init:
 21237                           	opt stack 0
 21238                           tosu	equ	0xFFF
 21239                           tosh	equ	0xFFE
 21240                           tosl	equ	0xFFD
 21241                           pclath	equ	0xFFA
 21242                           tblptru	equ	0xFF8
 21243                           tblptrh	equ	0xFF7
 21244                           tblptrl	equ	0xFF6
 21245                           tablat	equ	0xFF5
 21246                           prodh	equ	0xFF4
 21247                           prodl	equ	0xFF3
 21248                           intcon	equ	0xFF2
 21249                           postinc0	equ	0xFEE
 21250                           wreg	equ	0xFE8
 21251                           indf1	equ	0xFE7
 21252                           postdec1	equ	0xFE5
 21253                           fsr1h	equ	0xFE2
 21254                           fsr1l	equ	0xFE1
 21255                           indf2	equ	0xFDF
 21256                           postinc2	equ	0xFDE
 21257                           postdec2	equ	0xFDD
 21258                           plusw2	equ	0xFDB
 21259                           fsr2h	equ	0xFDA
 21260                           fsr2l	equ	0xFD9
 21261                           status	equ	0xFD8
 21262                           
 21263 ;; *************** function ___lldiv *****************
 21264 ;; Defined at:
 21265 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 21266 ;; Parameters:    Size  Location     Type
 21267 ;;  dividend        4    0[BANK0 ] unsigned long 
 21268 ;;  divisor         4    4[BANK0 ] unsigned long 
 21269 ;; Auto vars:     Size  Location     Type
 21270 ;;  quotient        4    8[BANK0 ] unsigned long 
 21271 ;;  counter         1   12[BANK0 ] unsigned char 
 21272 ;; Return value:  Size  Location     Type
 21273 ;;                  4    0[BANK0 ] unsigned long 
 21274 ;; Registers used:
 21275 ;;		wreg, status,2, status,0
 21276 ;; Tracked objects:
 21277 ;;		On entry : 0/0
 21278 ;;		On exit  : 0/0
 21279 ;;		Unchanged: 0/0
 21280 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21281 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21282 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21283 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21284 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21285 ;;Total ram usage:       13 bytes
 21286 ;; Hardware stack levels used:    1
 21287 ;; Hardware stack levels required when called:    7
 21288 ;; This function calls:
 21289 ;;		Nothing
 21290 ;; This function is called by:
 21291 ;;		_Timer0_Init
 21292 ;;		_Timer2_Init
 21293 ;;		_rand_between
 21294 ;;		_I2C_Init
 21295 ;; This function uses a non-reentrant model
 21296 ;;
 21297                           
 21298                           	psect	text99
 21299  014222                     __ptext99:
 21300                           	opt stack 0
 21301  014222                     ___lldiv:
 21302                           	opt stack 19
 21303                           
 21304                           ; BSR set to: 0
 21305                           ;incstack = 0
 21306  014222  0E00               	movlw	0
 21307  014224  0100               	movlb	0	; () banked
 21308  014226  6FC2               	movwf	___lldiv@quotient& (0+255),b
 21309  014228  0E00               	movlw	0
 21310  01422A  6FC3               	movwf	(___lldiv@quotient+1)& (0+255),b
 21311  01422C  0E00               	movlw	0
 21312  01422E  6FC4               	movwf	(___lldiv@quotient+2)& (0+255),b
 21313  014230  0E00               	movlw	0
 21314  014232  6FC5               	movwf	(___lldiv@quotient+3)& (0+255),b
 21315                           
 21316                           ; BSR set to: 0
 21317  014234  0100               	movlb	0	; () banked
 21318  014236  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21319  014238  0100               	movlb	0	; () banked
 21320  01423A  11BF               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 21321  01423C  0100               	movlb	0	; () banked
 21322  01423E  11C0               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 21323  014240  0100               	movlb	0	; () banked
 21324  014242  11C1               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 21325  014244  B4D8               	btfsc	status,2,c
 21326  014246  D042               	goto	l2801
 21327                           
 21328                           ; BSR set to: 0
 21329  014248  0E01               	movlw	1
 21330  01424A  0100               	movlb	0	; () banked
 21331  01424C  6FC6               	movwf	___lldiv@counter& (0+255),b
 21332  01424E  D008               	goto	l2796
 21333  014250                     
 21334                           ; BSR set to: 0
 21335                           
 21336                           ; BSR set to: 0
 21337  014250  0100               	movlb	0	; () banked
 21338  014252  90D8               	bcf	status,0,c
 21339  014254  37BE               	rlcf	___lldiv@divisor& (0+255),f,b
 21340  014256  37BF               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 21341  014258  37C0               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 21342  01425A  37C1               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 21343  01425C  0100               	movlb	0	; () banked
 21344  01425E  2BC6               	incf	___lldiv@counter& (0+255),f,b
 21345  014260                     l2796:
 21346                           
 21347                           ; BSR set to: 0
 21348                           
 21349                           ; BSR set to: 0
 21350  014260  0100               	movlb	0	; () banked
 21351  014262  AFC1               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 21352  014264  D7F5               	goto	l2797
 21353  014266                     u9320:
 21354                           
 21355                           ; BSR set to: 0
 21356                           
 21357                           ; BSR set to: 0
 21358                           
 21359                           ; BSR set to: 0
 21360  014266  0100               	movlb	0	; () banked
 21361  014268  90D8               	bcf	status,0,c
 21362  01426A  37C2               	rlcf	___lldiv@quotient& (0+255),f,b
 21363  01426C  37C3               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 21364  01426E  37C4               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 21365  014270  37C5               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 21366                           
 21367                           ; BSR set to: 0
 21368  014272  0100               	movlb	0	; () banked
 21369  014274  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21370  014276  0100               	movlb	0	; () banked
 21371  014278  5DBA               	subwf	___lldiv@dividend& (0+255),w,b
 21372  01427A  0100               	movlb	0	; () banked
 21373  01427C  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21374  01427E  0100               	movlb	0	; () banked
 21375  014280  59BB               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 21376  014282  0100               	movlb	0	; () banked
 21377  014284  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21378  014286  0100               	movlb	0	; () banked
 21379  014288  59BC               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 21380  01428A  0100               	movlb	0	; () banked
 21381  01428C  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21382  01428E  0100               	movlb	0	; () banked
 21383  014290  59BD               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 21384  014292  A0D8               	btfss	status,0,c
 21385  014294  D012               	goto	l2800
 21386                           
 21387                           ; BSR set to: 0
 21388  014296  0100               	movlb	0	; () banked
 21389  014298  51BE               	movf	___lldiv@divisor& (0+255),w,b
 21390  01429A  0100               	movlb	0	; () banked
 21391  01429C  5FBA               	subwf	___lldiv@dividend& (0+255),f,b
 21392  01429E  0100               	movlb	0	; () banked
 21393  0142A0  51BF               	movf	(___lldiv@divisor+1)& (0+255),w,b
 21394  0142A2  0100               	movlb	0	; () banked
 21395  0142A4  5BBB               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 21396  0142A6  0100               	movlb	0	; () banked
 21397  0142A8  51C0               	movf	(___lldiv@divisor+2)& (0+255),w,b
 21398  0142AA  0100               	movlb	0	; () banked
 21399  0142AC  5BBC               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 21400  0142AE  0100               	movlb	0	; () banked
 21401  0142B0  51C1               	movf	(___lldiv@divisor+3)& (0+255),w,b
 21402  0142B2  0100               	movlb	0	; () banked
 21403  0142B4  5BBD               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 21404                           
 21405                           ; BSR set to: 0
 21406  0142B6  0100               	movlb	0	; () banked
 21407  0142B8  81C2               	bsf	___lldiv@quotient& (0+255),0,b
 21408  0142BA                     l2800:
 21409                           
 21410                           ; BSR set to: 0
 21411                           
 21412                           ; BSR set to: 0
 21413  0142BA  0100               	movlb	0	; () banked
 21414  0142BC  90D8               	bcf	status,0,c
 21415  0142BE  33C1               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 21416  0142C0  33C0               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 21417  0142C2  33BF               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 21418  0142C4  33BE               	rrcf	___lldiv@divisor& (0+255),f,b
 21419                           
 21420                           ; BSR set to: 0
 21421  0142C6  0100               	movlb	0	; () banked
 21422  0142C8  2FC6               	decfsz	___lldiv@counter& (0+255),f,b
 21423  0142CA  D7CD               	goto	u9320
 21424  0142CC                     l2801:
 21425                           
 21426                           ; BSR set to: 0
 21427                           
 21428                           ; BSR set to: 0
 21429  0142CC  C0C2  F0BA         	movff	___lldiv@quotient,?___lldiv
 21430  0142D0  C0C3  F0BB         	movff	___lldiv@quotient+1,?___lldiv+1
 21431  0142D4  C0C4  F0BC         	movff	___lldiv@quotient+2,?___lldiv+2
 21432  0142D8  C0C5  F0BD         	movff	___lldiv@quotient+3,?___lldiv+3
 21433                           
 21434                           ; BSR set to: 0
 21435  0142DC  0012               	return		;funcret
 21436  0142DE                     __end_of___lldiv:
 21437                           	opt stack 0
 21438                           tosu	equ	0xFFF
 21439                           tosh	equ	0xFFE
 21440                           tosl	equ	0xFFD
 21441                           pclath	equ	0xFFA
 21442                           tblptru	equ	0xFF8
 21443                           tblptrh	equ	0xFF7
 21444                           tblptrl	equ	0xFF6
 21445                           tablat	equ	0xFF5
 21446                           prodh	equ	0xFF4
 21447                           prodl	equ	0xFF3
 21448                           intcon	equ	0xFF2
 21449                           postinc0	equ	0xFEE
 21450                           wreg	equ	0xFE8
 21451                           indf1	equ	0xFE7
 21452                           postdec1	equ	0xFE5
 21453                           fsr1h	equ	0xFE2
 21454                           fsr1l	equ	0xFE1
 21455                           indf2	equ	0xFDF
 21456                           postinc2	equ	0xFDE
 21457                           postdec2	equ	0xFDD
 21458                           plusw2	equ	0xFDB
 21459                           fsr2h	equ	0xFDA
 21460                           fsr2l	equ	0xFD9
 21461                           status	equ	0xFD8
 21462                           
 21463 ;; *************** function _Timer2_Clear *****************
 21464 ;; Defined at:
 21465 ;;		line 3 in file "Library/Timer2.c"
 21466 ;; Parameters:    Size  Location     Type
 21467 ;;		None
 21468 ;; Auto vars:     Size  Location     Type
 21469 ;;		None
 21470 ;; Return value:  Size  Location     Type
 21471 ;;                  1    wreg      void 
 21472 ;; Registers used:
 21473 ;;		None
 21474 ;; Tracked objects:
 21475 ;;		On entry : 0/0
 21476 ;;		On exit  : 0/0
 21477 ;;		Unchanged: 0/0
 21478 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21479 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21480 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21481 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21482 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21483 ;;Total ram usage:        0 bytes
 21484 ;; Hardware stack levels used:    1
 21485 ;; Hardware stack levels required when called:    7
 21486 ;; This function calls:
 21487 ;;		Nothing
 21488 ;; This function is called by:
 21489 ;;		_Timer2_Init
 21490 ;; This function uses a non-reentrant model
 21491 ;;
 21492                           
 21493                           	psect	text100
 21494  0166E2                     __ptext100:
 21495                           	opt stack 0
 21496  0166E2                     _Timer2_Clear:
 21497                           	opt stack 18
 21498                           
 21499                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 21500                           
 21501                           ; BSR set to: 0
 21502                           ;incstack = 0
 21503  0166E2  929E               	bcf	3998,1,c	;volatile
 21504                           
 21505                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 21506  0166E4  929D               	bcf	3997,1,c	;volatile
 21507                           
 21508                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 21509  0166E6  929F               	bcf	3999,1,c	;volatile
 21510  0166E8  0012               	return		;funcret
 21511  0166EA                     __end_of_Timer2_Clear:
 21512                           	opt stack 0
 21513                           tosu	equ	0xFFF
 21514                           tosh	equ	0xFFE
 21515                           tosl	equ	0xFFD
 21516                           pclath	equ	0xFFA
 21517                           tblptru	equ	0xFF8
 21518                           tblptrh	equ	0xFF7
 21519                           tblptrl	equ	0xFF6
 21520                           tablat	equ	0xFF5
 21521                           prodh	equ	0xFF4
 21522                           prodl	equ	0xFF3
 21523                           intcon	equ	0xFF2
 21524                           postinc0	equ	0xFEE
 21525                           wreg	equ	0xFE8
 21526                           indf1	equ	0xFE7
 21527                           postdec1	equ	0xFE5
 21528                           fsr1h	equ	0xFE2
 21529                           fsr1l	equ	0xFE1
 21530                           indf2	equ	0xFDF
 21531                           postinc2	equ	0xFDE
 21532                           postdec2	equ	0xFDD
 21533                           plusw2	equ	0xFDB
 21534                           fsr2h	equ	0xFDA
 21535                           fsr2l	equ	0xFD9
 21536                           status	equ	0xFD8
 21537                           
 21538 ;; *************** function _SPI_DisableISR *****************
 21539 ;; Defined at:
 21540 ;;		line 181 in file "Library/SPI.c"
 21541 ;; Parameters:    Size  Location     Type
 21542 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21543 ;;		 -> SPI1(11), SPI2(11), 
 21544 ;; Auto vars:     Size  Location     Type
 21545 ;;		None
 21546 ;; Return value:  Size  Location     Type
 21547 ;;                  1    wreg      void 
 21548 ;; Registers used:
 21549 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21550 ;; Tracked objects:
 21551 ;;		On entry : 0/0
 21552 ;;		On exit  : 0/0
 21553 ;;		Unchanged: 0/0
 21554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21555 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21556 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21557 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21558 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21559 ;;Total ram usage:        2 bytes
 21560 ;; Hardware stack levels used:    1
 21561 ;; Hardware stack levels required when called:    7
 21562 ;; This function calls:
 21563 ;;		Nothing
 21564 ;; This function is called by:
 21565 ;;		_SPI_Init
 21566 ;; This function uses a non-reentrant model
 21567 ;;
 21568                           
 21569                           	psect	text101
 21570  0162D2                     __ptext101:
 21571                           	opt stack 0
 21572  0162D2                     _SPI_DisableISR:
 21573                           	opt stack 19
 21574                           
 21575                           ;SPI.c: 183: switch (pInput->mChannel)
 21576                           
 21577                           ;incstack = 0
 21578  0162D2  D004               	goto	l654
 21579  0162D4                     l655:
 21580                           
 21581                           ; BSR set to: 0
 21582  0162D4  969D               	bcf	3997,3,c	;volatile
 21583  0162D6  0012               	return	
 21584  0162D8                     l657:
 21585                           
 21586                           ; BSR set to: 0
 21587  0162D8  9EA3               	bcf	4003,7,c	;volatile
 21588                           
 21589                           ; BSR set to: 0
 21590                           ;SPI.c: 188: };
 21591                           
 21592                           ; BSR set to: 0
 21593                           
 21594                           ;SPI.c: 187: default: return;
 21595  0162DA  0012               	return	
 21596  0162DC                     l654:
 21597                           
 21598                           ; BSR set to: 0
 21599  0162DC  0100               	movlb	0	; () banked
 21600  0162DE  EE20 F002          	lfsr	2,2
 21601  0162E2  51BA               	movf	SPI_DisableISR@pInput& (0+255),w,b
 21602  0162E4  26D9               	addwf	fsr2l,f,c
 21603  0162E6  51BB               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 21604  0162E8  22DA               	addwfc	fsr2h,f,c
 21605  0162EA  50DF               	movf	indf2,w,c
 21606                           
 21607                           ; Switch size 1, requested type "space"
 21608                           ; Number of cases is 2, Range of values is 0 to 1
 21609                           ; switch strategies available:
 21610                           ; Name         Instructions Cycles
 21611                           ; simple_byte            7     4 (average)
 21612                           ;	Chosen strategy is simple_byte
 21613  0162EC  0A00               	xorlw	0	; case 0
 21614  0162EE  B4D8               	btfsc	status,2,c
 21615  0162F0  D7F1               	goto	l655
 21616  0162F2  0A01               	xorlw	1	; case 1
 21617  0162F4  A4D8               	btfss	status,2,c
 21618  0162F6  0012               	return	
 21619  0162F8  D7EF               	goto	l657
 21620  0162FA                     __end_of_SPI_DisableISR:
 21621                           	opt stack 0
 21622                           tosu	equ	0xFFF
 21623                           tosh	equ	0xFFE
 21624                           tosl	equ	0xFFD
 21625                           pclath	equ	0xFFA
 21626                           tblptru	equ	0xFF8
 21627                           tblptrh	equ	0xFF7
 21628                           tblptrl	equ	0xFF6
 21629                           tablat	equ	0xFF5
 21630                           prodh	equ	0xFF4
 21631                           prodl	equ	0xFF3
 21632                           intcon	equ	0xFF2
 21633                           postinc0	equ	0xFEE
 21634                           wreg	equ	0xFE8
 21635                           indf1	equ	0xFE7
 21636                           postdec1	equ	0xFE5
 21637                           fsr1h	equ	0xFE2
 21638                           fsr1l	equ	0xFE1
 21639                           indf2	equ	0xFDF
 21640                           postinc2	equ	0xFDE
 21641                           postdec2	equ	0xFDD
 21642                           plusw2	equ	0xFDB
 21643                           fsr2h	equ	0xFDA
 21644                           fsr2l	equ	0xFD9
 21645                           status	equ	0xFD8
 21646                           
 21647 ;; *************** function _SPI_DCS *****************
 21648 ;; Defined at:
 21649 ;;		line 219 in file "Library/SPI.c"
 21650 ;; Parameters:    Size  Location     Type
 21651 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21652 ;;		 -> SPI1(11), SPI2(11), 
 21653 ;; Auto vars:     Size  Location     Type
 21654 ;;		None
 21655 ;; Return value:  Size  Location     Type
 21656 ;;                  1    wreg      void 
 21657 ;; Registers used:
 21658 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21659 ;; Tracked objects:
 21660 ;;		On entry : 0/0
 21661 ;;		On exit  : 0/0
 21662 ;;		Unchanged: 0/0
 21663 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21665 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21666 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21667 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21668 ;;Total ram usage:        2 bytes
 21669 ;; Hardware stack levels used:    1
 21670 ;; Hardware stack levels required when called:    7
 21671 ;; This function calls:
 21672 ;;		Nothing
 21673 ;; This function is called by:
 21674 ;;		_SPI_Init
 21675 ;; This function uses a non-reentrant model
 21676 ;;
 21677                           
 21678                           	psect	text102
 21679  016192                     __ptext102:
 21680                           	opt stack 0
 21681  016192                     _SPI_DCS:
 21682                           	opt stack 19
 21683                           
 21684                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 21685                           
 21686                           ; BSR set to: 0
 21687                           ;incstack = 0
 21688  016192  0100               	movlb	0	; () banked
 21689  016194  EE20 F002          	lfsr	2,2
 21690  016198  51BA               	movf	SPI_DCS@pInput& (0+255),w,b
 21691  01619A  26D9               	addwf	fsr2l,f,c
 21692  01619C  51BB               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 21693  01619E  22DA               	addwfc	fsr2h,f,c
 21694  0161A0  50DF               	movf	indf2,w,c
 21695  0161A2  A4D8               	btfss	status,2,c
 21696  0161A4  D007               	goto	l673
 21697                           
 21698                           ; BSR set to: 0
 21699                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 21700  0161A6  C0A9  FFD9         	movff	_PortC+4,fsr2l
 21701  0161AA  C0AA  FFDA         	movff	_PortC+5,fsr2h
 21702  0161AE  0100               	movlb	0	; () banked
 21703  0161B0  84DF               	bsf	indf2,2,c
 21704  0161B2  0012               	return	
 21705  0161B4                     l673:
 21706                           
 21707                           ; BSR set to: 0
 21708                           ;SPI.c: 223: else
 21709                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 21710                           
 21711                           ; BSR set to: 0
 21712  0161B4  C09F  FFD9         	movff	_PortD+4,fsr2l
 21713  0161B8  C0A0  FFDA         	movff	_PortD+5,fsr2h
 21714  0161BC  0100               	movlb	0	; () banked
 21715  0161BE  8EDF               	bsf	indf2,7,c
 21716  0161C0  0012               	return	
 21717  0161C2                     __end_of_SPI_DCS:
 21718                           	opt stack 0
 21719                           tosu	equ	0xFFF
 21720                           tosh	equ	0xFFE
 21721                           tosl	equ	0xFFD
 21722                           pclath	equ	0xFFA
 21723                           tblptru	equ	0xFF8
 21724                           tblptrh	equ	0xFF7
 21725                           tblptrl	equ	0xFF6
 21726                           tablat	equ	0xFF5
 21727                           prodh	equ	0xFF4
 21728                           prodl	equ	0xFF3
 21729                           intcon	equ	0xFF2
 21730                           postinc0	equ	0xFEE
 21731                           wreg	equ	0xFE8
 21732                           indf1	equ	0xFE7
 21733                           postdec1	equ	0xFE5
 21734                           fsr1h	equ	0xFE2
 21735                           fsr1l	equ	0xFE1
 21736                           indf2	equ	0xFDF
 21737                           postinc2	equ	0xFDE
 21738                           postdec2	equ	0xFDD
 21739                           plusw2	equ	0xFDB
 21740                           fsr2h	equ	0xFDA
 21741                           fsr2l	equ	0xFD9
 21742                           status	equ	0xFD8
 21743                           
 21744 ;; *************** function _Button_Init *****************
 21745 ;; Defined at:
 21746 ;;		line 18 in file "Library/Button.c"
 21747 ;; Parameters:    Size  Location     Type
 21748 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 21749 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 21750 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 21751 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 21752 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 21753 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 21754 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 21755 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 21756 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 21757 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 21758 ;; Auto vars:     Size  Location     Type
 21759 ;;		None
 21760 ;; Return value:  Size  Location     Type
 21761 ;;                  1    wreg      void 
 21762 ;; Registers used:
 21763 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21764 ;; Tracked objects:
 21765 ;;		On entry : 0/0
 21766 ;;		On exit  : 0/0
 21767 ;;		Unchanged: 0/0
 21768 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21769 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21770 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21771 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21772 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21773 ;;Total ram usage:       13 bytes
 21774 ;; Hardware stack levels used:    1
 21775 ;; Hardware stack levels required when called:   15
 21776 ;; This function calls:
 21777 ;;		_HMI_InitButtons
 21778 ;;		_MXK_InitDIPSwitch
 21779 ;;		_MXK_InitTestButton
 21780 ;; This function is called by:
 21781 ;;		_HMI_Init
 21782 ;;		_FunctInitButton
 21783 ;; This function uses a non-reentrant model
 21784 ;;
 21785                           
 21786                           	psect	text103
 21787  013D7A                     __ptext103:
 21788                           	opt stack 0
 21789  013D7A                     _Button_Init:
 21790                           	opt stack 13
 21791                           
 21792                           ;Button.c: 21: if(pInput==(void*)0)
 21793                           
 21794                           ; BSR set to: 0
 21795                           ;incstack = 0
 21796  013D7A  0101               	movlb	1	; () banked
 21797  013D7C  5100               	movf	Button_Init@pInput& (0+255),w,b
 21798  013D7E  0101               	movlb	1	; () banked
 21799  013D80  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 21800  013D82  B4D8               	btfsc	status,2,c
 21801  013D84  0012               	return	
 21802                           
 21803                           ; BSR set to: 1
 21804                           ;Button.c: 23: if(pInitIO==(void*)0)
 21805                           
 21806                           ; BSR set to: 1
 21807                           
 21808                           ; BSR set to: 1
 21809                           ;Button.c: 22: return;
 21810  013D86  0101               	movlb	1	; () banked
 21811  013D88  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21812  013D8A  0101               	movlb	1	; () banked
 21813  013D8C  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 21814  013D8E  0101               	movlb	1	; () banked
 21815  013D90  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 21816  013D92  B4D8               	btfsc	status,2,c
 21817  013D94  0012               	return	
 21818                           
 21819                           ; BSR set to: 1
 21820                           ;Button.c: 25: if(pGetState==(void*)0)
 21821                           
 21822                           ; BSR set to: 1
 21823                           
 21824                           ; BSR set to: 1
 21825                           ;Button.c: 24: return;
 21826  013D96  0101               	movlb	1	; () banked
 21827  013D98  5107               	movf	Button_Init@pGetState& (0+255),w,b
 21828  013D9A  0101               	movlb	1	; () banked
 21829  013D9C  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 21830  013D9E  0101               	movlb	1	; () banked
 21831  013DA0  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 21832  013DA2  B4D8               	btfsc	status,2,c
 21833  013DA4  0012               	return	
 21834                           
 21835                           ; BSR set to: 1
 21836                           ;Button.c: 27: if(pFunction==(void*)0)
 21837                           
 21838                           ; BSR set to: 1
 21839                           
 21840                           ; BSR set to: 1
 21841                           ;Button.c: 26: return;
 21842  013DA6  0101               	movlb	1	; () banked
 21843  013DA8  510A               	movf	Button_Init@pFunction& (0+255),w,b
 21844  013DAA  0101               	movlb	1	; () banked
 21845  013DAC  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 21846  013DAE  0101               	movlb	1	; () banked
 21847  013DB0  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 21848  013DB2  B4D8               	btfsc	status,2,c
 21849  013DB4  0012               	return	
 21850                           
 21851                           ; BSR set to: 1
 21852                           ;Button.c: 30: if(pThreshold == 0)
 21853                           
 21854                           ; BSR set to: 1
 21855                           
 21856                           ; BSR set to: 1
 21857                           ;Button.c: 28: return;
 21858  013DB6  0101               	movlb	1	; () banked
 21859  013DB8  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 21860  013DBA  0101               	movlb	1	; () banked
 21861  013DBC  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 21862  013DBE  A4D8               	btfss	status,2,c
 21863  013DC0  D005               	goto	l8
 21864                           
 21865                           ; BSR set to: 1
 21866                           ;Button.c: 31: pThreshold = 1;
 21867  013DC2  0E00               	movlw	0
 21868  013DC4  0101               	movlb	1	; () banked
 21869  013DC6  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 21870  013DC8  0E01               	movlw	1
 21871  013DCA  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 21872  013DCC                     l8:
 21873                           
 21874                           ; BSR set to: 1
 21875                           ;Button.c: 34: pInput->mState = 0;
 21876                           
 21877                           ; BSR set to: 1
 21878  013DCC  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 21879  013DD0  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 21880  013DD4  0E00               	movlw	0
 21881  013DD6  6EDF               	movwf	indf2,c
 21882                           
 21883                           ; BSR set to: 1
 21884                           ;Button.c: 35: pInput->mCount = 0;
 21885  013DD8  0101               	movlb	1	; () banked
 21886  013DDA  EE20 F001          	lfsr	2,1
 21887  013DDE  5100               	movf	Button_Init@pInput& (0+255),w,b
 21888  013DE0  26D9               	addwf	fsr2l,f,c
 21889  013DE2  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21890  013DE4  22DA               	addwfc	fsr2h,f,c
 21891  013DE6  0E00               	movlw	0
 21892  013DE8  6EDF               	movwf	indf2,c
 21893                           
 21894                           ; BSR set to: 1
 21895                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 21896  013DEA  0101               	movlb	1	; () banked
 21897  013DEC  EE20 F002          	lfsr	2,2
 21898  013DF0  5100               	movf	Button_Init@pInput& (0+255),w,b
 21899  013DF2  26D9               	addwf	fsr2l,f,c
 21900  013DF4  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21901  013DF6  22DA               	addwfc	fsr2h,f,c
 21902  013DF8  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 21903  013DFC  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 21904                           
 21905                           ; BSR set to: 1
 21906                           ;Button.c: 37: pInput->mFunction = pFunction;
 21907  013E00  0101               	movlb	1	; () banked
 21908  013E02  EE20 F004          	lfsr	2,4
 21909  013E06  5100               	movf	Button_Init@pInput& (0+255),w,b
 21910  013E08  26D9               	addwf	fsr2l,f,c
 21911  013E0A  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21912  013E0C  22DA               	addwfc	fsr2h,f,c
 21913  013E0E  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 21914  013E12  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 21915  013E16  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 21916                           
 21917                           ; BSR set to: 1
 21918                           ;Button.c: 38: pInput->mGetState = pGetState;
 21919  013E1A  0101               	movlb	1	; () banked
 21920  013E1C  EE20 F007          	lfsr	2,7
 21921  013E20  5100               	movf	Button_Init@pInput& (0+255),w,b
 21922  013E22  26D9               	addwf	fsr2l,f,c
 21923  013E24  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 21924  013E26  22DA               	addwfc	fsr2h,f,c
 21925  013E28  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 21926  013E2C  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 21927  013E30  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 21928                           
 21929                           ; BSR set to: 1
 21930                           ;Button.c: 41: pInitIO();
 21931  013E34  D801               	call	u10608
 21932  013E36  0012               	return	
 21933  013E38                     u10608:
 21934  013E38  0005               	push	
 21935  013E3A  6EFA               	movwf	pclath,c
 21936  013E3C  0101               	movlb	1	; () banked
 21937  013E3E  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 21938  013E40  6EFD               	movwf	tosl,c
 21939  013E42  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 21940  013E44  6EFE               	movwf	tosh,c
 21941  013E46  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 21942  013E48  6EFF               	movwf	tosu,c
 21943  013E4A  50FA               	movf	pclath,w,c
 21944  013E4C  0012               	return		;indir
 21945  013E4E                     __end_of_Button_Init:
 21946                           	opt stack 0
 21947                           tosu	equ	0xFFF
 21948                           tosh	equ	0xFFE
 21949                           tosl	equ	0xFFD
 21950                           pclath	equ	0xFFA
 21951                           tblptru	equ	0xFF8
 21952                           tblptrh	equ	0xFF7
 21953                           tblptrl	equ	0xFF6
 21954                           tablat	equ	0xFF5
 21955                           prodh	equ	0xFF4
 21956                           prodl	equ	0xFF3
 21957                           intcon	equ	0xFF2
 21958                           postinc0	equ	0xFEE
 21959                           wreg	equ	0xFE8
 21960                           indf1	equ	0xFE7
 21961                           postdec1	equ	0xFE5
 21962                           fsr1h	equ	0xFE2
 21963                           fsr1l	equ	0xFE1
 21964                           indf2	equ	0xFDF
 21965                           postinc2	equ	0xFDE
 21966                           postdec2	equ	0xFDD
 21967                           plusw2	equ	0xFDB
 21968                           fsr2h	equ	0xFDA
 21969                           fsr2l	equ	0xFD9
 21970                           status	equ	0xFD8
 21971                           
 21972 ;; *************** function _MXK_InitDIPSwitch *****************
 21973 ;; Defined at:
 21974 ;;		line 20 in file "Library/MXK.c"
 21975 ;; Parameters:    Size  Location     Type
 21976 ;;		None
 21977 ;; Auto vars:     Size  Location     Type
 21978 ;;		None
 21979 ;; Return value:  Size  Location     Type
 21980 ;;                  1    wreg      void 
 21981 ;; Registers used:
 21982 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21983 ;; Tracked objects:
 21984 ;;		On entry : 0/0
 21985 ;;		On exit  : 0/0
 21986 ;;		Unchanged: 0/0
 21987 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21988 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21989 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21990 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21991 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21992 ;;Total ram usage:        0 bytes
 21993 ;; Hardware stack levels used:    1
 21994 ;; Hardware stack levels required when called:   14
 21995 ;; This function calls:
 21996 ;;		_Port_SetQuadType
 21997 ;; This function is called by:
 21998 ;;		_FunctInitButton
 21999 ;;		_Button_Init
 22000 ;; This function uses a non-reentrant model
 22001 ;;
 22002                           
 22003                           	psect	text104
 22004  01643C                     __ptext104:
 22005                           	opt stack 0
 22006  01643C                     _MXK_InitDIPSwitch:
 22007                           	opt stack 13
 22008                           
 22009                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 22010                           
 22011                           ;incstack = 0
 22012  01643C  0E9B               	movlw	low _PortD
 22013  01643E  0100               	movlb	0	; () banked
 22014  016440  6FF0               	movwf	Port_SetQuadType@pInput& (0+255),b
 22015  016442  0E00               	movlw	high _PortD
 22016  016444  0100               	movlb	0	; () banked
 22017  016446  6FF1               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 22018  016448  0E00               	movlw	0
 22019  01644A  0100               	movlb	0	; () banked
 22020  01644C  6FF2               	movwf	Port_SetQuadType@pQuad& (0+255),b
 22021  01644E  0E00               	movlw	0
 22022  016450  0100               	movlb	0	; () banked
 22023  016452  6FF3               	movwf	Port_SetQuadType@pType& (0+255),b
 22024  016454  EC2C  F08D         	call	_Port_SetQuadType	;wreg free
 22025  016458  0012               	return		;funcret
 22026  01645A                     __end_of_MXK_InitDIPSwitch:
 22027                           	opt stack 0
 22028                           tosu	equ	0xFFF
 22029                           tosh	equ	0xFFE
 22030                           tosl	equ	0xFFD
 22031                           pclath	equ	0xFFA
 22032                           tblptru	equ	0xFF8
 22033                           tblptrh	equ	0xFF7
 22034                           tblptrl	equ	0xFF6
 22035                           tablat	equ	0xFF5
 22036                           prodh	equ	0xFF4
 22037                           prodl	equ	0xFF3
 22038                           intcon	equ	0xFF2
 22039                           postinc0	equ	0xFEE
 22040                           wreg	equ	0xFE8
 22041                           indf1	equ	0xFE7
 22042                           postdec1	equ	0xFE5
 22043                           fsr1h	equ	0xFE2
 22044                           fsr1l	equ	0xFE1
 22045                           indf2	equ	0xFDF
 22046                           postinc2	equ	0xFDE
 22047                           postdec2	equ	0xFDD
 22048                           plusw2	equ	0xFDB
 22049                           fsr2h	equ	0xFDA
 22050                           fsr2l	equ	0xFD9
 22051                           status	equ	0xFD8
 22052                           
 22053 ;; *************** function _HMI_InitButtons *****************
 22054 ;; Defined at:
 22055 ;;		line 21 in file "HMI.c"
 22056 ;; Parameters:    Size  Location     Type
 22057 ;;		None
 22058 ;; Auto vars:     Size  Location     Type
 22059 ;;		None
 22060 ;; Return value:  Size  Location     Type
 22061 ;;                  1    wreg      void 
 22062 ;; Registers used:
 22063 ;;		wreg, status,2
 22064 ;; Tracked objects:
 22065 ;;		On entry : 0/0
 22066 ;;		On exit  : 0/0
 22067 ;;		Unchanged: 0/0
 22068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22069 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22070 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22072 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22073 ;;Total ram usage:        0 bytes
 22074 ;; Hardware stack levels used:    1
 22075 ;; Hardware stack levels required when called:    7
 22076 ;; This function calls:
 22077 ;;		Nothing
 22078 ;; This function is called by:
 22079 ;;		_HMI_Init
 22080 ;;		_Button_Init
 22081 ;; This function uses a non-reentrant model
 22082 ;;
 22083                           
 22084                           	psect	text105
 22085  016700                     __ptext105:
 22086                           	opt stack 0
 22087  016700                     _HMI_InitButtons:
 22088                           	opt stack 20
 22089                           
 22090                           ;HMI.c: 23: TRISE = 0xFC;
 22091                           
 22092                           ;incstack = 0
 22093  016700  0EFC               	movlw	252
 22094  016702  6E96               	movwf	3990,c	;volatile
 22095  016704  0012               	return		;funcret
 22096  016706                     __end_of_HMI_InitButtons:
 22097                           	opt stack 0
 22098                           tosu	equ	0xFFF
 22099                           tosh	equ	0xFFE
 22100                           tosl	equ	0xFFD
 22101                           pclath	equ	0xFFA
 22102                           tblptru	equ	0xFF8
 22103                           tblptrh	equ	0xFF7
 22104                           tblptrl	equ	0xFF6
 22105                           tablat	equ	0xFF5
 22106                           prodh	equ	0xFF4
 22107                           prodl	equ	0xFF3
 22108                           intcon	equ	0xFF2
 22109                           postinc0	equ	0xFEE
 22110                           wreg	equ	0xFE8
 22111                           indf1	equ	0xFE7
 22112                           postdec1	equ	0xFE5
 22113                           fsr1h	equ	0xFE2
 22114                           fsr1l	equ	0xFE1
 22115                           indf2	equ	0xFDF
 22116                           postinc2	equ	0xFDE
 22117                           postdec2	equ	0xFDD
 22118                           plusw2	equ	0xFDB
 22119                           fsr2h	equ	0xFDA
 22120                           fsr2l	equ	0xFD9
 22121                           status	equ	0xFD8
 22122                           
 22123 ;; *************** function _MXK_InitTestButton *****************
 22124 ;; Defined at:
 22125 ;;		line 10 in file "Library/MXK.c"
 22126 ;; Parameters:    Size  Location     Type
 22127 ;;		None
 22128 ;; Auto vars:     Size  Location     Type
 22129 ;;		None
 22130 ;; Return value:  Size  Location     Type
 22131 ;;                  1    wreg      void 
 22132 ;; Registers used:
 22133 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22134 ;; Tracked objects:
 22135 ;;		On entry : 0/0
 22136 ;;		On exit  : 0/0
 22137 ;;		Unchanged: 0/0
 22138 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22139 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22140 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22141 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22142 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22143 ;;Total ram usage:        0 bytes
 22144 ;; Hardware stack levels used:    1
 22145 ;; Hardware stack levels required when called:   12
 22146 ;; This function calls:
 22147 ;;		_Port_SetPinType
 22148 ;; This function is called by:
 22149 ;;		_FunctInitButton
 22150 ;;		_Button_Init
 22151 ;; This function uses a non-reentrant model
 22152 ;;
 22153                           
 22154                           	psect	text106
 22155  01645A                     __ptext106:
 22156                           	opt stack 0
 22157  01645A                     _MXK_InitTestButton:
 22158                           	opt stack 15
 22159                           
 22160                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 22161                           
 22162                           ;incstack = 0
 22163  01645A  0EAE               	movlw	low _PortB
 22164  01645C  0100               	movlb	0	; () banked
 22165  01645E  6FE0               	movwf	Port_SetPinType@pInput& (0+255),b
 22166  016460  0E03               	movlw	high _PortB
 22167  016462  0100               	movlb	0	; () banked
 22168  016464  6FE1               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 22169  016466  0E04               	movlw	4
 22170  016468  0100               	movlb	0	; () banked
 22171  01646A  6FE2               	movwf	Port_SetPinType@pPin& (0+255),b
 22172  01646C  0E00               	movlw	0
 22173  01646E  0100               	movlb	0	; () banked
 22174  016470  6FE3               	movwf	Port_SetPinType@pType& (0+255),b
 22175  016472  EC39  F093         	call	_Port_SetPinType	;wreg free
 22176  016476  0012               	return		;funcret
 22177  016478                     __end_of_MXK_InitTestButton:
 22178                           	opt stack 0
 22179                           tosu	equ	0xFFF
 22180                           tosh	equ	0xFFE
 22181                           tosl	equ	0xFFD
 22182                           pclath	equ	0xFFA
 22183                           tblptru	equ	0xFF8
 22184                           tblptrh	equ	0xFF7
 22185                           tblptrl	equ	0xFF6
 22186                           tablat	equ	0xFF5
 22187                           prodh	equ	0xFF4
 22188                           prodl	equ	0xFF3
 22189                           intcon	equ	0xFF2
 22190                           postinc0	equ	0xFEE
 22191                           wreg	equ	0xFE8
 22192                           indf1	equ	0xFE7
 22193                           postdec1	equ	0xFE5
 22194                           fsr1h	equ	0xFE2
 22195                           fsr1l	equ	0xFE1
 22196                           indf2	equ	0xFDF
 22197                           postinc2	equ	0xFDE
 22198                           postdec2	equ	0xFDD
 22199                           plusw2	equ	0xFDB
 22200                           fsr2h	equ	0xFDA
 22201                           fsr2l	equ	0xFD9
 22202                           status	equ	0xFD8
 22203                           
 22204 ;; *************** function _Port_SetPinType *****************
 22205 ;; Defined at:
 22206 ;;		line 189 in file "Library/Port.c"
 22207 ;; Parameters:    Size  Location     Type
 22208 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 22209 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22210 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22211 ;;  pPin            1   40[BANK0 ] enum E6750
 22212 ;;  pType           1   41[BANK0 ] enum E6795
 22213 ;; Auto vars:     Size  Location     Type
 22214 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 22215 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 22216 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 22217 ;;  Output          1   42[BANK0 ] enum E6475
 22218 ;; Return value:  Size  Location     Type
 22219 ;;                  1    wreg      enum E6475
 22220 ;; Registers used:
 22221 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22222 ;; Tracked objects:
 22223 ;;		On entry : 0/0
 22224 ;;		On exit  : 0/0
 22225 ;;		Unchanged: 0/0
 22226 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22227 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22228 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22229 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22230 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22231 ;;Total ram usage:        7 bytes
 22232 ;; Hardware stack levels used:    1
 22233 ;; Hardware stack levels required when called:   11
 22234 ;; This function calls:
 22235 ;;		_Byte_SetBit
 22236 ;;		_PortProperty_Valid
 22237 ;;		_Word_SetPair
 22238 ;; This function is called by:
 22239 ;;		_Configure_GPIOs
 22240 ;;		_LED_Init
 22241 ;;		_Port_Init
 22242 ;;		_SPI_Init
 22243 ;;		_Motor_Init
 22244 ;;		_MXK_InitTestButton
 22245 ;;		_MXK_Init
 22246 ;;		_I2C_Init
 22247 ;; This function uses a non-reentrant model
 22248 ;;
 22249                           
 22250                           	psect	text107
 22251  012672                     __ptext107:
 22252                           	opt stack 0
 22253  012672                     _Port_SetPinType:
 22254                           	opt stack 17
 22255                           
 22256                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 22257                           
 22258                           ;incstack = 0
 22259  012672  C0E0  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 22260  012676  C0E1  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 22261  01267A  CFDE F0E5          	movff	postinc2,Port_SetPinType@Props
 22262  01267E  CFDD F0E6          	movff	postdec2,Port_SetPinType@Props+1
 22263                           
 22264                           ;Port.c: 192: ePinError Output = ePinErrorState;
 22265  012682  0E05               	movlw	5
 22266  012684  0100               	movlb	0	; () banked
 22267  012686  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22268                           
 22269                           ;Port.c: 193: switch (pType)
 22270  012688  D0B5               	goto	l412
 22271  01268A                     
 22272                           ; BSR set to: 0
 22273                           ;Port.c: 197: {
 22274                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22275                           
 22276                           ; BSR set to: 0
 22277  01268A  0100               	movlb	0	; () banked
 22278  01268C  EE20 F002          	lfsr	2,2
 22279  012690  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22280  012692  26D9               	addwf	fsr2l,f,c
 22281  012694  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22282  012696  22DA               	addwfc	fsr2h,f,c
 22283  012698  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22284  01269C  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22285  0126A0  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22286  0126A4  0E01               	movlw	1
 22287  0126A6  0100               	movlb	0	; () banked
 22288  0126A8  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22289  0126AA  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22290                           
 22291                           ;Port.c: 203: break;
 22292  0126AE  D0B0               	goto	l414
 22293  0126B0                     
 22294                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 22295  0126B0  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22296  0126B4  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22297  0126B8  0E01               	movlw	1
 22298  0126BA  0100               	movlb	0	; () banked
 22299  0126BC  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22300  0126BE  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22301  0126C2  EC81  F0A8         	call	_PortProperty_Valid	;wreg free
 22302  0126C6  0100               	movlb	0	; () banked
 22303  0126C8  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22304  0126CA  0100               	movlb	0	; () banked
 22305  0126CC  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22306  0126CE  A4D8               	btfss	status,2,c
 22307  0126D0  0012               	return	
 22308                           
 22309                           ; BSR set to: 0
 22310                           ;Port.c: 208: {
 22311                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22312  0126D2  0100               	movlb	0	; () banked
 22313  0126D4  EE20 F002          	lfsr	2,2
 22314  0126D8  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22315  0126DA  26D9               	addwf	fsr2l,f,c
 22316  0126DC  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22317  0126DE  22DA               	addwfc	fsr2h,f,c
 22318  0126E0  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22319  0126E4  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22320  0126E8  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22321  0126EC  0E00               	movlw	0
 22322  0126EE  0100               	movlb	0	; () banked
 22323  0126F0  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22324  0126F2  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22325                           
 22326                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22327  0126F6  0100               	movlb	0	; () banked
 22328  0126F8  EE20 F004          	lfsr	2,4
 22329  0126FC  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22330  0126FE  26D9               	addwf	fsr2l,f,c
 22331  012700  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22332  012702  22DA               	addwfc	fsr2h,f,c
 22333  012704  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22334  012708  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22335  01270C  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22336  012710  0E00               	movlw	0
 22337  012712  0100               	movlb	0	; () banked
 22338  012714  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22339  012716  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22340                           
 22341                           ;Port.c: 214: break;
 22342  01271A  D07A               	goto	l414
 22343  01271C                     
 22344                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 22345                           
 22346                           ;Port.c: 218: case eTypeOutputOpenSource:
 22347  01271C  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22348  012720  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22349  012724  0E02               	movlw	2
 22350  012726  0100               	movlb	0	; () banked
 22351  012728  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22352  01272A  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22353  01272E  EC81  F0A8         	call	_PortProperty_Valid	;wreg free
 22354  012732  0100               	movlb	0	; () banked
 22355  012734  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22356  012736  0100               	movlb	0	; () banked
 22357  012738  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22358  01273A  A4D8               	btfss	status,2,c
 22359  01273C  0012               	return	
 22360                           
 22361                           ; BSR set to: 0
 22362                           ;Port.c: 220: {
 22363                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 22364  01273E  0100               	movlb	0	; () banked
 22365  012740  EE20 F002          	lfsr	2,2
 22366  012744  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22367  012746  26D9               	addwf	fsr2l,f,c
 22368  012748  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22369  01274A  22DA               	addwfc	fsr2h,f,c
 22370  01274C  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22371  012750  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22372  012754  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22373  012758  0E01               	movlw	1
 22374  01275A  0100               	movlb	0	; () banked
 22375  01275C  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22376  01275E  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22377                           
 22378                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 22379  012762  0100               	movlb	0	; () banked
 22380  012764  EE20 F004          	lfsr	2,4
 22381  012768  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22382  01276A  26D9               	addwf	fsr2l,f,c
 22383  01276C  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22384  01276E  22DA               	addwfc	fsr2h,f,c
 22385  012770  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22386  012774  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22387  012778  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22388  01277C  0E01               	movlw	1
 22389  01277E  0100               	movlb	0	; () banked
 22390  012780  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22391  012782  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22392                           
 22393                           ;Port.c: 226: break;
 22394  012786  D044               	goto	l414
 22395  012788                     
 22396                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 22397                           
 22398                           ;Port.c: 230: case eTypeOutputPushPull:
 22399  012788  C0E5  F0C9         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 22400  01278C  C0E6  F0CA         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 22401  012790  0E00               	movlw	0
 22402  012792  0100               	movlb	0	; () banked
 22403  012794  6FCB               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 22404  012796  C0E2  F0CC         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 22405  01279A  EC81  F0A8         	call	_PortProperty_Valid	;wreg free
 22406  01279E  0100               	movlb	0	; () banked
 22407  0127A0  6FE4               	movwf	Port_SetPinType@Output& (0+255),b
 22408  0127A2  0100               	movlb	0	; () banked
 22409  0127A4  51E4               	movf	Port_SetPinType@Output& (0+255),w,b
 22410  0127A6  A4D8               	btfss	status,2,c
 22411  0127A8  0012               	return	
 22412                           
 22413                           ; BSR set to: 0
 22414                           ;Port.c: 232: {
 22415                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 22416  0127AA  0100               	movlb	0	; () banked
 22417  0127AC  EE20 F002          	lfsr	2,2
 22418  0127B0  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22419  0127B2  26D9               	addwf	fsr2l,f,c
 22420  0127B4  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22421  0127B6  22DA               	addwfc	fsr2h,f,c
 22422  0127B8  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22423  0127BC  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22424  0127C0  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22425  0127C4  0E00               	movlw	0
 22426  0127C6  0100               	movlb	0	; () banked
 22427  0127C8  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22428  0127CA  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22429                           
 22430                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 22431  0127CE  0100               	movlb	0	; () banked
 22432  0127D0  EE20 F004          	lfsr	2,4
 22433  0127D4  51E0               	movf	Port_SetPinType@pInput& (0+255),w,b
 22434  0127D6  26D9               	addwf	fsr2l,f,c
 22435  0127D8  51E1               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 22436  0127DA  22DA               	addwfc	fsr2h,f,c
 22437  0127DC  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 22438  0127E0  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 22439  0127E4  C0E2  F0BC         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 22440  0127E8  0E00               	movlw	0
 22441  0127EA  0100               	movlb	0	; () banked
 22442  0127EC  6FBD               	movwf	Byte_SetBit@pValue& (0+255),b
 22443  0127EE  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 22444                           
 22445                           ;Port.c: 239: }
 22446                           
 22447                           ;Port.c: 238: break;
 22448  0127F2  D00E               	goto	l414
 22449  0127F4                     l412:
 22450  0127F4  0100               	movlb	0	; () banked
 22451  0127F6  51E3               	movf	Port_SetPinType@pType& (0+255),w,b
 22452                           
 22453                           ; Switch size 1, requested type "space"
 22454                           ; Number of cases is 4, Range of values is 0 to 3
 22455                           ; switch strategies available:
 22456                           ; Name         Instructions Cycles
 22457                           ; simple_byte           13     7 (average)
 22458                           ;	Chosen strategy is simple_byte
 22459  0127F8  0A00               	xorlw	0	; case 0
 22460  0127FA  B4D8               	btfsc	status,2,c
 22461  0127FC  D746               	goto	l413
 22462  0127FE  0A01               	xorlw	1	; case 1
 22463  012800  B4D8               	btfsc	status,2,c
 22464  012802  D756               	goto	l415
 22465  012804  0A03               	xorlw	3	; case 2
 22466  012806  B4D8               	btfsc	status,2,c
 22467  012808  D789               	goto	l417
 22468  01280A  0A01               	xorlw	1	; case 3
 22469  01280C  B4D8               	btfsc	status,2,c
 22470  01280E  D7BC               	goto	l421
 22471  012810                     l414:
 22472                           
 22473                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 22474                           
 22475                           ; BSR set to: 0
 22476  012810  0E08               	movlw	8
 22477  012812  0100               	movlb	0	; () banked
 22478  012814  25E0               	addwf	Port_SetPinType@pInput& (0+255),w,b
 22479  012816  0100               	movlb	0	; () banked
 22480  012818  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22481  01281A  0E00               	movlw	0
 22482  01281C  0100               	movlb	0	; () banked
 22483  01281E  21E1               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 22484  012820  0100               	movlb	0	; () banked
 22485  012822  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22486  012824  C0E2  F0CB         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 22487  012828  C0E3  F0CC         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 22488  01282C  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 22489  012830  0012               	return	
 22490  012832                     __end_of_Port_SetPinType:
 22491                           	opt stack 0
 22492                           tosu	equ	0xFFF
 22493                           tosh	equ	0xFFE
 22494                           tosl	equ	0xFFD
 22495                           pclath	equ	0xFFA
 22496                           tblptru	equ	0xFF8
 22497                           tblptrh	equ	0xFF7
 22498                           tblptrl	equ	0xFF6
 22499                           tablat	equ	0xFF5
 22500                           prodh	equ	0xFF4
 22501                           prodl	equ	0xFF3
 22502                           intcon	equ	0xFF2
 22503                           postinc0	equ	0xFEE
 22504                           wreg	equ	0xFE8
 22505                           indf1	equ	0xFE7
 22506                           postdec1	equ	0xFE5
 22507                           fsr1h	equ	0xFE2
 22508                           fsr1l	equ	0xFE1
 22509                           indf2	equ	0xFDF
 22510                           postinc2	equ	0xFDE
 22511                           postdec2	equ	0xFDD
 22512                           plusw2	equ	0xFDB
 22513                           fsr2h	equ	0xFDA
 22514                           fsr2l	equ	0xFD9
 22515                           status	equ	0xFD8
 22516                           
 22517 ;; *************** function _Port_SetQuadType *****************
 22518 ;; Defined at:
 22519 ;;		line 399 in file "Library/Port.c"
 22520 ;; Parameters:    Size  Location     Type
 22521 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 22522 ;;		 -> PortB(10), PortD(10), 
 22523 ;;  pQuad           1   56[BANK0 ] enum E6776
 22524 ;;  pType           1   57[BANK0 ] enum E6795
 22525 ;; Auto vars:     Size  Location     Type
 22526 ;;  Output          1   58[BANK0 ] enum E6475
 22527 ;; Return value:  Size  Location     Type
 22528 ;;                  1    wreg      enum E6475
 22529 ;; Registers used:
 22530 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22531 ;; Tracked objects:
 22532 ;;		On entry : 0/0
 22533 ;;		On exit  : 0/0
 22534 ;;		Unchanged: 0/0
 22535 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22536 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22537 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22538 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22539 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22540 ;;Total ram usage:        5 bytes
 22541 ;; Hardware stack levels used:    1
 22542 ;; Hardware stack levels required when called:   13
 22543 ;; This function calls:
 22544 ;;		_Byte_SetQuad
 22545 ;;		_Port_CheckQuadType
 22546 ;;		_Word_SetPair
 22547 ;; This function is called by:
 22548 ;;		_MXK_InitDIPSwitch
 22549 ;;		_MXK_Init
 22550 ;; This function uses a non-reentrant model
 22551 ;;
 22552                           
 22553                           	psect	text108
 22554  011A58                     __ptext108:
 22555                           	opt stack 0
 22556  011A58                     _Port_SetQuadType:
 22557                           	opt stack 15
 22558                           
 22559                           ;Port.c: 401: ePinError Output = ePinErrorState;
 22560                           
 22561                           ;incstack = 0
 22562  011A58  0E05               	movlw	5
 22563  011A5A  0100               	movlb	0	; () banked
 22564  011A5C  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22565                           
 22566                           ;Port.c: 403: switch (pType)
 22567  011A5E  D0C7               	goto	l476
 22568  011A60                     
 22569                           ; BSR set to: 0
 22570                           ;Port.c: 407: {
 22571                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22572                           
 22573                           ; BSR set to: 0
 22574  011A60  0100               	movlb	0	; () banked
 22575  011A62  EE20 F002          	lfsr	2,2
 22576  011A66  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22577  011A68  26D9               	addwf	fsr2l,f,c
 22578  011A6A  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22579  011A6C  22DA               	addwfc	fsr2h,f,c
 22580  011A6E  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22581  011A72  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22582  011A76  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22583  011A7A  0E0F               	movlw	15
 22584  011A7C  0100               	movlb	0	; () banked
 22585  011A7E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22586  011A80  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22587                           
 22588                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22589  011A84  0100               	movlb	0	; () banked
 22590  011A86  EE20 F004          	lfsr	2,4
 22591  011A8A  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22592  011A8C  26D9               	addwf	fsr2l,f,c
 22593  011A8E  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22594  011A90  22DA               	addwfc	fsr2h,f,c
 22595  011A92  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22596  011A96  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22597  011A9A  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22598  011A9E  0E00               	movlw	0
 22599  011AA0  0100               	movlb	0	; () banked
 22600  011AA2  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22601  011AA4  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22602                           
 22603                           ;Port.c: 413: }
 22604                           ;Port.c: 415: break;
 22605  011AA8  D0B0               	goto	l478
 22606  011AAA                     
 22607                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22608  011AAA  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22609  011AAE  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22610  011AB2  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22611  011AB6  0E03               	movlw	3
 22612  011AB8  0100               	movlb	0	; () banked
 22613  011ABA  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22614  011ABC  ECC6  F0AC         	call	_Port_CheckQuadType	;wreg free
 22615  011AC0  0100               	movlb	0	; () banked
 22616  011AC2  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22617  011AC4  0100               	movlb	0	; () banked
 22618  011AC6  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22619  011AC8  A4D8               	btfss	status,2,c
 22620  011ACA  0012               	return	
 22621                           
 22622                           ; BSR set to: 0
 22623                           ;Port.c: 418: {
 22624                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22625  011ACC  0100               	movlb	0	; () banked
 22626  011ACE  EE20 F002          	lfsr	2,2
 22627  011AD2  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22628  011AD4  26D9               	addwf	fsr2l,f,c
 22629  011AD6  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22630  011AD8  22DA               	addwfc	fsr2h,f,c
 22631  011ADA  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22632  011ADE  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22633  011AE2  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22634  011AE6  0E00               	movlw	0
 22635  011AE8  0100               	movlb	0	; () banked
 22636  011AEA  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22637  011AEC  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22638                           
 22639                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22640  011AF0  0100               	movlb	0	; () banked
 22641  011AF2  EE20 F004          	lfsr	2,4
 22642  011AF6  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22643  011AF8  26D9               	addwf	fsr2l,f,c
 22644  011AFA  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22645  011AFC  22DA               	addwfc	fsr2h,f,c
 22646  011AFE  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22647  011B02  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22648  011B06  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22649  011B0A  0E00               	movlw	0
 22650  011B0C  0100               	movlb	0	; () banked
 22651  011B0E  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22652  011B10  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22653                           
 22654                           ;Port.c: 424: }
 22655  011B14  D07A               	goto	l478
 22656  011B16                     
 22657                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22658  011B16  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22659  011B1A  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22660  011B1E  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22661  011B22  0E03               	movlw	3
 22662  011B24  0100               	movlb	0	; () banked
 22663  011B26  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22664  011B28  ECC6  F0AC         	call	_Port_CheckQuadType	;wreg free
 22665  011B2C  0100               	movlb	0	; () banked
 22666  011B2E  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22667  011B30  0100               	movlb	0	; () banked
 22668  011B32  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22669  011B34  A4D8               	btfss	status,2,c
 22670  011B36  0012               	return	
 22671                           
 22672                           ; BSR set to: 0
 22673                           ;Port.c: 429: {
 22674                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 22675  011B38  0100               	movlb	0	; () banked
 22676  011B3A  EE20 F002          	lfsr	2,2
 22677  011B3E  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22678  011B40  26D9               	addwf	fsr2l,f,c
 22679  011B42  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22680  011B44  22DA               	addwfc	fsr2h,f,c
 22681  011B46  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22682  011B4A  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22683  011B4E  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22684  011B52  0E0F               	movlw	15
 22685  011B54  0100               	movlb	0	; () banked
 22686  011B56  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22687  011B58  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22688                           
 22689                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 22690  011B5C  0100               	movlb	0	; () banked
 22691  011B5E  EE20 F004          	lfsr	2,4
 22692  011B62  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22693  011B64  26D9               	addwf	fsr2l,f,c
 22694  011B66  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22695  011B68  22DA               	addwfc	fsr2h,f,c
 22696  011B6A  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22697  011B6E  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22698  011B72  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22699  011B76  0E0F               	movlw	15
 22700  011B78  0100               	movlb	0	; () banked
 22701  011B7A  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22702  011B7C  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22703                           
 22704                           ;Port.c: 435: }
 22705  011B80  D044               	goto	l478
 22706  011B82                     
 22707                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 22708  011B82  C0F0  F0E9         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 22709  011B86  C0F1  F0EA         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 22710  011B8A  C0F2  F0EB         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 22711  011B8E  0E03               	movlw	3
 22712  011B90  0100               	movlb	0	; () banked
 22713  011B92  6FEC               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 22714  011B94  ECC6  F0AC         	call	_Port_CheckQuadType	;wreg free
 22715  011B98  0100               	movlb	0	; () banked
 22716  011B9A  6FF4               	movwf	Port_SetQuadType@Output& (0+255),b
 22717  011B9C  0100               	movlb	0	; () banked
 22718  011B9E  51F4               	movf	Port_SetQuadType@Output& (0+255),w,b
 22719  011BA0  A4D8               	btfss	status,2,c
 22720  011BA2  0012               	return	
 22721                           
 22722                           ; BSR set to: 0
 22723                           ;Port.c: 440: {
 22724                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 22725  011BA4  0100               	movlb	0	; () banked
 22726  011BA6  EE20 F002          	lfsr	2,2
 22727  011BAA  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22728  011BAC  26D9               	addwf	fsr2l,f,c
 22729  011BAE  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22730  011BB0  22DA               	addwfc	fsr2h,f,c
 22731  011BB2  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22732  011BB6  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22733  011BBA  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22734  011BBE  0E00               	movlw	0
 22735  011BC0  0100               	movlb	0	; () banked
 22736  011BC2  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22737  011BC4  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22738                           
 22739                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 22740  011BC8  0100               	movlb	0	; () banked
 22741  011BCA  EE20 F004          	lfsr	2,4
 22742  011BCE  51F0               	movf	Port_SetQuadType@pInput& (0+255),w,b
 22743  011BD0  26D9               	addwf	fsr2l,f,c
 22744  011BD2  51F1               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22745  011BD4  22DA               	addwfc	fsr2h,f,c
 22746  011BD6  CFDE F0C5          	movff	postinc2,Byte_SetQuad@pInput
 22747  011BDA  CFDD F0C6          	movff	postdec2,Byte_SetQuad@pInput+1
 22748  011BDE  C0F2  F0C7         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 22749  011BE2  0E00               	movlw	0
 22750  011BE4  0100               	movlb	0	; () banked
 22751  011BE6  6FC8               	movwf	Byte_SetQuad@pValue& (0+255),b
 22752  011BE8  ECB2  F0B1         	call	_Byte_SetQuad	;wreg free
 22753                           
 22754                           ;Port.c: 446: }
 22755  011BEC  D00E               	goto	l478
 22756  011BEE                     l476:
 22757  011BEE  0100               	movlb	0	; () banked
 22758  011BF0  51F3               	movf	Port_SetQuadType@pType& (0+255),w,b
 22759                           
 22760                           ; Switch size 1, requested type "space"
 22761                           ; Number of cases is 4, Range of values is 0 to 3
 22762                           ; switch strategies available:
 22763                           ; Name         Instructions Cycles
 22764                           ; simple_byte           13     7 (average)
 22765                           ;	Chosen strategy is simple_byte
 22766  011BF2  0A00               	xorlw	0	; case 0
 22767  011BF4  B4D8               	btfsc	status,2,c
 22768  011BF6  D734               	goto	l477
 22769  011BF8  0A01               	xorlw	1	; case 1
 22770  011BFA  B4D8               	btfsc	status,2,c
 22771  011BFC  D756               	goto	l479
 22772  011BFE  0A03               	xorlw	3	; case 2
 22773  011C00  B4D8               	btfsc	status,2,c
 22774  011C02  D789               	goto	l483
 22775  011C04  0A01               	xorlw	1	; case 3
 22776  011C06  B4D8               	btfsc	status,2,c
 22777  011C08  D7BC               	goto	l486
 22778  011C0A                     l478:
 22779                           
 22780                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 22781                           
 22782                           ; BSR set to: 0
 22783  011C0A  0E08               	movlw	8
 22784  011C0C  0100               	movlb	0	; () banked
 22785  011C0E  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22786  011C10  0100               	movlb	0	; () banked
 22787  011C12  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22788  011C14  0E00               	movlw	0
 22789  011C16  0100               	movlb	0	; () banked
 22790  011C18  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22791  011C1A  0100               	movlb	0	; () banked
 22792  011C1C  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22793  011C1E  0100               	movlb	0	; () banked
 22794  011C20  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22795  011C22  0D04               	mullw	4
 22796  011C24  CFF3 F0CB          	movff	prodl,Word_SetPair@pPair
 22797  011C28  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22798  011C2C  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 22799                           
 22800                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 22801  011C30  0E08               	movlw	8
 22802  011C32  0100               	movlb	0	; () banked
 22803  011C34  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22804  011C36  0100               	movlb	0	; () banked
 22805  011C38  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22806  011C3A  0E00               	movlw	0
 22807  011C3C  0100               	movlb	0	; () banked
 22808  011C3E  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22809  011C40  0100               	movlb	0	; () banked
 22810  011C42  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22811  011C44  0100               	movlb	0	; () banked
 22812  011C46  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22813  011C48  0D04               	mullw	4
 22814  011C4A  28F3               	incf	prodl,w,c
 22815  011C4C  0100               	movlb	0	; () banked
 22816  011C4E  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22817  011C50  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22818  011C54  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 22819                           
 22820                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 22821  011C58  0E08               	movlw	8
 22822  011C5A  0100               	movlb	0	; () banked
 22823  011C5C  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22824  011C5E  0100               	movlb	0	; () banked
 22825  011C60  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22826  011C62  0E00               	movlw	0
 22827  011C64  0100               	movlb	0	; () banked
 22828  011C66  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22829  011C68  0100               	movlb	0	; () banked
 22830  011C6A  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22831  011C6C  0100               	movlb	0	; () banked
 22832  011C6E  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22833  011C70  0D04               	mullw	4
 22834  011C72  50F3               	movf	prodl,w,c
 22835  011C74  0F02               	addlw	2
 22836  011C76  0100               	movlb	0	; () banked
 22837  011C78  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22838  011C7A  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22839  011C7E  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 22840                           
 22841                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 22842  011C82  0E08               	movlw	8
 22843  011C84  0100               	movlb	0	; () banked
 22844  011C86  25F0               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 22845  011C88  0100               	movlb	0	; () banked
 22846  011C8A  6FC9               	movwf	Word_SetPair@pInput& (0+255),b
 22847  011C8C  0E00               	movlw	0
 22848  011C8E  0100               	movlb	0	; () banked
 22849  011C90  21F1               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 22850  011C92  0100               	movlb	0	; () banked
 22851  011C94  6FCA               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 22852  011C96  0100               	movlb	0	; () banked
 22853  011C98  51F2               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 22854  011C9A  0D04               	mullw	4
 22855  011C9C  50F3               	movf	prodl,w,c
 22856  011C9E  0F03               	addlw	3
 22857  011CA0  0100               	movlb	0	; () banked
 22858  011CA2  6FCB               	movwf	Word_SetPair@pPair& (0+255),b
 22859  011CA4  C0F3  F0CC         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 22860  011CA8  ECC3  F0AE         	call	_Word_SetPair	;wreg free
 22861  011CAC  0012               	return	
 22862  011CAE                     __end_of_Port_SetQuadType:
 22863                           	opt stack 0
 22864                           tosu	equ	0xFFF
 22865                           tosh	equ	0xFFE
 22866                           tosl	equ	0xFFD
 22867                           pclath	equ	0xFFA
 22868                           tblptru	equ	0xFF8
 22869                           tblptrh	equ	0xFF7
 22870                           tblptrl	equ	0xFF6
 22871                           tablat	equ	0xFF5
 22872                           prodh	equ	0xFF4
 22873                           prodl	equ	0xFF3
 22874                           intcon	equ	0xFF2
 22875                           postinc0	equ	0xFEE
 22876                           wreg	equ	0xFE8
 22877                           indf1	equ	0xFE7
 22878                           postdec1	equ	0xFE5
 22879                           fsr1h	equ	0xFE2
 22880                           fsr1l	equ	0xFE1
 22881                           indf2	equ	0xFDF
 22882                           postinc2	equ	0xFDE
 22883                           postdec2	equ	0xFDD
 22884                           plusw2	equ	0xFDB
 22885                           fsr2h	equ	0xFDA
 22886                           fsr2l	equ	0xFD9
 22887                           status	equ	0xFD8
 22888                           
 22889 ;; *************** function _Word_SetPair *****************
 22890 ;; Defined at:
 22891 ;;		line 149 in file "Library/Types.c"
 22892 ;; Parameters:    Size  Location     Type
 22893 ;;  pInput          2   15[BANK0 ] PTR struct Word
 22894 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 22895 ;;		 -> PortD(10), PortC(10), PortF(10), 
 22896 ;;  pPair           1   17[BANK0 ] unsigned char 
 22897 ;;  pValue          1   18[BANK0 ] unsigned char 
 22898 ;; Auto vars:     Size  Location     Type
 22899 ;;		None
 22900 ;; Return value:  Size  Location     Type
 22901 ;;                  1    wreg      void 
 22902 ;; Registers used:
 22903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22904 ;; Tracked objects:
 22905 ;;		On entry : 0/0
 22906 ;;		On exit  : 0/0
 22907 ;;		Unchanged: 0/0
 22908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22909 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22910 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22912 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22913 ;;Total ram usage:        4 bytes
 22914 ;; Hardware stack levels used:    1
 22915 ;; Hardware stack levels required when called:    9
 22916 ;; This function calls:
 22917 ;;		_Byte_SetPair
 22918 ;; This function is called by:
 22919 ;;		_Port_SetPinType
 22920 ;;		_Port_SetQuadType
 22921 ;;		_Port_SetType
 22922 ;;		_Port_SetPairType
 22923 ;;		_PortProperty_Init
 22924 ;; This function uses a non-reentrant model
 22925 ;;
 22926                           
 22927                           	psect	text109
 22928  015D86                     __ptext109:
 22929                           	opt stack 0
 22930  015D86                     _Word_SetPair:
 22931                           	opt stack 18
 22932                           
 22933                           ;Types.c: 151: if (pPair >= 4)
 22934                           
 22935                           ;incstack = 0
 22936  015D86  0E03               	movlw	3
 22937  015D88  0100               	movlb	0	; () banked
 22938  015D8A  65CB               	cpfsgt	Word_SetPair@pPair& (0+255),b
 22939  015D8C  D014               	goto	l776
 22940                           
 22941                           ; BSR set to: 0
 22942                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 22943  015D8E  0E01               	movlw	1
 22944  015D90  0100               	movlb	0	; () banked
 22945  015D92  25C9               	addwf	Word_SetPair@pInput& (0+255),w,b
 22946  015D94  0100               	movlb	0	; () banked
 22947  015D96  6FC5               	movwf	Byte_SetPair@pInput& (0+255),b
 22948  015D98  0E00               	movlw	0
 22949  015D9A  0100               	movlb	0	; () banked
 22950  015D9C  21CA               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 22951  015D9E  0100               	movlb	0	; () banked
 22952  015DA0  6FC6               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 22953  015DA2  0100               	movlb	0	; () banked
 22954  015DA4  51CB               	movf	Word_SetPair@pPair& (0+255),w,b
 22955  015DA6  0FFC               	addlw	252
 22956  015DA8  0100               	movlb	0	; () banked
 22957  015DAA  6FC7               	movwf	Byte_SetPair@pPair& (0+255),b
 22958  015DAC  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22959  015DB0  ECA1  F0B1         	call	_Byte_SetPair	;wreg free
 22960  015DB4  0012               	return	
 22961  015DB6                     l776:
 22962                           
 22963                           ;Types.c: 153: else
 22964                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 22965  015DB6  C0C9  F0C5         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 22966  015DBA  C0CA  F0C6         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 22967  015DBE  C0CB  F0C7         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 22968  015DC2  C0CC  F0C8         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 22969  015DC6  ECA1  F0B1         	call	_Byte_SetPair	;wreg free
 22970  015DCA  0012               	return	
 22971  015DCC                     __end_of_Word_SetPair:
 22972                           	opt stack 0
 22973                           tosu	equ	0xFFF
 22974                           tosh	equ	0xFFE
 22975                           tosl	equ	0xFFD
 22976                           pclath	equ	0xFFA
 22977                           tblptru	equ	0xFF8
 22978                           tblptrh	equ	0xFF7
 22979                           tblptrl	equ	0xFF6
 22980                           tablat	equ	0xFF5
 22981                           prodh	equ	0xFF4
 22982                           prodl	equ	0xFF3
 22983                           intcon	equ	0xFF2
 22984                           postinc0	equ	0xFEE
 22985                           wreg	equ	0xFE8
 22986                           indf1	equ	0xFE7
 22987                           postdec1	equ	0xFE5
 22988                           fsr1h	equ	0xFE2
 22989                           fsr1l	equ	0xFE1
 22990                           indf2	equ	0xFDF
 22991                           postinc2	equ	0xFDE
 22992                           postdec2	equ	0xFDD
 22993                           plusw2	equ	0xFDB
 22994                           fsr2h	equ	0xFDA
 22995                           fsr2l	equ	0xFD9
 22996                           status	equ	0xFD8
 22997                           
 22998 ;; *************** function _Byte_SetPair *****************
 22999 ;; Defined at:
 23000 ;;		line 83 in file "Library/Types.c"
 23001 ;; Parameters:    Size  Location     Type
 23002 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23003 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23004 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23005 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 23006 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 23007 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 23008 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 23009 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 23010 ;;		 -> NULL(0), 
 23011 ;;  pPair           1   13[BANK0 ] unsigned char 
 23012 ;;  pValue          1   14[BANK0 ] unsigned char 
 23013 ;; Auto vars:     Size  Location     Type
 23014 ;;		None
 23015 ;; Return value:  Size  Location     Type
 23016 ;;                  1    wreg      void 
 23017 ;; Registers used:
 23018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23019 ;; Tracked objects:
 23020 ;;		On entry : 0/0
 23021 ;;		On exit  : 0/0
 23022 ;;		Unchanged: 0/0
 23023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23024 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23027 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23028 ;;Total ram usage:        4 bytes
 23029 ;; Hardware stack levels used:    1
 23030 ;; Hardware stack levels required when called:    8
 23031 ;; This function calls:
 23032 ;;		_Byte_SetZone
 23033 ;; This function is called by:
 23034 ;;		_Word_SetPair
 23035 ;;		_Port_SetPairType
 23036 ;;		_Port_SetPair
 23037 ;; This function uses a non-reentrant model
 23038 ;;
 23039                           
 23040                           	psect	text110
 23041  016342                     __ptext110:
 23042                           	opt stack 0
 23043  016342                     _Byte_SetPair:
 23044                           	opt stack 18
 23045                           
 23046                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 23047                           
 23048                           ;incstack = 0
 23049  016342  C0C5  F0BA         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 23050  016346  C0C6  F0BB         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 23051  01634A  0E04               	movlw	4
 23052  01634C  0100               	movlb	0	; () banked
 23053  01634E  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23054  016350  C0C7  F0BD         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 23055  016354  0E02               	movlw	2
 23056  016356  0100               	movlb	0	; () banked
 23057  016358  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23058  01635A  C0C8  F0BF         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 23059  01635E  ECCC  F0A1         	call	_Byte_SetZone	;wreg free
 23060  016362  0012               	return		;funcret
 23061  016364                     __end_of_Byte_SetPair:
 23062                           	opt stack 0
 23063                           tosu	equ	0xFFF
 23064                           tosh	equ	0xFFE
 23065                           tosl	equ	0xFFD
 23066                           pclath	equ	0xFFA
 23067                           tblptru	equ	0xFF8
 23068                           tblptrh	equ	0xFF7
 23069                           tblptrl	equ	0xFF6
 23070                           tablat	equ	0xFF5
 23071                           prodh	equ	0xFF4
 23072                           prodl	equ	0xFF3
 23073                           intcon	equ	0xFF2
 23074                           postinc0	equ	0xFEE
 23075                           wreg	equ	0xFE8
 23076                           indf1	equ	0xFE7
 23077                           postdec1	equ	0xFE5
 23078                           fsr1h	equ	0xFE2
 23079                           fsr1l	equ	0xFE1
 23080                           indf2	equ	0xFDF
 23081                           postinc2	equ	0xFDE
 23082                           postdec2	equ	0xFDD
 23083                           plusw2	equ	0xFDB
 23084                           fsr2h	equ	0xFDA
 23085                           fsr2l	equ	0xFD9
 23086                           status	equ	0xFD8
 23087                           
 23088 ;; *************** function _Port_CheckQuadType *****************
 23089 ;; Defined at:
 23090 ;;		line 126 in file "Library/Port.c"
 23091 ;; Parameters:    Size  Location     Type
 23092 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 23093 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23094 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23095 ;;  pQuad           1   49[BANK0 ] enum E6776
 23096 ;;  pDrive          1   50[BANK0 ] enum E6469
 23097 ;; Auto vars:     Size  Location     Type
 23098 ;;  Output          1   53[BANK0 ] enum E6475
 23099 ;;  Pair2           1   52[BANK0 ] enum E6760
 23100 ;;  Pair1           1   51[BANK0 ] enum E6760
 23101 ;; Return value:  Size  Location     Type
 23102 ;;                  1    wreg      enum E6475
 23103 ;; Registers used:
 23104 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23105 ;; Tracked objects:
 23106 ;;		On entry : 0/0
 23107 ;;		On exit  : 0/0
 23108 ;;		Unchanged: 0/0
 23109 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23110 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23111 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23112 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23113 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23114 ;;Total ram usage:        7 bytes
 23115 ;; Hardware stack levels used:    1
 23116 ;; Hardware stack levels required when called:   12
 23117 ;; This function calls:
 23118 ;;		_Port_CheckPairType
 23119 ;; This function is called by:
 23120 ;;		_Port_CheckPortType
 23121 ;;		_Port_SetQuadType
 23122 ;; This function uses a non-reentrant model
 23123 ;;
 23124                           
 23125                           	psect	text111
 23126  01598C                     __ptext111:
 23127                           	opt stack 0
 23128  01598C                     _Port_CheckQuadType:
 23129                           	opt stack 14
 23130                           
 23131                           ;Port.c: 128: ePinError Output = ePinErrorState;
 23132                           
 23133                           ;incstack = 0
 23134  01598C  0E05               	movlw	5
 23135  01598E  0100               	movlb	0	; () banked
 23136  015990  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23137                           
 23138                           ; BSR set to: 0
 23139                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 23140  015992  0100               	movlb	0	; () banked
 23141  015994  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23142  015996  0D02               	mullw	2
 23143  015998  CFF3 F0ED          	movff	prodl,Port_CheckQuadType@Pair1
 23144                           
 23145                           ; BSR set to: 0
 23146                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 23147  01599C  0100               	movlb	0	; () banked
 23148  01599E  51EB               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 23149  0159A0  0D02               	mullw	2
 23150  0159A2  28F3               	incf	prodl,w,c
 23151  0159A4  0100               	movlb	0	; () banked
 23152  0159A6  6FEE               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 23153                           
 23154                           ; BSR set to: 0
 23155                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 23156  0159A8  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23157  0159AC  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23158  0159B0  C0ED  F0E2         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 23159  0159B4  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23160  0159B8  EC69  F0AB         	call	_Port_CheckPairType	;wreg free
 23161  0159BC  0100               	movlb	0	; () banked
 23162  0159BE  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23163  0159C0  0100               	movlb	0	; () banked
 23164  0159C2  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23165  0159C4  A4D8               	btfss	status,2,c
 23166  0159C6  D00C               	goto	l393
 23167                           
 23168                           ; BSR set to: 0
 23169                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 23170  0159C8  C0E9  F0E0         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 23171  0159CC  C0EA  F0E1         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 23172  0159D0  C0EE  F0E2         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 23173  0159D4  C0EC  F0E3         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 23174  0159D8  EC69  F0AB         	call	_Port_CheckPairType	;wreg free
 23175  0159DC  0100               	movlb	0	; () banked
 23176  0159DE  6FEF               	movwf	Port_CheckQuadType@Output& (0+255),b
 23177  0159E0                     l393:
 23178                           
 23179                           ; BSR set to: 0
 23180                           ;Port.c: 136: return Output;
 23181                           
 23182                           ; BSR set to: 0
 23183  0159E0  0100               	movlb	0	; () banked
 23184  0159E2  51EF               	movf	Port_CheckQuadType@Output& (0+255),w,b
 23185  0159E4  0012               	return	
 23186  0159E6                     __end_of_Port_CheckQuadType:
 23187                           	opt stack 0
 23188                           tosu	equ	0xFFF
 23189                           tosh	equ	0xFFE
 23190                           tosl	equ	0xFFD
 23191                           pclath	equ	0xFFA
 23192                           tblptru	equ	0xFF8
 23193                           tblptrh	equ	0xFF7
 23194                           tblptrl	equ	0xFF6
 23195                           tablat	equ	0xFF5
 23196                           prodh	equ	0xFF4
 23197                           prodl	equ	0xFF3
 23198                           intcon	equ	0xFF2
 23199                           postinc0	equ	0xFEE
 23200                           wreg	equ	0xFE8
 23201                           indf1	equ	0xFE7
 23202                           postdec1	equ	0xFE5
 23203                           fsr1h	equ	0xFE2
 23204                           fsr1l	equ	0xFE1
 23205                           indf2	equ	0xFDF
 23206                           postinc2	equ	0xFDE
 23207                           postdec2	equ	0xFDD
 23208                           plusw2	equ	0xFDB
 23209                           fsr2h	equ	0xFDA
 23210                           fsr2l	equ	0xFD9
 23211                           status	equ	0xFD8
 23212                           
 23213 ;; *************** function _Port_CheckPairType *****************
 23214 ;; Defined at:
 23215 ;;		line 112 in file "Library/Port.c"
 23216 ;; Parameters:    Size  Location     Type
 23217 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 23218 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23219 ;;		 -> PortD(10), PortC(10), PortF(10), 
 23220 ;;  pPair           1   40[BANK0 ] enum E6760
 23221 ;;  pDrive          1   41[BANK0 ] enum E6469
 23222 ;; Auto vars:     Size  Location     Type
 23223 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 23224 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23225 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23226 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23227 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23228 ;;  Output          1   44[BANK0 ] enum E6475
 23229 ;;  Pin2            1   43[BANK0 ] enum E6750
 23230 ;;  Pin1            1   42[BANK0 ] enum E6750
 23231 ;; Return value:  Size  Location     Type
 23232 ;;                  1    wreg      enum E6475
 23233 ;; Registers used:
 23234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23235 ;; Tracked objects:
 23236 ;;		On entry : 0/0
 23237 ;;		On exit  : 0/0
 23238 ;;		Unchanged: 0/0
 23239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23240 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23241 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23242 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23243 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23244 ;;Total ram usage:        9 bytes
 23245 ;; Hardware stack levels used:    1
 23246 ;; Hardware stack levels required when called:   11
 23247 ;; This function calls:
 23248 ;;		_PortProperty_Valid
 23249 ;; This function is called by:
 23250 ;;		_Port_CheckQuadType
 23251 ;;		_Port_SetPairType
 23252 ;; This function uses a non-reentrant model
 23253 ;;
 23254                           
 23255                           	psect	text112
 23256  0156D2                     __ptext112:
 23257                           	opt stack 0
 23258  0156D2                     _Port_CheckPairType:
 23259                           	opt stack 14
 23260                           
 23261                           ;Port.c: 114: ePinError Output = ePinErrorState;
 23262                           
 23263                           ; BSR set to: 0
 23264                           ;incstack = 0
 23265  0156D2  0E05               	movlw	5
 23266  0156D4  0100               	movlb	0	; () banked
 23267  0156D6  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23268                           
 23269                           ; BSR set to: 0
 23270                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 23271  0156D8  C0E0  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 23272  0156DC  C0E1  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 23273  0156E0  CFDE F0E7          	movff	postinc2,Port_CheckPairType@Props
 23274  0156E4  CFDD F0E8          	movff	postdec2,Port_CheckPairType@Props+1
 23275                           
 23276                           ; BSR set to: 0
 23277                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 23278  0156E8  0100               	movlb	0	; () banked
 23279  0156EA  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23280  0156EC  0D02               	mullw	2
 23281  0156EE  CFF3 F0E4          	movff	prodl,Port_CheckPairType@Pin1
 23282                           
 23283                           ; BSR set to: 0
 23284                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 23285  0156F2  0100               	movlb	0	; () banked
 23286  0156F4  51E2               	movf	Port_CheckPairType@pPair& (0+255),w,b
 23287  0156F6  0D02               	mullw	2
 23288  0156F8  28F3               	incf	prodl,w,c
 23289  0156FA  0100               	movlb	0	; () banked
 23290  0156FC  6FE5               	movwf	Port_CheckPairType@Pin2& (0+255),b
 23291                           
 23292                           ; BSR set to: 0
 23293                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 23294  0156FE  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23295  015702  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23296  015706  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23297  01570A  C0E4  F0CC         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 23298  01570E  EC81  F0A8         	call	_PortProperty_Valid	;wreg free
 23299  015712  0100               	movlb	0	; () banked
 23300  015714  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23301  015716  0100               	movlb	0	; () banked
 23302  015718  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23303  01571A  A4D8               	btfss	status,2,c
 23304  01571C  D00C               	goto	l389
 23305                           
 23306                           ; BSR set to: 0
 23307                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 23308  01571E  C0E7  F0C9         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 23309  015722  C0E8  F0CA         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 23310  015726  C0E3  F0CB         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 23311  01572A  C0E5  F0CC         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 23312  01572E  EC81  F0A8         	call	_PortProperty_Valid	;wreg free
 23313  015732  0100               	movlb	0	; () banked
 23314  015734  6FE6               	movwf	Port_CheckPairType@Output& (0+255),b
 23315  015736                     l389:
 23316                           
 23317                           ; BSR set to: 0
 23318                           ;Port.c: 124: return Output;
 23319                           
 23320                           ; BSR set to: 0
 23321  015736  0100               	movlb	0	; () banked
 23322  015738  51E6               	movf	Port_CheckPairType@Output& (0+255),w,b
 23323  01573A  0012               	return	
 23324  01573C                     __end_of_Port_CheckPairType:
 23325                           	opt stack 0
 23326                           tosu	equ	0xFFF
 23327                           tosh	equ	0xFFE
 23328                           tosl	equ	0xFFD
 23329                           pclath	equ	0xFFA
 23330                           tblptru	equ	0xFF8
 23331                           tblptrh	equ	0xFF7
 23332                           tblptrl	equ	0xFF6
 23333                           tablat	equ	0xFF5
 23334                           prodh	equ	0xFF4
 23335                           prodl	equ	0xFF3
 23336                           intcon	equ	0xFF2
 23337                           postinc0	equ	0xFEE
 23338                           wreg	equ	0xFE8
 23339                           indf1	equ	0xFE7
 23340                           postdec1	equ	0xFE5
 23341                           fsr1h	equ	0xFE2
 23342                           fsr1l	equ	0xFE1
 23343                           indf2	equ	0xFDF
 23344                           postinc2	equ	0xFDE
 23345                           postdec2	equ	0xFDD
 23346                           plusw2	equ	0xFDB
 23347                           fsr2h	equ	0xFDA
 23348                           fsr2l	equ	0xFD9
 23349                           status	equ	0xFD8
 23350                           
 23351 ;; *************** function _PortProperty_Valid *****************
 23352 ;; Defined at:
 23353 ;;		line 220 in file "Library/Types.c"
 23354 ;; Parameters:    Size  Location     Type
 23355 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 23356 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23357 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23358 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23359 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23360 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 23361 ;;  pPin            1   18[BANK0 ] unsigned char 
 23362 ;; Auto vars:     Size  Location     Type
 23363 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 23364 ;;  Pair            1   37[BANK0 ] enum E6469
 23365 ;; Return value:  Size  Location     Type
 23366 ;;                  1    wreg      enum E6475
 23367 ;; Registers used:
 23368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23369 ;; Tracked objects:
 23370 ;;		On entry : 0/0
 23371 ;;		On exit  : 0/0
 23372 ;;		Unchanged: 0/0
 23373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23374 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23375 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23376 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23377 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23378 ;;Total ram usage:       23 bytes
 23379 ;; Hardware stack levels used:    1
 23380 ;; Hardware stack levels required when called:   10
 23381 ;; This function calls:
 23382 ;;		_Word_GetPair
 23383 ;; This function is called by:
 23384 ;;		_Port_CheckPairType
 23385 ;;		_Port_SetPinType
 23386 ;; This function uses a non-reentrant model
 23387 ;;
 23388                           
 23389                           	psect	text113
 23390  015102                     __ptext113:
 23391                           	opt stack 0
 23392  015102                     _PortProperty_Valid:
 23393                           	opt stack 17
 23394                           
 23395                           ;Types.c: 222: ePinDrive Pair;
 23396                           ;Types.c: 223: const ePinError Errors[4][4] =
 23397                           ;Types.c: 224: {
 23398                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 23399                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 23400                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 23401                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 23402                           ;Types.c: 230: };
 23403                           
 23404                           ; BSR set to: 0
 23405                           ;incstack = 0
 23406  015102  0EF5               	movlw	low PortProperty_Valid@F6830
 23407  015104  6EF6               	movwf	tblptrl,c
 23408  015106                     	if	1	;There is more than 1 active tblptr byte
 23409  015106  0EFC               	movlw	high PortProperty_Valid@F6830
 23410  015108  6EF7               	movwf	tblptrh,c
 23411  01510A                     	endif
 23412  01510A                     	if	1	;There are 3 active tblptr bytes
 23413  01510A  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 23414  01510C  6EF8               	movwf	tblptru,c
 23415  01510E                     	endif
 23416  01510E  EE20  F0CF         	lfsr	2,PortProperty_Valid@Errors
 23417  015112  0E0F               	movlw	15
 23418  015114                     u8700:
 23419  015114  0009               	tblrd		*+
 23420  015116  CFF5 FFDE          	movff	tablat,postinc2
 23421  01511A  06E8               	decf	wreg,f,c
 23422  01511C  E2FB               	bc	u8700
 23423                           
 23424                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 23425  01511E  C0C9  F0C6         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 23426  015122  C0CA  F0C7         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 23427  015126  C0CC  F0C8         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 23428  01512A  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 23429  01512E  0100               	movlb	0	; () banked
 23430  015130  6FDF               	movwf	PortProperty_Valid@Pair& (0+255),b
 23431                           
 23432                           ; BSR set to: 0
 23433                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 23434  015132  0E04               	movlw	4
 23435  015134  0100               	movlb	0	; () banked
 23436  015136  61CB               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 23437  015138  D020               	goto	l819
 23438                           
 23439                           ; BSR set to: 0
 23440  01513A  0E04               	movlw	4
 23441  01513C  0100               	movlb	0	; () banked
 23442  01513E  61DF               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 23443  015140  D01C               	goto	l819
 23444                           
 23445                           ; BSR set to: 0
 23446                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 23447  015142  0100               	movlb	0	; () banked
 23448  015144  51CB               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 23449  015146  0D04               	mullw	4
 23450  015148  0ECF               	movlw	low PortProperty_Valid@Errors
 23451  01514A  0100               	movlb	0	; () banked
 23452  01514C  6FCD               	movwf	??_PortProperty_Valid& (0+255),b
 23453  01514E  0E00               	movlw	high PortProperty_Valid@Errors
 23454  015150  0100               	movlb	0	; () banked
 23455  015152  6FCE               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 23456  015154  50F3               	movf	prodl,w,c
 23457  015156  0100               	movlb	0	; () banked
 23458  015158  27CD               	addwf	??_PortProperty_Valid& (0+255),f,b
 23459  01515A  50F4               	movf	prodh,w,c
 23460  01515C  0100               	movlb	0	; () banked
 23461  01515E  23CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 23462  015160  0100               	movlb	0	; () banked
 23463  015162  51DF               	movf	PortProperty_Valid@Pair& (0+255),w,b
 23464  015164  0D01               	mullw	1
 23465  015166  50F3               	movf	prodl,w,c
 23466  015168  0100               	movlb	0	; () banked
 23467  01516A  25CD               	addwf	??_PortProperty_Valid& (0+255),w,b
 23468  01516C  6ED9               	movwf	fsr2l,c
 23469  01516E  50F4               	movf	prodh,w,c
 23470  015170  0100               	movlb	0	; () banked
 23471  015172  21CE               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 23472  015174  6EDA               	movwf	fsr2h,c
 23473  015176  50DF               	movf	indf2,w,c
 23474                           
 23475                           ; BSR set to: 0
 23476  015178  0012               	return	
 23477  01517A                     l819:
 23478                           
 23479                           ; BSR set to: 0
 23480                           ;Types.c: 237: return ePinErrorState;
 23481                           
 23482                           ; BSR set to: 0
 23483  01517A  0E05               	movlw	5
 23484  01517C  0012               	return	
 23485  01517E                     __end_of_PortProperty_Valid:
 23486                           	opt stack 0
 23487                           tosu	equ	0xFFF
 23488                           tosh	equ	0xFFE
 23489                           tosl	equ	0xFFD
 23490                           pclath	equ	0xFFA
 23491                           tblptru	equ	0xFF8
 23492                           tblptrh	equ	0xFF7
 23493                           tblptrl	equ	0xFF6
 23494                           tablat	equ	0xFF5
 23495                           prodh	equ	0xFF4
 23496                           prodl	equ	0xFF3
 23497                           intcon	equ	0xFF2
 23498                           postinc0	equ	0xFEE
 23499                           wreg	equ	0xFE8
 23500                           indf1	equ	0xFE7
 23501                           postdec1	equ	0xFE5
 23502                           fsr1h	equ	0xFE2
 23503                           fsr1l	equ	0xFE1
 23504                           indf2	equ	0xFDF
 23505                           postinc2	equ	0xFDE
 23506                           postdec2	equ	0xFDD
 23507                           plusw2	equ	0xFDB
 23508                           fsr2h	equ	0xFDA
 23509                           fsr2l	equ	0xFD9
 23510                           status	equ	0xFD8
 23511                           
 23512 ;; *************** function _Byte_SetQuad *****************
 23513 ;; Defined at:
 23514 ;;		line 101 in file "Library/Types.c"
 23515 ;; Parameters:    Size  Location     Type
 23516 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 23517 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 23518 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23519 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23520 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23521 ;;		 -> NULL(0), 
 23522 ;;  pQuad           1   13[BANK0 ] unsigned char 
 23523 ;;  pValue          1   14[BANK0 ] unsigned char 
 23524 ;; Auto vars:     Size  Location     Type
 23525 ;;		None
 23526 ;; Return value:  Size  Location     Type
 23527 ;;                  1    wreg      void 
 23528 ;; Registers used:
 23529 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23530 ;; Tracked objects:
 23531 ;;		On entry : 0/0
 23532 ;;		On exit  : 0/0
 23533 ;;		Unchanged: 0/0
 23534 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23535 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23536 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23537 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23538 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23539 ;;Total ram usage:        4 bytes
 23540 ;; Hardware stack levels used:    1
 23541 ;; Hardware stack levels required when called:    8
 23542 ;; This function calls:
 23543 ;;		_Byte_SetZone
 23544 ;; This function is called by:
 23545 ;;		_Port_SetQuadType
 23546 ;;		_SPI_Init
 23547 ;;		_SPI_MinSpeed
 23548 ;;		_SPI_MaxSpeed
 23549 ;;		_Port_SetQuad
 23550 ;;		_Word_SetQuad
 23551 ;;		_I2C_Init
 23552 ;; This function uses a non-reentrant model
 23553 ;;
 23554                           
 23555                           	psect	text114
 23556  016364                     __ptext114:
 23557                           	opt stack 0
 23558  016364                     _Byte_SetQuad:
 23559                           	opt stack 19
 23560                           
 23561                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 23562                           
 23563                           ; BSR set to: 0
 23564                           ;incstack = 0
 23565  016364  C0C5  F0BA         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 23566  016368  C0C6  F0BB         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 23567  01636C  0E02               	movlw	2
 23568  01636E  0100               	movlb	0	; () banked
 23569  016370  6FBC               	movwf	Byte_SetZone@pMax& (0+255),b
 23570  016372  C0C7  F0BD         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 23571  016376  0E04               	movlw	4
 23572  016378  0100               	movlb	0	; () banked
 23573  01637A  6FBE               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 23574  01637C  C0C8  F0BF         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 23575  016380  ECCC  F0A1         	call	_Byte_SetZone	;wreg free
 23576  016384  0012               	return		;funcret
 23577  016386                     __end_of_Byte_SetQuad:
 23578                           	opt stack 0
 23579                           tosu	equ	0xFFF
 23580                           tosh	equ	0xFFE
 23581                           tosl	equ	0xFFD
 23582                           pclath	equ	0xFFA
 23583                           tblptru	equ	0xFF8
 23584                           tblptrh	equ	0xFF7
 23585                           tblptrl	equ	0xFF6
 23586                           tablat	equ	0xFF5
 23587                           prodh	equ	0xFF4
 23588                           prodl	equ	0xFF3
 23589                           intcon	equ	0xFF2
 23590                           postinc0	equ	0xFEE
 23591                           wreg	equ	0xFE8
 23592                           indf1	equ	0xFE7
 23593                           postdec1	equ	0xFE5
 23594                           fsr1h	equ	0xFE2
 23595                           fsr1l	equ	0xFE1
 23596                           indf2	equ	0xFDF
 23597                           postinc2	equ	0xFDE
 23598                           postdec2	equ	0xFDD
 23599                           plusw2	equ	0xFDB
 23600                           fsr2h	equ	0xFDA
 23601                           fsr2l	equ	0xFD9
 23602                           status	equ	0xFD8
 23603                           
 23604 ;; *************** function _Byte_SetZone *****************
 23605 ;; Defined at:
 23606 ;;		line 47 in file "Library/Types.c"
 23607 ;; Parameters:    Size  Location     Type
 23608 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 23609 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 23610 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 23611 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 23612 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 23613 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23614 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23615 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23616 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23617 ;;  pMax            1    2[BANK0 ] unsigned char 
 23618 ;;  pChunk          1    3[BANK0 ] unsigned char 
 23619 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 23620 ;;  pValue          1    5[BANK0 ] unsigned char 
 23621 ;; Auto vars:     Size  Location     Type
 23622 ;;  MASK            1   10[BANK0 ] unsigned char 
 23623 ;;  Offset          1    9[BANK0 ] unsigned char 
 23624 ;; Return value:  Size  Location     Type
 23625 ;;                  1    wreg      void 
 23626 ;; Registers used:
 23627 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23628 ;; Tracked objects:
 23629 ;;		On entry : 0/0
 23630 ;;		On exit  : 0/0
 23631 ;;		Unchanged: 0/0
 23632 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23633 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23634 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23635 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23636 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23637 ;;Total ram usage:       11 bytes
 23638 ;; Hardware stack levels used:    1
 23639 ;; Hardware stack levels required when called:    7
 23640 ;; This function calls:
 23641 ;;		Nothing
 23642 ;; This function is called by:
 23643 ;;		_Byte_SetPair
 23644 ;;		_Byte_SetQuad
 23645 ;;		_Byte_SetTriple
 23646 ;; This function uses a non-reentrant model
 23647 ;;
 23648                           
 23649                           	psect	text115
 23650  014398                     __ptext115:
 23651                           	opt stack 0
 23652  014398                     _Byte_SetZone:
 23653                           	opt stack 18
 23654                           
 23655                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 23656                           
 23657                           ;incstack = 0
 23658  014398  0100               	movlb	0	; () banked
 23659  01439A  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23660  01439C  0D01               	mullw	1
 23661  01439E  0E0F               	movlw	low _MASKS
 23662  0143A0  24F3               	addwf	prodl,w,c
 23663  0143A2  6EF6               	movwf	tblptrl,c
 23664  0143A4  0EFD               	movlw	high _MASKS
 23665  0143A6  20F4               	addwfc	prodh,w,c
 23666  0143A8  6EF7               	movwf	tblptrh,c
 23667  0143AA                     	if	1	;There are 3 active tblptr bytes
 23668  0143AA  6AF8               	clrf	tblptru,c
 23669  0143AC  0E00               	movlw	low (__mediumconst shr (0+16))
 23670  0143AE  22F8               	addwfc	tblptru,f,c
 23671  0143B0                     	endif
 23672  0143B0  0008               	tblrd		*
 23673  0143B2  CFF5 F0C4          	movff	tablat,Byte_SetZone@MASK
 23674                           
 23675                           ; BSR set to: 0
 23676                           ;Types.c: 50: UINT8 Offset = 0;
 23677  0143B6  0E00               	movlw	0
 23678  0143B8  0100               	movlb	0	; () banked
 23679  0143BA  6FC3               	movwf	Byte_SetZone@Offset& (0+255),b
 23680                           
 23681                           ;Types.c: 52: while (pChunk >= pMax)
 23682  0143BC  D006               	goto	l726
 23683  0143BE                     
 23684                           ; BSR set to: 0
 23685                           ;Types.c: 53: {
 23686                           ;Types.c: 54: pChunk -= pMax;
 23687                           
 23688                           ; BSR set to: 0
 23689  0143BE  0100               	movlb	0	; () banked
 23690  0143C0  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23691  0143C2  0100               	movlb	0	; () banked
 23692  0143C4  5FBD               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 23693                           
 23694                           ; BSR set to: 0
 23695                           ;Types.c: 55: Offset += 1;
 23696  0143C6  0100               	movlb	0	; () banked
 23697  0143C8  2BC3               	incf	Byte_SetZone@Offset& (0+255),f,b
 23698  0143CA                     l726:
 23699                           
 23700                           ; BSR set to: 0
 23701                           
 23702                           ; BSR set to: 0
 23703  0143CA  0100               	movlb	0	; () banked
 23704  0143CC  51BC               	movf	Byte_SetZone@pMax& (0+255),w,b
 23705  0143CE  0100               	movlb	0	; () banked
 23706  0143D0  5DBD               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 23707  0143D2  B0D8               	btfsc	status,0,c
 23708  0143D4  D7F4               	goto	l727
 23709                           
 23710                           ; BSR set to: 0
 23711                           ;Types.c: 56: }
 23712                           ;Types.c: 57: pChunk *= pChunkSize;
 23713                           
 23714                           ; BSR set to: 0
 23715  0143D6  0100               	movlb	0	; () banked
 23716  0143D8  51BE               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 23717  0143DA  0100               	movlb	0	; () banked
 23718  0143DC  03BD               	mulwf	Byte_SetZone@pChunk& (0+255),b
 23719  0143DE  50F3               	movf	prodl,w,c
 23720  0143E0  6FBD               	movwf	Byte_SetZone@pChunk& (0+255),b
 23721                           
 23722                           ; BSR set to: 0
 23723                           ;Types.c: 58: pChunk += Offset;
 23724  0143E2  0100               	movlb	0	; () banked
 23725  0143E4  51C3               	movf	Byte_SetZone@Offset& (0+255),w,b
 23726  0143E6  0100               	movlb	0	; () banked
 23727  0143E8  27BD               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 23728                           
 23729                           ; BSR set to: 0
 23730                           ;Types.c: 60: pValue &= MASK;
 23731  0143EA  0100               	movlb	0	; () banked
 23732  0143EC  51C4               	movf	Byte_SetZone@MASK& (0+255),w,b
 23733  0143EE  0100               	movlb	0	; () banked
 23734  0143F0  17BF               	andwf	Byte_SetZone@pValue& (0+255),f,b
 23735                           
 23736                           ; BSR set to: 0
 23737                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 23738  0143F2  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23739  0143F6  C0C4  F0C1         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 23740  0143FA  0100               	movlb	0	; () banked
 23741  0143FC  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23742  0143FE  D003               	goto	u8754
 23743  014400                     u8755:
 23744  014400  0100               	movlb	0	; () banked
 23745  014402  90D8               	bcf	status,0,c
 23746  014404  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23747  014406                     u8754:
 23748  014406  0100               	movlb	0	; () banked
 23749  014408  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23750  01440A  D7FA               	goto	u8755
 23751  01440C  0100               	movlb	0	; () banked
 23752  01440E  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23753  014410  0AFF               	xorlw	255
 23754  014412  0100               	movlb	0	; () banked
 23755  014414  6FC2               	movwf	(??_Byte_SetZone+2)& (0+255),b
 23756  014416  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23757  01441A  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23758  01441E  0100               	movlb	0	; () banked
 23759  014420  51C2               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 23760  014422  16DF               	andwf	indf2,f,c
 23761                           
 23762                           ; BSR set to: 0
 23763                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 23764  014424  C0BD  F0C0         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 23765  014428  C0BF  F0C1         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 23766  01442C  0100               	movlb	0	; () banked
 23767  01442E  2BC0               	incf	??_Byte_SetZone& (0+255),f,b
 23768  014430  D003               	goto	u8764
 23769  014432                     u8765:
 23770  014432  0100               	movlb	0	; () banked
 23771  014434  90D8               	bcf	status,0,c
 23772  014436  37C1               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 23773  014438                     u8764:
 23774  014438  0100               	movlb	0	; () banked
 23775  01443A  2FC0               	decfsz	??_Byte_SetZone& (0+255),f,b
 23776  01443C  D7FA               	goto	u8765
 23777  01443E  C0BA  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 23778  014442  C0BB  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 23779  014446  0100               	movlb	0	; () banked
 23780  014448  51C1               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 23781  01444A  12DF               	iorwf	indf2,f,c
 23782                           
 23783                           ; BSR set to: 0
 23784  01444C  0012               	return		;funcret
 23785  01444E                     __end_of_Byte_SetZone:
 23786                           	opt stack 0
 23787                           tosu	equ	0xFFF
 23788                           tosh	equ	0xFFE
 23789                           tosl	equ	0xFFD
 23790                           pclath	equ	0xFFA
 23791                           tblptru	equ	0xFF8
 23792                           tblptrh	equ	0xFF7
 23793                           tblptrl	equ	0xFF6
 23794                           tablat	equ	0xFF5
 23795                           prodh	equ	0xFF4
 23796                           prodl	equ	0xFF3
 23797                           intcon	equ	0xFF2
 23798                           postinc0	equ	0xFEE
 23799                           wreg	equ	0xFE8
 23800                           indf1	equ	0xFE7
 23801                           postdec1	equ	0xFE5
 23802                           fsr1h	equ	0xFE2
 23803                           fsr1l	equ	0xFE1
 23804                           indf2	equ	0xFDF
 23805                           postinc2	equ	0xFDE
 23806                           postdec2	equ	0xFDD
 23807                           plusw2	equ	0xFDB
 23808                           fsr2h	equ	0xFDA
 23809                           fsr2l	equ	0xFD9
 23810                           status	equ	0xFD8
 23811                           
 23812 ;; *************** function _Console_Init *****************
 23813 ;; Defined at:
 23814 ;;		line 157 in file "Library/Console.c"
 23815 ;; Parameters:    Size  Location     Type
 23816 ;;		None
 23817 ;; Auto vars:     Size  Location     Type
 23818 ;;  y               1    3[BANK0 ] unsigned char 
 23819 ;;  x               1    2[BANK0 ] unsigned char 
 23820 ;; Return value:  Size  Location     Type
 23821 ;;                  1    wreg      void 
 23822 ;; Registers used:
 23823 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 23824 ;; Tracked objects:
 23825 ;;		On entry : 0/0
 23826 ;;		On exit  : 0/0
 23827 ;;		Unchanged: 0/0
 23828 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23829 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23830 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23831 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23832 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23833 ;;Total ram usage:        4 bytes
 23834 ;; Hardware stack levels used:    1
 23835 ;; Hardware stack levels required when called:    7
 23836 ;; This function calls:
 23837 ;;		Nothing
 23838 ;; This function is called by:
 23839 ;;		_init
 23840 ;; This function uses a non-reentrant model
 23841 ;;
 23842                           
 23843                           	psect	text116
 23844  014E66                     __ptext116:
 23845                           	opt stack 0
 23846  014E66                     _Console_Init:
 23847                           	opt stack 22
 23848                           
 23849                           ;Console.c: 160: lBufferX = 0;
 23850                           
 23851                           ; BSR set to: 0
 23852                           ;incstack = 0
 23853  014E66  0E00               	movlw	0
 23854  014E68  0100               	movlb	0	; () banked
 23855  014E6A  6F8F               	movwf	_lBufferX& (0+255),b
 23856                           
 23857                           ;Console.c: 161: lBufferY = 0;
 23858  014E6C  0E00               	movlw	0
 23859  014E6E  0100               	movlb	0	; () banked
 23860  014E70  6F8E               	movwf	_lBufferY& (0+255),b
 23861                           
 23862                           ;Console.c: 163: UINT8 x, y;
 23863                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 23864  014E72  0E00               	movlw	0
 23865  014E74  0100               	movlb	0	; () banked
 23866  014E76  6FBC               	movwf	Console_Init@x& (0+255),b
 23867  014E78                     l14369:
 23868                           
 23869                           ; BSR set to: 0
 23870  014E78  0E13               	movlw	19
 23871  014E7A  0100               	movlb	0	; () banked
 23872  014E7C  65BC               	cpfsgt	Console_Init@x& (0+255),b
 23873  014E7E  D001               	goto	l976
 23874  014E80  0012               	return	
 23875  014E82                     l976:
 23876                           
 23877                           ; BSR set to: 0
 23878                           ;Console.c: 165: {
 23879                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 23880                           
 23881                           ; BSR set to: 0
 23882  014E82  0E00               	movlw	0
 23883  014E84  0100               	movlb	0	; () banked
 23884  014E86  6FBD               	movwf	Console_Init@y& (0+255),b
 23885  014E88                     l14375:
 23886                           
 23887                           ; BSR set to: 0
 23888  014E88  0E0E               	movlw	14
 23889  014E8A  0100               	movlb	0	; () banked
 23890  014E8C  65BD               	cpfsgt	Console_Init@y& (0+255),b
 23891  014E8E  D001               	goto	l978
 23892  014E90  D02C               	goto	u11170
 23893  014E92                     l978:
 23894                           
 23895                           ; BSR set to: 0
 23896                           ;Console.c: 167: {
 23897                           ;Console.c: 168: lBuffer[y][x] = '\0';
 23898                           
 23899                           ; BSR set to: 0
 23900  014E92  0100               	movlb	0	; () banked
 23901  014E94  51BD               	movf	Console_Init@y& (0+255),w,b
 23902  014E96  0D14               	mullw	20
 23903  014E98  0EAA               	movlw	low _lBuffer
 23904  014E9A  0100               	movlb	0	; () banked
 23905  014E9C  6FBA               	movwf	??_Console_Init& (0+255),b
 23906  014E9E  0E04               	movlw	high _lBuffer
 23907  014EA0  0100               	movlb	0	; () banked
 23908  014EA2  6FBB               	movwf	(??_Console_Init+1)& (0+255),b
 23909  014EA4  50F3               	movf	prodl,w,c
 23910  014EA6  0100               	movlb	0	; () banked
 23911  014EA8  27BA               	addwf	??_Console_Init& (0+255),f,b
 23912  014EAA  50F4               	movf	prodh,w,c
 23913  014EAC  0100               	movlb	0	; () banked
 23914  014EAE  23BB               	addwfc	(??_Console_Init+1)& (0+255),f,b
 23915  014EB0  0100               	movlb	0	; () banked
 23916  014EB2  51BC               	movf	Console_Init@x& (0+255),w,b
 23917  014EB4  0D01               	mullw	1
 23918  014EB6  50F3               	movf	prodl,w,c
 23919  014EB8  0100               	movlb	0	; () banked
 23920  014EBA  25BA               	addwf	??_Console_Init& (0+255),w,b
 23921  014EBC  6ED9               	movwf	fsr2l,c
 23922  014EBE  50F4               	movf	prodh,w,c
 23923  014EC0  0100               	movlb	0	; () banked
 23924  014EC2  21BB               	addwfc	(??_Console_Init+1)& (0+255),w,b
 23925  014EC4  6EDA               	movwf	fsr2h,c
 23926  014EC6  0E00               	movlw	0
 23927  014EC8  6EDF               	movwf	indf2,c
 23928                           
 23929                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 23930  014ECA  0100               	movlb	0	; () banked
 23931  014ECC  51BD               	movf	Console_Init@y& (0+255),w,b
 23932  014ECE  0D02               	mullw	2
 23933  014ED0  0E00               	movlw	low _lCBuffer
 23934  014ED2  24F3               	addwf	prodl,w,c
 23935  014ED4  6ED9               	movwf	fsr2l,c
 23936  014ED6  0E03               	movlw	high _lCBuffer
 23937  014ED8  20F4               	addwfc	prodh,w,c
 23938  014EDA  6EDA               	movwf	fsr2h,c
 23939  014EDC  0EFF               	movlw	255
 23940  014EDE  6EDE               	movwf	postinc2,c
 23941  014EE0  0EFF               	movlw	255
 23942  014EE2  6EDD               	movwf	postdec2,c
 23943                           
 23944                           ; BSR set to: 0
 23945  014EE4  0100               	movlb	0	; () banked
 23946  014EE6  2BBD               	incf	Console_Init@y& (0+255),f,b
 23947  014EE8  D7CF               	goto	l14375
 23948  014EEA                     u11170:
 23949                           
 23950                           ; BSR set to: 0
 23951                           
 23952                           ; BSR set to: 0
 23953  014EEA  0100               	movlb	0	; () banked
 23954  014EEC  2BBC               	incf	Console_Init@x& (0+255),f,b
 23955  014EEE  D7C4               	goto	l14369
 23956  014EF0                     __end_of_Console_Init:
 23957                           	opt stack 0
 23958                           tosu	equ	0xFFF
 23959                           tosh	equ	0xFFE
 23960                           tosl	equ	0xFFD
 23961                           pclath	equ	0xFFA
 23962                           tblptru	equ	0xFF8
 23963                           tblptrh	equ	0xFF7
 23964                           tblptrl	equ	0xFF6
 23965                           tablat	equ	0xFF5
 23966                           prodh	equ	0xFF4
 23967                           prodl	equ	0xFF3
 23968                           intcon	equ	0xFF2
 23969                           postinc0	equ	0xFEE
 23970                           wreg	equ	0xFE8
 23971                           indf1	equ	0xFE7
 23972                           postdec1	equ	0xFE5
 23973                           fsr1h	equ	0xFE2
 23974                           fsr1l	equ	0xFE1
 23975                           indf2	equ	0xFDF
 23976                           postinc2	equ	0xFDE
 23977                           postdec2	equ	0xFDD
 23978                           plusw2	equ	0xFDB
 23979                           fsr2h	equ	0xFDA
 23980                           fsr2l	equ	0xFD9
 23981                           status	equ	0xFD8
 23982                           
 23983 ;; *************** function _ADC_Start *****************
 23984 ;; Defined at:
 23985 ;;		line 114 in file "Library/ADC.c"
 23986 ;; Parameters:    Size  Location     Type
 23987 ;;  pInput          2    2[BANK0 ] PTR struct ADC
 23988 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 23989 ;;		 -> NULL(0), 
 23990 ;; Auto vars:     Size  Location     Type
 23991 ;;		None
 23992 ;; Return value:  Size  Location     Type
 23993 ;;                  1    wreg      void 
 23994 ;; Registers used:
 23995 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 23996 ;; Tracked objects:
 23997 ;;		On entry : 0/0
 23998 ;;		On exit  : 0/0
 23999 ;;		Unchanged: 0/0
 24000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24001 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24002 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24003 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24004 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24005 ;;Total ram usage:        4 bytes
 24006 ;; Hardware stack levels used:    1
 24007 ;; Hardware stack levels required when called:    8
 24008 ;; This function calls:
 24009 ;;		_ADC_Off
 24010 ;;		_ADC_On
 24011 ;;		_ADC_SetChannel
 24012 ;; This function is called by:
 24013 ;;		_init
 24014 ;;		_findClosestWall
 24015 ;;		_mode1
 24016 ;;		_FunctADC
 24017 ;; This function uses a non-reentrant model
 24018 ;;
 24019                           
 24020                           	psect	text117
 24021  014F7A                     __ptext117:
 24022                           	opt stack 0
 24023  014F7A                     _ADC_Start:
 24024                           	opt stack 20
 24025                           
 24026                           ;ADC.c: 117: if ((ADCON0bits.GODONE))
 24027                           
 24028                           ; BSR set to: 0
 24029                           ;incstack = 0
 24030  014F7A  B2C2               	btfsc	4034,1,c	;volatile
 24031  014F7C  0012               	return	
 24032  014F7E                     
 24033                           ;ADC.c: 128: {
 24034                           ;ADC.c: 129: ADC_Off();
 24035                           
 24036                           ;ADC.c: 127: for(;;)
 24037  014F7E  EC75  F0B3         	call	_ADC_Off	;wreg free
 24038                           
 24039                           ;ADC.c: 130: ADC_SetChannel(pInput->mChannel);
 24040  014F82  C0BC  FFD9         	movff	ADC_Start@pInput,fsr2l
 24041  014F86  C0BD  FFDA         	movff	ADC_Start@pInput+1,fsr2h
 24042  014F8A  50DF               	movf	indf2,w,c
 24043  014F8C  EC67  F0B2         	call	_ADC_SetChannel
 24044                           
 24045                           ;ADC.c: 131: ADC_On();
 24046  014F90  EC83  F0B3         	call	_ADC_On	;wreg free
 24047                           
 24048                           ;ADC.c: 134: (ADCON0bits.GO) = 1;
 24049  014F94  82C2               	bsf	4034,1,c	;volatile
 24050  014F96  B2C2               	btfsc	4034,1,c	;volatile
 24051  014F98  D7FE               	goto	l1280
 24052                           
 24053                           ;ADC.c: 138: pInput->mValue = (ADRESH << 8) | ADRESL;
 24054  014F9A  50C3               	movf	4035,w,c	;volatile
 24055  014F9C  CFC4 F0BE          	movff	4036,??_ADC_Start	;volatile
 24056  014FA0  0100               	movlb	0	; () banked
 24057  014FA2  6BBF               	clrf	(??_ADC_Start+1)& (0+255),b
 24058  014FA4  C0BE  F0BF         	movff	??_ADC_Start,??_ADC_Start+1
 24059  014FA8  0100               	movlb	0	; () banked
 24060  014FAA  6BBE               	clrf	??_ADC_Start& (0+255),b
 24061  014FAC  0100               	movlb	0	; () banked
 24062  014FAE  13BE               	iorwf	??_ADC_Start& (0+255),f,b
 24063  014FB0  0E00               	movlw	0
 24064  014FB2  13BF               	iorwf	(??_ADC_Start+1)& (0+255),f,b
 24065  014FB4  0100               	movlb	0	; () banked
 24066  014FB6  EE20 F001          	lfsr	2,1
 24067  014FBA  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24068  014FBC  26D9               	addwf	fsr2l,f,c
 24069  014FBE  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24070  014FC0  22DA               	addwfc	fsr2h,f,c
 24071  014FC2  C0BE  FFDE         	movff	??_ADC_Start,postinc2
 24072  014FC6  C0BF  FFDD         	movff	??_ADC_Start+1,postdec2
 24073                           
 24074                           ;ADC.c: 141: if (pInput->mNext == 0)
 24075  014FCA  0100               	movlb	0	; () banked
 24076  014FCC  EE20 F003          	lfsr	2,3
 24077  014FD0  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24078  014FD2  26D9               	addwf	fsr2l,f,c
 24079  014FD4  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24080  014FD6  22DA               	addwfc	fsr2h,f,c
 24081  014FD8  50DE               	movf	postinc2,w,c
 24082  014FDA  10DE               	iorwf	postinc2,w,c
 24083  014FDC  B4D8               	btfsc	status,2,c
 24084  014FDE  D00C               	goto	l1283
 24085                           
 24086                           ; BSR set to: 0
 24087                           ;ADC.c: 145: pInput = pInput->mNext;
 24088                           
 24089                           ; BSR set to: 0
 24090                           
 24091                           ; BSR set to: 0
 24092                           ;ADC.c: 142: break;
 24093  014FE0  0100               	movlb	0	; () banked
 24094  014FE2  EE20 F003          	lfsr	2,3
 24095  014FE6  51BC               	movf	ADC_Start@pInput& (0+255),w,b
 24096  014FE8  26D9               	addwf	fsr2l,f,c
 24097  014FEA  51BD               	movf	(ADC_Start@pInput+1)& (0+255),w,b
 24098  014FEC  22DA               	addwfc	fsr2h,f,c
 24099  014FEE  CFDE F0BC          	movff	postinc2,ADC_Start@pInput
 24100  014FF2  CFDD F0BD          	movff	postdec2,ADC_Start@pInput+1
 24101                           
 24102                           ;ADC.c: 146: }
 24103  014FF6  D7C3               	goto	l1276
 24104  014FF8                     l1283:
 24105                           
 24106                           ; BSR set to: 0
 24107                           ;ADC.c: 147: ADC_Off();
 24108                           
 24109                           ; BSR set to: 0
 24110  014FF8  EC75  F0B3         	call	_ADC_Off	;wreg free
 24111  014FFC  0012               	return		;funcret
 24112  014FFE                     __end_of_ADC_Start:
 24113                           	opt stack 0
 24114                           tosu	equ	0xFFF
 24115                           tosh	equ	0xFFE
 24116                           tosl	equ	0xFFD
 24117                           pclath	equ	0xFFA
 24118                           tblptru	equ	0xFF8
 24119                           tblptrh	equ	0xFF7
 24120                           tblptrl	equ	0xFF6
 24121                           tablat	equ	0xFF5
 24122                           prodh	equ	0xFF4
 24123                           prodl	equ	0xFF3
 24124                           intcon	equ	0xFF2
 24125                           postinc0	equ	0xFEE
 24126                           wreg	equ	0xFE8
 24127                           indf1	equ	0xFE7
 24128                           postdec1	equ	0xFE5
 24129                           fsr1h	equ	0xFE2
 24130                           fsr1l	equ	0xFE1
 24131                           indf2	equ	0xFDF
 24132                           postinc2	equ	0xFDE
 24133                           postdec2	equ	0xFDD
 24134                           plusw2	equ	0xFDB
 24135                           fsr2h	equ	0xFDA
 24136                           fsr2l	equ	0xFD9
 24137                           status	equ	0xFD8
 24138                           
 24139 ;; *************** function _ADC_Init *****************
 24140 ;; Defined at:
 24141 ;;		line 19 in file "Library/ADC.c"
 24142 ;; Parameters:    Size  Location     Type
 24143 ;;  pInput          2    4[BANK0 ] PTR struct ADC
 24144 ;;		 -> ADC_AN3(5), ADC_AN2(5), ADC_AN1(5), ADC_AN0(5), 
 24145 ;;  pChannel        1    6[BANK0 ] enum E6742
 24146 ;; Auto vars:     Size  Location     Type
 24147 ;;		None
 24148 ;; Return value:  Size  Location     Type
 24149 ;;                  1    wreg      void 
 24150 ;; Registers used:
 24151 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 24152 ;; Tracked objects:
 24153 ;;		On entry : 0/0
 24154 ;;		On exit  : 0/0
 24155 ;;		Unchanged: 0/0
 24156 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24157 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24158 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24159 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24160 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24161 ;;Total ram usage:        3 bytes
 24162 ;; Hardware stack levels used:    1
 24163 ;; Hardware stack levels required when called:    9
 24164 ;; This function calls:
 24165 ;;		_ADC_Calibrate
 24166 ;;		_ADC_ClockDivision
 24167 ;;		_ADC_ConversionTime
 24168 ;;		_ADC_SetChannel
 24169 ;;		_ADC_SetupIO
 24170 ;; This function is called by:
 24171 ;;		_init
 24172 ;;		_FunctInitADC
 24173 ;; This function uses a non-reentrant model
 24174 ;;
 24175                           
 24176                           	psect	text118
 24177  01517E                     __ptext118:
 24178                           	opt stack 0
 24179  01517E                     _ADC_Init:
 24180                           	opt stack 20
 24181                           
 24182                           ;ADC.c: 21: if(pInput==(void*)0)
 24183                           
 24184                           ;incstack = 0
 24185  01517E  0100               	movlb	0	; () banked
 24186  015180  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24187  015182  0100               	movlb	0	; () banked
 24188  015184  11BF               	iorwf	(ADC_Init@pInput+1)& (0+255),w,b
 24189  015186  B4D8               	btfsc	status,2,c
 24190  015188  0012               	return	
 24191                           
 24192                           ; BSR set to: 0
 24193                           ;ADC.c: 25: lCurrent = pInput;
 24194                           
 24195                           ; BSR set to: 0
 24196                           
 24197                           ; BSR set to: 0
 24198                           ;ADC.c: 22: return;
 24199  01518A  C0BE  F081         	movff	ADC_Init@pInput,_lCurrent
 24200  01518E  C0BF  F082         	movff	ADC_Init@pInput+1,_lCurrent+1
 24201                           
 24202                           ; BSR set to: 0
 24203                           ;ADC.c: 27: pInput->mChannel = pChannel;
 24204  015192  C0BE  FFD9         	movff	ADC_Init@pInput,fsr2l
 24205  015196  C0BF  FFDA         	movff	ADC_Init@pInput+1,fsr2h
 24206  01519A  C0C0  FFDF         	movff	ADC_Init@pChannel,indf2
 24207                           
 24208                           ;ADC.c: 28: pInput->mNext = (ADCPtr)0;
 24209  01519E  0100               	movlb	0	; () banked
 24210  0151A0  EE20 F003          	lfsr	2,3
 24211  0151A4  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24212  0151A6  26D9               	addwf	fsr2l,f,c
 24213  0151A8  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24214  0151AA  22DA               	addwfc	fsr2h,f,c
 24215  0151AC  0E00               	movlw	0
 24216  0151AE  6EDE               	movwf	postinc2,c
 24217  0151B0  0E00               	movlw	0
 24218  0151B2  6EDD               	movwf	postdec2,c
 24219                           
 24220                           ;ADC.c: 29: pInput->mValue = 0;
 24221  0151B4  0100               	movlb	0	; () banked
 24222  0151B6  EE20 F001          	lfsr	2,1
 24223  0151BA  51BE               	movf	ADC_Init@pInput& (0+255),w,b
 24224  0151BC  26D9               	addwf	fsr2l,f,c
 24225  0151BE  51BF               	movf	(ADC_Init@pInput+1)& (0+255),w,b
 24226  0151C0  22DA               	addwfc	fsr2h,f,c
 24227  0151C2  0E00               	movlw	0
 24228  0151C4  6EDE               	movwf	postinc2,c
 24229  0151C6  0E00               	movlw	0
 24230  0151C8  6EDD               	movwf	postdec2,c
 24231                           
 24232                           ; BSR set to: 0
 24233                           ;ADC.c: 32: ADC_SetChannel(pChannel);
 24234  0151CA  0100               	movlb	0	; () banked
 24235  0151CC  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24236  0151CE  EC67  F0B2         	call	_ADC_SetChannel
 24237                           
 24238                           ;ADC.c: 35: ADCON0bits.VCFG1 = 0;
 24239  0151D2  9EC2               	bcf	4034,7,c	;volatile
 24240                           
 24241                           ;ADC.c: 36: ADCON0bits.VCFG0 = 0;
 24242  0151D4  9CC2               	bcf	4034,6,c	;volatile
 24243                           
 24244                           ;ADC.c: 39: ADCON1bits.ADFM = 1;
 24245  0151D6  8EC1               	bsf	4033,7,c	;volatile
 24246                           
 24247                           ;ADC.c: 40: ADCON1bits.ADCAL = 1;
 24248  0151D8  8CC1               	bsf	4033,6,c	;volatile
 24249                           
 24250                           ;ADC.c: 43: ADC_ConversionTime(12);
 24251  0151DA  0E0C               	movlw	12
 24252  0151DC  EC58  F0AE         	call	_ADC_ConversionTime
 24253                           
 24254                           ;ADC.c: 47: ADC_ClockDivision(16);
 24255  0151E0  0E10               	movlw	16
 24256  0151E2  EC78  F0A7         	call	_ADC_ClockDivision
 24257                           
 24258                           ;ADC.c: 50: ADC_SetupIO(pChannel);
 24259  0151E6  0100               	movlb	0	; () banked
 24260  0151E8  51C0               	movf	ADC_Init@pChannel& (0+255),w,b
 24261  0151EA  ECB0  F0B0         	call	_ADC_SetupIO
 24262                           
 24263                           ;ADC.c: 58: ADC_Initialised = 1;
 24264  0151EE  0E01               	movlw	1
 24265  0151F0  6E3C               	movwf	_ADC_Initialised,c
 24266                           
 24267                           ;ADC.c: 61: ADC_Calibrate();
 24268  0151F2  ECF7  F0B2         	call	_ADC_Calibrate	;wreg free
 24269  0151F6  0012               	return		;funcret
 24270  0151F8                     __end_of_ADC_Init:
 24271                           	opt stack 0
 24272                           tosu	equ	0xFFF
 24273                           tosh	equ	0xFFE
 24274                           tosl	equ	0xFFD
 24275                           pclath	equ	0xFFA
 24276                           tblptru	equ	0xFF8
 24277                           tblptrh	equ	0xFF7
 24278                           tblptrl	equ	0xFF6
 24279                           tablat	equ	0xFF5
 24280                           prodh	equ	0xFF4
 24281                           prodl	equ	0xFF3
 24282                           intcon	equ	0xFF2
 24283                           postinc0	equ	0xFEE
 24284                           wreg	equ	0xFE8
 24285                           indf1	equ	0xFE7
 24286                           postdec1	equ	0xFE5
 24287                           fsr1h	equ	0xFE2
 24288                           fsr1l	equ	0xFE1
 24289                           indf2	equ	0xFDF
 24290                           postinc2	equ	0xFDE
 24291                           postdec2	equ	0xFDD
 24292                           plusw2	equ	0xFDB
 24293                           fsr2h	equ	0xFDA
 24294                           fsr2l	equ	0xFD9
 24295                           status	equ	0xFD8
 24296                           
 24297 ;; *************** function _ADC_SetupIO *****************
 24298 ;; Defined at:
 24299 ;;		line 150 in file "Library/ADC.c"
 24300 ;; Parameters:    Size  Location     Type
 24301 ;;  pChannel        1    wreg     enum E6742
 24302 ;; Auto vars:     Size  Location     Type
 24303 ;;  pChannel        1    2[BANK0 ] enum E6742
 24304 ;;  MASK            1    3[BANK0 ] unsigned char 
 24305 ;; Return value:  Size  Location     Type
 24306 ;;                  1    wreg      void 
 24307 ;; Registers used:
 24308 ;;		wreg, status,2, status,0
 24309 ;; Tracked objects:
 24310 ;;		On entry : 0/0
 24311 ;;		On exit  : 0/0
 24312 ;;		Unchanged: 0/0
 24313 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24314 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24315 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24316 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24317 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24318 ;;Total ram usage:        4 bytes
 24319 ;; Hardware stack levels used:    1
 24320 ;; Hardware stack levels required when called:    7
 24321 ;; This function calls:
 24322 ;;		Nothing
 24323 ;; This function is called by:
 24324 ;;		_ADC_Init
 24325 ;; This function uses a non-reentrant model
 24326 ;;
 24327                           
 24328                           	psect	text119
 24329  016160                     __ptext119:
 24330                           	opt stack 0
 24331  016160                     _ADC_SetupIO:
 24332                           	opt stack 21
 24333                           
 24334                           ;incstack = 0
 24335                           ;ADC_SetupIO@pChannel stored from wreg
 24336  016160  0100               	movlb	0	; () banked
 24337  016162  6FBC               	movwf	ADC_SetupIO@pChannel& (0+255),b
 24338                           
 24339                           ;ADC.c: 152: UINT8 MASK = ~(1 << pChannel);
 24340  016164  C0BC  F0BA         	movff	ADC_SetupIO@pChannel,??_ADC_SetupIO
 24341  016168  0E01               	movlw	1
 24342  01616A  0100               	movlb	0	; () banked
 24343  01616C  6FBB               	movwf	(??_ADC_SetupIO+1)& (0+255),b
 24344  01616E  0100               	movlb	0	; () banked
 24345  016170  2BBA               	incf	??_ADC_SetupIO& (0+255),f,b
 24346  016172  D003               	goto	u10824
 24347  016174                     u10825:
 24348  016174  0100               	movlb	0	; () banked
 24349  016176  90D8               	bcf	status,0,c
 24350  016178  37BB               	rlcf	(??_ADC_SetupIO+1)& (0+255),f,b
 24351  01617A                     u10824:
 24352  01617A  0100               	movlb	0	; () banked
 24353  01617C  2FBA               	decfsz	??_ADC_SetupIO& (0+255),f,b
 24354  01617E  D7FA               	goto	u10825
 24355  016180  0100               	movlb	0	; () banked
 24356  016182  51BB               	movf	(??_ADC_SetupIO+1)& (0+255),w,b
 24357  016184  0AFF               	xorlw	255
 24358  016186  0100               	movlb	0	; () banked
 24359  016188  6FBD               	movwf	ADC_SetupIO@MASK& (0+255),b
 24360                           
 24361                           ;ADC.c: 153: ANCON0 &= MASK;
 24362  01618A  0100               	movlb	0	; () banked
 24363  01618C  51BD               	movf	ADC_SetupIO@MASK& (0+255),w,b
 24364  01618E  16C1               	andwf	4033,f,c	;volatile
 24365                           
 24366                           ; BSR set to: 0
 24367  016190  0012               	return		;funcret
 24368  016192                     __end_of_ADC_SetupIO:
 24369                           	opt stack 0
 24370                           tosu	equ	0xFFF
 24371                           tosh	equ	0xFFE
 24372                           tosl	equ	0xFFD
 24373                           pclath	equ	0xFFA
 24374                           tblptru	equ	0xFF8
 24375                           tblptrh	equ	0xFF7
 24376                           tblptrl	equ	0xFF6
 24377                           tablat	equ	0xFF5
 24378                           prodh	equ	0xFF4
 24379                           prodl	equ	0xFF3
 24380                           intcon	equ	0xFF2
 24381                           postinc0	equ	0xFEE
 24382                           wreg	equ	0xFE8
 24383                           indf1	equ	0xFE7
 24384                           postdec1	equ	0xFE5
 24385                           fsr1h	equ	0xFE2
 24386                           fsr1l	equ	0xFE1
 24387                           indf2	equ	0xFDF
 24388                           postinc2	equ	0xFDE
 24389                           postdec2	equ	0xFDD
 24390                           plusw2	equ	0xFDB
 24391                           fsr2h	equ	0xFDA
 24392                           fsr2l	equ	0xFD9
 24393                           status	equ	0xFD8
 24394                           
 24395 ;; *************** function _ADC_SetChannel *****************
 24396 ;; Defined at:
 24397 ;;		line 155 in file "Library/ADC.c"
 24398 ;; Parameters:    Size  Location     Type
 24399 ;;  pChannel        1    wreg     enum E6742
 24400 ;; Auto vars:     Size  Location     Type
 24401 ;;  pChannel        1    1[BANK0 ] enum E6742
 24402 ;; Return value:  Size  Location     Type
 24403 ;;                  1    wreg      void 
 24404 ;; Registers used:
 24405 ;;		wreg, status,2, status,0
 24406 ;; Tracked objects:
 24407 ;;		On entry : 0/0
 24408 ;;		On exit  : 0/0
 24409 ;;		Unchanged: 0/0
 24410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24412 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24413 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24414 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24415 ;;Total ram usage:        2 bytes
 24416 ;; Hardware stack levels used:    1
 24417 ;; Hardware stack levels required when called:    7
 24418 ;; This function calls:
 24419 ;;		Nothing
 24420 ;; This function is called by:
 24421 ;;		_ADC_Init
 24422 ;;		_ADC_Start
 24423 ;;		_ADC_ISR
 24424 ;;		_ADC_Sample
 24425 ;; This function uses a non-reentrant model
 24426 ;;
 24427                           
 24428                           	psect	text120
 24429  0164CE                     __ptext120:
 24430                           	opt stack 0
 24431  0164CE                     _ADC_SetChannel:
 24432                           	opt stack 20
 24433                           
 24434                           ; BSR set to: 0
 24435                           ;incstack = 0
 24436                           ;ADC_SetChannel@pChannel stored from wreg
 24437  0164CE  0100               	movlb	0	; () banked
 24438  0164D0  6FBB               	movwf	ADC_SetChannel@pChannel& (0+255),b
 24439                           
 24440                           ;ADC.c: 157: ADCON0bits.CHS = (UINT8)pChannel;
 24441  0164D2  C0BB  F0BA         	movff	ADC_SetChannel@pChannel,??_ADC_SetChannel
 24442  0164D6  0100               	movlb	0	; () banked
 24443  0164D8  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24444  0164DA  47BA               	rlncf	??_ADC_SetChannel& (0+255),f,b
 24445  0164DC  50C2               	movf	4034,w,c	;volatile
 24446  0164DE  0100               	movlb	0	; () banked
 24447  0164E0  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24448  0164E2  0BC3               	andlw	-61
 24449  0164E4  19BA               	xorwf	??_ADC_SetChannel& (0+255),w,b
 24450  0164E6  6EC2               	movwf	4034,c	;volatile
 24451                           
 24452                           ; BSR set to: 0
 24453  0164E8  0012               	return		;funcret
 24454  0164EA                     __end_of_ADC_SetChannel:
 24455                           	opt stack 0
 24456                           tosu	equ	0xFFF
 24457                           tosh	equ	0xFFE
 24458                           tosl	equ	0xFFD
 24459                           pclath	equ	0xFFA
 24460                           tblptru	equ	0xFF8
 24461                           tblptrh	equ	0xFF7
 24462                           tblptrl	equ	0xFF6
 24463                           tablat	equ	0xFF5
 24464                           prodh	equ	0xFF4
 24465                           prodl	equ	0xFF3
 24466                           intcon	equ	0xFF2
 24467                           postinc0	equ	0xFEE
 24468                           wreg	equ	0xFE8
 24469                           indf1	equ	0xFE7
 24470                           postdec1	equ	0xFE5
 24471                           fsr1h	equ	0xFE2
 24472                           fsr1l	equ	0xFE1
 24473                           indf2	equ	0xFDF
 24474                           postinc2	equ	0xFDE
 24475                           postdec2	equ	0xFDD
 24476                           plusw2	equ	0xFDB
 24477                           fsr2h	equ	0xFDA
 24478                           fsr2l	equ	0xFD9
 24479                           status	equ	0xFD8
 24480                           
 24481 ;; *************** function _ADC_ConversionTime *****************
 24482 ;; Defined at:
 24483 ;;		line 199 in file "Library/ADC.c"
 24484 ;; Parameters:    Size  Location     Type
 24485 ;;  pCount          1    wreg     unsigned char 
 24486 ;; Auto vars:     Size  Location     Type
 24487 ;;  pCount          1    1[BANK0 ] unsigned char 
 24488 ;; Return value:  Size  Location     Type
 24489 ;;                  1    wreg      void 
 24490 ;; Registers used:
 24491 ;;		wreg, status,2, status,0
 24492 ;; Tracked objects:
 24493 ;;		On entry : 0/0
 24494 ;;		On exit  : 0/0
 24495 ;;		Unchanged: 0/0
 24496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24497 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24498 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24499 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24500 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24501 ;;Total ram usage:        2 bytes
 24502 ;; Hardware stack levels used:    1
 24503 ;; Hardware stack levels required when called:    7
 24504 ;; This function calls:
 24505 ;;		Nothing
 24506 ;; This function is called by:
 24507 ;;		_ADC_Init
 24508 ;; This function uses a non-reentrant model
 24509 ;;
 24510                           
 24511                           	psect	text121
 24512  015CB0                     __ptext121:
 24513                           	opt stack 0
 24514  015CB0                     _ADC_ConversionTime:
 24515                           	opt stack 21
 24516                           
 24517                           ; BSR set to: 0
 24518                           ;incstack = 0
 24519                           ;ADC_ConversionTime@pCount stored from wreg
 24520  015CB0  0100               	movlb	0	; () banked
 24521  015CB2  6FBB               	movwf	ADC_ConversionTime@pCount& (0+255),b
 24522                           
 24523                           ;ADC.c: 201: if (pCount == 10)
 24524  015CB4  0E0A               	movlw	10
 24525  015CB6  0100               	movlb	0	; () banked
 24526  015CB8  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24527  015CBA  B4D8               	btfsc	status,2,c
 24528  015CBC  D00A               	goto	u10790
 24529                           
 24530                           ; BSR set to: 0
 24531                           ;ADC.c: 203: else if (pCount == 14)
 24532                           
 24533                           ; BSR set to: 0
 24534                           
 24535                           ; BSR set to: 0
 24536                           ;ADC.c: 202: pCount -= 2;
 24537  015CBE  0E0E               	movlw	14
 24538  015CC0  0100               	movlb	0	; () banked
 24539  015CC2  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24540  015CC4  B4D8               	btfsc	status,2,c
 24541  015CC6  D005               	goto	u10790
 24542                           
 24543                           ; BSR set to: 0
 24544                           ;ADC.c: 205: else if (pCount == 18)
 24545                           
 24546                           ; BSR set to: 0
 24547                           
 24548                           ; BSR set to: 0
 24549                           ;ADC.c: 204: pCount -= 2;
 24550  015CC8  0E12               	movlw	18
 24551  015CCA  0100               	movlb	0	; () banked
 24552  015CCC  19BB               	xorwf	ADC_ConversionTime@pCount& (0+255),w,b
 24553  015CCE  A4D8               	btfss	status,2,c
 24554  015CD0  D003               	goto	l1313
 24555  015CD2                     u10790:
 24556                           
 24557                           ; BSR set to: 0
 24558                           ;ADC.c: 206: pCount -= 2;
 24559  015CD2  0E02               	movlw	2
 24560  015CD4  0100               	movlb	0	; () banked
 24561  015CD6  5FBB               	subwf	ADC_ConversionTime@pCount& (0+255),f,b
 24562  015CD8                     l1313:
 24563                           
 24564                           ; BSR set to: 0
 24565                           ;ADC.c: 208: pCount <<= 1;
 24566                           
 24567                           ; BSR set to: 0
 24568                           
 24569                           ; BSR set to: 0
 24570  015CD8  0100               	movlb	0	; () banked
 24571  015CDA  90D8               	bcf	status,0,c
 24572  015CDC  37BB               	rlcf	ADC_ConversionTime@pCount& (0+255),f,b
 24573                           
 24574                           ;ADC.c: 209: ADCON1bits.ACQT = pCount;
 24575  015CDE  C0BB  F0BA         	movff	ADC_ConversionTime@pCount,??_ADC_ConversionTime
 24576  015CE2  0100               	movlb	0	; () banked
 24577  015CE4  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24578  015CE6  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24579  015CE8  47BA               	rlncf	??_ADC_ConversionTime& (0+255),f,b
 24580  015CEA  50C1               	movf	4033,w,c	;volatile
 24581  015CEC  0100               	movlb	0	; () banked
 24582  015CEE  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24583  015CF0  0BC7               	andlw	-57
 24584  015CF2  19BA               	xorwf	??_ADC_ConversionTime& (0+255),w,b
 24585  015CF4  6EC1               	movwf	4033,c	;volatile
 24586                           
 24587                           ; BSR set to: 0
 24588  015CF6  0012               	return		;funcret
 24589  015CF8                     __end_of_ADC_ConversionTime:
 24590                           	opt stack 0
 24591                           tosu	equ	0xFFF
 24592                           tosh	equ	0xFFE
 24593                           tosl	equ	0xFFD
 24594                           pclath	equ	0xFFA
 24595                           tblptru	equ	0xFF8
 24596                           tblptrh	equ	0xFF7
 24597                           tblptrl	equ	0xFF6
 24598                           tablat	equ	0xFF5
 24599                           prodh	equ	0xFF4
 24600                           prodl	equ	0xFF3
 24601                           intcon	equ	0xFF2
 24602                           postinc0	equ	0xFEE
 24603                           wreg	equ	0xFE8
 24604                           indf1	equ	0xFE7
 24605                           postdec1	equ	0xFE5
 24606                           fsr1h	equ	0xFE2
 24607                           fsr1l	equ	0xFE1
 24608                           indf2	equ	0xFDF
 24609                           postinc2	equ	0xFDE
 24610                           postdec2	equ	0xFDD
 24611                           plusw2	equ	0xFDB
 24612                           fsr2h	equ	0xFDA
 24613                           fsr2l	equ	0xFD9
 24614                           status	equ	0xFD8
 24615                           
 24616 ;; *************** function _ADC_ClockDivision *****************
 24617 ;; Defined at:
 24618 ;;		line 159 in file "Library/ADC.c"
 24619 ;; Parameters:    Size  Location     Type
 24620 ;;  pDivide         1    wreg     unsigned char 
 24621 ;; Auto vars:     Size  Location     Type
 24622 ;;  pDivide         1    0[BANK0 ] unsigned char 
 24623 ;;  unfound         1    2[BANK0 ] unsigned char 
 24624 ;;  reg             1    1[BANK0 ] unsigned char 
 24625 ;; Return value:  Size  Location     Type
 24626 ;;                  1    wreg      void 
 24627 ;; Registers used:
 24628 ;;		wreg, status,2, status,0
 24629 ;; Tracked objects:
 24630 ;;		On entry : 0/0
 24631 ;;		On exit  : 0/0
 24632 ;;		Unchanged: 0/0
 24633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24635 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24637 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24638 ;;Total ram usage:        3 bytes
 24639 ;; Hardware stack levels used:    1
 24640 ;; Hardware stack levels required when called:    7
 24641 ;; This function calls:
 24642 ;;		Nothing
 24643 ;; This function is called by:
 24644 ;;		_ADC_Init
 24645 ;; This function uses a non-reentrant model
 24646 ;;
 24647                           
 24648                           	psect	text122
 24649  014EF0                     __ptext122:
 24650                           	opt stack 0
 24651  014EF0                     _ADC_ClockDivision:
 24652                           	opt stack 21
 24653                           
 24654                           ; BSR set to: 0
 24655                           ;incstack = 0
 24656                           ;ADC_ClockDivision@pDivide stored from wreg
 24657  014EF0  0100               	movlb	0	; () banked
 24658  014EF2  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24659                           
 24660                           ;ADC.c: 161: UINT8 reg = 0;
 24661  014EF4  0E00               	movlw	0
 24662  014EF6  0100               	movlb	0	; () banked
 24663  014EF8  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24664                           
 24665                           ;ADC.c: 162: bool unfound = 1;
 24666  014EFA  0E01               	movlw	1
 24667  014EFC  D002               	goto	L15
 24668  014EFE                     
 24669                           ; BSR set to: 0
 24670                           ;ADC.c: 167: reg = 0;
 24671                           
 24672                           ; BSR set to: 0
 24673  014EFE  0E00               	movlw	0
 24674  014F00  D00C               	goto	L20
 24675  014F02                     L15:
 24676  014F02  0100               	movlb	0	; () banked
 24677  014F04  6FBC               	movwf	ADC_ClockDivision@unfound& (0+255),b
 24678                           
 24679                           ;ADC.c: 169: break;
 24680  014F06  D02D               	goto	l1296
 24681  014F08                     
 24682                           ; BSR set to: 0
 24683                           ;ADC.c: 171: reg = 0b100;
 24684                           
 24685                           ; BSR set to: 0
 24686  014F08  0E04               	movlw	4
 24687  014F0A  D007               	goto	L20
 24688  014F0C                     
 24689                           ; BSR set to: 0
 24690                           ;ADC.c: 175: reg = 0b001;
 24691                           
 24692                           ; BSR set to: 0
 24693  014F0C  0E01               	movlw	1
 24694  014F0E  D005               	goto	L20
 24695  014F10                     
 24696                           ; BSR set to: 0
 24697                           ;ADC.c: 179: reg = 0b101;
 24698                           
 24699                           ; BSR set to: 0
 24700  014F10  0E05               	movlw	5
 24701  014F12  D003               	goto	L20
 24702  014F14                     
 24703                           ; BSR set to: 0
 24704                           ;ADC.c: 183: reg = 0b010;
 24705                           
 24706                           ; BSR set to: 0
 24707  014F14  0E02               	movlw	2
 24708  014F16  D001               	goto	L20
 24709  014F18                     
 24710                           ; BSR set to: 0
 24711                           ;ADC.c: 187: reg = 0b110;
 24712                           
 24713                           ; BSR set to: 0
 24714  014F18  0E06               	movlw	6
 24715  014F1A                     L20:
 24716  014F1A  0100               	movlb	0	; () banked
 24717  014F1C  6FBB               	movwf	ADC_ClockDivision@reg& (0+255),b
 24718                           
 24719                           ;ADC.c: 188: unfound = 0;
 24720  014F1E  0E00               	movlw	0
 24721  014F20  D7F0               	goto	L15
 24722  014F22                     
 24723                           ; BSR set to: 0
 24724                           ;ADC.c: 191: if (pDivide > 2)
 24725                           
 24726                           ; BSR set to: 0
 24727  014F22  0E02               	movlw	2
 24728  014F24  0100               	movlb	0	; () banked
 24729  014F26  65BA               	cpfsgt	ADC_ClockDivision@pDivide& (0+255),b
 24730  014F28  D003               	goto	l1303
 24731                           
 24732                           ; BSR set to: 0
 24733                           ;ADC.c: 192: pDivide--;
 24734  014F2A  0100               	movlb	0	; () banked
 24735  014F2C  07BA               	decf	ADC_ClockDivision@pDivide& (0+255),f,b
 24736  014F2E  D019               	goto	l1296
 24737  014F30                     l1303:
 24738                           
 24739                           ; BSR set to: 0
 24740                           ;ADC.c: 193: else
 24741                           ;ADC.c: 194: pDivide = 2;
 24742                           
 24743                           ; BSR set to: 0
 24744  014F30  0E02               	movlw	2
 24745  014F32  0100               	movlb	0	; () banked
 24746  014F34  6FBA               	movwf	ADC_ClockDivision@pDivide& (0+255),b
 24747                           
 24748                           ; BSR set to: 0
 24749                           ;ADC.c: 195: };
 24750  014F36  D015               	goto	l1296
 24751  014F38                     
 24752                           ; BSR set to: 0
 24753                           
 24754                           ; BSR set to: 0
 24755  014F38  0100               	movlb	0	; () banked
 24756  014F3A  51BA               	movf	ADC_ClockDivision@pDivide& (0+255),w,b
 24757                           
 24758                           ; Switch size 1, requested type "space"
 24759                           ; Number of cases is 6, Range of values is 2 to 64
 24760                           ; switch strategies available:
 24761                           ; Name         Instructions Cycles
 24762                           ; simple_byte           19    10 (average)
 24763                           ;	Chosen strategy is simple_byte
 24764  014F3C  0A02               	xorlw	2	; case 2
 24765  014F3E  B4D8               	btfsc	status,2,c
 24766  014F40  D7DE               	goto	l1295
 24767  014F42  0A06               	xorlw	6	; case 4
 24768  014F44  B4D8               	btfsc	status,2,c
 24769  014F46  D7E0               	goto	l1297
 24770  014F48  0A0C               	xorlw	12	; case 8
 24771  014F4A  B4D8               	btfsc	status,2,c
 24772  014F4C  D7DF               	goto	l1298
 24773  014F4E  0A18               	xorlw	24	; case 16
 24774  014F50  B4D8               	btfsc	status,2,c
 24775  014F52  D7DE               	goto	l1299
 24776  014F54  0A30               	xorlw	48	; case 32
 24777  014F56  B4D8               	btfsc	status,2,c
 24778  014F58  D7DD               	goto	l1300
 24779  014F5A  0A60               	xorlw	96	; case 64
 24780  014F5C  B4D8               	btfsc	status,2,c
 24781  014F5E  D7DC               	goto	l1301
 24782  014F60  D7E0               	goto	l1302
 24783  014F62                     l1296:
 24784                           
 24785                           ; BSR set to: 0
 24786                           
 24787                           ; BSR set to: 0
 24788                           
 24789                           ; BSR set to: 0
 24790  014F62  0100               	movlb	0	; () banked
 24791  014F64  51BC               	movf	ADC_ClockDivision@unfound& (0+255),w,b
 24792  014F66  0100               	movlb	0	; () banked
 24793  014F68  A4D8               	btfss	status,2,c
 24794  014F6A  D7E6               	goto	l1294
 24795                           
 24796                           ; BSR set to: 0
 24797                           ;ADC.c: 197: ADCON1bits.ADCS = reg;
 24798                           
 24799                           ; BSR set to: 0
 24800  014F6C  50C1               	movf	4033,w,c	;volatile
 24801  014F6E  0100               	movlb	0	; () banked
 24802  014F70  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24803  014F72  0BF8               	andlw	-8
 24804  014F74  19BB               	xorwf	ADC_ClockDivision@reg& (0+255),w,b
 24805  014F76  6EC1               	movwf	4033,c	;volatile
 24806                           
 24807                           ; BSR set to: 0
 24808  014F78  0012               	return		;funcret
 24809  014F7A                     __end_of_ADC_ClockDivision:
 24810                           	opt stack 0
 24811                           tosu	equ	0xFFF
 24812                           tosh	equ	0xFFE
 24813                           tosl	equ	0xFFD
 24814                           pclath	equ	0xFFA
 24815                           tblptru	equ	0xFF8
 24816                           tblptrh	equ	0xFF7
 24817                           tblptrl	equ	0xFF6
 24818                           tablat	equ	0xFF5
 24819                           prodh	equ	0xFF4
 24820                           prodl	equ	0xFF3
 24821                           intcon	equ	0xFF2
 24822                           postinc0	equ	0xFEE
 24823                           wreg	equ	0xFE8
 24824                           indf1	equ	0xFE7
 24825                           postdec1	equ	0xFE5
 24826                           fsr1h	equ	0xFE2
 24827                           fsr1l	equ	0xFE1
 24828                           indf2	equ	0xFDF
 24829                           postinc2	equ	0xFDE
 24830                           postdec2	equ	0xFDD
 24831                           plusw2	equ	0xFDB
 24832                           fsr2h	equ	0xFDA
 24833                           fsr2l	equ	0xFD9
 24834                           status	equ	0xFD8
 24835                           
 24836 ;; *************** function _ADC_Calibrate *****************
 24837 ;; Defined at:
 24838 ;;		line 63 in file "Library/ADC.c"
 24839 ;; Parameters:    Size  Location     Type
 24840 ;;		None
 24841 ;; Auto vars:     Size  Location     Type
 24842 ;;		None
 24843 ;; Return value:  Size  Location     Type
 24844 ;;                  1    wreg      void 
 24845 ;; Registers used:
 24846 ;;		cstack
 24847 ;; Tracked objects:
 24848 ;;		On entry : 0/0
 24849 ;;		On exit  : 0/0
 24850 ;;		Unchanged: 0/0
 24851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24852 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24855 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24856 ;;Total ram usage:        0 bytes
 24857 ;; Hardware stack levels used:    1
 24858 ;; Hardware stack levels required when called:    8
 24859 ;; This function calls:
 24860 ;;		_ADC_Off
 24861 ;;		_ADC_On
 24862 ;; This function is called by:
 24863 ;;		_ADC_Init
 24864 ;; This function uses a non-reentrant model
 24865 ;;
 24866                           
 24867                           	psect	text123
 24868  0165EE                     __ptext123:
 24869                           	opt stack 0
 24870  0165EE                     _ADC_Calibrate:
 24871                           	opt stack 20
 24872                           
 24873                           ;ADC.c: 65: ADC_On();
 24874                           
 24875                           ; BSR set to: 0
 24876                           ;incstack = 0
 24877  0165EE  EC83  F0B3         	call	_ADC_On	;wreg free
 24878                           
 24879                           ;ADC.c: 67: ADCON1bits.ADCAL = 1;
 24880  0165F2  8CC1               	bsf	4033,6,c	;volatile
 24881                           
 24882                           ;ADC.c: 69: (ADCON0bits.GO) = 1;
 24883  0165F4  82C2               	bsf	4034,1,c	;volatile
 24884  0165F6  B2C2               	btfsc	4034,1,c	;volatile
 24885  0165F8  D7FE               	goto	l1254
 24886                           
 24887                           ;ADC.c: 71: ADCON1bits.ADCAL = 0;
 24888  0165FA  9CC1               	bcf	4033,6,c	;volatile
 24889                           
 24890                           ;ADC.c: 73: ADC_Off();
 24891  0165FC  EC75  F0B3         	call	_ADC_Off	;wreg free
 24892  016600  0012               	return		;funcret
 24893  016602                     __end_of_ADC_Calibrate:
 24894                           	opt stack 0
 24895                           tosu	equ	0xFFF
 24896                           tosh	equ	0xFFE
 24897                           tosl	equ	0xFFD
 24898                           pclath	equ	0xFFA
 24899                           tblptru	equ	0xFF8
 24900                           tblptrh	equ	0xFF7
 24901                           tblptrl	equ	0xFF6
 24902                           tablat	equ	0xFF5
 24903                           prodh	equ	0xFF4
 24904                           prodl	equ	0xFF3
 24905                           intcon	equ	0xFF2
 24906                           postinc0	equ	0xFEE
 24907                           wreg	equ	0xFE8
 24908                           indf1	equ	0xFE7
 24909                           postdec1	equ	0xFE5
 24910                           fsr1h	equ	0xFE2
 24911                           fsr1l	equ	0xFE1
 24912                           indf2	equ	0xFDF
 24913                           postinc2	equ	0xFDE
 24914                           postdec2	equ	0xFDD
 24915                           plusw2	equ	0xFDB
 24916                           fsr2h	equ	0xFDA
 24917                           fsr2l	equ	0xFD9
 24918                           status	equ	0xFD8
 24919                           
 24920 ;; *************** function _ADC_On *****************
 24921 ;; Defined at:
 24922 ;;		line 85 in file "Library/ADC.c"
 24923 ;; Parameters:    Size  Location     Type
 24924 ;;		None
 24925 ;; Auto vars:     Size  Location     Type
 24926 ;;		None
 24927 ;; Return value:  Size  Location     Type
 24928 ;;                  1    wreg      void 
 24929 ;; Registers used:
 24930 ;;		None
 24931 ;; Tracked objects:
 24932 ;;		On entry : 0/0
 24933 ;;		On exit  : 0/0
 24934 ;;		Unchanged: 0/0
 24935 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24936 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24937 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24938 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24939 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24940 ;;Total ram usage:        0 bytes
 24941 ;; Hardware stack levels used:    1
 24942 ;; Hardware stack levels required when called:    7
 24943 ;; This function calls:
 24944 ;;		Nothing
 24945 ;; This function is called by:
 24946 ;;		_ADC_Calibrate
 24947 ;;		_ADC_Start
 24948 ;;		_ADC_ISR
 24949 ;;		_ADC_Sample
 24950 ;; This function uses a non-reentrant model
 24951 ;;
 24952                           
 24953                           	psect	text124
 24954  016706                     __ptext124:
 24955                           	opt stack 0
 24956  016706                     _ADC_On:
 24957                           	opt stack 20
 24958                           
 24959                           ;ADC.c: 87: ADCON0bits.ADON = 1;
 24960                           
 24961                           ;incstack = 0
 24962  016706  80C2               	bsf	4034,0,c	;volatile
 24963                           
 24964                           ;ADC.c: 88: PIR1bits.ADIF = 0;
 24965  016708  9C9E               	bcf	3998,6,c	;volatile
 24966  01670A  0012               	return		;funcret
 24967  01670C                     __end_of_ADC_On:
 24968                           	opt stack 0
 24969                           tosu	equ	0xFFF
 24970                           tosh	equ	0xFFE
 24971                           tosl	equ	0xFFD
 24972                           pclath	equ	0xFFA
 24973                           tblptru	equ	0xFF8
 24974                           tblptrh	equ	0xFF7
 24975                           tblptrl	equ	0xFF6
 24976                           tablat	equ	0xFF5
 24977                           prodh	equ	0xFF4
 24978                           prodl	equ	0xFF3
 24979                           intcon	equ	0xFF2
 24980                           postinc0	equ	0xFEE
 24981                           wreg	equ	0xFE8
 24982                           indf1	equ	0xFE7
 24983                           postdec1	equ	0xFE5
 24984                           fsr1h	equ	0xFE2
 24985                           fsr1l	equ	0xFE1
 24986                           indf2	equ	0xFDF
 24987                           postinc2	equ	0xFDE
 24988                           postdec2	equ	0xFDD
 24989                           plusw2	equ	0xFDB
 24990                           fsr2h	equ	0xFDA
 24991                           fsr2l	equ	0xFD9
 24992                           status	equ	0xFD8
 24993                           
 24994 ;; *************** function _ADC_Off *****************
 24995 ;; Defined at:
 24996 ;;		line 94 in file "Library/ADC.c"
 24997 ;; Parameters:    Size  Location     Type
 24998 ;;		None
 24999 ;; Auto vars:     Size  Location     Type
 25000 ;;		None
 25001 ;; Return value:  Size  Location     Type
 25002 ;;                  1    wreg      void 
 25003 ;; Registers used:
 25004 ;;		None
 25005 ;; Tracked objects:
 25006 ;;		On entry : 0/0
 25007 ;;		On exit  : 0/0
 25008 ;;		Unchanged: 0/0
 25009 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25010 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25011 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25012 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25013 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25014 ;;Total ram usage:        0 bytes
 25015 ;; Hardware stack levels used:    1
 25016 ;; Hardware stack levels required when called:    7
 25017 ;; This function calls:
 25018 ;;		Nothing
 25019 ;; This function is called by:
 25020 ;;		_ADC_Calibrate
 25021 ;;		_ADC_Start
 25022 ;;		_ADC_ISR
 25023 ;;		_ADC_Sample
 25024 ;; This function uses a non-reentrant model
 25025 ;;
 25026                           
 25027                           	psect	text125
 25028  0166EA                     __ptext125:
 25029                           	opt stack 0
 25030  0166EA                     _ADC_Off:
 25031                           	opt stack 20
 25032                           
 25033                           ;ADC.c: 96: ADCON0bits.ADON = 0;
 25034                           
 25035                           ;incstack = 0
 25036  0166EA  90C2               	bcf	4034,0,c	;volatile
 25037                           
 25038                           ;ADC.c: 97: PIR1bits.ADIF = 0;
 25039  0166EC  9C9E               	bcf	3998,6,c	;volatile
 25040                           
 25041                           ;ADC.c: 98: PIE1bits.ADIE = 0;
 25042  0166EE  9C9D               	bcf	3997,6,c	;volatile
 25043  0166F0  0012               	return		;funcret
 25044  0166F2                     __end_of_ADC_Off:
 25045                           	opt stack 0
 25046                           tosu	equ	0xFFF
 25047                           tosh	equ	0xFFE
 25048                           tosl	equ	0xFFD
 25049                           pclath	equ	0xFFA
 25050                           tblptru	equ	0xFF8
 25051                           tblptrh	equ	0xFF7
 25052                           tblptrl	equ	0xFF6
 25053                           tablat	equ	0xFF5
 25054                           prodh	equ	0xFF4
 25055                           prodl	equ	0xFF3
 25056                           intcon	equ	0xFF2
 25057                           postinc0	equ	0xFEE
 25058                           wreg	equ	0xFE8
 25059                           indf1	equ	0xFE7
 25060                           postdec1	equ	0xFE5
 25061                           fsr1h	equ	0xFE2
 25062                           fsr1l	equ	0xFE1
 25063                           indf2	equ	0xFDF
 25064                           postinc2	equ	0xFDE
 25065                           postdec2	equ	0xFDD
 25066                           plusw2	equ	0xFDB
 25067                           fsr2h	equ	0xFDA
 25068                           fsr2l	equ	0xFD9
 25069                           status	equ	0xFD8
 25070                           
 25071 ;; *************** function _getMode *****************
 25072 ;; Defined at:
 25073 ;;		line 106 in file "main.c"
 25074 ;; Parameters:    Size  Location     Type
 25075 ;;		None
 25076 ;; Auto vars:     Size  Location     Type
 25077 ;;		None
 25078 ;; Return value:  Size  Location     Type
 25079 ;;                  1    wreg      void 
 25080 ;; Registers used:
 25081 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25082 ;; Tracked objects:
 25083 ;;		On entry : 0/0
 25084 ;;		On exit  : 0/0
 25085 ;;		Unchanged: 0/0
 25086 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25087 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25088 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25089 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25090 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25091 ;;Total ram usage:        0 bytes
 25092 ;; Hardware stack levels used:    1
 25093 ;; Hardware stack levels required when called:   16
 25094 ;; This function calls:
 25095 ;;		_HMI_DIPSwitch
 25096 ;;		_HMI_DownSwitch
 25097 ;;		_HMI_LeftSwitch
 25098 ;;		_HMI_Poll
 25099 ;;		_HMI_RightSwitch
 25100 ;;		_HMI_UpSwitch
 25101 ;;		_MXK_DIPSwitch
 25102 ;;		_MXK_TestButton
 25103 ;; This function is called by:
 25104 ;;		_main
 25105 ;; This function uses a non-reentrant model
 25106 ;;
 25107                           
 25108                           	psect	text126
 25109  0140A4                     __ptext126:
 25110                           	opt stack 0
 25111  0140A4                     _getMode:
 25112                           	opt stack 14
 25113                           
 25114                           ;main.c: 107: HMI_Poll();
 25115                           
 25116                           ;incstack = 0
 25117  0140A4  EC21  F0AA         	call	_HMI_Poll	;wreg free
 25118                           
 25119                           ;main.c: 108: mode = 0;
 25120  0140A8  0E00               	movlw	0
 25121  0140AA  0103               	movlb	3	; () banked
 25122  0140AC  6F3D               	movwf	(_mode+1)& (0+255),b
 25123  0140AE  0E00               	movlw	0
 25124  0140B0  6F3C               	movwf	_mode& (0+255),b
 25125                           
 25126                           ; BSR set to: 3
 25127                           ;main.c: 109: if (HMIBoard.mUp.mGetState()) {
 25128  0140B2  EE23  F063         	lfsr	2,_HMIBoard+35
 25129  0140B6  D801               	call	u11698
 25130  0140B8  D00A               	goto	u11699
 25131  0140BA                     u11698:
 25132  0140BA  0005               	push	
 25133  0140BC  6EFA               	movwf	pclath,c
 25134  0140BE  50DE               	movf	postinc2,w,c
 25135  0140C0  6EFD               	movwf	tosl,c
 25136  0140C2  50DE               	movf	postinc2,w,c
 25137  0140C4  6EFE               	movwf	tosh,c
 25138  0140C6  50DE               	movf	postinc2,w,c
 25139  0140C8  6EFF               	movwf	tosu,c
 25140  0140CA  50FA               	movf	pclath,w,c
 25141  0140CC  0012               	return		;indir
 25142  0140CE                     u11699:
 25143  0140CE  0900               	iorlw	0
 25144  0140D0  B4D8               	btfsc	status,2,c
 25145  0140D2  D005               	goto	l2311
 25146                           
 25147                           ;main.c: 110: mode = 1;
 25148  0140D4  0E00               	movlw	0
 25149  0140D6  0103               	movlb	3	; () banked
 25150  0140D8  6F3D               	movwf	(_mode+1)& (0+255),b
 25151  0140DA  0E01               	movlw	1
 25152  0140DC  6F3C               	movwf	_mode& (0+255),b
 25153  0140DE                     l2311:
 25154                           
 25155                           ;main.c: 111: }
 25156                           ;main.c: 112: if (HMIBoard.mRight.mGetState()) {
 25157                           
 25158                           ; BSR set to: 3
 25159  0140DE  EE23  F04F         	lfsr	2,_HMIBoard+15
 25160  0140E2  D801               	call	u11718
 25161  0140E4  D00A               	goto	u11719
 25162  0140E6                     u11718:
 25163  0140E6  0005               	push	
 25164  0140E8  6EFA               	movwf	pclath,c
 25165  0140EA  50DE               	movf	postinc2,w,c
 25166  0140EC  6EFD               	movwf	tosl,c
 25167  0140EE  50DE               	movf	postinc2,w,c
 25168  0140F0  6EFE               	movwf	tosh,c
 25169  0140F2  50DE               	movf	postinc2,w,c
 25170  0140F4  6EFF               	movwf	tosu,c
 25171  0140F6  50FA               	movf	pclath,w,c
 25172  0140F8  0012               	return		;indir
 25173  0140FA                     u11719:
 25174  0140FA  0900               	iorlw	0
 25175  0140FC  B4D8               	btfsc	status,2,c
 25176  0140FE  D005               	goto	l2312
 25177                           
 25178                           ;main.c: 113: mode = 2;
 25179  014100  0E00               	movlw	0
 25180  014102  0103               	movlb	3	; () banked
 25181  014104  6F3D               	movwf	(_mode+1)& (0+255),b
 25182  014106  0E02               	movlw	2
 25183  014108  6F3C               	movwf	_mode& (0+255),b
 25184  01410A                     l2312:
 25185                           
 25186                           ;main.c: 114: }
 25187                           ;main.c: 115: if (HMIBoard.mDown.mGetState()) {
 25188                           
 25189                           ; BSR set to: 3
 25190  01410A  EE23  F06D         	lfsr	2,_HMIBoard+45
 25191  01410E  D801               	call	u11738
 25192  014110  D00A               	goto	u11739
 25193  014112                     u11738:
 25194  014112  0005               	push	
 25195  014114  6EFA               	movwf	pclath,c
 25196  014116  50DE               	movf	postinc2,w,c
 25197  014118  6EFD               	movwf	tosl,c
 25198  01411A  50DE               	movf	postinc2,w,c
 25199  01411C  6EFE               	movwf	tosh,c
 25200  01411E  50DE               	movf	postinc2,w,c
 25201  014120  6EFF               	movwf	tosu,c
 25202  014122  50FA               	movf	pclath,w,c
 25203  014124  0012               	return		;indir
 25204  014126                     u11739:
 25205  014126  0900               	iorlw	0
 25206  014128  B4D8               	btfsc	status,2,c
 25207  01412A  D005               	goto	l2313
 25208                           
 25209                           ;main.c: 116: mode = 3;
 25210  01412C  0E00               	movlw	0
 25211  01412E  0103               	movlb	3	; () banked
 25212  014130  6F3D               	movwf	(_mode+1)& (0+255),b
 25213  014132  0E03               	movlw	3
 25214  014134  6F3C               	movwf	_mode& (0+255),b
 25215  014136                     l2313:
 25216                           
 25217                           ;main.c: 117: }
 25218                           ;main.c: 118: if (HMIBoard.mLeft.mGetState()) {
 25219                           
 25220                           ; BSR set to: 3
 25221  014136  EE23  F059         	lfsr	2,_HMIBoard+25
 25222  01413A  D801               	call	u11758
 25223  01413C  D00A               	goto	u11759
 25224  01413E                     u11758:
 25225  01413E  0005               	push	
 25226  014140  6EFA               	movwf	pclath,c
 25227  014142  50DE               	movf	postinc2,w,c
 25228  014144  6EFD               	movwf	tosl,c
 25229  014146  50DE               	movf	postinc2,w,c
 25230  014148  6EFE               	movwf	tosh,c
 25231  01414A  50DE               	movf	postinc2,w,c
 25232  01414C  6EFF               	movwf	tosu,c
 25233  01414E  50FA               	movf	pclath,w,c
 25234  014150  0012               	return		;indir
 25235  014152                     u11759:
 25236  014152  0900               	iorlw	0
 25237  014154  B4D8               	btfsc	status,2,c
 25238  014156  0012               	return	
 25239                           
 25240                           ;main.c: 119: mode = 4;
 25241  014158  0E00               	movlw	0
 25242  01415A  0103               	movlb	3	; () banked
 25243  01415C  6F3D               	movwf	(_mode+1)& (0+255),b
 25244  01415E  0E04               	movlw	4
 25245  014160  6F3C               	movwf	_mode& (0+255),b
 25246  014162  0012               	return	
 25247  014164                     __end_of_getMode:
 25248                           	opt stack 0
 25249                           tosu	equ	0xFFF
 25250                           tosh	equ	0xFFE
 25251                           tosl	equ	0xFFD
 25252                           pclath	equ	0xFFA
 25253                           tblptru	equ	0xFF8
 25254                           tblptrh	equ	0xFF7
 25255                           tblptrl	equ	0xFF6
 25256                           tablat	equ	0xFF5
 25257                           prodh	equ	0xFF4
 25258                           prodl	equ	0xFF3
 25259                           intcon	equ	0xFF2
 25260                           postinc0	equ	0xFEE
 25261                           wreg	equ	0xFE8
 25262                           indf1	equ	0xFE7
 25263                           postdec1	equ	0xFE5
 25264                           fsr1h	equ	0xFE2
 25265                           fsr1l	equ	0xFE1
 25266                           indf2	equ	0xFDF
 25267                           postinc2	equ	0xFDE
 25268                           postdec2	equ	0xFDD
 25269                           plusw2	equ	0xFDB
 25270                           fsr2h	equ	0xFDA
 25271                           fsr2l	equ	0xFD9
 25272                           status	equ	0xFD8
 25273                           
 25274 ;; *************** function _HMI_Poll *****************
 25275 ;; Defined at:
 25276 ;;		line 252 in file "HMI.c"
 25277 ;; Parameters:    Size  Location     Type
 25278 ;;		None
 25279 ;; Auto vars:     Size  Location     Type
 25280 ;;		None
 25281 ;; Return value:  Size  Location     Type
 25282 ;;                  1    wreg      void 
 25283 ;; Registers used:
 25284 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25285 ;; Tracked objects:
 25286 ;;		On entry : 0/0
 25287 ;;		On exit  : 0/0
 25288 ;;		Unchanged: 0/0
 25289 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25290 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25291 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25292 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25293 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25294 ;;Total ram usage:        0 bytes
 25295 ;; Hardware stack levels used:    1
 25296 ;; Hardware stack levels required when called:   15
 25297 ;; This function calls:
 25298 ;;		_Button_Poll
 25299 ;; This function is called by:
 25300 ;;		_getMode
 25301 ;;		_safeToGo
 25302 ;;		_main
 25303 ;; This function uses a non-reentrant model
 25304 ;;
 25305                           
 25306                           	psect	text127
 25307  015442                     __ptext127:
 25308                           	opt stack 0
 25309  015442                     _HMI_Poll:
 25310                           	opt stack 13
 25311                           
 25312                           ;HMI.c: 254: TRISE = 0xFC;
 25313                           
 25314                           ;incstack = 0
 25315  015442  0EFC               	movlw	252
 25316  015444  6E96               	movwf	3990,c	;volatile
 25317                           
 25318                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 25319  015446  0E70               	movlw	low (_HMIBoard+48)
 25320  015448  0100               	movlb	0	; () banked
 25321  01544A  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25322  01544C  0E03               	movlw	high (_HMIBoard+48)
 25323  01544E  0100               	movlb	0	; () banked
 25324  015450  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25325  015452  0E01               	movlw	1
 25326  015454  0100               	movlb	0	; () banked
 25327  015456  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25328  015458  ECED  F097         	call	_Button_Poll	;wreg free
 25329                           
 25330                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 25331  01545C  0E52               	movlw	low (_HMIBoard+18)
 25332  01545E  0100               	movlb	0	; () banked
 25333  015460  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25334  015462  0E03               	movlw	high (_HMIBoard+18)
 25335  015464  0100               	movlb	0	; () banked
 25336  015466  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25337  015468  0E01               	movlw	1
 25338  01546A  0100               	movlb	0	; () banked
 25339  01546C  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25340  01546E  ECED  F097         	call	_Button_Poll	;wreg free
 25341                           
 25342                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 25343  015472  0E48               	movlw	low (_HMIBoard+8)
 25344  015474  0100               	movlb	0	; () banked
 25345  015476  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25346  015478  0E03               	movlw	high (_HMIBoard+8)
 25347  01547A  0100               	movlb	0	; () banked
 25348  01547C  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25349  01547E  0E01               	movlw	1
 25350  015480  0100               	movlb	0	; () banked
 25351  015482  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25352  015484  ECED  F097         	call	_Button_Poll	;wreg free
 25353                           
 25354                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 25355  015488  0E5C               	movlw	low (_HMIBoard+28)
 25356  01548A  0100               	movlb	0	; () banked
 25357  01548C  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25358  01548E  0E03               	movlw	high (_HMIBoard+28)
 25359  015490  0100               	movlb	0	; () banked
 25360  015492  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25361  015494  0E01               	movlw	1
 25362  015496  0100               	movlb	0	; () banked
 25363  015498  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25364  01549A  ECED  F097         	call	_Button_Poll	;wreg free
 25365                           
 25366                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 25367  01549E  0E66               	movlw	low (_HMIBoard+38)
 25368  0154A0  0100               	movlb	0	; () banked
 25369  0154A2  6FD5               	movwf	Button_Poll@pButton& (0+255),b
 25370  0154A4  0E03               	movlw	high (_HMIBoard+38)
 25371  0154A6  0100               	movlb	0	; () banked
 25372  0154A8  6FD6               	movwf	(Button_Poll@pButton+1)& (0+255),b
 25373  0154AA  0E01               	movlw	1
 25374  0154AC  0100               	movlb	0	; () banked
 25375  0154AE  6FD7               	movwf	Button_Poll@pIncrement& (0+255),b
 25376  0154B0  ECED  F097         	call	_Button_Poll	;wreg free
 25377  0154B4  0012               	return		;funcret
 25378  0154B6                     __end_of_HMI_Poll:
 25379                           	opt stack 0
 25380                           tosu	equ	0xFFF
 25381                           tosh	equ	0xFFE
 25382                           tosl	equ	0xFFD
 25383                           pclath	equ	0xFFA
 25384                           tblptru	equ	0xFF8
 25385                           tblptrh	equ	0xFF7
 25386                           tblptrl	equ	0xFF6
 25387                           tablat	equ	0xFF5
 25388                           prodh	equ	0xFF4
 25389                           prodl	equ	0xFF3
 25390                           intcon	equ	0xFF2
 25391                           postinc0	equ	0xFEE
 25392                           wreg	equ	0xFE8
 25393                           indf1	equ	0xFE7
 25394                           postdec1	equ	0xFE5
 25395                           fsr1h	equ	0xFE2
 25396                           fsr1l	equ	0xFE1
 25397                           indf2	equ	0xFDF
 25398                           postinc2	equ	0xFDE
 25399                           postdec2	equ	0xFDD
 25400                           plusw2	equ	0xFDB
 25401                           fsr2h	equ	0xFDA
 25402                           fsr2l	equ	0xFD9
 25403                           status	equ	0xFD8
 25404                           
 25405 ;; *************** function _Button_Poll *****************
 25406 ;; Defined at:
 25407 ;;		line 57 in file "Library/Button.c"
 25408 ;; Parameters:    Size  Location     Type
 25409 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 25410 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 25411 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 25412 ;; Auto vars:     Size  Location     Type
 25413 ;;  Pin             1   35[BANK0 ] unsigned char 
 25414 ;; Return value:  Size  Location     Type
 25415 ;;                  1    wreg      unsigned char 
 25416 ;; Registers used:
 25417 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 25418 ;; Tracked objects:
 25419 ;;		On entry : 0/0
 25420 ;;		On exit  : 0/0
 25421 ;;		Unchanged: 0/0
 25422 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25423 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25424 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25425 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25426 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25427 ;;Total ram usage:        9 bytes
 25428 ;; Hardware stack levels used:    1
 25429 ;; Hardware stack levels required when called:   14
 25430 ;; This function calls:
 25431 ;;		_Event_DIPSwitch
 25432 ;;		_Event_NULL
 25433 ;;		_Event_TestButton
 25434 ;;		_HMI_DIPSwitch
 25435 ;;		_HMI_DownSwitch
 25436 ;;		_HMI_LeftSwitch
 25437 ;;		_HMI_RightSwitch
 25438 ;;		_HMI_UpSwitch
 25439 ;;		_MXK_DIPSwitch
 25440 ;;		_MXK_TestButton
 25441 ;; This function is called by:
 25442 ;;		_HMI_Poll
 25443 ;;		_MXK_Poll
 25444 ;; This function uses a non-reentrant model
 25445 ;;
 25446                           
 25447                           	psect	text128
 25448  012FDA                     __ptext128:
 25449                           	opt stack 0
 25450  012FDA                     _Button_Poll:
 25451                           	opt stack 13
 25452                           
 25453                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 25454                           
 25455                           ;incstack = 0
 25456  012FDA  0100               	movlb	0	; () banked
 25457  012FDC  EE20 F007          	lfsr	2,7
 25458  012FE0  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25459  012FE2  26D9               	addwf	fsr2l,f,c
 25460  012FE4  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25461  012FE6  22DA               	addwfc	fsr2h,f,c
 25462  012FE8  D801               	call	u9618
 25463  012FEA  D00A               	goto	u9619
 25464  012FEC                     u9618:
 25465  012FEC  0005               	push	
 25466  012FEE  6EFA               	movwf	pclath,c
 25467  012FF0  50DE               	movf	postinc2,w,c
 25468  012FF2  6EFD               	movwf	tosl,c
 25469  012FF4  50DE               	movf	postinc2,w,c
 25470  012FF6  6EFE               	movwf	tosh,c
 25471  012FF8  50DE               	movf	postinc2,w,c
 25472  012FFA  6EFF               	movwf	tosu,c
 25473  012FFC  50FA               	movf	pclath,w,c
 25474  012FFE  0012               	return		;indir
 25475  013000                     u9619:
 25476  013000  0100               	movlb	0	; () banked
 25477  013002  6FDD               	movwf	Button_Poll@Pin& (0+255),b
 25478                           
 25479                           ; BSR set to: 0
 25480                           ;Button.c: 61: if (pButton->mState == Pin)
 25481  013004  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25482  013008  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25483  01300C  0100               	movlb	0	; () banked
 25484  01300E  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25485  013010  18DE               	xorwf	postinc2,w,c
 25486  013012  A4D8               	btfss	status,2,c
 25487  013014  D021               	goto	l11
 25488                           
 25489                           ; BSR set to: 0
 25490                           ;Button.c: 62: {
 25491                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 25492  013016  0100               	movlb	0	; () banked
 25493  013018  EE20 F001          	lfsr	2,1
 25494  01301C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25495  01301E  26D9               	addwf	fsr2l,f,c
 25496  013020  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25497  013022  22DA               	addwfc	fsr2h,f,c
 25498  013024  0100               	movlb	0	; () banked
 25499  013026  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25500  013028  5CDE               	subwf	postinc2,w,c
 25501  01302A  B0D8               	btfsc	status,0,c
 25502  01302C  D00A               	goto	l12
 25503                           
 25504                           ; BSR set to: 0
 25505                           ;Button.c: 66: pButton->mCount = 0;
 25506  01302E  0100               	movlb	0	; () banked
 25507  013030  EE20 F001          	lfsr	2,1
 25508  013034  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25509  013036  26D9               	addwf	fsr2l,f,c
 25510  013038  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25511  01303A  22DA               	addwfc	fsr2h,f,c
 25512  01303C  0E00               	movlw	0
 25513  01303E  6EDF               	movwf	indf2,c
 25514  013040  0012               	return	
 25515  013042                     l12:
 25516                           
 25517                           ; BSR set to: 0
 25518                           ;Button.c: 67: else
 25519                           ;Button.c: 68: pButton->mCount -= pIncrement;
 25520                           
 25521                           ; BSR set to: 0
 25522  013042  0100               	movlb	0	; () banked
 25523  013044  EE20 F001          	lfsr	2,1
 25524  013048  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25525  01304A  26D9               	addwf	fsr2l,f,c
 25526  01304C  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25527  01304E  22DA               	addwfc	fsr2h,f,c
 25528  013050  0100               	movlb	0	; () banked
 25529  013052  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25530  013054  5EDF               	subwf	indf2,f,c
 25531                           
 25532                           ; BSR set to: 0
 25533                           ;Button.c: 69: }
 25534  013056  0012               	return	
 25535  013058                     l11:
 25536                           
 25537                           ; BSR set to: 0
 25538                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 25539                           
 25540                           ; BSR set to: 0
 25541  013058  0100               	movlb	0	; () banked
 25542  01305A  EE20 F001          	lfsr	2,1
 25543  01305E  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25544  013060  26D9               	addwf	fsr2l,f,c
 25545  013062  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25546  013064  22DA               	addwfc	fsr2h,f,c
 25547  013066  50DF               	movf	indf2,w,c
 25548  013068  0100               	movlb	0	; () banked
 25549  01306A  6FD8               	movwf	??_Button_Poll& (0+255),b
 25550  01306C  6BD9               	clrf	(??_Button_Poll+1)& (0+255),b
 25551  01306E  0100               	movlb	0	; () banked
 25552  013070  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25553  013072  0100               	movlb	0	; () banked
 25554  013074  27D8               	addwf	??_Button_Poll& (0+255),f,b
 25555  013076  0E00               	movlw	0
 25556  013078  23D9               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 25557  01307A  0100               	movlb	0	; () banked
 25558  01307C  EE20 F001          	lfsr	2,1
 25559  013080  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25560  013082  26D9               	addwf	fsr2l,f,c
 25561  013084  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25562  013086  22DA               	addwfc	fsr2h,f,c
 25563  013088  50DF               	movf	indf2,w,c
 25564  01308A  0100               	movlb	0	; () banked
 25565  01308C  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25566  01308E  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25567  013090  0100               	movlb	0	; () banked
 25568  013092  51D8               	movf	??_Button_Poll& (0+255),w,b
 25569  013094  0100               	movlb	0	; () banked
 25570  013096  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25571  013098  0100               	movlb	0	; () banked
 25572  01309A  51DB               	movf	(??_Button_Poll+3)& (0+255),w,b
 25573  01309C  0A80               	xorlw	128
 25574  01309E  0100               	movlb	0	; () banked
 25575  0130A0  6FDC               	movwf	(??_Button_Poll+4)& (0+255),b
 25576  0130A2  0100               	movlb	0	; () banked
 25577  0130A4  51D9               	movf	(??_Button_Poll+1)& (0+255),w,b
 25578  0130A6  0A80               	xorlw	128
 25579  0130A8  0100               	movlb	0	; () banked
 25580  0130AA  59DC               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 25581  0130AC  B0D8               	btfsc	status,0,c
 25582  0130AE  0012               	return	
 25583                           
 25584                           ; BSR set to: 0
 25585                           ;Button.c: 73: {
 25586                           ;Button.c: 75: pButton->mCount += pIncrement;
 25587  0130B0  0100               	movlb	0	; () banked
 25588  0130B2  EE20 F001          	lfsr	2,1
 25589  0130B6  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25590  0130B8  26D9               	addwf	fsr2l,f,c
 25591  0130BA  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25592  0130BC  22DA               	addwfc	fsr2h,f,c
 25593  0130BE  0100               	movlb	0	; () banked
 25594  0130C0  51D7               	movf	Button_Poll@pIncrement& (0+255),w,b
 25595  0130C2  26DF               	addwf	indf2,f,c
 25596                           
 25597                           ; BSR set to: 0
 25598                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 25599  0130C4  0100               	movlb	0	; () banked
 25600  0130C6  EE20 F002          	lfsr	2,2
 25601  0130CA  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25602  0130CC  26D9               	addwf	fsr2l,f,c
 25603  0130CE  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25604  0130D0  22DA               	addwfc	fsr2h,f,c
 25605  0130D2  0100               	movlb	0	; () banked
 25606  0130D4  EE10 F001          	lfsr	1,1
 25607  0130D8  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25608  0130DA  26E1               	addwf	fsr1l,f,c
 25609  0130DC  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25610  0130DE  22E2               	addwfc	fsr1h,f,c
 25611  0130E0  50E7               	movf	indf1,w,c
 25612  0130E2  0100               	movlb	0	; () banked
 25613  0130E4  6FDA               	movwf	(??_Button_Poll+2)& (0+255),b
 25614  0130E6  6BDB               	clrf	(??_Button_Poll+3)& (0+255),b
 25615  0130E8  50DE               	movf	postinc2,w,c
 25616  0130EA  0100               	movlb	0	; () banked
 25617  0130EC  5DDA               	subwf	(??_Button_Poll+2)& (0+255),w,b
 25618  0130EE  50DE               	movf	postinc2,w,c
 25619  0130F0  0100               	movlb	0	; () banked
 25620  0130F2  59DB               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 25621  0130F4  A0D8               	btfss	status,0,c
 25622  0130F6  0012               	return	
 25623                           
 25624                           ; BSR set to: 0
 25625                           ;Button.c: 77: {
 25626                           ;Button.c: 79: pButton->mState = Pin;
 25627  0130F8  C0D5  FFD9         	movff	Button_Poll@pButton,fsr2l
 25628  0130FC  C0D6  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 25629  013100  C0DD  FFDF         	movff	Button_Poll@Pin,indf2
 25630                           
 25631                           ; BSR set to: 0
 25632                           ;Button.c: 80: pButton->mCount = 0;
 25633  013104  0100               	movlb	0	; () banked
 25634  013106  EE20 F001          	lfsr	2,1
 25635  01310A  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25636  01310C  26D9               	addwf	fsr2l,f,c
 25637  01310E  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25638  013110  22DA               	addwfc	fsr2h,f,c
 25639  013112  0E00               	movlw	0
 25640  013114  6EDF               	movwf	indf2,c
 25641                           
 25642                           ; BSR set to: 0
 25643                           ;Button.c: 83: pButton->mFunction(Pin);
 25644  013116  0100               	movlb	0	; () banked
 25645  013118  EE20 F004          	lfsr	2,4
 25646  01311C  51D5               	movf	Button_Poll@pButton& (0+255),w,b
 25647  01311E  26D9               	addwf	fsr2l,f,c
 25648  013120  51D6               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 25649  013122  22DA               	addwfc	fsr2h,f,c
 25650  013124  D801               	call	u9668
 25651  013126  0012               	return	
 25652  013128                     u9668:
 25653  013128  0005               	push	
 25654  01312A  6EFA               	movwf	pclath,c
 25655  01312C  50DE               	movf	postinc2,w,c
 25656  01312E  6EFD               	movwf	tosl,c
 25657  013130  50DE               	movf	postinc2,w,c
 25658  013132  6EFE               	movwf	tosh,c
 25659  013134  50DE               	movf	postinc2,w,c
 25660  013136  6EFF               	movwf	tosu,c
 25661  013138  50FA               	movf	pclath,w,c
 25662  01313A  0100               	movlb	0	; () banked
 25663  01313C  51DD               	movf	Button_Poll@Pin& (0+255),w,b
 25664  01313E  0012               	return		;indir
 25665  013140                     __end_of_Button_Poll:
 25666                           	opt stack 0
 25667                           tosu	equ	0xFFF
 25668                           tosh	equ	0xFFE
 25669                           tosl	equ	0xFFD
 25670                           pclath	equ	0xFFA
 25671                           tblptru	equ	0xFF8
 25672                           tblptrh	equ	0xFF7
 25673                           tblptrl	equ	0xFF6
 25674                           tablat	equ	0xFF5
 25675                           prodh	equ	0xFF4
 25676                           prodl	equ	0xFF3
 25677                           intcon	equ	0xFF2
 25678                           postinc0	equ	0xFEE
 25679                           wreg	equ	0xFE8
 25680                           indf1	equ	0xFE7
 25681                           postdec1	equ	0xFE5
 25682                           fsr1h	equ	0xFE2
 25683                           fsr1l	equ	0xFE1
 25684                           indf2	equ	0xFDF
 25685                           postinc2	equ	0xFDE
 25686                           postdec2	equ	0xFDD
 25687                           plusw2	equ	0xFDB
 25688                           fsr2h	equ	0xFDA
 25689                           fsr2l	equ	0xFD9
 25690                           status	equ	0xFD8
 25691                           
 25692 ;; *************** function _MXK_DIPSwitch *****************
 25693 ;; Defined at:
 25694 ;;		line 24 in file "Library/MXK.c"
 25695 ;; Parameters:    Size  Location     Type
 25696 ;;		None
 25697 ;; Auto vars:     Size  Location     Type
 25698 ;;		None
 25699 ;; Return value:  Size  Location     Type
 25700 ;;                  1    wreg      unsigned char 
 25701 ;; Registers used:
 25702 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25703 ;; Tracked objects:
 25704 ;;		On entry : 0/0
 25705 ;;		On exit  : 0/0
 25706 ;;		Unchanged: 0/0
 25707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25712 ;;Total ram usage:        0 bytes
 25713 ;; Hardware stack levels used:    1
 25714 ;; Hardware stack levels required when called:    8
 25715 ;; This function calls:
 25716 ;;		_Port_GetQuad
 25717 ;; This function is called by:
 25718 ;;		_FunctInitButton
 25719 ;;		_Button_Poll
 25720 ;;		_getMode
 25721 ;; This function uses a non-reentrant model
 25722 ;;
 25723                           
 25724                           	psect	text129
 25725  01651C                     __ptext129:
 25726                           	opt stack 0
 25727  01651C                     _MXK_DIPSwitch:
 25728                           	opt stack 18
 25729                           
 25730                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 25731                           
 25732                           ;incstack = 0
 25733  01651C  0E9B               	movlw	low _PortD
 25734  01651E  0100               	movlb	0	; () banked
 25735  016520  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25736  016522  0E00               	movlw	high _PortD
 25737  016524  0100               	movlb	0	; () banked
 25738  016526  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25739  016528  0E00               	movlw	0
 25740  01652A  0100               	movlb	0	; () banked
 25741  01652C  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25742  01652E  EC0F  F0AE         	call	_Port_GetQuad
 25743  016532  0012               	return	
 25744  016534                     __end_of_MXK_DIPSwitch:
 25745                           	opt stack 0
 25746                           tosu	equ	0xFFF
 25747                           tosh	equ	0xFFE
 25748                           tosl	equ	0xFFD
 25749                           pclath	equ	0xFFA
 25750                           tblptru	equ	0xFF8
 25751                           tblptrh	equ	0xFF7
 25752                           tblptrl	equ	0xFF6
 25753                           tablat	equ	0xFF5
 25754                           prodh	equ	0xFF4
 25755                           prodl	equ	0xFF3
 25756                           intcon	equ	0xFF2
 25757                           postinc0	equ	0xFEE
 25758                           wreg	equ	0xFE8
 25759                           indf1	equ	0xFE7
 25760                           postdec1	equ	0xFE5
 25761                           fsr1h	equ	0xFE2
 25762                           fsr1l	equ	0xFE1
 25763                           indf2	equ	0xFDF
 25764                           postinc2	equ	0xFDE
 25765                           postdec2	equ	0xFDD
 25766                           plusw2	equ	0xFDB
 25767                           fsr2h	equ	0xFDA
 25768                           fsr2l	equ	0xFD9
 25769                           status	equ	0xFD8
 25770                           
 25771 ;; *************** function _HMI_DIPSwitch *****************
 25772 ;; Defined at:
 25773 ;;		line 47 in file "HMI.c"
 25774 ;; Parameters:    Size  Location     Type
 25775 ;;		None
 25776 ;; Auto vars:     Size  Location     Type
 25777 ;;		None
 25778 ;; Return value:  Size  Location     Type
 25779 ;;                  1    wreg      unsigned char 
 25780 ;; Registers used:
 25781 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 25782 ;; Tracked objects:
 25783 ;;		On entry : 0/0
 25784 ;;		On exit  : 0/0
 25785 ;;		Unchanged: 0/0
 25786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25787 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25788 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25790 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25791 ;;Total ram usage:        0 bytes
 25792 ;; Hardware stack levels used:    1
 25793 ;; Hardware stack levels required when called:    8
 25794 ;; This function calls:
 25795 ;;		_Port_GetQuad
 25796 ;; This function is called by:
 25797 ;;		_HMI_Init
 25798 ;;		_Button_Poll
 25799 ;;		_getMode
 25800 ;; This function uses a non-reentrant model
 25801 ;;
 25802                           
 25803                           	psect	text130
 25804  016534                     __ptext130:
 25805                           	opt stack 0
 25806  016534                     _HMI_DIPSwitch:
 25807                           	opt stack 18
 25808                           
 25809                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 25810                           
 25811                           ;incstack = 0
 25812  016534  0E91               	movlw	low _PortE
 25813  016536  0100               	movlb	0	; () banked
 25814  016538  6FBA               	movwf	Port_GetQuad@pInput& (0+255),b
 25815  01653A  0E00               	movlw	high _PortE
 25816  01653C  0100               	movlb	0	; () banked
 25817  01653E  6FBB               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 25818  016540  0E00               	movlw	0
 25819  016542  0100               	movlb	0	; () banked
 25820  016544  6FBC               	movwf	Port_GetQuad@pQuad& (0+255),b
 25821  016546  EC0F  F0AE         	call	_Port_GetQuad	;wreg free
 25822  01654A  0012               	return	
 25823  01654C                     __end_of_HMI_DIPSwitch:
 25824                           	opt stack 0
 25825                           tosu	equ	0xFFF
 25826                           tosh	equ	0xFFE
 25827                           tosl	equ	0xFFD
 25828                           pclath	equ	0xFFA
 25829                           tblptru	equ	0xFF8
 25830                           tblptrh	equ	0xFF7
 25831                           tblptrl	equ	0xFF6
 25832                           tablat	equ	0xFF5
 25833                           prodh	equ	0xFF4
 25834                           prodl	equ	0xFF3
 25835                           intcon	equ	0xFF2
 25836                           postinc0	equ	0xFEE
 25837                           wreg	equ	0xFE8
 25838                           indf1	equ	0xFE7
 25839                           postdec1	equ	0xFE5
 25840                           fsr1h	equ	0xFE2
 25841                           fsr1l	equ	0xFE1
 25842                           indf2	equ	0xFDF
 25843                           postinc2	equ	0xFDE
 25844                           postdec2	equ	0xFDD
 25845                           plusw2	equ	0xFDB
 25846                           fsr2h	equ	0xFDA
 25847                           fsr2l	equ	0xFD9
 25848                           status	equ	0xFD8
 25849                           
 25850 ;; *************** function _HMI_DownSwitch *****************
 25851 ;; Defined at:
 25852 ;;		line 42 in file "HMI.c"
 25853 ;; Parameters:    Size  Location     Type
 25854 ;;		None
 25855 ;; Auto vars:     Size  Location     Type
 25856 ;;		None
 25857 ;; Return value:  Size  Location     Type
 25858 ;;                  1    wreg      unsigned char 
 25859 ;; Registers used:
 25860 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25861 ;; Tracked objects:
 25862 ;;		On entry : 0/0
 25863 ;;		On exit  : 0/0
 25864 ;;		Unchanged: 0/0
 25865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25867 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25868 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25869 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25870 ;;Total ram usage:        0 bytes
 25871 ;; Hardware stack levels used:    1
 25872 ;; Hardware stack levels required when called:    8
 25873 ;; This function calls:
 25874 ;;		_Port_GetPin
 25875 ;; This function is called by:
 25876 ;;		_HMI_Init
 25877 ;;		_Button_Poll
 25878 ;;		_getMode
 25879 ;; This function uses a non-reentrant model
 25880 ;;
 25881                           
 25882                           	psect	text131
 25883  01654C                     __ptext131:
 25884                           	opt stack 0
 25885  01654C                     _HMI_DownSwitch:
 25886                           	opt stack 18
 25887                           
 25888                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 25889                           
 25890                           ;incstack = 0
 25891  01654C  0E91               	movlw	low _PortE
 25892  01654E  0100               	movlb	0	; () banked
 25893  016550  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25894  016552  0E00               	movlw	high _PortE
 25895  016554  0100               	movlb	0	; () banked
 25896  016556  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25897  016558  0E06               	movlw	6
 25898  01655A  0100               	movlb	0	; () banked
 25899  01655C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25900  01655E  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 25901  016562  0012               	return	
 25902  016564                     __end_of_HMI_DownSwitch:
 25903                           	opt stack 0
 25904                           tosu	equ	0xFFF
 25905                           tosh	equ	0xFFE
 25906                           tosl	equ	0xFFD
 25907                           pclath	equ	0xFFA
 25908                           tblptru	equ	0xFF8
 25909                           tblptrh	equ	0xFF7
 25910                           tblptrl	equ	0xFF6
 25911                           tablat	equ	0xFF5
 25912                           prodh	equ	0xFF4
 25913                           prodl	equ	0xFF3
 25914                           intcon	equ	0xFF2
 25915                           postinc0	equ	0xFEE
 25916                           wreg	equ	0xFE8
 25917                           indf1	equ	0xFE7
 25918                           postdec1	equ	0xFE5
 25919                           fsr1h	equ	0xFE2
 25920                           fsr1l	equ	0xFE1
 25921                           indf2	equ	0xFDF
 25922                           postinc2	equ	0xFDE
 25923                           postdec2	equ	0xFDD
 25924                           plusw2	equ	0xFDB
 25925                           fsr2h	equ	0xFDA
 25926                           fsr2l	equ	0xFD9
 25927                           status	equ	0xFD8
 25928                           
 25929 ;; *************** function _HMI_UpSwitch *****************
 25930 ;; Defined at:
 25931 ;;		line 37 in file "HMI.c"
 25932 ;; Parameters:    Size  Location     Type
 25933 ;;		None
 25934 ;; Auto vars:     Size  Location     Type
 25935 ;;		None
 25936 ;; Return value:  Size  Location     Type
 25937 ;;                  1    wreg      unsigned char 
 25938 ;; Registers used:
 25939 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 25940 ;; Tracked objects:
 25941 ;;		On entry : 0/0
 25942 ;;		On exit  : 0/0
 25943 ;;		Unchanged: 0/0
 25944 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 25945 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25946 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25947 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25948 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 25949 ;;Total ram usage:        0 bytes
 25950 ;; Hardware stack levels used:    1
 25951 ;; Hardware stack levels required when called:    8
 25952 ;; This function calls:
 25953 ;;		_Port_GetPin
 25954 ;; This function is called by:
 25955 ;;		_HMI_Init
 25956 ;;		_Button_Poll
 25957 ;;		_getMode
 25958 ;; This function uses a non-reentrant model
 25959 ;;
 25960                           
 25961                           	psect	text132
 25962  016564                     __ptext132:
 25963                           	opt stack 0
 25964  016564                     _HMI_UpSwitch:
 25965                           	opt stack 18
 25966                           
 25967                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 25968                           
 25969                           ;incstack = 0
 25970  016564  0E91               	movlw	low _PortE
 25971  016566  0100               	movlb	0	; () banked
 25972  016568  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 25973  01656A  0E00               	movlw	high _PortE
 25974  01656C  0100               	movlb	0	; () banked
 25975  01656E  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 25976  016570  0E07               	movlw	7
 25977  016572  0100               	movlb	0	; () banked
 25978  016574  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 25979  016576  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 25980  01657A  0012               	return	
 25981  01657C                     __end_of_HMI_UpSwitch:
 25982                           	opt stack 0
 25983                           tosu	equ	0xFFF
 25984                           tosh	equ	0xFFE
 25985                           tosl	equ	0xFFD
 25986                           pclath	equ	0xFFA
 25987                           tblptru	equ	0xFF8
 25988                           tblptrh	equ	0xFF7
 25989                           tblptrl	equ	0xFF6
 25990                           tablat	equ	0xFF5
 25991                           prodh	equ	0xFF4
 25992                           prodl	equ	0xFF3
 25993                           intcon	equ	0xFF2
 25994                           postinc0	equ	0xFEE
 25995                           wreg	equ	0xFE8
 25996                           indf1	equ	0xFE7
 25997                           postdec1	equ	0xFE5
 25998                           fsr1h	equ	0xFE2
 25999                           fsr1l	equ	0xFE1
 26000                           indf2	equ	0xFDF
 26001                           postinc2	equ	0xFDE
 26002                           postdec2	equ	0xFDD
 26003                           plusw2	equ	0xFDB
 26004                           fsr2h	equ	0xFDA
 26005                           fsr2l	equ	0xFD9
 26006                           status	equ	0xFD8
 26007                           
 26008 ;; *************** function _HMI_RightSwitch *****************
 26009 ;; Defined at:
 26010 ;;		line 32 in file "HMI.c"
 26011 ;; Parameters:    Size  Location     Type
 26012 ;;		None
 26013 ;; Auto vars:     Size  Location     Type
 26014 ;;		None
 26015 ;; Return value:  Size  Location     Type
 26016 ;;                  1    wreg      unsigned char 
 26017 ;; Registers used:
 26018 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26019 ;; Tracked objects:
 26020 ;;		On entry : 0/0
 26021 ;;		On exit  : 0/0
 26022 ;;		Unchanged: 0/0
 26023 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26024 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26025 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26026 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26027 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26028 ;;Total ram usage:        0 bytes
 26029 ;; Hardware stack levels used:    1
 26030 ;; Hardware stack levels required when called:    8
 26031 ;; This function calls:
 26032 ;;		_Port_GetPin
 26033 ;; This function is called by:
 26034 ;;		_HMI_Init
 26035 ;;		_Button_Poll
 26036 ;;		_getMode
 26037 ;; This function uses a non-reentrant model
 26038 ;;
 26039                           
 26040                           	psect	text133
 26041  01657C                     __ptext133:
 26042                           	opt stack 0
 26043  01657C                     _HMI_RightSwitch:
 26044                           	opt stack 18
 26045                           
 26046                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 26047                           
 26048                           ;incstack = 0
 26049  01657C  0E91               	movlw	low _PortE
 26050  01657E  0100               	movlb	0	; () banked
 26051  016580  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26052  016582  0E00               	movlw	high _PortE
 26053  016584  0100               	movlb	0	; () banked
 26054  016586  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26055  016588  0E04               	movlw	4
 26056  01658A  0100               	movlb	0	; () banked
 26057  01658C  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26058  01658E  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 26059  016592  0012               	return	
 26060  016594                     __end_of_HMI_RightSwitch:
 26061                           	opt stack 0
 26062                           tosu	equ	0xFFF
 26063                           tosh	equ	0xFFE
 26064                           tosl	equ	0xFFD
 26065                           pclath	equ	0xFFA
 26066                           tblptru	equ	0xFF8
 26067                           tblptrh	equ	0xFF7
 26068                           tblptrl	equ	0xFF6
 26069                           tablat	equ	0xFF5
 26070                           prodh	equ	0xFF4
 26071                           prodl	equ	0xFF3
 26072                           intcon	equ	0xFF2
 26073                           postinc0	equ	0xFEE
 26074                           wreg	equ	0xFE8
 26075                           indf1	equ	0xFE7
 26076                           postdec1	equ	0xFE5
 26077                           fsr1h	equ	0xFE2
 26078                           fsr1l	equ	0xFE1
 26079                           indf2	equ	0xFDF
 26080                           postinc2	equ	0xFDE
 26081                           postdec2	equ	0xFDD
 26082                           plusw2	equ	0xFDB
 26083                           fsr2h	equ	0xFDA
 26084                           fsr2l	equ	0xFD9
 26085                           status	equ	0xFD8
 26086                           
 26087 ;; *************** function _HMI_LeftSwitch *****************
 26088 ;; Defined at:
 26089 ;;		line 27 in file "HMI.c"
 26090 ;; Parameters:    Size  Location     Type
 26091 ;;		None
 26092 ;; Auto vars:     Size  Location     Type
 26093 ;;		None
 26094 ;; Return value:  Size  Location     Type
 26095 ;;                  1    wreg      unsigned char 
 26096 ;; Registers used:
 26097 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26098 ;; Tracked objects:
 26099 ;;		On entry : 0/0
 26100 ;;		On exit  : 0/0
 26101 ;;		Unchanged: 0/0
 26102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26107 ;;Total ram usage:        0 bytes
 26108 ;; Hardware stack levels used:    1
 26109 ;; Hardware stack levels required when called:    8
 26110 ;; This function calls:
 26111 ;;		_Port_GetPin
 26112 ;; This function is called by:
 26113 ;;		_HMI_Init
 26114 ;;		_Button_Poll
 26115 ;;		_getMode
 26116 ;; This function uses a non-reentrant model
 26117 ;;
 26118                           
 26119                           	psect	text134
 26120  016594                     __ptext134:
 26121                           	opt stack 0
 26122  016594                     _HMI_LeftSwitch:
 26123                           	opt stack 18
 26124                           
 26125                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 26126                           
 26127                           ;incstack = 0
 26128  016594  0E91               	movlw	low _PortE
 26129  016596  0100               	movlb	0	; () banked
 26130  016598  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26131  01659A  0E00               	movlw	high _PortE
 26132  01659C  0100               	movlb	0	; () banked
 26133  01659E  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26134  0165A0  0E05               	movlw	5
 26135  0165A2  0100               	movlb	0	; () banked
 26136  0165A4  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26137  0165A6  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 26138  0165AA  0012               	return	
 26139  0165AC                     __end_of_HMI_LeftSwitch:
 26140                           	opt stack 0
 26141                           tosu	equ	0xFFF
 26142                           tosh	equ	0xFFE
 26143                           tosl	equ	0xFFD
 26144                           pclath	equ	0xFFA
 26145                           tblptru	equ	0xFF8
 26146                           tblptrh	equ	0xFF7
 26147                           tblptrl	equ	0xFF6
 26148                           tablat	equ	0xFF5
 26149                           prodh	equ	0xFF4
 26150                           prodl	equ	0xFF3
 26151                           intcon	equ	0xFF2
 26152                           postinc0	equ	0xFEE
 26153                           wreg	equ	0xFE8
 26154                           indf1	equ	0xFE7
 26155                           postdec1	equ	0xFE5
 26156                           fsr1h	equ	0xFE2
 26157                           fsr1l	equ	0xFE1
 26158                           indf2	equ	0xFDF
 26159                           postinc2	equ	0xFDE
 26160                           postdec2	equ	0xFDD
 26161                           plusw2	equ	0xFDB
 26162                           fsr2h	equ	0xFDA
 26163                           fsr2l	equ	0xFD9
 26164                           status	equ	0xFD8
 26165                           
 26166 ;; *************** function _MXK_TestButton *****************
 26167 ;; Defined at:
 26168 ;;		line 14 in file "Library/MXK.c"
 26169 ;; Parameters:    Size  Location     Type
 26170 ;;		None
 26171 ;; Auto vars:     Size  Location     Type
 26172 ;;		None
 26173 ;; Return value:  Size  Location     Type
 26174 ;;                  1    wreg      unsigned char 
 26175 ;; Registers used:
 26176 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 26177 ;; Tracked objects:
 26178 ;;		On entry : 0/0
 26179 ;;		On exit  : 0/0
 26180 ;;		Unchanged: 0/0
 26181 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26182 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26183 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26184 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26185 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26186 ;;Total ram usage:        0 bytes
 26187 ;; Hardware stack levels used:    1
 26188 ;; Hardware stack levels required when called:    8
 26189 ;; This function calls:
 26190 ;;		_Port_GetPin
 26191 ;; This function is called by:
 26192 ;;		_FunctInitButton
 26193 ;;		_Button_Poll
 26194 ;;		_getMode
 26195 ;; This function uses a non-reentrant model
 26196 ;;
 26197                           
 26198                           	psect	text135
 26199  0165AC                     __ptext135:
 26200                           	opt stack 0
 26201  0165AC                     _MXK_TestButton:
 26202                           	opt stack 18
 26203                           
 26204                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 26205                           
 26206                           ;incstack = 0
 26207  0165AC  0EAE               	movlw	low _PortB
 26208  0165AE  0100               	movlb	0	; () banked
 26209  0165B0  6FBA               	movwf	Port_GetPin@pInput& (0+255),b
 26210  0165B2  0E03               	movlw	high _PortB
 26211  0165B4  0100               	movlb	0	; () banked
 26212  0165B6  6FBB               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 26213  0165B8  0E04               	movlw	4
 26214  0165BA  0100               	movlb	0	; () banked
 26215  0165BC  6FBC               	movwf	Port_GetPin@pPin& (0+255),b
 26216  0165BE  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 26217  0165C2  0012               	return	
 26218  0165C4                     __end_of_MXK_TestButton:
 26219                           	opt stack 0
 26220                           tosu	equ	0xFFF
 26221                           tosh	equ	0xFFE
 26222                           tosl	equ	0xFFD
 26223                           pclath	equ	0xFFA
 26224                           tblptru	equ	0xFF8
 26225                           tblptrh	equ	0xFF7
 26226                           tblptrl	equ	0xFF6
 26227                           tablat	equ	0xFF5
 26228                           prodh	equ	0xFF4
 26229                           prodl	equ	0xFF3
 26230                           intcon	equ	0xFF2
 26231                           postinc0	equ	0xFEE
 26232                           wreg	equ	0xFE8
 26233                           indf1	equ	0xFE7
 26234                           postdec1	equ	0xFE5
 26235                           fsr1h	equ	0xFE2
 26236                           fsr1l	equ	0xFE1
 26237                           indf2	equ	0xFDF
 26238                           postinc2	equ	0xFDE
 26239                           postdec2	equ	0xFDD
 26240                           plusw2	equ	0xFDB
 26241                           fsr2h	equ	0xFDA
 26242                           fsr2l	equ	0xFD9
 26243                           status	equ	0xFD8
 26244                           
 26245 ;; *************** function _Port_GetQuad *****************
 26246 ;; Defined at:
 26247 ;;		line 498 in file "Library/Port.c"
 26248 ;; Parameters:    Size  Location     Type
 26249 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 26250 ;;		 -> PortE(10), PortD(10), 
 26251 ;;  pQuad           1    2[BANK0 ] enum E6776
 26252 ;; Auto vars:     Size  Location     Type
 26253 ;;  Output          1    5[BANK0 ] unsigned char 
 26254 ;; Return value:  Size  Location     Type
 26255 ;;                  1    wreg      unsigned char 
 26256 ;; Registers used:
 26257 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 26258 ;; Tracked objects:
 26259 ;;		On entry : 0/0
 26260 ;;		On exit  : 0/0
 26261 ;;		Unchanged: 0/0
 26262 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26263 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26264 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26265 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26266 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26267 ;;Total ram usage:        6 bytes
 26268 ;; Hardware stack levels used:    1
 26269 ;; Hardware stack levels required when called:    7
 26270 ;; This function calls:
 26271 ;;		Nothing
 26272 ;; This function is called by:
 26273 ;;		_HMI_DIPSwitch
 26274 ;;		_MXK_DIPSwitch
 26275 ;;		_Port_ToggleQuad
 26276 ;; This function uses a non-reentrant model
 26277 ;;
 26278                           
 26279                           	psect	text136
 26280  015C1E                     __ptext136:
 26281                           	opt stack 0
 26282  015C1E                     _Port_GetQuad:
 26283                           	opt stack 18
 26284                           
 26285                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 26286                           
 26287                           ;incstack = 0
 26288  015C1E  0100               	movlb	0	; () banked
 26289  015C20  EE20 F006          	lfsr	2,6
 26290  015C24  51BA               	movf	Port_GetQuad@pInput& (0+255),w,b
 26291  015C26  26D9               	addwf	fsr2l,f,c
 26292  015C28  51BB               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 26293  015C2A  22DA               	addwfc	fsr2h,f,c
 26294  015C2C  CFDE F0BD          	movff	postinc2,??_Port_GetQuad
 26295  015C30  CFDD F0BE          	movff	postdec2,??_Port_GetQuad+1
 26296  015C34  C0BD  FFD9         	movff	??_Port_GetQuad,fsr2l
 26297  015C38  C0BE  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 26298  015C3C  50DF               	movf	indf2,w,c
 26299  015C3E  0100               	movlb	0	; () banked
 26300  015C40  6FBF               	movwf	Port_GetQuad@Output& (0+255),b
 26301                           
 26302                           ; BSR set to: 0
 26303                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 26304  015C42  0100               	movlb	0	; () banked
 26305  015C44  51BC               	movf	Port_GetQuad@pQuad& (0+255),w,b
 26306  015C46  0D04               	mullw	4
 26307  015C48  28F3               	incf	prodl,w,c
 26308  015C4A  0100               	movlb	0	; () banked
 26309  015C4C  6FBD               	movwf	??_Port_GetQuad& (0+255),b
 26310  015C4E  D003               	goto	u9160
 26311  015C50                     u9165:
 26312  015C50  0100               	movlb	0	; () banked
 26313  015C52  90D8               	bcf	status,0,c
 26314  015C54  33BF               	rrcf	Port_GetQuad@Output& (0+255),f,b
 26315  015C56                     u9160:
 26316  015C56  0100               	movlb	0	; () banked
 26317  015C58  2FBD               	decfsz	??_Port_GetQuad& (0+255),f,b
 26318  015C5A  D7FA               	goto	u9165
 26319                           
 26320                           ;Port.c: 502: Output &= 0xF;
 26321  015C5C  0E0F               	movlw	15
 26322  015C5E  0100               	movlb	0	; () banked
 26323  015C60  17BF               	andwf	Port_GetQuad@Output& (0+255),f,b
 26324                           
 26325                           ; BSR set to: 0
 26326                           ;Port.c: 503: return Output;
 26327  015C62  0100               	movlb	0	; () banked
 26328  015C64  51BF               	movf	Port_GetQuad@Output& (0+255),w,b
 26329  015C66  0012               	return	
 26330  015C68                     __end_of_Port_GetQuad:
 26331                           	opt stack 0
 26332                           tosu	equ	0xFFF
 26333                           tosh	equ	0xFFE
 26334                           tosl	equ	0xFFD
 26335                           pclath	equ	0xFFA
 26336                           tblptru	equ	0xFF8
 26337                           tblptrh	equ	0xFF7
 26338                           tblptrl	equ	0xFF6
 26339                           tablat	equ	0xFF5
 26340                           prodh	equ	0xFF4
 26341                           prodl	equ	0xFF3
 26342                           intcon	equ	0xFF2
 26343                           postinc0	equ	0xFEE
 26344                           wreg	equ	0xFE8
 26345                           indf1	equ	0xFE7
 26346                           postdec1	equ	0xFE5
 26347                           fsr1h	equ	0xFE2
 26348                           fsr1l	equ	0xFE1
 26349                           indf2	equ	0xFDF
 26350                           postinc2	equ	0xFDE
 26351                           postdec2	equ	0xFDD
 26352                           plusw2	equ	0xFDB
 26353                           fsr2h	equ	0xFDA
 26354                           fsr2l	equ	0xFD9
 26355                           status	equ	0xFD8
 26356                           
 26357 ;; *************** function _Event_DIPSwitch *****************
 26358 ;; Defined at:
 26359 ;;		line 22 in file "Events.c"
 26360 ;; Parameters:    Size  Location     Type
 26361 ;;  pState          1    wreg     unsigned char 
 26362 ;; Auto vars:     Size  Location     Type
 26363 ;;  pState          1   25[BANK0 ] unsigned char 
 26364 ;;  Bar             1   26[BANK0 ] unsigned char 
 26365 ;; Return value:  Size  Location     Type
 26366 ;;                  1    wreg      void 
 26367 ;; Registers used:
 26368 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26369 ;; Tracked objects:
 26370 ;;		On entry : 0/0
 26371 ;;		On exit  : 0/0
 26372 ;;		Unchanged: 0/0
 26373 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26374 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26375 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26376 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26377 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26378 ;;Total ram usage:        2 bytes
 26379 ;; Hardware stack levels used:    1
 26380 ;; Hardware stack levels required when called:   13
 26381 ;; This function calls:
 26382 ;;		_HMI_GetBar
 26383 ;;		_HMI_SetBar
 26384 ;;		_LED_Toggle
 26385 ;; This function is called by:
 26386 ;;		_FunctInitButton
 26387 ;;		_Button_Poll
 26388 ;; This function uses a non-reentrant model
 26389 ;;
 26390                           
 26391                           	psect	text137
 26392  016222                     __ptext137:
 26393                           	opt stack 0
 26394  016222                     _Event_DIPSwitch:
 26395                           	opt stack 13
 26396                           
 26397                           ; BSR set to: 0
 26398                           ;incstack = 0
 26399                           ;Event_DIPSwitch@pState stored from wreg
 26400  016222  0100               	movlb	0	; () banked
 26401  016224  6FD3               	movwf	Event_DIPSwitch@pState& (0+255),b
 26402                           
 26403                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 26404  016226  EC86  F0B3         	call	_HMI_GetBar	;wreg free
 26405  01622A  0100               	movlb	0	; () banked
 26406  01622C  6FD4               	movwf	Event_DIPSwitch@Bar& (0+255),b
 26407                           
 26408                           ; BSR set to: 0
 26409                           ;Events.c: 25: Bar &= 0x0F;
 26410  01622E  0E0F               	movlw	15
 26411  016230  0100               	movlb	0	; () banked
 26412  016232  17D4               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 26413                           
 26414                           ; BSR set to: 0
 26415                           ;Events.c: 26: pState <<= 4;
 26416  016234  0100               	movlb	0	; () banked
 26417  016236  3BD3               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 26418  016238  0EF0               	movlw	240
 26419  01623A  17D3               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 26420                           
 26421                           ; BSR set to: 0
 26422                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 26423  01623C  0100               	movlb	0	; () banked
 26424  01623E  51D3               	movf	Event_DIPSwitch@pState& (0+255),w,b
 26425  016240  0100               	movlb	0	; () banked
 26426  016242  11D4               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 26427  016244  EC68  F0B3         	call	_HMI_SetBar
 26428                           
 26429                           ;Events.c: 32: LED_Toggle(eLED1);
 26430  016248  0E00               	movlw	0
 26431  01624A  EC7C  F0AE         	call	_LED_Toggle
 26432  01624E  0012               	return		;funcret
 26433  016250                     __end_of_Event_DIPSwitch:
 26434                           	opt stack 0
 26435                           tosu	equ	0xFFF
 26436                           tosh	equ	0xFFE
 26437                           tosl	equ	0xFFD
 26438                           pclath	equ	0xFFA
 26439                           tblptru	equ	0xFF8
 26440                           tblptrh	equ	0xFF7
 26441                           tblptrl	equ	0xFF6
 26442                           tablat	equ	0xFF5
 26443                           prodh	equ	0xFF4
 26444                           prodl	equ	0xFF3
 26445                           intcon	equ	0xFF2
 26446                           postinc0	equ	0xFEE
 26447                           wreg	equ	0xFE8
 26448                           indf1	equ	0xFE7
 26449                           postdec1	equ	0xFE5
 26450                           fsr1h	equ	0xFE2
 26451                           fsr1l	equ	0xFE1
 26452                           indf2	equ	0xFDF
 26453                           postinc2	equ	0xFDE
 26454                           postdec2	equ	0xFDD
 26455                           plusw2	equ	0xFDB
 26456                           fsr2h	equ	0xFDA
 26457                           fsr2l	equ	0xFD9
 26458                           status	equ	0xFD8
 26459                           
 26460 ;; *************** function _Event_NULL *****************
 26461 ;; Defined at:
 26462 ;;		line 9 in file "Events.c"
 26463 ;; Parameters:    Size  Location     Type
 26464 ;;  pState          1    wreg     unsigned char 
 26465 ;; Auto vars:     Size  Location     Type
 26466 ;;  pState          1    0[COMRAM] unsigned char 
 26467 ;; Return value:  Size  Location     Type
 26468 ;;                  1    wreg      void 
 26469 ;; Registers used:
 26470 ;;		wreg
 26471 ;; Tracked objects:
 26472 ;;		On entry : 0/0
 26473 ;;		On exit  : 0/0
 26474 ;;		Unchanged: 0/0
 26475 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26476 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26477 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26478 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26479 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26480 ;;Total ram usage:        0 bytes
 26481 ;; Hardware stack levels used:    1
 26482 ;; Hardware stack levels required when called:    7
 26483 ;; This function calls:
 26484 ;;		Nothing
 26485 ;; This function is called by:
 26486 ;;		_HMI_Init
 26487 ;;		_Button_Poll
 26488 ;; This function uses a non-reentrant model
 26489 ;;
 26490                           
 26491                           	psect	text138
 26492  001404                     __ptext138:
 26493                           	opt stack 0
 26494  001404                     _Event_NULL:
 26495                           	opt stack 19
 26496                           
 26497                           ;incstack = 0
 26498  001404  0012               	return		;funcret
 26499  001406                     __end_of_Event_NULL:
 26500                           	opt stack 0
 26501                           tosu	equ	0xFFF
 26502                           tosh	equ	0xFFE
 26503                           tosl	equ	0xFFD
 26504                           pclath	equ	0xFFA
 26505                           tblptru	equ	0xFF8
 26506                           tblptrh	equ	0xFF7
 26507                           tblptrl	equ	0xFF6
 26508                           tablat	equ	0xFF5
 26509                           prodh	equ	0xFF4
 26510                           prodl	equ	0xFF3
 26511                           intcon	equ	0xFF2
 26512                           postinc0	equ	0xFEE
 26513                           wreg	equ	0xFE8
 26514                           indf1	equ	0xFE7
 26515                           postdec1	equ	0xFE5
 26516                           fsr1h	equ	0xFE2
 26517                           fsr1l	equ	0xFE1
 26518                           indf2	equ	0xFDF
 26519                           postinc2	equ	0xFDE
 26520                           postdec2	equ	0xFDD
 26521                           plusw2	equ	0xFDB
 26522                           fsr2h	equ	0xFDA
 26523                           fsr2l	equ	0xFD9
 26524                           status	equ	0xFD8
 26525                           
 26526 ;; *************** function _Event_TestButton *****************
 26527 ;; Defined at:
 26528 ;;		line 52 in file "Events.c"
 26529 ;; Parameters:    Size  Location     Type
 26530 ;;  pState          1    wreg     unsigned char 
 26531 ;; Auto vars:     Size  Location     Type
 26532 ;;  pState          1   25[BANK0 ] unsigned char 
 26533 ;; Return value:  Size  Location     Type
 26534 ;;                  1    wreg      void 
 26535 ;; Registers used:
 26536 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 26537 ;; Tracked objects:
 26538 ;;		On entry : 0/0
 26539 ;;		On exit  : 0/0
 26540 ;;		Unchanged: 0/0
 26541 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26542 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26543 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26544 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26545 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26546 ;;Total ram usage:        1 bytes
 26547 ;; Hardware stack levels used:    1
 26548 ;; Hardware stack levels required when called:   13
 26549 ;; This function calls:
 26550 ;;		_HMI_SetButton
 26551 ;;		_HMI_SetNumber
 26552 ;;		_LED_Toggle
 26553 ;; This function is called by:
 26554 ;;		_FunctInitButton
 26555 ;;		_Button_Poll
 26556 ;; This function uses a non-reentrant model
 26557 ;;
 26558                           
 26559                           	psect	text139
 26560  016010                     __ptext139:
 26561                           	opt stack 0
 26562  016010                     _Event_TestButton:
 26563                           	opt stack 13
 26564                           
 26565                           ;incstack = 0
 26566                           ;Event_TestButton@pState stored from wreg
 26567  016010  0100               	movlb	0	; () banked
 26568  016012  6FD3               	movwf	Event_TestButton@pState& (0+255),b
 26569                           
 26570                           ;Events.c: 56: static UINT8 j = 0;
 26571                           ;Events.c: 60: if (pState == 0)
 26572  016014  0100               	movlb	0	; () banked
 26573  016016  51D3               	movf	Event_TestButton@pState& (0+255),w,b
 26574  016018  0100               	movlb	0	; () banked
 26575  01601A  A4D8               	btfss	status,2,c
 26576  01601C  D013               	goto	l1873
 26577                           
 26578                           ; BSR set to: 0
 26579                           ;Events.c: 61: {
 26580                           ;Events.c: 62: j++;
 26581  01601E  0100               	movlb	0	; () banked
 26582  016020  2B89               	incf	Event_TestButton@j& (0+255),f,b
 26583                           
 26584                           ; BSR set to: 0
 26585                           ;Events.c: 63: val += j;
 26586  016022  0100               	movlb	0	; () banked
 26587  016024  5189               	movf	Event_TestButton@j& (0+255),w,b
 26588  016026  0100               	movlb	0	; () banked
 26589  016028  277D               	addwf	_val& (0+255),f,b
 26590  01602A  0E00               	movlw	0
 26591  01602C  237E               	addwfc	(_val+1)& (0+255),f,b
 26592                           
 26593                           ; BSR set to: 0
 26594                           ;Events.c: 64: HMI_SetNumber( val );
 26595  01602E  C07D  F0D0         	movff	_val,HMI_SetNumber@pInput
 26596  016032  C07E  F0D1         	movff	_val+1,HMI_SetNumber@pInput+1
 26597  016036  EC54  F0B1         	call	_HMI_SetNumber	;wreg free
 26598                           
 26599                           ;Events.c: 67: HMI_SetButton( j & 3 );
 26600  01603A  0100               	movlb	0	; () banked
 26601  01603C  5189               	movf	Event_TestButton@j& (0+255),w,b
 26602  01603E  0B03               	andlw	3
 26603  016040  EC5E  F0A6         	call	_HMI_SetButton
 26604  016044                     l1873:
 26605                           
 26606                           ;Events.c: 68: }
 26607                           ;Events.c: 72: LED_Toggle(eLED1);
 26608  016044  0E00               	movlw	0
 26609  016046  EC7C  F0AE         	call	_LED_Toggle
 26610  01604A  0012               	return		;funcret
 26611  01604C                     __end_of_Event_TestButton:
 26612                           	opt stack 0
 26613                           tosu	equ	0xFFF
 26614                           tosh	equ	0xFFE
 26615                           tosl	equ	0xFFD
 26616                           pclath	equ	0xFFA
 26617                           tblptru	equ	0xFF8
 26618                           tblptrh	equ	0xFF7
 26619                           tblptrl	equ	0xFF6
 26620                           tablat	equ	0xFF5
 26621                           prodh	equ	0xFF4
 26622                           prodl	equ	0xFF3
 26623                           intcon	equ	0xFF2
 26624                           postinc0	equ	0xFEE
 26625                           wreg	equ	0xFE8
 26626                           indf1	equ	0xFE7
 26627                           postdec1	equ	0xFE5
 26628                           fsr1h	equ	0xFE2
 26629                           fsr1l	equ	0xFE1
 26630                           indf2	equ	0xFDF
 26631                           postinc2	equ	0xFDE
 26632                           postdec2	equ	0xFDD
 26633                           plusw2	equ	0xFDB
 26634                           fsr2h	equ	0xFDA
 26635                           fsr2l	equ	0xFD9
 26636                           status	equ	0xFD8
 26637                           
 26638 ;; *************** function _HMI_SetNumber *****************
 26639 ;; Defined at:
 26640 ;;		line 221 in file "HMI.c"
 26641 ;; Parameters:    Size  Location     Type
 26642 ;;  pInput          2   22[BANK0 ] int 
 26643 ;; Auto vars:     Size  Location     Type
 26644 ;;		None
 26645 ;; Return value:  Size  Location     Type
 26646 ;;                  1    wreg      void 
 26647 ;; Registers used:
 26648 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26649 ;; Tracked objects:
 26650 ;;		On entry : 0/0
 26651 ;;		On exit  : 0/0
 26652 ;;		Unchanged: 0/0
 26653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26654 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26655 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26656 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26657 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26658 ;;Total ram usage:        2 bytes
 26659 ;; Hardware stack levels used:    1
 26660 ;; Hardware stack levels required when called:    9
 26661 ;; This function calls:
 26662 ;;		_HMI_SetSegments
 26663 ;;		_itos
 26664 ;; This function is called by:
 26665 ;;		_Event_TestButton
 26666 ;;		_findClosestWall
 26667 ;;		_mode1
 26668 ;;		_Event_HMI_UpButton
 26669 ;;		_Event_HMI_DownButton
 26670 ;; This function uses a non-reentrant model
 26671 ;;
 26672                           
 26673                           	psect	text140
 26674  0162A8                     __ptext140:
 26675                           	opt stack 0
 26676  0162A8                     _HMI_SetNumber:
 26677                           	opt stack 16
 26678                           
 26679                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 26680                           
 26681                           ;incstack = 0
 26682  0162A8  C0D0  F0C6         	movff	HMI_SetNumber@pInput,itos@input
 26683  0162AC  C0D1  F0C7         	movff	HMI_SetNumber@pInput+1,itos@input+1
 26684  0162B0  0E40               	movlw	low _HMIBoard
 26685  0162B2  0100               	movlb	0	; () banked
 26686  0162B4  6FC8               	movwf	itos@destination& (0+255),b
 26687  0162B6  0E03               	movlw	high _HMIBoard
 26688  0162B8  0100               	movlb	0	; () banked
 26689  0162BA  6FC9               	movwf	(itos@destination+1)& (0+255),b
 26690  0162BC  ECE6  F09D         	call	_itos	;wreg free
 26691                           
 26692                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 26693  0162C0  0E40               	movlw	low _HMIBoard
 26694  0162C2  0100               	movlb	0	; () banked
 26695  0162C4  6FBB               	movwf	HMI_SetSegments@pString& (0+255),b
 26696  0162C6  0E03               	movlw	high _HMIBoard
 26697  0162C8  0100               	movlb	0	; () banked
 26698  0162CA  6FBC               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 26699  0162CC  EC6F  F0A1         	call	_HMI_SetSegments	;wreg free
 26700  0162D0  0012               	return		;funcret
 26701  0162D2                     __end_of_HMI_SetNumber:
 26702                           	opt stack 0
 26703                           tosu	equ	0xFFF
 26704                           tosh	equ	0xFFE
 26705                           tosl	equ	0xFFD
 26706                           pclath	equ	0xFFA
 26707                           tblptru	equ	0xFF8
 26708                           tblptrh	equ	0xFF7
 26709                           tblptrl	equ	0xFF6
 26710                           tablat	equ	0xFF5
 26711                           prodh	equ	0xFF4
 26712                           prodl	equ	0xFF3
 26713                           intcon	equ	0xFF2
 26714                           postinc0	equ	0xFEE
 26715                           wreg	equ	0xFE8
 26716                           indf1	equ	0xFE7
 26717                           postdec1	equ	0xFE5
 26718                           fsr1h	equ	0xFE2
 26719                           fsr1l	equ	0xFE1
 26720                           indf2	equ	0xFDF
 26721                           postinc2	equ	0xFDE
 26722                           postdec2	equ	0xFDD
 26723                           plusw2	equ	0xFDB
 26724                           fsr2h	equ	0xFDA
 26725                           fsr2l	equ	0xFD9
 26726                           status	equ	0xFD8
 26727                           
 26728 ;; *************** function _itos *****************
 26729 ;; Defined at:
 26730 ;;		line 369 in file "Library/Types.c"
 26731 ;; Parameters:    Size  Location     Type
 26732 ;;  input           2   12[BANK0 ] unsigned short 
 26733 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 26734 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26735 ;; Auto vars:     Size  Location     Type
 26736 ;;  Out             2   20[BANK0 ] unsigned short 
 26737 ;;  Length          2   18[BANK0 ] unsigned short 
 26738 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 26739 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26740 ;; Return value:  Size  Location     Type
 26741 ;;                  1    wreg      void 
 26742 ;; Registers used:
 26743 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 26744 ;; Tracked objects:
 26745 ;;		On entry : 0/0
 26746 ;;		On exit  : 0/0
 26747 ;;		Unchanged: 0/0
 26748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26749 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26750 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26752 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26753 ;;Total ram usage:       10 bytes
 26754 ;; Hardware stack levels used:    1
 26755 ;; Hardware stack levels required when called:    8
 26756 ;; This function calls:
 26757 ;;		___lwdiv
 26758 ;;		___lwmod
 26759 ;;		_reverse
 26760 ;; This function is called by:
 26761 ;;		_HMI_SetNumber
 26762 ;; This function uses a non-reentrant model
 26763 ;;
 26764                           
 26765                           	psect	text141
 26766  013BCC                     __ptext141:
 26767                           	opt stack 0
 26768  013BCC                     _itos:
 26769                           	opt stack 16
 26770                           
 26771                           ;Types.c: 371: UINT16 Out = input;
 26772                           
 26773                           ;incstack = 0
 26774  013BCC  C0C6  F0CE         	movff	itos@input,itos@Out
 26775  013BD0  C0C7  F0CF         	movff	itos@input+1,itos@Out+1
 26776                           
 26777                           ;Types.c: 372: UINT16 Length = 0;
 26778  013BD4  0E00               	movlw	0
 26779  013BD6  0100               	movlb	0	; () banked
 26780  013BD8  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26781  013BDA  0E00               	movlw	0
 26782  013BDC  6FCC               	movwf	itos@Length& (0+255),b
 26783                           
 26784                           ; BSR set to: 0
 26785                           ;Types.c: 373: char *Data = destination;
 26786  013BDE  C0C8  F0CA         	movff	itos@destination,itos@Data
 26787  013BE2  C0C9  F0CB         	movff	itos@destination+1,itos@Data+1
 26788                           
 26789                           ; BSR set to: 0
 26790                           ;Types.c: 374: if(Out == 0)
 26791  013BE6  0100               	movlb	0	; () banked
 26792  013BE8  51CE               	movf	itos@Out& (0+255),w,b
 26793  013BEA  0100               	movlb	0	; () banked
 26794  013BEC  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26795  013BEE  A4D8               	btfss	status,2,c
 26796  013BF0  D034               	goto	l929
 26797                           
 26798                           ; BSR set to: 0
 26799                           ;Types.c: 375: {
 26800                           ;Types.c: 376: Data[0] = (UINT16)'0';
 26801  013BF2  C0CA  FFD9         	movff	itos@Data,fsr2l
 26802  013BF6  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26803  013BFA  0E30               	movlw	48
 26804  013BFC  6EDF               	movwf	indf2,c
 26805                           
 26806                           ; BSR set to: 0
 26807                           ;Types.c: 377: Length = 1;
 26808  013BFE  0E00               	movlw	0
 26809  013C00  0100               	movlb	0	; () banked
 26810  013C02  6FCD               	movwf	(itos@Length+1)& (0+255),b
 26811  013C04  0E01               	movlw	1
 26812  013C06  6FCC               	movwf	itos@Length& (0+255),b
 26813                           
 26814                           ;Types.c: 378: }
 26815  013C08  D040               	goto	l928
 26816  013C0A                     
 26817                           ; BSR set to: 0
 26818                           ;Types.c: 382: {
 26819                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 26820                           
 26821                           ; BSR set to: 0
 26822  013C0A  C0CE  F0C1         	movff	itos@Out,___lwmod@dividend
 26823  013C0E  C0CF  F0C2         	movff	itos@Out+1,___lwmod@dividend+1
 26824  013C12  0E00               	movlw	0
 26825  013C14  0100               	movlb	0	; () banked
 26826  013C16  6FC4               	movwf	(___lwmod@divisor+1)& (0+255),b
 26827  013C18  0E0A               	movlw	10
 26828  013C1A  6FC3               	movwf	___lwmod@divisor& (0+255),b
 26829  013C1C  EC67  F0AC         	call	___lwmod	;wreg free
 26830  013C20  0100               	movlb	0	; () banked
 26831  013C22  51C1               	movf	?___lwmod& (0+255),w,b
 26832  013C24  0F30               	addlw	48
 26833  013C26  C0CA  FFD9         	movff	itos@Data,fsr2l
 26834  013C2A  C0CB  FFDA         	movff	itos@Data+1,fsr2h
 26835  013C2E  6EDF               	movwf	indf2,c
 26836                           
 26837                           ; BSR set to: 0
 26838                           ;Types.c: 384: Out /= 10;
 26839  013C30  C0CE  F0BA         	movff	itos@Out,___lwdiv@dividend
 26840  013C34  C0CF  F0BB         	movff	itos@Out+1,___lwdiv@dividend+1
 26841  013C38  0E00               	movlw	0
 26842  013C3A  0100               	movlb	0	; () banked
 26843  013C3C  6FBD               	movwf	(___lwdiv@divisor+1)& (0+255),b
 26844  013C3E  0E0A               	movlw	10
 26845  013C40  6FBC               	movwf	___lwdiv@divisor& (0+255),b
 26846  013C42  ECFC  F0A8         	call	___lwdiv	;wreg free
 26847  013C46  C0BA  F0CE         	movff	?___lwdiv,itos@Out
 26848  013C4A  C0BB  F0CF         	movff	?___lwdiv+1,itos@Out+1
 26849                           
 26850                           ;Types.c: 385: Length ++;
 26851  013C4E  0100               	movlb	0	; () banked
 26852  013C50  4BCC               	infsnz	itos@Length& (0+255),f,b
 26853  013C52  2BCD               	incf	(itos@Length+1)& (0+255),f,b
 26854                           
 26855                           ; BSR set to: 0
 26856                           ;Types.c: 386: Data++;
 26857  013C54  0100               	movlb	0	; () banked
 26858  013C56  4BCA               	infsnz	itos@Data& (0+255),f,b
 26859  013C58  2BCB               	incf	(itos@Data+1)& (0+255),f,b
 26860  013C5A                     l929:
 26861                           
 26862                           ; BSR set to: 0
 26863                           
 26864                           ; BSR set to: 0
 26865  013C5A  0100               	movlb	0	; () banked
 26866  013C5C  51CE               	movf	itos@Out& (0+255),w,b
 26867  013C5E  0100               	movlb	0	; () banked
 26868  013C60  11CF               	iorwf	(itos@Out+1)& (0+255),w,b
 26869  013C62  B4D8               	btfsc	status,2,c
 26870  013C64  D008               	goto	u8960
 26871                           
 26872                           ; BSR set to: 0
 26873  013C66  0100               	movlb	0	; () banked
 26874  013C68  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26875  013C6A  E105               	bnz	l12343
 26876  013C6C  0E06               	movlw	6
 26877  013C6E  0100               	movlb	0	; () banked
 26878  013C70  5DCC               	subwf	itos@Length& (0+255),w,b
 26879  013C72  A0D8               	btfss	status,0,c
 26880  013C74  D7CA               	goto	l930
 26881  013C76                     u8960:
 26882  013C76                     l12343:
 26883                           
 26884                           ; BSR set to: 0
 26885                           ;Types.c: 387: }
 26886                           ;Types.c: 388: reverse(destination, Length);
 26887  013C76  C0C8  F0BA         	movff	itos@destination,reverse@input
 26888  013C7A  C0C9  F0BB         	movff	itos@destination+1,reverse@input+1
 26889  013C7E  C0CC  F0BC         	movff	itos@Length,reverse@length
 26890  013C82  C0CD  F0BD         	movff	itos@Length+1,reverse@length+1
 26891  013C86  ECC9  F0AA         	call	_reverse	;wreg free
 26892  013C8A                     l928:
 26893                           
 26894                           ;Types.c: 389: }
 26895                           ;Types.c: 390: destination[Length] = '\0';
 26896  013C8A  0100               	movlb	0	; () banked
 26897  013C8C  51CC               	movf	itos@Length& (0+255),w,b
 26898  013C8E  0100               	movlb	0	; () banked
 26899  013C90  25C8               	addwf	itos@destination& (0+255),w,b
 26900  013C92  6ED9               	movwf	fsr2l,c
 26901  013C94  0100               	movlb	0	; () banked
 26902  013C96  51CD               	movf	(itos@Length+1)& (0+255),w,b
 26903  013C98  0100               	movlb	0	; () banked
 26904  013C9A  21C9               	addwfc	(itos@destination+1)& (0+255),w,b
 26905  013C9C  6EDA               	movwf	fsr2h,c
 26906  013C9E  0E00               	movlw	0
 26907  013CA0  6EDF               	movwf	indf2,c
 26908                           
 26909                           ; BSR set to: 0
 26910  013CA2  0012               	return		;funcret
 26911  013CA4                     __end_of_itos:
 26912                           	opt stack 0
 26913                           tosu	equ	0xFFF
 26914                           tosh	equ	0xFFE
 26915                           tosl	equ	0xFFD
 26916                           pclath	equ	0xFFA
 26917                           tblptru	equ	0xFF8
 26918                           tblptrh	equ	0xFF7
 26919                           tblptrl	equ	0xFF6
 26920                           tablat	equ	0xFF5
 26921                           prodh	equ	0xFF4
 26922                           prodl	equ	0xFF3
 26923                           intcon	equ	0xFF2
 26924                           postinc0	equ	0xFEE
 26925                           wreg	equ	0xFE8
 26926                           indf1	equ	0xFE7
 26927                           postdec1	equ	0xFE5
 26928                           fsr1h	equ	0xFE2
 26929                           fsr1l	equ	0xFE1
 26930                           indf2	equ	0xFDF
 26931                           postinc2	equ	0xFDE
 26932                           postdec2	equ	0xFDD
 26933                           plusw2	equ	0xFDB
 26934                           fsr2h	equ	0xFDA
 26935                           fsr2l	equ	0xFD9
 26936                           status	equ	0xFD8
 26937                           
 26938 ;; *************** function _reverse *****************
 26939 ;; Defined at:
 26940 ;;		line 357 in file "Library/Types.c"
 26941 ;; Parameters:    Size  Location     Type
 26942 ;;  input           2    0[BANK0 ] PTR unsigned char 
 26943 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26944 ;;  length          2    2[BANK0 ] unsigned short 
 26945 ;; Auto vars:     Size  Location     Type
 26946 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 26947 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 26948 ;;  tempVar         1    4[BANK0 ] unsigned char 
 26949 ;; Return value:  Size  Location     Type
 26950 ;;                  1    wreg      void 
 26951 ;; Registers used:
 26952 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 26953 ;; Tracked objects:
 26954 ;;		On entry : 0/0
 26955 ;;		On exit  : 0/0
 26956 ;;		Unchanged: 0/0
 26957 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 26958 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26959 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26960 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26961 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 26962 ;;Total ram usage:        7 bytes
 26963 ;; Hardware stack levels used:    1
 26964 ;; Hardware stack levels required when called:    7
 26965 ;; This function calls:
 26966 ;;		Nothing
 26967 ;; This function is called by:
 26968 ;;		_itos
 26969 ;; This function uses a non-reentrant model
 26970 ;;
 26971                           
 26972                           	psect	text142
 26973  015592                     __ptext142:
 26974                           	opt stack 0
 26975  015592                     _reverse:
 26976                           	opt stack 16
 26977                           
 26978                           ;Types.c: 359: char tempVar,
 26979                           ;Types.c: 360: *iterator = input + length;
 26980                           
 26981                           ; BSR set to: 0
 26982                           ;incstack = 0
 26983  015592  0100               	movlb	0	; () banked
 26984  015594  51BC               	movf	reverse@length& (0+255),w,b
 26985  015596  0100               	movlb	0	; () banked
 26986  015598  25BA               	addwf	reverse@input& (0+255),w,b
 26987  01559A  0100               	movlb	0	; () banked
 26988  01559C  6FBF               	movwf	reverse@iterator& (0+255),b
 26989  01559E  0100               	movlb	0	; () banked
 26990  0155A0  51BD               	movf	(reverse@length+1)& (0+255),w,b
 26991  0155A2  0100               	movlb	0	; () banked
 26992  0155A4  21BB               	addwfc	(reverse@input+1)& (0+255),w,b
 26993  0155A6  0100               	movlb	0	; () banked
 26994  0155A8  6FC0               	movwf	(reverse@iterator+1)& (0+255),b
 26995                           
 26996                           ;Types.c: 362: while ( --iterator > input )
 26997  0155AA  D01A               	goto	l921
 26998  0155AC                     
 26999                           ; BSR set to: 0
 27000                           ;Types.c: 363: {
 27001                           ;Types.c: 364: tempVar = *input;
 27002                           
 27003                           ; BSR set to: 0
 27004  0155AC  C0BA  FFD9         	movff	reverse@input,fsr2l
 27005  0155B0  C0BB  FFDA         	movff	reverse@input+1,fsr2h
 27006  0155B4  50DF               	movf	indf2,w,c
 27007  0155B6  0100               	movlb	0	; () banked
 27008  0155B8  6FBE               	movwf	reverse@tempVar& (0+255),b
 27009                           
 27010                           ; BSR set to: 0
 27011                           ;Types.c: 365: *input++=*iterator;
 27012  0155BA  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27013  0155BE  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27014  0155C2  C0BA  FFE1         	movff	reverse@input,fsr1l
 27015  0155C6  C0BB  FFE2         	movff	reverse@input+1,fsr1h
 27016  0155CA  CFDF FFE7          	movff	indf2,indf1
 27017                           
 27018                           ; BSR set to: 0
 27019  0155CE  0100               	movlb	0	; () banked
 27020  0155D0  4BBA               	infsnz	reverse@input& (0+255),f,b
 27021  0155D2  2BBB               	incf	(reverse@input+1)& (0+255),f,b
 27022                           
 27023                           ; BSR set to: 0
 27024                           ;Types.c: 366: *iterator=tempVar;
 27025  0155D4  C0BF  FFD9         	movff	reverse@iterator,fsr2l
 27026  0155D8  C0C0  FFDA         	movff	reverse@iterator+1,fsr2h
 27027  0155DC  C0BE  FFDF         	movff	reverse@tempVar,indf2
 27028  0155E0                     l921:
 27029                           
 27030                           ; BSR set to: 0
 27031                           
 27032                           ; BSR set to: 0
 27033  0155E0  0100               	movlb	0	; () banked
 27034  0155E2  07BF               	decf	reverse@iterator& (0+255),f,b
 27035  0155E4  A0D8               	btfss	status,0,c
 27036  0155E6  07C0               	decf	(reverse@iterator+1)& (0+255),f,b
 27037  0155E8  0100               	movlb	0	; () banked
 27038  0155EA  51BF               	movf	reverse@iterator& (0+255),w,b
 27039  0155EC  0100               	movlb	0	; () banked
 27040  0155EE  5DBA               	subwf	reverse@input& (0+255),w,b
 27041  0155F0  0100               	movlb	0	; () banked
 27042  0155F2  51C0               	movf	(reverse@iterator+1)& (0+255),w,b
 27043  0155F4  0100               	movlb	0	; () banked
 27044  0155F6  59BB               	subwfb	(reverse@input+1)& (0+255),w,b
 27045  0155F8  B0D8               	btfsc	status,0,c
 27046  0155FA  0012               	return	
 27047  0155FC  D7D7               	goto	l922
 27048  0155FE                     __end_of_reverse:
 27049                           	opt stack 0
 27050                           tosu	equ	0xFFF
 27051                           tosh	equ	0xFFE
 27052                           tosl	equ	0xFFD
 27053                           pclath	equ	0xFFA
 27054                           tblptru	equ	0xFF8
 27055                           tblptrh	equ	0xFF7
 27056                           tblptrl	equ	0xFF6
 27057                           tablat	equ	0xFF5
 27058                           prodh	equ	0xFF4
 27059                           prodl	equ	0xFF3
 27060                           intcon	equ	0xFF2
 27061                           postinc0	equ	0xFEE
 27062                           wreg	equ	0xFE8
 27063                           indf1	equ	0xFE7
 27064                           postdec1	equ	0xFE5
 27065                           fsr1h	equ	0xFE2
 27066                           fsr1l	equ	0xFE1
 27067                           indf2	equ	0xFDF
 27068                           postinc2	equ	0xFDE
 27069                           postdec2	equ	0xFDD
 27070                           plusw2	equ	0xFDB
 27071                           fsr2h	equ	0xFDA
 27072                           fsr2l	equ	0xFD9
 27073                           status	equ	0xFD8
 27074                           
 27075 ;; *************** function ___lwmod *****************
 27076 ;; Defined at:
 27077 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 27078 ;; Parameters:    Size  Location     Type
 27079 ;;  dividend        2    7[BANK0 ] unsigned int 
 27080 ;;  divisor         2    9[BANK0 ] unsigned int 
 27081 ;; Auto vars:     Size  Location     Type
 27082 ;;  counter         1   11[BANK0 ] unsigned char 
 27083 ;; Return value:  Size  Location     Type
 27084 ;;                  2    7[BANK0 ] unsigned int 
 27085 ;; Registers used:
 27086 ;;		wreg, status,2, status,0
 27087 ;; Tracked objects:
 27088 ;;		On entry : 0/0
 27089 ;;		On exit  : 0/0
 27090 ;;		Unchanged: 0/0
 27091 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27092 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27093 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27094 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27095 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27096 ;;Total ram usage:        5 bytes
 27097 ;; Hardware stack levels used:    1
 27098 ;; Hardware stack levels required when called:    7
 27099 ;; This function calls:
 27100 ;;		Nothing
 27101 ;; This function is called by:
 27102 ;;		_itos
 27103 ;;		_printf
 27104 ;; This function uses a non-reentrant model
 27105 ;;
 27106                           
 27107                           	psect	text143
 27108  0158CE                     __ptext143:
 27109                           	opt stack 0
 27110  0158CE                     ___lwmod:
 27111                           	opt stack 22
 27112                           
 27113                           ; BSR set to: 0
 27114                           ;incstack = 0
 27115  0158CE  0100               	movlb	0	; () banked
 27116  0158D0  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27117  0158D2  0100               	movlb	0	; () banked
 27118  0158D4  11C4               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 27119  0158D6  B4D8               	btfsc	status,2,c
 27120  0158D8  D026               	goto	l2864
 27121                           
 27122                           ; BSR set to: 0
 27123  0158DA  0E01               	movlw	1
 27124  0158DC  0100               	movlb	0	; () banked
 27125  0158DE  6FC5               	movwf	___lwmod@counter& (0+255),b
 27126  0158E0  D006               	goto	l2859
 27127  0158E2                     
 27128                           ; BSR set to: 0
 27129                           
 27130                           ; BSR set to: 0
 27131  0158E2  0100               	movlb	0	; () banked
 27132  0158E4  90D8               	bcf	status,0,c
 27133  0158E6  37C3               	rlcf	___lwmod@divisor& (0+255),f,b
 27134  0158E8  37C4               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 27135  0158EA  0100               	movlb	0	; () banked
 27136  0158EC  2BC5               	incf	___lwmod@counter& (0+255),f,b
 27137  0158EE                     l2859:
 27138                           
 27139                           ; BSR set to: 0
 27140                           
 27141                           ; BSR set to: 0
 27142  0158EE  0100               	movlb	0	; () banked
 27143  0158F0  AFC4               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 27144  0158F2  D7F7               	goto	l2860
 27145  0158F4                     u8880:
 27146                           
 27147                           ; BSR set to: 0
 27148                           
 27149                           ; BSR set to: 0
 27150                           
 27151                           ; BSR set to: 0
 27152  0158F4  0100               	movlb	0	; () banked
 27153  0158F6  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27154  0158F8  0100               	movlb	0	; () banked
 27155  0158FA  5DC1               	subwf	___lwmod@dividend& (0+255),w,b
 27156  0158FC  0100               	movlb	0	; () banked
 27157  0158FE  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27158  015900  0100               	movlb	0	; () banked
 27159  015902  59C2               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 27160  015904  A0D8               	btfss	status,0,c
 27161  015906  D008               	goto	l2863
 27162                           
 27163                           ; BSR set to: 0
 27164  015908  0100               	movlb	0	; () banked
 27165  01590A  51C3               	movf	___lwmod@divisor& (0+255),w,b
 27166  01590C  0100               	movlb	0	; () banked
 27167  01590E  5FC1               	subwf	___lwmod@dividend& (0+255),f,b
 27168  015910  0100               	movlb	0	; () banked
 27169  015912  51C4               	movf	(___lwmod@divisor+1)& (0+255),w,b
 27170  015914  0100               	movlb	0	; () banked
 27171  015916  5BC2               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 27172  015918                     l2863:
 27173                           
 27174                           ; BSR set to: 0
 27175                           
 27176                           ; BSR set to: 0
 27177  015918  0100               	movlb	0	; () banked
 27178  01591A  90D8               	bcf	status,0,c
 27179  01591C  33C4               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 27180  01591E  33C3               	rrcf	___lwmod@divisor& (0+255),f,b
 27181                           
 27182                           ; BSR set to: 0
 27183  015920  0100               	movlb	0	; () banked
 27184  015922  2FC5               	decfsz	___lwmod@counter& (0+255),f,b
 27185  015924  D7E7               	goto	u8880
 27186  015926                     l2864:
 27187                           
 27188                           ; BSR set to: 0
 27189                           
 27190                           ; BSR set to: 0
 27191  015926  C0C1  F0C1         	movff	___lwmod@dividend,?___lwmod
 27192  01592A  C0C2  F0C2         	movff	___lwmod@dividend+1,?___lwmod+1
 27193                           
 27194                           ; BSR set to: 0
 27195  01592E  0012               	return		;funcret
 27196  015930                     __end_of___lwmod:
 27197                           	opt stack 0
 27198                           tosu	equ	0xFFF
 27199                           tosh	equ	0xFFE
 27200                           tosl	equ	0xFFD
 27201                           pclath	equ	0xFFA
 27202                           tblptru	equ	0xFF8
 27203                           tblptrh	equ	0xFF7
 27204                           tblptrl	equ	0xFF6
 27205                           tablat	equ	0xFF5
 27206                           prodh	equ	0xFF4
 27207                           prodl	equ	0xFF3
 27208                           intcon	equ	0xFF2
 27209                           postinc0	equ	0xFEE
 27210                           wreg	equ	0xFE8
 27211                           indf1	equ	0xFE7
 27212                           postdec1	equ	0xFE5
 27213                           fsr1h	equ	0xFE2
 27214                           fsr1l	equ	0xFE1
 27215                           indf2	equ	0xFDF
 27216                           postinc2	equ	0xFDE
 27217                           postdec2	equ	0xFDD
 27218                           plusw2	equ	0xFDB
 27219                           fsr2h	equ	0xFDA
 27220                           fsr2l	equ	0xFD9
 27221                           status	equ	0xFD8
 27222                           
 27223 ;; *************** function ___lwdiv *****************
 27224 ;; Defined at:
 27225 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 27226 ;; Parameters:    Size  Location     Type
 27227 ;;  dividend        2    0[BANK0 ] unsigned int 
 27228 ;;  divisor         2    2[BANK0 ] unsigned int 
 27229 ;; Auto vars:     Size  Location     Type
 27230 ;;  quotient        2    5[BANK0 ] unsigned int 
 27231 ;;  counter         1    4[BANK0 ] unsigned char 
 27232 ;; Return value:  Size  Location     Type
 27233 ;;                  2    0[BANK0 ] unsigned int 
 27234 ;; Registers used:
 27235 ;;		wreg, status,2, status,0
 27236 ;; Tracked objects:
 27237 ;;		On entry : 0/0
 27238 ;;		On exit  : 0/0
 27239 ;;		Unchanged: 0/0
 27240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27241 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27242 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27244 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27245 ;;Total ram usage:        7 bytes
 27246 ;; Hardware stack levels used:    1
 27247 ;; Hardware stack levels required when called:    7
 27248 ;; This function calls:
 27249 ;;		Nothing
 27250 ;; This function is called by:
 27251 ;;		_itos
 27252 ;;		_printf
 27253 ;; This function uses a non-reentrant model
 27254 ;;
 27255                           
 27256                           	psect	text144
 27257  0151F8                     __ptext144:
 27258                           	opt stack 0
 27259  0151F8                     ___lwdiv:
 27260                           	opt stack 22
 27261                           
 27262                           ; BSR set to: 0
 27263                           ;incstack = 0
 27264  0151F8  0E00               	movlw	0
 27265  0151FA  0100               	movlb	0	; () banked
 27266  0151FC  6FC0               	movwf	(___lwdiv@quotient+1)& (0+255),b
 27267  0151FE  0E00               	movlw	0
 27268  015200  6FBF               	movwf	___lwdiv@quotient& (0+255),b
 27269                           
 27270                           ; BSR set to: 0
 27271  015202  0100               	movlb	0	; () banked
 27272  015204  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27273  015206  0100               	movlb	0	; () banked
 27274  015208  11BD               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 27275  01520A  B4D8               	btfsc	status,2,c
 27276  01520C  D02C               	goto	l2854
 27277                           
 27278                           ; BSR set to: 0
 27279  01520E  0E01               	movlw	1
 27280  015210  0100               	movlb	0	; () banked
 27281  015212  6FBE               	movwf	___lwdiv@counter& (0+255),b
 27282  015214  D006               	goto	l2849
 27283  015216                     
 27284                           ; BSR set to: 0
 27285                           
 27286                           ; BSR set to: 0
 27287  015216  0100               	movlb	0	; () banked
 27288  015218  90D8               	bcf	status,0,c
 27289  01521A  37BC               	rlcf	___lwdiv@divisor& (0+255),f,b
 27290  01521C  37BD               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 27291  01521E  0100               	movlb	0	; () banked
 27292  015220  2BBE               	incf	___lwdiv@counter& (0+255),f,b
 27293  015222                     l2849:
 27294                           
 27295                           ; BSR set to: 0
 27296                           
 27297                           ; BSR set to: 0
 27298  015222  0100               	movlb	0	; () banked
 27299  015224  AFBD               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 27300  015226  D7F7               	goto	l2850
 27301  015228                     u8850:
 27302                           
 27303                           ; BSR set to: 0
 27304                           
 27305                           ; BSR set to: 0
 27306                           
 27307                           ; BSR set to: 0
 27308  015228  0100               	movlb	0	; () banked
 27309  01522A  90D8               	bcf	status,0,c
 27310  01522C  37BF               	rlcf	___lwdiv@quotient& (0+255),f,b
 27311  01522E  37C0               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 27312                           
 27313                           ; BSR set to: 0
 27314  015230  0100               	movlb	0	; () banked
 27315  015232  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27316  015234  0100               	movlb	0	; () banked
 27317  015236  5DBA               	subwf	___lwdiv@dividend& (0+255),w,b
 27318  015238  0100               	movlb	0	; () banked
 27319  01523A  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27320  01523C  0100               	movlb	0	; () banked
 27321  01523E  59BB               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 27322  015240  A0D8               	btfss	status,0,c
 27323  015242  D00A               	goto	l2853
 27324                           
 27325                           ; BSR set to: 0
 27326  015244  0100               	movlb	0	; () banked
 27327  015246  51BC               	movf	___lwdiv@divisor& (0+255),w,b
 27328  015248  0100               	movlb	0	; () banked
 27329  01524A  5FBA               	subwf	___lwdiv@dividend& (0+255),f,b
 27330  01524C  0100               	movlb	0	; () banked
 27331  01524E  51BD               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 27332  015250  0100               	movlb	0	; () banked
 27333  015252  5BBB               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 27334                           
 27335                           ; BSR set to: 0
 27336  015254  0100               	movlb	0	; () banked
 27337  015256  81BF               	bsf	___lwdiv@quotient& (0+255),0,b
 27338  015258                     l2853:
 27339                           
 27340                           ; BSR set to: 0
 27341                           
 27342                           ; BSR set to: 0
 27343  015258  0100               	movlb	0	; () banked
 27344  01525A  90D8               	bcf	status,0,c
 27345  01525C  33BD               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 27346  01525E  33BC               	rrcf	___lwdiv@divisor& (0+255),f,b
 27347                           
 27348                           ; BSR set to: 0
 27349  015260  0100               	movlb	0	; () banked
 27350  015262  2FBE               	decfsz	___lwdiv@counter& (0+255),f,b
 27351  015264  D7E1               	goto	u8850
 27352  015266                     l2854:
 27353                           
 27354                           ; BSR set to: 0
 27355                           
 27356                           ; BSR set to: 0
 27357  015266  C0BF  F0BA         	movff	___lwdiv@quotient,?___lwdiv
 27358  01526A  C0C0  F0BB         	movff	___lwdiv@quotient+1,?___lwdiv+1
 27359                           
 27360                           ; BSR set to: 0
 27361  01526E  0012               	return		;funcret
 27362  015270                     __end_of___lwdiv:
 27363                           	opt stack 0
 27364                           tosu	equ	0xFFF
 27365                           tosh	equ	0xFFE
 27366                           tosl	equ	0xFFD
 27367                           pclath	equ	0xFFA
 27368                           tblptru	equ	0xFF8
 27369                           tblptrh	equ	0xFF7
 27370                           tblptrl	equ	0xFF6
 27371                           tablat	equ	0xFF5
 27372                           prodh	equ	0xFF4
 27373                           prodl	equ	0xFF3
 27374                           intcon	equ	0xFF2
 27375                           postinc0	equ	0xFEE
 27376                           wreg	equ	0xFE8
 27377                           indf1	equ	0xFE7
 27378                           postdec1	equ	0xFE5
 27379                           fsr1h	equ	0xFE2
 27380                           fsr1l	equ	0xFE1
 27381                           indf2	equ	0xFDF
 27382                           postinc2	equ	0xFDE
 27383                           postdec2	equ	0xFDD
 27384                           plusw2	equ	0xFDB
 27385                           fsr2h	equ	0xFDA
 27386                           fsr2l	equ	0xFD9
 27387                           status	equ	0xFD8
 27388                           
 27389 ;; *************** function _HMI_SetSegments *****************
 27390 ;; Defined at:
 27391 ;;		line 226 in file "HMI.c"
 27392 ;; Parameters:    Size  Location     Type
 27393 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 27394 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 27395 ;; Auto vars:     Size  Location     Type
 27396 ;;  in              2    4[BANK0 ] unsigned short 
 27397 ;; Return value:  Size  Location     Type
 27398 ;;                  1    wreg      void 
 27399 ;; Registers used:
 27400 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 27401 ;; Tracked objects:
 27402 ;;		On entry : 0/0
 27403 ;;		On exit  : 0/0
 27404 ;;		Unchanged: 0/0
 27405 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27406 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27407 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27408 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27409 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27410 ;;Total ram usage:        5 bytes
 27411 ;; Hardware stack levels used:    1
 27412 ;; Hardware stack levels required when called:    8
 27413 ;; This function calls:
 27414 ;;		_ToSegment
 27415 ;; This function is called by:
 27416 ;;		_HMI_SetNumber
 27417 ;; This function uses a non-reentrant model
 27418 ;;
 27419                           
 27420                           	psect	text145
 27421  0142DE                     __ptext145:
 27422                           	opt stack 0
 27423  0142DE                     _HMI_SetSegments:
 27424                           	opt stack 16
 27425                           
 27426                           ;HMI.c: 228: UINT16 in=0;
 27427                           
 27428                           ; BSR set to: 0
 27429                           ;incstack = 0
 27430  0142DE  0E00               	movlw	0
 27431  0142E0  0100               	movlb	0	; () banked
 27432  0142E2  6FBF               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 27433  0142E4  0E00               	movlw	0
 27434  0142E6  6FBE               	movwf	HMI_SetSegments@in& (0+255),b
 27435                           
 27436                           ;HMI.c: 229: while(*pString)
 27437  0142E8  D038               	goto	l1202
 27438  0142EA                     
 27439                           ; BSR set to: 0
 27440                           ;HMI.c: 230: {
 27441                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 27442                           
 27443                           ; BSR set to: 0
 27444  0142EA  0E40               	movlw	low _HMIBoard
 27445  0142EC  0100               	movlb	0	; () banked
 27446  0142EE  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27447  0142F0  6ED9               	movwf	fsr2l,c
 27448  0142F2  0E03               	movlw	high _HMIBoard
 27449  0142F4  0100               	movlb	0	; () banked
 27450  0142F6  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27451  0142F8  6EDA               	movwf	fsr2h,c
 27452  0142FA  C0BB  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 27453  0142FE  C0BC  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 27454  014302  50E7               	movf	indf1,w,c
 27455  014304  ECEA  F08B         	call	_ToSegment
 27456  014308  6EDF               	movwf	indf2,c
 27457                           
 27458                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 27459  01430A  0E40               	movlw	low _HMIBoard
 27460  01430C  0100               	movlb	0	; () banked
 27461  01430E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27462  014310  6ED9               	movwf	fsr2l,c
 27463  014312  0E03               	movlw	high _HMIBoard
 27464  014314  0100               	movlb	0	; () banked
 27465  014316  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27466  014318  6EDA               	movwf	fsr2h,c
 27467  01431A  0E80               	movlw	128
 27468  01431C  18DE               	xorwf	postinc2,w,c
 27469  01431E  A4D8               	btfss	status,2,c
 27470  014320  D00E               	goto	l1201
 27471                           
 27472                           ; BSR set to: 0
 27473                           ;HMI.c: 234: {
 27474                           ;HMI.c: 235: in--;
 27475  014322  0100               	movlb	0	; () banked
 27476  014324  07BE               	decf	HMI_SetSegments@in& (0+255),f,b
 27477  014326  A0D8               	btfss	status,0,c
 27478  014328  07BF               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 27479                           
 27480                           ; BSR set to: 0
 27481                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 27482  01432A  0E40               	movlw	low _HMIBoard
 27483  01432C  0100               	movlb	0	; () banked
 27484  01432E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27485  014330  6ED9               	movwf	fsr2l,c
 27486  014332  0E03               	movlw	high _HMIBoard
 27487  014334  0100               	movlb	0	; () banked
 27488  014336  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27489  014338  6EDA               	movwf	fsr2h,c
 27490  01433A  0E00               	movlw	0
 27491  01433C  8EDB               	bsf	plusw2,7,c
 27492  01433E                     l1201:
 27493                           
 27494                           ; BSR set to: 0
 27495                           ;HMI.c: 237: }
 27496                           ;HMI.c: 239: pString++;
 27497                           
 27498                           ; BSR set to: 0
 27499  01433E  0100               	movlb	0	; () banked
 27500  014340  4BBB               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 27501  014342  2BBC               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 27502                           
 27503                           ; BSR set to: 0
 27504                           ;HMI.c: 240: in++;
 27505  014344  0100               	movlb	0	; () banked
 27506  014346  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27507  014348  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27508                           
 27509                           ; BSR set to: 0
 27510                           ;HMI.c: 241: if (in>=6)
 27511  01434A  0100               	movlb	0	; () banked
 27512  01434C  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27513  01434E  E11A               	bnz	l12395
 27514  014350  0E06               	movlw	6
 27515  014352  0100               	movlb	0	; () banked
 27516  014354  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27517  014356  B0D8               	btfsc	status,0,c
 27518  014358  D015               	goto	l1204
 27519  01435A                     l1202:
 27520                           
 27521                           ; BSR set to: 0
 27522                           
 27523                           ; BSR set to: 0
 27524                           
 27525                           ; BSR set to: 0
 27526  01435A  C0BB  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 27527  01435E  C0BC  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 27528  014362  50DF               	movf	indf2,w,c
 27529  014364  B4D8               	btfsc	status,2,c
 27530  014366  D00E               	goto	l1204
 27531  014368  D7C0               	goto	l1200
 27532  01436A                     
 27533                           ; BSR set to: 0
 27534                           ;HMI.c: 245: {
 27535                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 27536                           
 27537                           ; BSR set to: 0
 27538  01436A  0E40               	movlw	low _HMIBoard
 27539  01436C  0100               	movlb	0	; () banked
 27540  01436E  25BE               	addwf	HMI_SetSegments@in& (0+255),w,b
 27541  014370  6ED9               	movwf	fsr2l,c
 27542  014372  0E03               	movlw	high _HMIBoard
 27543  014374  0100               	movlb	0	; () banked
 27544  014376  21BF               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 27545  014378  6EDA               	movwf	fsr2h,c
 27546  01437A  0E00               	movlw	0
 27547  01437C  6EDF               	movwf	indf2,c
 27548                           
 27549                           ; BSR set to: 0
 27550                           ;HMI.c: 247: in++;
 27551  01437E  0100               	movlb	0	; () banked
 27552  014380  4BBE               	infsnz	HMI_SetSegments@in& (0+255),f,b
 27553  014382  2BBF               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 27554  014384                     l1204:
 27555  014384                     l12395:
 27556                           
 27557                           ; BSR set to: 0
 27558  014384  0100               	movlb	0	; () banked
 27559  014386  51BF               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 27560  014388  E106               	bnz	l1207
 27561  01438A  0E06               	movlw	6
 27562  01438C  0100               	movlb	0	; () banked
 27563  01438E  5DBE               	subwf	HMI_SetSegments@in& (0+255),w,b
 27564  014390  B0D8               	btfsc	status,0,c
 27565  014392  0012               	return	
 27566  014394  D7EA               	goto	l1205
 27567  014396                     l1207:
 27568                           
 27569                           ; BSR set to: 0
 27570  014396  0012               	return		;funcret
 27571  014398                     __end_of_HMI_SetSegments:
 27572                           	opt stack 0
 27573                           tosu	equ	0xFFF
 27574                           tosh	equ	0xFFE
 27575                           tosl	equ	0xFFD
 27576                           pclath	equ	0xFFA
 27577                           tblptru	equ	0xFF8
 27578                           tblptrh	equ	0xFF7
 27579                           tblptrl	equ	0xFF6
 27580                           tablat	equ	0xFF5
 27581                           prodh	equ	0xFF4
 27582                           prodl	equ	0xFF3
 27583                           intcon	equ	0xFF2
 27584                           postinc0	equ	0xFEE
 27585                           wreg	equ	0xFE8
 27586                           indf1	equ	0xFE7
 27587                           postdec1	equ	0xFE5
 27588                           fsr1h	equ	0xFE2
 27589                           fsr1l	equ	0xFE1
 27590                           indf2	equ	0xFDF
 27591                           postinc2	equ	0xFDE
 27592                           postdec2	equ	0xFDD
 27593                           plusw2	equ	0xFDB
 27594                           fsr2h	equ	0xFDA
 27595                           fsr2l	equ	0xFD9
 27596                           status	equ	0xFD8
 27597                           
 27598 ;; *************** function _ToSegment *****************
 27599 ;; Defined at:
 27600 ;;		line 284 in file "Library/Types.c"
 27601 ;; Parameters:    Size  Location     Type
 27602 ;;  pCHR            1    wreg     unsigned char 
 27603 ;; Auto vars:     Size  Location     Type
 27604 ;;  pCHR            1    0[BANK0 ] unsigned char 
 27605 ;; Return value:  Size  Location     Type
 27606 ;;                  1    wreg      unsigned char 
 27607 ;; Registers used:
 27608 ;;		wreg, status,2, status,0
 27609 ;; Tracked objects:
 27610 ;;		On entry : 0/0
 27611 ;;		On exit  : 0/0
 27612 ;;		Unchanged: 0/0
 27613 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 27614 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27615 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27616 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27617 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 27618 ;;Total ram usage:        1 bytes
 27619 ;; Hardware stack levels used:    1
 27620 ;; Hardware stack levels required when called:    7
 27621 ;; This function calls:
 27622 ;;		Nothing
 27623 ;; This function is called by:
 27624 ;;		_HMI_SetSegments
 27625 ;; This function uses a non-reentrant model
 27626 ;;
 27627                           
 27628                           	psect	text146
 27629  0117D4                     __ptext146:
 27630                           	opt stack 0
 27631  0117D4                     _ToSegment:
 27632                           	opt stack 16
 27633                           
 27634                           ; BSR set to: 0
 27635                           ;incstack = 0
 27636                           ;ToSegment@pCHR stored from wreg
 27637  0117D4  0100               	movlb	0	; () banked
 27638  0117D6  6FBA               	movwf	ToSegment@pCHR& (0+255),b
 27639                           
 27640                           ;Types.c: 286: switch(pCHR)
 27641  0117D8  D07E               	goto	l853
 27642  0117DA  0E3F               	movlw	63
 27643  0117DC  0012               	return	
 27644  0117DE  0E06               	movlw	6
 27645  0117E0  0012               	return	
 27646  0117E2  0E5B               	movlw	91
 27647  0117E4  0012               	return	
 27648  0117E6  0E4F               	movlw	79
 27649  0117E8  0012               	return	
 27650  0117EA  0E66               	movlw	102
 27651  0117EC  0012               	return	
 27652  0117EE  0E6D               	movlw	109
 27653  0117F0  0012               	return	
 27654  0117F2  0E7D               	movlw	125
 27655  0117F4  0012               	return	
 27656  0117F6  0E07               	movlw	7
 27657  0117F8  0012               	return	
 27658  0117FA  0E7F               	movlw	127
 27659  0117FC  0012               	return	
 27660  0117FE  0E6F               	movlw	111
 27661  011800  0012               	return	
 27662  011802  0E5F               	movlw	95
 27663  011804  0012               	return	
 27664  011806  0E7C               	movlw	124
 27665  011808  0012               	return	
 27666  01180A  0E58               	movlw	88
 27667  01180C  0012               	return	
 27668  01180E  0E5E               	movlw	94
 27669  011810  0012               	return	
 27670  011812  0E7B               	movlw	123
 27671  011814  0012               	return	
 27672  011816  0E71               	movlw	113
 27673  011818  0012               	return	
 27674  01181A  0E6F               	movlw	111
 27675  01181C  0012               	return	
 27676  01181E  0E74               	movlw	116
 27677  011820  0012               	return	
 27678  011822  0E04               	movlw	4
 27679  011824  0012               	return	
 27680  011826  0E0E               	movlw	14
 27681  011828  0012               	return	
 27682  01182A  0E7A               	movlw	122
 27683  01182C  0012               	return	
 27684  01182E  0E06               	movlw	6
 27685  011830  0012               	return	
 27686  011832  0E14               	movlw	20
 27687  011834  0012               	return	
 27688  011836  0E54               	movlw	84
 27689  011838  0012               	return	
 27690  01183A  0E5C               	movlw	92
 27691  01183C  0012               	return	
 27692  01183E  0E73               	movlw	115
 27693  011840  0012               	return	
 27694  011842  0E67               	movlw	103
 27695  011844  0012               	return	
 27696  011846  0E50               	movlw	80
 27697  011848  0012               	return	
 27698  01184A  0E6D               	movlw	109
 27699  01184C  0012               	return	
 27700  01184E  0E78               	movlw	120
 27701  011850  0012               	return	
 27702  011852  0E1C               	movlw	28
 27703  011854  0012               	return	
 27704  011856  0E62               	movlw	98
 27705  011858  0012               	return	
 27706  01185A  0E2A               	movlw	42
 27707  01185C  0012               	return	
 27708  01185E  0E64               	movlw	100
 27709  011860  0012               	return	
 27710  011862  0E6E               	movlw	110
 27711  011864  0012               	return	
 27712  011866  0E5B               	movlw	91
 27713  011868  0012               	return	
 27714  01186A  0E77               	movlw	119
 27715  01186C  0012               	return	
 27716  01186E  0E7F               	movlw	127
 27717  011870  0012               	return	
 27718  011872  0E39               	movlw	57
 27719  011874  0012               	return	
 27720  011876  0E3F               	movlw	63
 27721  011878  0012               	return	
 27722  01187A  0E79               	movlw	121
 27723  01187C  0012               	return	
 27724  01187E  0E71               	movlw	113
 27725  011880  0012               	return	
 27726  011882  0E3D               	movlw	61
 27727  011884  0012               	return	
 27728  011886  0E76               	movlw	118
 27729  011888  0012               	return	
 27730  01188A  0E06               	movlw	6
 27731  01188C  0012               	return	
 27732  01188E  0E1E               	movlw	30
 27733  011890  0012               	return	
 27734  011892  0E57               	movlw	87
 27735  011894  0012               	return	
 27736  011896  0E38               	movlw	56
 27737  011898  0012               	return	
 27738  01189A  0E76               	movlw	118
 27739  01189C  0012               	return	
 27740  01189E  0E76               	movlw	118
 27741  0118A0  0012               	return	
 27742  0118A2  0E3F               	movlw	63
 27743  0118A4  0012               	return	
 27744  0118A6  0E73               	movlw	115
 27745  0118A8  0012               	return	
 27746  0118AA  0E3F               	movlw	63
 27747  0118AC  0012               	return	
 27748  0118AE  0E77               	movlw	119
 27749  0118B0  0012               	return	
 27750  0118B2  0E6D               	movlw	109
 27751  0118B4  0012               	return	
 27752  0118B6  0E31               	movlw	49
 27753  0118B8  0012               	return	
 27754  0118BA  0E3E               	movlw	62
 27755  0118BC  0012               	return	
 27756  0118BE  0E3E               	movlw	62
 27757  0118C0  0012               	return	
 27758  0118C2  0E7E               	movlw	126
 27759  0118C4  0012               	return	
 27760  0118C6  0E76               	movlw	118
 27761  0118C8  0012               	return	
 27762  0118CA  0E66               	movlw	102
 27763  0118CC  0012               	return	
 27764  0118CE  0E5B               	movlw	91
 27765  0118D0  0012               	return	
 27766  0118D2  0E80               	movlw	128
 27767  0118D4  0012               	return	
 27768  0118D6                     l853:
 27769  0118D6  0100               	movlb	0	; () banked
 27770  0118D8  51BA               	movf	ToSegment@pCHR& (0+255),w,b
 27771                           
 27772                           ; Switch size 1, requested type "space"
 27773                           ; Number of cases is 63, Range of values is 46 to 122
 27774                           ; switch strategies available:
 27775                           ; Name         Instructions Cycles
 27776                           ; simple_byte          190    96 (average)
 27777                           ;	Chosen strategy is simple_byte
 27778  0118DA  0A2E               	xorlw	46	; case 46
 27779  0118DC  B4D8               	btfsc	status,2,c
 27780  0118DE  D7F9               	goto	l917
 27781  0118E0  0A1E               	xorlw	30	; case 48
 27782  0118E2  B4D8               	btfsc	status,2,c
 27783  0118E4  D77A               	goto	l854
 27784  0118E6  0A01               	xorlw	1	; case 49
 27785  0118E8  B4D8               	btfsc	status,2,c
 27786  0118EA  D779               	goto	l856
 27787  0118EC  0A03               	xorlw	3	; case 50
 27788  0118EE  B4D8               	btfsc	status,2,c
 27789  0118F0  D778               	goto	l857
 27790  0118F2  0A01               	xorlw	1	; case 51
 27791  0118F4  B4D8               	btfsc	status,2,c
 27792  0118F6  D777               	goto	l858
 27793  0118F8  0A07               	xorlw	7	; case 52
 27794  0118FA  B4D8               	btfsc	status,2,c
 27795  0118FC  D776               	goto	l859
 27796  0118FE  0A01               	xorlw	1	; case 53
 27797  011900  B4D8               	btfsc	status,2,c
 27798  011902  D775               	goto	l860
 27799  011904  0A03               	xorlw	3	; case 54
 27800  011906  B4D8               	btfsc	status,2,c
 27801  011908  D774               	goto	l861
 27802  01190A  0A01               	xorlw	1	; case 55
 27803  01190C  B4D8               	btfsc	status,2,c
 27804  01190E  D773               	goto	l862
 27805  011910  0A0F               	xorlw	15	; case 56
 27806  011912  B4D8               	btfsc	status,2,c
 27807  011914  D772               	goto	l863
 27808  011916  0A01               	xorlw	1	; case 57
 27809  011918  B4D8               	btfsc	status,2,c
 27810  01191A  D771               	goto	l864
 27811  01191C  0A78               	xorlw	120	; case 65
 27812  01191E  B4D8               	btfsc	status,2,c
 27813  011920  D7A4               	goto	l891
 27814  011922  0A03               	xorlw	3	; case 66
 27815  011924  B4D8               	btfsc	status,2,c
 27816  011926  D7A3               	goto	l892
 27817  011928  0A01               	xorlw	1	; case 67
 27818  01192A  B4D8               	btfsc	status,2,c
 27819  01192C  D7A2               	goto	l893
 27820  01192E  0A07               	xorlw	7	; case 68
 27821  011930  B4D8               	btfsc	status,2,c
 27822  011932  D7A1               	goto	l894
 27823  011934  0A01               	xorlw	1	; case 69
 27824  011936  B4D8               	btfsc	status,2,c
 27825  011938  D7A0               	goto	l895
 27826  01193A  0A03               	xorlw	3	; case 70
 27827  01193C  B4D8               	btfsc	status,2,c
 27828  01193E  D79F               	goto	l896
 27829  011940  0A01               	xorlw	1	; case 71
 27830  011942  B4D8               	btfsc	status,2,c
 27831  011944  D79E               	goto	l897
 27832  011946  0A0F               	xorlw	15	; case 72
 27833  011948  B4D8               	btfsc	status,2,c
 27834  01194A  D79D               	goto	l898
 27835  01194C  0A01               	xorlw	1	; case 73
 27836  01194E  B4D8               	btfsc	status,2,c
 27837  011950  D79C               	goto	l899
 27838  011952  0A03               	xorlw	3	; case 74
 27839  011954  B4D8               	btfsc	status,2,c
 27840  011956  D79B               	goto	l900
 27841  011958  0A01               	xorlw	1	; case 75
 27842  01195A  B4D8               	btfsc	status,2,c
 27843  01195C  D79A               	goto	l901
 27844  01195E  0A07               	xorlw	7	; case 76
 27845  011960  B4D8               	btfsc	status,2,c
 27846  011962  D799               	goto	l902
 27847  011964  0A01               	xorlw	1	; case 77
 27848  011966  B4D8               	btfsc	status,2,c
 27849  011968  D798               	goto	l903
 27850  01196A  0A03               	xorlw	3	; case 78
 27851  01196C  B4D8               	btfsc	status,2,c
 27852  01196E  D797               	goto	l904
 27853  011970  0A01               	xorlw	1	; case 79
 27854  011972  B4D8               	btfsc	status,2,c
 27855  011974  D796               	goto	l905
 27856  011976  0A1F               	xorlw	31	; case 80
 27857  011978  B4D8               	btfsc	status,2,c
 27858  01197A  D795               	goto	l906
 27859  01197C  0A01               	xorlw	1	; case 81
 27860  01197E  B4D8               	btfsc	status,2,c
 27861  011980  D794               	goto	l907
 27862  011982  0A03               	xorlw	3	; case 82
 27863  011984  B4D8               	btfsc	status,2,c
 27864  011986  D793               	goto	l908
 27865  011988  0A01               	xorlw	1	; case 83
 27866  01198A  B4D8               	btfsc	status,2,c
 27867  01198C  D792               	goto	l909
 27868  01198E  0A07               	xorlw	7	; case 84
 27869  011990  B4D8               	btfsc	status,2,c
 27870  011992  D791               	goto	l910
 27871  011994  0A01               	xorlw	1	; case 85
 27872  011996  B4D8               	btfsc	status,2,c
 27873  011998  D790               	goto	l911
 27874  01199A  0A03               	xorlw	3	; case 86
 27875  01199C  B4D8               	btfsc	status,2,c
 27876  01199E  D78F               	goto	l912
 27877  0119A0  0A01               	xorlw	1	; case 87
 27878  0119A2  B4D8               	btfsc	status,2,c
 27879  0119A4  D78E               	goto	l913
 27880  0119A6  0A0F               	xorlw	15	; case 88
 27881  0119A8  B4D8               	btfsc	status,2,c
 27882  0119AA  D78D               	goto	l914
 27883  0119AC  0A01               	xorlw	1	; case 89
 27884  0119AE  B4D8               	btfsc	status,2,c
 27885  0119B0  D78C               	goto	l915
 27886  0119B2  0A03               	xorlw	3	; case 90
 27887  0119B4  B4D8               	btfsc	status,2,c
 27888  0119B6  D78B               	goto	l916
 27889  0119B8  0A3B               	xorlw	59	; case 97
 27890  0119BA  B4D8               	btfsc	status,2,c
 27891  0119BC  D722               	goto	l865
 27892  0119BE  0A03               	xorlw	3	; case 98
 27893  0119C0  B4D8               	btfsc	status,2,c
 27894  0119C2  D721               	goto	l866
 27895  0119C4  0A01               	xorlw	1	; case 99
 27896  0119C6  B4D8               	btfsc	status,2,c
 27897  0119C8  D720               	goto	l867
 27898  0119CA  0A07               	xorlw	7	; case 100
 27899  0119CC  B4D8               	btfsc	status,2,c
 27900  0119CE  D71F               	goto	l868
 27901  0119D0  0A01               	xorlw	1	; case 101
 27902  0119D2  B4D8               	btfsc	status,2,c
 27903  0119D4  D71E               	goto	l869
 27904  0119D6  0A03               	xorlw	3	; case 102
 27905  0119D8  B4D8               	btfsc	status,2,c
 27906  0119DA  D71D               	goto	l870
 27907  0119DC  0A01               	xorlw	1	; case 103
 27908  0119DE  B4D8               	btfsc	status,2,c
 27909  0119E0  D71C               	goto	l871
 27910  0119E2  0A0F               	xorlw	15	; case 104
 27911  0119E4  B4D8               	btfsc	status,2,c
 27912  0119E6  D71B               	goto	l872
 27913  0119E8  0A01               	xorlw	1	; case 105
 27914  0119EA  B4D8               	btfsc	status,2,c
 27915  0119EC  D71A               	goto	l873
 27916  0119EE  0A03               	xorlw	3	; case 106
 27917  0119F0  B4D8               	btfsc	status,2,c
 27918  0119F2  D719               	goto	l874
 27919  0119F4  0A01               	xorlw	1	; case 107
 27920  0119F6  B4D8               	btfsc	status,2,c
 27921  0119F8  D718               	goto	l875
 27922  0119FA  0A07               	xorlw	7	; case 108
 27923  0119FC  B4D8               	btfsc	status,2,c
 27924  0119FE  D717               	goto	l876
 27925  011A00  0A01               	xorlw	1	; case 109
 27926  011A02  B4D8               	btfsc	status,2,c
 27927  011A04  D716               	goto	l877
 27928  011A06  0A03               	xorlw	3	; case 110
 27929  011A08  B4D8               	btfsc	status,2,c
 27930  011A0A  D715               	goto	l878
 27931  011A0C  0A01               	xorlw	1	; case 111
 27932  011A0E  B4D8               	btfsc	status,2,c
 27933  011A10  D714               	goto	l879
 27934  011A12  0A1F               	xorlw	31	; case 112
 27935  011A14  B4D8               	btfsc	status,2,c
 27936  011A16  D713               	goto	l880
 27937  011A18  0A01               	xorlw	1	; case 113
 27938  011A1A  B4D8               	btfsc	status,2,c
 27939  011A1C  D712               	goto	l881
 27940  011A1E  0A03               	xorlw	3	; case 114
 27941  011A20  B4D8               	btfsc	status,2,c
 27942  011A22  D711               	goto	l882
 27943  011A24  0A01               	xorlw	1	; case 115
 27944  011A26  B4D8               	btfsc	status,2,c
 27945  011A28  D710               	goto	l883
 27946  011A2A  0A07               	xorlw	7	; case 116
 27947  011A2C  B4D8               	btfsc	status,2,c
 27948  011A2E  D70F               	goto	l884
 27949  011A30  0A01               	xorlw	1	; case 117
 27950  011A32  B4D8               	btfsc	status,2,c
 27951  011A34  D70E               	goto	l885
 27952  011A36  0A03               	xorlw	3	; case 118
 27953  011A38  B4D8               	btfsc	status,2,c
 27954  011A3A  D70D               	goto	l886
 27955  011A3C  0A01               	xorlw	1	; case 119
 27956  011A3E  B4D8               	btfsc	status,2,c
 27957  011A40  D70C               	goto	l887
 27958  011A42  0A0F               	xorlw	15	; case 120
 27959  011A44  B4D8               	btfsc	status,2,c
 27960  011A46  D70B               	goto	l888
 27961  011A48  0A01               	xorlw	1	; case 121
 27962  011A4A  B4D8               	btfsc	status,2,c
 27963  011A4C  D70A               	goto	l889
 27964  011A4E  0A03               	xorlw	3	; case 122
 27965  011A50  B4D8               	btfsc	status,2,c
 27966  011A52  D709               	goto	l890
 27967                           
 27968                           ;Types.c: 354: return 0;
 27969                           
 27970                           ; BSR set to: 0
 27971  011A54  0E00               	movlw	0
 27972  011A56  0012               	return	
 27973  011A58                     __end_of_ToSegment:
 27974                           	opt stack 0
 27975                           tosu	equ	0xFFF
 27976                           tosh	equ	0xFFE
 27977                           tosl	equ	0xFFD
 27978                           pclath	equ	0xFFA
 27979                           tblptru	equ	0xFF8
 27980                           tblptrh	equ	0xFF7
 27981                           tblptrl	equ	0xFF6
 27982                           tablat	equ	0xFF5
 27983                           prodh	equ	0xFF4
 27984                           prodl	equ	0xFF3
 27985                           intcon	equ	0xFF2
 27986                           postinc0	equ	0xFEE
 27987                           wreg	equ	0xFE8
 27988                           indf1	equ	0xFE7
 27989                           postdec1	equ	0xFE5
 27990                           fsr1h	equ	0xFE2
 27991                           fsr1l	equ	0xFE1
 27992                           indf2	equ	0xFDF
 27993                           postinc2	equ	0xFDE
 27994                           postdec2	equ	0xFDD
 27995                           plusw2	equ	0xFDB
 27996                           fsr2h	equ	0xFDA
 27997                           fsr2l	equ	0xFD9
 27998                           status	equ	0xFD8
 27999                           
 28000 ;; *************** function _HMI_SetButton *****************
 28001 ;; Defined at:
 28002 ;;		line 186 in file "HMI.c"
 28003 ;; Parameters:    Size  Location     Type
 28004 ;;  pValue          1    wreg     unsigned char 
 28005 ;; Auto vars:     Size  Location     Type
 28006 ;;  pValue          1    6[BANK0 ] unsigned char 
 28007 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 28008 ;;  v               1    7[BANK0 ] unsigned char 
 28009 ;; Return value:  Size  Location     Type
 28010 ;;                  1    wreg      void 
 28011 ;; Registers used:
 28012 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28013 ;; Tracked objects:
 28014 ;;		On entry : 0/0
 28015 ;;		On exit  : 0/0
 28016 ;;		Unchanged: 0/0
 28017 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28018 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28019 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28020 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28021 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28022 ;;Total ram usage:        8 bytes
 28023 ;; Hardware stack levels used:    1
 28024 ;; Hardware stack levels required when called:    7
 28025 ;; This function calls:
 28026 ;;		Nothing
 28027 ;; This function is called by:
 28028 ;;		_Event_TestButton
 28029 ;; This function uses a non-reentrant model
 28030 ;;
 28031                           
 28032                           	psect	text147
 28033  014CBC                     __ptext147:
 28034                           	opt stack 0
 28035  014CBC                     _HMI_SetButton:
 28036                           	opt stack 18
 28037                           
 28038                           ;incstack = 0
 28039                           ;HMI_SetButton@pValue stored from wreg
 28040  014CBC  0100               	movlb	0	; () banked
 28041  014CBE  6FC0               	movwf	HMI_SetButton@pValue& (0+255),b
 28042                           
 28043                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 28044  014CC0  0E18               	movlw	low HMI_SetButton@F7213
 28045  014CC2  6EF6               	movwf	tblptrl,c
 28046  014CC4                     	if	1	;There is more than 1 active tblptr byte
 28047  014CC4  0EFD               	movlw	high HMI_SetButton@F7213
 28048  014CC6  6EF7               	movwf	tblptrh,c
 28049  014CC8                     	endif
 28050  014CC8                     	if	1	;There are 3 active tblptr bytes
 28051  014CC8  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 28052  014CCA  6EF8               	movwf	tblptru,c
 28053  014CCC                     	endif
 28054  014CCC  0009               	tblrd		*+
 28055  014CCE  CFF5 F0BC          	movff	tablat,HMI_SetButton@reindex
 28056  014CD2  0009               	tblrd		*+
 28057  014CD4  CFF5 F0BD          	movff	tablat,HMI_SetButton@reindex+1
 28058  014CD8  0009               	tblrd		*+
 28059  014CDA  CFF5 F0BE          	movff	tablat,HMI_SetButton@reindex+2
 28060  014CDE  000A               	tblrd		*-
 28061  014CE0  CFF5 F0BF          	movff	tablat,HMI_SetButton@reindex+3
 28062                           
 28063                           ;HMI.c: 189: UINT8 v = 0b00010001;
 28064  014CE4  0E11               	movlw	17
 28065  014CE6  0100               	movlb	0	; () banked
 28066  014CE8  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28067                           
 28068                           ; BSR set to: 0
 28069                           ;HMI.c: 190: pValue &= 3;
 28070  014CEA  0E03               	movlw	3
 28071  014CEC  0100               	movlb	0	; () banked
 28072  014CEE  17C0               	andwf	HMI_SetButton@pValue& (0+255),f,b
 28073                           
 28074                           ; BSR set to: 0
 28075                           ;HMI.c: 191: v = v << reindex[pValue];
 28076  014CF0  0100               	movlb	0	; () banked
 28077  014CF2  51C0               	movf	HMI_SetButton@pValue& (0+255),w,b
 28078  014CF4  0D01               	mullw	1
 28079  014CF6  0EBC               	movlw	low HMI_SetButton@reindex
 28080  014CF8  24F3               	addwf	prodl,w,c
 28081  014CFA  6ED9               	movwf	fsr2l,c
 28082  014CFC  0E00               	movlw	high HMI_SetButton@reindex
 28083  014CFE  20F4               	addwfc	prodh,w,c
 28084  014D00  6EDA               	movwf	fsr2h,c
 28085  014D02  50DF               	movf	indf2,w,c
 28086  014D04  0100               	movlb	0	; () banked
 28087  014D06  6FBA               	movwf	??_HMI_SetButton& (0+255),b
 28088  014D08  C0C1  F0BB         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 28089  014D0C  0100               	movlb	0	; () banked
 28090  014D0E  2BBA               	incf	??_HMI_SetButton& (0+255),f,b
 28091  014D10  D003               	goto	u9234
 28092  014D12                     u9235:
 28093  014D12  0100               	movlb	0	; () banked
 28094  014D14  90D8               	bcf	status,0,c
 28095  014D16  37BB               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 28096  014D18                     u9234:
 28097  014D18  0100               	movlb	0	; () banked
 28098  014D1A  2FBA               	decfsz	??_HMI_SetButton& (0+255),f,b
 28099  014D1C  D7FA               	goto	u9235
 28100  014D1E  0100               	movlb	0	; () banked
 28101  014D20  51BB               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 28102  014D22  0100               	movlb	0	; () banked
 28103  014D24  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28104                           
 28105                           ; BSR set to: 0
 28106                           ;HMI.c: 192: v = v >> 4;
 28107  014D26  0100               	movlb	0	; () banked
 28108  014D28  39C1               	swapf	HMI_SetButton@v& (0+255),w,b
 28109  014D2A  0B0F               	andlw	15
 28110  014D2C  0100               	movlb	0	; () banked
 28111  014D2E  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28112                           
 28113                           ; BSR set to: 0
 28114                           ;HMI.c: 193: v = v & 0x0F;
 28115  014D30  0100               	movlb	0	; () banked
 28116  014D32  51C1               	movf	HMI_SetButton@v& (0+255),w,b
 28117  014D34  0B0F               	andlw	15
 28118  014D36  0100               	movlb	0	; () banked
 28119  014D38  6FC1               	movwf	HMI_SetButton@v& (0+255),b
 28120                           
 28121                           ; BSR set to: 0
 28122                           ;HMI.c: 194: HMIBoard.pButton = v;
 28123  014D3A  0103               	movlb	3	; () banked
 28124  014D3C  5146               	movf	(_HMIBoard+6)& (0+255),w,b
 28125  014D3E  0100               	movlb	0	; () banked
 28126  014D40  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28127  014D42  0BF0               	andlw	-16
 28128  014D44  19C1               	xorwf	HMI_SetButton@v& (0+255),w,b
 28129  014D46  0103               	movlb	3	; () banked
 28130  014D48  6F46               	movwf	(_HMIBoard+6)& (0+255),b
 28131                           
 28132                           ; BSR set to: 3
 28133  014D4A  0012               	return		;funcret
 28134  014D4C                     __end_of_HMI_SetButton:
 28135                           	opt stack 0
 28136                           tosu	equ	0xFFF
 28137                           tosh	equ	0xFFE
 28138                           tosl	equ	0xFFD
 28139                           pclath	equ	0xFFA
 28140                           tblptru	equ	0xFF8
 28141                           tblptrh	equ	0xFF7
 28142                           tblptrl	equ	0xFF6
 28143                           tablat	equ	0xFF5
 28144                           prodh	equ	0xFF4
 28145                           prodl	equ	0xFF3
 28146                           intcon	equ	0xFF2
 28147                           postinc0	equ	0xFEE
 28148                           wreg	equ	0xFE8
 28149                           indf1	equ	0xFE7
 28150                           postdec1	equ	0xFE5
 28151                           fsr1h	equ	0xFE2
 28152                           fsr1l	equ	0xFE1
 28153                           indf2	equ	0xFDF
 28154                           postinc2	equ	0xFDE
 28155                           postdec2	equ	0xFDD
 28156                           plusw2	equ	0xFDB
 28157                           fsr2h	equ	0xFDA
 28158                           fsr2l	equ	0xFD9
 28159                           status	equ	0xFD8
 28160                           
 28161 ;; *************** function _LED_Toggle *****************
 28162 ;; Defined at:
 28163 ;;		line 50 in file "Library/LED.c"
 28164 ;; Parameters:    Size  Location     Type
 28165 ;;  pLED            1    wreg     enum E6739
 28166 ;; Auto vars:     Size  Location     Type
 28167 ;;  pLED            1   24[BANK0 ] enum E6739
 28168 ;; Return value:  Size  Location     Type
 28169 ;;                  1    wreg      void 
 28170 ;; Registers used:
 28171 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28172 ;; Tracked objects:
 28173 ;;		On entry : 0/0
 28174 ;;		On exit  : 0/0
 28175 ;;		Unchanged: 0/0
 28176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28181 ;;Total ram usage:        1 bytes
 28182 ;; Hardware stack levels used:    1
 28183 ;; Hardware stack levels required when called:   12
 28184 ;; This function calls:
 28185 ;;		_Port_TogglePin
 28186 ;; This function is called by:
 28187 ;;		_LCD_Reset
 28188 ;;		_Event_DIPSwitch
 28189 ;;		_Event_TestButton
 28190 ;;		_Event_ADCSequenceComplete
 28191 ;;		_Event_HMI_DIPSwitch
 28192 ;;		_Event_HMI_LeftButton
 28193 ;;		_Event_HMI_RightButton
 28194 ;;		_Event_HMI_UpButton
 28195 ;;		_Event_HMI_DownButton
 28196 ;; This function uses a non-reentrant model
 28197 ;;
 28198                           
 28199                           	psect	text148
 28200  015CF8                     __ptext148:
 28201                           	opt stack 0
 28202  015CF8                     _LED_Toggle:
 28203                           	opt stack 13
 28204                           
 28205                           ; BSR set to: 3
 28206                           ;incstack = 0
 28207                           ;LED_Toggle@pLED stored from wreg
 28208  015CF8  0100               	movlb	0	; () banked
 28209  015CFA  6FD2               	movwf	LED_Toggle@pLED& (0+255),b
 28210                           
 28211                           ;LED.c: 52: switch (pLED)
 28212  015CFC  D018               	goto	l234
 28213  015CFE                     
 28214                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 28215  015CFE  0EA5               	movlw	low _PortC
 28216  015D00  0100               	movlb	0	; () banked
 28217  015D02  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28218  015D04  0E00               	movlw	high _PortC
 28219  015D06  0100               	movlb	0	; () banked
 28220  015D08  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28221  015D0A  0E00               	movlw	0
 28222  015D0C  0100               	movlb	0	; () banked
 28223  015D0E  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28224  015D10  ECE1  F0B0         	call	_Port_TogglePin	;wreg free
 28225                           
 28226                           ;LED.c: 56: break;
 28227  015D14  0012               	return	
 28228  015D16                     
 28229                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 28230  015D16  0EA5               	movlw	low _PortC
 28231  015D18  0100               	movlb	0	; () banked
 28232  015D1A  6FCE               	movwf	Port_TogglePin@pInput& (0+255),b
 28233  015D1C  0E00               	movlw	high _PortC
 28234  015D1E  0100               	movlb	0	; () banked
 28235  015D20  6FCF               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 28236  015D22  0E01               	movlw	1
 28237  015D24  0100               	movlb	0	; () banked
 28238  015D26  6FD0               	movwf	Port_TogglePin@pPin& (0+255),b
 28239  015D28  ECE1  F0B0         	call	_Port_TogglePin	;wreg free
 28240                           
 28241                           ;LED.c: 60: }
 28242                           
 28243                           ;LED.c: 59: break;
 28244  015D2C  0012               	return	
 28245  015D2E                     l234:
 28246  015D2E  0100               	movlb	0	; () banked
 28247  015D30  51D2               	movf	LED_Toggle@pLED& (0+255),w,b
 28248                           
 28249                           ; Switch size 1, requested type "space"
 28250                           ; Number of cases is 2, Range of values is 0 to 1
 28251                           ; switch strategies available:
 28252                           ; Name         Instructions Cycles
 28253                           ; simple_byte            7     4 (average)
 28254                           ;	Chosen strategy is simple_byte
 28255  015D32  0A00               	xorlw	0	; case 0
 28256  015D34  B4D8               	btfsc	status,2,c
 28257  015D36  D7E3               	goto	l235
 28258  015D38  0A01               	xorlw	1	; case 1
 28259  015D3A  A4D8               	btfss	status,2,c
 28260  015D3C  0012               	return	
 28261  015D3E  D7EB               	goto	l237
 28262  015D40                     __end_of_LED_Toggle:
 28263                           	opt stack 0
 28264                           tosu	equ	0xFFF
 28265                           tosh	equ	0xFFE
 28266                           tosl	equ	0xFFD
 28267                           pclath	equ	0xFFA
 28268                           tblptru	equ	0xFF8
 28269                           tblptrh	equ	0xFF7
 28270                           tblptrl	equ	0xFF6
 28271                           tablat	equ	0xFF5
 28272                           prodh	equ	0xFF4
 28273                           prodl	equ	0xFF3
 28274                           intcon	equ	0xFF2
 28275                           postinc0	equ	0xFEE
 28276                           wreg	equ	0xFE8
 28277                           indf1	equ	0xFE7
 28278                           postdec1	equ	0xFE5
 28279                           fsr1h	equ	0xFE2
 28280                           fsr1l	equ	0xFE1
 28281                           indf2	equ	0xFDF
 28282                           postinc2	equ	0xFDE
 28283                           postdec2	equ	0xFDD
 28284                           plusw2	equ	0xFDB
 28285                           fsr2h	equ	0xFDA
 28286                           fsr2l	equ	0xFD9
 28287                           status	equ	0xFD8
 28288                           
 28289 ;; *************** function _Port_TogglePin *****************
 28290 ;; Defined at:
 28291 ;;		line 278 in file "Library/Port.c"
 28292 ;; Parameters:    Size  Location     Type
 28293 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 28294 ;;		 -> PortC(10), 
 28295 ;;  pPin            1   22[BANK0 ] enum E6750
 28296 ;; Auto vars:     Size  Location     Type
 28297 ;;  Value           1   23[BANK0 ] unsigned char 
 28298 ;; Return value:  Size  Location     Type
 28299 ;;                  1    wreg      void 
 28300 ;; Registers used:
 28301 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28302 ;; Tracked objects:
 28303 ;;		On entry : 0/0
 28304 ;;		On exit  : 0/0
 28305 ;;		Unchanged: 0/0
 28306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28307 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28308 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28309 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28310 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28311 ;;Total ram usage:        4 bytes
 28312 ;; Hardware stack levels used:    1
 28313 ;; Hardware stack levels required when called:   11
 28314 ;; This function calls:
 28315 ;;		_Port_GetPin
 28316 ;;		_Port_SetPin
 28317 ;; This function is called by:
 28318 ;;		_LED_Toggle
 28319 ;; This function uses a non-reentrant model
 28320 ;;
 28321                           
 28322                           	psect	text149
 28323  0161C2                     __ptext149:
 28324                           	opt stack 0
 28325  0161C2                     _Port_TogglePin:
 28326                           	opt stack 13
 28327                           
 28328                           ;Port.c: 280: UINT8 Value;
 28329                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 28330                           
 28331                           ;incstack = 0
 28332  0161C2  C0CE  F0BA         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 28333  0161C6  C0CF  F0BB         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 28334  0161CA  C0D0  F0BC         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 28335  0161CE  ECE6  F0AE         	call	_Port_GetPin	;wreg free
 28336  0161D2  0100               	movlb	0	; () banked
 28337  0161D4  6FD1               	movwf	Port_TogglePin@Value& (0+255),b
 28338                           
 28339                           ; BSR set to: 0
 28340                           ;Port.c: 282: Value ^= 0x01;
 28341  0161D6  0E01               	movlw	1
 28342  0161D8  0100               	movlb	0	; () banked
 28343  0161DA  1BD1               	xorwf	Port_TogglePin@Value& (0+255),f,b
 28344                           
 28345                           ; BSR set to: 0
 28346                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 28347  0161DC  C0CE  F0C9         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 28348  0161E0  C0CF  F0CA         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 28349  0161E4  C0D0  F0CB         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 28350  0161E8  C0D1  F0CC         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 28351  0161EC  EC8F  F09F         	call	_Port_SetPin	;wreg free
 28352  0161F0  0012               	return		;funcret
 28353  0161F2                     __end_of_Port_TogglePin:
 28354                           	opt stack 0
 28355                           tosu	equ	0xFFF
 28356                           tosh	equ	0xFFE
 28357                           tosl	equ	0xFFD
 28358                           pclath	equ	0xFFA
 28359                           tblptru	equ	0xFF8
 28360                           tblptrh	equ	0xFF7
 28361                           tblptrl	equ	0xFF6
 28362                           tablat	equ	0xFF5
 28363                           prodh	equ	0xFF4
 28364                           prodl	equ	0xFF3
 28365                           intcon	equ	0xFF2
 28366                           postinc0	equ	0xFEE
 28367                           wreg	equ	0xFE8
 28368                           indf1	equ	0xFE7
 28369                           postdec1	equ	0xFE5
 28370                           fsr1h	equ	0xFE2
 28371                           fsr1l	equ	0xFE1
 28372                           indf2	equ	0xFDF
 28373                           postinc2	equ	0xFDE
 28374                           postdec2	equ	0xFDD
 28375                           plusw2	equ	0xFDB
 28376                           fsr2h	equ	0xFDA
 28377                           fsr2l	equ	0xFD9
 28378                           status	equ	0xFD8
 28379                           
 28380 ;; *************** function _Port_SetPin *****************
 28381 ;; Defined at:
 28382 ;;		line 247 in file "Library/Port.c"
 28383 ;; Parameters:    Size  Location     Type
 28384 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 28385 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 28386 ;;  pPin            1   17[BANK0 ] enum E6750
 28387 ;;  pValue          1   18[BANK0 ] unsigned char 
 28388 ;; Auto vars:     Size  Location     Type
 28389 ;;  Type            1   19[BANK0 ] enum E6795
 28390 ;; Return value:  Size  Location     Type
 28391 ;;                  1    wreg      void 
 28392 ;; Registers used:
 28393 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28394 ;; Tracked objects:
 28395 ;;		On entry : 0/0
 28396 ;;		On exit  : 0/0
 28397 ;;		Unchanged: 0/0
 28398 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28399 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28400 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28401 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28402 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28403 ;;Total ram usage:        5 bytes
 28404 ;; Hardware stack levels used:    1
 28405 ;; Hardware stack levels required when called:   10
 28406 ;; This function calls:
 28407 ;;		_Byte_SetBit
 28408 ;;		_Word_GetPair
 28409 ;; This function is called by:
 28410 ;;		_Reset_Low
 28411 ;;		_Reset_High
 28412 ;;		_LED_Set
 28413 ;;		_Port_TogglePin
 28414 ;;		_Motor_Init
 28415 ;;		_Motor_Step
 28416 ;;		_MXK_Init
 28417 ;; This function uses a non-reentrant model
 28418 ;;
 28419                           
 28420                           	psect	text150
 28421  013F1E                     __ptext150:
 28422                           	opt stack 0
 28423  013F1E                     _Port_SetPin:
 28424                           	opt stack 13
 28425                           
 28426                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 28427                           
 28428                           ;incstack = 0
 28429  013F1E  0E08               	movlw	8
 28430  013F20  0100               	movlb	0	; () banked
 28431  013F22  25C9               	addwf	Port_SetPin@pInput& (0+255),w,b
 28432  013F24  0100               	movlb	0	; () banked
 28433  013F26  6FC6               	movwf	Word_GetPair@pInput& (0+255),b
 28434  013F28  0E00               	movlw	0
 28435  013F2A  0100               	movlb	0	; () banked
 28436  013F2C  21CA               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 28437  013F2E  0100               	movlb	0	; () banked
 28438  013F30  6FC7               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 28439  013F32  C0CB  F0C8         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 28440  013F36  ECE9  F0AF         	call	_Word_GetPair	;wreg free
 28441  013F3A  0100               	movlb	0	; () banked
 28442  013F3C  6FCD               	movwf	Port_SetPin@Type& (0+255),b
 28443                           
 28444                           ;Port.c: 250: switch (Type)
 28445  013F3E  D042               	goto	l427
 28446  013F40                     
 28447                           ; BSR set to: 0
 28448                           ;Port.c: 256: pValue &= 1;
 28449                           
 28450                           ; BSR set to: 0
 28451  013F40  0E01               	movlw	1
 28452  013F42  0100               	movlb	0	; () banked
 28453  013F44  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28454                           
 28455                           ; BSR set to: 0
 28456                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28457  013F46  0100               	movlb	0	; () banked
 28458  013F48  EE20 F002          	lfsr	2,2
 28459  013F4C  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28460  013F4E  26D9               	addwf	fsr2l,f,c
 28461  013F50  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28462  013F52  22DA               	addwfc	fsr2h,f,c
 28463  013F54  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28464  013F58  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28465  013F5C  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28466  013F60  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28467  013F64  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 28468                           
 28469                           ;Port.c: 258: break;
 28470  013F68  0012               	return	
 28471  013F6A                     
 28472                           ;Port.c: 261: pValue &= 1;
 28473  013F6A  0E01               	movlw	1
 28474  013F6C  0100               	movlb	0	; () banked
 28475  013F6E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28476                           
 28477                           ;Port.c: 262: pValue ^= 1;
 28478  013F70  0E01               	movlw	1
 28479  013F72  0100               	movlb	0	; () banked
 28480  013F74  1BCC               	xorwf	Port_SetPin@pValue& (0+255),f,b
 28481                           
 28482                           ; BSR set to: 0
 28483                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 28484  013F76  0100               	movlb	0	; () banked
 28485  013F78  EE20 F002          	lfsr	2,2
 28486  013F7C  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28487  013F7E  26D9               	addwf	fsr2l,f,c
 28488  013F80  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28489  013F82  22DA               	addwfc	fsr2h,f,c
 28490  013F84  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28491  013F88  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28492  013F8C  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28493  013F90  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28494  013F94  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 28495                           
 28496                           ;Port.c: 264: break;
 28497  013F98  0012               	return	
 28498  013F9A                     
 28499                           ;Port.c: 266: pValue &= 1;
 28500  013F9A  0E01               	movlw	1
 28501  013F9C  0100               	movlb	0	; () banked
 28502  013F9E  17CC               	andwf	Port_SetPin@pValue& (0+255),f,b
 28503                           
 28504                           ; BSR set to: 0
 28505                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 28506  013FA0  0100               	movlb	0	; () banked
 28507  013FA2  EE20 F004          	lfsr	2,4
 28508  013FA6  51C9               	movf	Port_SetPin@pInput& (0+255),w,b
 28509  013FA8  26D9               	addwf	fsr2l,f,c
 28510  013FAA  51CA               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 28511  013FAC  22DA               	addwfc	fsr2h,f,c
 28512  013FAE  CFDE F0BA          	movff	postinc2,Byte_SetBit@pInput
 28513  013FB2  CFDD F0BB          	movff	postdec2,Byte_SetBit@pInput+1
 28514  013FB6  C0CB  F0BC         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 28515  013FBA  C0CC  F0BD         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 28516  013FBE  EC04  F0AC         	call	_Byte_SetBit	;wreg free
 28517                           
 28518                           ;Port.c: 269: }
 28519                           
 28520                           ;Port.c: 268: break;
 28521  013FC2  0012               	return	
 28522  013FC4                     l427:
 28523  013FC4  0100               	movlb	0	; () banked
 28524  013FC6  51CD               	movf	Port_SetPin@Type& (0+255),w,b
 28525                           
 28526                           ; Switch size 1, requested type "space"
 28527                           ; Number of cases is 4, Range of values is 0 to 3
 28528                           ; switch strategies available:
 28529                           ; Name         Instructions Cycles
 28530                           ; simple_byte           13     7 (average)
 28531                           ;	Chosen strategy is simple_byte
 28532  013FC8  0A00               	xorlw	0	; case 0
 28533  013FCA  B4D8               	btfsc	status,2,c
 28534  013FCC  0012               	return	
 28535  013FCE  0A01               	xorlw	1	; case 1
 28536  013FD0  B4D8               	btfsc	status,2,c
 28537  013FD2  D7B6               	goto	l430
 28538  013FD4  0A03               	xorlw	3	; case 2
 28539  013FD6  B4D8               	btfsc	status,2,c
 28540  013FD8  D7C8               	goto	l432
 28541  013FDA  0A01               	xorlw	1	; case 3
 28542  013FDC  A4D8               	btfss	status,2,c
 28543  013FDE  0012               	return	
 28544  013FE0  D7DC               	goto	l433
 28545  013FE2                     __end_of_Port_SetPin:
 28546                           	opt stack 0
 28547                           tosu	equ	0xFFF
 28548                           tosh	equ	0xFFE
 28549                           tosl	equ	0xFFD
 28550                           pclath	equ	0xFFA
 28551                           tblptru	equ	0xFF8
 28552                           tblptrh	equ	0xFF7
 28553                           tblptrl	equ	0xFF6
 28554                           tablat	equ	0xFF5
 28555                           prodh	equ	0xFF4
 28556                           prodl	equ	0xFF3
 28557                           intcon	equ	0xFF2
 28558                           postinc0	equ	0xFEE
 28559                           wreg	equ	0xFE8
 28560                           indf1	equ	0xFE7
 28561                           postdec1	equ	0xFE5
 28562                           fsr1h	equ	0xFE2
 28563                           fsr1l	equ	0xFE1
 28564                           indf2	equ	0xFDF
 28565                           postinc2	equ	0xFDE
 28566                           postdec2	equ	0xFDD
 28567                           plusw2	equ	0xFDB
 28568                           fsr2h	equ	0xFDA
 28569                           fsr2l	equ	0xFD9
 28570                           status	equ	0xFD8
 28571                           
 28572 ;; *************** function _Word_GetPair *****************
 28573 ;; Defined at:
 28574 ;;		line 156 in file "Library/Types.c"
 28575 ;; Parameters:    Size  Location     Type
 28576 ;;  pInput          2   12[BANK0 ] PTR struct Word
 28577 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 28578 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 28579 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 28580 ;;		 -> PortC(10), PortF(10), NULL(0), 
 28581 ;;  pPair           1   14[BANK0 ] unsigned char 
 28582 ;; Auto vars:     Size  Location     Type
 28583 ;;		None
 28584 ;; Return value:  Size  Location     Type
 28585 ;;                  1    wreg      unsigned char 
 28586 ;; Registers used:
 28587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28588 ;; Tracked objects:
 28589 ;;		On entry : 0/0
 28590 ;;		On exit  : 0/0
 28591 ;;		Unchanged: 0/0
 28592 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28593 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28594 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28595 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28596 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28597 ;;Total ram usage:        3 bytes
 28598 ;; Hardware stack levels used:    1
 28599 ;; Hardware stack levels required when called:    9
 28600 ;; This function calls:
 28601 ;;		_Byte_GetPair
 28602 ;; This function is called by:
 28603 ;;		_Port_Init
 28604 ;;		_Port_SetPin
 28605 ;;		_Port_Set
 28606 ;;		_PortProperty_Valid
 28607 ;;		_Port_SetPair
 28608 ;;		_Port_SetQuad
 28609 ;; This function uses a non-reentrant model
 28610 ;;
 28611                           
 28612                           	psect	text151
 28613  015FD2                     __ptext151:
 28614                           	opt stack 0
 28615  015FD2                     _Word_GetPair:
 28616                           	opt stack 13
 28617                           
 28618                           ;Types.c: 158: if (pPair >= 4)
 28619                           
 28620                           ;incstack = 0
 28621  015FD2  0E03               	movlw	3
 28622  015FD4  0100               	movlb	0	; () banked
 28623  015FD6  65C8               	cpfsgt	Word_GetPair@pPair& (0+255),b
 28624  015FD8  D012               	goto	l781
 28625                           
 28626                           ; BSR set to: 0
 28627                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 28628  015FDA  0E01               	movlw	1
 28629  015FDC  0100               	movlb	0	; () banked
 28630  015FDE  25C6               	addwf	Word_GetPair@pInput& (0+255),w,b
 28631  015FE0  0100               	movlb	0	; () banked
 28632  015FE2  6FC3               	movwf	Byte_GetPair@pInput& (0+255),b
 28633  015FE4  0E00               	movlw	0
 28634  015FE6  0100               	movlb	0	; () banked
 28635  015FE8  21C7               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 28636  015FEA  0100               	movlb	0	; () banked
 28637  015FEC  6FC4               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 28638  015FEE  0100               	movlb	0	; () banked
 28639  015FF0  51C8               	movf	Word_GetPair@pPair& (0+255),w,b
 28640  015FF2  0FFC               	addlw	252
 28641  015FF4  0100               	movlb	0	; () banked
 28642  015FF6  6FC5               	movwf	Byte_GetPair@pPair& (0+255),b
 28643  015FF8  EC3C  F0B2         	call	_Byte_GetPair	;wreg free
 28644  015FFC  0012               	return	
 28645  015FFE                     l781:
 28646                           
 28647                           ;Types.c: 160: else
 28648                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 28649  015FFE  C0C6  F0C3         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 28650  016002  C0C7  F0C4         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 28651  016006  C0C8  F0C5         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 28652  01600A  EC3C  F0B2         	call	_Byte_GetPair	;wreg free
 28653  01600E  0012               	return	
 28654  016010                     __end_of_Word_GetPair:
 28655                           	opt stack 0
 28656                           tosu	equ	0xFFF
 28657                           tosh	equ	0xFFE
 28658                           tosl	equ	0xFFD
 28659                           pclath	equ	0xFFA
 28660                           tblptru	equ	0xFF8
 28661                           tblptrh	equ	0xFF7
 28662                           tblptrl	equ	0xFF6
 28663                           tablat	equ	0xFF5
 28664                           prodh	equ	0xFF4
 28665                           prodl	equ	0xFF3
 28666                           intcon	equ	0xFF2
 28667                           postinc0	equ	0xFEE
 28668                           wreg	equ	0xFE8
 28669                           indf1	equ	0xFE7
 28670                           postdec1	equ	0xFE5
 28671                           fsr1h	equ	0xFE2
 28672                           fsr1l	equ	0xFE1
 28673                           indf2	equ	0xFDF
 28674                           postinc2	equ	0xFDE
 28675                           postdec2	equ	0xFDD
 28676                           plusw2	equ	0xFDB
 28677                           fsr2h	equ	0xFDA
 28678                           fsr2l	equ	0xFD9
 28679                           status	equ	0xFD8
 28680                           
 28681 ;; *************** function _Byte_GetPair *****************
 28682 ;; Defined at:
 28683 ;;		line 87 in file "Library/Types.c"
 28684 ;; Parameters:    Size  Location     Type
 28685 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 28686 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28687 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28688 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28689 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28690 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28691 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28692 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28693 ;;		 -> NULL(0), 
 28694 ;;  pPair           1   11[BANK0 ] unsigned char 
 28695 ;; Auto vars:     Size  Location     Type
 28696 ;;		None
 28697 ;; Return value:  Size  Location     Type
 28698 ;;                  1    wreg      unsigned char 
 28699 ;; Registers used:
 28700 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 28701 ;; Tracked objects:
 28702 ;;		On entry : 0/0
 28703 ;;		On exit  : 0/0
 28704 ;;		Unchanged: 0/0
 28705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28706 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28707 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28709 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28710 ;;Total ram usage:        3 bytes
 28711 ;; Hardware stack levels used:    1
 28712 ;; Hardware stack levels required when called:    8
 28713 ;; This function calls:
 28714 ;;		_Byte_GetZone
 28715 ;; This function is called by:
 28716 ;;		_Word_GetPair
 28717 ;; This function uses a non-reentrant model
 28718 ;;
 28719                           
 28720                           	psect	text152
 28721  016478                     __ptext152:
 28722                           	opt stack 0
 28723  016478                     _Byte_GetPair:
 28724                           	opt stack 13
 28725                           
 28726                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 28727                           
 28728                           ;incstack = 0
 28729  016478  C0C3  F0BA         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 28730  01647C  C0C4  F0BB         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 28731  016480  0E04               	movlw	4
 28732  016482  0100               	movlb	0	; () banked
 28733  016484  6FBC               	movwf	Byte_GetZone@pMax& (0+255),b
 28734  016486  C0C5  F0BD         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 28735  01648A  0E02               	movlw	2
 28736  01648C  0100               	movlb	0	; () banked
 28737  01648E  6FBE               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 28738  016490  ECC4  F0A5         	call	_Byte_GetZone	;wreg free
 28739  016494  0012               	return	
 28740  016496                     __end_of_Byte_GetPair:
 28741                           	opt stack 0
 28742                           tosu	equ	0xFFF
 28743                           tosh	equ	0xFFE
 28744                           tosl	equ	0xFFD
 28745                           pclath	equ	0xFFA
 28746                           tblptru	equ	0xFF8
 28747                           tblptrh	equ	0xFF7
 28748                           tblptrl	equ	0xFF6
 28749                           tablat	equ	0xFF5
 28750                           prodh	equ	0xFF4
 28751                           prodl	equ	0xFF3
 28752                           intcon	equ	0xFF2
 28753                           postinc0	equ	0xFEE
 28754                           wreg	equ	0xFE8
 28755                           indf1	equ	0xFE7
 28756                           postdec1	equ	0xFE5
 28757                           fsr1h	equ	0xFE2
 28758                           fsr1l	equ	0xFE1
 28759                           indf2	equ	0xFDF
 28760                           postinc2	equ	0xFDE
 28761                           postdec2	equ	0xFDD
 28762                           plusw2	equ	0xFDB
 28763                           fsr2h	equ	0xFDA
 28764                           fsr2l	equ	0xFD9
 28765                           status	equ	0xFD8
 28766                           
 28767 ;; *************** function _Byte_GetZone *****************
 28768 ;; Defined at:
 28769 ;;		line 64 in file "Library/Types.c"
 28770 ;; Parameters:    Size  Location     Type
 28771 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28772 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 28773 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 28774 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 28775 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 28776 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 28777 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 28778 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 28779 ;;		 -> NULL(0), 
 28780 ;;  pMax            1    2[BANK0 ] unsigned char 
 28781 ;;  pChunk          1    3[BANK0 ] unsigned char 
 28782 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 28783 ;; Auto vars:     Size  Location     Type
 28784 ;;  Output          1    8[BANK0 ] unsigned char 
 28785 ;;  Offset          1    7[BANK0 ] unsigned char 
 28786 ;;  MASK            1    6[BANK0 ] unsigned char 
 28787 ;; Return value:  Size  Location     Type
 28788 ;;                  1    wreg      unsigned char 
 28789 ;; Registers used:
 28790 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 28791 ;; Tracked objects:
 28792 ;;		On entry : 0/0
 28793 ;;		On exit  : 0/0
 28794 ;;		Unchanged: 0/0
 28795 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28796 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28797 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28798 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28799 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28800 ;;Total ram usage:        9 bytes
 28801 ;; Hardware stack levels used:    1
 28802 ;; Hardware stack levels required when called:    7
 28803 ;; This function calls:
 28804 ;;		Nothing
 28805 ;; This function is called by:
 28806 ;;		_Byte_GetPair
 28807 ;;		_Byte_GetTriple
 28808 ;;		_Byte_GetQuad
 28809 ;; This function uses a non-reentrant model
 28810 ;;
 28811                           
 28812                           	psect	text153
 28813  014B88                     __ptext153:
 28814                           	opt stack 0
 28815  014B88                     _Byte_GetZone:
 28816                           	opt stack 13
 28817                           
 28818                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 28819                           
 28820                           ;incstack = 0
 28821  014B88  C0BA  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 28822  014B8C  C0BB  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 28823  014B90  0E00               	movlw	low (__mediumconst shr (0+16))
 28824  014B92  6EF8               	movwf	tblptru,c
 28825  014B94  0E0F               	movlw	(high __ramtop+-1)
 28826  014B96  64F7               	cpfsgt	tblptrh,c
 28827  014B98  D003               	bra	u8647
 28828  014B9A  0008               	tblrd		*
 28829  014B9C  50F5               	movf	tablat,w,c
 28830  014B9E  D005               	bra	u8640
 28831  014BA0                     u8647:
 28832  014BA0  CFF6 FFE9          	movff	tblptrl,fsr0l
 28833  014BA4  CFF7 FFEA          	movff	tblptrh,fsr0h
 28834  014BA8  50EF               	movf	indf0,w,c
 28835  014BAA                     u8640:
 28836  014BAA  0100               	movlb	0	; () banked
 28837  014BAC  6FC2               	movwf	Byte_GetZone@Output& (0+255),b
 28838                           
 28839                           ; BSR set to: 0
 28840                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 28841  014BAE  0100               	movlb	0	; () banked
 28842  014BB0  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28843  014BB2  0D01               	mullw	1
 28844  014BB4  0E0F               	movlw	low _MASKS
 28845  014BB6  24F3               	addwf	prodl,w,c
 28846  014BB8  6EF6               	movwf	tblptrl,c
 28847  014BBA  0EFD               	movlw	high _MASKS
 28848  014BBC  20F4               	addwfc	prodh,w,c
 28849  014BBE  6EF7               	movwf	tblptrh,c
 28850  014BC0                     	if	1	;There are 3 active tblptr bytes
 28851  014BC0  6AF8               	clrf	tblptru,c
 28852  014BC2  0E00               	movlw	low (__mediumconst shr (0+16))
 28853  014BC4  22F8               	addwfc	tblptru,f,c
 28854  014BC6                     	endif
 28855  014BC6  0008               	tblrd		*
 28856  014BC8  CFF5 F0C0          	movff	tablat,Byte_GetZone@MASK
 28857                           
 28858                           ; BSR set to: 0
 28859                           ;Types.c: 68: UINT8 Offset = 0;
 28860  014BCC  0E00               	movlw	0
 28861  014BCE  0100               	movlb	0	; () banked
 28862  014BD0  6FC1               	movwf	Byte_GetZone@Offset& (0+255),b
 28863                           
 28864                           ;Types.c: 70: while (pChunk >= pMax)
 28865  014BD2  D006               	goto	l732
 28866  014BD4                     
 28867                           ; BSR set to: 0
 28868                           ;Types.c: 71: {
 28869                           ;Types.c: 72: pChunk -= pMax;
 28870                           
 28871                           ; BSR set to: 0
 28872  014BD4  0100               	movlb	0	; () banked
 28873  014BD6  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28874  014BD8  0100               	movlb	0	; () banked
 28875  014BDA  5FBD               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 28876                           
 28877                           ; BSR set to: 0
 28878                           ;Types.c: 73: Offset += 1;
 28879  014BDC  0100               	movlb	0	; () banked
 28880  014BDE  2BC1               	incf	Byte_GetZone@Offset& (0+255),f,b
 28881  014BE0                     l732:
 28882                           
 28883                           ; BSR set to: 0
 28884                           
 28885                           ; BSR set to: 0
 28886  014BE0  0100               	movlb	0	; () banked
 28887  014BE2  51BC               	movf	Byte_GetZone@pMax& (0+255),w,b
 28888  014BE4  0100               	movlb	0	; () banked
 28889  014BE6  5DBD               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 28890  014BE8  B0D8               	btfsc	status,0,c
 28891  014BEA  D7F4               	goto	l733
 28892                           
 28893                           ; BSR set to: 0
 28894                           ;Types.c: 74: }
 28895                           ;Types.c: 75: pChunk *= pChunkSize;
 28896                           
 28897                           ; BSR set to: 0
 28898  014BEC  0100               	movlb	0	; () banked
 28899  014BEE  51BE               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 28900  014BF0  0100               	movlb	0	; () banked
 28901  014BF2  03BD               	mulwf	Byte_GetZone@pChunk& (0+255),b
 28902  014BF4  50F3               	movf	prodl,w,c
 28903  014BF6  6FBD               	movwf	Byte_GetZone@pChunk& (0+255),b
 28904                           
 28905                           ; BSR set to: 0
 28906                           ;Types.c: 76: pChunk += Offset;
 28907  014BF8  0100               	movlb	0	; () banked
 28908  014BFA  51C1               	movf	Byte_GetZone@Offset& (0+255),w,b
 28909  014BFC  0100               	movlb	0	; () banked
 28910  014BFE  27BD               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 28911                           
 28912                           ; BSR set to: 0
 28913                           ;Types.c: 78: Output >>= pChunk;
 28914  014C00  0100               	movlb	0	; () banked
 28915  014C02  29BD               	incf	Byte_GetZone@pChunk& (0+255),w,b
 28916  014C04  0100               	movlb	0	; () banked
 28917  014C06  6FBF               	movwf	??_Byte_GetZone& (0+255),b
 28918  014C08  D003               	goto	u8660
 28919  014C0A                     u8665:
 28920  014C0A  0100               	movlb	0	; () banked
 28921  014C0C  90D8               	bcf	status,0,c
 28922  014C0E  33C2               	rrcf	Byte_GetZone@Output& (0+255),f,b
 28923  014C10                     u8660:
 28924  014C10  0100               	movlb	0	; () banked
 28925  014C12  2FBF               	decfsz	??_Byte_GetZone& (0+255),f,b
 28926  014C14  D7FA               	goto	u8665
 28927                           
 28928                           ;Types.c: 79: Output &= MASK;
 28929  014C16  0100               	movlb	0	; () banked
 28930  014C18  51C0               	movf	Byte_GetZone@MASK& (0+255),w,b
 28931  014C1A  0100               	movlb	0	; () banked
 28932  014C1C  17C2               	andwf	Byte_GetZone@Output& (0+255),f,b
 28933                           
 28934                           ; BSR set to: 0
 28935                           ;Types.c: 80: return Output;
 28936  014C1E  0100               	movlb	0	; () banked
 28937  014C20  51C2               	movf	Byte_GetZone@Output& (0+255),w,b
 28938  014C22  0012               	return	
 28939  014C24                     __end_of_Byte_GetZone:
 28940                           	opt stack 0
 28941                           tosu	equ	0xFFF
 28942                           tosh	equ	0xFFE
 28943                           tosl	equ	0xFFD
 28944                           pclath	equ	0xFFA
 28945                           tblptru	equ	0xFF8
 28946                           tblptrh	equ	0xFF7
 28947                           tblptrl	equ	0xFF6
 28948                           tablat	equ	0xFF5
 28949                           prodh	equ	0xFF4
 28950                           prodl	equ	0xFF3
 28951                           intcon	equ	0xFF2
 28952                           indf0	equ	0xFEF
 28953                           postinc0	equ	0xFEE
 28954                           fsr0h	equ	0xFEA
 28955                           fsr0l	equ	0xFE9
 28956                           wreg	equ	0xFE8
 28957                           indf1	equ	0xFE7
 28958                           postdec1	equ	0xFE5
 28959                           fsr1h	equ	0xFE2
 28960                           fsr1l	equ	0xFE1
 28961                           indf2	equ	0xFDF
 28962                           postinc2	equ	0xFDE
 28963                           postdec2	equ	0xFDD
 28964                           plusw2	equ	0xFDB
 28965                           fsr2h	equ	0xFDA
 28966                           fsr2l	equ	0xFD9
 28967                           status	equ	0xFD8
 28968                           
 28969 ;; *************** function _Byte_SetBit *****************
 28970 ;; Defined at:
 28971 ;;		line 32 in file "Library/Types.c"
 28972 ;; Parameters:    Size  Location     Type
 28973 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 28974 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 28975 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 28976 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 28977 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 28978 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 28979 ;;		 -> NULL(0), 
 28980 ;;  pBit            1    2[BANK0 ] unsigned char 
 28981 ;;  pValue          1    3[BANK0 ] unsigned char 
 28982 ;; Auto vars:     Size  Location     Type
 28983 ;;		None
 28984 ;; Return value:  Size  Location     Type
 28985 ;;                  1    wreg      void 
 28986 ;; Registers used:
 28987 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 28988 ;; Tracked objects:
 28989 ;;		On entry : 0/0
 28990 ;;		On exit  : 0/0
 28991 ;;		Unchanged: 0/0
 28992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 28993 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28995 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28996 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 28997 ;;Total ram usage:        7 bytes
 28998 ;; Hardware stack levels used:    1
 28999 ;; Hardware stack levels required when called:    7
 29000 ;; This function calls:
 29001 ;;		Nothing
 29002 ;; This function is called by:
 29003 ;;		_Port_SetPinType
 29004 ;;		_Port_SetPin
 29005 ;;		_SPI_Init
 29006 ;;		_SPI_MinSpeed
 29007 ;;		_SPI_MaxSpeed
 29008 ;;		_Word_SetBit
 29009 ;;		_I2C_Init
 29010 ;; This function uses a non-reentrant model
 29011 ;;
 29012                           
 29013                           	psect	text154
 29014  015808                     __ptext154:
 29015                           	opt stack 0
 29016  015808                     _Byte_SetBit:
 29017                           	opt stack 15
 29018                           
 29019                           ;Types.c: 34: pValue &= 1;
 29020                           
 29021                           ; BSR set to: 0
 29022                           ;incstack = 0
 29023  015808  0E01               	movlw	1
 29024  01580A  0100               	movlb	0	; () banked
 29025  01580C  17BD               	andwf	Byte_SetBit@pValue& (0+255),f,b
 29026                           
 29027                           ; BSR set to: 0
 29028                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 29029  01580E  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29030  015812  0E01               	movlw	1
 29031  015814  0100               	movlb	0	; () banked
 29032  015816  6FBF               	movwf	(??_Byte_SetBit+1)& (0+255),b
 29033  015818  0100               	movlb	0	; () banked
 29034  01581A  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29035  01581C  D003               	goto	u8684
 29036  01581E                     u8685:
 29037  01581E  0100               	movlb	0	; () banked
 29038  015820  90D8               	bcf	status,0,c
 29039  015822  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29040  015824                     u8684:
 29041  015824  0100               	movlb	0	; () banked
 29042  015826  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29043  015828  D7FA               	goto	u8685
 29044  01582A  0100               	movlb	0	; () banked
 29045  01582C  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29046  01582E  0AFF               	xorlw	255
 29047  015830  0100               	movlb	0	; () banked
 29048  015832  6FC0               	movwf	(??_Byte_SetBit+2)& (0+255),b
 29049  015834  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29050  015838  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29051  01583C  0100               	movlb	0	; () banked
 29052  01583E  51C0               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 29053  015840  16DF               	andwf	indf2,f,c
 29054                           
 29055                           ; BSR set to: 0
 29056                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 29057  015842  C0BC  F0BE         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 29058  015846  C0BD  F0BF         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 29059  01584A  0100               	movlb	0	; () banked
 29060  01584C  2BBE               	incf	??_Byte_SetBit& (0+255),f,b
 29061  01584E  D003               	goto	u8694
 29062  015850                     u8695:
 29063  015850  0100               	movlb	0	; () banked
 29064  015852  90D8               	bcf	status,0,c
 29065  015854  37BF               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 29066  015856                     u8694:
 29067  015856  0100               	movlb	0	; () banked
 29068  015858  2FBE               	decfsz	??_Byte_SetBit& (0+255),f,b
 29069  01585A  D7FA               	goto	u8695
 29070  01585C  C0BA  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 29071  015860  C0BB  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 29072  015864  0100               	movlb	0	; () banked
 29073  015866  51BF               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 29074  015868  12DF               	iorwf	indf2,f,c
 29075                           
 29076                           ; BSR set to: 0
 29077  01586A  0012               	return		;funcret
 29078  01586C                     __end_of_Byte_SetBit:
 29079                           	opt stack 0
 29080                           tosu	equ	0xFFF
 29081                           tosh	equ	0xFFE
 29082                           tosl	equ	0xFFD
 29083                           pclath	equ	0xFFA
 29084                           tblptru	equ	0xFF8
 29085                           tblptrh	equ	0xFF7
 29086                           tblptrl	equ	0xFF6
 29087                           tablat	equ	0xFF5
 29088                           prodh	equ	0xFF4
 29089                           prodl	equ	0xFF3
 29090                           intcon	equ	0xFF2
 29091                           indf0	equ	0xFEF
 29092                           postinc0	equ	0xFEE
 29093                           fsr0h	equ	0xFEA
 29094                           fsr0l	equ	0xFE9
 29095                           wreg	equ	0xFE8
 29096                           indf1	equ	0xFE7
 29097                           postdec1	equ	0xFE5
 29098                           fsr1h	equ	0xFE2
 29099                           fsr1l	equ	0xFE1
 29100                           indf2	equ	0xFDF
 29101                           postinc2	equ	0xFDE
 29102                           postdec2	equ	0xFDD
 29103                           plusw2	equ	0xFDB
 29104                           fsr2h	equ	0xFDA
 29105                           fsr2l	equ	0xFD9
 29106                           status	equ	0xFD8
 29107                           
 29108 ;; *************** function _Port_GetPin *****************
 29109 ;; Defined at:
 29110 ;;		line 271 in file "Library/Port.c"
 29111 ;; Parameters:    Size  Location     Type
 29112 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 29113 ;;		 -> PortB(10), PortE(10), PortC(10), 
 29114 ;;  pPin            1    2[BANK0 ] enum E6750
 29115 ;; Auto vars:     Size  Location     Type
 29116 ;;  Output          1    5[BANK0 ] unsigned char 
 29117 ;; Return value:  Size  Location     Type
 29118 ;;                  1    wreg      unsigned char 
 29119 ;; Registers used:
 29120 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 29121 ;; Tracked objects:
 29122 ;;		On entry : 0/0
 29123 ;;		On exit  : 0/0
 29124 ;;		Unchanged: 0/0
 29125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29126 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29127 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29128 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29129 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29130 ;;Total ram usage:        6 bytes
 29131 ;; Hardware stack levels used:    1
 29132 ;; Hardware stack levels required when called:    7
 29133 ;; This function calls:
 29134 ;;		Nothing
 29135 ;; This function is called by:
 29136 ;;		_Port_TogglePin
 29137 ;;		_HMI_LeftSwitch
 29138 ;;		_HMI_RightSwitch
 29139 ;;		_HMI_UpSwitch
 29140 ;;		_HMI_DownSwitch
 29141 ;;		_MXK_TestButton
 29142 ;; This function uses a non-reentrant model
 29143 ;;
 29144                           
 29145                           	psect	text155
 29146  015DCC                     __ptext155:
 29147                           	opt stack 0
 29148  015DCC                     _Port_GetPin:
 29149                           	opt stack 18
 29150                           
 29151                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 29152                           
 29153                           ; BSR set to: 0
 29154                           ;incstack = 0
 29155  015DCC  0100               	movlb	0	; () banked
 29156  015DCE  EE20 F006          	lfsr	2,6
 29157  015DD2  51BA               	movf	Port_GetPin@pInput& (0+255),w,b
 29158  015DD4  26D9               	addwf	fsr2l,f,c
 29159  015DD6  51BB               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 29160  015DD8  22DA               	addwfc	fsr2h,f,c
 29161  015DDA  CFDE F0BD          	movff	postinc2,??_Port_GetPin
 29162  015DDE  CFDD F0BE          	movff	postdec2,??_Port_GetPin+1
 29163  015DE2  C0BD  FFD9         	movff	??_Port_GetPin,fsr2l
 29164  015DE6  C0BE  FFDA         	movff	??_Port_GetPin+1,fsr2h
 29165  015DEA  50DF               	movf	indf2,w,c
 29166  015DEC  0100               	movlb	0	; () banked
 29167  015DEE  6FBF               	movwf	Port_GetPin@Output& (0+255),b
 29168                           
 29169                           ; BSR set to: 0
 29170                           ;Port.c: 274: Output >>= (UINT8)pPin;
 29171  015DF0  0100               	movlb	0	; () banked
 29172  015DF2  29BC               	incf	Port_GetPin@pPin& (0+255),w,b
 29173  015DF4  0100               	movlb	0	; () banked
 29174  015DF6  6FBD               	movwf	??_Port_GetPin& (0+255),b
 29175  015DF8  D003               	goto	u8730
 29176  015DFA                     u8735:
 29177  015DFA  0100               	movlb	0	; () banked
 29178  015DFC  90D8               	bcf	status,0,c
 29179  015DFE  33BF               	rrcf	Port_GetPin@Output& (0+255),f,b
 29180  015E00                     u8730:
 29181  015E00  0100               	movlb	0	; () banked
 29182  015E02  2FBD               	decfsz	??_Port_GetPin& (0+255),f,b
 29183  015E04  D7FA               	goto	u8735
 29184                           
 29185                           ;Port.c: 275: Output &= 1;
 29186  015E06  0E01               	movlw	1
 29187  015E08  0100               	movlb	0	; () banked
 29188  015E0A  17BF               	andwf	Port_GetPin@Output& (0+255),f,b
 29189                           
 29190                           ; BSR set to: 0
 29191                           ;Port.c: 276: return Output;
 29192  015E0C  0100               	movlb	0	; () banked
 29193  015E0E  51BF               	movf	Port_GetPin@Output& (0+255),w,b
 29194  015E10  0012               	return	
 29195  015E12                     __end_of_Port_GetPin:
 29196                           	opt stack 0
 29197                           tosu	equ	0xFFF
 29198                           tosh	equ	0xFFE
 29199                           tosl	equ	0xFFD
 29200                           pclath	equ	0xFFA
 29201                           tblptru	equ	0xFF8
 29202                           tblptrh	equ	0xFF7
 29203                           tblptrl	equ	0xFF6
 29204                           tablat	equ	0xFF5
 29205                           prodh	equ	0xFF4
 29206                           prodl	equ	0xFF3
 29207                           intcon	equ	0xFF2
 29208                           indf0	equ	0xFEF
 29209                           postinc0	equ	0xFEE
 29210                           fsr0h	equ	0xFEA
 29211                           fsr0l	equ	0xFE9
 29212                           wreg	equ	0xFE8
 29213                           indf1	equ	0xFE7
 29214                           postdec1	equ	0xFE5
 29215                           fsr1h	equ	0xFE2
 29216                           fsr1l	equ	0xFE1
 29217                           indf2	equ	0xFDF
 29218                           postinc2	equ	0xFDE
 29219                           postdec2	equ	0xFDD
 29220                           plusw2	equ	0xFDB
 29221                           fsr2h	equ	0xFDA
 29222                           fsr2l	equ	0xFD9
 29223                           status	equ	0xFD8
 29224                           
 29225 ;; *************** function _HMI_SetBar *****************
 29226 ;; Defined at:
 29227 ;;		line 205 in file "HMI.c"
 29228 ;; Parameters:    Size  Location     Type
 29229 ;;  pValue          1    wreg     unsigned char 
 29230 ;; Auto vars:     Size  Location     Type
 29231 ;;  pValue          1    0[BANK0 ] unsigned char 
 29232 ;; Return value:  Size  Location     Type
 29233 ;;                  1    wreg      void 
 29234 ;; Registers used:
 29235 ;;		wreg
 29236 ;; Tracked objects:
 29237 ;;		On entry : 0/0
 29238 ;;		On exit  : 0/0
 29239 ;;		Unchanged: 0/0
 29240 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29241 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29242 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29244 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29245 ;;Total ram usage:        1 bytes
 29246 ;; Hardware stack levels used:    1
 29247 ;; Hardware stack levels required when called:    7
 29248 ;; This function calls:
 29249 ;;		Nothing
 29250 ;; This function is called by:
 29251 ;;		_Event_DIPSwitch
 29252 ;;		_Event_HMI_DIPSwitch
 29253 ;;		_Event_HMI_LeftButton
 29254 ;;		_Event_HMI_RightButton
 29255 ;; This function uses a non-reentrant model
 29256 ;;
 29257                           
 29258                           	psect	text156
 29259  0166D0                     __ptext156:
 29260                           	opt stack 0
 29261  0166D0                     _HMI_SetBar:
 29262                           	opt stack 18
 29263                           
 29264                           ; BSR set to: 0
 29265                           ;incstack = 0
 29266                           ;HMI_SetBar@pValue stored from wreg
 29267  0166D0  0100               	movlb	0	; () banked
 29268  0166D2  6FBA               	movwf	HMI_SetBar@pValue& (0+255),b
 29269                           
 29270                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 29271  0166D4  C0BA  F347         	movff	HMI_SetBar@pValue,_HMIBoard+7
 29272  0166D8  0012               	return		;funcret
 29273  0166DA                     __end_of_HMI_SetBar:
 29274                           	opt stack 0
 29275                           tosu	equ	0xFFF
 29276                           tosh	equ	0xFFE
 29277                           tosl	equ	0xFFD
 29278                           pclath	equ	0xFFA
 29279                           tblptru	equ	0xFF8
 29280                           tblptrh	equ	0xFF7
 29281                           tblptrl	equ	0xFF6
 29282                           tablat	equ	0xFF5
 29283                           prodh	equ	0xFF4
 29284                           prodl	equ	0xFF3
 29285                           intcon	equ	0xFF2
 29286                           indf0	equ	0xFEF
 29287                           postinc0	equ	0xFEE
 29288                           fsr0h	equ	0xFEA
 29289                           fsr0l	equ	0xFE9
 29290                           wreg	equ	0xFE8
 29291                           indf1	equ	0xFE7
 29292                           postdec1	equ	0xFE5
 29293                           fsr1h	equ	0xFE2
 29294                           fsr1l	equ	0xFE1
 29295                           indf2	equ	0xFDF
 29296                           postinc2	equ	0xFDE
 29297                           postdec2	equ	0xFDD
 29298                           plusw2	equ	0xFDB
 29299                           fsr2h	equ	0xFDA
 29300                           fsr2l	equ	0xFD9
 29301                           status	equ	0xFD8
 29302                           
 29303 ;; *************** function _HMI_GetBar *****************
 29304 ;; Defined at:
 29305 ;;		line 209 in file "HMI.c"
 29306 ;; Parameters:    Size  Location     Type
 29307 ;;		None
 29308 ;; Auto vars:     Size  Location     Type
 29309 ;;		None
 29310 ;; Return value:  Size  Location     Type
 29311 ;;                  1    wreg      unsigned char 
 29312 ;; Registers used:
 29313 ;;		wreg, status,2
 29314 ;; Tracked objects:
 29315 ;;		On entry : 0/0
 29316 ;;		On exit  : 0/0
 29317 ;;		Unchanged: 0/0
 29318 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29319 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29320 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29321 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29322 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29323 ;;Total ram usage:        0 bytes
 29324 ;; Hardware stack levels used:    1
 29325 ;; Hardware stack levels required when called:    7
 29326 ;; This function calls:
 29327 ;;		Nothing
 29328 ;; This function is called by:
 29329 ;;		_Event_DIPSwitch
 29330 ;;		_Event_HMI_DIPSwitch
 29331 ;; This function uses a non-reentrant model
 29332 ;;
 29333                           
 29334                           	psect	text157
 29335  01670C                     __ptext157:
 29336                           	opt stack 0
 29337  01670C                     _HMI_GetBar:
 29338                           	opt stack 18
 29339                           
 29340                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 29341                           
 29342                           ;incstack = 0
 29343  01670C  0103               	movlb	3	; () banked
 29344  01670E  5147               	movf	(_HMIBoard+7)& (0+255),w,b
 29345  016710  0012               	return	
 29346  016712                     __end_of_HMI_GetBar:
 29347                           	opt stack 0
 29348                           tosu	equ	0xFFF
 29349                           tosh	equ	0xFFE
 29350                           tosl	equ	0xFFD
 29351                           pclath	equ	0xFFA
 29352                           tblptru	equ	0xFF8
 29353                           tblptrh	equ	0xFF7
 29354                           tblptrl	equ	0xFF6
 29355                           tablat	equ	0xFF5
 29356                           prodh	equ	0xFF4
 29357                           prodl	equ	0xFF3
 29358                           intcon	equ	0xFF2
 29359                           indf0	equ	0xFEF
 29360                           postinc0	equ	0xFEE
 29361                           fsr0h	equ	0xFEA
 29362                           fsr0l	equ	0xFE9
 29363                           wreg	equ	0xFE8
 29364                           indf1	equ	0xFE7
 29365                           postdec1	equ	0xFE5
 29366                           fsr1h	equ	0xFE2
 29367                           fsr1l	equ	0xFE1
 29368                           indf2	equ	0xFDF
 29369                           postinc2	equ	0xFDE
 29370                           postdec2	equ	0xFDD
 29371                           plusw2	equ	0xFDB
 29372                           fsr2h	equ	0xFDA
 29373                           fsr2l	equ	0xFD9
 29374                           status	equ	0xFD8
 29375                           
 29376 ;; *************** function _ISR_Function *****************
 29377 ;; Defined at:
 29378 ;;		line 38 in file "Library/ISR.c"
 29379 ;; Parameters:    Size  Location     Type
 29380 ;;		None
 29381 ;; Auto vars:     Size  Location     Type
 29382 ;;		None
 29383 ;; Return value:  Size  Location     Type
 29384 ;;                  1    wreg      void 
 29385 ;; Registers used:
 29386 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29387 ;; Tracked objects:
 29388 ;;		On entry : 0/0
 29389 ;;		On exit  : 0/0
 29390 ;;		Unchanged: 0/0
 29391 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29392 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29393 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29394 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29395 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29396 ;;Total ram usage:       18 bytes
 29397 ;; Hardware stack levels used:    1
 29398 ;; Hardware stack levels required when called:    6
 29399 ;; This function calls:
 29400 ;;		_Timer0_ISR
 29401 ;; This function is called by:
 29402 ;;		Interrupt level 2
 29403 ;; This function uses a non-reentrant model
 29404 ;;
 29405                           
 29406                           	psect	intcode
 29407  001408                     __pintcode:
 29408                           	opt stack 0
 29409  001408                     _ISR_Function:
 29410                           	opt stack 13
 29411                           
 29412                           ; BSR set to: 3
 29413                           ;incstack = 0
 29414  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 29415  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 29416  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 29417  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 29418  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 29419  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 29420  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 29421  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 29422  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 29423  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 29424  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 29425  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 29426  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 29427  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 29428  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 29429  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 29430  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 29431  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 29432  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 29433                           
 29434                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 29435  001452  92F2               	bcf	intcon,1,c	;volatile
 29436                           
 29437                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 29438  001454  B4F2               	btfsc	intcon,2,c	;volatile
 29439  001456  AAF2               	btfss	intcon,5,c	;volatile
 29440  001458  D002               	goto	i2l1590
 29441                           
 29442                           ;ISR.c: 68: Timer0_ISR();
 29443  00145A  EC28  F0B1         	call	_Timer0_ISR	;wreg free
 29444  00145E                     i2l1590:
 29445  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 29446  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 29447  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 29448  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 29449  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 29450  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 29451  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 29452  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 29453  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 29454  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 29455  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 29456  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 29457  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 29458  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 29459  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 29460  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 29461  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 29462  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 29463  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 29464  0014A8  0011               	retfie		f
 29465  0014AA                     __end_of_ISR_Function:
 29466                           	opt stack 0
 29467                           tosu	equ	0xFFF
 29468                           tosh	equ	0xFFE
 29469                           tosl	equ	0xFFD
 29470                           pclatu	equ	0xFFB
 29471                           pclath	equ	0xFFA
 29472                           tblptru	equ	0xFF8
 29473                           tblptrh	equ	0xFF7
 29474                           tblptrl	equ	0xFF6
 29475                           tablat	equ	0xFF5
 29476                           prodh	equ	0xFF4
 29477                           prodl	equ	0xFF3
 29478                           intcon	equ	0xFF2
 29479                           indf0	equ	0xFEF
 29480                           postinc0	equ	0xFEE
 29481                           fsr0h	equ	0xFEA
 29482                           fsr0l	equ	0xFE9
 29483                           wreg	equ	0xFE8
 29484                           indf1	equ	0xFE7
 29485                           postdec1	equ	0xFE5
 29486                           fsr1h	equ	0xFE2
 29487                           fsr1l	equ	0xFE1
 29488                           indf2	equ	0xFDF
 29489                           postinc2	equ	0xFDE
 29490                           postdec2	equ	0xFDD
 29491                           plusw2	equ	0xFDB
 29492                           fsr2h	equ	0xFDA
 29493                           fsr2l	equ	0xFD9
 29494                           status	equ	0xFD8
 29495                           
 29496 ;; *************** function _Timer0_ISR *****************
 29497 ;; Defined at:
 29498 ;;		line 94 in file "Library/Timer0.c"
 29499 ;; Parameters:    Size  Location     Type
 29500 ;;		None
 29501 ;; Auto vars:     Size  Location     Type
 29502 ;;		None
 29503 ;; Return value:  Size  Location     Type
 29504 ;;                  1    wreg      void 
 29505 ;; Registers used:
 29506 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29507 ;; Tracked objects:
 29508 ;;		On entry : 0/0
 29509 ;;		On exit  : 0/0
 29510 ;;		Unchanged: 0/0
 29511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29516 ;;Total ram usage:        0 bytes
 29517 ;; Hardware stack levels used:    1
 29518 ;; Hardware stack levels required when called:    5
 29519 ;; This function calls:
 29520 ;;		Absolute function
 29521 ;;		i2_Motor_Step
 29522 ;;		i2_Timer0_Stop
 29523 ;; This function is called by:
 29524 ;;		_ISR_Function
 29525 ;; This function uses a non-reentrant model
 29526 ;;
 29527                           
 29528                           	psect	text159
 29529  016250                     __ptext159:
 29530                           	opt stack 0
 29531  016250                     _Timer0_ISR:
 29532                           	opt stack 13
 29533                           
 29534                           ;Timer0.c: 96: Timer0_Stop();
 29535                           
 29536                           ;incstack = 0
 29537  016250  EC89  F0B3         	call	i2_Timer0_Stop	;wreg free
 29538                           
 29539                           ;Timer0.c: 99: if (gISR != 0)
 29540  016254  0100               	movlb	0	; () banked
 29541  016256  5160               	movf	_gISR& (0+255),w,b
 29542  016258  0100               	movlb	0	; () banked
 29543  01625A  1161               	iorwf	(_gISR+1)& (0+255),w,b
 29544  01625C  0100               	movlb	0	; () banked
 29545  01625E  1162               	iorwf	(_gISR+2)& (0+255),w,b
 29546  016260  B4D8               	btfsc	status,2,c
 29547  016262  0012               	return	
 29548                           
 29549                           ; BSR set to: 0
 29550                           ;Timer0.c: 100: gISR();
 29551  016264  D801               	call	i2u1354_48
 29552  016266  0012               	return	
 29553  016268                     i2u1354_48:
 29554  016268  0005               	push	
 29555  01626A  6EFA               	movwf	pclath,c
 29556  01626C  0100               	movlb	0	; () banked
 29557  01626E  5160               	movf	_gISR& (0+255),w,b
 29558  016270  6EFD               	movwf	tosl,c
 29559  016272  5161               	movf	(_gISR+1)& (0+255),w,b
 29560  016274  6EFE               	movwf	tosh,c
 29561  016276  5162               	movf	(_gISR+2)& (0+255),w,b
 29562  016278  6EFF               	movwf	tosu,c
 29563  01627A  50FA               	movf	pclath,w,c
 29564  01627C  0012               	return		;indir
 29565  01627E                     __end_of_Timer0_ISR:
 29566                           	opt stack 0
 29567                           tosu	equ	0xFFF
 29568                           tosh	equ	0xFFE
 29569                           tosl	equ	0xFFD
 29570                           pclatu	equ	0xFFB
 29571                           pclath	equ	0xFFA
 29572                           tblptru	equ	0xFF8
 29573                           tblptrh	equ	0xFF7
 29574                           tblptrl	equ	0xFF6
 29575                           tablat	equ	0xFF5
 29576                           prodh	equ	0xFF4
 29577                           prodl	equ	0xFF3
 29578                           intcon	equ	0xFF2
 29579                           indf0	equ	0xFEF
 29580                           postinc0	equ	0xFEE
 29581                           fsr0h	equ	0xFEA
 29582                           fsr0l	equ	0xFE9
 29583                           wreg	equ	0xFE8
 29584                           indf1	equ	0xFE7
 29585                           postdec1	equ	0xFE5
 29586                           fsr1h	equ	0xFE2
 29587                           fsr1l	equ	0xFE1
 29588                           indf2	equ	0xFDF
 29589                           postinc2	equ	0xFDE
 29590                           postdec2	equ	0xFDD
 29591                           plusw2	equ	0xFDB
 29592                           fsr2h	equ	0xFDA
 29593                           fsr2l	equ	0xFD9
 29594                           status	equ	0xFD8
 29595                           
 29596 ;; *************** function i2_Motor_Step *****************
 29597 ;; Defined at:
 29598 ;;		line 75 in file "Library/Motor.c"
 29599 ;; Parameters:    Size  Location     Type
 29600 ;;		None
 29601 ;; Auto vars:     Size  Location     Type
 29602 ;;		None
 29603 ;; Return value:  Size  Location     Type
 29604 ;;                  1    wreg      void 
 29605 ;; Registers used:
 29606 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29607 ;; Tracked objects:
 29608 ;;		On entry : 0/0
 29609 ;;		On exit  : 0/0
 29610 ;;		Unchanged: 0/0
 29611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29612 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29613 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29614 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29615 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29616 ;;Total ram usage:        2 bytes
 29617 ;; Hardware stack levels used:    1
 29618 ;; Hardware stack levels required when called:    4
 29619 ;; This function calls:
 29620 ;;		i2_MXK_Queue
 29621 ;;		i2_MXK_Release
 29622 ;;		i2_MXK_SwitchTo
 29623 ;;		i2_Port_SetPin
 29624 ;;		i2_Timer0_Restart
 29625 ;;		i2_Timer0_Stop
 29626 ;; This function is called by:
 29627 ;; This function uses a non-reentrant model
 29628 ;;
 29629                           
 29630                           	psect	text160
 29631  01373E                     __ptext160:
 29632                           	opt stack 0
 29633  01373E                     i2_Motor_Step:
 29634                           	opt stack 13
 29635                           
 29636                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 29637                           
 29638                           ;incstack = 0
 29639  01373E  0100               	movlb	0	; () banked
 29640  013740  EE20 F004          	lfsr	2,4
 29641  013744  517F               	movf	_lMotor& (0+255),w,b
 29642  013746  26D9               	addwf	fsr2l,f,c
 29643  013748  5180               	movf	(_lMotor+1)& (0+255),w,b
 29644  01374A  22DA               	addwfc	fsr2h,f,c
 29645  01374C  50DF               	movf	indf2,w,c
 29646  01374E  EC7B  F0B0         	call	i2_MXK_SwitchTo
 29647  013752  0900               	iorlw	0
 29648  013754  B4D8               	btfsc	status,2,c
 29649  013756  D06A               	goto	i2l1627
 29650                           
 29651                           ;Motor.c: 78: {
 29652                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 29653  013758  C07F  FFD9         	movff	_lMotor,fsr2l
 29654  01375C  C080  FFDA         	movff	_lMotor+1,fsr2h
 29655  013760  50DE               	movf	postinc2,w,c
 29656  013762  10DE               	iorwf	postinc2,w,c
 29657  013764  B4D8               	btfsc	status,2,c
 29658  013766  D05D               	goto	i2l1628
 29659                           
 29660                           ;Motor.c: 80: {
 29661                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 29662  013768  C07F  FFD9         	movff	_lMotor,fsr2l
 29663  01376C  C080  FFDA         	movff	_lMotor+1,fsr2h
 29664  013770  0E01               	movlw	1
 29665  013772  BEDB               	btfsc	plusw2,7,c
 29666  013774  D022               	goto	i2l1629
 29667  013776  0E01               	movlw	1
 29668  013778  50DB               	movf	plusw2,w,c
 29669  01377A  E103               	bnz	i2u729_40
 29670  01377C  04DE               	decf	postinc2,w,c
 29671  01377E  A0D8               	btfss	status,0,c
 29672  013780  D01C               	goto	i2l1629
 29673  013782                     i2u729_40:
 29674                           
 29675                           ;Motor.c: 83: {
 29676                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 29677  013782  C07F  FFD9         	movff	_lMotor,fsr2l
 29678  013786  C080  FFDA         	movff	_lMotor+1,fsr2h
 29679  01378A  28DE               	incf	postinc2,w,c
 29680  01378C  E104               	bnz	i2u730_40
 29681  01378E  0E7F               	movlw	127
 29682  013790  18DE               	xorwf	postinc2,w,c
 29683  013792  B4D8               	btfsc	status,2,c
 29684  013794  D007               	goto	i2l1630
 29685  013796                     i2u730_40:
 29686                           
 29687                           ;Motor.c: 85: lMotor->mDelta --;
 29688  013796  C07F  FFD9         	movff	_lMotor,fsr2l
 29689  01379A  C080  FFDA         	movff	_lMotor+1,fsr2h
 29690  01379E  06DE               	decf	postinc2,f,c
 29691  0137A0  0E00               	movlw	0
 29692  0137A2  5ADD               	subwfb	postdec2,f,c
 29693  0137A4                     i2l1630:
 29694                           
 29695                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 29696  0137A4  0E91               	movlw	low _PortE
 29697  0137A6  6E10               	movwf	i2Port_SetPin@pInput,c
 29698  0137A8  0E00               	movlw	high _PortE
 29699  0137AA  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29700  0137AC  0E00               	movlw	0
 29701  0137AE  6E12               	movwf	i2Port_SetPin@pPin,c
 29702  0137B0  0E01               	movlw	1
 29703  0137B2  6E13               	movwf	i2Port_SetPin@pValue,c
 29704  0137B4  EC80  F0A3         	call	i2_Port_SetPin	;wreg free
 29705                           
 29706                           ;Motor.c: 88: }
 29707  0137B8  D01B               	goto	i2l1631
 29708  0137BA                     i2l1629:
 29709                           
 29710                           ;Motor.c: 89: else
 29711                           ;Motor.c: 90: {
 29712                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 29713  0137BA  C07F  FFD9         	movff	_lMotor,fsr2l
 29714  0137BE  C080  FFDA         	movff	_lMotor+1,fsr2h
 29715  0137C2  04DE               	decf	postinc2,w,c
 29716  0137C4  E104               	bnz	i2u731_40
 29717  0137C6  0E80               	movlw	128
 29718  0137C8  18DE               	xorwf	postinc2,w,c
 29719  0137CA  B4D8               	btfsc	status,2,c
 29720  0137CC  D007               	goto	i2l1632
 29721  0137CE                     i2u731_40:
 29722                           
 29723                           ;Motor.c: 92: lMotor->mDelta ++;
 29724  0137CE  C07F  FFD9         	movff	_lMotor,fsr2l
 29725  0137D2  C080  FFDA         	movff	_lMotor+1,fsr2h
 29726  0137D6  2ADE               	incf	postinc2,f,c
 29727  0137D8  0E00               	movlw	0
 29728  0137DA  22DD               	addwfc	postdec2,f,c
 29729  0137DC                     i2l1632:
 29730                           
 29731                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 29732  0137DC  0E91               	movlw	low _PortE
 29733  0137DE  6E10               	movwf	i2Port_SetPin@pInput,c
 29734  0137E0  0E00               	movlw	high _PortE
 29735  0137E2  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29736  0137E4  0E00               	movlw	0
 29737  0137E6  6E12               	movwf	i2Port_SetPin@pPin,c
 29738  0137E8  0E00               	movlw	0
 29739  0137EA  6E13               	movwf	i2Port_SetPin@pValue,c
 29740  0137EC  EC80  F0A3         	call	i2_Port_SetPin	;wreg free
 29741  0137F0                     i2l1631:
 29742                           
 29743                           ;Motor.c: 95: }
 29744                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 29745  0137F0  0E91               	movlw	low _PortE
 29746  0137F2  6E10               	movwf	i2Port_SetPin@pInput,c
 29747  0137F4  0E00               	movlw	high _PortE
 29748  0137F6  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29749  0137F8  0E01               	movlw	1
 29750  0137FA  6E12               	movwf	i2Port_SetPin@pPin,c
 29751  0137FC  0E01               	movlw	1
 29752  0137FE  6E13               	movwf	i2Port_SetPin@pValue,c
 29753  013800  EC80  F0A3         	call	i2_Port_SetPin	;wreg free
 29754                           
 29755                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 29756  013804  0E91               	movlw	low _PortE
 29757  013806  6E10               	movwf	i2Port_SetPin@pInput,c
 29758  013808  0E00               	movlw	high _PortE
 29759  01380A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 29760  01380C  0E01               	movlw	1
 29761  01380E  6E12               	movwf	i2Port_SetPin@pPin,c
 29762  013810  0E00               	movlw	0
 29763  013812  6E13               	movwf	i2Port_SetPin@pValue,c
 29764  013814  EC80  F0A3         	call	i2_Port_SetPin	;wreg free
 29765                           
 29766                           ;Motor.c: 101: MXK_Release();
 29767  013818  EC8C  F0B3         	call	i2_MXK_Release	;wreg free
 29768                           
 29769                           ;Motor.c: 102: Timer0_Restart();
 29770  01381C  EC58  F0B3         	call	i2_Timer0_Restart	;wreg free
 29771                           
 29772                           ;Motor.c: 103: return;
 29773  013820  0012               	return	
 29774  013822                     i2l1628:
 29775                           
 29776                           ;Motor.c: 104: }
 29777                           ;Motor.c: 105: MXK_Release();
 29778  013822  EC8C  F0B3         	call	i2_MXK_Release	;wreg free
 29779                           
 29780                           ;Motor.c: 106: Timer0_Stop();
 29781  013826  EC89  F0B3         	call	i2_Timer0_Stop	;wreg free
 29782                           
 29783                           ;Motor.c: 107: return;
 29784  01382A  0012               	return	
 29785  01382C                     i2l1627:
 29786                           
 29787                           ;Motor.c: 108: }
 29788                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 29789  01382C  C066  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 29790  013830  C067  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 29791  013834  C068  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 29792  013838  EC3F  F0B3         	call	i2_MXK_Queue	;wreg free
 29793  01383C  0012               	return		;funcret
 29794  01383E                     __end_ofi2_Motor_Step:
 29795                           	opt stack 0
 29796                           tosu	equ	0xFFF
 29797                           tosh	equ	0xFFE
 29798                           tosl	equ	0xFFD
 29799                           pclatu	equ	0xFFB
 29800                           pclath	equ	0xFFA
 29801                           tblptru	equ	0xFF8
 29802                           tblptrh	equ	0xFF7
 29803                           tblptrl	equ	0xFF6
 29804                           tablat	equ	0xFF5
 29805                           prodh	equ	0xFF4
 29806                           prodl	equ	0xFF3
 29807                           intcon	equ	0xFF2
 29808                           indf0	equ	0xFEF
 29809                           postinc0	equ	0xFEE
 29810                           fsr0h	equ	0xFEA
 29811                           fsr0l	equ	0xFE9
 29812                           wreg	equ	0xFE8
 29813                           indf1	equ	0xFE7
 29814                           postdec1	equ	0xFE5
 29815                           fsr1h	equ	0xFE2
 29816                           fsr1l	equ	0xFE1
 29817                           indf2	equ	0xFDF
 29818                           postinc2	equ	0xFDE
 29819                           postdec2	equ	0xFDD
 29820                           plusw2	equ	0xFDB
 29821                           fsr2h	equ	0xFDA
 29822                           fsr2l	equ	0xFD9
 29823                           status	equ	0xFD8
 29824                           
 29825 ;; *************** function i2_Timer0_Stop *****************
 29826 ;; Defined at:
 29827 ;;		line 89 in file "Library/Timer0.c"
 29828 ;; Parameters:    Size  Location     Type
 29829 ;;		None
 29830 ;; Auto vars:     Size  Location     Type
 29831 ;;		None
 29832 ;; Return value:  Size  Location     Type
 29833 ;;                  1    wreg      void 
 29834 ;; Registers used:
 29835 ;;		None
 29836 ;; Tracked objects:
 29837 ;;		On entry : 0/0
 29838 ;;		On exit  : 0/0
 29839 ;;		Unchanged: 0/0
 29840 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29841 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29842 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29843 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29844 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29845 ;;Total ram usage:        0 bytes
 29846 ;; Hardware stack levels used:    1
 29847 ;; This function calls:
 29848 ;;		Nothing
 29849 ;; This function is called by:
 29850 ;;		_Timer0_ISR
 29851 ;;		i2_Motor_Step
 29852 ;; This function uses a non-reentrant model
 29853 ;;
 29854                           
 29855                           	psect	text161
 29856  016712                     __ptext161:
 29857                           	opt stack 0
 29858  016712                     i2_Timer0_Stop:
 29859                           	opt stack 17
 29860                           
 29861                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 29862                           
 29863                           ;incstack = 0
 29864  016712  9AF2               	bcf	intcon,5,c	;volatile
 29865                           
 29866                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 29867  016714  94F2               	bcf	intcon,2,c	;volatile
 29868  016716  0012               	return		;funcret
 29869  016718                     __end_ofi2_Timer0_Stop:
 29870                           	opt stack 0
 29871                           tosu	equ	0xFFF
 29872                           tosh	equ	0xFFE
 29873                           tosl	equ	0xFFD
 29874                           pclatu	equ	0xFFB
 29875                           pclath	equ	0xFFA
 29876                           tblptru	equ	0xFF8
 29877                           tblptrh	equ	0xFF7
 29878                           tblptrl	equ	0xFF6
 29879                           tablat	equ	0xFF5
 29880                           prodh	equ	0xFF4
 29881                           prodl	equ	0xFF3
 29882                           intcon	equ	0xFF2
 29883                           indf0	equ	0xFEF
 29884                           postinc0	equ	0xFEE
 29885                           fsr0h	equ	0xFEA
 29886                           fsr0l	equ	0xFE9
 29887                           wreg	equ	0xFE8
 29888                           indf1	equ	0xFE7
 29889                           postdec1	equ	0xFE5
 29890                           fsr1h	equ	0xFE2
 29891                           fsr1l	equ	0xFE1
 29892                           indf2	equ	0xFDF
 29893                           postinc2	equ	0xFDE
 29894                           postdec2	equ	0xFDD
 29895                           plusw2	equ	0xFDB
 29896                           fsr2h	equ	0xFDA
 29897                           fsr2l	equ	0xFD9
 29898                           status	equ	0xFD8
 29899                           
 29900 ;; *************** function i2_Timer0_Restart *****************
 29901 ;; Defined at:
 29902 ;;		line 83 in file "Library/Timer0.c"
 29903 ;; Parameters:    Size  Location     Type
 29904 ;;		None
 29905 ;; Auto vars:     Size  Location     Type
 29906 ;;		None
 29907 ;; Return value:  Size  Location     Type
 29908 ;;                  1    wreg      void 
 29909 ;; Registers used:
 29910 ;;		None
 29911 ;; Tracked objects:
 29912 ;;		On entry : 0/0
 29913 ;;		On exit  : 0/0
 29914 ;;		Unchanged: 0/0
 29915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29920 ;;Total ram usage:        0 bytes
 29921 ;; Hardware stack levels used:    1
 29922 ;; This function calls:
 29923 ;;		Nothing
 29924 ;; This function is called by:
 29925 ;;		i2_Motor_Step
 29926 ;; This function uses a non-reentrant model
 29927 ;;
 29928                           
 29929                           	psect	text162
 29930  0166B0                     __ptext162:
 29931                           	opt stack 0
 29932  0166B0                     i2_Timer0_Restart:
 29933                           	opt stack 16
 29934                           
 29935                           ;Timer0.c: 85: TMR0 = COUNTER;
 29936                           
 29937                           ;incstack = 0
 29938  0166B0  C029  FFD6         	movff	_COUNTER,4054	;volatile
 29939  0166B4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 29940                           
 29941                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 29942  0166B8  8AF2               	bsf	intcon,5,c	;volatile
 29943  0166BA  0012               	return		;funcret
 29944  0166BC                     __end_ofi2_Timer0_Restart:
 29945                           	opt stack 0
 29946                           tosu	equ	0xFFF
 29947                           tosh	equ	0xFFE
 29948                           tosl	equ	0xFFD
 29949                           pclatu	equ	0xFFB
 29950                           pclath	equ	0xFFA
 29951                           tblptru	equ	0xFF8
 29952                           tblptrh	equ	0xFF7
 29953                           tblptrl	equ	0xFF6
 29954                           tablat	equ	0xFF5
 29955                           prodh	equ	0xFF4
 29956                           prodl	equ	0xFF3
 29957                           intcon	equ	0xFF2
 29958                           indf0	equ	0xFEF
 29959                           postinc0	equ	0xFEE
 29960                           fsr0h	equ	0xFEA
 29961                           fsr0l	equ	0xFE9
 29962                           wreg	equ	0xFE8
 29963                           indf1	equ	0xFE7
 29964                           postdec1	equ	0xFE5
 29965                           fsr1h	equ	0xFE2
 29966                           fsr1l	equ	0xFE1
 29967                           indf2	equ	0xFDF
 29968                           postinc2	equ	0xFDE
 29969                           postdec2	equ	0xFDD
 29970                           plusw2	equ	0xFDB
 29971                           fsr2h	equ	0xFDA
 29972                           fsr2l	equ	0xFD9
 29973                           status	equ	0xFD8
 29974                           
 29975 ;; *************** function i2_Port_SetPin *****************
 29976 ;; Defined at:
 29977 ;;		line 247 in file "Library/Port.c"
 29978 ;; Parameters:    Size  Location     Type
 29979 ;;  pInput          2   15[COMRAM] const PTR struct Port
 29980 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 29981 ;;  pPin            1   17[COMRAM] enum E6750
 29982 ;;  pValue          1   18[COMRAM] unsigned char 
 29983 ;; Auto vars:     Size  Location     Type
 29984 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 29985 ;; Return value:  Size  Location     Type
 29986 ;;                  1    wreg      void 
 29987 ;; Registers used:
 29988 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 29989 ;; Tracked objects:
 29990 ;;		On entry : 0/0
 29991 ;;		On exit  : 0/0
 29992 ;;		Unchanged: 0/0
 29993 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 29994 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29995 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29996 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29997 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 29998 ;;Total ram usage:        5 bytes
 29999 ;; Hardware stack levels used:    1
 30000 ;; Hardware stack levels required when called:    3
 30001 ;; This function calls:
 30002 ;;		i2_Byte_SetBit
 30003 ;;		i2_Word_GetPair
 30004 ;; This function is called by:
 30005 ;;		i2_Motor_Step
 30006 ;; This function uses a non-reentrant model
 30007 ;;
 30008                           
 30009                           	psect	text163
 30010  014700                     __ptext163:
 30011                           	opt stack 0
 30012  014700                     i2_Port_SetPin:
 30013                           	opt stack 13
 30014                           
 30015                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 30016                           
 30017                           ;incstack = 0
 30018  014700  0E08               	movlw	8
 30019  014702  2410               	addwf	i2Port_SetPin@pInput,w,c
 30020  014704  6E0D               	movwf	i2Word_GetPair@pInput,c
 30021  014706  0E00               	movlw	0
 30022  014708  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 30023  01470A  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 30024  01470C  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 30025  014710  ECF9  F0B0         	call	i2_Word_GetPair	;wreg free
 30026  014714  6E14               	movwf	i2Port_SetPin@Type,c
 30027                           
 30028                           ;Port.c: 250: switch (Type)
 30029  014716  D03B               	goto	i2l427
 30030  014718                     
 30031                           ;Port.c: 256: pValue &= 1;
 30032  014718  0E01               	movlw	1
 30033  01471A  1613               	andwf	i2Port_SetPin@pValue,f,c
 30034                           
 30035                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30036  01471C  EE20 F002          	lfsr	2,2
 30037  014720  5010               	movf	i2Port_SetPin@pInput,w,c
 30038  014722  26D9               	addwf	fsr2l,f,c
 30039  014724  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30040  014726  22DA               	addwfc	fsr2h,f,c
 30041  014728  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30042  01472C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30043  014730  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30044  014734  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30045  014738  ECC4  F0AD         	call	i2_Byte_SetBit	;wreg free
 30046                           
 30047                           ;Port.c: 258: break;
 30048  01473C  0012               	return	
 30049  01473E                     
 30050                           ;Port.c: 261: pValue &= 1;
 30051  01473E  0E01               	movlw	1
 30052  014740  1613               	andwf	i2Port_SetPin@pValue,f,c
 30053                           
 30054                           ;Port.c: 262: pValue ^= 1;
 30055  014742  0E01               	movlw	1
 30056  014744  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 30057                           
 30058                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 30059  014746  EE20 F002          	lfsr	2,2
 30060  01474A  5010               	movf	i2Port_SetPin@pInput,w,c
 30061  01474C  26D9               	addwf	fsr2l,f,c
 30062  01474E  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30063  014750  22DA               	addwfc	fsr2h,f,c
 30064  014752  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30065  014756  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30066  01475A  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30067  01475E  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30068  014762  ECC4  F0AD         	call	i2_Byte_SetBit	;wreg free
 30069                           
 30070                           ;Port.c: 264: break;
 30071  014766  0012               	return	
 30072  014768                     
 30073                           ;Port.c: 266: pValue &= 1;
 30074  014768  0E01               	movlw	1
 30075  01476A  1613               	andwf	i2Port_SetPin@pValue,f,c
 30076                           
 30077                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 30078  01476C  EE20 F004          	lfsr	2,4
 30079  014770  5010               	movf	i2Port_SetPin@pInput,w,c
 30080  014772  26D9               	addwf	fsr2l,f,c
 30081  014774  5011               	movf	i2Port_SetPin@pInput+1,w,c
 30082  014776  22DA               	addwfc	fsr2h,f,c
 30083  014778  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 30084  01477C  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 30085  014780  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 30086  014784  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 30087  014788  ECC4  F0AD         	call	i2_Byte_SetBit	;wreg free
 30088                           
 30089                           ;Port.c: 269: }
 30090                           
 30091                           ;Port.c: 268: break;
 30092  01478C  0012               	return	
 30093  01478E                     i2l427:
 30094  01478E  5014               	movf	i2Port_SetPin@Type,w,c
 30095                           
 30096                           ; Switch size 1, requested type "space"
 30097                           ; Number of cases is 4, Range of values is 0 to 3
 30098                           ; switch strategies available:
 30099                           ; Name         Instructions Cycles
 30100                           ; simple_byte           13     7 (average)
 30101                           ;	Chosen strategy is simple_byte
 30102  014790  0A00               	xorlw	0	; case 0
 30103  014792  B4D8               	btfsc	status,2,c
 30104  014794  0012               	return	
 30105  014796  0A01               	xorlw	1	; case 1
 30106  014798  B4D8               	btfsc	status,2,c
 30107  01479A  D7BE               	goto	i2l430
 30108  01479C  0A03               	xorlw	3	; case 2
 30109  01479E  B4D8               	btfsc	status,2,c
 30110  0147A0  D7CE               	goto	i2l432
 30111  0147A2  0A01               	xorlw	1	; case 3
 30112  0147A4  A4D8               	btfss	status,2,c
 30113  0147A6  0012               	return	
 30114  0147A8  D7DF               	goto	i2l433
 30115  0147AA                     __end_ofi2_Port_SetPin:
 30116                           	opt stack 0
 30117                           tosu	equ	0xFFF
 30118                           tosh	equ	0xFFE
 30119                           tosl	equ	0xFFD
 30120                           pclatu	equ	0xFFB
 30121                           pclath	equ	0xFFA
 30122                           tblptru	equ	0xFF8
 30123                           tblptrh	equ	0xFF7
 30124                           tblptrl	equ	0xFF6
 30125                           tablat	equ	0xFF5
 30126                           prodh	equ	0xFF4
 30127                           prodl	equ	0xFF3
 30128                           intcon	equ	0xFF2
 30129                           indf0	equ	0xFEF
 30130                           postinc0	equ	0xFEE
 30131                           fsr0h	equ	0xFEA
 30132                           fsr0l	equ	0xFE9
 30133                           wreg	equ	0xFE8
 30134                           indf1	equ	0xFE7
 30135                           postdec1	equ	0xFE5
 30136                           fsr1h	equ	0xFE2
 30137                           fsr1l	equ	0xFE1
 30138                           indf2	equ	0xFDF
 30139                           postinc2	equ	0xFDE
 30140                           postdec2	equ	0xFDD
 30141                           plusw2	equ	0xFDB
 30142                           fsr2h	equ	0xFDA
 30143                           fsr2l	equ	0xFD9
 30144                           status	equ	0xFD8
 30145                           
 30146 ;; *************** function i2_Word_GetPair *****************
 30147 ;; Defined at:
 30148 ;;		line 156 in file "Library/Types.c"
 30149 ;; Parameters:    Size  Location     Type
 30150 ;;  pInput          2   12[COMRAM] PTR struct Word
 30151 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 30152 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 30153 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 30154 ;;		 -> PortC(10), PortF(10), NULL(0), 
 30155 ;;  pPair           1   14[COMRAM] unsigned char 
 30156 ;; Auto vars:     Size  Location     Type
 30157 ;;		None
 30158 ;; Return value:  Size  Location     Type
 30159 ;;                  1    wreg      unsigned char 
 30160 ;; Registers used:
 30161 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30162 ;; Tracked objects:
 30163 ;;		On entry : 0/0
 30164 ;;		On exit  : 0/0
 30165 ;;		Unchanged: 0/0
 30166 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30167 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30168 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30169 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30170 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30171 ;;Total ram usage:        3 bytes
 30172 ;; Hardware stack levels used:    1
 30173 ;; Hardware stack levels required when called:    2
 30174 ;; This function calls:
 30175 ;;		i2_Byte_GetPair
 30176 ;; This function is called by:
 30177 ;;		i2_Port_SetPin
 30178 ;; This function uses a non-reentrant model
 30179 ;;
 30180                           
 30181                           	psect	text164
 30182  0161F2                     __ptext164:
 30183                           	opt stack 0
 30184  0161F2                     i2_Word_GetPair:
 30185                           	opt stack 13
 30186                           
 30187                           ;Types.c: 158: if (pPair >= 4)
 30188                           
 30189                           ;incstack = 0
 30190  0161F2  0E03               	movlw	3
 30191  0161F4  640F               	cpfsgt	i2Word_GetPair@pPair,c
 30192  0161F6  D00C               	goto	i2l781
 30193                           
 30194                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 30195  0161F8  0E01               	movlw	1
 30196  0161FA  240D               	addwf	i2Word_GetPair@pInput,w,c
 30197  0161FC  6E0A               	movwf	i2Byte_GetPair@pInput,c
 30198  0161FE  0E00               	movlw	0
 30199  016200  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 30200  016202  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 30201  016204  500F               	movf	i2Word_GetPair@pPair,w,c
 30202  016206  0FFC               	addlw	252
 30203  016208  6E0C               	movwf	i2Byte_GetPair@pPair,c
 30204  01620A  EC75  F0B2         	call	i2_Byte_GetPair	;wreg free
 30205  01620E  0012               	return	
 30206  016210                     i2l781:
 30207                           
 30208                           ;Types.c: 160: else
 30209                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 30210  016210  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 30211  016214  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 30212  016218  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 30213  01621C  EC75  F0B2         	call	i2_Byte_GetPair	;wreg free
 30214  016220  0012               	return	
 30215  016222                     __end_ofi2_Word_GetPair:
 30216                           	opt stack 0
 30217                           tosu	equ	0xFFF
 30218                           tosh	equ	0xFFE
 30219                           tosl	equ	0xFFD
 30220                           pclatu	equ	0xFFB
 30221                           pclath	equ	0xFFA
 30222                           tblptru	equ	0xFF8
 30223                           tblptrh	equ	0xFF7
 30224                           tblptrl	equ	0xFF6
 30225                           tablat	equ	0xFF5
 30226                           prodh	equ	0xFF4
 30227                           prodl	equ	0xFF3
 30228                           intcon	equ	0xFF2
 30229                           indf0	equ	0xFEF
 30230                           postinc0	equ	0xFEE
 30231                           fsr0h	equ	0xFEA
 30232                           fsr0l	equ	0xFE9
 30233                           wreg	equ	0xFE8
 30234                           indf1	equ	0xFE7
 30235                           postdec1	equ	0xFE5
 30236                           fsr1h	equ	0xFE2
 30237                           fsr1l	equ	0xFE1
 30238                           indf2	equ	0xFDF
 30239                           postinc2	equ	0xFDE
 30240                           postdec2	equ	0xFDD
 30241                           plusw2	equ	0xFDB
 30242                           fsr2h	equ	0xFDA
 30243                           fsr2l	equ	0xFD9
 30244                           status	equ	0xFD8
 30245                           
 30246 ;; *************** function i2_Byte_GetPair *****************
 30247 ;; Defined at:
 30248 ;;		line 87 in file "Library/Types.c"
 30249 ;; Parameters:    Size  Location     Type
 30250 ;;  pInput          2    9[COMRAM] PTR struct Byte
 30251 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30252 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30253 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30254 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30255 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30256 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30257 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30258 ;;		 -> NULL(0), 
 30259 ;;  pPair           1   11[COMRAM] unsigned char 
 30260 ;; Auto vars:     Size  Location     Type
 30261 ;;		None
 30262 ;; Return value:  Size  Location     Type
 30263 ;;                  1    wreg      unsigned char 
 30264 ;; Registers used:
 30265 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 30266 ;; Tracked objects:
 30267 ;;		On entry : 0/0
 30268 ;;		On exit  : 0/0
 30269 ;;		Unchanged: 0/0
 30270 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30271 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30272 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30273 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30274 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30275 ;;Total ram usage:        3 bytes
 30276 ;; Hardware stack levels used:    1
 30277 ;; Hardware stack levels required when called:    1
 30278 ;; This function calls:
 30279 ;;		i2_Byte_GetZone
 30280 ;; This function is called by:
 30281 ;;		i2_Word_GetPair
 30282 ;; This function uses a non-reentrant model
 30283 ;;
 30284                           
 30285                           	psect	text165
 30286  0164EA                     __ptext165:
 30287                           	opt stack 0
 30288  0164EA                     i2_Byte_GetPair:
 30289                           	opt stack 13
 30290                           
 30291                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 30292                           
 30293                           ;incstack = 0
 30294  0164EA  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 30295  0164EE  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 30296  0164F2  0E04               	movlw	4
 30297  0164F4  6E03               	movwf	i2Byte_GetZone@pMax,c
 30298  0164F6  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 30299  0164FA  0E02               	movlw	2
 30300  0164FC  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 30301  0164FE  EC38  F0A9         	call	i2_Byte_GetZone	;wreg free
 30302  016502  0012               	return	
 30303  016504                     __end_ofi2_Byte_GetPair:
 30304                           	opt stack 0
 30305                           tosu	equ	0xFFF
 30306                           tosh	equ	0xFFE
 30307                           tosl	equ	0xFFD
 30308                           pclatu	equ	0xFFB
 30309                           pclath	equ	0xFFA
 30310                           tblptru	equ	0xFF8
 30311                           tblptrh	equ	0xFF7
 30312                           tblptrl	equ	0xFF6
 30313                           tablat	equ	0xFF5
 30314                           prodh	equ	0xFF4
 30315                           prodl	equ	0xFF3
 30316                           intcon	equ	0xFF2
 30317                           indf0	equ	0xFEF
 30318                           postinc0	equ	0xFEE
 30319                           fsr0h	equ	0xFEA
 30320                           fsr0l	equ	0xFE9
 30321                           wreg	equ	0xFE8
 30322                           indf1	equ	0xFE7
 30323                           postdec1	equ	0xFE5
 30324                           fsr1h	equ	0xFE2
 30325                           fsr1l	equ	0xFE1
 30326                           indf2	equ	0xFDF
 30327                           postinc2	equ	0xFDE
 30328                           postdec2	equ	0xFDD
 30329                           plusw2	equ	0xFDB
 30330                           fsr2h	equ	0xFDA
 30331                           fsr2l	equ	0xFD9
 30332                           status	equ	0xFD8
 30333                           
 30334 ;; *************** function i2_Byte_GetZone *****************
 30335 ;; Defined at:
 30336 ;;		line 64 in file "Library/Types.c"
 30337 ;; Parameters:    Size  Location     Type
 30338 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30339 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 30340 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 30341 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 30342 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 30343 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 30344 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 30345 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 30346 ;;		 -> NULL(0), 
 30347 ;;  pMax            1    2[COMRAM] unsigned char 
 30348 ;;  pChunk          1    3[COMRAM] unsigned char 
 30349 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 30350 ;; Auto vars:     Size  Location     Type
 30351 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 30352 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 30353 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 30354 ;; Return value:  Size  Location     Type
 30355 ;;                  1    wreg      unsigned char 
 30356 ;; Registers used:
 30357 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 30358 ;; Tracked objects:
 30359 ;;		On entry : 0/0
 30360 ;;		On exit  : 0/0
 30361 ;;		Unchanged: 0/0
 30362 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30363 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30364 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30365 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30366 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30367 ;;Total ram usage:        9 bytes
 30368 ;; Hardware stack levels used:    1
 30369 ;; This function calls:
 30370 ;;		Nothing
 30371 ;; This function is called by:
 30372 ;;		i2_Byte_GetPair
 30373 ;; This function uses a non-reentrant model
 30374 ;;
 30375                           
 30376                           	psect	text166
 30377  015270                     __ptext166:
 30378                           	opt stack 0
 30379  015270                     i2_Byte_GetZone:
 30380                           	opt stack 13
 30381                           
 30382                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 30383                           
 30384                           ;incstack = 0
 30385  015270  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 30386  015274  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 30387  015278  0E00               	movlw	low (__mediumconst shr (0+16))
 30388  01527A  6EF8               	movwf	tblptru,c
 30389  01527C  0E0F               	movlw	(high __ramtop+-1)
 30390  01527E  64F7               	cpfsgt	tblptrh,c
 30391  015280  D003               	bra	i2u506_47
 30392  015282  0008               	tblrd		*
 30393  015284  50F5               	movf	tablat,w,c
 30394  015286  D005               	bra	i2u506_40
 30395  015288                     i2u506_47:
 30396  015288  CFF6 FFE9          	movff	tblptrl,fsr0l
 30397  01528C  CFF7 FFEA          	movff	tblptrh,fsr0h
 30398  015290  50EF               	movf	indf0,w,c
 30399  015292                     i2u506_40:
 30400  015292  6E09               	movwf	i2Byte_GetZone@Output,c
 30401                           
 30402                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 30403  015294  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30404  015296  0D01               	mullw	1
 30405  015298  0E0F               	movlw	low _MASKS
 30406  01529A  24F3               	addwf	prodl,w,c
 30407  01529C  6EF6               	movwf	tblptrl,c
 30408  01529E  0EFD               	movlw	high _MASKS
 30409  0152A0  20F4               	addwfc	prodh,w,c
 30410  0152A2  6EF7               	movwf	tblptrh,c
 30411  0152A4                     	if	1	;There are 3 active tblptr bytes
 30412  0152A4  6AF8               	clrf	tblptru,c
 30413  0152A6  0E00               	movlw	low (__mediumconst shr (0+16))
 30414  0152A8  22F8               	addwfc	tblptru,f,c
 30415  0152AA                     	endif
 30416  0152AA  0008               	tblrd		*
 30417  0152AC  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 30418                           
 30419                           ;Types.c: 68: UINT8 Offset = 0;
 30420  0152B0  0E00               	movlw	0
 30421  0152B2  6E08               	movwf	i2Byte_GetZone@Offset,c
 30422                           
 30423                           ;Types.c: 70: while (pChunk >= pMax)
 30424  0152B4  D003               	goto	i2l732
 30425  0152B6                     
 30426                           ;Types.c: 71: {
 30427                           ;Types.c: 72: pChunk -= pMax;
 30428  0152B6  5003               	movf	i2Byte_GetZone@pMax,w,c
 30429  0152B8  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 30430                           
 30431                           ;Types.c: 73: Offset += 1;
 30432  0152BA  2A08               	incf	i2Byte_GetZone@Offset,f,c
 30433  0152BC                     i2l732:
 30434  0152BC  5003               	movf	i2Byte_GetZone@pMax,w,c
 30435  0152BE  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 30436  0152C0  B0D8               	btfsc	status,0,c
 30437  0152C2  D7F9               	goto	i2l733
 30438                           
 30439                           ;Types.c: 74: }
 30440                           ;Types.c: 75: pChunk *= pChunkSize;
 30441  0152C4  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 30442  0152C6  0204               	mulwf	i2Byte_GetZone@pChunk,c
 30443  0152C8  50F3               	movf	prodl,w,c
 30444  0152CA  6E04               	movwf	i2Byte_GetZone@pChunk,c
 30445                           
 30446                           ;Types.c: 76: pChunk += Offset;
 30447  0152CC  5008               	movf	i2Byte_GetZone@Offset,w,c
 30448  0152CE  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 30449                           
 30450                           ;Types.c: 78: Output >>= pChunk;
 30451  0152D0  2804               	incf	i2Byte_GetZone@pChunk,w,c
 30452  0152D2  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 30453  0152D4  D002               	goto	i2u508_40
 30454  0152D6                     i2u508_45:
 30455  0152D6  90D8               	bcf	status,0,c
 30456  0152D8  3209               	rrcf	i2Byte_GetZone@Output,f,c
 30457  0152DA                     i2u508_40:
 30458  0152DA  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 30459  0152DC  D7FC               	goto	i2u508_45
 30460                           
 30461                           ;Types.c: 79: Output &= MASK;
 30462  0152DE  5007               	movf	i2Byte_GetZone@MASK,w,c
 30463  0152E0  1609               	andwf	i2Byte_GetZone@Output,f,c
 30464                           
 30465                           ;Types.c: 80: return Output;
 30466  0152E2  5009               	movf	i2Byte_GetZone@Output,w,c
 30467  0152E4  0012               	return	
 30468  0152E6                     __end_ofi2_Byte_GetZone:
 30469                           	opt stack 0
 30470                           tosu	equ	0xFFF
 30471                           tosh	equ	0xFFE
 30472                           tosl	equ	0xFFD
 30473                           pclatu	equ	0xFFB
 30474                           pclath	equ	0xFFA
 30475                           tblptru	equ	0xFF8
 30476                           tblptrh	equ	0xFF7
 30477                           tblptrl	equ	0xFF6
 30478                           tablat	equ	0xFF5
 30479                           prodh	equ	0xFF4
 30480                           prodl	equ	0xFF3
 30481                           intcon	equ	0xFF2
 30482                           indf0	equ	0xFEF
 30483                           postinc0	equ	0xFEE
 30484                           fsr0h	equ	0xFEA
 30485                           fsr0l	equ	0xFE9
 30486                           wreg	equ	0xFE8
 30487                           indf1	equ	0xFE7
 30488                           postdec1	equ	0xFE5
 30489                           fsr1h	equ	0xFE2
 30490                           fsr1l	equ	0xFE1
 30491                           indf2	equ	0xFDF
 30492                           postinc2	equ	0xFDE
 30493                           postdec2	equ	0xFDD
 30494                           plusw2	equ	0xFDB
 30495                           fsr2h	equ	0xFDA
 30496                           fsr2l	equ	0xFD9
 30497                           status	equ	0xFD8
 30498                           
 30499 ;; *************** function i2_Byte_SetBit *****************
 30500 ;; Defined at:
 30501 ;;		line 32 in file "Library/Types.c"
 30502 ;; Parameters:    Size  Location     Type
 30503 ;;  pInput          2    0[COMRAM] PTR struct Byte
 30504 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 30505 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 30506 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 30507 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 30508 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 30509 ;;		 -> NULL(0), 
 30510 ;;  pBit            1    2[COMRAM] unsigned char 
 30511 ;;  pValue          1    3[COMRAM] unsigned char 
 30512 ;; Auto vars:     Size  Location     Type
 30513 ;;		None
 30514 ;; Return value:  Size  Location     Type
 30515 ;;                  1    wreg      void 
 30516 ;; Registers used:
 30517 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 30518 ;; Tracked objects:
 30519 ;;		On entry : 0/0
 30520 ;;		On exit  : 0/0
 30521 ;;		Unchanged: 0/0
 30522 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30523 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30524 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30525 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30526 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30527 ;;Total ram usage:        7 bytes
 30528 ;; Hardware stack levels used:    1
 30529 ;; This function calls:
 30530 ;;		Nothing
 30531 ;; This function is called by:
 30532 ;;		i2_Port_SetPin
 30533 ;; This function uses a non-reentrant model
 30534 ;;
 30535                           
 30536                           	psect	text167
 30537  015B88                     __ptext167:
 30538                           	opt stack 0
 30539  015B88                     i2_Byte_SetBit:
 30540                           	opt stack 15
 30541                           
 30542                           ;Types.c: 34: pValue &= 1;
 30543                           
 30544                           ;incstack = 0
 30545  015B88  0E01               	movlw	1
 30546  015B8A  1604               	andwf	i2Byte_SetBit@pValue,f,c
 30547                           
 30548                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 30549  015B8C  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30550  015B90  0E01               	movlw	1
 30551  015B92  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 30552  015B94  2A05               	incf	??i2_Byte_SetBit,f,c
 30553  015B96  D002               	goto	i2u630_44
 30554  015B98                     i2u630_45:
 30555  015B98  90D8               	bcf	status,0,c
 30556  015B9A  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30557  015B9C                     i2u630_44:
 30558  015B9C  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30559  015B9E  D7FC               	goto	i2u630_45
 30560  015BA0  5006               	movf	??i2_Byte_SetBit+1,w,c
 30561  015BA2  0AFF               	xorlw	255
 30562  015BA4  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 30563  015BA6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30564  015BAA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30565  015BAE  5007               	movf	??i2_Byte_SetBit+2,w,c
 30566  015BB0  16DF               	andwf	indf2,f,c
 30567                           
 30568                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 30569  015BB2  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 30570  015BB6  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 30571  015BBA  2A05               	incf	??i2_Byte_SetBit,f,c
 30572  015BBC  D002               	goto	i2u631_44
 30573  015BBE                     i2u631_45:
 30574  015BBE  90D8               	bcf	status,0,c
 30575  015BC0  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 30576  015BC2                     i2u631_44:
 30577  015BC2  2E05               	decfsz	??i2_Byte_SetBit,f,c
 30578  015BC4  D7FC               	goto	i2u631_45
 30579  015BC6  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 30580  015BCA  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 30581  015BCE  5006               	movf	??i2_Byte_SetBit+1,w,c
 30582  015BD0  12DF               	iorwf	indf2,f,c
 30583  015BD2  0012               	return		;funcret
 30584  015BD4                     __end_ofi2_Byte_SetBit:
 30585                           	opt stack 0
 30586                           tosu	equ	0xFFF
 30587                           tosh	equ	0xFFE
 30588                           tosl	equ	0xFFD
 30589                           pclatu	equ	0xFFB
 30590                           pclath	equ	0xFFA
 30591                           tblptru	equ	0xFF8
 30592                           tblptrh	equ	0xFF7
 30593                           tblptrl	equ	0xFF6
 30594                           tablat	equ	0xFF5
 30595                           prodh	equ	0xFF4
 30596                           prodl	equ	0xFF3
 30597                           intcon	equ	0xFF2
 30598                           indf0	equ	0xFEF
 30599                           postinc0	equ	0xFEE
 30600                           fsr0h	equ	0xFEA
 30601                           fsr0l	equ	0xFE9
 30602                           wreg	equ	0xFE8
 30603                           indf1	equ	0xFE7
 30604                           postdec1	equ	0xFE5
 30605                           fsr1h	equ	0xFE2
 30606                           fsr1l	equ	0xFE1
 30607                           indf2	equ	0xFDF
 30608                           postinc2	equ	0xFDE
 30609                           postdec2	equ	0xFDD
 30610                           plusw2	equ	0xFDB
 30611                           fsr2h	equ	0xFDA
 30612                           fsr2l	equ	0xFD9
 30613                           status	equ	0xFD8
 30614                           
 30615 ;; *************** function i2_MXK_SwitchTo *****************
 30616 ;; Defined at:
 30617 ;;		line 105 in file "Library/MXK.c"
 30618 ;; Parameters:    Size  Location     Type
 30619 ;;  pModule         1    wreg     enum E6927
 30620 ;; Auto vars:     Size  Location     Type
 30621 ;;  pModule         1    7[COMRAM] enum E6927
 30622 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 30623 ;; Return value:  Size  Location     Type
 30624 ;;                  1    wreg      unsigned char 
 30625 ;; Registers used:
 30626 ;;		wreg, status,2, status,0, cstack
 30627 ;; Tracked objects:
 30628 ;;		On entry : 0/0
 30629 ;;		On exit  : 0/0
 30630 ;;		Unchanged: 0/0
 30631 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30632 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30633 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30634 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30635 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30636 ;;Total ram usage:        2 bytes
 30637 ;; Hardware stack levels used:    1
 30638 ;; Hardware stack levels required when called:    1
 30639 ;; This function calls:
 30640 ;;		i2_delay_us
 30641 ;; This function is called by:
 30642 ;;		i2_Motor_Step
 30643 ;; This function uses a non-reentrant model
 30644 ;;
 30645                           
 30646                           	psect	text168
 30647  0160F6                     __ptext168:
 30648                           	opt stack 0
 30649  0160F6                     i2_MXK_SwitchTo:
 30650                           	opt stack 15
 30651                           
 30652                           ;incstack = 0
 30653                           ;i2MXK_SwitchTo@pModule stored from wreg
 30654  0160F6  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 30655                           
 30656                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 30657  0160F8  5086               	movf	3974,w,c	;volatile
 30658  0160FA  0B0F               	andlw	15
 30659  0160FC  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 30660                           
 30661                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 30662  0160FE  504B               	movf	_Bus_State,w,c
 30663  016100  A4D8               	btfss	status,2,c
 30664  016102  D002               	goto	i2l1730
 30665                           
 30666                           ;MXK.c: 110: return 0;
 30667  016104  0E00               	movlw	0
 30668  016106  0012               	return	
 30669  016108                     i2l1730:
 30670                           
 30671                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 30672  016108  0E00               	movlw	0
 30673  01610A  6E4B               	movwf	_Bus_State,c
 30674                           
 30675                           ;MXK.c: 114: if (CUR != pModule)
 30676  01610C  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30677  01610E  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 30678  016110  B4D8               	btfsc	status,2,c
 30679  016112  D00A               	goto	i2l1732
 30680                           
 30681                           ;MXK.c: 115: {
 30682                           ;MXK.c: 116: PORTG &= ~(0xF);
 30683  016114  0EF0               	movlw	240
 30684  016116  1686               	andwf	3974,f,c	;volatile
 30685                           
 30686                           ;MXK.c: 117: PORTG |= pModule;
 30687  016118  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 30688  01611A  1286               	iorwf	3974,f,c	;volatile
 30689                           
 30690                           ;MXK.c: 120: delay_us(10);
 30691  01611C  0E00               	movlw	0
 30692  01611E  6E02               	movwf	i2delay_us@us+1,c
 30693  016120  0E0A               	movlw	10
 30694  016122  6E01               	movwf	i2delay_us@us,c
 30695  016124  EC6C  F0AF         	call	i2_delay_us	;wreg free
 30696  016128                     i2l1732:
 30697                           
 30698                           ;MXK.c: 121: }
 30699                           ;MXK.c: 122: return 1;
 30700  016128  0E01               	movlw	1
 30701  01612A  0012               	return	
 30702  01612C                     __end_ofi2_MXK_SwitchTo:
 30703                           	opt stack 0
 30704                           tosu	equ	0xFFF
 30705                           tosh	equ	0xFFE
 30706                           tosl	equ	0xFFD
 30707                           pclatu	equ	0xFFB
 30708                           pclath	equ	0xFFA
 30709                           tblptru	equ	0xFF8
 30710                           tblptrh	equ	0xFF7
 30711                           tblptrl	equ	0xFF6
 30712                           tablat	equ	0xFF5
 30713                           prodh	equ	0xFF4
 30714                           prodl	equ	0xFF3
 30715                           intcon	equ	0xFF2
 30716                           indf0	equ	0xFEF
 30717                           postinc0	equ	0xFEE
 30718                           fsr0h	equ	0xFEA
 30719                           fsr0l	equ	0xFE9
 30720                           wreg	equ	0xFE8
 30721                           indf1	equ	0xFE7
 30722                           postdec1	equ	0xFE5
 30723                           fsr1h	equ	0xFE2
 30724                           fsr1l	equ	0xFE1
 30725                           indf2	equ	0xFDF
 30726                           postinc2	equ	0xFDE
 30727                           postdec2	equ	0xFDD
 30728                           plusw2	equ	0xFDB
 30729                           fsr2h	equ	0xFDA
 30730                           fsr2l	equ	0xFD9
 30731                           status	equ	0xFD8
 30732                           
 30733 ;; *************** function i2_delay_us *****************
 30734 ;; Defined at:
 30735 ;;		line 255 in file "Library/Types.c"
 30736 ;; Parameters:    Size  Location     Type
 30737 ;;  us              2    0[COMRAM] unsigned short 
 30738 ;; Auto vars:     Size  Location     Type
 30739 ;;  delay_us        4    2[COMRAM] unsigned long 
 30740 ;; Return value:  Size  Location     Type
 30741 ;;                  1    wreg      void 
 30742 ;; Registers used:
 30743 ;;		wreg, status,2, status,0
 30744 ;; Tracked objects:
 30745 ;;		On entry : 0/0
 30746 ;;		On exit  : 0/0
 30747 ;;		Unchanged: 0/0
 30748 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30749 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30750 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30751 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30752 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30753 ;;Total ram usage:        6 bytes
 30754 ;; Hardware stack levels used:    1
 30755 ;; This function calls:
 30756 ;;		Nothing
 30757 ;; This function is called by:
 30758 ;;		i2_MXK_SwitchTo
 30759 ;; This function uses a non-reentrant model
 30760 ;;
 30761                           
 30762                           	psect	text169
 30763  015ED8                     __ptext169:
 30764                           	opt stack 0
 30765  015ED8                     i2_delay_us:
 30766                           	opt stack 15
 30767                           
 30768                           ;Types.c: 256: unsigned long u;
 30769                           ;Types.c: 257: while (us--) {
 30770                           
 30771                           ;incstack = 0
 30772  015ED8  D016               	goto	i2u634_40
 30773  015EDA                     i2l9645:
 30774                           
 30775                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 30776  015EDA  0E00               	movlw	0
 30777  015EDC  6E03               	movwf	i2delay_us@u,c
 30778  015EDE  0E00               	movlw	0
 30779  015EE0  6E04               	movwf	i2delay_us@u+1,c
 30780  015EE2  0E00               	movlw	0
 30781  015EE4  6E05               	movwf	i2delay_us@u+2,c
 30782  015EE6  0E00               	movlw	0
 30783  015EE8  6E06               	movwf	i2delay_us@u+3,c
 30784  015EEA                     i2l9647:
 30785  015EEA  5003               	movf	i2delay_us@u,w,c
 30786  015EEC  1004               	iorwf	i2delay_us@u+1,w,c
 30787  015EEE  1005               	iorwf	i2delay_us@u+2,w,c
 30788  015EF0  1006               	iorwf	i2delay_us@u+3,w,c
 30789  015EF2  A4D8               	btfss	status,2,c
 30790  015EF4  D008               	goto	i2u634_40
 30791  015EF6  F000               	nop		; ;# 
 30792  015EF8  0E01               	movlw	1
 30793  015EFA  2603               	addwf	i2delay_us@u,f,c
 30794  015EFC  0E00               	movlw	0
 30795  015EFE  2204               	addwfc	i2delay_us@u+1,f,c
 30796  015F00  2205               	addwfc	i2delay_us@u+2,f,c
 30797  015F02  2206               	addwfc	i2delay_us@u+3,f,c
 30798  015F04  D7F2               	goto	i2l9647
 30799  015F06                     i2u634_40:
 30800  015F06  0601               	decf	i2delay_us@us,f,c
 30801  015F08  A0D8               	btfss	status,0,c
 30802  015F0A  0602               	decf	i2delay_us@us+1,f,c
 30803  015F0C  2801               	incf	i2delay_us@us,w,c
 30804  015F0E  E1E5               	bnz	i2l9645
 30805  015F10  2802               	incf	i2delay_us@us+1,w,c
 30806  015F12  B4D8               	btfsc	status,2,c
 30807  015F14  0012               	return	
 30808  015F16  D7E1               	goto	i2l832
 30809  015F18                     __end_ofi2_delay_us:
 30810                           	opt stack 0
 30811                           tosu	equ	0xFFF
 30812                           tosh	equ	0xFFE
 30813                           tosl	equ	0xFFD
 30814                           pclatu	equ	0xFFB
 30815                           pclath	equ	0xFFA
 30816                           tblptru	equ	0xFF8
 30817                           tblptrh	equ	0xFF7
 30818                           tblptrl	equ	0xFF6
 30819                           tablat	equ	0xFF5
 30820                           prodh	equ	0xFF4
 30821                           prodl	equ	0xFF3
 30822                           intcon	equ	0xFF2
 30823                           indf0	equ	0xFEF
 30824                           postinc0	equ	0xFEE
 30825                           fsr0h	equ	0xFEA
 30826                           fsr0l	equ	0xFE9
 30827                           wreg	equ	0xFE8
 30828                           indf1	equ	0xFE7
 30829                           postdec1	equ	0xFE5
 30830                           fsr1h	equ	0xFE2
 30831                           fsr1l	equ	0xFE1
 30832                           indf2	equ	0xFDF
 30833                           postinc2	equ	0xFDE
 30834                           postdec2	equ	0xFDD
 30835                           plusw2	equ	0xFDB
 30836                           fsr2h	equ	0xFDA
 30837                           fsr2l	equ	0xFD9
 30838                           status	equ	0xFD8
 30839                           
 30840 ;; *************** function i2_MXK_Release *****************
 30841 ;; Defined at:
 30842 ;;		line 130 in file "Library/MXK.c"
 30843 ;; Parameters:    Size  Location     Type
 30844 ;;		None
 30845 ;; Auto vars:     Size  Location     Type
 30846 ;;		None
 30847 ;; Return value:  Size  Location     Type
 30848 ;;                  1    wreg      unsigned char 
 30849 ;; Registers used:
 30850 ;;		wreg, status,2, status,0
 30851 ;; Tracked objects:
 30852 ;;		On entry : 0/0
 30853 ;;		On exit  : 0/0
 30854 ;;		Unchanged: 0/0
 30855 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30856 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30857 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30858 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30859 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30860 ;;Total ram usage:        0 bytes
 30861 ;; Hardware stack levels used:    1
 30862 ;; This function calls:
 30863 ;;		Nothing
 30864 ;; This function is called by:
 30865 ;;		i2_Motor_Step
 30866 ;; This function uses a non-reentrant model
 30867 ;;
 30868                           
 30869                           	psect	text170
 30870  016718                     __ptext170:
 30871                           	opt stack 0
 30872  016718                     i2_MXK_Release:
 30873                           	opt stack 16
 30874                           
 30875                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 30876                           
 30877                           ;incstack = 0
 30878  016718  0E01               	movlw	1
 30879  01671A  6E4B               	movwf	_Bus_State,c
 30880                           
 30881                           ;MXK.c: 135: return 1;
 30882                           ;	Return value of i2_MXK_Release is never used
 30883  01671C  0012               	return	
 30884  01671E                     __end_ofi2_MXK_Release:
 30885                           	opt stack 0
 30886                           tosu	equ	0xFFF
 30887                           tosh	equ	0xFFE
 30888                           tosl	equ	0xFFD
 30889                           pclatu	equ	0xFFB
 30890                           pclath	equ	0xFFA
 30891                           tblptru	equ	0xFF8
 30892                           tblptrh	equ	0xFF7
 30893                           tblptrl	equ	0xFF6
 30894                           tablat	equ	0xFF5
 30895                           prodh	equ	0xFF4
 30896                           prodl	equ	0xFF3
 30897                           intcon	equ	0xFF2
 30898                           indf0	equ	0xFEF
 30899                           postinc0	equ	0xFEE
 30900                           fsr0h	equ	0xFEA
 30901                           fsr0l	equ	0xFE9
 30902                           wreg	equ	0xFE8
 30903                           indf1	equ	0xFE7
 30904                           postdec1	equ	0xFE5
 30905                           fsr1h	equ	0xFE2
 30906                           fsr1l	equ	0xFE1
 30907                           indf2	equ	0xFDF
 30908                           postinc2	equ	0xFDE
 30909                           postdec2	equ	0xFDD
 30910                           plusw2	equ	0xFDB
 30911                           fsr2h	equ	0xFDA
 30912                           fsr2l	equ	0xFD9
 30913                           status	equ	0xFD8
 30914                           
 30915 ;; *************** function i2_MXK_Queue *****************
 30916 ;; Defined at:
 30917 ;;		line 144 in file "Library/MXK.c"
 30918 ;; Parameters:    Size  Location     Type
 30919 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 30920 ;;		 -> Absolute function(1), Motor_Step(1), 
 30921 ;; Auto vars:     Size  Location     Type
 30922 ;;		None
 30923 ;; Return value:  Size  Location     Type
 30924 ;;                  1    wreg      void 
 30925 ;; Registers used:
 30926 ;;		wreg, status,2, status,0
 30927 ;; Tracked objects:
 30928 ;;		On entry : 0/0
 30929 ;;		On exit  : 0/0
 30930 ;;		Unchanged: 0/0
 30931 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 30932 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30933 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30934 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30935 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 30936 ;;Total ram usage:        3 bytes
 30937 ;; Hardware stack levels used:    1
 30938 ;; This function calls:
 30939 ;;		Nothing
 30940 ;; This function is called by:
 30941 ;;		i2_Motor_Step
 30942 ;; This function uses a non-reentrant model
 30943 ;;
 30944                           
 30945                           	psect	text171
 30946  01667E                     __ptext171:
 30947                           	opt stack 0
 30948  01667E                     i2_MXK_Queue:
 30949                           	opt stack 16
 30950                           
 30951                           ;MXK.c: 146: lQueue = pCallback;
 30952                           
 30953                           ;incstack = 0
 30954  01667E  C001  F063         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 30955  016682  C002  F064         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 30956  016686  C003  F065         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 30957  01668A  0012               	return		;funcret
 30958  01668C                     __end_ofi2_MXK_Queue:
 30959                           	opt stack 0
 30960                           tosu	equ	0xFFF
 30961                           tosh	equ	0xFFE
 30962                           tosl	equ	0xFFD
 30963                           pclatu	equ	0xFFB
 30964                           pclath	equ	0xFFA
 30965                           tblptru	equ	0xFF8
 30966                           tblptrh	equ	0xFF7
 30967                           tblptrl	equ	0xFF6
 30968                           tablat	equ	0xFF5
 30969                           prodh	equ	0xFF4
 30970                           prodl	equ	0xFF3
 30971                           intcon	equ	0xFF2
 30972                           indf0	equ	0xFEF
 30973                           postinc0	equ	0xFEE
 30974                           fsr0h	equ	0xFEA
 30975                           fsr0l	equ	0xFE9
 30976                           wreg	equ	0xFE8
 30977                           indf1	equ	0xFE7
 30978                           postdec1	equ	0xFE5
 30979                           fsr1h	equ	0xFE2
 30980                           fsr1l	equ	0xFE1
 30981                           indf2	equ	0xFDF
 30982                           postinc2	equ	0xFDE
 30983                           postdec2	equ	0xFDD
 30984                           plusw2	equ	0xFDB
 30985                           fsr2h	equ	0xFDA
 30986                           fsr2l	equ	0xFD9
 30987                           status	equ	0xFD8
 30988                           tosu	equ	0xFFF
 30989                           tosh	equ	0xFFE
 30990                           tosl	equ	0xFFD
 30991                           pclatu	equ	0xFFB
 30992                           pclath	equ	0xFFA
 30993                           tblptru	equ	0xFF8
 30994                           tblptrh	equ	0xFF7
 30995                           tblptrl	equ	0xFF6
 30996                           tablat	equ	0xFF5
 30997                           prodh	equ	0xFF4
 30998                           prodl	equ	0xFF3
 30999                           intcon	equ	0xFF2
 31000                           indf0	equ	0xFEF
 31001                           postinc0	equ	0xFEE
 31002                           fsr0h	equ	0xFEA
 31003                           fsr0l	equ	0xFE9
 31004                           wreg	equ	0xFE8
 31005                           indf1	equ	0xFE7
 31006                           postdec1	equ	0xFE5
 31007                           fsr1h	equ	0xFE2
 31008                           fsr1l	equ	0xFE1
 31009                           indf2	equ	0xFDF
 31010                           postinc2	equ	0xFDE
 31011                           postdec2	equ	0xFDD
 31012                           plusw2	equ	0xFDB
 31013                           fsr2h	equ	0xFDA
 31014                           fsr2l	equ	0xFD9
 31015                           status	equ	0xFD8
 31016                           
 31017                           	psect	text172
 31018  000000                     __ptext172:
 31019                           	opt stack 0
 31020                           tosu	equ	0xFFF
 31021                           tosh	equ	0xFFE
 31022                           tosl	equ	0xFFD
 31023                           pclatu	equ	0xFFB
 31024                           pclath	equ	0xFFA
 31025                           tblptru	equ	0xFF8
 31026                           tblptrh	equ	0xFF7
 31027                           tblptrl	equ	0xFF6
 31028                           tablat	equ	0xFF5
 31029                           prodh	equ	0xFF4
 31030                           prodl	equ	0xFF3
 31031                           intcon	equ	0xFF2
 31032                           indf0	equ	0xFEF
 31033                           postinc0	equ	0xFEE
 31034                           fsr0h	equ	0xFEA
 31035                           fsr0l	equ	0xFE9
 31036                           wreg	equ	0xFE8
 31037                           indf1	equ	0xFE7
 31038                           postdec1	equ	0xFE5
 31039                           fsr1h	equ	0xFE2
 31040                           fsr1l	equ	0xFE1
 31041                           indf2	equ	0xFDF
 31042                           postinc2	equ	0xFDE
 31043                           postdec2	equ	0xFDD
 31044                           plusw2	equ	0xFDB
 31045                           fsr2h	equ	0xFDA
 31046                           fsr2l	equ	0xFD9
 31047                           status	equ	0xFD8
 31048                           
 31049                           	psect	rparam
 31050  0000                     tosu	equ	0xFFF
 31051                           tosh	equ	0xFFE
 31052                           tosl	equ	0xFFD
 31053                           pclatu	equ	0xFFB
 31054                           pclath	equ	0xFFA
 31055                           tblptru	equ	0xFF8
 31056                           tblptrh	equ	0xFF7
 31057                           tblptrl	equ	0xFF6
 31058                           tablat	equ	0xFF5
 31059                           prodh	equ	0xFF4
 31060                           prodl	equ	0xFF3
 31061                           intcon	equ	0xFF2
 31062                           indf0	equ	0xFEF
 31063                           postinc0	equ	0xFEE
 31064                           fsr0h	equ	0xFEA
 31065                           fsr0l	equ	0xFE9
 31066                           wreg	equ	0xFE8
 31067                           indf1	equ	0xFE7
 31068                           postdec1	equ	0xFE5
 31069                           fsr1h	equ	0xFE2
 31070                           fsr1l	equ	0xFE1
 31071                           indf2	equ	0xFDF
 31072                           postinc2	equ	0xFDE
 31073                           postdec2	equ	0xFDD
 31074                           plusw2	equ	0xFDB
 31075                           fsr2h	equ	0xFDA
 31076                           fsr2l	equ	0xFD9
 31077                           status	equ	0xFD8
 31078                           
 31079                           	psect	temp
 31080  000051                     btemp:
 31081                           	opt stack 0
 31082  000051                     	ds	1
 31083  0000                     int$flags	set	btemp
 31084  0000                     wtemp6	set	btemp+1
 31085                           tosu	equ	0xFFF
 31086                           tosh	equ	0xFFE
 31087                           tosl	equ	0xFFD
 31088                           pclatu	equ	0xFFB
 31089                           pclath	equ	0xFFA
 31090                           tblptru	equ	0xFF8
 31091                           tblptrh	equ	0xFF7
 31092                           tblptrl	equ	0xFF6
 31093                           tablat	equ	0xFF5
 31094                           prodh	equ	0xFF4
 31095                           prodl	equ	0xFF3
 31096                           intcon	equ	0xFF2
 31097                           indf0	equ	0xFEF
 31098                           postinc0	equ	0xFEE
 31099                           fsr0h	equ	0xFEA
 31100                           fsr0l	equ	0xFE9
 31101                           wreg	equ	0xFE8
 31102                           indf1	equ	0xFE7
 31103                           postdec1	equ	0xFE5
 31104                           fsr1h	equ	0xFE2
 31105                           fsr1l	equ	0xFE1
 31106                           indf2	equ	0xFDF
 31107                           postinc2	equ	0xFDE
 31108                           postdec2	equ	0xFDD
 31109                           plusw2	equ	0xFDB
 31110                           fsr2h	equ	0xFDA
 31111                           fsr2l	equ	0xFD9
 31112                           status	equ	0xFD8


Data Sizes:
    Strings     241
    Constant    730
    Data        29
    BSS         824
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     63     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256     10     256
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 76
		 -> STR_16(CODE[21]), STR_15(CODE[21]), STR_14(CODE[21]), STR_13(CODE[21]), 
		 -> STR_12(CODE[21]), STR_11(CODE[3]), STR_10(CODE[76]), STR_9(CODE[3]), 
		 -> STR_8(CODE[14]), STR_7(CODE[3]), STR_6(CODE[46]), STR_5(CODE[3]), 
		 -> STR_4(CODE[46]), STR_3(CODE[3]), STR_2(CODE[60]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    Timer0_Start@pFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Motor_Speed@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    Motor_Move@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    lMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    Motor_Init@pMotor	PTR struct Motor size(2) Largest target is 6
		 -> Stepper(BANK0[6]), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Voltage@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN0(BANK0[5]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 
		 -> NULL(NULL[0]), 

    ADC_Init@pInput	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK0[5]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _findClosestWall->___fltol
    _move_and_rotate->_irobot_rotate
    _mode2->_Console_Render
    _irobot_move_straight->_irobot_move
    _mode1->___fltol
    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _irobot_stop_motion->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_song_play->_eusart_putch
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    ___fltol->_ADC_Voltage
    _Motor_Speed->_Timer0_Init
    _Motor_Move->_Timer0_Start
    _HMI_Render->_OutSeg
    _OutSeg->_SPI_Send
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Console_MakeField->_Byte_GetBit
    _ADC_Voltage->___flmul
    ___flmul->___xxtofl
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _Motor_Init->_Port_SetPinType
    _Timer0_Init->___lldiv
    _MXK_Init->_Port_SetType
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Byte_SetQuad->_Byte_SetZone
    _ADC_Start->_ADC_SetChannel
    _ADC_Init->_ADC_SetupIO
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    _main->_mode1
    _mode4->_findClosestWall

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0 2031333
                                              8 BANK3      2     2      0
                     _Console_Render
                           _HMI_Poll
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                            _getMode
                               _init
                              _mode1
                              _mode2
                              _mode3
                              _mode4
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode4                                                0     0      0  292945
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                           _delay_ms
                    _findClosestWall
               _irobot_move_straight
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                           _safeToGo
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _findClosestWall                                     10    10      0  113689
                                              0 BANK3      6     6      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___flmul
                            ___fltol
                           ___xxtofl
                      _irobot_rotate
                             _printf
 ---------------------------------------------------------------------------------
 (1) _mode3                                                0     0      0  113313
                    _move_and_rotate
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _move_and_rotate                                      0     0      0   19669
                           _delay_ms
               _irobot_move_straight
                      _irobot_rotate
                 _irobot_stop_motion
                    _update_distance
 ---------------------------------------------------------------------------------
 (3) _irobot_rotate                                       10     6      4    9290
                                             29 BANK0     10     6      4
                        _irobot_move
                 _irobot_stop_motion
                       _update_angle
 ---------------------------------------------------------------------------------
 (1) _mode2                                                2     2      0  175853
                                             44 BANK0      2     2      0
                     _Console_Render
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
               _irobot_move_straight
                 _irobot_stop_motion
                             _printf
                           _safeToGo
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _irobot_move_straight                                 2     0      2    3662
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _mode1                                               16    16      0  194792
                                              0 BANK3      8     8      0
                          _ADC_Start
                        _ADC_Voltage
                     _Console_Render
                         _HMI_Render
                      _HMI_SetNumber
                        _MXK_Dequeue
                        _MXK_Release
                       _MXK_SwitchTo
                         _Motor_Move
                        _Motor_Speed
                            ___fldiv
                            ___fltol
                             _printf
                           _safeToGo
 ---------------------------------------------------------------------------------
 (2) _safeToGo                                             0     0      0   93644
                           _HMI_Poll
                   _irobot_song_play
                 _irobot_stop_motion
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (2) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (3) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (4) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (5) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (4) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (5) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _printf                                              29    17     12    6795
                                             21 BANK0     20     8     12
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) ___fltol                                             10     6      4    1249
                                             57 BANK0      6     2      4
                                              0 BANK1      4     4      0
                        _ADC_Voltage (ARG)
                            ___fldiv (ARG)
                            ___flmul (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) _Motor_Speed                                          4     0      4    4447
                                             27 BANK0      4     0      4
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (3) _Motor_Move                                           6     2      4    1523
                                              3 BANK0      6     2      4
                       _Timer0_Start
 ---------------------------------------------------------------------------------
 (4) _Timer0_Start                                         3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _HMI_Render                                           2     2      0    1593
                                              8 BANK0      2     2      0
                             _OutSeg
 ---------------------------------------------------------------------------------
 (4) _OutSeg                                               5     4      1    1463
                                              3 BANK0      5     4      1
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (3) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (4) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (4) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (5) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (4) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (5) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (3) _ADC_Voltage                                         18    14      4    8425
                                             39 BANK0     18    14      4
                            ___fldiv
                            ___flmul
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (3) ___xxtofl                                            14    10      4     696
                                              0 BANK0     14    10      4
 ---------------------------------------------------------------------------------
 (3) ___flmul                                             25    17      8    3065
                                             14 BANK0     25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fldiv                                             25    17      8    3703
                                              0 BANK0     25    17      8
 ---------------------------------------------------------------------------------
 (1) _init                                                 0     0      0  999008
                           _ADC_Init
                          _ADC_Start
                       _Console_Init
                           _HMI_Init
                         _ISR_Enable
                           _LCD_Init
                  _MXK_BlockSwitchTo
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                         _Motor_Init
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
 ---------------------------------------------------------------------------------
 (2) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (3) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (5) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (2) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (2) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (4) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Motor_Init                                           4     0      4   88478
                                             45 BANK0      4     0      4
                        _Port_SetPin
                    _Port_SetPinType
                        _Timer0_Init
 ---------------------------------------------------------------------------------
 (4) _Timer0_Init                                         14    10      4    3138
                                             13 BANK0     14    10      4
                       _Timer0_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) _Timer0_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_Init                                             0     0      0  362768
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Port_Init                                            6     3      3  111429
                                              1 BANK1      6     3      3
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (3) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      5     2      3
                                              0 BANK1      1     1      0
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (4) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (4) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (4) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (3) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (4) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (5) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (3) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (4) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (2) _LCD_Init                                             4     4      0  291732
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (3) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (5) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (5) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (6) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (5) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (7) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _Configure_GPIOs                                      0     0      0  262269
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (4) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _LCD_Reset                                            0     0      0   94893
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _delay_ms                                             6     4      2    1774
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (5) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (5) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _ISR_Enable                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (4) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (5) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (6) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (5) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (4) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (4) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (5) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (6) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (4) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (6) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (4) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Start                                            4     2      2    1222
                                              2 BANK0      4     2      2
                            _ADC_Off
                             _ADC_On
                     _ADC_SetChannel
 ---------------------------------------------------------------------------------
 (2) _ADC_Init                                             3     0      3    2172
                                              4 BANK0      3     0      3
                      _ADC_Calibrate
                  _ADC_ClockDivision
                 _ADC_ConversionTime
                     _ADC_SetChannel
                        _ADC_SetupIO
 ---------------------------------------------------------------------------------
 (3) _ADC_SetupIO                                          4     4      0      65
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _ADC_SetChannel                                       2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ConversionTime                                   2     2      0     136
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _ADC_ClockDivision                                    3     3      0     172
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (3) _ADC_Calibrate                                        0     0      0       0
                            _ADC_Off
                             _ADC_On
 ---------------------------------------------------------------------------------
 (4) _ADC_On                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _ADC_Off                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _getMode                                              0     0      0   96823
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (3) _HMI_Poll                                             0     0      0   85165
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (4) _Button_Poll                                          9     6      3   85165
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (5) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (5) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (5) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (6) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (5) _Event_TestButton                                     1     1      0   37797
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _HMI_SetNumber                                        2     0      2    4702
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (7) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (8) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (7) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (8) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (5) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (5) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (6) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (7) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (8) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (9) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (10) _Byte_GetPair                                        3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (11) _Byte_GetZone                                        9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (9) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (6) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (6) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (6) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 14
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (12) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (13) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (18) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (16) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (15) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (16) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (15) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (14) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 18
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_Poll
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _MXK_Dequeue
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Release
   _MXK_SwitchTo
     _delay_us
   _getMode
     _HMI_DIPSwitch *
       _Port_GetQuad
     _HMI_DownSwitch *
       _Port_GetPin
     _HMI_LeftSwitch *
       _Port_GetPin
     _HMI_Poll *
       _Button_Poll
         _Event_DIPSwitch *
           _HMI_GetBar
           _HMI_SetBar
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Event_NULL *
         _Event_TestButton *
           _HMI_SetButton
           _HMI_SetNumber
             _HMI_SetSegments
               _ToSegment
             _itos
               ___lwdiv
               ___lwmod
                 ___lwdiv (ARG)
               _reverse
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _HMI_DIPSwitch *
           _Port_GetQuad
         _HMI_DownSwitch *
           _Port_GetPin
         _HMI_LeftSwitch *
           _Port_GetPin
         _HMI_RightSwitch *
           _Port_GetPin
         _HMI_UpSwitch *
           _Port_GetPin
         _MXK_DIPSwitch *
           _Port_GetQuad
         _MXK_TestButton *
           _Port_GetPin
     _HMI_RightSwitch *
       _Port_GetPin
     _HMI_UpSwitch *
       _Port_GetPin
     _MXK_DIPSwitch *
       _Port_GetQuad
     _MXK_TestButton *
       _Port_GetPin
   _init
     _ADC_Init
       _ADC_Calibrate
         _ADC_Off
         _ADC_On
       _ADC_ClockDivision
       _ADC_ConversionTime
       _ADC_SetChannel
       _ADC_SetupIO
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _Console_Init
     _HMI_Init
       _Button_Init
         _HMI_InitButtons *
         _MXK_InitDIPSwitch *
           _Port_SetQuadType
             _Byte_SetQuad
               _Byte_SetZone
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
         _MXK_InitTestButton *
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MinSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _ISR_Enable
     _LCD_Init
       _Configure_GPIOs
         _LCD_Reset
           _LED_Toggle
             _Port_TogglePin
               _Port_GetPin
               _Port_SetPin
                 _Byte_SetBit
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Reset_High
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _Reset_Low
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
           _delay_ms
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_Init
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
           _Port_SetPinType
             _Byte_SetBit
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
             _Word_SetPair
               _Byte_SetPair
                 _Byte_SetZone
           _SPI_DCS
           _SPI_DisableISR
           _Timer2_Init
             _Timer2_Clear
             ___lldiv
         _SPI_MaxSpeed
           _Byte_SetBit
           _Byte_SetQuad
             _Byte_SetZone
       _LCD_Fill
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
       _LCD_Write
         _Mode_Set
         _SPI_Send
       _Set_Rotation
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _delay_ms
     _MXK_BlockSwitchTo
       _delay_us
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Init
       _LED_Init
         _LED_Set
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _Port_Init
         _GetPortPORT
         _GetPortProperties
         _GetPortTRIS
         _Port_Set
           _Byte_SetByte
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Port_SetType
           _Port_CheckPortType
             _Port_CheckQuadType
               _Port_CheckPairType
                 _PortProperty_Valid
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetQuadType
         _Byte_SetQuad
           _Byte_SetZone
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _delay_ms
     _MXK_Release
     _Motor_Init
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     _delay_ms
     _eusart_init
     _irobot_init
       _eusart_putch
     _irobot_init_song_0
       _eusart_putch
     _irobot_led_power_on
       _irobot_leds
         _eusart_putch
         _load_iRScriptStack
   _mode1
     _ADC_Start
       _ADC_Off
       _ADC_On
       _ADC_SetChannel
     _ADC_Voltage
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___xxtofl
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _HMI_Render
       _OutSeg
         _SPI_Send
     _HMI_SetNumber
       _HMI_SetSegments
         _ToSegment
       _itos
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _reverse
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _Motor_Move
       _Timer0_Start
     _Motor_Speed
       _Timer0_Init
         _Timer0_Clear
         ___lldiv
     ___fldiv
     ___fltol
       _ADC_Voltage (ARG)
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       ___fldiv (ARG)
       ___flmul (ARG)
         ___xxtofl (ARG)
       ___xxtofl (ARG)
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode2
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _mode3
     _move_and_rotate
       _delay_ms
       _irobot_move_straight
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
   _mode4
     _Console_Render
       _Console_MakeField
         _Byte_GetBit
       _LCD_DrawField
         _Console_MakeField (ARG)
           _Byte_GetBit
         _LCD_Word_Write (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window (ARG)
           _LCD_Write
             _Mode_Set
             _SPI_Send
         ___wmul (ARG)
       _LCD_FillRectangle
         _LCD_Word_Write
           _LCD_Write
             _Mode_Set
             _SPI_Send
         _Set_Addr_Window
           _LCD_Write
             _Mode_Set
             _SPI_Send
     _MXK_Dequeue
       Absolute function(Fake) *
       _Motor_Step *
         _MXK_Queue
         _MXK_Release
         _MXK_SwitchTo
           _delay_us
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Timer0_Restart
         _Timer0_Stop
     _MXK_Release
     _MXK_SwitchTo
       _delay_us
     _delay_ms
     _findClosestWall
       _ADC_Start
         _ADC_Off
         _ADC_On
         _ADC_SetChannel
       _ADC_Voltage
         ___fldiv
         ___flmul
           ___xxtofl (ARG)
         ___xxtofl
       _Console_Render
         _Console_MakeField
           _Byte_GetBit
         _LCD_DrawField
           _Console_MakeField (ARG)
             _Byte_GetBit
           _LCD_Word_Write (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window (ARG)
             _LCD_Write
               _Mode_Set
               _SPI_Send
           ___wmul (ARG)
         _LCD_FillRectangle
           _LCD_Word_Write
             _LCD_Write
               _Mode_Set
               _SPI_Send
           _Set_Addr_Window
             _LCD_Write
               _Mode_Set
               _SPI_Send
       _HMI_Render
         _OutSeg
           _SPI_Send
       _HMI_SetNumber
         _HMI_SetSegments
           _ToSegment
         _itos
           ___lwdiv
           ___lwmod
             ___lwdiv (ARG)
           _reverse
       _MXK_Dequeue
         Absolute function(Fake) *
         _Motor_Step *
           _MXK_Queue
           _MXK_Release
           _MXK_SwitchTo
             _delay_us
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Timer0_Restart
           _Timer0_Stop
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Motor_Move
         _Timer0_Start
       _Motor_Speed
         _Timer0_Init
           _Timer0_Clear
           ___lldiv
       ___fldiv
       ___flmul
         ___xxtofl (ARG)
       ___fltol
         _ADC_Voltage (ARG)
           ___fldiv
           ___flmul
             ___xxtofl (ARG)
           ___xxtofl
         ___fldiv (ARG)
         ___flmul (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _irobot_rotate
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
         _irobot_stop_motion
           _irobot_move
             _eusart_putch
             _load_iRScriptStack
             _twos_complement_of
         _update_angle
           _irobot_query_and_update
             _eusart_getch
             _eusart_putch
             _get_packet_size
             _rx_assign
               _sort_iRBumpDrop
       _printf
         ___lwdiv
         ___lwmod
           ___lwdiv (ARG)
         _putch
           _Console_PrintChar
             _Console_Backspace
               _Console_ClearCursor
             _Console_FormFeed
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             _Console_NewLine
             _Console_ResetCursor
             _Console_Tab
               _Console_ClearCursor
               _Console_IncrementCursor
                 _Console_FormFeed
                 _Console_NewLine
               ___awdiv
     _irobot_move_straight
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _irobot_song_play
       _eusart_putch
     _irobot_stop_motion
       _irobot_move
         _eusart_putch
         _load_iRScriptStack
         _twos_complement_of
     _printf
       ___lwdiv
       ___lwmod
         ___lwdiv (ARG)
       _putch
         _Console_PrintChar
           _Console_Backspace
             _Console_ClearCursor
           _Console_FormFeed
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           _Console_NewLine
           _Console_ResetCursor
           _Console_Tab
             _Console_ClearCursor
             _Console_IncrementCursor
               _Console_FormFeed
               _Console_NewLine
             ___awdiv
     _safeToGo
       _HMI_Poll
         _Button_Poll
           _Event_DIPSwitch *
             _HMI_GetBar
             _HMI_SetBar
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _Event_NULL *
           _Event_TestButton *
             _HMI_SetButton
             _HMI_SetNumber
               _HMI_SetSegments
                 _ToSegment
               _itos
                 ___lwdiv
                 ___lwmod
                   ___lwdiv (ARG)
                 _reverse
             _LED_Toggle
               _Port_TogglePin
                 _Port_GetPin
                 _Port_SetPin
                   _Byte_SetBit
                   _Word_GetPair
                     _Byte_GetPair
                       _Byte_GetZone
           _HMI_DIPSwitch *
             _Port_GetQuad
           _HMI_DownSwitch *
             _Port_GetPin
           _HMI_LeftSwitch *
             _Port_GetPin
           _HMI_RightSwitch *
             _Port_GetPin
           _HMI_UpSwitch *
             _Port_GetPin
           _MXK_DIPSwitch *
             _Port_GetQuad
           _MXK_TestButton *
             _Port_GetPin
       _irobot_song_play
         _eusart_putch
       _irobot_stop_motion
         _irobot_move
           _eusart_putch
           _load_iRScriptStack
           _twos_complement_of
       _update_angle
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_bump_and_cliff
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
       _update_distance
         _irobot_query_and_update
           _eusart_getch
           _eusart_putch
           _get_packet_size
           _rx_assign
             _sort_iRBumpDrop
     _update_bump_and_cliff
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
     _update_distance
       _irobot_query_and_update
         _eusart_getch
         _eusart_putch
         _get_packet_size
         _rx_assign
           _sort_iRBumpDrop
   _printf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      A     100      11      100.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     3F      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     49A      12        0.0%
DATA                 0      0     5C6       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Sat Sep 16 19:08:39 2017

                                 _update_angle 6614                                  i2_Timer0_Stop 6712  
                             SPI_Init@pChannel 00EB                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 373E                                              _A 004C  
                        __end_of_irobot_rotate 4656                                              l8 3DCC  
                                 ___fldiv@aexp 00D2                                   ___fldiv@bexp 00D1  
                                            _a 004D                                              _i 003A  
                                            _j 0039                                              _l 004F  
                                            _u 0038                                              _w 0050  
                          _irobot_led_power_on 6496                                   ___fldiv@sign 00C6  
                                           l11 3058                                             l12 3042  
                                           l90 2F8E                                             l85 2E8A  
                                           l87 2EF8                                             l89 2F64  
                                 ___awdiv@sign 00BF                             __size_of_ADC_Start 0084  
                          ___wmul@multiplicand 00BC                                  _HMI_DIPSwitch 6534  
                           LCD_DrawField@pSize 00D2                             LCD_DrawField@count 00D8  
                   __end_of_irobot_stop_motion 5D86                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 66B0                           ADC_ClockDivision@reg 00BB  
                                          l120 4C5C                                            l121 4C72  
                                          l122 4C88                                            l220 58AE  
                                          l117 4C9E                                            l221 5872  
                                          l118 4C46                                            l230 5B0A  
                                          l222 58BE                                            l223 5890  
                                  ?_LED_Toggle 0001                                            l234 5D2E  
                                          l235 5CFE                                            l227 5B26  
                                          l403 2B18                                            l412 27F4  
                                          l228 5AEE                                            l340 490A  
                                          l404 2AB8                                            l237 5D16  
                                          l421 2788                                            l413 268A  
                                          l341 4918                                            l405 2B48  
                                ??_Console_Tab 00C2                                            l430 3F40  
                                          l414 2810                                            l350 4A12  
                                          l342 4926                                            l510 1CB6  
                                          l406 2AD0                                            l415 26B0  
                                          l351 49A2                                            l343 4934  
                                          l511 1DC6                                            l407 2AE8  
                                          l183 4AC6                                            l432 3F6A  
                                          l600 04B2                                            l344 4942  
                                          l512 1CD8                                            l408 2B00  
                                          l184 4AA0                                            l433 3F9A  
                                          l417 271C                                            l601 0646  
                                          l353 49B0                                            l337 496C  
                                          l345 4950                                            l610 06CE  
                                          l602 04E4                                            l354 49BE  
                                          l346 495E                                            l338 48FC  
                                          l370 489C                                            l427 3FC4  
                                          l611 071C                                            l603 0658  
                                          l355 49CC                                            l363 48C6  
                                          l371 48AA                                            l531 1770  
                                  ?_HMI_GetBar 0001                                            l612 076A  
                                          l604 0592                                            l356 49DA  
                                          l372 48B8                                            l364 4856  
                                          l532 1794                                            l516 1D20  
                                          l357 49E8                                            l509 1DAA  
                                          l614 084C                                            l358 49F6  
                                          l366 4864                                            l526 17B4  
                                          l615 0844                                            l607 07B8  
                                          l359 4A04                                            l367 4872  
                                          l519 1D68                                            l616 085E  
                                          l608 0680                                            l368 4880  
                                          l528 17D2                                            l393 59E0  
                                          l617 0848                                            l609 07D6  
                                          l369 488E                                            l529 1750  
                                          l483 1B16                                            l732 4BE0  
                                          l900 188E                                            l476 1BEE  
                                          l733 4BD4                                            l901 1892  
                                          l389 5736                                            l477 1A60  
                                          l397 5CAA                                            l910 18B6  
                                          l902 1896                                            l726 43CA  
                                          l478 1C0A                                            l486 1B82  
                                          l654 62DC                                            l911 18BA  
                                          l903 189A                                            l727 43BE  
                                          l479 1AAA                                            l655 62D4  
                                          l912 18BE                                            l904 189E  
                                          l824 566A                                            l832 5A98  
                                          l913 18C2                                            l905 18A2  
                                          l921 55E0                                            l673 61B4  
                                          l657 62D8                                            l681 5538  
                                          l914 18C6                                            l906 18A6  
                                          l922 55AC                                            l930 3C0A  
                                          l915 18CA                                            l907 18AA  
                                          l819 517A                                            l916 18CE  
                                          l908 18AE                                            l860 17EE  
                                          l684 554E                                            l781 5FFE  
                                          l853 18D6                                            l917 18D2  
                                          l909 18B2                                            l861 17F2  
                                          l597 04C0                                            l870 1816  
                                          l862 17F6                                            l854 17DA  
                                          l598 04A8                                            l678 5574  
                                          l686 555E                                            l871 181A  
                                          l863 17FA                                            l599 04D0  
                                          l679 5528                                            l880 183E  
                                          l872 181E                                            l864 17FE  
                                          l856 17DE                                            l928 3C8A  
                                          l776 5DB6                                            l881 1842  
                                          l873 1822                                            l865 1802  
                                          l857 17E2                                            l929 3C5A  
                                          l890 1866                                            l882 1846  
                                          l874 1826                                            l866 1806  
                                          l858 17E6                                            l891 186A  
                                          l883 184A                                            l875 182A  
                                          l867 180A                                            l859 17EA  
                                          l892 186E                                            l884 184E  
                                          l876 182E                                            l868 180E  
                                          l893 1872                                            l885 1852  
                                          l877 1832                                            l869 1812  
                                          l894 1876                                            l886 1856  
                                          l878 1836                                            l990 4D68  
                                          l895 187A                                            l887 185A  
                                          l879 183A                                            l983 4B64  
                                          l896 187E                                            l888 185E  
                                          l976 4E82                                            l992 4D78  
                                          l984 4AE8                                            l897 1882  
                                          l889 1862                                            l985 4B60  
                                          l898 1886                                            l978 4E92  
                                          l899 188A                                            l997 5946  
                                          l999 596A                                            _PR2 000FCB  
                                          _dip 033E                                            _val 007D  
                              __end_of_ADC_Off 66F2                                    ?_HMI_SetBar 0001  
                           ??_Event_TestButton 00D3                                   _Word_GetPair 5FD2  
                                          prod 000FF3                                    ?_HMI_Render 0001  
                          MXK_SwitchTo@pModule 00C1                     __end_of_ADC_ConversionTime 5CF8  
                                          tosl 000FFD                                            wreg 000FE8  
                           Console_MakeField@x 00CA                             Console_MakeField@y 00CB  
                                   _TXSTA1bits 000FAD                                _update_distance 6602  
                                 Console_Tab@c 00C9                                   Console_Tab@i 00C8  
                          LCD_DrawField@pField 00CC                                   Console_Tab@t 00C7  
                   __size_of_ADC_ClockDivision 008A                                   ___flmul@aexp 00D5  
                                 ___flmul@bexp 00DA                                     i2_delay_us 5ED8  
                         Port_Set@TypeRequired 00DC                                   ___flmul@sign 00D4  
                                 ___flmul@temp 00DF                                   ___flmul@prod 00DB  
                            Console_FormFeed@x 00BC                              Console_FormFeed@y 00BD  
                          LCD_DrawField@pPoint 00CE                                 ?_LCD_DrawField 00CC  
                        Port_SetPinType@Output 00E4                                Port_SetPin@Type 00CD  
                              Port_SetPin@pPin 00CB                           ?_irobot_led_power_on 0001  
                                ?_Byte_GetPair 00C3                                __end_of_LED_Set 5B38  
                      __size_ofi2_Word_GetPair 0030                                  i2_Port_SetPin 4700  
                                 ___fltol@exp1 00F8                                   _Word_SetPair 5D86  
                                         l1000 5986                                           l1010 4034  
                                         l1004 57D6                                  ?_Byte_GetZone 00BA  
                                         l1005 5804                                           l1200 42EA  
                                         l1040 283E                                           l1201 433E  
                                         l1009 4040                                           l1041 2844  
                                         l1202 435A                                           l1042 284A  
                                         l1043 2850                                           l1204 4384  
                                         l1300 4F14                                           l1036 299A  
                                         l1044 2856                                           l1205 436A  
                                         l1301 4F18                                           l1045 285C  
                                         l1037 2838                                           l2021 5766  
                                         l2101 2CDA                                           l1302 4F22  
                                         l1062 2072                                           l2110 5E4C  
                                         l2030 575E                                           l2022 5742  
                                         l2102 2C1E                                           l1207 4396  
                                         l1303 4F30                                           l1063 20A0  
                                         l1047 2902                                           l2031 5762  
                                         l2103 2C66                                           l3000 233C  
                                         l1056 1F02                                           l2112 5E38  
                                         l2024 5746                                           l2040 385A  
                                         l2104 2C24                                           l1313 5CD8  
                                         l1153 22E0                                           l3001 2364  
                                         l1057 20C8                                           l2025 574A  
                                         l2041 3860                                           l3010 2416  
                                         l1082 3EBA                                           l1058 1F0A  
                                         l1146 509C                                           l2114 5E40  
                                         l2026 574E                                           l2042 3866  
                                         l3003 237C                                           l1059 1F34  
                                         l2027 5752                                           l2035 38F2  
                                         l2051 38C6                                           l2043 386C  
                                         l3004 236C                                           l1084 3EC2  
                                         l2028 5756                                           l2044 3872  
                                         l2036 3844                                           l1077 3E8A  
                                         l2029 575A                                           l1254 65F6  
                                         l2118 5654                                           l3014 244C  
                                         l3006 23D8                                           l1158 5F54  
                                         l2070 4E42                                           l2062 4DFC  
                                         l2046 3886                                           l2038 384E  
                                         l2311 40DE                                           l2119 5616  
                                         l2303 47D6                                           l3015 249E  
                                         l3007 23BA                                           l1079 3E9A  
                                         l2039 3854                                           l2312 410A  
                                         l1280 4F96                                           l2144 5A1E  
                                         l2400 3A18                                           l2313 4136  
                                         l2305 4808                                           l3009 2426  
                                         l2049 38B2                                           l2321 5C18  
                                         l2161 462E                                           l2401 3AC4  
                                         l2074 4E60                                           l2066 4E1C  
                                         l2058 4DE2                                           l2162 461A  
                                         l2402 3A1E                                           l1283 4FF8  
                                         l2139 44D6                                           l1276 4F7E  
                                         l2156 45DA                                           l2340 0E78  
                                         l2332 0CE0                                           l2404 3A24  
                                         l2325 502C                                           l2405 3A2A  
                                         l1294 4F38                                           l1630 346C  
                                         l2430 253E                                           l2318 5BFC  
                                         l2158 45E0                                           l2326 5018  
                                         l2342 0EB0                                           l2334 0D82  
                                         l2406 3A30                                           l1295 4EFE  
                                         l1631 34C8                                           l2431 24DA  
                                         l2423 24BE                                           l2095 2BDA  
                                         l2159 4602                                           l2335 0E0E  
                                         l2407 3A36                                           l1296 4F62  
                                         l1632 34AC                                           l2440 25E6  
                                         l2432 24F2                                           l2424 24D2  
                                         l2168 5D6A                                           l2096 2B94  
                                         l2352 0926                                           l1297 4F08  
                                         l2441 2644                                           l2425 2502  
                                         l2433 24FC                                           l2361 0B38  
                                         l2345 0F94                                           l2337 0E58  
                                         l1298 4F0C                                           l1730 5E6C  
                                         l2442 25EC                                           l2434 2576  
                                         l2098 2C0A                                           l2370 0BE8  
                                         l2362 0A96                                           l2354 095A  
                                         l1299 4F10                                           l1627 3514  
                                         l2099 2BEE                                           l2347 101A  
                                         l2339 0F1A                                           l1724 5FA0  
                                         l1732 5E94                                           l1628 350A  
                                         l2620 41F6                                           l2436 2590  
                                         l2372 0C20                                           l2364 0ACE  
                                         l2356 09FA                                           l1629 348A  
                                         l2621 4204                                           l2613 4180  
                                         l2357 0A2A                                           l1726 5FCE  
                                         l2622 4218                                           l2614 4196  
                                         l1735 64CA                                           l2359 0A76  
                                         l2800 42BA                                           l2616 41C0  
                                         l2801 42CC                                           l2617 41B4  
                                         l2369 0C82                                           l2378 39E8  
                                         l2394 3624                                           l1827 330C  
                                         l2379 399E                                           l1828 332C  
                                         l2388 356E                                           l2389 3556  
                                         l1784 31A6                                           l1873 6044  
                                         l1785 31B4                                           l2850 5216  
                                         l1787 31BE                                           l2683 3706  
                                         l2675 3658                                           l2860 58E2  
                                         l2940 10D6                                           l2684 36F6  
                                         l2853 5258                                           l2941 1104  
                                         l2677 36DA                                           l2854 5266  
                                         l2950 1230                                           l2942 10FA  
                                         l2686 372C                                           l2678 36C6  
                                         l2863 5918                                           l2951 1284  
                                         l2864 5926                                           l2944 1158  
                                         l2936 1078                                           l2849 5222  
                                         l2961 132E                                           l2937 10A6  
                                         l2954 12D4                                           l2946 1186  
                                         l2938 109C                                           l2970 001E  
                                         l2859 58EE                                           l2963 137E  
                                         l2955 12AA                                           l2947 1288  
                                         l2971 0048                                           l2796 4260  
                                         l2964 13AC                                           l2956 12C0  
                                         l2948 1204                                           l2972 0042  
                                         l2797 4250                                           l2965 13E2  
                                         l2949 123C                                           l2973 005A  
                                         l2966 13F2                                           l2982 0364  
                                         l2974 0078                                           l2967 13F6  
                                         l2991 040E                                           l2983 033A  
                                         l2975 00A2                                           l2992 0434  
                                         l2984 0350                                           l2976 009C  
                                         l2977 00B4                                           l2994 0462  
                                         l2978 00DC                                           l2995 048C  
                                         l2996 0482                                           l2989 03BE  
                                         l2999 232C                                 ??_Console_Init 00BA  
                        Port_SetPinType@pInput 00E0                                           STR_1 FFFB  
                                         STR_2 FF59                                           STR_3 FFFB  
                                         STR_4 FF95                                           STR_5 FFFB  
                                         STR_6 FF95                                           STR_7 FFFB  
                                         STR_8 FFED                                           STR_9 FFFB  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 4A42                       __end_of_irobot_song_play 65EE  
                                         _PIR1 000F9E                                           _PIR2 000FA1  
                                         _PIR3 000FA4                                           u9110 41C6  
                          __end_of_GetPortTRIS 48F6                                           u9160 5C56  
                                         u9320 4266                                           u9234 4D18  
                                         u9235 4D12                                           u8700 5114  
                                         u9180 5AD0                                           u9165 5C50  
                                         u8640 4BAA                                           u8730 5E00  
                                         u9290 5E2C                                           u8660 4C10  
                                         u9460 3378                                           u9380 56A8  
                                         u8820 4DBC                                           u9445 32C4  
                                         u8830 4DC2                                           u8735 5DFA  
                                         u8647 4BA0                                           u9480 614E  
                                         u8665 4C0A                                           u8905 6634  
                                         u8850 5228                                           u9618 2FEC  
                                         u8754 4406                                           u8906 6636  
                                         u9619 3000                                           u8755 4400  
                                         _SPI1 037A                                           u8684 5824  
                                         u8764 4438                                           _SPI2 0385  
                                         u8685 581E                                           u8765 4432  
                                         u9805 1698                                           u9485 6148  
                                         u8694 5856                                           u8695 5850  
                                         u9815 16DA                                           u8880 58F4  
                                         u8960 3C76                                           u9920 50EA  
                                         u9825 171C                                           u9690 5354  
                                         u8970 57D2                                           u9755 1448  
                                         u9915 50AC                                           u9668 3128  
                                         u8980 57FC                                           u9765 1460  
                                         u9870 3F04                                           u9775 1478  
                                         u9960 3212                                           u9880 3F10  
                                         _TMR0 000FD6                                           u9785 149A  
                                         u9795 161A                                           u9990 344A  
               irobot_query_and_update@RXArray 0100                              rx_assign@packetID 00BF  
                                         _gISR 0060                             Event_DIPSwitch@Bar 00D4  
               irobot_query_and_update@TXArray 0200                                  ??_Byte_GetBit 00BD  
                                _iRVirtualWall 0030                           __size_of_ADC_SetupIO 0032  
                           SPI_MaxSpeed@pInput 00C9                                           _dist 0069  
                                ?_Byte_SetByte 00BA                                  ?_Byte_SetPair 00C5  
                              __end_of_SPI_DCS 61C2                                           _main 3A14  
                   irobot_leds@powerLuminosity 00CC                                           _init 47AA  
                                         _mode 033C                                ??i2_Byte_SetBit 0005  
                                ?_Byte_SetQuad 00C5                                           _itos 3BCC  
                                         fsr0h 000FEA                                           fsr1h 000FE2  
                                         indf0 000FEF                                           fsr2h 000FDA  
                                         fsr0l 000FE9                                           indf1 000FE7  
                                         indf2 000FDF                                           fsr1l 000FE1  
                                         fsr2l 000FD9                                  ?_Byte_SetZone 00BA  
                                         btemp 0051                                           _zero 004E  
                             __end_of_ADC_Init 51F8                                  ??_Byte_SetBit 00BE  
                           __size_of_LCD_Reset 0050                           __size_of_ADC_Voltage 00D8  
                                         prodh 000FF4                                           prodl 000FF3  
                             Motor_Move@pDelta 00BF                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ___fldiv@new_exp 00CB                              Timer0_Init@DIVIDE 00D1  
                              ?_SPI_DisableISR 00BA                               Motor_Move@pMotor 00BD  
                          HMI_SetButton@pValue 00C0                                  Console_Init@x 00BC  
                                Console_Init@y 00BD                                 ?i2_Timer0_Stop 0001  
                            i2Byte_SetBit@pBit 0003                                   ___param_bank 000000  
                              __end_of_Font5x7 FEFF                           Set_Rotation@rotation 00C0  
                       __size_of_HMI_SetButton 0090                         __size_of_HMI_SetNumber 002A  
                                  ?_ISR_Enable 0001                             _irobot_init_song_0 6386  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 5A96  
                             __end_of_LCD_Init 2FDA                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 58CE  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F5  
                      GetPortProperties@pInput 00BC                                  ??_Button_Poll 00D8  
                             __end_of_HMI_Init 22E2                                          l12215 4D6E  
                                        l12209 4D5E                                          l12343 3C76  
                                        l14023 1F2A                                          l12521 5AAA  
                                        l13411 3E80                                          l12519 5A98  
                                        l13417 3E90                                          l13185 532A  
                                        l12395 4384                                          l14059 5F22  
                                        l12741 566A                                          l13189 5338  
                                        l12823 330C                                          l12743 567C  
                                        l14263 2596                                          l12649 6658  
                                        l13449 5094                                          l14347 2EF8  
                                        l12749 56A8                                          l14357 2F9C  
                                        l14375 4E88                                          l13479 31A6  
                                        l14369 4E78                                          l14397 22B4  
                                        l13941 5A66                                          l13677 13E2  
                             __end_of_HMI_Poll 54B6                                          l16415 0A96  
                                        l16271 0E78                                          l13945 5A74  
                                        l16433 0B38                                          l13981 2AAE  
                                        l16449 0BE8                                          l16289 0F1A  
                                        _I2C1T 0040                                          _I2C2T 03CC  
                                ___fltol@sign1 00F7                                          ?_main 0001  
                                        ?_init 0001                                __end_of___fldiv 141A  
                              __end_of___awdiv 4222                          irobot_rotate@isScript 00DC  
                                        ?_itos 00C6                                          STR_10 FF0D  
                                        STR_11 FFFB                                          STR_12 FFD8  
                                        STR_13 FFC3                                          STR_14 FFC3  
                                        STR_15 FFC3                                          STR_16 FFC3  
                              __end_of___flmul 04A6                                __end_of___fltol 373E  
                                        u10000 345E                                          u10010 349E  
                              _Event_DIPSwitch 6222                                __end_of___lldiv 42DE  
                                        u10200 1328                                          u11010 2650  
                                        u11100 2E88                                          u10230 1392  
                                        u10240 13C0                                          u11040 3678  
                                        u10330 00C8                                          u11140 2F9C  
                                        u10420 0422                                          u10340 02DC  
                                        u11045 366C                                          u10430 0448  
                                        u10510 2434                                          u11080 3710  
                                        u10345 02D0                                          u11170 4EEA  
                      __size_of_HMI_LeftSwitch 0018                                          u11260 5BF0  
                              ___awdiv@divisor 00BC                                          u10630 5A90  
                                        u10390 03B8                                          u11270 5C12  
                                        u10608 3E38                                          u10720 20B0  
                                        u10660 2B4E                                          u10910 45CE  
                                        u10824 617A                                          u10825 6174  
                                        u11718 40E6                                          u10790 5CD2  
                                        u13510 0FA8                                          u11719 40FA  
                                        u13511 0FA6                                          u11738 4112  
                                        u11739 4126                                          u11758 413E  
                                        u10990 25D2                                          u11759 4152  
                                        u13480 0F2E                                          u11698 40BA  
                                        u11699 40CE                                          u13398 5F6A  
                                        u13830 35A4                                          u13399 5F80  
                                        u13690 0B4C                                          u13790 3584  
                                        _INDEX 008D                                __end_of___lwdiv 5270  
                                        _MASKS FD0F                                __end_of___lwmod 5930  
                                        i2l430 4718                                          i2l432 473E  
                                        i2l433 4768                                          i2l427 478E  
                                        i2l732 52BC                                          i2l733 52B6  
                                        i2l832 5EDA                                          i2l781 6210  
                              ___awdiv@counter 00BE                            ?_irobot_init_song_0 0001  
                                        _PORTA 000F80                                          _PORTB 000F81  
                                        _PORTC 000F82                                          _PORTD 000F83  
                                        _PORTE 000F84                                          _PORTF 000F85  
                                        _PORTG 000F86                        __size_of_HMI_DownSwitch 0018  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TRISD 000F95  
                                        _TRISE 000F96                                          _TRISF 000F97  
                                        _TRISG 000F98                               ??i2_Byte_GetPair 000D  
                             ??i2_Byte_GetZone 0006                             Port_TogglePin@pPin 00D0  
                              __end_of_getMode 4164                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03B8                                          _PortB 03AE  
                                        _PortC 00A5                                          _PortD 009B  
                                        _PortE 0091                                          _PortF 03C2  
                                        _PortG 03A4                        __end_of_Port_SetPinType 2832  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C6  
                        ??_irobot_led_power_on 00CE                                          _angle 033A  
                               ?i2_Port_SetPin 0010                                    LED_Set@pLED 00CF  
                              __end_of_dpowers FD0F                                 ??_Byte_GetZone 00BF  
                    irobot_move@moveTurnRadius 00CC                                          _mode1 08C4  
                                        _mode2 392E                                          _mode3 65C4  
                                        _mode4 3526                                 Button_Poll@Pin 00DD  
                     __size_of_Set_Addr_Window 00AA                            __end_of_Console_Tab 40A4  
                             __end_of_MXK_Init 2E68                       __size_of_sort_iRBumpDrop 008C  
                                 ?_eusart_init 0001                           i2Byte_GetPair@pInput 000A  
                                        _putch 6638                               __end_of_SPI_Init 08C4  
                             __end_of_SPI_Send 5592                          __end_ofi2_MXK_Release 671E  
                                        pclath 000FFA                                          tablat 000FF5  
                              __end_of_reverse 55FE                             __size_of_MXK_Queue 000E  
                               ??_Byte_SetByte 00BD                              __end_of_ADC_Start 4FFE  
                               ??_Byte_SetPair 00C9                                 ??_Byte_SetQuad 00C9  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00C0  
                                        status 000FD8                                          wtemp6 0052  
                       __size_of_ADC_Calibrate 0014                                _Configure_GPIOs 54B6  
                              _findClosestWall 0C98                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00BB  
                               _LCD_Word_Write 63E2                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                                  mode1@moveto 03F8                            __size_of_HMI_SetBar 000A  
                                 ?_irobot_leds 00CA                                   ?_irobot_init 0001  
                              __initialization 44FE                            __size_of_HMI_Render 003E  
                                 ?_irobot_move 00CA                            __end_of_Byte_GetBit 6160  
                       irobot_leds@powerColour 00CB                                   __end_of_main 3AF4  
                                 __end_of_init 4850               irobot_query_and_update@packetIDs 00CF  
                                 __end_of_itos 3CA4                           HMI_SetButton@reindex 00BC  
                                 SPI_Send9@dat 002D                            __end_of_Byte_SetBit 586C  
                             __end_of_InitList FCE5                    __size_of_Port_CheckQuadType 005A  
                             __end_of_Mode_Set 6638                                      ??_ADC_Off 00BA  
                      __end_of_update_distance 6614                    __size_of_Port_CheckPortType 0048  
                                  HMI_Render@a 00C2                                         ??_main 03FE  
                                       ??_init 00F9                                         ??_itos 00CA  
                      _Console_MakeField$10974 00C8                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C9                              __end_of_LCD_Reset 5B88  
                            Port_SetPin@pValue 00CC                                      ??_LED_Set 00CF  
                            _MXK_InitDIPSwitch 643C                              GetPortPORT@pInput 00BC  
                       Port_CheckPairType@Pin1 00E4                         Port_CheckPairType@Pin2 00E5  
                            __end_of_LCD_Write 6342                                    _GetPortPORT 499C  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 4850  
                              ??_LCD_DrawField 00D6                     __end_of_PortProperty_Valid 517E  
                             __end_of_Port_Set 17D4                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 3E4E  
                          __end_of_Button_Poll 3140                              Word_GetPair@pPair 00C8  
                      LCD_FillRectangle@pPoint 00C5                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 4CBC                                      ??_SPI_DCS 00BC  
                                       ?_mode1 0001                                         ?_mode2 0001  
                                       ?_mode3 0001                                         ?_mode4 0001  
                           _angleToClosestWall 006B                                         _ADRESH 000FC4  
                                       _ADRESL 000FC3                                         _ADC_On 6706  
                                _HMI_SetNumber 62A8                         Port_SetQuadType@Output 00F4  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00BA  
                                       ?_putch 0001                               ??_Console_Render 00DD  
                                ToSegment@pCHR 00BA                               _Console_FormFeed 4D4C  
                       Port_SetQuadType@pInput 00F0                                         i2l1630 37A4  
                                       i2l1631 37F0                                         i2l1632 37DC  
                                       i2l1730 6108                                         i2l1627 382C  
                                       i2l1732 6128                                         i2l1628 3822  
                                       i2l1629 37BA                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                            __size_of_ISR_Enable 000A  
                                       i2l9645 5EDA                                         i2l9647 5EEA  
                                       _RCREG1 000FAF                                         _RCSTA1 000FAC  
                       __end_of_LCD_Word_Write 6400                                 _Timer0_Restart 66A4  
                                       _SPBRG1 000FB0                            ??_MXK_InitDIPSwitch 00F5  
                                       _TXREG1 000FAE                               __end_of___xxtofl 24B0  
                               i2_MXK_SwitchTo 60F6                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00BC                                     _Reset_High 641E  
                           Console_Render@temp 00DF                                 ??_HMI_UpSwitch 00C0  
                               OutSeg@pSegment 00BD                                ??i2_Timer0_Stop 0001  
                          Port_TogglePin@Value 00D1                         ADC_SetChannel@pChannel 00BB  
                             __end_of_delay_ms 56D2                                   LED_Init@pLED 00E7  
                             __end_of_delay_us 5AE8                                  ??_Timer0_Init 00CB  
                                ??_Timer2_Init 00CB                                  ??_Timer0_Stop 00BA  
                                   _Timer0_ISR 6250                       __size_of_Console_NewLine 00A2  
                            Timer2_Init@DIVIDE 00D4                                 __CFG_XINST$OFF 000000  
                                       _TimerX 00F9                                         _OutSeg 5080  
                     __size_of_HMI_InitButtons 0006                                     _Motor_Init 3CA4  
                   __end_of_load_iRScriptStack 5668                                     _Motor_Move 6086  
                                       _iRWall 0035                                  ??_Motor_Speed 00D9  
                                   _Motor_Step 3400                            rx_assign@byteNumber 00BC  
                      __end_of_Event_DIPSwitch 6250                                         ___wmul 60C0  
                              ??_HMI_DIPSwitch 00C0                  load_iRScriptStack@bytesToLoad 00C8  
                                    ??___fldiv 00C2                                      ??___awdiv 00BE  
                               __CFG_STVREN$ON 000000                                         _change 00FF  
                                    ??___flmul 00D0                                         _lMotor 007F  
                                    ??___fltol 0100                                      ??___lldiv 00C2  
                                       _lQueue 0063                                     _TestButton 039A  
                                    ??___lwdiv 00BE                             __size_of_ToSegment 0284  
                                    ??___lwmod 00C5                       __end_of_Port_SetQuadType 1CAE  
                     i2Byte_GetZone@pChunkSize 0005                               __end_of_safeToGo 5C1E  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 4EF0  
                            GetPortTRIS@pInput 00BC                             __size_of_Reset_Low 001E  
                                       clear_0 4566                                         clear_1 4578  
                                       clear_2 4584                                         clear_3 4590  
                                       clear_4 459C                               ___awdiv@quotient 00C0  
                   irobot_stop_motion@isScript 00D3                                  ?_eusart_getch 0001  
                                   Port_Init@i 0106                                     _iRDistance 0079  
                            __end_of_MXK_Queue 667E                     __end_ofHMI_SetButton@F7213 FD1C  
                                    ??_getMode 00DE                                     _iRBumpLeft 0087  
                                       _printf 24B0                                     _iRBumpDrop 0036  
                    __end_of_MXK_InitDIPSwitch 645A                                  _ADC_Calibrate 65EE  
                                   _iRDropLeft 0085                                 HMI_SetButton@v 00C1  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00BB  
                                  _Console_Tab 3FE2                            LCD_Word_Write@value 00BF  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00BD                       Port_CheckPortType@Output 00F3  
                                    ?_ADC_Init 00BE                             _twos_complement_of 5E12  
                              ??i2_Port_SetPin 0014                                   __mediumconst FC32  
                  __end_ofTimer2_Init@PRESCALE FD1F                       Port_CheckPortType@pDrive 00F2  
                                       tblptrh 000FF7                                         tblptrl 000FF6  
                                       tblptru 000FF8                                   ?_MXK_Dequeue 0001  
                               ?_HMI_SetButton 0001                       Port_CheckPortType@pInput 00F0  
                                ??_Port_SetPin 00CD                                      ??_reverse 00BE  
                                   _StepRotate 0071                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00E0                                         putch@c 00CE  
                            Motor_Speed@pMotor 00D5                                 ?_HMI_SetNumber 00D0  
                               i2_Word_GetPair 61F2                        __end_of_Configure_GPIOs 5526  
                          irobot_leds@isScript 00CD                        __end_of_findClosestWall 105A  
                             ??_MXK_TestButton 00C0                         __end_of_Timer0_Restart 66B0  
                                Set_Rotation@m 00BF                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00BA                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 612C  
                                 ___xxtofl@arg 00C4                                   i2delay_us@us 0001  
                                 ___xxtofl@exp 00C3                                   ___xxtofl@val 00BA  
                        _update_bump_and_cliff 604C                                ?_LCD_Word_Write 00BF  
                                   __accesstop 0060                        __end_of__initialization 45A2  
                                    ?_LCD_Fill 00C3          irobot_query_and_update@packetVariable 00D3  
                                    ?_LCD_Init 0001                                  SPI_Init@pMode 00EC  
                                  _Byte_GetBit 612C                                     _Stepstomin 006F  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 66BC  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00C2  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00BA  
                                   ___fltol@f1 00F3                                    _Byte_SetBit 5808  
                                __end_of_MASKS FD18                                 _PortA_Property FF0B  
                                  ?_Event_NULL 0001                                      LCD_Fill@i 00C5  
                                    LCD_Fill@j 00C6                            load_iRScriptStack@i 00C9  
                                    LCD_Init@i 00F1                                 __pcstackCOMRAM 0001  
                               _PortB_Property FF09                            __size_ofi2_delay_us 0040  
                                 __pidataBANK0 66F2                                   __pidataBANK3 668C  
            irobot_move_straight@straightSpeed 00D3                            i2Byte_SetBit@pInput 0001  
                         __end_of_Byte_GetPair 6496                                Console_Render@x 00E4  
                              Console_Render@y 00E5                            i2Byte_SetBit@pValue 0004  
                                ?_Set_Rotation 0001                            Timer0_Init@PRESCALE FCE5  
                         __end_of_Byte_GetZone 4C24                                  __end_of_mode1 0C98  
                                __end_of_mode2 3A14                                  __end_of_mode3 65DA  
                                __end_of_mode4 3632                           ??_twos_complement_of 00BC  
                            irobot_leds@LEDBit 00CA                                 _PortC_Property FF07  
                          __end_of_Timer0_Init 32A0                                  __end_of_putch 6646  
                               ??_eusart_getch 00BA                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 3400                            __end_of_Timer0_Stop 6700  
                               ?_ADC_Calibrate 0001                                      ?_SPI_Init 00E7  
                             ?_update_distance 0001                                      ?_SPI_Send 00BA  
                               ??_eusart_putch 00BA                                    _Button_Init 3D7A  
                            Port_SetType@pType 00F6                                    _Button_Poll 2FDA  
                         __end_of_Byte_SetByte 6670                           __end_of_Byte_SetPair 6364  
                               _HMI_LeftSwitch 6594                                 _PortD_Property FF05  
                         __end_of_Byte_SetQuad 6386                                   ??_LED_Toggle 00D2  
                                 ??_HMI_GetBar 00BA                     eusart_putch@eusartSendChar 00BA  
                         __end_of_Byte_SetZone 444E                            __end_of_Motor_Speed 62A8  
                               _HMI_DownSwitch 654C                                  SPI_Send@pData 00BC  
                        __end_of_MXK_DIPSwitch 6534                                   ??_HMI_SetBar 00BA  
                     __size_of_get_packet_size 0066                                   ??_HMI_Render 00C2  
                               _PortE_Property FF03                                     ??_ADC_Init 00C1  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 6222  
                      irobot_rotate@angleTotal 00DD                                 _PortF_Property FF01  
                      Port_CheckQuadType@Pair1 00ED                        Port_CheckQuadType@Pair2 00EE  
                     MXK_BlockSwitchTo@pModule 00C1                                        ??_mode1 03F6  
                                      ??_mode2 00E6                                        ??_mode3 00E1  
                                      ??_mode4 00F9                                        ?_ADC_On 0001  
                            _Console_Backspace 5930                                ?_Timer0_Restart 0001  
                                      ??_putch 00CE                       __size_of_HMI_RightSwitch 0018  
                          _Console_ClearCursor 5E98                              __end_of_ToSegment 1A58  
                               _PortG_Property FEFF                                     __pbssBANK0 0060  
                                   __pbssBANK3 0300                                     __pbssBANK4 0400  
                          __end_of_Port_GetPin 5E12                             _irobot_stop_motion 5D40  
                      Port_CheckQuadType@pQuad 00EB                                reverse@iterator 00BF  
                             ??_SPI_DisableISR 00BC                                ?i2_MXK_SwitchTo 0001  
                            ?_irobot_song_play 0001                             ?_Console_Backspace 0001  
                            __end_of_Reset_Low 641E                      __size_of_Event_TestButton 003C  
                      __size_of_Port_TogglePin 0030                                     ??_LCD_Fill 00C5  
                                   ??_LCD_Init 00EF                           __size_of_eusart_init 001E  
                          __end_of_Port_SetPin 3FE2                         __end_of_PortA_Property FF0D  
             irobot_led_power_on@powerOnColour 00CE                                      ?_Mode_Set 0001  
                           Byte_SetByte@pInput 00BA                                     ??_LED_Init 00E7  
                     ADC_ClockDivision@pDivide 00BA                             Byte_SetByte@pValue 00BC  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                           _ADC_ConversionTime 5CB0                                  ?_Timer0_Clear 0001  
                                   ??_HMI_Init 00F5                             ??_irobot_song_play 00BB  
                                   ??_HMI_Poll 00DE                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E7                         __end_of_PortB_Property FF0B  
                                ?_Timer0_Start 00BA                            ?_irobot_stop_motion 0001  
                            __end_of_Port_Init 2B62                                    ?_Timer0_ISR 0001  
                      Port_CheckPairType@pPair 00E2                             __end_of_LED_Toggle 5D40  
                           __end_of_HMI_GetBar 6712                       LCD_FillRectangle@pColour 00C3  
                                   _angleTotal 0073                            ??_Console_Backspace 00BC  
                            Set_Addr_Window@xe 00C0                              Set_Addr_Window@ye 00C1  
                            Set_Addr_Window@xs 00C2                              Set_Addr_Window@ys 00BF  
                                      ?_OutSeg 00BD                                    ?_Motor_Init 00E7  
                           Byte_SetPair@pInput 00C5                                    ?_Motor_Move 00BD  
                                  ?_Motor_Step 0001                             Byte_SetPair@pValue 00C8  
                           __end_of_HMI_SetBar 66DA                         __end_of_PortC_Property FF09  
                           Word_GetPair@pInput 00C6                             __end_of_HMI_Render 5F56  
                               ??_Set_Rotation 00BF                                      ?_Port_Set 00C9  
                          ?_ADC_ConversionTime 0001                                        ?___wmul 00BA  
                             ?_Event_DIPSwitch 0001                              Port_GetPin@Output 00BF  
                                 ??_ISR_Enable 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 65AC                         __end_of_PortD_Property FF07  
                                      _ADC_AN0 00B5                                        _ADC_AN1 03DD  
                                      _ADC_AN2 03D8                                        _ADC_AN3 03D3  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00BA  
                            _Console_MakeField 3E4E                                        _ADC_Off 66EA  
                            ??_Console_NewLine 00BA                       ADC_ClockDivision@unfound 00BC  
                       __end_of_HMI_DownSwitch 6564                                     ??_SPI_Init 00ED  
                       Event_TestButton@pState 00D3                                     ??_SPI_Send 00BD  
                                      ?_printf 00CF                              ??_HMI_InitButtons 00BA  
                   __size_of_MXK_InitDIPSwitch 001E                       __size_of_move_and_rotate 0082  
                       __end_of_PortE_Property FF05                            Console_Render@F6956 03EA  
                           ?_Console_MakeField 00BF                                        _COUNTER 0029  
                              ??_HMI_SetButton 00BA                           __end_of_HMI_UpSwitch 657C  
                         ??_irobot_stop_motion 00D3                                        _LED_Set 5AE8  
                      _Console_IncrementCursor 57A2                                      ?___xxtofl 00BA  
                       __end_of_PortF_Property FF03                                    _gBackcolour 0083  
                              ??_HMI_SetNumber 00D2                                      _I2C1_Done 0337  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0334  
                                    _I2C1_More 0331                                      _I2C2_More 032E  
                                    ?_delay_ms 00BA                      __end_of_Console_Backspace 598C  
                                    ?_delay_us 00BA                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 6478                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                           ??_ADC_ConversionTime 00BA  
                       __end_of_PortG_Property FF01                            ??_Console_MakeField 00C1  
                      __size_of_ADC_SetChannel 001C                                        _IRValue 006D  
                                      _SPI_DCS 6192                           __size_ofi2_MXK_Queue 000E  
                                ??_ADC_SetupIO 00BA                               ?_Configure_GPIOs 0001  
                             ?_findClosestWall 0001                                __size_of_ADC_On 0006  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 00AA  
                             ADC_Init@pChannel 00C0                           i2Byte_GetZone@Offset 0008  
                                ??_ADC_Voltage 00E5                             __end_of_ISR_Enable 66D0  
                               ??_ISR_Function 0017                           i2Byte_GetZone@Output 0009  
                               ??_Timer0_Clear 00BA                              Event_TestButton@j 0089  
                                    ?_safeToGo 0001                                     ??_Mode_Set 00BA  
                               ??_Timer2_Clear 00BA                                        _Font5x7 FD1F  
                         i2Byte_GetZone@pChunk 0004                       ADC_ConversionTime@pCount 00BB  
                                      _MinDist 00FB                           i2Byte_GetZone@pInput 0001  
                               ??_Timer0_Start 00BD                           SPI_DisableISR@pInput 00BA  
                                ?_Port_GetQuad 00BA                                Byte_SetBit@pBit 00BC  
                         Port_TogglePin@pInput 00CE                          __end_ofi2_Byte_SetBit 5BD4  
                                    _ADC_Start 4F7A                                        __Hparam 0000  
                            Port_GetQuad@pQuad 00BC                                    _Timer0_Init 3140  
                                  _Timer2_Init 32A0                                        __Lparam 0000  
                                  _Timer0_Stop 66FA                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FD05  
                                      _iRAngle 0077                                  LCD_Write@mode 00BD  
                              __size_of_OutSeg 0082                                     ??_Port_Set 00CC  
                    __end_of_Console_MakeField 3F1E                              _Console_PrintChar 2832  
                                  _Motor_Speed 627E                                        _Stepper 00AF  
                                ?_Port_SetType 00F4                                        _gCursor 0047  
                                      ___fldiv 105A                                        ___awdiv 4164  
                        ??_Console_ClearCursor 00BA                                        ___flmul 0000  
                                      ___fltol 3632                                        _lBuffer 04AA  
                                      ___lldiv 4222                                __size_of___wmul 0036  
                              ??_ADC_Calibrate 00BA                                        ___lwdiv 51F8  
                                      ___lwmod 58CE                                ?_HMI_LeftSwitch 0001  
                     __end_of_Console_FormFeed 4DDA                             ?_Console_PrintChar 0001  
                                      __pcinit 44FE                                ?_HMI_DownSwitch 0001  
                                      __ramtop 1000                                        _getMode 40A4  
                                      __ptext0 3A14                                        __ptext1 3526  
                                      __ptext2 0C98                                        __ptext3 65C4  
                                      __ptext4 4FFE                                        __ptext5 45AC  
                                      __ptext6 392E                                        __ptext7 6504  
                                      __ptext8 08C4                                        __ptext9 5BD4  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 64B2                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FD05                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00CE                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00D3                                     ??___xxtofl 00BE  
                                 ?_GetPortPORT 00BA                                   ?_GetPortTRIS 00BA  
                          ??_Console_PrintChar 00CA                                    _Port_GetPin 5DCC  
                            __CFG_MSSPMSK$MSK5 000000                            LCD_DrawRectangle@p2 03E6  
                          LCD_DrawRectangle@p4 03E2                                   ??i2_delay_us 0003  
                                   ??_delay_ms 00BC                                     ??_delay_us 00BC  
                                      _reverse 5592                                      _DIPSwitch 0390  
                          __size_of_Timer0_ISR 002E                                    _Port_SetPin 3F1E  
                                  _iRBumpRight 0088                                 LCD_DrawField@i 00DC  
                                    _LCD_Reset 5B38                            __size_of_Motor_Init 00D6  
                          __size_of_Motor_Move 003A                            __size_of_Motor_Step 0126  
                                    _LCD_Write 6320                                    _iRDropRight 0086  
                         __size_of_MXK_Dequeue 003E                                     delay_ms@ms 00BA  
                         end_of_initialization 45A2                            ADC_SetupIO@pChannel 00BC  
                            ??_get_packet_size 00BA  irobot_query_and_update@numberOfPacketRequests 00D2  
                                   delay_us@us 00BA                              ??_HMI_SetSegments 00BD  
                      Console_PrintChar@pInput 00CD                                   _Console_Init 4E66  
                         __end_of_eusart_getch 66E2                        _irobot_query_and_update 2B62  
                                   ??_safeToGo 00DE                           __size_of_MXK_Release 001C  
                   __end_of_Port_CheckPairType 573C                           __end_of_eusart_putch 6662  
                                      itos@Out 00CE                                 ??_Port_GetQuad 00BD  
                           _PortProperty_Valid 5102                             Byte_SetQuad@pInput 00C5  
                                    i2u1354_48 6268                             SPI_MinSpeed@pInput 00C9  
                           Byte_SetQuad@pValue 00C8                            __end_of_ADC_SetupIO 6192  
                        __size_of_Byte_GetPair 001E                    __size_of_irobot_init_song_0 0020  
                              ___lldiv@divisor 00BE                          __size_of_Byte_GetZone 009C  
                                   ?_ADC_Start 00BC                              ??_HMI_RightSwitch 00C0  
                              ___lldiv@counter 00C6                      __end_of_Console_PrintChar 29D0  
                          __end_of_ADC_Voltage 3BCC                                 ??_Port_SetType 00F7  
                   __end_of_Port_CheckQuadType 59E6                                        printf@c 00E2  
                                      printf@f 00CF                                 Port_Init@pPort 0103  
                                      postdec1 000FE5                                        postdec2 000FDD  
                        __size_of_Byte_SetByte 000E                          __size_of_Byte_SetPair 0022  
                       Console_MakeField@Index 00C3                              __end_of_rx_assign 392E  
                                      postinc0 000FEE                                        postinc2 000FDE  
                          ?_PortProperty_Valid 00C9                          __size_of_Byte_SetQuad 0022  
                   __end_of_Port_CheckPortType 5CB0                          __size_of_Byte_SetZone 00B6  
                           __end_ofi2_delay_us 5F18                             Button_Init@pInitIO 0104  
                                _irobot_rotate 45AC                          Timer0_Init@pFrequency 00C7  
                            ?_Port_SetQuadType 00F0                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00BE                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00F4  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00C0  
                        Console_Render@lCursor 00E0                             _load_iRScriptStack 55FE  
                                    _MXK_Queue 6670                               __CFG_CPUDIV$OSC1 000000  
                                ___xxtofl@sign 00C2                               Byte_GetZone@pMax 00BC  
                   __size_of_Console_Backspace 005C                                      _TRISCbits 000F94  
                   load_iRScriptStack@loadByte 00C6                                _Set_Addr_Window 4656  
                               SPI_Init@pClock 00E7                               ??_LCD_Word_Write 00C1  
                              _sort_iRBumpDrop 4DDA                              ??_move_and_rotate 00E1  
                                  ___fldiv@grs 00CD                                    ___fldiv@rem 00C7  
                        __end_of_LCD_DrawField 4AE6                                 Port_Set@pInput 00C9  
                               SPI_Init@pInput 00ED                           ??_PortProperty_Valid 00CD  
                            __size_of_ADC_Init 007A                                 Port_Set@pValue 00CB  
                                   ?_LCD_Reset 0001                           __end_of_Set_Rotation 4CBC  
                                   ?_LCD_Write 00BD                                   _Byte_GetPair 6478  
                           HMI_SetButton@F7213 FD18                            ?_load_iRScriptStack 00BA  
                                 _Byte_GetZone 4B88                                  ?_MXK_SwitchTo 0001  
                            LCD_DrawField@xmax 00DA                              LCD_DrawField@ymax 00DB  
                               __end_of_ADC_On 670C                                 _Port_TogglePin 61C2  
                             _Event_TestButton 6010                                    ___flmul@grs 00D6  
                         Port_SetPinType@Props 00E5                                   ?_Byte_GetBit 00BA  
                      __size_ofi2_Byte_GetPair 001A                                   _Byte_SetByte 6662  
                                 _Byte_SetPair 6342                                ADC_SetupIO@MASK 00BD  
                                 _Byte_SetQuad 6364                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 4398                           Port_SetPinType@pType 00E3  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00BA  
                                ?_SPI_MaxSpeed 00C9                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00BA                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C9  
                        __end_ofi2_Timer0_Stop 6718                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00D7  
                               __end_of_OutSeg 5102                           ??_load_iRScriptStack 00C4  
                 __end_of_irobot_move_straight 651C                          __size_of_HMI_UpSwitch 0018  
                               __end_of___wmul 60F6                          __end_of_HMI_DIPSwitch 654C  
                                __pidataCOMRAM 66BC                                   ?_Button_Init 0100  
                                 ?_Button_Poll 00D5                                      _Bus_State 004B  
                          i2Byte_GetPair@pPair 000C                           __end_of_ISR_Function 14AA  
                         __end_of_Timer0_Clear 66A4                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 66EA                                 __end_of_printf 2672  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00BA  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C6  
                             ??_Timer0_Restart 00BA                           __end_of_Timer0_Start 6320  
                           Port_SetType@Output 0100                            start_initialization 44FE  
                                   ?_MXK_Queue 00BA                       PortProperty_Valid@Errors 00CF  
                             ??i2_MXK_SwitchTo 0007                              _LCD_FillRectangle 52E6  
                           Port_SetType@pInput 00F4                                 _ADC_SetChannel 64CE  
                                   HMI_Init@in 00F5                            HMI_SetNumber@pInput 00D0  
                        __end_ofi2_Port_SetPin 47AA                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00BB                         __end_of_Port_TogglePin 61F2  
                                ?_Word_SetPair 00C9                              Byte_SetBit@pInput 00BA  
                                     ??_ADC_On 00BA                                 ??_MXK_SwitchTo 00C0  
                            Byte_SetBit@pValue 00BD                             ?_LCD_FillRectangle 00C3  
                    ??_irobot_query_and_update 00CA                            _Console_ResetCursor 63A6  
                  PortProperty_Valid@pPinDrive 00CB                                    _ADC_SetupIO 6160  
                         MXK_BlockSwitchTo@CUR 00C0                       PortProperty_Valid@pInput 00C9  
                                i2_MXK_Release 6718                                    _ADC_Voltage 3AF4  
                       LCD_FillRectangle@pSize 00C9                                 SPI_Send@pInput 00BA  
                                 ??_Reset_High 00CE                       __size_of_Port_SetPinType 01C0  
                               ??_SPI_MaxSpeed 00CB                          Port_SetQuadType@pQuad 00F2  
                                    _ToSegment 17D4                            ??_LCD_FillRectangle 00CD  
                        Port_SetQuadType@pType 00F3                                _Console_NewLine 4AE6  
                               ??_SPI_MinSpeed 00CB                                    ??_ADC_Start 00BE  
                                 _HMI_UpSwitch 6564                                      _Reset_Low 6400  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 6700  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D7                                 ADC_Init@pInput 00BE  
                                    _gCharSize 03F2                               Timer2_Init@INDEX 008B  
                                    OutSeg@cur 003F                                 ??i2_Motor_Step 0015  
                                 ??_Motor_Init 00EB                                       ??_OutSeg 00BE  
                                    OutSeg@out 00C1                        __size_of_Console_Render 0210  
                                 ??_Motor_Move 00C1                                   ??_Motor_Step 00CE  
                                    _iRAngleSS 031E                                      _iRCliffFL 0033  
                                    _iRCliffFR 0032                             Byte_SetZone@Offset 00C3  
                                     ??___wmul 00BE                           ?_Console_ResetCursor 0001  
                                    _Port_Init 29D0                                    __pdataBANK0 00F9  
                                  __pdataBANK3 03EA                      __size_of_irobot_song_play 0014  
                  __size_of_twos_complement_of 0044                              __size_of_Port_Set 03BA  
                           Byte_SetZone@pChunk 00BD                                       ?_ADC_Off 0001  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00BA  
                           Byte_SetZone@pValue 00BF                                  Mode_Set@pMode 00BA  
                                     ??_printf 00DB                        __end_of_Set_Addr_Window 4700  
                     Port_CheckQuadType@Output 00EF                        __end_of_sort_iRBumpDrop 4E66  
                                    _gLineSize 03EE                       Port_CheckQuadType@pDrive 00EC  
                               ??_Word_GetPair 00C9                       Port_CheckQuadType@pInput 00E9  
                         __end_of_Port_GetQuad 5C68                                      ___fldiv@a 00BE  
                                    ___fldiv@b 00BA                      __end_of_LCD_FillRectangle 535A  
                                  __pbssBIGRAM 04AA                         __end_of_ADC_SetChannel 64EA  
                                     ?_LED_Set 00CE                                      ___flmul@a 00CC  
                                    ___flmul@b 00C8                                    __pbssCOMRAM 0029  
                              ADC_Start@pInput 00BC                             __end_of_Reset_High 643C  
                                __pcstackBANK0 00BA                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03F6  
                      ??_update_bump_and_cliff 00D7                                     itos@Length 00CC  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00CD  
                     __size_of_update_distance 0012                              __size_of___xxtofl 01CE  
                           __end_of_Timer0_ISR 627E                           __size_of_GetPortPORT 00A6  
                                  ??_LCD_Reset 00D3                           __size_of_GetPortTRIS 00A6  
                         __end_of_Port_SetType 1ED8                                       ?_SPI_DCS 00BA  
                        __size_of_eusart_putch 000E                                ?_Port_TogglePin 00CE  
                                ??_eusart_init 00BA                                    ??_LCD_Write 00BE  
                            __size_of_delay_ms 006A                              __size_of_delay_us 0052  
                           __end_of_Motor_Init 3D7A                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Move 60C0                             __end_of_Motor_Step 3526  
                        Timer2_Init@pFrequency 00C7                                 ?i2_MXK_Release 0001  
                     Port_CheckPairType@Output 00E6              twos_complement_of@complementValue 00BA  
                                   ?_ToSegment 0001                       Port_CheckPairType@pDrive 00E3  
                     Port_CheckPairType@pInput 00E0                                 reverse@tempVar 00BE  
                           _MXK_InitTestButton 645A                                     ?_Reset_Low 0001  
                            __size_of_safeToGo 004A                                   ?_Timer0_Init 00C7  
                       __size_of_MXK_DIPSwitch 0018                                   ?_Timer2_Init 00C7  
                             ??_HMI_LeftSwitch 00C0                                   ?_Timer0_Stop 0001  
                             ___lwdiv@dividend 00BA                                  ??_irobot_leds 00CD  
                                ??_irobot_init 00BB                                ??_irobot_rotate 00DB  
                                ??_irobot_move 00CE                                  _lStepFunction 0066  
                      __size_of_MXK_TestButton 0018                              Byte_SetPair@pPair 00C7  
                             ??_HMI_DownSwitch 00C0                                      __pintcode 1408  
                                __pmediumconst FC32                                   ?_Motor_Speed 00D5  
                        ??_Console_ResetCursor 00BA                                       ?___fldiv 00BA  
                                     ?___awdiv 00BA                                      __ptext100 66E2  
                                    __ptext101 62D2                                      __ptext110 6342  
                                    __ptext102 6192                                      __ptext111 598C  
                                    __ptext103 3D7A                                      __ptext120 64CE  
                                    __ptext112 56D2                                      __ptext104 643C  
                                    __ptext121 5CB0                                      __ptext113 5102  
                                    __ptext105 6700                                      __ptext130 6534  
                                    __ptext122 4EF0                                      __ptext114 6364  
                                    __ptext106 645A                                      __ptext131 654C  
                                    __ptext123 65EE                                      __ptext115 4398  
                                    __ptext107 2672                                      __ptext140 62A8  
                                    __ptext132 6564                                      __ptext124 6706  
                                    __ptext116 4E66                                      __ptext108 1A58  
                                    __ptext141 3BCC                                      __ptext133 657C  
                                    __ptext125 66EA                                      __ptext117 4F7A  
                                    __ptext109 5D86                                      __ptext150 3F1E  
                                    __ptext142 5592                                      __ptext134 6594  
                                    __ptext126 40A4                                      __ptext118 517E  
                                    __ptext151 5FD2                                      __ptext143 58CE  
                                    __ptext135 65AC                                      __ptext127 5442  
                                    __ptext119 6160                                      __ptext160 373E  
                                    __ptext152 6478                                      __ptext144 51F8  
                                    __ptext136 5C1E                                      __ptext128 2FDA  
                                    __ptext161 6712                                      __ptext153 4B88  
                                    __ptext145 42DE                                      __ptext137 6222  
                                    __ptext129 651C                                      __ptext170 6718  
                                    __ptext162 66B0                                      __ptext154 5808  
                                    __ptext146 17D4                                      __ptext138 1404  
                                    __ptext171 667E                                      __ptext163 4700  
                                    __ptext155 5DCC                                      __ptext147 4CBC  
                                    __ptext139 6010                __end_of_irobot_query_and_update 2CE8  
                                    __ptext172 0000                                      __ptext164 61F2  
                                    __ptext156 66D0                                      __ptext148 5CF8  
                                    __ptext165 64EA                                      __ptext157 670C  
                                    __ptext149 61C2                                      __ptext166 5270  
                                    _pShiftVal 007B                                      __ptext167 5B88  
                                    __ptext159 6250                                      __ptext168 60F6  
                                    __ptext169 5ED8                                       ?___flmul 00C8  
                                     ?___fltol 00F3                                       ?___lldiv 00BA  
                                   ?_Port_Init 0101                           Timer0_Init@pCPUClock 00CD  
                                     ?___lwdiv 00BA                                       ?___lwmod 00C1  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 48F6                                       ?_getMode 0001  
                                 _eusart_getch 66DA                    __end_ofTimer0_Init@PRESCALE FCF5  
                              _get_packet_size 573C                                   _eusart_putch 6654  
                           ??_Console_FormFeed 00BA                                _HMI_SetSegments 42DE  
                           ?_GetPortProperties 00BA                               Event_NULL@pState 0001  
                     __size_of_Event_DIPSwitch 002E                          __size_of_Set_Rotation 0098  
                              ?_ADC_SetChannel 0001                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00BD                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00BA                                       _ADC_Init 517E  
                 irobot_rotate@rotateDirection 00DF                          __end_of_HMI_SetButton 4D4C  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00BA  
                         irobot_move@moveSpeed 00CA                                   ?_Port_SetPin 00C9  
                        __end_of_HMI_SetNumber 62D2                               ___lwdiv@quotient 00BF  
                              _HMI_RightSwitch 657C                    __size_of_ADC_ConversionTime 0048  
                               __size_of_mode1 03D4                                 __size_of_mode2 00E6  
                               __size_of_mode3 0016                                 __size_of_mode4 010C  
                          ??_GetPortProperties 00BC                        __end_of_Console_NewLine 4B88  
                         ??_MXK_InitTestButton 00E7                             Byte_GetPair@pInput 00C3  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 6706  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 6504  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 64EA  
                                     _LCD_Fill 5A3E                                       _LCD_Init 2E68  
                               ___wmul@product 00BE                                       _HMIBoard 0340  
                               i2_Byte_GetZone 5270                                       _LED_Init 586C  
                                    delay_ms@u 00BC                             Button_Poll@pButton 00D5  
                                    delay_us@u 00BC                                       _HMI_Init 20E8  
                                     _HMI_Poll 5442                             MXK_Queue@pCallback 00BA  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 63E2  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 5ED8  
                     __size_of_Configure_GPIOs 0070                       __size_of_findClosestWall 03C2  
                         __size_of_Byte_GetBit 0034                              Byte_SetQuad@pQuad 00C7  
                                     _PIR1bits 000F9E                                       i2u506_40 5292  
                                     i2u506_47 5288                                       i2u508_40 52DA  
                                     i2u508_45 52D6                                       _PIR3bits 000FA4  
                                     i2u630_44 5B9C                                       i2u630_45 5B98  
                                     i2u631_44 5BC2                                       i2u631_45 5BBE  
                                     i2u634_40 5F06                                       i2u730_40 3796  
                                     i2u731_40 37CE                                       i2u729_40 3782  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                                  _mode1$15600 03FA                           i2Word_GetPair@pInput 000D  
                             __CFG_WDTPS$32768 000000                     irobot_song_play@songNumber 00BB  
                             HMI_SetBar@pValue 00BA                              Button_Init@pInput 0100  
                      __size_of_SPI_DisableISR 0028                                       _SSP1CON1 000FC6  
                            ??_Port_SetPinType 00E4                                       _SSP1CON2 000FC5  
                                     _SSP2CON1 000F6C                                       _SSP2CON2 000F6B  
                        __size_of_ISR_Function 00A2                          __size_of_Timer0_Clear 000C  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 499C  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 4C24  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 5E98  
                           _Port_CheckPairType 56D2                                       _MXK_Init 2CE8  
                        __size_of_Timer0_Start 0026                                _move_and_rotate 4FFE  
                              MXK_SwitchTo@CUR 00C0                          __end_of_ADC_Calibrate 6602  
                          __end_of_irobot_leds 5A3E                                       _SPI_Init 04A6  
                          __end_of_irobot_init 6654                       __end_of_Event_TestButton 604C  
                                     _SPI_Send 5526                            __end_of_irobot_move 44FE  
                                    _rx_assign 383E                                     _ADCON0bits 000FC2  
                             __size_of_ADC_Off 0008                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BF                              ___wmul@multiplier 00BA  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00BE  
                                   printf@flag 00DD                           Timer2_Init@pCPUClock 00D0  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 53CE                                     printf@prec 00DC  
                        Motor_Speed@pFrequency 00D7                              Byte_GetBit@pInput 00BA  
                          Port_SetPinType@pPin 00E2                           __size_of_Button_Poll 0166  
                                _MXK_DIPSwitch 651C                             _Port_CheckQuadType 598C  
                          ?_Port_CheckPairType 00E0                           __end_of_SPI_MinSpeed 5442  
                                ??_MXK_Dequeue 00D0                               __size_of_LED_Set 0050  
                       __size_ofi2_Byte_SetBit 004C                             _Port_CheckPortType 5C68  
                         __end_of_update_angle 6626                          Button_Poll@pIncrement 00D7  
                      PortProperty_Valid@F6830 FCF5                           __end_ofi2_Motor_Step 383E  
                              ??i2_MXK_Release 0001                   __size_of_irobot_led_power_on 001C  
                                    copy_data0 4512                                      copy_data1 4532  
                                    copy_data2 4552                                  ??_MXK_Release 00BA  
                       __end_ofi2_Byte_GetPair 6504                      __size_of_Port_SetQuadType 0256  
                             __size_of_SPI_DCS 0030                            ?_Port_CheckQuadType 00E9  
                        ?_irobot_move_straight 00D3                         __end_ofi2_Byte_GetZone 52E6  
                          __end_ofi2_MXK_Queue 668C                                      mode2@dist 00E6  
                          ?_Port_CheckPortType 00F0                                itos@destination 00C8  
                                     _InitList FC33                     __end_of_irobot_init_song_0 63A6  
                         _Motor_Step$intlevel0 3406                                       _Mode_Set 6626  
                           Port_GetQuad@Output 00BF                              ??_update_distance 00D7  
                                  ??_ToSegment 00BA                                   _ISR_Function 1408  
                                 _Timer0_Clear 6698                             Port_GetQuad@pInput 00BA  
                                 _Timer2_Clear 66E2                           __end_of_Word_GetPair 6010  
                                     _lCBuffer 0300                           ??_Port_CheckPairType 00E4  
                                  ??_Reset_Low 00CE                                       __Hrparam 0000  
                                 _Timer0_Start 62FA                                   OutSeg@pInput 00C0  
                               _Console_Render 1ED8                                       __Lrparam 0000  
                              Timer2_Init@RDIV 00CC                                       _iRCliffL 0034  
                                     _iRCliffR 0031                                 LCD_Write@value 00BE  
                                     _Port_Set 141A                                   OutSeg@segset 003E  
                                    rand@screw 003B                           __end_of_Word_SetPair 5DCC  
                      __end_of_get_packet_size 57A2                                    ??_Port_Init 0104  
                      __end_of_HMI_SetSegments 4398                           ??_Port_CheckQuadType 00ED  
                             __size_of___fldiv 03C0                               _irobot_song_play 65DA  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___flmul 04A6                               __size_of___fltol 010C  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 5F94  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00F3  
                             __size_of___lwmod 0062                                       _lBufferX 008F  
                                     _lBufferY 008E                            Timer2_Init@PRESCALE FD1C  
                        _findClosestWall$15599 03F8                                     ?_rx_assign 00BB  
                              LCD_Fill@pColour 00C3                             ?_MXK_BlockSwitchTo 0001  
                    __size_ofi2_Timer0_Restart 000C                                       _lCurrent 0081  
                             __size_of_getMode 00C0                        __end_of_HMI_RightSwitch 6594  
                       Byte_GetZone@pChunkSize 00BE                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00BE                          __size_of_Port_SetType 022A  
                                reverse@length 00BC                                      itos@input 00C6  
                        i2MXK_SwitchTo@pModule 0008                                       ___xxtofl 22E2  
                          irobot_move@isScript 00D2                             Motor_Init@pAddress 00E9  
                                     _delay_ms 5668                                       _delay_us 5A96  
                                     _clearall 0090                                ___lwdiv@divisor 00BC  
                              ___lwdiv@counter 00BE                                Port_GetPin@pPin 00BC  
                                     __ptext10 6602                                       __ptext11 604C  
                                     __ptext20 5E12                                       __ptext12 6614  
                                     __ptext21 65DA                                       __ptext13 2B62  
                                     __ptext30 63A6                                       __ptext22 24B0  
                                     __ptext14 383E                                       __ptext31 5930  
                                     __ptext23 6638                                       __ptext15 4DDA  
                                     __ptext40 52E6                                       __ptext32 5E98  
                                     __ptext24 2832                                       __ptext16 573C  
                                     __ptext41 4A42                                       __ptext33 3632  
                                     __ptext25 3FE2                                       __ptext17 66DA  
                                     __ptext50 6496                                       __ptext42 60C0  
                                     __ptext34 627E                                       __ptext26 4164  
                                     __ptext18 5D40                                       __ptext51 59E6  
                                     __ptext43 3E4E                                       __ptext35 6086  
                                     __ptext27 57A2                                       __ptext19 444E  
                                     __ptext60 2CE8                                       __ptext52 55FE  
                                     __ptext44 612C                                       __ptext36 62FA  
                                     __ptext28 4AE6                                       __ptext61 29D0  
                                     __ptext53 6386                                       __ptext45 3AF4  
                                     __ptext37 5F18                                       __ptext29 4D4C  
                                     __ptext70 5AE8                                       __ptext62 1CAE  
                                     __ptext54 6646                                       __ptext46 22E2  
                                     __ptext38 5080                                       __ptext71 5F56  
                                     __ptext63 5C68                                       __ptext55 6654  
                                     __ptext47 0000                                       __ptext39 1ED8  
                          ??_MXK_BlockSwitchTo 00C0                                       __ptext80 2E68  
                                     __ptext72 3400                                       __ptext64 141A  
                                     __ptext56 63C4                                       __ptext48 105A  
                                     __ptext81 4C24                                       __ptext73 66FA  
                                     __ptext65 6662                                       __ptext57 3CA4  
                                     __ptext49 47AA                                       __ptext90 5B38  
                                     __ptext82 5A3E                                       __ptext74 66A4  
                                     __ptext66 4850                                       __ptext58 3140  
                                     __ptext91 5668                                       __ptext83 4656  
                                     __ptext75 5E56                                       __ptext67 48F6  
                                     __ptext59 6698                                       __ptext92 6400  
                                     __ptext84 63E2                                       __ptext76 64B2  
                                     __ptext68 499C                                       __ptext93 641E  
                                     __ptext85 6320                                       __ptext77 6670  
                                     __ptext69 586C                                       __ptext94 66C6  
                                     __ptext86 5526                                       __ptext78 5F94  
                                     __ptext95 20E8                                       __ptext87 6626  
                                     __ptext79 5A96                                       __ptext96 53CE  
                                     __ptext88 54B6                                       __ptext97 04A6  
                                     __ptext89 535A                                       __ptext98 32A0  
                                     __ptext99 4222                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                            _ADC_ClockDivision 4EF0                                   ?_ADC_SetupIO 0001  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 63C4                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00D3  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                             ?_ADC_ClockDivision 0001  
                                 ?_ADC_Voltage 00E1                            __end_of_MXK_Dequeue 5F94  
                            HMI_SetSegments@in 00BE                          Button_Init@pThreshold 0102  
                                     _safeToGo 5BD4                                  __size_of_main 00E0  
                                __size_of_init 00A6                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C5                         __end_of_Console_Render 20E8  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 5C1E                            __end_of_MXK_Release 64CE  
                               _MXK_TestButton 65AC                                  i2_Byte_SetBit 5B88  
                      __end_of_move_and_rotate 5080                            ??_ADC_ClockDivision 00BA  
                                 _iRDistanceSS 0322                                    _irobot_leds 59E6  
                                  _irobot_init 6646                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 444E                                 ADC_Voltage@max 00E7  
                               ADC_Voltage@ref 00EB                      __end_of_MXK_BlockSwitchTo 5FD2  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer0_Init 0160  
                         __size_of_Timer2_Init 0160                                       int$flags 0051  
                         __size_of_Timer0_Stop 0006                                   _Port_SetType 1CAE  
                                 Port_Set@Type 00E0                     __size_of_GetPortProperties 00A6  
                       __size_of_LCD_DrawField 00A4                                   _iRDropCaster 002F  
                  __size_of_load_iRScriptStack 006A                              ??_Configure_GPIOs 00EF  
                            ??_findClosestWall 03F6                                      printf@val 00E0  
                                 _SSP1STATbits 000FC7                           __size_of_Motor_Speed 002A  
                               Timer0_Init@DIV 032A                                 Timer0_Init@PRE 008C  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 5CF8  
                                   _HMI_GetBar 670C                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DF                               ??_Port_TogglePin 00D1  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00CC                                     _HMI_SetBar 66D0  
                                   _HMI_Render 5F18                               Byte_SetZone@MASK 00C4  
                                  i2_MXK_Queue 667E                      __end_of_ADC_ClockDivision 4F7A  
                               Timer2_Init@DIV 0326                                 Timer2_Init@PRE 008A  
                             Byte_SetZone@pMax 00BC                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D5  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00CA                  __end_of_update_bump_and_cliff 6086  
                           LCD_FillRectangle@i 00CF                             LCD_FillRectangle@j 00D0  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00BA                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00C1                               ___lldiv@dividend 00BA  
                       __end_of_MXK_TestButton 65C4                                ?_Console_Render 0001  
                                _iRScriptIndex 0037                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D6  
                     irobot_query_and_update@j 00D4                                 _SPI_DisableISR 62D2  
                   __end_of_twos_complement_of 5E56                       irobot_rotate@rotateAngle 00D7  
                              Port_Init@pInput 0101                                       printf@ap 00DE  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D9                                     _ISR_Enable 66C6  
                             ?_HMI_SetSegments 00BB                        Console_MakeField@Column 00C6  
                        __size_of_SPI_MaxSpeed 0074                               ??_ADC_SetChannel 00BA  
                                SPI_DCS@pInput 00BA                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00C0                                    ??_rx_assign 00BD  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                            ADC_Voltage@pInput 00E1                        Console_MakeField@pInput 00C5  
                             ?_HMI_RightSwitch 0001                               ___lldiv@quotient 00C2  
                                ??_GetPortPORT 00BC                                ___lwmod@divisor 00C3  
                                ??_GetPortTRIS 00BC                          Timer0_Start@pFunction 00BA  
                           Word_SetPair@pInput 00C9                                ___lwmod@counter 00C5  
                           Word_SetPair@pValue 00CC                       ?_irobot_query_and_update 00C0  
                             Motor_Init@pMotor 00E7                                    _MXK_Dequeue 5F56  
                            ADC_Voltage@output 00EF                                  _distanceTotal 0075  
                               LED_Toggle@pLED 00D2                                  _LCD_DrawField 4A42  
                             _Port_SetQuadType 1A58                                    _MXK_Release 64B2  
                    __size_of_Console_FormFeed 008E                                   _MXK_SwitchTo 5E56  
                        __size_of_Word_GetPair 003E              irobot_query_and_update@startIndex 00D5  
                           Byte_GetZone@Offset 00C1                                  ?_Console_Init 0001  
                            Word_SetPair@pPair 00CB                                _Port_SetPinType 2672  
                      __size_of_Timer0_Restart 000C                             Byte_GetZone@Output 00C2  
                           Byte_GetZone@pChunk 00BD                                ?_MXK_TestButton 0001  
                  __end_of_Console_ResetCursor 63C4                             Byte_GetZone@pInput 00BA  
                      __size_ofi2_MXK_SwitchTo 0036                __end_of_Console_IncrementCursor 5808  
                        __size_of_Word_SetPair 0046                         __end_of_SPI_DisableISR 62FA  
                                 _SPI_MaxSpeed 535A              irobot_query_and_update@streamSize 00D1  
                                 _SPI_MinSpeed 53CE                             Port_Set@TypeActual 00DE  
                             ?_move_and_rotate 0001  
