

Microchip Technology PIC18 LITE Macro Assembler V1.43 build -156212558 
                                                                                               Fri Sep 08 18:47:12 2017

Microchip Technology Omniscient Code Generator v1.43 (Free mode) build 201707250354
     1                           	processor	18F67J50
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK3,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK3,global,class=BANK3,space=1,delta=1,lowdata,noexec
    16                           	psect	bssBANK4,global,class=BANK4,space=1,delta=1,lowdata,noexec
    17                           	psect	bssBIGRAM,global,class=BIGRAM,space=1,delta=1,lowdata,noexec
    18                           	psect	cstackBANK3,global,class=BANK3,space=1,delta=1,noexec
    19                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1,noexec
    20                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    21                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    22                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    23                           	psect	text0,global,reloc=2,class=CODE,delta=1
    24                           	psect	text1,global,reloc=2,class=CODE,delta=1
    25                           	psect	text2,global,reloc=2,class=CODE,delta=1
    26                           	psect	text3,global,reloc=2,class=CODE,delta=1
    27                           	psect	text4,global,reloc=2,class=CODE,delta=1
    28                           	psect	text5,global,reloc=2,class=CODE,delta=1
    29                           	psect	text6,global,reloc=2,class=CODE,delta=1
    30                           	psect	text7,global,reloc=2,class=CODE,delta=1
    31                           	psect	text8,global,reloc=2,class=CODE,delta=1
    32                           	psect	text9,global,reloc=2,class=CODE,delta=1
    33                           	psect	text10,global,reloc=2,class=CODE,delta=1
    34                           	psect	text11,global,reloc=2,class=CODE,delta=1,inline
    35                           	psect	text12,global,reloc=2,class=CODE,delta=1
    36                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text14,global,reloc=2,class=CODE,delta=1
    38                           	psect	text15,global,reloc=2,class=CODE,delta=1
    39                           	psect	text16,global,reloc=2,class=CODE,delta=1
    40                           	psect	text17,global,reloc=2,class=CODE,delta=1
    41                           	psect	text18,global,reloc=2,class=CODE,delta=1
    42                           	psect	text19,global,reloc=2,class=CODE,delta=1
    43                           	psect	text20,global,reloc=2,class=CODE,delta=1
    44                           	psect	text21,global,reloc=2,class=CODE,delta=1
    45                           	psect	text22,global,reloc=2,class=CODE,delta=1
    46                           	psect	text23,global,reloc=2,class=CODE,delta=1
    47                           	psect	text24,global,reloc=2,class=CODE,delta=1
    48                           	psect	text25,global,reloc=2,class=CODE,delta=1
    49                           	psect	text26,global,reloc=2,class=CODE,delta=1
    50                           	psect	text27,global,reloc=2,class=CODE,delta=1
    51                           	psect	text28,global,reloc=2,class=CODE,delta=1
    52                           	psect	text29,global,reloc=2,class=CODE,delta=1
    53                           	psect	text30,global,reloc=2,class=CODE,delta=1
    54                           	psect	text31,global,reloc=2,class=CODE,delta=1
    55                           	psect	text32,global,reloc=2,class=CODE,delta=1
    56                           	psect	text33,global,reloc=2,class=CODE,delta=1
    57                           	psect	text34,global,reloc=2,class=CODE,delta=1
    58                           	psect	text35,global,reloc=2,class=CODE,delta=1
    59                           	psect	text36,global,reloc=2,class=CODE,delta=1
    60                           	psect	text37,global,reloc=2,class=CODE,delta=1
    61                           	psect	text38,global,reloc=2,class=CODE,delta=1
    62                           	psect	text39,global,reloc=2,class=CODE,delta=1
    63                           	psect	text40,global,reloc=2,class=CODE,delta=1
    64                           	psect	text41,global,reloc=2,class=CODE,delta=1
    65                           	psect	text42,global,reloc=2,class=CODE,delta=1
    66                           	psect	text43,global,reloc=2,class=CODE,delta=1
    67                           	psect	text44,global,reloc=2,class=CODE,delta=1
    68                           	psect	text45,global,reloc=2,class=CODE,delta=1
    69                           	psect	text46,global,reloc=2,class=CODE,delta=1
    70                           	psect	text47,global,reloc=2,class=CODE,delta=1
    71                           	psect	text48,global,reloc=2,class=CODE,delta=1
    72                           	psect	text49,global,reloc=2,class=CODE,delta=1
    73                           	psect	text50,global,reloc=2,class=CODE,delta=1
    74                           	psect	text51,global,reloc=2,class=CODE,delta=1
    75                           	psect	text52,global,reloc=2,class=CODE,delta=1
    76                           	psect	text53,global,reloc=2,class=CODE,delta=1
    77                           	psect	text54,global,reloc=2,class=CODE,delta=1
    78                           	psect	text55,global,reloc=2,class=CODE,delta=1
    79                           	psect	text56,global,reloc=2,class=CODE,delta=1
    80                           	psect	text57,global,reloc=2,class=CODE,delta=1
    81                           	psect	text58,global,reloc=2,class=CODE,delta=1
    82                           	psect	text59,global,reloc=2,class=CODE,delta=1
    83                           	psect	text60,global,reloc=2,class=CODE,delta=1,inline
    84                           	psect	text61,global,reloc=2,class=CODE,delta=1,inline
    85                           	psect	text62,global,reloc=2,class=CODE,delta=1
    86                           	psect	text63,global,reloc=2,class=CODE,delta=1
    87                           	psect	text64,global,reloc=2,class=CODE,delta=1
    88                           	psect	text65,global,reloc=2,class=CODE,delta=1
    89                           	psect	text66,global,reloc=2,class=CODE,delta=1
    90                           	psect	text67,global,reloc=2,class=CODE,delta=1
    91                           	psect	text68,global,reloc=2,class=CODE,delta=1
    92                           	psect	text69,global,reloc=2,class=CODE,delta=1
    93                           	psect	text70,global,reloc=2,class=CODE,delta=1
    94                           	psect	text71,global,reloc=2,class=CODE,delta=1
    95                           	psect	text72,global,reloc=2,class=CODE,delta=1
    96                           	psect	text73,global,reloc=2,class=CODE,delta=1
    97                           	psect	text74,global,reloc=2,class=CODE,delta=1
    98                           	psect	text75,global,reloc=2,class=CODE,delta=1
    99                           	psect	text76,global,reloc=2,class=CODE,delta=1
   100                           	psect	text77,global,reloc=2,class=CODE,delta=1
   101                           	psect	text78,global,reloc=2,class=CODE,delta=1,group=1
   102                           	psect	text79,global,reloc=2,class=CODE,delta=1,group=1
   103                           	psect	text80,global,reloc=2,class=CODE,delta=1
   104                           	psect	text81,global,reloc=2,class=CODE,delta=1
   105                           	psect	text82,global,reloc=2,class=CODE,delta=1
   106                           	psect	text83,global,reloc=2,class=CODE,delta=1
   107                           	psect	text84,global,reloc=2,class=CODE,delta=1
   108                           	psect	text85,global,reloc=2,class=CODE,delta=1
   109                           	psect	text86,global,reloc=2,class=CODE,delta=1
   110                           	psect	text87,global,reloc=2,class=CODE,delta=1
   111                           	psect	text88,global,reloc=2,class=CODE,delta=1
   112                           	psect	text89,global,reloc=2,class=CODE,delta=1
   113                           	psect	text90,global,reloc=2,class=CODE,delta=1
   114                           	psect	text91,global,reloc=2,class=CODE,delta=1
   115                           	psect	text92,global,reloc=2,class=CODE,delta=1
   116                           	psect	text93,global,reloc=2,class=CODE,delta=1,group=1
   117                           	psect	text94,global,reloc=2,class=CODE,delta=1
   118                           	psect	text95,global,reloc=2,class=CODE,delta=1
   119                           	psect	text96,global,reloc=2,class=CODE,delta=1
   120                           	psect	text97,global,reloc=2,class=CODE,delta=1
   121                           	psect	text98,global,reloc=2,class=CODE,delta=1
   122                           	psect	text99,global,reloc=2,class=CODE,delta=1
   123                           	psect	text100,global,reloc=2,class=CODE,delta=1
   124                           	psect	text101,global,reloc=2,class=CODE,delta=1
   125                           	psect	text102,global,reloc=2,class=CODE,delta=1
   126                           	psect	text103,global,reloc=2,class=CODE,delta=1
   127                           	psect	text104,global,reloc=2,class=CODE,delta=1
   128                           	psect	text105,global,reloc=2,class=CODE,delta=1
   129                           	psect	text106,global,reloc=2,class=CODE,delta=1
   130                           	psect	text107,global,reloc=2,class=CODE,delta=1
   131                           	psect	text108,global,reloc=2,class=CODE,delta=1
   132                           	psect	text109,global,reloc=2,class=CODE,delta=1
   133                           	psect	text110,global,reloc=2,class=CODE,delta=1
   134                           	psect	text111,global,reloc=2,class=CODE,delta=1,inline
   135                           	psect	text112,global,reloc=2,class=CODE,delta=1
   136                           	psect	text113,global,reloc=2,class=CODE,delta=1,inline
   137                           	psect	text114,global,reloc=2,class=CODE,delta=1
   138                           	psect	text115,global,reloc=2,class=CODE,delta=1
   139                           	psect	text116,global,reloc=2,class=CODE,delta=1
   140                           	psect	text117,global,reloc=2,class=CODE,delta=1,group=1
   141                           	psect	text118,global,reloc=2,class=CODE,delta=1
   142                           	psect	text119,global,reloc=2,class=CODE,delta=1
   143                           	psect	text120,global,reloc=2,class=CODE,delta=1
   144                           	psect	text121,global,reloc=2,class=CODE,delta=1
   145                           	psect	text122,global,reloc=2,class=CODE,delta=1,inline
   146                           	psect	text123,global,reloc=2,class=CODE,delta=1
   147                           	psect	text124,global,reloc=2,class=CODE,delta=1
   148                           	psect	text125,global,reloc=2,class=CODE,delta=1
   149                           	psect	intcode,global,reloc=2,class=CODE,delta=1
   150                           	psect	text127,global,reloc=2,class=CODE,delta=1
   151                           	psect	text128,global,reloc=2,class=CODE,delta=1
   152                           	psect	text129,global,reloc=2,class=CODE,delta=1
   153                           	psect	text130,global,reloc=2,class=CODE,delta=1
   154                           	psect	text131,global,reloc=2,class=CODE,delta=1
   155                           	psect	text132,global,reloc=2,class=CODE,delta=1
   156                           	psect	text133,global,reloc=2,class=CODE,delta=1
   157                           	psect	text134,global,reloc=2,class=CODE,delta=1,inline
   158                           	psect	text135,global,reloc=2,class=CODE,delta=1
   159                           	psect	text136,global,reloc=2,class=CODE,delta=1
   160                           	psect	text137,global,reloc=2,class=CODE,delta=1
   161                           	psect	text138,global,reloc=2,class=CODE,delta=1
   162                           	psect	text139,global,reloc=2,class=CODE,delta=1
   163                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
   164                           	psect	text140,global,reloc=2,class=CODE,delta=1
   165                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
   166                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
   167  0000                     
   168                           ; Version 1.43
   169                           ; Generated 25/07/2017 GMT
   170                           ; 
   171                           ; Copyright © 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   172                           ; All rights reserved.
   173                           ; 
   174                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   175                           ; 
   176                           ; Redistribution and use in source and binary forms, with or without modification, are
   177                           ; permitted provided that the following conditions are met:
   178                           ; 
   179                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   180                           ;        conditions and the following disclaimer.
   181                           ; 
   182                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   183                           ;        of conditions and the following disclaimer in the documentation and/or other
   184                           ;        materials provided with the distribution.
   185                           ; 
   186                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   187                           ;        software without specific prior written permission.
   188                           ; 
   189                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   190                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   191                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   192                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   193                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   194                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   195                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   196                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   197                           ; 
   198                           ; 
   199                           ; Code-generator required, PIC18F67J50 Definitions
   200                           ; 
   201                           ; SFR Addresses
   202  0000                     
   203                           	psect	idataCOMRAM
   204  0149B8                     __pidataCOMRAM:
   205                           	opt stack 0
   206                           
   207                           ;initializer for _gCursor
   208  0149B8  0006               	dw	6
   209  0149BA  0006               	dw	6
   210                           
   211                           ;initializer for _Bus_State
   212  0149BC  01                 	db	1
   213                           
   214                           ;initializer for _A
   215  0149BD  41                 	db	65
   216                           
   217                           ;initializer for _a
   218  0149BE  61                 	db	97
   219                           
   220                           ;initializer for _zero
   221  0149BF  30                 	db	48
   222                           
   223                           ;initializer for _l
   224  0149C0  80                 	db	128
   225                           
   226                           ;initializer for _w
   227  0149C1  80                 	db	128
   228                           
   229                           	psect	idataBANK0
   230  0149E4                     __pidataBANK0:
   231                           	opt stack 0
   232                           
   233                           ;initializer for _gCharSize
   234  0149E4  0005               	dw	5
   235  0149E6  0007               	dw	7
   236                           
   237                           ;initializer for _gForecolour
   238  0149E8  FFFF               	dw	65535
   239                           
   240                           ;initializer for _change
   241  0149EA  01                 	db	1
   242                           
   243                           	psect	idataBANK3
   244  0149CC                     __pidataBANK3:
   245                           	opt stack 0
   246                           
   247                           ;initializer for Console_Render@F6956
   248  0149CC  0006               	dw	6
   249  0149CE  0006               	dw	6
   250                           
   251                           ;initializer for _gLineSize
   252  0149D0  0080               	dw	128
   253  0149D2  0007               	dw	7
   254                           
   255                           	psect	mediumconst
   256  00FCE4                     __pmediumconst:
   257                           	opt stack 0
   258  00FCE4  00                 	db	0
   259  00FCE5                     _InitList:
   260                           	opt stack 0
   261  00FCE5  1100               	dw	4352
   262  00FCE7  0080               	dw	128
   263  00FCE9  012C               	dw	300
   264  00FCEB  B100               	dw	45312
   265  00FCED  0002               	dw	2
   266  00FCEF  0035               	dw	53
   267  00FCF1  0036               	dw	54
   268  00FCF3  B200               	dw	45568
   269  00FCF5  0002               	dw	2
   270  00FCF7  0035               	dw	53
   271  00FCF9  0036               	dw	54
   272  00FCFB  B300               	dw	45824
   273  00FCFD  0002               	dw	2
   274  00FCFF  0035               	dw	53
   275  00FD01  0036               	dw	54
   276  00FD03  0002               	dw	2
   277  00FD05  0035               	dw	53
   278  00FD07  0036               	dw	54
   279  00FD09  B400               	dw	46080
   280  00FD0B  0000               	dw	0
   281  00FD0D  C000               	dw	49152
   282  00FD0F  00A2               	dw	162
   283  00FD11  0002               	dw	2
   284  00FD13  0084               	dw	132
   285  00FD15  C100               	dw	49408
   286  00FD17  00C5               	dw	197
   287  00FD19  C200               	dw	49664
   288  00FD1B  000D               	dw	13
   289  00FD1D  0000               	dw	0
   290  00FD1F  C300               	dw	49920
   291  00FD21  008D               	dw	141
   292  00FD23  002A               	dw	42
   293  00FD25  C400               	dw	50176
   294  00FD27  008D               	dw	141
   295  00FD29  00EE               	dw	238
   296  00FD2B  C500               	dw	50432
   297  00FD2D  000A               	dw	10
   298  00FD2F  3600               	dw	13824
   299  00FD31  00C8               	dw	200
   300  00FD33  E000               	dw	57344
   301  00FD35  0012               	dw	18
   302  00FD37  001C               	dw	28
   303  00FD39  0010               	dw	16
   304  00FD3B  0018               	dw	24
   305  00FD3D  0033               	dw	51
   306  00FD3F  002C               	dw	44
   307  00FD41  0025               	dw	37
   308  00FD43  0028               	dw	40
   309  00FD45  0028               	dw	40
   310  00FD47  0027               	dw	39
   311  00FD49  002F               	dw	47
   312  00FD4B  003C               	dw	60
   313  00FD4D  0000               	dw	0
   314  00FD4F  0003               	dw	3
   315  00FD51  0003               	dw	3
   316  00FD53  0010               	dw	16
   317  00FD55  0080               	dw	128
   318  00FD57  0078               	dw	120
   319  00FD59  E100               	dw	57600
   320  00FD5B  0012               	dw	18
   321  00FD5D  001C               	dw	28
   322  00FD5F  0010               	dw	16
   323  00FD61  0018               	dw	24
   324  00FD63  002D               	dw	45
   325  00FD65  0028               	dw	40
   326  00FD67  0023               	dw	35
   327  00FD69  0028               	dw	40
   328  00FD6B  0028               	dw	40
   329  00FD6D  0026               	dw	38
   330  00FD6F  002F               	dw	47
   331  00FD71  003B               	dw	59
   332  00FD73  0000               	dw	0
   333  00FD75  0003               	dw	3
   334  00FD77  0003               	dw	3
   335  00FD79  0010               	dw	16
   336  00FD7B  3A00               	dw	14848
   337  00FD7D  0005               	dw	5
   338  00FD7F  2A00               	dw	10752
   339  00FD81  0000               	dw	0
   340  00FD83  0002               	dw	2
   341  00FD85  0000               	dw	0
   342  00FD87  0081               	dw	129
   343  00FD89  2B00               	dw	11008
   344  00FD8B  0000               	dw	0
   345  00FD8D  0003               	dw	3
   346  00FD8F  0000               	dw	0
   347  00FD91  00A2               	dw	162
   348  00FD93  2900               	dw	10496
   349  00FD95  2C00               	dw	11264
   350  00FD97                     __end_of_InitList:
   351                           	opt stack 0
   352  00FD97                     Timer0_Init@PRESCALE:
   353                           	opt stack 0
   354  00FD97  0002               	dw	2
   355  00FD99  0004               	dw	4
   356  00FD9B  0008               	dw	8
   357  00FD9D  0010               	dw	16
   358  00FD9F  0020               	dw	32
   359  00FDA1  0040               	dw	64
   360  00FDA3  0080               	dw	128
   361  00FDA5  0100               	dw	256
   362  00FDA7                     __end_ofTimer0_Init@PRESCALE:
   363                           	opt stack 0
   364  00FDA7                     PortProperty_Valid@F6830:
   365                           	opt stack 0
   366  00FDA7  00                 	db	0
   367  00FDA8  01                 	db	1
   368  00FDA9  02                 	db	2
   369  00FDAA  00                 	db	0
   370  00FDAB  01                 	db	1
   371  00FDAC  00                 	db	0
   372  00FDAD  01                 	db	1
   373  00FDAE  00                 	db	0
   374  00FDAF  02                 	db	2
   375  00FDB0  02                 	db	2
   376  00FDB1  00                 	db	0
   377  00FDB2  00                 	db	0
   378  00FDB3  03                 	db	3
   379  00FDB4  03                 	db	3
   380  00FDB5  03                 	db	3
   381  00FDB6  00                 	db	0
   382  00FDB7                     __end_ofPortProperty_Valid@F6830:
   383                           	opt stack 0
   384  00FDB7                     _dpowers:
   385                           	opt stack 0
   386  00FDB7  0001               	dw	1
   387  00FDB9  000A               	dw	10
   388  00FDBB  0064               	dw	100
   389  00FDBD  03E8               	dw	1000
   390  00FDBF  2710               	dw	10000
   391  00FDC1                     __end_of_dpowers:
   392                           	opt stack 0
   393  00FDC1                     _MASKS:
   394                           	opt stack 0
   395  00FDC1  00                 	db	0
   396  00FDC2  01                 	db	1
   397  00FDC3  03                 	db	3
   398  00FDC4  07                 	db	7
   399  00FDC5  0F                 	db	15
   400  00FDC6  1F                 	db	31
   401  00FDC7  3F                 	db	63
   402  00FDC8  7F                 	db	127
   403  00FDC9  FF                 	db	255
   404  00FDCA                     __end_of_MASKS:
   405                           	opt stack 0
   406  00FDCA                     HMI_SetButton@F7213:
   407                           	opt stack 0
   408  00FDCA  00                 	db	0
   409  00FDCB  02                 	db	2
   410  00FDCC  01                 	db	1
   411  00FDCD  03                 	db	3
   412  00FDCE                     __end_ofHMI_SetButton@F7213:
   413                           	opt stack 0
   414  00FDCE                     Timer2_Init@PRESCALE:
   415                           	opt stack 0
   416  00FDCE  01                 	db	1
   417  00FDCF  04                 	db	4
   418  00FDD0  10                 	db	16
   419  00FDD1                     __end_ofTimer2_Init@PRESCALE:
   420                           	opt stack 0
   421  00FDD1                     _Font5x7:
   422                           	opt stack 0
   423  00FDD1  00                 	db	0
   424  00FDD2  00                 	db	0
   425  00FDD3  00                 	db	0
   426  00FDD4  00                 	db	0
   427  00FDD5  00                 	db	0
   428  00FDD6  00                 	db	0
   429  00FDD7  00                 	db	0
   430  00FDD8  5F                 	db	95
   431  00FDD9  00                 	db	0
   432  00FDDA  00                 	db	0
   433  00FDDB  00                 	db	0
   434  00FDDC  07                 	db	7
   435  00FDDD  00                 	db	0
   436  00FDDE  07                 	db	7
   437  00FDDF  00                 	db	0
   438  00FDE0  14                 	db	20
   439  00FDE1  7F                 	db	127
   440  00FDE2  14                 	db	20
   441  00FDE3  7F                 	db	127
   442  00FDE4  14                 	db	20
   443  00FDE5  24                 	db	36
   444  00FDE6  2A                 	db	42
   445  00FDE7  7F                 	db	127
   446  00FDE8  2A                 	db	42
   447  00FDE9  12                 	db	18
   448  00FDEA  23                 	db	35
   449  00FDEB  13                 	db	19
   450  00FDEC  08                 	db	8
   451  00FDED  64                 	db	100
   452  00FDEE  62                 	db	98
   453  00FDEF  36                 	db	54
   454  00FDF0  49                 	db	73
   455  00FDF1  55                 	db	85
   456  00FDF2  22                 	db	34
   457  00FDF3  50                 	db	80
   458  00FDF4  00                 	db	0
   459  00FDF5  05                 	db	5
   460  00FDF6  03                 	db	3
   461  00FDF7  00                 	db	0
   462  00FDF8  00                 	db	0
   463  00FDF9  00                 	db	0
   464  00FDFA  1C                 	db	28
   465  00FDFB  22                 	db	34
   466  00FDFC  41                 	db	65
   467  00FDFD  00                 	db	0
   468  00FDFE  00                 	db	0
   469  00FDFF  41                 	db	65
   470  00FE00  22                 	db	34
   471  00FE01  1C                 	db	28
   472  00FE02  00                 	db	0
   473  00FE03  08                 	db	8
   474  00FE04  2A                 	db	42
   475  00FE05  1C                 	db	28
   476  00FE06  2A                 	db	42
   477  00FE07  08                 	db	8
   478  00FE08  08                 	db	8
   479  00FE09  08                 	db	8
   480  00FE0A  3E                 	db	62
   481  00FE0B  08                 	db	8
   482  00FE0C  08                 	db	8
   483  00FE0D  00                 	db	0
   484  00FE0E  50                 	db	80
   485  00FE0F  30                 	db	48
   486  00FE10  00                 	db	0
   487  00FE11  00                 	db	0
   488  00FE12  08                 	db	8
   489  00FE13  08                 	db	8
   490  00FE14  08                 	db	8
   491  00FE15  08                 	db	8
   492  00FE16  08                 	db	8
   493  00FE17  00                 	db	0
   494  00FE18  60                 	db	96
   495  00FE19  60                 	db	96
   496  00FE1A  00                 	db	0
   497  00FE1B  00                 	db	0
   498  00FE1C  20                 	db	32
   499  00FE1D  10                 	db	16
   500  00FE1E  08                 	db	8
   501  00FE1F  04                 	db	4
   502  00FE20  02                 	db	2
   503  00FE21  3E                 	db	62
   504  00FE22  51                 	db	81
   505  00FE23  49                 	db	73
   506  00FE24  45                 	db	69
   507  00FE25  3E                 	db	62
   508  00FE26  00                 	db	0
   509  00FE27  42                 	db	66
   510  00FE28  7F                 	db	127
   511  00FE29  40                 	db	64
   512  00FE2A  00                 	db	0
   513  00FE2B  42                 	db	66
   514  00FE2C  61                 	db	97
   515  00FE2D  51                 	db	81
   516  00FE2E  49                 	db	73
   517  00FE2F  46                 	db	70
   518  00FE30  21                 	db	33
   519  00FE31  41                 	db	65
   520  00FE32  45                 	db	69
   521  00FE33  4B                 	db	75
   522  00FE34  31                 	db	49
   523  00FE35  18                 	db	24
   524  00FE36  14                 	db	20
   525  00FE37  12                 	db	18
   526  00FE38  7F                 	db	127
   527  00FE39  10                 	db	16
   528  00FE3A  27                 	db	39
   529  00FE3B  45                 	db	69
   530  00FE3C  45                 	db	69
   531  00FE3D  45                 	db	69
   532  00FE3E  39                 	db	57
   533  00FE3F  3C                 	db	60
   534  00FE40  4A                 	db	74
   535  00FE41  49                 	db	73
   536  00FE42  49                 	db	73
   537  00FE43  30                 	db	48
   538  00FE44  01                 	db	1
   539  00FE45  71                 	db	113
   540  00FE46  09                 	db	9
   541  00FE47  05                 	db	5
   542  00FE48  03                 	db	3
   543  00FE49  36                 	db	54
   544  00FE4A  49                 	db	73
   545  00FE4B  49                 	db	73
   546  00FE4C  49                 	db	73
   547  00FE4D  36                 	db	54
   548  00FE4E  06                 	db	6
   549  00FE4F  49                 	db	73
   550  00FE50  49                 	db	73
   551  00FE51  29                 	db	41
   552  00FE52  1E                 	db	30
   553  00FE53  00                 	db	0
   554  00FE54  36                 	db	54
   555  00FE55  36                 	db	54
   556  00FE56  00                 	db	0
   557  00FE57  00                 	db	0
   558  00FE58  00                 	db	0
   559  00FE59  56                 	db	86
   560  00FE5A  36                 	db	54
   561  00FE5B  00                 	db	0
   562  00FE5C  00                 	db	0
   563  00FE5D  00                 	db	0
   564  00FE5E  08                 	db	8
   565  00FE5F  14                 	db	20
   566  00FE60  22                 	db	34
   567  00FE61  41                 	db	65
   568  00FE62  14                 	db	20
   569  00FE63  14                 	db	20
   570  00FE64  14                 	db	20
   571  00FE65  14                 	db	20
   572  00FE66  14                 	db	20
   573  00FE67  41                 	db	65
   574  00FE68  22                 	db	34
   575  00FE69  14                 	db	20
   576  00FE6A  08                 	db	8
   577  00FE6B  00                 	db	0
   578  00FE6C  02                 	db	2
   579  00FE6D  01                 	db	1
   580  00FE6E  51                 	db	81
   581  00FE6F  09                 	db	9
   582  00FE70  06                 	db	6
   583  00FE71  32                 	db	50
   584  00FE72  49                 	db	73
   585  00FE73  79                 	db	121
   586  00FE74  41                 	db	65
   587  00FE75  3E                 	db	62
   588  00FE76  7E                 	db	126
   589  00FE77  11                 	db	17
   590  00FE78  11                 	db	17
   591  00FE79  11                 	db	17
   592  00FE7A  7E                 	db	126
   593  00FE7B  7F                 	db	127
   594  00FE7C  49                 	db	73
   595  00FE7D  49                 	db	73
   596  00FE7E  49                 	db	73
   597  00FE7F  36                 	db	54
   598  00FE80  3E                 	db	62
   599  00FE81  41                 	db	65
   600  00FE82  41                 	db	65
   601  00FE83  41                 	db	65
   602  00FE84  22                 	db	34
   603  00FE85  7F                 	db	127
   604  00FE86  41                 	db	65
   605  00FE87  41                 	db	65
   606  00FE88  22                 	db	34
   607  00FE89  1C                 	db	28
   608  00FE8A  7F                 	db	127
   609  00FE8B  49                 	db	73
   610  00FE8C  49                 	db	73
   611  00FE8D  49                 	db	73
   612  00FE8E  41                 	db	65
   613  00FE8F  7F                 	db	127
   614  00FE90  09                 	db	9
   615  00FE91  09                 	db	9
   616  00FE92  01                 	db	1
   617  00FE93  01                 	db	1
   618  00FE94  3E                 	db	62
   619  00FE95  41                 	db	65
   620  00FE96  41                 	db	65
   621  00FE97  51                 	db	81
   622  00FE98  32                 	db	50
   623  00FE99  7F                 	db	127
   624  00FE9A  08                 	db	8
   625  00FE9B  08                 	db	8
   626  00FE9C  08                 	db	8
   627  00FE9D  7F                 	db	127
   628  00FE9E  00                 	db	0
   629  00FE9F  41                 	db	65
   630  00FEA0  7F                 	db	127
   631  00FEA1  41                 	db	65
   632  00FEA2  00                 	db	0
   633  00FEA3  20                 	db	32
   634  00FEA4  40                 	db	64
   635  00FEA5  41                 	db	65
   636  00FEA6  3F                 	db	63
   637  00FEA7  01                 	db	1
   638  00FEA8  7F                 	db	127
   639  00FEA9  08                 	db	8
   640  00FEAA  14                 	db	20
   641  00FEAB  22                 	db	34
   642  00FEAC  41                 	db	65
   643  00FEAD  7F                 	db	127
   644  00FEAE  40                 	db	64
   645  00FEAF  40                 	db	64
   646  00FEB0  40                 	db	64
   647  00FEB1  40                 	db	64
   648  00FEB2  7F                 	db	127
   649  00FEB3  02                 	db	2
   650  00FEB4  04                 	db	4
   651  00FEB5  02                 	db	2
   652  00FEB6  7F                 	db	127
   653  00FEB7  7F                 	db	127
   654  00FEB8  04                 	db	4
   655  00FEB9  08                 	db	8
   656  00FEBA  10                 	db	16
   657  00FEBB  7F                 	db	127
   658  00FEBC  3E                 	db	62
   659  00FEBD  41                 	db	65
   660  00FEBE  41                 	db	65
   661  00FEBF  41                 	db	65
   662  00FEC0  3E                 	db	62
   663  00FEC1  7F                 	db	127
   664  00FEC2  09                 	db	9
   665  00FEC3  09                 	db	9
   666  00FEC4  09                 	db	9
   667  00FEC5  06                 	db	6
   668  00FEC6  3E                 	db	62
   669  00FEC7  41                 	db	65
   670  00FEC8  51                 	db	81
   671  00FEC9  21                 	db	33
   672  00FECA  5E                 	db	94
   673  00FECB  7F                 	db	127
   674  00FECC  09                 	db	9
   675  00FECD  19                 	db	25
   676  00FECE  29                 	db	41
   677  00FECF  46                 	db	70
   678  00FED0  46                 	db	70
   679  00FED1  49                 	db	73
   680  00FED2  49                 	db	73
   681  00FED3  49                 	db	73
   682  00FED4  31                 	db	49
   683  00FED5  01                 	db	1
   684  00FED6  01                 	db	1
   685  00FED7  7F                 	db	127
   686  00FED8  01                 	db	1
   687  00FED9  01                 	db	1
   688  00FEDA  3F                 	db	63
   689  00FEDB  40                 	db	64
   690  00FEDC  40                 	db	64
   691  00FEDD  40                 	db	64
   692  00FEDE  3F                 	db	63
   693  00FEDF  1F                 	db	31
   694  00FEE0  20                 	db	32
   695  00FEE1  40                 	db	64
   696  00FEE2  20                 	db	32
   697  00FEE3  1F                 	db	31
   698  00FEE4  7F                 	db	127
   699  00FEE5  20                 	db	32
   700  00FEE6  18                 	db	24
   701  00FEE7  20                 	db	32
   702  00FEE8  7F                 	db	127
   703  00FEE9  63                 	db	99
   704  00FEEA  14                 	db	20
   705  00FEEB  08                 	db	8
   706  00FEEC  14                 	db	20
   707  00FEED  63                 	db	99
   708  00FEEE  03                 	db	3
   709  00FEEF  04                 	db	4
   710  00FEF0  78                 	db	120
   711  00FEF1  04                 	db	4
   712  00FEF2  03                 	db	3
   713  00FEF3  61                 	db	97
   714  00FEF4  51                 	db	81
   715  00FEF5  49                 	db	73
   716  00FEF6  45                 	db	69
   717  00FEF7  43                 	db	67
   718  00FEF8  00                 	db	0
   719  00FEF9  00                 	db	0
   720  00FEFA  7F                 	db	127
   721  00FEFB  41                 	db	65
   722  00FEFC  41                 	db	65
   723  00FEFD  02                 	db	2
   724  00FEFE  04                 	db	4
   725  00FEFF  08                 	db	8
   726  00FF00  10                 	db	16
   727  00FF01  20                 	db	32
   728  00FF02  41                 	db	65
   729  00FF03  41                 	db	65
   730  00FF04  7F                 	db	127
   731  00FF05  00                 	db	0
   732  00FF06  00                 	db	0
   733  00FF07  04                 	db	4
   734  00FF08  02                 	db	2
   735  00FF09  01                 	db	1
   736  00FF0A  02                 	db	2
   737  00FF0B  04                 	db	4
   738  00FF0C  40                 	db	64
   739  00FF0D  40                 	db	64
   740  00FF0E  40                 	db	64
   741  00FF0F  40                 	db	64
   742  00FF10  40                 	db	64
   743  00FF11  00                 	db	0
   744  00FF12  01                 	db	1
   745  00FF13  02                 	db	2
   746  00FF14  04                 	db	4
   747  00FF15  00                 	db	0
   748  00FF16  20                 	db	32
   749  00FF17  54                 	db	84
   750  00FF18  54                 	db	84
   751  00FF19  54                 	db	84
   752  00FF1A  78                 	db	120
   753  00FF1B  7F                 	db	127
   754  00FF1C  48                 	db	72
   755  00FF1D  44                 	db	68
   756  00FF1E  44                 	db	68
   757  00FF1F  38                 	db	56
   758  00FF20  38                 	db	56
   759  00FF21  44                 	db	68
   760  00FF22  44                 	db	68
   761  00FF23  44                 	db	68
   762  00FF24  20                 	db	32
   763  00FF25  38                 	db	56
   764  00FF26  44                 	db	68
   765  00FF27  44                 	db	68
   766  00FF28  48                 	db	72
   767  00FF29  7F                 	db	127
   768  00FF2A  38                 	db	56
   769  00FF2B  54                 	db	84
   770  00FF2C  54                 	db	84
   771  00FF2D  54                 	db	84
   772  00FF2E  18                 	db	24
   773  00FF2F  08                 	db	8
   774  00FF30  7E                 	db	126
   775  00FF31  09                 	db	9
   776  00FF32  01                 	db	1
   777  00FF33  02                 	db	2
   778  00FF34  08                 	db	8
   779  00FF35  14                 	db	20
   780  00FF36  54                 	db	84
   781  00FF37  54                 	db	84
   782  00FF38  3C                 	db	60
   783  00FF39  7F                 	db	127
   784  00FF3A  08                 	db	8
   785  00FF3B  04                 	db	4
   786  00FF3C  04                 	db	4
   787  00FF3D  78                 	db	120
   788  00FF3E  00                 	db	0
   789  00FF3F  44                 	db	68
   790  00FF40  7D                 	db	125
   791  00FF41  40                 	db	64
   792  00FF42  00                 	db	0
   793  00FF43  20                 	db	32
   794  00FF44  40                 	db	64
   795  00FF45  44                 	db	68
   796  00FF46  3D                 	db	61
   797  00FF47  00                 	db	0
   798  00FF48  00                 	db	0
   799  00FF49  7F                 	db	127
   800  00FF4A  10                 	db	16
   801  00FF4B  28                 	db	40
   802  00FF4C  44                 	db	68
   803  00FF4D  00                 	db	0
   804  00FF4E  41                 	db	65
   805  00FF4F  7F                 	db	127
   806  00FF50  40                 	db	64
   807  00FF51  00                 	db	0
   808  00FF52  7C                 	db	124
   809  00FF53  04                 	db	4
   810  00FF54  18                 	db	24
   811  00FF55  04                 	db	4
   812  00FF56  78                 	db	120
   813  00FF57  7C                 	db	124
   814  00FF58  08                 	db	8
   815  00FF59  04                 	db	4
   816  00FF5A  04                 	db	4
   817  00FF5B  78                 	db	120
   818  00FF5C  38                 	db	56
   819  00FF5D  44                 	db	68
   820  00FF5E  44                 	db	68
   821  00FF5F  44                 	db	68
   822  00FF60  38                 	db	56
   823  00FF61  7C                 	db	124
   824  00FF62  14                 	db	20
   825  00FF63  14                 	db	20
   826  00FF64  14                 	db	20
   827  00FF65  08                 	db	8
   828  00FF66  08                 	db	8
   829  00FF67  14                 	db	20
   830  00FF68  14                 	db	20
   831  00FF69  18                 	db	24
   832  00FF6A  7C                 	db	124
   833  00FF6B  7C                 	db	124
   834  00FF6C  08                 	db	8
   835  00FF6D  04                 	db	4
   836  00FF6E  04                 	db	4
   837  00FF6F  08                 	db	8
   838  00FF70  48                 	db	72
   839  00FF71  54                 	db	84
   840  00FF72  54                 	db	84
   841  00FF73  54                 	db	84
   842  00FF74  20                 	db	32
   843  00FF75  04                 	db	4
   844  00FF76  3F                 	db	63
   845  00FF77  44                 	db	68
   846  00FF78  40                 	db	64
   847  00FF79  20                 	db	32
   848  00FF7A  3C                 	db	60
   849  00FF7B  40                 	db	64
   850  00FF7C  40                 	db	64
   851  00FF7D  20                 	db	32
   852  00FF7E  7C                 	db	124
   853  00FF7F  1C                 	db	28
   854  00FF80  20                 	db	32
   855  00FF81  40                 	db	64
   856  00FF82  20                 	db	32
   857  00FF83  1C                 	db	28
   858  00FF84  3C                 	db	60
   859  00FF85  40                 	db	64
   860  00FF86  30                 	db	48
   861  00FF87  40                 	db	64
   862  00FF88  3C                 	db	60
   863  00FF89  44                 	db	68
   864  00FF8A  28                 	db	40
   865  00FF8B  10                 	db	16
   866  00FF8C  28                 	db	40
   867  00FF8D  44                 	db	68
   868  00FF8E  0C                 	db	12
   869  00FF8F  50                 	db	80
   870  00FF90  50                 	db	80
   871  00FF91  50                 	db	80
   872  00FF92  3C                 	db	60
   873  00FF93  44                 	db	68
   874  00FF94  64                 	db	100
   875  00FF95  54                 	db	84
   876  00FF96  4C                 	db	76
   877  00FF97  44                 	db	68
   878  00FF98  00                 	db	0
   879  00FF99  08                 	db	8
   880  00FF9A  36                 	db	54
   881  00FF9B  41                 	db	65
   882  00FF9C  00                 	db	0
   883  00FF9D  00                 	db	0
   884  00FF9E  00                 	db	0
   885  00FF9F  7F                 	db	127
   886  00FFA0  00                 	db	0
   887  00FFA1  00                 	db	0
   888  00FFA2  00                 	db	0
   889  00FFA3  41                 	db	65
   890  00FFA4  36                 	db	54
   891  00FFA5  08                 	db	8
   892  00FFA6  00                 	db	0
   893  00FFA7  08                 	db	8
   894  00FFA8  08                 	db	8
   895  00FFA9  2A                 	db	42
   896  00FFAA  1C                 	db	28
   897  00FFAB  08                 	db	8
   898  00FFAC  08                 	db	8
   899  00FFAD  1C                 	db	28
   900  00FFAE  2A                 	db	42
   901  00FFAF  08                 	db	8
   902  00FFB0  08                 	db	8
   903  00FFB1                     __end_of_Font5x7:
   904                           	opt stack 0
   905  00FFB1                     _PortG_Property:
   906                           	opt stack 0
   907  00FFB1  FC00               	dw	64512
   908  00FFB3                     __end_of_PortG_Property:
   909                           	opt stack 0
   910  00FFB3                     _PortF_Property:
   911                           	opt stack 0
   912  00FFB3  0FFF               	dw	4095
   913  00FFB5                     __end_of_PortF_Property:
   914                           	opt stack 0
   915  00FFB5                     _PortE_Property:
   916                           	opt stack 0
   917  00FFB5  0000               	dw	0
   918  00FFB7                     __end_of_PortE_Property:
   919                           	opt stack 0
   920  00FFB7                     _PortD_Property:
   921                           	opt stack 0
   922  00FFB7  FFFF               	dw	65535
   923  00FFB9                     __end_of_PortD_Property:
   924                           	opt stack 0
   925  00FFB9                     _PortC_Property:
   926                           	opt stack 0
   927  00FFB9  FFF0               	dw	65520
   928  00FFBB                     __end_of_PortC_Property:
   929                           	opt stack 0
   930  00FFBB                     _PortB_Property:
   931                           	opt stack 0
   932  00FFBB  FF00               	dw	65280
   933  00FFBD                     __end_of_PortB_Property:
   934                           	opt stack 0
   935  00FFBD                     _PortA_Property:
   936                           	opt stack 0
   937  00FFBD  00FF               	dw	255
   938  00FFBF                     __end_of_PortA_Property:
   939                           	opt stack 0
   940  0000                     _TMR0	set	4054
   941  0000                     _RCREG1	set	4015
   942  0000                     _TXREG1	set	4014
   943  0000                     _SPBRG1	set	4016
   944  0000                     _TXSTA1bits	set	4013
   945  0000                     _BAUDCON1bits	set	3966
   946  0000                     _RCSTA1	set	4012
   947  0000                     _TXSTA1	set	4013
   948  0000                     _TRISCbits	set	3988
   949  0000                     _PR2	set	4043
   950  0000                     _T2CONbits	set	4042
   951  0000                     _T0CONbits	set	4053
   952  0000                     _RCONbits	set	4048
   953  0000                     _OSCTUNEbits	set	3995
   954  0000                     _PIR3	set	4004
   955  0000                     _PIR2	set	4001
   956  0000                     _PIR1	set	3998
   957  0000                     _INTCONbits	set	4082
   958  0000                     _SSP2CON2bits	set	3947
   959  0000                     _SSP1CON2bits	set	4037
   960  0000                     _SSP1ADD	set	4040
   961  0000                     _ANCON0	set	4033
   962  0000                     _ADRESL	set	4035
   963  0000                     _ADRESH	set	4036
   964  0000                     _ADCON1bits	set	4033
   965  0000                     _ADCON0bits	set	4034
   966  0000                     _SSP2CON1bits	set	3948
   967  0000                     _SSP1CON1bits	set	4038
   968  0000                     _SSP2STATbits	set	3949
   969  0000                     _SSP1STATbits	set	4039
   970  0000                     _PIE3bits	set	4003
   971  0000                     _PIE1bits	set	3997
   972  0000                     _PIR3bits	set	4004
   973  0000                     _PIR1bits	set	3998
   974  0000                     _IPR3bits	set	4005
   975  0000                     _IPR1bits	set	3999
   976  0000                     _PORTFbits	set	3973
   977  0000                     _SSP2CON2	set	3947
   978  0000                     _SSP1CON2	set	4037
   979  0000                     _SSP2BUF	set	3951
   980  0000                     _SSP2CON1	set	3948
   981  0000                     _SSP2STAT	set	3949
   982  0000                     _SSP1BUF	set	4041
   983  0000                     _SSP1CON1	set	4038
   984  0000                     _SSP1STAT	set	4039
   985  0000                     _LATG	set	3983
   986  0000                     _LATF	set	3982
   987  0000                     _LATE	set	3981
   988  0000                     _LATD	set	3980
   989  0000                     _LATC	set	3979
   990  0000                     _LATB	set	3978
   991  0000                     _LATA	set	3977
   992  0000                     _TRISG	set	3992
   993  0000                     _TRISF	set	3991
   994  0000                     _TRISE	set	3990
   995  0000                     _TRISD	set	3989
   996  0000                     _TRISC	set	3988
   997  0000                     _TRISB	set	3987
   998  0000                     _TRISA	set	3986
   999  0000                     _PORTG	set	3974
  1000  0000                     _PORTF	set	3973
  1001  0000                     _PORTE	set	3972
  1002  0000                     _PORTD	set	3971
  1003  0000                     _PORTC	set	3970
  1004  0000                     _PORTB	set	3969
  1005  0000                     _PORTA	set	3968
  1006  00FFBF                     STR_2:
  1007  00FFBF  54                 	db	84	;'T'
  1008  00FFC0  6F                 	db	111	;'o'
  1009  00FFC1  74                 	db	116	;'t'
  1010  00FFC2  61                 	db	97	;'a'
  1011  00FFC3  6C                 	db	108	;'l'
  1012  00FFC4  20                 	db	32
  1013  00FFC5  44                 	db	68	;'D'
  1014  00FFC6  69                 	db	105	;'i'
  1015  00FFC7  73                 	db	115	;'s'
  1016  00FFC8  74                 	db	116	;'t'
  1017  00FFC9  61                 	db	97	;'a'
  1018  00FFCA  6E                 	db	110	;'n'
  1019  00FFCB  63                 	db	99	;'c'
  1020  00FFCC  65                 	db	101	;'e'
  1021  00FFCD  3A                 	db	58	;':'
  1022  00FFCE  25                 	db	37
  1023  00FFCF  75                 	db	117	;'u'
  1024  00FFD0  0A                 	db	10
  1025  00FFD1  4C                 	db	76	;'L'
  1026  00FFD2  65                 	db	101	;'e'
  1027  00FFD3  66                 	db	102	;'f'
  1028  00FFD4  74                 	db	116	;'t'
  1029  00FFD5  20                 	db	32
  1030  00FFD6  42                 	db	66	;'B'
  1031  00FFD7  75                 	db	117	;'u'
  1032  00FFD8  6D                 	db	109	;'m'
  1033  00FFD9  70                 	db	112	;'p'
  1034  00FFDA  3A                 	db	58	;':'
  1035  00FFDB  25                 	db	37
  1036  00FFDC  75                 	db	117	;'u'
  1037  00FFDD  0A                 	db	10
  1038  00FFDE  52                 	db	82	;'R'
  1039  00FFDF  69                 	db	105	;'i'
  1040  00FFE0  67                 	db	103	;'g'
  1041  00FFE1  68                 	db	104	;'h'
  1042  00FFE2  74                 	db	116	;'t'
  1043  00FFE3  20                 	db	32
  1044  00FFE4  42                 	db	66	;'B'
  1045  00FFE5  75                 	db	117	;'u'
  1046  00FFE6  6D                 	db	109	;'m'
  1047  00FFE7  70                 	db	112	;'p'
  1048  00FFE8  3A                 	db	58	;':'
  1049  00FFE9  25                 	db	37
  1050  00FFEA  75                 	db	117	;'u'
  1051  00FFEB  0A                 	db	10
  1052  00FFEC  00                 	db	0
  1053  00FFED                     STR_4:
  1054  00FFED  44                 	db	68	;'D'
  1055  00FFEE  69                 	db	105	;'i'
  1056  00FFEF  73                 	db	115	;'s'
  1057  00FFF0  74                 	db	116	;'t'
  1058  00FFF1  61                 	db	97	;'a'
  1059  00FFF2  6E                 	db	110	;'n'
  1060  00FFF3  63                 	db	99	;'c'
  1061  00FFF4  65                 	db	101	;'e'
  1062  00FFF5  3A                 	db	58	;':'
  1063  00FFF6  20                 	db	32
  1064  00FFF7  25                 	db	37
  1065  00FFF8  64                 	db	100	;'d'
  1066  00FFF9  0A                 	db	10
  1067  00FFFA  00                 	db	0
  1068  00FFFB                     STR_1:
  1069  00FFFB  25                 	db	37
  1070  00FFFC  63                 	db	99	;'c'
  1071  00FFFD  00                 	db	0
  1072  0000                     
  1073                           ; #config settings
  1074  00FFFE  00                 	db	0	; dummy byte at the end
  1075  0000                     
  1076                           	psect	cinit
  1077  012D5A                     __pcinit:
  1078                           	opt stack 0
  1079  012D5A                     start_initialization:
  1080                           	opt stack 0
  1081  012D5A                     __initialization:
  1082                           	opt stack 0
  1083                           
  1084                           ; Initialize objects allocated to BANK3 (8 bytes)
  1085                           ; load TBLPTR registers with __pidataBANK3
  1086  012D5A  0ECC               	movlw	low __pidataBANK3
  1087  012D5C  6EF6               	movwf	tblptrl,c
  1088  012D5E  0E49               	movlw	high __pidataBANK3
  1089  012D60  6EF7               	movwf	tblptrh,c
  1090  012D62  0E01               	movlw	low (__pidataBANK3 shr (0+16))
  1091  012D64  6EF8               	movwf	tblptru,c
  1092  012D66  EE03  F0D5         	lfsr	0,__pdataBANK3
  1093  012D6A  EE10 F008          	lfsr	1,8
  1094  012D6E                     copy_data0:
  1095  012D6E  0009               	tblrd		*+
  1096  012D70  CFF5 FFEE          	movff	tablat,postinc0
  1097  012D74  50E5               	movf	postdec1,w,c
  1098  012D76  50E1               	movf	fsr1l,w,c
  1099  012D78  E1FA               	bnz	copy_data0
  1100                           
  1101                           ; Initialize objects allocated to BANK0 (7 bytes)
  1102                           ; load TBLPTR registers with __pidataBANK0
  1103  012D7A  0EE4               	movlw	low __pidataBANK0
  1104  012D7C  6EF6               	movwf	tblptrl,c
  1105  012D7E  0E49               	movlw	high __pidataBANK0
  1106  012D80  6EF7               	movwf	tblptrh,c
  1107  012D82  0E01               	movlw	low (__pidataBANK0 shr (0+16))
  1108  012D84  6EF8               	movwf	tblptru,c
  1109  012D86  EE00  F0F9         	lfsr	0,__pdataBANK0
  1110  012D8A  EE10 F007          	lfsr	1,7
  1111  012D8E                     copy_data1:
  1112  012D8E  0009               	tblrd		*+
  1113  012D90  CFF5 FFEE          	movff	tablat,postinc0
  1114  012D94  50E5               	movf	postdec1,w,c
  1115  012D96  50E1               	movf	fsr1l,w,c
  1116  012D98  E1FA               	bnz	copy_data1
  1117                           
  1118                           ; Initialize objects allocated to COMRAM (10 bytes)
  1119                           ; load TBLPTR registers with __pidataCOMRAM
  1120  012D9A  0EB8               	movlw	low __pidataCOMRAM
  1121  012D9C  6EF6               	movwf	tblptrl,c
  1122  012D9E  0E49               	movlw	high __pidataCOMRAM
  1123  012DA0  6EF7               	movwf	tblptrh,c
  1124  012DA2  0E01               	movlw	low (__pidataCOMRAM shr (0+16))
  1125  012DA4  6EF8               	movwf	tblptru,c
  1126  012DA6  EE00  F047         	lfsr	0,__pdataCOMRAM
  1127  012DAA  EE10 F00A          	lfsr	1,10
  1128  012DAE                     copy_data2:
  1129  012DAE  0009               	tblrd		*+
  1130  012DB0  CFF5 FFEE          	movff	tablat,postinc0
  1131  012DB4  50E5               	movf	postdec1,w,c
  1132  012DB6  50E1               	movf	fsr1l,w,c
  1133  012DB8  E1FA               	bnz	copy_data2
  1134                           
  1135                           ; Clear objects allocated to BIGRAM (300 bytes)
  1136  012DBA  EE04  F0AA         	lfsr	0,__pbssBIGRAM
  1137  012DBE  EE11 F02C          	lfsr	1,300
  1138  012DC2                     clear_0:
  1139  012DC2  6AEE               	clrf	postinc0,c
  1140  012DC4  50E5               	movf	postdec1,w,c
  1141  012DC6  50E1               	movf	fsr1l,w,c
  1142  012DC8  E1FC               	bnz	clear_0
  1143  012DCA  50E2               	movf	fsr1h,w,c
  1144  012DCC  E1FA               	bnz	clear_0
  1145                           
  1146                           ; Clear objects allocated to BANK4 (170 bytes)
  1147  012DCE  EE04  F000         	lfsr	0,__pbssBANK4
  1148  012DD2  0EAA               	movlw	170
  1149  012DD4                     clear_1:
  1150  012DD4  6AEE               	clrf	postinc0,c
  1151  012DD6  06E8               	decf	wreg,f,c
  1152  012DD8  E1FD               	bnz	clear_1
  1153                           
  1154                           ; Clear objects allocated to BANK3 (213 bytes)
  1155  012DDA  EE03  F000         	lfsr	0,__pbssBANK3
  1156  012DDE  0ED5               	movlw	213
  1157  012DE0                     clear_2:
  1158  012DE0  6AEE               	clrf	postinc0,c
  1159  012DE2  06E8               	decf	wreg,f,c
  1160  012DE4  E1FD               	bnz	clear_2
  1161                           
  1162                           ; Clear objects allocated to BANK0 (85 bytes)
  1163  012DE6  EE00  F060         	lfsr	0,__pbssBANK0
  1164  012DEA  0E55               	movlw	85
  1165  012DEC                     clear_3:
  1166  012DEC  6AEE               	clrf	postinc0,c
  1167  012DEE  06E8               	decf	wreg,f,c
  1168  012DF0  E1FD               	bnz	clear_3
  1169                           
  1170                           ; Clear objects allocated to COMRAM (30 bytes)
  1171  012DF2  EE00  F029         	lfsr	0,__pbssCOMRAM
  1172  012DF6  0E1E               	movlw	30
  1173  012DF8                     clear_4:
  1174  012DF8  6AEE               	clrf	postinc0,c
  1175  012DFA  06E8               	decf	wreg,f,c
  1176  012DFC  E1FD               	bnz	clear_4
  1177  012DFE                     end_of_initialization:
  1178                           	opt stack 0
  1179  012DFE                     __end_of__initialization:
  1180                           	opt stack 0
  1181  012DFE  9051               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
  1182  012E00  9251               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
  1183  012E02  0100               	movlb	0
  1184  012E04  EF73  F089         	goto	_main	;jump to C main() function
  1185                           tblptru	equ	0xFF8
  1186                           tblptrh	equ	0xFF7
  1187                           tblptrl	equ	0xFF6
  1188                           tablat	equ	0xFF5
  1189                           postinc0	equ	0xFEE
  1190                           wreg	equ	0xFE8
  1191                           postdec1	equ	0xFE5
  1192                           fsr1h	equ	0xFE2
  1193                           fsr1l	equ	0xFE1
  1194                           
  1195                           	psect	bssCOMRAM
  1196  000029                     __pbssCOMRAM:
  1197                           	opt stack 0
  1198  000029                     _COUNTER:
  1199                           	opt stack 0
  1200  000029                     	ds	2
  1201  00002B                     HMI_GRender@a:
  1202                           	opt stack 0
  1203  00002B                     	ds	2
  1204  00002D                     _iRDropRight:
  1205                           	opt stack 0
  1206  00002D                     	ds	1
  1207  00002E                     _iRVirtualWall:
  1208                           	opt stack 0
  1209  00002E                     	ds	1
  1210  00002F                     _iRCliffR:
  1211                           	opt stack 0
  1212  00002F                     	ds	1
  1213  000030                     _iRCliffFR:
  1214                           	opt stack 0
  1215  000030                     	ds	1
  1216  000031                     _iRCliffFL:
  1217                           	opt stack 0
  1218  000031                     	ds	1
  1219  000032                     _iRCliffL:
  1220                           	opt stack 0
  1221  000032                     	ds	1
  1222  000033                     _iRWall:
  1223                           	opt stack 0
  1224  000033                     	ds	1
  1225  000034                     _iRBumpDrop:
  1226                           	opt stack 0
  1227  000034                     	ds	1
  1228  000035                     _iRScriptIndex:
  1229                           	opt stack 0
  1230  000035                     	ds	1
  1231  000036                     _u:
  1232                           	opt stack 0
  1233  000036                     	ds	1
  1234  000037                     _j:
  1235                           	opt stack 0
  1236  000037                     	ds	1
  1237  000038                     _i:
  1238                           	opt stack 0
  1239  000038                     	ds	1
  1240  000039                     Timer0_Init@PRE:
  1241                           	opt stack 0
  1242  000039                     	ds	1
  1243  00003A                     _INDEX:
  1244                           	opt stack 0
  1245  00003A                     	ds	1
  1246  00003B                     rand@screw:
  1247                           	opt stack 0
  1248  00003B                     	ds	1
  1249  00003C                     _ADC_Initialised:
  1250                           	opt stack 0
  1251  00003C                     	ds	1
  1252  00003D                     OutSeg@a:
  1253                           	opt stack 0
  1254  00003D                     	ds	1
  1255  00003E                     OutSeg@segset:
  1256                           	opt stack 0
  1257  00003E                     	ds	1
  1258  00003F                     OutSeg@cur:
  1259                           	opt stack 0
  1260  00003F                     	ds	1
  1261  000040                     _I2C1T:
  1262                           	opt stack 0
  1263  000040                     	ds	7
  1264                           tblptru	equ	0xFF8
  1265                           tblptrh	equ	0xFF7
  1266                           tblptrl	equ	0xFF6
  1267                           tablat	equ	0xFF5
  1268                           postinc0	equ	0xFEE
  1269                           wreg	equ	0xFE8
  1270                           postdec1	equ	0xFE5
  1271                           fsr1h	equ	0xFE2
  1272                           fsr1l	equ	0xFE1
  1273                           
  1274                           	psect	dataCOMRAM
  1275  000047                     __pdataCOMRAM:
  1276                           	opt stack 0
  1277  000047                     _gCursor:
  1278                           	opt stack 0
  1279  000047                     	ds	4
  1280  00004B                     _Bus_State:
  1281                           	opt stack 0
  1282  00004B                     	ds	1
  1283  00004C                     	ds	1
  1284  00004D                     	ds	1
  1285  00004E                     	ds	1
  1286  00004F                     _l:
  1287                           	opt stack 0
  1288  00004F                     	ds	1
  1289  000050                     _w:
  1290                           	opt stack 0
  1291  000050                     	ds	1
  1292                           tblptru	equ	0xFF8
  1293                           tblptrh	equ	0xFF7
  1294                           tblptrl	equ	0xFF6
  1295                           tablat	equ	0xFF5
  1296                           postinc0	equ	0xFEE
  1297                           wreg	equ	0xFE8
  1298                           postdec1	equ	0xFE5
  1299                           fsr1h	equ	0xFE2
  1300                           fsr1l	equ	0xFE1
  1301                           
  1302                           	psect	bssBANK0
  1303  000060                     __pbssBANK0:
  1304                           	opt stack 0
  1305  000060                     _iRAngleSS:
  1306                           	opt stack 0
  1307  000060                     	ds	4
  1308  000064                     _iRDistanceSS:
  1309                           	opt stack 0
  1310  000064                     	ds	4
  1311  000068                     Timer0_Init@DIV:
  1312                           	opt stack 0
  1313  000068                     	ds	4
  1314  00006C                     _gISR:
  1315                           	opt stack 0
  1316  00006C                     	ds	3
  1317  00006F                     _lQueue:
  1318                           	opt stack 0
  1319  00006F                     	ds	3
  1320  000072                     _lStepFunction:
  1321                           	opt stack 0
  1322  000072                     	ds	3
  1323  000075                     _iRAngle:
  1324                           	opt stack 0
  1325  000075                     	ds	2
  1326  000077                     _iRDistance:
  1327                           	opt stack 0
  1328  000077                     	ds	2
  1329  000079                     _pShiftVal:
  1330                           	opt stack 0
  1331  000079                     	ds	2
  1332  00007B                     _val:
  1333                           	opt stack 0
  1334  00007B                     	ds	2
  1335  00007D                     _lMotor:
  1336                           	opt stack 0
  1337  00007D                     	ds	2
  1338  00007F                     _lCurrent:
  1339                           	opt stack 0
  1340  00007F                     	ds	2
  1341  000081                     _gBackcolour:
  1342                           	opt stack 0
  1343  000081                     	ds	2
  1344  000083                     SPI_Send9@dat:
  1345                           	opt stack 0
  1346  000083                     	ds	2
  1347  000085                     _iRDropCaster:
  1348                           	opt stack 0
  1349  000085                     	ds	1
  1350  000086                     _iRDropLeft:
  1351                           	opt stack 0
  1352  000086                     	ds	1
  1353  000087                     _iRBumpLeft:
  1354                           	opt stack 0
  1355  000087                     	ds	1
  1356  000088                     _iRBumpRight:
  1357                           	opt stack 0
  1358  000088                     	ds	1
  1359  000089                     Event_TestButton@j:
  1360                           	opt stack 0
  1361  000089                     	ds	1
  1362  00008A                     Timer2_Init@PRE:
  1363                           	opt stack 0
  1364  00008A                     	ds	1
  1365  00008B                     Timer2_Init@INDEX:
  1366                           	opt stack 0
  1367  00008B                     	ds	1
  1368  00008C                     _lBufferY:
  1369                           	opt stack 0
  1370  00008C                     	ds	1
  1371  00008D                     _lBufferX:
  1372                           	opt stack 0
  1373  00008D                     	ds	1
  1374  00008E                     _clearall:
  1375                           	opt stack 0
  1376  00008E                     	ds	1
  1377  00008F                     _PortE:
  1378                           	opt stack 0
  1379  00008F                     	ds	10
  1380  000099                     _PortD:
  1381                           	opt stack 0
  1382  000099                     	ds	10
  1383  0000A3                     _PortC:
  1384                           	opt stack 0
  1385  0000A3                     	ds	10
  1386  0000AD                     LCD_DrawRectangle@p4:
  1387                           	opt stack 0
  1388  0000AD                     	ds	4
  1389  0000B1                     LCD_DrawRectangle@p2:
  1390                           	opt stack 0
  1391  0000B1                     	ds	4
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1h	equ	0xFE2
  1400                           fsr1l	equ	0xFE1
  1401                           
  1402                           	psect	dataBANK0
  1403  0000F9                     __pdataBANK0:
  1404                           	opt stack 0
  1405  0000F9                     _gCharSize:
  1406                           	opt stack 0
  1407  0000F9                     	ds	4
  1408  0000FD                     _gForecolour:
  1409                           	opt stack 0
  1410  0000FD                     	ds	2
  1411  0000FF                     _change:
  1412                           	opt stack 0
  1413  0000FF                     	ds	1
  1414                           tblptru	equ	0xFF8
  1415                           tblptrh	equ	0xFF7
  1416                           tblptrl	equ	0xFF6
  1417                           tablat	equ	0xFF5
  1418                           postinc0	equ	0xFEE
  1419                           wreg	equ	0xFE8
  1420                           postdec1	equ	0xFE5
  1421                           fsr1h	equ	0xFE2
  1422                           fsr1l	equ	0xFE1
  1423                           
  1424                           	psect	bssBANK3
  1425  000300                     __pbssBANK3:
  1426                           	opt stack 0
  1427  000300                     _lCBuffer:
  1428                           	opt stack 0
  1429  000300                     	ds	30
  1430  00031E                     Timer2_Init@DIV:
  1431                           	opt stack 0
  1432  00031E                     	ds	4
  1433  000322                     _I2C2_More:
  1434                           	opt stack 0
  1435  000322                     	ds	3
  1436  000325                     _I2C1_More:
  1437                           	opt stack 0
  1438  000325                     	ds	3
  1439  000328                     _I2C2_Done:
  1440                           	opt stack 0
  1441  000328                     	ds	3
  1442  00032B                     _I2C1_Done:
  1443                           	opt stack 0
  1444  00032B                     	ds	3
  1445  00032E                     _HMIBoard:
  1446                           	opt stack 0
  1447  00032E                     	ds	58
  1448  000368                     _SPI1:
  1449                           	opt stack 0
  1450  000368                     	ds	11
  1451  000373                     _SPI2:
  1452                           	opt stack 0
  1453  000373                     	ds	11
  1454  00037E                     _DIPSwitch:
  1455                           	opt stack 0
  1456  00037E                     	ds	10
  1457  000388                     _TestButton:
  1458                           	opt stack 0
  1459  000388                     	ds	10
  1460  000392                     _PortG:
  1461                           	opt stack 0
  1462  000392                     	ds	10
  1463  00039C                     _PortB:
  1464                           	opt stack 0
  1465  00039C                     	ds	10
  1466  0003A6                     _PortA:
  1467                           	opt stack 0
  1468  0003A6                     	ds	10
  1469  0003B0                     _PortF:
  1470                           	opt stack 0
  1471  0003B0                     	ds	10
  1472  0003BA                     _I2C2T:
  1473                           	opt stack 0
  1474  0003BA                     	ds	7
  1475  0003C1                     _ADC_AN3:
  1476                           	opt stack 0
  1477  0003C1                     	ds	5
  1478  0003C6                     _ADC_AN2:
  1479                           	opt stack 0
  1480  0003C6                     	ds	5
  1481  0003CB                     _ADC_AN1:
  1482                           	opt stack 0
  1483  0003CB                     	ds	5
  1484  0003D0                     _ADC_AN0:
  1485                           	opt stack 0
  1486  0003D0                     	ds	5
  1487                           tblptru	equ	0xFF8
  1488                           tblptrh	equ	0xFF7
  1489                           tblptrl	equ	0xFF6
  1490                           tablat	equ	0xFF5
  1491                           postinc0	equ	0xFEE
  1492                           wreg	equ	0xFE8
  1493                           postdec1	equ	0xFE5
  1494                           fsr1h	equ	0xFE2
  1495                           fsr1l	equ	0xFE1
  1496                           
  1497                           	psect	dataBANK3
  1498  0003D5                     __pdataBANK3:
  1499                           	opt stack 0
  1500  0003D5                     Console_Render@F6956:
  1501                           	opt stack 0
  1502  0003D5                     	ds	4
  1503  0003D9                     _gLineSize:
  1504                           	opt stack 0
  1505  0003D9                     	ds	4
  1506                           tblptru	equ	0xFF8
  1507                           tblptrh	equ	0xFF7
  1508                           tblptrl	equ	0xFF6
  1509                           tablat	equ	0xFF5
  1510                           postinc0	equ	0xFEE
  1511                           wreg	equ	0xFE8
  1512                           postdec1	equ	0xFE5
  1513                           fsr1h	equ	0xFE2
  1514                           fsr1l	equ	0xFE1
  1515                           
  1516                           	psect	bssBANK4
  1517  000400                     __pbssBANK4:
  1518                           	opt stack 0
  1519  000400                     _iRScriptStack:
  1520                           	opt stack 0
  1521  000400                     	ds	100
  1522  000464                     Console_MakeField@Fill:
  1523                           	opt stack 0
  1524  000464                     	ds	70
  1525                           tblptru	equ	0xFF8
  1526                           tblptrh	equ	0xFF7
  1527                           tblptrl	equ	0xFF6
  1528                           tablat	equ	0xFF5
  1529                           postinc0	equ	0xFEE
  1530                           wreg	equ	0xFE8
  1531                           postdec1	equ	0xFE5
  1532                           fsr1h	equ	0xFE2
  1533                           fsr1l	equ	0xFE1
  1534                           
  1535                           	psect	bssBIGRAM
  1536  0004AA                     __pbssBIGRAM:
  1537                           	opt stack 0
  1538  0004AA                     _lBuffer:
  1539                           	opt stack 0
  1540  0004AA                     	ds	300
  1541                           tblptru	equ	0xFF8
  1542                           tblptrh	equ	0xFF7
  1543                           tblptrl	equ	0xFF6
  1544                           tablat	equ	0xFF5
  1545                           postinc0	equ	0xFEE
  1546                           wreg	equ	0xFE8
  1547                           postdec1	equ	0xFE5
  1548                           fsr1h	equ	0xFE2
  1549                           fsr1l	equ	0xFE1
  1550                           
  1551                           	psect	cstackBANK3
  1552  0003DD                     __pcstackBANK3:
  1553                           	opt stack 0
  1554  0003DD                     main@distanceTotal:
  1555                           	opt stack 0
  1556                           
  1557                           ; 2 bytes @ 0x0
  1558  0003DD                     	ds	2
  1559  0003DF                     main@angleTotal:
  1560                           	opt stack 0
  1561                           
  1562                           ; 2 bytes @ 0x2
  1563  0003DF                     	ds	2
  1564  0003E1                     main@dist:
  1565                           	opt stack 0
  1566                           
  1567                           ; 2 bytes @ 0x4
  1568  0003E1                     	ds	2
  1569                           tblptru	equ	0xFF8
  1570                           tblptrh	equ	0xFF7
  1571                           tblptrl	equ	0xFF6
  1572                           tablat	equ	0xFF5
  1573                           postinc0	equ	0xFEE
  1574                           wreg	equ	0xFE8
  1575                           postdec1	equ	0xFE5
  1576                           fsr1h	equ	0xFE2
  1577                           fsr1l	equ	0xFE1
  1578                           
  1579                           	psect	cstackBANK2
  1580  000200                     __pcstackBANK2:
  1581                           	opt stack 0
  1582  000200                     irobot_query_and_update@TXArray:
  1583                           	opt stack 0
  1584                           
  1585                           ; 256 bytes @ 0x0
  1586  000200                     	ds	256
  1587                           tblptru	equ	0xFF8
  1588                           tblptrh	equ	0xFF7
  1589                           tblptrl	equ	0xFF6
  1590                           tablat	equ	0xFF5
  1591                           postinc0	equ	0xFEE
  1592                           wreg	equ	0xFE8
  1593                           postdec1	equ	0xFE5
  1594                           fsr1h	equ	0xFE2
  1595                           fsr1l	equ	0xFE1
  1596                           
  1597                           	psect	cstackBANK1
  1598  000100                     __pcstackBANK1:
  1599                           	opt stack 0
  1600  000100                     ??_Port_Init:
  1601  000100                     Button_Init@pInput:
  1602                           	opt stack 0
  1603  000100                     irobot_query_and_update@RXArray:
  1604                           	opt stack 0
  1605                           
  1606                           ; 256 bytes @ 0x0
  1607  000100                     	ds	2
  1608  000102                     Button_Init@pThreshold:
  1609                           	opt stack 0
  1610                           
  1611                           ; 2 bytes @ 0x2
  1612  000102                     	ds	2
  1613  000104                     Button_Init@pInitIO:
  1614                           	opt stack 0
  1615                           
  1616                           ; 3 bytes @ 0x4
  1617  000104                     	ds	3
  1618  000107                     Button_Init@pGetState:
  1619                           	opt stack 0
  1620                           
  1621                           ; 3 bytes @ 0x7
  1622  000107                     	ds	3
  1623  00010A                     Button_Init@pFunction:
  1624                           	opt stack 0
  1625                           
  1626                           ; 3 bytes @ 0xA
  1627  00010A                     	ds	246
  1628                           tblptru	equ	0xFF8
  1629                           tblptrh	equ	0xFF7
  1630                           tblptrl	equ	0xFF6
  1631                           tablat	equ	0xFF5
  1632                           postinc0	equ	0xFEE
  1633                           wreg	equ	0xFE8
  1634                           postdec1	equ	0xFE5
  1635                           fsr1h	equ	0xFE2
  1636                           fsr1l	equ	0xFE1
  1637                           
  1638                           	psect	cstackBANK0
  1639  0000B5                     __pcstackBANK0:
  1640                           	opt stack 0
  1641  0000B5                     ??_Console_ClearCursor:
  1642  0000B5                     ??_sort_iRBumpDrop:
  1643  0000B5                     ?_load_iRScriptStack:
  1644                           	opt stack 0
  1645  0000B5                     ??_Console_Init:
  1646  0000B5                     ??_Console_NewLine:
  1647  0000B5                     ??_Console_FormFeed:
  1648  0000B5                     ??_HMI_SetButton:
  1649  0000B5                     ?_GetPortProperties:
  1650                           	opt stack 0
  1651  0000B5                     ?_GetPortPORT:
  1652                           	opt stack 0
  1653  0000B5                     ?_GetPortTRIS:
  1654                           	opt stack 0
  1655  0000B5                     ?_twos_complement_of:
  1656                           	opt stack 0
  1657  0000B5                     ?___wmul:
  1658                           	opt stack 0
  1659  0000B5                     ?___awdiv:
  1660                           	opt stack 0
  1661  0000B5                     ?___lwdiv:
  1662                           	opt stack 0
  1663  0000B5                     ?___lldiv:
  1664                           	opt stack 0
  1665  0000B5                     Mode_Set@pMode:
  1666                           	opt stack 0
  1667  0000B5                     ToSegment@pCHR:
  1668                           	opt stack 0
  1669  0000B5                     HMI_SetBar@pValue:
  1670                           	opt stack 0
  1671  0000B5                     get_packet_size@packetID:
  1672                           	opt stack 0
  1673  0000B5                     eusart_putch@eusartSendChar:
  1674                           	opt stack 0
  1675  0000B5                     Port_GetPin@pInput:
  1676                           	opt stack 0
  1677  0000B5                     Port_GetQuad@pInput:
  1678                           	opt stack 0
  1679  0000B5                     SPI_DisableISR@pInput:
  1680                           	opt stack 0
  1681  0000B5                     SPI_DCS@pInput:
  1682                           	opt stack 0
  1683  0000B5                     SPI_Send@pInput:
  1684                           	opt stack 0
  1685  0000B5                     Byte_SetBit@pInput:
  1686                           	opt stack 0
  1687  0000B5                     Byte_GetBit@pInput:
  1688                           	opt stack 0
  1689  0000B5                     Byte_SetZone@pInput:
  1690                           	opt stack 0
  1691  0000B5                     Byte_GetZone@pInput:
  1692                           	opt stack 0
  1693  0000B5                     Byte_SetByte@pInput:
  1694                           	opt stack 0
  1695  0000B5                     delay_ms@ms:
  1696                           	opt stack 0
  1697  0000B5                     delay_us@us:
  1698                           	opt stack 0
  1699  0000B5                     reverse@input:
  1700                           	opt stack 0
  1701  0000B5                     twos_complement_of@complementValue:
  1702                           	opt stack 0
  1703  0000B5                     ___wmul@multiplier:
  1704                           	opt stack 0
  1705  0000B5                     ___awdiv@dividend:
  1706                           	opt stack 0
  1707  0000B5                     ___lwdiv@dividend:
  1708                           	opt stack 0
  1709  0000B5                     MXK_Queue@pCallback:
  1710                           	opt stack 0
  1711  0000B5                     ___lldiv@dividend:
  1712                           	opt stack 0
  1713                           
  1714                           ; 4 bytes @ 0x0
  1715  0000B5                     	ds	1
  1716  0000B6                     rx_assign@packetIDValue:
  1717                           	opt stack 0
  1718  0000B6                     irobot_song_play@songNumber:
  1719                           	opt stack 0
  1720  0000B6                     HMI_SetSegments@pString:
  1721                           	opt stack 0
  1722                           
  1723                           ; 2 bytes @ 0x1
  1724  0000B6                     	ds	1
  1725  0000B7                     GetPortProperties@pInput:
  1726                           	opt stack 0
  1727  0000B7                     GetPortPORT@pInput:
  1728                           	opt stack 0
  1729  0000B7                     GetPortTRIS@pInput:
  1730                           	opt stack 0
  1731  0000B7                     Port_GetPin@pPin:
  1732                           	opt stack 0
  1733  0000B7                     Port_GetQuad@pQuad:
  1734                           	opt stack 0
  1735  0000B7                     SPI_Send@pData:
  1736                           	opt stack 0
  1737  0000B7                     Byte_SetBit@pBit:
  1738                           	opt stack 0
  1739  0000B7                     Byte_GetBit@pBit:
  1740                           	opt stack 0
  1741  0000B7                     Byte_SetZone@pMax:
  1742                           	opt stack 0
  1743  0000B7                     Byte_GetZone@pMax:
  1744                           	opt stack 0
  1745  0000B7                     Byte_SetByte@pValue:
  1746                           	opt stack 0
  1747  0000B7                     Console_Init@x:
  1748                           	opt stack 0
  1749  0000B7                     Console_FormFeed@x:
  1750                           	opt stack 0
  1751  0000B7                     rx_assign@byteNumber:
  1752                           	opt stack 0
  1753  0000B7                     reverse@length:
  1754                           	opt stack 0
  1755  0000B7                     ___wmul@multiplicand:
  1756                           	opt stack 0
  1757  0000B7                     ___awdiv@divisor:
  1758                           	opt stack 0
  1759  0000B7                     ___lwdiv@divisor:
  1760                           	opt stack 0
  1761  0000B7                     delay_ms@u:
  1762                           	opt stack 0
  1763  0000B7                     delay_us@u:
  1764                           	opt stack 0
  1765  0000B7                     HMI_SetButton@reindex:
  1766                           	opt stack 0
  1767                           
  1768                           ; 4 bytes @ 0x2
  1769  0000B7                     	ds	1
  1770  0000B8                     ??_Port_GetPin:
  1771  0000B8                     ??_Port_GetQuad:
  1772  0000B8                     ??_Byte_GetBit:
  1773  0000B8                     ??_rx_assign:
  1774  0000B8                     LCD_Write@mode:
  1775                           	opt stack 0
  1776  0000B8                     Byte_SetBit@pValue:
  1777                           	opt stack 0
  1778  0000B8                     Byte_SetZone@pChunk:
  1779                           	opt stack 0
  1780  0000B8                     Byte_GetZone@pChunk:
  1781                           	opt stack 0
  1782  0000B8                     Console_Init@y:
  1783                           	opt stack 0
  1784  0000B8                     Console_FormFeed@y:
  1785                           	opt stack 0
  1786                           
  1787                           ; 1 bytes @ 0x3
  1788  0000B8                     	ds	1
  1789  0000B9                     ??_Byte_SetBit:
  1790  0000B9                     ??_Console_IncrementCursor:
  1791  0000B9                     LCD_Write@value:
  1792                           	opt stack 0
  1793  0000B9                     Byte_GetBit@Output:
  1794                           	opt stack 0
  1795  0000B9                     Byte_SetZone@pChunkSize:
  1796                           	opt stack 0
  1797  0000B9                     Byte_GetZone@pChunkSize:
  1798                           	opt stack 0
  1799  0000B9                     reverse@tempVar:
  1800                           	opt stack 0
  1801  0000B9                     ___awdiv@counter:
  1802                           	opt stack 0
  1803  0000B9                     ___lwdiv@counter:
  1804                           	opt stack 0
  1805  0000B9                     HMI_SetSegments@in:
  1806                           	opt stack 0
  1807  0000B9                     ___wmul@product:
  1808                           	opt stack 0
  1809  0000B9                     ___lldiv@divisor:
  1810                           	opt stack 0
  1811                           
  1812                           ; 4 bytes @ 0x4
  1813  0000B9                     	ds	1
  1814  0000BA                     ??_Byte_GetZone:
  1815  0000BA                     ?_Console_MakeField:
  1816                           	opt stack 0
  1817  0000BA                     Set_Addr_Window@ys:
  1818                           	opt stack 0
  1819  0000BA                     Set_Rotation@m:
  1820                           	opt stack 0
  1821  0000BA                     Port_GetPin@Output:
  1822                           	opt stack 0
  1823  0000BA                     Port_GetQuad@Output:
  1824                           	opt stack 0
  1825  0000BA                     Byte_SetZone@pValue:
  1826                           	opt stack 0
  1827  0000BA                     rx_assign@packetID:
  1828                           	opt stack 0
  1829  0000BA                     ___awdiv@sign:
  1830                           	opt stack 0
  1831  0000BA                     LCD_Word_Write@value:
  1832                           	opt stack 0
  1833  0000BA                     reverse@iterator:
  1834                           	opt stack 0
  1835  0000BA                     ___lwdiv@quotient:
  1836                           	opt stack 0
  1837                           
  1838                           ; 2 bytes @ 0x5
  1839  0000BA                     	ds	1
  1840  0000BB                     ?_irobot_query_and_update:
  1841                           	opt stack 0
  1842  0000BB                     ??_Byte_SetZone:
  1843  0000BB                     Set_Addr_Window@xe:
  1844                           	opt stack 0
  1845  0000BB                     Set_Rotation@rotation:
  1846                           	opt stack 0
  1847  0000BB                     Byte_GetZone@MASK:
  1848                           	opt stack 0
  1849  0000BB                     HMI_SetButton@pValue:
  1850                           	opt stack 0
  1851  0000BB                     MXK_BlockSwitchTo@CUR:
  1852                           	opt stack 0
  1853  0000BB                     MXK_SwitchTo@CUR:
  1854                           	opt stack 0
  1855  0000BB                     ___awdiv@quotient:
  1856                           	opt stack 0
  1857                           
  1858                           ; 2 bytes @ 0x6
  1859  0000BB                     	ds	1
  1860  0000BC                     ??_Console_MakeField:
  1861  0000BC                     ?___lwmod:
  1862                           	opt stack 0
  1863  0000BC                     Set_Addr_Window@ye:
  1864                           	opt stack 0
  1865  0000BC                     Byte_GetZone@Offset:
  1866                           	opt stack 0
  1867  0000BC                     HMI_SetButton@v:
  1868                           	opt stack 0
  1869  0000BC                     MXK_BlockSwitchTo@pModule:
  1870                           	opt stack 0
  1871  0000BC                     MXK_SwitchTo@pModule:
  1872                           	opt stack 0
  1873  0000BC                     ___lwmod@dividend:
  1874                           	opt stack 0
  1875                           
  1876                           ; 2 bytes @ 0x7
  1877  0000BC                     	ds	1
  1878  0000BD                     ??_Console_Tab:
  1879  0000BD                     Set_Addr_Window@xs:
  1880                           	opt stack 0
  1881  0000BD                     Byte_GetZone@Output:
  1882                           	opt stack 0
  1883  0000BD                     ___lldiv@quotient:
  1884                           	opt stack 0
  1885                           
  1886                           ; 4 bytes @ 0x8
  1887  0000BD                     	ds	1
  1888  0000BE                     Byte_SetZone@Offset:
  1889                           	opt stack 0
  1890  0000BE                     LCD_Fill@pColour:
  1891                           	opt stack 0
  1892  0000BE                     LCD_FillRectangle@pColour:
  1893                           	opt stack 0
  1894  0000BE                     Byte_GetPair@pInput:
  1895                           	opt stack 0
  1896  0000BE                     Console_MakeField@Index:
  1897                           	opt stack 0
  1898  0000BE                     ___lwmod@divisor:
  1899                           	opt stack 0
  1900                           
  1901                           ; 2 bytes @ 0x9
  1902  0000BE                     	ds	1
  1903  0000BF                     ??_load_iRScriptStack:
  1904  0000BF                     Byte_SetZone@MASK:
  1905                           	opt stack 0
  1906                           
  1907                           ; 1 bytes @ 0xA
  1908  0000BF                     	ds	1
  1909  0000C0                     LCD_Fill@i:
  1910                           	opt stack 0
  1911  0000C0                     Byte_GetPair@pPair:
  1912                           	opt stack 0
  1913  0000C0                     Console_MakeField@pInput:
  1914                           	opt stack 0
  1915  0000C0                     ___lwmod@counter:
  1916                           	opt stack 0
  1917  0000C0                     Byte_SetPair@pInput:
  1918                           	opt stack 0
  1919  0000C0                     Byte_SetQuad@pInput:
  1920                           	opt stack 0
  1921  0000C0                     LCD_FillRectangle@pPoint:
  1922                           	opt stack 0
  1923                           
  1924                           ; 4 bytes @ 0xB
  1925  0000C0                     	ds	1
  1926  0000C1                     LCD_Fill@j:
  1927                           	opt stack 0
  1928  0000C1                     ___lldiv@counter:
  1929                           	opt stack 0
  1930  0000C1                     Word_GetPair@pInput:
  1931                           	opt stack 0
  1932  0000C1                     itos@input:
  1933                           	opt stack 0
  1934  0000C1                     Console_MakeField@Column:
  1935                           	opt stack 0
  1936  0000C1                     load_iRScriptStack@loadByte:
  1937                           	opt stack 0
  1938                           
  1939                           ; 2 bytes @ 0xC
  1940  0000C1                     	ds	1
  1941  0000C2                     Byte_SetPair@pPair:
  1942                           	opt stack 0
  1943  0000C2                     Byte_SetQuad@pQuad:
  1944                           	opt stack 0
  1945  0000C2                     Console_Tab@t:
  1946                           	opt stack 0
  1947  0000C2                     Timer2_Init@pFrequency:
  1948                           	opt stack 0
  1949                           
  1950                           ; 4 bytes @ 0xD
  1951  0000C2                     	ds	1
  1952  0000C3                     Byte_SetPair@pValue:
  1953                           	opt stack 0
  1954  0000C3                     Byte_SetQuad@pValue:
  1955                           	opt stack 0
  1956  0000C3                     Word_GetPair@pPair:
  1957                           	opt stack 0
  1958  0000C3                     Console_Tab@i:
  1959                           	opt stack 0
  1960  0000C3                     load_iRScriptStack@bytesToLoad:
  1961                           	opt stack 0
  1962  0000C3                     itos@destination:
  1963                           	opt stack 0
  1964  0000C3                     _Console_MakeField$10974:
  1965                           	opt stack 0
  1966                           
  1967                           ; 2 bytes @ 0xE
  1968  0000C3                     	ds	1
  1969  0000C4                     Console_Tab@c:
  1970                           	opt stack 0
  1971  0000C4                     load_iRScriptStack@i:
  1972                           	opt stack 0
  1973  0000C4                     Port_SetPin@pInput:
  1974                           	opt stack 0
  1975  0000C4                     Port_Set@pInput:
  1976                           	opt stack 0
  1977  0000C4                     SPI_MinSpeed@pInput:
  1978                           	opt stack 0
  1979  0000C4                     SPI_MaxSpeed@pInput:
  1980                           	opt stack 0
  1981  0000C4                     Word_SetPair@pInput:
  1982                           	opt stack 0
  1983  0000C4                     PortProperty_Valid@pInput:
  1984                           	opt stack 0
  1985  0000C4                     LCD_FillRectangle@pSize:
  1986                           	opt stack 0
  1987                           
  1988                           ; 4 bytes @ 0xF
  1989  0000C4                     	ds	1
  1990  0000C5                     ??_irobot_query_and_update:
  1991  0000C5                     ??_Console_PrintChar:
  1992  0000C5                     Console_MakeField@x:
  1993                           	opt stack 0
  1994  0000C5                     irobot_leds@LEDBit:
  1995                           	opt stack 0
  1996  0000C5                     itos@Data:
  1997                           	opt stack 0
  1998  0000C5                     irobot_move@moveSpeed:
  1999                           	opt stack 0
  2000                           
  2001                           ; 2 bytes @ 0x10
  2002  0000C5                     	ds	1
  2003  0000C6                     ??_Timer2_Init:
  2004  0000C6                     Port_SetPin@pPin:
  2005                           	opt stack 0
  2006  0000C6                     Port_Set@pValue:
  2007                           	opt stack 0
  2008  0000C6                     Word_SetPair@pPair:
  2009                           	opt stack 0
  2010  0000C6                     PortProperty_Valid@pPinDrive:
  2011                           	opt stack 0
  2012  0000C6                     Console_MakeField@y:
  2013                           	opt stack 0
  2014  0000C6                     irobot_leds@powerColour:
  2015                           	opt stack 0
  2016                           
  2017                           ; 1 bytes @ 0x11
  2018  0000C6                     	ds	1
  2019  0000C7                     ??_Port_Set:
  2020  0000C7                     Port_SetPin@pValue:
  2021                           	opt stack 0
  2022  0000C7                     Word_SetPair@pValue:
  2023                           	opt stack 0
  2024  0000C7                     PortProperty_Valid@pPin:
  2025                           	opt stack 0
  2026  0000C7                     irobot_leds@powerLuminosity:
  2027                           	opt stack 0
  2028  0000C7                     LCD_DrawField@pField:
  2029                           	opt stack 0
  2030  0000C7                     itos@Length:
  2031                           	opt stack 0
  2032  0000C7                     irobot_move@moveTurnRadius:
  2033                           	opt stack 0
  2034  0000C7                     Timer2_Init@RDIV:
  2035                           	opt stack 0
  2036                           
  2037                           ; 4 bytes @ 0x12
  2038  0000C7                     	ds	1
  2039  0000C8                     ??_PortProperty_Valid:
  2040  0000C8                     ??_LCD_FillRectangle:
  2041  0000C8                     Port_SetPin@Type:
  2042                           	opt stack 0
  2043  0000C8                     Console_PrintChar@pInput:
  2044                           	opt stack 0
  2045  0000C8                     irobot_leds@isScript:
  2046                           	opt stack 0
  2047                           
  2048                           ; 1 bytes @ 0x13
  2049  0000C8                     	ds	1
  2050  0000C9                     ??_irobot_move:
  2051  0000C9                     LED_Set@pValue:
  2052                           	opt stack 0
  2053  0000C9                     putch@c:
  2054                           	opt stack 0
  2055  0000C9                     irobot_led_power_on@powerOnColour:
  2056                           	opt stack 0
  2057  0000C9                     Port_TogglePin@pInput:
  2058                           	opt stack 0
  2059  0000C9                     itos@Out:
  2060                           	opt stack 0
  2061  0000C9                     LCD_DrawField@pPoint:
  2062                           	opt stack 0
  2063                           
  2064                           ; 4 bytes @ 0x14
  2065  0000C9                     	ds	1
  2066  0000CA                     ?_printf:
  2067                           	opt stack 0
  2068  0000CA                     LCD_FillRectangle@i:
  2069                           	opt stack 0
  2070  0000CA                     LED_Set@pLED:
  2071                           	opt stack 0
  2072  0000CA                     irobot_query_and_update@packetIDs:
  2073                           	opt stack 0
  2074  0000CA                     printf@f:
  2075                           	opt stack 0
  2076  0000CA                     PortProperty_Valid@Errors:
  2077                           	opt stack 0
  2078                           
  2079                           ; 16 bytes @ 0x15
  2080  0000CA                     	ds	1
  2081  0000CB                     LCD_FillRectangle@j:
  2082                           	opt stack 0
  2083  0000CB                     Port_TogglePin@pPin:
  2084                           	opt stack 0
  2085  0000CB                     HMI_SetNumber@pInput:
  2086                           	opt stack 0
  2087  0000CB                     Timer2_Init@pCPUClock:
  2088                           	opt stack 0
  2089                           
  2090                           ; 4 bytes @ 0x16
  2091  0000CB                     	ds	1
  2092  0000CC                     Port_TogglePin@Value:
  2093                           	opt stack 0
  2094  0000CC                     irobot_query_and_update@streamSize:
  2095                           	opt stack 0
  2096                           
  2097                           ; 1 bytes @ 0x17
  2098  0000CC                     	ds	1
  2099  0000CD                     LED_Toggle@pLED:
  2100                           	opt stack 0
  2101  0000CD                     irobot_query_and_update@numberOfPacketRequests:
  2102                           	opt stack 0
  2103  0000CD                     irobot_move@isScript:
  2104                           	opt stack 0
  2105  0000CD                     LCD_DrawField@pSize:
  2106                           	opt stack 0
  2107                           
  2108                           ; 4 bytes @ 0x18
  2109  0000CD                     	ds	1
  2110  0000CE                     Event_DIPSwitch@pState:
  2111                           	opt stack 0
  2112  0000CE                     Event_TestButton@pState:
  2113                           	opt stack 0
  2114  0000CE                     irobot_query_and_update@packetVariable:
  2115                           	opt stack 0
  2116  0000CE                     irobot_stop_motion@isScript:
  2117                           	opt stack 0
  2118  0000CE                     irobot_rotate@rotateAngle:
  2119                           	opt stack 0
  2120  0000CE                     irobot_move_straight@straightSpeed:
  2121                           	opt stack 0
  2122                           
  2123                           ; 2 bytes @ 0x19
  2124  0000CE                     	ds	1
  2125  0000CF                     Event_DIPSwitch@Bar:
  2126                           	opt stack 0
  2127  0000CF                     irobot_query_and_update@j:
  2128                           	opt stack 0
  2129  0000CF                     Timer2_Init@DIVIDE:
  2130                           	opt stack 0
  2131                           
  2132                           ; 4 bytes @ 0x1A
  2133  0000CF                     	ds	1
  2134  0000D0                     irobot_query_and_update@startIndex:
  2135                           	opt stack 0
  2136  0000D0                     Button_Poll@pButton:
  2137                           	opt stack 0
  2138  0000D0                     irobot_rotate@rotateSpeed:
  2139                           	opt stack 0
  2140                           
  2141                           ; 2 bytes @ 0x1B
  2142  0000D0                     	ds	1
  2143  0000D1                     ??_LCD_DrawField:
  2144  0000D1                     irobot_query_and_update@i:
  2145                           	opt stack 0
  2146                           
  2147                           ; 1 bytes @ 0x1C
  2148  0000D1                     	ds	1
  2149  0000D2                     ??_printf:
  2150  0000D2                     Button_Poll@pIncrement:
  2151                           	opt stack 0
  2152  0000D2                     irobot_rotate@isScript:
  2153                           	opt stack 0
  2154                           
  2155                           ; 1 bytes @ 0x1D
  2156  0000D2                     	ds	1
  2157  0000D3                     ??_Button_Poll:
  2158  0000D3                     printf@prec:
  2159                           	opt stack 0
  2160  0000D3                     LCD_DrawField@count:
  2161                           	opt stack 0
  2162                           
  2163                           ; 2 bytes @ 0x1E
  2164  0000D3                     	ds	1
  2165  0000D4                     printf@flag:
  2166                           	opt stack 0
  2167                           
  2168                           ; 1 bytes @ 0x1F
  2169  0000D4                     	ds	1
  2170  0000D5                     LCD_DrawField@xmax:
  2171                           	opt stack 0
  2172  0000D5                     printf@ap:
  2173                           	opt stack 0
  2174                           
  2175                           ; 2 bytes @ 0x20
  2176  0000D5                     	ds	1
  2177  0000D6                     LCD_DrawField@ymax:
  2178                           	opt stack 0
  2179                           
  2180                           ; 1 bytes @ 0x21
  2181  0000D6                     	ds	1
  2182  0000D7                     LCD_DrawField@i:
  2183                           	opt stack 0
  2184  0000D7                     Port_Set@TypeRequired:
  2185                           	opt stack 0
  2186  0000D7                     printf@val:
  2187                           	opt stack 0
  2188                           
  2189                           ; 2 bytes @ 0x22
  2190  0000D7                     	ds	1
  2191  0000D8                     ??_Console_Render:
  2192  0000D8                     Button_Poll@Pin:
  2193                           	opt stack 0
  2194                           
  2195                           ; 1 bytes @ 0x23
  2196  0000D8                     	ds	1
  2197  0000D9                     printf@c:
  2198                           	opt stack 0
  2199  0000D9                     Port_Set@TypeActual:
  2200                           	opt stack 0
  2201                           
  2202                           ; 2 bytes @ 0x24
  2203  0000D9                     	ds	1
  2204  0000DA                     PortProperty_Valid@Pair:
  2205                           	opt stack 0
  2206  0000DA                     Console_Render@temp:
  2207                           	opt stack 0
  2208                           
  2209                           ; 1 bytes @ 0x25
  2210  0000DA                     	ds	1
  2211  0000DB                     Port_Set@Type:
  2212                           	opt stack 0
  2213  0000DB                     Port_CheckPairType@pInput:
  2214                           	opt stack 0
  2215  0000DB                     Port_SetPinType@pInput:
  2216                           	opt stack 0
  2217  0000DB                     Console_Render@lCursor:
  2218                           	opt stack 0
  2219                           
  2220                           ; 4 bytes @ 0x26
  2221  0000DB                     	ds	2
  2222  0000DD                     Port_CheckPairType@pPair:
  2223                           	opt stack 0
  2224  0000DD                     Port_SetPinType@pPin:
  2225                           	opt stack 0
  2226                           
  2227                           ; 1 bytes @ 0x28
  2228  0000DD                     	ds	1
  2229  0000DE                     Port_CheckPairType@pDrive:
  2230                           	opt stack 0
  2231  0000DE                     Port_SetPinType@pType:
  2232                           	opt stack 0
  2233                           
  2234                           ; 1 bytes @ 0x29
  2235  0000DE                     	ds	1
  2236  0000DF                     Port_CheckPairType@Pin1:
  2237                           	opt stack 0
  2238  0000DF                     Port_SetPinType@Output:
  2239                           	opt stack 0
  2240  0000DF                     Console_Render@x:
  2241                           	opt stack 0
  2242                           
  2243                           ; 1 bytes @ 0x2A
  2244  0000DF                     	ds	1
  2245  0000E0                     Port_CheckPairType@Pin2:
  2246                           	opt stack 0
  2247  0000E0                     Console_Render@y:
  2248                           	opt stack 0
  2249  0000E0                     Port_SetPinType@Props:
  2250                           	opt stack 0
  2251                           
  2252                           ; 2 bytes @ 0x2B
  2253  0000E0                     	ds	1
  2254  0000E1                     Port_CheckPairType@Output:
  2255                           	opt stack 0
  2256                           
  2257                           ; 1 bytes @ 0x2C
  2258  0000E1                     	ds	1
  2259  0000E2                     LED_Init@pLED:
  2260                           	opt stack 0
  2261  0000E2                     Port_CheckPairType@Props:
  2262                           	opt stack 0
  2263  0000E2                     SPI_Init@pClock:
  2264                           	opt stack 0
  2265                           
  2266                           ; 4 bytes @ 0x2D
  2267  0000E2                     	ds	2
  2268  0000E4                     Port_CheckQuadType@pInput:
  2269                           	opt stack 0
  2270                           
  2271                           ; 2 bytes @ 0x2F
  2272  0000E4                     	ds	2
  2273  0000E6                     Port_CheckQuadType@pQuad:
  2274                           	opt stack 0
  2275  0000E6                     SPI_Init@pChannel:
  2276                           	opt stack 0
  2277                           
  2278                           ; 1 bytes @ 0x31
  2279  0000E6                     	ds	1
  2280  0000E7                     Port_CheckQuadType@pDrive:
  2281                           	opt stack 0
  2282  0000E7                     SPI_Init@pMode:
  2283                           	opt stack 0
  2284                           
  2285                           ; 1 bytes @ 0x32
  2286  0000E7                     	ds	1
  2287  0000E8                     Port_CheckQuadType@Pair1:
  2288                           	opt stack 0
  2289  0000E8                     SPI_Init@pInput:
  2290                           	opt stack 0
  2291                           
  2292                           ; 2 bytes @ 0x33
  2293  0000E8                     	ds	1
  2294  0000E9                     Port_CheckQuadType@Pair2:
  2295                           	opt stack 0
  2296                           
  2297                           ; 1 bytes @ 0x34
  2298  0000E9                     	ds	1
  2299  0000EA                     ??_LCD_Init:
  2300  0000EA                     Port_CheckQuadType@Output:
  2301                           	opt stack 0
  2302                           
  2303                           ; 1 bytes @ 0x35
  2304  0000EA                     	ds	1
  2305  0000EB                     Port_CheckPortType@pInput:
  2306                           	opt stack 0
  2307  0000EB                     Port_SetQuadType@pInput:
  2308                           	opt stack 0
  2309                           
  2310                           ; 2 bytes @ 0x36
  2311  0000EB                     	ds	1
  2312  0000EC                     LCD_Init@i:
  2313                           	opt stack 0
  2314                           
  2315                           ; 2 bytes @ 0x37
  2316  0000EC                     	ds	1
  2317  0000ED                     Port_CheckPortType@pDrive:
  2318                           	opt stack 0
  2319  0000ED                     Port_SetQuadType@pQuad:
  2320                           	opt stack 0
  2321                           
  2322                           ; 1 bytes @ 0x38
  2323  0000ED                     	ds	1
  2324  0000EE                     Port_CheckPortType@Output:
  2325                           	opt stack 0
  2326  0000EE                     Port_SetQuadType@pType:
  2327                           	opt stack 0
  2328                           
  2329                           ; 1 bytes @ 0x39
  2330  0000EE                     	ds	1
  2331  0000EF                     Port_SetQuadType@Output:
  2332                           	opt stack 0
  2333  0000EF                     Port_SetType@pInput:
  2334                           	opt stack 0
  2335                           
  2336                           ; 2 bytes @ 0x3A
  2337  0000EF                     	ds	1
  2338  0000F0                     HMI_Init@in:
  2339                           	opt stack 0
  2340                           
  2341                           ; 2 bytes @ 0x3B
  2342  0000F0                     	ds	1
  2343  0000F1                     Port_SetType@pType:
  2344                           	opt stack 0
  2345                           
  2346                           ; 1 bytes @ 0x3C
  2347  0000F1                     	ds	1
  2348  0000F2                     ??_Port_SetType:
  2349                           
  2350                           ; 1 bytes @ 0x3D
  2351  0000F2                     	ds	2
  2352  0000F4                     Port_SetType@Output:
  2353                           	opt stack 0
  2354                           
  2355                           ; 1 bytes @ 0x3F
  2356  0000F4                     	ds	1
  2357  0000F5                     Port_Init@pInput:
  2358                           	opt stack 0
  2359                           
  2360                           ; 2 bytes @ 0x40
  2361  0000F5                     	ds	2
  2362  0000F7                     Port_Init@pPort:
  2363                           	opt stack 0
  2364                           
  2365                           ; 1 bytes @ 0x42
  2366  0000F7                     	ds	1
  2367  0000F8                     Port_Init@i:
  2368                           	opt stack 0
  2369                           
  2370                           ; 1 bytes @ 0x43
  2371  0000F8                     	ds	1
  2372  0000F9                     tblptru	equ	0xFF8
  2373                           tblptrh	equ	0xFF7
  2374                           tblptrl	equ	0xFF6
  2375                           tablat	equ	0xFF5
  2376                           postinc0	equ	0xFEE
  2377                           wreg	equ	0xFE8
  2378                           postdec1	equ	0xFE5
  2379                           fsr1h	equ	0xFE2
  2380                           fsr1l	equ	0xFE1
  2381                           
  2382                           ; 1 bytes @ 0x44
  2383                           
  2384                           	psect	cstackCOMRAM
  2385  000001                     __pcstackCOMRAM:
  2386                           	opt stack 0
  2387  000001                     i2Byte_SetBit@pInput:
  2388                           	opt stack 0
  2389  000001                     i2Byte_GetZone@pInput:
  2390                           	opt stack 0
  2391  000001                     i2delay_us@us:
  2392                           	opt stack 0
  2393  000001                     i2MXK_Queue@pCallback:
  2394                           	opt stack 0
  2395                           
  2396                           ; 3 bytes @ 0x0
  2397  000001                     	ds	2
  2398  000003                     i2Byte_SetBit@pBit:
  2399                           	opt stack 0
  2400  000003                     i2Byte_GetZone@pMax:
  2401                           	opt stack 0
  2402  000003                     i2delay_us@u:
  2403                           	opt stack 0
  2404                           
  2405                           ; 4 bytes @ 0x2
  2406  000003                     	ds	1
  2407  000004                     i2Byte_SetBit@pValue:
  2408                           	opt stack 0
  2409  000004                     i2Byte_GetZone@pChunk:
  2410                           	opt stack 0
  2411                           
  2412                           ; 1 bytes @ 0x3
  2413  000004                     	ds	1
  2414  000005                     ??i2_Byte_SetBit:
  2415  000005                     i2Byte_GetZone@pChunkSize:
  2416                           	opt stack 0
  2417                           
  2418                           ; 1 bytes @ 0x4
  2419  000005                     	ds	1
  2420  000006                     ??i2_Byte_GetZone:
  2421                           
  2422                           ; 1 bytes @ 0x5
  2423  000006                     	ds	1
  2424  000007                     i2Byte_GetZone@MASK:
  2425                           	opt stack 0
  2426  000007                     i2MXK_SwitchTo@CUR:
  2427                           	opt stack 0
  2428                           
  2429                           ; 1 bytes @ 0x6
  2430  000007                     	ds	1
  2431  000008                     i2Byte_GetZone@Offset:
  2432                           	opt stack 0
  2433  000008                     i2MXK_SwitchTo@pModule:
  2434                           	opt stack 0
  2435                           
  2436                           ; 1 bytes @ 0x7
  2437  000008                     	ds	1
  2438  000009                     i2Byte_GetZone@Output:
  2439                           	opt stack 0
  2440                           
  2441                           ; 1 bytes @ 0x8
  2442  000009                     	ds	1
  2443  00000A                     i2Byte_GetPair@pInput:
  2444                           	opt stack 0
  2445                           
  2446                           ; 2 bytes @ 0x9
  2447  00000A                     	ds	2
  2448  00000C                     i2Byte_GetPair@pPair:
  2449                           	opt stack 0
  2450                           
  2451                           ; 1 bytes @ 0xB
  2452  00000C                     	ds	1
  2453  00000D                     i2Word_GetPair@pInput:
  2454                           	opt stack 0
  2455                           
  2456                           ; 2 bytes @ 0xC
  2457  00000D                     	ds	2
  2458  00000F                     i2Word_GetPair@pPair:
  2459                           	opt stack 0
  2460                           
  2461                           ; 1 bytes @ 0xE
  2462  00000F                     	ds	1
  2463  000010                     i2Port_SetPin@pInput:
  2464                           	opt stack 0
  2465                           
  2466                           ; 2 bytes @ 0xF
  2467  000010                     	ds	2
  2468  000012                     i2Port_SetPin@pPin:
  2469                           	opt stack 0
  2470                           
  2471                           ; 1 bytes @ 0x11
  2472  000012                     	ds	1
  2473  000013                     i2Port_SetPin@pValue:
  2474                           	opt stack 0
  2475                           
  2476                           ; 1 bytes @ 0x12
  2477  000013                     	ds	1
  2478  000014                     i2Port_SetPin@Type:
  2479                           	opt stack 0
  2480                           
  2481                           ; 1 bytes @ 0x13
  2482  000014                     	ds	1
  2483  000015                     
  2484                           ; 1 bytes @ 0x14
  2485  000015                     	ds	2
  2486  000017                     ??_ISR_Function:
  2487                           
  2488                           ; 1 bytes @ 0x16
  2489  000017                     	ds	18
  2490                           tblptru	equ	0xFF8
  2491                           tblptrh	equ	0xFF7
  2492                           tblptrl	equ	0xFF6
  2493                           tablat	equ	0xFF5
  2494                           postinc0	equ	0xFEE
  2495                           wreg	equ	0xFE8
  2496                           postdec1	equ	0xFE5
  2497                           fsr1h	equ	0xFE2
  2498                           fsr1l	equ	0xFE1
  2499                           
  2500 ;;
  2501 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  2502 ;;
  2503 ;; *************** function _main *****************
  2504 ;; Defined at:
  2505 ;;		line 30 in file "main.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;  dist            2    4[BANK3 ] int 
  2510 ;;  angleTotal      2    2[BANK3 ] short 
  2511 ;;  distanceTota    2    0[BANK3 ] short 
  2512 ;; Return value:  Size  Location     Type
  2513 ;;                  1    wreg      void 
  2514 ;; Registers used:
  2515 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
  2516 ;; Tracked objects:
  2517 ;;		On entry : 0/0
  2518 ;;		On exit  : 0/0
  2519 ;;		Unchanged: 0/0
  2520 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2521 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2522 ;;      Locals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2523 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2524 ;;      Totals:         0       0       0       0       6       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2525 ;;Total ram usage:        6 bytes
  2526 ;; Hardware stack levels required when called:   17
  2527 ;; This function calls:
  2528 ;;		_Console_Init
  2529 ;;		_Console_Render
  2530 ;;		_HMI_DIPSwitch
  2531 ;;		_HMI_DownSwitch
  2532 ;;		_HMI_Init
  2533 ;;		_HMI_LeftSwitch
  2534 ;;		_HMI_Poll
  2535 ;;		_HMI_RightSwitch
  2536 ;;		_HMI_UpSwitch
  2537 ;;		_LCD_Init
  2538 ;;		_MXK_BlockSwitchTo
  2539 ;;		_MXK_DIPSwitch
  2540 ;;		_MXK_Dequeue
  2541 ;;		_MXK_Init
  2542 ;;		_MXK_Release
  2543 ;;		_MXK_SwitchTo
  2544 ;;		_MXK_TestButton
  2545 ;;		_delay_ms
  2546 ;;		_eusart_init
  2547 ;;		_irobot_init
  2548 ;;		_irobot_init_song_0
  2549 ;;		_irobot_led_power_on
  2550 ;;		_irobot_move_straight
  2551 ;;		_irobot_rotate
  2552 ;;		_irobot_song_play
  2553 ;;		_irobot_stop_motion
  2554 ;;		_printf
  2555 ;;		_update_angle
  2556 ;;		_update_bump_and_cliff
  2557 ;;		_update_distance
  2558 ;; This function is called by:
  2559 ;;		Startup code after reset
  2560 ;; This function uses a non-reentrant model
  2561 ;;
  2562                           
  2563                           	psect	text0
  2564  0112E6                     __ptext0:
  2565                           	opt stack 0
  2566  0112E6                     _main:
  2567                           	opt stack 14
  2568                           
  2569                           ;main.c: 32: MXK_Init();
  2570                           
  2571                           ;incstack = 0
  2572  0112E6  EC78  F08E         	call	_MXK_Init	;wreg free
  2573                           
  2574                           ;main.c: 35: if (MXK_BlockSwitchTo(eMXK_HMI)) {
  2575  0112EA  0E01               	movlw	1
  2576  0112EC  ECD5  F0A1         	call	_MXK_BlockSwitchTo
  2577  0112F0  0900               	iorlw	0
  2578  0112F2  B4D8               	btfsc	status,2,c
  2579  0112F4  D00C               	goto	l2252
  2580                           
  2581                           ;main.c: 36: Console_Init();
  2582  0112F6  ECBA  F09A         	call	_Console_Init	;wreg free
  2583                           
  2584                           ;main.c: 37: HMI_Init();
  2585  0112FA  EC76  F088         	call	_HMI_Init	;wreg free
  2586                           
  2587                           ;main.c: 38: LCD_Init();
  2588  0112FE  EC38  F08F         	call	_LCD_Init	;wreg free
  2589                           
  2590                           ;main.c: 39: if (MXK_Release())
  2591  011302  EC06  F0A4         	call	_MXK_Release	;wreg free
  2592  011306  0900               	iorlw	0
  2593  011308  A4D8               	btfss	status,2,c
  2594                           
  2595                           ;main.c: 40: MXK_Dequeue();
  2596  01130A  ECB6  F0A1         	call	_MXK_Dequeue	;wreg free
  2597  01130E                     l2252:
  2598                           
  2599                           ;main.c: 41: }
  2600                           ;main.c: 42: eusart_init();
  2601  01130E  EC8F  F0A3         	call	_eusart_init	;wreg free
  2602                           
  2603                           ;main.c: 43: irobot_init();
  2604  011312  ECAD  F0A4         	call	_irobot_init	;wreg free
  2605                           
  2606                           ;main.c: 45: irobot_led_power_on(0xA);
  2607  011316  0E0A               	movlw	10
  2608  011318  ECF8  F0A3         	call	_irobot_led_power_on
  2609                           
  2610                           ;main.c: 46: irobot_init_song_0();
  2611  01131C  EC70  F0A3         	call	_irobot_init_song_0	;wreg free
  2612                           
  2613                           ;main.c: 47: delay_ms(20);
  2614  011320  0E00               	movlw	0
  2615  011322  0100               	movlb	0	; () banked
  2616  011324  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  2617  011326  0E14               	movlw	20
  2618  011328  6FB5               	movwf	delay_ms@ms& (0+255),b
  2619  01132A  EC75  F09D         	call	_delay_ms	;wreg free
  2620                           
  2621                           ;main.c: 50: irobot_rotate(0, 90, 200);
  2622  01132E  0E00               	movlw	0
  2623  011330  0100               	movlb	0	; () banked
  2624  011332  6FCF               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  2625  011334  0E5A               	movlw	90
  2626  011336  6FCE               	movwf	irobot_rotate@rotateAngle& (0+255),b
  2627  011338  0E00               	movlw	0
  2628  01133A  0100               	movlb	0	; () banked
  2629  01133C  6FD1               	movwf	(irobot_rotate@rotateSpeed+1)& (0+255),b
  2630  01133E  0EC8               	movlw	200
  2631  011340  6FD0               	movwf	irobot_rotate@rotateSpeed& (0+255),b
  2632  011342  0E00               	movlw	0
  2633  011344  EC45  F09E         	call	_irobot_rotate
  2634                           
  2635                           ;main.c: 52: INT16 distanceTotal = 0;
  2636  011348  0E00               	movlw	0
  2637  01134A  0103               	movlb	3	; () banked
  2638  01134C  6FDE               	movwf	(main@distanceTotal+1)& (0+255),b
  2639  01134E  0E00               	movlw	0
  2640  011350  6FDD               	movwf	main@distanceTotal& (0+255),b
  2641                           
  2642                           ; BSR set to: 3
  2643                           ;main.c: 53: INT16 angleTotal = 0;
  2644  011352  0E00               	movlw	0
  2645  011354  0103               	movlb	3	; () banked
  2646  011356  6FE0               	movwf	(main@angleTotal+1)& (0+255),b
  2647  011358  0E00               	movlw	0
  2648  01135A  6FDF               	movwf	main@angleTotal& (0+255),b
  2649  01135C                     
  2650                           ;main.c: 56: update_bump_and_cliff();
  2651                           
  2652                           ; BSR set to: 3
  2653  01135C  EC31  F0A2         	call	_update_bump_and_cliff	;wreg free
  2654                           
  2655                           ;main.c: 57: update_distance();
  2656  011360  EC8B  F0A4         	call	_update_distance	;wreg free
  2657                           
  2658                           ;main.c: 58: update_angle();
  2659  011364  EC94  F0A4         	call	_update_angle	;wreg free
  2660                           
  2661                           ;main.c: 60: angleTotal += iRAngle;
  2662  011368  0100               	movlb	0	; () banked
  2663  01136A  5175               	movf	_iRAngle& (0+255),w,b
  2664  01136C  0103               	movlb	3	; () banked
  2665  01136E  27DF               	addwf	main@angleTotal& (0+255),f,b
  2666  011370  0100               	movlb	0	; () banked
  2667  011372  5176               	movf	(_iRAngle+1)& (0+255),w,b
  2668  011374  0103               	movlb	3	; () banked
  2669  011376  23E0               	addwfc	(main@angleTotal+1)& (0+255),f,b
  2670                           
  2671                           ; BSR set to: 3
  2672                           ;main.c: 62: if (iRBumpLeft || iRBumpRight) {
  2673  011378  0100               	movlb	0	; () banked
  2674  01137A  5187               	movf	_iRBumpLeft& (0+255),w,b
  2675  01137C  A4D8               	btfss	status,2,c
  2676  01137E  D004               	goto	u9360
  2677                           
  2678                           ; BSR set to: 0
  2679  011380  0100               	movlb	0	; () banked
  2680  011382  5188               	movf	_iRBumpRight& (0+255),w,b
  2681  011384  B4D8               	btfsc	status,2,c
  2682  011386  D006               	goto	l2254
  2683  011388                     u9360:
  2684                           
  2685                           ; BSR set to: 0
  2686                           ;main.c: 63: irobot_song_play(0);
  2687                           
  2688                           ; BSR set to: 0
  2689  011388  0E00               	movlw	0
  2690  01138A  EC81  F0A4         	call	_irobot_song_play
  2691                           
  2692                           ;main.c: 64: irobot_stop_motion(0);
  2693  01138E  0E00               	movlw	0
  2694  011390  ECCA  F0A0         	call	_irobot_stop_motion
  2695  011394                     l2254:
  2696                           
  2697                           ;main.c: 65: }
  2698                           ;main.c: 66: if (angleTotal > 90) {
  2699  011394  0103               	movlb	3	; () banked
  2700  011396  BFE0               	btfsc	(main@angleTotal+1)& (0+255),7,b
  2701  011398  D00B               	goto	l2257
  2702  01139A  0103               	movlb	3	; () banked
  2703  01139C  51E0               	movf	(main@angleTotal+1)& (0+255),w,b
  2704  01139E  E105               	bnz	u9370
  2705  0113A0  0E5B               	movlw	91
  2706  0113A2  0103               	movlb	3	; () banked
  2707  0113A4  5DDF               	subwf	main@angleTotal& (0+255),w,b
  2708  0113A6  A0D8               	btfss	status,0,c
  2709  0113A8  D003               	goto	l2257
  2710  0113AA                     u9370:
  2711                           
  2712                           ; BSR set to: 3
  2713                           ;main.c: 67: irobot_stop_motion(0);
  2714  0113AA  0E00               	movlw	0
  2715  0113AC  ECCA  F0A0         	call	_irobot_stop_motion
  2716  0113B0                     l2257:
  2717                           
  2718                           ;main.c: 68: }
  2719                           ;main.c: 69: HMI_Poll();
  2720  0113B0  ECEE  F09B         	call	_HMI_Poll	;wreg free
  2721                           
  2722                           ;main.c: 70: if (MXK_SwitchTo(eMXK_HMI)) {
  2723  0113B4  0E01               	movlw	1
  2724  0113B6  EC55  F0A1         	call	_MXK_SwitchTo
  2725  0113BA  0900               	iorlw	0
  2726  0113BC  B4D8               	btfsc	status,2,c
  2727  0113BE  D7CE               	goto	l2253
  2728                           
  2729                           ;main.c: 71: printf("%c", (char)35);
  2730  0113C0  0EFB               	movlw	low STR_1
  2731  0113C2  0100               	movlb	0	; () banked
  2732  0113C4  6FCA               	movwf	printf@f& (0+255),b
  2733  0113C6  0EFF               	movlw	high STR_1
  2734  0113C8  0100               	movlb	0	; () banked
  2735  0113CA  6FCB               	movwf	(printf@f+1)& (0+255),b
  2736  0113CC  0E00               	movlw	0
  2737  0113CE  0100               	movlb	0	; () banked
  2738  0113D0  6FCD               	movwf	(?_printf+3)& (0+255),b
  2739  0113D2  0E23               	movlw	35
  2740  0113D4  6FCC               	movwf	(?_printf+2)& (0+255),b
  2741  0113D6  EC5C  F08A         	call	_printf	;wreg free
  2742                           
  2743                           ;main.c: 72: printf("Total Distance:%u\nLeft Bump:%u\nRight Bump:%u\n", distanceTotal, i
      +                          RBumpLeft, iRBumpRight);
  2744  0113DA  0EBF               	movlw	low STR_2
  2745  0113DC  0100               	movlb	0	; () banked
  2746  0113DE  6FCA               	movwf	printf@f& (0+255),b
  2747  0113E0  0EFF               	movlw	high STR_2
  2748  0113E2  0100               	movlb	0	; () banked
  2749  0113E4  6FCB               	movwf	(printf@f+1)& (0+255),b
  2750  0113E6  C3DD  F0CC         	movff	main@distanceTotal,?_printf+2
  2751  0113EA  C3DE  F0CD         	movff	main@distanceTotal+1,?_printf+3
  2752  0113EE  C087  F0CE         	movff	_iRBumpLeft,?_printf+4
  2753  0113F2  0100               	movlb	0	; () banked
  2754  0113F4  6BCF               	clrf	(?_printf+5)& (0+255),b
  2755  0113F6  C088  F0D0         	movff	_iRBumpRight,?_printf+6
  2756  0113FA  0100               	movlb	0	; () banked
  2757  0113FC  6BD1               	clrf	(?_printf+7)& (0+255),b
  2758  0113FE  EC5C  F08A         	call	_printf	;wreg free
  2759                           
  2760                           ;main.c: 73: Console_Render();
  2761  011402  EC6E  F087         	call	_Console_Render	;wreg free
  2762                           
  2763                           ;main.c: 74: if(HMIBoard.mUp.mGetState()){
  2764  011406  EE23  F051         	lfsr	2,_HMIBoard+35
  2765  01140A  D801               	call	u9398
  2766  01140C  D00A               	goto	u9399
  2767  01140E                     u9398:
  2768  01140E  0005               	push	
  2769  011410  6EFA               	movwf	pclath,c
  2770  011412  50DE               	movf	postinc2,w,c
  2771  011414  6EFD               	movwf	tosl,c
  2772  011416  50DE               	movf	postinc2,w,c
  2773  011418  6EFE               	movwf	tosh,c
  2774  01141A  50DE               	movf	postinc2,w,c
  2775  01141C  6EFF               	movwf	tosu,c
  2776  01141E  50FA               	movf	pclath,w,c
  2777  011420  0012               	return		;indir
  2778  011422                     u9399:
  2779  011422  0900               	iorlw	0
  2780  011424  B4D8               	btfsc	status,2,c
  2781  011426  D040               	goto	l2259
  2782                           
  2783                           ;main.c: 75: int dist = 0;
  2784  011428  0E00               	movlw	0
  2785  01142A  0103               	movlb	3	; () banked
  2786  01142C  6FE2               	movwf	(main@dist+1)& (0+255),b
  2787  01142E  0E00               	movlw	0
  2788  011430  6FE1               	movwf	main@dist& (0+255),b
  2789                           
  2790                           ; BSR set to: 3
  2791                           ;main.c: 76: irobot_move_straight(200);
  2792  011432  0E00               	movlw	0
  2793  011434  0100               	movlb	0	; () banked
  2794  011436  6FCF               	movwf	(irobot_move_straight@straightSpeed+1)& (0+255),b
  2795  011438  0EC8               	movlw	200
  2796  01143A  6FCE               	movwf	irobot_move_straight@straightSpeed& (0+255),b
  2797  01143C  EC21  F0A4         	call	_irobot_move_straight	;wreg free
  2798                           
  2799                           ;main.c: 77: while(dist<5000){
  2800  011440  D025               	goto	l2260
  2801  011442                     
  2802                           ;main.c: 78: update_distance();
  2803  011442  EC8B  F0A4         	call	_update_distance	;wreg free
  2804                           
  2805                           ;main.c: 79: dist += iRDistance;
  2806  011446  0100               	movlb	0	; () banked
  2807  011448  5177               	movf	_iRDistance& (0+255),w,b
  2808  01144A  0103               	movlb	3	; () banked
  2809  01144C  27E1               	addwf	main@dist& (0+255),f,b
  2810  01144E  0100               	movlb	0	; () banked
  2811  011450  5178               	movf	(_iRDistance+1)& (0+255),w,b
  2812  011452  0103               	movlb	3	; () banked
  2813  011454  23E2               	addwfc	(main@dist+1)& (0+255),f,b
  2814                           
  2815                           ; BSR set to: 3
  2816                           ;main.c: 80: printf("%c",(char)35);
  2817  011456  0EFB               	movlw	low STR_1
  2818  011458  0100               	movlb	0	; () banked
  2819  01145A  6FCA               	movwf	printf@f& (0+255),b
  2820  01145C  0EFF               	movlw	high STR_1
  2821  01145E  0100               	movlb	0	; () banked
  2822  011460  6FCB               	movwf	(printf@f+1)& (0+255),b
  2823  011462  0E00               	movlw	0
  2824  011464  0100               	movlb	0	; () banked
  2825  011466  6FCD               	movwf	(?_printf+3)& (0+255),b
  2826  011468  0E23               	movlw	35
  2827  01146A  6FCC               	movwf	(?_printf+2)& (0+255),b
  2828  01146C  EC5C  F08A         	call	_printf	;wreg free
  2829                           
  2830                           ;main.c: 81: printf("Distance: %d\n",dist);
  2831  011470  0EED               	movlw	low STR_4
  2832  011472  0100               	movlb	0	; () banked
  2833  011474  6FCA               	movwf	printf@f& (0+255),b
  2834  011476  0EFF               	movlw	high STR_4
  2835  011478  0100               	movlb	0	; () banked
  2836  01147A  6FCB               	movwf	(printf@f+1)& (0+255),b
  2837  01147C  C3E1  F0CC         	movff	main@dist,?_printf+2
  2838  011480  C3E2  F0CD         	movff	main@dist+1,?_printf+3
  2839  011484  EC5C  F08A         	call	_printf	;wreg free
  2840                           
  2841                           ;main.c: 82: Console_Render();
  2842  011488  EC6E  F087         	call	_Console_Render	;wreg free
  2843  01148C                     l2260:
  2844  01148C  0103               	movlb	3	; () banked
  2845  01148E  BFE2               	btfsc	(main@dist+1)& (0+255),7,b
  2846  011490  D7D8               	goto	l2261
  2847  011492  0E88               	movlw	136
  2848  011494  0103               	movlb	3	; () banked
  2849  011496  5DE1               	subwf	main@dist& (0+255),w,b
  2850  011498  0E13               	movlw	19
  2851  01149A  0103               	movlb	3	; () banked
  2852  01149C  59E2               	subwfb	(main@dist+1)& (0+255),w,b
  2853  01149E  A0D8               	btfss	status,0,c
  2854  0114A0  D7D0               	goto	l2261
  2855                           
  2856                           ; BSR set to: 3
  2857                           ;main.c: 83: }
  2858                           ;main.c: 84: irobot_stop_motion(0);
  2859                           
  2860                           ; BSR set to: 3
  2861  0114A2  0E00               	movlw	0
  2862  0114A4  ECCA  F0A0         	call	_irobot_stop_motion
  2863  0114A8                     l2259:
  2864                           
  2865                           ;main.c: 85: }
  2866                           ;main.c: 86: if (MXK_Release())
  2867  0114A8  EC06  F0A4         	call	_MXK_Release	;wreg free
  2868  0114AC  0900               	iorlw	0
  2869  0114AE  B4D8               	btfsc	status,2,c
  2870  0114B0  D755               	goto	l2253
  2871                           
  2872                           ;main.c: 87: MXK_Dequeue();
  2873  0114B2  ECB6  F0A1         	call	_MXK_Dequeue	;wreg free
  2874                           
  2875                           ;main.c: 88: }
  2876                           ;main.c: 89: }
  2877  0114B6  D752               	goto	l2253
  2878  0114B8                     __end_of_main:
  2879                           	opt stack 0
  2880                           tosu	equ	0xFFF
  2881                           tosh	equ	0xFFE
  2882                           tosl	equ	0xFFD
  2883                           pclath	equ	0xFFA
  2884                           tblptru	equ	0xFF8
  2885                           tblptrh	equ	0xFF7
  2886                           tblptrl	equ	0xFF6
  2887                           tablat	equ	0xFF5
  2888                           postinc0	equ	0xFEE
  2889                           wreg	equ	0xFE8
  2890                           postdec1	equ	0xFE5
  2891                           fsr1h	equ	0xFE2
  2892                           fsr1l	equ	0xFE1
  2893                           postinc2	equ	0xFDE
  2894                           status	equ	0xFD8
  2895                           
  2896 ;; *************** function _update_distance *****************
  2897 ;; Defined at:
  2898 ;;		line 315 in file "Library/iRobotSerial.c"
  2899 ;; Parameters:    Size  Location     Type
  2900 ;;		None
  2901 ;; Auto vars:     Size  Location     Type
  2902 ;;		None
  2903 ;; Return value:  Size  Location     Type
  2904 ;;                  1    wreg      void 
  2905 ;; Registers used:
  2906 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2907 ;; Tracked objects:
  2908 ;;		On entry : 0/0
  2909 ;;		On exit  : 0/0
  2910 ;;		Unchanged: 0/0
  2911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2916 ;;Total ram usage:        0 bytes
  2917 ;; Hardware stack levels used:    1
  2918 ;; Hardware stack levels required when called:   10
  2919 ;; This function calls:
  2920 ;;		_irobot_query_and_update
  2921 ;; This function is called by:
  2922 ;;		_main
  2923 ;; This function uses a non-reentrant model
  2924 ;;
  2925                           
  2926                           	psect	text1
  2927  014916                     __ptext1:
  2928                           	opt stack 0
  2929  014916                     _update_distance:
  2930                           	opt stack 20
  2931                           
  2932                           ;iRobotSerial.c: 316: irobot_query_and_update(1, iR_PKT_DISTANCE);
  2933                           
  2934                           ;incstack = 0
  2935  014916  0E00               	movlw	0
  2936  014918  0100               	movlb	0	; () banked
  2937  01491A  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  2938  01491C  0E13               	movlw	19
  2939  01491E  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  2940  014920  0E01               	movlw	1
  2941  014922  ECB5  F08D         	call	_irobot_query_and_update
  2942  014926  0012               	return		;funcret
  2943  014928                     __end_of_update_distance:
  2944                           	opt stack 0
  2945                           tosu	equ	0xFFF
  2946                           tosh	equ	0xFFE
  2947                           tosl	equ	0xFFD
  2948                           pclath	equ	0xFFA
  2949                           tblptru	equ	0xFF8
  2950                           tblptrh	equ	0xFF7
  2951                           tblptrl	equ	0xFF6
  2952                           tablat	equ	0xFF5
  2953                           postinc0	equ	0xFEE
  2954                           wreg	equ	0xFE8
  2955                           postdec1	equ	0xFE5
  2956                           fsr1h	equ	0xFE2
  2957                           fsr1l	equ	0xFE1
  2958                           postinc2	equ	0xFDE
  2959                           status	equ	0xFD8
  2960                           
  2961 ;; *************** function _update_bump_and_cliff *****************
  2962 ;; Defined at:
  2963 ;;		line 308 in file "Library/iRobotSerial.c"
  2964 ;; Parameters:    Size  Location     Type
  2965 ;;		None
  2966 ;; Auto vars:     Size  Location     Type
  2967 ;;		None
  2968 ;; Return value:  Size  Location     Type
  2969 ;;                  1    wreg      void 
  2970 ;; Registers used:
  2971 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2972 ;; Tracked objects:
  2973 ;;		On entry : 0/0
  2974 ;;		On exit  : 0/0
  2975 ;;		Unchanged: 0/0
  2976 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2977 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2978 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2979 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2980 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2981 ;;Total ram usage:        0 bytes
  2982 ;; Hardware stack levels used:    1
  2983 ;; Hardware stack levels required when called:   10
  2984 ;; This function calls:
  2985 ;;		_irobot_query_and_update
  2986 ;; This function is called by:
  2987 ;;		_main
  2988 ;; This function uses a non-reentrant model
  2989 ;;
  2990                           
  2991                           	psect	text2
  2992  014462                     __ptext2:
  2993                           	opt stack 0
  2994  014462                     _update_bump_and_cliff:
  2995                           	opt stack 20
  2996                           
  2997                           ;iRobotSerial.c: 309: irobot_query_and_update(5, iR_PKT_BUMP_DROP,
  2998                           ;iRobotSerial.c: 310: iR_PKT_CLIFF_L, iR_PKT_CLIFF_FL,
  2999                           ;iRobotSerial.c: 311: iR_PKT_CLIFF_FR, iR_PKT_CLIFF_R);
  3000                           
  3001                           ;incstack = 0
  3002  014462  0E00               	movlw	0
  3003  014464  0100               	movlb	0	; () banked
  3004  014466  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3005  014468  0E07               	movlw	7
  3006  01446A  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  3007  01446C  0E00               	movlw	0
  3008  01446E  0100               	movlb	0	; () banked
  3009  014470  6FBE               	movwf	(?_irobot_query_and_update+3)& (0+255),b
  3010  014472  0E09               	movlw	9
  3011  014474  6FBD               	movwf	(?_irobot_query_and_update+2)& (0+255),b
  3012  014476  0E00               	movlw	0
  3013  014478  0100               	movlb	0	; () banked
  3014  01447A  6FC0               	movwf	(?_irobot_query_and_update+5)& (0+255),b
  3015  01447C  0E0A               	movlw	10
  3016  01447E  6FBF               	movwf	(?_irobot_query_and_update+4)& (0+255),b
  3017  014480  0E00               	movlw	0
  3018  014482  0100               	movlb	0	; () banked
  3019  014484  6FC2               	movwf	(?_irobot_query_and_update+7)& (0+255),b
  3020  014486  0E0B               	movlw	11
  3021  014488  6FC1               	movwf	(?_irobot_query_and_update+6)& (0+255),b
  3022  01448A  0E00               	movlw	0
  3023  01448C  0100               	movlb	0	; () banked
  3024  01448E  6FC4               	movwf	(?_irobot_query_and_update+9)& (0+255),b
  3025  014490  0E0C               	movlw	12
  3026  014492  6FC3               	movwf	(?_irobot_query_and_update+8)& (0+255),b
  3027  014494  0E05               	movlw	5
  3028  014496  ECB5  F08D         	call	_irobot_query_and_update
  3029  01449A  0012               	return		;funcret
  3030  01449C                     __end_of_update_bump_and_cliff:
  3031                           	opt stack 0
  3032                           tosu	equ	0xFFF
  3033                           tosh	equ	0xFFE
  3034                           tosl	equ	0xFFD
  3035                           pclath	equ	0xFFA
  3036                           tblptru	equ	0xFF8
  3037                           tblptrh	equ	0xFF7
  3038                           tblptrl	equ	0xFF6
  3039                           tablat	equ	0xFF5
  3040                           postinc0	equ	0xFEE
  3041                           wreg	equ	0xFE8
  3042                           postdec1	equ	0xFE5
  3043                           fsr1h	equ	0xFE2
  3044                           fsr1l	equ	0xFE1
  3045                           postinc2	equ	0xFDE
  3046                           status	equ	0xFD8
  3047                           
  3048 ;; *************** function _update_angle *****************
  3049 ;; Defined at:
  3050 ;;		line 320 in file "Library/iRobotSerial.c"
  3051 ;; Parameters:    Size  Location     Type
  3052 ;;		None
  3053 ;; Auto vars:     Size  Location     Type
  3054 ;;		None
  3055 ;; Return value:  Size  Location     Type
  3056 ;;                  1    wreg      void 
  3057 ;; Registers used:
  3058 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3059 ;; Tracked objects:
  3060 ;;		On entry : 0/0
  3061 ;;		On exit  : 0/0
  3062 ;;		Unchanged: 0/0
  3063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3067 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3068 ;;Total ram usage:        0 bytes
  3069 ;; Hardware stack levels used:    1
  3070 ;; Hardware stack levels required when called:   10
  3071 ;; This function calls:
  3072 ;;		_irobot_query_and_update
  3073 ;; This function is called by:
  3074 ;;		_main
  3075 ;; This function uses a non-reentrant model
  3076 ;;
  3077                           
  3078                           	psect	text3
  3079  014928                     __ptext3:
  3080                           	opt stack 0
  3081  014928                     _update_angle:
  3082                           	opt stack 20
  3083                           
  3084                           ;iRobotSerial.c: 321: irobot_query_and_update(1, iR_PKT_ANGLE);
  3085                           
  3086                           ;incstack = 0
  3087  014928  0E00               	movlw	0
  3088  01492A  0100               	movlb	0	; () banked
  3089  01492C  6FBC               	movwf	(?_irobot_query_and_update+1)& (0+255),b
  3090  01492E  0E14               	movlw	20
  3091  014930  6FBB               	movwf	?_irobot_query_and_update& (0+255),b
  3092  014932  0E01               	movlw	1
  3093  014934  ECB5  F08D         	call	_irobot_query_and_update
  3094  014938  0012               	return		;funcret
  3095  01493A                     __end_of_update_angle:
  3096                           	opt stack 0
  3097                           tosu	equ	0xFFF
  3098                           tosh	equ	0xFFE
  3099                           tosl	equ	0xFFD
  3100                           pclath	equ	0xFFA
  3101                           tblptru	equ	0xFF8
  3102                           tblptrh	equ	0xFF7
  3103                           tblptrl	equ	0xFF6
  3104                           tablat	equ	0xFF5
  3105                           postinc0	equ	0xFEE
  3106                           wreg	equ	0xFE8
  3107                           postdec1	equ	0xFE5
  3108                           fsr1h	equ	0xFE2
  3109                           fsr1l	equ	0xFE1
  3110                           postinc2	equ	0xFDE
  3111                           status	equ	0xFD8
  3112                           
  3113 ;; *************** function _irobot_query_and_update *****************
  3114 ;; Defined at:
  3115 ;;		line 130 in file "Library/iRobotSerial.c"
  3116 ;; Parameters:    Size  Location     Type
  3117 ;;  numberOfPack    1    wreg     unsigned char 
  3118 ;; Auto vars:     Size  Location     Type
  3119 ;;  numberOfPack    1   24[BANK0 ] unsigned char 
  3120 ;;  TXArray       256    0[BANK2 ] unsigned char [256]
  3121 ;;  RXArray       256    0[BANK1 ] unsigned char [256]
  3122 ;;  packetIDs       2   21[BANK0 ] PTR void [1]
  3123 ;;		 -> ?_irobot_query_and_update(1), 
  3124 ;;  i               1   28[BANK0 ] unsigned char 
  3125 ;;  startIndex      1   27[BANK0 ] unsigned char 
  3126 ;;  j               1   26[BANK0 ] unsigned char 
  3127 ;;  packetVariab    1   25[BANK0 ] unsigned char 
  3128 ;;  streamSize      1   23[BANK0 ] unsigned char 
  3129 ;; Return value:  Size  Location     Type
  3130 ;;                  1    wreg      void 
  3131 ;; Registers used:
  3132 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3133 ;; Tracked objects:
  3134 ;;		On entry : 0/0
  3135 ;;		On exit  : 0/0
  3136 ;;		Unchanged: 0/0
  3137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3138 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3139 ;;      Locals:         0       8     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3140 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3141 ;;      Totals:         0      23     256     256       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3142 ;;Total ram usage:      535 bytes
  3143 ;; Hardware stack levels used:    1
  3144 ;; Hardware stack levels required when called:    9
  3145 ;; This function calls:
  3146 ;;		_eusart_getch
  3147 ;;		_eusart_putch
  3148 ;;		_get_packet_size
  3149 ;;		_rx_assign
  3150 ;; This function is called by:
  3151 ;;		_update_bump_and_cliff
  3152 ;;		_update_distance
  3153 ;;		_update_angle
  3154 ;; This function uses a non-reentrant model
  3155 ;;
  3156                           
  3157                           	psect	text4
  3158  011B6A                     __ptext4:
  3159                           	opt stack 0
  3160  011B6A                     _irobot_query_and_update:
  3161                           	opt stack 20
  3162                           
  3163                           ;incstack = 0
  3164                           ;irobot_query_and_update@numberOfPacketRequests stored from wreg
  3165  011B6A  0100               	movlb	0	; () banked
  3166  011B6C  6FCD               	movwf	irobot_query_and_update@numberOfPacketRequests& (0+255),b
  3167                           
  3168                           ;iRobotSerial.c: 131: UINT8 i, j, packetVariable, streamSize = 0, startIndex = 0, RXArra
      +                          y[256], TXArray[256];
  3169  011B6E  0E00               	movlw	0
  3170  011B70  0100               	movlb	0	; () banked
  3171  011B72  6FCC               	movwf	irobot_query_and_update@streamSize& (0+255),b
  3172  011B74  0E00               	movlw	0
  3173  011B76  0100               	movlb	0	; () banked
  3174  011B78  6FD0               	movwf	irobot_query_and_update@startIndex& (0+255),b
  3175                           
  3176                           ;iRobotSerial.c: 133: va_list packetIDs;
  3177                           ;iRobotSerial.c: 134: *packetIDs = __va_start();
  3178  011B7A  0EBB               	movlw	low ?_irobot_query_and_update
  3179  011B7C  0100               	movlb	0	; () banked
  3180  011B7E  6FCA               	movwf	irobot_query_and_update@packetIDs& (0+255),b
  3181  011B80  0E00               	movlw	high ?_irobot_query_and_update
  3182  011B82  0100               	movlb	0	; () banked
  3183  011B84  6FCB               	movwf	(irobot_query_and_update@packetIDs+1)& (0+255),b
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;iRobotSerial.c: 135: eusart_putch(iR_QUERY_LIST);
  3187  011B86  0E95               	movlw	149
  3188  011B88  ECB4  F0A4         	call	_eusart_putch
  3189                           
  3190                           ;iRobotSerial.c: 136: eusart_putch(numberOfPacketRequests);
  3191  011B8C  0100               	movlb	0	; () banked
  3192  011B8E  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3193  011B90  ECB4  F0A4         	call	_eusart_putch
  3194                           
  3195                           ;iRobotSerial.c: 137: for (i = 0; i < numberOfPacketRequests; i++){
  3196  011B94  0E00               	movlw	0
  3197  011B96  0100               	movlb	0	; () banked
  3198  011B98  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3199  011B9A  D023               	goto	l2091
  3200  011B9C                     
  3201                           ; BSR set to: 0
  3202                           ;iRobotSerial.c: 138: packetVariable = (*(int *)__va_arg((*(int **)packetIDs), (int)0));
  3203                           
  3204                           ; BSR set to: 0
  3205  011B9C  C0CA  FFD9         	movff	irobot_query_and_update@packetIDs,fsr2l
  3206  011BA0  C0CB  FFDA         	movff	irobot_query_and_update@packetIDs+1,fsr2h
  3207  011BA4  50DF               	movf	indf2,w,c
  3208  011BA6  0100               	movlb	0	; () banked
  3209  011BA8  6FCE               	movwf	irobot_query_and_update@packetVariable& (0+255),b
  3210                           
  3211                           ; BSR set to: 0
  3212  011BAA  0E02               	movlw	2
  3213  011BAC  0100               	movlb	0	; () banked
  3214  011BAE  27CA               	addwf	irobot_query_and_update@packetIDs& (0+255),f,b
  3215  011BB0  0E00               	movlw	0
  3216  011BB2  23CB               	addwfc	(irobot_query_and_update@packetIDs+1)& (0+255),f,b
  3217                           
  3218                           ; BSR set to: 0
  3219                           ;iRobotSerial.c: 139: streamSize += get_packet_size(packetVariable);
  3220  011BB4  0100               	movlb	0	; () banked
  3221  011BB6  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3222  011BB8  ECDF  F09D         	call	_get_packet_size
  3223  011BBC  0100               	movlb	0	; () banked
  3224  011BBE  27CC               	addwf	irobot_query_and_update@streamSize& (0+255),f,b
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;iRobotSerial.c: 140: TXArray[i] = packetVariable;
  3228  011BC0  0100               	movlb	0	; () banked
  3229  011BC2  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3230  011BC4  0D01               	mullw	1
  3231  011BC6  0E00               	movlw	low irobot_query_and_update@TXArray
  3232  011BC8  24F3               	addwf	prodl,w,c
  3233  011BCA  6ED9               	movwf	fsr2l,c
  3234  011BCC  0E02               	movlw	high irobot_query_and_update@TXArray
  3235  011BCE  20F4               	addwfc	prodh,w,c
  3236  011BD0  6EDA               	movwf	fsr2h,c
  3237  011BD2  C0CE  FFDF         	movff	irobot_query_and_update@packetVariable,indf2
  3238                           
  3239                           ; BSR set to: 0
  3240                           ;iRobotSerial.c: 141: eusart_putch(packetVariable);
  3241  011BD6  0100               	movlb	0	; () banked
  3242  011BD8  51CE               	movf	irobot_query_and_update@packetVariable& (0+255),w,b
  3243  011BDA  ECB4  F0A4         	call	_eusart_putch
  3244  011BDE  0100               	movlb	0	; () banked
  3245  011BE0  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3246  011BE2                     l2091:
  3247                           
  3248                           ; BSR set to: 0
  3249                           
  3250                           ; BSR set to: 0
  3251  011BE2  0100               	movlb	0	; () banked
  3252  011BE4  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3253  011BE6  0100               	movlb	0	; () banked
  3254  011BE8  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3255  011BEA  A0D8               	btfss	status,0,c
  3256  011BEC  D7D7               	goto	l2092
  3257                           
  3258                           ; BSR set to: 0
  3259                           ;iRobotSerial.c: 142: }
  3260                           ;iRobotSerial.c: 143: ;
  3261                           ;iRobotSerial.c: 145: for (i = 0; i < streamSize; i++){RXArray[i] = eusart_getch();}
  3262                           
  3263                           ; BSR set to: 0
  3264  011BEE  0E00               	movlw	0
  3265  011BF0  0100               	movlb	0	; () banked
  3266  011BF2  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3267  011BF4  D00E               	goto	l2094
  3268  011BF6                     
  3269                           ; BSR set to: 0
  3270                           
  3271                           ; BSR set to: 0
  3272  011BF6  0100               	movlb	0	; () banked
  3273  011BF8  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3274  011BFA  0D01               	mullw	1
  3275  011BFC  0E00               	movlw	low irobot_query_and_update@RXArray
  3276  011BFE  24F3               	addwf	prodl,w,c
  3277  011C00  6ED9               	movwf	fsr2l,c
  3278  011C02  0E01               	movlw	high irobot_query_and_update@RXArray
  3279  011C04  20F4               	addwfc	prodh,w,c
  3280  011C06  6EDA               	movwf	fsr2h,c
  3281  011C08  ECEA  F0A4         	call	_eusart_getch	;wreg free
  3282  011C0C  6EDF               	movwf	indf2,c
  3283  011C0E  0100               	movlb	0	; () banked
  3284  011C10  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3285  011C12                     l2094:
  3286                           
  3287                           ; BSR set to: 0
  3288                           
  3289                           ; BSR set to: 0
  3290  011C12  0100               	movlb	0	; () banked
  3291  011C14  51CC               	movf	irobot_query_and_update@streamSize& (0+255),w,b
  3292  011C16  0100               	movlb	0	; () banked
  3293  011C18  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3294  011C1A  A0D8               	btfss	status,0,c
  3295  011C1C  D7EC               	goto	l2095
  3296                           
  3297                           ; BSR set to: 0
  3298                           ;iRobotSerial.c: 147: for (i = 0; i < numberOfPacketRequests; i++){
  3299                           
  3300                           ; BSR set to: 0
  3301  011C1E  0E00               	movlw	0
  3302  011C20  0100               	movlb	0	; () banked
  3303  011C22  6FD1               	movwf	irobot_query_and_update@i& (0+255),b
  3304  011C24  D05E               	goto	l2097
  3305  011C26                     l2098:
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;iRobotSerial.c: 148: for (j = startIndex; j < get_packet_size(TXArray[i]) + startIndex;
      +                           j++){
  3309  011C26  C0D0  F0CF         	movff	irobot_query_and_update@startIndex,irobot_query_and_update@j
  3310  011C2A  D021               	goto	l2099
  3311  011C2C                     
  3312                           ; BSR set to: 0
  3313                           ;iRobotSerial.c: 149: rx_assign(TXArray[i], RXArray[j], j - startIndex);
  3314                           
  3315                           ; BSR set to: 0
  3316  011C2C  0100               	movlb	0	; () banked
  3317  011C2E  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3318  011C30  0D01               	mullw	1
  3319  011C32  0E00               	movlw	low irobot_query_and_update@RXArray
  3320  011C34  24F3               	addwf	prodl,w,c
  3321  011C36  6ED9               	movwf	fsr2l,c
  3322  011C38  0E01               	movlw	high irobot_query_and_update@RXArray
  3323  011C3A  20F4               	addwfc	prodh,w,c
  3324  011C3C  6EDA               	movwf	fsr2h,c
  3325  011C3E  50DF               	movf	indf2,w,c
  3326  011C40  0100               	movlb	0	; () banked
  3327  011C42  6FB6               	movwf	rx_assign@packetIDValue& (0+255),b
  3328  011C44  0100               	movlb	0	; () banked
  3329  011C46  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3330  011C48  0800               	sublw	0
  3331  011C4A  0100               	movlb	0	; () banked
  3332  011C4C  25CF               	addwf	irobot_query_and_update@j& (0+255),w,b
  3333  011C4E  0100               	movlb	0	; () banked
  3334  011C50  6FB7               	movwf	rx_assign@byteNumber& (0+255),b
  3335  011C52  0100               	movlb	0	; () banked
  3336  011C54  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3337  011C56  0D01               	mullw	1
  3338  011C58  0E00               	movlw	low irobot_query_and_update@TXArray
  3339  011C5A  24F3               	addwf	prodl,w,c
  3340  011C5C  6ED9               	movwf	fsr2l,c
  3341  011C5E  0E02               	movlw	high irobot_query_and_update@TXArray
  3342  011C60  20F4               	addwfc	prodh,w,c
  3343  011C62  6EDA               	movwf	fsr2h,c
  3344  011C64  50DF               	movf	indf2,w,c
  3345  011C66  EC67  F092         	call	_rx_assign
  3346  011C6A  0100               	movlb	0	; () banked
  3347  011C6C  2BCF               	incf	irobot_query_and_update@j& (0+255),f,b
  3348  011C6E                     l2099:
  3349                           
  3350                           ; BSR set to: 0
  3351                           
  3352                           ; BSR set to: 0
  3353  011C6E  0100               	movlb	0	; () banked
  3354  011C70  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3355  011C72  0D01               	mullw	1
  3356  011C74  0E00               	movlw	low irobot_query_and_update@TXArray
  3357  011C76  24F3               	addwf	prodl,w,c
  3358  011C78  6ED9               	movwf	fsr2l,c
  3359  011C7A  0E02               	movlw	high irobot_query_and_update@TXArray
  3360  011C7C  20F4               	addwfc	prodh,w,c
  3361  011C7E  6EDA               	movwf	fsr2h,c
  3362  011C80  50DF               	movf	indf2,w,c
  3363  011C82  ECDF  F09D         	call	_get_packet_size
  3364  011C86  0100               	movlb	0	; () banked
  3365  011C88  6FC5               	movwf	??_irobot_query_and_update& (0+255),b
  3366  011C8A  6BC6               	clrf	(??_irobot_query_and_update+1)& (0+255),b
  3367  011C8C  0100               	movlb	0	; () banked
  3368  011C8E  51D0               	movf	irobot_query_and_update@startIndex& (0+255),w,b
  3369  011C90  0100               	movlb	0	; () banked
  3370  011C92  27C5               	addwf	??_irobot_query_and_update& (0+255),f,b
  3371  011C94  0E00               	movlw	0
  3372  011C96  23C6               	addwfc	(??_irobot_query_and_update+1)& (0+255),f,b
  3373  011C98  0100               	movlb	0	; () banked
  3374  011C9A  51CF               	movf	irobot_query_and_update@j& (0+255),w,b
  3375  011C9C  0100               	movlb	0	; () banked
  3376  011C9E  6FC7               	movwf	(??_irobot_query_and_update+2)& (0+255),b
  3377  011CA0  6BC8               	clrf	(??_irobot_query_and_update+3)& (0+255),b
  3378  011CA2  0100               	movlb	0	; () banked
  3379  011CA4  51C5               	movf	??_irobot_query_and_update& (0+255),w,b
  3380  011CA6  0100               	movlb	0	; () banked
  3381  011CA8  5DC7               	subwf	(??_irobot_query_and_update+2)& (0+255),w,b
  3382  011CAA  0100               	movlb	0	; () banked
  3383  011CAC  51C8               	movf	(??_irobot_query_and_update+3)& (0+255),w,b
  3384  011CAE  0A80               	xorlw	128
  3385  011CB0  0100               	movlb	0	; () banked
  3386  011CB2  6FC9               	movwf	(??_irobot_query_and_update+4)& (0+255),b
  3387  011CB4  0100               	movlb	0	; () banked
  3388  011CB6  51C6               	movf	(??_irobot_query_and_update+1)& (0+255),w,b
  3389  011CB8  0A80               	xorlw	128
  3390  011CBA  0100               	movlb	0	; () banked
  3391  011CBC  59C9               	subwfb	(??_irobot_query_and_update+4)& (0+255),w,b
  3392  011CBE  A0D8               	btfss	status,0,c
  3393  011CC0  D7B5               	goto	l2100
  3394                           
  3395                           ; BSR set to: 0
  3396                           ;iRobotSerial.c: 150: }
  3397                           ;iRobotSerial.c: 151: startIndex += get_packet_size(TXArray[i]);
  3398                           
  3399                           ; BSR set to: 0
  3400  011CC2  0100               	movlb	0	; () banked
  3401  011CC4  51D1               	movf	irobot_query_and_update@i& (0+255),w,b
  3402  011CC6  0D01               	mullw	1
  3403  011CC8  0E00               	movlw	low irobot_query_and_update@TXArray
  3404  011CCA  24F3               	addwf	prodl,w,c
  3405  011CCC  6ED9               	movwf	fsr2l,c
  3406  011CCE  0E02               	movlw	high irobot_query_and_update@TXArray
  3407  011CD0  20F4               	addwfc	prodh,w,c
  3408  011CD2  6EDA               	movwf	fsr2h,c
  3409  011CD4  50DF               	movf	indf2,w,c
  3410  011CD6  ECDF  F09D         	call	_get_packet_size
  3411  011CDA  0100               	movlb	0	; () banked
  3412  011CDC  27D0               	addwf	irobot_query_and_update@startIndex& (0+255),f,b
  3413                           
  3414                           ; BSR set to: 0
  3415  011CDE  0100               	movlb	0	; () banked
  3416  011CE0  2BD1               	incf	irobot_query_and_update@i& (0+255),f,b
  3417  011CE2                     l2097:
  3418                           
  3419                           ; BSR set to: 0
  3420                           
  3421                           ; BSR set to: 0
  3422  011CE2  0100               	movlb	0	; () banked
  3423  011CE4  51CD               	movf	irobot_query_and_update@numberOfPacketRequests& (0+255),w,b
  3424  011CE6  0100               	movlb	0	; () banked
  3425  011CE8  5DD1               	subwf	irobot_query_and_update@i& (0+255),w,b
  3426  011CEA  B0D8               	btfsc	status,0,c
  3427  011CEC  0012               	return	
  3428  011CEE  D79B               	goto	l2098
  3429  011CF0                     __end_of_irobot_query_and_update:
  3430                           	opt stack 0
  3431                           tosu	equ	0xFFF
  3432                           tosh	equ	0xFFE
  3433                           tosl	equ	0xFFD
  3434                           pclath	equ	0xFFA
  3435                           tblptru	equ	0xFF8
  3436                           tblptrh	equ	0xFF7
  3437                           tblptrl	equ	0xFF6
  3438                           tablat	equ	0xFF5
  3439                           prodh	equ	0xFF4
  3440                           prodl	equ	0xFF3
  3441                           postinc0	equ	0xFEE
  3442                           wreg	equ	0xFE8
  3443                           postdec1	equ	0xFE5
  3444                           fsr1h	equ	0xFE2
  3445                           fsr1l	equ	0xFE1
  3446                           indf2	equ	0xFDF
  3447                           postinc2	equ	0xFDE
  3448                           fsr2h	equ	0xFDA
  3449                           fsr2l	equ	0xFD9
  3450                           status	equ	0xFD8
  3451                           
  3452 ;; *************** function _rx_assign *****************
  3453 ;; Defined at:
  3454 ;;		line 74 in file "Library/iRobotSerial.c"
  3455 ;; Parameters:    Size  Location     Type
  3456 ;;  packetID        1    wreg     unsigned char 
  3457 ;;  packetIDValu    1    1[BANK0 ] unsigned char 
  3458 ;;  byteNumber      1    2[BANK0 ] unsigned char 
  3459 ;; Auto vars:     Size  Location     Type
  3460 ;;  packetID        1    5[BANK0 ] unsigned char 
  3461 ;; Return value:  Size  Location     Type
  3462 ;;                  1    wreg      void 
  3463 ;; Registers used:
  3464 ;;		wreg, status,2, status,0, cstack
  3465 ;; Tracked objects:
  3466 ;;		On entry : 0/0
  3467 ;;		On exit  : 0/0
  3468 ;;		Unchanged: 0/0
  3469 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3470 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3471 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3472 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3473 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3474 ;;Total ram usage:        5 bytes
  3475 ;; Hardware stack levels used:    1
  3476 ;; Hardware stack levels required when called:    8
  3477 ;; This function calls:
  3478 ;;		_sort_iRBumpDrop
  3479 ;; This function is called by:
  3480 ;;		_irobot_query_and_update
  3481 ;; This function uses a non-reentrant model
  3482 ;;
  3483                           
  3484                           	psect	text5
  3485  0124CE                     __ptext5:
  3486                           	opt stack 0
  3487  0124CE                     _rx_assign:
  3488                           	opt stack 20
  3489                           
  3490                           ; BSR set to: 0
  3491                           ;incstack = 0
  3492                           ;rx_assign@packetID stored from wreg
  3493  0124CE  0100               	movlb	0	; () banked
  3494  0124D0  6FBA               	movwf	rx_assign@packetID& (0+255),b
  3495                           
  3496                           ;iRobotSerial.c: 75: switch (packetID){
  3497  0124D2  D057               	goto	l2031
  3498  0124D4                     l2032:
  3499                           
  3500                           ; BSR set to: 0
  3501  0124D4  C0B6  F034         	movff	rx_assign@packetIDValue,_iRBumpDrop
  3502                           
  3503                           ; BSR set to: 0
  3504  0124D8  EC2C  F09A         	call	_sort_iRBumpDrop	;wreg free
  3505  0124DC  0012               	return	
  3506  0124DE                     l2034:
  3507                           
  3508                           ; BSR set to: 0
  3509  0124DE  C0B6  F033         	movff	rx_assign@packetIDValue,_iRWall
  3510  0124E2  0012               	return	
  3511  0124E4                     l2035:
  3512                           
  3513                           ; BSR set to: 0
  3514  0124E4  C0B6  F032         	movff	rx_assign@packetIDValue,_iRCliffL
  3515  0124E8  0012               	return	
  3516  0124EA                     l2036:
  3517                           
  3518                           ; BSR set to: 0
  3519  0124EA  C0B6  F031         	movff	rx_assign@packetIDValue,_iRCliffFL
  3520  0124EE  0012               	return	
  3521  0124F0                     l2037:
  3522                           
  3523                           ; BSR set to: 0
  3524  0124F0  C0B6  F030         	movff	rx_assign@packetIDValue,_iRCliffFR
  3525  0124F4  0012               	return	
  3526  0124F6                     l2038:
  3527                           
  3528                           ; BSR set to: 0
  3529  0124F6  C0B6  F02F         	movff	rx_assign@packetIDValue,_iRCliffR
  3530  0124FA  0012               	return	
  3531  0124FC                     l2039:
  3532                           
  3533                           ; BSR set to: 0
  3534  0124FC  C0B6  F02E         	movff	rx_assign@packetIDValue,_iRVirtualWall
  3535  012500  0012               	return	
  3536  012502                     
  3537                           ; BSR set to: 0
  3538                           ;iRobotSerial.c: 84: (byteNumber == 0) ? (iRDistanceSS.HB = packetIDValue) : (iRDistance
      +                          SS.LB = packetIDValue,
  3539                           ;iRobotSerial.c: 85: iRDistance = ((iRDistanceSS.HB)<<8) + iRDistanceSS.LB); break;
  3540                           
  3541                           ; BSR set to: 0
  3542  012502  0100               	movlb	0	; () banked
  3543  012504  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3544  012506  0100               	movlb	0	; () banked
  3545  012508  A4D8               	btfss	status,2,c
  3546  01250A  D005               	goto	l2042
  3547                           
  3548                           ; BSR set to: 0
  3549  01250C  C0B6  F064         	movff	rx_assign@packetIDValue,_iRDistanceSS
  3550  012510  0100               	movlb	0	; () banked
  3551  012512  6B65               	clrf	(_iRDistanceSS+1)& (0+255),b
  3552  012514  0012               	return	
  3553  012516                     l2042:
  3554                           
  3555                           ; BSR set to: 0
  3556  012516  C0B6  F066         	movff	rx_assign@packetIDValue,_iRDistanceSS+2
  3557  01251A  0100               	movlb	0	; () banked
  3558  01251C  6B67               	clrf	(_iRDistanceSS+3)& (0+255),b
  3559                           
  3560                           ; BSR set to: 0
  3561  01251E  0100               	movlb	0	; () banked
  3562  012520  5164               	movf	_iRDistanceSS& (0+255),w,b
  3563  012522  0100               	movlb	0	; () banked
  3564  012524  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3565  012526  6BB8               	clrf	??_rx_assign& (0+255),b
  3566  012528  0100               	movlb	0	; () banked
  3567  01252A  5166               	movf	(_iRDistanceSS+2)& (0+255),w,b
  3568  01252C  0100               	movlb	0	; () banked
  3569  01252E  25B8               	addwf	??_rx_assign& (0+255),w,b
  3570  012530  0100               	movlb	0	; () banked
  3571  012532  6F77               	movwf	_iRDistance& (0+255),b
  3572  012534  0100               	movlb	0	; () banked
  3573  012536  5167               	movf	(_iRDistanceSS+3)& (0+255),w,b
  3574  012538  0100               	movlb	0	; () banked
  3575  01253A  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3576  01253C  0100               	movlb	0	; () banked
  3577  01253E  6F78               	movwf	(_iRDistance+1)& (0+255),b
  3578                           
  3579                           ; BSR set to: 0
  3580  012540  0012               	return	
  3581  012542                     
  3582                           ; BSR set to: 0
  3583                           ;iRobotSerial.c: 87: (byteNumber == 0) ? (iRAngleSS.HB = packetIDValue) : (iRAngleSS.LB 
      +                          = packetIDValue,
  3584                           ;iRobotSerial.c: 88: iRAngle = ((iRAngleSS.HB)<<8) + iRAngleSS.LB); break;
  3585                           
  3586                           ; BSR set to: 0
  3587  012542  0100               	movlb	0	; () banked
  3588  012544  51B7               	movf	rx_assign@byteNumber& (0+255),w,b
  3589  012546  0100               	movlb	0	; () banked
  3590  012548  A4D8               	btfss	status,2,c
  3591  01254A  D005               	goto	l2047
  3592                           
  3593                           ; BSR set to: 0
  3594  01254C  C0B6  F060         	movff	rx_assign@packetIDValue,_iRAngleSS
  3595  012550  0100               	movlb	0	; () banked
  3596  012552  6B61               	clrf	(_iRAngleSS+1)& (0+255),b
  3597  012554  0012               	return	
  3598  012556                     l2047:
  3599                           
  3600                           ; BSR set to: 0
  3601  012556  C0B6  F062         	movff	rx_assign@packetIDValue,_iRAngleSS+2
  3602  01255A  0100               	movlb	0	; () banked
  3603  01255C  6B63               	clrf	(_iRAngleSS+3)& (0+255),b
  3604                           
  3605                           ; BSR set to: 0
  3606  01255E  0100               	movlb	0	; () banked
  3607  012560  5160               	movf	_iRAngleSS& (0+255),w,b
  3608  012562  0100               	movlb	0	; () banked
  3609  012564  6FB9               	movwf	(??_rx_assign+1)& (0+255),b
  3610  012566  6BB8               	clrf	??_rx_assign& (0+255),b
  3611  012568  0100               	movlb	0	; () banked
  3612  01256A  5162               	movf	(_iRAngleSS+2)& (0+255),w,b
  3613  01256C  0100               	movlb	0	; () banked
  3614  01256E  25B8               	addwf	??_rx_assign& (0+255),w,b
  3615  012570  0100               	movlb	0	; () banked
  3616  012572  6F75               	movwf	_iRAngle& (0+255),b
  3617  012574  0100               	movlb	0	; () banked
  3618  012576  5163               	movf	(_iRAngleSS+3)& (0+255),w,b
  3619  012578  0100               	movlb	0	; () banked
  3620  01257A  21B9               	addwfc	(??_rx_assign+1)& (0+255),w,b
  3621  01257C  0100               	movlb	0	; () banked
  3622  01257E  6F76               	movwf	(_iRAngle+1)& (0+255),b
  3623                           
  3624                           ; BSR set to: 0
  3625                           ;iRobotSerial.c: 89: }
  3626                           
  3627                           ; BSR set to: 0
  3628  012580  0012               	return	
  3629  012582                     l2031:
  3630                           
  3631                           ; BSR set to: 0
  3632  012582  0100               	movlb	0	; () banked
  3633  012584  51BA               	movf	rx_assign@packetID& (0+255),w,b
  3634                           
  3635                           ; Switch size 1, requested type "space"
  3636                           ; Number of cases is 9, Range of values is 7 to 20
  3637                           ; switch strategies available:
  3638                           ; Name         Instructions Cycles
  3639                           ; simple_byte           28    15 (average)
  3640                           ;	Chosen strategy is simple_byte
  3641  012586  0A07               	xorlw	7	; case 7
  3642  012588  B4D8               	btfsc	status,2,c
  3643  01258A  D7A4               	goto	l2032
  3644  01258C  0A0F               	xorlw	15	; case 8
  3645  01258E  B4D8               	btfsc	status,2,c
  3646  012590  D7A6               	goto	l2034
  3647  012592  0A01               	xorlw	1	; case 9
  3648  012594  B4D8               	btfsc	status,2,c
  3649  012596  D7A6               	goto	l2035
  3650  012598  0A03               	xorlw	3	; case 10
  3651  01259A  B4D8               	btfsc	status,2,c
  3652  01259C  D7A6               	goto	l2036
  3653  01259E  0A01               	xorlw	1	; case 11
  3654  0125A0  B4D8               	btfsc	status,2,c
  3655  0125A2  D7A6               	goto	l2037
  3656  0125A4  0A07               	xorlw	7	; case 12
  3657  0125A6  B4D8               	btfsc	status,2,c
  3658  0125A8  D7A6               	goto	l2038
  3659  0125AA  0A01               	xorlw	1	; case 13
  3660  0125AC  B4D8               	btfsc	status,2,c
  3661  0125AE  D7A6               	goto	l2039
  3662  0125B0  0A1E               	xorlw	30	; case 19
  3663  0125B2  B4D8               	btfsc	status,2,c
  3664  0125B4  D7A6               	goto	l2040
  3665  0125B6  0A07               	xorlw	7	; case 20
  3666  0125B8  A4D8               	btfss	status,2,c
  3667  0125BA  0012               	return	
  3668  0125BC  D7C2               	goto	l2045
  3669  0125BE                     __end_of_rx_assign:
  3670                           	opt stack 0
  3671                           tosu	equ	0xFFF
  3672                           tosh	equ	0xFFE
  3673                           tosl	equ	0xFFD
  3674                           pclath	equ	0xFFA
  3675                           tblptru	equ	0xFF8
  3676                           tblptrh	equ	0xFF7
  3677                           tblptrl	equ	0xFF6
  3678                           tablat	equ	0xFF5
  3679                           prodh	equ	0xFF4
  3680                           prodl	equ	0xFF3
  3681                           postinc0	equ	0xFEE
  3682                           wreg	equ	0xFE8
  3683                           postdec1	equ	0xFE5
  3684                           fsr1h	equ	0xFE2
  3685                           fsr1l	equ	0xFE1
  3686                           indf2	equ	0xFDF
  3687                           postinc2	equ	0xFDE
  3688                           fsr2h	equ	0xFDA
  3689                           fsr2l	equ	0xFD9
  3690                           status	equ	0xFD8
  3691                           
  3692 ;; *************** function _sort_iRBumpDrop *****************
  3693 ;; Defined at:
  3694 ;;		line 92 in file "Library/iRobotSerial.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		wreg, status,2, status,0
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3710 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3711 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3712 ;;Total ram usage:        1 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    7
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_rx_assign
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text6
  3723  013458                     __ptext6:
  3724                           	opt stack 0
  3725  013458                     _sort_iRBumpDrop:
  3726                           	opt stack 20
  3727                           
  3728                           ;iRobotSerial.c: 93: (iRBumpDrop & 0x1) ? (iRBumpRight = 1) : (iRBumpRight = 0);
  3729                           
  3730                           ;incstack = 0
  3731  013458  A034               	btfss	_iRBumpDrop,0,c
  3732  01345A  D002               	goto	l2054
  3733  01345C  0E01               	movlw	1
  3734  01345E  D001               	goto	L1
  3735  013460                     l2054:
  3736                           
  3737                           ; BSR set to: 0
  3738  013460  0E00               	movlw	0
  3739  013462                     L1:
  3740  013462  0100               	movlb	0	; () banked
  3741  013464  6F88               	movwf	_iRBumpRight& (0+255),b
  3742                           
  3743                           ; BSR set to: 0
  3744                           ;iRobotSerial.c: 94: ((iRBumpDrop >> 0x1) & (0x1)) ? (iRBumpLeft = 1) : (iRBumpLeft = 0)
      +                          ;
  3745                           
  3746                           ; BSR set to: 0
  3747  013466  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3748  01346A  0100               	movlb	0	; () banked
  3749  01346C  90D8               	bcf	status,0,c
  3750  01346E  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3751  013470  0100               	movlb	0	; () banked
  3752  013472  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3753  013474  D002               	goto	l2058
  3754                           
  3755                           ; BSR set to: 0
  3756  013476  0E01               	movlw	1
  3757  013478  D001               	goto	L2
  3758  01347A                     l2058:
  3759                           
  3760                           ; BSR set to: 0
  3761                           
  3762                           ; BSR set to: 0
  3763  01347A  0E00               	movlw	0
  3764  01347C                     L2:
  3765  01347C  0100               	movlb	0	; () banked
  3766  01347E  6F87               	movwf	_iRBumpLeft& (0+255),b
  3767                           
  3768                           ; BSR set to: 0
  3769                           ;iRobotSerial.c: 95: ((iRBumpDrop >> 0x2) & (0x1)) ? (iRDropRight = 1) : (iRDropRight = 
      +                          0);
  3770                           
  3771                           ; BSR set to: 0
  3772  013480  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3773  013484  0100               	movlb	0	; () banked
  3774  013486  90D8               	bcf	status,0,c
  3775  013488  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3776  01348A  0100               	movlb	0	; () banked
  3777  01348C  90D8               	bcf	status,0,c
  3778  01348E  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3779  013490  0100               	movlb	0	; () banked
  3780  013492  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3781  013494  D002               	goto	l2062
  3782                           
  3783                           ; BSR set to: 0
  3784  013496  0E01               	movlw	1
  3785  013498  D001               	goto	L3
  3786  01349A                     l2062:
  3787                           
  3788                           ; BSR set to: 0
  3789                           
  3790                           ; BSR set to: 0
  3791  01349A  0E00               	movlw	0
  3792  01349C                     L3:
  3793  01349C  6E2D               	movwf	_iRDropRight,c
  3794                           
  3795                           ; BSR set to: 0
  3796                           ;iRobotSerial.c: 96: ((iRBumpDrop >> 0x3) & (0x1)) ? (iRDropLeft = 1) : (iRDropLeft = 0)
      +                          ;
  3797                           
  3798                           ; BSR set to: 0
  3799  01349E  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3800  0134A2  0100               	movlb	0	; () banked
  3801  0134A4  90D8               	bcf	status,0,c
  3802  0134A6  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3803  0134A8  0100               	movlb	0	; () banked
  3804  0134AA  90D8               	bcf	status,0,c
  3805  0134AC  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3806  0134AE  0100               	movlb	0	; () banked
  3807  0134B0  90D8               	bcf	status,0,c
  3808  0134B2  33B5               	rrcf	??_sort_iRBumpDrop& (0+255),f,b
  3809  0134B4  0100               	movlb	0	; () banked
  3810  0134B6  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3811  0134B8  D002               	goto	l2066
  3812                           
  3813                           ; BSR set to: 0
  3814  0134BA  0E01               	movlw	1
  3815  0134BC  D001               	goto	L4
  3816  0134BE                     l2066:
  3817                           
  3818                           ; BSR set to: 0
  3819                           
  3820                           ; BSR set to: 0
  3821  0134BE  0E00               	movlw	0
  3822  0134C0                     L4:
  3823  0134C0  0100               	movlb	0	; () banked
  3824  0134C2  6F86               	movwf	_iRDropLeft& (0+255),b
  3825                           
  3826                           ; BSR set to: 0
  3827                           ;iRobotSerial.c: 97: ((iRBumpDrop >> 0x4) & (0x1)) ? (iRDropCaster = 1) : (iRDropCaster 
      +                          = 0);
  3828                           
  3829                           ; BSR set to: 0
  3830  0134C4  C034  F0B5         	movff	_iRBumpDrop,??_sort_iRBumpDrop
  3831  0134C8  0100               	movlb	0	; () banked
  3832  0134CA  3BB5               	swapf	??_sort_iRBumpDrop& (0+255),f,b
  3833  0134CC  0E0F               	movlw	15
  3834  0134CE  17B5               	andwf	??_sort_iRBumpDrop& (0+255),f,b
  3835  0134D0  0100               	movlb	0	; () banked
  3836  0134D2  A1B5               	btfss	??_sort_iRBumpDrop& (0+255),0,b
  3837  0134D4  D004               	goto	l2070
  3838                           
  3839                           ; BSR set to: 0
  3840  0134D6  0E01               	movlw	1
  3841  0134D8  0100               	movlb	0	; () banked
  3842  0134DA  6F85               	movwf	_iRDropCaster& (0+255),b
  3843  0134DC  0012               	return	
  3844  0134DE                     l2070:
  3845                           
  3846                           ; BSR set to: 0
  3847                           
  3848                           ; BSR set to: 0
  3849  0134DE  0E00               	movlw	0
  3850  0134E0  0100               	movlb	0	; () banked
  3851  0134E2  6F85               	movwf	_iRDropCaster& (0+255),b
  3852  0134E4  0012               	return	
  3853  0134E6                     __end_of_sort_iRBumpDrop:
  3854                           	opt stack 0
  3855                           tosu	equ	0xFFF
  3856                           tosh	equ	0xFFE
  3857                           tosl	equ	0xFFD
  3858                           pclath	equ	0xFFA
  3859                           tblptru	equ	0xFF8
  3860                           tblptrh	equ	0xFF7
  3861                           tblptrl	equ	0xFF6
  3862                           tablat	equ	0xFF5
  3863                           prodh	equ	0xFF4
  3864                           prodl	equ	0xFF3
  3865                           postinc0	equ	0xFEE
  3866                           wreg	equ	0xFE8
  3867                           postdec1	equ	0xFE5
  3868                           fsr1h	equ	0xFE2
  3869                           fsr1l	equ	0xFE1
  3870                           indf2	equ	0xFDF
  3871                           postinc2	equ	0xFDE
  3872                           fsr2h	equ	0xFDA
  3873                           fsr2l	equ	0xFD9
  3874                           status	equ	0xFD8
  3875                           
  3876 ;; *************** function _get_packet_size *****************
  3877 ;; Defined at:
  3878 ;;		line 60 in file "Library/iRobotSerial.c"
  3879 ;; Parameters:    Size  Location     Type
  3880 ;;  packetID        1    wreg     unsigned char 
  3881 ;; Auto vars:     Size  Location     Type
  3882 ;;  packetID        1    0[BANK0 ] unsigned char 
  3883 ;; Return value:  Size  Location     Type
  3884 ;;                  1    wreg      unsigned char 
  3885 ;; Registers used:
  3886 ;;		wreg, status,2, status,0
  3887 ;; Tracked objects:
  3888 ;;		On entry : 0/0
  3889 ;;		On exit  : 0/0
  3890 ;;		Unchanged: 0/0
  3891 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3892 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3893 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3894 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3895 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3896 ;;Total ram usage:        1 bytes
  3897 ;; Hardware stack levels used:    1
  3898 ;; Hardware stack levels required when called:    7
  3899 ;; This function calls:
  3900 ;;		Nothing
  3901 ;; This function is called by:
  3902 ;;		_irobot_query_and_update
  3903 ;; This function uses a non-reentrant model
  3904 ;;
  3905                           
  3906                           	psect	text7
  3907  013BBE                     __ptext7:
  3908                           	opt stack 0
  3909  013BBE                     _get_packet_size:
  3910                           	opt stack 21
  3911                           
  3912                           ; BSR set to: 0
  3913                           ;incstack = 0
  3914                           ;get_packet_size@packetID stored from wreg
  3915  013BBE  0100               	movlb	0	; () banked
  3916  013BC0  6FB5               	movwf	get_packet_size@packetID& (0+255),b
  3917                           
  3918                           ;iRobotSerial.c: 61: switch (packetID){
  3919  013BC2  D012               	goto	l2017
  3920  013BC4  0E01               	movlw	1
  3921  013BC6  0012               	return	
  3922  013BC8  0E01               	movlw	1
  3923  013BCA  0012               	return	
  3924  013BCC  0E01               	movlw	1
  3925  013BCE  0012               	return	
  3926  013BD0  0E01               	movlw	1
  3927  013BD2  0012               	return	
  3928  013BD4  0E01               	movlw	1
  3929  013BD6  0012               	return	
  3930  013BD8  0E01               	movlw	1
  3931  013BDA  0012               	return	
  3932  013BDC  0E01               	movlw	1
  3933  013BDE  0012               	return	
  3934  013BE0  0E02               	movlw	2
  3935  013BE2  0012               	return	
  3936  013BE4  0E02               	movlw	2
  3937                           
  3938                           ;iRobotSerial.c: 71: }
  3939  013BE6  0012               	return	
  3940  013BE8                     l2017:
  3941  013BE8  0100               	movlb	0	; () banked
  3942  013BEA  51B5               	movf	get_packet_size@packetID& (0+255),w,b
  3943                           
  3944                           ; Switch size 1, requested type "space"
  3945                           ; Number of cases is 9, Range of values is 7 to 20
  3946                           ; switch strategies available:
  3947                           ; Name         Instructions Cycles
  3948                           ; simple_byte           28    15 (average)
  3949                           ;	Chosen strategy is simple_byte
  3950  013BEC  0A07               	xorlw	7	; case 7
  3951  013BEE  B4D8               	btfsc	status,2,c
  3952  013BF0  D7E9               	goto	l2018
  3953  013BF2  0A0F               	xorlw	15	; case 8
  3954  013BF4  B4D8               	btfsc	status,2,c
  3955  013BF6  D7E8               	goto	l2020
  3956  013BF8  0A01               	xorlw	1	; case 9
  3957  013BFA  B4D8               	btfsc	status,2,c
  3958  013BFC  D7E7               	goto	l2021
  3959  013BFE  0A03               	xorlw	3	; case 10
  3960  013C00  B4D8               	btfsc	status,2,c
  3961  013C02  D7E6               	goto	l2022
  3962  013C04  0A01               	xorlw	1	; case 11
  3963  013C06  B4D8               	btfsc	status,2,c
  3964  013C08  D7E5               	goto	l2023
  3965  013C0A  0A07               	xorlw	7	; case 12
  3966  013C0C  B4D8               	btfsc	status,2,c
  3967  013C0E  D7E4               	goto	l2024
  3968  013C10  0A01               	xorlw	1	; case 13
  3969  013C12  B4D8               	btfsc	status,2,c
  3970  013C14  D7E3               	goto	l2025
  3971  013C16  0A1E               	xorlw	30	; case 19
  3972  013C18  B4D8               	btfsc	status,2,c
  3973  013C1A  D7E2               	goto	l2026
  3974  013C1C  0A07               	xorlw	7	; case 20
  3975  013C1E  A4D8               	btfss	status,2,c
  3976  013C20  0012               	return	
  3977  013C22  D7E0               	goto	l2027
  3978  013C24                     __end_of_get_packet_size:
  3979                           	opt stack 0
  3980                           tosu	equ	0xFFF
  3981                           tosh	equ	0xFFE
  3982                           tosl	equ	0xFFD
  3983                           pclath	equ	0xFFA
  3984                           tblptru	equ	0xFF8
  3985                           tblptrh	equ	0xFF7
  3986                           tblptrl	equ	0xFF6
  3987                           tablat	equ	0xFF5
  3988                           prodh	equ	0xFF4
  3989                           prodl	equ	0xFF3
  3990                           postinc0	equ	0xFEE
  3991                           wreg	equ	0xFE8
  3992                           postdec1	equ	0xFE5
  3993                           fsr1h	equ	0xFE2
  3994                           fsr1l	equ	0xFE1
  3995                           indf2	equ	0xFDF
  3996                           postinc2	equ	0xFDE
  3997                           fsr2h	equ	0xFDA
  3998                           fsr2l	equ	0xFD9
  3999                           status	equ	0xFD8
  4000                           
  4001 ;; *************** function _eusart_getch *****************
  4002 ;; Defined at:
  4003 ;;		line 125 in file "Library/iRobotSerial.c"
  4004 ;; Parameters:    Size  Location     Type
  4005 ;;		None
  4006 ;; Auto vars:     Size  Location     Type
  4007 ;;		None
  4008 ;; Return value:  Size  Location     Type
  4009 ;;                  1    wreg      unsigned char 
  4010 ;; Registers used:
  4011 ;;		wreg, status,2
  4012 ;; Tracked objects:
  4013 ;;		On entry : 0/0
  4014 ;;		On exit  : 0/0
  4015 ;;		Unchanged: 0/0
  4016 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4017 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4018 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4019 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4020 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4021 ;;Total ram usage:        0 bytes
  4022 ;; Hardware stack levels used:    1
  4023 ;; Hardware stack levels required when called:    7
  4024 ;; This function calls:
  4025 ;;		Nothing
  4026 ;; This function is called by:
  4027 ;;		_irobot_query_and_update
  4028 ;; This function uses a non-reentrant model
  4029 ;;
  4030                           
  4031                           	psect	text8
  4032  0149D4                     __ptext8:
  4033                           	opt stack 0
  4034  0149D4                     _eusart_getch:
  4035                           	opt stack 21
  4036                           
  4037                           ;iRobotSerial.c: 126: while (!PIR1bits.RC1IF) {};
  4038                           
  4039                           ;incstack = 0
  4040  0149D4  AA9E               	btfss	3998,5,c	;volatile
  4041  0149D6  D7FE               	goto	_eusart_getch
  4042                           
  4043                           ;iRobotSerial.c: 127: return RCREG1;
  4044  0149D8  50AF               	movf	4015,w,c	;volatile
  4045  0149DA  0012               	return	
  4046  0149DC                     __end_of_eusart_getch:
  4047                           	opt stack 0
  4048                           tosu	equ	0xFFF
  4049                           tosh	equ	0xFFE
  4050                           tosl	equ	0xFFD
  4051                           pclath	equ	0xFFA
  4052                           tblptru	equ	0xFF8
  4053                           tblptrh	equ	0xFF7
  4054                           tblptrl	equ	0xFF6
  4055                           tablat	equ	0xFF5
  4056                           prodh	equ	0xFF4
  4057                           prodl	equ	0xFF3
  4058                           postinc0	equ	0xFEE
  4059                           wreg	equ	0xFE8
  4060                           postdec1	equ	0xFE5
  4061                           fsr1h	equ	0xFE2
  4062                           fsr1l	equ	0xFE1
  4063                           indf2	equ	0xFDF
  4064                           postinc2	equ	0xFDE
  4065                           fsr2h	equ	0xFDA
  4066                           fsr2l	equ	0xFD9
  4067                           status	equ	0xFD8
  4068                           
  4069 ;; *************** function _printf *****************
  4070 ;; Defined at:
  4071 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\doprnt.c"
  4072 ;; Parameters:    Size  Location     Type
  4073 ;;  f               2   21[BANK0 ] PTR const unsigned char 
  4074 ;;		 -> STR_4(14), STR_3(3), STR_2(46), STR_1(3), 
  4075 ;; Auto vars:     Size  Location     Type
  4076 ;;  tmpval          4    0        struct .
  4077 ;;  cp              3    0        PTR const unsigned char 
  4078 ;;  val             2   34[BANK0 ] unsigned int 
  4079 ;;  ap              2   32[BANK0 ] PTR void [1]
  4080 ;;		 -> ?_printf(2), 
  4081 ;;  len             2    0        unsigned int 
  4082 ;;  c               1   36[BANK0 ] char 
  4083 ;;  flag            1   31[BANK0 ] unsigned char 
  4084 ;;  prec            1   30[BANK0 ] char 
  4085 ;; Return value:  Size  Location     Type
  4086 ;;                  2   21[BANK0 ] int 
  4087 ;; Registers used:
  4088 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4089 ;; Tracked objects:
  4090 ;;		On entry : 0/0
  4091 ;;		On exit  : 0/0
  4092 ;;		Unchanged: 0/0
  4093 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4094 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4095 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4096 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4097 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4098 ;;Total ram usage:       16 bytes
  4099 ;; Hardware stack levels used:    1
  4100 ;; Hardware stack levels required when called:   12
  4101 ;; This function calls:
  4102 ;;		___lwdiv
  4103 ;;		___lwmod
  4104 ;;		_putch
  4105 ;; This function is called by:
  4106 ;;		_main
  4107 ;; This function uses a non-reentrant model
  4108 ;;
  4109                           
  4110                           	psect	text9
  4111  0114B8                     __ptext9:
  4112                           	opt stack 0
  4113  0114B8                     _printf:
  4114                           	opt stack 18
  4115                           
  4116                           ;doprnt.c: 466: va_list ap;
  4117                           ;doprnt.c: 499: signed char c;
  4118                           ;doprnt.c: 506: signed char prec;
  4119                           ;doprnt.c: 508: unsigned char flag;
  4120                           ;doprnt.c: 523: union {
  4121                           ;doprnt.c: 524: unsigned long vd;
  4122                           ;doprnt.c: 525: double integ;
  4123                           ;doprnt.c: 526: } tmpval;
  4124                           ;doprnt.c: 528: unsigned int val;
  4125                           ;doprnt.c: 529: unsigned len;
  4126                           ;doprnt.c: 530: const char * cp;
  4127                           ;doprnt.c: 533: *ap = __va_start();
  4128                           
  4129                           ;incstack = 0
  4130  0114B8  0ECC               	movlw	low (?_printf+2)
  4131  0114BA  0100               	movlb	0	; () banked
  4132  0114BC  6FD5               	movwf	printf@ap& (0+255),b
  4133  0114BE  0E00               	movlw	high (?_printf+2)
  4134  0114C0  0100               	movlb	0	; () banked
  4135  0114C2  6FD6               	movwf	(printf@ap+1)& (0+255),b
  4136                           
  4137                           ;doprnt.c: 536: while(c = *f++) {
  4138  0114C4  D0C9               	goto	u8490
  4139  0114C6                     
  4140                           ; BSR set to: 0
  4141                           ;doprnt.c: 538: if(c != '%')
  4142                           
  4143                           ; BSR set to: 0
  4144  0114C6  0E25               	movlw	37
  4145  0114C8  0100               	movlb	0	; () banked
  4146  0114CA  19D9               	xorwf	printf@c& (0+255),w,b
  4147  0114CC  B4D8               	btfsc	status,2,c
  4148  0114CE  D005               	goto	l2278
  4149                           
  4150                           ; BSR set to: 0
  4151                           ;doprnt.c: 540: {
  4152                           ;doprnt.c: 541: (putch(c) );
  4153  0114D0  0100               	movlb	0	; () banked
  4154  0114D2  51D9               	movf	printf@c& (0+255),w,b
  4155  0114D4  ECA6  F0A4         	call	_putch
  4156                           
  4157                           ;doprnt.c: 542: continue;
  4158  0114D8  D0BF               	goto	u8490
  4159  0114DA                     l2278:
  4160                           
  4161                           ;doprnt.c: 543: }
  4162                           ;doprnt.c: 548: flag = 0;
  4163  0114DA  0E00               	movlw	0
  4164  0114DC  0100               	movlb	0	; () banked
  4165  0114DE  6FD4               	movwf	printf@flag& (0+255),b
  4166                           
  4167                           ;doprnt.c: 635: switch(c = *f++) {
  4168  0114E0  D014               	goto	l2279
  4169  0114E2                     
  4170                           ; BSR set to: 0
  4171                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  4172                           
  4173                           ; BSR set to: 0
  4174  0114E2  C0D5  FFD9         	movff	printf@ap,fsr2l
  4175  0114E6  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4176  0114EA  50DF               	movf	indf2,w,c
  4177  0114EC  0100               	movlb	0	; () banked
  4178  0114EE  6FD9               	movwf	printf@c& (0+255),b
  4179                           
  4180                           ; BSR set to: 0
  4181  0114F0  0E02               	movlw	2
  4182  0114F2  0100               	movlb	0	; () banked
  4183  0114F4  27D5               	addwf	printf@ap& (0+255),f,b
  4184  0114F6  0E00               	movlw	0
  4185  0114F8  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4186  0114FA                     
  4187                           ; BSR set to: 0
  4188                           ;doprnt.c: 809: (putch(c) );
  4189                           
  4190                           ; BSR set to: 0
  4191  0114FA  0100               	movlb	0	; () banked
  4192  0114FC  51D9               	movf	printf@c& (0+255),w,b
  4193  0114FE  ECA6  F0A4         	call	_putch
  4194                           
  4195                           ;doprnt.c: 810: continue;
  4196  011502  D0AA               	goto	u8490
  4197  011504                     
  4198                           ;doprnt.c: 818: flag |= 0x40;
  4199  011504  0100               	movlb	0	; () banked
  4200  011506  8DD4               	bsf	printf@flag& (0+255),6,b
  4201                           
  4202                           ; BSR set to: 0
  4203                           ;doprnt.c: 822: }
  4204                           
  4205                           ;doprnt.c: 819: break;
  4206  011508  D01E               	goto	l2284
  4207  01150A                     l2279:
  4208                           
  4209                           ; BSR set to: 0
  4210                           
  4211                           ; BSR set to: 0
  4212  01150A  C0CA  FFF6         	movff	printf@f,tblptrl
  4213  01150E  C0CB  FFF7         	movff	printf@f+1,tblptrh
  4214  011512  0100               	movlb	0	; () banked
  4215  011514  4BCA               	infsnz	printf@f& (0+255),f,b
  4216  011516  2BCB               	incf	(printf@f+1)& (0+255),f,b
  4217  011518                     	if	0	;tblptru may be non-zero
  4218  011518                     	endif
  4219  011518                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4220  011518  0E00               	movlw	low (__mediumconst shr (0+16))
  4221  01151A  6EF8               	movwf	tblptru,c
  4222  01151C                     	endif
  4223  01151C  0008               	tblrd		*
  4224  01151E  CFF5 F0D9          	movff	tablat,printf@c
  4225  011522  0100               	movlb	0	; () banked
  4226  011524  51D9               	movf	printf@c& (0+255),w,b
  4227                           
  4228                           ; Switch size 1, requested type "space"
  4229                           ; Number of cases is 5, Range of values is 0 to 117
  4230                           ; switch strategies available:
  4231                           ; Name         Instructions Cycles
  4232                           ; simple_byte           16     9 (average)
  4233                           ;	Chosen strategy is simple_byte
  4234  011526  0A00               	xorlw	0	; case 0
  4235  011528  B4D8               	btfsc	status,2,c
  4236  01152A  0012               	return	
  4237  01152C  0A63               	xorlw	99	; case 99
  4238  01152E  B4D8               	btfsc	status,2,c
  4239  011530  D7D8               	goto	l2285
  4240  011532  0A07               	xorlw	7	; case 100
  4241  011534  B4D8               	btfsc	status,2,c
  4242  011536  D007               	goto	l2284
  4243  011538  0A0D               	xorlw	13	; case 105
  4244  01153A  B4D8               	btfsc	status,2,c
  4245  01153C  D004               	goto	l2284
  4246  01153E  0A1C               	xorlw	28	; case 117
  4247  011540  B4D8               	btfsc	status,2,c
  4248  011542  D7E0               	goto	l2287
  4249  011544  D7DA               	goto	l2286
  4250  011546                     l2284:
  4251                           
  4252                           ; BSR set to: 0
  4253                           ;doprnt.c: 1251: if((flag & 0x40) == 0x00)
  4254  011546  0100               	movlb	0	; () banked
  4255  011548  BDD4               	btfsc	printf@flag& (0+255),6,b
  4256  01154A  D019               	goto	l2288
  4257                           
  4258                           ; BSR set to: 0
  4259                           ;doprnt.c: 1253: {
  4260                           ;doprnt.c: 1259: val = (int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4261  01154C  C0D5  FFD9         	movff	printf@ap,fsr2l
  4262  011550  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4263  011554  CFDE F0D7          	movff	postinc2,printf@val
  4264  011558  CFDD F0D8          	movff	postdec2,printf@val+1
  4265                           
  4266                           ; BSR set to: 0
  4267  01155C  0E02               	movlw	2
  4268  01155E  0100               	movlb	0	; () banked
  4269  011560  27D5               	addwf	printf@ap& (0+255),f,b
  4270  011562  0E00               	movlw	0
  4271  011564  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4272                           
  4273                           ; BSR set to: 0
  4274                           ;doprnt.c: 1261: if((int)val < 0) {
  4275  011566  0100               	movlb	0	; () banked
  4276  011568  AFD8               	btfss	(printf@val+1)& (0+255),7,b
  4277  01156A  D016               	goto	l2290
  4278                           
  4279                           ; BSR set to: 0
  4280                           ;doprnt.c: 1262: flag |= 0x03;
  4281  01156C  0E03               	movlw	3
  4282  01156E  0100               	movlb	0	; () banked
  4283  011570  13D4               	iorwf	printf@flag& (0+255),f,b
  4284                           
  4285                           ; BSR set to: 0
  4286                           ;doprnt.c: 1263: val = -val;
  4287  011572  0100               	movlb	0	; () banked
  4288  011574  6DD7               	negf	printf@val& (0+255),b
  4289  011576  1FD8               	comf	(printf@val+1)& (0+255),f,b
  4290  011578  B0D8               	btfsc	status,0,c
  4291  01157A  2BD8               	incf	(printf@val+1)& (0+255),f,b
  4292                           
  4293                           ; BSR set to: 0
  4294                           ;doprnt.c: 1264: }
  4295                           ;doprnt.c: 1266: }
  4296  01157C  D00D               	goto	l2290
  4297  01157E                     l2288:
  4298                           
  4299                           ; BSR set to: 0
  4300                           ;doprnt.c: 1268: else
  4301                           ;doprnt.c: 1273: {
  4302                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  4303                           
  4304                           ; BSR set to: 0
  4305  01157E  C0D5  FFD9         	movff	printf@ap,fsr2l
  4306  011582  C0D6  FFDA         	movff	printf@ap+1,fsr2h
  4307  011586  CFDE F0D7          	movff	postinc2,printf@val
  4308  01158A  CFDD F0D8          	movff	postdec2,printf@val+1
  4309                           
  4310                           ; BSR set to: 0
  4311  01158E  0E02               	movlw	2
  4312  011590  0100               	movlb	0	; () banked
  4313  011592  27D5               	addwf	printf@ap& (0+255),f,b
  4314  011594  0E00               	movlw	0
  4315  011596  23D6               	addwfc	(printf@ap+1)& (0+255),f,b
  4316  011598                     l2290:
  4317                           
  4318                           ; BSR set to: 0
  4319                           ;doprnt.c: 1287: }
  4320                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  4321                           
  4322                           ; BSR set to: 0
  4323  011598  0E01               	movlw	1
  4324  01159A  0100               	movlb	0	; () banked
  4325  01159C  6FD9               	movwf	printf@c& (0+255),b
  4326  01159E                     l12527:
  4327                           
  4328                           ; BSR set to: 0
  4329  01159E  0E05               	movlw	5
  4330  0115A0  0100               	movlb	0	; () banked
  4331  0115A2  19D9               	xorwf	printf@c& (0+255),w,b
  4332  0115A4  B4D8               	btfsc	status,2,c
  4333  0115A6  D019               	goto	u8470
  4334                           
  4335                           ; BSR set to: 0
  4336                           ;doprnt.c: 1306: if(val < dpowers[c])
  4337                           
  4338                           ; BSR set to: 0
  4339                           
  4340                           ; BSR set to: 0
  4341  0115A8  0100               	movlb	0	; () banked
  4342  0115AA  51D9               	movf	printf@c& (0+255),w,b
  4343  0115AC  0D02               	mullw	2
  4344  0115AE  0EB7               	movlw	low _dpowers
  4345  0115B0  24F3               	addwf	prodl,w,c
  4346  0115B2  6EF6               	movwf	tblptrl,c
  4347  0115B4  0EFD               	movlw	high _dpowers
  4348  0115B6  20F4               	addwfc	prodh,w,c
  4349  0115B8  6EF7               	movwf	tblptrh,c
  4350  0115BA                     	if	1	;There are 3 active tblptr bytes
  4351  0115BA  6AF8               	clrf	tblptru,c
  4352  0115BC  0E00               	movlw	low (__mediumconst shr (0+16))
  4353  0115BE  22F8               	addwfc	tblptru,f,c
  4354  0115C0                     	endif
  4355  0115C0  0009               	tblrd		*+
  4356  0115C2  50F5               	movf	tablat,w,c
  4357  0115C4  0100               	movlb	0	; () banked
  4358  0115C6  5DD7               	subwf	printf@val& (0+255),w,b
  4359  0115C8  0009               	tblrd		*+
  4360  0115CA  50F5               	movf	tablat,w,c
  4361  0115CC  0100               	movlb	0	; () banked
  4362  0115CE  59D8               	subwfb	(printf@val+1)& (0+255),w,b
  4363  0115D0  A0D8               	btfss	status,0,c
  4364  0115D2  D003               	goto	u8470
  4365                           
  4366                           ; BSR set to: 0
  4367                           
  4368                           ; BSR set to: 0
  4369                           
  4370                           ; BSR set to: 0
  4371                           ;doprnt.c: 1307: break;
  4372  0115D4  0100               	movlb	0	; () banked
  4373  0115D6  2BD9               	incf	printf@c& (0+255),f,b
  4374  0115D8  D7E2               	goto	l12527
  4375  0115DA                     u8470:
  4376                           
  4377                           ; BSR set to: 0
  4378                           ;doprnt.c: 1422: {
  4379                           ;doprnt.c: 1438: if(flag & 0x03)
  4380                           
  4381                           ; BSR set to: 0
  4382  0115DA  C0D4  F0D2         	movff	printf@flag,??_printf
  4383  0115DE  0E03               	movlw	3
  4384  0115E0  0100               	movlb	0	; () banked
  4385  0115E2  17D2               	andwf	??_printf& (0+255),f,b
  4386  0115E4  B4D8               	btfsc	status,2,c
  4387  0115E6  D003               	goto	l2294
  4388                           
  4389                           ; BSR set to: 0
  4390                           ;doprnt.c: 1439: (putch('-') );
  4391  0115E8  0E2D               	movlw	45
  4392  0115EA  ECA6  F0A4         	call	_putch
  4393  0115EE                     l2294:
  4394                           
  4395                           ;doprnt.c: 1469: }
  4396                           ;doprnt.c: 1472: prec = c;
  4397  0115EE  C0D9  F0D3         	movff	printf@c,printf@prec
  4398                           
  4399                           ;doprnt.c: 1474: while(prec--) {
  4400  0115F2  D02C               	goto	l2295
  4401  0115F4                     
  4402                           ;doprnt.c: 1478: {
  4403                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  4404  0115F4  0100               	movlb	0	; () banked
  4405  0115F6  51D3               	movf	printf@prec& (0+255),w,b
  4406  0115F8  0D02               	mullw	2
  4407  0115FA  0EB7               	movlw	low _dpowers
  4408  0115FC  24F3               	addwf	prodl,w,c
  4409  0115FE  6EF6               	movwf	tblptrl,c
  4410  011600  0EFD               	movlw	high _dpowers
  4411  011602  20F4               	addwfc	prodh,w,c
  4412  011604  6EF7               	movwf	tblptrh,c
  4413  011606                     	if	1	;There are 3 active tblptr bytes
  4414  011606  6AF8               	clrf	tblptru,c
  4415  011608  0E00               	movlw	low (__mediumconst shr (0+16))
  4416  01160A  22F8               	addwfc	tblptru,f,c
  4417  01160C                     	endif
  4418  01160C  0009               	tblrd		*+
  4419  01160E  CFF5 F0B7          	movff	tablat,___lwdiv@divisor
  4420  011612  000A               	tblrd		*-
  4421  011614  CFF5 F0B8          	movff	tablat,___lwdiv@divisor+1
  4422  011618  C0D7  F0B5         	movff	printf@val,___lwdiv@dividend
  4423  01161C  C0D8  F0B6         	movff	printf@val+1,___lwdiv@dividend+1
  4424  011620  EC3D  F09B         	call	___lwdiv	;wreg free
  4425  011624  C0B5  F0BC         	movff	?___lwdiv,___lwmod@dividend
  4426  011628  C0B6  F0BD         	movff	?___lwdiv+1,___lwmod@dividend+1
  4427  01162C  0E00               	movlw	0
  4428  01162E  0100               	movlb	0	; () banked
  4429  011630  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
  4430  011632  0E0A               	movlw	10
  4431  011634  6FBE               	movwf	___lwmod@divisor& (0+255),b
  4432  011636  ECDA  F09E         	call	___lwmod	;wreg free
  4433  01163A  0100               	movlb	0	; () banked
  4434  01163C  51BC               	movf	?___lwmod& (0+255),w,b
  4435  01163E  0F30               	addlw	48
  4436  011640  0100               	movlb	0	; () banked
  4437  011642  6FD9               	movwf	printf@c& (0+255),b
  4438                           
  4439                           ; BSR set to: 0
  4440                           ;doprnt.c: 1523: }
  4441                           ;doprnt.c: 1524: (putch(c) );
  4442  011644  0100               	movlb	0	; () banked
  4443  011646  51D9               	movf	printf@c& (0+255),w,b
  4444  011648  ECA6  F0A4         	call	_putch
  4445  01164C                     l2295:
  4446  01164C  0100               	movlb	0	; () banked
  4447  01164E  07D3               	decf	printf@prec& (0+255),f,b
  4448  011650  0100               	movlb	0	; () banked
  4449  011652  29D3               	incf	printf@prec& (0+255),w,b
  4450  011654  A4D8               	btfss	status,2,c
  4451  011656  D7CE               	goto	l2296
  4452  011658                     u8490:
  4453                           
  4454                           ; BSR set to: 0
  4455                           
  4456                           ; BSR set to: 0
  4457  011658  C0CA  FFF6         	movff	printf@f,tblptrl
  4458  01165C  C0CB  FFF7         	movff	printf@f+1,tblptrh
  4459  011660  0100               	movlb	0	; () banked
  4460  011662  4BCA               	infsnz	printf@f& (0+255),f,b
  4461  011664  2BCB               	incf	(printf@f+1)& (0+255),f,b
  4462  011666                     	if	0	;tblptru may be non-zero
  4463  011666                     	endif
  4464  011666                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  4465  011666  0E00               	movlw	low (__mediumconst shr (0+16))
  4466  011668  6EF8               	movwf	tblptru,c
  4467  01166A                     	endif
  4468  01166A  0008               	tblrd		*
  4469  01166C  CFF5 F0D9          	movff	tablat,printf@c
  4470  011670  0100               	movlb	0	; () banked
  4471  011672  51D9               	movf	printf@c& (0+255),w,b
  4472  011674  B4D8               	btfsc	status,2,c
  4473  011676  0012               	return	
  4474  011678  D726               	goto	l2277
  4475  01167A                     __end_of_printf:
  4476                           	opt stack 0
  4477                           tosu	equ	0xFFF
  4478                           tosh	equ	0xFFE
  4479                           tosl	equ	0xFFD
  4480                           pclath	equ	0xFFA
  4481                           tblptru	equ	0xFF8
  4482                           tblptrh	equ	0xFF7
  4483                           tblptrl	equ	0xFF6
  4484                           tablat	equ	0xFF5
  4485                           prodh	equ	0xFF4
  4486                           prodl	equ	0xFF3
  4487                           postinc0	equ	0xFEE
  4488                           wreg	equ	0xFE8
  4489                           postdec1	equ	0xFE5
  4490                           fsr1h	equ	0xFE2
  4491                           fsr1l	equ	0xFE1
  4492                           indf2	equ	0xFDF
  4493                           postinc2	equ	0xFDE
  4494                           postdec2	equ	0xFDD
  4495                           fsr2h	equ	0xFDA
  4496                           fsr2l	equ	0xFD9
  4497                           status	equ	0xFD8
  4498                           
  4499 ;; *************** function _putch *****************
  4500 ;; Defined at:
  4501 ;;		line 454 in file "Library/Console.c"
  4502 ;; Parameters:    Size  Location     Type
  4503 ;;  c               1    wreg     unsigned char 
  4504 ;; Auto vars:     Size  Location     Type
  4505 ;;  c               1   20[BANK0 ] unsigned char 
  4506 ;; Return value:  Size  Location     Type
  4507 ;;                  1    wreg      void 
  4508 ;; Registers used:
  4509 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4510 ;; Tracked objects:
  4511 ;;		On entry : 0/0
  4512 ;;		On exit  : 0/0
  4513 ;;		Unchanged: 0/0
  4514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4515 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4516 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4517 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4518 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4519 ;;Total ram usage:        1 bytes
  4520 ;; Hardware stack levels used:    1
  4521 ;; Hardware stack levels required when called:   11
  4522 ;; This function calls:
  4523 ;;		_Console_PrintChar
  4524 ;; This function is called by:
  4525 ;;		_printf
  4526 ;; This function uses a non-reentrant model
  4527 ;;
  4528                           
  4529                           	psect	text10
  4530  01494C                     __ptext10:
  4531                           	opt stack 0
  4532  01494C                     _putch:
  4533                           	opt stack 18
  4534                           
  4535                           ; BSR set to: 0
  4536                           ;incstack = 0
  4537                           ;putch@c stored from wreg
  4538  01494C  0100               	movlb	0	; () banked
  4539  01494E  6FC9               	movwf	putch@c& (0+255),b
  4540                           
  4541                           ;Console.c: 456: Console_PrintChar(c);
  4542  014950  0100               	movlb	0	; () banked
  4543  014952  51C9               	movf	putch@c& (0+255),w,b
  4544  014954  EC1D  F08C         	call	_Console_PrintChar
  4545  014958  0012               	return		;funcret
  4546  01495A                     __end_of_putch:
  4547                           	opt stack 0
  4548                           tosu	equ	0xFFF
  4549                           tosh	equ	0xFFE
  4550                           tosl	equ	0xFFD
  4551                           pclath	equ	0xFFA
  4552                           tblptru	equ	0xFF8
  4553                           tblptrh	equ	0xFF7
  4554                           tblptrl	equ	0xFF6
  4555                           tablat	equ	0xFF5
  4556                           prodh	equ	0xFF4
  4557                           prodl	equ	0xFF3
  4558                           postinc0	equ	0xFEE
  4559                           wreg	equ	0xFE8
  4560                           postdec1	equ	0xFE5
  4561                           fsr1h	equ	0xFE2
  4562                           fsr1l	equ	0xFE1
  4563                           indf2	equ	0xFDF
  4564                           postinc2	equ	0xFDE
  4565                           postdec2	equ	0xFDD
  4566                           fsr2h	equ	0xFDA
  4567                           fsr2l	equ	0xFD9
  4568                           status	equ	0xFD8
  4569                           
  4570 ;; *************** function _Console_PrintChar *****************
  4571 ;; Defined at:
  4572 ;;		line 322 in file "Library/Console.c"
  4573 ;; Parameters:    Size  Location     Type
  4574 ;;  pInput          1    wreg     unsigned char 
  4575 ;; Auto vars:     Size  Location     Type
  4576 ;;  pInput          1   19[BANK0 ] unsigned char 
  4577 ;; Return value:  Size  Location     Type
  4578 ;;                  1    wreg      void 
  4579 ;; Registers used:
  4580 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4581 ;; Tracked objects:
  4582 ;;		On entry : 0/0
  4583 ;;		On exit  : 0/0
  4584 ;;		Unchanged: 0/0
  4585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4586 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4587 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4588 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4589 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4590 ;;Total ram usage:        4 bytes
  4591 ;; Hardware stack levels used:    1
  4592 ;; Hardware stack levels required when called:   10
  4593 ;; This function calls:
  4594 ;;		_Console_Backspace
  4595 ;;		_Console_FormFeed
  4596 ;;		_Console_IncrementCursor
  4597 ;;		_Console_NewLine
  4598 ;;		_Console_ResetCursor
  4599 ;;		_Console_Tab
  4600 ;; This function is called by:
  4601 ;;		_putch
  4602 ;;		_Console_PrintString
  4603 ;; This function uses a non-reentrant model
  4604 ;;
  4605                           
  4606                           	psect	text11
  4607  01183A                     __ptext11:
  4608                           	opt stack 0
  4609  01183A                     _Console_PrintChar:
  4610                           	opt stack 18
  4611                           
  4612                           ;incstack = 0
  4613                           ;Console_PrintChar@pInput stored from wreg
  4614  01183A  0100               	movlb	0	; () banked
  4615  01183C  6FC8               	movwf	Console_PrintChar@pInput& (0+255),b
  4616                           
  4617                           ;Console.c: 324: switch(pInput)
  4618  01183E  D0B1               	goto	l1036
  4619  011840                     
  4620                           ;Console.c: 327: case '\n':
  4621                           ;Console.c: 328: Console_NewLine();
  4622  011840  ECF9  F098         	call	_Console_NewLine	;wreg free
  4623                           
  4624                           ;Console.c: 329: return;
  4625  011844  0012               	return	
  4626  011846                     
  4627                           ;Console.c: 331: Console_Backspace();
  4628  011846  EC0B  F09F         	call	_Console_Backspace	;wreg free
  4629                           
  4630                           ;Console.c: 332: return;
  4631  01184A  0012               	return	
  4632  01184C                     
  4633                           ;Console.c: 334: Console_FormFeed();
  4634  01184C  EC73  F09A         	call	_Console_FormFeed	;wreg free
  4635                           
  4636                           ;Console.c: 335: return;
  4637  011850  0012               	return	
  4638  011852                     
  4639                           ;Console.c: 337: Console_Tab();
  4640  011852  EC7F  F094         	call	_Console_Tab	;wreg free
  4641                           
  4642                           ;Console.c: 338: return;
  4643  011856  0012               	return	
  4644  011858                     
  4645                           ;Console.c: 340: Console_IncrementCursor();
  4646  011858  EC12  F09E         	call	_Console_IncrementCursor	;wreg free
  4647                           
  4648                           ;Console.c: 341: return;
  4649  01185C  0012               	return	
  4650  01185E                     
  4651                           ;Console.c: 343: Console_ResetCursor();
  4652  01185E  EC80  F0A3         	call	_Console_ResetCursor	;wreg free
  4653                           
  4654                           ;Console.c: 344: return;
  4655  011862  0012               	return	
  4656  011864                     
  4657                           ;Console.c: 350: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4658                           
  4659                           ;Console.c: 349: default:
  4660  011864  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4661  011868  0E7F               	movlw	127
  4662  01186A  0100               	movlb	0	; () banked
  4663  01186C  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4664  01186E  0100               	movlb	0	; () banked
  4665  011870  518C               	movf	_lBufferY& (0+255),w,b
  4666  011872  0D14               	mullw	20
  4667  011874  0EAA               	movlw	low _lBuffer
  4668  011876  0100               	movlb	0	; () banked
  4669  011878  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4670  01187A  0E04               	movlw	high _lBuffer
  4671  01187C  0100               	movlb	0	; () banked
  4672  01187E  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4673  011880  50F3               	movf	prodl,w,c
  4674  011882  0100               	movlb	0	; () banked
  4675  011884  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4676  011886  50F4               	movf	prodh,w,c
  4677  011888  0100               	movlb	0	; () banked
  4678  01188A  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4679  01188C  0100               	movlb	0	; () banked
  4680  01188E  518D               	movf	_lBufferX& (0+255),w,b
  4681  011890  0D01               	mullw	1
  4682  011892  50F3               	movf	prodl,w,c
  4683  011894  0100               	movlb	0	; () banked
  4684  011896  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4685  011898  6ED9               	movwf	fsr2l,c
  4686  01189A  50F4               	movf	prodh,w,c
  4687  01189C  0100               	movlb	0	; () banked
  4688  01189E  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4689  0118A0  6EDA               	movwf	fsr2h,c
  4690  0118A2  50DF               	movf	indf2,w,c
  4691  0118A4  0B7F               	andlw	127
  4692  0118A6  0100               	movlb	0	; () banked
  4693  0118A8  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4694  0118AA  B4D8               	btfsc	status,2,c
  4695  0118AC  D02E               	goto	l1047
  4696                           
  4697                           ; BSR set to: 0
  4698                           ;Console.c: 351: {
  4699                           ;Console.c: 352: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4700  0118AE  0E01               	movlw	1
  4701  0118B0  0100               	movlb	0	; () banked
  4702  0118B2  6FFF               	movwf	_change& (0+255),b
  4703                           
  4704                           ; BSR set to: 0
  4705  0118B4  0100               	movlb	0	; () banked
  4706  0118B6  518C               	movf	_lBufferY& (0+255),w,b
  4707  0118B8  0D14               	mullw	20
  4708  0118BA  0EAA               	movlw	low _lBuffer
  4709  0118BC  0100               	movlb	0	; () banked
  4710  0118BE  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4711  0118C0  0E04               	movlw	high _lBuffer
  4712  0118C2  0100               	movlb	0	; () banked
  4713  0118C4  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4714  0118C6  50F3               	movf	prodl,w,c
  4715  0118C8  0100               	movlb	0	; () banked
  4716  0118CA  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4717  0118CC  50F4               	movf	prodh,w,c
  4718  0118CE  0100               	movlb	0	; () banked
  4719  0118D0  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4720  0118D2  0100               	movlb	0	; () banked
  4721  0118D4  518D               	movf	_lBufferX& (0+255),w,b
  4722  0118D6  0D01               	mullw	1
  4723  0118D8  50F3               	movf	prodl,w,c
  4724  0118DA  0100               	movlb	0	; () banked
  4725  0118DC  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4726  0118DE  6ED9               	movwf	fsr2l,c
  4727  0118E0  50F4               	movf	prodh,w,c
  4728  0118E2  0100               	movlb	0	; () banked
  4729  0118E4  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4730  0118E6  6EDA               	movwf	fsr2h,c
  4731  0118E8  0100               	movlb	0	; () banked
  4732  0118EA  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4733  0118EC  0980               	iorlw	128
  4734  0118EE  6EDF               	movwf	indf2,c
  4735                           
  4736                           ; BSR set to: 0
  4737                           ;Console.c: 353: lCBuffer[lBufferY] = gForecolour;
  4738  0118F0  0100               	movlb	0	; () banked
  4739  0118F2  518C               	movf	_lBufferY& (0+255),w,b
  4740  0118F4  0D02               	mullw	2
  4741  0118F6  0E00               	movlw	low _lCBuffer
  4742  0118F8  24F3               	addwf	prodl,w,c
  4743  0118FA  6ED9               	movwf	fsr2l,c
  4744  0118FC  0E03               	movlw	high _lCBuffer
  4745  0118FE  20F4               	addwfc	prodh,w,c
  4746  011900  6EDA               	movwf	fsr2h,c
  4747  011902  C0FD  FFDE         	movff	_gForecolour,postinc2
  4748  011906  C0FE  FFDD         	movff	_gForecolour+1,postdec2
  4749  01190A                     l1047:
  4750                           
  4751                           ; BSR set to: 0
  4752                           ;Console.c: 354: }
  4753                           ;Console.c: 368: if(Console_IncrementCursor())
  4754                           
  4755                           ; BSR set to: 0
  4756  01190A  EC12  F09E         	call	_Console_IncrementCursor	;wreg free
  4757  01190E  0900               	iorlw	0
  4758  011910  B4D8               	btfsc	status,2,c
  4759  011912  0012               	return	
  4760                           
  4761                           ;Console.c: 369: if ((lBuffer[lBufferY][lBufferX] & 0x7F) != (pInput & 0x7F))
  4762  011914  C0C8  F0C5         	movff	Console_PrintChar@pInput,??_Console_PrintChar
  4763  011918  0E7F               	movlw	127
  4764  01191A  0100               	movlb	0	; () banked
  4765  01191C  17C5               	andwf	??_Console_PrintChar& (0+255),f,b
  4766  01191E  0100               	movlb	0	; () banked
  4767  011920  518C               	movf	_lBufferY& (0+255),w,b
  4768  011922  0D14               	mullw	20
  4769  011924  0EAA               	movlw	low _lBuffer
  4770  011926  0100               	movlb	0	; () banked
  4771  011928  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4772  01192A  0E04               	movlw	high _lBuffer
  4773  01192C  0100               	movlb	0	; () banked
  4774  01192E  6FC7               	movwf	(??_Console_PrintChar+2)& (0+255),b
  4775  011930  50F3               	movf	prodl,w,c
  4776  011932  0100               	movlb	0	; () banked
  4777  011934  27C6               	addwf	(??_Console_PrintChar+1)& (0+255),f,b
  4778  011936  50F4               	movf	prodh,w,c
  4779  011938  0100               	movlb	0	; () banked
  4780  01193A  23C7               	addwfc	(??_Console_PrintChar+2)& (0+255),f,b
  4781  01193C  0100               	movlb	0	; () banked
  4782  01193E  518D               	movf	_lBufferX& (0+255),w,b
  4783  011940  0D01               	mullw	1
  4784  011942  50F3               	movf	prodl,w,c
  4785  011944  0100               	movlb	0	; () banked
  4786  011946  25C6               	addwf	(??_Console_PrintChar+1)& (0+255),w,b
  4787  011948  6ED9               	movwf	fsr2l,c
  4788  01194A  50F4               	movf	prodh,w,c
  4789  01194C  0100               	movlb	0	; () banked
  4790  01194E  21C7               	addwfc	(??_Console_PrintChar+2)& (0+255),w,b
  4791  011950  6EDA               	movwf	fsr2h,c
  4792  011952  50DF               	movf	indf2,w,c
  4793  011954  0B7F               	andlw	127
  4794  011956  0100               	movlb	0	; () banked
  4795  011958  19C5               	xorwf	??_Console_PrintChar& (0+255),w,b
  4796  01195A  B4D8               	btfsc	status,2,c
  4797  01195C  0012               	return	
  4798                           
  4799                           ; BSR set to: 0
  4800                           ;Console.c: 370: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | pInput;};
  4801  01195E  0E01               	movlw	1
  4802  011960  0100               	movlb	0	; () banked
  4803  011962  6FFF               	movwf	_change& (0+255),b
  4804                           
  4805                           ; BSR set to: 0
  4806  011964  0100               	movlb	0	; () banked
  4807  011966  518C               	movf	_lBufferY& (0+255),w,b
  4808  011968  0D14               	mullw	20
  4809  01196A  0EAA               	movlw	low _lBuffer
  4810  01196C  0100               	movlb	0	; () banked
  4811  01196E  6FC5               	movwf	??_Console_PrintChar& (0+255),b
  4812  011970  0E04               	movlw	high _lBuffer
  4813  011972  0100               	movlb	0	; () banked
  4814  011974  6FC6               	movwf	(??_Console_PrintChar+1)& (0+255),b
  4815  011976  50F3               	movf	prodl,w,c
  4816  011978  0100               	movlb	0	; () banked
  4817  01197A  27C5               	addwf	??_Console_PrintChar& (0+255),f,b
  4818  01197C  50F4               	movf	prodh,w,c
  4819  01197E  0100               	movlb	0	; () banked
  4820  011980  23C6               	addwfc	(??_Console_PrintChar+1)& (0+255),f,b
  4821  011982  0100               	movlb	0	; () banked
  4822  011984  518D               	movf	_lBufferX& (0+255),w,b
  4823  011986  0D01               	mullw	1
  4824  011988  50F3               	movf	prodl,w,c
  4825  01198A  0100               	movlb	0	; () banked
  4826  01198C  25C5               	addwf	??_Console_PrintChar& (0+255),w,b
  4827  01198E  6ED9               	movwf	fsr2l,c
  4828  011990  50F4               	movf	prodh,w,c
  4829  011992  0100               	movlb	0	; () banked
  4830  011994  21C6               	addwfc	(??_Console_PrintChar+1)& (0+255),w,b
  4831  011996  6EDA               	movwf	fsr2h,c
  4832  011998  0100               	movlb	0	; () banked
  4833  01199A  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4834  01199C  0980               	iorlw	128
  4835  01199E  6EDF               	movwf	indf2,c
  4836                           
  4837                           ; BSR set to: 0
  4838                           ;Console.c: 372: };
  4839                           
  4840                           ; BSR set to: 0
  4841                           ;Console.c: 371: return;
  4842                           
  4843                           ; BSR set to: 0
  4844                           
  4845                           ; BSR set to: 0
  4846  0119A0  0012               	return	
  4847  0119A2                     l1036:
  4848                           
  4849                           ; BSR set to: 0
  4850  0119A2  0100               	movlb	0	; () banked
  4851  0119A4  51C8               	movf	Console_PrintChar@pInput& (0+255),w,b
  4852                           
  4853                           ; Switch size 1, requested type "space"
  4854                           ; Number of cases is 8, Range of values is 7 to 35
  4855                           ; switch strategies available:
  4856                           ; Name         Instructions Cycles
  4857                           ; simple_byte           25    13 (average)
  4858                           ;	Chosen strategy is simple_byte
  4859  0119A6  0A07               	xorlw	7	; case 7
  4860  0119A8  B4D8               	btfsc	status,2,c
  4861  0119AA  D756               	goto	l1043
  4862  0119AC  0A0F               	xorlw	15	; case 8
  4863  0119AE  B4D8               	btfsc	status,2,c
  4864  0119B0  D74A               	goto	l1040
  4865  0119B2  0A01               	xorlw	1	; case 9
  4866  0119B4  B4D8               	btfsc	status,2,c
  4867  0119B6  D74D               	goto	l1042
  4868  0119B8  0A03               	xorlw	3	; case 10
  4869  0119BA  B4D8               	btfsc	status,2,c
  4870  0119BC  D741               	goto	l1037
  4871  0119BE  0A06               	xorlw	6	; case 12
  4872  0119C0  B4D8               	btfsc	status,2,c
  4873  0119C2  D744               	goto	l1041
  4874  0119C4  0A01               	xorlw	1	; case 13
  4875  0119C6  B4D8               	btfsc	status,2,c
  4876  0119C8  D73B               	goto	l1037
  4877  0119CA  0A2D               	xorlw	45	; case 32
  4878  0119CC  B4D8               	btfsc	status,2,c
  4879  0119CE  D74A               	goto	l1045
  4880  0119D0  0A03               	xorlw	3	; case 35
  4881  0119D2  B4D8               	btfsc	status,2,c
  4882  0119D4  D744               	goto	l1044
  4883  0119D6  D746               	goto	l1045
  4884  0119D8                     __end_of_Console_PrintChar:
  4885                           	opt stack 0
  4886                           tosu	equ	0xFFF
  4887                           tosh	equ	0xFFE
  4888                           tosl	equ	0xFFD
  4889                           pclath	equ	0xFFA
  4890                           tblptru	equ	0xFF8
  4891                           tblptrh	equ	0xFF7
  4892                           tblptrl	equ	0xFF6
  4893                           tablat	equ	0xFF5
  4894                           prodh	equ	0xFF4
  4895                           prodl	equ	0xFF3
  4896                           postinc0	equ	0xFEE
  4897                           wreg	equ	0xFE8
  4898                           postdec1	equ	0xFE5
  4899                           fsr1h	equ	0xFE2
  4900                           fsr1l	equ	0xFE1
  4901                           indf2	equ	0xFDF
  4902                           postinc2	equ	0xFDE
  4903                           postdec2	equ	0xFDD
  4904                           fsr2h	equ	0xFDA
  4905                           fsr2l	equ	0xFD9
  4906                           status	equ	0xFD8
  4907                           
  4908 ;; *************** function _Console_Tab *****************
  4909 ;; Defined at:
  4910 ;;		line 260 in file "Library/Console.c"
  4911 ;; Parameters:    Size  Location     Type
  4912 ;;		None
  4913 ;; Auto vars:     Size  Location     Type
  4914 ;;  c               1   15[BANK0 ] unsigned char 
  4915 ;;  i               1   14[BANK0 ] unsigned char 
  4916 ;;  t               1   13[BANK0 ] unsigned char 
  4917 ;; Return value:  Size  Location     Type
  4918 ;;                  1    wreg      void 
  4919 ;; Registers used:
  4920 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  4921 ;; Tracked objects:
  4922 ;;		On entry : 0/0
  4923 ;;		On exit  : 0/0
  4924 ;;		Unchanged: 0/0
  4925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4927 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4928 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4929 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4930 ;;Total ram usage:        8 bytes
  4931 ;; Hardware stack levels used:    1
  4932 ;; Hardware stack levels required when called:    9
  4933 ;; This function calls:
  4934 ;;		_Console_ClearCursor
  4935 ;;		_Console_IncrementCursor
  4936 ;;		___awdiv
  4937 ;; This function is called by:
  4938 ;;		_Console_PrintChar
  4939 ;; This function uses a non-reentrant model
  4940 ;;
  4941                           
  4942                           	psect	text12
  4943  0128FE                     __ptext12:
  4944                           	opt stack 0
  4945  0128FE                     _Console_Tab:
  4946                           	opt stack 18
  4947                           
  4948                           ;Console.c: 262: UINT8 i = 0;
  4949                           
  4950                           ;incstack = 0
  4951  0128FE  0E00               	movlw	0
  4952  012900  0100               	movlb	0	; () banked
  4953  012902  6FC3               	movwf	Console_Tab@i& (0+255),b
  4954                           
  4955                           ; BSR set to: 0
  4956                           ;Console.c: 263: UINT8 c = (gCursor.x-6)/6;
  4957  012904  0EFA               	movlw	250
  4958  012906  2447               	addwf	_gCursor,w,c
  4959  012908  0100               	movlb	0	; () banked
  4960  01290A  6FB5               	movwf	___awdiv@dividend& (0+255),b
  4961  01290C  0EFF               	movlw	255
  4962  01290E  2048               	addwfc	_gCursor+1,w,c
  4963  012910  0100               	movlb	0	; () banked
  4964  012912  6FB6               	movwf	(___awdiv@dividend+1)& (0+255),b
  4965  012914  0E00               	movlw	0
  4966  012916  0100               	movlb	0	; () banked
  4967  012918  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4968  01291A  0E06               	movlw	6
  4969  01291C  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4970  01291E  ECE0  F094         	call	___awdiv	;wreg free
  4971  012922  0100               	movlb	0	; () banked
  4972  012924  51B5               	movf	?___awdiv& (0+255),w,b
  4973  012926  0100               	movlb	0	; () banked
  4974  012928  6FC4               	movwf	Console_Tab@c& (0+255),b
  4975                           
  4976                           ; BSR set to: 0
  4977                           ;Console.c: 264: UINT8 t = c/4;
  4978  01292A  C0C4  F0B5         	movff	Console_Tab@c,___awdiv@dividend
  4979  01292E  0100               	movlb	0	; () banked
  4980  012930  6BB6               	clrf	(___awdiv@dividend+1)& (0+255),b
  4981  012932  0E00               	movlw	0
  4982  012934  0100               	movlb	0	; () banked
  4983  012936  6FB8               	movwf	(___awdiv@divisor+1)& (0+255),b
  4984  012938  0E04               	movlw	4
  4985  01293A  6FB7               	movwf	___awdiv@divisor& (0+255),b
  4986  01293C  ECE0  F094         	call	___awdiv	;wreg free
  4987  012940  0100               	movlb	0	; () banked
  4988  012942  51B5               	movf	?___awdiv& (0+255),w,b
  4989  012944  0100               	movlb	0	; () banked
  4990  012946  6FC2               	movwf	Console_Tab@t& (0+255),b
  4991                           
  4992                           ;Console.c: 265: for (i = 0; i<(4-(c-4*t)); i++)
  4993  012948  0E00               	movlw	0
  4994  01294A  0100               	movlb	0	; () banked
  4995  01294C  6FC3               	movwf	Console_Tab@i& (0+255),b
  4996  01294E  D006               	goto	l1009
  4997  012950                     
  4998                           ; BSR set to: 0
  4999                           ;Console.c: 266: {
  5000                           ;Console.c: 267: Console_ClearCursor();
  5001                           
  5002                           ; BSR set to: 0
  5003  012950  EC76  F0A1         	call	_Console_ClearCursor	;wreg free
  5004                           
  5005                           ;Console.c: 268: Console_IncrementCursor();
  5006  012954  EC12  F09E         	call	_Console_IncrementCursor	;wreg free
  5007  012958  0100               	movlb	0	; () banked
  5008  01295A  2BC3               	incf	Console_Tab@i& (0+255),f,b
  5009  01295C                     l1009:
  5010                           
  5011                           ; BSR set to: 0
  5012                           
  5013                           ; BSR set to: 0
  5014  01295C  0100               	movlb	0	; () banked
  5015  01295E  51C2               	movf	Console_Tab@t& (0+255),w,b
  5016  012960  0D04               	mullw	4
  5017  012962  1EF3               	comf	prodl,f,c
  5018  012964  1EF4               	comf	prodh,f,c
  5019  012966  4AF3               	infsnz	prodl,f,c
  5020  012968  2AF4               	incf	prodh,f,c
  5021  01296A  0100               	movlb	0	; () banked
  5022  01296C  51C4               	movf	Console_Tab@c& (0+255),w,b
  5023  01296E  0100               	movlb	0	; () banked
  5024  012970  6FBD               	movwf	??_Console_Tab& (0+255),b
  5025  012972  6BBE               	clrf	(??_Console_Tab+1)& (0+255),b
  5026  012974  50F3               	movf	prodl,w,c
  5027  012976  0100               	movlb	0	; () banked
  5028  012978  27BD               	addwf	??_Console_Tab& (0+255),f,b
  5029  01297A  50F4               	movf	prodh,w,c
  5030  01297C  0100               	movlb	0	; () banked
  5031  01297E  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5032  012980  0100               	movlb	0	; () banked
  5033  012982  1FBD               	comf	??_Console_Tab& (0+255),f,b
  5034  012984  1FBE               	comf	(??_Console_Tab+1)& (0+255),f,b
  5035  012986  4BBD               	infsnz	??_Console_Tab& (0+255),f,b
  5036  012988  2BBE               	incf	(??_Console_Tab+1)& (0+255),f,b
  5037  01298A  0E04               	movlw	4
  5038  01298C  0100               	movlb	0	; () banked
  5039  01298E  27BD               	addwf	??_Console_Tab& (0+255),f,b
  5040  012990  0E00               	movlw	0
  5041  012992  23BE               	addwfc	(??_Console_Tab+1)& (0+255),f,b
  5042  012994  0100               	movlb	0	; () banked
  5043  012996  51C3               	movf	Console_Tab@i& (0+255),w,b
  5044  012998  0100               	movlb	0	; () banked
  5045  01299A  6FBF               	movwf	(??_Console_Tab+2)& (0+255),b
  5046  01299C  6BC0               	clrf	(??_Console_Tab+3)& (0+255),b
  5047  01299E  0100               	movlb	0	; () banked
  5048  0129A0  51BD               	movf	??_Console_Tab& (0+255),w,b
  5049  0129A2  0100               	movlb	0	; () banked
  5050  0129A4  5DBF               	subwf	(??_Console_Tab+2)& (0+255),w,b
  5051  0129A6  0100               	movlb	0	; () banked
  5052  0129A8  51C0               	movf	(??_Console_Tab+3)& (0+255),w,b
  5053  0129AA  0A80               	xorlw	128
  5054  0129AC  0100               	movlb	0	; () banked
  5055  0129AE  6FC1               	movwf	(??_Console_Tab+4)& (0+255),b
  5056  0129B0  0100               	movlb	0	; () banked
  5057  0129B2  51BE               	movf	(??_Console_Tab+1)& (0+255),w,b
  5058  0129B4  0A80               	xorlw	128
  5059  0129B6  0100               	movlb	0	; () banked
  5060  0129B8  59C1               	subwfb	(??_Console_Tab+4)& (0+255),w,b
  5061  0129BA  B0D8               	btfsc	status,0,c
  5062  0129BC  0012               	return	
  5063  0129BE  D7C8               	goto	l1010
  5064  0129C0                     __end_of_Console_Tab:
  5065                           	opt stack 0
  5066                           tosu	equ	0xFFF
  5067                           tosh	equ	0xFFE
  5068                           tosl	equ	0xFFD
  5069                           pclath	equ	0xFFA
  5070                           tblptru	equ	0xFF8
  5071                           tblptrh	equ	0xFF7
  5072                           tblptrl	equ	0xFF6
  5073                           tablat	equ	0xFF5
  5074                           prodh	equ	0xFF4
  5075                           prodl	equ	0xFF3
  5076                           postinc0	equ	0xFEE
  5077                           wreg	equ	0xFE8
  5078                           postdec1	equ	0xFE5
  5079                           fsr1h	equ	0xFE2
  5080                           fsr1l	equ	0xFE1
  5081                           indf2	equ	0xFDF
  5082                           postinc2	equ	0xFDE
  5083                           postdec2	equ	0xFDD
  5084                           fsr2h	equ	0xFDA
  5085                           fsr2l	equ	0xFD9
  5086                           status	equ	0xFD8
  5087                           
  5088 ;; *************** function ___awdiv *****************
  5089 ;; Defined at:
  5090 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\awdiv.c"
  5091 ;; Parameters:    Size  Location     Type
  5092 ;;  dividend        2    0[BANK0 ] int 
  5093 ;;  divisor         2    2[BANK0 ] int 
  5094 ;; Auto vars:     Size  Location     Type
  5095 ;;  quotient        2    6[BANK0 ] int 
  5096 ;;  sign            1    5[BANK0 ] unsigned char 
  5097 ;;  counter         1    4[BANK0 ] unsigned char 
  5098 ;; Return value:  Size  Location     Type
  5099 ;;                  2    0[BANK0 ] int 
  5100 ;; Registers used:
  5101 ;;		wreg, status,2, status,0
  5102 ;; Tracked objects:
  5103 ;;		On entry : 0/0
  5104 ;;		On exit  : 0/0
  5105 ;;		Unchanged: 0/0
  5106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5107 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5108 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5109 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5110 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5111 ;;Total ram usage:        8 bytes
  5112 ;; Hardware stack levels used:    1
  5113 ;; Hardware stack levels required when called:    7
  5114 ;; This function calls:
  5115 ;;		Nothing
  5116 ;; This function is called by:
  5117 ;;		_Console_Tab
  5118 ;; This function uses a non-reentrant model
  5119 ;;
  5120                           
  5121                           	psect	text13
  5122  0129C0                     __ptext13:
  5123                           	opt stack 0
  5124  0129C0                     ___awdiv:
  5125                           	opt stack 19
  5126                           
  5127                           ; BSR set to: 0
  5128                           ;incstack = 0
  5129  0129C0  0E00               	movlw	0
  5130  0129C2  0100               	movlb	0	; () banked
  5131  0129C4  6FBA               	movwf	___awdiv@sign& (0+255),b
  5132                           
  5133                           ; BSR set to: 0
  5134  0129C6  0100               	movlb	0	; () banked
  5135  0129C8  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5136  0129CA  D008               	goto	l2467
  5137                           
  5138                           ; BSR set to: 0
  5139  0129CC  0100               	movlb	0	; () banked
  5140  0129CE  6DB7               	negf	___awdiv@divisor& (0+255),b
  5141  0129D0  1FB8               	comf	(___awdiv@divisor+1)& (0+255),f,b
  5142  0129D2  B0D8               	btfsc	status,0,c
  5143  0129D4  2BB8               	incf	(___awdiv@divisor+1)& (0+255),f,b
  5144                           
  5145                           ; BSR set to: 0
  5146  0129D6  0E01               	movlw	1
  5147  0129D8  0100               	movlb	0	; () banked
  5148  0129DA  6FBA               	movwf	___awdiv@sign& (0+255),b
  5149  0129DC                     l2467:
  5150                           
  5151                           ; BSR set to: 0
  5152                           
  5153                           ; BSR set to: 0
  5154  0129DC  0100               	movlb	0	; () banked
  5155  0129DE  AFB6               	btfss	(___awdiv@dividend+1)& (0+255),7,b
  5156  0129E0  D008               	goto	l2468
  5157                           
  5158                           ; BSR set to: 0
  5159  0129E2  0100               	movlb	0	; () banked
  5160  0129E4  6DB5               	negf	___awdiv@dividend& (0+255),b
  5161  0129E6  1FB6               	comf	(___awdiv@dividend+1)& (0+255),f,b
  5162  0129E8  B0D8               	btfsc	status,0,c
  5163  0129EA  2BB6               	incf	(___awdiv@dividend+1)& (0+255),f,b
  5164                           
  5165                           ; BSR set to: 0
  5166  0129EC  0E01               	movlw	1
  5167  0129EE  0100               	movlb	0	; () banked
  5168  0129F0  1BBA               	xorwf	___awdiv@sign& (0+255),f,b
  5169  0129F2                     l2468:
  5170                           
  5171                           ; BSR set to: 0
  5172                           
  5173                           ; BSR set to: 0
  5174  0129F2  0E00               	movlw	0
  5175  0129F4  0100               	movlb	0	; () banked
  5176  0129F6  6FBC               	movwf	(___awdiv@quotient+1)& (0+255),b
  5177  0129F8  0E00               	movlw	0
  5178  0129FA  6FBB               	movwf	___awdiv@quotient& (0+255),b
  5179                           
  5180                           ; BSR set to: 0
  5181  0129FC  0100               	movlb	0	; () banked
  5182  0129FE  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5183  012A00  0100               	movlb	0	; () banked
  5184  012A02  11B8               	iorwf	(___awdiv@divisor+1)& (0+255),w,b
  5185  012A04  B4D8               	btfsc	status,2,c
  5186  012A06  D02C               	goto	l2475
  5187                           
  5188                           ; BSR set to: 0
  5189  012A08  0E01               	movlw	1
  5190  012A0A  0100               	movlb	0	; () banked
  5191  012A0C  6FB9               	movwf	___awdiv@counter& (0+255),b
  5192  012A0E  D006               	goto	l2470
  5193  012A10                     
  5194                           ; BSR set to: 0
  5195                           
  5196                           ; BSR set to: 0
  5197  012A10  0100               	movlb	0	; () banked
  5198  012A12  90D8               	bcf	status,0,c
  5199  012A14  37B7               	rlcf	___awdiv@divisor& (0+255),f,b
  5200  012A16  37B8               	rlcf	(___awdiv@divisor+1)& (0+255),f,b
  5201  012A18  0100               	movlb	0	; () banked
  5202  012A1A  2BB9               	incf	___awdiv@counter& (0+255),f,b
  5203  012A1C                     l2470:
  5204                           
  5205                           ; BSR set to: 0
  5206                           
  5207                           ; BSR set to: 0
  5208  012A1C  0100               	movlb	0	; () banked
  5209  012A1E  AFB8               	btfss	(___awdiv@divisor+1)& (0+255),7,b
  5210  012A20  D7F7               	goto	l2471
  5211  012A22                     u6920:
  5212                           
  5213                           ; BSR set to: 0
  5214                           
  5215                           ; BSR set to: 0
  5216                           
  5217                           ; BSR set to: 0
  5218  012A22  0100               	movlb	0	; () banked
  5219  012A24  90D8               	bcf	status,0,c
  5220  012A26  37BB               	rlcf	___awdiv@quotient& (0+255),f,b
  5221  012A28  37BC               	rlcf	(___awdiv@quotient+1)& (0+255),f,b
  5222                           
  5223                           ; BSR set to: 0
  5224  012A2A  0100               	movlb	0	; () banked
  5225  012A2C  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5226  012A2E  0100               	movlb	0	; () banked
  5227  012A30  5DB5               	subwf	___awdiv@dividend& (0+255),w,b
  5228  012A32  0100               	movlb	0	; () banked
  5229  012A34  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5230  012A36  0100               	movlb	0	; () banked
  5231  012A38  59B6               	subwfb	(___awdiv@dividend+1)& (0+255),w,b
  5232  012A3A  A0D8               	btfss	status,0,c
  5233  012A3C  D00A               	goto	l2474
  5234                           
  5235                           ; BSR set to: 0
  5236  012A3E  0100               	movlb	0	; () banked
  5237  012A40  51B7               	movf	___awdiv@divisor& (0+255),w,b
  5238  012A42  0100               	movlb	0	; () banked
  5239  012A44  5FB5               	subwf	___awdiv@dividend& (0+255),f,b
  5240  012A46  0100               	movlb	0	; () banked
  5241  012A48  51B8               	movf	(___awdiv@divisor+1)& (0+255),w,b
  5242  012A4A  0100               	movlb	0	; () banked
  5243  012A4C  5BB6               	subwfb	(___awdiv@dividend+1)& (0+255),f,b
  5244                           
  5245                           ; BSR set to: 0
  5246  012A4E  0100               	movlb	0	; () banked
  5247  012A50  81BB               	bsf	___awdiv@quotient& (0+255),0,b
  5248  012A52                     l2474:
  5249                           
  5250                           ; BSR set to: 0
  5251                           
  5252                           ; BSR set to: 0
  5253  012A52  0100               	movlb	0	; () banked
  5254  012A54  90D8               	bcf	status,0,c
  5255  012A56  33B8               	rrcf	(___awdiv@divisor+1)& (0+255),f,b
  5256  012A58  33B7               	rrcf	___awdiv@divisor& (0+255),f,b
  5257                           
  5258                           ; BSR set to: 0
  5259  012A5A  0100               	movlb	0	; () banked
  5260  012A5C  2FB9               	decfsz	___awdiv@counter& (0+255),f,b
  5261  012A5E  D7E1               	goto	u6920
  5262  012A60                     l2475:
  5263                           
  5264                           ; BSR set to: 0
  5265                           
  5266                           ; BSR set to: 0
  5267                           
  5268                           ; BSR set to: 0
  5269  012A60  0100               	movlb	0	; () banked
  5270  012A62  51BA               	movf	___awdiv@sign& (0+255),w,b
  5271  012A64  0100               	movlb	0	; () banked
  5272  012A66  B4D8               	btfsc	status,2,c
  5273  012A68  D005               	goto	l2476
  5274                           
  5275                           ; BSR set to: 0
  5276  012A6A  0100               	movlb	0	; () banked
  5277  012A6C  6DBB               	negf	___awdiv@quotient& (0+255),b
  5278  012A6E  1FBC               	comf	(___awdiv@quotient+1)& (0+255),f,b
  5279  012A70  B0D8               	btfsc	status,0,c
  5280  012A72  2BBC               	incf	(___awdiv@quotient+1)& (0+255),f,b
  5281  012A74                     l2476:
  5282                           
  5283                           ; BSR set to: 0
  5284                           
  5285                           ; BSR set to: 0
  5286  012A74  C0BB  F0B5         	movff	___awdiv@quotient,?___awdiv
  5287  012A78  C0BC  F0B6         	movff	___awdiv@quotient+1,?___awdiv+1
  5288  012A7C  0012               	return	
  5289  012A7E                     __end_of___awdiv:
  5290                           	opt stack 0
  5291                           tosu	equ	0xFFF
  5292                           tosh	equ	0xFFE
  5293                           tosl	equ	0xFFD
  5294                           pclath	equ	0xFFA
  5295                           tblptru	equ	0xFF8
  5296                           tblptrh	equ	0xFF7
  5297                           tblptrl	equ	0xFF6
  5298                           tablat	equ	0xFF5
  5299                           prodh	equ	0xFF4
  5300                           prodl	equ	0xFF3
  5301                           postinc0	equ	0xFEE
  5302                           wreg	equ	0xFE8
  5303                           postdec1	equ	0xFE5
  5304                           fsr1h	equ	0xFE2
  5305                           fsr1l	equ	0xFE1
  5306                           indf2	equ	0xFDF
  5307                           postinc2	equ	0xFDE
  5308                           postdec2	equ	0xFDD
  5309                           fsr2h	equ	0xFDA
  5310                           fsr2l	equ	0xFD9
  5311                           status	equ	0xFD8
  5312                           
  5313 ;; *************** function _Console_IncrementCursor *****************
  5314 ;; Defined at:
  5315 ;;		line 243 in file "Library/Console.c"
  5316 ;; Parameters:    Size  Location     Type
  5317 ;;		None
  5318 ;; Auto vars:     Size  Location     Type
  5319 ;;		None
  5320 ;; Return value:  Size  Location     Type
  5321 ;;                  1    wreg      unsigned char 
  5322 ;; Registers used:
  5323 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5324 ;; Tracked objects:
  5325 ;;		On entry : 0/0
  5326 ;;		On exit  : 0/0
  5327 ;;		Unchanged: 0/0
  5328 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5329 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5330 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5331 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5332 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5333 ;;Total ram usage:        2 bytes
  5334 ;; Hardware stack levels used:    1
  5335 ;; Hardware stack levels required when called:    8
  5336 ;; This function calls:
  5337 ;;		_Console_FormFeed
  5338 ;;		_Console_NewLine
  5339 ;; This function is called by:
  5340 ;;		_Console_Tab
  5341 ;;		_Console_PrintChar
  5342 ;; This function uses a non-reentrant model
  5343 ;;
  5344                           
  5345                           	psect	text14
  5346  013C24                     __ptext14:
  5347                           	opt stack 0
  5348  013C24                     _Console_IncrementCursor:
  5349                           	opt stack 18
  5350                           
  5351                           ;Console.c: 246: lBufferX += 1;
  5352                           
  5353                           ; BSR set to: 0
  5354                           ;incstack = 0
  5355  013C24  0100               	movlb	0	; () banked
  5356  013C26  2B8D               	incf	_lBufferX& (0+255),f,b
  5357                           
  5358                           ; BSR set to: 0
  5359                           ;Console.c: 248: gCursor.x += 6;
  5360  013C28  0E06               	movlw	6
  5361  013C2A  2647               	addwf	_gCursor,f,c
  5362  013C2C  0E00               	movlw	0
  5363  013C2E  2248               	addwfc	_gCursor+1,f,c
  5364                           
  5365                           ; BSR set to: 0
  5366                           ;Console.c: 249: if (gCursor.x + 6 >= 128)
  5367  013C30  0E06               	movlw	6
  5368  013C32  2447               	addwf	_gCursor,w,c
  5369  013C34  0100               	movlb	0	; () banked
  5370  013C36  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5371  013C38  0E00               	movlw	0
  5372  013C3A  2048               	addwfc	_gCursor+1,w,c
  5373  013C3C  0100               	movlb	0	; () banked
  5374  013C3E  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5375  013C40  0100               	movlb	0	; () banked
  5376  013C42  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5377  013C44  D009               	goto	l1004
  5378  013C46  0100               	movlb	0	; () banked
  5379  013C48  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5380  013C4A  E104               	bnz	u6830
  5381  013C4C  0E80               	movlw	128
  5382  013C4E  0100               	movlb	0	; () banked
  5383  013C50  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5384  013C52  B0D8               	btfsc	status,0,c
  5385  013C54                     u6830:
  5386                           
  5387                           ; BSR set to: 0
  5388                           ;Console.c: 250: Console_NewLine();
  5389  013C54  ECF9  F098         	call	_Console_NewLine	;wreg free
  5390  013C58                     l1004:
  5391                           
  5392                           ;Console.c: 251: if (gCursor.y + 8>= 128)
  5393  013C58  0E08               	movlw	8
  5394  013C5A  2449               	addwf	_gCursor+2,w,c
  5395  013C5C  0100               	movlb	0	; () banked
  5396  013C5E  6FB9               	movwf	??_Console_IncrementCursor& (0+255),b
  5397  013C60  0E00               	movlw	0
  5398  013C62  204A               	addwfc	_gCursor+3,w,c
  5399  013C64  0100               	movlb	0	; () banked
  5400  013C66  6FBA               	movwf	(??_Console_IncrementCursor+1)& (0+255),b
  5401  013C68  0100               	movlb	0	; () banked
  5402  013C6A  BFBA               	btfsc	(??_Console_IncrementCursor+1)& (0+255),7,b
  5403  013C6C  D00C               	goto	l1005
  5404  013C6E  0100               	movlb	0	; () banked
  5405  013C70  51BA               	movf	(??_Console_IncrementCursor+1)& (0+255),w,b
  5406  013C72  E105               	bnz	u6840
  5407  013C74  0E80               	movlw	128
  5408  013C76  0100               	movlb	0	; () banked
  5409  013C78  5DB9               	subwf	??_Console_IncrementCursor& (0+255),w,b
  5410  013C7A  A0D8               	btfss	status,0,c
  5411  013C7C  D004               	goto	l1005
  5412  013C7E                     u6840:
  5413                           
  5414                           ; BSR set to: 0
  5415                           ;Console.c: 252: {
  5416                           ;Console.c: 253: Console_FormFeed();
  5417  013C7E  EC73  F09A         	call	_Console_FormFeed	;wreg free
  5418                           
  5419                           ;Console.c: 254: return 1;
  5420  013C82  0E01               	movlw	1
  5421  013C84  0012               	return	
  5422  013C86                     l1005:
  5423                           
  5424                           ;Console.c: 255: }
  5425                           ;Console.c: 257: return 0;
  5426  013C86  0E00               	movlw	0
  5427  013C88  0012               	return	
  5428  013C8A                     __end_of_Console_IncrementCursor:
  5429                           	opt stack 0
  5430                           tosu	equ	0xFFF
  5431                           tosh	equ	0xFFE
  5432                           tosl	equ	0xFFD
  5433                           pclath	equ	0xFFA
  5434                           tblptru	equ	0xFF8
  5435                           tblptrh	equ	0xFF7
  5436                           tblptrl	equ	0xFF6
  5437                           tablat	equ	0xFF5
  5438                           prodh	equ	0xFF4
  5439                           prodl	equ	0xFF3
  5440                           postinc0	equ	0xFEE
  5441                           wreg	equ	0xFE8
  5442                           postdec1	equ	0xFE5
  5443                           fsr1h	equ	0xFE2
  5444                           fsr1l	equ	0xFE1
  5445                           indf2	equ	0xFDF
  5446                           postinc2	equ	0xFDE
  5447                           postdec2	equ	0xFDD
  5448                           fsr2h	equ	0xFDA
  5449                           fsr2l	equ	0xFD9
  5450                           status	equ	0xFD8
  5451                           
  5452 ;; *************** function _Console_NewLine *****************
  5453 ;; Defined at:
  5454 ;;		line 175 in file "Library/Console.c"
  5455 ;; Parameters:    Size  Location     Type
  5456 ;;		None
  5457 ;; Auto vars:     Size  Location     Type
  5458 ;;		None
  5459 ;; Return value:  Size  Location     Type
  5460 ;;                  1    wreg      void 
  5461 ;; Registers used:
  5462 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5463 ;; Tracked objects:
  5464 ;;		On entry : 0/0
  5465 ;;		On exit  : 0/0
  5466 ;;		Unchanged: 0/0
  5467 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5468 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5469 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5470 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5471 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5472 ;;Total ram usage:        2 bytes
  5473 ;; Hardware stack levels used:    1
  5474 ;; Hardware stack levels required when called:    7
  5475 ;; This function calls:
  5476 ;;		Nothing
  5477 ;; This function is called by:
  5478 ;;		_Console_IncrementCursor
  5479 ;;		_Console_PrintChar
  5480 ;; This function uses a non-reentrant model
  5481 ;;
  5482                           
  5483                           	psect	text15
  5484  0131F2                     __ptext15:
  5485                           	opt stack 0
  5486  0131F2                     _Console_NewLine:
  5487                           	opt stack 18
  5488                           
  5489                           ;Console.c: 178: while (lBufferX < (UINT8)((128-6)/6))
  5490                           
  5491                           ;incstack = 0
  5492  0131F2  D03E               	goto	l983
  5493  0131F4                     
  5494                           ;Console.c: 179: {
  5495                           ;Console.c: 180: if (lBuffer[lBufferY][lBufferX] != '\0')
  5496  0131F4  0100               	movlb	0	; () banked
  5497  0131F6  518C               	movf	_lBufferY& (0+255),w,b
  5498  0131F8  0D14               	mullw	20
  5499  0131FA  0EAA               	movlw	low _lBuffer
  5500  0131FC  0100               	movlb	0	; () banked
  5501  0131FE  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5502  013200  0E04               	movlw	high _lBuffer
  5503  013202  0100               	movlb	0	; () banked
  5504  013204  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5505  013206  50F3               	movf	prodl,w,c
  5506  013208  0100               	movlb	0	; () banked
  5507  01320A  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5508  01320C  50F4               	movf	prodh,w,c
  5509  01320E  0100               	movlb	0	; () banked
  5510  013210  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5511  013212  0100               	movlb	0	; () banked
  5512  013214  518D               	movf	_lBufferX& (0+255),w,b
  5513  013216  0D01               	mullw	1
  5514  013218  50F3               	movf	prodl,w,c
  5515  01321A  0100               	movlb	0	; () banked
  5516  01321C  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5517  01321E  6ED9               	movwf	fsr2l,c
  5518  013220  50F4               	movf	prodh,w,c
  5519  013222  0100               	movlb	0	; () banked
  5520  013224  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5521  013226  6EDA               	movwf	fsr2h,c
  5522  013228  50DF               	movf	indf2,w,c
  5523  01322A  B4D8               	btfsc	status,2,c
  5524  01322C  D01F               	goto	l985
  5525                           
  5526                           ; BSR set to: 0
  5527                           ;Console.c: 181: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | '\0';};
  5528  01322E  0E01               	movlw	1
  5529  013230  0100               	movlb	0	; () banked
  5530  013232  6FFF               	movwf	_change& (0+255),b
  5531                           
  5532                           ; BSR set to: 0
  5533  013234  0100               	movlb	0	; () banked
  5534  013236  518C               	movf	_lBufferY& (0+255),w,b
  5535  013238  0D14               	mullw	20
  5536  01323A  0EAA               	movlw	low _lBuffer
  5537  01323C  0100               	movlb	0	; () banked
  5538  01323E  6FB5               	movwf	??_Console_NewLine& (0+255),b
  5539  013240  0E04               	movlw	high _lBuffer
  5540  013242  0100               	movlb	0	; () banked
  5541  013244  6FB6               	movwf	(??_Console_NewLine+1)& (0+255),b
  5542  013246  50F3               	movf	prodl,w,c
  5543  013248  0100               	movlb	0	; () banked
  5544  01324A  27B5               	addwf	??_Console_NewLine& (0+255),f,b
  5545  01324C  50F4               	movf	prodh,w,c
  5546  01324E  0100               	movlb	0	; () banked
  5547  013250  23B6               	addwfc	(??_Console_NewLine+1)& (0+255),f,b
  5548  013252  0100               	movlb	0	; () banked
  5549  013254  518D               	movf	_lBufferX& (0+255),w,b
  5550  013256  0D01               	mullw	1
  5551  013258  50F3               	movf	prodl,w,c
  5552  01325A  0100               	movlb	0	; () banked
  5553  01325C  25B5               	addwf	??_Console_NewLine& (0+255),w,b
  5554  01325E  6ED9               	movwf	fsr2l,c
  5555  013260  50F4               	movf	prodh,w,c
  5556  013262  0100               	movlb	0	; () banked
  5557  013264  21B6               	addwfc	(??_Console_NewLine+1)& (0+255),w,b
  5558  013266  6EDA               	movwf	fsr2h,c
  5559  013268  0E80               	movlw	128
  5560  01326A  6EDF               	movwf	indf2,c
  5561  01326C                     l985:
  5562                           
  5563                           ; BSR set to: 0
  5564                           ;Console.c: 182: lBufferX ++;
  5565                           
  5566                           ; BSR set to: 0
  5567  01326C  0100               	movlb	0	; () banked
  5568  01326E  2B8D               	incf	_lBufferX& (0+255),f,b
  5569  013270                     l983:
  5570                           
  5571                           ; BSR set to: 0
  5572  013270  0E13               	movlw	19
  5573  013272  0100               	movlb	0	; () banked
  5574  013274  658D               	cpfsgt	_lBufferX& (0+255),b
  5575  013276  D7BE               	goto	l984
  5576                           
  5577                           ; BSR set to: 0
  5578                           ;Console.c: 183: }
  5579                           ;Console.c: 185: lBufferX = 0;
  5580                           
  5581                           ; BSR set to: 0
  5582  013278  0E00               	movlw	0
  5583  01327A  0100               	movlb	0	; () banked
  5584  01327C  6F8D               	movwf	_lBufferX& (0+255),b
  5585                           
  5586                           ; BSR set to: 0
  5587                           ;Console.c: 186: lBufferY ++;
  5588  01327E  0100               	movlb	0	; () banked
  5589  013280  2B8C               	incf	_lBufferY& (0+255),f,b
  5590                           
  5591                           ; BSR set to: 0
  5592                           ;Console.c: 188: gCursor.y += 8;
  5593  013282  0E08               	movlw	8
  5594  013284  2649               	addwf	_gCursor+2,f,c
  5595  013286  0E00               	movlw	0
  5596  013288  224A               	addwfc	_gCursor+3,f,c
  5597                           
  5598                           ; BSR set to: 0
  5599                           ;Console.c: 189: gCursor.x = 6;
  5600  01328A  0E00               	movlw	0
  5601  01328C  6E48               	movwf	_gCursor+1,c
  5602  01328E  0E06               	movlw	6
  5603  013290  6E47               	movwf	_gCursor,c
  5604                           
  5605                           ; BSR set to: 0
  5606  013292  0012               	return		;funcret
  5607  013294                     __end_of_Console_NewLine:
  5608                           	opt stack 0
  5609                           tosu	equ	0xFFF
  5610                           tosh	equ	0xFFE
  5611                           tosl	equ	0xFFD
  5612                           pclath	equ	0xFFA
  5613                           tblptru	equ	0xFF8
  5614                           tblptrh	equ	0xFF7
  5615                           tblptrl	equ	0xFF6
  5616                           tablat	equ	0xFF5
  5617                           prodh	equ	0xFF4
  5618                           prodl	equ	0xFF3
  5619                           postinc0	equ	0xFEE
  5620                           wreg	equ	0xFE8
  5621                           postdec1	equ	0xFE5
  5622                           fsr1h	equ	0xFE2
  5623                           fsr1l	equ	0xFE1
  5624                           indf2	equ	0xFDF
  5625                           postinc2	equ	0xFDE
  5626                           postdec2	equ	0xFDD
  5627                           fsr2h	equ	0xFDA
  5628                           fsr2l	equ	0xFD9
  5629                           status	equ	0xFD8
  5630                           
  5631 ;; *************** function _Console_FormFeed *****************
  5632 ;; Defined at:
  5633 ;;		line 192 in file "Library/Console.c"
  5634 ;; Parameters:    Size  Location     Type
  5635 ;;		None
  5636 ;; Auto vars:     Size  Location     Type
  5637 ;;  y               1    3[BANK0 ] unsigned char 
  5638 ;;  x               1    2[BANK0 ] unsigned char 
  5639 ;; Return value:  Size  Location     Type
  5640 ;;                  1    wreg      void 
  5641 ;; Registers used:
  5642 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  5643 ;; Tracked objects:
  5644 ;;		On entry : 0/0
  5645 ;;		On exit  : 0/0
  5646 ;;		Unchanged: 0/0
  5647 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5648 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5649 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5650 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5651 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5652 ;;Total ram usage:        4 bytes
  5653 ;; Hardware stack levels used:    1
  5654 ;; Hardware stack levels required when called:    7
  5655 ;; This function calls:
  5656 ;;		Nothing
  5657 ;; This function is called by:
  5658 ;;		_Console_IncrementCursor
  5659 ;;		_Console_PrintChar
  5660 ;; This function uses a non-reentrant model
  5661 ;;
  5662                           
  5663                           	psect	text16
  5664  0134E6                     __ptext16:
  5665                           	opt stack 0
  5666  0134E6                     _Console_FormFeed:
  5667                           	opt stack 18
  5668                           
  5669                           ;Console.c: 195: lBufferX = 0;
  5670                           
  5671                           ; BSR set to: 0
  5672                           ;incstack = 0
  5673  0134E6  0E00               	movlw	0
  5674  0134E8  0100               	movlb	0	; () banked
  5675  0134EA  6F8D               	movwf	_lBufferX& (0+255),b
  5676                           
  5677                           ;Console.c: 196: lBufferY = 0;
  5678  0134EC  0E00               	movlw	0
  5679  0134EE  0100               	movlb	0	; () banked
  5680  0134F0  6F8C               	movwf	_lBufferY& (0+255),b
  5681                           
  5682                           ;Console.c: 197: UINT8 x, y;
  5683                           ;Console.c: 199: for (y = 0; y < (UINT8)((128-6)/8); y++)
  5684  0134F2  0E00               	movlw	0
  5685  0134F4  0100               	movlb	0	; () banked
  5686  0134F6  6FB8               	movwf	Console_FormFeed@y& (0+255),b
  5687  0134F8                     l10655:
  5688                           
  5689                           ; BSR set to: 0
  5690  0134F8  0E0E               	movlw	14
  5691  0134FA  0100               	movlb	0	; () banked
  5692  0134FC  65B8               	cpfsgt	Console_FormFeed@y& (0+255),b
  5693  0134FE  D001               	goto	l990
  5694  013500  D02D               	goto	u6680
  5695  013502                     l990:
  5696                           
  5697                           ; BSR set to: 0
  5698                           ;Console.c: 200: for (x = 0; x < (UINT8)((128-6)/6); x++)
  5699                           
  5700                           ; BSR set to: 0
  5701  013502  0E00               	movlw	0
  5702  013504  0100               	movlb	0	; () banked
  5703  013506  6FB7               	movwf	Console_FormFeed@x& (0+255),b
  5704  013508                     l10661:
  5705                           
  5706                           ; BSR set to: 0
  5707  013508  0E13               	movlw	19
  5708  01350A  0100               	movlb	0	; () banked
  5709  01350C  65B7               	cpfsgt	Console_FormFeed@x& (0+255),b
  5710  01350E  D001               	goto	l992
  5711  013510  D022               	goto	u6670
  5712  013512                     l992:
  5713                           
  5714                           ; BSR set to: 0
  5715                           ;Console.c: 201: {change=1; lBuffer[y][x] = 0x80 | '\0';};
  5716                           
  5717                           ; BSR set to: 0
  5718  013512  0E01               	movlw	1
  5719  013514  0100               	movlb	0	; () banked
  5720  013516  6FFF               	movwf	_change& (0+255),b
  5721                           
  5722                           ; BSR set to: 0
  5723  013518  0100               	movlb	0	; () banked
  5724  01351A  51B8               	movf	Console_FormFeed@y& (0+255),w,b
  5725  01351C  0D14               	mullw	20
  5726  01351E  0EAA               	movlw	low _lBuffer
  5727  013520  0100               	movlb	0	; () banked
  5728  013522  6FB5               	movwf	??_Console_FormFeed& (0+255),b
  5729  013524  0E04               	movlw	high _lBuffer
  5730  013526  0100               	movlb	0	; () banked
  5731  013528  6FB6               	movwf	(??_Console_FormFeed+1)& (0+255),b
  5732  01352A  50F3               	movf	prodl,w,c
  5733  01352C  0100               	movlb	0	; () banked
  5734  01352E  27B5               	addwf	??_Console_FormFeed& (0+255),f,b
  5735  013530  50F4               	movf	prodh,w,c
  5736  013532  0100               	movlb	0	; () banked
  5737  013534  23B6               	addwfc	(??_Console_FormFeed+1)& (0+255),f,b
  5738  013536  0100               	movlb	0	; () banked
  5739  013538  51B7               	movf	Console_FormFeed@x& (0+255),w,b
  5740  01353A  0D01               	mullw	1
  5741  01353C  50F3               	movf	prodl,w,c
  5742  01353E  0100               	movlb	0	; () banked
  5743  013540  25B5               	addwf	??_Console_FormFeed& (0+255),w,b
  5744  013542  6ED9               	movwf	fsr2l,c
  5745  013544  50F4               	movf	prodh,w,c
  5746  013546  0100               	movlb	0	; () banked
  5747  013548  21B6               	addwfc	(??_Console_FormFeed+1)& (0+255),w,b
  5748  01354A  6EDA               	movwf	fsr2h,c
  5749  01354C  0E80               	movlw	128
  5750  01354E  6EDF               	movwf	indf2,c
  5751                           
  5752                           ; BSR set to: 0
  5753  013550  0100               	movlb	0	; () banked
  5754  013552  2BB7               	incf	Console_FormFeed@x& (0+255),f,b
  5755  013554  D7D9               	goto	l10661
  5756  013556                     u6670:
  5757                           
  5758                           ; BSR set to: 0
  5759                           
  5760                           ; BSR set to: 0
  5761  013556  0100               	movlb	0	; () banked
  5762  013558  2BB8               	incf	Console_FormFeed@y& (0+255),f,b
  5763  01355A  D7CE               	goto	l10655
  5764  01355C                     u6680:
  5765                           
  5766                           ; BSR set to: 0
  5767                           ;Console.c: 204: clearall = 1;
  5768                           
  5769                           ; BSR set to: 0
  5770  01355C  0E01               	movlw	1
  5771  01355E  0100               	movlb	0	; () banked
  5772  013560  6F8E               	movwf	_clearall& (0+255),b
  5773                           
  5774                           ;Console.c: 205: gCursor.x = 6;
  5775  013562  0E00               	movlw	0
  5776  013564  6E48               	movwf	_gCursor+1,c
  5777  013566  0E06               	movlw	6
  5778  013568  6E47               	movwf	_gCursor,c
  5779                           
  5780                           ;Console.c: 206: gCursor.y = 6;
  5781  01356A  0E00               	movlw	0
  5782  01356C  6E4A               	movwf	_gCursor+3,c
  5783  01356E  0E06               	movlw	6
  5784  013570  6E49               	movwf	_gCursor+2,c
  5785                           
  5786                           ; BSR set to: 0
  5787  013572  0012               	return		;funcret
  5788  013574                     __end_of_Console_FormFeed:
  5789                           	opt stack 0
  5790                           tosu	equ	0xFFF
  5791                           tosh	equ	0xFFE
  5792                           tosl	equ	0xFFD
  5793                           pclath	equ	0xFFA
  5794                           tblptru	equ	0xFF8
  5795                           tblptrh	equ	0xFF7
  5796                           tblptrl	equ	0xFF6
  5797                           tablat	equ	0xFF5
  5798                           prodh	equ	0xFF4
  5799                           prodl	equ	0xFF3
  5800                           postinc0	equ	0xFEE
  5801                           wreg	equ	0xFE8
  5802                           postdec1	equ	0xFE5
  5803                           fsr1h	equ	0xFE2
  5804                           fsr1l	equ	0xFE1
  5805                           indf2	equ	0xFDF
  5806                           postinc2	equ	0xFDE
  5807                           postdec2	equ	0xFDD
  5808                           fsr2h	equ	0xFDA
  5809                           fsr2l	equ	0xFD9
  5810                           status	equ	0xFD8
  5811                           
  5812 ;; *************** function _Console_ResetCursor *****************
  5813 ;; Defined at:
  5814 ;;		line 297 in file "Library/Console.c"
  5815 ;; Parameters:    Size  Location     Type
  5816 ;;		None
  5817 ;; Auto vars:     Size  Location     Type
  5818 ;;		None
  5819 ;; Return value:  Size  Location     Type
  5820 ;;                  1    wreg      void 
  5821 ;; Registers used:
  5822 ;;		wreg, status,2
  5823 ;; Tracked objects:
  5824 ;;		On entry : 0/0
  5825 ;;		On exit  : 0/0
  5826 ;;		Unchanged: 0/0
  5827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5832 ;;Total ram usage:        0 bytes
  5833 ;; Hardware stack levels used:    1
  5834 ;; Hardware stack levels required when called:    7
  5835 ;; This function calls:
  5836 ;;		Nothing
  5837 ;; This function is called by:
  5838 ;;		_Console_PrintChar
  5839 ;; This function uses a non-reentrant model
  5840 ;;
  5841                           
  5842                           	psect	text17
  5843  014700                     __ptext17:
  5844                           	opt stack 0
  5845  014700                     _Console_ResetCursor:
  5846                           	opt stack 20
  5847                           
  5848                           ;Console.c: 299: gCursor.x = 6;
  5849                           
  5850                           ; BSR set to: 0
  5851                           ;incstack = 0
  5852  014700  0E00               	movlw	0
  5853  014702  6E48               	movwf	_gCursor+1,c
  5854  014704  0E06               	movlw	6
  5855  014706  6E47               	movwf	_gCursor,c
  5856                           
  5857                           ;Console.c: 300: gCursor.y = 6;
  5858  014708  0E00               	movlw	0
  5859  01470A  6E4A               	movwf	_gCursor+3,c
  5860  01470C  0E06               	movlw	6
  5861  01470E  6E49               	movwf	_gCursor+2,c
  5862                           
  5863                           ;Console.c: 303: lBufferX = 0;
  5864  014710  0E00               	movlw	0
  5865  014712  0100               	movlb	0	; () banked
  5866  014714  6F8D               	movwf	_lBufferX& (0+255),b
  5867                           
  5868                           ;Console.c: 304: lBufferY = 0;
  5869  014716  0E00               	movlw	0
  5870  014718  0100               	movlb	0	; () banked
  5871  01471A  6F8C               	movwf	_lBufferY& (0+255),b
  5872                           
  5873                           ; BSR set to: 0
  5874  01471C  0012               	return		;funcret
  5875  01471E                     __end_of_Console_ResetCursor:
  5876                           	opt stack 0
  5877                           tosu	equ	0xFFF
  5878                           tosh	equ	0xFFE
  5879                           tosl	equ	0xFFD
  5880                           pclath	equ	0xFFA
  5881                           tblptru	equ	0xFF8
  5882                           tblptrh	equ	0xFF7
  5883                           tblptrl	equ	0xFF6
  5884                           tablat	equ	0xFF5
  5885                           prodh	equ	0xFF4
  5886                           prodl	equ	0xFF3
  5887                           postinc0	equ	0xFEE
  5888                           wreg	equ	0xFE8
  5889                           postdec1	equ	0xFE5
  5890                           fsr1h	equ	0xFE2
  5891                           fsr1l	equ	0xFE1
  5892                           indf2	equ	0xFDF
  5893                           postinc2	equ	0xFDE
  5894                           postdec2	equ	0xFDD
  5895                           fsr2h	equ	0xFDA
  5896                           fsr2l	equ	0xFD9
  5897                           status	equ	0xFD8
  5898                           
  5899 ;; *************** function _Console_Backspace *****************
  5900 ;; Defined at:
  5901 ;;		line 209 in file "Library/Console.c"
  5902 ;; Parameters:    Size  Location     Type
  5903 ;;		None
  5904 ;; Auto vars:     Size  Location     Type
  5905 ;;		None
  5906 ;; Return value:  Size  Location     Type
  5907 ;;                  1    wreg      void 
  5908 ;; Registers used:
  5909 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5910 ;; Tracked objects:
  5911 ;;		On entry : 0/0
  5912 ;;		On exit  : 0/0
  5913 ;;		Unchanged: 0/0
  5914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5915 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5917 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5918 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5919 ;;Total ram usage:        0 bytes
  5920 ;; Hardware stack levels used:    1
  5921 ;; Hardware stack levels required when called:    8
  5922 ;; This function calls:
  5923 ;;		_Console_ClearCursor
  5924 ;; This function is called by:
  5925 ;;		_Console_PrintChar
  5926 ;; This function uses a non-reentrant model
  5927 ;;
  5928                           
  5929                           	psect	text18
  5930  013E16                     __ptext18:
  5931                           	opt stack 0
  5932  013E16                     _Console_Backspace:
  5933                           	opt stack 19
  5934                           
  5935                           ;Console.c: 211: if (lBufferX > 0)
  5936                           
  5937                           ; BSR set to: 0
  5938                           ;incstack = 0
  5939  013E16  0100               	movlb	0	; () banked
  5940  013E18  518D               	movf	_lBufferX& (0+255),w,b
  5941  013E1A  B4D8               	btfsc	status,2,c
  5942  013E1C  D007               	goto	l997
  5943                           
  5944                           ; BSR set to: 0
  5945                           ;Console.c: 212: {
  5946                           ;Console.c: 213: gCursor.x -= 6;
  5947  013E1E  0EFA               	movlw	250
  5948  013E20  2647               	addwf	_gCursor,f,c
  5949  013E22  0EFF               	movlw	255
  5950  013E24  2248               	addwfc	_gCursor+1,f,c
  5951                           
  5952                           ; BSR set to: 0
  5953                           ;Console.c: 216: lBufferX --;
  5954  013E26  0100               	movlb	0	; () banked
  5955  013E28  078D               	decf	_lBufferX& (0+255),f,b
  5956                           
  5957                           ;Console.c: 218: }
  5958  013E2A  D020               	goto	l1000
  5959  013E2C                     l997:
  5960                           
  5961                           ; BSR set to: 0
  5962                           ;Console.c: 219: else if (lBufferY > 0)
  5963                           
  5964                           ; BSR set to: 0
  5965  013E2C  0100               	movlb	0	; () banked
  5966  013E2E  518C               	movf	_lBufferY& (0+255),w,b
  5967  013E30  B4D8               	btfsc	status,2,c
  5968  013E32  D00E               	goto	l999
  5969                           
  5970                           ; BSR set to: 0
  5971                           ;Console.c: 220: {
  5972                           ;Console.c: 221: gCursor.x = (((UINT8)((128-6)/6)-1)*6);
  5973  013E34  0E00               	movlw	0
  5974  013E36  6E48               	movwf	_gCursor+1,c
  5975  013E38  0E72               	movlw	114
  5976  013E3A  6E47               	movwf	_gCursor,c
  5977                           
  5978                           ; BSR set to: 0
  5979                           ;Console.c: 222: gCursor.y -= 8;
  5980  013E3C  0EF8               	movlw	248
  5981  013E3E  2649               	addwf	_gCursor+2,f,c
  5982  013E40  0EFF               	movlw	255
  5983  013E42  224A               	addwfc	_gCursor+3,f,c
  5984                           
  5985                           ; BSR set to: 0
  5986                           ;Console.c: 225: lBufferX = (UINT8)((128-6)/6) - 1;
  5987  013E44  0E13               	movlw	19
  5988  013E46  0100               	movlb	0	; () banked
  5989  013E48  6F8D               	movwf	_lBufferX& (0+255),b
  5990                           
  5991                           ; BSR set to: 0
  5992                           ;Console.c: 226: lBufferY --;
  5993  013E4A  0100               	movlb	0	; () banked
  5994  013E4C  078C               	decf	_lBufferY& (0+255),f,b
  5995                           
  5996                           ;Console.c: 228: }
  5997  013E4E  D00E               	goto	l1000
  5998  013E50                     l999:
  5999                           
  6000                           ; BSR set to: 0
  6001                           ;Console.c: 229: else
  6002                           ;Console.c: 230: {
  6003                           ;Console.c: 231: gCursor.x = 6;
  6004                           
  6005                           ; BSR set to: 0
  6006  013E50  0E00               	movlw	0
  6007  013E52  6E48               	movwf	_gCursor+1,c
  6008  013E54  0E06               	movlw	6
  6009  013E56  6E47               	movwf	_gCursor,c
  6010                           
  6011                           ;Console.c: 232: gCursor.y = 6;
  6012  013E58  0E00               	movlw	0
  6013  013E5A  6E4A               	movwf	_gCursor+3,c
  6014  013E5C  0E06               	movlw	6
  6015  013E5E  6E49               	movwf	_gCursor+2,c
  6016                           
  6017                           ;Console.c: 235: lBufferX = 0;
  6018  013E60  0E00               	movlw	0
  6019  013E62  0100               	movlb	0	; () banked
  6020  013E64  6F8D               	movwf	_lBufferX& (0+255),b
  6021                           
  6022                           ;Console.c: 236: lBufferY = 0;
  6023  013E66  0E00               	movlw	0
  6024  013E68  0100               	movlb	0	; () banked
  6025  013E6A  6F8C               	movwf	_lBufferY& (0+255),b
  6026  013E6C                     l1000:
  6027                           
  6028                           ; BSR set to: 0
  6029                           ;Console.c: 238: }
  6030                           ;Console.c: 240: Console_ClearCursor();
  6031                           
  6032                           ; BSR set to: 0
  6033                           
  6034                           ; BSR set to: 0
  6035  013E6C  EC76  F0A1         	call	_Console_ClearCursor	;wreg free
  6036  013E70  0012               	return		;funcret
  6037  013E72                     __end_of_Console_Backspace:
  6038                           	opt stack 0
  6039                           tosu	equ	0xFFF
  6040                           tosh	equ	0xFFE
  6041                           tosl	equ	0xFFD
  6042                           pclath	equ	0xFFA
  6043                           tblptru	equ	0xFF8
  6044                           tblptrh	equ	0xFF7
  6045                           tblptrl	equ	0xFF6
  6046                           tablat	equ	0xFF5
  6047                           prodh	equ	0xFF4
  6048                           prodl	equ	0xFF3
  6049                           postinc0	equ	0xFEE
  6050                           wreg	equ	0xFE8
  6051                           postdec1	equ	0xFE5
  6052                           fsr1h	equ	0xFE2
  6053                           fsr1l	equ	0xFE1
  6054                           indf2	equ	0xFDF
  6055                           postinc2	equ	0xFDE
  6056                           postdec2	equ	0xFDD
  6057                           fsr2h	equ	0xFDA
  6058                           fsr2l	equ	0xFD9
  6059                           status	equ	0xFD8
  6060                           
  6061 ;; *************** function _Console_ClearCursor *****************
  6062 ;; Defined at:
  6063 ;;		line 308 in file "Library/Console.c"
  6064 ;; Parameters:    Size  Location     Type
  6065 ;;		None
  6066 ;; Auto vars:     Size  Location     Type
  6067 ;;		None
  6068 ;; Return value:  Size  Location     Type
  6069 ;;                  1    wreg      void 
  6070 ;; Registers used:
  6071 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  6072 ;; Tracked objects:
  6073 ;;		On entry : 0/0
  6074 ;;		On exit  : 0/0
  6075 ;;		Unchanged: 0/0
  6076 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6077 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6078 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6079 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6080 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6081 ;;Total ram usage:        2 bytes
  6082 ;; Hardware stack levels used:    1
  6083 ;; Hardware stack levels required when called:    7
  6084 ;; This function calls:
  6085 ;;		Nothing
  6086 ;; This function is called by:
  6087 ;;		_Console_Backspace
  6088 ;;		_Console_Tab
  6089 ;; This function uses a non-reentrant model
  6090 ;;
  6091                           
  6092                           	psect	text19
  6093  0142EC                     __ptext19:
  6094                           	opt stack 0
  6095  0142EC                     _Console_ClearCursor:
  6096                           	opt stack 19
  6097                           
  6098                           ;Console.c: 311: {change=1; lBuffer[lBufferY][lBufferX] = 0x80 | 0;};
  6099                           
  6100                           ;incstack = 0
  6101  0142EC  0E01               	movlw	1
  6102  0142EE  0100               	movlb	0	; () banked
  6103  0142F0  6FFF               	movwf	_change& (0+255),b
  6104                           
  6105                           ; BSR set to: 0
  6106  0142F2  0100               	movlb	0	; () banked
  6107  0142F4  518C               	movf	_lBufferY& (0+255),w,b
  6108  0142F6  0D14               	mullw	20
  6109  0142F8  0EAA               	movlw	low _lBuffer
  6110  0142FA  0100               	movlb	0	; () banked
  6111  0142FC  6FB5               	movwf	??_Console_ClearCursor& (0+255),b
  6112  0142FE  0E04               	movlw	high _lBuffer
  6113  014300  0100               	movlb	0	; () banked
  6114  014302  6FB6               	movwf	(??_Console_ClearCursor+1)& (0+255),b
  6115  014304  50F3               	movf	prodl,w,c
  6116  014306  0100               	movlb	0	; () banked
  6117  014308  27B5               	addwf	??_Console_ClearCursor& (0+255),f,b
  6118  01430A  50F4               	movf	prodh,w,c
  6119  01430C  0100               	movlb	0	; () banked
  6120  01430E  23B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),f,b
  6121  014310  0100               	movlb	0	; () banked
  6122  014312  518D               	movf	_lBufferX& (0+255),w,b
  6123  014314  0D01               	mullw	1
  6124  014316  50F3               	movf	prodl,w,c
  6125  014318  0100               	movlb	0	; () banked
  6126  01431A  25B5               	addwf	??_Console_ClearCursor& (0+255),w,b
  6127  01431C  6ED9               	movwf	fsr2l,c
  6128  01431E  50F4               	movf	prodh,w,c
  6129  014320  0100               	movlb	0	; () banked
  6130  014322  21B6               	addwfc	(??_Console_ClearCursor+1)& (0+255),w,b
  6131  014324  6EDA               	movwf	fsr2h,c
  6132  014326  0E80               	movlw	128
  6133  014328  6EDF               	movwf	indf2,c
  6134                           
  6135                           ; BSR set to: 0
  6136  01432A  0012               	return		;funcret
  6137  01432C                     __end_of_Console_ClearCursor:
  6138                           	opt stack 0
  6139                           tosu	equ	0xFFF
  6140                           tosh	equ	0xFFE
  6141                           tosl	equ	0xFFD
  6142                           pclath	equ	0xFFA
  6143                           tblptru	equ	0xFF8
  6144                           tblptrh	equ	0xFF7
  6145                           tblptrl	equ	0xFF6
  6146                           tablat	equ	0xFF5
  6147                           prodh	equ	0xFF4
  6148                           prodl	equ	0xFF3
  6149                           postinc0	equ	0xFEE
  6150                           wreg	equ	0xFE8
  6151                           postdec1	equ	0xFE5
  6152                           fsr1h	equ	0xFE2
  6153                           fsr1l	equ	0xFE1
  6154                           indf2	equ	0xFDF
  6155                           postinc2	equ	0xFDE
  6156                           postdec2	equ	0xFDD
  6157                           fsr2h	equ	0xFDA
  6158                           fsr2l	equ	0xFD9
  6159                           status	equ	0xFD8
  6160                           
  6161 ;; *************** function _irobot_stop_motion *****************
  6162 ;; Defined at:
  6163 ;;		line 288 in file "Library/iRobotSerial.c"
  6164 ;; Parameters:    Size  Location     Type
  6165 ;;  isScript        1    wreg     unsigned char 
  6166 ;; Auto vars:     Size  Location     Type
  6167 ;;  isScript        1   25[BANK0 ] unsigned char 
  6168 ;; Return value:  Size  Location     Type
  6169 ;;                  1    wreg      void 
  6170 ;; Registers used:
  6171 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6172 ;; Tracked objects:
  6173 ;;		On entry : 0/0
  6174 ;;		On exit  : 0/0
  6175 ;;		Unchanged: 0/0
  6176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6178 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6180 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6181 ;;Total ram usage:        1 bytes
  6182 ;; Hardware stack levels used:    1
  6183 ;; Hardware stack levels required when called:    9
  6184 ;; This function calls:
  6185 ;;		_irobot_move
  6186 ;; This function is called by:
  6187 ;;		_main
  6188 ;;		_irobot_move_to_simple
  6189 ;;		_irobot_rotate_to
  6190 ;; This function uses a non-reentrant model
  6191 ;;
  6192                           
  6193                           	psect	text20
  6194  014194                     __ptext20:
  6195                           	opt stack 0
  6196  014194                     _irobot_stop_motion:
  6197                           	opt stack 21
  6198                           
  6199                           ; BSR set to: 0
  6200                           ;incstack = 0
  6201                           ;irobot_stop_motion@isScript stored from wreg
  6202  014194  0100               	movlb	0	; () banked
  6203  014196  6FCE               	movwf	irobot_stop_motion@isScript& (0+255),b
  6204                           
  6205                           ;iRobotSerial.c: 289: (isScript) ? irobot_move(1,0,0) : irobot_move(0,0,0);
  6206  014198  0100               	movlb	0	; () banked
  6207  01419A  51CE               	movf	irobot_stop_motion@isScript& (0+255),w,b
  6208  01419C  0100               	movlb	0	; () banked
  6209  01419E  B4D8               	btfsc	status,2,c
  6210  0141A0  D00E               	goto	l2163
  6211                           
  6212                           ; BSR set to: 0
  6213  0141A2  0E00               	movlw	0
  6214  0141A4  0100               	movlb	0	; () banked
  6215  0141A6  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6216  0141A8  0E00               	movlw	0
  6217  0141AA  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6218  0141AC  0E00               	movlw	0
  6219  0141AE  0100               	movlb	0	; () banked
  6220  0141B0  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6221  0141B2  0E00               	movlw	0
  6222  0141B4  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6223  0141B6  0E01               	movlw	1
  6224  0141B8  EC55  F096         	call	_irobot_move
  6225  0141BC  0012               	return	
  6226  0141BE                     l2163:
  6227  0141BE  0E00               	movlw	0
  6228  0141C0  0100               	movlb	0	; () banked
  6229  0141C2  6FC6               	movwf	(irobot_move@moveSpeed+1)& (0+255),b
  6230  0141C4  0E00               	movlw	0
  6231  0141C6  6FC5               	movwf	irobot_move@moveSpeed& (0+255),b
  6232  0141C8  0E00               	movlw	0
  6233  0141CA  0100               	movlb	0	; () banked
  6234  0141CC  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6235  0141CE  0E00               	movlw	0
  6236  0141D0  6FC7               	movwf	irobot_move@moveTurnRadius& (0+255),b
  6237  0141D2  0E00               	movlw	0
  6238  0141D4  EC55  F096         	call	_irobot_move
  6239  0141D8  0012               	return	
  6240  0141DA                     __end_of_irobot_stop_motion:
  6241                           	opt stack 0
  6242                           tosu	equ	0xFFF
  6243                           tosh	equ	0xFFE
  6244                           tosl	equ	0xFFD
  6245                           pclath	equ	0xFFA
  6246                           tblptru	equ	0xFF8
  6247                           tblptrh	equ	0xFF7
  6248                           tblptrl	equ	0xFF6
  6249                           tablat	equ	0xFF5
  6250                           prodh	equ	0xFF4
  6251                           prodl	equ	0xFF3
  6252                           postinc0	equ	0xFEE
  6253                           wreg	equ	0xFE8
  6254                           postdec1	equ	0xFE5
  6255                           fsr1h	equ	0xFE2
  6256                           fsr1l	equ	0xFE1
  6257                           indf2	equ	0xFDF
  6258                           postinc2	equ	0xFDE
  6259                           postdec2	equ	0xFDD
  6260                           fsr2h	equ	0xFDA
  6261                           fsr2l	equ	0xFD9
  6262                           status	equ	0xFD8
  6263                           
  6264 ;; *************** function _irobot_song_play *****************
  6265 ;; Defined at:
  6266 ;;		line 274 in file "Library/iRobotSerial.c"
  6267 ;; Parameters:    Size  Location     Type
  6268 ;;  songNumber      1    wreg     unsigned char 
  6269 ;; Auto vars:     Size  Location     Type
  6270 ;;  songNumber      1    1[BANK0 ] unsigned char 
  6271 ;; Return value:  Size  Location     Type
  6272 ;;                  1    wreg      void 
  6273 ;; Registers used:
  6274 ;;		wreg, status,2, cstack
  6275 ;; Tracked objects:
  6276 ;;		On entry : 0/0
  6277 ;;		On exit  : 0/0
  6278 ;;		Unchanged: 0/0
  6279 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6280 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6281 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6282 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6283 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6284 ;;Total ram usage:        1 bytes
  6285 ;; Hardware stack levels used:    1
  6286 ;; Hardware stack levels required when called:    8
  6287 ;; This function calls:
  6288 ;;		_eusart_putch
  6289 ;; This function is called by:
  6290 ;;		_main
  6291 ;; This function uses a non-reentrant model
  6292 ;;
  6293                           
  6294                           	psect	text21
  6295  014902                     __ptext21:
  6296                           	opt stack 0
  6297  014902                     _irobot_song_play:
  6298                           	opt stack 22
  6299                           
  6300                           ;incstack = 0
  6301                           ;irobot_song_play@songNumber stored from wreg
  6302  014902  0100               	movlb	0	; () banked
  6303  014904  6FB6               	movwf	irobot_song_play@songNumber& (0+255),b
  6304                           
  6305                           ;iRobotSerial.c: 275: eusart_putch(iR_SONG_PLAY);
  6306  014906  0E8D               	movlw	141
  6307  014908  ECB4  F0A4         	call	_eusart_putch
  6308                           
  6309                           ;iRobotSerial.c: 276: eusart_putch(songNumber);
  6310  01490C  0100               	movlb	0	; () banked
  6311  01490E  51B6               	movf	irobot_song_play@songNumber& (0+255),w,b
  6312  014910  ECB4  F0A4         	call	_eusart_putch
  6313  014914  0012               	return		;funcret
  6314  014916                     __end_of_irobot_song_play:
  6315                           	opt stack 0
  6316                           tosu	equ	0xFFF
  6317                           tosh	equ	0xFFE
  6318                           tosl	equ	0xFFD
  6319                           pclath	equ	0xFFA
  6320                           tblptru	equ	0xFF8
  6321                           tblptrh	equ	0xFF7
  6322                           tblptrl	equ	0xFF6
  6323                           tablat	equ	0xFF5
  6324                           prodh	equ	0xFF4
  6325                           prodl	equ	0xFF3
  6326                           postinc0	equ	0xFEE
  6327                           wreg	equ	0xFE8
  6328                           postdec1	equ	0xFE5
  6329                           fsr1h	equ	0xFE2
  6330                           fsr1l	equ	0xFE1
  6331                           indf2	equ	0xFDF
  6332                           postinc2	equ	0xFDE
  6333                           postdec2	equ	0xFDD
  6334                           fsr2h	equ	0xFDA
  6335                           fsr2l	equ	0xFD9
  6336                           status	equ	0xFD8
  6337                           
  6338 ;; *************** function _irobot_rotate *****************
  6339 ;; Defined at:
  6340 ;;		line 280 in file "Library/iRobotSerial.c"
  6341 ;; Parameters:    Size  Location     Type
  6342 ;;  isScript        1    wreg     unsigned char 
  6343 ;;  rotateAngle     2   25[BANK0 ] short 
  6344 ;;  rotateSpeed     2   27[BANK0 ] short 
  6345 ;; Auto vars:     Size  Location     Type
  6346 ;;  isScript        1   29[BANK0 ] unsigned char 
  6347 ;; Return value:  Size  Location     Type
  6348 ;;                  1    wreg      void 
  6349 ;; Registers used:
  6350 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6351 ;; Tracked objects:
  6352 ;;		On entry : 0/0
  6353 ;;		On exit  : 0/0
  6354 ;;		Unchanged: 0/0
  6355 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6356 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6357 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6358 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6359 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6360 ;;Total ram usage:        5 bytes
  6361 ;; Hardware stack levels used:    1
  6362 ;; Hardware stack levels required when called:    9
  6363 ;; This function calls:
  6364 ;;		_irobot_move
  6365 ;; This function is called by:
  6366 ;;		_main
  6367 ;;		_irobot_rotate_to
  6368 ;; This function uses a non-reentrant model
  6369 ;;
  6370                           
  6371                           	psect	text22
  6372  013C8A                     __ptext22:
  6373                           	opt stack 0
  6374  013C8A                     _irobot_rotate:
  6375                           	opt stack 21
  6376                           
  6377                           ;incstack = 0
  6378                           ;irobot_rotate@isScript stored from wreg
  6379  013C8A  0100               	movlb	0	; () banked
  6380  013C8C  6FD2               	movwf	irobot_rotate@isScript& (0+255),b
  6381                           
  6382                           ;iRobotSerial.c: 281: (rotateAngle > 0) ? (rotateAngle = iR_CONST_CCW) : (rotateAngle = 
      +                          iR_CONST_CW);
  6383  013C8E  0100               	movlb	0	; () banked
  6384  013C90  BFCF               	btfsc	(irobot_rotate@rotateAngle+1)& (0+255),7,b
  6385  013C92  D00D               	goto	l2152
  6386  013C94  0100               	movlb	0	; () banked
  6387  013C96  51CF               	movf	(irobot_rotate@rotateAngle+1)& (0+255),w,b
  6388  013C98  E104               	bnz	u8390
  6389  013C9A  0100               	movlb	0	; () banked
  6390  013C9C  05CE               	decf	irobot_rotate@rotateAngle& (0+255),w,b
  6391  013C9E  A0D8               	btfss	status,0,c
  6392  013CA0  D006               	goto	l2152
  6393  013CA2                     u8390:
  6394                           
  6395                           ; BSR set to: 0
  6396  013CA2  0E00               	movlw	0
  6397  013CA4  0100               	movlb	0	; () banked
  6398  013CA6  6FCF               	movwf	(irobot_rotate@rotateAngle+1)& (0+255),b
  6399  013CA8  0E01               	movlw	1
  6400  013CAA  6FCE               	movwf	irobot_rotate@rotateAngle& (0+255),b
  6401  013CAC  D003               	goto	l2154
  6402  013CAE                     l2152:
  6403                           
  6404                           ; BSR set to: 0
  6405  013CAE  0100               	movlb	0	; () banked
  6406  013CB0  69CE               	setf	irobot_rotate@rotateAngle& (0+255),b
  6407  013CB2  69CF               	setf	(irobot_rotate@rotateAngle+1)& (0+255),b
  6408  013CB4                     l2154:
  6409                           
  6410                           ; BSR set to: 0
  6411                           ;iRobotSerial.c: 282: (isScript) ?
  6412                           ;iRobotSerial.c: 283: irobot_move(1, rotateSpeed, rotateAngle):
  6413                           ;iRobotSerial.c: 284: irobot_move(0, rotateSpeed, rotateAngle);
  6414                           
  6415                           ; BSR set to: 0
  6416  013CB4  0100               	movlb	0	; () banked
  6417  013CB6  51D2               	movf	irobot_rotate@isScript& (0+255),w,b
  6418  013CB8  0100               	movlb	0	; () banked
  6419  013CBA  B4D8               	btfsc	status,2,c
  6420  013CBC  D00C               	goto	l2156
  6421                           
  6422                           ; BSR set to: 0
  6423  013CBE  C0D0  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  6424  013CC2  C0D1  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  6425  013CC6  C0CE  F0C7         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  6426  013CCA  C0CF  F0C8         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  6427  013CCE  0E01               	movlw	1
  6428  013CD0  EC55  F096         	call	_irobot_move
  6429  013CD4  0012               	return	
  6430  013CD6                     l2156:
  6431  013CD6  C0D0  F0C5         	movff	irobot_rotate@rotateSpeed,irobot_move@moveSpeed
  6432  013CDA  C0D1  F0C6         	movff	irobot_rotate@rotateSpeed+1,irobot_move@moveSpeed+1
  6433  013CDE  C0CE  F0C7         	movff	irobot_rotate@rotateAngle,irobot_move@moveTurnRadius
  6434  013CE2  C0CF  F0C8         	movff	irobot_rotate@rotateAngle+1,irobot_move@moveTurnRadius+1
  6435  013CE6  0E00               	movlw	0
  6436  013CE8  EC55  F096         	call	_irobot_move
  6437  013CEC  0012               	return	
  6438  013CEE                     __end_of_irobot_rotate:
  6439                           	opt stack 0
  6440                           tosu	equ	0xFFF
  6441                           tosh	equ	0xFFE
  6442                           tosl	equ	0xFFD
  6443                           pclath	equ	0xFFA
  6444                           tblptru	equ	0xFF8
  6445                           tblptrh	equ	0xFF7
  6446                           tblptrl	equ	0xFF6
  6447                           tablat	equ	0xFF5
  6448                           prodh	equ	0xFF4
  6449                           prodl	equ	0xFF3
  6450                           postinc0	equ	0xFEE
  6451                           wreg	equ	0xFE8
  6452                           postdec1	equ	0xFE5
  6453                           fsr1h	equ	0xFE2
  6454                           fsr1l	equ	0xFE1
  6455                           indf2	equ	0xFDF
  6456                           postinc2	equ	0xFDE
  6457                           postdec2	equ	0xFDD
  6458                           fsr2h	equ	0xFDA
  6459                           fsr2l	equ	0xFD9
  6460                           status	equ	0xFD8
  6461                           
  6462 ;; *************** function _irobot_move_straight *****************
  6463 ;; Defined at:
  6464 ;;		line 303 in file "Library/iRobotSerial.c"
  6465 ;; Parameters:    Size  Location     Type
  6466 ;;  straightSpee    2   25[BANK0 ] short 
  6467 ;; Auto vars:     Size  Location     Type
  6468 ;;		None
  6469 ;; Return value:  Size  Location     Type
  6470 ;;                  1    wreg      void 
  6471 ;; Registers used:
  6472 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6473 ;; Tracked objects:
  6474 ;;		On entry : 0/0
  6475 ;;		On exit  : 0/0
  6476 ;;		Unchanged: 0/0
  6477 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6478 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6479 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6480 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6481 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6482 ;;Total ram usage:        2 bytes
  6483 ;; Hardware stack levels used:    1
  6484 ;; Hardware stack levels required when called:    9
  6485 ;; This function calls:
  6486 ;;		_irobot_move
  6487 ;; This function is called by:
  6488 ;;		_main
  6489 ;; This function uses a non-reentrant model
  6490 ;;
  6491                           
  6492                           	psect	text23
  6493  014842                     __ptext23:
  6494                           	opt stack 0
  6495  014842                     _irobot_move_straight:
  6496                           	opt stack 21
  6497                           
  6498                           ;iRobotSerial.c: 304: irobot_move(0, straightSpeed, iR_CONST_STRAIGHT_2);
  6499                           
  6500                           ;incstack = 0
  6501  014842  C0CE  F0C5         	movff	irobot_move_straight@straightSpeed,irobot_move@moveSpeed
  6502  014846  C0CF  F0C6         	movff	irobot_move_straight@straightSpeed+1,irobot_move@moveSpeed+1
  6503  01484A  0E7F               	movlw	127
  6504  01484C  0100               	movlb	0	; () banked
  6505  01484E  6FC8               	movwf	(irobot_move@moveTurnRadius+1)& (0+255),b
  6506  014850  69C7               	setf	irobot_move@moveTurnRadius& (0+255),b
  6507  014852  0E00               	movlw	0
  6508  014854  EC55  F096         	call	_irobot_move
  6509  014858  0012               	return		;funcret
  6510  01485A                     __end_of_irobot_move_straight:
  6511                           	opt stack 0
  6512                           tosu	equ	0xFFF
  6513                           tosh	equ	0xFFE
  6514                           tosl	equ	0xFFD
  6515                           pclath	equ	0xFFA
  6516                           tblptru	equ	0xFF8
  6517                           tblptrh	equ	0xFF7
  6518                           tblptrl	equ	0xFF6
  6519                           tablat	equ	0xFF5
  6520                           prodh	equ	0xFF4
  6521                           prodl	equ	0xFF3
  6522                           postinc0	equ	0xFEE
  6523                           wreg	equ	0xFE8
  6524                           postdec1	equ	0xFE5
  6525                           fsr1h	equ	0xFE2
  6526                           fsr1l	equ	0xFE1
  6527                           indf2	equ	0xFDF
  6528                           postinc2	equ	0xFDE
  6529                           postdec2	equ	0xFDD
  6530                           fsr2h	equ	0xFDA
  6531                           fsr2l	equ	0xFD9
  6532                           status	equ	0xFD8
  6533                           
  6534 ;; *************** function _irobot_move *****************
  6535 ;; Defined at:
  6536 ;;		line 220 in file "Library/iRobotSerial.c"
  6537 ;; Parameters:    Size  Location     Type
  6538 ;;  isScript        1    wreg     unsigned char 
  6539 ;;  moveSpeed       2   16[BANK0 ] short 
  6540 ;;  moveTurnRadi    2   18[BANK0 ] short 
  6541 ;; Auto vars:     Size  Location     Type
  6542 ;;  isScript        1   24[BANK0 ] unsigned char 
  6543 ;; Return value:  Size  Location     Type
  6544 ;;                  1    wreg      void 
  6545 ;; Registers used:
  6546 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6547 ;; Tracked objects:
  6548 ;;		On entry : 0/0
  6549 ;;		On exit  : 0/0
  6550 ;;		Unchanged: 0/0
  6551 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6552 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6553 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6554 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6555 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6556 ;;Total ram usage:        9 bytes
  6557 ;; Hardware stack levels used:    1
  6558 ;; Hardware stack levels required when called:    8
  6559 ;; This function calls:
  6560 ;;		_eusart_putch
  6561 ;;		_load_iRScriptStack
  6562 ;;		_twos_complement_of
  6563 ;; This function is called by:
  6564 ;;		_irobot_rotate
  6565 ;;		_irobot_stop_motion
  6566 ;;		_irobot_move_straight
  6567 ;;		_irobot_move_to_simple
  6568 ;; This function uses a non-reentrant model
  6569 ;;
  6570                           
  6571                           	psect	text24
  6572  012CAA                     __ptext24:
  6573                           	opt stack 0
  6574  012CAA                     _irobot_move:
  6575                           	opt stack 21
  6576                           
  6577                           ;incstack = 0
  6578                           ;irobot_move@isScript stored from wreg
  6579  012CAA  0100               	movlb	0	; () banked
  6580  012CAC  6FCD               	movwf	irobot_move@isScript& (0+255),b
  6581                           
  6582                           ;iRobotSerial.c: 221: moveSpeed = twos_complement_of(moveSpeed);
  6583  012CAE  C0C5  F0B5         	movff	irobot_move@moveSpeed,twos_complement_of@complementValue
  6584  012CB2  C0C6  F0B6         	movff	irobot_move@moveSpeed+1,twos_complement_of@complementValue+1
  6585  012CB6  EC33  F0A1         	call	_twos_complement_of	;wreg free
  6586  012CBA  C0B5  F0C5         	movff	?_twos_complement_of,irobot_move@moveSpeed
  6587  012CBE  C0B6  F0C6         	movff	?_twos_complement_of+1,irobot_move@moveSpeed+1
  6588                           
  6589                           ;iRobotSerial.c: 222: moveTurnRadius = twos_complement_of(moveTurnRadius);
  6590  012CC2  C0C7  F0B5         	movff	irobot_move@moveTurnRadius,twos_complement_of@complementValue
  6591  012CC6  C0C8  F0B6         	movff	irobot_move@moveTurnRadius+1,twos_complement_of@complementValue+1
  6592  012CCA  EC33  F0A1         	call	_twos_complement_of	;wreg free
  6593  012CCE  C0B5  F0C7         	movff	?_twos_complement_of,irobot_move@moveTurnRadius
  6594  012CD2  C0B6  F0C8         	movff	?_twos_complement_of+1,irobot_move@moveTurnRadius+1
  6595                           
  6596                           ;iRobotSerial.c: 224: if (isScript){
  6597  012CD6  0100               	movlb	0	; () banked
  6598  012CD8  51CD               	movf	irobot_move@isScript& (0+255),w,b
  6599  012CDA  0100               	movlb	0	; () banked
  6600  012CDC  B4D8               	btfsc	status,2,c
  6601  012CDE  D029               	goto	l2135
  6602                           
  6603                           ; BSR set to: 0
  6604                           ;iRobotSerial.c: 225: load_iRScriptStack(5, iR_DRIVE,
  6605                           ;iRobotSerial.c: 226: (((moveSpeed)>>8) & 0xFF), ((moveSpeed) & 0xFF),
  6606                           ;iRobotSerial.c: 227: (((moveTurnRadius)>>8) & 0xFF), ((moveTurnRadius) & 0xFF));
  6607  012CE0  0E00               	movlw	0
  6608  012CE2  0100               	movlb	0	; () banked
  6609  012CE4  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6610  012CE6  0E89               	movlw	137
  6611  012CE8  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6612  012CEA  C0C6  F0C9         	movff	irobot_move@moveSpeed+1,??_irobot_move
  6613  012CEE  0100               	movlb	0	; () banked
  6614  012CF0  6BCA               	clrf	(??_irobot_move+1)& (0+255),b
  6615  012CF2  BFC9               	btfsc	??_irobot_move& (0+255),7,b
  6616  012CF4  69CA               	setf	(??_irobot_move+1)& (0+255),b
  6617  012CF6  0100               	movlb	0	; () banked
  6618  012CF8  51C9               	movf	??_irobot_move& (0+255),w,b
  6619  012CFA  0100               	movlb	0	; () banked
  6620  012CFC  6FB7               	movwf	(?_load_iRScriptStack+2)& (0+255),b
  6621  012CFE  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6622  012D00  0100               	movlb	0	; () banked
  6623  012D02  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6624  012D04  0100               	movlb	0	; () banked
  6625  012D06  6FB9               	movwf	(?_load_iRScriptStack+4)& (0+255),b
  6626  012D08  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6627  012D0A  C0C8  F0CB         	movff	irobot_move@moveTurnRadius+1,??_irobot_move+2
  6628  012D0E  0100               	movlb	0	; () banked
  6629  012D10  6BCC               	clrf	(??_irobot_move+3)& (0+255),b
  6630  012D12  BFCB               	btfsc	(??_irobot_move+2)& (0+255),7,b
  6631  012D14  69CC               	setf	(??_irobot_move+3)& (0+255),b
  6632  012D16  0100               	movlb	0	; () banked
  6633  012D18  51CB               	movf	(??_irobot_move+2)& (0+255),w,b
  6634  012D1A  0100               	movlb	0	; () banked
  6635  012D1C  6FBB               	movwf	(?_load_iRScriptStack+6)& (0+255),b
  6636  012D1E  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6637  012D20  0100               	movlb	0	; () banked
  6638  012D22  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6639  012D24  0100               	movlb	0	; () banked
  6640  012D26  6FBD               	movwf	(?_load_iRScriptStack+8)& (0+255),b
  6641  012D28  6BBE               	clrf	(?_load_iRScriptStack+9)& (0+255),b
  6642  012D2A  0E05               	movlw	5
  6643  012D2C  EC40  F09D         	call	_load_iRScriptStack
  6644                           
  6645                           ;iRobotSerial.c: 228: }
  6646  012D30  0012               	return	
  6647  012D32                     l2135:
  6648                           
  6649                           ;iRobotSerial.c: 229: else{
  6650                           ;iRobotSerial.c: 230: eusart_putch(iR_DRIVE);
  6651  012D32  0E89               	movlw	137
  6652  012D34  ECB4  F0A4         	call	_eusart_putch
  6653                           
  6654                           ;iRobotSerial.c: 231: eusart_putch((((moveSpeed)>>8) & 0xFF));
  6655  012D38  0100               	movlb	0	; () banked
  6656  012D3A  51C6               	movf	(irobot_move@moveSpeed+1)& (0+255),w,b
  6657  012D3C  ECB4  F0A4         	call	_eusart_putch
  6658                           
  6659                           ;iRobotSerial.c: 232: eusart_putch(((moveSpeed) & 0xFF));
  6660  012D40  0100               	movlb	0	; () banked
  6661  012D42  51C5               	movf	irobot_move@moveSpeed& (0+255),w,b
  6662  012D44  ECB4  F0A4         	call	_eusart_putch
  6663                           
  6664                           ;iRobotSerial.c: 233: eusart_putch((((moveTurnRadius)>>8) & 0xFF));
  6665  012D48  0100               	movlb	0	; () banked
  6666  012D4A  51C8               	movf	(irobot_move@moveTurnRadius+1)& (0+255),w,b
  6667  012D4C  ECB4  F0A4         	call	_eusart_putch
  6668                           
  6669                           ;iRobotSerial.c: 234: eusart_putch(((moveTurnRadius) & 0xFF));
  6670  012D50  0100               	movlb	0	; () banked
  6671  012D52  51C7               	movf	irobot_move@moveTurnRadius& (0+255),w,b
  6672  012D54  ECB4  F0A4         	call	_eusart_putch
  6673  012D58  0012               	return	
  6674  012D5A                     __end_of_irobot_move:
  6675                           	opt stack 0
  6676                           tosu	equ	0xFFF
  6677                           tosh	equ	0xFFE
  6678                           tosl	equ	0xFFD
  6679                           pclath	equ	0xFFA
  6680                           tblptru	equ	0xFF8
  6681                           tblptrh	equ	0xFF7
  6682                           tblptrl	equ	0xFF6
  6683                           tablat	equ	0xFF5
  6684                           prodh	equ	0xFF4
  6685                           prodl	equ	0xFF3
  6686                           postinc0	equ	0xFEE
  6687                           wreg	equ	0xFE8
  6688                           postdec1	equ	0xFE5
  6689                           fsr1h	equ	0xFE2
  6690                           fsr1l	equ	0xFE1
  6691                           indf2	equ	0xFDF
  6692                           postinc2	equ	0xFDE
  6693                           postdec2	equ	0xFDD
  6694                           fsr2h	equ	0xFDA
  6695                           fsr2l	equ	0xFD9
  6696                           status	equ	0xFD8
  6697                           
  6698 ;; *************** function _twos_complement_of *****************
  6699 ;; Defined at:
  6700 ;;		line 167 in file "Library/iRobotSerial.c"
  6701 ;; Parameters:    Size  Location     Type
  6702 ;;  complementVa    2    0[BANK0 ] short 
  6703 ;; Auto vars:     Size  Location     Type
  6704 ;;		None
  6705 ;; Return value:  Size  Location     Type
  6706 ;;                  2    0[BANK0 ] unsigned short 
  6707 ;; Registers used:
  6708 ;;		wreg, status,2, status,0
  6709 ;; Tracked objects:
  6710 ;;		On entry : 0/0
  6711 ;;		On exit  : 0/0
  6712 ;;		Unchanged: 0/0
  6713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6714 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6716 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6717 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6718 ;;Total ram usage:        2 bytes
  6719 ;; Hardware stack levels used:    1
  6720 ;; Hardware stack levels required when called:    7
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_irobot_move
  6725 ;;		_irobot_angle_wait
  6726 ;;		_irobot_distance_wait
  6727 ;; This function uses a non-reentrant model
  6728 ;;
  6729                           
  6730                           	psect	text25
  6731  014266                     __ptext25:
  6732                           	opt stack 0
  6733  014266                     _twos_complement_of:
  6734                           	opt stack 21
  6735                           
  6736                           ;iRobotSerial.c: 168: if (complementValue < 0){
  6737                           
  6738                           ;incstack = 0
  6739  014266  0100               	movlb	0	; () banked
  6740  014268  AFB6               	btfss	(twos_complement_of@complementValue+1)& (0+255),7,b
  6741  01426A  D01A               	goto	l2106
  6742                           
  6743                           ; BSR set to: 0
  6744                           ;iRobotSerial.c: 169: complementValue = ((complementValue) > 0 ? (complementValue) : -(c
      +                          omplementValue));
  6745  01426C  0100               	movlb	0	; () banked
  6746  01426E  BFB6               	btfsc	(twos_complement_of@complementValue+1)& (0+255),7,b
  6747  014270  D007               	goto	u7500
  6748  014272  0100               	movlb	0	; () banked
  6749  014274  51B6               	movf	(twos_complement_of@complementValue+1)& (0+255),w,b
  6750  014276  E10A               	bnz	l2108
  6751  014278  0100               	movlb	0	; () banked
  6752  01427A  05B5               	decf	twos_complement_of@complementValue& (0+255),w,b
  6753  01427C  B0D8               	btfsc	status,0,c
  6754  01427E  D006               	goto	l2108
  6755  014280                     u7500:
  6756                           
  6757                           ; BSR set to: 0
  6758  014280  0100               	movlb	0	; () banked
  6759  014282  6DB5               	negf	twos_complement_of@complementValue& (0+255),b
  6760  014284  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6761  014286  B0D8               	btfsc	status,0,c
  6762  014288  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6763  01428A  D004               	goto	l2110
  6764  01428C                     l2108:
  6765                           
  6766                           ; BSR set to: 0
  6767  01428C  C0B5  F0B5         	movff	twos_complement_of@complementValue,twos_complement_of@complementValue
  6768  014290  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,twos_complement_of@complementValue+1
  6769  014294                     l2110:
  6770                           
  6771                           ; BSR set to: 0
  6772                           ;iRobotSerial.c: 170: complementValue = ~complementValue;
  6773                           
  6774                           ; BSR set to: 0
  6775  014294  0100               	movlb	0	; () banked
  6776  014296  1FB5               	comf	twos_complement_of@complementValue& (0+255),f,b
  6777  014298  1FB6               	comf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6778                           
  6779                           ;iRobotSerial.c: 171: complementValue += 1;
  6780  01429A  0100               	movlb	0	; () banked
  6781  01429C  4BB5               	infsnz	twos_complement_of@complementValue& (0+255),f,b
  6782  01429E  2BB6               	incf	(twos_complement_of@complementValue+1)& (0+255),f,b
  6783  0142A0                     l2106:
  6784                           
  6785                           ; BSR set to: 0
  6786                           ;iRobotSerial.c: 172: }
  6787                           ;iRobotSerial.c: 173: return complementValue;
  6788                           
  6789                           ; BSR set to: 0
  6790  0142A0  C0B5  F0B5         	movff	twos_complement_of@complementValue,?_twos_complement_of
  6791  0142A4  C0B6  F0B6         	movff	twos_complement_of@complementValue+1,?_twos_complement_of+1
  6792  0142A8  0012               	return	
  6793  0142AA                     __end_of_twos_complement_of:
  6794                           	opt stack 0
  6795                           tosu	equ	0xFFF
  6796                           tosh	equ	0xFFE
  6797                           tosl	equ	0xFFD
  6798                           pclath	equ	0xFFA
  6799                           tblptru	equ	0xFF8
  6800                           tblptrh	equ	0xFF7
  6801                           tblptrl	equ	0xFF6
  6802                           tablat	equ	0xFF5
  6803                           prodh	equ	0xFF4
  6804                           prodl	equ	0xFF3
  6805                           postinc0	equ	0xFEE
  6806                           wreg	equ	0xFE8
  6807                           postdec1	equ	0xFE5
  6808                           fsr1h	equ	0xFE2
  6809                           fsr1l	equ	0xFE1
  6810                           indf2	equ	0xFDF
  6811                           postinc2	equ	0xFDE
  6812                           postdec2	equ	0xFDD
  6813                           fsr2h	equ	0xFDA
  6814                           fsr2l	equ	0xFD9
  6815                           status	equ	0xFD8
  6816                           
  6817 ;; *************** function _irobot_led_power_on *****************
  6818 ;; Defined at:
  6819 ;;		line 293 in file "Library/iRobotSerial.c"
  6820 ;; Parameters:    Size  Location     Type
  6821 ;;  powerOnColou    1    wreg     unsigned char 
  6822 ;; Auto vars:     Size  Location     Type
  6823 ;;  powerOnColou    1   20[BANK0 ] unsigned char 
  6824 ;; Return value:  Size  Location     Type
  6825 ;;                  1    wreg      void 
  6826 ;; Registers used:
  6827 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6828 ;; Tracked objects:
  6829 ;;		On entry : 0/0
  6830 ;;		On exit  : 0/0
  6831 ;;		Unchanged: 0/0
  6832 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6833 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6834 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6835 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6836 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6837 ;;Total ram usage:        1 bytes
  6838 ;; Hardware stack levels used:    1
  6839 ;; Hardware stack levels required when called:    9
  6840 ;; This function calls:
  6841 ;;		_irobot_leds
  6842 ;; This function is called by:
  6843 ;;		_main
  6844 ;; This function uses a non-reentrant model
  6845 ;;
  6846                           
  6847                           	psect	text26
  6848  0147F0                     __ptext26:
  6849                           	opt stack 0
  6850  0147F0                     _irobot_led_power_on:
  6851                           	opt stack 21
  6852                           
  6853                           ; BSR set to: 0
  6854                           ;incstack = 0
  6855                           ;irobot_led_power_on@powerOnColour stored from wreg
  6856  0147F0  0100               	movlb	0	; () banked
  6857  0147F2  6FC9               	movwf	irobot_led_power_on@powerOnColour& (0+255),b
  6858                           
  6859                           ;iRobotSerial.c: 294: irobot_leds(0, 0, powerOnColour, iR_CONST_LED_ON);
  6860  0147F4  0E00               	movlw	0
  6861  0147F6  0100               	movlb	0	; () banked
  6862  0147F8  6FC5               	movwf	irobot_leds@LEDBit& (0+255),b
  6863  0147FA  C0C9  F0C6         	movff	irobot_led_power_on@powerOnColour,irobot_leds@powerColour
  6864  0147FE  0EFF               	movlw	255
  6865  014800  0100               	movlb	0	; () banked
  6866  014802  6FC7               	movwf	irobot_leds@powerLuminosity& (0+255),b
  6867  014804  0E00               	movlw	0
  6868  014806  EC66  F09F         	call	_irobot_leds
  6869  01480A  0012               	return		;funcret
  6870  01480C                     __end_of_irobot_led_power_on:
  6871                           	opt stack 0
  6872                           tosu	equ	0xFFF
  6873                           tosh	equ	0xFFE
  6874                           tosl	equ	0xFFD
  6875                           pclath	equ	0xFFA
  6876                           tblptru	equ	0xFF8
  6877                           tblptrh	equ	0xFF7
  6878                           tblptrl	equ	0xFF6
  6879                           tablat	equ	0xFF5
  6880                           prodh	equ	0xFF4
  6881                           prodl	equ	0xFF3
  6882                           postinc0	equ	0xFEE
  6883                           wreg	equ	0xFE8
  6884                           postdec1	equ	0xFE5
  6885                           fsr1h	equ	0xFE2
  6886                           fsr1l	equ	0xFE1
  6887                           indf2	equ	0xFDF
  6888                           postinc2	equ	0xFDE
  6889                           postdec2	equ	0xFDD
  6890                           fsr2h	equ	0xFDA
  6891                           fsr2l	equ	0xFD9
  6892                           status	equ	0xFD8
  6893                           
  6894 ;; *************** function _irobot_leds *****************
  6895 ;; Defined at:
  6896 ;;		line 239 in file "Library/iRobotSerial.c"
  6897 ;; Parameters:    Size  Location     Type
  6898 ;;  isScript        1    wreg     unsigned char 
  6899 ;;  LEDBit          1   16[BANK0 ] unsigned char 
  6900 ;;  powerColour     1   17[BANK0 ] unsigned char 
  6901 ;;  powerLuminos    1   18[BANK0 ] unsigned char 
  6902 ;; Auto vars:     Size  Location     Type
  6903 ;;  isScript        1   19[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  1    wreg      void 
  6906 ;; Registers used:
  6907 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6913 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6914 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6916 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6917 ;;Total ram usage:        4 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    8
  6920 ;; This function calls:
  6921 ;;		_eusart_putch
  6922 ;;		_load_iRScriptStack
  6923 ;; This function is called by:
  6924 ;;		_irobot_led_power_on
  6925 ;;		_irobot_led_power_off
  6926 ;; This function uses a non-reentrant model
  6927 ;;
  6928                           
  6929                           	psect	text27
  6930  013ECC                     __ptext27:
  6931                           	opt stack 0
  6932  013ECC                     _irobot_leds:
  6933                           	opt stack 21
  6934                           
  6935                           ;incstack = 0
  6936                           ;irobot_leds@isScript stored from wreg
  6937  013ECC  0100               	movlb	0	; () banked
  6938  013ECE  6FC8               	movwf	irobot_leds@isScript& (0+255),b
  6939                           
  6940                           ;iRobotSerial.c: 240: if (isScript){
  6941  013ED0  0100               	movlb	0	; () banked
  6942  013ED2  51C8               	movf	irobot_leds@isScript& (0+255),w,b
  6943  013ED4  0100               	movlb	0	; () banked
  6944  013ED6  B4D8               	btfsc	status,2,c
  6945  013ED8  D015               	goto	l2140
  6946                           
  6947                           ; BSR set to: 0
  6948                           ;iRobotSerial.c: 241: load_iRScriptStack(4, iR_LEDS,
  6949                           ;iRobotSerial.c: 242: LEDBit, powerColour, powerLuminosity);
  6950  013EDA  0E00               	movlw	0
  6951  013EDC  0100               	movlb	0	; () banked
  6952  013EDE  6FB6               	movwf	(?_load_iRScriptStack+1)& (0+255),b
  6953  013EE0  0E8B               	movlw	139
  6954  013EE2  6FB5               	movwf	?_load_iRScriptStack& (0+255),b
  6955  013EE4  C0C5  F0B7         	movff	irobot_leds@LEDBit,?_load_iRScriptStack+2
  6956  013EE8  0100               	movlb	0	; () banked
  6957  013EEA  6BB8               	clrf	(?_load_iRScriptStack+3)& (0+255),b
  6958  013EEC  C0C6  F0B9         	movff	irobot_leds@powerColour,?_load_iRScriptStack+4
  6959  013EF0  0100               	movlb	0	; () banked
  6960  013EF2  6BBA               	clrf	(?_load_iRScriptStack+5)& (0+255),b
  6961  013EF4  C0C7  F0BB         	movff	irobot_leds@powerLuminosity,?_load_iRScriptStack+6
  6962  013EF8  0100               	movlb	0	; () banked
  6963  013EFA  6BBC               	clrf	(?_load_iRScriptStack+7)& (0+255),b
  6964  013EFC  0E04               	movlw	4
  6965  013EFE  EC40  F09D         	call	_load_iRScriptStack
  6966                           
  6967                           ;iRobotSerial.c: 243: }
  6968  013F02  0012               	return	
  6969  013F04                     l2140:
  6970                           
  6971                           ;iRobotSerial.c: 244: else{
  6972                           ;iRobotSerial.c: 245: eusart_putch(iR_LEDS);
  6973  013F04  0E8B               	movlw	139
  6974  013F06  ECB4  F0A4         	call	_eusart_putch
  6975                           
  6976                           ;iRobotSerial.c: 246: eusart_putch(LEDBit);
  6977  013F0A  0100               	movlb	0	; () banked
  6978  013F0C  51C5               	movf	irobot_leds@LEDBit& (0+255),w,b
  6979  013F0E  ECB4  F0A4         	call	_eusart_putch
  6980                           
  6981                           ;iRobotSerial.c: 247: eusart_putch(powerColour);
  6982  013F12  0100               	movlb	0	; () banked
  6983  013F14  51C6               	movf	irobot_leds@powerColour& (0+255),w,b
  6984  013F16  ECB4  F0A4         	call	_eusart_putch
  6985                           
  6986                           ;iRobotSerial.c: 248: eusart_putch(powerLuminosity);
  6987  013F1A  0100               	movlb	0	; () banked
  6988  013F1C  51C7               	movf	irobot_leds@powerLuminosity& (0+255),w,b
  6989  013F1E  ECB4  F0A4         	call	_eusart_putch
  6990  013F22  0012               	return	
  6991  013F24                     __end_of_irobot_leds:
  6992                           	opt stack 0
  6993                           tosu	equ	0xFFF
  6994                           tosh	equ	0xFFE
  6995                           tosl	equ	0xFFD
  6996                           pclath	equ	0xFFA
  6997                           tblptru	equ	0xFF8
  6998                           tblptrh	equ	0xFF7
  6999                           tblptrl	equ	0xFF6
  7000                           tablat	equ	0xFF5
  7001                           prodh	equ	0xFF4
  7002                           prodl	equ	0xFF3
  7003                           postinc0	equ	0xFEE
  7004                           wreg	equ	0xFE8
  7005                           postdec1	equ	0xFE5
  7006                           fsr1h	equ	0xFE2
  7007                           fsr1l	equ	0xFE1
  7008                           indf2	equ	0xFDF
  7009                           postinc2	equ	0xFDE
  7010                           postdec2	equ	0xFDD
  7011                           fsr2h	equ	0xFDA
  7012                           fsr2l	equ	0xFD9
  7013                           status	equ	0xFD8
  7014                           
  7015 ;; *************** function _load_iRScriptStack *****************
  7016 ;; Defined at:
  7017 ;;		line 176 in file "Library/iRobotSerial.c"
  7018 ;; Parameters:    Size  Location     Type
  7019 ;;  bytesToLoad     1    wreg     unsigned char 
  7020 ;; Auto vars:     Size  Location     Type
  7021 ;;  bytesToLoad     1   14[BANK0 ] unsigned char 
  7022 ;;  i               1   15[BANK0 ] unsigned char 
  7023 ;;  loadByte        2   12[BANK0 ] PTR void [1]
  7024 ;;		 -> ?_load_iRScriptStack(1), 
  7025 ;; Return value:  Size  Location     Type
  7026 ;;                  1    wreg      void 
  7027 ;; Registers used:
  7028 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
  7029 ;; Tracked objects:
  7030 ;;		On entry : 0/0
  7031 ;;		On exit  : 0/0
  7032 ;;		Unchanged: 0/0
  7033 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7034 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7035 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7036 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7037 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7038 ;;Total ram usage:       16 bytes
  7039 ;; Hardware stack levels used:    1
  7040 ;; Hardware stack levels required when called:    7
  7041 ;; This function calls:
  7042 ;;		Nothing
  7043 ;; This function is called by:
  7044 ;;		_irobot_move
  7045 ;;		_irobot_leds
  7046 ;;		_irobot_angle_wait
  7047 ;;		_irobot_distance_wait
  7048 ;; This function uses a non-reentrant model
  7049 ;;
  7050                           
  7051                           	psect	text28
  7052  013A80                     __ptext28:
  7053                           	opt stack 0
  7054  013A80                     _load_iRScriptStack:
  7055                           	opt stack 21
  7056                           
  7057                           ;incstack = 0
  7058                           ;load_iRScriptStack@bytesToLoad stored from wreg
  7059  013A80  0100               	movlb	0	; () banked
  7060  013A82  6FC3               	movwf	load_iRScriptStack@bytesToLoad& (0+255),b
  7061                           
  7062                           ;iRobotSerial.c: 177: va_list loadByte;
  7063                           ;iRobotSerial.c: 178: *loadByte = __va_start();
  7064  013A84  0EB5               	movlw	low ?_load_iRScriptStack
  7065  013A86  0100               	movlb	0	; () banked
  7066  013A88  6FC1               	movwf	load_iRScriptStack@loadByte& (0+255),b
  7067  013A8A  0E00               	movlw	high ?_load_iRScriptStack
  7068  013A8C  0100               	movlb	0	; () banked
  7069  013A8E  6FC2               	movwf	(load_iRScriptStack@loadByte+1)& (0+255),b
  7070                           
  7071                           ;iRobotSerial.c: 179: for (UINT8 i = 0; i < bytesToLoad; i++){
  7072  013A90  0E00               	movlw	0
  7073  013A92  0100               	movlb	0	; () banked
  7074  013A94  6FC4               	movwf	load_iRScriptStack@i& (0+255),b
  7075  013A96  D01F               	goto	l2114
  7076  013A98                     
  7077                           ; BSR set to: 0
  7078                           ;iRobotSerial.c: 180: iRScriptStack[iRScriptIndex + i] = (*(int *)__va_arg((*(int **)loa
      +                          dByte), (int)0));
  7079                           
  7080                           ; BSR set to: 0
  7081  013A98  C0C1  FFD9         	movff	load_iRScriptStack@loadByte,fsr2l
  7082  013A9C  C0C2  FFDA         	movff	load_iRScriptStack@loadByte+1,fsr2h
  7083  013AA0  0100               	movlb	0	; () banked
  7084  013AA2  51C4               	movf	load_iRScriptStack@i& (0+255),w,b
  7085  013AA4  C035  F0BF         	movff	_iRScriptIndex,??_load_iRScriptStack
  7086  013AA8  0100               	movlb	0	; () banked
  7087  013AAA  6BC0               	clrf	(??_load_iRScriptStack+1)& (0+255),b
  7088  013AAC  0100               	movlb	0	; () banked
  7089  013AAE  27BF               	addwf	??_load_iRScriptStack& (0+255),f,b
  7090  013AB0  0E00               	movlw	0
  7091  013AB2  23C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),f,b
  7092  013AB4  0E00               	movlw	low _iRScriptStack
  7093  013AB6  0100               	movlb	0	; () banked
  7094  013AB8  25BF               	addwf	??_load_iRScriptStack& (0+255),w,b
  7095  013ABA  6EE1               	movwf	fsr1l,c
  7096  013ABC  0E04               	movlw	high _iRScriptStack
  7097  013ABE  0100               	movlb	0	; () banked
  7098  013AC0  21C0               	addwfc	(??_load_iRScriptStack+1)& (0+255),w,b
  7099  013AC2  6EE2               	movwf	fsr1h,c
  7100  013AC4  CFDF FFE7          	movff	indf2,indf1
  7101                           
  7102                           ; BSR set to: 0
  7103  013AC8  0E02               	movlw	2
  7104  013ACA  0100               	movlb	0	; () banked
  7105  013ACC  27C1               	addwf	load_iRScriptStack@loadByte& (0+255),f,b
  7106  013ACE  0E00               	movlw	0
  7107  013AD0  23C2               	addwfc	(load_iRScriptStack@loadByte+1)& (0+255),f,b
  7108                           
  7109                           ; BSR set to: 0
  7110  013AD2  0100               	movlb	0	; () banked
  7111  013AD4  2BC4               	incf	load_iRScriptStack@i& (0+255),f,b
  7112  013AD6                     l2114:
  7113                           
  7114                           ; BSR set to: 0
  7115                           
  7116                           ; BSR set to: 0
  7117  013AD6  0100               	movlb	0	; () banked
  7118  013AD8  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  7119  013ADA  0100               	movlb	0	; () banked
  7120  013ADC  5DC4               	subwf	load_iRScriptStack@i& (0+255),w,b
  7121  013ADE  A0D8               	btfss	status,0,c
  7122  013AE0  D7DB               	goto	l2115
  7123                           
  7124                           ; BSR set to: 0
  7125                           ;iRobotSerial.c: 181: }
  7126                           ;iRobotSerial.c: 182: ;
  7127                           ;iRobotSerial.c: 183: iRScriptIndex += bytesToLoad;
  7128                           
  7129                           ; BSR set to: 0
  7130  013AE2  0100               	movlb	0	; () banked
  7131  013AE4  51C3               	movf	load_iRScriptStack@bytesToLoad& (0+255),w,b
  7132  013AE6  2635               	addwf	_iRScriptIndex,f,c
  7133                           
  7134                           ; BSR set to: 0
  7135  013AE8  0012               	return		;funcret
  7136  013AEA                     __end_of_load_iRScriptStack:
  7137                           	opt stack 0
  7138                           tosu	equ	0xFFF
  7139                           tosh	equ	0xFFE
  7140                           tosl	equ	0xFFD
  7141                           pclath	equ	0xFFA
  7142                           tblptru	equ	0xFF8
  7143                           tblptrh	equ	0xFF7
  7144                           tblptrl	equ	0xFF6
  7145                           tablat	equ	0xFF5
  7146                           prodh	equ	0xFF4
  7147                           prodl	equ	0xFF3
  7148                           postinc0	equ	0xFEE
  7149                           wreg	equ	0xFE8
  7150                           indf1	equ	0xFE7
  7151                           postdec1	equ	0xFE5
  7152                           fsr1h	equ	0xFE2
  7153                           fsr1l	equ	0xFE1
  7154                           indf2	equ	0xFDF
  7155                           postinc2	equ	0xFDE
  7156                           postdec2	equ	0xFDD
  7157                           fsr2h	equ	0xFDA
  7158                           fsr2l	equ	0xFD9
  7159                           status	equ	0xFD8
  7160                           
  7161 ;; *************** function _irobot_init_song_0 *****************
  7162 ;; Defined at:
  7163 ;;		line 252 in file "Library/iRobotSerial.c"
  7164 ;; Parameters:    Size  Location     Type
  7165 ;;		None
  7166 ;; Auto vars:     Size  Location     Type
  7167 ;;		None
  7168 ;; Return value:  Size  Location     Type
  7169 ;;                  1    wreg      void 
  7170 ;; Registers used:
  7171 ;;		wreg, cstack
  7172 ;; Tracked objects:
  7173 ;;		On entry : 0/0
  7174 ;;		On exit  : 0/0
  7175 ;;		Unchanged: 0/0
  7176 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7177 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7178 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7179 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7180 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7181 ;;Total ram usage:        0 bytes
  7182 ;; Hardware stack levels used:    1
  7183 ;; Hardware stack levels required when called:    8
  7184 ;; This function calls:
  7185 ;;		_eusart_putch
  7186 ;; This function is called by:
  7187 ;;		_main
  7188 ;; This function uses a non-reentrant model
  7189 ;;
  7190                           
  7191                           	psect	text29
  7192  0146E0                     __ptext29:
  7193                           	opt stack 0
  7194  0146E0                     _irobot_init_song_0:
  7195                           	opt stack 22
  7196                           
  7197                           ;iRobotSerial.c: 253: eusart_putch(iR_SONG_INIT);
  7198                           
  7199                           ; BSR set to: 0
  7200                           ;incstack = 0
  7201  0146E0  0E8C               	movlw	140
  7202  0146E2  ECB4  F0A4         	call	_eusart_putch
  7203                           
  7204                           ;iRobotSerial.c: 254: eusart_putch(0);
  7205  0146E6  0E00               	movlw	0
  7206  0146E8  ECB4  F0A4         	call	_eusart_putch
  7207                           
  7208                           ;iRobotSerial.c: 255: eusart_putch(1);
  7209  0146EC  0E01               	movlw	1
  7210  0146EE  ECB4  F0A4         	call	_eusart_putch
  7211                           
  7212                           ;iRobotSerial.c: 256: eusart_putch(60);
  7213  0146F2  0E3C               	movlw	60
  7214  0146F4  ECB4  F0A4         	call	_eusart_putch
  7215                           
  7216                           ;iRobotSerial.c: 257: eusart_putch(4);
  7217  0146F8  0E04               	movlw	4
  7218  0146FA  ECB4  F0A4         	call	_eusart_putch
  7219  0146FE  0012               	return		;funcret
  7220  014700                     __end_of_irobot_init_song_0:
  7221                           	opt stack 0
  7222                           tosu	equ	0xFFF
  7223                           tosh	equ	0xFFE
  7224                           tosl	equ	0xFFD
  7225                           pclath	equ	0xFFA
  7226                           tblptru	equ	0xFF8
  7227                           tblptrh	equ	0xFF7
  7228                           tblptrl	equ	0xFF6
  7229                           tablat	equ	0xFF5
  7230                           prodh	equ	0xFF4
  7231                           prodl	equ	0xFF3
  7232                           postinc0	equ	0xFEE
  7233                           wreg	equ	0xFE8
  7234                           indf1	equ	0xFE7
  7235                           postdec1	equ	0xFE5
  7236                           fsr1h	equ	0xFE2
  7237                           fsr1l	equ	0xFE1
  7238                           indf2	equ	0xFDF
  7239                           postinc2	equ	0xFDE
  7240                           postdec2	equ	0xFDD
  7241                           fsr2h	equ	0xFDA
  7242                           fsr2l	equ	0xFD9
  7243                           status	equ	0xFD8
  7244                           
  7245 ;; *************** function _irobot_init *****************
  7246 ;; Defined at:
  7247 ;;		line 198 in file "Library/iRobotSerial.c"
  7248 ;; Parameters:    Size  Location     Type
  7249 ;;		None
  7250 ;; Auto vars:     Size  Location     Type
  7251 ;;		None
  7252 ;; Return value:  Size  Location     Type
  7253 ;;                  1    wreg      void 
  7254 ;; Registers used:
  7255 ;;		wreg, cstack
  7256 ;; Tracked objects:
  7257 ;;		On entry : 0/0
  7258 ;;		On exit  : 0/0
  7259 ;;		Unchanged: 0/0
  7260 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7261 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7262 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7263 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7264 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7265 ;;Total ram usage:        0 bytes
  7266 ;; Hardware stack levels used:    1
  7267 ;; Hardware stack levels required when called:    8
  7268 ;; This function calls:
  7269 ;;		_eusart_putch
  7270 ;; This function is called by:
  7271 ;;		_main
  7272 ;; This function uses a non-reentrant model
  7273 ;;
  7274                           
  7275                           	psect	text30
  7276  01495A                     __ptext30:
  7277                           	opt stack 0
  7278  01495A                     _irobot_init:
  7279                           	opt stack 22
  7280                           
  7281                           ;iRobotSerial.c: 199: eusart_putch(iR_START);
  7282                           
  7283                           ;incstack = 0
  7284  01495A  0E80               	movlw	128
  7285  01495C  ECB4  F0A4         	call	_eusart_putch
  7286                           
  7287                           ;iRobotSerial.c: 200: eusart_putch(iR_FULL_MODE);
  7288  014960  0E84               	movlw	132
  7289  014962  ECB4  F0A4         	call	_eusart_putch
  7290  014966  0012               	return		;funcret
  7291  014968                     __end_of_irobot_init:
  7292                           	opt stack 0
  7293                           tosu	equ	0xFFF
  7294                           tosh	equ	0xFFE
  7295                           tosl	equ	0xFFD
  7296                           pclath	equ	0xFFA
  7297                           tblptru	equ	0xFF8
  7298                           tblptrh	equ	0xFF7
  7299                           tblptrl	equ	0xFF6
  7300                           tablat	equ	0xFF5
  7301                           prodh	equ	0xFF4
  7302                           prodl	equ	0xFF3
  7303                           postinc0	equ	0xFEE
  7304                           wreg	equ	0xFE8
  7305                           indf1	equ	0xFE7
  7306                           postdec1	equ	0xFE5
  7307                           fsr1h	equ	0xFE2
  7308                           fsr1l	equ	0xFE1
  7309                           indf2	equ	0xFDF
  7310                           postinc2	equ	0xFDE
  7311                           postdec2	equ	0xFDD
  7312                           fsr2h	equ	0xFDA
  7313                           fsr2l	equ	0xFD9
  7314                           status	equ	0xFD8
  7315                           
  7316 ;; *************** function _eusart_putch *****************
  7317 ;; Defined at:
  7318 ;;		line 120 in file "Library/iRobotSerial.c"
  7319 ;; Parameters:    Size  Location     Type
  7320 ;;  eusartSendCh    1    wreg     unsigned char 
  7321 ;; Auto vars:     Size  Location     Type
  7322 ;;  eusartSendCh    1    0[BANK0 ] unsigned char 
  7323 ;; Return value:  Size  Location     Type
  7324 ;;                  1    wreg      void 
  7325 ;; Registers used:
  7326 ;;		wreg
  7327 ;; Tracked objects:
  7328 ;;		On entry : 0/0
  7329 ;;		On exit  : 0/0
  7330 ;;		Unchanged: 0/0
  7331 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7332 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7333 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7334 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7335 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7336 ;;Total ram usage:        1 bytes
  7337 ;; Hardware stack levels used:    1
  7338 ;; Hardware stack levels required when called:    7
  7339 ;; This function calls:
  7340 ;;		Nothing
  7341 ;; This function is called by:
  7342 ;;		_irobot_query_and_update
  7343 ;;		_irobot_init
  7344 ;;		_irobot_move
  7345 ;;		_irobot_leds
  7346 ;;		_irobot_init_song_0
  7347 ;;		_irobot_song_play
  7348 ;;		_irobot_script_play
  7349 ;; This function uses a non-reentrant model
  7350 ;;
  7351                           
  7352                           	psect	text31
  7353  014968                     __ptext31:
  7354                           	opt stack 0
  7355  014968                     _eusart_putch:
  7356                           	opt stack 21
  7357                           
  7358                           ;incstack = 0
  7359                           ;eusart_putch@eusartSendChar stored from wreg
  7360  014968  0100               	movlb	0	; () banked
  7361  01496A  6FB5               	movwf	eusart_putch@eusartSendChar& (0+255),b
  7362  01496C                     
  7363                           ;iRobotSerial.c: 121: while (!TXSTA1bits.TRMT) {};
  7364  01496C  A2AD               	btfss	4013,1,c	;volatile
  7365  01496E  D7FE               	goto	l11671
  7366                           
  7367                           ;iRobotSerial.c: 122: TXREG1 = eusartSendChar;
  7368  014970  C0B5  FFAE         	movff	eusart_putch@eusartSendChar,4014	;volatile
  7369  014974  0012               	return		;funcret
  7370  014976                     __end_of_eusart_putch:
  7371                           	opt stack 0
  7372                           tosu	equ	0xFFF
  7373                           tosh	equ	0xFFE
  7374                           tosl	equ	0xFFD
  7375                           pclath	equ	0xFFA
  7376                           tblptru	equ	0xFF8
  7377                           tblptrh	equ	0xFF7
  7378                           tblptrl	equ	0xFF6
  7379                           tablat	equ	0xFF5
  7380                           prodh	equ	0xFF4
  7381                           prodl	equ	0xFF3
  7382                           postinc0	equ	0xFEE
  7383                           wreg	equ	0xFE8
  7384                           indf1	equ	0xFE7
  7385                           postdec1	equ	0xFE5
  7386                           fsr1h	equ	0xFE2
  7387                           fsr1l	equ	0xFE1
  7388                           indf2	equ	0xFDF
  7389                           postinc2	equ	0xFDE
  7390                           postdec2	equ	0xFDD
  7391                           fsr2h	equ	0xFDA
  7392                           fsr2l	equ	0xFD9
  7393                           status	equ	0xFD8
  7394                           
  7395 ;; *************** function _eusart_init *****************
  7396 ;; Defined at:
  7397 ;;		line 103 in file "Library/iRobotSerial.c"
  7398 ;; Parameters:    Size  Location     Type
  7399 ;;		None
  7400 ;; Auto vars:     Size  Location     Type
  7401 ;;		None
  7402 ;; Return value:  Size  Location     Type
  7403 ;;                  1    wreg      void 
  7404 ;; Registers used:
  7405 ;;		wreg, status,2
  7406 ;; Tracked objects:
  7407 ;;		On entry : 0/0
  7408 ;;		On exit  : 0/0
  7409 ;;		Unchanged: 0/0
  7410 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7411 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7412 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7413 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7414 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7415 ;;Total ram usage:        0 bytes
  7416 ;; Hardware stack levels used:    1
  7417 ;; Hardware stack levels required when called:    7
  7418 ;; This function calls:
  7419 ;;		Nothing
  7420 ;; This function is called by:
  7421 ;;		_main
  7422 ;; This function uses a non-reentrant model
  7423 ;;
  7424                           
  7425                           	psect	text32
  7426  01471E                     __ptext32:
  7427                           	opt stack 0
  7428  01471E                     _eusart_init:
  7429                           	opt stack 23
  7430                           
  7431                           ;iRobotSerial.c: 104: TRISCbits.TRISC6 = 0;
  7432                           
  7433                           ;incstack = 0
  7434  01471E  9C94               	bcf	3988,6,c	;volatile
  7435                           
  7436                           ;iRobotSerial.c: 105: TRISCbits.TRISC7 = 1;
  7437  014720  8E94               	bsf	3988,7,c	;volatile
  7438                           
  7439                           ;iRobotSerial.c: 107: TXSTA1 = 0b00100100;
  7440  014722  0E24               	movlw	36
  7441  014724  6EAD               	movwf	4013,c	;volatile
  7442                           
  7443                           ;iRobotSerial.c: 108: RCSTA1 = 0b10011000;
  7444  014726  0E98               	movlw	152
  7445  014728  6EAC               	movwf	4012,c	;volatile
  7446                           
  7447                           ;iRobotSerial.c: 110: BAUDCON1bits.DTRXP = 0;
  7448  01472A  9A7E               	bcf	3966,5,c	;volatile
  7449                           
  7450                           ;iRobotSerial.c: 111: BAUDCON1bits.SCKP = 0;
  7451  01472C  987E               	bcf	3966,4,c	;volatile
  7452                           
  7453                           ;iRobotSerial.c: 112: BAUDCON1bits.WUE = 0;
  7454  01472E  927E               	bcf	3966,1,c	;volatile
  7455                           
  7456                           ;iRobotSerial.c: 113: BAUDCON1bits.ABDEN = 0;
  7457  014730  907E               	bcf	3966,0,c	;volatile
  7458                           
  7459                           ;iRobotSerial.c: 115: TXSTA1bits.BRGH = 1;
  7460  014732  84AD               	bsf	4013,2,c	;volatile
  7461                           
  7462                           ;iRobotSerial.c: 116: BAUDCON1bits.BRG16 = 0;
  7463  014734  967E               	bcf	3966,3,c	;volatile
  7464                           
  7465                           ;iRobotSerial.c: 117: SPBRG1 = 51;
  7466  014736  0E33               	movlw	51
  7467  014738  6EB0               	movwf	4016,c	;volatile
  7468  01473A  0012               	return		;funcret
  7469  01473C                     __end_of_eusart_init:
  7470                           	opt stack 0
  7471                           tosu	equ	0xFFF
  7472                           tosh	equ	0xFFE
  7473                           tosl	equ	0xFFD
  7474                           pclath	equ	0xFFA
  7475                           tblptru	equ	0xFF8
  7476                           tblptrh	equ	0xFF7
  7477                           tblptrl	equ	0xFF6
  7478                           tablat	equ	0xFF5
  7479                           prodh	equ	0xFF4
  7480                           prodl	equ	0xFF3
  7481                           postinc0	equ	0xFEE
  7482                           wreg	equ	0xFE8
  7483                           indf1	equ	0xFE7
  7484                           postdec1	equ	0xFE5
  7485                           fsr1h	equ	0xFE2
  7486                           fsr1l	equ	0xFE1
  7487                           indf2	equ	0xFDF
  7488                           postinc2	equ	0xFDE
  7489                           postdec2	equ	0xFDD
  7490                           fsr2h	equ	0xFDA
  7491                           fsr2l	equ	0xFD9
  7492                           status	equ	0xFD8
  7493                           
  7494 ;; *************** function _MXK_Init *****************
  7495 ;; Defined at:
  7496 ;;		line 33 in file "Library/MXK.c"
  7497 ;; Parameters:    Size  Location     Type
  7498 ;;		None
  7499 ;; Auto vars:     Size  Location     Type
  7500 ;;		None
  7501 ;; Return value:  Size  Location     Type
  7502 ;;                  1    wreg      void 
  7503 ;; Registers used:
  7504 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7505 ;; Tracked objects:
  7506 ;;		On entry : 0/0
  7507 ;;		On exit  : 0/0
  7508 ;;		Unchanged: 0/0
  7509 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7510 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7511 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7512 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7513 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7514 ;;Total ram usage:        0 bytes
  7515 ;; Hardware stack levels used:    1
  7516 ;; Hardware stack levels required when called:   16
  7517 ;; This function calls:
  7518 ;;		_LED_Init
  7519 ;;		_Port_Init
  7520 ;;		_Port_SetPin
  7521 ;;		_Port_SetPinType
  7522 ;;		_Port_SetQuadType
  7523 ;;		_Port_SetType
  7524 ;;		_delay_ms
  7525 ;; This function is called by:
  7526 ;;		_main
  7527 ;; This function uses a non-reentrant model
  7528 ;;
  7529                           
  7530                           	psect	text33
  7531  011CF0                     __ptext33:
  7532                           	opt stack 0
  7533  011CF0                     _MXK_Init:
  7534                           	opt stack 14
  7535                           
  7536                           ;MXK.c: 35: Bus_State = eMXK_Idle;
  7537                           
  7538                           ;incstack = 0
  7539  011CF0  0E01               	movlw	1
  7540  011CF2  6E4B               	movwf	_Bus_State,c
  7541                           
  7542                           ;MXK.c: 36: lQueue = (Function)0;
  7543  011CF4  0E00               	movlw	0
  7544  011CF6  0100               	movlb	0	; () banked
  7545  011CF8  6F6F               	movwf	_lQueue& (0+255),b	;volatile
  7546  011CFA  0E00               	movlw	0
  7547  011CFC  0100               	movlb	0	; () banked
  7548  011CFE  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
  7549  011D00  0E00               	movlw	0
  7550  011D02  0100               	movlb	0	; () banked
  7551  011D04  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
  7552                           
  7553                           ; BSR set to: 0
  7554                           ;MXK.c: 38: Port_Init(&PortA, ePortA);
  7555  011D06  0EA6               	movlw	low _PortA
  7556  011D08  0100               	movlb	0	; () banked
  7557  011D0A  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7558  011D0C  0E03               	movlw	high _PortA
  7559  011D0E  0100               	movlb	0	; () banked
  7560  011D10  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7561  011D12  0E00               	movlw	0
  7562  011D14  0100               	movlb	0	; () banked
  7563  011D16  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7564  011D18  ECEC  F08C         	call	_Port_Init	;wreg free
  7565                           
  7566                           ;MXK.c: 39: Port_Init(&PortB, ePortB);
  7567  011D1C  0E9C               	movlw	low _PortB
  7568  011D1E  0100               	movlb	0	; () banked
  7569  011D20  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7570  011D22  0E03               	movlw	high _PortB
  7571  011D24  0100               	movlb	0	; () banked
  7572  011D26  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7573  011D28  0E01               	movlw	1
  7574  011D2A  0100               	movlb	0	; () banked
  7575  011D2C  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7576  011D2E  ECEC  F08C         	call	_Port_Init	;wreg free
  7577                           
  7578                           ;MXK.c: 40: Port_Init(&PortC, ePortC);
  7579  011D32  0EA3               	movlw	low _PortC
  7580  011D34  0100               	movlb	0	; () banked
  7581  011D36  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7582  011D38  0E00               	movlw	high _PortC
  7583  011D3A  0100               	movlb	0	; () banked
  7584  011D3C  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7585  011D3E  0E02               	movlw	2
  7586  011D40  0100               	movlb	0	; () banked
  7587  011D42  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7588  011D44  ECEC  F08C         	call	_Port_Init	;wreg free
  7589                           
  7590                           ;MXK.c: 41: Port_Init(&PortD, ePortD);
  7591  011D48  0E99               	movlw	low _PortD
  7592  011D4A  0100               	movlb	0	; () banked
  7593  011D4C  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7594  011D4E  0E00               	movlw	high _PortD
  7595  011D50  0100               	movlb	0	; () banked
  7596  011D52  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7597  011D54  0E03               	movlw	3
  7598  011D56  0100               	movlb	0	; () banked
  7599  011D58  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7600  011D5A  ECEC  F08C         	call	_Port_Init	;wreg free
  7601                           
  7602                           ;MXK.c: 42: Port_Init(&PortE, ePortE);
  7603  011D5E  0E8F               	movlw	low _PortE
  7604  011D60  0100               	movlb	0	; () banked
  7605  011D62  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7606  011D64  0E00               	movlw	high _PortE
  7607  011D66  0100               	movlb	0	; () banked
  7608  011D68  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7609  011D6A  0E04               	movlw	4
  7610  011D6C  0100               	movlb	0	; () banked
  7611  011D6E  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7612  011D70  ECEC  F08C         	call	_Port_Init	;wreg free
  7613                           
  7614                           ;MXK.c: 43: Port_Init(&PortF, ePortF);
  7615  011D74  0EB0               	movlw	low _PortF
  7616  011D76  0100               	movlb	0	; () banked
  7617  011D78  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7618  011D7A  0E03               	movlw	high _PortF
  7619  011D7C  0100               	movlb	0	; () banked
  7620  011D7E  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7621  011D80  0E05               	movlw	5
  7622  011D82  0100               	movlb	0	; () banked
  7623  011D84  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7624  011D86  ECEC  F08C         	call	_Port_Init	;wreg free
  7625                           
  7626                           ;MXK.c: 44: Port_Init(&PortG, ePortG);
  7627  011D8A  0E92               	movlw	low _PortG
  7628  011D8C  0100               	movlb	0	; () banked
  7629  011D8E  6FF5               	movwf	Port_Init@pInput& (0+255),b
  7630  011D90  0E03               	movlw	high _PortG
  7631  011D92  0100               	movlb	0	; () banked
  7632  011D94  6FF6               	movwf	(Port_Init@pInput+1)& (0+255),b
  7633  011D96  0E06               	movlw	6
  7634  011D98  0100               	movlb	0	; () banked
  7635  011D9A  6FF7               	movwf	Port_Init@pPort& (0+255),b
  7636  011D9C  ECEC  F08C         	call	_Port_Init	;wreg free
  7637                           
  7638                           ;MXK.c: 46: Port_SetPinType (&PortF, eP5, eTypeInput);
  7639  011DA0  0EB0               	movlw	low _PortF
  7640  011DA2  0100               	movlb	0	; () banked
  7641  011DA4  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7642  011DA6  0E03               	movlw	high _PortF
  7643  011DA8  0100               	movlb	0	; () banked
  7644  011DAA  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7645  011DAC  0E05               	movlw	5
  7646  011DAE  0100               	movlb	0	; () banked
  7647  011DB0  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7648  011DB2  0E00               	movlw	0
  7649  011DB4  0100               	movlb	0	; () banked
  7650  011DB6  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7651  011DB8  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7652                           
  7653                           ;MXK.c: 47: Port_SetQuadType (&PortB, eP0_3, eTypeInput);
  7654  011DBC  0E9C               	movlw	low _PortB
  7655  011DBE  0100               	movlb	0	; () banked
  7656  011DC0  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
  7657  011DC2  0E03               	movlw	high _PortB
  7658  011DC4  0100               	movlb	0	; () banked
  7659  011DC6  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
  7660  011DC8  0E00               	movlw	0
  7661  011DCA  0100               	movlb	0	; () banked
  7662  011DCC  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
  7663  011DCE  0E00               	movlw	0
  7664  011DD0  0100               	movlb	0	; () banked
  7665  011DD2  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
  7666  011DD4  EC2E  F085         	call	_Port_SetQuadType	;wreg free
  7667                           
  7668                           ;MXK.c: 48: Port_SetPinType (&PortF, eP6, eTypeOutputPushPull);
  7669  011DD8  0EB0               	movlw	low _PortF
  7670  011DDA  0100               	movlb	0	; () banked
  7671  011DDC  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  7672  011DDE  0E03               	movlw	high _PortF
  7673  011DE0  0100               	movlb	0	; () banked
  7674  011DE2  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  7675  011DE4  0E06               	movlw	6
  7676  011DE6  0100               	movlb	0	; () banked
  7677  011DE8  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  7678  011DEA  0E03               	movlw	3
  7679  011DEC  0100               	movlb	0	; () banked
  7680  011DEE  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7681  011DF0  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7682                           
  7683                           ;MXK.c: 49: Port_SetType (&PortG, eTypeOutputPushPull);
  7684  011DF4  0E92               	movlw	low _PortG
  7685  011DF6  0100               	movlb	0	; () banked
  7686  011DF8  6FEF               	movwf	Port_SetType@pInput& (0+255),b
  7687  011DFA  0E03               	movlw	high _PortG
  7688  011DFC  0100               	movlb	0	; () banked
  7689  011DFE  6FF0               	movwf	(Port_SetType@pInput+1)& (0+255),b
  7690  011E00  0E03               	movlw	3
  7691  011E02  0100               	movlb	0	; () banked
  7692  011E04  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7693  011E06  EC59  F086         	call	_Port_SetType	;wreg free
  7694                           
  7695                           ;MXK.c: 51: Port_SetPin(&PortG, eP4, 0);
  7696  011E0A  0E92               	movlw	low _PortG
  7697  011E0C  0100               	movlb	0	; () banked
  7698  011E0E  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7699  011E10  0E03               	movlw	high _PortG
  7700  011E12  0100               	movlb	0	; () banked
  7701  011E14  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7702  011E16  0E04               	movlw	4
  7703  011E18  0100               	movlb	0	; () banked
  7704  011E1A  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7705  011E1C  0E00               	movlw	0
  7706  011E1E  0100               	movlb	0	; () banked
  7707  011E20  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7708  011E22  EC1D  F094         	call	_Port_SetPin	;wreg free
  7709                           
  7710                           ;MXK.c: 52: Port_SetPin(&PortF, eP6,1);
  7711  011E26  0EB0               	movlw	low _PortF
  7712  011E28  0100               	movlb	0	; () banked
  7713  011E2A  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
  7714  011E2C  0E03               	movlw	high _PortF
  7715  011E2E  0100               	movlb	0	; () banked
  7716  011E30  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
  7717  011E32  0E06               	movlw	6
  7718  011E34  0100               	movlb	0	; () banked
  7719  011E36  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
  7720  011E38  0E01               	movlw	1
  7721  011E3A  0100               	movlb	0	; () banked
  7722  011E3C  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
  7723  011E3E  EC1D  F094         	call	_Port_SetPin	;wreg free
  7724                           
  7725                           ;MXK.c: 55: LED_Init(eLED1);
  7726  011E42  0E00               	movlw	0
  7727  011E44  ECA9  F09E         	call	_LED_Init
  7728                           
  7729                           ;MXK.c: 56: LED_Init(eLED2);
  7730  011E48  0E01               	movlw	1
  7731  011E4A  ECA9  F09E         	call	_LED_Init
  7732                           
  7733                           ;MXK.c: 58: PIR1 = 0;
  7734  011E4E  0E00               	movlw	0
  7735  011E50  6E9E               	movwf	3998,c	;volatile
  7736                           
  7737                           ;MXK.c: 59: PIR2 = 0;
  7738  011E52  0E00               	movlw	0
  7739  011E54  6EA1               	movwf	4001,c	;volatile
  7740                           
  7741                           ;MXK.c: 60: PIR3 = 0;
  7742  011E56  0E00               	movlw	0
  7743  011E58  6EA4               	movwf	4004,c	;volatile
  7744                           
  7745                           ;MXK.c: 62: OSCTUNEbits.INTSRC = 1;
  7746  011E5A  8E9B               	bsf	3995,7,c	;volatile
  7747                           
  7748                           ;MXK.c: 63: OSCTUNEbits.PLLEN = 1;
  7749  011E5C  8C9B               	bsf	3995,6,c	;volatile
  7750                           
  7751                           ;MXK.c: 66: delay_ms(100);
  7752  011E5E  0E00               	movlw	0
  7753  011E60  0100               	movlb	0	; () banked
  7754  011E62  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
  7755  011E64  0E64               	movlw	100
  7756  011E66  6FB5               	movwf	delay_ms@ms& (0+255),b
  7757  011E68  EC75  F09D         	call	_delay_ms	;wreg free
  7758                           
  7759                           ;MXK.c: 68: RCONbits.IPEN = 1;
  7760  011E6C  8ED0               	bsf	4048,7,c	;volatile
  7761  011E6E  0012               	return		;funcret
  7762  011E70                     __end_of_MXK_Init:
  7763                           	opt stack 0
  7764                           tosu	equ	0xFFF
  7765                           tosh	equ	0xFFE
  7766                           tosl	equ	0xFFD
  7767                           pclath	equ	0xFFA
  7768                           tblptru	equ	0xFF8
  7769                           tblptrh	equ	0xFF7
  7770                           tblptrl	equ	0xFF6
  7771                           tablat	equ	0xFF5
  7772                           prodh	equ	0xFF4
  7773                           prodl	equ	0xFF3
  7774                           postinc0	equ	0xFEE
  7775                           wreg	equ	0xFE8
  7776                           indf1	equ	0xFE7
  7777                           postdec1	equ	0xFE5
  7778                           fsr1h	equ	0xFE2
  7779                           fsr1l	equ	0xFE1
  7780                           indf2	equ	0xFDF
  7781                           postinc2	equ	0xFDE
  7782                           postdec2	equ	0xFDD
  7783                           fsr2h	equ	0xFDA
  7784                           fsr2l	equ	0xFD9
  7785                           status	equ	0xFD8
  7786                           
  7787 ;; *************** function _Port_Init *****************
  7788 ;; Defined at:
  7789 ;;		line 150 in file "Library/Port.c"
  7790 ;; Parameters:    Size  Location     Type
  7791 ;;  pInput          2   64[BANK0 ] const PTR struct Port
  7792 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  7793 ;;		 -> PortD(10), PortC(10), PortF(10), 
  7794 ;;  pPort           1   66[BANK0 ] enum E6786
  7795 ;; Auto vars:     Size  Location     Type
  7796 ;;  i               1   67[BANK0 ] unsigned char 
  7797 ;; Return value:  Size  Location     Type
  7798 ;;                  1    wreg      void 
  7799 ;; Registers used:
  7800 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7801 ;; Tracked objects:
  7802 ;;		On entry : 0/0
  7803 ;;		On exit  : 0/0
  7804 ;;		Unchanged: 0/0
  7805 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7806 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7807 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7808 ;;      Temps:          0       0       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7809 ;;      Totals:         0       4       2       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7810 ;;Total ram usage:        6 bytes
  7811 ;; Hardware stack levels used:    1
  7812 ;; Hardware stack levels required when called:   15
  7813 ;; This function calls:
  7814 ;;		_GetPortPORT
  7815 ;;		_GetPortProperties
  7816 ;;		_GetPortTRIS
  7817 ;;		_Port_Set
  7818 ;;		_Port_SetPinType
  7819 ;;		_Port_SetType
  7820 ;;		_Word_GetPair
  7821 ;; This function is called by:
  7822 ;;		_MXK_Init
  7823 ;; This function uses a non-reentrant model
  7824 ;;
  7825                           
  7826                           	psect	text34
  7827  0119D8                     __ptext34:
  7828                           	opt stack 0
  7829  0119D8                     _Port_Init:
  7830                           	opt stack 14
  7831                           
  7832                           ;Port.c: 153: pInput->mProperties = GetPortProperties(pPort);
  7833                           
  7834                           ;incstack = 0
  7835  0119D8  0100               	movlb	0	; () banked
  7836  0119DA  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7837  0119DC  EC01  F098         	call	_GetPortProperties
  7838  0119E0  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7839  0119E4  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7840  0119E8  0100               	movlb	0	; () banked
  7841  0119EA  C0B5  FFDE         	movff	?_GetPortProperties,postinc2
  7842  0119EE  0100               	movlb	0	; () banked
  7843  0119F0  C0B6  FFDD         	movff	?_GetPortProperties+1,postdec2
  7844                           
  7845                           ;Port.c: 154: pInput->mInput = GetPortPORT(pPort);
  7846  0119F4  0100               	movlb	0	; () banked
  7847  0119F6  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7848  0119F8  EC54  F098         	call	_GetPortPORT
  7849  0119FC  0100               	movlb	0	; () banked
  7850  0119FE  EE20 F006          	lfsr	2,6
  7851  011A02  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7852  011A04  26D9               	addwf	fsr2l,f,c
  7853  011A06  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7854  011A08  22DA               	addwfc	fsr2h,f,c
  7855  011A0A  0100               	movlb	0	; () banked
  7856  011A0C  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7857  011A10  0100               	movlb	0	; () banked
  7858  011A12  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7859                           
  7860                           ;Port.c: 155: pInput->mOutput = GetPortPORT(pPort);
  7861  011A16  0100               	movlb	0	; () banked
  7862  011A18  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7863  011A1A  EC54  F098         	call	_GetPortPORT
  7864  011A1E  0100               	movlb	0	; () banked
  7865  011A20  EE20 F004          	lfsr	2,4
  7866  011A24  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7867  011A26  26D9               	addwf	fsr2l,f,c
  7868  011A28  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7869  011A2A  22DA               	addwfc	fsr2h,f,c
  7870  011A2C  0100               	movlb	0	; () banked
  7871  011A2E  C0B5  FFDE         	movff	?_GetPortPORT,postinc2
  7872  011A32  0100               	movlb	0	; () banked
  7873  011A34  C0B6  FFDD         	movff	?_GetPortPORT+1,postdec2
  7874                           
  7875                           ;Port.c: 156: pInput->mDirection = GetPortTRIS(pPort);
  7876  011A38  0100               	movlb	0	; () banked
  7877  011A3A  51F7               	movf	Port_Init@pPort& (0+255),w,b
  7878  011A3C  ECAE  F097         	call	_GetPortTRIS
  7879  011A40  0100               	movlb	0	; () banked
  7880  011A42  EE20 F002          	lfsr	2,2
  7881  011A46  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7882  011A48  26D9               	addwf	fsr2l,f,c
  7883  011A4A  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7884  011A4C  22DA               	addwfc	fsr2h,f,c
  7885  011A4E  0100               	movlb	0	; () banked
  7886  011A50  C0B5  FFDE         	movff	?_GetPortTRIS,postinc2
  7887  011A54  0100               	movlb	0	; () banked
  7888  011A56  C0B6  FFDD         	movff	?_GetPortTRIS+1,postdec2
  7889                           
  7890                           ; BSR set to: 0
  7891                           ;Port.c: 159: pInput->mOutput->mBits = 0x00;
  7892  011A5A  0100               	movlb	0	; () banked
  7893  011A5C  EE20 F004          	lfsr	2,4
  7894  011A60  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7895  011A62  26D9               	addwf	fsr2l,f,c
  7896  011A64  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7897  011A66  22DA               	addwfc	fsr2h,f,c
  7898  011A68  CFDE F100          	movff	postinc2,??_Port_Init
  7899  011A6C  CFDD F101          	movff	postdec2,??_Port_Init+1
  7900  011A70  C100  FFD9         	movff	??_Port_Init,fsr2l
  7901  011A74  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7902  011A78  0E00               	movlw	0
  7903  011A7A  6EDF               	movwf	indf2,c
  7904                           
  7905                           ; BSR set to: 0
  7906                           ;Port.c: 160: pInput->mDirection->mBits = 0xFF;
  7907  011A7C  0100               	movlb	0	; () banked
  7908  011A7E  EE20 F002          	lfsr	2,2
  7909  011A82  51F5               	movf	Port_Init@pInput& (0+255),w,b
  7910  011A84  26D9               	addwf	fsr2l,f,c
  7911  011A86  51F6               	movf	(Port_Init@pInput+1)& (0+255),w,b
  7912  011A88  22DA               	addwfc	fsr2h,f,c
  7913  011A8A  CFDE F100          	movff	postinc2,??_Port_Init
  7914  011A8E  CFDD F101          	movff	postdec2,??_Port_Init+1
  7915  011A92  C100  FFD9         	movff	??_Port_Init,fsr2l
  7916  011A96  C101  FFDA         	movff	??_Port_Init+1,fsr2h
  7917  011A9A  0EFF               	movlw	255
  7918  011A9C  6EDF               	movwf	indf2,c
  7919                           
  7920                           ; BSR set to: 0
  7921                           ;Port.c: 163: Port_SetType(pInput, eTypeInput);
  7922  011A9E  C0F5  F0EF         	movff	Port_Init@pInput,Port_SetType@pInput
  7923  011AA2  C0F6  F0F0         	movff	Port_Init@pInput+1,Port_SetType@pInput+1
  7924  011AA6  0E00               	movlw	0
  7925  011AA8  0100               	movlb	0	; () banked
  7926  011AAA  6FF1               	movwf	Port_SetType@pType& (0+255),b
  7927  011AAC  EC59  F086         	call	_Port_SetType	;wreg free
  7928                           
  7929                           ;Port.c: 166: UINT8 i;
  7930                           ;Port.c: 167: for (i=0; i<8; i++)
  7931  011AB0  0E00               	movlw	0
  7932  011AB2  0100               	movlb	0	; () banked
  7933  011AB4  6FF8               	movwf	Port_Init@i& (0+255),b
  7934  011AB6                     l11895:
  7935                           
  7936                           ; BSR set to: 0
  7937  011AB6  0E07               	movlw	7
  7938  011AB8  0100               	movlb	0	; () banked
  7939  011ABA  65F8               	cpfsgt	Port_Init@i& (0+255),b
  7940  011ABC  D031               	goto	l403
  7941  011ABE  D04B               	goto	u7740
  7942  011AC0                     
  7943                           ;Port.c: 172: Port_SetPinType(pInput, i, eTypeOutputPushPull);
  7944                           
  7945                           ; BSR set to: 0
  7946  011AC0  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7947  011AC4  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7948  011AC8  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7949  011ACC  0E03               	movlw	3
  7950  011ACE  0100               	movlb	0	; () banked
  7951  011AD0  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7952  011AD2  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7953                           
  7954                           ;Port.c: 173: break;
  7955  011AD6  D03C               	goto	l405
  7956  011AD8                     
  7957                           ;Port.c: 175: Port_SetPinType(pInput, i, eTypeOutputOpenSource);
  7958  011AD8  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7959  011ADC  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7960  011AE0  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7961  011AE4  0E02               	movlw	2
  7962  011AE6  0100               	movlb	0	; () banked
  7963  011AE8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7964  011AEA  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7965                           
  7966                           ;Port.c: 176: break;
  7967  011AEE  D030               	goto	l405
  7968  011AF0                     
  7969                           ;Port.c: 178: Port_SetPinType(pInput, i, eTypeOutputOpenDrain);
  7970  011AF0  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7971  011AF4  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7972  011AF8  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7973  011AFC  0E01               	movlw	1
  7974  011AFE  0100               	movlb	0	; () banked
  7975  011B00  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7976  011B02  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7977                           
  7978                           ;Port.c: 179: break;
  7979  011B06  D024               	goto	l405
  7980  011B08                     
  7981                           ;Port.c: 181: Port_SetPinType(pInput, i, eTypeInput);
  7982  011B08  C0F5  F0DB         	movff	Port_Init@pInput,Port_SetPinType@pInput
  7983  011B0C  C0F6  F0DC         	movff	Port_Init@pInput+1,Port_SetPinType@pInput+1
  7984  011B10  C0F8  F0DD         	movff	Port_Init@i,Port_SetPinType@pPin
  7985  011B14  0E00               	movlw	0
  7986  011B16  0100               	movlb	0	; () banked
  7987  011B18  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  7988  011B1A  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  7989                           
  7990                           ;Port.c: 183: }
  7991                           
  7992                           ;Port.c: 182: break;
  7993  011B1E  D018               	goto	l405
  7994  011B20                     l403:
  7995  011B20  C0F5  FFD9         	movff	Port_Init@pInput,fsr2l
  7996  011B24  C0F6  FFDA         	movff	Port_Init@pInput+1,fsr2h
  7997  011B28  CFDE F0C1          	movff	postinc2,Word_GetPair@pInput
  7998  011B2C  CFDD F0C2          	movff	postdec2,Word_GetPair@pInput+1
  7999  011B30  C0F8  F0C3         	movff	Port_Init@i,Word_GetPair@pPair
  8000  011B34  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8001                           
  8002                           ; Switch size 1, requested type "space"
  8003                           ; Number of cases is 4, Range of values is 0 to 3
  8004                           ; switch strategies available:
  8005                           ; Name         Instructions Cycles
  8006                           ; simple_byte           13     7 (average)
  8007                           ;	Chosen strategy is simple_byte
  8008  011B38  0A00               	xorlw	0	; case 0
  8009  011B3A  B4D8               	btfsc	status,2,c
  8010  011B3C  D7C1               	goto	l404
  8011  011B3E  0A01               	xorlw	1	; case 1
  8012  011B40  B4D8               	btfsc	status,2,c
  8013  011B42  D7D6               	goto	l407
  8014  011B44  0A03               	xorlw	3	; case 2
  8015  011B46  B4D8               	btfsc	status,2,c
  8016  011B48  D7C7               	goto	l406
  8017  011B4A  0A01               	xorlw	1	; case 3
  8018  011B4C  B4D8               	btfsc	status,2,c
  8019  011B4E  D7DC               	goto	l408
  8020  011B50                     l405:
  8021  011B50  0100               	movlb	0	; () banked
  8022  011B52  2BF8               	incf	Port_Init@i& (0+255),f,b
  8023  011B54  D7B0               	goto	l11895
  8024  011B56                     u7740:
  8025                           
  8026                           ; BSR set to: 0
  8027                           ;Port.c: 184: }
  8028                           ;Port.c: 185: Port_Set(pInput, 0x00);
  8029                           
  8030                           ; BSR set to: 0
  8031  011B56  C0F5  F0C4         	movff	Port_Init@pInput,Port_Set@pInput
  8032  011B5A  C0F6  F0C5         	movff	Port_Init@pInput+1,Port_Set@pInput+1
  8033  011B5E  0E00               	movlw	0
  8034  011B60  0100               	movlb	0	; () banked
  8035  011B62  6FC6               	movwf	Port_Set@pValue& (0+255),b
  8036  011B64  EC0F  F082         	call	_Port_Set	;wreg free
  8037  011B68  0012               	return		;funcret
  8038  011B6A                     __end_of_Port_Init:
  8039                           	opt stack 0
  8040                           tosu	equ	0xFFF
  8041                           tosh	equ	0xFFE
  8042                           tosl	equ	0xFFD
  8043                           pclath	equ	0xFFA
  8044                           tblptru	equ	0xFF8
  8045                           tblptrh	equ	0xFF7
  8046                           tblptrl	equ	0xFF6
  8047                           tablat	equ	0xFF5
  8048                           prodh	equ	0xFF4
  8049                           prodl	equ	0xFF3
  8050                           postinc0	equ	0xFEE
  8051                           wreg	equ	0xFE8
  8052                           indf1	equ	0xFE7
  8053                           postdec1	equ	0xFE5
  8054                           fsr1h	equ	0xFE2
  8055                           fsr1l	equ	0xFE1
  8056                           indf2	equ	0xFDF
  8057                           postinc2	equ	0xFDE
  8058                           postdec2	equ	0xFDD
  8059                           fsr2h	equ	0xFDA
  8060                           fsr2l	equ	0xFD9
  8061                           status	equ	0xFD8
  8062                           
  8063 ;; *************** function _Port_SetType *****************
  8064 ;; Defined at:
  8065 ;;		line 513 in file "Library/Port.c"
  8066 ;; Parameters:    Size  Location     Type
  8067 ;;  pInput          2   58[BANK0 ] const PTR struct Port
  8068 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8069 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8070 ;;  pType           1   60[BANK0 ] enum E6795
  8071 ;; Auto vars:     Size  Location     Type
  8072 ;;  Output          1   63[BANK0 ] enum E6475
  8073 ;; Return value:  Size  Location     Type
  8074 ;;                  1    wreg      enum E6475
  8075 ;; Registers used:
  8076 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8077 ;; Tracked objects:
  8078 ;;		On entry : 0/0
  8079 ;;		On exit  : 0/0
  8080 ;;		Unchanged: 0/0
  8081 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8082 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8083 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8084 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8085 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8086 ;;Total ram usage:        6 bytes
  8087 ;; Hardware stack levels used:    1
  8088 ;; Hardware stack levels required when called:   14
  8089 ;; This function calls:
  8090 ;;		_Port_CheckPortType
  8091 ;;		_Word_SetPair
  8092 ;; This function is called by:
  8093 ;;		_Port_Init
  8094 ;;		_MXK_Init
  8095 ;; This function uses a non-reentrant model
  8096 ;;
  8097                           
  8098                           	psect	text35
  8099  010CB2                     __ptext35:
  8100                           	opt stack 0
  8101  010CB2                     _Port_SetType:
  8102                           	opt stack 15
  8103                           
  8104                           ;Port.c: 515: ePinError Output = ePinErrorState;
  8105                           
  8106                           ;incstack = 0
  8107  010CB2  0E05               	movlw	5
  8108  010CB4  0100               	movlb	0	; () banked
  8109  010CB6  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8110                           
  8111                           ;Port.c: 517: switch (pType)
  8112  010CB8  D07A               	goto	l509
  8113  010CBA                     
  8114                           ; BSR set to: 0
  8115                           ;Port.c: 522: pInput->mDirection->mBits = 0xFF;
  8116                           
  8117                           ; BSR set to: 0
  8118  010CBA  0100               	movlb	0	; () banked
  8119  010CBC  EE20 F002          	lfsr	2,2
  8120  010CC0  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8121  010CC2  26D9               	addwf	fsr2l,f,c
  8122  010CC4  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8123  010CC6  22DA               	addwfc	fsr2h,f,c
  8124  010CC8  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8125  010CCC  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8126  010CD0  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8127  010CD4  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8128  010CD8  0EFF               	movlw	255
  8129  010CDA  D067               	goto	L7
  8130  010CDC                     
  8131                           ; BSR set to: 0
  8132                           ;Port.c: 526: if ((Output=Port_CheckPortType(pInput, eLow)) == ePinErrorNone)
  8133                           
  8134                           ; BSR set to: 0
  8135  010CDC  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8136  010CE0  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8137  010CE4  0E01               	movlw	1
  8138  010CE6  0100               	movlb	0	; () banked
  8139  010CE8  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8140  010CEA  EC82  F0A0         	call	_Port_CheckPortType	;wreg free
  8141  010CEE  0100               	movlb	0	; () banked
  8142  010CF0  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8143  010CF2  0100               	movlb	0	; () banked
  8144  010CF4  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8145  010CF6  A4D8               	btfss	status,2,c
  8146  010CF8  0012               	return	
  8147                           
  8148                           ; BSR set to: 0
  8149                           ;Port.c: 527: {
  8150                           ;Port.c: 529: pInput->mDirection->mBits = 0x00;
  8151  010CFA  0100               	movlb	0	; () banked
  8152  010CFC  EE20 F002          	lfsr	2,2
  8153  010D00  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8154  010D02  26D9               	addwf	fsr2l,f,c
  8155  010D04  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8156  010D06  22DA               	addwfc	fsr2h,f,c
  8157  010D08  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8158  010D0C  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8159  010D10  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8160  010D14  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8161  010D18  0E00               	movlw	0
  8162  010D1A  6EDF               	movwf	indf2,c
  8163                           
  8164                           ;Port.c: 532: pInput->mOutput->mBits = 0x00;
  8165  010D1C  0100               	movlb	0	; () banked
  8166  010D1E  EE20 F004          	lfsr	2,4
  8167  010D22  D036               	goto	L12
  8168  010D24                     
  8169                           ; BSR set to: 0
  8170                           ;Port.c: 537: if ((Output=Port_CheckPortType(pInput, eHigh)) == ePinErrorNone)
  8171                           
  8172                           ; BSR set to: 0
  8173  010D24  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8174  010D28  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8175  010D2C  0E02               	movlw	2
  8176  010D2E  0100               	movlb	0	; () banked
  8177  010D30  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8178  010D32  EC82  F0A0         	call	_Port_CheckPortType	;wreg free
  8179  010D36  0100               	movlb	0	; () banked
  8180  010D38  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8181  010D3A  0100               	movlb	0	; () banked
  8182  010D3C  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8183  010D3E  A4D8               	btfss	status,2,c
  8184  010D40  0012               	return	
  8185                           
  8186                           ; BSR set to: 0
  8187                           ;Port.c: 538: {
  8188                           ;Port.c: 540: pInput->mDirection->mBits = 0xFF;
  8189  010D42  0100               	movlb	0	; () banked
  8190  010D44  EE20 F002          	lfsr	2,2
  8191  010D48  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8192  010D4A  26D9               	addwf	fsr2l,f,c
  8193  010D4C  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8194  010D4E  22DA               	addwfc	fsr2h,f,c
  8195  010D50  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8196  010D54  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8197  010D58  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8198  010D5C  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8199  010D60  0EFF               	movlw	255
  8200  010D62  6EDF               	movwf	indf2,c
  8201                           
  8202                           ;Port.c: 543: pInput->mOutput->mBits = 0xFF;
  8203  010D64  0100               	movlb	0	; () banked
  8204  010D66  EE20 F004          	lfsr	2,4
  8205  010D6A  D7AA               	goto	L8
  8206  010D6C                     
  8207                           ; BSR set to: 0
  8208                           ;Port.c: 548: if ((Output=Port_CheckPortType(pInput, eHL)) == ePinErrorNone)
  8209                           
  8210                           ; BSR set to: 0
  8211  010D6C  C0EF  F0EB         	movff	Port_SetType@pInput,Port_CheckPortType@pInput
  8212  010D70  C0F0  F0EC         	movff	Port_SetType@pInput+1,Port_CheckPortType@pInput+1
  8213  010D74  0E00               	movlw	0
  8214  010D76  0100               	movlb	0	; () banked
  8215  010D78  6FED               	movwf	Port_CheckPortType@pDrive& (0+255),b
  8216  010D7A  EC82  F0A0         	call	_Port_CheckPortType	;wreg free
  8217  010D7E  0100               	movlb	0	; () banked
  8218  010D80  6FF4               	movwf	Port_SetType@Output& (0+255),b
  8219  010D82  0100               	movlb	0	; () banked
  8220  010D84  51F4               	movf	Port_SetType@Output& (0+255),w,b
  8221  010D86  A4D8               	btfss	status,2,c
  8222  010D88  0012               	return	
  8223                           
  8224                           ; BSR set to: 0
  8225                           ;Port.c: 549: {
  8226                           ;Port.c: 551: pInput->mDirection->mBits = 0x00;
  8227  010D8A  0100               	movlb	0	; () banked
  8228  010D8C  EE20 F002          	lfsr	2,2
  8229  010D90                     L12:
  8230  010D90  51EF               	movf	Port_SetType@pInput& (0+255),w,b
  8231  010D92  26D9               	addwf	fsr2l,f,c
  8232  010D94  51F0               	movf	(Port_SetType@pInput+1)& (0+255),w,b
  8233  010D96  22DA               	addwfc	fsr2h,f,c
  8234  010D98  CFDE F0F2          	movff	postinc2,??_Port_SetType
  8235  010D9C  CFDD F0F3          	movff	postdec2,??_Port_SetType+1
  8236  010DA0  C0F2  FFD9         	movff	??_Port_SetType,fsr2l
  8237  010DA4  C0F3  FFDA         	movff	??_Port_SetType+1,fsr2h
  8238  010DA8  0E00               	movlw	0
  8239  010DAA                     L7:
  8240  010DAA  6EDF               	movwf	indf2,c
  8241                           
  8242                           ;Port.c: 552: }
  8243  010DAC  D00E               	goto	l511
  8244  010DAE                     l509:
  8245                           
  8246                           ; BSR set to: 0
  8247                           
  8248                           ; BSR set to: 0
  8249  010DAE  0100               	movlb	0	; () banked
  8250  010DB0  51F1               	movf	Port_SetType@pType& (0+255),w,b
  8251                           
  8252                           ; Switch size 1, requested type "space"
  8253                           ; Number of cases is 4, Range of values is 0 to 3
  8254                           ; switch strategies available:
  8255                           ; Name         Instructions Cycles
  8256                           ; simple_byte           13     7 (average)
  8257                           ;	Chosen strategy is simple_byte
  8258  010DB2  0A00               	xorlw	0	; case 0
  8259  010DB4  B4D8               	btfsc	status,2,c
  8260  010DB6  D781               	goto	l510
  8261  010DB8  0A01               	xorlw	1	; case 1
  8262  010DBA  B4D8               	btfsc	status,2,c
  8263  010DBC  D78F               	goto	l512
  8264  010DBE  0A03               	xorlw	3	; case 2
  8265  010DC0  B4D8               	btfsc	status,2,c
  8266  010DC2  D7B0               	goto	l516
  8267  010DC4  0A01               	xorlw	1	; case 3
  8268  010DC6  B4D8               	btfsc	status,2,c
  8269  010DC8  D7D1               	goto	l519
  8270  010DCA                     l511:
  8271                           
  8272                           ; BSR set to: 0
  8273                           ;Port.c: 560: Word_SetPair(&pInput->mType, 0, (UINT8)pType);
  8274                           
  8275                           ; BSR set to: 0
  8276  010DCA  0E08               	movlw	8
  8277  010DCC  0100               	movlb	0	; () banked
  8278  010DCE  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8279  010DD0  0100               	movlb	0	; () banked
  8280  010DD2  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8281  010DD4  0E00               	movlw	0
  8282  010DD6  0100               	movlb	0	; () banked
  8283  010DD8  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8284  010DDA  0100               	movlb	0	; () banked
  8285  010DDC  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8286  010DDE  0E00               	movlw	0
  8287  010DE0  0100               	movlb	0	; () banked
  8288  010DE2  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8289  010DE4  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8290  010DE8  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8291                           
  8292                           ;Port.c: 561: Word_SetPair(&pInput->mType, 1, (UINT8)pType);
  8293  010DEC  0E08               	movlw	8
  8294  010DEE  0100               	movlb	0	; () banked
  8295  010DF0  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8296  010DF2  0100               	movlb	0	; () banked
  8297  010DF4  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8298  010DF6  0E00               	movlw	0
  8299  010DF8  0100               	movlb	0	; () banked
  8300  010DFA  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8301  010DFC  0100               	movlb	0	; () banked
  8302  010DFE  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8303  010E00  0E01               	movlw	1
  8304  010E02  0100               	movlb	0	; () banked
  8305  010E04  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8306  010E06  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8307  010E0A  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8308                           
  8309                           ;Port.c: 562: Word_SetPair(&pInput->mType, 2, (UINT8)pType);
  8310  010E0E  0E08               	movlw	8
  8311  010E10  0100               	movlb	0	; () banked
  8312  010E12  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8313  010E14  0100               	movlb	0	; () banked
  8314  010E16  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8315  010E18  0E00               	movlw	0
  8316  010E1A  0100               	movlb	0	; () banked
  8317  010E1C  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8318  010E1E  0100               	movlb	0	; () banked
  8319  010E20  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8320  010E22  0E02               	movlw	2
  8321  010E24  0100               	movlb	0	; () banked
  8322  010E26  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8323  010E28  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8324  010E2C  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8325                           
  8326                           ;Port.c: 563: Word_SetPair(&pInput->mType, 3, (UINT8)pType);
  8327  010E30  0E08               	movlw	8
  8328  010E32  0100               	movlb	0	; () banked
  8329  010E34  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8330  010E36  0100               	movlb	0	; () banked
  8331  010E38  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8332  010E3A  0E00               	movlw	0
  8333  010E3C  0100               	movlb	0	; () banked
  8334  010E3E  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8335  010E40  0100               	movlb	0	; () banked
  8336  010E42  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8337  010E44  0E03               	movlw	3
  8338  010E46  0100               	movlb	0	; () banked
  8339  010E48  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8340  010E4A  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8341  010E4E  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8342                           
  8343                           ;Port.c: 564: Word_SetPair(&pInput->mType, 4, (UINT8)pType);
  8344  010E52  0E08               	movlw	8
  8345  010E54  0100               	movlb	0	; () banked
  8346  010E56  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8347  010E58  0100               	movlb	0	; () banked
  8348  010E5A  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8349  010E5C  0E00               	movlw	0
  8350  010E5E  0100               	movlb	0	; () banked
  8351  010E60  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8352  010E62  0100               	movlb	0	; () banked
  8353  010E64  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8354  010E66  0E04               	movlw	4
  8355  010E68  0100               	movlb	0	; () banked
  8356  010E6A  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8357  010E6C  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8358  010E70  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8359                           
  8360                           ;Port.c: 565: Word_SetPair(&pInput->mType, 5, (UINT8)pType);
  8361  010E74  0E08               	movlw	8
  8362  010E76  0100               	movlb	0	; () banked
  8363  010E78  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8364  010E7A  0100               	movlb	0	; () banked
  8365  010E7C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8366  010E7E  0E00               	movlw	0
  8367  010E80  0100               	movlb	0	; () banked
  8368  010E82  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8369  010E84  0100               	movlb	0	; () banked
  8370  010E86  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8371  010E88  0E05               	movlw	5
  8372  010E8A  0100               	movlb	0	; () banked
  8373  010E8C  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8374  010E8E  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8375  010E92  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8376                           
  8377                           ;Port.c: 566: Word_SetPair(&pInput->mType, 6, (UINT8)pType);
  8378  010E96  0E08               	movlw	8
  8379  010E98  0100               	movlb	0	; () banked
  8380  010E9A  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8381  010E9C  0100               	movlb	0	; () banked
  8382  010E9E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8383  010EA0  0E00               	movlw	0
  8384  010EA2  0100               	movlb	0	; () banked
  8385  010EA4  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8386  010EA6  0100               	movlb	0	; () banked
  8387  010EA8  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8388  010EAA  0E06               	movlw	6
  8389  010EAC  0100               	movlb	0	; () banked
  8390  010EAE  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8391  010EB0  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8392  010EB4  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8393                           
  8394                           ;Port.c: 567: Word_SetPair(&pInput->mType, 7, (UINT8)pType);
  8395  010EB8  0E08               	movlw	8
  8396  010EBA  0100               	movlb	0	; () banked
  8397  010EBC  25EF               	addwf	Port_SetType@pInput& (0+255),w,b
  8398  010EBE  0100               	movlb	0	; () banked
  8399  010EC0  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
  8400  010EC2  0E00               	movlw	0
  8401  010EC4  0100               	movlb	0	; () banked
  8402  010EC6  21F0               	addwfc	(Port_SetType@pInput+1)& (0+255),w,b
  8403  010EC8  0100               	movlb	0	; () banked
  8404  010ECA  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
  8405  010ECC  0E07               	movlw	7
  8406  010ECE  0100               	movlb	0	; () banked
  8407  010ED0  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
  8408  010ED2  C0F1  F0C7         	movff	Port_SetType@pType,Word_SetPair@pValue
  8409  010ED6  EC10  F0A1         	call	_Word_SetPair	;wreg free
  8410  010EDA  0012               	return	
  8411  010EDC                     __end_of_Port_SetType:
  8412                           	opt stack 0
  8413                           tosu	equ	0xFFF
  8414                           tosh	equ	0xFFE
  8415                           tosl	equ	0xFFD
  8416                           pclath	equ	0xFFA
  8417                           tblptru	equ	0xFF8
  8418                           tblptrh	equ	0xFF7
  8419                           tblptrl	equ	0xFF6
  8420                           tablat	equ	0xFF5
  8421                           prodh	equ	0xFF4
  8422                           prodl	equ	0xFF3
  8423                           postinc0	equ	0xFEE
  8424                           wreg	equ	0xFE8
  8425                           indf1	equ	0xFE7
  8426                           postdec1	equ	0xFE5
  8427                           fsr1h	equ	0xFE2
  8428                           fsr1l	equ	0xFE1
  8429                           indf2	equ	0xFDF
  8430                           postinc2	equ	0xFDE
  8431                           postdec2	equ	0xFDD
  8432                           fsr2h	equ	0xFDA
  8433                           fsr2l	equ	0xFD9
  8434                           status	equ	0xFD8
  8435                           
  8436 ;; *************** function _Port_CheckPortType *****************
  8437 ;; Defined at:
  8438 ;;		line 138 in file "Library/Port.c"
  8439 ;; Parameters:    Size  Location     Type
  8440 ;;  pInput          2   54[BANK0 ] const PTR struct Port
  8441 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8442 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8443 ;;  pDrive          1   56[BANK0 ] enum E6469
  8444 ;; Auto vars:     Size  Location     Type
  8445 ;;  Output          1   57[BANK0 ] enum E6475
  8446 ;; Return value:  Size  Location     Type
  8447 ;;                  1    wreg      enum E6475
  8448 ;; Registers used:
  8449 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8450 ;; Tracked objects:
  8451 ;;		On entry : 0/0
  8452 ;;		On exit  : 0/0
  8453 ;;		Unchanged: 0/0
  8454 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8455 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8456 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8457 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8458 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8459 ;;Total ram usage:        4 bytes
  8460 ;; Hardware stack levels used:    1
  8461 ;; Hardware stack levels required when called:   13
  8462 ;; This function calls:
  8463 ;;		_Port_CheckQuadType
  8464 ;; This function is called by:
  8465 ;;		_Port_SetType
  8466 ;; This function uses a non-reentrant model
  8467 ;;
  8468                           
  8469                           	psect	text36
  8470  014104                     __ptext36:
  8471                           	opt stack 0
  8472  014104                     _Port_CheckPortType:
  8473                           	opt stack 15
  8474                           
  8475                           ;Port.c: 140: ePinError Output = ePinErrorState;
  8476                           
  8477                           ;incstack = 0
  8478  014104  0E05               	movlw	5
  8479  014106  0100               	movlb	0	; () banked
  8480  014108  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8481                           
  8482                           ; BSR set to: 0
  8483                           ;Port.c: 143: if ((Output = Port_CheckQuadType(pInput, eP0_3, pDrive)) == ePinErrorNone)
  8484  01410A  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8485  01410E  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8486  014112  0E00               	movlw	0
  8487  014114  0100               	movlb	0	; () banked
  8488  014116  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8489  014118  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8490  01411C  EC39  F09F         	call	_Port_CheckQuadType	;wreg free
  8491  014120  0100               	movlb	0	; () banked
  8492  014122  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8493  014124  0100               	movlb	0	; () banked
  8494  014126  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8495  014128  A4D8               	btfss	status,2,c
  8496  01412A  D00D               	goto	l397
  8497                           
  8498                           ; BSR set to: 0
  8499                           ;Port.c: 144: Output = Port_CheckQuadType(pInput, eP4_7, pDrive);
  8500  01412C  C0EB  F0E4         	movff	Port_CheckPortType@pInput,Port_CheckQuadType@pInput
  8501  014130  C0EC  F0E5         	movff	Port_CheckPortType@pInput+1,Port_CheckQuadType@pInput+1
  8502  014134  0E01               	movlw	1
  8503  014136  0100               	movlb	0	; () banked
  8504  014138  6FE6               	movwf	Port_CheckQuadType@pQuad& (0+255),b
  8505  01413A  C0ED  F0E7         	movff	Port_CheckPortType@pDrive,Port_CheckQuadType@pDrive
  8506  01413E  EC39  F09F         	call	_Port_CheckQuadType	;wreg free
  8507  014142  0100               	movlb	0	; () banked
  8508  014144  6FEE               	movwf	Port_CheckPortType@Output& (0+255),b
  8509  014146                     l397:
  8510                           
  8511                           ; BSR set to: 0
  8512                           ;Port.c: 146: return Output;
  8513                           
  8514                           ; BSR set to: 0
  8515  014146  0100               	movlb	0	; () banked
  8516  014148  51EE               	movf	Port_CheckPortType@Output& (0+255),w,b
  8517  01414A  0012               	return	
  8518  01414C                     __end_of_Port_CheckPortType:
  8519                           	opt stack 0
  8520                           tosu	equ	0xFFF
  8521                           tosh	equ	0xFFE
  8522                           tosl	equ	0xFFD
  8523                           pclath	equ	0xFFA
  8524                           tblptru	equ	0xFF8
  8525                           tblptrh	equ	0xFF7
  8526                           tblptrl	equ	0xFF6
  8527                           tablat	equ	0xFF5
  8528                           prodh	equ	0xFF4
  8529                           prodl	equ	0xFF3
  8530                           postinc0	equ	0xFEE
  8531                           wreg	equ	0xFE8
  8532                           indf1	equ	0xFE7
  8533                           postdec1	equ	0xFE5
  8534                           fsr1h	equ	0xFE2
  8535                           fsr1l	equ	0xFE1
  8536                           indf2	equ	0xFDF
  8537                           postinc2	equ	0xFDE
  8538                           postdec2	equ	0xFDD
  8539                           fsr2h	equ	0xFDA
  8540                           fsr2l	equ	0xFD9
  8541                           status	equ	0xFD8
  8542                           
  8543 ;; *************** function _Port_Set *****************
  8544 ;; Defined at:
  8545 ;;		line 570 in file "Library/Port.c"
  8546 ;; Parameters:    Size  Location     Type
  8547 ;;  pInput          2   15[BANK0 ] const PTR struct Port
  8548 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
  8549 ;;		 -> PortD(10), PortC(10), PortF(10), 
  8550 ;;  pValue          1   17[BANK0 ] unsigned char 
  8551 ;; Auto vars:     Size  Location     Type
  8552 ;;  TypeActual      2   36[BANK0 ] unsigned short 
  8553 ;;  TypeRequired    2   34[BANK0 ] unsigned short 
  8554 ;;  Type            1   38[BANK0 ] enum E6795
  8555 ;; Return value:  Size  Location     Type
  8556 ;;                  1    wreg      void 
  8557 ;; Registers used:
  8558 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  8559 ;; Tracked objects:
  8560 ;;		On entry : 0/0
  8561 ;;		On exit  : 0/0
  8562 ;;		Unchanged: 0/0
  8563 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8564 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8565 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8566 ;;      Temps:          0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8567 ;;      Totals:         0      24       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;Total ram usage:       24 bytes
  8569 ;; Hardware stack levels used:    1
  8570 ;; Hardware stack levels required when called:   10
  8571 ;; This function calls:
  8572 ;;		_Byte_SetByte
  8573 ;;		_Word_GetPair
  8574 ;; This function is called by:
  8575 ;;		_Port_Init
  8576 ;;		_Port_Toggle
  8577 ;; This function uses a non-reentrant model
  8578 ;;
  8579                           
  8580                           	psect	text37
  8581  01041E                     __ptext37:
  8582                           	opt stack 0
  8583  01041E                     _Port_Set:
  8584                           	opt stack 18
  8585                           
  8586                           ;Port.c: 572: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, 0);
  8587                           
  8588                           ; BSR set to: 0
  8589                           ;incstack = 0
  8590  01041E  0E08               	movlw	8
  8591  010420  0100               	movlb	0	; () banked
  8592  010422  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8593  010424  0100               	movlb	0	; () banked
  8594  010426  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8595  010428  0E00               	movlw	0
  8596  01042A  0100               	movlb	0	; () banked
  8597  01042C  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8598  01042E  0100               	movlb	0	; () banked
  8599  010430  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8600  010432  0E00               	movlw	0
  8601  010434  0100               	movlb	0	; () banked
  8602  010436  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8603  010438  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8604  01043C  0100               	movlb	0	; () banked
  8605  01043E  6FDB               	movwf	Port_Set@Type& (0+255),b
  8606                           
  8607                           ; BSR set to: 0
  8608                           ;Port.c: 573: UINT16 TypeRequired = Type | (Type << 2) | (Type << 4) | (Type << 6) | (Ty
      +                          pe << 8) | (Type << 10) | (Type << 12) | (Type << 14);
  8609  010440  0100               	movlb	0	; () banked
  8610  010442  51DB               	movf	Port_Set@Type& (0+255),w,b
  8611  010444  0100               	movlb	0	; () banked
  8612  010446  6FC7               	movwf	??_Port_Set& (0+255),b
  8613  010448  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8614  01044A  0E0E               	movlw	14
  8615  01044C                     u7285:
  8616  01044C  90D8               	bcf	status,0,c
  8617  01044E  0100               	movlb	0	; () banked
  8618  010450  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8619  010452  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8620  010454  2EE8               	decfsz	wreg,f,c
  8621  010456  D7FA               	goto	u7285
  8622  010458  0100               	movlb	0	; () banked
  8623  01045A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8624  01045C  0100               	movlb	0	; () banked
  8625  01045E  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8626  010460  6BCA               	clrf	(??_Port_Set+3)& (0+255),b
  8627  010462  0E0C               	movlw	12
  8628  010464                     u7295:
  8629  010464  90D8               	bcf	status,0,c
  8630  010466  0100               	movlb	0	; () banked
  8631  010468  37C9               	rlcf	(??_Port_Set+2)& (0+255),f,b
  8632  01046A  37CA               	rlcf	(??_Port_Set+3)& (0+255),f,b
  8633  01046C  2EE8               	decfsz	wreg,f,c
  8634  01046E  D7FA               	goto	u7295
  8635  010470  0100               	movlb	0	; () banked
  8636  010472  51DB               	movf	Port_Set@Type& (0+255),w,b
  8637  010474  0100               	movlb	0	; () banked
  8638  010476  6FCB               	movwf	(??_Port_Set+4)& (0+255),b
  8639  010478  6BCC               	clrf	(??_Port_Set+5)& (0+255),b
  8640  01047A  0E0A               	movlw	10
  8641  01047C                     u7305:
  8642  01047C  90D8               	bcf	status,0,c
  8643  01047E  0100               	movlb	0	; () banked
  8644  010480  37CB               	rlcf	(??_Port_Set+4)& (0+255),f,b
  8645  010482  37CC               	rlcf	(??_Port_Set+5)& (0+255),f,b
  8646  010484  2EE8               	decfsz	wreg,f,c
  8647  010486  D7FA               	goto	u7305
  8648  010488  0100               	movlb	0	; () banked
  8649  01048A  51DB               	movf	Port_Set@Type& (0+255),w,b
  8650  01048C  0100               	movlb	0	; () banked
  8651  01048E  6FCE               	movwf	(??_Port_Set+7)& (0+255),b
  8652  010490  6BCD               	clrf	(??_Port_Set+6)& (0+255),b
  8653  010492  0100               	movlb	0	; () banked
  8654  010494  51DB               	movf	Port_Set@Type& (0+255),w,b
  8655  010496  0100               	movlb	0	; () banked
  8656  010498  6FCF               	movwf	(??_Port_Set+8)& (0+255),b
  8657  01049A  6BD0               	clrf	(??_Port_Set+9)& (0+255),b
  8658  01049C  0E06               	movlw	6
  8659  01049E                     u7315:
  8660  01049E  90D8               	bcf	status,0,c
  8661  0104A0  0100               	movlb	0	; () banked
  8662  0104A2  37CF               	rlcf	(??_Port_Set+8)& (0+255),f,b
  8663  0104A4  37D0               	rlcf	(??_Port_Set+9)& (0+255),f,b
  8664  0104A6  2EE8               	decfsz	wreg,f,c
  8665  0104A8  D7FA               	goto	u7315
  8666  0104AA  0100               	movlb	0	; () banked
  8667  0104AC  51DB               	movf	Port_Set@Type& (0+255),w,b
  8668  0104AE  0100               	movlb	0	; () banked
  8669  0104B0  6FD1               	movwf	(??_Port_Set+10)& (0+255),b
  8670  0104B2  6BD2               	clrf	(??_Port_Set+11)& (0+255),b
  8671  0104B4  0100               	movlb	0	; () banked
  8672  0104B6  3BD1               	swapf	(??_Port_Set+10)& (0+255),f,b
  8673  0104B8  3BD2               	swapf	(??_Port_Set+11)& (0+255),f,b
  8674  0104BA  0EF0               	movlw	240
  8675  0104BC  17D2               	andwf	(??_Port_Set+11)& (0+255),f,b
  8676  0104BE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8677  0104C0  0B0F               	andlw	15
  8678  0104C2  13D2               	iorwf	(??_Port_Set+11)& (0+255),f,b
  8679  0104C4  0EF0               	movlw	240
  8680  0104C6  17D1               	andwf	(??_Port_Set+10)& (0+255),f,b
  8681  0104C8  0100               	movlb	0	; () banked
  8682  0104CA  51DB               	movf	Port_Set@Type& (0+255),w,b
  8683  0104CC  0100               	movlb	0	; () banked
  8684  0104CE  6FD3               	movwf	(??_Port_Set+12)& (0+255),b
  8685  0104D0  6BD4               	clrf	(??_Port_Set+13)& (0+255),b
  8686  0104D2  0100               	movlb	0	; () banked
  8687  0104D4  90D8               	bcf	status,0,c
  8688  0104D6  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8689  0104D8  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8690  0104DA  0100               	movlb	0	; () banked
  8691  0104DC  90D8               	bcf	status,0,c
  8692  0104DE  37D3               	rlcf	(??_Port_Set+12)& (0+255),f,b
  8693  0104E0  37D4               	rlcf	(??_Port_Set+13)& (0+255),f,b
  8694  0104E2  0100               	movlb	0	; () banked
  8695  0104E4  51DB               	movf	Port_Set@Type& (0+255),w,b
  8696  0104E6  0100               	movlb	0	; () banked
  8697  0104E8  6FD5               	movwf	(??_Port_Set+14)& (0+255),b
  8698  0104EA  6BD6               	clrf	(??_Port_Set+15)& (0+255),b
  8699  0104EC  0100               	movlb	0	; () banked
  8700  0104EE  51D3               	movf	(??_Port_Set+12)& (0+255),w,b
  8701  0104F0  0100               	movlb	0	; () banked
  8702  0104F2  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8703  0104F4  0100               	movlb	0	; () banked
  8704  0104F6  51D4               	movf	(??_Port_Set+13)& (0+255),w,b
  8705  0104F8  0100               	movlb	0	; () banked
  8706  0104FA  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8707  0104FC  0100               	movlb	0	; () banked
  8708  0104FE  51D1               	movf	(??_Port_Set+10)& (0+255),w,b
  8709  010500  0100               	movlb	0	; () banked
  8710  010502  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8711  010504  0100               	movlb	0	; () banked
  8712  010506  51D2               	movf	(??_Port_Set+11)& (0+255),w,b
  8713  010508  0100               	movlb	0	; () banked
  8714  01050A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8715  01050C  0100               	movlb	0	; () banked
  8716  01050E  51CF               	movf	(??_Port_Set+8)& (0+255),w,b
  8717  010510  0100               	movlb	0	; () banked
  8718  010512  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8719  010514  0100               	movlb	0	; () banked
  8720  010516  51D0               	movf	(??_Port_Set+9)& (0+255),w,b
  8721  010518  0100               	movlb	0	; () banked
  8722  01051A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8723  01051C  0100               	movlb	0	; () banked
  8724  01051E  51CD               	movf	(??_Port_Set+6)& (0+255),w,b
  8725  010520  0100               	movlb	0	; () banked
  8726  010522  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8727  010524  0100               	movlb	0	; () banked
  8728  010526  51CE               	movf	(??_Port_Set+7)& (0+255),w,b
  8729  010528  0100               	movlb	0	; () banked
  8730  01052A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8731  01052C  0100               	movlb	0	; () banked
  8732  01052E  51CB               	movf	(??_Port_Set+4)& (0+255),w,b
  8733  010530  0100               	movlb	0	; () banked
  8734  010532  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8735  010534  0100               	movlb	0	; () banked
  8736  010536  51CC               	movf	(??_Port_Set+5)& (0+255),w,b
  8737  010538  0100               	movlb	0	; () banked
  8738  01053A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8739  01053C  0100               	movlb	0	; () banked
  8740  01053E  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8741  010540  0100               	movlb	0	; () banked
  8742  010542  13D5               	iorwf	(??_Port_Set+14)& (0+255),f,b
  8743  010544  0100               	movlb	0	; () banked
  8744  010546  51CA               	movf	(??_Port_Set+3)& (0+255),w,b
  8745  010548  0100               	movlb	0	; () banked
  8746  01054A  13D6               	iorwf	(??_Port_Set+15)& (0+255),f,b
  8747  01054C  0100               	movlb	0	; () banked
  8748  01054E  51C7               	movf	??_Port_Set& (0+255),w,b
  8749  010550  0100               	movlb	0	; () banked
  8750  010552  11D5               	iorwf	(??_Port_Set+14)& (0+255),w,b
  8751  010554  0100               	movlb	0	; () banked
  8752  010556  6FD7               	movwf	Port_Set@TypeRequired& (0+255),b
  8753  010558  0100               	movlb	0	; () banked
  8754  01055A  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8755  01055C  0100               	movlb	0	; () banked
  8756  01055E  11D6               	iorwf	(??_Port_Set+15)& (0+255),w,b
  8757  010560  0100               	movlb	0	; () banked
  8758  010562  6FD8               	movwf	(Port_Set@TypeRequired+1)& (0+255),b
  8759                           
  8760                           ; BSR set to: 0
  8761                           ;Port.c: 574: UINT16 TypeActual = Type;
  8762  010564  C0DB  F0D9         	movff	Port_Set@Type,Port_Set@TypeActual
  8763  010568  0100               	movlb	0	; () banked
  8764  01056A  6BDA               	clrf	(Port_Set@TypeActual+1)& (0+255),b
  8765                           
  8766                           ; BSR set to: 0
  8767                           ;Port.c: 575: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 1) << 2;
  8768  01056C  0E08               	movlw	8
  8769  01056E  0100               	movlb	0	; () banked
  8770  010570  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8771  010572  0100               	movlb	0	; () banked
  8772  010574  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8773  010576  0E00               	movlw	0
  8774  010578  0100               	movlb	0	; () banked
  8775  01057A  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8776  01057C  0100               	movlb	0	; () banked
  8777  01057E  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8778  010580  0E01               	movlw	1
  8779  010582  0100               	movlb	0	; () banked
  8780  010584  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8781  010586  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8782  01058A  0100               	movlb	0	; () banked
  8783  01058C  6FC7               	movwf	??_Port_Set& (0+255),b
  8784  01058E  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8785  010590  0100               	movlb	0	; () banked
  8786  010592  90D8               	bcf	status,0,c
  8787  010594  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8788  010596  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8789  010598  0100               	movlb	0	; () banked
  8790  01059A  90D8               	bcf	status,0,c
  8791  01059C  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8792  01059E  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8793  0105A0  0100               	movlb	0	; () banked
  8794  0105A2  51C7               	movf	??_Port_Set& (0+255),w,b
  8795  0105A4  0100               	movlb	0	; () banked
  8796  0105A6  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8797  0105A8  0100               	movlb	0	; () banked
  8798  0105AA  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8799  0105AC  0100               	movlb	0	; () banked
  8800  0105AE  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8801                           
  8802                           ; BSR set to: 0
  8803                           ;Port.c: 576: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 2) << 4;
  8804  0105B0  0E08               	movlw	8
  8805  0105B2  0100               	movlb	0	; () banked
  8806  0105B4  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8807  0105B6  0100               	movlb	0	; () banked
  8808  0105B8  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8809  0105BA  0E00               	movlw	0
  8810  0105BC  0100               	movlb	0	; () banked
  8811  0105BE  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8812  0105C0  0100               	movlb	0	; () banked
  8813  0105C2  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8814  0105C4  0E02               	movlw	2
  8815  0105C6  0100               	movlb	0	; () banked
  8816  0105C8  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8817  0105CA  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8818  0105CE  0100               	movlb	0	; () banked
  8819  0105D0  6FC7               	movwf	??_Port_Set& (0+255),b
  8820  0105D2  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8821  0105D4  0100               	movlb	0	; () banked
  8822  0105D6  3BC7               	swapf	??_Port_Set& (0+255),f,b
  8823  0105D8  3BC8               	swapf	(??_Port_Set+1)& (0+255),f,b
  8824  0105DA  0EF0               	movlw	240
  8825  0105DC  17C8               	andwf	(??_Port_Set+1)& (0+255),f,b
  8826  0105DE  51C7               	movf	??_Port_Set& (0+255),w,b
  8827  0105E0  0B0F               	andlw	15
  8828  0105E2  13C8               	iorwf	(??_Port_Set+1)& (0+255),f,b
  8829  0105E4  0EF0               	movlw	240
  8830  0105E6  17C7               	andwf	??_Port_Set& (0+255),f,b
  8831  0105E8  0100               	movlb	0	; () banked
  8832  0105EA  51C7               	movf	??_Port_Set& (0+255),w,b
  8833  0105EC  0100               	movlb	0	; () banked
  8834  0105EE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8835  0105F0  0100               	movlb	0	; () banked
  8836  0105F2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8837  0105F4  0100               	movlb	0	; () banked
  8838  0105F6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8839                           
  8840                           ; BSR set to: 0
  8841                           ;Port.c: 577: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 3) << 6;
  8842  0105F8  0E08               	movlw	8
  8843  0105FA  0100               	movlb	0	; () banked
  8844  0105FC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8845  0105FE  0100               	movlb	0	; () banked
  8846  010600  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8847  010602  0E00               	movlw	0
  8848  010604  0100               	movlb	0	; () banked
  8849  010606  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8850  010608  0100               	movlb	0	; () banked
  8851  01060A  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8852  01060C  0E03               	movlw	3
  8853  01060E  0100               	movlb	0	; () banked
  8854  010610  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8855  010612  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8856  010616  0100               	movlb	0	; () banked
  8857  010618  6FC7               	movwf	??_Port_Set& (0+255),b
  8858  01061A  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8859  01061C  0E06               	movlw	6
  8860  01061E                     u7325:
  8861  01061E  90D8               	bcf	status,0,c
  8862  010620  0100               	movlb	0	; () banked
  8863  010622  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8864  010624  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8865  010626  2EE8               	decfsz	wreg,f,c
  8866  010628  D7FA               	goto	u7325
  8867  01062A  0100               	movlb	0	; () banked
  8868  01062C  51C7               	movf	??_Port_Set& (0+255),w,b
  8869  01062E  0100               	movlb	0	; () banked
  8870  010630  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8871  010632  0100               	movlb	0	; () banked
  8872  010634  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8873  010636  0100               	movlb	0	; () banked
  8874  010638  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8875                           
  8876                           ; BSR set to: 0
  8877                           ;Port.c: 578: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 4) << 8;
  8878  01063A  0E08               	movlw	8
  8879  01063C  0100               	movlb	0	; () banked
  8880  01063E  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8881  010640  0100               	movlb	0	; () banked
  8882  010642  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8883  010644  0E00               	movlw	0
  8884  010646  0100               	movlb	0	; () banked
  8885  010648  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8886  01064A  0100               	movlb	0	; () banked
  8887  01064C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8888  01064E  0E04               	movlw	4
  8889  010650  0100               	movlb	0	; () banked
  8890  010652  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8891  010654  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8892  010658  0100               	movlb	0	; () banked
  8893  01065A  6FC7               	movwf	??_Port_Set& (0+255),b
  8894  01065C  0100               	movlb	0	; () banked
  8895  01065E  51C7               	movf	??_Port_Set& (0+255),w,b
  8896  010660  0100               	movlb	0	; () banked
  8897  010662  6FC9               	movwf	(??_Port_Set+2)& (0+255),b
  8898  010664  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8899  010666  0100               	movlb	0	; () banked
  8900  010668  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8901  01066A  0100               	movlb	0	; () banked
  8902  01066C  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8903  01066E  0100               	movlb	0	; () banked
  8904  010670  51C9               	movf	(??_Port_Set+2)& (0+255),w,b
  8905  010672  0100               	movlb	0	; () banked
  8906  010674  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8907                           
  8908                           ; BSR set to: 0
  8909                           ;Port.c: 579: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 5) << 10;
  8910  010676  0E08               	movlw	8
  8911  010678  0100               	movlb	0	; () banked
  8912  01067A  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8913  01067C  0100               	movlb	0	; () banked
  8914  01067E  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8915  010680  0E00               	movlw	0
  8916  010682  0100               	movlb	0	; () banked
  8917  010684  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8918  010686  0100               	movlb	0	; () banked
  8919  010688  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8920  01068A  0E05               	movlw	5
  8921  01068C  0100               	movlb	0	; () banked
  8922  01068E  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8923  010690  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8924  010694  0100               	movlb	0	; () banked
  8925  010696  6FC7               	movwf	??_Port_Set& (0+255),b
  8926  010698  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8927  01069A  0E0A               	movlw	10
  8928  01069C                     u7335:
  8929  01069C  90D8               	bcf	status,0,c
  8930  01069E  0100               	movlb	0	; () banked
  8931  0106A0  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8932  0106A2  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8933  0106A4  2EE8               	decfsz	wreg,f,c
  8934  0106A6  D7FA               	goto	u7335
  8935  0106A8  0100               	movlb	0	; () banked
  8936  0106AA  51C7               	movf	??_Port_Set& (0+255),w,b
  8937  0106AC  0100               	movlb	0	; () banked
  8938  0106AE  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8939  0106B0  0100               	movlb	0	; () banked
  8940  0106B2  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8941  0106B4  0100               	movlb	0	; () banked
  8942  0106B6  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8943                           
  8944                           ; BSR set to: 0
  8945                           ;Port.c: 580: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 6) << 12;
  8946  0106B8  0E08               	movlw	8
  8947  0106BA  0100               	movlb	0	; () banked
  8948  0106BC  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8949  0106BE  0100               	movlb	0	; () banked
  8950  0106C0  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8951  0106C2  0E00               	movlw	0
  8952  0106C4  0100               	movlb	0	; () banked
  8953  0106C6  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8954  0106C8  0100               	movlb	0	; () banked
  8955  0106CA  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8956  0106CC  0E06               	movlw	6
  8957  0106CE  0100               	movlb	0	; () banked
  8958  0106D0  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8959  0106D2  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8960  0106D6  0100               	movlb	0	; () banked
  8961  0106D8  6FC7               	movwf	??_Port_Set& (0+255),b
  8962  0106DA  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8963  0106DC  0E0C               	movlw	12
  8964  0106DE                     u7345:
  8965  0106DE  90D8               	bcf	status,0,c
  8966  0106E0  0100               	movlb	0	; () banked
  8967  0106E2  37C7               	rlcf	??_Port_Set& (0+255),f,b
  8968  0106E4  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  8969  0106E6  2EE8               	decfsz	wreg,f,c
  8970  0106E8  D7FA               	goto	u7345
  8971  0106EA  0100               	movlb	0	; () banked
  8972  0106EC  51C7               	movf	??_Port_Set& (0+255),w,b
  8973  0106EE  0100               	movlb	0	; () banked
  8974  0106F0  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  8975  0106F2  0100               	movlb	0	; () banked
  8976  0106F4  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  8977  0106F6  0100               	movlb	0	; () banked
  8978  0106F8  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  8979                           
  8980                           ; BSR set to: 0
  8981                           ;Port.c: 581: TypeActual |= (ePinType)Word_GetPair(&pInput->mType, 7) << 14;
  8982  0106FA  0E08               	movlw	8
  8983  0106FC  0100               	movlb	0	; () banked
  8984  0106FE  25C4               	addwf	Port_Set@pInput& (0+255),w,b
  8985  010700  0100               	movlb	0	; () banked
  8986  010702  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
  8987  010704  0E00               	movlw	0
  8988  010706  0100               	movlb	0	; () banked
  8989  010708  21C5               	addwfc	(Port_Set@pInput+1)& (0+255),w,b
  8990  01070A  0100               	movlb	0	; () banked
  8991  01070C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
  8992  01070E  0E07               	movlw	7
  8993  010710  0100               	movlb	0	; () banked
  8994  010712  6FC3               	movwf	Word_GetPair@pPair& (0+255),b
  8995  010714  ECF4  F0A1         	call	_Word_GetPair	;wreg free
  8996  010718  0100               	movlb	0	; () banked
  8997  01071A  6FC7               	movwf	??_Port_Set& (0+255),b
  8998  01071C  6BC8               	clrf	(??_Port_Set+1)& (0+255),b
  8999  01071E  0E0E               	movlw	14
  9000  010720                     u7355:
  9001  010720  90D8               	bcf	status,0,c
  9002  010722  0100               	movlb	0	; () banked
  9003  010724  37C7               	rlcf	??_Port_Set& (0+255),f,b
  9004  010726  37C8               	rlcf	(??_Port_Set+1)& (0+255),f,b
  9005  010728  2EE8               	decfsz	wreg,f,c
  9006  01072A  D7FA               	goto	u7355
  9007  01072C  0100               	movlb	0	; () banked
  9008  01072E  51C7               	movf	??_Port_Set& (0+255),w,b
  9009  010730  0100               	movlb	0	; () banked
  9010  010732  13D9               	iorwf	Port_Set@TypeActual& (0+255),f,b
  9011  010734  0100               	movlb	0	; () banked
  9012  010736  51C8               	movf	(??_Port_Set+1)& (0+255),w,b
  9013  010738  0100               	movlb	0	; () banked
  9014  01073A  13DA               	iorwf	(Port_Set@TypeActual+1)& (0+255),f,b
  9015                           
  9016                           ;Port.c: 584: if (TypeRequired == TypeActual)
  9017  01073C  0100               	movlb	0	; () banked
  9018  01073E  51D9               	movf	Port_Set@TypeActual& (0+255),w,b
  9019  010740  0100               	movlb	0	; () banked
  9020  010742  19D7               	xorwf	Port_Set@TypeRequired& (0+255),w,b
  9021  010744  E148               	bnz	l528
  9022  010746  0100               	movlb	0	; () banked
  9023  010748  51DA               	movf	(Port_Set@TypeActual+1)& (0+255),w,b
  9024  01074A  0100               	movlb	0	; () banked
  9025  01074C  19D8               	xorwf	(Port_Set@TypeRequired+1)& (0+255),w,b
  9026  01074E  A4D8               	btfss	status,2,c
  9027  010750  0012               	return	
  9028  010752  D032               	goto	l526
  9029  010754                     
  9030                           ; BSR set to: 0
  9031                           ;Port.c: 593: Byte_SetByte(pInput->mDirection, pValue);
  9032                           
  9033                           ; BSR set to: 0
  9034  010754  0100               	movlb	0	; () banked
  9035  010756  EE20 F002          	lfsr	2,2
  9036  01075A  51C4               	movf	Port_Set@pInput& (0+255),w,b
  9037  01075C  26D9               	addwf	fsr2l,f,c
  9038  01075E  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9039  010760  22DA               	addwfc	fsr2h,f,c
  9040  010762  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  9041  010766  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9042  01076A  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9043  01076E  ECBB  F0A4         	call	_Byte_SetByte	;wreg free
  9044                           
  9045                           ;Port.c: 594: break;
  9046  010772  0012               	return	
  9047  010774                     
  9048                           ;Port.c: 597: pValue = ~pValue;
  9049  010774  0100               	movlb	0	; () banked
  9050  010776  1FC6               	comf	Port_Set@pValue& (0+255),f,b
  9051                           
  9052                           ; BSR set to: 0
  9053                           ;Port.c: 598: Byte_SetByte(pInput->mDirection, pValue);
  9054  010778  0100               	movlb	0	; () banked
  9055  01077A  EE20 F002          	lfsr	2,2
  9056  01077E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  9057  010780  26D9               	addwf	fsr2l,f,c
  9058  010782  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9059  010784  22DA               	addwfc	fsr2h,f,c
  9060  010786  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  9061  01078A  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9062  01078E  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9063  010792  ECBB  F0A4         	call	_Byte_SetByte	;wreg free
  9064                           
  9065                           ;Port.c: 599: break;
  9066  010796  0012               	return	
  9067  010798                     
  9068                           ;Port.c: 602: Byte_SetByte(pInput->mOutput, pValue);
  9069  010798  0100               	movlb	0	; () banked
  9070  01079A  EE20 F004          	lfsr	2,4
  9071  01079E  51C4               	movf	Port_Set@pInput& (0+255),w,b
  9072  0107A0  26D9               	addwf	fsr2l,f,c
  9073  0107A2  51C5               	movf	(Port_Set@pInput+1)& (0+255),w,b
  9074  0107A4  22DA               	addwfc	fsr2h,f,c
  9075  0107A6  CFDE F0B5          	movff	postinc2,Byte_SetByte@pInput
  9076  0107AA  CFDD F0B6          	movff	postdec2,Byte_SetByte@pInput+1
  9077  0107AE  C0C6  F0B7         	movff	Port_Set@pValue,Byte_SetByte@pValue
  9078  0107B2  ECBB  F0A4         	call	_Byte_SetByte	;wreg free
  9079                           
  9080                           ;Port.c: 606: }
  9081                           
  9082                           ;Port.c: 605: break;
  9083                           
  9084                           ;Port.c: 604: default:
  9085                           
  9086                           ;Port.c: 603: break;
  9087  0107B6  0012               	return	
  9088  0107B8                     l526:
  9089  0107B8  0100               	movlb	0	; () banked
  9090  0107BA  51DB               	movf	Port_Set@Type& (0+255),w,b
  9091                           
  9092                           ; Switch size 1, requested type "space"
  9093                           ; Number of cases is 4, Range of values is 0 to 3
  9094                           ; switch strategies available:
  9095                           ; Name         Instructions Cycles
  9096                           ; simple_byte           13     7 (average)
  9097                           ;	Chosen strategy is simple_byte
  9098  0107BC  0A00               	xorlw	0	; case 0
  9099  0107BE  B4D8               	btfsc	status,2,c
  9100  0107C0  0012               	return	
  9101  0107C2  0A01               	xorlw	1	; case 1
  9102  0107C4  B4D8               	btfsc	status,2,c
  9103  0107C6  D7C6               	goto	l529
  9104  0107C8  0A03               	xorlw	3	; case 2
  9105  0107CA  B4D8               	btfsc	status,2,c
  9106  0107CC  D7D3               	goto	l531
  9107  0107CE  0A01               	xorlw	1	; case 3
  9108  0107D0  A4D8               	btfss	status,2,c
  9109                           
  9110                           ; BSR set to: 0
  9111                           
  9112                           ; BSR set to: 0
  9113                           ;Port.c: 607: }
  9114  0107D2  0012               	return	
  9115  0107D4  D7E1               	goto	l532
  9116  0107D6                     l528:
  9117  0107D6  0012               	return		;funcret
  9118  0107D8                     __end_of_Port_Set:
  9119                           	opt stack 0
  9120                           tosu	equ	0xFFF
  9121                           tosh	equ	0xFFE
  9122                           tosl	equ	0xFFD
  9123                           pclath	equ	0xFFA
  9124                           tblptru	equ	0xFF8
  9125                           tblptrh	equ	0xFF7
  9126                           tblptrl	equ	0xFF6
  9127                           tablat	equ	0xFF5
  9128                           prodh	equ	0xFF4
  9129                           prodl	equ	0xFF3
  9130                           postinc0	equ	0xFEE
  9131                           wreg	equ	0xFE8
  9132                           indf1	equ	0xFE7
  9133                           postdec1	equ	0xFE5
  9134                           fsr1h	equ	0xFE2
  9135                           fsr1l	equ	0xFE1
  9136                           indf2	equ	0xFDF
  9137                           postinc2	equ	0xFDE
  9138                           postdec2	equ	0xFDD
  9139                           fsr2h	equ	0xFDA
  9140                           fsr2l	equ	0xFD9
  9141                           status	equ	0xFD8
  9142                           
  9143 ;; *************** function _Byte_SetByte *****************
  9144 ;; Defined at:
  9145 ;;		line 110 in file "Library/Types.c"
  9146 ;; Parameters:    Size  Location     Type
  9147 ;;  pInput          2    0[BANK0 ] PTR struct Byte
  9148 ;;		 -> SSP2CON2(1), SSP1CON2(1), TRISG(1), TRISF(1), 
  9149 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
  9150 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
  9151 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
  9152 ;;		 -> NULL(0), 
  9153 ;;  pValue          1    2[BANK0 ] unsigned char 
  9154 ;; Auto vars:     Size  Location     Type
  9155 ;;		None
  9156 ;; Return value:  Size  Location     Type
  9157 ;;                  1    wreg      void 
  9158 ;; Registers used:
  9159 ;;		fsr2l, fsr2h
  9160 ;; Tracked objects:
  9161 ;;		On entry : 0/0
  9162 ;;		On exit  : 0/0
  9163 ;;		Unchanged: 0/0
  9164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9165 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9168 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9169 ;;Total ram usage:        3 bytes
  9170 ;; Hardware stack levels used:    1
  9171 ;; Hardware stack levels required when called:    7
  9172 ;; This function calls:
  9173 ;;		Nothing
  9174 ;; This function is called by:
  9175 ;;		_Port_Set
  9176 ;;		_I2C_Init
  9177 ;; This function uses a non-reentrant model
  9178 ;;
  9179                           
  9180                           	psect	text38
  9181  014976                     __ptext38:
  9182                           	opt stack 0
  9183  014976                     _Byte_SetByte:
  9184                           	opt stack 20
  9185                           
  9186                           ;Types.c: 112: pInput->mBits = (pValue & 0xFF);
  9187                           
  9188                           ;incstack = 0
  9189  014976  C0B5  FFD9         	movff	Byte_SetByte@pInput,fsr2l
  9190  01497A  C0B6  FFDA         	movff	Byte_SetByte@pInput+1,fsr2h
  9191  01497E  C0B7  FFDF         	movff	Byte_SetByte@pValue,indf2
  9192  014982  0012               	return		;funcret
  9193  014984                     __end_of_Byte_SetByte:
  9194                           	opt stack 0
  9195                           tosu	equ	0xFFF
  9196                           tosh	equ	0xFFE
  9197                           tosl	equ	0xFFD
  9198                           pclath	equ	0xFFA
  9199                           tblptru	equ	0xFF8
  9200                           tblptrh	equ	0xFF7
  9201                           tblptrl	equ	0xFF6
  9202                           tablat	equ	0xFF5
  9203                           prodh	equ	0xFF4
  9204                           prodl	equ	0xFF3
  9205                           postinc0	equ	0xFEE
  9206                           wreg	equ	0xFE8
  9207                           indf1	equ	0xFE7
  9208                           postdec1	equ	0xFE5
  9209                           fsr1h	equ	0xFE2
  9210                           fsr1l	equ	0xFE1
  9211                           indf2	equ	0xFDF
  9212                           postinc2	equ	0xFDE
  9213                           postdec2	equ	0xFDD
  9214                           fsr2h	equ	0xFDA
  9215                           fsr2l	equ	0xFD9
  9216                           status	equ	0xFD8
  9217                           
  9218 ;; *************** function _GetPortTRIS *****************
  9219 ;; Defined at:
  9220 ;;		line 67 in file "Library/Port.c"
  9221 ;; Parameters:    Size  Location     Type
  9222 ;;  pInput          1    wreg     enum E6786
  9223 ;; Auto vars:     Size  Location     Type
  9224 ;;  pInput          1    2[BANK0 ] enum E6786
  9225 ;; Return value:  Size  Location     Type
  9226 ;;                  2    0[BANK0 ] PTR struct Byte
  9227 ;; Registers used:
  9228 ;;		wreg, status,2, status,0
  9229 ;; Tracked objects:
  9230 ;;		On entry : 0/0
  9231 ;;		On exit  : 0/0
  9232 ;;		Unchanged: 0/0
  9233 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9234 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9235 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9236 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9237 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9238 ;;Total ram usage:        3 bytes
  9239 ;; Hardware stack levels used:    1
  9240 ;; Hardware stack levels required when called:    7
  9241 ;; This function calls:
  9242 ;;		Nothing
  9243 ;; This function is called by:
  9244 ;;		_Port_Init
  9245 ;; This function uses a non-reentrant model
  9246 ;;
  9247                           
  9248                           	psect	text39
  9249  012F5C                     __ptext39:
  9250                           	opt stack 0
  9251  012F5C                     _GetPortTRIS:
  9252                           	opt stack 21
  9253                           
  9254                           ;incstack = 0
  9255                           ;GetPortTRIS@pInput stored from wreg
  9256  012F5C  0100               	movlb	0	; () banked
  9257  012F5E  6FB7               	movwf	GetPortTRIS@pInput& (0+255),b
  9258                           
  9259                           ;Port.c: 69: switch (pInput)
  9260  012F60  D038               	goto	l363
  9261  012F62                     
  9262                           ;Port.c: 72: return (BytePtr)&TRISA;
  9263  012F62  0E92               	movlw	146
  9264  012F64  0100               	movlb	0	; () banked
  9265  012F66  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9266  012F68  0E0F               	movlw	15
  9267  012F6A  0100               	movlb	0	; () banked
  9268  012F6C  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9269                           
  9270                           ; BSR set to: 0
  9271  012F6E  0012               	return	
  9272  012F70                     
  9273                           ; BSR set to: 0
  9274                           ;Port.c: 74: return (BytePtr)&TRISB;
  9275                           
  9276                           ; BSR set to: 0
  9277  012F70  0E93               	movlw	147
  9278  012F72  0100               	movlb	0	; () banked
  9279  012F74  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9280  012F76  0E0F               	movlw	15
  9281  012F78  0100               	movlb	0	; () banked
  9282  012F7A  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9283                           
  9284                           ; BSR set to: 0
  9285  012F7C  0012               	return	
  9286  012F7E                     
  9287                           ; BSR set to: 0
  9288                           ;Port.c: 76: return (BytePtr)&TRISC;
  9289                           
  9290                           ; BSR set to: 0
  9291  012F7E  0E94               	movlw	148
  9292  012F80  0100               	movlb	0	; () banked
  9293  012F82  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9294  012F84  0E0F               	movlw	15
  9295  012F86  0100               	movlb	0	; () banked
  9296  012F88  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9297                           
  9298                           ; BSR set to: 0
  9299  012F8A  0012               	return	
  9300  012F8C                     
  9301                           ; BSR set to: 0
  9302                           ;Port.c: 78: return (BytePtr)&TRISD;
  9303                           
  9304                           ; BSR set to: 0
  9305  012F8C  0E95               	movlw	149
  9306  012F8E  0100               	movlb	0	; () banked
  9307  012F90  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9308  012F92  0E0F               	movlw	15
  9309  012F94  0100               	movlb	0	; () banked
  9310  012F96  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9311                           
  9312                           ; BSR set to: 0
  9313  012F98  0012               	return	
  9314  012F9A                     
  9315                           ; BSR set to: 0
  9316                           ;Port.c: 80: return (BytePtr)&TRISE;
  9317                           
  9318                           ; BSR set to: 0
  9319  012F9A  0E96               	movlw	150
  9320  012F9C  0100               	movlb	0	; () banked
  9321  012F9E  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9322  012FA0  0E0F               	movlw	15
  9323  012FA2  0100               	movlb	0	; () banked
  9324  012FA4  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9325                           
  9326                           ; BSR set to: 0
  9327  012FA6  0012               	return	
  9328  012FA8                     
  9329                           ; BSR set to: 0
  9330                           ;Port.c: 82: return (BytePtr)&TRISF;
  9331                           
  9332                           ; BSR set to: 0
  9333  012FA8  0E97               	movlw	151
  9334  012FAA  0100               	movlb	0	; () banked
  9335  012FAC  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9336  012FAE  0E0F               	movlw	15
  9337  012FB0  0100               	movlb	0	; () banked
  9338  012FB2  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9339                           
  9340                           ; BSR set to: 0
  9341  012FB4  0012               	return	
  9342  012FB6                     
  9343                           ; BSR set to: 0
  9344                           ;Port.c: 84: return (BytePtr)&TRISG;
  9345                           
  9346                           ; BSR set to: 0
  9347  012FB6  0E98               	movlw	152
  9348  012FB8  0100               	movlb	0	; () banked
  9349  012FBA  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9350  012FBC  0E0F               	movlw	15
  9351  012FBE  0100               	movlb	0	; () banked
  9352  012FC0  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9353                           
  9354                           ; BSR set to: 0
  9355  012FC2  0012               	return	
  9356  012FC4                     
  9357                           ; BSR set to: 0
  9358                           ;Port.c: 86: return (void*)0;
  9359                           
  9360                           ; BSR set to: 0
  9361  012FC4  0E00               	movlw	0
  9362  012FC6  0100               	movlb	0	; () banked
  9363  012FC8  6FB5               	movwf	?_GetPortTRIS& (0+255),b
  9364  012FCA  0E00               	movlw	0
  9365  012FCC  0100               	movlb	0	; () banked
  9366  012FCE  6FB6               	movwf	(?_GetPortTRIS+1)& (0+255),b
  9367                           
  9368                           ; BSR set to: 0
  9369                           ;Port.c: 87: }
  9370                           
  9371                           ; BSR set to: 0
  9372  012FD0  0012               	return	
  9373  012FD2                     l363:
  9374                           
  9375                           ; BSR set to: 0
  9376  012FD2  0100               	movlb	0	; () banked
  9377  012FD4  51B7               	movf	GetPortTRIS@pInput& (0+255),w,b
  9378                           
  9379                           ; Switch size 1, requested type "space"
  9380                           ; Number of cases is 7, Range of values is 0 to 6
  9381                           ; switch strategies available:
  9382                           ; Name         Instructions Cycles
  9383                           ; simple_byte           22    12 (average)
  9384                           ;	Chosen strategy is simple_byte
  9385  012FD6  0A00               	xorlw	0	; case 0
  9386  012FD8  B4D8               	btfsc	status,2,c
  9387  012FDA  D7C3               	goto	l364
  9388  012FDC  0A01               	xorlw	1	; case 1
  9389  012FDE  B4D8               	btfsc	status,2,c
  9390  012FE0  D7C7               	goto	l366
  9391  012FE2  0A03               	xorlw	3	; case 2
  9392  012FE4  B4D8               	btfsc	status,2,c
  9393  012FE6  D7CB               	goto	l367
  9394  012FE8  0A01               	xorlw	1	; case 3
  9395  012FEA  B4D8               	btfsc	status,2,c
  9396  012FEC  D7CF               	goto	l368
  9397  012FEE  0A07               	xorlw	7	; case 4
  9398  012FF0  B4D8               	btfsc	status,2,c
  9399  012FF2  D7D3               	goto	l369
  9400  012FF4  0A01               	xorlw	1	; case 5
  9401  012FF6  B4D8               	btfsc	status,2,c
  9402  012FF8  D7D7               	goto	l370
  9403  012FFA  0A03               	xorlw	3	; case 6
  9404  012FFC  B4D8               	btfsc	status,2,c
  9405  012FFE  D7DB               	goto	l371
  9406  013000  D7E1               	goto	l372
  9407  013002                     __end_of_GetPortTRIS:
  9408                           	opt stack 0
  9409                           tosu	equ	0xFFF
  9410                           tosh	equ	0xFFE
  9411                           tosl	equ	0xFFD
  9412                           pclath	equ	0xFFA
  9413                           tblptru	equ	0xFF8
  9414                           tblptrh	equ	0xFF7
  9415                           tblptrl	equ	0xFF6
  9416                           tablat	equ	0xFF5
  9417                           prodh	equ	0xFF4
  9418                           prodl	equ	0xFF3
  9419                           postinc0	equ	0xFEE
  9420                           wreg	equ	0xFE8
  9421                           indf1	equ	0xFE7
  9422                           postdec1	equ	0xFE5
  9423                           fsr1h	equ	0xFE2
  9424                           fsr1l	equ	0xFE1
  9425                           indf2	equ	0xFDF
  9426                           postinc2	equ	0xFDE
  9427                           postdec2	equ	0xFDD
  9428                           fsr2h	equ	0xFDA
  9429                           fsr2l	equ	0xFD9
  9430                           status	equ	0xFD8
  9431                           
  9432 ;; *************** function _GetPortProperties *****************
  9433 ;; Defined at:
  9434 ;;		line 21 in file "Library/Port.c"
  9435 ;; Parameters:    Size  Location     Type
  9436 ;;  pInput          1    wreg     enum E6786
  9437 ;; Auto vars:     Size  Location     Type
  9438 ;;  pInput          1    2[BANK0 ] enum E6786
  9439 ;; Return value:  Size  Location     Type
  9440 ;;                  2    0[BANK0 ] PTR struct PortProperty
  9441 ;; Registers used:
  9442 ;;		wreg, status,2, status,0
  9443 ;; Tracked objects:
  9444 ;;		On entry : 0/0
  9445 ;;		On exit  : 0/0
  9446 ;;		Unchanged: 0/0
  9447 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9448 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9449 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9450 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9451 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9452 ;;Total ram usage:        3 bytes
  9453 ;; Hardware stack levels used:    1
  9454 ;; Hardware stack levels required when called:    7
  9455 ;; This function calls:
  9456 ;;		Nothing
  9457 ;; This function is called by:
  9458 ;;		_Port_Init
  9459 ;; This function uses a non-reentrant model
  9460 ;;
  9461                           
  9462                           	psect	text40
  9463  013002                     __ptext40:
  9464                           	opt stack 0
  9465  013002                     _GetPortProperties:
  9466                           	opt stack 21
  9467                           
  9468                           ; BSR set to: 0
  9469                           ;incstack = 0
  9470                           ;GetPortProperties@pInput stored from wreg
  9471  013002  0100               	movlb	0	; () banked
  9472  013004  6FB7               	movwf	GetPortProperties@pInput& (0+255),b
  9473                           
  9474                           ;Port.c: 23: switch (pInput)
  9475  013006  D038               	goto	l337
  9476  013008                     
  9477                           ;Port.c: 26: return (PortPropertyPtr)&PortA_Property;
  9478  013008  0EBD               	movlw	low _PortA_Property
  9479  01300A  0100               	movlb	0	; () banked
  9480  01300C  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9481  01300E  0EFF               	movlw	high _PortA_Property
  9482  013010  0100               	movlb	0	; () banked
  9483  013012  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9484                           
  9485                           ; BSR set to: 0
  9486  013014  0012               	return	
  9487  013016                     
  9488                           ; BSR set to: 0
  9489                           ;Port.c: 28: return (PortPropertyPtr)&PortB_Property;
  9490                           
  9491                           ; BSR set to: 0
  9492  013016  0EBB               	movlw	low _PortB_Property
  9493  013018  0100               	movlb	0	; () banked
  9494  01301A  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9495  01301C  0EFF               	movlw	high _PortB_Property
  9496  01301E  0100               	movlb	0	; () banked
  9497  013020  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9498                           
  9499                           ; BSR set to: 0
  9500  013022  0012               	return	
  9501  013024                     
  9502                           ; BSR set to: 0
  9503                           ;Port.c: 30: return (PortPropertyPtr)&PortC_Property;
  9504                           
  9505                           ; BSR set to: 0
  9506  013024  0EB9               	movlw	low _PortC_Property
  9507  013026  0100               	movlb	0	; () banked
  9508  013028  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9509  01302A  0EFF               	movlw	high _PortC_Property
  9510  01302C  0100               	movlb	0	; () banked
  9511  01302E  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9512                           
  9513                           ; BSR set to: 0
  9514  013030  0012               	return	
  9515  013032                     
  9516                           ; BSR set to: 0
  9517                           ;Port.c: 32: return (PortPropertyPtr)&PortD_Property;
  9518                           
  9519                           ; BSR set to: 0
  9520  013032  0EB7               	movlw	low _PortD_Property
  9521  013034  0100               	movlb	0	; () banked
  9522  013036  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9523  013038  0EFF               	movlw	high _PortD_Property
  9524  01303A  0100               	movlb	0	; () banked
  9525  01303C  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9526                           
  9527                           ; BSR set to: 0
  9528  01303E  0012               	return	
  9529  013040                     
  9530                           ; BSR set to: 0
  9531                           ;Port.c: 34: return (PortPropertyPtr)&PortE_Property;
  9532                           
  9533                           ; BSR set to: 0
  9534  013040  0EB5               	movlw	low _PortE_Property
  9535  013042  0100               	movlb	0	; () banked
  9536  013044  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9537  013046  0EFF               	movlw	high _PortE_Property
  9538  013048  0100               	movlb	0	; () banked
  9539  01304A  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9540                           
  9541                           ; BSR set to: 0
  9542  01304C  0012               	return	
  9543  01304E                     
  9544                           ; BSR set to: 0
  9545                           ;Port.c: 36: return (PortPropertyPtr)&PortF_Property;
  9546                           
  9547                           ; BSR set to: 0
  9548  01304E  0EB3               	movlw	low _PortF_Property
  9549  013050  0100               	movlb	0	; () banked
  9550  013052  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9551  013054  0EFF               	movlw	high _PortF_Property
  9552  013056  0100               	movlb	0	; () banked
  9553  013058  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9554                           
  9555                           ; BSR set to: 0
  9556  01305A  0012               	return	
  9557  01305C                     
  9558                           ; BSR set to: 0
  9559                           ;Port.c: 38: return (PortPropertyPtr)&PortG_Property;
  9560                           
  9561                           ; BSR set to: 0
  9562  01305C  0EB1               	movlw	low _PortG_Property
  9563  01305E  0100               	movlb	0	; () banked
  9564  013060  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9565  013062  0EFF               	movlw	high _PortG_Property
  9566  013064  0100               	movlb	0	; () banked
  9567  013066  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9568                           
  9569                           ; BSR set to: 0
  9570  013068  0012               	return	
  9571  01306A                     
  9572                           ; BSR set to: 0
  9573                           ;Port.c: 40: return (void*)0;
  9574                           
  9575                           ; BSR set to: 0
  9576  01306A  0E00               	movlw	0
  9577  01306C  0100               	movlb	0	; () banked
  9578  01306E  6FB5               	movwf	?_GetPortProperties& (0+255),b
  9579  013070  0E00               	movlw	0
  9580  013072  0100               	movlb	0	; () banked
  9581  013074  6FB6               	movwf	(?_GetPortProperties+1)& (0+255),b
  9582                           
  9583                           ; BSR set to: 0
  9584                           ;Port.c: 41: }
  9585                           
  9586                           ; BSR set to: 0
  9587  013076  0012               	return	
  9588  013078                     l337:
  9589                           
  9590                           ; BSR set to: 0
  9591  013078  0100               	movlb	0	; () banked
  9592  01307A  51B7               	movf	GetPortProperties@pInput& (0+255),w,b
  9593                           
  9594                           ; Switch size 1, requested type "space"
  9595                           ; Number of cases is 7, Range of values is 0 to 6
  9596                           ; switch strategies available:
  9597                           ; Name         Instructions Cycles
  9598                           ; simple_byte           22    12 (average)
  9599                           ;	Chosen strategy is simple_byte
  9600  01307C  0A00               	xorlw	0	; case 0
  9601  01307E  B4D8               	btfsc	status,2,c
  9602  013080  D7C3               	goto	l338
  9603  013082  0A01               	xorlw	1	; case 1
  9604  013084  B4D8               	btfsc	status,2,c
  9605  013086  D7C7               	goto	l340
  9606  013088  0A03               	xorlw	3	; case 2
  9607  01308A  B4D8               	btfsc	status,2,c
  9608  01308C  D7CB               	goto	l341
  9609  01308E  0A01               	xorlw	1	; case 3
  9610  013090  B4D8               	btfsc	status,2,c
  9611  013092  D7CF               	goto	l342
  9612  013094  0A07               	xorlw	7	; case 4
  9613  013096  B4D8               	btfsc	status,2,c
  9614  013098  D7D3               	goto	l343
  9615  01309A  0A01               	xorlw	1	; case 5
  9616  01309C  B4D8               	btfsc	status,2,c
  9617  01309E  D7D7               	goto	l344
  9618  0130A0  0A03               	xorlw	3	; case 6
  9619  0130A2  B4D8               	btfsc	status,2,c
  9620  0130A4  D7DB               	goto	l345
  9621  0130A6  D7E1               	goto	l346
  9622  0130A8                     __end_of_GetPortProperties:
  9623                           	opt stack 0
  9624                           tosu	equ	0xFFF
  9625                           tosh	equ	0xFFE
  9626                           tosl	equ	0xFFD
  9627                           pclath	equ	0xFFA
  9628                           tblptru	equ	0xFF8
  9629                           tblptrh	equ	0xFF7
  9630                           tblptrl	equ	0xFF6
  9631                           tablat	equ	0xFF5
  9632                           prodh	equ	0xFF4
  9633                           prodl	equ	0xFF3
  9634                           postinc0	equ	0xFEE
  9635                           wreg	equ	0xFE8
  9636                           indf1	equ	0xFE7
  9637                           postdec1	equ	0xFE5
  9638                           fsr1h	equ	0xFE2
  9639                           fsr1l	equ	0xFE1
  9640                           indf2	equ	0xFDF
  9641                           postinc2	equ	0xFDE
  9642                           postdec2	equ	0xFDD
  9643                           fsr2h	equ	0xFDA
  9644                           fsr2l	equ	0xFD9
  9645                           status	equ	0xFD8
  9646                           
  9647 ;; *************** function _GetPortPORT *****************
  9648 ;; Defined at:
  9649 ;;		line 44 in file "Library/Port.c"
  9650 ;; Parameters:    Size  Location     Type
  9651 ;;  pInput          1    wreg     enum E6786
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  pInput          1    2[BANK0 ] enum E6786
  9654 ;; Return value:  Size  Location     Type
  9655 ;;                  2    0[BANK0 ] PTR struct Byte
  9656 ;; Registers used:
  9657 ;;		wreg, status,2, status,0
  9658 ;; Tracked objects:
  9659 ;;		On entry : 0/0
  9660 ;;		On exit  : 0/0
  9661 ;;		Unchanged: 0/0
  9662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9663 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9664 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9665 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9666 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9667 ;;Total ram usage:        3 bytes
  9668 ;; Hardware stack levels used:    1
  9669 ;; Hardware stack levels required when called:    7
  9670 ;; This function calls:
  9671 ;;		Nothing
  9672 ;; This function is called by:
  9673 ;;		_Port_Init
  9674 ;; This function uses a non-reentrant model
  9675 ;;
  9676                           
  9677                           	psect	text41
  9678  0130A8                     __ptext41:
  9679                           	opt stack 0
  9680  0130A8                     _GetPortPORT:
  9681                           	opt stack 21
  9682                           
  9683                           ; BSR set to: 0
  9684                           ;incstack = 0
  9685                           ;GetPortPORT@pInput stored from wreg
  9686  0130A8  0100               	movlb	0	; () banked
  9687  0130AA  6FB7               	movwf	GetPortPORT@pInput& (0+255),b
  9688                           
  9689                           ;Port.c: 46: switch (pInput)
  9690  0130AC  D038               	goto	l350
  9691  0130AE                     
  9692                           ;Port.c: 49: return (BytePtr)&PORTA;
  9693  0130AE  0E80               	movlw	128
  9694  0130B0  0100               	movlb	0	; () banked
  9695  0130B2  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9696  0130B4  0E0F               	movlw	15
  9697  0130B6  0100               	movlb	0	; () banked
  9698  0130B8  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9699                           
  9700                           ; BSR set to: 0
  9701  0130BA  0012               	return	
  9702  0130BC                     
  9703                           ; BSR set to: 0
  9704                           ;Port.c: 51: return (BytePtr)&PORTB;
  9705                           
  9706                           ; BSR set to: 0
  9707  0130BC  0E81               	movlw	129
  9708  0130BE  0100               	movlb	0	; () banked
  9709  0130C0  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9710  0130C2  0E0F               	movlw	15
  9711  0130C4  0100               	movlb	0	; () banked
  9712  0130C6  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9713                           
  9714                           ; BSR set to: 0
  9715  0130C8  0012               	return	
  9716  0130CA                     
  9717                           ; BSR set to: 0
  9718                           ;Port.c: 53: return (BytePtr)&PORTC;
  9719                           
  9720                           ; BSR set to: 0
  9721  0130CA  0E82               	movlw	130
  9722  0130CC  0100               	movlb	0	; () banked
  9723  0130CE  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9724  0130D0  0E0F               	movlw	15
  9725  0130D2  0100               	movlb	0	; () banked
  9726  0130D4  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9727                           
  9728                           ; BSR set to: 0
  9729  0130D6  0012               	return	
  9730  0130D8                     
  9731                           ; BSR set to: 0
  9732                           ;Port.c: 55: return (BytePtr)&PORTD;
  9733                           
  9734                           ; BSR set to: 0
  9735  0130D8  0E83               	movlw	131
  9736  0130DA  0100               	movlb	0	; () banked
  9737  0130DC  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9738  0130DE  0E0F               	movlw	15
  9739  0130E0  0100               	movlb	0	; () banked
  9740  0130E2  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9741                           
  9742                           ; BSR set to: 0
  9743  0130E4  0012               	return	
  9744  0130E6                     
  9745                           ; BSR set to: 0
  9746                           ;Port.c: 57: return (BytePtr)&PORTE;
  9747                           
  9748                           ; BSR set to: 0
  9749  0130E6  0E84               	movlw	132
  9750  0130E8  0100               	movlb	0	; () banked
  9751  0130EA  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9752  0130EC  0E0F               	movlw	15
  9753  0130EE  0100               	movlb	0	; () banked
  9754  0130F0  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9755                           
  9756                           ; BSR set to: 0
  9757  0130F2  0012               	return	
  9758  0130F4                     
  9759                           ; BSR set to: 0
  9760                           ;Port.c: 59: return (BytePtr)&PORTF;
  9761                           
  9762                           ; BSR set to: 0
  9763  0130F4  0E85               	movlw	133
  9764  0130F6  0100               	movlb	0	; () banked
  9765  0130F8  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9766  0130FA  0E0F               	movlw	15
  9767  0130FC  0100               	movlb	0	; () banked
  9768  0130FE  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9769                           
  9770                           ; BSR set to: 0
  9771  013100  0012               	return	
  9772  013102                     
  9773                           ; BSR set to: 0
  9774                           ;Port.c: 61: return (BytePtr)&PORTG;
  9775                           
  9776                           ; BSR set to: 0
  9777  013102  0E86               	movlw	134
  9778  013104  0100               	movlb	0	; () banked
  9779  013106  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9780  013108  0E0F               	movlw	15
  9781  01310A  0100               	movlb	0	; () banked
  9782  01310C  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9783                           
  9784                           ; BSR set to: 0
  9785  01310E  0012               	return	
  9786  013110                     
  9787                           ; BSR set to: 0
  9788                           ;Port.c: 63: return (void*)0;
  9789                           
  9790                           ; BSR set to: 0
  9791  013110  0E00               	movlw	0
  9792  013112  0100               	movlb	0	; () banked
  9793  013114  6FB5               	movwf	?_GetPortPORT& (0+255),b
  9794  013116  0E00               	movlw	0
  9795  013118  0100               	movlb	0	; () banked
  9796  01311A  6FB6               	movwf	(?_GetPortPORT+1)& (0+255),b
  9797                           
  9798                           ; BSR set to: 0
  9799                           ;Port.c: 64: }
  9800                           
  9801                           ; BSR set to: 0
  9802  01311C  0012               	return	
  9803  01311E                     l350:
  9804                           
  9805                           ; BSR set to: 0
  9806  01311E  0100               	movlb	0	; () banked
  9807  013120  51B7               	movf	GetPortPORT@pInput& (0+255),w,b
  9808                           
  9809                           ; Switch size 1, requested type "space"
  9810                           ; Number of cases is 7, Range of values is 0 to 6
  9811                           ; switch strategies available:
  9812                           ; Name         Instructions Cycles
  9813                           ; simple_byte           22    12 (average)
  9814                           ;	Chosen strategy is simple_byte
  9815  013122  0A00               	xorlw	0	; case 0
  9816  013124  B4D8               	btfsc	status,2,c
  9817  013126  D7C3               	goto	l351
  9818  013128  0A01               	xorlw	1	; case 1
  9819  01312A  B4D8               	btfsc	status,2,c
  9820  01312C  D7C7               	goto	l353
  9821  01312E  0A03               	xorlw	3	; case 2
  9822  013130  B4D8               	btfsc	status,2,c
  9823  013132  D7CB               	goto	l354
  9824  013134  0A01               	xorlw	1	; case 3
  9825  013136  B4D8               	btfsc	status,2,c
  9826  013138  D7CF               	goto	l355
  9827  01313A  0A07               	xorlw	7	; case 4
  9828  01313C  B4D8               	btfsc	status,2,c
  9829  01313E  D7D3               	goto	l356
  9830  013140  0A01               	xorlw	1	; case 5
  9831  013142  B4D8               	btfsc	status,2,c
  9832  013144  D7D7               	goto	l357
  9833  013146  0A03               	xorlw	3	; case 6
  9834  013148  B4D8               	btfsc	status,2,c
  9835  01314A  D7DB               	goto	l358
  9836  01314C  D7E1               	goto	l359
  9837  01314E                     __end_of_GetPortPORT:
  9838                           	opt stack 0
  9839                           tosu	equ	0xFFF
  9840                           tosh	equ	0xFFE
  9841                           tosl	equ	0xFFD
  9842                           pclath	equ	0xFFA
  9843                           tblptru	equ	0xFF8
  9844                           tblptrh	equ	0xFF7
  9845                           tblptrl	equ	0xFF6
  9846                           tablat	equ	0xFF5
  9847                           prodh	equ	0xFF4
  9848                           prodl	equ	0xFF3
  9849                           postinc0	equ	0xFEE
  9850                           wreg	equ	0xFE8
  9851                           indf1	equ	0xFE7
  9852                           postdec1	equ	0xFE5
  9853                           fsr1h	equ	0xFE2
  9854                           fsr1l	equ	0xFE1
  9855                           indf2	equ	0xFDF
  9856                           postinc2	equ	0xFDE
  9857                           postdec2	equ	0xFDD
  9858                           fsr2h	equ	0xFDA
  9859                           fsr2l	equ	0xFD9
  9860                           status	equ	0xFD8
  9861                           
  9862 ;; *************** function _LED_Init *****************
  9863 ;; Defined at:
  9864 ;;		line 15 in file "Library/LED.c"
  9865 ;; Parameters:    Size  Location     Type
  9866 ;;  pLED            1    wreg     enum E6739
  9867 ;; Auto vars:     Size  Location     Type
  9868 ;;  pLED            1   45[BANK0 ] enum E6739
  9869 ;; Return value:  Size  Location     Type
  9870 ;;                  1    wreg      void 
  9871 ;; Registers used:
  9872 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  9873 ;; Tracked objects:
  9874 ;;		On entry : 0/0
  9875 ;;		On exit  : 0/0
  9876 ;;		Unchanged: 0/0
  9877 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9878 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9879 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9880 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9881 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9882 ;;Total ram usage:        1 bytes
  9883 ;; Hardware stack levels used:    1
  9884 ;; Hardware stack levels required when called:   12
  9885 ;; This function calls:
  9886 ;;		_LED_Set
  9887 ;;		_Port_SetPinType
  9888 ;; This function is called by:
  9889 ;;		_MXK_Init
  9890 ;; This function uses a non-reentrant model
  9891 ;;
  9892                           
  9893                           	psect	text42
  9894  013D52                     __ptext42:
  9895                           	opt stack 0
  9896  013D52                     _LED_Init:
  9897                           	opt stack 17
  9898                           
  9899                           ; BSR set to: 0
  9900                           ;incstack = 0
  9901                           ;LED_Init@pLED stored from wreg
  9902  013D52  0100               	movlb	0	; () banked
  9903  013D54  6FE2               	movwf	LED_Init@pLED& (0+255),b
  9904                           
  9905                           ;LED.c: 17: switch (pLED)
  9906  013D56  D01E               	goto	l220
  9907  013D58                     
  9908                           ;LED.c: 20: Port_SetPinType(&PortC, eP0, eTypeOutputPushPull);
  9909  013D58  0EA3               	movlw	low _PortC
  9910  013D5A  0100               	movlb	0	; () banked
  9911  013D5C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9912  013D5E  0E00               	movlw	high _PortC
  9913  013D60  0100               	movlb	0	; () banked
  9914  013D62  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9915  013D64  0E00               	movlw	0
  9916  013D66  0100               	movlb	0	; () banked
  9917  013D68  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9918  013D6A  0E03               	movlw	3
  9919  013D6C  0100               	movlb	0	; () banked
  9920  013D6E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9921  013D70  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  9922                           
  9923                           ;LED.c: 21: break;
  9924  013D74  D017               	goto	l222
  9925  013D76                     
  9926                           ;LED.c: 23: Port_SetPinType(&PortC, eP1, eTypeOutputPushPull);
  9927  013D76  0EA3               	movlw	low _PortC
  9928  013D78  0100               	movlb	0	; () banked
  9929  013D7A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
  9930  013D7C  0E00               	movlw	high _PortC
  9931  013D7E  0100               	movlb	0	; () banked
  9932  013D80  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
  9933  013D82  0E01               	movlw	1
  9934  013D84  0100               	movlb	0	; () banked
  9935  013D86  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
  9936  013D88  0E03               	movlw	3
  9937  013D8A  0100               	movlb	0	; () banked
  9938  013D8C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
  9939  013D8E  EC3D  F08B         	call	_Port_SetPinType	;wreg free
  9940                           
  9941                           ;LED.c: 25: }
  9942                           
  9943                           ;LED.c: 24: break;
  9944  013D92  D008               	goto	l222
  9945  013D94                     l220:
  9946  013D94  0100               	movlb	0	; () banked
  9947  013D96  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9948                           
  9949                           ; Switch size 1, requested type "space"
  9950                           ; Number of cases is 2, Range of values is 0 to 1
  9951                           ; switch strategies available:
  9952                           ; Name         Instructions Cycles
  9953                           ; simple_byte            7     4 (average)
  9954                           ;	Chosen strategy is simple_byte
  9955  013D98  0A00               	xorlw	0	; case 0
  9956  013D9A  B4D8               	btfsc	status,2,c
  9957  013D9C  D7DD               	goto	l221
  9958  013D9E  0A01               	xorlw	1	; case 1
  9959  013DA0  B4D8               	btfsc	status,2,c
  9960  013DA2  D7E9               	goto	l223
  9961  013DA4                     l222:
  9962                           
  9963                           ;LED.c: 26: LED_Set(pLED, 0);
  9964                           
  9965                           ; BSR set to: 0
  9966  013DA4  0E00               	movlw	0
  9967  013DA6  0100               	movlb	0	; () banked
  9968  013DA8  6FC9               	movwf	LED_Set@pValue& (0+255),b
  9969  013DAA  0100               	movlb	0	; () banked
  9970  013DAC  51E2               	movf	LED_Init@pLED& (0+255),w,b
  9971  013DAE  ECE7  F09F         	call	_LED_Set
  9972  013DB2  0012               	return		;funcret
  9973  013DB4                     __end_of_LED_Init:
  9974                           	opt stack 0
  9975                           tosu	equ	0xFFF
  9976                           tosh	equ	0xFFE
  9977                           tosl	equ	0xFFD
  9978                           pclath	equ	0xFFA
  9979                           tblptru	equ	0xFF8
  9980                           tblptrh	equ	0xFF7
  9981                           tblptrl	equ	0xFF6
  9982                           tablat	equ	0xFF5
  9983                           prodh	equ	0xFF4
  9984                           prodl	equ	0xFF3
  9985                           postinc0	equ	0xFEE
  9986                           wreg	equ	0xFE8
  9987                           indf1	equ	0xFE7
  9988                           postdec1	equ	0xFE5
  9989                           fsr1h	equ	0xFE2
  9990                           fsr1l	equ	0xFE1
  9991                           indf2	equ	0xFDF
  9992                           postinc2	equ	0xFDE
  9993                           postdec2	equ	0xFDD
  9994                           fsr2h	equ	0xFDA
  9995                           fsr2l	equ	0xFD9
  9996                           status	equ	0xFD8
  9997                           
  9998 ;; *************** function _LED_Set *****************
  9999 ;; Defined at:
 10000 ;;		line 33 in file "Library/LED.c"
 10001 ;; Parameters:    Size  Location     Type
 10002 ;;  pLED            1    wreg     enum E6739
 10003 ;;  pValue          1   20[BANK0 ] unsigned char 
 10004 ;; Auto vars:     Size  Location     Type
 10005 ;;  pLED            1   21[BANK0 ] enum E6739
 10006 ;; Return value:  Size  Location     Type
 10007 ;;                  1    wreg      void 
 10008 ;; Registers used:
 10009 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10010 ;; Tracked objects:
 10011 ;;		On entry : 0/0
 10012 ;;		On exit  : 0/0
 10013 ;;		Unchanged: 0/0
 10014 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10015 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10016 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10017 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10018 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10019 ;;Total ram usage:        2 bytes
 10020 ;; Hardware stack levels used:    1
 10021 ;; Hardware stack levels required when called:   11
 10022 ;; This function calls:
 10023 ;;		_Port_SetPin
 10024 ;; This function is called by:
 10025 ;;		_LED_Init
 10026 ;;		_SYSTEM_Initialize
 10027 ;; This function uses a non-reentrant model
 10028 ;;
 10029                           
 10030                           	psect	text43
 10031  013FCE                     __ptext43:
 10032                           	opt stack 0
 10033  013FCE                     _LED_Set:
 10034                           	opt stack 17
 10035                           
 10036                           ;incstack = 0
 10037                           ;LED_Set@pLED stored from wreg
 10038  013FCE  0100               	movlb	0	; () banked
 10039  013FD0  6FCA               	movwf	LED_Set@pLED& (0+255),b
 10040                           
 10041                           ;LED.c: 35: switch (pLED)
 10042  013FD2  D01C               	goto	l227
 10043  013FD4                     
 10044                           ;LED.c: 38: Port_SetPin(&PortC, eP0, pValue);
 10045  013FD4  0EA3               	movlw	low _PortC
 10046  013FD6  0100               	movlb	0	; () banked
 10047  013FD8  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10048  013FDA  0E00               	movlw	high _PortC
 10049  013FDC  0100               	movlb	0	; () banked
 10050  013FDE  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10051  013FE0  0E00               	movlw	0
 10052  013FE2  0100               	movlb	0	; () banked
 10053  013FE4  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10054  013FE6  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 10055  013FEA  EC1D  F094         	call	_Port_SetPin	;wreg free
 10056                           
 10057                           ;LED.c: 39: break;
 10058  013FEE  0012               	return	
 10059  013FF0                     
 10060                           ;LED.c: 41: Port_SetPin(&PortC, eP1, pValue);
 10061  013FF0  0EA3               	movlw	low _PortC
 10062  013FF2  0100               	movlb	0	; () banked
 10063  013FF4  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10064  013FF6  0E00               	movlw	high _PortC
 10065  013FF8  0100               	movlb	0	; () banked
 10066  013FFA  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10067  013FFC  0E01               	movlw	1
 10068  013FFE  0100               	movlb	0	; () banked
 10069  014000  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10070  014002  C0C9  F0C7         	movff	LED_Set@pValue,Port_SetPin@pValue
 10071  014006  EC1D  F094         	call	_Port_SetPin	;wreg free
 10072                           
 10073                           ;LED.c: 43: }
 10074                           
 10075                           ;LED.c: 42: break;
 10076  01400A  0012               	return	
 10077  01400C                     l227:
 10078  01400C  0100               	movlb	0	; () banked
 10079  01400E  51CA               	movf	LED_Set@pLED& (0+255),w,b
 10080                           
 10081                           ; Switch size 1, requested type "space"
 10082                           ; Number of cases is 2, Range of values is 0 to 1
 10083                           ; switch strategies available:
 10084                           ; Name         Instructions Cycles
 10085                           ; simple_byte            7     4 (average)
 10086                           ;	Chosen strategy is simple_byte
 10087  014010  0A00               	xorlw	0	; case 0
 10088  014012  B4D8               	btfsc	status,2,c
 10089  014014  D7DF               	goto	l228
 10090  014016  0A01               	xorlw	1	; case 1
 10091  014018  A4D8               	btfss	status,2,c
 10092  01401A  0012               	return	
 10093  01401C  D7E9               	goto	l230
 10094  01401E                     __end_of_LED_Set:
 10095                           	opt stack 0
 10096                           tosu	equ	0xFFF
 10097                           tosh	equ	0xFFE
 10098                           tosl	equ	0xFFD
 10099                           pclath	equ	0xFFA
 10100                           tblptru	equ	0xFF8
 10101                           tblptrh	equ	0xFF7
 10102                           tblptrl	equ	0xFF6
 10103                           tablat	equ	0xFF5
 10104                           prodh	equ	0xFF4
 10105                           prodl	equ	0xFF3
 10106                           postinc0	equ	0xFEE
 10107                           wreg	equ	0xFE8
 10108                           indf1	equ	0xFE7
 10109                           postdec1	equ	0xFE5
 10110                           fsr1h	equ	0xFE2
 10111                           fsr1l	equ	0xFE1
 10112                           indf2	equ	0xFDF
 10113                           postinc2	equ	0xFDE
 10114                           postdec2	equ	0xFDD
 10115                           fsr2h	equ	0xFDA
 10116                           fsr2l	equ	0xFD9
 10117                           status	equ	0xFD8
 10118                           
 10119 ;; *************** function _MXK_Dequeue *****************
 10120 ;; Defined at:
 10121 ;;		line 153 in file "Library/MXK.c"
 10122 ;; Parameters:    Size  Location     Type
 10123 ;;		None
 10124 ;; Auto vars:     Size  Location     Type
 10125 ;;		None
 10126 ;; Return value:  Size  Location     Type
 10127 ;;                  1    wreg      void 
 10128 ;; Registers used:
 10129 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10130 ;; Tracked objects:
 10131 ;;		On entry : 0/0
 10132 ;;		On exit  : 0/0
 10133 ;;		Unchanged: 0/0
 10134 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10137 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10138 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10139 ;;Total ram usage:        0 bytes
 10140 ;; Hardware stack levels used:    1
 10141 ;; Hardware stack levels required when called:   12
 10142 ;; This function calls:
 10143 ;;		Absolute function
 10144 ;;		_Motor_Step
 10145 ;; This function is called by:
 10146 ;;		_main
 10147 ;; This function uses a non-reentrant model
 10148 ;;
 10149                           
 10150                           	psect	text44
 10151  01436C                     __ptext44:
 10152                           	opt stack 0
 10153  01436C                     _MXK_Dequeue:
 10154                           	opt stack 18
 10155                           
 10156                           ;MXK.c: 155: if (lQueue)
 10157                           
 10158                           ;incstack = 0
 10159  01436C  0100               	movlb	0	; () banked
 10160  01436E  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10161  014370  0100               	movlb	0	; () banked
 10162  014372  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10163  014374  0100               	movlb	0	; () banked
 10164  014376  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10165  014378  B4D8               	btfsc	status,2,c
 10166  01437A  D00D               	goto	u9309
 10167                           
 10168                           ; BSR set to: 0
 10169                           ;MXK.c: 156: lQueue();
 10170  01437C  D801               	call	u9308
 10171  01437E  D00B               	goto	u9309
 10172  014380                     u9308:
 10173  014380  0005               	push	
 10174  014382  6EFA               	movwf	pclath,c
 10175  014384  0100               	movlb	0	; () banked
 10176  014386  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10177  014388  6EFD               	movwf	tosl,c
 10178  01438A  5170               	movf	(_lQueue+1)& (0+255),w,b	;volatile
 10179  01438C  6EFE               	movwf	tosh,c
 10180  01438E  5171               	movf	(_lQueue+2)& (0+255),w,b	;volatile
 10181  014390  6EFF               	movwf	tosu,c
 10182  014392  50FA               	movf	pclath,w,c
 10183  014394  0012               	return		;indir
 10184  014396                     u9309:
 10185                           
 10186                           ;MXK.c: 157: lQueue = 0;
 10187  014396  0E00               	movlw	0
 10188  014398  0100               	movlb	0	; () banked
 10189  01439A  6F6F               	movwf	_lQueue& (0+255),b	;volatile
 10190  01439C  0E00               	movlw	0
 10191  01439E  0100               	movlb	0	; () banked
 10192  0143A0  6F70               	movwf	(_lQueue+1)& (0+255),b	;volatile
 10193  0143A2  0E00               	movlw	0
 10194  0143A4  0100               	movlb	0	; () banked
 10195  0143A6  6F71               	movwf	(_lQueue+2)& (0+255),b	;volatile
 10196                           
 10197                           ; BSR set to: 0
 10198  0143A8  0012               	return		;funcret
 10199  0143AA                     __end_of_MXK_Dequeue:
 10200                           	opt stack 0
 10201                           tosu	equ	0xFFF
 10202                           tosh	equ	0xFFE
 10203                           tosl	equ	0xFFD
 10204                           pclath	equ	0xFFA
 10205                           tblptru	equ	0xFF8
 10206                           tblptrh	equ	0xFF7
 10207                           tblptrl	equ	0xFF6
 10208                           tablat	equ	0xFF5
 10209                           prodh	equ	0xFF4
 10210                           prodl	equ	0xFF3
 10211                           postinc0	equ	0xFEE
 10212                           wreg	equ	0xFE8
 10213                           indf1	equ	0xFE7
 10214                           postdec1	equ	0xFE5
 10215                           fsr1h	equ	0xFE2
 10216                           fsr1l	equ	0xFE1
 10217                           indf2	equ	0xFDF
 10218                           postinc2	equ	0xFDE
 10219                           postdec2	equ	0xFDD
 10220                           fsr2h	equ	0xFDA
 10221                           fsr2l	equ	0xFD9
 10222                           status	equ	0xFD8
 10223                           
 10224 ;; *************** function _Motor_Step *****************
 10225 ;; Defined at:
 10226 ;;		line 75 in file "Library/Motor.c"
 10227 ;; Parameters:    Size  Location     Type
 10228 ;;		None
 10229 ;; Auto vars:     Size  Location     Type
 10230 ;;		None
 10231 ;; Return value:  Size  Location     Type
 10232 ;;                  1    wreg      void 
 10233 ;; Registers used:
 10234 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10235 ;; Tracked objects:
 10236 ;;		On entry : 0/0
 10237 ;;		On exit  : 0/0
 10238 ;;		Unchanged: 0/0
 10239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10240 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10241 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10242 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10243 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10244 ;;Total ram usage:        2 bytes
 10245 ;; Hardware stack levels used:    1
 10246 ;; Hardware stack levels required when called:   11
 10247 ;; This function calls:
 10248 ;;		_MXK_Queue
 10249 ;;		_MXK_Release
 10250 ;;		_MXK_SwitchTo
 10251 ;;		_Port_SetPin
 10252 ;;		_Timer0_Restart
 10253 ;;		_Timer0_Stop
 10254 ;; This function is called by:
 10255 ;;		_Motor_Init
 10256 ;;		_Timer0_ISR
 10257 ;;		_MXK_Dequeue
 10258 ;; This function uses a non-reentrant model
 10259 ;;
 10260                           
 10261                           	psect	text45
 10262  0122A8                     __ptext45:
 10263                           	opt stack 0
 10264  0122A8                     _Motor_Step:
 10265                           	opt stack 0
 10266                           
 10267                           ; BSR set to: 0
 10268                           ;Skip over the trampoline to the duplicate function for level 2
 10269  0122A8  B251               	btfsc	btemp,1,c
 10270  0122AA  EFE7  F091         	goto	i2_Motor_Step
 10271  0122AE                     _Motor_Step$intlevel0:
 10272                           	opt stack 18
 10273                           
 10274                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 10275                           
 10276                           ;incstack = 0
 10277  0122AE  0100               	movlb	0	; () banked
 10278  0122B0  EE20 F004          	lfsr	2,4
 10279  0122B4  517D               	movf	_lMotor& (0+255),w,b
 10280  0122B6  26D9               	addwf	fsr2l,f,c
 10281  0122B8  517E               	movf	(_lMotor+1)& (0+255),w,b
 10282  0122BA  22DA               	addwfc	fsr2h,f,c
 10283  0122BC  50DF               	movf	indf2,w,c
 10284  0122BE  EC55  F0A1         	call	_MXK_SwitchTo
 10285  0122C2  0900               	iorlw	0
 10286  0122C4  B4D8               	btfsc	status,2,c
 10287  0122C6  D07A               	goto	l1627
 10288                           
 10289                           ;Motor.c: 78: {
 10290                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 10291  0122C8  C07D  FFD9         	movff	_lMotor,fsr2l
 10292  0122CC  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10293  0122D0  50DE               	movf	postinc2,w,c
 10294  0122D2  10DE               	iorwf	postinc2,w,c
 10295  0122D4  B4D8               	btfsc	status,2,c
 10296  0122D6  D06D               	goto	l1628
 10297                           
 10298                           ;Motor.c: 80: {
 10299                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 10300  0122D8  C07D  FFD9         	movff	_lMotor,fsr2l
 10301  0122DC  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10302  0122E0  0E01               	movlw	1
 10303  0122E2  BEDB               	btfsc	plusw2,7,c
 10304  0122E4  D026               	goto	l1629
 10305  0122E6  0E01               	movlw	1
 10306  0122E8  50DB               	movf	plusw2,w,c
 10307  0122EA  E103               	bnz	u7820
 10308  0122EC  04DE               	decf	postinc2,w,c
 10309  0122EE  A0D8               	btfss	status,0,c
 10310  0122F0  D020               	goto	l1629
 10311  0122F2                     u7820:
 10312                           
 10313                           ;Motor.c: 83: {
 10314                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 10315  0122F2  C07D  FFD9         	movff	_lMotor,fsr2l
 10316  0122F6  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10317  0122FA  28DE               	incf	postinc2,w,c
 10318  0122FC  E104               	bnz	u7830
 10319  0122FE  0E7F               	movlw	127
 10320  012300  18DE               	xorwf	postinc2,w,c
 10321  012302  B4D8               	btfsc	status,2,c
 10322  012304  D007               	goto	l1630
 10323  012306                     u7830:
 10324                           
 10325                           ;Motor.c: 85: lMotor->mDelta --;
 10326  012306  C07D  FFD9         	movff	_lMotor,fsr2l
 10327  01230A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10328  01230E  06DE               	decf	postinc2,f,c
 10329  012310  0E00               	movlw	0
 10330  012312  5ADD               	subwfb	postdec2,f,c
 10331  012314                     l1630:
 10332                           
 10333                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 10334  012314  0E8F               	movlw	low _PortE
 10335  012316  0100               	movlb	0	; () banked
 10336  012318  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10337  01231A  0E00               	movlw	high _PortE
 10338  01231C  0100               	movlb	0	; () banked
 10339  01231E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10340  012320  0E00               	movlw	0
 10341  012322  0100               	movlb	0	; () banked
 10342  012324  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10343  012326  0E01               	movlw	1
 10344  012328  0100               	movlb	0	; () banked
 10345  01232A  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10346  01232C  EC1D  F094         	call	_Port_SetPin	;wreg free
 10347                           
 10348                           ;Motor.c: 88: }
 10349  012330  D01F               	goto	l1631
 10350  012332                     l1629:
 10351                           
 10352                           ;Motor.c: 89: else
 10353                           ;Motor.c: 90: {
 10354                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 10355  012332  C07D  FFD9         	movff	_lMotor,fsr2l
 10356  012336  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10357  01233A  04DE               	decf	postinc2,w,c
 10358  01233C  E104               	bnz	u7840
 10359  01233E  0E80               	movlw	128
 10360  012340  18DE               	xorwf	postinc2,w,c
 10361  012342  B4D8               	btfsc	status,2,c
 10362  012344  D007               	goto	l1632
 10363  012346                     u7840:
 10364                           
 10365                           ;Motor.c: 92: lMotor->mDelta ++;
 10366  012346  C07D  FFD9         	movff	_lMotor,fsr2l
 10367  01234A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 10368  01234E  2ADE               	incf	postinc2,f,c
 10369  012350  0E00               	movlw	0
 10370  012352  22DD               	addwfc	postdec2,f,c
 10371  012354                     l1632:
 10372                           
 10373                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 10374  012354  0E8F               	movlw	low _PortE
 10375  012356  0100               	movlb	0	; () banked
 10376  012358  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10377  01235A  0E00               	movlw	high _PortE
 10378  01235C  0100               	movlb	0	; () banked
 10379  01235E  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10380  012360  0E00               	movlw	0
 10381  012362  0100               	movlb	0	; () banked
 10382  012364  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10383  012366  0E00               	movlw	0
 10384  012368  0100               	movlb	0	; () banked
 10385  01236A  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10386  01236C  EC1D  F094         	call	_Port_SetPin	;wreg free
 10387  012370                     l1631:
 10388                           
 10389                           ;Motor.c: 95: }
 10390                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 10391  012370  0E8F               	movlw	low _PortE
 10392  012372  0100               	movlb	0	; () banked
 10393  012374  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10394  012376  0E00               	movlw	high _PortE
 10395  012378  0100               	movlb	0	; () banked
 10396  01237A  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10397  01237C  0E01               	movlw	1
 10398  01237E  0100               	movlb	0	; () banked
 10399  012380  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10400  012382  0E01               	movlw	1
 10401  012384  0100               	movlb	0	; () banked
 10402  012386  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10403  012388  EC1D  F094         	call	_Port_SetPin	;wreg free
 10404                           
 10405                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 10406  01238C  0E8F               	movlw	low _PortE
 10407  01238E  0100               	movlb	0	; () banked
 10408  012390  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 10409  012392  0E00               	movlw	high _PortE
 10410  012394  0100               	movlb	0	; () banked
 10411  012396  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 10412  012398  0E01               	movlw	1
 10413  01239A  0100               	movlb	0	; () banked
 10414  01239C  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 10415  01239E  0E00               	movlw	0
 10416  0123A0  0100               	movlb	0	; () banked
 10417  0123A2  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 10418  0123A4  EC1D  F094         	call	_Port_SetPin	;wreg free
 10419                           
 10420                           ;Motor.c: 101: MXK_Release();
 10421  0123A8  EC06  F0A4         	call	_MXK_Release	;wreg free
 10422                           
 10423                           ;Motor.c: 102: Timer0_Restart();
 10424  0123AC  ECD0  F0A4         	call	_Timer0_Restart	;wreg free
 10425                           
 10426                           ;Motor.c: 103: return;
 10427  0123B0  0012               	return	
 10428  0123B2                     l1628:
 10429                           
 10430                           ;Motor.c: 104: }
 10431                           ;Motor.c: 105: MXK_Release();
 10432  0123B2  EC06  F0A4         	call	_MXK_Release	;wreg free
 10433                           
 10434                           ;Motor.c: 106: Timer0_Stop();
 10435  0123B6  ECF6  F0A4         	call	_Timer0_Stop	;wreg free
 10436                           
 10437                           ;Motor.c: 107: return;
 10438  0123BA  0012               	return	
 10439  0123BC                     l1627:
 10440                           
 10441                           ;Motor.c: 108: }
 10442                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 10443  0123BC  C072  F0B5         	movff	_lStepFunction,MXK_Queue@pCallback
 10444  0123C0  C073  F0B6         	movff	_lStepFunction+1,MXK_Queue@pCallback+1
 10445  0123C4  C074  F0B7         	movff	_lStepFunction+2,MXK_Queue@pCallback+2
 10446  0123C8  ECC2  F0A4         	call	_MXK_Queue	;wreg free
 10447  0123CC  0012               	return		;funcret
 10448  0123CE                     __end_of_Motor_Step:
 10449                           	opt stack 0
 10450                           tosu	equ	0xFFF
 10451                           tosh	equ	0xFFE
 10452                           tosl	equ	0xFFD
 10453                           pclath	equ	0xFFA
 10454                           tblptru	equ	0xFF8
 10455                           tblptrh	equ	0xFF7
 10456                           tblptrl	equ	0xFF6
 10457                           tablat	equ	0xFF5
 10458                           prodh	equ	0xFF4
 10459                           prodl	equ	0xFF3
 10460                           postinc0	equ	0xFEE
 10461                           wreg	equ	0xFE8
 10462                           indf1	equ	0xFE7
 10463                           postdec1	equ	0xFE5
 10464                           fsr1h	equ	0xFE2
 10465                           fsr1l	equ	0xFE1
 10466                           indf2	equ	0xFDF
 10467                           postinc2	equ	0xFDE
 10468                           postdec2	equ	0xFDD
 10469                           plusw2	equ	0xFDB
 10470                           fsr2h	equ	0xFDA
 10471                           fsr2l	equ	0xFD9
 10472                           status	equ	0xFD8
 10473                           
 10474 ;; *************** function _Timer0_Stop *****************
 10475 ;; Defined at:
 10476 ;;		line 89 in file "Library/Timer0.c"
 10477 ;; Parameters:    Size  Location     Type
 10478 ;;		None
 10479 ;; Auto vars:     Size  Location     Type
 10480 ;;		None
 10481 ;; Return value:  Size  Location     Type
 10482 ;;                  1    wreg      void 
 10483 ;; Registers used:
 10484 ;;		None
 10485 ;; Tracked objects:
 10486 ;;		On entry : 0/0
 10487 ;;		On exit  : 0/0
 10488 ;;		Unchanged: 0/0
 10489 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10490 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10491 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10492 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10493 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10494 ;;Total ram usage:        0 bytes
 10495 ;; Hardware stack levels used:    1
 10496 ;; Hardware stack levels required when called:    7
 10497 ;; This function calls:
 10498 ;;		Nothing
 10499 ;; This function is called by:
 10500 ;;		_Motor_Step
 10501 ;; This function uses a non-reentrant model
 10502 ;;
 10503                           
 10504                           	psect	text46
 10505  0149EC                     __ptext46:
 10506                           	opt stack 0
 10507  0149EC                     _Timer0_Stop:
 10508                           	opt stack 21
 10509                           
 10510                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 10511                           
 10512                           ;incstack = 0
 10513  0149EC  9AF2               	bcf	intcon,5,c	;volatile
 10514                           
 10515                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 10516  0149EE  94F2               	bcf	intcon,2,c	;volatile
 10517  0149F0  0012               	return		;funcret
 10518  0149F2                     __end_of_Timer0_Stop:
 10519                           	opt stack 0
 10520                           tosu	equ	0xFFF
 10521                           tosh	equ	0xFFE
 10522                           tosl	equ	0xFFD
 10523                           pclath	equ	0xFFA
 10524                           tblptru	equ	0xFF8
 10525                           tblptrh	equ	0xFF7
 10526                           tblptrl	equ	0xFF6
 10527                           tablat	equ	0xFF5
 10528                           prodh	equ	0xFF4
 10529                           prodl	equ	0xFF3
 10530                           intcon	equ	0xFF2
 10531                           postinc0	equ	0xFEE
 10532                           wreg	equ	0xFE8
 10533                           indf1	equ	0xFE7
 10534                           postdec1	equ	0xFE5
 10535                           fsr1h	equ	0xFE2
 10536                           fsr1l	equ	0xFE1
 10537                           indf2	equ	0xFDF
 10538                           postinc2	equ	0xFDE
 10539                           postdec2	equ	0xFDD
 10540                           plusw2	equ	0xFDB
 10541                           fsr2h	equ	0xFDA
 10542                           fsr2l	equ	0xFD9
 10543                           status	equ	0xFD8
 10544                           
 10545 ;; *************** function _Timer0_Restart *****************
 10546 ;; Defined at:
 10547 ;;		line 83 in file "Library/Timer0.c"
 10548 ;; Parameters:    Size  Location     Type
 10549 ;;		None
 10550 ;; Auto vars:     Size  Location     Type
 10551 ;;		None
 10552 ;; Return value:  Size  Location     Type
 10553 ;;                  1    wreg      void 
 10554 ;; Registers used:
 10555 ;;		None
 10556 ;; Tracked objects:
 10557 ;;		On entry : 0/0
 10558 ;;		On exit  : 0/0
 10559 ;;		Unchanged: 0/0
 10560 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10561 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10562 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10563 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10564 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10565 ;;Total ram usage:        0 bytes
 10566 ;; Hardware stack levels used:    1
 10567 ;; Hardware stack levels required when called:    7
 10568 ;; This function calls:
 10569 ;;		Nothing
 10570 ;; This function is called by:
 10571 ;;		_Motor_Step
 10572 ;; This function uses a non-reentrant model
 10573 ;;
 10574                           
 10575                           	psect	text47
 10576  0149A0                     __ptext47:
 10577                           	opt stack 0
 10578  0149A0                     _Timer0_Restart:
 10579                           	opt stack 21
 10580                           
 10581                           ;Timer0.c: 85: TMR0 = COUNTER;
 10582                           
 10583                           ;incstack = 0
 10584  0149A0  C029  FFD6         	movff	_COUNTER,4054	;volatile
 10585  0149A4  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 10586                           
 10587                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 10588  0149A8  8AF2               	bsf	intcon,5,c	;volatile
 10589  0149AA  0012               	return		;funcret
 10590  0149AC                     __end_of_Timer0_Restart:
 10591                           	opt stack 0
 10592                           tosu	equ	0xFFF
 10593                           tosh	equ	0xFFE
 10594                           tosl	equ	0xFFD
 10595                           pclath	equ	0xFFA
 10596                           tblptru	equ	0xFF8
 10597                           tblptrh	equ	0xFF7
 10598                           tblptrl	equ	0xFF6
 10599                           tablat	equ	0xFF5
 10600                           prodh	equ	0xFF4
 10601                           prodl	equ	0xFF3
 10602                           intcon	equ	0xFF2
 10603                           postinc0	equ	0xFEE
 10604                           wreg	equ	0xFE8
 10605                           indf1	equ	0xFE7
 10606                           postdec1	equ	0xFE5
 10607                           fsr1h	equ	0xFE2
 10608                           fsr1l	equ	0xFE1
 10609                           indf2	equ	0xFDF
 10610                           postinc2	equ	0xFDE
 10611                           postdec2	equ	0xFDD
 10612                           plusw2	equ	0xFDB
 10613                           fsr2h	equ	0xFDA
 10614                           fsr2l	equ	0xFD9
 10615                           status	equ	0xFD8
 10616                           
 10617 ;; *************** function _MXK_SwitchTo *****************
 10618 ;; Defined at:
 10619 ;;		line 105 in file "Library/MXK.c"
 10620 ;; Parameters:    Size  Location     Type
 10621 ;;  pModule         1    wreg     enum E6927
 10622 ;; Auto vars:     Size  Location     Type
 10623 ;;  pModule         1    7[BANK0 ] enum E6927
 10624 ;;  CUR             1    6[BANK0 ] unsigned char 
 10625 ;; Return value:  Size  Location     Type
 10626 ;;                  1    wreg      unsigned char 
 10627 ;; Registers used:
 10628 ;;		wreg, status,2, status,0, cstack
 10629 ;; Tracked objects:
 10630 ;;		On entry : 0/0
 10631 ;;		On exit  : 0/0
 10632 ;;		Unchanged: 0/0
 10633 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10634 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10635 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10636 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10637 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10638 ;;Total ram usage:        2 bytes
 10639 ;; Hardware stack levels used:    1
 10640 ;; Hardware stack levels required when called:    8
 10641 ;; This function calls:
 10642 ;;		_delay_us
 10643 ;; This function is called by:
 10644 ;;		_Motor_Step
 10645 ;;		_main
 10646 ;; This function uses a non-reentrant model
 10647 ;;
 10648                           
 10649                           	psect	text48
 10650  0142AA                     __ptext48:
 10651                           	opt stack 0
 10652  0142AA                     _MXK_SwitchTo:
 10653                           	opt stack 22
 10654                           
 10655                           ;incstack = 0
 10656                           ;MXK_SwitchTo@pModule stored from wreg
 10657  0142AA  0100               	movlb	0	; () banked
 10658  0142AC  6FBC               	movwf	MXK_SwitchTo@pModule& (0+255),b
 10659                           
 10660                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 10661  0142AE  5086               	movf	3974,w,c	;volatile
 10662  0142B0  0B0F               	andlw	15
 10663  0142B2  0100               	movlb	0	; () banked
 10664  0142B4  6FBB               	movwf	MXK_SwitchTo@CUR& (0+255),b
 10665                           
 10666                           ; BSR set to: 0
 10667                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 10668  0142B6  504B               	movf	_Bus_State,w,c
 10669  0142B8  A4D8               	btfss	status,2,c
 10670  0142BA  D002               	goto	l1730
 10671                           
 10672                           ; BSR set to: 0
 10673                           ;MXK.c: 110: return 0;
 10674  0142BC  0E00               	movlw	0
 10675                           
 10676                           ; BSR set to: 0
 10677  0142BE  0012               	return	
 10678  0142C0                     l1730:
 10679                           
 10680                           ; BSR set to: 0
 10681                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 10682                           
 10683                           ; BSR set to: 0
 10684  0142C0  0E00               	movlw	0
 10685  0142C2  6E4B               	movwf	_Bus_State,c
 10686                           
 10687                           ; BSR set to: 0
 10688                           ;MXK.c: 114: if (CUR != pModule)
 10689  0142C4  0100               	movlb	0	; () banked
 10690  0142C6  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10691  0142C8  0100               	movlb	0	; () banked
 10692  0142CA  19BB               	xorwf	MXK_SwitchTo@CUR& (0+255),w,b
 10693  0142CC  B4D8               	btfsc	status,2,c
 10694  0142CE  D00C               	goto	l1732
 10695                           
 10696                           ; BSR set to: 0
 10697                           ;MXK.c: 115: {
 10698                           ;MXK.c: 116: PORTG &= ~(0xF);
 10699  0142D0  0EF0               	movlw	240
 10700  0142D2  1686               	andwf	3974,f,c	;volatile
 10701                           
 10702                           ;MXK.c: 117: PORTG |= pModule;
 10703  0142D4  0100               	movlb	0	; () banked
 10704  0142D6  51BC               	movf	MXK_SwitchTo@pModule& (0+255),w,b
 10705  0142D8  1286               	iorwf	3974,f,c	;volatile
 10706                           
 10707                           ; BSR set to: 0
 10708                           ;MXK.c: 120: delay_us(10);
 10709  0142DA  0E00               	movlw	0
 10710  0142DC  0100               	movlb	0	; () banked
 10711  0142DE  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10712  0142E0  0E0A               	movlw	10
 10713  0142E2  6FB5               	movwf	delay_us@us& (0+255),b
 10714  0142E4  ECBE  F09F         	call	_delay_us	;wreg free
 10715  0142E8                     l1732:
 10716                           
 10717                           ;MXK.c: 121: }
 10718                           ;MXK.c: 122: return 1;
 10719  0142E8  0E01               	movlw	1
 10720  0142EA  0012               	return	
 10721  0142EC                     __end_of_MXK_SwitchTo:
 10722                           	opt stack 0
 10723                           tosu	equ	0xFFF
 10724                           tosh	equ	0xFFE
 10725                           tosl	equ	0xFFD
 10726                           pclath	equ	0xFFA
 10727                           tblptru	equ	0xFF8
 10728                           tblptrh	equ	0xFF7
 10729                           tblptrl	equ	0xFF6
 10730                           tablat	equ	0xFF5
 10731                           prodh	equ	0xFF4
 10732                           prodl	equ	0xFF3
 10733                           intcon	equ	0xFF2
 10734                           postinc0	equ	0xFEE
 10735                           wreg	equ	0xFE8
 10736                           indf1	equ	0xFE7
 10737                           postdec1	equ	0xFE5
 10738                           fsr1h	equ	0xFE2
 10739                           fsr1l	equ	0xFE1
 10740                           indf2	equ	0xFDF
 10741                           postinc2	equ	0xFDE
 10742                           postdec2	equ	0xFDD
 10743                           plusw2	equ	0xFDB
 10744                           fsr2h	equ	0xFDA
 10745                           fsr2l	equ	0xFD9
 10746                           status	equ	0xFD8
 10747                           
 10748 ;; *************** function _MXK_Release *****************
 10749 ;; Defined at:
 10750 ;;		line 130 in file "Library/MXK.c"
 10751 ;; Parameters:    Size  Location     Type
 10752 ;;		None
 10753 ;; Auto vars:     Size  Location     Type
 10754 ;;		None
 10755 ;; Return value:  Size  Location     Type
 10756 ;;                  1    wreg      unsigned char 
 10757 ;; Registers used:
 10758 ;;		wreg, status,2, status,0
 10759 ;; Tracked objects:
 10760 ;;		On entry : 0/0
 10761 ;;		On exit  : 0/0
 10762 ;;		Unchanged: 0/0
 10763 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10764 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10765 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10766 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10767 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10768 ;;Total ram usage:        0 bytes
 10769 ;; Hardware stack levels used:    1
 10770 ;; Hardware stack levels required when called:    7
 10771 ;; This function calls:
 10772 ;;		Nothing
 10773 ;; This function is called by:
 10774 ;;		_Motor_Step
 10775 ;;		_main
 10776 ;; This function uses a non-reentrant model
 10777 ;;
 10778                           
 10779                           	psect	text49
 10780  01480C                     __ptext49:
 10781                           	opt stack 0
 10782  01480C                     _MXK_Release:
 10783                           	opt stack 23
 10784                           
 10785                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 10786                           
 10787                           ;incstack = 0
 10788  01480C  0E01               	movlw	1
 10789  01480E  6E4B               	movwf	_Bus_State,c
 10790                           
 10791                           ;MXK.c: 134: if (lQueue != 0)
 10792  014810  0100               	movlb	0	; () banked
 10793  014812  516F               	movf	_lQueue& (0+255),w,b	;volatile
 10794  014814  0100               	movlb	0	; () banked
 10795  014816  1170               	iorwf	(_lQueue+1)& (0+255),w,b	;volatile
 10796  014818  0100               	movlb	0	; () banked
 10797  01481A  1171               	iorwf	(_lQueue+2)& (0+255),w,b	;volatile
 10798  01481C  B4D8               	btfsc	status,2,c
 10799  01481E  D002               	goto	l1735
 10800                           
 10801                           ; BSR set to: 0
 10802                           ;MXK.c: 135: return 1;
 10803  014820  0E01               	movlw	1
 10804                           
 10805                           ; BSR set to: 0
 10806  014822  0012               	return	
 10807  014824                     l1735:
 10808                           
 10809                           ; BSR set to: 0
 10810                           ;MXK.c: 137: return 0;
 10811                           
 10812                           ; BSR set to: 0
 10813  014824  0E00               	movlw	0
 10814  014826  0012               	return	
 10815  014828                     __end_of_MXK_Release:
 10816                           	opt stack 0
 10817                           tosu	equ	0xFFF
 10818                           tosh	equ	0xFFE
 10819                           tosl	equ	0xFFD
 10820                           pclath	equ	0xFFA
 10821                           tblptru	equ	0xFF8
 10822                           tblptrh	equ	0xFF7
 10823                           tblptrl	equ	0xFF6
 10824                           tablat	equ	0xFF5
 10825                           prodh	equ	0xFF4
 10826                           prodl	equ	0xFF3
 10827                           intcon	equ	0xFF2
 10828                           postinc0	equ	0xFEE
 10829                           wreg	equ	0xFE8
 10830                           indf1	equ	0xFE7
 10831                           postdec1	equ	0xFE5
 10832                           fsr1h	equ	0xFE2
 10833                           fsr1l	equ	0xFE1
 10834                           indf2	equ	0xFDF
 10835                           postinc2	equ	0xFDE
 10836                           postdec2	equ	0xFDD
 10837                           plusw2	equ	0xFDB
 10838                           fsr2h	equ	0xFDA
 10839                           fsr2l	equ	0xFD9
 10840                           status	equ	0xFD8
 10841                           
 10842 ;; *************** function _MXK_Queue *****************
 10843 ;; Defined at:
 10844 ;;		line 144 in file "Library/MXK.c"
 10845 ;; Parameters:    Size  Location     Type
 10846 ;;  pCallback       3    0[BANK0 ] PTR FTN()void 
 10847 ;;		 -> Absolute function(1), Motor_Step(1), 
 10848 ;; Auto vars:     Size  Location     Type
 10849 ;;		None
 10850 ;; Return value:  Size  Location     Type
 10851 ;;                  1    wreg      void 
 10852 ;; Registers used:
 10853 ;;		wreg, status,2, status,0
 10854 ;; Tracked objects:
 10855 ;;		On entry : 0/0
 10856 ;;		On exit  : 0/0
 10857 ;;		Unchanged: 0/0
 10858 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10859 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10862 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10863 ;;Total ram usage:        3 bytes
 10864 ;; Hardware stack levels used:    1
 10865 ;; Hardware stack levels required when called:    7
 10866 ;; This function calls:
 10867 ;;		Nothing
 10868 ;; This function is called by:
 10869 ;;		_Motor_Step
 10870 ;; This function uses a non-reentrant model
 10871 ;;
 10872                           
 10873                           	psect	text50
 10874  014984                     __ptext50:
 10875                           	opt stack 0
 10876  014984                     _MXK_Queue:
 10877                           	opt stack 21
 10878                           
 10879                           ;MXK.c: 146: lQueue = pCallback;
 10880                           
 10881                           ; BSR set to: 0
 10882                           ;incstack = 0
 10883  014984  C0B5  F06F         	movff	MXK_Queue@pCallback,_lQueue	;volatile
 10884  014988  C0B6  F070         	movff	MXK_Queue@pCallback+1,_lQueue+1	;volatile
 10885  01498C  C0B7  F071         	movff	MXK_Queue@pCallback+2,_lQueue+2	;volatile
 10886  014990  0012               	return		;funcret
 10887  014992                     __end_of_MXK_Queue:
 10888                           	opt stack 0
 10889                           tosu	equ	0xFFF
 10890                           tosh	equ	0xFFE
 10891                           tosl	equ	0xFFD
 10892                           pclath	equ	0xFFA
 10893                           tblptru	equ	0xFF8
 10894                           tblptrh	equ	0xFF7
 10895                           tblptrl	equ	0xFF6
 10896                           tablat	equ	0xFF5
 10897                           prodh	equ	0xFF4
 10898                           prodl	equ	0xFF3
 10899                           intcon	equ	0xFF2
 10900                           postinc0	equ	0xFEE
 10901                           wreg	equ	0xFE8
 10902                           indf1	equ	0xFE7
 10903                           postdec1	equ	0xFE5
 10904                           fsr1h	equ	0xFE2
 10905                           fsr1l	equ	0xFE1
 10906                           indf2	equ	0xFDF
 10907                           postinc2	equ	0xFDE
 10908                           postdec2	equ	0xFDD
 10909                           plusw2	equ	0xFDB
 10910                           fsr2h	equ	0xFDA
 10911                           fsr2l	equ	0xFD9
 10912                           status	equ	0xFD8
 10913                           
 10914 ;; *************** function _MXK_BlockSwitchTo *****************
 10915 ;; Defined at:
 10916 ;;		line 82 in file "Library/MXK.c"
 10917 ;; Parameters:    Size  Location     Type
 10918 ;;  pModule         1    wreg     enum E6927
 10919 ;; Auto vars:     Size  Location     Type
 10920 ;;  pModule         1    7[BANK0 ] enum E6927
 10921 ;;  CUR             1    6[BANK0 ] unsigned char 
 10922 ;; Return value:  Size  Location     Type
 10923 ;;                  1    wreg      unsigned char 
 10924 ;; Registers used:
 10925 ;;		wreg, status,2, status,0, cstack
 10926 ;; Tracked objects:
 10927 ;;		On entry : 0/0
 10928 ;;		On exit  : 0/0
 10929 ;;		Unchanged: 0/0
 10930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10932 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10934 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10935 ;;Total ram usage:        2 bytes
 10936 ;; Hardware stack levels used:    1
 10937 ;; Hardware stack levels required when called:    8
 10938 ;; This function calls:
 10939 ;;		_delay_us
 10940 ;; This function is called by:
 10941 ;;		_main
 10942 ;; This function uses a non-reentrant model
 10943 ;;
 10944                           
 10945                           	psect	text51
 10946  0143AA                     __ptext51:
 10947                           	opt stack 0
 10948  0143AA                     _MXK_BlockSwitchTo:
 10949                           	opt stack 22
 10950                           
 10951                           ;incstack = 0
 10952                           ;MXK_BlockSwitchTo@pModule stored from wreg
 10953  0143AA  0100               	movlb	0	; () banked
 10954  0143AC  6FBC               	movwf	MXK_BlockSwitchTo@pModule& (0+255),b
 10955                           
 10956                           ;MXK.c: 85: UINT8 CUR = 0xF & PORTG;
 10957  0143AE  5086               	movf	3974,w,c	;volatile
 10958  0143B0  0B0F               	andlw	15
 10959  0143B2  0100               	movlb	0	; () banked
 10960  0143B4  6FBB               	movwf	MXK_BlockSwitchTo@CUR& (0+255),b
 10961  0143B6                     
 10962                           ; BSR set to: 0
 10963                           
 10964                           ; BSR set to: 0
 10965  0143B6  504B               	movf	_Bus_State,w,c
 10966  0143B8  B4D8               	btfsc	status,2,c
 10967  0143BA  D7FD               	goto	l1724
 10968                           
 10969                           ;MXK.c: 88: Bus_State = eMXK_Busy;
 10970  0143BC  0E00               	movlw	0
 10971  0143BE  6E4B               	movwf	_Bus_State,c
 10972                           
 10973                           ;MXK.c: 90: if (CUR != pModule)
 10974  0143C0  0100               	movlb	0	; () banked
 10975  0143C2  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10976  0143C4  0100               	movlb	0	; () banked
 10977  0143C6  19BB               	xorwf	MXK_BlockSwitchTo@CUR& (0+255),w,b
 10978  0143C8  B4D8               	btfsc	status,2,c
 10979  0143CA  D00C               	goto	l1726
 10980                           
 10981                           ; BSR set to: 0
 10982                           ;MXK.c: 91: {
 10983                           ;MXK.c: 92: PORTG &= ~(0xF);
 10984  0143CC  0EF0               	movlw	240
 10985  0143CE  1686               	andwf	3974,f,c	;volatile
 10986                           
 10987                           ;MXK.c: 93: PORTG |= pModule;
 10988  0143D0  0100               	movlb	0	; () banked
 10989  0143D2  51BC               	movf	MXK_BlockSwitchTo@pModule& (0+255),w,b
 10990  0143D4  1286               	iorwf	3974,f,c	;volatile
 10991                           
 10992                           ; BSR set to: 0
 10993                           ;MXK.c: 96: delay_us(10);
 10994  0143D6  0E00               	movlw	0
 10995  0143D8  0100               	movlb	0	; () banked
 10996  0143DA  6FB6               	movwf	(delay_us@us+1)& (0+255),b
 10997  0143DC  0E0A               	movlw	10
 10998  0143DE  6FB5               	movwf	delay_us@us& (0+255),b
 10999  0143E0  ECBE  F09F         	call	_delay_us	;wreg free
 11000  0143E4                     l1726:
 11001                           
 11002                           ;MXK.c: 97: }
 11003                           ;MXK.c: 98: return 1;
 11004  0143E4  0E01               	movlw	1
 11005  0143E6  0012               	return	
 11006  0143E8                     __end_of_MXK_BlockSwitchTo:
 11007                           	opt stack 0
 11008                           tosu	equ	0xFFF
 11009                           tosh	equ	0xFFE
 11010                           tosl	equ	0xFFD
 11011                           pclath	equ	0xFFA
 11012                           tblptru	equ	0xFF8
 11013                           tblptrh	equ	0xFF7
 11014                           tblptrl	equ	0xFF6
 11015                           tablat	equ	0xFF5
 11016                           prodh	equ	0xFF4
 11017                           prodl	equ	0xFF3
 11018                           intcon	equ	0xFF2
 11019                           postinc0	equ	0xFEE
 11020                           wreg	equ	0xFE8
 11021                           indf1	equ	0xFE7
 11022                           postdec1	equ	0xFE5
 11023                           fsr1h	equ	0xFE2
 11024                           fsr1l	equ	0xFE1
 11025                           indf2	equ	0xFDF
 11026                           postinc2	equ	0xFDE
 11027                           postdec2	equ	0xFDD
 11028                           plusw2	equ	0xFDB
 11029                           fsr2h	equ	0xFDA
 11030                           fsr2l	equ	0xFD9
 11031                           status	equ	0xFD8
 11032                           
 11033 ;; *************** function _delay_us *****************
 11034 ;; Defined at:
 11035 ;;		line 255 in file "Library/Types.c"
 11036 ;; Parameters:    Size  Location     Type
 11037 ;;  us              2    0[BANK0 ] unsigned short 
 11038 ;; Auto vars:     Size  Location     Type
 11039 ;;  u               4    2[BANK0 ] unsigned long 
 11040 ;; Return value:  Size  Location     Type
 11041 ;;                  1    wreg      void 
 11042 ;; Registers used:
 11043 ;;		wreg, status,2, status,0
 11044 ;; Tracked objects:
 11045 ;;		On entry : 0/0
 11046 ;;		On exit  : 0/0
 11047 ;;		Unchanged: 0/0
 11048 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11049 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11050 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11051 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11052 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11053 ;;Total ram usage:        6 bytes
 11054 ;; Hardware stack levels used:    1
 11055 ;; Hardware stack levels required when called:    7
 11056 ;; This function calls:
 11057 ;;		Nothing
 11058 ;; This function is called by:
 11059 ;;		_MXK_BlockSwitchTo
 11060 ;;		_MXK_SwitchTo
 11061 ;; This function uses a non-reentrant model
 11062 ;;
 11063                           
 11064                           	psect	text52
 11065  013F7C                     __ptext52:
 11066                           	opt stack 0
 11067  013F7C                     _delay_us:
 11068                           	opt stack 22
 11069                           
 11070                           ;Types.c: 256: unsigned long u;
 11071                           ;Types.c: 257: while (us--) {
 11072                           
 11073                           ;incstack = 0
 11074  013F7C  D01C               	goto	u7140
 11075  013F7E                     l11069:
 11076                           
 11077                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 11078  013F7E  0E00               	movlw	0
 11079  013F80  0100               	movlb	0	; () banked
 11080  013F82  6FB7               	movwf	delay_us@u& (0+255),b
 11081  013F84  0E00               	movlw	0
 11082  013F86  6FB8               	movwf	(delay_us@u+1)& (0+255),b
 11083  013F88  0E00               	movlw	0
 11084  013F8A  6FB9               	movwf	(delay_us@u+2)& (0+255),b
 11085  013F8C  0E00               	movlw	0
 11086  013F8E  6FBA               	movwf	(delay_us@u+3)& (0+255),b
 11087  013F90                     l11071:
 11088                           
 11089                           ; BSR set to: 0
 11090  013F90  0100               	movlb	0	; () banked
 11091  013F92  51B7               	movf	delay_us@u& (0+255),w,b
 11092  013F94  0100               	movlb	0	; () banked
 11093  013F96  11B8               	iorwf	(delay_us@u+1)& (0+255),w,b
 11094  013F98  0100               	movlb	0	; () banked
 11095  013F9A  11B9               	iorwf	(delay_us@u+2)& (0+255),w,b
 11096  013F9C  0100               	movlb	0	; () banked
 11097  013F9E  11BA               	iorwf	(delay_us@u+3)& (0+255),w,b
 11098  013FA0  A4D8               	btfss	status,2,c
 11099  013FA2  D009               	goto	u7140
 11100                           
 11101                           ; BSR set to: 0
 11102                           
 11103                           ; BSR set to: 0
 11104  013FA4  F000               	nop		; ;# 
 11105  013FA6  0E01               	movlw	1
 11106  013FA8  0100               	movlb	0	; () banked
 11107  013FAA  27B7               	addwf	delay_us@u& (0+255),f,b
 11108  013FAC  0E00               	movlw	0
 11109  013FAE  23B8               	addwfc	(delay_us@u+1)& (0+255),f,b
 11110  013FB0  23B9               	addwfc	(delay_us@u+2)& (0+255),f,b
 11111  013FB2  23BA               	addwfc	(delay_us@u+3)& (0+255),f,b
 11112  013FB4  D7ED               	goto	l11071
 11113  013FB6                     u7140:
 11114                           
 11115                           ; BSR set to: 0
 11116                           
 11117                           ; BSR set to: 0
 11118  013FB6  0100               	movlb	0	; () banked
 11119  013FB8  07B5               	decf	delay_us@us& (0+255),f,b
 11120  013FBA  A0D8               	btfss	status,0,c
 11121  013FBC  07B6               	decf	(delay_us@us+1)& (0+255),f,b
 11122  013FBE  0100               	movlb	0	; () banked
 11123  013FC0  29B5               	incf	delay_us@us& (0+255),w,b
 11124  013FC2  E1DD               	bnz	l11069
 11125  013FC4  0100               	movlb	0	; () banked
 11126  013FC6  29B6               	incf	(delay_us@us+1)& (0+255),w,b
 11127  013FC8  B4D8               	btfsc	status,2,c
 11128  013FCA  0012               	return	
 11129  013FCC  D7D8               	goto	l832
 11130  013FCE                     __end_of_delay_us:
 11131                           	opt stack 0
 11132                           tosu	equ	0xFFF
 11133                           tosh	equ	0xFFE
 11134                           tosl	equ	0xFFD
 11135                           pclath	equ	0xFFA
 11136                           tblptru	equ	0xFF8
 11137                           tblptrh	equ	0xFF7
 11138                           tblptrl	equ	0xFF6
 11139                           tablat	equ	0xFF5
 11140                           prodh	equ	0xFF4
 11141                           prodl	equ	0xFF3
 11142                           intcon	equ	0xFF2
 11143                           postinc0	equ	0xFEE
 11144                           wreg	equ	0xFE8
 11145                           indf1	equ	0xFE7
 11146                           postdec1	equ	0xFE5
 11147                           fsr1h	equ	0xFE2
 11148                           fsr1l	equ	0xFE1
 11149                           indf2	equ	0xFDF
 11150                           postinc2	equ	0xFDE
 11151                           postdec2	equ	0xFDD
 11152                           plusw2	equ	0xFDB
 11153                           fsr2h	equ	0xFDA
 11154                           fsr2l	equ	0xFD9
 11155                           status	equ	0xFD8
 11156                           
 11157 ;; *************** function _LCD_Init *****************
 11158 ;; Defined at:
 11159 ;;		line 172 in file "Library/LCD.c"
 11160 ;; Parameters:    Size  Location     Type
 11161 ;;		None
 11162 ;; Auto vars:     Size  Location     Type
 11163 ;;  i               2   55[BANK0 ] unsigned short 
 11164 ;; Return value:  Size  Location     Type
 11165 ;;                  1    wreg      void 
 11166 ;; Registers used:
 11167 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11168 ;; Tracked objects:
 11169 ;;		On entry : 0/0
 11170 ;;		On exit  : 0/0
 11171 ;;		Unchanged: 0/0
 11172 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11173 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11174 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11175 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11176 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11177 ;;Total ram usage:        4 bytes
 11178 ;; Hardware stack levels used:    1
 11179 ;; Hardware stack levels required when called:   15
 11180 ;; This function calls:
 11181 ;;		_Configure_GPIOs
 11182 ;;		_LCD_Fill
 11183 ;;		_LCD_Write
 11184 ;;		_Set_Rotation
 11185 ;;		_delay_ms
 11186 ;; This function is called by:
 11187 ;;		_main
 11188 ;; This function uses a non-reentrant model
 11189 ;;
 11190                           
 11191                           	psect	text53
 11192  011E70                     __ptext53:
 11193                           	opt stack 0
 11194  011E70                     _LCD_Init:
 11195                           	opt stack 15
 11196                           
 11197                           ;LCD.c: 174: UINT16 i;
 11198                           ;LCD.c: 175: Configure_GPIOs();
 11199                           
 11200                           ; BSR set to: 0
 11201                           ;incstack = 0
 11202  011E70  EC9C  F09C         	call	_Configure_GPIOs	;wreg free
 11203                           
 11204                           ;LCD.c: 177: for (i = 0; i < (sizeof(InitList)/sizeof(InitList[0])); i++)
 11205  011E74  0E00               	movlw	0
 11206  011E76  0100               	movlb	0	; () banked
 11207  011E78  6FED               	movwf	(LCD_Init@i+1)& (0+255),b
 11208  011E7A  0E00               	movlw	0
 11209  011E7C  6FEC               	movwf	LCD_Init@i& (0+255),b
 11210                           
 11211                           ; BSR set to: 0
 11212  011E7E  0100               	movlb	0	; () banked
 11213  011E80  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11214  011E82  E106               	bnz	u7910
 11215  011E84  0E59               	movlw	89
 11216  011E86  0100               	movlb	0	; () banked
 11217  011E88  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 11218  011E8A  B0D8               	btfsc	status,0,c
 11219  011E8C  D08B               	goto	u7950
 11220  011E8E  D001               	goto	l85
 11221  011E90                     u7910:
 11222                           
 11223                           ; BSR set to: 0
 11224  011E90  D089               	goto	u7950
 11225  011E92                     l85:
 11226                           
 11227                           ; BSR set to: 0
 11228                           ;LCD.c: 178: {
 11229                           ;LCD.c: 179: if (0x80 == InitList[i] && (i < ((sizeof(InitList)/sizeof(InitList[0])) - 1
      +                          )))
 11230                           
 11231                           ; BSR set to: 0
 11232  011E92  90D8               	bcf	status,0,c
 11233  011E94  0100               	movlb	0	; () banked
 11234  011E96  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11235  011E98  6EF6               	movwf	tblptrl,c
 11236  011E9A  0100               	movlb	0	; () banked
 11237  011E9C  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11238  011E9E  6EF7               	movwf	tblptrh,c
 11239  011EA0  0EE5               	movlw	low _InitList
 11240  011EA2  26F6               	addwf	tblptrl,f,c
 11241  011EA4  0EFC               	movlw	high _InitList
 11242  011EA6  22F7               	addwfc	tblptrh,f,c
 11243  011EA8                     	if	1	;There are 3 active tblptr bytes
 11244  011EA8  6AF8               	clrf	tblptru,c
 11245  011EAA  0E00               	movlw	low (__mediumconst shr (0+16))
 11246  011EAC  22F8               	addwfc	tblptru,f,c
 11247  011EAE                     	endif
 11248  011EAE  0009               	tblrd		*+
 11249  011EB0  0E80               	movlw	128
 11250  011EB2  18F5               	xorwf	tablat,w,c
 11251  011EB4  0009               	tblrd		*+
 11252  011EB6  10F5               	iorwf	tablat,w,c
 11253  011EB8  A4D8               	btfss	status,2,c
 11254  011EBA  D022               	goto	l87
 11255                           
 11256                           ; BSR set to: 0
 11257  011EBC  0100               	movlb	0	; () banked
 11258  011EBE  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11259  011EC0  E11F               	bnz	l12081
 11260  011EC2  0E58               	movlw	88
 11261  011EC4  0100               	movlb	0	; () banked
 11262  011EC6  5DEC               	subwf	LCD_Init@i& (0+255),w,b
 11263  011EC8  B0D8               	btfsc	status,0,c
 11264  011ECA  D01A               	goto	l87
 11265                           
 11266                           ; BSR set to: 0
 11267                           ;LCD.c: 180: delay_ms(InitList[++i]);
 11268  011ECC  0100               	movlb	0	; () banked
 11269  011ECE  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11270  011ED0  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11271  011ED2  90D8               	bcf	status,0,c
 11272  011ED4  0100               	movlb	0	; () banked
 11273  011ED6  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11274  011ED8  6EF6               	movwf	tblptrl,c
 11275  011EDA  0100               	movlb	0	; () banked
 11276  011EDC  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11277  011EDE  6EF7               	movwf	tblptrh,c
 11278  011EE0  0EE5               	movlw	low _InitList
 11279  011EE2  26F6               	addwf	tblptrl,f,c
 11280  011EE4  0EFC               	movlw	high _InitList
 11281  011EE6  22F7               	addwfc	tblptrh,f,c
 11282  011EE8                     	if	1	;There are 3 active tblptr bytes
 11283  011EE8  6AF8               	clrf	tblptru,c
 11284  011EEA  0E00               	movlw	low (__mediumconst shr (0+16))
 11285  011EEC  22F8               	addwfc	tblptru,f,c
 11286  011EEE                     	endif
 11287  011EEE  0009               	tblrd		*+
 11288  011EF0  CFF5 F0B5          	movff	tablat,delay_ms@ms
 11289  011EF4  000A               	tblrd		*-
 11290  011EF6  CFF5 F0B6          	movff	tablat,delay_ms@ms+1
 11291  011EFA  EC75  F09D         	call	_delay_ms	;wreg free
 11292  011EFE  D04B               	goto	l90
 11293  011F00                     l87:
 11294  011F00                     l12081:
 11295                           
 11296                           ;LCD.c: 181: else
 11297                           ;LCD.c: 182: {
 11298                           ;LCD.c: 183: if (InitList[i] > 0xFF) LCD_Write((InitList[i]>>8), eCommand);
 11299  011F00  90D8               	bcf	status,0,c
 11300  011F02  0100               	movlb	0	; () banked
 11301  011F04  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11302  011F06  6EF6               	movwf	tblptrl,c
 11303  011F08  0100               	movlb	0	; () banked
 11304  011F0A  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11305  011F0C  6EF7               	movwf	tblptrh,c
 11306  011F0E  0EE5               	movlw	low _InitList
 11307  011F10  26F6               	addwf	tblptrl,f,c
 11308  011F12  0EFC               	movlw	high _InitList
 11309  011F14  22F7               	addwfc	tblptrh,f,c
 11310  011F16                     	if	1	;There are 3 active tblptr bytes
 11311  011F16  6AF8               	clrf	tblptru,c
 11312  011F18  0E00               	movlw	low (__mediumconst shr (0+16))
 11313  011F1A  22F8               	addwfc	tblptru,f,c
 11314  011F1C                     	endif
 11315  011F1C  0009               	tblrd		*+
 11316  011F1E  0E00               	movlw	0
 11317  011F20  5EF5               	subwf	tablat,f,c
 11318  011F22  0009               	tblrd		*+
 11319  011F24  0E01               	movlw	1
 11320  011F26  5AF5               	subwfb	tablat,f,c
 11321  011F28  A0D8               	btfss	status,0,c
 11322  011F2A  D020               	goto	l89
 11323                           
 11324                           ; BSR set to: 0
 11325  011F2C  0E00               	movlw	0
 11326  011F2E  0100               	movlb	0	; () banked
 11327  011F30  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11328  011F32  90D8               	bcf	status,0,c
 11329  011F34  0100               	movlb	0	; () banked
 11330  011F36  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11331  011F38  6EF6               	movwf	tblptrl,c
 11332  011F3A  0100               	movlb	0	; () banked
 11333  011F3C  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11334  011F3E  6EF7               	movwf	tblptrh,c
 11335  011F40  0EE5               	movlw	low _InitList
 11336  011F42  26F6               	addwf	tblptrl,f,c
 11337  011F44  0EFC               	movlw	high _InitList
 11338  011F46  22F7               	addwfc	tblptrh,f,c
 11339  011F48                     	if	1	;There are 3 active tblptr bytes
 11340  011F48  6AF8               	clrf	tblptru,c
 11341  011F4A  0E00               	movlw	low (__mediumconst shr (0+16))
 11342  011F4C  22F8               	addwfc	tblptru,f,c
 11343  011F4E                     	endif
 11344  011F4E  0009               	tblrd		*+
 11345  011F50  CFF5 F0EA          	movff	tablat,??_LCD_Init
 11346  011F54  0009               	tblrd		*+
 11347  011F56  CFF5 F0EB          	movff	tablat,??_LCD_Init+1
 11348  011F5A  C0EB  F0EA         	movff	??_LCD_Init+1,??_LCD_Init
 11349  011F5E  0100               	movlb	0	; () banked
 11350  011F60  6BEB               	clrf	(??_LCD_Init+1)& (0+255),b
 11351  011F62  0100               	movlb	0	; () banked
 11352  011F64  51EA               	movf	??_LCD_Init& (0+255),w,b
 11353  011F66  EC5F  F0A3         	call	_LCD_Write
 11354  011F6A  D015               	goto	l90
 11355  011F6C                     l89:
 11356                           
 11357                           ;LCD.c: 184: else LCD_Write(InitList[i], eData);
 11358  011F6C  0E01               	movlw	1
 11359  011F6E  0100               	movlb	0	; () banked
 11360  011F70  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11361  011F72  90D8               	bcf	status,0,c
 11362  011F74  0100               	movlb	0	; () banked
 11363  011F76  35EC               	rlcf	LCD_Init@i& (0+255),w,b
 11364  011F78  6EF6               	movwf	tblptrl,c
 11365  011F7A  0100               	movlb	0	; () banked
 11366  011F7C  35ED               	rlcf	(LCD_Init@i+1)& (0+255),w,b
 11367  011F7E  6EF7               	movwf	tblptrh,c
 11368  011F80  0EE5               	movlw	low _InitList
 11369  011F82  26F6               	addwf	tblptrl,f,c
 11370  011F84  0EFC               	movlw	high _InitList
 11371  011F86  22F7               	addwfc	tblptrh,f,c
 11372  011F88                     	if	1	;There are 3 active tblptr bytes
 11373  011F88  6AF8               	clrf	tblptru,c
 11374  011F8A  0E00               	movlw	low (__mediumconst shr (0+16))
 11375  011F8C  22F8               	addwfc	tblptru,f,c
 11376  011F8E                     	endif
 11377  011F8E  0008               	tblrd		*
 11378  011F90  50F5               	movf	tablat,w,c
 11379  011F92  EC5F  F0A3         	call	_LCD_Write
 11380  011F96                     l90:
 11381  011F96  0100               	movlb	0	; () banked
 11382  011F98  4BEC               	infsnz	LCD_Init@i& (0+255),f,b
 11383  011F9A  2BED               	incf	(LCD_Init@i+1)& (0+255),f,b
 11384                           
 11385                           ; BSR set to: 0
 11386  011F9C  0100               	movlb	0	; () banked
 11387  011F9E  51ED               	movf	(LCD_Init@i+1)& (0+255),w,b
 11388  011FA0  E101               	bnz	l12091
 11389  011FA2  D770               	goto	L9
 11390  011FA4                     u7950:
 11391  011FA4                     l12091:
 11392                           
 11393                           ; BSR set to: 0
 11394                           ;LCD.c: 185: }
 11395                           ;LCD.c: 186: }
 11396                           ;LCD.c: 187: delay_ms(100);
 11397  011FA4  0E00               	movlw	0
 11398  011FA6  0100               	movlb	0	; () banked
 11399  011FA8  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11400  011FAA  0E64               	movlw	100
 11401  011FAC  6FB5               	movwf	delay_ms@ms& (0+255),b
 11402  011FAE  EC75  F09D         	call	_delay_ms	;wreg free
 11403                           
 11404                           ;LCD.c: 188: LCD_Write(0x29, eCommand);
 11405  011FB2  0E00               	movlw	0
 11406  011FB4  0100               	movlb	0	; () banked
 11407  011FB6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11408  011FB8  0E29               	movlw	41
 11409  011FBA  EC5F  F0A3         	call	_LCD_Write
 11410                           
 11411                           ;LCD.c: 189: Set_Rotation(1);
 11412  011FBE  0E01               	movlw	1
 11413  011FC0  EC98  F099         	call	_Set_Rotation
 11414                           
 11415                           ;LCD.c: 191: delay_ms(100);
 11416  011FC4  0E00               	movlw	0
 11417  011FC6  0100               	movlb	0	; () banked
 11418  011FC8  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 11419  011FCA  0E64               	movlw	100
 11420  011FCC  6FB5               	movwf	delay_ms@ms& (0+255),b
 11421  011FCE  EC75  F09D         	call	_delay_ms	;wreg free
 11422                           
 11423                           ;LCD.c: 192: LCD_Fill(0x0000);
 11424  011FD2  0E00               	movlw	0
 11425  011FD4  0100               	movlb	0	; () banked
 11426  011FD6  6FBF               	movwf	(LCD_Fill@pColour+1)& (0+255),b
 11427  011FD8  0E00               	movlw	0
 11428  011FDA  6FBE               	movwf	LCD_Fill@pColour& (0+255),b
 11429  011FDC  EC92  F09F         	call	_LCD_Fill	;wreg free
 11430  011FE0  0012               	return		;funcret
 11431  011FE2                     __end_of_LCD_Init:
 11432                           	opt stack 0
 11433                           tosu	equ	0xFFF
 11434                           tosh	equ	0xFFE
 11435                           tosl	equ	0xFFD
 11436                           pclath	equ	0xFFA
 11437                           tblptru	equ	0xFF8
 11438                           tblptrh	equ	0xFF7
 11439                           tblptrl	equ	0xFF6
 11440                           tablat	equ	0xFF5
 11441                           prodh	equ	0xFF4
 11442                           prodl	equ	0xFF3
 11443                           intcon	equ	0xFF2
 11444                           postinc0	equ	0xFEE
 11445                           wreg	equ	0xFE8
 11446                           indf1	equ	0xFE7
 11447                           postdec1	equ	0xFE5
 11448                           fsr1h	equ	0xFE2
 11449                           fsr1l	equ	0xFE1
 11450                           indf2	equ	0xFDF
 11451                           postinc2	equ	0xFDE
 11452                           postdec2	equ	0xFDD
 11453                           plusw2	equ	0xFDB
 11454                           fsr2h	equ	0xFDA
 11455                           fsr2l	equ	0xFD9
 11456                           status	equ	0xFD8
 11457                           
 11458 ;; *************** function _Set_Rotation *****************
 11459 ;; Defined at:
 11460 ;;		line 248 in file "Library/LCD.c"
 11461 ;; Parameters:    Size  Location     Type
 11462 ;;  m               1    wreg     unsigned char 
 11463 ;; Auto vars:     Size  Location     Type
 11464 ;;  m               1    5[BANK0 ] unsigned char 
 11465 ;;  rotation        1    6[BANK0 ] unsigned char 
 11466 ;; Return value:  Size  Location     Type
 11467 ;;                  1    wreg      void 
 11468 ;; Registers used:
 11469 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11470 ;; Tracked objects:
 11471 ;;		On entry : 0/0
 11472 ;;		On exit  : 0/0
 11473 ;;		Unchanged: 0/0
 11474 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11475 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11476 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11477 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11478 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11479 ;;Total ram usage:        2 bytes
 11480 ;; Hardware stack levels used:    1
 11481 ;; Hardware stack levels required when called:    9
 11482 ;; This function calls:
 11483 ;;		_LCD_Write
 11484 ;; This function is called by:
 11485 ;;		_LCD_Init
 11486 ;; This function uses a non-reentrant model
 11487 ;;
 11488                           
 11489                           	psect	text54
 11490  013330                     __ptext54:
 11491                           	opt stack 0
 11492  013330                     _Set_Rotation:
 11493                           	opt stack 20
 11494                           
 11495                           ;incstack = 0
 11496                           ;Set_Rotation@m stored from wreg
 11497  013330  0100               	movlb	0	; () banked
 11498  013332  6FBA               	movwf	Set_Rotation@m& (0+255),b
 11499                           
 11500                           ;LCD.c: 250: UINT8 rotation = 0x00;
 11501  013334  0E00               	movlw	0
 11502  013336  0100               	movlb	0	; () banked
 11503  013338  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11504                           
 11505                           ; BSR set to: 0
 11506                           ;LCD.c: 252: LCD_Write(0x36, 0x0);
 11507  01333A  0E00               	movlw	0
 11508  01333C  0100               	movlb	0	; () banked
 11509  01333E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11510  013340  0E36               	movlw	54
 11511  013342  EC5F  F0A3         	call	_LCD_Write
 11512                           
 11513                           ;LCD.c: 253: rotation = (m % 4);
 11514  013346  0100               	movlb	0	; () banked
 11515  013348  51BA               	movf	Set_Rotation@m& (0+255),w,b
 11516  01334A  0B03               	andlw	3
 11517  01334C  0100               	movlb	0	; () banked
 11518  01334E  6FBB               	movwf	Set_Rotation@rotation& (0+255),b
 11519                           
 11520                           ;LCD.c: 255: switch(rotation)
 11521  013350  D02C               	goto	l117
 11522  013352                     
 11523                           ; BSR set to: 0
 11524                           ;LCD.c: 258: {
 11525                           ;LCD.c: 259: LCD_Write((0x40 | 0x80 | 0x08), 0x1);
 11526                           
 11527                           ; BSR set to: 0
 11528  013352  0E01               	movlw	1
 11529  013354  0100               	movlb	0	; () banked
 11530  013356  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11531  013358  0EC8               	movlw	200
 11532  01335A  EC5F  F0A3         	call	_LCD_Write
 11533                           
 11534                           ;LCD.c: 260: w = 128;
 11535  01335E  0E80               	movlw	128
 11536  013360  6E50               	movwf	_w,c
 11537                           
 11538                           ;LCD.c: 261: l = 128;
 11539  013362  0E80               	movlw	128
 11540  013364  6E4F               	movwf	_l,c
 11541                           
 11542                           ;LCD.c: 262: break;
 11543  013366  0012               	return	
 11544  013368                     
 11545                           ;LCD.c: 265: {
 11546                           ;LCD.c: 266: LCD_Write((0x80 | 0x20 | 0x08), 0x1);
 11547  013368  0E01               	movlw	1
 11548  01336A  0100               	movlb	0	; () banked
 11549  01336C  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11550  01336E  0EA8               	movlw	168
 11551  013370  EC5F  F0A3         	call	_LCD_Write
 11552                           
 11553                           ;LCD.c: 267: w = 128;
 11554  013374  0E80               	movlw	128
 11555  013376  6E50               	movwf	_w,c
 11556                           
 11557                           ;LCD.c: 268: l = 128;
 11558  013378  0E80               	movlw	128
 11559  01337A  6E4F               	movwf	_l,c
 11560                           
 11561                           ;LCD.c: 269: break;
 11562  01337C  0012               	return	
 11563  01337E                     
 11564                           ;LCD.c: 272: {
 11565                           ;LCD.c: 273: LCD_Write((0x08), 0x1);
 11566  01337E  0E01               	movlw	1
 11567  013380  0100               	movlb	0	; () banked
 11568  013382  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11569  013384  0E08               	movlw	8
 11570  013386  EC5F  F0A3         	call	_LCD_Write
 11571                           
 11572                           ;LCD.c: 274: w = 128;
 11573  01338A  0E80               	movlw	128
 11574  01338C  6E50               	movwf	_w,c
 11575                           
 11576                           ;LCD.c: 275: l = 128;
 11577  01338E  0E80               	movlw	128
 11578  013390  6E4F               	movwf	_l,c
 11579                           
 11580                           ;LCD.c: 276: break;
 11581  013392  0012               	return	
 11582  013394                     
 11583                           ;LCD.c: 279: {
 11584                           ;LCD.c: 280: LCD_Write((0x40 | 0x20 | 0x08), 0x1);
 11585  013394  0E01               	movlw	1
 11586  013396  0100               	movlb	0	; () banked
 11587  013398  6FB8               	movwf	LCD_Write@mode& (0+255),b
 11588  01339A  0E68               	movlw	104
 11589  01339C  EC5F  F0A3         	call	_LCD_Write
 11590                           
 11591                           ;LCD.c: 281: w = 128;
 11592  0133A0  0E80               	movlw	128
 11593  0133A2  6E50               	movwf	_w,c
 11594                           
 11595                           ;LCD.c: 282: l = 128;
 11596  0133A4  0E80               	movlw	128
 11597  0133A6  6E4F               	movwf	_l,c
 11598                           
 11599                           ;LCD.c: 284: }
 11600                           ;LCD.c: 285: }
 11601                           
 11602                           ;LCD.c: 283: break;
 11603  0133A8  0012               	return	
 11604  0133AA                     l117:
 11605  0133AA  0100               	movlb	0	; () banked
 11606  0133AC  51BB               	movf	Set_Rotation@rotation& (0+255),w,b
 11607                           
 11608                           ; Switch size 1, requested type "space"
 11609                           ; Number of cases is 4, Range of values is 0 to 3
 11610                           ; switch strategies available:
 11611                           ; Name         Instructions Cycles
 11612                           ; simple_byte           13     7 (average)
 11613                           ;	Chosen strategy is simple_byte
 11614  0133AE  0A00               	xorlw	0	; case 0
 11615  0133B0  B4D8               	btfsc	status,2,c
 11616  0133B2  D7CF               	goto	l118
 11617  0133B4  0A01               	xorlw	1	; case 1
 11618  0133B6  B4D8               	btfsc	status,2,c
 11619  0133B8  D7D7               	goto	l120
 11620  0133BA  0A03               	xorlw	3	; case 2
 11621  0133BC  B4D8               	btfsc	status,2,c
 11622  0133BE  D7DF               	goto	l121
 11623  0133C0  0A01               	xorlw	1	; case 3
 11624  0133C2  A4D8               	btfss	status,2,c
 11625  0133C4  0012               	return	
 11626  0133C6  D7E6               	goto	l122
 11627  0133C8                     __end_of_Set_Rotation:
 11628                           	opt stack 0
 11629                           tosu	equ	0xFFF
 11630                           tosh	equ	0xFFE
 11631                           tosl	equ	0xFFD
 11632                           pclath	equ	0xFFA
 11633                           tblptru	equ	0xFF8
 11634                           tblptrh	equ	0xFF7
 11635                           tblptrl	equ	0xFF6
 11636                           tablat	equ	0xFF5
 11637                           prodh	equ	0xFF4
 11638                           prodl	equ	0xFF3
 11639                           intcon	equ	0xFF2
 11640                           postinc0	equ	0xFEE
 11641                           wreg	equ	0xFE8
 11642                           indf1	equ	0xFE7
 11643                           postdec1	equ	0xFE5
 11644                           fsr1h	equ	0xFE2
 11645                           fsr1l	equ	0xFE1
 11646                           indf2	equ	0xFDF
 11647                           postinc2	equ	0xFDE
 11648                           postdec2	equ	0xFDD
 11649                           plusw2	equ	0xFDB
 11650                           fsr2h	equ	0xFDA
 11651                           fsr2l	equ	0xFD9
 11652                           status	equ	0xFD8
 11653                           
 11654 ;; *************** function _LCD_Fill *****************
 11655 ;; Defined at:
 11656 ;;		line 287 in file "Library/LCD.c"
 11657 ;; Parameters:    Size  Location     Type
 11658 ;;  pColour         2    9[BANK0 ] unsigned short 
 11659 ;; Auto vars:     Size  Location     Type
 11660 ;;  j               1   12[BANK0 ] unsigned char 
 11661 ;;  i               1   11[BANK0 ] unsigned char 
 11662 ;; Return value:  Size  Location     Type
 11663 ;;                  1    wreg      void 
 11664 ;; Registers used:
 11665 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11666 ;; Tracked objects:
 11667 ;;		On entry : 0/0
 11668 ;;		On exit  : 0/0
 11669 ;;		Unchanged: 0/0
 11670 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11671 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11672 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11673 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11674 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11675 ;;Total ram usage:        4 bytes
 11676 ;; Hardware stack levels used:    1
 11677 ;; Hardware stack levels required when called:   10
 11678 ;; This function calls:
 11679 ;;		_LCD_Word_Write
 11680 ;;		_Set_Addr_Window
 11681 ;; This function is called by:
 11682 ;;		_LCD_Init
 11683 ;; This function uses a non-reentrant model
 11684 ;;
 11685                           
 11686                           	psect	text55
 11687  013F24                     __ptext55:
 11688                           	opt stack 0
 11689  013F24                     _LCD_Fill:
 11690                           	opt stack 19
 11691                           
 11692                           ;LCD.c: 296: UINT8 i = 0x00;
 11693                           
 11694                           ;incstack = 0
 11695  013F24  0E00               	movlw	0
 11696  013F26  0100               	movlb	0	; () banked
 11697  013F28  6FC0               	movwf	LCD_Fill@i& (0+255),b
 11698                           
 11699                           ;LCD.c: 297: UINT8 j = 0x00;
 11700  013F2A  0E00               	movlw	0
 11701  013F2C  0100               	movlb	0	; () banked
 11702  013F2E  6FC1               	movwf	LCD_Fill@j& (0+255),b
 11703                           
 11704                           ; BSR set to: 0
 11705                           ;LCD.c: 298: Set_Addr_Window(0, 0, (w - 1), (l - 1));
 11706  013F30  0E00               	movlw	0
 11707  013F32  0100               	movlb	0	; () banked
 11708  013F34  6FBA               	movwf	Set_Addr_Window@ys& (0+255),b
 11709  013F36  0450               	decf	_w,w,c
 11710  013F38  0100               	movlb	0	; () banked
 11711  013F3A  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 11712  013F3C  044F               	decf	_l,w,c
 11713  013F3E  0100               	movlb	0	; () banked
 11714  013F40  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 11715  013F42  0E00               	movlw	0
 11716  013F44  EC04  F097         	call	_Set_Addr_Window
 11717                           
 11718                           ;LCD.c: 299: for (j = l; j > 0; j--)
 11719  013F48  C04F  F0C1         	movff	_l,LCD_Fill@j
 11720  013F4C                     l11811:
 11721  013F4C  0100               	movlb	0	; () banked
 11722  013F4E  51C1               	movf	LCD_Fill@j& (0+255),w,b
 11723  013F50  0100               	movlb	0	; () banked
 11724  013F52  B4D8               	btfsc	status,2,c
 11725  013F54  0012               	return	
 11726                           
 11727                           ; BSR set to: 0
 11728                           ;LCD.c: 300: for (i = w; i > 0; i--)
 11729                           
 11730                           ; BSR set to: 0
 11731  013F56  C050  F0C0         	movff	_w,LCD_Fill@i
 11732  013F5A                     l11815:
 11733                           
 11734                           ; BSR set to: 0
 11735  013F5A  0100               	movlb	0	; () banked
 11736  013F5C  51C0               	movf	LCD_Fill@i& (0+255),w,b
 11737  013F5E  0100               	movlb	0	; () banked
 11738  013F60  B4D8               	btfsc	status,2,c
 11739  013F62  D009               	goto	u7660
 11740                           
 11741                           ; BSR set to: 0
 11742                           ;LCD.c: 301: LCD_Word_Write(pColour);
 11743                           
 11744                           ; BSR set to: 0
 11745                           
 11746                           ; BSR set to: 0
 11747  013F64  C0BE  F0BA         	movff	LCD_Fill@pColour,LCD_Word_Write@value
 11748  013F68  C0BF  F0BB         	movff	LCD_Fill@pColour+1,LCD_Word_Write@value+1
 11749  013F6C  ECE9  F0A3         	call	_LCD_Word_Write	;wreg free
 11750  013F70  0100               	movlb	0	; () banked
 11751  013F72  07C0               	decf	LCD_Fill@i& (0+255),f,b
 11752  013F74  D7F2               	goto	l11815
 11753  013F76                     u7660:
 11754                           
 11755                           ; BSR set to: 0
 11756                           
 11757                           ; BSR set to: 0
 11758  013F76  0100               	movlb	0	; () banked
 11759  013F78  07C1               	decf	LCD_Fill@j& (0+255),f,b
 11760  013F7A  D7E8               	goto	l11811
 11761  013F7C                     __end_of_LCD_Fill:
 11762                           	opt stack 0
 11763                           tosu	equ	0xFFF
 11764                           tosh	equ	0xFFE
 11765                           tosl	equ	0xFFD
 11766                           pclath	equ	0xFFA
 11767                           tblptru	equ	0xFF8
 11768                           tblptrh	equ	0xFF7
 11769                           tblptrl	equ	0xFF6
 11770                           tablat	equ	0xFF5
 11771                           prodh	equ	0xFF4
 11772                           prodl	equ	0xFF3
 11773                           intcon	equ	0xFF2
 11774                           postinc0	equ	0xFEE
 11775                           wreg	equ	0xFE8
 11776                           indf1	equ	0xFE7
 11777                           postdec1	equ	0xFE5
 11778                           fsr1h	equ	0xFE2
 11779                           fsr1l	equ	0xFE1
 11780                           indf2	equ	0xFDF
 11781                           postinc2	equ	0xFDE
 11782                           postdec2	equ	0xFDD
 11783                           plusw2	equ	0xFDB
 11784                           fsr2h	equ	0xFDA
 11785                           fsr2l	equ	0xFD9
 11786                           status	equ	0xFD8
 11787                           
 11788 ;; *************** function _Configure_GPIOs *****************
 11789 ;; Defined at:
 11790 ;;		line 46 in file "Library/LCD.c"
 11791 ;; Parameters:    Size  Location     Type
 11792 ;;		None
 11793 ;; Auto vars:     Size  Location     Type
 11794 ;;		None
 11795 ;; Return value:  Size  Location     Type
 11796 ;;                  1    wreg      void 
 11797 ;; Registers used:
 11798 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11799 ;; Tracked objects:
 11800 ;;		On entry : 0/0
 11801 ;;		On exit  : 0/0
 11802 ;;		Unchanged: 0/0
 11803 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11804 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11805 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11806 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11807 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11808 ;;Total ram usage:        0 bytes
 11809 ;; Hardware stack levels used:    1
 11810 ;; Hardware stack levels required when called:   14
 11811 ;; This function calls:
 11812 ;;		_LCD_Reset
 11813 ;;		_Port_SetPinType
 11814 ;;		_SPI_Init
 11815 ;;		_SPI_MaxSpeed
 11816 ;; This function is called by:
 11817 ;;		_LCD_Init
 11818 ;; This function uses a non-reentrant model
 11819 ;;
 11820                           
 11821                           	psect	text56
 11822  013938                     __ptext56:
 11823                           	opt stack 0
 11824  013938                     _Configure_GPIOs:
 11825                           	opt stack 15
 11826                           
 11827                           ;LCD.c: 49: Port_SetPinType(&PortF, eP7, eTypeOutputPushPull);
 11828                           
 11829                           ; BSR set to: 0
 11830                           ;incstack = 0
 11831  013938  0EB0               	movlw	low _PortF
 11832  01393A  0100               	movlb	0	; () banked
 11833  01393C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11834  01393E  0E03               	movlw	high _PortF
 11835  013940  0100               	movlb	0	; () banked
 11836  013942  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11837  013944  0E07               	movlw	7
 11838  013946  0100               	movlb	0	; () banked
 11839  013948  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11840  01394A  0E03               	movlw	3
 11841  01394C  0100               	movlb	0	; () banked
 11842  01394E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11843  013950  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 11844                           
 11845                           ;LCD.c: 52: Port_SetPinType(&PortF, eP6, eTypeOutputPushPull);
 11846  013954  0EB0               	movlw	low _PortF
 11847  013956  0100               	movlb	0	; () banked
 11848  013958  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 11849  01395A  0E03               	movlw	high _PortF
 11850  01395C  0100               	movlb	0	; () banked
 11851  01395E  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 11852  013960  0E06               	movlw	6
 11853  013962  0100               	movlb	0	; () banked
 11854  013964  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 11855  013966  0E03               	movlw	3
 11856  013968  0100               	movlb	0	; () banked
 11857  01396A  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 11858  01396C  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 11859                           
 11860                           ;LCD.c: 55: LCD_Reset();
 11861  013970  EC0F  F0A0         	call	_LCD_Reset	;wreg free
 11862                           
 11863                           ;LCD.c: 63: SPI_Init((3*1000000L), eSPI2, eSPI_Mode1);
 11864  013974  0EC0               	movlw	192
 11865  013976  0100               	movlb	0	; () banked
 11866  013978  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 11867  01397A  0EC6               	movlw	198
 11868  01397C  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 11869  01397E  0E2D               	movlw	45
 11870  013980  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 11871  013982  0E00               	movlw	0
 11872  013984  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 11873  013986  0E01               	movlw	1
 11874  013988  0100               	movlb	0	; () banked
 11875  01398A  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 11876  01398C  0E01               	movlw	1
 11877  01398E  0100               	movlb	0	; () banked
 11878  013990  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 11879  013992  EC00  F080         	call	_SPI_Init	;wreg free
 11880                           
 11881                           ;LCD.c: 64: SPI_MaxSpeed(&SPI2);
 11882  013996  0E73               	movlw	low _SPI2
 11883  013998  0100               	movlb	0	; () banked
 11884  01399A  6FC4               	movwf	SPI_MaxSpeed@pInput& (0+255),b
 11885  01399C  0E03               	movlw	high _SPI2
 11886  01399E  0100               	movlb	0	; () banked
 11887  0139A0  6FC5               	movwf	(SPI_MaxSpeed@pInput+1)& (0+255),b
 11888  0139A2  ECB4  F09B         	call	_SPI_MaxSpeed	;wreg free
 11889  0139A6  0012               	return		;funcret
 11890  0139A8                     __end_of_Configure_GPIOs:
 11891                           	opt stack 0
 11892                           tosu	equ	0xFFF
 11893                           tosh	equ	0xFFE
 11894                           tosl	equ	0xFFD
 11895                           pclath	equ	0xFFA
 11896                           tblptru	equ	0xFF8
 11897                           tblptrh	equ	0xFF7
 11898                           tblptrl	equ	0xFF6
 11899                           tablat	equ	0xFF5
 11900                           prodh	equ	0xFF4
 11901                           prodl	equ	0xFF3
 11902                           intcon	equ	0xFF2
 11903                           postinc0	equ	0xFEE
 11904                           wreg	equ	0xFE8
 11905                           indf1	equ	0xFE7
 11906                           postdec1	equ	0xFE5
 11907                           fsr1h	equ	0xFE2
 11908                           fsr1l	equ	0xFE1
 11909                           indf2	equ	0xFDF
 11910                           postinc2	equ	0xFDE
 11911                           postdec2	equ	0xFDD
 11912                           plusw2	equ	0xFDB
 11913                           fsr2h	equ	0xFDA
 11914                           fsr2l	equ	0xFD9
 11915                           status	equ	0xFD8
 11916                           
 11917 ;; *************** function _SPI_MaxSpeed *****************
 11918 ;; Defined at:
 11919 ;;		line 201 in file "Library/SPI.c"
 11920 ;; Parameters:    Size  Location     Type
 11921 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 11922 ;;		 -> SPI2(11), 
 11923 ;; Auto vars:     Size  Location     Type
 11924 ;;		None
 11925 ;; Return value:  Size  Location     Type
 11926 ;;                  1    wreg      void 
 11927 ;; Registers used:
 11928 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11929 ;; Tracked objects:
 11930 ;;		On entry : 0/0
 11931 ;;		On exit  : 0/0
 11932 ;;		Unchanged: 0/0
 11933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11934 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11935 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11936 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11937 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11938 ;;Total ram usage:        2 bytes
 11939 ;; Hardware stack levels used:    1
 11940 ;; Hardware stack levels required when called:    9
 11941 ;; This function calls:
 11942 ;;		_Byte_SetBit
 11943 ;;		_Byte_SetQuad
 11944 ;; This function is called by:
 11945 ;;		_Configure_GPIOs
 11946 ;; This function uses a non-reentrant model
 11947 ;;
 11948                           
 11949                           	psect	text57
 11950  013768                     __ptext57:
 11951                           	opt stack 0
 11952  013768                     _SPI_MaxSpeed:
 11953                           	opt stack 19
 11954                           
 11955                           ;SPI.c: 205: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 11956                           
 11957                           ;incstack = 0
 11958  013768  0100               	movlb	0	; () banked
 11959  01376A  EE20 F006          	lfsr	2,6
 11960  01376E  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11961  013770  26D9               	addwf	fsr2l,f,c
 11962  013772  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11963  013774  22DA               	addwfc	fsr2h,f,c
 11964  013776  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11965  01377A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 11966  01377E  0E05               	movlw	5
 11967  013780  0100               	movlb	0	; () banked
 11968  013782  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 11969  013784  0E00               	movlw	0
 11970  013786  0100               	movlb	0	; () banked
 11971  013788  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 11972  01378A  EC77  F09E         	call	_Byte_SetBit	;wreg free
 11973                           
 11974                           ;SPI.c: 208: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)0);
 11975  01378E  0100               	movlb	0	; () banked
 11976  013790  EE20 F006          	lfsr	2,6
 11977  013794  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11978  013796  26D9               	addwf	fsr2l,f,c
 11979  013798  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11980  01379A  22DA               	addwfc	fsr2h,f,c
 11981  01379C  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 11982  0137A0  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 11983  0137A4  0E00               	movlw	0
 11984  0137A6  0100               	movlb	0	; () banked
 11985  0137A8  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 11986  0137AA  0E00               	movlw	0
 11987  0137AC  0100               	movlb	0	; () banked
 11988  0137AE  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 11989  0137B0  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 11990                           
 11991                           ;SPI.c: 209: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 11992  0137B4  0100               	movlb	0	; () banked
 11993  0137B6  EE20 F006          	lfsr	2,6
 11994  0137BA  51C4               	movf	SPI_MaxSpeed@pInput& (0+255),w,b
 11995  0137BC  26D9               	addwf	fsr2l,f,c
 11996  0137BE  51C5               	movf	(SPI_MaxSpeed@pInput+1)& (0+255),w,b
 11997  0137C0  22DA               	addwfc	fsr2h,f,c
 11998  0137C2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 11999  0137C6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 12000  0137CA  0E05               	movlw	5
 12001  0137CC  0100               	movlb	0	; () banked
 12002  0137CE  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 12003  0137D0  0E01               	movlw	1
 12004  0137D2  0100               	movlb	0	; () banked
 12005  0137D4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 12006  0137D6  EC77  F09E         	call	_Byte_SetBit	;wreg free
 12007  0137DA  0012               	return		;funcret
 12008  0137DC                     __end_of_SPI_MaxSpeed:
 12009                           	opt stack 0
 12010                           tosu	equ	0xFFF
 12011                           tosh	equ	0xFFE
 12012                           tosl	equ	0xFFD
 12013                           pclath	equ	0xFFA
 12014                           tblptru	equ	0xFF8
 12015                           tblptrh	equ	0xFF7
 12016                           tblptrl	equ	0xFF6
 12017                           tablat	equ	0xFF5
 12018                           prodh	equ	0xFF4
 12019                           prodl	equ	0xFF3
 12020                           intcon	equ	0xFF2
 12021                           postinc0	equ	0xFEE
 12022                           wreg	equ	0xFE8
 12023                           indf1	equ	0xFE7
 12024                           postdec1	equ	0xFE5
 12025                           fsr1h	equ	0xFE2
 12026                           fsr1l	equ	0xFE1
 12027                           indf2	equ	0xFDF
 12028                           postinc2	equ	0xFDE
 12029                           postdec2	equ	0xFDD
 12030                           plusw2	equ	0xFDB
 12031                           fsr2h	equ	0xFDA
 12032                           fsr2l	equ	0xFD9
 12033                           status	equ	0xFD8
 12034                           
 12035 ;; *************** function _LCD_Reset *****************
 12036 ;; Defined at:
 12037 ;;		line 95 in file "Library/LCD.c"
 12038 ;; Parameters:    Size  Location     Type
 12039 ;;		None
 12040 ;; Auto vars:     Size  Location     Type
 12041 ;;		None
 12042 ;; Return value:  Size  Location     Type
 12043 ;;                  1    wreg      void 
 12044 ;; Registers used:
 12045 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12046 ;; Tracked objects:
 12047 ;;		On entry : 0/0
 12048 ;;		On exit  : 0/0
 12049 ;;		Unchanged: 0/0
 12050 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12051 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12052 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12053 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12054 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12055 ;;Total ram usage:        0 bytes
 12056 ;; Hardware stack levels used:    1
 12057 ;; Hardware stack levels required when called:   13
 12058 ;; This function calls:
 12059 ;;		_LED_Toggle
 12060 ;;		_Reset_High
 12061 ;;		_Reset_Low
 12062 ;;		_delay_ms
 12063 ;; This function is called by:
 12064 ;;		_Configure_GPIOs
 12065 ;; This function uses a non-reentrant model
 12066 ;;
 12067                           
 12068                           	psect	text58
 12069  01401E                     __ptext58:
 12070                           	opt stack 0
 12071  01401E                     _LCD_Reset:
 12072                           	opt stack 15
 12073                           
 12074                           ;LCD.c: 97: Reset_High();
 12075                           
 12076                           ;incstack = 0
 12077  01401E  ECAD  F0A3         	call	_Reset_High	;wreg free
 12078                           
 12079                           ;LCD.c: 98: LED_Toggle(eLED2);
 12080  014022  0E01               	movlw	1
 12081  014024  ECA6  F0A0         	call	_LED_Toggle
 12082                           
 12083                           ;LCD.c: 99: delay_ms(0x80);
 12084  014028  0E00               	movlw	0
 12085  01402A  0100               	movlb	0	; () banked
 12086  01402C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12087  01402E  0E80               	movlw	128
 12088  014030  6FB5               	movwf	delay_ms@ms& (0+255),b
 12089  014032  EC75  F09D         	call	_delay_ms	;wreg free
 12090                           
 12091                           ;LCD.c: 100: LED_Toggle(eLED2);
 12092  014036  0E01               	movlw	1
 12093  014038  ECA6  F0A0         	call	_LED_Toggle
 12094                           
 12095                           ;LCD.c: 101: Reset_Low();
 12096  01403C  EC9E  F0A3         	call	_Reset_Low	;wreg free
 12097                           
 12098                           ;LCD.c: 102: delay_ms(0x80);
 12099  014040  0E00               	movlw	0
 12100  014042  0100               	movlb	0	; () banked
 12101  014044  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12102  014046  0E80               	movlw	128
 12103  014048  6FB5               	movwf	delay_ms@ms& (0+255),b
 12104  01404A  EC75  F09D         	call	_delay_ms	;wreg free
 12105                           
 12106                           ;LCD.c: 103: LED_Toggle(eLED2);
 12107  01404E  0E01               	movlw	1
 12108  014050  ECA6  F0A0         	call	_LED_Toggle
 12109                           
 12110                           ;LCD.c: 104: Reset_High();
 12111  014054  ECAD  F0A3         	call	_Reset_High	;wreg free
 12112                           
 12113                           ;LCD.c: 105: delay_ms(0x80);
 12114  014058  0E00               	movlw	0
 12115  01405A  0100               	movlb	0	; () banked
 12116  01405C  6FB6               	movwf	(delay_ms@ms+1)& (0+255),b
 12117  01405E  0E80               	movlw	128
 12118  014060  6FB5               	movwf	delay_ms@ms& (0+255),b
 12119  014062  EC75  F09D         	call	_delay_ms	;wreg free
 12120                           
 12121                           ;LCD.c: 106: LED_Toggle(eLED2);
 12122  014066  0E01               	movlw	1
 12123  014068  ECA6  F0A0         	call	_LED_Toggle
 12124  01406C  0012               	return		;funcret
 12125  01406E                     __end_of_LCD_Reset:
 12126                           	opt stack 0
 12127                           tosu	equ	0xFFF
 12128                           tosh	equ	0xFFE
 12129                           tosl	equ	0xFFD
 12130                           pclath	equ	0xFFA
 12131                           tblptru	equ	0xFF8
 12132                           tblptrh	equ	0xFF7
 12133                           tblptrl	equ	0xFF6
 12134                           tablat	equ	0xFF5
 12135                           prodh	equ	0xFF4
 12136                           prodl	equ	0xFF3
 12137                           intcon	equ	0xFF2
 12138                           postinc0	equ	0xFEE
 12139                           wreg	equ	0xFE8
 12140                           indf1	equ	0xFE7
 12141                           postdec1	equ	0xFE5
 12142                           fsr1h	equ	0xFE2
 12143                           fsr1l	equ	0xFE1
 12144                           indf2	equ	0xFDF
 12145                           postinc2	equ	0xFDE
 12146                           postdec2	equ	0xFDD
 12147                           plusw2	equ	0xFDB
 12148                           fsr2h	equ	0xFDA
 12149                           fsr2l	equ	0xFD9
 12150                           status	equ	0xFD8
 12151                           
 12152 ;; *************** function _delay_ms *****************
 12153 ;; Defined at:
 12154 ;;		line 240 in file "Library/Types.c"
 12155 ;; Parameters:    Size  Location     Type
 12156 ;;  ms              2    0[BANK0 ] unsigned short 
 12157 ;; Auto vars:     Size  Location     Type
 12158 ;;  u               4    2[BANK0 ] volatile unsigned long 
 12159 ;; Return value:  Size  Location     Type
 12160 ;;                  1    wreg      void 
 12161 ;; Registers used:
 12162 ;;		wreg, status,2, status,0
 12163 ;; Tracked objects:
 12164 ;;		On entry : 0/0
 12165 ;;		On exit  : 0/0
 12166 ;;		Unchanged: 0/0
 12167 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12168 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12169 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12170 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12171 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12172 ;;Total ram usage:        6 bytes
 12173 ;; Hardware stack levels used:    1
 12174 ;; Hardware stack levels required when called:    7
 12175 ;; This function calls:
 12176 ;;		Nothing
 12177 ;; This function is called by:
 12178 ;;		_LCD_Reset
 12179 ;;		_LCD_Init
 12180 ;;		_MXK_Init
 12181 ;;		_main
 12182 ;; This function uses a non-reentrant model
 12183 ;;
 12184                           
 12185                           	psect	text59
 12186  013AEA                     __ptext59:
 12187                           	opt stack 0
 12188  013AEA                     _delay_ms:
 12189                           	opt stack 23
 12190                           
 12191                           ;Types.c: 242: volatile unsigned long u;
 12192                           ;Types.c: 243: while (ms--)
 12193                           
 12194                           ;incstack = 0
 12195  013AEA  D01F               	goto	u7020
 12196  013AEC                     l10965:
 12197                           
 12198                           ;Types.c: 244: {
 12199                           ;Types.c: 246: for (u = 0; u < (((48*1000000L) / 4000UL) / 10UL); u++) {
 12200  013AEC  0E00               	movlw	0
 12201  013AEE  0100               	movlb	0	; () banked
 12202  013AF0  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 12203  013AF2  0E00               	movlw	0
 12204  013AF4  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12205  013AF6  0E00               	movlw	0
 12206  013AF8  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12207  013AFA  0E00               	movlw	0
 12208  013AFC  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12209  013AFE                     l10967:
 12210                           
 12211                           ; BSR set to: 0
 12212  013AFE  0100               	movlb	0	; () banked
 12213  013B00  51BA               	movf	(delay_ms@u+3)& (0+255),w,b	;volatile
 12214  013B02  0100               	movlb	0	; () banked
 12215  013B04  11B9               	iorwf	(delay_ms@u+2)& (0+255),w,b	;volatile
 12216  013B06  E111               	bnz	l10973
 12217  013B08  0EB0               	movlw	176
 12218  013B0A  0100               	movlb	0	; () banked
 12219  013B0C  5DB7               	subwf	delay_ms@u& (0+255),w,b	;volatile
 12220  013B0E  0E04               	movlw	4
 12221  013B10  0100               	movlb	0	; () banked
 12222  013B12  59B8               	subwfb	(delay_ms@u+1)& (0+255),w,b	;volatile
 12223  013B14  B0D8               	btfsc	status,0,c
 12224  013B16  D009               	goto	u7020
 12225                           
 12226                           ; BSR set to: 0
 12227                           
 12228                           ; BSR set to: 0
 12229  013B18  F000               	nop		; ;# 
 12230  013B1A  0E01               	movlw	1
 12231  013B1C  0100               	movlb	0	; () banked
 12232  013B1E  27B7               	addwf	delay_ms@u& (0+255),f,b	;volatile
 12233  013B20  0E00               	movlw	0
 12234  013B22  23B8               	addwfc	(delay_ms@u+1)& (0+255),f,b	;volatile
 12235  013B24  23B9               	addwfc	(delay_ms@u+2)& (0+255),f,b	;volatile
 12236  013B26  23BA               	addwfc	(delay_ms@u+3)& (0+255),f,b	;volatile
 12237  013B28  D7EA               	goto	l10967
 12238  013B2A                     u7020:
 12239  013B2A                     l10973:
 12240  013B2A  0100               	movlb	0	; () banked
 12241  013B2C  07B5               	decf	delay_ms@ms& (0+255),f,b
 12242  013B2E  A0D8               	btfss	status,0,c
 12243  013B30  07B6               	decf	(delay_ms@ms+1)& (0+255),f,b
 12244  013B32  0100               	movlb	0	; () banked
 12245  013B34  29B5               	incf	delay_ms@ms& (0+255),w,b
 12246  013B36  E1DA               	bnz	l10965
 12247  013B38  0100               	movlb	0	; () banked
 12248  013B3A  29B6               	incf	(delay_ms@ms+1)& (0+255),w,b
 12249  013B3C  A4D8               	btfss	status,2,c
 12250  013B3E  D7D6               	goto	l824
 12251                           
 12252                           ; BSR set to: 0
 12253                           ;Types.c: 251: }
 12254                           ;Types.c: 252: }
 12255                           ;Types.c: 253: u = 0x8008;
 12256                           
 12257                           ; BSR set to: 0
 12258  013B40  0E08               	movlw	8
 12259  013B42  0100               	movlb	0	; () banked
 12260  013B44  6FB7               	movwf	delay_ms@u& (0+255),b	;volatile
 12261  013B46  0E80               	movlw	128
 12262  013B48  6FB8               	movwf	(delay_ms@u+1)& (0+255),b	;volatile
 12263  013B4A  0E00               	movlw	0
 12264  013B4C  6FB9               	movwf	(delay_ms@u+2)& (0+255),b	;volatile
 12265  013B4E  0E00               	movlw	0
 12266  013B50  6FBA               	movwf	(delay_ms@u+3)& (0+255),b	;volatile
 12267                           
 12268                           ; BSR set to: 0
 12269  013B52  0012               	return		;funcret
 12270  013B54                     __end_of_delay_ms:
 12271                           	opt stack 0
 12272                           tosu	equ	0xFFF
 12273                           tosh	equ	0xFFE
 12274                           tosl	equ	0xFFD
 12275                           pclath	equ	0xFFA
 12276                           tblptru	equ	0xFF8
 12277                           tblptrh	equ	0xFF7
 12278                           tblptrl	equ	0xFF6
 12279                           tablat	equ	0xFF5
 12280                           prodh	equ	0xFF4
 12281                           prodl	equ	0xFF3
 12282                           intcon	equ	0xFF2
 12283                           postinc0	equ	0xFEE
 12284                           wreg	equ	0xFE8
 12285                           indf1	equ	0xFE7
 12286                           postdec1	equ	0xFE5
 12287                           fsr1h	equ	0xFE2
 12288                           fsr1l	equ	0xFE1
 12289                           indf2	equ	0xFDF
 12290                           postinc2	equ	0xFDE
 12291                           postdec2	equ	0xFDD
 12292                           plusw2	equ	0xFDB
 12293                           fsr2h	equ	0xFDA
 12294                           fsr2l	equ	0xFD9
 12295                           status	equ	0xFD8
 12296                           
 12297 ;; *************** function _Reset_Low *****************
 12298 ;; Defined at:
 12299 ;;		line 32 in file "Library/LCD.c"
 12300 ;; Parameters:    Size  Location     Type
 12301 ;;		None
 12302 ;; Auto vars:     Size  Location     Type
 12303 ;;		None
 12304 ;; Return value:  Size  Location     Type
 12305 ;;                  1    wreg      void 
 12306 ;; Registers used:
 12307 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12308 ;; Tracked objects:
 12309 ;;		On entry : 0/0
 12310 ;;		On exit  : 0/0
 12311 ;;		Unchanged: 0/0
 12312 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12313 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12314 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12315 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12316 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12317 ;;Total ram usage:        0 bytes
 12318 ;; Hardware stack levels used:    1
 12319 ;; Hardware stack levels required when called:   11
 12320 ;; This function calls:
 12321 ;;		_Port_SetPin
 12322 ;; This function is called by:
 12323 ;;		_LCD_Reset
 12324 ;; This function uses a non-reentrant model
 12325 ;;
 12326                           
 12327                           	psect	text60
 12328  01473C                     __ptext60:
 12329                           	opt stack 0
 12330  01473C                     _Reset_Low:
 12331                           	opt stack 16
 12332                           
 12333                           ;LCD.c: 34: Port_SetPin(&PortF, eP6, 1);
 12334                           
 12335                           ; BSR set to: 0
 12336                           ;incstack = 0
 12337  01473C  0EB0               	movlw	low _PortF
 12338  01473E  0100               	movlb	0	; () banked
 12339  014740  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12340  014742  0E03               	movlw	high _PortF
 12341  014744  0100               	movlb	0	; () banked
 12342  014746  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12343  014748  0E06               	movlw	6
 12344  01474A  0100               	movlb	0	; () banked
 12345  01474C  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12346  01474E  0E01               	movlw	1
 12347  014750  0100               	movlb	0	; () banked
 12348  014752  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12349  014754  EC1D  F094         	call	_Port_SetPin	;wreg free
 12350  014758  0012               	return		;funcret
 12351  01475A                     __end_of_Reset_Low:
 12352                           	opt stack 0
 12353                           tosu	equ	0xFFF
 12354                           tosh	equ	0xFFE
 12355                           tosl	equ	0xFFD
 12356                           pclath	equ	0xFFA
 12357                           tblptru	equ	0xFF8
 12358                           tblptrh	equ	0xFF7
 12359                           tblptrl	equ	0xFF6
 12360                           tablat	equ	0xFF5
 12361                           prodh	equ	0xFF4
 12362                           prodl	equ	0xFF3
 12363                           intcon	equ	0xFF2
 12364                           postinc0	equ	0xFEE
 12365                           wreg	equ	0xFE8
 12366                           indf1	equ	0xFE7
 12367                           postdec1	equ	0xFE5
 12368                           fsr1h	equ	0xFE2
 12369                           fsr1l	equ	0xFE1
 12370                           indf2	equ	0xFDF
 12371                           postinc2	equ	0xFDE
 12372                           postdec2	equ	0xFDD
 12373                           plusw2	equ	0xFDB
 12374                           fsr2h	equ	0xFDA
 12375                           fsr2l	equ	0xFD9
 12376                           status	equ	0xFD8
 12377                           
 12378 ;; *************** function _Reset_High *****************
 12379 ;; Defined at:
 12380 ;;		line 36 in file "Library/LCD.c"
 12381 ;; Parameters:    Size  Location     Type
 12382 ;;		None
 12383 ;; Auto vars:     Size  Location     Type
 12384 ;;		None
 12385 ;; Return value:  Size  Location     Type
 12386 ;;                  1    wreg      void 
 12387 ;; Registers used:
 12388 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 12389 ;; Tracked objects:
 12390 ;;		On entry : 0/0
 12391 ;;		On exit  : 0/0
 12392 ;;		Unchanged: 0/0
 12393 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12394 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12395 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12396 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12397 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12398 ;;Total ram usage:        0 bytes
 12399 ;; Hardware stack levels used:    1
 12400 ;; Hardware stack levels required when called:   11
 12401 ;; This function calls:
 12402 ;;		_Port_SetPin
 12403 ;; This function is called by:
 12404 ;;		_LCD_Reset
 12405 ;; This function uses a non-reentrant model
 12406 ;;
 12407                           
 12408                           	psect	text61
 12409  01475A                     __ptext61:
 12410                           	opt stack 0
 12411  01475A                     _Reset_High:
 12412                           	opt stack 16
 12413                           
 12414                           ;LCD.c: 38: Port_SetPin(&PortF, eP6, 0);
 12415                           
 12416                           ;incstack = 0
 12417  01475A  0EB0               	movlw	low _PortF
 12418  01475C  0100               	movlb	0	; () banked
 12419  01475E  6FC4               	movwf	Port_SetPin@pInput& (0+255),b
 12420  014760  0E03               	movlw	high _PortF
 12421  014762  0100               	movlb	0	; () banked
 12422  014764  6FC5               	movwf	(Port_SetPin@pInput+1)& (0+255),b
 12423  014766  0E06               	movlw	6
 12424  014768  0100               	movlb	0	; () banked
 12425  01476A  6FC6               	movwf	Port_SetPin@pPin& (0+255),b
 12426  01476C  0E00               	movlw	0
 12427  01476E  0100               	movlb	0	; () banked
 12428  014770  6FC7               	movwf	Port_SetPin@pValue& (0+255),b
 12429  014772  EC1D  F094         	call	_Port_SetPin	;wreg free
 12430  014776  0012               	return		;funcret
 12431  014778                     __end_of_Reset_High:
 12432                           	opt stack 0
 12433                           tosu	equ	0xFFF
 12434                           tosh	equ	0xFFE
 12435                           tosl	equ	0xFFD
 12436                           pclath	equ	0xFFA
 12437                           tblptru	equ	0xFF8
 12438                           tblptrh	equ	0xFF7
 12439                           tblptrl	equ	0xFF6
 12440                           tablat	equ	0xFF5
 12441                           prodh	equ	0xFF4
 12442                           prodl	equ	0xFF3
 12443                           intcon	equ	0xFF2
 12444                           postinc0	equ	0xFEE
 12445                           wreg	equ	0xFE8
 12446                           indf1	equ	0xFE7
 12447                           postdec1	equ	0xFE5
 12448                           fsr1h	equ	0xFE2
 12449                           fsr1l	equ	0xFE1
 12450                           indf2	equ	0xFDF
 12451                           postinc2	equ	0xFDE
 12452                           postdec2	equ	0xFDD
 12453                           plusw2	equ	0xFDB
 12454                           fsr2h	equ	0xFDA
 12455                           fsr2l	equ	0xFD9
 12456                           status	equ	0xFD8
 12457                           
 12458 ;; *************** function _HMI_Poll *****************
 12459 ;; Defined at:
 12460 ;;		line 252 in file "HMI.c"
 12461 ;; Parameters:    Size  Location     Type
 12462 ;;		None
 12463 ;; Auto vars:     Size  Location     Type
 12464 ;;		None
 12465 ;; Return value:  Size  Location     Type
 12466 ;;                  1    wreg      void 
 12467 ;; Registers used:
 12468 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12469 ;; Tracked objects:
 12470 ;;		On entry : 0/0
 12471 ;;		On exit  : 0/0
 12472 ;;		Unchanged: 0/0
 12473 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12474 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12475 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12476 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12477 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12478 ;;Total ram usage:        0 bytes
 12479 ;; Hardware stack levels used:    1
 12480 ;; Hardware stack levels required when called:   15
 12481 ;; This function calls:
 12482 ;;		_Button_Poll
 12483 ;; This function is called by:
 12484 ;;		_main
 12485 ;; This function uses a non-reentrant model
 12486 ;;
 12487                           
 12488                           	psect	text62
 12489  0137DC                     __ptext62:
 12490                           	opt stack 0
 12491  0137DC                     _HMI_Poll:
 12492                           	opt stack 15
 12493                           
 12494                           ;HMI.c: 254: TRISE = 0xFC;
 12495                           
 12496                           ;incstack = 0
 12497  0137DC  0EFC               	movlw	252
 12498  0137DE  6E96               	movwf	3990,c	;volatile
 12499                           
 12500                           ;HMI.c: 255: Button_Poll(&(HMIBoard.mDIP), 1);
 12501  0137E0  0E5E               	movlw	low (_HMIBoard+48)
 12502  0137E2  0100               	movlb	0	; () banked
 12503  0137E4  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12504  0137E6  0E03               	movlw	high (_HMIBoard+48)
 12505  0137E8  0100               	movlb	0	; () banked
 12506  0137EA  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12507  0137EC  0E01               	movlw	1
 12508  0137EE  0100               	movlb	0	; () banked
 12509  0137F0  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12510  0137F2  ECF1  F08F         	call	_Button_Poll	;wreg free
 12511                           
 12512                           ;HMI.c: 256: Button_Poll(&(HMIBoard.mLeft), 1);
 12513  0137F6  0E40               	movlw	low (_HMIBoard+18)
 12514  0137F8  0100               	movlb	0	; () banked
 12515  0137FA  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12516  0137FC  0E03               	movlw	high (_HMIBoard+18)
 12517  0137FE  0100               	movlb	0	; () banked
 12518  013800  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12519  013802  0E01               	movlw	1
 12520  013804  0100               	movlb	0	; () banked
 12521  013806  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12522  013808  ECF1  F08F         	call	_Button_Poll	;wreg free
 12523                           
 12524                           ;HMI.c: 257: Button_Poll(&(HMIBoard.mRight), 1);
 12525  01380C  0E36               	movlw	low (_HMIBoard+8)
 12526  01380E  0100               	movlb	0	; () banked
 12527  013810  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12528  013812  0E03               	movlw	high (_HMIBoard+8)
 12529  013814  0100               	movlb	0	; () banked
 12530  013816  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12531  013818  0E01               	movlw	1
 12532  01381A  0100               	movlb	0	; () banked
 12533  01381C  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12534  01381E  ECF1  F08F         	call	_Button_Poll	;wreg free
 12535                           
 12536                           ;HMI.c: 258: Button_Poll(&(HMIBoard.mUp), 1);
 12537  013822  0E4A               	movlw	low (_HMIBoard+28)
 12538  013824  0100               	movlb	0	; () banked
 12539  013826  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12540  013828  0E03               	movlw	high (_HMIBoard+28)
 12541  01382A  0100               	movlb	0	; () banked
 12542  01382C  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12543  01382E  0E01               	movlw	1
 12544  013830  0100               	movlb	0	; () banked
 12545  013832  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12546  013834  ECF1  F08F         	call	_Button_Poll	;wreg free
 12547                           
 12548                           ;HMI.c: 259: Button_Poll(&(HMIBoard.mDown), 1);
 12549  013838  0E54               	movlw	low (_HMIBoard+38)
 12550  01383A  0100               	movlb	0	; () banked
 12551  01383C  6FD0               	movwf	Button_Poll@pButton& (0+255),b
 12552  01383E  0E03               	movlw	high (_HMIBoard+38)
 12553  013840  0100               	movlb	0	; () banked
 12554  013842  6FD1               	movwf	(Button_Poll@pButton+1)& (0+255),b
 12555  013844  0E01               	movlw	1
 12556  013846  0100               	movlb	0	; () banked
 12557  013848  6FD2               	movwf	Button_Poll@pIncrement& (0+255),b
 12558  01384A  ECF1  F08F         	call	_Button_Poll	;wreg free
 12559  01384E  0012               	return		;funcret
 12560  013850                     __end_of_HMI_Poll:
 12561                           	opt stack 0
 12562                           tosu	equ	0xFFF
 12563                           tosh	equ	0xFFE
 12564                           tosl	equ	0xFFD
 12565                           pclath	equ	0xFFA
 12566                           tblptru	equ	0xFF8
 12567                           tblptrh	equ	0xFF7
 12568                           tblptrl	equ	0xFF6
 12569                           tablat	equ	0xFF5
 12570                           prodh	equ	0xFF4
 12571                           prodl	equ	0xFF3
 12572                           intcon	equ	0xFF2
 12573                           postinc0	equ	0xFEE
 12574                           wreg	equ	0xFE8
 12575                           indf1	equ	0xFE7
 12576                           postdec1	equ	0xFE5
 12577                           fsr1h	equ	0xFE2
 12578                           fsr1l	equ	0xFE1
 12579                           indf2	equ	0xFDF
 12580                           postinc2	equ	0xFDE
 12581                           postdec2	equ	0xFDD
 12582                           plusw2	equ	0xFDB
 12583                           fsr2h	equ	0xFDA
 12584                           fsr2l	equ	0xFD9
 12585                           status	equ	0xFD8
 12586                           
 12587 ;; *************** function _Button_Poll *****************
 12588 ;; Defined at:
 12589 ;;		line 57 in file "Library/Button.c"
 12590 ;; Parameters:    Size  Location     Type
 12591 ;;  pButton         2   27[BANK0 ] const PTR struct Button
 12592 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 12593 ;;  pIncrement      1   29[BANK0 ] unsigned char 
 12594 ;; Auto vars:     Size  Location     Type
 12595 ;;  Pin             1   35[BANK0 ] unsigned char 
 12596 ;; Return value:  Size  Location     Type
 12597 ;;                  1    wreg      unsigned char 
 12598 ;; Registers used:
 12599 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, 
      +prodh, cstack
 12600 ;; Tracked objects:
 12601 ;;		On entry : 0/0
 12602 ;;		On exit  : 0/0
 12603 ;;		Unchanged: 0/0
 12604 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12605 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12606 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12607 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12608 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12609 ;;Total ram usage:        9 bytes
 12610 ;; Hardware stack levels used:    1
 12611 ;; Hardware stack levels required when called:   14
 12612 ;; This function calls:
 12613 ;;		_Event_DIPSwitch
 12614 ;;		_Event_NULL
 12615 ;;		_Event_TestButton
 12616 ;;		_HMI_DIPSwitch
 12617 ;;		_HMI_DownSwitch
 12618 ;;		_HMI_LeftSwitch
 12619 ;;		_HMI_RightSwitch
 12620 ;;		_HMI_UpSwitch
 12621 ;;		_MXK_DIPSwitch
 12622 ;;		_MXK_TestButton
 12623 ;; This function is called by:
 12624 ;;		_HMI_Poll
 12625 ;;		_MXK_Poll
 12626 ;; This function uses a non-reentrant model
 12627 ;;
 12628                           
 12629                           	psect	text63
 12630  011FE2                     __ptext63:
 12631                           	opt stack 0
 12632  011FE2                     _Button_Poll:
 12633                           	opt stack 15
 12634                           
 12635                           ;Button.c: 59: UINT8 Pin = pButton->mGetState();
 12636                           
 12637                           ;incstack = 0
 12638  011FE2  0100               	movlb	0	; () banked
 12639  011FE4  EE20 F007          	lfsr	2,7
 12640  011FE8  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12641  011FEA  26D9               	addwf	fsr2l,f,c
 12642  011FEC  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12643  011FEE  22DA               	addwfc	fsr2h,f,c
 12644  011FF0  D801               	call	u7588
 12645  011FF2  D00A               	goto	u7589
 12646  011FF4                     u7588:
 12647  011FF4  0005               	push	
 12648  011FF6  6EFA               	movwf	pclath,c
 12649  011FF8  50DE               	movf	postinc2,w,c
 12650  011FFA  6EFD               	movwf	tosl,c
 12651  011FFC  50DE               	movf	postinc2,w,c
 12652  011FFE  6EFE               	movwf	tosh,c
 12653  012000  50DE               	movf	postinc2,w,c
 12654  012002  6EFF               	movwf	tosu,c
 12655  012004  50FA               	movf	pclath,w,c
 12656  012006  0012               	return		;indir
 12657  012008                     u7589:
 12658  012008  0100               	movlb	0	; () banked
 12659  01200A  6FD8               	movwf	Button_Poll@Pin& (0+255),b
 12660                           
 12661                           ; BSR set to: 0
 12662                           ;Button.c: 61: if (pButton->mState == Pin)
 12663  01200C  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 12664  012010  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12665  012014  0100               	movlb	0	; () banked
 12666  012016  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 12667  012018  18DE               	xorwf	postinc2,w,c
 12668  01201A  A4D8               	btfss	status,2,c
 12669  01201C  D021               	goto	l11
 12670                           
 12671                           ; BSR set to: 0
 12672                           ;Button.c: 62: {
 12673                           ;Button.c: 65: if(pIncrement > pButton->mCount)
 12674  01201E  0100               	movlb	0	; () banked
 12675  012020  EE20 F001          	lfsr	2,1
 12676  012024  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12677  012026  26D9               	addwf	fsr2l,f,c
 12678  012028  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12679  01202A  22DA               	addwfc	fsr2h,f,c
 12680  01202C  0100               	movlb	0	; () banked
 12681  01202E  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12682  012030  5CDE               	subwf	postinc2,w,c
 12683  012032  B0D8               	btfsc	status,0,c
 12684  012034  D00A               	goto	l12
 12685                           
 12686                           ; BSR set to: 0
 12687                           ;Button.c: 66: pButton->mCount = 0;
 12688  012036  0100               	movlb	0	; () banked
 12689  012038  EE20 F001          	lfsr	2,1
 12690  01203C  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12691  01203E  26D9               	addwf	fsr2l,f,c
 12692  012040  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12693  012042  22DA               	addwfc	fsr2h,f,c
 12694  012044  0E00               	movlw	0
 12695  012046  6EDF               	movwf	indf2,c
 12696  012048  0012               	return	
 12697  01204A                     l12:
 12698                           
 12699                           ; BSR set to: 0
 12700                           ;Button.c: 67: else
 12701                           ;Button.c: 68: pButton->mCount -= pIncrement;
 12702                           
 12703                           ; BSR set to: 0
 12704  01204A  0100               	movlb	0	; () banked
 12705  01204C  EE20 F001          	lfsr	2,1
 12706  012050  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12707  012052  26D9               	addwf	fsr2l,f,c
 12708  012054  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12709  012056  22DA               	addwfc	fsr2h,f,c
 12710  012058  0100               	movlb	0	; () banked
 12711  01205A  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12712  01205C  5EDF               	subwf	indf2,f,c
 12713                           
 12714                           ; BSR set to: 0
 12715                           ;Button.c: 69: }
 12716  01205E  0012               	return	
 12717  012060                     l11:
 12718                           
 12719                           ; BSR set to: 0
 12720                           ;Button.c: 72: else if(pButton->mCount + pIncrement > pButton->mCount)
 12721                           
 12722                           ; BSR set to: 0
 12723  012060  0100               	movlb	0	; () banked
 12724  012062  EE20 F001          	lfsr	2,1
 12725  012066  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12726  012068  26D9               	addwf	fsr2l,f,c
 12727  01206A  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12728  01206C  22DA               	addwfc	fsr2h,f,c
 12729  01206E  50DF               	movf	indf2,w,c
 12730  012070  0100               	movlb	0	; () banked
 12731  012072  6FD3               	movwf	??_Button_Poll& (0+255),b
 12732  012074  6BD4               	clrf	(??_Button_Poll+1)& (0+255),b
 12733  012076  0100               	movlb	0	; () banked
 12734  012078  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12735  01207A  0100               	movlb	0	; () banked
 12736  01207C  27D3               	addwf	??_Button_Poll& (0+255),f,b
 12737  01207E  0E00               	movlw	0
 12738  012080  23D4               	addwfc	(??_Button_Poll+1)& (0+255),f,b
 12739  012082  0100               	movlb	0	; () banked
 12740  012084  EE20 F001          	lfsr	2,1
 12741  012088  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12742  01208A  26D9               	addwf	fsr2l,f,c
 12743  01208C  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12744  01208E  22DA               	addwfc	fsr2h,f,c
 12745  012090  50DF               	movf	indf2,w,c
 12746  012092  0100               	movlb	0	; () banked
 12747  012094  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 12748  012096  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 12749  012098  0100               	movlb	0	; () banked
 12750  01209A  51D3               	movf	??_Button_Poll& (0+255),w,b
 12751  01209C  0100               	movlb	0	; () banked
 12752  01209E  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12753  0120A0  0100               	movlb	0	; () banked
 12754  0120A2  51D6               	movf	(??_Button_Poll+3)& (0+255),w,b
 12755  0120A4  0A80               	xorlw	128
 12756  0120A6  0100               	movlb	0	; () banked
 12757  0120A8  6FD7               	movwf	(??_Button_Poll+4)& (0+255),b
 12758  0120AA  0100               	movlb	0	; () banked
 12759  0120AC  51D4               	movf	(??_Button_Poll+1)& (0+255),w,b
 12760  0120AE  0A80               	xorlw	128
 12761  0120B0  0100               	movlb	0	; () banked
 12762  0120B2  59D7               	subwfb	(??_Button_Poll+4)& (0+255),w,b
 12763  0120B4  B0D8               	btfsc	status,0,c
 12764  0120B6  0012               	return	
 12765                           
 12766                           ; BSR set to: 0
 12767                           ;Button.c: 73: {
 12768                           ;Button.c: 75: pButton->mCount += pIncrement;
 12769  0120B8  0100               	movlb	0	; () banked
 12770  0120BA  EE20 F001          	lfsr	2,1
 12771  0120BE  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12772  0120C0  26D9               	addwf	fsr2l,f,c
 12773  0120C2  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12774  0120C4  22DA               	addwfc	fsr2h,f,c
 12775  0120C6  0100               	movlb	0	; () banked
 12776  0120C8  51D2               	movf	Button_Poll@pIncrement& (0+255),w,b
 12777  0120CA  26DF               	addwf	indf2,f,c
 12778                           
 12779                           ; BSR set to: 0
 12780                           ;Button.c: 76: if(pButton->mCount >= pButton->mThreshold)
 12781  0120CC  0100               	movlb	0	; () banked
 12782  0120CE  EE20 F002          	lfsr	2,2
 12783  0120D2  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12784  0120D4  26D9               	addwf	fsr2l,f,c
 12785  0120D6  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12786  0120D8  22DA               	addwfc	fsr2h,f,c
 12787  0120DA  0100               	movlb	0	; () banked
 12788  0120DC  EE10 F001          	lfsr	1,1
 12789  0120E0  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12790  0120E2  26E1               	addwf	fsr1l,f,c
 12791  0120E4  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12792  0120E6  22E2               	addwfc	fsr1h,f,c
 12793  0120E8  50E7               	movf	indf1,w,c
 12794  0120EA  0100               	movlb	0	; () banked
 12795  0120EC  6FD5               	movwf	(??_Button_Poll+2)& (0+255),b
 12796  0120EE  6BD6               	clrf	(??_Button_Poll+3)& (0+255),b
 12797  0120F0  50DE               	movf	postinc2,w,c
 12798  0120F2  0100               	movlb	0	; () banked
 12799  0120F4  5DD5               	subwf	(??_Button_Poll+2)& (0+255),w,b
 12800  0120F6  50DE               	movf	postinc2,w,c
 12801  0120F8  0100               	movlb	0	; () banked
 12802  0120FA  59D6               	subwfb	(??_Button_Poll+3)& (0+255),w,b
 12803  0120FC  A0D8               	btfss	status,0,c
 12804  0120FE  0012               	return	
 12805                           
 12806                           ; BSR set to: 0
 12807                           ;Button.c: 77: {
 12808                           ;Button.c: 79: pButton->mState = Pin;
 12809  012100  C0D0  FFD9         	movff	Button_Poll@pButton,fsr2l
 12810  012104  C0D1  FFDA         	movff	Button_Poll@pButton+1,fsr2h
 12811  012108  C0D8  FFDF         	movff	Button_Poll@Pin,indf2
 12812                           
 12813                           ; BSR set to: 0
 12814                           ;Button.c: 80: pButton->mCount = 0;
 12815  01210C  0100               	movlb	0	; () banked
 12816  01210E  EE20 F001          	lfsr	2,1
 12817  012112  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12818  012114  26D9               	addwf	fsr2l,f,c
 12819  012116  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12820  012118  22DA               	addwfc	fsr2h,f,c
 12821  01211A  0E00               	movlw	0
 12822  01211C  6EDF               	movwf	indf2,c
 12823                           
 12824                           ; BSR set to: 0
 12825                           ;Button.c: 83: pButton->mFunction(Pin);
 12826  01211E  0100               	movlb	0	; () banked
 12827  012120  EE20 F004          	lfsr	2,4
 12828  012124  51D0               	movf	Button_Poll@pButton& (0+255),w,b
 12829  012126  26D9               	addwf	fsr2l,f,c
 12830  012128  51D1               	movf	(Button_Poll@pButton+1)& (0+255),w,b
 12831  01212A  22DA               	addwfc	fsr2h,f,c
 12832  01212C  D801               	call	u7638
 12833  01212E  0012               	return	
 12834  012130                     u7638:
 12835  012130  0005               	push	
 12836  012132  6EFA               	movwf	pclath,c
 12837  012134  50DE               	movf	postinc2,w,c
 12838  012136  6EFD               	movwf	tosl,c
 12839  012138  50DE               	movf	postinc2,w,c
 12840  01213A  6EFE               	movwf	tosh,c
 12841  01213C  50DE               	movf	postinc2,w,c
 12842  01213E  6EFF               	movwf	tosu,c
 12843  012140  50FA               	movf	pclath,w,c
 12844  012142  0100               	movlb	0	; () banked
 12845  012144  51D8               	movf	Button_Poll@Pin& (0+255),w,b
 12846  012146  0012               	return		;indir
 12847  012148                     __end_of_Button_Poll:
 12848                           	opt stack 0
 12849                           tosu	equ	0xFFF
 12850                           tosh	equ	0xFFE
 12851                           tosl	equ	0xFFD
 12852                           pclath	equ	0xFFA
 12853                           tblptru	equ	0xFF8
 12854                           tblptrh	equ	0xFF7
 12855                           tblptrl	equ	0xFF6
 12856                           tablat	equ	0xFF5
 12857                           prodh	equ	0xFF4
 12858                           prodl	equ	0xFF3
 12859                           intcon	equ	0xFF2
 12860                           postinc0	equ	0xFEE
 12861                           wreg	equ	0xFE8
 12862                           indf1	equ	0xFE7
 12863                           postdec1	equ	0xFE5
 12864                           fsr1h	equ	0xFE2
 12865                           fsr1l	equ	0xFE1
 12866                           indf2	equ	0xFDF
 12867                           postinc2	equ	0xFDE
 12868                           postdec2	equ	0xFDD
 12869                           plusw2	equ	0xFDB
 12870                           fsr2h	equ	0xFDA
 12871                           fsr2l	equ	0xFD9
 12872                           status	equ	0xFD8
 12873                           
 12874 ;; *************** function _MXK_DIPSwitch *****************
 12875 ;; Defined at:
 12876 ;;		line 24 in file "Library/MXK.c"
 12877 ;; Parameters:    Size  Location     Type
 12878 ;;		None
 12879 ;; Auto vars:     Size  Location     Type
 12880 ;;		None
 12881 ;; Return value:  Size  Location     Type
 12882 ;;                  1    wreg      unsigned char 
 12883 ;; Registers used:
 12884 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12885 ;; Tracked objects:
 12886 ;;		On entry : 0/0
 12887 ;;		On exit  : 0/0
 12888 ;;		Unchanged: 0/0
 12889 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12894 ;;Total ram usage:        0 bytes
 12895 ;; Hardware stack levels used:    1
 12896 ;; Hardware stack levels required when called:    8
 12897 ;; This function calls:
 12898 ;;		_Port_GetQuad
 12899 ;; This function is called by:
 12900 ;;		_FunctInitButton
 12901 ;;		_Button_Poll
 12902 ;;		_main
 12903 ;; This function uses a non-reentrant model
 12904 ;;
 12905                           
 12906                           	psect	text64
 12907  01485A                     __ptext64:
 12908                           	opt stack 0
 12909  01485A                     _MXK_DIPSwitch:
 12910                           	opt stack 22
 12911                           
 12912                           ;MXK.c: 26: return Port_GetQuad(&PortD, eP0_3);
 12913                           
 12914                           ;incstack = 0
 12915  01485A  0E99               	movlw	low _PortD
 12916  01485C  0100               	movlb	0	; () banked
 12917  01485E  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 12918  014860  0E00               	movlw	high _PortD
 12919  014862  0100               	movlb	0	; () banked
 12920  014864  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 12921  014866  0E00               	movlw	0
 12922  014868  0100               	movlb	0	; () banked
 12923  01486A  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 12924  01486C  EC5D  F0A0         	call	_Port_GetQuad
 12925  014870  0012               	return	
 12926  014872                     __end_of_MXK_DIPSwitch:
 12927                           	opt stack 0
 12928                           tosu	equ	0xFFF
 12929                           tosh	equ	0xFFE
 12930                           tosl	equ	0xFFD
 12931                           pclath	equ	0xFFA
 12932                           tblptru	equ	0xFF8
 12933                           tblptrh	equ	0xFF7
 12934                           tblptrl	equ	0xFF6
 12935                           tablat	equ	0xFF5
 12936                           prodh	equ	0xFF4
 12937                           prodl	equ	0xFF3
 12938                           intcon	equ	0xFF2
 12939                           postinc0	equ	0xFEE
 12940                           wreg	equ	0xFE8
 12941                           indf1	equ	0xFE7
 12942                           postdec1	equ	0xFE5
 12943                           fsr1h	equ	0xFE2
 12944                           fsr1l	equ	0xFE1
 12945                           indf2	equ	0xFDF
 12946                           postinc2	equ	0xFDE
 12947                           postdec2	equ	0xFDD
 12948                           plusw2	equ	0xFDB
 12949                           fsr2h	equ	0xFDA
 12950                           fsr2l	equ	0xFD9
 12951                           status	equ	0xFD8
 12952                           
 12953 ;; *************** function _HMI_DIPSwitch *****************
 12954 ;; Defined at:
 12955 ;;		line 47 in file "HMI.c"
 12956 ;; Parameters:    Size  Location     Type
 12957 ;;		None
 12958 ;; Auto vars:     Size  Location     Type
 12959 ;;		None
 12960 ;; Return value:  Size  Location     Type
 12961 ;;                  1    wreg      unsigned char 
 12962 ;; Registers used:
 12963 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12964 ;; Tracked objects:
 12965 ;;		On entry : 0/0
 12966 ;;		On exit  : 0/0
 12967 ;;		Unchanged: 0/0
 12968 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12969 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12970 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12971 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12972 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12973 ;;Total ram usage:        0 bytes
 12974 ;; Hardware stack levels used:    1
 12975 ;; Hardware stack levels required when called:    8
 12976 ;; This function calls:
 12977 ;;		_Port_GetQuad
 12978 ;; This function is called by:
 12979 ;;		_HMI_Init
 12980 ;;		_Button_Poll
 12981 ;;		_main
 12982 ;; This function uses a non-reentrant model
 12983 ;;
 12984                           
 12985                           	psect	text65
 12986  014872                     __ptext65:
 12987                           	opt stack 0
 12988  014872                     _HMI_DIPSwitch:
 12989                           	opt stack 20
 12990                           
 12991                           ;HMI.c: 49: return Port_GetQuad(&PortE, eP0_3);
 12992                           
 12993                           ;incstack = 0
 12994  014872  0E8F               	movlw	low _PortE
 12995  014874  0100               	movlb	0	; () banked
 12996  014876  6FB5               	movwf	Port_GetQuad@pInput& (0+255),b
 12997  014878  0E00               	movlw	high _PortE
 12998  01487A  0100               	movlb	0	; () banked
 12999  01487C  6FB6               	movwf	(Port_GetQuad@pInput+1)& (0+255),b
 13000  01487E  0E00               	movlw	0
 13001  014880  0100               	movlb	0	; () banked
 13002  014882  6FB7               	movwf	Port_GetQuad@pQuad& (0+255),b
 13003  014884  EC5D  F0A0         	call	_Port_GetQuad	;wreg free
 13004  014888  0012               	return	
 13005  01488A                     __end_of_HMI_DIPSwitch:
 13006                           	opt stack 0
 13007                           tosu	equ	0xFFF
 13008                           tosh	equ	0xFFE
 13009                           tosl	equ	0xFFD
 13010                           pclath	equ	0xFFA
 13011                           tblptru	equ	0xFF8
 13012                           tblptrh	equ	0xFF7
 13013                           tblptrl	equ	0xFF6
 13014                           tablat	equ	0xFF5
 13015                           prodh	equ	0xFF4
 13016                           prodl	equ	0xFF3
 13017                           intcon	equ	0xFF2
 13018                           postinc0	equ	0xFEE
 13019                           wreg	equ	0xFE8
 13020                           indf1	equ	0xFE7
 13021                           postdec1	equ	0xFE5
 13022                           fsr1h	equ	0xFE2
 13023                           fsr1l	equ	0xFE1
 13024                           indf2	equ	0xFDF
 13025                           postinc2	equ	0xFDE
 13026                           postdec2	equ	0xFDD
 13027                           plusw2	equ	0xFDB
 13028                           fsr2h	equ	0xFDA
 13029                           fsr2l	equ	0xFD9
 13030                           status	equ	0xFD8
 13031                           
 13032 ;; *************** function _HMI_DownSwitch *****************
 13033 ;; Defined at:
 13034 ;;		line 42 in file "HMI.c"
 13035 ;; Parameters:    Size  Location     Type
 13036 ;;		None
 13037 ;; Auto vars:     Size  Location     Type
 13038 ;;		None
 13039 ;; Return value:  Size  Location     Type
 13040 ;;                  1    wreg      unsigned char 
 13041 ;; Registers used:
 13042 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13043 ;; Tracked objects:
 13044 ;;		On entry : 0/0
 13045 ;;		On exit  : 0/0
 13046 ;;		Unchanged: 0/0
 13047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13052 ;;Total ram usage:        0 bytes
 13053 ;; Hardware stack levels used:    1
 13054 ;; Hardware stack levels required when called:    8
 13055 ;; This function calls:
 13056 ;;		_Port_GetPin
 13057 ;; This function is called by:
 13058 ;;		_HMI_Init
 13059 ;;		_Button_Poll
 13060 ;;		_main
 13061 ;; This function uses a non-reentrant model
 13062 ;;
 13063                           
 13064                           	psect	text66
 13065  01488A                     __ptext66:
 13066                           	opt stack 0
 13067  01488A                     _HMI_DownSwitch:
 13068                           	opt stack 20
 13069                           
 13070                           ;HMI.c: 44: return Port_GetPin(&PortE, eP6);
 13071                           
 13072                           ;incstack = 0
 13073  01488A  0E8F               	movlw	low _PortE
 13074  01488C  0100               	movlb	0	; () banked
 13075  01488E  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13076  014890  0E00               	movlw	high _PortE
 13077  014892  0100               	movlb	0	; () banked
 13078  014894  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13079  014896  0E06               	movlw	6
 13080  014898  0100               	movlb	0	; () banked
 13081  01489A  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13082  01489C  ECED  F0A0         	call	_Port_GetPin	;wreg free
 13083  0148A0  0012               	return	
 13084  0148A2                     __end_of_HMI_DownSwitch:
 13085                           	opt stack 0
 13086                           tosu	equ	0xFFF
 13087                           tosh	equ	0xFFE
 13088                           tosl	equ	0xFFD
 13089                           pclath	equ	0xFFA
 13090                           tblptru	equ	0xFF8
 13091                           tblptrh	equ	0xFF7
 13092                           tblptrl	equ	0xFF6
 13093                           tablat	equ	0xFF5
 13094                           prodh	equ	0xFF4
 13095                           prodl	equ	0xFF3
 13096                           intcon	equ	0xFF2
 13097                           postinc0	equ	0xFEE
 13098                           wreg	equ	0xFE8
 13099                           indf1	equ	0xFE7
 13100                           postdec1	equ	0xFE5
 13101                           fsr1h	equ	0xFE2
 13102                           fsr1l	equ	0xFE1
 13103                           indf2	equ	0xFDF
 13104                           postinc2	equ	0xFDE
 13105                           postdec2	equ	0xFDD
 13106                           plusw2	equ	0xFDB
 13107                           fsr2h	equ	0xFDA
 13108                           fsr2l	equ	0xFD9
 13109                           status	equ	0xFD8
 13110                           
 13111 ;; *************** function _HMI_UpSwitch *****************
 13112 ;; Defined at:
 13113 ;;		line 37 in file "HMI.c"
 13114 ;; Parameters:    Size  Location     Type
 13115 ;;		None
 13116 ;; Auto vars:     Size  Location     Type
 13117 ;;		None
 13118 ;; Return value:  Size  Location     Type
 13119 ;;                  1    wreg      unsigned char 
 13120 ;; Registers used:
 13121 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13122 ;; Tracked objects:
 13123 ;;		On entry : 0/0
 13124 ;;		On exit  : 0/0
 13125 ;;		Unchanged: 0/0
 13126 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13127 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13128 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13129 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13130 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13131 ;;Total ram usage:        0 bytes
 13132 ;; Hardware stack levels used:    1
 13133 ;; Hardware stack levels required when called:    8
 13134 ;; This function calls:
 13135 ;;		_Port_GetPin
 13136 ;; This function is called by:
 13137 ;;		_HMI_Init
 13138 ;;		_Button_Poll
 13139 ;;		_main
 13140 ;; This function uses a non-reentrant model
 13141 ;;
 13142                           
 13143                           	psect	text67
 13144  0148A2                     __ptext67:
 13145                           	opt stack 0
 13146  0148A2                     _HMI_UpSwitch:
 13147                           	opt stack 22
 13148                           
 13149                           ;HMI.c: 39: return Port_GetPin(&PortE, eP7);
 13150                           
 13151                           ;incstack = 0
 13152  0148A2  0E8F               	movlw	low _PortE
 13153  0148A4  0100               	movlb	0	; () banked
 13154  0148A6  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13155  0148A8  0E00               	movlw	high _PortE
 13156  0148AA  0100               	movlb	0	; () banked
 13157  0148AC  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13158  0148AE  0E07               	movlw	7
 13159  0148B0  0100               	movlb	0	; () banked
 13160  0148B2  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13161  0148B4  ECED  F0A0         	call	_Port_GetPin	;wreg free
 13162  0148B8  0012               	return	
 13163  0148BA                     __end_of_HMI_UpSwitch:
 13164                           	opt stack 0
 13165                           tosu	equ	0xFFF
 13166                           tosh	equ	0xFFE
 13167                           tosl	equ	0xFFD
 13168                           pclath	equ	0xFFA
 13169                           tblptru	equ	0xFF8
 13170                           tblptrh	equ	0xFF7
 13171                           tblptrl	equ	0xFF6
 13172                           tablat	equ	0xFF5
 13173                           prodh	equ	0xFF4
 13174                           prodl	equ	0xFF3
 13175                           intcon	equ	0xFF2
 13176                           postinc0	equ	0xFEE
 13177                           wreg	equ	0xFE8
 13178                           indf1	equ	0xFE7
 13179                           postdec1	equ	0xFE5
 13180                           fsr1h	equ	0xFE2
 13181                           fsr1l	equ	0xFE1
 13182                           indf2	equ	0xFDF
 13183                           postinc2	equ	0xFDE
 13184                           postdec2	equ	0xFDD
 13185                           plusw2	equ	0xFDB
 13186                           fsr2h	equ	0xFDA
 13187                           fsr2l	equ	0xFD9
 13188                           status	equ	0xFD8
 13189                           
 13190 ;; *************** function _HMI_RightSwitch *****************
 13191 ;; Defined at:
 13192 ;;		line 32 in file "HMI.c"
 13193 ;; Parameters:    Size  Location     Type
 13194 ;;		None
 13195 ;; Auto vars:     Size  Location     Type
 13196 ;;		None
 13197 ;; Return value:  Size  Location     Type
 13198 ;;                  1    wreg      unsigned char 
 13199 ;; Registers used:
 13200 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13201 ;; Tracked objects:
 13202 ;;		On entry : 0/0
 13203 ;;		On exit  : 0/0
 13204 ;;		Unchanged: 0/0
 13205 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13206 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13207 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13208 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13209 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13210 ;;Total ram usage:        0 bytes
 13211 ;; Hardware stack levels used:    1
 13212 ;; Hardware stack levels required when called:    8
 13213 ;; This function calls:
 13214 ;;		_Port_GetPin
 13215 ;; This function is called by:
 13216 ;;		_HMI_Init
 13217 ;;		_Button_Poll
 13218 ;;		_main
 13219 ;; This function uses a non-reentrant model
 13220 ;;
 13221                           
 13222                           	psect	text68
 13223  0148BA                     __ptext68:
 13224                           	opt stack 0
 13225  0148BA                     _HMI_RightSwitch:
 13226                           	opt stack 22
 13227                           
 13228                           ;HMI.c: 34: return Port_GetPin(&PortE, eP4);
 13229                           
 13230                           ;incstack = 0
 13231  0148BA  0E8F               	movlw	low _PortE
 13232  0148BC  0100               	movlb	0	; () banked
 13233  0148BE  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13234  0148C0  0E00               	movlw	high _PortE
 13235  0148C2  0100               	movlb	0	; () banked
 13236  0148C4  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13237  0148C6  0E04               	movlw	4
 13238  0148C8  0100               	movlb	0	; () banked
 13239  0148CA  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13240  0148CC  ECED  F0A0         	call	_Port_GetPin	;wreg free
 13241  0148D0  0012               	return	
 13242  0148D2                     __end_of_HMI_RightSwitch:
 13243                           	opt stack 0
 13244                           tosu	equ	0xFFF
 13245                           tosh	equ	0xFFE
 13246                           tosl	equ	0xFFD
 13247                           pclath	equ	0xFFA
 13248                           tblptru	equ	0xFF8
 13249                           tblptrh	equ	0xFF7
 13250                           tblptrl	equ	0xFF6
 13251                           tablat	equ	0xFF5
 13252                           prodh	equ	0xFF4
 13253                           prodl	equ	0xFF3
 13254                           intcon	equ	0xFF2
 13255                           postinc0	equ	0xFEE
 13256                           wreg	equ	0xFE8
 13257                           indf1	equ	0xFE7
 13258                           postdec1	equ	0xFE5
 13259                           fsr1h	equ	0xFE2
 13260                           fsr1l	equ	0xFE1
 13261                           indf2	equ	0xFDF
 13262                           postinc2	equ	0xFDE
 13263                           postdec2	equ	0xFDD
 13264                           plusw2	equ	0xFDB
 13265                           fsr2h	equ	0xFDA
 13266                           fsr2l	equ	0xFD9
 13267                           status	equ	0xFD8
 13268                           
 13269 ;; *************** function _HMI_LeftSwitch *****************
 13270 ;; Defined at:
 13271 ;;		line 27 in file "HMI.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;		None
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;		None
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      unsigned char 
 13278 ;; Registers used:
 13279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13289 ;;Total ram usage:        0 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    8
 13292 ;; This function calls:
 13293 ;;		_Port_GetPin
 13294 ;; This function is called by:
 13295 ;;		_HMI_Init
 13296 ;;		_Button_Poll
 13297 ;;		_main
 13298 ;; This function uses a non-reentrant model
 13299 ;;
 13300                           
 13301                           	psect	text69
 13302  0148D2                     __ptext69:
 13303                           	opt stack 0
 13304  0148D2                     _HMI_LeftSwitch:
 13305                           	opt stack 20
 13306                           
 13307                           ;HMI.c: 29: return Port_GetPin(&PortE, eP5);
 13308                           
 13309                           ;incstack = 0
 13310  0148D2  0E8F               	movlw	low _PortE
 13311  0148D4  0100               	movlb	0	; () banked
 13312  0148D6  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13313  0148D8  0E00               	movlw	high _PortE
 13314  0148DA  0100               	movlb	0	; () banked
 13315  0148DC  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13316  0148DE  0E05               	movlw	5
 13317  0148E0  0100               	movlb	0	; () banked
 13318  0148E2  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13319  0148E4  ECED  F0A0         	call	_Port_GetPin	;wreg free
 13320  0148E8  0012               	return	
 13321  0148EA                     __end_of_HMI_LeftSwitch:
 13322                           	opt stack 0
 13323                           tosu	equ	0xFFF
 13324                           tosh	equ	0xFFE
 13325                           tosl	equ	0xFFD
 13326                           pclath	equ	0xFFA
 13327                           tblptru	equ	0xFF8
 13328                           tblptrh	equ	0xFF7
 13329                           tblptrl	equ	0xFF6
 13330                           tablat	equ	0xFF5
 13331                           prodh	equ	0xFF4
 13332                           prodl	equ	0xFF3
 13333                           intcon	equ	0xFF2
 13334                           postinc0	equ	0xFEE
 13335                           wreg	equ	0xFE8
 13336                           indf1	equ	0xFE7
 13337                           postdec1	equ	0xFE5
 13338                           fsr1h	equ	0xFE2
 13339                           fsr1l	equ	0xFE1
 13340                           indf2	equ	0xFDF
 13341                           postinc2	equ	0xFDE
 13342                           postdec2	equ	0xFDD
 13343                           plusw2	equ	0xFDB
 13344                           fsr2h	equ	0xFDA
 13345                           fsr2l	equ	0xFD9
 13346                           status	equ	0xFD8
 13347                           
 13348 ;; *************** function _MXK_TestButton *****************
 13349 ;; Defined at:
 13350 ;;		line 14 in file "Library/MXK.c"
 13351 ;; Parameters:    Size  Location     Type
 13352 ;;		None
 13353 ;; Auto vars:     Size  Location     Type
 13354 ;;		None
 13355 ;; Return value:  Size  Location     Type
 13356 ;;                  1    wreg      unsigned char 
 13357 ;; Registers used:
 13358 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 13359 ;; Tracked objects:
 13360 ;;		On entry : 0/0
 13361 ;;		On exit  : 0/0
 13362 ;;		Unchanged: 0/0
 13363 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13364 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13365 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13366 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13367 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13368 ;;Total ram usage:        0 bytes
 13369 ;; Hardware stack levels used:    1
 13370 ;; Hardware stack levels required when called:    8
 13371 ;; This function calls:
 13372 ;;		_Port_GetPin
 13373 ;; This function is called by:
 13374 ;;		_FunctInitButton
 13375 ;;		_Button_Poll
 13376 ;;		_main
 13377 ;; This function uses a non-reentrant model
 13378 ;;
 13379                           
 13380                           	psect	text70
 13381  0148EA                     __ptext70:
 13382                           	opt stack 0
 13383  0148EA                     _MXK_TestButton:
 13384                           	opt stack 22
 13385                           
 13386                           ;MXK.c: 16: return Port_GetPin(&PortB, eP4);
 13387                           
 13388                           ;incstack = 0
 13389  0148EA  0E9C               	movlw	low _PortB
 13390  0148EC  0100               	movlb	0	; () banked
 13391  0148EE  6FB5               	movwf	Port_GetPin@pInput& (0+255),b
 13392  0148F0  0E03               	movlw	high _PortB
 13393  0148F2  0100               	movlb	0	; () banked
 13394  0148F4  6FB6               	movwf	(Port_GetPin@pInput+1)& (0+255),b
 13395  0148F6  0E04               	movlw	4
 13396  0148F8  0100               	movlb	0	; () banked
 13397  0148FA  6FB7               	movwf	Port_GetPin@pPin& (0+255),b
 13398  0148FC  ECED  F0A0         	call	_Port_GetPin	;wreg free
 13399  014900  0012               	return	
 13400  014902                     __end_of_MXK_TestButton:
 13401                           	opt stack 0
 13402                           tosu	equ	0xFFF
 13403                           tosh	equ	0xFFE
 13404                           tosl	equ	0xFFD
 13405                           pclath	equ	0xFFA
 13406                           tblptru	equ	0xFF8
 13407                           tblptrh	equ	0xFF7
 13408                           tblptrl	equ	0xFF6
 13409                           tablat	equ	0xFF5
 13410                           prodh	equ	0xFF4
 13411                           prodl	equ	0xFF3
 13412                           intcon	equ	0xFF2
 13413                           postinc0	equ	0xFEE
 13414                           wreg	equ	0xFE8
 13415                           indf1	equ	0xFE7
 13416                           postdec1	equ	0xFE5
 13417                           fsr1h	equ	0xFE2
 13418                           fsr1l	equ	0xFE1
 13419                           indf2	equ	0xFDF
 13420                           postinc2	equ	0xFDE
 13421                           postdec2	equ	0xFDD
 13422                           plusw2	equ	0xFDB
 13423                           fsr2h	equ	0xFDA
 13424                           fsr2l	equ	0xFD9
 13425                           status	equ	0xFD8
 13426                           
 13427 ;; *************** function _Port_GetQuad *****************
 13428 ;; Defined at:
 13429 ;;		line 498 in file "Library/Port.c"
 13430 ;; Parameters:    Size  Location     Type
 13431 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 13432 ;;		 -> PortE(10), PortD(10), 
 13433 ;;  pQuad           1    2[BANK0 ] enum E6776
 13434 ;; Auto vars:     Size  Location     Type
 13435 ;;  Output          1    5[BANK0 ] unsigned char 
 13436 ;; Return value:  Size  Location     Type
 13437 ;;                  1    wreg      unsigned char 
 13438 ;; Registers used:
 13439 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13440 ;; Tracked objects:
 13441 ;;		On entry : 0/0
 13442 ;;		On exit  : 0/0
 13443 ;;		Unchanged: 0/0
 13444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13445 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13446 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13447 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13448 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13449 ;;Total ram usage:        6 bytes
 13450 ;; Hardware stack levels used:    1
 13451 ;; Hardware stack levels required when called:    7
 13452 ;; This function calls:
 13453 ;;		Nothing
 13454 ;; This function is called by:
 13455 ;;		_HMI_DIPSwitch
 13456 ;;		_MXK_DIPSwitch
 13457 ;;		_Port_ToggleQuad
 13458 ;; This function uses a non-reentrant model
 13459 ;;
 13460                           
 13461                           	psect	text71
 13462  0140BA                     __ptext71:
 13463                           	opt stack 0
 13464  0140BA                     _Port_GetQuad:
 13465                           	opt stack 22
 13466                           
 13467                           ;Port.c: 500: UINT8 Output = pInput->mInput->mBits;
 13468                           
 13469                           ;incstack = 0
 13470  0140BA  0100               	movlb	0	; () banked
 13471  0140BC  EE20 F006          	lfsr	2,6
 13472  0140C0  51B5               	movf	Port_GetQuad@pInput& (0+255),w,b
 13473  0140C2  26D9               	addwf	fsr2l,f,c
 13474  0140C4  51B6               	movf	(Port_GetQuad@pInput+1)& (0+255),w,b
 13475  0140C6  22DA               	addwfc	fsr2h,f,c
 13476  0140C8  CFDE F0B8          	movff	postinc2,??_Port_GetQuad
 13477  0140CC  CFDD F0B9          	movff	postdec2,??_Port_GetQuad+1
 13478  0140D0  C0B8  FFD9         	movff	??_Port_GetQuad,fsr2l
 13479  0140D4  C0B9  FFDA         	movff	??_Port_GetQuad+1,fsr2h
 13480  0140D8  50DF               	movf	indf2,w,c
 13481  0140DA  0100               	movlb	0	; () banked
 13482  0140DC  6FBA               	movwf	Port_GetQuad@Output& (0+255),b
 13483                           
 13484                           ; BSR set to: 0
 13485                           ;Port.c: 501: Output >>= ((UINT8)pQuad * 4);
 13486  0140DE  0100               	movlb	0	; () banked
 13487  0140E0  51B7               	movf	Port_GetQuad@pQuad& (0+255),w,b
 13488  0140E2  0D04               	mullw	4
 13489  0140E4  28F3               	incf	prodl,w,c
 13490  0140E6  0100               	movlb	0	; () banked
 13491  0140E8  6FB8               	movwf	??_Port_GetQuad& (0+255),b
 13492  0140EA  D003               	goto	u7080
 13493  0140EC                     u7085:
 13494  0140EC  0100               	movlb	0	; () banked
 13495  0140EE  90D8               	bcf	status,0,c
 13496  0140F0  33BA               	rrcf	Port_GetQuad@Output& (0+255),f,b
 13497  0140F2                     u7080:
 13498  0140F2  0100               	movlb	0	; () banked
 13499  0140F4  2FB8               	decfsz	??_Port_GetQuad& (0+255),f,b
 13500  0140F6  D7FA               	goto	u7085
 13501                           
 13502                           ;Port.c: 502: Output &= 0xF;
 13503  0140F8  0E0F               	movlw	15
 13504  0140FA  0100               	movlb	0	; () banked
 13505  0140FC  17BA               	andwf	Port_GetQuad@Output& (0+255),f,b
 13506                           
 13507                           ; BSR set to: 0
 13508                           ;Port.c: 503: return Output;
 13509  0140FE  0100               	movlb	0	; () banked
 13510  014100  51BA               	movf	Port_GetQuad@Output& (0+255),w,b
 13511  014102  0012               	return	
 13512  014104                     __end_of_Port_GetQuad:
 13513                           	opt stack 0
 13514                           tosu	equ	0xFFF
 13515                           tosh	equ	0xFFE
 13516                           tosl	equ	0xFFD
 13517                           pclath	equ	0xFFA
 13518                           tblptru	equ	0xFF8
 13519                           tblptrh	equ	0xFF7
 13520                           tblptrl	equ	0xFF6
 13521                           tablat	equ	0xFF5
 13522                           prodh	equ	0xFF4
 13523                           prodl	equ	0xFF3
 13524                           intcon	equ	0xFF2
 13525                           postinc0	equ	0xFEE
 13526                           wreg	equ	0xFE8
 13527                           indf1	equ	0xFE7
 13528                           postdec1	equ	0xFE5
 13529                           fsr1h	equ	0xFE2
 13530                           fsr1l	equ	0xFE1
 13531                           indf2	equ	0xFDF
 13532                           postinc2	equ	0xFDE
 13533                           postdec2	equ	0xFDD
 13534                           plusw2	equ	0xFDB
 13535                           fsr2h	equ	0xFDA
 13536                           fsr2l	equ	0xFD9
 13537                           status	equ	0xFD8
 13538                           
 13539 ;; *************** function _Event_DIPSwitch *****************
 13540 ;; Defined at:
 13541 ;;		line 22 in file "Events.c"
 13542 ;; Parameters:    Size  Location     Type
 13543 ;;  pState          1    wreg     unsigned char 
 13544 ;; Auto vars:     Size  Location     Type
 13545 ;;  pState          1   25[BANK0 ] unsigned char 
 13546 ;;  Bar             1   26[BANK0 ] unsigned char 
 13547 ;; Return value:  Size  Location     Type
 13548 ;;                  1    wreg      void 
 13549 ;; Registers used:
 13550 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13551 ;; Tracked objects:
 13552 ;;		On entry : 0/0
 13553 ;;		On exit  : 0/0
 13554 ;;		Unchanged: 0/0
 13555 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13556 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13557 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13558 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13559 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13560 ;;Total ram usage:        2 bytes
 13561 ;; Hardware stack levels used:    1
 13562 ;; Hardware stack levels required when called:   13
 13563 ;; This function calls:
 13564 ;;		_HMI_GetBar
 13565 ;;		_HMI_SetBar
 13566 ;;		_LED_Toggle
 13567 ;; This function is called by:
 13568 ;;		_FunctInitButton
 13569 ;;		_Button_Poll
 13570 ;; This function uses a non-reentrant model
 13571 ;;
 13572                           
 13573                           	psect	text72
 13574  0145CC                     __ptext72:
 13575                           	opt stack 0
 13576  0145CC                     _Event_DIPSwitch:
 13577                           	opt stack 15
 13578                           
 13579                           ; BSR set to: 0
 13580                           ;incstack = 0
 13581                           ;Event_DIPSwitch@pState stored from wreg
 13582  0145CC  0100               	movlb	0	; () banked
 13583  0145CE  6FCE               	movwf	Event_DIPSwitch@pState& (0+255),b
 13584                           
 13585                           ;Events.c: 24: UINT8 Bar = HMI_GetBar();
 13586  0145D0  ECF9  F0A4         	call	_HMI_GetBar	;wreg free
 13587  0145D4  0100               	movlb	0	; () banked
 13588  0145D6  6FCF               	movwf	Event_DIPSwitch@Bar& (0+255),b
 13589                           
 13590                           ; BSR set to: 0
 13591                           ;Events.c: 25: Bar &= 0x0F;
 13592  0145D8  0E0F               	movlw	15
 13593  0145DA  0100               	movlb	0	; () banked
 13594  0145DC  17CF               	andwf	Event_DIPSwitch@Bar& (0+255),f,b
 13595                           
 13596                           ; BSR set to: 0
 13597                           ;Events.c: 26: pState <<= 4;
 13598  0145DE  0100               	movlb	0	; () banked
 13599  0145E0  3BCE               	swapf	Event_DIPSwitch@pState& (0+255),f,b
 13600  0145E2  0EF0               	movlw	240
 13601  0145E4  17CE               	andwf	Event_DIPSwitch@pState& (0+255),f,b
 13602                           
 13603                           ; BSR set to: 0
 13604                           ;Events.c: 29: HMI_SetBar(pState | Bar);
 13605  0145E6  0100               	movlb	0	; () banked
 13606  0145E8  51CE               	movf	Event_DIPSwitch@pState& (0+255),w,b
 13607  0145EA  0100               	movlb	0	; () banked
 13608  0145EC  11CF               	iorwf	Event_DIPSwitch@Bar& (0+255),w,b
 13609  0145EE  ECE1  F0A4         	call	_HMI_SetBar
 13610                           
 13611                           ;Events.c: 32: LED_Toggle(eLED1);
 13612  0145F2  0E00               	movlw	0
 13613  0145F4  ECA6  F0A0         	call	_LED_Toggle
 13614  0145F8  0012               	return		;funcret
 13615  0145FA                     __end_of_Event_DIPSwitch:
 13616                           	opt stack 0
 13617                           tosu	equ	0xFFF
 13618                           tosh	equ	0xFFE
 13619                           tosl	equ	0xFFD
 13620                           pclath	equ	0xFFA
 13621                           tblptru	equ	0xFF8
 13622                           tblptrh	equ	0xFF7
 13623                           tblptrl	equ	0xFF6
 13624                           tablat	equ	0xFF5
 13625                           prodh	equ	0xFF4
 13626                           prodl	equ	0xFF3
 13627                           intcon	equ	0xFF2
 13628                           postinc0	equ	0xFEE
 13629                           wreg	equ	0xFE8
 13630                           indf1	equ	0xFE7
 13631                           postdec1	equ	0xFE5
 13632                           fsr1h	equ	0xFE2
 13633                           fsr1l	equ	0xFE1
 13634                           indf2	equ	0xFDF
 13635                           postinc2	equ	0xFDE
 13636                           postdec2	equ	0xFDD
 13637                           plusw2	equ	0xFDB
 13638                           fsr2h	equ	0xFDA
 13639                           fsr2l	equ	0xFD9
 13640                           status	equ	0xFD8
 13641                           
 13642 ;; *************** function _Event_NULL *****************
 13643 ;; Defined at:
 13644 ;;		line 9 in file "Events.c"
 13645 ;; Parameters:    Size  Location     Type
 13646 ;;  pState          1    wreg     unsigned char 
 13647 ;; Auto vars:     Size  Location     Type
 13648 ;;  pState          1    0[COMRAM] unsigned char 
 13649 ;; Return value:  Size  Location     Type
 13650 ;;                  1    wreg      void 
 13651 ;; Registers used:
 13652 ;;		wreg
 13653 ;; Tracked objects:
 13654 ;;		On entry : 0/0
 13655 ;;		On exit  : 0/0
 13656 ;;		Unchanged: 0/0
 13657 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13658 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13659 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13660 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13661 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13662 ;;Total ram usage:        0 bytes
 13663 ;; Hardware stack levels used:    1
 13664 ;; Hardware stack levels required when called:    7
 13665 ;; This function calls:
 13666 ;;		Nothing
 13667 ;; This function is called by:
 13668 ;;		_HMI_Init
 13669 ;;		_Button_Poll
 13670 ;; This function uses a non-reentrant model
 13671 ;;
 13672                           
 13673                           	psect	text73
 13674  001404                     __ptext73:
 13675                           	opt stack 0
 13676  001404                     _Event_NULL:
 13677                           	opt stack 21
 13678                           
 13679                           ;incstack = 0
 13680  001404  0012               	return		;funcret
 13681  001406                     __end_of_Event_NULL:
 13682                           	opt stack 0
 13683                           tosu	equ	0xFFF
 13684                           tosh	equ	0xFFE
 13685                           tosl	equ	0xFFD
 13686                           pclath	equ	0xFFA
 13687                           tblptru	equ	0xFF8
 13688                           tblptrh	equ	0xFF7
 13689                           tblptrl	equ	0xFF6
 13690                           tablat	equ	0xFF5
 13691                           prodh	equ	0xFF4
 13692                           prodl	equ	0xFF3
 13693                           intcon	equ	0xFF2
 13694                           postinc0	equ	0xFEE
 13695                           wreg	equ	0xFE8
 13696                           indf1	equ	0xFE7
 13697                           postdec1	equ	0xFE5
 13698                           fsr1h	equ	0xFE2
 13699                           fsr1l	equ	0xFE1
 13700                           indf2	equ	0xFDF
 13701                           postinc2	equ	0xFDE
 13702                           postdec2	equ	0xFDD
 13703                           plusw2	equ	0xFDB
 13704                           fsr2h	equ	0xFDA
 13705                           fsr2l	equ	0xFD9
 13706                           status	equ	0xFD8
 13707                           
 13708 ;; *************** function _Event_TestButton *****************
 13709 ;; Defined at:
 13710 ;;		line 52 in file "Events.c"
 13711 ;; Parameters:    Size  Location     Type
 13712 ;;  pState          1    wreg     unsigned char 
 13713 ;; Auto vars:     Size  Location     Type
 13714 ;;  pState          1   25[BANK0 ] unsigned char 
 13715 ;; Return value:  Size  Location     Type
 13716 ;;                  1    wreg      void 
 13717 ;; Registers used:
 13718 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 13719 ;; Tracked objects:
 13720 ;;		On entry : 0/0
 13721 ;;		On exit  : 0/0
 13722 ;;		Unchanged: 0/0
 13723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13724 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13725 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13726 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13727 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13728 ;;Total ram usage:        1 bytes
 13729 ;; Hardware stack levels used:    1
 13730 ;; Hardware stack levels required when called:   13
 13731 ;; This function calls:
 13732 ;;		_HMI_SetButton
 13733 ;;		_HMI_SetNumber
 13734 ;;		_LED_Toggle
 13735 ;; This function is called by:
 13736 ;;		_FunctInitButton
 13737 ;;		_Button_Poll
 13738 ;; This function uses a non-reentrant model
 13739 ;;
 13740                           
 13741                           	psect	text74
 13742  014426                     __ptext74:
 13743                           	opt stack 0
 13744  014426                     _Event_TestButton:
 13745                           	opt stack 15
 13746                           
 13747                           ;incstack = 0
 13748                           ;Event_TestButton@pState stored from wreg
 13749  014426  0100               	movlb	0	; () banked
 13750  014428  6FCE               	movwf	Event_TestButton@pState& (0+255),b
 13751                           
 13752                           ;Events.c: 56: static UINT8 j = 0;
 13753                           ;Events.c: 60: if (pState == 0)
 13754  01442A  0100               	movlb	0	; () banked
 13755  01442C  51CE               	movf	Event_TestButton@pState& (0+255),w,b
 13756  01442E  0100               	movlb	0	; () banked
 13757  014430  A4D8               	btfss	status,2,c
 13758  014432  D013               	goto	l1873
 13759                           
 13760                           ; BSR set to: 0
 13761                           ;Events.c: 61: {
 13762                           ;Events.c: 62: j++;
 13763  014434  0100               	movlb	0	; () banked
 13764  014436  2B89               	incf	Event_TestButton@j& (0+255),f,b
 13765                           
 13766                           ; BSR set to: 0
 13767                           ;Events.c: 63: val += j;
 13768  014438  0100               	movlb	0	; () banked
 13769  01443A  5189               	movf	Event_TestButton@j& (0+255),w,b
 13770  01443C  0100               	movlb	0	; () banked
 13771  01443E  277B               	addwf	_val& (0+255),f,b
 13772  014440  0E00               	movlw	0
 13773  014442  237C               	addwfc	(_val+1)& (0+255),f,b
 13774                           
 13775                           ; BSR set to: 0
 13776                           ;Events.c: 64: HMI_SetNumber( val );
 13777  014444  C07B  F0CB         	movff	_val,HMI_SetNumber@pInput
 13778  014448  C07C  F0CC         	movff	_val+1,HMI_SetNumber@pInput+1
 13779  01444C  EC14  F0A3         	call	_HMI_SetNumber	;wreg free
 13780                           
 13781                           ;Events.c: 67: HMI_SetButton( j & 3 );
 13782  014450  0100               	movlb	0	; () banked
 13783  014452  5189               	movf	Event_TestButton@j& (0+255),w,b
 13784  014454  0B03               	andlw	3
 13785  014456  ECE4  F099         	call	_HMI_SetButton
 13786  01445A                     l1873:
 13787                           
 13788                           ;Events.c: 68: }
 13789                           ;Events.c: 72: LED_Toggle(eLED1);
 13790  01445A  0E00               	movlw	0
 13791  01445C  ECA6  F0A0         	call	_LED_Toggle
 13792  014460  0012               	return		;funcret
 13793  014462                     __end_of_Event_TestButton:
 13794                           	opt stack 0
 13795                           tosu	equ	0xFFF
 13796                           tosh	equ	0xFFE
 13797                           tosl	equ	0xFFD
 13798                           pclath	equ	0xFFA
 13799                           tblptru	equ	0xFF8
 13800                           tblptrh	equ	0xFF7
 13801                           tblptrl	equ	0xFF6
 13802                           tablat	equ	0xFF5
 13803                           prodh	equ	0xFF4
 13804                           prodl	equ	0xFF3
 13805                           intcon	equ	0xFF2
 13806                           postinc0	equ	0xFEE
 13807                           wreg	equ	0xFE8
 13808                           indf1	equ	0xFE7
 13809                           postdec1	equ	0xFE5
 13810                           fsr1h	equ	0xFE2
 13811                           fsr1l	equ	0xFE1
 13812                           indf2	equ	0xFDF
 13813                           postinc2	equ	0xFDE
 13814                           postdec2	equ	0xFDD
 13815                           plusw2	equ	0xFDB
 13816                           fsr2h	equ	0xFDA
 13817                           fsr2l	equ	0xFD9
 13818                           status	equ	0xFD8
 13819                           
 13820 ;; *************** function _HMI_SetNumber *****************
 13821 ;; Defined at:
 13822 ;;		line 221 in file "HMI.c"
 13823 ;; Parameters:    Size  Location     Type
 13824 ;;  pInput          2   22[BANK0 ] int 
 13825 ;; Auto vars:     Size  Location     Type
 13826 ;;		None
 13827 ;; Return value:  Size  Location     Type
 13828 ;;                  1    wreg      void 
 13829 ;; Registers used:
 13830 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13831 ;; Tracked objects:
 13832 ;;		On entry : 0/0
 13833 ;;		On exit  : 0/0
 13834 ;;		Unchanged: 0/0
 13835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13836 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13837 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13838 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13839 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13840 ;;Total ram usage:        2 bytes
 13841 ;; Hardware stack levels used:    1
 13842 ;; Hardware stack levels required when called:    9
 13843 ;; This function calls:
 13844 ;;		_HMI_SetSegments
 13845 ;;		_itos
 13846 ;; This function is called by:
 13847 ;;		_Event_TestButton
 13848 ;;		_Event_HMI_UpButton
 13849 ;;		_Event_HMI_DownButton
 13850 ;; This function uses a non-reentrant model
 13851 ;;
 13852                           
 13853                           	psect	text75
 13854  014628                     __ptext75:
 13855                           	opt stack 0
 13856  014628                     _HMI_SetNumber:
 13857                           	opt stack 18
 13858                           
 13859                           ;HMI.c: 223: itos(pInput, HMIBoard.pSevenSegment);
 13860                           
 13861                           ;incstack = 0
 13862  014628  C0CB  F0C1         	movff	HMI_SetNumber@pInput,itos@input
 13863  01462C  C0CC  F0C2         	movff	HMI_SetNumber@pInput+1,itos@input+1
 13864  014630  0E2E               	movlw	low _HMIBoard
 13865  014632  0100               	movlb	0	; () banked
 13866  014634  6FC3               	movwf	itos@destination& (0+255),b
 13867  014636  0E03               	movlw	high _HMIBoard
 13868  014638  0100               	movlb	0	; () banked
 13869  01463A  6FC4               	movwf	(itos@destination+1)& (0+255),b
 13870  01463C  ECDF  F092         	call	_itos	;wreg free
 13871                           
 13872                           ;HMI.c: 224: HMI_SetSegments(HMIBoard.pSevenSegment);
 13873  014640  0E2E               	movlw	low _HMIBoard
 13874  014642  0100               	movlb	0	; () banked
 13875  014644  6FB6               	movwf	HMI_SetSegments@pString& (0+255),b
 13876  014646  0E03               	movlw	high _HMIBoard
 13877  014648  0100               	movlb	0	; () banked
 13878  01464A  6FB7               	movwf	(HMI_SetSegments@pString+1)& (0+255),b
 13879  01464C  EC9D  F095         	call	_HMI_SetSegments	;wreg free
 13880  014650  0012               	return		;funcret
 13881  014652                     __end_of_HMI_SetNumber:
 13882                           	opt stack 0
 13883                           tosu	equ	0xFFF
 13884                           tosh	equ	0xFFE
 13885                           tosl	equ	0xFFD
 13886                           pclath	equ	0xFFA
 13887                           tblptru	equ	0xFF8
 13888                           tblptrh	equ	0xFF7
 13889                           tblptrl	equ	0xFF6
 13890                           tablat	equ	0xFF5
 13891                           prodh	equ	0xFF4
 13892                           prodl	equ	0xFF3
 13893                           intcon	equ	0xFF2
 13894                           postinc0	equ	0xFEE
 13895                           wreg	equ	0xFE8
 13896                           indf1	equ	0xFE7
 13897                           postdec1	equ	0xFE5
 13898                           fsr1h	equ	0xFE2
 13899                           fsr1l	equ	0xFE1
 13900                           indf2	equ	0xFDF
 13901                           postinc2	equ	0xFDE
 13902                           postdec2	equ	0xFDD
 13903                           plusw2	equ	0xFDB
 13904                           fsr2h	equ	0xFDA
 13905                           fsr2l	equ	0xFD9
 13906                           status	equ	0xFD8
 13907                           
 13908 ;; *************** function _itos *****************
 13909 ;; Defined at:
 13910 ;;		line 369 in file "Library/Types.c"
 13911 ;; Parameters:    Size  Location     Type
 13912 ;;  input           2   12[BANK0 ] unsigned short 
 13913 ;;  destination     2   14[BANK0 ] PTR unsigned char 
 13914 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13915 ;; Auto vars:     Size  Location     Type
 13916 ;;  Out             2   20[BANK0 ] unsigned short 
 13917 ;;  Length          2   18[BANK0 ] unsigned short 
 13918 ;;  Data            2   16[BANK0 ] PTR unsigned char 
 13919 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 13920 ;; Return value:  Size  Location     Type
 13921 ;;                  1    wreg      void 
 13922 ;; Registers used:
 13923 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 13924 ;; Tracked objects:
 13925 ;;		On entry : 0/0
 13926 ;;		On exit  : 0/0
 13927 ;;		Unchanged: 0/0
 13928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 13929 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13930 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13931 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13932 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 13933 ;;Total ram usage:       10 bytes
 13934 ;; Hardware stack levels used:    1
 13935 ;; Hardware stack levels required when called:    8
 13936 ;; This function calls:
 13937 ;;		___lwdiv
 13938 ;;		___lwmod
 13939 ;;		_reverse
 13940 ;; This function is called by:
 13941 ;;		_HMI_SetNumber
 13942 ;; This function uses a non-reentrant model
 13943 ;;
 13944                           
 13945                           	psect	text76
 13946  0125BE                     __ptext76:
 13947                           	opt stack 0
 13948  0125BE                     _itos:
 13949                           	opt stack 18
 13950                           
 13951                           ;Types.c: 371: UINT16 Out = input;
 13952                           
 13953                           ;incstack = 0
 13954  0125BE  C0C1  F0C9         	movff	itos@input,itos@Out
 13955  0125C2  C0C2  F0CA         	movff	itos@input+1,itos@Out+1
 13956                           
 13957                           ;Types.c: 372: UINT16 Length = 0;
 13958  0125C6  0E00               	movlw	0
 13959  0125C8  0100               	movlb	0	; () banked
 13960  0125CA  6FC8               	movwf	(itos@Length+1)& (0+255),b
 13961  0125CC  0E00               	movlw	0
 13962  0125CE  6FC7               	movwf	itos@Length& (0+255),b
 13963                           
 13964                           ; BSR set to: 0
 13965                           ;Types.c: 373: char *Data = destination;
 13966  0125D0  C0C3  F0C5         	movff	itos@destination,itos@Data
 13967  0125D4  C0C4  F0C6         	movff	itos@destination+1,itos@Data+1
 13968                           
 13969                           ; BSR set to: 0
 13970                           ;Types.c: 374: if(Out == 0)
 13971  0125D8  0100               	movlb	0	; () banked
 13972  0125DA  51C9               	movf	itos@Out& (0+255),w,b
 13973  0125DC  0100               	movlb	0	; () banked
 13974  0125DE  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 13975  0125E0  A4D8               	btfss	status,2,c
 13976  0125E2  D034               	goto	l929
 13977                           
 13978                           ; BSR set to: 0
 13979                           ;Types.c: 375: {
 13980                           ;Types.c: 376: Data[0] = (UINT16)'0';
 13981  0125E4  C0C5  FFD9         	movff	itos@Data,fsr2l
 13982  0125E8  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 13983  0125EC  0E30               	movlw	48
 13984  0125EE  6EDF               	movwf	indf2,c
 13985                           
 13986                           ; BSR set to: 0
 13987                           ;Types.c: 377: Length = 1;
 13988  0125F0  0E00               	movlw	0
 13989  0125F2  0100               	movlb	0	; () banked
 13990  0125F4  6FC8               	movwf	(itos@Length+1)& (0+255),b
 13991  0125F6  0E01               	movlw	1
 13992  0125F8  6FC7               	movwf	itos@Length& (0+255),b
 13993                           
 13994                           ;Types.c: 378: }
 13995  0125FA  D040               	goto	l928
 13996  0125FC                     
 13997                           ; BSR set to: 0
 13998                           ;Types.c: 382: {
 13999                           ;Types.c: 383: Data[0] = (UINT16)'0' + Out%10;
 14000                           
 14001                           ; BSR set to: 0
 14002  0125FC  C0C9  F0BC         	movff	itos@Out,___lwmod@dividend
 14003  012600  C0CA  F0BD         	movff	itos@Out+1,___lwmod@dividend+1
 14004  012604  0E00               	movlw	0
 14005  012606  0100               	movlb	0	; () banked
 14006  012608  6FBF               	movwf	(___lwmod@divisor+1)& (0+255),b
 14007  01260A  0E0A               	movlw	10
 14008  01260C  6FBE               	movwf	___lwmod@divisor& (0+255),b
 14009  01260E  ECDA  F09E         	call	___lwmod	;wreg free
 14010  012612  0100               	movlb	0	; () banked
 14011  012614  51BC               	movf	?___lwmod& (0+255),w,b
 14012  012616  0F30               	addlw	48
 14013  012618  C0C5  FFD9         	movff	itos@Data,fsr2l
 14014  01261C  C0C6  FFDA         	movff	itos@Data+1,fsr2h
 14015  012620  6EDF               	movwf	indf2,c
 14016                           
 14017                           ; BSR set to: 0
 14018                           ;Types.c: 384: Out /= 10;
 14019  012622  C0C9  F0B5         	movff	itos@Out,___lwdiv@dividend
 14020  012626  C0CA  F0B6         	movff	itos@Out+1,___lwdiv@dividend+1
 14021  01262A  0E00               	movlw	0
 14022  01262C  0100               	movlb	0	; () banked
 14023  01262E  6FB8               	movwf	(___lwdiv@divisor+1)& (0+255),b
 14024  012630  0E0A               	movlw	10
 14025  012632  6FB7               	movwf	___lwdiv@divisor& (0+255),b
 14026  012634  EC3D  F09B         	call	___lwdiv	;wreg free
 14027  012638  C0B5  F0C9         	movff	?___lwdiv,itos@Out
 14028  01263C  C0B6  F0CA         	movff	?___lwdiv+1,itos@Out+1
 14029                           
 14030                           ;Types.c: 385: Length ++;
 14031  012640  0100               	movlb	0	; () banked
 14032  012642  4BC7               	infsnz	itos@Length& (0+255),f,b
 14033  012644  2BC8               	incf	(itos@Length+1)& (0+255),f,b
 14034                           
 14035                           ; BSR set to: 0
 14036                           ;Types.c: 386: Data++;
 14037  012646  0100               	movlb	0	; () banked
 14038  012648  4BC5               	infsnz	itos@Data& (0+255),f,b
 14039  01264A  2BC6               	incf	(itos@Data+1)& (0+255),f,b
 14040  01264C                     l929:
 14041                           
 14042                           ; BSR set to: 0
 14043                           
 14044                           ; BSR set to: 0
 14045  01264C  0100               	movlb	0	; () banked
 14046  01264E  51C9               	movf	itos@Out& (0+255),w,b
 14047  012650  0100               	movlb	0	; () banked
 14048  012652  11CA               	iorwf	(itos@Out+1)& (0+255),w,b
 14049  012654  B4D8               	btfsc	status,2,c
 14050  012656  D008               	goto	u6820
 14051                           
 14052                           ; BSR set to: 0
 14053  012658  0100               	movlb	0	; () banked
 14054  01265A  51C8               	movf	(itos@Length+1)& (0+255),w,b
 14055  01265C  E105               	bnz	l10793
 14056  01265E  0E06               	movlw	6
 14057  012660  0100               	movlb	0	; () banked
 14058  012662  5DC7               	subwf	itos@Length& (0+255),w,b
 14059  012664  A0D8               	btfss	status,0,c
 14060  012666  D7CA               	goto	l930
 14061  012668                     u6820:
 14062  012668                     l10793:
 14063                           
 14064                           ; BSR set to: 0
 14065                           ;Types.c: 387: }
 14066                           ;Types.c: 388: reverse(destination, Length);
 14067  012668  C0C3  F0B5         	movff	itos@destination,reverse@input
 14068  01266C  C0C4  F0B6         	movff	itos@destination+1,reverse@input+1
 14069  012670  C0C7  F0B7         	movff	itos@Length,reverse@length
 14070  012674  C0C8  F0B8         	movff	itos@Length+1,reverse@length+1
 14071  012678  ECD4  F09C         	call	_reverse	;wreg free
 14072  01267C                     l928:
 14073                           
 14074                           ;Types.c: 389: }
 14075                           ;Types.c: 390: destination[Length] = '\0';
 14076  01267C  0100               	movlb	0	; () banked
 14077  01267E  51C7               	movf	itos@Length& (0+255),w,b
 14078  012680  0100               	movlb	0	; () banked
 14079  012682  25C3               	addwf	itos@destination& (0+255),w,b
 14080  012684  6ED9               	movwf	fsr2l,c
 14081  012686  0100               	movlb	0	; () banked
 14082  012688  51C8               	movf	(itos@Length+1)& (0+255),w,b
 14083  01268A  0100               	movlb	0	; () banked
 14084  01268C  21C4               	addwfc	(itos@destination+1)& (0+255),w,b
 14085  01268E  6EDA               	movwf	fsr2h,c
 14086  012690  0E00               	movlw	0
 14087  012692  6EDF               	movwf	indf2,c
 14088                           
 14089                           ; BSR set to: 0
 14090  012694  0012               	return		;funcret
 14091  012696                     __end_of_itos:
 14092                           	opt stack 0
 14093                           tosu	equ	0xFFF
 14094                           tosh	equ	0xFFE
 14095                           tosl	equ	0xFFD
 14096                           pclath	equ	0xFFA
 14097                           tblptru	equ	0xFF8
 14098                           tblptrh	equ	0xFF7
 14099                           tblptrl	equ	0xFF6
 14100                           tablat	equ	0xFF5
 14101                           prodh	equ	0xFF4
 14102                           prodl	equ	0xFF3
 14103                           intcon	equ	0xFF2
 14104                           postinc0	equ	0xFEE
 14105                           wreg	equ	0xFE8
 14106                           indf1	equ	0xFE7
 14107                           postdec1	equ	0xFE5
 14108                           fsr1h	equ	0xFE2
 14109                           fsr1l	equ	0xFE1
 14110                           indf2	equ	0xFDF
 14111                           postinc2	equ	0xFDE
 14112                           postdec2	equ	0xFDD
 14113                           plusw2	equ	0xFDB
 14114                           fsr2h	equ	0xFDA
 14115                           fsr2l	equ	0xFD9
 14116                           status	equ	0xFD8
 14117                           
 14118 ;; *************** function _reverse *****************
 14119 ;; Defined at:
 14120 ;;		line 357 in file "Library/Types.c"
 14121 ;; Parameters:    Size  Location     Type
 14122 ;;  input           2    0[BANK0 ] PTR unsigned char 
 14123 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14124 ;;  length          2    2[BANK0 ] unsigned short 
 14125 ;; Auto vars:     Size  Location     Type
 14126 ;;  iterator        2    5[BANK0 ] PTR unsigned char 
 14127 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14128 ;;  tempVar         1    4[BANK0 ] unsigned char 
 14129 ;; Return value:  Size  Location     Type
 14130 ;;                  1    wreg      void 
 14131 ;; Registers used:
 14132 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0
 14133 ;; Tracked objects:
 14134 ;;		On entry : 0/0
 14135 ;;		On exit  : 0/0
 14136 ;;		Unchanged: 0/0
 14137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14138 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14139 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14140 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14141 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14142 ;;Total ram usage:        7 bytes
 14143 ;; Hardware stack levels used:    1
 14144 ;; Hardware stack levels required when called:    7
 14145 ;; This function calls:
 14146 ;;		Nothing
 14147 ;; This function is called by:
 14148 ;;		_itos
 14149 ;; This function uses a non-reentrant model
 14150 ;;
 14151                           
 14152                           	psect	text77
 14153  0139A8                     __ptext77:
 14154                           	opt stack 0
 14155  0139A8                     _reverse:
 14156                           	opt stack 18
 14157                           
 14158                           ;Types.c: 359: char tempVar,
 14159                           ;Types.c: 360: *iterator = input + length;
 14160                           
 14161                           ; BSR set to: 0
 14162                           ;incstack = 0
 14163  0139A8  0100               	movlb	0	; () banked
 14164  0139AA  51B7               	movf	reverse@length& (0+255),w,b
 14165  0139AC  0100               	movlb	0	; () banked
 14166  0139AE  25B5               	addwf	reverse@input& (0+255),w,b
 14167  0139B0  0100               	movlb	0	; () banked
 14168  0139B2  6FBA               	movwf	reverse@iterator& (0+255),b
 14169  0139B4  0100               	movlb	0	; () banked
 14170  0139B6  51B8               	movf	(reverse@length+1)& (0+255),w,b
 14171  0139B8  0100               	movlb	0	; () banked
 14172  0139BA  21B6               	addwfc	(reverse@input+1)& (0+255),w,b
 14173  0139BC  0100               	movlb	0	; () banked
 14174  0139BE  6FBB               	movwf	(reverse@iterator+1)& (0+255),b
 14175                           
 14176                           ;Types.c: 362: while ( --iterator > input )
 14177  0139C0  D01A               	goto	l921
 14178  0139C2                     
 14179                           ; BSR set to: 0
 14180                           ;Types.c: 363: {
 14181                           ;Types.c: 364: tempVar = *input;
 14182                           
 14183                           ; BSR set to: 0
 14184  0139C2  C0B5  FFD9         	movff	reverse@input,fsr2l
 14185  0139C6  C0B6  FFDA         	movff	reverse@input+1,fsr2h
 14186  0139CA  50DF               	movf	indf2,w,c
 14187  0139CC  0100               	movlb	0	; () banked
 14188  0139CE  6FB9               	movwf	reverse@tempVar& (0+255),b
 14189                           
 14190                           ; BSR set to: 0
 14191                           ;Types.c: 365: *input++=*iterator;
 14192  0139D0  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 14193  0139D4  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 14194  0139D8  C0B5  FFE1         	movff	reverse@input,fsr1l
 14195  0139DC  C0B6  FFE2         	movff	reverse@input+1,fsr1h
 14196  0139E0  CFDF FFE7          	movff	indf2,indf1
 14197                           
 14198                           ; BSR set to: 0
 14199  0139E4  0100               	movlb	0	; () banked
 14200  0139E6  4BB5               	infsnz	reverse@input& (0+255),f,b
 14201  0139E8  2BB6               	incf	(reverse@input+1)& (0+255),f,b
 14202                           
 14203                           ; BSR set to: 0
 14204                           ;Types.c: 366: *iterator=tempVar;
 14205  0139EA  C0BA  FFD9         	movff	reverse@iterator,fsr2l
 14206  0139EE  C0BB  FFDA         	movff	reverse@iterator+1,fsr2h
 14207  0139F2  C0B9  FFDF         	movff	reverse@tempVar,indf2
 14208  0139F6                     l921:
 14209                           
 14210                           ; BSR set to: 0
 14211                           
 14212                           ; BSR set to: 0
 14213  0139F6  0100               	movlb	0	; () banked
 14214  0139F8  07BA               	decf	reverse@iterator& (0+255),f,b
 14215  0139FA  A0D8               	btfss	status,0,c
 14216  0139FC  07BB               	decf	(reverse@iterator+1)& (0+255),f,b
 14217  0139FE  0100               	movlb	0	; () banked
 14218  013A00  51BA               	movf	reverse@iterator& (0+255),w,b
 14219  013A02  0100               	movlb	0	; () banked
 14220  013A04  5DB5               	subwf	reverse@input& (0+255),w,b
 14221  013A06  0100               	movlb	0	; () banked
 14222  013A08  51BB               	movf	(reverse@iterator+1)& (0+255),w,b
 14223  013A0A  0100               	movlb	0	; () banked
 14224  013A0C  59B6               	subwfb	(reverse@input+1)& (0+255),w,b
 14225  013A0E  B0D8               	btfsc	status,0,c
 14226  013A10  0012               	return	
 14227  013A12  D7D7               	goto	l922
 14228  013A14                     __end_of_reverse:
 14229                           	opt stack 0
 14230                           tosu	equ	0xFFF
 14231                           tosh	equ	0xFFE
 14232                           tosl	equ	0xFFD
 14233                           pclath	equ	0xFFA
 14234                           tblptru	equ	0xFF8
 14235                           tblptrh	equ	0xFF7
 14236                           tblptrl	equ	0xFF6
 14237                           tablat	equ	0xFF5
 14238                           prodh	equ	0xFF4
 14239                           prodl	equ	0xFF3
 14240                           intcon	equ	0xFF2
 14241                           postinc0	equ	0xFEE
 14242                           wreg	equ	0xFE8
 14243                           indf1	equ	0xFE7
 14244                           postdec1	equ	0xFE5
 14245                           fsr1h	equ	0xFE2
 14246                           fsr1l	equ	0xFE1
 14247                           indf2	equ	0xFDF
 14248                           postinc2	equ	0xFDE
 14249                           postdec2	equ	0xFDD
 14250                           plusw2	equ	0xFDB
 14251                           fsr2h	equ	0xFDA
 14252                           fsr2l	equ	0xFD9
 14253                           status	equ	0xFD8
 14254                           
 14255 ;; *************** function ___lwmod *****************
 14256 ;; Defined at:
 14257 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwmod.c"
 14258 ;; Parameters:    Size  Location     Type
 14259 ;;  dividend        2    7[BANK0 ] unsigned int 
 14260 ;;  divisor         2    9[BANK0 ] unsigned int 
 14261 ;; Auto vars:     Size  Location     Type
 14262 ;;  counter         1   11[BANK0 ] unsigned char 
 14263 ;; Return value:  Size  Location     Type
 14264 ;;                  2    7[BANK0 ] unsigned int 
 14265 ;; Registers used:
 14266 ;;		wreg, status,2, status,0
 14267 ;; Tracked objects:
 14268 ;;		On entry : 0/0
 14269 ;;		On exit  : 0/0
 14270 ;;		Unchanged: 0/0
 14271 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14272 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14273 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14275 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14276 ;;Total ram usage:        5 bytes
 14277 ;; Hardware stack levels used:    1
 14278 ;; Hardware stack levels required when called:    7
 14279 ;; This function calls:
 14280 ;;		Nothing
 14281 ;; This function is called by:
 14282 ;;		_itos
 14283 ;;		_printf
 14284 ;; This function uses a non-reentrant model
 14285 ;;
 14286                           
 14287                           	psect	text78
 14288  013DB4                     __ptext78:
 14289                           	opt stack 0
 14290  013DB4                     ___lwmod:
 14291                           	opt stack 22
 14292                           
 14293                           ; BSR set to: 0
 14294                           ;incstack = 0
 14295  013DB4  0100               	movlb	0	; () banked
 14296  013DB6  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14297  013DB8  0100               	movlb	0	; () banked
 14298  013DBA  11BF               	iorwf	(___lwmod@divisor+1)& (0+255),w,b
 14299  013DBC  B4D8               	btfsc	status,2,c
 14300  013DBE  D026               	goto	l2718
 14301                           
 14302                           ; BSR set to: 0
 14303  013DC0  0E01               	movlw	1
 14304  013DC2  0100               	movlb	0	; () banked
 14305  013DC4  6FC0               	movwf	___lwmod@counter& (0+255),b
 14306  013DC6  D006               	goto	l2713
 14307  013DC8                     
 14308                           ; BSR set to: 0
 14309                           
 14310                           ; BSR set to: 0
 14311  013DC8  0100               	movlb	0	; () banked
 14312  013DCA  90D8               	bcf	status,0,c
 14313  013DCC  37BE               	rlcf	___lwmod@divisor& (0+255),f,b
 14314  013DCE  37BF               	rlcf	(___lwmod@divisor+1)& (0+255),f,b
 14315  013DD0  0100               	movlb	0	; () banked
 14316  013DD2  2BC0               	incf	___lwmod@counter& (0+255),f,b
 14317  013DD4                     l2713:
 14318                           
 14319                           ; BSR set to: 0
 14320                           
 14321                           ; BSR set to: 0
 14322  013DD4  0100               	movlb	0	; () banked
 14323  013DD6  AFBF               	btfss	(___lwmod@divisor+1)& (0+255),7,b
 14324  013DD8  D7F7               	goto	l2714
 14325  013DDA                     u6730:
 14326                           
 14327                           ; BSR set to: 0
 14328                           
 14329                           ; BSR set to: 0
 14330                           
 14331                           ; BSR set to: 0
 14332  013DDA  0100               	movlb	0	; () banked
 14333  013DDC  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14334  013DDE  0100               	movlb	0	; () banked
 14335  013DE0  5DBC               	subwf	___lwmod@dividend& (0+255),w,b
 14336  013DE2  0100               	movlb	0	; () banked
 14337  013DE4  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14338  013DE6  0100               	movlb	0	; () banked
 14339  013DE8  59BD               	subwfb	(___lwmod@dividend+1)& (0+255),w,b
 14340  013DEA  A0D8               	btfss	status,0,c
 14341  013DEC  D008               	goto	l2717
 14342                           
 14343                           ; BSR set to: 0
 14344  013DEE  0100               	movlb	0	; () banked
 14345  013DF0  51BE               	movf	___lwmod@divisor& (0+255),w,b
 14346  013DF2  0100               	movlb	0	; () banked
 14347  013DF4  5FBC               	subwf	___lwmod@dividend& (0+255),f,b
 14348  013DF6  0100               	movlb	0	; () banked
 14349  013DF8  51BF               	movf	(___lwmod@divisor+1)& (0+255),w,b
 14350  013DFA  0100               	movlb	0	; () banked
 14351  013DFC  5BBD               	subwfb	(___lwmod@dividend+1)& (0+255),f,b
 14352  013DFE                     l2717:
 14353                           
 14354                           ; BSR set to: 0
 14355                           
 14356                           ; BSR set to: 0
 14357  013DFE  0100               	movlb	0	; () banked
 14358  013E00  90D8               	bcf	status,0,c
 14359  013E02  33BF               	rrcf	(___lwmod@divisor+1)& (0+255),f,b
 14360  013E04  33BE               	rrcf	___lwmod@divisor& (0+255),f,b
 14361                           
 14362                           ; BSR set to: 0
 14363  013E06  0100               	movlb	0	; () banked
 14364  013E08  2FC0               	decfsz	___lwmod@counter& (0+255),f,b
 14365  013E0A  D7E7               	goto	u6730
 14366  013E0C                     l2718:
 14367                           
 14368                           ; BSR set to: 0
 14369                           
 14370                           ; BSR set to: 0
 14371  013E0C  C0BC  F0BC         	movff	___lwmod@dividend,?___lwmod
 14372  013E10  C0BD  F0BD         	movff	___lwmod@dividend+1,?___lwmod+1
 14373                           
 14374                           ; BSR set to: 0
 14375  013E14  0012               	return		;funcret
 14376  013E16                     __end_of___lwmod:
 14377                           	opt stack 0
 14378                           tosu	equ	0xFFF
 14379                           tosh	equ	0xFFE
 14380                           tosl	equ	0xFFD
 14381                           pclath	equ	0xFFA
 14382                           tblptru	equ	0xFF8
 14383                           tblptrh	equ	0xFF7
 14384                           tblptrl	equ	0xFF6
 14385                           tablat	equ	0xFF5
 14386                           prodh	equ	0xFF4
 14387                           prodl	equ	0xFF3
 14388                           intcon	equ	0xFF2
 14389                           postinc0	equ	0xFEE
 14390                           wreg	equ	0xFE8
 14391                           indf1	equ	0xFE7
 14392                           postdec1	equ	0xFE5
 14393                           fsr1h	equ	0xFE2
 14394                           fsr1l	equ	0xFE1
 14395                           indf2	equ	0xFDF
 14396                           postinc2	equ	0xFDE
 14397                           postdec2	equ	0xFDD
 14398                           plusw2	equ	0xFDB
 14399                           fsr2h	equ	0xFDA
 14400                           fsr2l	equ	0xFD9
 14401                           status	equ	0xFD8
 14402                           
 14403 ;; *************** function ___lwdiv *****************
 14404 ;; Defined at:
 14405 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lwdiv.c"
 14406 ;; Parameters:    Size  Location     Type
 14407 ;;  dividend        2    0[BANK0 ] unsigned int 
 14408 ;;  divisor         2    2[BANK0 ] unsigned int 
 14409 ;; Auto vars:     Size  Location     Type
 14410 ;;  quotient        2    5[BANK0 ] unsigned int 
 14411 ;;  counter         1    4[BANK0 ] unsigned char 
 14412 ;; Return value:  Size  Location     Type
 14413 ;;                  2    0[BANK0 ] unsigned int 
 14414 ;; Registers used:
 14415 ;;		wreg, status,2, status,0
 14416 ;; Tracked objects:
 14417 ;;		On entry : 0/0
 14418 ;;		On exit  : 0/0
 14419 ;;		Unchanged: 0/0
 14420 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14421 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14422 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14423 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14424 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14425 ;;Total ram usage:        7 bytes
 14426 ;; Hardware stack levels used:    1
 14427 ;; Hardware stack levels required when called:    7
 14428 ;; This function calls:
 14429 ;;		Nothing
 14430 ;; This function is called by:
 14431 ;;		_itos
 14432 ;;		_printf
 14433 ;; This function uses a non-reentrant model
 14434 ;;
 14435                           
 14436                           	psect	text79
 14437  01367A                     __ptext79:
 14438                           	opt stack 0
 14439  01367A                     ___lwdiv:
 14440                           	opt stack 22
 14441                           
 14442                           ; BSR set to: 0
 14443                           ;incstack = 0
 14444  01367A  0E00               	movlw	0
 14445  01367C  0100               	movlb	0	; () banked
 14446  01367E  6FBB               	movwf	(___lwdiv@quotient+1)& (0+255),b
 14447  013680  0E00               	movlw	0
 14448  013682  6FBA               	movwf	___lwdiv@quotient& (0+255),b
 14449                           
 14450                           ; BSR set to: 0
 14451  013684  0100               	movlb	0	; () banked
 14452  013686  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14453  013688  0100               	movlb	0	; () banked
 14454  01368A  11B8               	iorwf	(___lwdiv@divisor+1)& (0+255),w,b
 14455  01368C  B4D8               	btfsc	status,2,c
 14456  01368E  D02C               	goto	l2708
 14457                           
 14458                           ; BSR set to: 0
 14459  013690  0E01               	movlw	1
 14460  013692  0100               	movlb	0	; () banked
 14461  013694  6FB9               	movwf	___lwdiv@counter& (0+255),b
 14462  013696  D006               	goto	l2703
 14463  013698                     
 14464                           ; BSR set to: 0
 14465                           
 14466                           ; BSR set to: 0
 14467  013698  0100               	movlb	0	; () banked
 14468  01369A  90D8               	bcf	status,0,c
 14469  01369C  37B7               	rlcf	___lwdiv@divisor& (0+255),f,b
 14470  01369E  37B8               	rlcf	(___lwdiv@divisor+1)& (0+255),f,b
 14471  0136A0  0100               	movlb	0	; () banked
 14472  0136A2  2BB9               	incf	___lwdiv@counter& (0+255),f,b
 14473  0136A4                     l2703:
 14474                           
 14475                           ; BSR set to: 0
 14476                           
 14477                           ; BSR set to: 0
 14478  0136A4  0100               	movlb	0	; () banked
 14479  0136A6  AFB8               	btfss	(___lwdiv@divisor+1)& (0+255),7,b
 14480  0136A8  D7F7               	goto	l2704
 14481  0136AA                     u6700:
 14482                           
 14483                           ; BSR set to: 0
 14484                           
 14485                           ; BSR set to: 0
 14486                           
 14487                           ; BSR set to: 0
 14488  0136AA  0100               	movlb	0	; () banked
 14489  0136AC  90D8               	bcf	status,0,c
 14490  0136AE  37BA               	rlcf	___lwdiv@quotient& (0+255),f,b
 14491  0136B0  37BB               	rlcf	(___lwdiv@quotient+1)& (0+255),f,b
 14492                           
 14493                           ; BSR set to: 0
 14494  0136B2  0100               	movlb	0	; () banked
 14495  0136B4  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14496  0136B6  0100               	movlb	0	; () banked
 14497  0136B8  5DB5               	subwf	___lwdiv@dividend& (0+255),w,b
 14498  0136BA  0100               	movlb	0	; () banked
 14499  0136BC  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14500  0136BE  0100               	movlb	0	; () banked
 14501  0136C0  59B6               	subwfb	(___lwdiv@dividend+1)& (0+255),w,b
 14502  0136C2  A0D8               	btfss	status,0,c
 14503  0136C4  D00A               	goto	l2707
 14504                           
 14505                           ; BSR set to: 0
 14506  0136C6  0100               	movlb	0	; () banked
 14507  0136C8  51B7               	movf	___lwdiv@divisor& (0+255),w,b
 14508  0136CA  0100               	movlb	0	; () banked
 14509  0136CC  5FB5               	subwf	___lwdiv@dividend& (0+255),f,b
 14510  0136CE  0100               	movlb	0	; () banked
 14511  0136D0  51B8               	movf	(___lwdiv@divisor+1)& (0+255),w,b
 14512  0136D2  0100               	movlb	0	; () banked
 14513  0136D4  5BB6               	subwfb	(___lwdiv@dividend+1)& (0+255),f,b
 14514                           
 14515                           ; BSR set to: 0
 14516  0136D6  0100               	movlb	0	; () banked
 14517  0136D8  81BA               	bsf	___lwdiv@quotient& (0+255),0,b
 14518  0136DA                     l2707:
 14519                           
 14520                           ; BSR set to: 0
 14521                           
 14522                           ; BSR set to: 0
 14523  0136DA  0100               	movlb	0	; () banked
 14524  0136DC  90D8               	bcf	status,0,c
 14525  0136DE  33B8               	rrcf	(___lwdiv@divisor+1)& (0+255),f,b
 14526  0136E0  33B7               	rrcf	___lwdiv@divisor& (0+255),f,b
 14527                           
 14528                           ; BSR set to: 0
 14529  0136E2  0100               	movlb	0	; () banked
 14530  0136E4  2FB9               	decfsz	___lwdiv@counter& (0+255),f,b
 14531  0136E6  D7E1               	goto	u6700
 14532  0136E8                     l2708:
 14533                           
 14534                           ; BSR set to: 0
 14535                           
 14536                           ; BSR set to: 0
 14537  0136E8  C0BA  F0B5         	movff	___lwdiv@quotient,?___lwdiv
 14538  0136EC  C0BB  F0B6         	movff	___lwdiv@quotient+1,?___lwdiv+1
 14539                           
 14540                           ; BSR set to: 0
 14541  0136F0  0012               	return		;funcret
 14542  0136F2                     __end_of___lwdiv:
 14543                           	opt stack 0
 14544                           tosu	equ	0xFFF
 14545                           tosh	equ	0xFFE
 14546                           tosl	equ	0xFFD
 14547                           pclath	equ	0xFFA
 14548                           tblptru	equ	0xFF8
 14549                           tblptrh	equ	0xFF7
 14550                           tblptrl	equ	0xFF6
 14551                           tablat	equ	0xFF5
 14552                           prodh	equ	0xFF4
 14553                           prodl	equ	0xFF3
 14554                           intcon	equ	0xFF2
 14555                           postinc0	equ	0xFEE
 14556                           wreg	equ	0xFE8
 14557                           indf1	equ	0xFE7
 14558                           postdec1	equ	0xFE5
 14559                           fsr1h	equ	0xFE2
 14560                           fsr1l	equ	0xFE1
 14561                           indf2	equ	0xFDF
 14562                           postinc2	equ	0xFDE
 14563                           postdec2	equ	0xFDD
 14564                           plusw2	equ	0xFDB
 14565                           fsr2h	equ	0xFDA
 14566                           fsr2l	equ	0xFD9
 14567                           status	equ	0xFD8
 14568                           
 14569 ;; *************** function _HMI_SetSegments *****************
 14570 ;; Defined at:
 14571 ;;		line 226 in file "HMI.c"
 14572 ;; Parameters:    Size  Location     Type
 14573 ;;  pString         2    1[BANK0 ] PTR unsigned char 
 14574 ;;		 -> HMIBoard..(8), HMIBoard(58), 
 14575 ;; Auto vars:     Size  Location     Type
 14576 ;;  in              2    4[BANK0 ] unsigned short 
 14577 ;; Return value:  Size  Location     Type
 14578 ;;                  1    wreg      void 
 14579 ;; Registers used:
 14580 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, cstack
 14581 ;; Tracked objects:
 14582 ;;		On entry : 0/0
 14583 ;;		On exit  : 0/0
 14584 ;;		Unchanged: 0/0
 14585 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14586 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14587 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14588 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14589 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14590 ;;Total ram usage:        5 bytes
 14591 ;; Hardware stack levels used:    1
 14592 ;; Hardware stack levels required when called:    8
 14593 ;; This function calls:
 14594 ;;		_ToSegment
 14595 ;; This function is called by:
 14596 ;;		_HMI_SetNumber
 14597 ;; This function uses a non-reentrant model
 14598 ;;
 14599                           
 14600                           	psect	text80
 14601  012B3A                     __ptext80:
 14602                           	opt stack 0
 14603  012B3A                     _HMI_SetSegments:
 14604                           	opt stack 18
 14605                           
 14606                           ;HMI.c: 228: UINT16 in=0;
 14607                           
 14608                           ; BSR set to: 0
 14609                           ;incstack = 0
 14610  012B3A  0E00               	movlw	0
 14611  012B3C  0100               	movlb	0	; () banked
 14612  012B3E  6FBA               	movwf	(HMI_SetSegments@in+1)& (0+255),b
 14613  012B40  0E00               	movlw	0
 14614  012B42  6FB9               	movwf	HMI_SetSegments@in& (0+255),b
 14615                           
 14616                           ;HMI.c: 229: while(*pString)
 14617  012B44  D038               	goto	l1202
 14618  012B46                     
 14619                           ; BSR set to: 0
 14620                           ;HMI.c: 230: {
 14621                           ;HMI.c: 231: HMIBoard.pSevenSegment[in] = ToSegment(*pString);
 14622                           
 14623                           ; BSR set to: 0
 14624  012B46  0E2E               	movlw	low _HMIBoard
 14625  012B48  0100               	movlb	0	; () banked
 14626  012B4A  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14627  012B4C  6ED9               	movwf	fsr2l,c
 14628  012B4E  0E03               	movlw	high _HMIBoard
 14629  012B50  0100               	movlb	0	; () banked
 14630  012B52  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14631  012B54  6EDA               	movwf	fsr2h,c
 14632  012B56  C0B6  FFE1         	movff	HMI_SetSegments@pString,fsr1l
 14633  012B5A  C0B7  FFE2         	movff	HMI_SetSegments@pString+1,fsr1h
 14634  012B5E  50E7               	movf	indf1,w,c
 14635  012B60  ECEC  F083         	call	_ToSegment
 14636  012B64  6EDF               	movwf	indf2,c
 14637                           
 14638                           ;HMI.c: 233: if (HMIBoard.pSevenSegment[in] == eDot)
 14639  012B66  0E2E               	movlw	low _HMIBoard
 14640  012B68  0100               	movlb	0	; () banked
 14641  012B6A  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14642  012B6C  6ED9               	movwf	fsr2l,c
 14643  012B6E  0E03               	movlw	high _HMIBoard
 14644  012B70  0100               	movlb	0	; () banked
 14645  012B72  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14646  012B74  6EDA               	movwf	fsr2h,c
 14647  012B76  0E80               	movlw	128
 14648  012B78  18DE               	xorwf	postinc2,w,c
 14649  012B7A  A4D8               	btfss	status,2,c
 14650  012B7C  D00E               	goto	l1201
 14651                           
 14652                           ; BSR set to: 0
 14653                           ;HMI.c: 234: {
 14654                           ;HMI.c: 235: in--;
 14655  012B7E  0100               	movlb	0	; () banked
 14656  012B80  07B9               	decf	HMI_SetSegments@in& (0+255),f,b
 14657  012B82  A0D8               	btfss	status,0,c
 14658  012B84  07BA               	decf	(HMI_SetSegments@in+1)& (0+255),f,b
 14659                           
 14660                           ; BSR set to: 0
 14661                           ;HMI.c: 236: HMIBoard.pSevenSegment[in] |= eDot;
 14662  012B86  0E2E               	movlw	low _HMIBoard
 14663  012B88  0100               	movlb	0	; () banked
 14664  012B8A  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14665  012B8C  6ED9               	movwf	fsr2l,c
 14666  012B8E  0E03               	movlw	high _HMIBoard
 14667  012B90  0100               	movlb	0	; () banked
 14668  012B92  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14669  012B94  6EDA               	movwf	fsr2h,c
 14670  012B96  0E00               	movlw	0
 14671  012B98  8EDB               	bsf	plusw2,7,c
 14672  012B9A                     l1201:
 14673                           
 14674                           ; BSR set to: 0
 14675                           ;HMI.c: 237: }
 14676                           ;HMI.c: 239: pString++;
 14677                           
 14678                           ; BSR set to: 0
 14679  012B9A  0100               	movlb	0	; () banked
 14680  012B9C  4BB6               	infsnz	HMI_SetSegments@pString& (0+255),f,b
 14681  012B9E  2BB7               	incf	(HMI_SetSegments@pString+1)& (0+255),f,b
 14682                           
 14683                           ; BSR set to: 0
 14684                           ;HMI.c: 240: in++;
 14685  012BA0  0100               	movlb	0	; () banked
 14686  012BA2  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14687  012BA4  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14688                           
 14689                           ; BSR set to: 0
 14690                           ;HMI.c: 241: if (in>=6)
 14691  012BA6  0100               	movlb	0	; () banked
 14692  012BA8  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14693  012BAA  E11A               	bnz	l10845
 14694  012BAC  0E06               	movlw	6
 14695  012BAE  0100               	movlb	0	; () banked
 14696  012BB0  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 14697  012BB2  B0D8               	btfsc	status,0,c
 14698  012BB4  D015               	goto	l1204
 14699  012BB6                     l1202:
 14700                           
 14701                           ; BSR set to: 0
 14702                           
 14703                           ; BSR set to: 0
 14704                           
 14705                           ; BSR set to: 0
 14706  012BB6  C0B6  FFD9         	movff	HMI_SetSegments@pString,fsr2l
 14707  012BBA  C0B7  FFDA         	movff	HMI_SetSegments@pString+1,fsr2h
 14708  012BBE  50DF               	movf	indf2,w,c
 14709  012BC0  B4D8               	btfsc	status,2,c
 14710  012BC2  D00E               	goto	l1204
 14711  012BC4  D7C0               	goto	l1200
 14712  012BC6                     
 14713                           ; BSR set to: 0
 14714                           ;HMI.c: 245: {
 14715                           ;HMI.c: 246: HMIBoard.pSevenSegment[in] = 0;
 14716                           
 14717                           ; BSR set to: 0
 14718  012BC6  0E2E               	movlw	low _HMIBoard
 14719  012BC8  0100               	movlb	0	; () banked
 14720  012BCA  25B9               	addwf	HMI_SetSegments@in& (0+255),w,b
 14721  012BCC  6ED9               	movwf	fsr2l,c
 14722  012BCE  0E03               	movlw	high _HMIBoard
 14723  012BD0  0100               	movlb	0	; () banked
 14724  012BD2  21BA               	addwfc	(HMI_SetSegments@in+1)& (0+255),w,b
 14725  012BD4  6EDA               	movwf	fsr2h,c
 14726  012BD6  0E00               	movlw	0
 14727  012BD8  6EDF               	movwf	indf2,c
 14728                           
 14729                           ; BSR set to: 0
 14730                           ;HMI.c: 247: in++;
 14731  012BDA  0100               	movlb	0	; () banked
 14732  012BDC  4BB9               	infsnz	HMI_SetSegments@in& (0+255),f,b
 14733  012BDE  2BBA               	incf	(HMI_SetSegments@in+1)& (0+255),f,b
 14734  012BE0                     l1204:
 14735  012BE0                     l10845:
 14736                           
 14737                           ; BSR set to: 0
 14738  012BE0  0100               	movlb	0	; () banked
 14739  012BE2  51BA               	movf	(HMI_SetSegments@in+1)& (0+255),w,b
 14740  012BE4  E106               	bnz	l1207
 14741  012BE6  0E06               	movlw	6
 14742  012BE8  0100               	movlb	0	; () banked
 14743  012BEA  5DB9               	subwf	HMI_SetSegments@in& (0+255),w,b
 14744  012BEC  B0D8               	btfsc	status,0,c
 14745  012BEE  0012               	return	
 14746  012BF0  D7EA               	goto	l1205
 14747  012BF2                     l1207:
 14748                           
 14749                           ; BSR set to: 0
 14750  012BF2  0012               	return		;funcret
 14751  012BF4                     __end_of_HMI_SetSegments:
 14752                           	opt stack 0
 14753                           tosu	equ	0xFFF
 14754                           tosh	equ	0xFFE
 14755                           tosl	equ	0xFFD
 14756                           pclath	equ	0xFFA
 14757                           tblptru	equ	0xFF8
 14758                           tblptrh	equ	0xFF7
 14759                           tblptrl	equ	0xFF6
 14760                           tablat	equ	0xFF5
 14761                           prodh	equ	0xFF4
 14762                           prodl	equ	0xFF3
 14763                           intcon	equ	0xFF2
 14764                           postinc0	equ	0xFEE
 14765                           wreg	equ	0xFE8
 14766                           indf1	equ	0xFE7
 14767                           postdec1	equ	0xFE5
 14768                           fsr1h	equ	0xFE2
 14769                           fsr1l	equ	0xFE1
 14770                           indf2	equ	0xFDF
 14771                           postinc2	equ	0xFDE
 14772                           postdec2	equ	0xFDD
 14773                           plusw2	equ	0xFDB
 14774                           fsr2h	equ	0xFDA
 14775                           fsr2l	equ	0xFD9
 14776                           status	equ	0xFD8
 14777                           
 14778 ;; *************** function _ToSegment *****************
 14779 ;; Defined at:
 14780 ;;		line 284 in file "Library/Types.c"
 14781 ;; Parameters:    Size  Location     Type
 14782 ;;  pCHR            1    wreg     unsigned char 
 14783 ;; Auto vars:     Size  Location     Type
 14784 ;;  pCHR            1    0[BANK0 ] unsigned char 
 14785 ;; Return value:  Size  Location     Type
 14786 ;;                  1    wreg      unsigned char 
 14787 ;; Registers used:
 14788 ;;		wreg, status,2, status,0
 14789 ;; Tracked objects:
 14790 ;;		On entry : 0/0
 14791 ;;		On exit  : 0/0
 14792 ;;		Unchanged: 0/0
 14793 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 14794 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14795 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14796 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14797 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 14798 ;;Total ram usage:        1 bytes
 14799 ;; Hardware stack levels used:    1
 14800 ;; Hardware stack levels required when called:    7
 14801 ;; This function calls:
 14802 ;;		Nothing
 14803 ;; This function is called by:
 14804 ;;		_HMI_SetSegments
 14805 ;; This function uses a non-reentrant model
 14806 ;;
 14807                           
 14808                           	psect	text81
 14809  0107D8                     __ptext81:
 14810                           	opt stack 0
 14811  0107D8                     _ToSegment:
 14812                           	opt stack 18
 14813                           
 14814                           ; BSR set to: 0
 14815                           ;incstack = 0
 14816                           ;ToSegment@pCHR stored from wreg
 14817  0107D8  0100               	movlb	0	; () banked
 14818  0107DA  6FB5               	movwf	ToSegment@pCHR& (0+255),b
 14819                           
 14820                           ;Types.c: 286: switch(pCHR)
 14821  0107DC  D07E               	goto	l853
 14822  0107DE  0E3F               	movlw	63
 14823  0107E0  0012               	return	
 14824  0107E2  0E06               	movlw	6
 14825  0107E4  0012               	return	
 14826  0107E6  0E5B               	movlw	91
 14827  0107E8  0012               	return	
 14828  0107EA  0E4F               	movlw	79
 14829  0107EC  0012               	return	
 14830  0107EE  0E66               	movlw	102
 14831  0107F0  0012               	return	
 14832  0107F2  0E6D               	movlw	109
 14833  0107F4  0012               	return	
 14834  0107F6  0E7D               	movlw	125
 14835  0107F8  0012               	return	
 14836  0107FA  0E07               	movlw	7
 14837  0107FC  0012               	return	
 14838  0107FE  0E7F               	movlw	127
 14839  010800  0012               	return	
 14840  010802  0E6F               	movlw	111
 14841  010804  0012               	return	
 14842  010806  0E5F               	movlw	95
 14843  010808  0012               	return	
 14844  01080A  0E7C               	movlw	124
 14845  01080C  0012               	return	
 14846  01080E  0E58               	movlw	88
 14847  010810  0012               	return	
 14848  010812  0E5E               	movlw	94
 14849  010814  0012               	return	
 14850  010816  0E7B               	movlw	123
 14851  010818  0012               	return	
 14852  01081A  0E71               	movlw	113
 14853  01081C  0012               	return	
 14854  01081E  0E6F               	movlw	111
 14855  010820  0012               	return	
 14856  010822  0E74               	movlw	116
 14857  010824  0012               	return	
 14858  010826  0E04               	movlw	4
 14859  010828  0012               	return	
 14860  01082A  0E0E               	movlw	14
 14861  01082C  0012               	return	
 14862  01082E  0E7A               	movlw	122
 14863  010830  0012               	return	
 14864  010832  0E06               	movlw	6
 14865  010834  0012               	return	
 14866  010836  0E14               	movlw	20
 14867  010838  0012               	return	
 14868  01083A  0E54               	movlw	84
 14869  01083C  0012               	return	
 14870  01083E  0E5C               	movlw	92
 14871  010840  0012               	return	
 14872  010842  0E73               	movlw	115
 14873  010844  0012               	return	
 14874  010846  0E67               	movlw	103
 14875  010848  0012               	return	
 14876  01084A  0E50               	movlw	80
 14877  01084C  0012               	return	
 14878  01084E  0E6D               	movlw	109
 14879  010850  0012               	return	
 14880  010852  0E78               	movlw	120
 14881  010854  0012               	return	
 14882  010856  0E1C               	movlw	28
 14883  010858  0012               	return	
 14884  01085A  0E62               	movlw	98
 14885  01085C  0012               	return	
 14886  01085E  0E2A               	movlw	42
 14887  010860  0012               	return	
 14888  010862  0E64               	movlw	100
 14889  010864  0012               	return	
 14890  010866  0E6E               	movlw	110
 14891  010868  0012               	return	
 14892  01086A  0E5B               	movlw	91
 14893  01086C  0012               	return	
 14894  01086E  0E77               	movlw	119
 14895  010870  0012               	return	
 14896  010872  0E7F               	movlw	127
 14897  010874  0012               	return	
 14898  010876  0E39               	movlw	57
 14899  010878  0012               	return	
 14900  01087A  0E3F               	movlw	63
 14901  01087C  0012               	return	
 14902  01087E  0E79               	movlw	121
 14903  010880  0012               	return	
 14904  010882  0E71               	movlw	113
 14905  010884  0012               	return	
 14906  010886  0E3D               	movlw	61
 14907  010888  0012               	return	
 14908  01088A  0E76               	movlw	118
 14909  01088C  0012               	return	
 14910  01088E  0E06               	movlw	6
 14911  010890  0012               	return	
 14912  010892  0E1E               	movlw	30
 14913  010894  0012               	return	
 14914  010896  0E57               	movlw	87
 14915  010898  0012               	return	
 14916  01089A  0E38               	movlw	56
 14917  01089C  0012               	return	
 14918  01089E  0E76               	movlw	118
 14919  0108A0  0012               	return	
 14920  0108A2  0E76               	movlw	118
 14921  0108A4  0012               	return	
 14922  0108A6  0E3F               	movlw	63
 14923  0108A8  0012               	return	
 14924  0108AA  0E73               	movlw	115
 14925  0108AC  0012               	return	
 14926  0108AE  0E3F               	movlw	63
 14927  0108B0  0012               	return	
 14928  0108B2  0E77               	movlw	119
 14929  0108B4  0012               	return	
 14930  0108B6  0E6D               	movlw	109
 14931  0108B8  0012               	return	
 14932  0108BA  0E31               	movlw	49
 14933  0108BC  0012               	return	
 14934  0108BE  0E3E               	movlw	62
 14935  0108C0  0012               	return	
 14936  0108C2  0E3E               	movlw	62
 14937  0108C4  0012               	return	
 14938  0108C6  0E7E               	movlw	126
 14939  0108C8  0012               	return	
 14940  0108CA  0E76               	movlw	118
 14941  0108CC  0012               	return	
 14942  0108CE  0E66               	movlw	102
 14943  0108D0  0012               	return	
 14944  0108D2  0E5B               	movlw	91
 14945  0108D4  0012               	return	
 14946  0108D6  0E80               	movlw	128
 14947  0108D8  0012               	return	
 14948  0108DA                     l853:
 14949  0108DA  0100               	movlb	0	; () banked
 14950  0108DC  51B5               	movf	ToSegment@pCHR& (0+255),w,b
 14951                           
 14952                           ; Switch size 1, requested type "space"
 14953                           ; Number of cases is 63, Range of values is 46 to 122
 14954                           ; switch strategies available:
 14955                           ; Name         Instructions Cycles
 14956                           ; simple_byte          190    96 (average)
 14957                           ;	Chosen strategy is simple_byte
 14958  0108DE  0A2E               	xorlw	46	; case 46
 14959  0108E0  B4D8               	btfsc	status,2,c
 14960  0108E2  D7F9               	goto	l917
 14961  0108E4  0A1E               	xorlw	30	; case 48
 14962  0108E6  B4D8               	btfsc	status,2,c
 14963  0108E8  D77A               	goto	l854
 14964  0108EA  0A01               	xorlw	1	; case 49
 14965  0108EC  B4D8               	btfsc	status,2,c
 14966  0108EE  D779               	goto	l856
 14967  0108F0  0A03               	xorlw	3	; case 50
 14968  0108F2  B4D8               	btfsc	status,2,c
 14969  0108F4  D778               	goto	l857
 14970  0108F6  0A01               	xorlw	1	; case 51
 14971  0108F8  B4D8               	btfsc	status,2,c
 14972  0108FA  D777               	goto	l858
 14973  0108FC  0A07               	xorlw	7	; case 52
 14974  0108FE  B4D8               	btfsc	status,2,c
 14975  010900  D776               	goto	l859
 14976  010902  0A01               	xorlw	1	; case 53
 14977  010904  B4D8               	btfsc	status,2,c
 14978  010906  D775               	goto	l860
 14979  010908  0A03               	xorlw	3	; case 54
 14980  01090A  B4D8               	btfsc	status,2,c
 14981  01090C  D774               	goto	l861
 14982  01090E  0A01               	xorlw	1	; case 55
 14983  010910  B4D8               	btfsc	status,2,c
 14984  010912  D773               	goto	l862
 14985  010914  0A0F               	xorlw	15	; case 56
 14986  010916  B4D8               	btfsc	status,2,c
 14987  010918  D772               	goto	l863
 14988  01091A  0A01               	xorlw	1	; case 57
 14989  01091C  B4D8               	btfsc	status,2,c
 14990  01091E  D771               	goto	l864
 14991  010920  0A78               	xorlw	120	; case 65
 14992  010922  B4D8               	btfsc	status,2,c
 14993  010924  D7A4               	goto	l891
 14994  010926  0A03               	xorlw	3	; case 66
 14995  010928  B4D8               	btfsc	status,2,c
 14996  01092A  D7A3               	goto	l892
 14997  01092C  0A01               	xorlw	1	; case 67
 14998  01092E  B4D8               	btfsc	status,2,c
 14999  010930  D7A2               	goto	l893
 15000  010932  0A07               	xorlw	7	; case 68
 15001  010934  B4D8               	btfsc	status,2,c
 15002  010936  D7A1               	goto	l894
 15003  010938  0A01               	xorlw	1	; case 69
 15004  01093A  B4D8               	btfsc	status,2,c
 15005  01093C  D7A0               	goto	l895
 15006  01093E  0A03               	xorlw	3	; case 70
 15007  010940  B4D8               	btfsc	status,2,c
 15008  010942  D79F               	goto	l896
 15009  010944  0A01               	xorlw	1	; case 71
 15010  010946  B4D8               	btfsc	status,2,c
 15011  010948  D79E               	goto	l897
 15012  01094A  0A0F               	xorlw	15	; case 72
 15013  01094C  B4D8               	btfsc	status,2,c
 15014  01094E  D79D               	goto	l898
 15015  010950  0A01               	xorlw	1	; case 73
 15016  010952  B4D8               	btfsc	status,2,c
 15017  010954  D79C               	goto	l899
 15018  010956  0A03               	xorlw	3	; case 74
 15019  010958  B4D8               	btfsc	status,2,c
 15020  01095A  D79B               	goto	l900
 15021  01095C  0A01               	xorlw	1	; case 75
 15022  01095E  B4D8               	btfsc	status,2,c
 15023  010960  D79A               	goto	l901
 15024  010962  0A07               	xorlw	7	; case 76
 15025  010964  B4D8               	btfsc	status,2,c
 15026  010966  D799               	goto	l902
 15027  010968  0A01               	xorlw	1	; case 77
 15028  01096A  B4D8               	btfsc	status,2,c
 15029  01096C  D798               	goto	l903
 15030  01096E  0A03               	xorlw	3	; case 78
 15031  010970  B4D8               	btfsc	status,2,c
 15032  010972  D797               	goto	l904
 15033  010974  0A01               	xorlw	1	; case 79
 15034  010976  B4D8               	btfsc	status,2,c
 15035  010978  D796               	goto	l905
 15036  01097A  0A1F               	xorlw	31	; case 80
 15037  01097C  B4D8               	btfsc	status,2,c
 15038  01097E  D795               	goto	l906
 15039  010980  0A01               	xorlw	1	; case 81
 15040  010982  B4D8               	btfsc	status,2,c
 15041  010984  D794               	goto	l907
 15042  010986  0A03               	xorlw	3	; case 82
 15043  010988  B4D8               	btfsc	status,2,c
 15044  01098A  D793               	goto	l908
 15045  01098C  0A01               	xorlw	1	; case 83
 15046  01098E  B4D8               	btfsc	status,2,c
 15047  010990  D792               	goto	l909
 15048  010992  0A07               	xorlw	7	; case 84
 15049  010994  B4D8               	btfsc	status,2,c
 15050  010996  D791               	goto	l910
 15051  010998  0A01               	xorlw	1	; case 85
 15052  01099A  B4D8               	btfsc	status,2,c
 15053  01099C  D790               	goto	l911
 15054  01099E  0A03               	xorlw	3	; case 86
 15055  0109A0  B4D8               	btfsc	status,2,c
 15056  0109A2  D78F               	goto	l912
 15057  0109A4  0A01               	xorlw	1	; case 87
 15058  0109A6  B4D8               	btfsc	status,2,c
 15059  0109A8  D78E               	goto	l913
 15060  0109AA  0A0F               	xorlw	15	; case 88
 15061  0109AC  B4D8               	btfsc	status,2,c
 15062  0109AE  D78D               	goto	l914
 15063  0109B0  0A01               	xorlw	1	; case 89
 15064  0109B2  B4D8               	btfsc	status,2,c
 15065  0109B4  D78C               	goto	l915
 15066  0109B6  0A03               	xorlw	3	; case 90
 15067  0109B8  B4D8               	btfsc	status,2,c
 15068  0109BA  D78B               	goto	l916
 15069  0109BC  0A3B               	xorlw	59	; case 97
 15070  0109BE  B4D8               	btfsc	status,2,c
 15071  0109C0  D722               	goto	l865
 15072  0109C2  0A03               	xorlw	3	; case 98
 15073  0109C4  B4D8               	btfsc	status,2,c
 15074  0109C6  D721               	goto	l866
 15075  0109C8  0A01               	xorlw	1	; case 99
 15076  0109CA  B4D8               	btfsc	status,2,c
 15077  0109CC  D720               	goto	l867
 15078  0109CE  0A07               	xorlw	7	; case 100
 15079  0109D0  B4D8               	btfsc	status,2,c
 15080  0109D2  D71F               	goto	l868
 15081  0109D4  0A01               	xorlw	1	; case 101
 15082  0109D6  B4D8               	btfsc	status,2,c
 15083  0109D8  D71E               	goto	l869
 15084  0109DA  0A03               	xorlw	3	; case 102
 15085  0109DC  B4D8               	btfsc	status,2,c
 15086  0109DE  D71D               	goto	l870
 15087  0109E0  0A01               	xorlw	1	; case 103
 15088  0109E2  B4D8               	btfsc	status,2,c
 15089  0109E4  D71C               	goto	l871
 15090  0109E6  0A0F               	xorlw	15	; case 104
 15091  0109E8  B4D8               	btfsc	status,2,c
 15092  0109EA  D71B               	goto	l872
 15093  0109EC  0A01               	xorlw	1	; case 105
 15094  0109EE  B4D8               	btfsc	status,2,c
 15095  0109F0  D71A               	goto	l873
 15096  0109F2  0A03               	xorlw	3	; case 106
 15097  0109F4  B4D8               	btfsc	status,2,c
 15098  0109F6  D719               	goto	l874
 15099  0109F8  0A01               	xorlw	1	; case 107
 15100  0109FA  B4D8               	btfsc	status,2,c
 15101  0109FC  D718               	goto	l875
 15102  0109FE  0A07               	xorlw	7	; case 108
 15103  010A00  B4D8               	btfsc	status,2,c
 15104  010A02  D717               	goto	l876
 15105  010A04  0A01               	xorlw	1	; case 109
 15106  010A06  B4D8               	btfsc	status,2,c
 15107  010A08  D716               	goto	l877
 15108  010A0A  0A03               	xorlw	3	; case 110
 15109  010A0C  B4D8               	btfsc	status,2,c
 15110  010A0E  D715               	goto	l878
 15111  010A10  0A01               	xorlw	1	; case 111
 15112  010A12  B4D8               	btfsc	status,2,c
 15113  010A14  D714               	goto	l879
 15114  010A16  0A1F               	xorlw	31	; case 112
 15115  010A18  B4D8               	btfsc	status,2,c
 15116  010A1A  D713               	goto	l880
 15117  010A1C  0A01               	xorlw	1	; case 113
 15118  010A1E  B4D8               	btfsc	status,2,c
 15119  010A20  D712               	goto	l881
 15120  010A22  0A03               	xorlw	3	; case 114
 15121  010A24  B4D8               	btfsc	status,2,c
 15122  010A26  D711               	goto	l882
 15123  010A28  0A01               	xorlw	1	; case 115
 15124  010A2A  B4D8               	btfsc	status,2,c
 15125  010A2C  D710               	goto	l883
 15126  010A2E  0A07               	xorlw	7	; case 116
 15127  010A30  B4D8               	btfsc	status,2,c
 15128  010A32  D70F               	goto	l884
 15129  010A34  0A01               	xorlw	1	; case 117
 15130  010A36  B4D8               	btfsc	status,2,c
 15131  010A38  D70E               	goto	l885
 15132  010A3A  0A03               	xorlw	3	; case 118
 15133  010A3C  B4D8               	btfsc	status,2,c
 15134  010A3E  D70D               	goto	l886
 15135  010A40  0A01               	xorlw	1	; case 119
 15136  010A42  B4D8               	btfsc	status,2,c
 15137  010A44  D70C               	goto	l887
 15138  010A46  0A0F               	xorlw	15	; case 120
 15139  010A48  B4D8               	btfsc	status,2,c
 15140  010A4A  D70B               	goto	l888
 15141  010A4C  0A01               	xorlw	1	; case 121
 15142  010A4E  B4D8               	btfsc	status,2,c
 15143  010A50  D70A               	goto	l889
 15144  010A52  0A03               	xorlw	3	; case 122
 15145  010A54  B4D8               	btfsc	status,2,c
 15146  010A56  D709               	goto	l890
 15147                           
 15148                           ;Types.c: 354: return 0;
 15149                           
 15150                           ; BSR set to: 0
 15151  010A58  0E00               	movlw	0
 15152  010A5A  0012               	return	
 15153  010A5C                     __end_of_ToSegment:
 15154                           	opt stack 0
 15155                           tosu	equ	0xFFF
 15156                           tosh	equ	0xFFE
 15157                           tosl	equ	0xFFD
 15158                           pclath	equ	0xFFA
 15159                           tblptru	equ	0xFF8
 15160                           tblptrh	equ	0xFF7
 15161                           tblptrl	equ	0xFF6
 15162                           tablat	equ	0xFF5
 15163                           prodh	equ	0xFF4
 15164                           prodl	equ	0xFF3
 15165                           intcon	equ	0xFF2
 15166                           postinc0	equ	0xFEE
 15167                           wreg	equ	0xFE8
 15168                           indf1	equ	0xFE7
 15169                           postdec1	equ	0xFE5
 15170                           fsr1h	equ	0xFE2
 15171                           fsr1l	equ	0xFE1
 15172                           indf2	equ	0xFDF
 15173                           postinc2	equ	0xFDE
 15174                           postdec2	equ	0xFDD
 15175                           plusw2	equ	0xFDB
 15176                           fsr2h	equ	0xFDA
 15177                           fsr2l	equ	0xFD9
 15178                           status	equ	0xFD8
 15179                           
 15180 ;; *************** function _HMI_SetButton *****************
 15181 ;; Defined at:
 15182 ;;		line 186 in file "HMI.c"
 15183 ;; Parameters:    Size  Location     Type
 15184 ;;  pValue          1    wreg     unsigned char 
 15185 ;; Auto vars:     Size  Location     Type
 15186 ;;  pValue          1    6[BANK0 ] unsigned char 
 15187 ;;  reindex         4    2[BANK0 ] const unsigned char [4]
 15188 ;;  v               1    7[BANK0 ] unsigned char 
 15189 ;; Return value:  Size  Location     Type
 15190 ;;                  1    wreg      void 
 15191 ;; Registers used:
 15192 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 15193 ;; Tracked objects:
 15194 ;;		On entry : 0/0
 15195 ;;		On exit  : 0/0
 15196 ;;		Unchanged: 0/0
 15197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15198 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15199 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15200 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15201 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15202 ;;Total ram usage:        8 bytes
 15203 ;; Hardware stack levels used:    1
 15204 ;; Hardware stack levels required when called:    7
 15205 ;; This function calls:
 15206 ;;		Nothing
 15207 ;; This function is called by:
 15208 ;;		_Event_TestButton
 15209 ;; This function uses a non-reentrant model
 15210 ;;
 15211                           
 15212                           	psect	text82
 15213  0133C8                     __ptext82:
 15214                           	opt stack 0
 15215  0133C8                     _HMI_SetButton:
 15216                           	opt stack 20
 15217                           
 15218                           ;incstack = 0
 15219                           ;HMI_SetButton@pValue stored from wreg
 15220  0133C8  0100               	movlb	0	; () banked
 15221  0133CA  6FBB               	movwf	HMI_SetButton@pValue& (0+255),b
 15222                           
 15223                           ;HMI.c: 188: const UINT8 reindex[] = {0, 2, 1, 3};
 15224  0133CC  0ECA               	movlw	low HMI_SetButton@F7213
 15225  0133CE  6EF6               	movwf	tblptrl,c
 15226  0133D0                     	if	1	;There is more than 1 active tblptr byte
 15227  0133D0  0EFD               	movlw	high HMI_SetButton@F7213
 15228  0133D2  6EF7               	movwf	tblptrh,c
 15229  0133D4                     	endif
 15230  0133D4                     	if	1	;There are 3 active tblptr bytes
 15231  0133D4  0E00               	movlw	low (HMI_SetButton@F7213 shr (0+16))
 15232  0133D6  6EF8               	movwf	tblptru,c
 15233  0133D8                     	endif
 15234  0133D8  0009               	tblrd		*+
 15235  0133DA  CFF5 F0B7          	movff	tablat,HMI_SetButton@reindex
 15236  0133DE  0009               	tblrd		*+
 15237  0133E0  CFF5 F0B8          	movff	tablat,HMI_SetButton@reindex+1
 15238  0133E4  0009               	tblrd		*+
 15239  0133E6  CFF5 F0B9          	movff	tablat,HMI_SetButton@reindex+2
 15240  0133EA  000A               	tblrd		*-
 15241  0133EC  CFF5 F0BA          	movff	tablat,HMI_SetButton@reindex+3
 15242                           
 15243                           ;HMI.c: 189: UINT8 v = 0b00010001;
 15244  0133F0  0E11               	movlw	17
 15245  0133F2  0100               	movlb	0	; () banked
 15246  0133F4  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15247                           
 15248                           ; BSR set to: 0
 15249                           ;HMI.c: 190: pValue &= 3;
 15250  0133F6  0E03               	movlw	3
 15251  0133F8  0100               	movlb	0	; () banked
 15252  0133FA  17BB               	andwf	HMI_SetButton@pValue& (0+255),f,b
 15253                           
 15254                           ; BSR set to: 0
 15255                           ;HMI.c: 191: v = v << reindex[pValue];
 15256  0133FC  0100               	movlb	0	; () banked
 15257  0133FE  51BB               	movf	HMI_SetButton@pValue& (0+255),w,b
 15258  013400  0D01               	mullw	1
 15259  013402  0EB7               	movlw	low HMI_SetButton@reindex
 15260  013404  24F3               	addwf	prodl,w,c
 15261  013406  6ED9               	movwf	fsr2l,c
 15262  013408  0E00               	movlw	high HMI_SetButton@reindex
 15263  01340A  20F4               	addwfc	prodh,w,c
 15264  01340C  6EDA               	movwf	fsr2h,c
 15265  01340E  50DF               	movf	indf2,w,c
 15266  013410  0100               	movlb	0	; () banked
 15267  013412  6FB5               	movwf	??_HMI_SetButton& (0+255),b
 15268  013414  C0BC  F0B6         	movff	HMI_SetButton@v,??_HMI_SetButton+1
 15269  013418  0100               	movlb	0	; () banked
 15270  01341A  2BB5               	incf	??_HMI_SetButton& (0+255),f,b
 15271  01341C  D003               	goto	u7194
 15272  01341E                     u7195:
 15273  01341E  0100               	movlb	0	; () banked
 15274  013420  90D8               	bcf	status,0,c
 15275  013422  37B6               	rlcf	(??_HMI_SetButton+1)& (0+255),f,b
 15276  013424                     u7194:
 15277  013424  0100               	movlb	0	; () banked
 15278  013426  2FB5               	decfsz	??_HMI_SetButton& (0+255),f,b
 15279  013428  D7FA               	goto	u7195
 15280  01342A  0100               	movlb	0	; () banked
 15281  01342C  51B6               	movf	(??_HMI_SetButton+1)& (0+255),w,b
 15282  01342E  0100               	movlb	0	; () banked
 15283  013430  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15284                           
 15285                           ; BSR set to: 0
 15286                           ;HMI.c: 192: v = v >> 4;
 15287  013432  0100               	movlb	0	; () banked
 15288  013434  39BC               	swapf	HMI_SetButton@v& (0+255),w,b
 15289  013436  0B0F               	andlw	15
 15290  013438  0100               	movlb	0	; () banked
 15291  01343A  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15292                           
 15293                           ; BSR set to: 0
 15294                           ;HMI.c: 193: v = v & 0x0F;
 15295  01343C  0100               	movlb	0	; () banked
 15296  01343E  51BC               	movf	HMI_SetButton@v& (0+255),w,b
 15297  013440  0B0F               	andlw	15
 15298  013442  0100               	movlb	0	; () banked
 15299  013444  6FBC               	movwf	HMI_SetButton@v& (0+255),b
 15300                           
 15301                           ; BSR set to: 0
 15302                           ;HMI.c: 194: HMIBoard.pButton = v;
 15303  013446  0103               	movlb	3	; () banked
 15304  013448  5134               	movf	(_HMIBoard+6)& (0+255),w,b
 15305  01344A  0100               	movlb	0	; () banked
 15306  01344C  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 15307  01344E  0BF0               	andlw	-16
 15308  013450  19BC               	xorwf	HMI_SetButton@v& (0+255),w,b
 15309  013452  0103               	movlb	3	; () banked
 15310  013454  6F34               	movwf	(_HMIBoard+6)& (0+255),b
 15311                           
 15312                           ; BSR set to: 3
 15313  013456  0012               	return		;funcret
 15314  013458                     __end_of_HMI_SetButton:
 15315                           	opt stack 0
 15316                           tosu	equ	0xFFF
 15317                           tosh	equ	0xFFE
 15318                           tosl	equ	0xFFD
 15319                           pclath	equ	0xFFA
 15320                           tblptru	equ	0xFF8
 15321                           tblptrh	equ	0xFF7
 15322                           tblptrl	equ	0xFF6
 15323                           tablat	equ	0xFF5
 15324                           prodh	equ	0xFF4
 15325                           prodl	equ	0xFF3
 15326                           intcon	equ	0xFF2
 15327                           postinc0	equ	0xFEE
 15328                           wreg	equ	0xFE8
 15329                           indf1	equ	0xFE7
 15330                           postdec1	equ	0xFE5
 15331                           fsr1h	equ	0xFE2
 15332                           fsr1l	equ	0xFE1
 15333                           indf2	equ	0xFDF
 15334                           postinc2	equ	0xFDE
 15335                           postdec2	equ	0xFDD
 15336                           plusw2	equ	0xFDB
 15337                           fsr2h	equ	0xFDA
 15338                           fsr2l	equ	0xFD9
 15339                           status	equ	0xFD8
 15340                           
 15341 ;; *************** function _LED_Toggle *****************
 15342 ;; Defined at:
 15343 ;;		line 50 in file "Library/LED.c"
 15344 ;; Parameters:    Size  Location     Type
 15345 ;;  pLED            1    wreg     enum E6739
 15346 ;; Auto vars:     Size  Location     Type
 15347 ;;  pLED            1   24[BANK0 ] enum E6739
 15348 ;; Return value:  Size  Location     Type
 15349 ;;                  1    wreg      void 
 15350 ;; Registers used:
 15351 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15352 ;; Tracked objects:
 15353 ;;		On entry : 0/0
 15354 ;;		On exit  : 0/0
 15355 ;;		Unchanged: 0/0
 15356 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15357 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15358 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15359 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15360 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15361 ;;Total ram usage:        1 bytes
 15362 ;; Hardware stack levels used:    1
 15363 ;; Hardware stack levels required when called:   12
 15364 ;; This function calls:
 15365 ;;		_Port_TogglePin
 15366 ;; This function is called by:
 15367 ;;		_LCD_Reset
 15368 ;;		_Event_DIPSwitch
 15369 ;;		_Event_TestButton
 15370 ;;		_Event_ADCSequenceComplete
 15371 ;;		_Event_HMI_DIPSwitch
 15372 ;;		_Event_HMI_LeftButton
 15373 ;;		_Event_HMI_RightButton
 15374 ;;		_Event_HMI_UpButton
 15375 ;;		_Event_HMI_DownButton
 15376 ;; This function uses a non-reentrant model
 15377 ;;
 15378                           
 15379                           	psect	text83
 15380  01414C                     __ptext83:
 15381                           	opt stack 0
 15382  01414C                     _LED_Toggle:
 15383                           	opt stack 15
 15384                           
 15385                           ; BSR set to: 3
 15386                           ;incstack = 0
 15387                           ;LED_Toggle@pLED stored from wreg
 15388  01414C  0100               	movlb	0	; () banked
 15389  01414E  6FCD               	movwf	LED_Toggle@pLED& (0+255),b
 15390                           
 15391                           ;LED.c: 52: switch (pLED)
 15392  014150  D018               	goto	l234
 15393  014152                     
 15394                           ;LED.c: 55: Port_TogglePin(&PortC, eP0);
 15395  014152  0EA3               	movlw	low _PortC
 15396  014154  0100               	movlb	0	; () banked
 15397  014156  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 15398  014158  0E00               	movlw	high _PortC
 15399  01415A  0100               	movlb	0	; () banked
 15400  01415C  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15401  01415E  0E00               	movlw	0
 15402  014160  0100               	movlb	0	; () banked
 15403  014162  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 15404  014164  EC9E  F0A2         	call	_Port_TogglePin	;wreg free
 15405                           
 15406                           ;LED.c: 56: break;
 15407  014168  0012               	return	
 15408  01416A                     
 15409                           ;LED.c: 58: Port_TogglePin(&PortC, eP1);
 15410  01416A  0EA3               	movlw	low _PortC
 15411  01416C  0100               	movlb	0	; () banked
 15412  01416E  6FC9               	movwf	Port_TogglePin@pInput& (0+255),b
 15413  014170  0E00               	movlw	high _PortC
 15414  014172  0100               	movlb	0	; () banked
 15415  014174  6FCA               	movwf	(Port_TogglePin@pInput+1)& (0+255),b
 15416  014176  0E01               	movlw	1
 15417  014178  0100               	movlb	0	; () banked
 15418  01417A  6FCB               	movwf	Port_TogglePin@pPin& (0+255),b
 15419  01417C  EC9E  F0A2         	call	_Port_TogglePin	;wreg free
 15420                           
 15421                           ;LED.c: 60: }
 15422                           
 15423                           ;LED.c: 59: break;
 15424  014180  0012               	return	
 15425  014182                     l234:
 15426  014182  0100               	movlb	0	; () banked
 15427  014184  51CD               	movf	LED_Toggle@pLED& (0+255),w,b
 15428                           
 15429                           ; Switch size 1, requested type "space"
 15430                           ; Number of cases is 2, Range of values is 0 to 1
 15431                           ; switch strategies available:
 15432                           ; Name         Instructions Cycles
 15433                           ; simple_byte            7     4 (average)
 15434                           ;	Chosen strategy is simple_byte
 15435  014186  0A00               	xorlw	0	; case 0
 15436  014188  B4D8               	btfsc	status,2,c
 15437  01418A  D7E3               	goto	l235
 15438  01418C  0A01               	xorlw	1	; case 1
 15439  01418E  A4D8               	btfss	status,2,c
 15440  014190  0012               	return	
 15441  014192  D7EB               	goto	l237
 15442  014194                     __end_of_LED_Toggle:
 15443                           	opt stack 0
 15444                           tosu	equ	0xFFF
 15445                           tosh	equ	0xFFE
 15446                           tosl	equ	0xFFD
 15447                           pclath	equ	0xFFA
 15448                           tblptru	equ	0xFF8
 15449                           tblptrh	equ	0xFF7
 15450                           tblptrl	equ	0xFF6
 15451                           tablat	equ	0xFF5
 15452                           prodh	equ	0xFF4
 15453                           prodl	equ	0xFF3
 15454                           intcon	equ	0xFF2
 15455                           postinc0	equ	0xFEE
 15456                           wreg	equ	0xFE8
 15457                           indf1	equ	0xFE7
 15458                           postdec1	equ	0xFE5
 15459                           fsr1h	equ	0xFE2
 15460                           fsr1l	equ	0xFE1
 15461                           indf2	equ	0xFDF
 15462                           postinc2	equ	0xFDE
 15463                           postdec2	equ	0xFDD
 15464                           plusw2	equ	0xFDB
 15465                           fsr2h	equ	0xFDA
 15466                           fsr2l	equ	0xFD9
 15467                           status	equ	0xFD8
 15468                           
 15469 ;; *************** function _Port_TogglePin *****************
 15470 ;; Defined at:
 15471 ;;		line 278 in file "Library/Port.c"
 15472 ;; Parameters:    Size  Location     Type
 15473 ;;  pInput          2   20[BANK0 ] const PTR struct Port
 15474 ;;		 -> PortC(10), 
 15475 ;;  pPin            1   22[BANK0 ] enum E6750
 15476 ;; Auto vars:     Size  Location     Type
 15477 ;;  Value           1   23[BANK0 ] unsigned char 
 15478 ;; Return value:  Size  Location     Type
 15479 ;;                  1    wreg      void 
 15480 ;; Registers used:
 15481 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15482 ;; Tracked objects:
 15483 ;;		On entry : 0/0
 15484 ;;		On exit  : 0/0
 15485 ;;		Unchanged: 0/0
 15486 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15487 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15488 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15489 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15490 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15491 ;;Total ram usage:        4 bytes
 15492 ;; Hardware stack levels used:    1
 15493 ;; Hardware stack levels required when called:   11
 15494 ;; This function calls:
 15495 ;;		_Port_GetPin
 15496 ;;		_Port_SetPin
 15497 ;; This function is called by:
 15498 ;;		_LED_Toggle
 15499 ;; This function uses a non-reentrant model
 15500 ;;
 15501                           
 15502                           	psect	text84
 15503  01453C                     __ptext84:
 15504                           	opt stack 0
 15505  01453C                     _Port_TogglePin:
 15506                           	opt stack 15
 15507                           
 15508                           ;Port.c: 280: UINT8 Value;
 15509                           ;Port.c: 281: Value = Port_GetPin(pInput, pPin);
 15510                           
 15511                           ;incstack = 0
 15512  01453C  C0C9  F0B5         	movff	Port_TogglePin@pInput,Port_GetPin@pInput
 15513  014540  C0CA  F0B6         	movff	Port_TogglePin@pInput+1,Port_GetPin@pInput+1
 15514  014544  C0CB  F0B7         	movff	Port_TogglePin@pPin,Port_GetPin@pPin
 15515  014548  ECED  F0A0         	call	_Port_GetPin	;wreg free
 15516  01454C  0100               	movlb	0	; () banked
 15517  01454E  6FCC               	movwf	Port_TogglePin@Value& (0+255),b
 15518                           
 15519                           ; BSR set to: 0
 15520                           ;Port.c: 282: Value ^= 0x01;
 15521  014550  0E01               	movlw	1
 15522  014552  0100               	movlb	0	; () banked
 15523  014554  1BCC               	xorwf	Port_TogglePin@Value& (0+255),f,b
 15524                           
 15525                           ; BSR set to: 0
 15526                           ;Port.c: 283: Port_SetPin(pInput, pPin, Value);
 15527  014556  C0C9  F0C4         	movff	Port_TogglePin@pInput,Port_SetPin@pInput
 15528  01455A  C0CA  F0C5         	movff	Port_TogglePin@pInput+1,Port_SetPin@pInput+1
 15529  01455E  C0CB  F0C6         	movff	Port_TogglePin@pPin,Port_SetPin@pPin
 15530  014562  C0CC  F0C7         	movff	Port_TogglePin@Value,Port_SetPin@pValue
 15531  014566  EC1D  F094         	call	_Port_SetPin	;wreg free
 15532  01456A  0012               	return		;funcret
 15533  01456C                     __end_of_Port_TogglePin:
 15534                           	opt stack 0
 15535                           tosu	equ	0xFFF
 15536                           tosh	equ	0xFFE
 15537                           tosl	equ	0xFFD
 15538                           pclath	equ	0xFFA
 15539                           tblptru	equ	0xFF8
 15540                           tblptrh	equ	0xFF7
 15541                           tblptrl	equ	0xFF6
 15542                           tablat	equ	0xFF5
 15543                           prodh	equ	0xFF4
 15544                           prodl	equ	0xFF3
 15545                           intcon	equ	0xFF2
 15546                           postinc0	equ	0xFEE
 15547                           wreg	equ	0xFE8
 15548                           indf1	equ	0xFE7
 15549                           postdec1	equ	0xFE5
 15550                           fsr1h	equ	0xFE2
 15551                           fsr1l	equ	0xFE1
 15552                           indf2	equ	0xFDF
 15553                           postinc2	equ	0xFDE
 15554                           postdec2	equ	0xFDD
 15555                           plusw2	equ	0xFDB
 15556                           fsr2h	equ	0xFDA
 15557                           fsr2l	equ	0xFD9
 15558                           status	equ	0xFD8
 15559                           
 15560 ;; *************** function _Port_SetPin *****************
 15561 ;; Defined at:
 15562 ;;		line 247 in file "Library/Port.c"
 15563 ;; Parameters:    Size  Location     Type
 15564 ;;  pInput          2   15[BANK0 ] const PTR struct Port
 15565 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 15566 ;;  pPin            1   17[BANK0 ] enum E6750
 15567 ;;  pValue          1   18[BANK0 ] unsigned char 
 15568 ;; Auto vars:     Size  Location     Type
 15569 ;;  Type            1   19[BANK0 ] enum E6795
 15570 ;; Return value:  Size  Location     Type
 15571 ;;                  1    wreg      void 
 15572 ;; Registers used:
 15573 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 15574 ;; Tracked objects:
 15575 ;;		On entry : 0/0
 15576 ;;		On exit  : 0/0
 15577 ;;		Unchanged: 0/0
 15578 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15579 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15580 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15581 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15582 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15583 ;;Total ram usage:        5 bytes
 15584 ;; Hardware stack levels used:    1
 15585 ;; Hardware stack levels required when called:   10
 15586 ;; This function calls:
 15587 ;;		_Byte_SetBit
 15588 ;;		_Word_GetPair
 15589 ;; This function is called by:
 15590 ;;		_Reset_Low
 15591 ;;		_Reset_High
 15592 ;;		_LED_Set
 15593 ;;		_Port_TogglePin
 15594 ;;		_Motor_Step
 15595 ;;		_MXK_Init
 15596 ;;		_Motor_Init
 15597 ;; This function uses a non-reentrant model
 15598 ;;
 15599                           
 15600                           	psect	text85
 15601  01283A                     __ptext85:
 15602                           	opt stack 0
 15603  01283A                     _Port_SetPin:
 15604                           	opt stack 19
 15605                           
 15606                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 15607                           
 15608                           ;incstack = 0
 15609  01283A  0E08               	movlw	8
 15610  01283C  0100               	movlb	0	; () banked
 15611  01283E  25C4               	addwf	Port_SetPin@pInput& (0+255),w,b
 15612  012840  0100               	movlb	0	; () banked
 15613  012842  6FC1               	movwf	Word_GetPair@pInput& (0+255),b
 15614  012844  0E00               	movlw	0
 15615  012846  0100               	movlb	0	; () banked
 15616  012848  21C5               	addwfc	(Port_SetPin@pInput+1)& (0+255),w,b
 15617  01284A  0100               	movlb	0	; () banked
 15618  01284C  6FC2               	movwf	(Word_GetPair@pInput+1)& (0+255),b
 15619  01284E  C0C6  F0C3         	movff	Port_SetPin@pPin,Word_GetPair@pPair
 15620  012852  ECF4  F0A1         	call	_Word_GetPair	;wreg free
 15621  012856  0100               	movlb	0	; () banked
 15622  012858  6FC8               	movwf	Port_SetPin@Type& (0+255),b
 15623                           
 15624                           ;Port.c: 250: switch (Type)
 15625  01285A  D042               	goto	l427
 15626  01285C                     
 15627                           ; BSR set to: 0
 15628                           ;Port.c: 256: pValue &= 1;
 15629                           
 15630                           ; BSR set to: 0
 15631  01285C  0E01               	movlw	1
 15632  01285E  0100               	movlb	0	; () banked
 15633  012860  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15634                           
 15635                           ; BSR set to: 0
 15636                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15637  012862  0100               	movlb	0	; () banked
 15638  012864  EE20 F002          	lfsr	2,2
 15639  012868  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15640  01286A  26D9               	addwf	fsr2l,f,c
 15641  01286C  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15642  01286E  22DA               	addwfc	fsr2h,f,c
 15643  012870  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15644  012874  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15645  012878  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15646  01287C  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15647  012880  EC77  F09E         	call	_Byte_SetBit	;wreg free
 15648                           
 15649                           ;Port.c: 258: break;
 15650  012884  0012               	return	
 15651  012886                     
 15652                           ;Port.c: 261: pValue &= 1;
 15653  012886  0E01               	movlw	1
 15654  012888  0100               	movlb	0	; () banked
 15655  01288A  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15656                           
 15657                           ;Port.c: 262: pValue ^= 1;
 15658  01288C  0E01               	movlw	1
 15659  01288E  0100               	movlb	0	; () banked
 15660  012890  1BC7               	xorwf	Port_SetPin@pValue& (0+255),f,b
 15661                           
 15662                           ; BSR set to: 0
 15663                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 15664  012892  0100               	movlb	0	; () banked
 15665  012894  EE20 F002          	lfsr	2,2
 15666  012898  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15667  01289A  26D9               	addwf	fsr2l,f,c
 15668  01289C  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15669  01289E  22DA               	addwfc	fsr2h,f,c
 15670  0128A0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15671  0128A4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15672  0128A8  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15673  0128AC  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15674  0128B0  EC77  F09E         	call	_Byte_SetBit	;wreg free
 15675                           
 15676                           ;Port.c: 264: break;
 15677  0128B4  0012               	return	
 15678  0128B6                     
 15679                           ;Port.c: 266: pValue &= 1;
 15680  0128B6  0E01               	movlw	1
 15681  0128B8  0100               	movlb	0	; () banked
 15682  0128BA  17C7               	andwf	Port_SetPin@pValue& (0+255),f,b
 15683                           
 15684                           ; BSR set to: 0
 15685                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 15686  0128BC  0100               	movlb	0	; () banked
 15687  0128BE  EE20 F004          	lfsr	2,4
 15688  0128C2  51C4               	movf	Port_SetPin@pInput& (0+255),w,b
 15689  0128C4  26D9               	addwf	fsr2l,f,c
 15690  0128C6  51C5               	movf	(Port_SetPin@pInput+1)& (0+255),w,b
 15691  0128C8  22DA               	addwfc	fsr2h,f,c
 15692  0128CA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 15693  0128CE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 15694  0128D2  C0C6  F0B7         	movff	Port_SetPin@pPin,Byte_SetBit@pBit
 15695  0128D6  C0C7  F0B8         	movff	Port_SetPin@pValue,Byte_SetBit@pValue
 15696  0128DA  EC77  F09E         	call	_Byte_SetBit	;wreg free
 15697                           
 15698                           ;Port.c: 269: }
 15699                           
 15700                           ;Port.c: 268: break;
 15701  0128DE  0012               	return	
 15702  0128E0                     l427:
 15703  0128E0  0100               	movlb	0	; () banked
 15704  0128E2  51C8               	movf	Port_SetPin@Type& (0+255),w,b
 15705                           
 15706                           ; Switch size 1, requested type "space"
 15707                           ; Number of cases is 4, Range of values is 0 to 3
 15708                           ; switch strategies available:
 15709                           ; Name         Instructions Cycles
 15710                           ; simple_byte           13     7 (average)
 15711                           ;	Chosen strategy is simple_byte
 15712  0128E4  0A00               	xorlw	0	; case 0
 15713  0128E6  B4D8               	btfsc	status,2,c
 15714  0128E8  0012               	return	
 15715  0128EA  0A01               	xorlw	1	; case 1
 15716  0128EC  B4D8               	btfsc	status,2,c
 15717  0128EE  D7B6               	goto	l430
 15718  0128F0  0A03               	xorlw	3	; case 2
 15719  0128F2  B4D8               	btfsc	status,2,c
 15720  0128F4  D7C8               	goto	l432
 15721  0128F6  0A01               	xorlw	1	; case 3
 15722  0128F8  A4D8               	btfss	status,2,c
 15723  0128FA  0012               	return	
 15724  0128FC  D7DC               	goto	l433
 15725  0128FE                     __end_of_Port_SetPin:
 15726                           	opt stack 0
 15727                           tosu	equ	0xFFF
 15728                           tosh	equ	0xFFE
 15729                           tosl	equ	0xFFD
 15730                           pclath	equ	0xFFA
 15731                           tblptru	equ	0xFF8
 15732                           tblptrh	equ	0xFF7
 15733                           tblptrl	equ	0xFF6
 15734                           tablat	equ	0xFF5
 15735                           prodh	equ	0xFF4
 15736                           prodl	equ	0xFF3
 15737                           intcon	equ	0xFF2
 15738                           postinc0	equ	0xFEE
 15739                           wreg	equ	0xFE8
 15740                           indf1	equ	0xFE7
 15741                           postdec1	equ	0xFE5
 15742                           fsr1h	equ	0xFE2
 15743                           fsr1l	equ	0xFE1
 15744                           indf2	equ	0xFDF
 15745                           postinc2	equ	0xFDE
 15746                           postdec2	equ	0xFDD
 15747                           plusw2	equ	0xFDB
 15748                           fsr2h	equ	0xFDA
 15749                           fsr2l	equ	0xFD9
 15750                           status	equ	0xFD8
 15751                           
 15752 ;; *************** function _Port_GetPin *****************
 15753 ;; Defined at:
 15754 ;;		line 271 in file "Library/Port.c"
 15755 ;; Parameters:    Size  Location     Type
 15756 ;;  pInput          2    0[BANK0 ] const PTR struct Port
 15757 ;;		 -> PortB(10), PortE(10), PortC(10), 
 15758 ;;  pPin            1    2[BANK0 ] enum E6750
 15759 ;; Auto vars:     Size  Location     Type
 15760 ;;  Output          1    5[BANK0 ] unsigned char 
 15761 ;; Return value:  Size  Location     Type
 15762 ;;                  1    wreg      unsigned char 
 15763 ;; Registers used:
 15764 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 15765 ;; Tracked objects:
 15766 ;;		On entry : 0/0
 15767 ;;		On exit  : 0/0
 15768 ;;		Unchanged: 0/0
 15769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15770 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15771 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15772 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15773 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15774 ;;Total ram usage:        6 bytes
 15775 ;; Hardware stack levels used:    1
 15776 ;; Hardware stack levels required when called:    7
 15777 ;; This function calls:
 15778 ;;		Nothing
 15779 ;; This function is called by:
 15780 ;;		_Port_TogglePin
 15781 ;;		_HMI_LeftSwitch
 15782 ;;		_HMI_RightSwitch
 15783 ;;		_HMI_UpSwitch
 15784 ;;		_HMI_DownSwitch
 15785 ;;		_MXK_TestButton
 15786 ;; This function uses a non-reentrant model
 15787 ;;
 15788                           
 15789                           	psect	text86
 15790  0141DA                     __ptext86:
 15791                           	opt stack 0
 15792  0141DA                     _Port_GetPin:
 15793                           	opt stack 22
 15794                           
 15795                           ;Port.c: 273: UINT8 Output = pInput->mInput->mBits;
 15796                           
 15797                           ;incstack = 0
 15798  0141DA  0100               	movlb	0	; () banked
 15799  0141DC  EE20 F006          	lfsr	2,6
 15800  0141E0  51B5               	movf	Port_GetPin@pInput& (0+255),w,b
 15801  0141E2  26D9               	addwf	fsr2l,f,c
 15802  0141E4  51B6               	movf	(Port_GetPin@pInput+1)& (0+255),w,b
 15803  0141E6  22DA               	addwfc	fsr2h,f,c
 15804  0141E8  CFDE F0B8          	movff	postinc2,??_Port_GetPin
 15805  0141EC  CFDD F0B9          	movff	postdec2,??_Port_GetPin+1
 15806  0141F0  C0B8  FFD9         	movff	??_Port_GetPin,fsr2l
 15807  0141F4  C0B9  FFDA         	movff	??_Port_GetPin+1,fsr2h
 15808  0141F8  50DF               	movf	indf2,w,c
 15809  0141FA  0100               	movlb	0	; () banked
 15810  0141FC  6FBA               	movwf	Port_GetPin@Output& (0+255),b
 15811                           
 15812                           ; BSR set to: 0
 15813                           ;Port.c: 274: Output >>= (UINT8)pPin;
 15814  0141FE  0100               	movlb	0	; () banked
 15815  014200  29B7               	incf	Port_GetPin@pPin& (0+255),w,b
 15816  014202  0100               	movlb	0	; () banked
 15817  014204  6FB8               	movwf	??_Port_GetPin& (0+255),b
 15818  014206  D003               	goto	u6610
 15819  014208                     u6615:
 15820  014208  0100               	movlb	0	; () banked
 15821  01420A  90D8               	bcf	status,0,c
 15822  01420C  33BA               	rrcf	Port_GetPin@Output& (0+255),f,b
 15823  01420E                     u6610:
 15824  01420E  0100               	movlb	0	; () banked
 15825  014210  2FB8               	decfsz	??_Port_GetPin& (0+255),f,b
 15826  014212  D7FA               	goto	u6615
 15827                           
 15828                           ;Port.c: 275: Output &= 1;
 15829  014214  0E01               	movlw	1
 15830  014216  0100               	movlb	0	; () banked
 15831  014218  17BA               	andwf	Port_GetPin@Output& (0+255),f,b
 15832                           
 15833                           ; BSR set to: 0
 15834                           ;Port.c: 276: return Output;
 15835  01421A  0100               	movlb	0	; () banked
 15836  01421C  51BA               	movf	Port_GetPin@Output& (0+255),w,b
 15837  01421E  0012               	return	
 15838  014220                     __end_of_Port_GetPin:
 15839                           	opt stack 0
 15840                           tosu	equ	0xFFF
 15841                           tosh	equ	0xFFE
 15842                           tosl	equ	0xFFD
 15843                           pclath	equ	0xFFA
 15844                           tblptru	equ	0xFF8
 15845                           tblptrh	equ	0xFF7
 15846                           tblptrl	equ	0xFF6
 15847                           tablat	equ	0xFF5
 15848                           prodh	equ	0xFF4
 15849                           prodl	equ	0xFF3
 15850                           intcon	equ	0xFF2
 15851                           postinc0	equ	0xFEE
 15852                           wreg	equ	0xFE8
 15853                           indf1	equ	0xFE7
 15854                           postdec1	equ	0xFE5
 15855                           fsr1h	equ	0xFE2
 15856                           fsr1l	equ	0xFE1
 15857                           indf2	equ	0xFDF
 15858                           postinc2	equ	0xFDE
 15859                           postdec2	equ	0xFDD
 15860                           plusw2	equ	0xFDB
 15861                           fsr2h	equ	0xFDA
 15862                           fsr2l	equ	0xFD9
 15863                           status	equ	0xFD8
 15864                           
 15865 ;; *************** function _HMI_SetBar *****************
 15866 ;; Defined at:
 15867 ;;		line 205 in file "HMI.c"
 15868 ;; Parameters:    Size  Location     Type
 15869 ;;  pValue          1    wreg     unsigned char 
 15870 ;; Auto vars:     Size  Location     Type
 15871 ;;  pValue          1    0[BANK0 ] unsigned char 
 15872 ;; Return value:  Size  Location     Type
 15873 ;;                  1    wreg      void 
 15874 ;; Registers used:
 15875 ;;		wreg
 15876 ;; Tracked objects:
 15877 ;;		On entry : 0/0
 15878 ;;		On exit  : 0/0
 15879 ;;		Unchanged: 0/0
 15880 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15881 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15882 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15883 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15884 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15885 ;;Total ram usage:        1 bytes
 15886 ;; Hardware stack levels used:    1
 15887 ;; Hardware stack levels required when called:    7
 15888 ;; This function calls:
 15889 ;;		Nothing
 15890 ;; This function is called by:
 15891 ;;		_Event_DIPSwitch
 15892 ;;		_Event_HMI_DIPSwitch
 15893 ;;		_Event_HMI_LeftButton
 15894 ;;		_Event_HMI_RightButton
 15895 ;; This function uses a non-reentrant model
 15896 ;;
 15897                           
 15898                           	psect	text87
 15899  0149C2                     __ptext87:
 15900                           	opt stack 0
 15901  0149C2                     _HMI_SetBar:
 15902                           	opt stack 20
 15903                           
 15904                           ; BSR set to: 0
 15905                           ;incstack = 0
 15906                           ;HMI_SetBar@pValue stored from wreg
 15907  0149C2  0100               	movlb	0	; () banked
 15908  0149C4  6FB5               	movwf	HMI_SetBar@pValue& (0+255),b
 15909                           
 15910                           ;HMI.c: 207: HMIBoard.pBarGraph = pValue;
 15911  0149C6  C0B5  F335         	movff	HMI_SetBar@pValue,_HMIBoard+7
 15912  0149CA  0012               	return		;funcret
 15913  0149CC                     __end_of_HMI_SetBar:
 15914                           	opt stack 0
 15915                           tosu	equ	0xFFF
 15916                           tosh	equ	0xFFE
 15917                           tosl	equ	0xFFD
 15918                           pclath	equ	0xFFA
 15919                           tblptru	equ	0xFF8
 15920                           tblptrh	equ	0xFF7
 15921                           tblptrl	equ	0xFF6
 15922                           tablat	equ	0xFF5
 15923                           prodh	equ	0xFF4
 15924                           prodl	equ	0xFF3
 15925                           intcon	equ	0xFF2
 15926                           postinc0	equ	0xFEE
 15927                           wreg	equ	0xFE8
 15928                           indf1	equ	0xFE7
 15929                           postdec1	equ	0xFE5
 15930                           fsr1h	equ	0xFE2
 15931                           fsr1l	equ	0xFE1
 15932                           indf2	equ	0xFDF
 15933                           postinc2	equ	0xFDE
 15934                           postdec2	equ	0xFDD
 15935                           plusw2	equ	0xFDB
 15936                           fsr2h	equ	0xFDA
 15937                           fsr2l	equ	0xFD9
 15938                           status	equ	0xFD8
 15939                           
 15940 ;; *************** function _HMI_GetBar *****************
 15941 ;; Defined at:
 15942 ;;		line 209 in file "HMI.c"
 15943 ;; Parameters:    Size  Location     Type
 15944 ;;		None
 15945 ;; Auto vars:     Size  Location     Type
 15946 ;;		None
 15947 ;; Return value:  Size  Location     Type
 15948 ;;                  1    wreg      unsigned char 
 15949 ;; Registers used:
 15950 ;;		wreg, status,2
 15951 ;; Tracked objects:
 15952 ;;		On entry : 0/0
 15953 ;;		On exit  : 0/0
 15954 ;;		Unchanged: 0/0
 15955 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 15956 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15957 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15958 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15959 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 15960 ;;Total ram usage:        0 bytes
 15961 ;; Hardware stack levels used:    1
 15962 ;; Hardware stack levels required when called:    7
 15963 ;; This function calls:
 15964 ;;		Nothing
 15965 ;; This function is called by:
 15966 ;;		_Event_DIPSwitch
 15967 ;;		_Event_HMI_DIPSwitch
 15968 ;; This function uses a non-reentrant model
 15969 ;;
 15970                           
 15971                           	psect	text88
 15972  0149F2                     __ptext88:
 15973                           	opt stack 0
 15974  0149F2                     _HMI_GetBar:
 15975                           	opt stack 20
 15976                           
 15977                           ;HMI.c: 211: return HMIBoard.pBarGraph;
 15978                           
 15979                           ;incstack = 0
 15980  0149F2  0103               	movlb	3	; () banked
 15981  0149F4  5135               	movf	(_HMIBoard+7)& (0+255),w,b
 15982  0149F6  0012               	return	
 15983  0149F8                     __end_of_HMI_GetBar:
 15984                           	opt stack 0
 15985                           tosu	equ	0xFFF
 15986                           tosh	equ	0xFFE
 15987                           tosl	equ	0xFFD
 15988                           pclath	equ	0xFFA
 15989                           tblptru	equ	0xFF8
 15990                           tblptrh	equ	0xFF7
 15991                           tblptrl	equ	0xFF6
 15992                           tablat	equ	0xFF5
 15993                           prodh	equ	0xFF4
 15994                           prodl	equ	0xFF3
 15995                           intcon	equ	0xFF2
 15996                           postinc0	equ	0xFEE
 15997                           wreg	equ	0xFE8
 15998                           indf1	equ	0xFE7
 15999                           postdec1	equ	0xFE5
 16000                           fsr1h	equ	0xFE2
 16001                           fsr1l	equ	0xFE1
 16002                           indf2	equ	0xFDF
 16003                           postinc2	equ	0xFDE
 16004                           postdec2	equ	0xFDD
 16005                           plusw2	equ	0xFDB
 16006                           fsr2h	equ	0xFDA
 16007                           fsr2l	equ	0xFD9
 16008                           status	equ	0xFD8
 16009                           
 16010 ;; *************** function _HMI_Init *****************
 16011 ;; Defined at:
 16012 ;;		line 104 in file "HMI.c"
 16013 ;; Parameters:    Size  Location     Type
 16014 ;;		None
 16015 ;; Auto vars:     Size  Location     Type
 16016 ;;  in              2   59[BANK0 ] unsigned short 
 16017 ;; Return value:  Size  Location     Type
 16018 ;;                  1    wreg      void 
 16019 ;; Registers used:
 16020 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16021 ;; Tracked objects:
 16022 ;;		On entry : 0/0
 16023 ;;		On exit  : 0/0
 16024 ;;		Unchanged: 0/0
 16025 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16026 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16027 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16028 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16029 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16030 ;;Total ram usage:        2 bytes
 16031 ;; Hardware stack levels used:    1
 16032 ;; Hardware stack levels required when called:   16
 16033 ;; This function calls:
 16034 ;;		_Button_Init
 16035 ;;		_SPI_Init
 16036 ;;		_SPI_MinSpeed
 16037 ;; This function is called by:
 16038 ;;		_main
 16039 ;; This function uses a non-reentrant model
 16040 ;;
 16041                           
 16042                           	psect	text89
 16043  0110EC                     __ptext89:
 16044                           	opt stack 0
 16045  0110EC                     _HMI_Init:
 16046                           	opt stack 14
 16047                           
 16048                           ;HMI.c: 107: Button_Init(&(HMIBoard.mDIP), 2,
 16049                           ;HMI.c: 108: HMI_InitButtons, HMI_DIPSwitch, Event_NULL);
 16050                           
 16051                           ; BSR set to: 3
 16052                           ;incstack = 0
 16053  0110EC  0E5E               	movlw	low (_HMIBoard+48)
 16054  0110EE  0101               	movlb	1	; () banked
 16055  0110F0  6F00               	movwf	Button_Init@pInput& (0+255),b
 16056  0110F2  0E03               	movlw	high (_HMIBoard+48)
 16057  0110F4  0101               	movlb	1	; () banked
 16058  0110F6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16059  0110F8  0E00               	movlw	0
 16060  0110FA  0101               	movlb	1	; () banked
 16061  0110FC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16062  0110FE  0E02               	movlw	2
 16063  011100  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16064  011102  0EF8               	movlw	low _HMI_InitButtons
 16065  011104  0101               	movlb	1	; () banked
 16066  011106  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16067  011108  0E49               	movlw	high _HMI_InitButtons
 16068  01110A  0101               	movlb	1	; () banked
 16069  01110C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16070  01110E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16071  011110  0101               	movlb	1	; () banked
 16072  011112  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16073  011114  0E72               	movlw	low _HMI_DIPSwitch
 16074  011116  0101               	movlb	1	; () banked
 16075  011118  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16076  01111A  0E48               	movlw	high _HMI_DIPSwitch
 16077  01111C  0101               	movlb	1	; () banked
 16078  01111E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16079  011120  0E01               	movlw	low (_HMI_DIPSwitch shr (0+16))
 16080  011122  0101               	movlb	1	; () banked
 16081  011124  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16082  011126  0E04               	movlw	low _Event_NULL
 16083  011128  0101               	movlb	1	; () banked
 16084  01112A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16085  01112C  0E14               	movlw	high _Event_NULL
 16086  01112E  0101               	movlb	1	; () banked
 16087  011130  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16088  011132  0E00               	movlw	low (_Event_NULL shr (0+16))
 16089  011134  0101               	movlb	1	; () banked
 16090  011136  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16091  011138  EC4B  F093         	call	_Button_Init	;wreg free
 16092                           
 16093                           ;HMI.c: 110: Button_Init(&(HMIBoard.mLeft), 2,
 16094                           ;HMI.c: 111: HMI_InitButtons, HMI_LeftSwitch, Event_NULL);
 16095  01113C  0E40               	movlw	low (_HMIBoard+18)
 16096  01113E  0101               	movlb	1	; () banked
 16097  011140  6F00               	movwf	Button_Init@pInput& (0+255),b
 16098  011142  0E03               	movlw	high (_HMIBoard+18)
 16099  011144  0101               	movlb	1	; () banked
 16100  011146  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16101  011148  0E00               	movlw	0
 16102  01114A  0101               	movlb	1	; () banked
 16103  01114C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16104  01114E  0E02               	movlw	2
 16105  011150  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16106  011152  0EF8               	movlw	low _HMI_InitButtons
 16107  011154  0101               	movlb	1	; () banked
 16108  011156  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16109  011158  0E49               	movlw	high _HMI_InitButtons
 16110  01115A  0101               	movlb	1	; () banked
 16111  01115C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16112  01115E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16113  011160  0101               	movlb	1	; () banked
 16114  011162  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16115  011164  0ED2               	movlw	low _HMI_LeftSwitch
 16116  011166  0101               	movlb	1	; () banked
 16117  011168  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16118  01116A  0E48               	movlw	high _HMI_LeftSwitch
 16119  01116C  0101               	movlb	1	; () banked
 16120  01116E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16121  011170  0E01               	movlw	low (_HMI_LeftSwitch shr (0+16))
 16122  011172  0101               	movlb	1	; () banked
 16123  011174  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16124  011176  0E04               	movlw	low _Event_NULL
 16125  011178  0101               	movlb	1	; () banked
 16126  01117A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16127  01117C  0E14               	movlw	high _Event_NULL
 16128  01117E  0101               	movlb	1	; () banked
 16129  011180  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16130  011182  0E00               	movlw	low (_Event_NULL shr (0+16))
 16131  011184  0101               	movlb	1	; () banked
 16132  011186  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16133  011188  EC4B  F093         	call	_Button_Init	;wreg free
 16134                           
 16135                           ;HMI.c: 113: Button_Init(&(HMIBoard.mRight), 2,
 16136                           ;HMI.c: 114: HMI_InitButtons, HMI_RightSwitch, Event_NULL);
 16137  01118C  0E36               	movlw	low (_HMIBoard+8)
 16138  01118E  0101               	movlb	1	; () banked
 16139  011190  6F00               	movwf	Button_Init@pInput& (0+255),b
 16140  011192  0E03               	movlw	high (_HMIBoard+8)
 16141  011194  0101               	movlb	1	; () banked
 16142  011196  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16143  011198  0E00               	movlw	0
 16144  01119A  0101               	movlb	1	; () banked
 16145  01119C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16146  01119E  0E02               	movlw	2
 16147  0111A0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16148  0111A2  0EF8               	movlw	low _HMI_InitButtons
 16149  0111A4  0101               	movlb	1	; () banked
 16150  0111A6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16151  0111A8  0E49               	movlw	high _HMI_InitButtons
 16152  0111AA  0101               	movlb	1	; () banked
 16153  0111AC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16154  0111AE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16155  0111B0  0101               	movlb	1	; () banked
 16156  0111B2  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16157  0111B4  0EBA               	movlw	low _HMI_RightSwitch
 16158  0111B6  0101               	movlb	1	; () banked
 16159  0111B8  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16160  0111BA  0E48               	movlw	high _HMI_RightSwitch
 16161  0111BC  0101               	movlb	1	; () banked
 16162  0111BE  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16163  0111C0  0E01               	movlw	low (_HMI_RightSwitch shr (0+16))
 16164  0111C2  0101               	movlb	1	; () banked
 16165  0111C4  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16166  0111C6  0E04               	movlw	low _Event_NULL
 16167  0111C8  0101               	movlb	1	; () banked
 16168  0111CA  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16169  0111CC  0E14               	movlw	high _Event_NULL
 16170  0111CE  0101               	movlb	1	; () banked
 16171  0111D0  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16172  0111D2  0E00               	movlw	low (_Event_NULL shr (0+16))
 16173  0111D4  0101               	movlb	1	; () banked
 16174  0111D6  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16175  0111D8  EC4B  F093         	call	_Button_Init	;wreg free
 16176                           
 16177                           ;HMI.c: 116: Button_Init(&(HMIBoard.mUp), 2,
 16178                           ;HMI.c: 117: HMI_InitButtons, HMI_UpSwitch, Event_NULL);
 16179  0111DC  0E4A               	movlw	low (_HMIBoard+28)
 16180  0111DE  0101               	movlb	1	; () banked
 16181  0111E0  6F00               	movwf	Button_Init@pInput& (0+255),b
 16182  0111E2  0E03               	movlw	high (_HMIBoard+28)
 16183  0111E4  0101               	movlb	1	; () banked
 16184  0111E6  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16185  0111E8  0E00               	movlw	0
 16186  0111EA  0101               	movlb	1	; () banked
 16187  0111EC  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16188  0111EE  0E02               	movlw	2
 16189  0111F0  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16190  0111F2  0EF8               	movlw	low _HMI_InitButtons
 16191  0111F4  0101               	movlb	1	; () banked
 16192  0111F6  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16193  0111F8  0E49               	movlw	high _HMI_InitButtons
 16194  0111FA  0101               	movlb	1	; () banked
 16195  0111FC  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16196  0111FE  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16197  011200  0101               	movlb	1	; () banked
 16198  011202  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16199  011204  0EA2               	movlw	low _HMI_UpSwitch
 16200  011206  0101               	movlb	1	; () banked
 16201  011208  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16202  01120A  0E48               	movlw	high _HMI_UpSwitch
 16203  01120C  0101               	movlb	1	; () banked
 16204  01120E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16205  011210  0E01               	movlw	low (_HMI_UpSwitch shr (0+16))
 16206  011212  0101               	movlb	1	; () banked
 16207  011214  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16208  011216  0E04               	movlw	low _Event_NULL
 16209  011218  0101               	movlb	1	; () banked
 16210  01121A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16211  01121C  0E14               	movlw	high _Event_NULL
 16212  01121E  0101               	movlb	1	; () banked
 16213  011220  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16214  011222  0E00               	movlw	low (_Event_NULL shr (0+16))
 16215  011224  0101               	movlb	1	; () banked
 16216  011226  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16217  011228  EC4B  F093         	call	_Button_Init	;wreg free
 16218                           
 16219                           ;HMI.c: 119: Button_Init(&(HMIBoard.mDown), 2,
 16220                           ;HMI.c: 120: HMI_InitButtons, HMI_DownSwitch, Event_NULL);
 16221  01122C  0E54               	movlw	low (_HMIBoard+38)
 16222  01122E  0101               	movlb	1	; () banked
 16223  011230  6F00               	movwf	Button_Init@pInput& (0+255),b
 16224  011232  0E03               	movlw	high (_HMIBoard+38)
 16225  011234  0101               	movlb	1	; () banked
 16226  011236  6F01               	movwf	(Button_Init@pInput+1)& (0+255),b
 16227  011238  0E00               	movlw	0
 16228  01123A  0101               	movlb	1	; () banked
 16229  01123C  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 16230  01123E  0E02               	movlw	2
 16231  011240  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 16232  011242  0EF8               	movlw	low _HMI_InitButtons
 16233  011244  0101               	movlb	1	; () banked
 16234  011246  6F04               	movwf	Button_Init@pInitIO& (0+255),b
 16235  011248  0E49               	movlw	high _HMI_InitButtons
 16236  01124A  0101               	movlb	1	; () banked
 16237  01124C  6F05               	movwf	(Button_Init@pInitIO+1)& (0+255),b
 16238  01124E  0E01               	movlw	low (_HMI_InitButtons shr (0+16))
 16239  011250  0101               	movlb	1	; () banked
 16240  011252  6F06               	movwf	(Button_Init@pInitIO+2)& (0+255),b
 16241  011254  0E8A               	movlw	low _HMI_DownSwitch
 16242  011256  0101               	movlb	1	; () banked
 16243  011258  6F07               	movwf	Button_Init@pGetState& (0+255),b
 16244  01125A  0E48               	movlw	high _HMI_DownSwitch
 16245  01125C  0101               	movlb	1	; () banked
 16246  01125E  6F08               	movwf	(Button_Init@pGetState+1)& (0+255),b
 16247  011260  0E01               	movlw	low (_HMI_DownSwitch shr (0+16))
 16248  011262  0101               	movlb	1	; () banked
 16249  011264  6F09               	movwf	(Button_Init@pGetState+2)& (0+255),b
 16250  011266  0E04               	movlw	low _Event_NULL
 16251  011268  0101               	movlb	1	; () banked
 16252  01126A  6F0A               	movwf	Button_Init@pFunction& (0+255),b
 16253  01126C  0E14               	movlw	high _Event_NULL
 16254  01126E  0101               	movlb	1	; () banked
 16255  011270  6F0B               	movwf	(Button_Init@pFunction+1)& (0+255),b
 16256  011272  0E00               	movlw	low (_Event_NULL shr (0+16))
 16257  011274  0101               	movlb	1	; () banked
 16258  011276  6F0C               	movwf	(Button_Init@pFunction+2)& (0+255),b
 16259  011278  EC4B  F093         	call	_Button_Init	;wreg free
 16260                           
 16261                           ;HMI.c: 124: SPI_Init((100*1000L), eSPI1, eSPI_Mode2);
 16262  01127C  0EA0               	movlw	160
 16263  01127E  0100               	movlb	0	; () banked
 16264  011280  6FE2               	movwf	SPI_Init@pClock& (0+255),b
 16265  011282  0E86               	movlw	134
 16266  011284  6FE3               	movwf	(SPI_Init@pClock+1)& (0+255),b
 16267  011286  0E01               	movlw	1
 16268  011288  6FE4               	movwf	(SPI_Init@pClock+2)& (0+255),b
 16269  01128A  0E00               	movlw	0
 16270  01128C  6FE5               	movwf	(SPI_Init@pClock+3)& (0+255),b
 16271  01128E  0E00               	movlw	0
 16272  011290  0100               	movlb	0	; () banked
 16273  011292  6FE6               	movwf	SPI_Init@pChannel& (0+255),b
 16274  011294  0E02               	movlw	2
 16275  011296  0100               	movlb	0	; () banked
 16276  011298  6FE7               	movwf	SPI_Init@pMode& (0+255),b
 16277  01129A  EC00  F080         	call	_SPI_Init	;wreg free
 16278                           
 16279                           ;HMI.c: 125: SPI_MinSpeed(&SPI1);
 16280  01129E  0E68               	movlw	low _SPI1
 16281  0112A0  0100               	movlb	0	; () banked
 16282  0112A2  6FC4               	movwf	SPI_MinSpeed@pInput& (0+255),b
 16283  0112A4  0E03               	movlw	high _SPI1
 16284  0112A6  0100               	movlb	0	; () banked
 16285  0112A8  6FC5               	movwf	(SPI_MinSpeed@pInput+1)& (0+255),b
 16286  0112AA  EC28  F09C         	call	_SPI_MinSpeed	;wreg free
 16287                           
 16288                           ;HMI.c: 127: for (UINT16 in = 0; in<sizeof(HMIBoard.Bytes); in++)
 16289  0112AE  0E00               	movlw	0
 16290  0112B0  0100               	movlb	0	; () banked
 16291  0112B2  6FF1               	movwf	(HMI_Init@in+1)& (0+255),b
 16292  0112B4  0E00               	movlw	0
 16293  0112B6  6FF0               	movwf	HMI_Init@in& (0+255),b
 16294  0112B8                     l12333:
 16295                           
 16296                           ; BSR set to: 0
 16297  0112B8  0100               	movlb	0	; () banked
 16298  0112BA  51F1               	movf	(HMI_Init@in+1)& (0+255),w,b
 16299  0112BC  E113               	bnz	l1153
 16300  0112BE  0E08               	movlw	8
 16301  0112C0  0100               	movlb	0	; () banked
 16302  0112C2  5DF0               	subwf	HMI_Init@in& (0+255),w,b
 16303  0112C4  B0D8               	btfsc	status,0,c
 16304  0112C6  0012               	return	
 16305                           
 16306                           ; BSR set to: 0
 16307                           ;HMI.c: 128: HMIBoard.Bytes[in] = 0;
 16308                           
 16309                           ; BSR set to: 0
 16310                           
 16311                           ; BSR set to: 0
 16312  0112C8  0E2E               	movlw	low _HMIBoard
 16313  0112CA  0100               	movlb	0	; () banked
 16314  0112CC  25F0               	addwf	HMI_Init@in& (0+255),w,b
 16315  0112CE  6ED9               	movwf	fsr2l,c
 16316  0112D0  0E03               	movlw	high _HMIBoard
 16317  0112D2  0100               	movlb	0	; () banked
 16318  0112D4  21F1               	addwfc	(HMI_Init@in+1)& (0+255),w,b
 16319  0112D6  6EDA               	movwf	fsr2h,c
 16320  0112D8  0E00               	movlw	0
 16321  0112DA  6EDF               	movwf	indf2,c
 16322                           
 16323                           ; BSR set to: 0
 16324  0112DC  0100               	movlb	0	; () banked
 16325  0112DE  4BF0               	infsnz	HMI_Init@in& (0+255),f,b
 16326  0112E0  2BF1               	incf	(HMI_Init@in+1)& (0+255),f,b
 16327  0112E2  D7EA               	goto	l12333
 16328  0112E4                     l1153:
 16329                           
 16330                           ; BSR set to: 0
 16331  0112E4  0012               	return		;funcret
 16332  0112E6                     __end_of_HMI_Init:
 16333                           	opt stack 0
 16334                           tosu	equ	0xFFF
 16335                           tosh	equ	0xFFE
 16336                           tosl	equ	0xFFD
 16337                           pclath	equ	0xFFA
 16338                           tblptru	equ	0xFF8
 16339                           tblptrh	equ	0xFF7
 16340                           tblptrl	equ	0xFF6
 16341                           tablat	equ	0xFF5
 16342                           prodh	equ	0xFF4
 16343                           prodl	equ	0xFF3
 16344                           intcon	equ	0xFF2
 16345                           postinc0	equ	0xFEE
 16346                           wreg	equ	0xFE8
 16347                           indf1	equ	0xFE7
 16348                           postdec1	equ	0xFE5
 16349                           fsr1h	equ	0xFE2
 16350                           fsr1l	equ	0xFE1
 16351                           indf2	equ	0xFDF
 16352                           postinc2	equ	0xFDE
 16353                           postdec2	equ	0xFDD
 16354                           plusw2	equ	0xFDB
 16355                           fsr2h	equ	0xFDA
 16356                           fsr2l	equ	0xFD9
 16357                           status	equ	0xFD8
 16358                           
 16359 ;; *************** function _SPI_MinSpeed *****************
 16360 ;; Defined at:
 16361 ;;		line 190 in file "Library/SPI.c"
 16362 ;; Parameters:    Size  Location     Type
 16363 ;;  pInput          2   15[BANK0 ] PTR struct SPI
 16364 ;;		 -> SPI1(11), 
 16365 ;; Auto vars:     Size  Location     Type
 16366 ;;		None
 16367 ;; Return value:  Size  Location     Type
 16368 ;;                  1    wreg      void 
 16369 ;; Registers used:
 16370 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16371 ;; Tracked objects:
 16372 ;;		On entry : 0/0
 16373 ;;		On exit  : 0/0
 16374 ;;		Unchanged: 0/0
 16375 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16376 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16377 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16378 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16379 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16380 ;;Total ram usage:        2 bytes
 16381 ;; Hardware stack levels used:    1
 16382 ;; Hardware stack levels required when called:    9
 16383 ;; This function calls:
 16384 ;;		_Byte_SetBit
 16385 ;;		_Byte_SetQuad
 16386 ;; This function is called by:
 16387 ;;		_HMI_Init
 16388 ;; This function uses a non-reentrant model
 16389 ;;
 16390                           
 16391                           	psect	text90
 16392  013850                     __ptext90:
 16393                           	opt stack 0
 16394  013850                     _SPI_MinSpeed:
 16395                           	opt stack 20
 16396                           
 16397                           ;SPI.c: 194: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16398                           
 16399                           ; BSR set to: 0
 16400                           ;incstack = 0
 16401  013850  0100               	movlb	0	; () banked
 16402  013852  EE20 F006          	lfsr	2,6
 16403  013856  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16404  013858  26D9               	addwf	fsr2l,f,c
 16405  01385A  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16406  01385C  22DA               	addwfc	fsr2h,f,c
 16407  01385E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16408  013862  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16409  013866  0E05               	movlw	5
 16410  013868  0100               	movlb	0	; () banked
 16411  01386A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16412  01386C  0E00               	movlw	0
 16413  01386E  0100               	movlb	0	; () banked
 16414  013870  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16415  013872  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16416                           
 16417                           ;SPI.c: 197: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)2);
 16418  013876  0100               	movlb	0	; () banked
 16419  013878  EE20 F006          	lfsr	2,6
 16420  01387C  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16421  01387E  26D9               	addwf	fsr2l,f,c
 16422  013880  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16423  013882  22DA               	addwfc	fsr2h,f,c
 16424  013884  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 16425  013888  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 16426  01388C  0E00               	movlw	0
 16427  01388E  0100               	movlb	0	; () banked
 16428  013890  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 16429  013892  0E02               	movlw	2
 16430  013894  0100               	movlb	0	; () banked
 16431  013896  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 16432  013898  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 16433                           
 16434                           ;SPI.c: 198: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 16435  01389C  0100               	movlb	0	; () banked
 16436  01389E  EE20 F006          	lfsr	2,6
 16437  0138A2  51C4               	movf	SPI_MinSpeed@pInput& (0+255),w,b
 16438  0138A4  26D9               	addwf	fsr2l,f,c
 16439  0138A6  51C5               	movf	(SPI_MinSpeed@pInput+1)& (0+255),w,b
 16440  0138A8  22DA               	addwfc	fsr2h,f,c
 16441  0138AA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16442  0138AE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16443  0138B2  0E05               	movlw	5
 16444  0138B4  0100               	movlb	0	; () banked
 16445  0138B6  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16446  0138B8  0E01               	movlw	1
 16447  0138BA  0100               	movlb	0	; () banked
 16448  0138BC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16449  0138BE  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16450  0138C2  0012               	return		;funcret
 16451  0138C4                     __end_of_SPI_MinSpeed:
 16452                           	opt stack 0
 16453                           tosu	equ	0xFFF
 16454                           tosh	equ	0xFFE
 16455                           tosl	equ	0xFFD
 16456                           pclath	equ	0xFFA
 16457                           tblptru	equ	0xFF8
 16458                           tblptrh	equ	0xFF7
 16459                           tblptrl	equ	0xFF6
 16460                           tablat	equ	0xFF5
 16461                           prodh	equ	0xFF4
 16462                           prodl	equ	0xFF3
 16463                           intcon	equ	0xFF2
 16464                           postinc0	equ	0xFEE
 16465                           wreg	equ	0xFE8
 16466                           indf1	equ	0xFE7
 16467                           postdec1	equ	0xFE5
 16468                           fsr1h	equ	0xFE2
 16469                           fsr1l	equ	0xFE1
 16470                           indf2	equ	0xFDF
 16471                           postinc2	equ	0xFDE
 16472                           postdec2	equ	0xFDD
 16473                           plusw2	equ	0xFDB
 16474                           fsr2h	equ	0xFDA
 16475                           fsr2l	equ	0xFD9
 16476                           status	equ	0xFD8
 16477                           
 16478 ;; *************** function _SPI_Init *****************
 16479 ;; Defined at:
 16480 ;;		line 12 in file "Library/SPI.c"
 16481 ;; Parameters:    Size  Location     Type
 16482 ;;  pClock          4   45[BANK0 ] unsigned long 
 16483 ;;  pChannel        1   49[BANK0 ] enum E6744
 16484 ;;  pMode           1   50[BANK0 ] enum E6748
 16485 ;; Auto vars:     Size  Location     Type
 16486 ;;  pInput          2   51[BANK0 ] PTR struct SPI
 16487 ;;		 -> SPI1(11), SPI2(11), 
 16488 ;; Return value:  Size  Location     Type
 16489 ;;                  1    wreg      void 
 16490 ;; Registers used:
 16491 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 16492 ;; Tracked objects:
 16493 ;;		On entry : 0/0
 16494 ;;		On exit  : 0/0
 16495 ;;		Unchanged: 0/0
 16496 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 16497 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16498 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16499 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16500 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 16501 ;;Total ram usage:        8 bytes
 16502 ;; Hardware stack levels used:    1
 16503 ;; Hardware stack levels required when called:   12
 16504 ;; This function calls:
 16505 ;;		_Byte_SetBit
 16506 ;;		_Byte_SetQuad
 16507 ;;		_Port_SetPinType
 16508 ;;		_SPI_DCS
 16509 ;;		_SPI_DisableISR
 16510 ;;		_Timer2_Init
 16511 ;; This function is called by:
 16512 ;;		_Configure_GPIOs
 16513 ;;		_HMI_Init
 16514 ;; This function uses a non-reentrant model
 16515 ;;
 16516                           
 16517                           	psect	text91
 16518  010000                     __ptext91:
 16519                           	opt stack 0
 16520  010000                     _SPI_Init:
 16521                           	opt stack 16
 16522                           
 16523                           ;SPI.c: 14: SPIPtr pInput;
 16524                           ;SPI.c: 16: switch (pChannel)
 16525                           
 16526                           ;incstack = 0
 16527  010000  D00C               	goto	l597
 16528  010002                     
 16529                           ;SPI.c: 19: pInput = &SPI1;
 16530  010002  0E68               	movlw	low _SPI1
 16531  010004  0100               	movlb	0	; () banked
 16532  010006  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 16533  010008  0E03               	movlw	high _SPI1
 16534  01000A  D004               	goto	L10
 16535  01000C                     
 16536                           ; BSR set to: 0
 16537                           ;SPI.c: 22: pInput = &SPI2;
 16538                           
 16539                           ; BSR set to: 0
 16540  01000C  0E73               	movlw	low _SPI2
 16541  01000E  0100               	movlb	0	; () banked
 16542  010010  6FE8               	movwf	SPI_Init@pInput& (0+255),b
 16543  010012  0E03               	movlw	high _SPI2
 16544  010014                     L10:
 16545  010014  0100               	movlb	0	; () banked
 16546  010016  6FE9               	movwf	(SPI_Init@pInput+1)& (0+255),b
 16547                           
 16548                           ; BSR set to: 0
 16549                           ;SPI.c: 24: };
 16550                           
 16551                           ;SPI.c: 23: break;
 16552  010018  D008               	goto	l599
 16553  01001A                     l597:
 16554                           
 16555                           ; BSR set to: 0
 16556  01001A  0100               	movlb	0	; () banked
 16557  01001C  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 16558                           
 16559                           ; Switch size 1, requested type "space"
 16560                           ; Number of cases is 2, Range of values is 0 to 1
 16561                           ; switch strategies available:
 16562                           ; Name         Instructions Cycles
 16563                           ; simple_byte            7     4 (average)
 16564                           ;	Chosen strategy is simple_byte
 16565  01001E  0A00               	xorlw	0	; case 0
 16566  010020  B4D8               	btfsc	status,2,c
 16567  010022  D7EF               	goto	l598
 16568  010024  0A01               	xorlw	1	; case 1
 16569  010026  B4D8               	btfsc	status,2,c
 16570  010028  D7F1               	goto	l600
 16571  01002A                     l599:
 16572                           
 16573                           ; BSR set to: 0
 16574                           ;SPI.c: 26: pInput->mChannel = pChannel;
 16575                           
 16576                           ; BSR set to: 0
 16577  01002A  0100               	movlb	0	; () banked
 16578  01002C  EE20 F002          	lfsr	2,2
 16579  010030  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16580  010032  26D9               	addwf	fsr2l,f,c
 16581  010034  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16582  010036  22DA               	addwfc	fsr2h,f,c
 16583  010038  C0E6  FFDF         	movff	SPI_Init@pChannel,indf2
 16584                           
 16585                           ;SPI.c: 35: switch (pChannel)
 16586  01003C  D0B1               	goto	l601
 16587  01003E                     
 16588                           ; BSR set to: 0
 16589                           ;SPI.c: 39: Port_SetPinType(&PortC, (ePin)2, eTypeOutputPushPull);
 16590                           
 16591                           ; BSR set to: 0
 16592  01003E  0EA3               	movlw	low _PortC
 16593  010040  0100               	movlb	0	; () banked
 16594  010042  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16595  010044  0E00               	movlw	high _PortC
 16596  010046  0100               	movlb	0	; () banked
 16597  010048  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16598  01004A  0E02               	movlw	2
 16599  01004C  0100               	movlb	0	; () banked
 16600  01004E  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16601  010050  0E03               	movlw	3
 16602  010052  0100               	movlb	0	; () banked
 16603  010054  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16604  010056  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16605                           
 16606                           ;SPI.c: 40: Port_SetPinType(&PortC, (ePin)3, eTypeOutputPushPull);
 16607  01005A  0EA3               	movlw	low _PortC
 16608  01005C  0100               	movlb	0	; () banked
 16609  01005E  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16610  010060  0E00               	movlw	high _PortC
 16611  010062  0100               	movlb	0	; () banked
 16612  010064  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16613  010066  0E03               	movlw	3
 16614  010068  0100               	movlb	0	; () banked
 16615  01006A  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16616  01006C  0E03               	movlw	3
 16617  01006E  0100               	movlb	0	; () banked
 16618  010070  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16619  010072  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16620                           
 16621                           ;SPI.c: 41: Port_SetPinType(&PortC, (ePin)5, eTypeOutputPushPull);
 16622  010076  0EA3               	movlw	low _PortC
 16623  010078  0100               	movlb	0	; () banked
 16624  01007A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16625  01007C  0E00               	movlw	high _PortC
 16626  01007E  0100               	movlb	0	; () banked
 16627  010080  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16628  010082  0E05               	movlw	5
 16629  010084  0100               	movlb	0	; () banked
 16630  010086  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16631  010088  0E03               	movlw	3
 16632  01008A  0100               	movlb	0	; () banked
 16633  01008C  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16634  01008E  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16635                           
 16636                           ;SPI.c: 42: Port_SetPinType(&PortC, (ePin)4, eTypeInput);
 16637  010092  0EA3               	movlw	low _PortC
 16638  010094  0100               	movlb	0	; () banked
 16639  010096  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16640  010098  0E00               	movlw	high _PortC
 16641  01009A  0100               	movlb	0	; () banked
 16642  01009C  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16643  01009E  0E04               	movlw	4
 16644  0100A0  0100               	movlb	0	; () banked
 16645  0100A2  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16646  0100A4  0E00               	movlw	0
 16647  0100A6  0100               	movlb	0	; () banked
 16648  0100A8  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16649  0100AA  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16650                           
 16651                           ;SPI.c: 44: pInput->SSPSTATT = (BytePtr)&SSP1STAT;
 16652  0100AE  0100               	movlb	0	; () banked
 16653  0100B0  EE20 F003          	lfsr	2,3
 16654  0100B4  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16655  0100B6  26D9               	addwf	fsr2l,f,c
 16656  0100B8  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16657  0100BA  22DA               	addwfc	fsr2h,f,c
 16658  0100BC  0EC7               	movlw	199
 16659  0100BE  6EDE               	movwf	postinc2,c
 16660  0100C0  0E0F               	movlw	15
 16661  0100C2  6EDD               	movwf	postdec2,c
 16662                           
 16663                           ; BSR set to: 0
 16664                           ;SPI.c: 45: pInput->SSPCON1T = (BytePtr)&SSP1CON1;
 16665  0100C4  0100               	movlb	0	; () banked
 16666  0100C6  EE20 F006          	lfsr	2,6
 16667  0100CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16668  0100CC  26D9               	addwf	fsr2l,f,c
 16669  0100CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16670  0100D0  22DA               	addwfc	fsr2h,f,c
 16671  0100D2  0EC6               	movlw	198
 16672  0100D4  6EDE               	movwf	postinc2,c
 16673  0100D6  0E0F               	movlw	15
 16674  0100D8  6EDD               	movwf	postdec2,c
 16675                           
 16676                           ; BSR set to: 0
 16677                           ;SPI.c: 46: pInput->SSPBUF = (UINT8Ptr)&SSP1BUF;
 16678  0100DA  0100               	movlb	0	; () banked
 16679  0100DC  EE20 F009          	lfsr	2,9
 16680  0100E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16681  0100E2  26D9               	addwf	fsr2l,f,c
 16682  0100E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16683  0100E6  22DA               	addwfc	fsr2h,f,c
 16684  0100E8  0EC9               	movlw	201
 16685  0100EA  D056               	goto	L11
 16686  0100EC                     
 16687                           ; BSR set to: 0
 16688                           ;SPI.c: 55: Port_SetPinType(&PortD, (ePin)7, eTypeOutputPushPull);
 16689                           
 16690                           ; BSR set to: 0
 16691  0100EC  0E99               	movlw	low _PortD
 16692  0100EE  0100               	movlb	0	; () banked
 16693  0100F0  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16694  0100F2  0E00               	movlw	high _PortD
 16695  0100F4  0100               	movlb	0	; () banked
 16696  0100F6  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16697  0100F8  0E07               	movlw	7
 16698  0100FA  0100               	movlb	0	; () banked
 16699  0100FC  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16700  0100FE  0E03               	movlw	3
 16701  010100  0100               	movlb	0	; () banked
 16702  010102  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16703  010104  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16704                           
 16705                           ;SPI.c: 56: Port_SetPinType(&PortD, (ePin)6, eTypeOutputPushPull);
 16706  010108  0E99               	movlw	low _PortD
 16707  01010A  0100               	movlb	0	; () banked
 16708  01010C  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16709  01010E  0E00               	movlw	high _PortD
 16710  010110  0100               	movlb	0	; () banked
 16711  010112  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16712  010114  0E06               	movlw	6
 16713  010116  0100               	movlb	0	; () banked
 16714  010118  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16715  01011A  0E03               	movlw	3
 16716  01011C  0100               	movlb	0	; () banked
 16717  01011E  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16718  010120  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16719                           
 16720                           ;SPI.c: 57: Port_SetPinType(&PortD, (ePin)4, eTypeOutputPushPull);
 16721  010124  0E99               	movlw	low _PortD
 16722  010126  0100               	movlb	0	; () banked
 16723  010128  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16724  01012A  0E00               	movlw	high _PortD
 16725  01012C  0100               	movlb	0	; () banked
 16726  01012E  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16727  010130  0E04               	movlw	4
 16728  010132  0100               	movlb	0	; () banked
 16729  010134  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16730  010136  0E03               	movlw	3
 16731  010138  0100               	movlb	0	; () banked
 16732  01013A  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16733  01013C  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16734                           
 16735                           ;SPI.c: 58: Port_SetPinType(&PortD, (ePin)5, eTypeInput);
 16736  010140  0E99               	movlw	low _PortD
 16737  010142  0100               	movlb	0	; () banked
 16738  010144  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 16739  010146  0E00               	movlw	high _PortD
 16740  010148  0100               	movlb	0	; () banked
 16741  01014A  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 16742  01014C  0E05               	movlw	5
 16743  01014E  0100               	movlb	0	; () banked
 16744  010150  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 16745  010152  0E00               	movlw	0
 16746  010154  0100               	movlb	0	; () banked
 16747  010156  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 16748  010158  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 16749                           
 16750                           ;SPI.c: 60: pInput->SSPSTATT = (BytePtr)&SSP2STAT;
 16751  01015C  0100               	movlb	0	; () banked
 16752  01015E  EE20 F003          	lfsr	2,3
 16753  010162  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16754  010164  26D9               	addwf	fsr2l,f,c
 16755  010166  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16756  010168  22DA               	addwfc	fsr2h,f,c
 16757  01016A  0E6D               	movlw	109
 16758  01016C  6EDE               	movwf	postinc2,c
 16759  01016E  0E0F               	movlw	15
 16760  010170  6EDD               	movwf	postdec2,c
 16761                           
 16762                           ; BSR set to: 0
 16763                           ;SPI.c: 61: pInput->SSPCON1T = (BytePtr)&SSP2CON1;
 16764  010172  0100               	movlb	0	; () banked
 16765  010174  EE20 F006          	lfsr	2,6
 16766  010178  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16767  01017A  26D9               	addwf	fsr2l,f,c
 16768  01017C  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16769  01017E  22DA               	addwfc	fsr2h,f,c
 16770  010180  0E6C               	movlw	108
 16771  010182  6EDE               	movwf	postinc2,c
 16772  010184  0E0F               	movlw	15
 16773  010186  6EDD               	movwf	postdec2,c
 16774                           
 16775                           ; BSR set to: 0
 16776                           ;SPI.c: 62: pInput->SSPBUF = (UINT8Ptr)&SSP2BUF;
 16777  010188  0100               	movlb	0	; () banked
 16778  01018A  EE20 F009          	lfsr	2,9
 16779  01018E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16780  010190  26D9               	addwf	fsr2l,f,c
 16781  010192  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16782  010194  22DA               	addwfc	fsr2h,f,c
 16783  010196  0E6F               	movlw	111
 16784  010198                     L11:
 16785  010198  6EDE               	movwf	postinc2,c
 16786  01019A  0E0F               	movlw	15
 16787  01019C  6EDD               	movwf	postdec2,c
 16788                           
 16789                           ;SPI.c: 68: break;
 16790  01019E  D009               	goto	l603
 16791  0101A0                     l601:
 16792                           
 16793                           ; BSR set to: 0
 16794                           
 16795                           ; BSR set to: 0
 16796  0101A0  0100               	movlb	0	; () banked
 16797  0101A2  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 16798                           
 16799                           ; Switch size 1, requested type "space"
 16800                           ; Number of cases is 2, Range of values is 0 to 1
 16801                           ; switch strategies available:
 16802                           ; Name         Instructions Cycles
 16803                           ; simple_byte            7     4 (average)
 16804                           ;	Chosen strategy is simple_byte
 16805  0101A4  0A00               	xorlw	0	; case 0
 16806  0101A6  B4D8               	btfsc	status,2,c
 16807  0101A8  D74A               	goto	l602
 16808  0101AA  0A01               	xorlw	1	; case 1
 16809  0101AC  A4D8               	btfss	status,2,c
 16810  0101AE  0012               	return	
 16811  0101B0  D79D               	goto	l604
 16812  0101B2                     l603:
 16813                           
 16814                           ; BSR set to: 0
 16815                           ;SPI.c: 74: Byte_SetBit(pInput->SSPCON1T, (UINT8)5, (UINT8)0);
 16816                           
 16817                           ; BSR set to: 0
 16818  0101B2  0100               	movlb	0	; () banked
 16819  0101B4  EE20 F006          	lfsr	2,6
 16820  0101B8  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16821  0101BA  26D9               	addwf	fsr2l,f,c
 16822  0101BC  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16823  0101BE  22DA               	addwfc	fsr2h,f,c
 16824  0101C0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16825  0101C4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16826  0101C8  0E05               	movlw	5
 16827  0101CA  0100               	movlb	0	; () banked
 16828  0101CC  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16829  0101CE  0E00               	movlw	0
 16830  0101D0  0100               	movlb	0	; () banked
 16831  0101D2  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16832  0101D4  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16833                           
 16834                           ;SPI.c: 77: switch(pMode)
 16835  0101D8  D09C               	goto	l607
 16836  0101DA                     
 16837                           ;SPI.c: 80: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16838  0101DA  0100               	movlb	0	; () banked
 16839  0101DC  EE20 F006          	lfsr	2,6
 16840  0101E0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16841  0101E2  26D9               	addwf	fsr2l,f,c
 16842  0101E4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16843  0101E6  22DA               	addwfc	fsr2h,f,c
 16844  0101E8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16845  0101EC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16846  0101F0  0E04               	movlw	4
 16847  0101F2  0100               	movlb	0	; () banked
 16848  0101F4  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16849  0101F6  0E00               	movlw	0
 16850  0101F8  0100               	movlb	0	; () banked
 16851  0101FA  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16852  0101FC  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16853                           
 16854                           ;SPI.c: 81: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16855  010200  0100               	movlb	0	; () banked
 16856  010202  EE20 F003          	lfsr	2,3
 16857  010206  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16858  010208  26D9               	addwf	fsr2l,f,c
 16859  01020A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16860  01020C  22DA               	addwfc	fsr2h,f,c
 16861  01020E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16862  010212  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16863  010216  0E06               	movlw	6
 16864  010218  0100               	movlb	0	; () banked
 16865  01021A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16866  01021C  0E00               	movlw	0
 16867  01021E  0100               	movlb	0	; () banked
 16868  010220  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16869  010222  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16870                           
 16871                           ;SPI.c: 82: break;
 16872  010226  D084               	goto	l609
 16873  010228                     
 16874                           ;SPI.c: 84: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)0);
 16875  010228  0100               	movlb	0	; () banked
 16876  01022A  EE20 F006          	lfsr	2,6
 16877  01022E  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16878  010230  26D9               	addwf	fsr2l,f,c
 16879  010232  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16880  010234  22DA               	addwfc	fsr2h,f,c
 16881  010236  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16882  01023A  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16883  01023E  0E04               	movlw	4
 16884  010240  0100               	movlb	0	; () banked
 16885  010242  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16886  010244  0E00               	movlw	0
 16887  010246  0100               	movlb	0	; () banked
 16888  010248  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16889  01024A  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16890                           
 16891                           ;SPI.c: 85: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16892  01024E  0100               	movlb	0	; () banked
 16893  010250  EE20 F003          	lfsr	2,3
 16894  010254  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16895  010256  26D9               	addwf	fsr2l,f,c
 16896  010258  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16897  01025A  22DA               	addwfc	fsr2h,f,c
 16898  01025C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16899  010260  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16900  010264  0E06               	movlw	6
 16901  010266  0100               	movlb	0	; () banked
 16902  010268  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16903  01026A  0E01               	movlw	1
 16904  01026C  0100               	movlb	0	; () banked
 16905  01026E  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16906  010270  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16907                           
 16908                           ;SPI.c: 86: break;
 16909  010274  D05D               	goto	l609
 16910  010276                     
 16911                           ;SPI.c: 88: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16912  010276  0100               	movlb	0	; () banked
 16913  010278  EE20 F006          	lfsr	2,6
 16914  01027C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16915  01027E  26D9               	addwf	fsr2l,f,c
 16916  010280  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16917  010282  22DA               	addwfc	fsr2h,f,c
 16918  010284  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16919  010288  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16920  01028C  0E04               	movlw	4
 16921  01028E  0100               	movlb	0	; () banked
 16922  010290  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16923  010292  0E01               	movlw	1
 16924  010294  0100               	movlb	0	; () banked
 16925  010296  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16926  010298  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16927                           
 16928                           ;SPI.c: 89: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)0);
 16929  01029C  0100               	movlb	0	; () banked
 16930  01029E  EE20 F003          	lfsr	2,3
 16931  0102A2  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16932  0102A4  26D9               	addwf	fsr2l,f,c
 16933  0102A6  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16934  0102A8  22DA               	addwfc	fsr2h,f,c
 16935  0102AA  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16936  0102AE  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16937  0102B2  0E06               	movlw	6
 16938  0102B4  0100               	movlb	0	; () banked
 16939  0102B6  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16940  0102B8  0E00               	movlw	0
 16941  0102BA  0100               	movlb	0	; () banked
 16942  0102BC  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16943  0102BE  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16944                           
 16945                           ;SPI.c: 90: break;
 16946  0102C2  D036               	goto	l609
 16947  0102C4                     
 16948                           ;SPI.c: 92: Byte_SetBit(pInput->SSPCON1T, (UINT8)4, (UINT8)1);
 16949  0102C4  0100               	movlb	0	; () banked
 16950  0102C6  EE20 F006          	lfsr	2,6
 16951  0102CA  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16952  0102CC  26D9               	addwf	fsr2l,f,c
 16953  0102CE  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16954  0102D0  22DA               	addwfc	fsr2h,f,c
 16955  0102D2  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16956  0102D6  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16957  0102DA  0E04               	movlw	4
 16958  0102DC  0100               	movlb	0	; () banked
 16959  0102DE  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16960  0102E0  0E01               	movlw	1
 16961  0102E2  0100               	movlb	0	; () banked
 16962  0102E4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16963  0102E6  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16964                           
 16965                           ;SPI.c: 93: Byte_SetBit(pInput->SSPSTATT, (UINT8)6, (UINT8)1);
 16966  0102EA  0100               	movlb	0	; () banked
 16967  0102EC  EE20 F003          	lfsr	2,3
 16968  0102F0  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 16969  0102F2  26D9               	addwf	fsr2l,f,c
 16970  0102F4  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 16971  0102F6  22DA               	addwfc	fsr2h,f,c
 16972  0102F8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 16973  0102FC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 16974  010300  0E06               	movlw	6
 16975  010302  0100               	movlb	0	; () banked
 16976  010304  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 16977  010306  0E01               	movlw	1
 16978  010308  0100               	movlb	0	; () banked
 16979  01030A  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 16980  01030C  EC77  F09E         	call	_Byte_SetBit	;wreg free
 16981                           
 16982                           ;SPI.c: 94: break;
 16983  010310  D00F               	goto	l609
 16984  010312                     l607:
 16985  010312  0100               	movlb	0	; () banked
 16986  010314  51E7               	movf	SPI_Init@pMode& (0+255),w,b
 16987                           
 16988                           ; Switch size 1, requested type "space"
 16989                           ; Number of cases is 4, Range of values is 0 to 3
 16990                           ; switch strategies available:
 16991                           ; Name         Instructions Cycles
 16992                           ; simple_byte           13     7 (average)
 16993                           ;	Chosen strategy is simple_byte
 16994  010316  0A00               	xorlw	0	; case 0
 16995  010318  B4D8               	btfsc	status,2,c
 16996  01031A  D75F               	goto	l608
 16997  01031C  0A01               	xorlw	1	; case 1
 16998  01031E  B4D8               	btfsc	status,2,c
 16999  010320  D783               	goto	l610
 17000  010322  0A03               	xorlw	3	; case 2
 17001  010324  B4D8               	btfsc	status,2,c
 17002  010326  D7A7               	goto	l611
 17003  010328  0A01               	xorlw	1	; case 3
 17004  01032A  A4D8               	btfss	status,2,c
 17005  01032C  0012               	return	
 17006  01032E  D7CA               	goto	l612
 17007  010330                     l609:
 17008                           
 17009                           ;SPI.c: 100: Byte_SetBit(pInput->SSPCON1T, (UINT8)7, (UINT8)0);
 17010                           
 17011                           ; BSR set to: 0
 17012  010330  0100               	movlb	0	; () banked
 17013  010332  EE20 F006          	lfsr	2,6
 17014  010336  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17015  010338  26D9               	addwf	fsr2l,f,c
 17016  01033A  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17017  01033C  22DA               	addwfc	fsr2h,f,c
 17018  01033E  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 17019  010342  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 17020  010346  0E07               	movlw	7
 17021  010348  0100               	movlb	0	; () banked
 17022  01034A  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 17023  01034C  0E00               	movlw	0
 17024  01034E  0100               	movlb	0	; () banked
 17025  010350  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 17026  010352  EC77  F09E         	call	_Byte_SetBit	;wreg free
 17027                           
 17028                           ;SPI.c: 101: Byte_SetBit(pInput->SSPCON1T, (UINT8)6, (UINT8)0);
 17029  010356  0100               	movlb	0	; () banked
 17030  010358  EE20 F006          	lfsr	2,6
 17031  01035C  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17032  01035E  26D9               	addwf	fsr2l,f,c
 17033  010360  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17034  010362  22DA               	addwfc	fsr2h,f,c
 17035  010364  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 17036  010368  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 17037  01036C  0E06               	movlw	6
 17038  01036E  0100               	movlb	0	; () banked
 17039  010370  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 17040  010372  0E00               	movlw	0
 17041  010374  0100               	movlb	0	; () banked
 17042  010376  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 17043  010378  EC77  F09E         	call	_Byte_SetBit	;wreg free
 17044                           
 17045                           ;SPI.c: 106: Timer2_Init(pClock);
 17046  01037C  C0E2  F0C2         	movff	SPI_Init@pClock,Timer2_Init@pFrequency
 17047  010380  C0E3  F0C3         	movff	SPI_Init@pClock+1,Timer2_Init@pFrequency+1
 17048  010384  C0E4  F0C4         	movff	SPI_Init@pClock+2,Timer2_Init@pFrequency+2
 17049  010388  C0E5  F0C5         	movff	SPI_Init@pClock+3,Timer2_Init@pFrequency+3
 17050  01038C  ECA4  F090         	call	_Timer2_Init	;wreg free
 17051                           
 17052                           ;SPI.c: 112: SPI_DisableISR(pInput);
 17053  010390  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DisableISR@pInput
 17054  010394  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DisableISR@pInput+1
 17055  010398  EC29  F0A3         	call	_SPI_DisableISR	;wreg free
 17056                           
 17057                           ;SPI.c: 116: switch (pChannel)
 17058  01039C  D004               	goto	l614
 17059  01039E                     l615:
 17060                           
 17061                           ; BSR set to: 0
 17062  01039E  869F               	bsf	3999,3,c	;volatile
 17063  0103A0  D00B               	goto	l616
 17064  0103A2                     l617:
 17065                           
 17066                           ; BSR set to: 0
 17067  0103A2  8EA5               	bsf	4005,7,c	;volatile
 17068  0103A4  D009               	goto	l616
 17069  0103A6                     l614:
 17070                           
 17071                           ; BSR set to: 0
 17072  0103A6  0100               	movlb	0	; () banked
 17073  0103A8  51E6               	movf	SPI_Init@pChannel& (0+255),w,b
 17074                           
 17075                           ; Switch size 1, requested type "space"
 17076                           ; Number of cases is 2, Range of values is 0 to 1
 17077                           ; switch strategies available:
 17078                           ; Name         Instructions Cycles
 17079                           ; simple_byte            7     4 (average)
 17080                           ;	Chosen strategy is simple_byte
 17081  0103AA  0A00               	xorlw	0	; case 0
 17082  0103AC  B4D8               	btfsc	status,2,c
 17083  0103AE  D7F7               	goto	l615
 17084  0103B0  0A01               	xorlw	1	; case 1
 17085  0103B2  A4D8               	btfss	status,2,c
 17086  0103B4  0012               	return	
 17087  0103B6  D7F5               	goto	l617
 17088  0103B8                     l616:
 17089                           
 17090                           ; BSR set to: 0
 17091                           ;SPI.c: 124: SPI_DCS(pInput);
 17092                           
 17093                           ; BSR set to: 0
 17094  0103B8  C0E8  F0B5         	movff	SPI_Init@pInput,SPI_DCS@pInput
 17095  0103BC  C0E9  F0B6         	movff	SPI_Init@pInput+1,SPI_DCS@pInput+1
 17096  0103C0  ECB6  F0A2         	call	_SPI_DCS	;wreg free
 17097                           
 17098                           ;SPI.c: 126: pInput->mBusy = 0;
 17099  0103C4  C0E8  FFD9         	movff	SPI_Init@pInput,fsr2l
 17100  0103C8  C0E9  FFDA         	movff	SPI_Init@pInput+1,fsr2h
 17101  0103CC  0E00               	movlw	0
 17102  0103CE  6EDF               	movwf	indf2,c
 17103                           
 17104                           ;SPI.c: 129: Byte_SetQuad(pInput->SSPCON1T, (UINT8)0, (UINT8)3);
 17105  0103D0  0100               	movlb	0	; () banked
 17106  0103D2  EE20 F006          	lfsr	2,6
 17107  0103D6  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17108  0103D8  26D9               	addwf	fsr2l,f,c
 17109  0103DA  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17110  0103DC  22DA               	addwfc	fsr2h,f,c
 17111  0103DE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 17112  0103E2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 17113  0103E6  0E00               	movlw	0
 17114  0103E8  0100               	movlb	0	; () banked
 17115  0103EA  6FC2               	movwf	Byte_SetQuad@pQuad& (0+255),b
 17116  0103EC  0E03               	movlw	3
 17117  0103EE  0100               	movlb	0	; () banked
 17118  0103F0  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 17119  0103F2  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 17120                           
 17121                           ;SPI.c: 130: Byte_SetBit (pInput->SSPCON1T, (UINT8)5, (UINT8)1);
 17122  0103F6  0100               	movlb	0	; () banked
 17123  0103F8  EE20 F006          	lfsr	2,6
 17124  0103FC  51E8               	movf	SPI_Init@pInput& (0+255),w,b
 17125  0103FE  26D9               	addwf	fsr2l,f,c
 17126  010400  51E9               	movf	(SPI_Init@pInput+1)& (0+255),w,b
 17127  010402  22DA               	addwfc	fsr2h,f,c
 17128  010404  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 17129  010408  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 17130  01040C  0E05               	movlw	5
 17131  01040E  0100               	movlb	0	; () banked
 17132  010410  6FB7               	movwf	Byte_SetBit@pBit& (0+255),b
 17133  010412  0E01               	movlw	1
 17134  010414  0100               	movlb	0	; () banked
 17135  010416  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 17136  010418  EC77  F09E         	call	_Byte_SetBit	;wreg free
 17137  01041C  0012               	return		;funcret
 17138  01041E                     __end_of_SPI_Init:
 17139                           	opt stack 0
 17140                           tosu	equ	0xFFF
 17141                           tosh	equ	0xFFE
 17142                           tosl	equ	0xFFD
 17143                           pclath	equ	0xFFA
 17144                           tblptru	equ	0xFF8
 17145                           tblptrh	equ	0xFF7
 17146                           tblptrl	equ	0xFF6
 17147                           tablat	equ	0xFF5
 17148                           prodh	equ	0xFF4
 17149                           prodl	equ	0xFF3
 17150                           intcon	equ	0xFF2
 17151                           postinc0	equ	0xFEE
 17152                           wreg	equ	0xFE8
 17153                           indf1	equ	0xFE7
 17154                           postdec1	equ	0xFE5
 17155                           fsr1h	equ	0xFE2
 17156                           fsr1l	equ	0xFE1
 17157                           indf2	equ	0xFDF
 17158                           postinc2	equ	0xFDE
 17159                           postdec2	equ	0xFDD
 17160                           plusw2	equ	0xFDB
 17161                           fsr2h	equ	0xFDA
 17162                           fsr2l	equ	0xFD9
 17163                           status	equ	0xFD8
 17164                           
 17165 ;; *************** function _Timer2_Init *****************
 17166 ;; Defined at:
 17167 ;;		line 10 in file "Library/Timer2.c"
 17168 ;; Parameters:    Size  Location     Type
 17169 ;;  pFrequency      4   13[BANK0 ] unsigned long 
 17170 ;; Auto vars:     Size  Location     Type
 17171 ;;  DIVIDE          4   26[BANK0 ] unsigned long 
 17172 ;;  pCPUClock       4   22[BANK0 ] unsigned long 
 17173 ;;  RDIV            4   18[BANK0 ] unsigned long 
 17174 ;; Return value:  Size  Location     Type
 17175 ;;                  1    wreg      void 
 17176 ;; Registers used:
 17177 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17178 ;; Tracked objects:
 17179 ;;		On entry : 0/0
 17180 ;;		On exit  : 0/0
 17181 ;;		Unchanged: 0/0
 17182 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17183 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17184 ;;      Locals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17185 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17186 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17187 ;;Total ram usage:       17 bytes
 17188 ;; Hardware stack levels used:    1
 17189 ;; Hardware stack levels required when called:    8
 17190 ;; This function calls:
 17191 ;;		_Timer2_Clear
 17192 ;;		___lldiv
 17193 ;; This function is called by:
 17194 ;;		_SPI_Init
 17195 ;; This function uses a non-reentrant model
 17196 ;;
 17197                           
 17198                           	psect	text92
 17199  012148                     __ptext92:
 17200                           	opt stack 0
 17201  012148                     _Timer2_Init:
 17202                           	opt stack 19
 17203                           
 17204                           ;Timer2.c: 12: static const UINT8 PRESCALE[] = {1, 4, 16};
 17205                           ;Timer2.c: 13: static UINT8 INDEX = 0;
 17206                           ;Timer2.c: 14: static UINT8 PRE = 0;
 17207                           ;Timer2.c: 15: static UINT32 DIV = 0;
 17208                           ;Timer2.c: 17: UINT32 pCPUClock = (48*1000000L);
 17209                           
 17210                           ;incstack = 0
 17211  012148  0E00               	movlw	0
 17212  01214A  0100               	movlb	0	; () banked
 17213  01214C  6FCB               	movwf	Timer2_Init@pCPUClock& (0+255),b
 17214  01214E  0E6C               	movlw	108
 17215  012150  6FCC               	movwf	(Timer2_Init@pCPUClock+1)& (0+255),b
 17216  012152  0EDC               	movlw	220
 17217  012154  6FCD               	movwf	(Timer2_Init@pCPUClock+2)& (0+255),b
 17218  012156  0E02               	movlw	2
 17219  012158  6FCE               	movwf	(Timer2_Init@pCPUClock+3)& (0+255),b
 17220                           
 17221                           ; BSR set to: 0
 17222                           ;Timer2.c: 18: UINT32 DIVIDE, RDIV;
 17223                           ;Timer2.c: 20: pFrequency *= 2;
 17224  01215A  0100               	movlb	0	; () banked
 17225  01215C  90D8               	bcf	status,0,c
 17226  01215E  37C2               	rlcf	Timer2_Init@pFrequency& (0+255),f,b
 17227  012160  37C3               	rlcf	(Timer2_Init@pFrequency+1)& (0+255),f,b
 17228  012162  37C4               	rlcf	(Timer2_Init@pFrequency+2)& (0+255),f,b
 17229  012164  37C5               	rlcf	(Timer2_Init@pFrequency+3)& (0+255),f,b
 17230                           
 17231                           ; BSR set to: 0
 17232                           ;Timer2.c: 23: pCPUClock /= 4;
 17233  012166  0E02               	movlw	2
 17234  012168  0100               	movlb	0	; () banked
 17235  01216A  6FC6               	movwf	??_Timer2_Init& (0+255),b
 17236  01216C                     u7095:
 17237  01216C  90D8               	bcf	status,0,c
 17238  01216E  0100               	movlb	0	; () banked
 17239  012170  33CE               	rrcf	(Timer2_Init@pCPUClock+3)& (0+255),f,b
 17240  012172  33CD               	rrcf	(Timer2_Init@pCPUClock+2)& (0+255),f,b
 17241  012174  33CC               	rrcf	(Timer2_Init@pCPUClock+1)& (0+255),f,b
 17242  012176  33CB               	rrcf	Timer2_Init@pCPUClock& (0+255),f,b
 17243  012178  0100               	movlb	0	; () banked
 17244  01217A  2FC6               	decfsz	??_Timer2_Init& (0+255),f,b
 17245  01217C  D7F7               	goto	u7095
 17246                           
 17247                           ; BSR set to: 0
 17248                           ;Timer2.c: 24: DIVIDE = pCPUClock / pFrequency;
 17249  01217E  C0CB  F0B5         	movff	Timer2_Init@pCPUClock,___lldiv@dividend
 17250  012182  C0CC  F0B6         	movff	Timer2_Init@pCPUClock+1,___lldiv@dividend+1
 17251  012186  C0CD  F0B7         	movff	Timer2_Init@pCPUClock+2,___lldiv@dividend+2
 17252  01218A  C0CE  F0B8         	movff	Timer2_Init@pCPUClock+3,___lldiv@dividend+3
 17253  01218E  C0C2  F0B9         	movff	Timer2_Init@pFrequency,___lldiv@divisor
 17254  012192  C0C3  F0BA         	movff	Timer2_Init@pFrequency+1,___lldiv@divisor+1
 17255  012196  C0C4  F0BB         	movff	Timer2_Init@pFrequency+2,___lldiv@divisor+2
 17256  01219A  C0C5  F0BC         	movff	Timer2_Init@pFrequency+3,___lldiv@divisor+3
 17257  01219E  EC3F  F095         	call	___lldiv	;wreg free
 17258  0121A2  C0B5  F0CF         	movff	?___lldiv,Timer2_Init@DIVIDE
 17259  0121A6  C0B6  F0D0         	movff	?___lldiv+1,Timer2_Init@DIVIDE+1
 17260  0121AA  C0B7  F0D1         	movff	?___lldiv+2,Timer2_Init@DIVIDE+2
 17261  0121AE  C0B8  F0D2         	movff	?___lldiv+3,Timer2_Init@DIVIDE+3
 17262                           
 17263                           ;Timer2.c: 27: while ((DIVIDE/PRESCALE[INDEX]) > 255)
 17264  0121B2  D010               	goto	l1828
 17265  0121B4                     l11031:
 17266                           
 17267                           ;Timer2.c: 28: {
 17268                           ;Timer2.c: 29: RDIV = 0;
 17269  0121B4  0E00               	movlw	0
 17270  0121B6  0100               	movlb	0	; () banked
 17271  0121B8  6FC7               	movwf	Timer2_Init@RDIV& (0+255),b
 17272  0121BA  0E00               	movlw	0
 17273  0121BC  6FC8               	movwf	(Timer2_Init@RDIV+1)& (0+255),b
 17274  0121BE  0E00               	movlw	0
 17275  0121C0  6FC9               	movwf	(Timer2_Init@RDIV+2)& (0+255),b
 17276  0121C2  0E00               	movlw	0
 17277  0121C4  6FCA               	movwf	(Timer2_Init@RDIV+3)& (0+255),b
 17278                           
 17279                           ; BSR set to: 0
 17280                           ;Timer2.c: 30: INDEX ++;
 17281  0121C6  0100               	movlb	0	; () banked
 17282  0121C8  2B8B               	incf	Timer2_Init@INDEX& (0+255),f,b
 17283                           
 17284                           ; BSR set to: 0
 17285                           ;Timer2.c: 31: if (INDEX >= 3)
 17286  0121CA  0E02               	movlw	2
 17287  0121CC  0100               	movlb	0	; () banked
 17288  0121CE  658B               	cpfsgt	Timer2_Init@INDEX& (0+255),b
 17289  0121D0  D001               	goto	l1828
 17290  0121D2  D026               	goto	u7110
 17291  0121D4                     l1828:
 17292                           
 17293                           ; BSR set to: 0
 17294                           
 17295                           ; BSR set to: 0
 17296  0121D4  C0CF  F0B5         	movff	Timer2_Init@DIVIDE,___lldiv@dividend
 17297  0121D8  C0D0  F0B6         	movff	Timer2_Init@DIVIDE+1,___lldiv@dividend+1
 17298  0121DC  C0D1  F0B7         	movff	Timer2_Init@DIVIDE+2,___lldiv@dividend+2
 17299  0121E0  C0D2  F0B8         	movff	Timer2_Init@DIVIDE+3,___lldiv@dividend+3
 17300  0121E4  0100               	movlb	0	; () banked
 17301  0121E6  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 17302  0121E8  0D01               	mullw	1
 17303  0121EA  0ECE               	movlw	low Timer2_Init@PRESCALE
 17304  0121EC  24F3               	addwf	prodl,w,c
 17305  0121EE  6EF6               	movwf	tblptrl,c
 17306  0121F0  0EFD               	movlw	high Timer2_Init@PRESCALE
 17307  0121F2  20F4               	addwfc	prodh,w,c
 17308  0121F4  6EF7               	movwf	tblptrh,c
 17309  0121F6                     	if	1	;There are 3 active tblptr bytes
 17310  0121F6  6AF8               	clrf	tblptru,c
 17311  0121F8  0E00               	movlw	low (__mediumconst shr (0+16))
 17312  0121FA  22F8               	addwfc	tblptru,f,c
 17313  0121FC                     	endif
 17314  0121FC  0008               	tblrd		*
 17315  0121FE  50F5               	movf	tablat,w,c
 17316  012200  0100               	movlb	0	; () banked
 17317  012202  6FB9               	movwf	___lldiv@divisor& (0+255),b
 17318  012204  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 17319  012206  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 17320  012208  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 17321  01220A  EC3F  F095         	call	___lldiv	;wreg free
 17322  01220E  0100               	movlb	0	; () banked
 17323  012210  51B8               	movf	(?___lldiv+3)& (0+255),w,b
 17324  012212  0100               	movlb	0	; () banked
 17325  012214  11B7               	iorwf	(?___lldiv+2)& (0+255),w,b
 17326  012216  E1CE               	bnz	l11031
 17327  012218  0100               	movlb	0	; () banked
 17328  01221A  05B6               	decf	(?___lldiv+1)& (0+255),w,b
 17329  01221C  B0D8               	btfsc	status,0,c
 17330  01221E  D7CA               	goto	l1827
 17331  012220                     u7110:
 17332                           
 17333                           ; BSR set to: 0
 17334                           ;Timer2.c: 33: }
 17335                           ;Timer2.c: 37: T2CONbits.T2CKPS = INDEX;
 17336                           
 17337                           ; BSR set to: 0
 17338  012220  50CA               	movf	4042,w,c	;volatile
 17339  012222  0100               	movlb	0	; () banked
 17340  012224  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17341  012226  0BFC               	andlw	-4
 17342  012228  198B               	xorwf	Timer2_Init@INDEX& (0+255),w,b
 17343  01222A  6ECA               	movwf	4042,c	;volatile
 17344                           
 17345                           ; BSR set to: 0
 17346                           ;Timer2.c: 40: T2CONbits.TMR2ON = 1;
 17347  01222C  84CA               	bsf	4042,2,c	;volatile
 17348                           
 17349                           ; BSR set to: 0
 17350                           ;Timer2.c: 44: Timer2_Clear();
 17351  01222E  ECEE  F0A4         	call	_Timer2_Clear	;wreg free
 17352                           
 17353                           ;Timer2.c: 45: PRE = PRESCALE[INDEX];
 17354  012232  0100               	movlb	0	; () banked
 17355  012234  518B               	movf	Timer2_Init@INDEX& (0+255),w,b
 17356  012236  0D01               	mullw	1
 17357  012238  0ECE               	movlw	low Timer2_Init@PRESCALE
 17358  01223A  24F3               	addwf	prodl,w,c
 17359  01223C  6EF6               	movwf	tblptrl,c
 17360  01223E  0EFD               	movlw	high Timer2_Init@PRESCALE
 17361  012240  20F4               	addwfc	prodh,w,c
 17362  012242  6EF7               	movwf	tblptrh,c
 17363  012244                     	if	1	;There are 3 active tblptr bytes
 17364  012244  6AF8               	clrf	tblptru,c
 17365  012246  0E00               	movlw	low (__mediumconst shr (0+16))
 17366  012248  22F8               	addwfc	tblptru,f,c
 17367  01224A                     	endif
 17368  01224A  0008               	tblrd		*
 17369  01224C  CFF5 F08A          	movff	tablat,Timer2_Init@PRE
 17370                           
 17371                           ; BSR set to: 0
 17372                           ;Timer2.c: 46: DIV = (DIVIDE-1);
 17373  012250  0EFF               	movlw	255
 17374  012252  0100               	movlb	0	; () banked
 17375  012254  25CF               	addwf	Timer2_Init@DIVIDE& (0+255),w,b
 17376  012256  0103               	movlb	3	; () banked
 17377  012258  6F1E               	movwf	Timer2_Init@DIV& (0+255),b
 17378  01225A  0EFF               	movlw	255
 17379  01225C  0100               	movlb	0	; () banked
 17380  01225E  21D0               	addwfc	(Timer2_Init@DIVIDE+1)& (0+255),w,b
 17381  012260  0103               	movlb	3	; () banked
 17382  012262  6F1F               	movwf	(Timer2_Init@DIV+1)& (0+255),b
 17383  012264  0EFF               	movlw	255
 17384  012266  0100               	movlb	0	; () banked
 17385  012268  21D1               	addwfc	(Timer2_Init@DIVIDE+2)& (0+255),w,b
 17386  01226A  0103               	movlb	3	; () banked
 17387  01226C  6F20               	movwf	(Timer2_Init@DIV+2)& (0+255),b
 17388  01226E  0EFF               	movlw	255
 17389  012270  0100               	movlb	0	; () banked
 17390  012272  21D2               	addwfc	(Timer2_Init@DIVIDE+3)& (0+255),w,b
 17391  012274  0103               	movlb	3	; () banked
 17392  012276  6F21               	movwf	(Timer2_Init@DIV+3)& (0+255),b
 17393                           
 17394                           ; BSR set to: 3
 17395                           ;Timer2.c: 48: INDEX = DIV/PRE;
 17396  012278  C31E  F0B5         	movff	Timer2_Init@DIV,___lldiv@dividend
 17397  01227C  C31F  F0B6         	movff	Timer2_Init@DIV+1,___lldiv@dividend+1
 17398  012280  C320  F0B7         	movff	Timer2_Init@DIV+2,___lldiv@dividend+2
 17399  012284  C321  F0B8         	movff	Timer2_Init@DIV+3,___lldiv@dividend+3
 17400  012288  0100               	movlb	0	; () banked
 17401  01228A  518A               	movf	Timer2_Init@PRE& (0+255),w,b
 17402  01228C  0100               	movlb	0	; () banked
 17403  01228E  6FB9               	movwf	___lldiv@divisor& (0+255),b
 17404  012290  6BBA               	clrf	(___lldiv@divisor+1)& (0+255),b
 17405  012292  6BBB               	clrf	(___lldiv@divisor+2)& (0+255),b
 17406  012294  6BBC               	clrf	(___lldiv@divisor+3)& (0+255),b
 17407  012296  EC3F  F095         	call	___lldiv	;wreg free
 17408  01229A  0100               	movlb	0	; () banked
 17409  01229C  51B5               	movf	?___lldiv& (0+255),w,b
 17410  01229E  0100               	movlb	0	; () banked
 17411  0122A0  6F8B               	movwf	Timer2_Init@INDEX& (0+255),b
 17412                           
 17413                           ; BSR set to: 0
 17414                           ;Timer2.c: 49: PR2 = INDEX;
 17415  0122A2  C08B  FFCB         	movff	Timer2_Init@INDEX,4043	;volatile
 17416                           
 17417                           ; BSR set to: 0
 17418  0122A6  0012               	return		;funcret
 17419  0122A8                     __end_of_Timer2_Init:
 17420                           	opt stack 0
 17421                           tosu	equ	0xFFF
 17422                           tosh	equ	0xFFE
 17423                           tosl	equ	0xFFD
 17424                           pclath	equ	0xFFA
 17425                           tblptru	equ	0xFF8
 17426                           tblptrh	equ	0xFF7
 17427                           tblptrl	equ	0xFF6
 17428                           tablat	equ	0xFF5
 17429                           prodh	equ	0xFF4
 17430                           prodl	equ	0xFF3
 17431                           intcon	equ	0xFF2
 17432                           postinc0	equ	0xFEE
 17433                           wreg	equ	0xFE8
 17434                           indf1	equ	0xFE7
 17435                           postdec1	equ	0xFE5
 17436                           fsr1h	equ	0xFE2
 17437                           fsr1l	equ	0xFE1
 17438                           indf2	equ	0xFDF
 17439                           postinc2	equ	0xFDE
 17440                           postdec2	equ	0xFDD
 17441                           plusw2	equ	0xFDB
 17442                           fsr2h	equ	0xFDA
 17443                           fsr2l	equ	0xFD9
 17444                           status	equ	0xFD8
 17445                           
 17446 ;; *************** function ___lldiv *****************
 17447 ;; Defined at:
 17448 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\lldiv.c"
 17449 ;; Parameters:    Size  Location     Type
 17450 ;;  dividend        4    0[BANK0 ] unsigned long 
 17451 ;;  divisor         4    4[BANK0 ] unsigned long 
 17452 ;; Auto vars:     Size  Location     Type
 17453 ;;  quotient        4    8[BANK0 ] unsigned long 
 17454 ;;  counter         1   12[BANK0 ] unsigned char 
 17455 ;; Return value:  Size  Location     Type
 17456 ;;                  4    0[BANK0 ] unsigned long 
 17457 ;; Registers used:
 17458 ;;		wreg, status,2, status,0
 17459 ;; Tracked objects:
 17460 ;;		On entry : 0/0
 17461 ;;		On exit  : 0/0
 17462 ;;		Unchanged: 0/0
 17463 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17464 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17465 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17466 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17467 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17468 ;;Total ram usage:       13 bytes
 17469 ;; Hardware stack levels used:    1
 17470 ;; Hardware stack levels required when called:    7
 17471 ;; This function calls:
 17472 ;;		Nothing
 17473 ;; This function is called by:
 17474 ;;		_Timer2_Init
 17475 ;;		_rand_between
 17476 ;;		_I2C_Init
 17477 ;;		_Timer0_Init
 17478 ;; This function uses a non-reentrant model
 17479 ;;
 17480                           
 17481                           	psect	text93
 17482  012A7E                     __ptext93:
 17483                           	opt stack 0
 17484  012A7E                     ___lldiv:
 17485                           	opt stack 19
 17486                           
 17487                           ; BSR set to: 0
 17488                           ;incstack = 0
 17489  012A7E  0E00               	movlw	0
 17490  012A80  0100               	movlb	0	; () banked
 17491  012A82  6FBD               	movwf	___lldiv@quotient& (0+255),b
 17492  012A84  0E00               	movlw	0
 17493  012A86  6FBE               	movwf	(___lldiv@quotient+1)& (0+255),b
 17494  012A88  0E00               	movlw	0
 17495  012A8A  6FBF               	movwf	(___lldiv@quotient+2)& (0+255),b
 17496  012A8C  0E00               	movlw	0
 17497  012A8E  6FC0               	movwf	(___lldiv@quotient+3)& (0+255),b
 17498                           
 17499                           ; BSR set to: 0
 17500  012A90  0100               	movlb	0	; () banked
 17501  012A92  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17502  012A94  0100               	movlb	0	; () banked
 17503  012A96  11BA               	iorwf	(___lldiv@divisor+1)& (0+255),w,b
 17504  012A98  0100               	movlb	0	; () banked
 17505  012A9A  11BB               	iorwf	(___lldiv@divisor+2)& (0+255),w,b
 17506  012A9C  0100               	movlb	0	; () banked
 17507  012A9E  11BC               	iorwf	(___lldiv@divisor+3)& (0+255),w,b
 17508  012AA0  B4D8               	btfsc	status,2,c
 17509  012AA2  D042               	goto	l2655
 17510                           
 17511                           ; BSR set to: 0
 17512  012AA4  0E01               	movlw	1
 17513  012AA6  0100               	movlb	0	; () banked
 17514  012AA8  6FC1               	movwf	___lldiv@counter& (0+255),b
 17515  012AAA  D008               	goto	l2650
 17516  012AAC                     
 17517                           ; BSR set to: 0
 17518                           
 17519                           ; BSR set to: 0
 17520  012AAC  0100               	movlb	0	; () banked
 17521  012AAE  90D8               	bcf	status,0,c
 17522  012AB0  37B9               	rlcf	___lldiv@divisor& (0+255),f,b
 17523  012AB2  37BA               	rlcf	(___lldiv@divisor+1)& (0+255),f,b
 17524  012AB4  37BB               	rlcf	(___lldiv@divisor+2)& (0+255),f,b
 17525  012AB6  37BC               	rlcf	(___lldiv@divisor+3)& (0+255),f,b
 17526  012AB8  0100               	movlb	0	; () banked
 17527  012ABA  2BC1               	incf	___lldiv@counter& (0+255),f,b
 17528  012ABC                     l2650:
 17529                           
 17530                           ; BSR set to: 0
 17531                           
 17532                           ; BSR set to: 0
 17533  012ABC  0100               	movlb	0	; () banked
 17534  012ABE  AFBC               	btfss	(___lldiv@divisor+3)& (0+255),7,b
 17535  012AC0  D7F5               	goto	l2651
 17536  012AC2                     u6960:
 17537                           
 17538                           ; BSR set to: 0
 17539                           
 17540                           ; BSR set to: 0
 17541                           
 17542                           ; BSR set to: 0
 17543  012AC2  0100               	movlb	0	; () banked
 17544  012AC4  90D8               	bcf	status,0,c
 17545  012AC6  37BD               	rlcf	___lldiv@quotient& (0+255),f,b
 17546  012AC8  37BE               	rlcf	(___lldiv@quotient+1)& (0+255),f,b
 17547  012ACA  37BF               	rlcf	(___lldiv@quotient+2)& (0+255),f,b
 17548  012ACC  37C0               	rlcf	(___lldiv@quotient+3)& (0+255),f,b
 17549                           
 17550                           ; BSR set to: 0
 17551  012ACE  0100               	movlb	0	; () banked
 17552  012AD0  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17553  012AD2  0100               	movlb	0	; () banked
 17554  012AD4  5DB5               	subwf	___lldiv@dividend& (0+255),w,b
 17555  012AD6  0100               	movlb	0	; () banked
 17556  012AD8  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17557  012ADA  0100               	movlb	0	; () banked
 17558  012ADC  59B6               	subwfb	(___lldiv@dividend+1)& (0+255),w,b
 17559  012ADE  0100               	movlb	0	; () banked
 17560  012AE0  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17561  012AE2  0100               	movlb	0	; () banked
 17562  012AE4  59B7               	subwfb	(___lldiv@dividend+2)& (0+255),w,b
 17563  012AE6  0100               	movlb	0	; () banked
 17564  012AE8  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17565  012AEA  0100               	movlb	0	; () banked
 17566  012AEC  59B8               	subwfb	(___lldiv@dividend+3)& (0+255),w,b
 17567  012AEE  A0D8               	btfss	status,0,c
 17568  012AF0  D012               	goto	l2654
 17569                           
 17570                           ; BSR set to: 0
 17571  012AF2  0100               	movlb	0	; () banked
 17572  012AF4  51B9               	movf	___lldiv@divisor& (0+255),w,b
 17573  012AF6  0100               	movlb	0	; () banked
 17574  012AF8  5FB5               	subwf	___lldiv@dividend& (0+255),f,b
 17575  012AFA  0100               	movlb	0	; () banked
 17576  012AFC  51BA               	movf	(___lldiv@divisor+1)& (0+255),w,b
 17577  012AFE  0100               	movlb	0	; () banked
 17578  012B00  5BB6               	subwfb	(___lldiv@dividend+1)& (0+255),f,b
 17579  012B02  0100               	movlb	0	; () banked
 17580  012B04  51BB               	movf	(___lldiv@divisor+2)& (0+255),w,b
 17581  012B06  0100               	movlb	0	; () banked
 17582  012B08  5BB7               	subwfb	(___lldiv@dividend+2)& (0+255),f,b
 17583  012B0A  0100               	movlb	0	; () banked
 17584  012B0C  51BC               	movf	(___lldiv@divisor+3)& (0+255),w,b
 17585  012B0E  0100               	movlb	0	; () banked
 17586  012B10  5BB8               	subwfb	(___lldiv@dividend+3)& (0+255),f,b
 17587                           
 17588                           ; BSR set to: 0
 17589  012B12  0100               	movlb	0	; () banked
 17590  012B14  81BD               	bsf	___lldiv@quotient& (0+255),0,b
 17591  012B16                     l2654:
 17592                           
 17593                           ; BSR set to: 0
 17594                           
 17595                           ; BSR set to: 0
 17596  012B16  0100               	movlb	0	; () banked
 17597  012B18  90D8               	bcf	status,0,c
 17598  012B1A  33BC               	rrcf	(___lldiv@divisor+3)& (0+255),f,b
 17599  012B1C  33BB               	rrcf	(___lldiv@divisor+2)& (0+255),f,b
 17600  012B1E  33BA               	rrcf	(___lldiv@divisor+1)& (0+255),f,b
 17601  012B20  33B9               	rrcf	___lldiv@divisor& (0+255),f,b
 17602                           
 17603                           ; BSR set to: 0
 17604  012B22  0100               	movlb	0	; () banked
 17605  012B24  2FC1               	decfsz	___lldiv@counter& (0+255),f,b
 17606  012B26  D7CD               	goto	u6960
 17607  012B28                     l2655:
 17608                           
 17609                           ; BSR set to: 0
 17610                           
 17611                           ; BSR set to: 0
 17612  012B28  C0BD  F0B5         	movff	___lldiv@quotient,?___lldiv
 17613  012B2C  C0BE  F0B6         	movff	___lldiv@quotient+1,?___lldiv+1
 17614  012B30  C0BF  F0B7         	movff	___lldiv@quotient+2,?___lldiv+2
 17615  012B34  C0C0  F0B8         	movff	___lldiv@quotient+3,?___lldiv+3
 17616                           
 17617                           ; BSR set to: 0
 17618  012B38  0012               	return		;funcret
 17619  012B3A                     __end_of___lldiv:
 17620                           	opt stack 0
 17621                           tosu	equ	0xFFF
 17622                           tosh	equ	0xFFE
 17623                           tosl	equ	0xFFD
 17624                           pclath	equ	0xFFA
 17625                           tblptru	equ	0xFF8
 17626                           tblptrh	equ	0xFF7
 17627                           tblptrl	equ	0xFF6
 17628                           tablat	equ	0xFF5
 17629                           prodh	equ	0xFF4
 17630                           prodl	equ	0xFF3
 17631                           intcon	equ	0xFF2
 17632                           postinc0	equ	0xFEE
 17633                           wreg	equ	0xFE8
 17634                           indf1	equ	0xFE7
 17635                           postdec1	equ	0xFE5
 17636                           fsr1h	equ	0xFE2
 17637                           fsr1l	equ	0xFE1
 17638                           indf2	equ	0xFDF
 17639                           postinc2	equ	0xFDE
 17640                           postdec2	equ	0xFDD
 17641                           plusw2	equ	0xFDB
 17642                           fsr2h	equ	0xFDA
 17643                           fsr2l	equ	0xFD9
 17644                           status	equ	0xFD8
 17645                           
 17646 ;; *************** function _Timer2_Clear *****************
 17647 ;; Defined at:
 17648 ;;		line 3 in file "Library/Timer2.c"
 17649 ;; Parameters:    Size  Location     Type
 17650 ;;		None
 17651 ;; Auto vars:     Size  Location     Type
 17652 ;;		None
 17653 ;; Return value:  Size  Location     Type
 17654 ;;                  1    wreg      void 
 17655 ;; Registers used:
 17656 ;;		None
 17657 ;; Tracked objects:
 17658 ;;		On entry : 0/0
 17659 ;;		On exit  : 0/0
 17660 ;;		Unchanged: 0/0
 17661 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17662 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17663 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17664 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17665 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17666 ;;Total ram usage:        0 bytes
 17667 ;; Hardware stack levels used:    1
 17668 ;; Hardware stack levels required when called:    7
 17669 ;; This function calls:
 17670 ;;		Nothing
 17671 ;; This function is called by:
 17672 ;;		_Timer2_Init
 17673 ;; This function uses a non-reentrant model
 17674 ;;
 17675                           
 17676                           	psect	text94
 17677  0149DC                     __ptext94:
 17678                           	opt stack 0
 17679  0149DC                     _Timer2_Clear:
 17680                           	opt stack 19
 17681                           
 17682                           ;Timer2.c: 5: PIR1bits.TMR2IF = 0;
 17683                           
 17684                           ; BSR set to: 0
 17685                           ;incstack = 0
 17686  0149DC  929E               	bcf	3998,1,c	;volatile
 17687                           
 17688                           ;Timer2.c: 6: PIE1bits.TMR2IE = 0;
 17689  0149DE  929D               	bcf	3997,1,c	;volatile
 17690                           
 17691                           ;Timer2.c: 7: IPR1bits.TMR2IP = 0;
 17692  0149E0  929F               	bcf	3999,1,c	;volatile
 17693  0149E2  0012               	return		;funcret
 17694  0149E4                     __end_of_Timer2_Clear:
 17695                           	opt stack 0
 17696                           tosu	equ	0xFFF
 17697                           tosh	equ	0xFFE
 17698                           tosl	equ	0xFFD
 17699                           pclath	equ	0xFFA
 17700                           tblptru	equ	0xFF8
 17701                           tblptrh	equ	0xFF7
 17702                           tblptrl	equ	0xFF6
 17703                           tablat	equ	0xFF5
 17704                           prodh	equ	0xFF4
 17705                           prodl	equ	0xFF3
 17706                           intcon	equ	0xFF2
 17707                           postinc0	equ	0xFEE
 17708                           wreg	equ	0xFE8
 17709                           indf1	equ	0xFE7
 17710                           postdec1	equ	0xFE5
 17711                           fsr1h	equ	0xFE2
 17712                           fsr1l	equ	0xFE1
 17713                           indf2	equ	0xFDF
 17714                           postinc2	equ	0xFDE
 17715                           postdec2	equ	0xFDD
 17716                           plusw2	equ	0xFDB
 17717                           fsr2h	equ	0xFDA
 17718                           fsr2l	equ	0xFD9
 17719                           status	equ	0xFD8
 17720                           
 17721 ;; *************** function _SPI_DisableISR *****************
 17722 ;; Defined at:
 17723 ;;		line 181 in file "Library/SPI.c"
 17724 ;; Parameters:    Size  Location     Type
 17725 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17726 ;;		 -> SPI1(11), SPI2(11), 
 17727 ;; Auto vars:     Size  Location     Type
 17728 ;;		None
 17729 ;; Return value:  Size  Location     Type
 17730 ;;                  1    wreg      void 
 17731 ;; Registers used:
 17732 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17733 ;; Tracked objects:
 17734 ;;		On entry : 0/0
 17735 ;;		On exit  : 0/0
 17736 ;;		Unchanged: 0/0
 17737 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17738 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17739 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17740 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17741 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17742 ;;Total ram usage:        2 bytes
 17743 ;; Hardware stack levels used:    1
 17744 ;; Hardware stack levels required when called:    7
 17745 ;; This function calls:
 17746 ;;		Nothing
 17747 ;; This function is called by:
 17748 ;;		_SPI_Init
 17749 ;; This function uses a non-reentrant model
 17750 ;;
 17751                           
 17752                           	psect	text95
 17753  014652                     __ptext95:
 17754                           	opt stack 0
 17755  014652                     _SPI_DisableISR:
 17756                           	opt stack 20
 17757                           
 17758                           ;SPI.c: 183: switch (pInput->mChannel)
 17759                           
 17760                           ;incstack = 0
 17761  014652  D004               	goto	l654
 17762  014654                     l655:
 17763                           
 17764                           ; BSR set to: 0
 17765  014654  969D               	bcf	3997,3,c	;volatile
 17766  014656  0012               	return	
 17767  014658                     l657:
 17768                           
 17769                           ; BSR set to: 0
 17770  014658  9EA3               	bcf	4003,7,c	;volatile
 17771                           
 17772                           ; BSR set to: 0
 17773                           ;SPI.c: 188: };
 17774                           
 17775                           ; BSR set to: 0
 17776                           
 17777                           ;SPI.c: 187: default: return;
 17778  01465A  0012               	return	
 17779  01465C                     l654:
 17780                           
 17781                           ; BSR set to: 0
 17782  01465C  0100               	movlb	0	; () banked
 17783  01465E  EE20 F002          	lfsr	2,2
 17784  014662  51B5               	movf	SPI_DisableISR@pInput& (0+255),w,b
 17785  014664  26D9               	addwf	fsr2l,f,c
 17786  014666  51B6               	movf	(SPI_DisableISR@pInput+1)& (0+255),w,b
 17787  014668  22DA               	addwfc	fsr2h,f,c
 17788  01466A  50DF               	movf	indf2,w,c
 17789                           
 17790                           ; Switch size 1, requested type "space"
 17791                           ; Number of cases is 2, Range of values is 0 to 1
 17792                           ; switch strategies available:
 17793                           ; Name         Instructions Cycles
 17794                           ; simple_byte            7     4 (average)
 17795                           ;	Chosen strategy is simple_byte
 17796  01466C  0A00               	xorlw	0	; case 0
 17797  01466E  B4D8               	btfsc	status,2,c
 17798  014670  D7F1               	goto	l655
 17799  014672  0A01               	xorlw	1	; case 1
 17800  014674  A4D8               	btfss	status,2,c
 17801  014676  0012               	return	
 17802  014678  D7EF               	goto	l657
 17803  01467A                     __end_of_SPI_DisableISR:
 17804                           	opt stack 0
 17805                           tosu	equ	0xFFF
 17806                           tosh	equ	0xFFE
 17807                           tosl	equ	0xFFD
 17808                           pclath	equ	0xFFA
 17809                           tblptru	equ	0xFF8
 17810                           tblptrh	equ	0xFF7
 17811                           tblptrl	equ	0xFF6
 17812                           tablat	equ	0xFF5
 17813                           prodh	equ	0xFF4
 17814                           prodl	equ	0xFF3
 17815                           intcon	equ	0xFF2
 17816                           postinc0	equ	0xFEE
 17817                           wreg	equ	0xFE8
 17818                           indf1	equ	0xFE7
 17819                           postdec1	equ	0xFE5
 17820                           fsr1h	equ	0xFE2
 17821                           fsr1l	equ	0xFE1
 17822                           indf2	equ	0xFDF
 17823                           postinc2	equ	0xFDE
 17824                           postdec2	equ	0xFDD
 17825                           plusw2	equ	0xFDB
 17826                           fsr2h	equ	0xFDA
 17827                           fsr2l	equ	0xFD9
 17828                           status	equ	0xFD8
 17829                           
 17830 ;; *************** function _SPI_DCS *****************
 17831 ;; Defined at:
 17832 ;;		line 219 in file "Library/SPI.c"
 17833 ;; Parameters:    Size  Location     Type
 17834 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 17835 ;;		 -> SPI1(11), SPI2(11), 
 17836 ;; Auto vars:     Size  Location     Type
 17837 ;;		None
 17838 ;; Return value:  Size  Location     Type
 17839 ;;                  1    wreg      void 
 17840 ;; Registers used:
 17841 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 17842 ;; Tracked objects:
 17843 ;;		On entry : 0/0
 17844 ;;		On exit  : 0/0
 17845 ;;		Unchanged: 0/0
 17846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17847 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17850 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17851 ;;Total ram usage:        2 bytes
 17852 ;; Hardware stack levels used:    1
 17853 ;; Hardware stack levels required when called:    7
 17854 ;; This function calls:
 17855 ;;		Nothing
 17856 ;; This function is called by:
 17857 ;;		_SPI_Init
 17858 ;; This function uses a non-reentrant model
 17859 ;;
 17860                           
 17861                           	psect	text96
 17862  01456C                     __ptext96:
 17863                           	opt stack 0
 17864  01456C                     _SPI_DCS:
 17865                           	opt stack 20
 17866                           
 17867                           ;SPI.c: 221: if (pInput->mChannel == eSPI1)
 17868                           
 17869                           ; BSR set to: 0
 17870                           ;incstack = 0
 17871  01456C  0100               	movlb	0	; () banked
 17872  01456E  EE20 F002          	lfsr	2,2
 17873  014572  51B5               	movf	SPI_DCS@pInput& (0+255),w,b
 17874  014574  26D9               	addwf	fsr2l,f,c
 17875  014576  51B6               	movf	(SPI_DCS@pInput+1)& (0+255),w,b
 17876  014578  22DA               	addwfc	fsr2h,f,c
 17877  01457A  50DF               	movf	indf2,w,c
 17878  01457C  A4D8               	btfss	status,2,c
 17879  01457E  D007               	goto	l673
 17880                           
 17881                           ; BSR set to: 0
 17882                           ;SPI.c: 222: PortC.mOutput->mBit2 = 1;
 17883  014580  C0A7  FFD9         	movff	_PortC+4,fsr2l
 17884  014584  C0A8  FFDA         	movff	_PortC+5,fsr2h
 17885  014588  0100               	movlb	0	; () banked
 17886  01458A  84DF               	bsf	indf2,2,c
 17887  01458C  0012               	return	
 17888  01458E                     l673:
 17889                           
 17890                           ; BSR set to: 0
 17891                           ;SPI.c: 223: else
 17892                           ;SPI.c: 224: PortD.mOutput->mBit7 = 1;
 17893                           
 17894                           ; BSR set to: 0
 17895  01458E  C09D  FFD9         	movff	_PortD+4,fsr2l
 17896  014592  C09E  FFDA         	movff	_PortD+5,fsr2h
 17897  014596  0100               	movlb	0	; () banked
 17898  014598  8EDF               	bsf	indf2,7,c
 17899  01459A  0012               	return	
 17900  01459C                     __end_of_SPI_DCS:
 17901                           	opt stack 0
 17902                           tosu	equ	0xFFF
 17903                           tosh	equ	0xFFE
 17904                           tosl	equ	0xFFD
 17905                           pclath	equ	0xFFA
 17906                           tblptru	equ	0xFF8
 17907                           tblptrh	equ	0xFF7
 17908                           tblptrl	equ	0xFF6
 17909                           tablat	equ	0xFF5
 17910                           prodh	equ	0xFF4
 17911                           prodl	equ	0xFF3
 17912                           intcon	equ	0xFF2
 17913                           postinc0	equ	0xFEE
 17914                           wreg	equ	0xFE8
 17915                           indf1	equ	0xFE7
 17916                           postdec1	equ	0xFE5
 17917                           fsr1h	equ	0xFE2
 17918                           fsr1l	equ	0xFE1
 17919                           indf2	equ	0xFDF
 17920                           postinc2	equ	0xFDE
 17921                           postdec2	equ	0xFDD
 17922                           plusw2	equ	0xFDB
 17923                           fsr2h	equ	0xFDA
 17924                           fsr2l	equ	0xFD9
 17925                           status	equ	0xFD8
 17926                           
 17927 ;; *************** function _Button_Init *****************
 17928 ;; Defined at:
 17929 ;;		line 18 in file "Library/Button.c"
 17930 ;; Parameters:    Size  Location     Type
 17931 ;;  pInput          2    0[BANK1 ] const PTR struct Button
 17932 ;;		 -> DIPSwitch(10), TestButton(10), HMIBoard(58), 
 17933 ;;  pThreshold      2    2[BANK1 ] unsigned short 
 17934 ;;  pInitIO         3    4[BANK1 ] PTR FTN()void 
 17935 ;;		 -> MXK_InitDIPSwitch(1), MXK_InitTestButton(1), HMI_InitButtons(1), 
 17936 ;;  pGetState       3    7[BANK1 ] PTR FTN()unsigned char 
 17937 ;;		 -> MXK_DIPSwitch(1), MXK_TestButton(1), HMI_DIPSwitch(1), HMI_DownSwitch(1), 
 17938 ;;		 -> HMI_UpSwitch(1), HMI_RightSwitch(1), HMI_LeftSwitch(1), 
 17939 ;;  pFunction       3   10[BANK1 ] PTR FTN(unsigned char ,)
 17940 ;;		 -> Event_TestButton(1), Event_DIPSwitch(1), Event_NULL(1), 
 17941 ;; Auto vars:     Size  Location     Type
 17942 ;;		None
 17943 ;; Return value:  Size  Location     Type
 17944 ;;                  1    wreg      void 
 17945 ;; Registers used:
 17946 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 17947 ;; Tracked objects:
 17948 ;;		On entry : 0/0
 17949 ;;		On exit  : 0/0
 17950 ;;		Unchanged: 0/0
 17951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 17952 ;;      Params:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17953 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17954 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17955 ;;      Totals:         0       0      13       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 17956 ;;Total ram usage:       13 bytes
 17957 ;; Hardware stack levels used:    1
 17958 ;; Hardware stack levels required when called:   15
 17959 ;; This function calls:
 17960 ;;		_HMI_InitButtons
 17961 ;;		_MXK_InitDIPSwitch
 17962 ;;		_MXK_InitTestButton
 17963 ;; This function is called by:
 17964 ;;		_HMI_Init
 17965 ;;		_FunctInitButton
 17966 ;; This function uses a non-reentrant model
 17967 ;;
 17968                           
 17969                           	psect	text97
 17970  012696                     __ptext97:
 17971                           	opt stack 0
 17972  012696                     _Button_Init:
 17973                           	opt stack 14
 17974                           
 17975                           ;Button.c: 21: if(pInput==(void*)0)
 17976                           
 17977                           ; BSR set to: 0
 17978                           ;incstack = 0
 17979  012696  0101               	movlb	1	; () banked
 17980  012698  5100               	movf	Button_Init@pInput& (0+255),w,b
 17981  01269A  0101               	movlb	1	; () banked
 17982  01269C  1101               	iorwf	(Button_Init@pInput+1)& (0+255),w,b
 17983  01269E  B4D8               	btfsc	status,2,c
 17984  0126A0  0012               	return	
 17985                           
 17986                           ; BSR set to: 1
 17987                           ;Button.c: 23: if(pInitIO==(void*)0)
 17988                           
 17989                           ; BSR set to: 1
 17990                           
 17991                           ; BSR set to: 1
 17992                           ;Button.c: 22: return;
 17993  0126A2  0101               	movlb	1	; () banked
 17994  0126A4  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 17995  0126A6  0101               	movlb	1	; () banked
 17996  0126A8  1105               	iorwf	(Button_Init@pInitIO+1)& (0+255),w,b
 17997  0126AA  0101               	movlb	1	; () banked
 17998  0126AC  1106               	iorwf	(Button_Init@pInitIO+2)& (0+255),w,b
 17999  0126AE  B4D8               	btfsc	status,2,c
 18000  0126B0  0012               	return	
 18001                           
 18002                           ; BSR set to: 1
 18003                           ;Button.c: 25: if(pGetState==(void*)0)
 18004                           
 18005                           ; BSR set to: 1
 18006                           
 18007                           ; BSR set to: 1
 18008                           ;Button.c: 24: return;
 18009  0126B2  0101               	movlb	1	; () banked
 18010  0126B4  5107               	movf	Button_Init@pGetState& (0+255),w,b
 18011  0126B6  0101               	movlb	1	; () banked
 18012  0126B8  1108               	iorwf	(Button_Init@pGetState+1)& (0+255),w,b
 18013  0126BA  0101               	movlb	1	; () banked
 18014  0126BC  1109               	iorwf	(Button_Init@pGetState+2)& (0+255),w,b
 18015  0126BE  B4D8               	btfsc	status,2,c
 18016  0126C0  0012               	return	
 18017                           
 18018                           ; BSR set to: 1
 18019                           ;Button.c: 27: if(pFunction==(void*)0)
 18020                           
 18021                           ; BSR set to: 1
 18022                           
 18023                           ; BSR set to: 1
 18024                           ;Button.c: 26: return;
 18025  0126C2  0101               	movlb	1	; () banked
 18026  0126C4  510A               	movf	Button_Init@pFunction& (0+255),w,b
 18027  0126C6  0101               	movlb	1	; () banked
 18028  0126C8  110B               	iorwf	(Button_Init@pFunction+1)& (0+255),w,b
 18029  0126CA  0101               	movlb	1	; () banked
 18030  0126CC  110C               	iorwf	(Button_Init@pFunction+2)& (0+255),w,b
 18031  0126CE  B4D8               	btfsc	status,2,c
 18032  0126D0  0012               	return	
 18033                           
 18034                           ; BSR set to: 1
 18035                           ;Button.c: 30: if(pThreshold == 0)
 18036                           
 18037                           ; BSR set to: 1
 18038                           
 18039                           ; BSR set to: 1
 18040                           ;Button.c: 28: return;
 18041  0126D2  0101               	movlb	1	; () banked
 18042  0126D4  5102               	movf	Button_Init@pThreshold& (0+255),w,b
 18043  0126D6  0101               	movlb	1	; () banked
 18044  0126D8  1103               	iorwf	(Button_Init@pThreshold+1)& (0+255),w,b
 18045  0126DA  A4D8               	btfss	status,2,c
 18046  0126DC  D005               	goto	l8
 18047                           
 18048                           ; BSR set to: 1
 18049                           ;Button.c: 31: pThreshold = 1;
 18050  0126DE  0E00               	movlw	0
 18051  0126E0  0101               	movlb	1	; () banked
 18052  0126E2  6F03               	movwf	(Button_Init@pThreshold+1)& (0+255),b
 18053  0126E4  0E01               	movlw	1
 18054  0126E6  6F02               	movwf	Button_Init@pThreshold& (0+255),b
 18055  0126E8                     l8:
 18056                           
 18057                           ; BSR set to: 1
 18058                           ;Button.c: 34: pInput->mState = 0;
 18059                           
 18060                           ; BSR set to: 1
 18061  0126E8  C100  FFD9         	movff	Button_Init@pInput,fsr2l
 18062  0126EC  C101  FFDA         	movff	Button_Init@pInput+1,fsr2h
 18063  0126F0  0E00               	movlw	0
 18064  0126F2  6EDF               	movwf	indf2,c
 18065                           
 18066                           ; BSR set to: 1
 18067                           ;Button.c: 35: pInput->mCount = 0;
 18068  0126F4  0101               	movlb	1	; () banked
 18069  0126F6  EE20 F001          	lfsr	2,1
 18070  0126FA  5100               	movf	Button_Init@pInput& (0+255),w,b
 18071  0126FC  26D9               	addwf	fsr2l,f,c
 18072  0126FE  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18073  012700  22DA               	addwfc	fsr2h,f,c
 18074  012702  0E00               	movlw	0
 18075  012704  6EDF               	movwf	indf2,c
 18076                           
 18077                           ; BSR set to: 1
 18078                           ;Button.c: 36: pInput->mThreshold = pThreshold;
 18079  012706  0101               	movlb	1	; () banked
 18080  012708  EE20 F002          	lfsr	2,2
 18081  01270C  5100               	movf	Button_Init@pInput& (0+255),w,b
 18082  01270E  26D9               	addwf	fsr2l,f,c
 18083  012710  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18084  012712  22DA               	addwfc	fsr2h,f,c
 18085  012714  C102  FFDE         	movff	Button_Init@pThreshold,postinc2
 18086  012718  C103  FFDD         	movff	Button_Init@pThreshold+1,postdec2
 18087                           
 18088                           ; BSR set to: 1
 18089                           ;Button.c: 37: pInput->mFunction = pFunction;
 18090  01271C  0101               	movlb	1	; () banked
 18091  01271E  EE20 F004          	lfsr	2,4
 18092  012722  5100               	movf	Button_Init@pInput& (0+255),w,b
 18093  012724  26D9               	addwf	fsr2l,f,c
 18094  012726  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18095  012728  22DA               	addwfc	fsr2h,f,c
 18096  01272A  C10A  FFDE         	movff	Button_Init@pFunction,postinc2
 18097  01272E  C10B  FFDE         	movff	Button_Init@pFunction+1,postinc2
 18098  012732  C10C  FFDE         	movff	Button_Init@pFunction+2,postinc2
 18099                           
 18100                           ; BSR set to: 1
 18101                           ;Button.c: 38: pInput->mGetState = pGetState;
 18102  012736  0101               	movlb	1	; () banked
 18103  012738  EE20 F007          	lfsr	2,7
 18104  01273C  5100               	movf	Button_Init@pInput& (0+255),w,b
 18105  01273E  26D9               	addwf	fsr2l,f,c
 18106  012740  5101               	movf	(Button_Init@pInput+1)& (0+255),w,b
 18107  012742  22DA               	addwfc	fsr2h,f,c
 18108  012744  C107  FFDE         	movff	Button_Init@pGetState,postinc2
 18109  012748  C108  FFDE         	movff	Button_Init@pGetState+1,postinc2
 18110  01274C  C109  FFDE         	movff	Button_Init@pGetState+2,postinc2
 18111                           
 18112                           ; BSR set to: 1
 18113                           ;Button.c: 41: pInitIO();
 18114  012750  D801               	call	u7578
 18115  012752  0012               	return	
 18116  012754                     u7578:
 18117  012754  0005               	push	
 18118  012756  6EFA               	movwf	pclath,c
 18119  012758  0101               	movlb	1	; () banked
 18120  01275A  5104               	movf	Button_Init@pInitIO& (0+255),w,b
 18121  01275C  6EFD               	movwf	tosl,c
 18122  01275E  5105               	movf	(Button_Init@pInitIO+1)& (0+255),w,b
 18123  012760  6EFE               	movwf	tosh,c
 18124  012762  5106               	movf	(Button_Init@pInitIO+2)& (0+255),w,b
 18125  012764  6EFF               	movwf	tosu,c
 18126  012766  50FA               	movf	pclath,w,c
 18127  012768  0012               	return		;indir
 18128  01276A                     __end_of_Button_Init:
 18129                           	opt stack 0
 18130                           tosu	equ	0xFFF
 18131                           tosh	equ	0xFFE
 18132                           tosl	equ	0xFFD
 18133                           pclath	equ	0xFFA
 18134                           tblptru	equ	0xFF8
 18135                           tblptrh	equ	0xFF7
 18136                           tblptrl	equ	0xFF6
 18137                           tablat	equ	0xFF5
 18138                           prodh	equ	0xFF4
 18139                           prodl	equ	0xFF3
 18140                           intcon	equ	0xFF2
 18141                           postinc0	equ	0xFEE
 18142                           wreg	equ	0xFE8
 18143                           indf1	equ	0xFE7
 18144                           postdec1	equ	0xFE5
 18145                           fsr1h	equ	0xFE2
 18146                           fsr1l	equ	0xFE1
 18147                           indf2	equ	0xFDF
 18148                           postinc2	equ	0xFDE
 18149                           postdec2	equ	0xFDD
 18150                           plusw2	equ	0xFDB
 18151                           fsr2h	equ	0xFDA
 18152                           fsr2l	equ	0xFD9
 18153                           status	equ	0xFD8
 18154                           
 18155 ;; *************** function _MXK_InitDIPSwitch *****************
 18156 ;; Defined at:
 18157 ;;		line 20 in file "Library/MXK.c"
 18158 ;; Parameters:    Size  Location     Type
 18159 ;;		None
 18160 ;; Auto vars:     Size  Location     Type
 18161 ;;		None
 18162 ;; Return value:  Size  Location     Type
 18163 ;;                  1    wreg      void 
 18164 ;; Registers used:
 18165 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18166 ;; Tracked objects:
 18167 ;;		On entry : 0/0
 18168 ;;		On exit  : 0/0
 18169 ;;		Unchanged: 0/0
 18170 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18171 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18172 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18173 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18174 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18175 ;;Total ram usage:        0 bytes
 18176 ;; Hardware stack levels used:    1
 18177 ;; Hardware stack levels required when called:   14
 18178 ;; This function calls:
 18179 ;;		_Port_SetQuadType
 18180 ;; This function is called by:
 18181 ;;		_FunctInitButton
 18182 ;;		_Button_Init
 18183 ;; This function uses a non-reentrant model
 18184 ;;
 18185                           
 18186                           	psect	text98
 18187  014778                     __ptext98:
 18188                           	opt stack 0
 18189  014778                     _MXK_InitDIPSwitch:
 18190                           	opt stack 14
 18191                           
 18192                           ;MXK.c: 22: Port_SetQuadType(&PortD, eP0_3, eTypeInput);
 18193                           
 18194                           ;incstack = 0
 18195  014778  0E99               	movlw	low _PortD
 18196  01477A  0100               	movlb	0	; () banked
 18197  01477C  6FEB               	movwf	Port_SetQuadType@pInput& (0+255),b
 18198  01477E  0E00               	movlw	high _PortD
 18199  014780  0100               	movlb	0	; () banked
 18200  014782  6FEC               	movwf	(Port_SetQuadType@pInput+1)& (0+255),b
 18201  014784  0E00               	movlw	0
 18202  014786  0100               	movlb	0	; () banked
 18203  014788  6FED               	movwf	Port_SetQuadType@pQuad& (0+255),b
 18204  01478A  0E00               	movlw	0
 18205  01478C  0100               	movlb	0	; () banked
 18206  01478E  6FEE               	movwf	Port_SetQuadType@pType& (0+255),b
 18207  014790  EC2E  F085         	call	_Port_SetQuadType	;wreg free
 18208  014794  0012               	return		;funcret
 18209  014796                     __end_of_MXK_InitDIPSwitch:
 18210                           	opt stack 0
 18211                           tosu	equ	0xFFF
 18212                           tosh	equ	0xFFE
 18213                           tosl	equ	0xFFD
 18214                           pclath	equ	0xFFA
 18215                           tblptru	equ	0xFF8
 18216                           tblptrh	equ	0xFF7
 18217                           tblptrl	equ	0xFF6
 18218                           tablat	equ	0xFF5
 18219                           prodh	equ	0xFF4
 18220                           prodl	equ	0xFF3
 18221                           intcon	equ	0xFF2
 18222                           postinc0	equ	0xFEE
 18223                           wreg	equ	0xFE8
 18224                           indf1	equ	0xFE7
 18225                           postdec1	equ	0xFE5
 18226                           fsr1h	equ	0xFE2
 18227                           fsr1l	equ	0xFE1
 18228                           indf2	equ	0xFDF
 18229                           postinc2	equ	0xFDE
 18230                           postdec2	equ	0xFDD
 18231                           plusw2	equ	0xFDB
 18232                           fsr2h	equ	0xFDA
 18233                           fsr2l	equ	0xFD9
 18234                           status	equ	0xFD8
 18235                           
 18236 ;; *************** function _HMI_InitButtons *****************
 18237 ;; Defined at:
 18238 ;;		line 21 in file "HMI.c"
 18239 ;; Parameters:    Size  Location     Type
 18240 ;;		None
 18241 ;; Auto vars:     Size  Location     Type
 18242 ;;		None
 18243 ;; Return value:  Size  Location     Type
 18244 ;;                  1    wreg      void 
 18245 ;; Registers used:
 18246 ;;		wreg, status,2
 18247 ;; Tracked objects:
 18248 ;;		On entry : 0/0
 18249 ;;		On exit  : 0/0
 18250 ;;		Unchanged: 0/0
 18251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18252 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18255 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18256 ;;Total ram usage:        0 bytes
 18257 ;; Hardware stack levels used:    1
 18258 ;; Hardware stack levels required when called:    7
 18259 ;; This function calls:
 18260 ;;		Nothing
 18261 ;; This function is called by:
 18262 ;;		_HMI_Init
 18263 ;;		_Button_Init
 18264 ;; This function uses a non-reentrant model
 18265 ;;
 18266                           
 18267                           	psect	text99
 18268  0149F8                     __ptext99:
 18269                           	opt stack 0
 18270  0149F8                     _HMI_InitButtons:
 18271                           	opt stack 21
 18272                           
 18273                           ;HMI.c: 23: TRISE = 0xFC;
 18274                           
 18275                           ;incstack = 0
 18276  0149F8  0EFC               	movlw	252
 18277  0149FA  6E96               	movwf	3990,c	;volatile
 18278  0149FC  0012               	return		;funcret
 18279  0149FE                     __end_of_HMI_InitButtons:
 18280                           	opt stack 0
 18281                           tosu	equ	0xFFF
 18282                           tosh	equ	0xFFE
 18283                           tosl	equ	0xFFD
 18284                           pclath	equ	0xFFA
 18285                           tblptru	equ	0xFF8
 18286                           tblptrh	equ	0xFF7
 18287                           tblptrl	equ	0xFF6
 18288                           tablat	equ	0xFF5
 18289                           prodh	equ	0xFF4
 18290                           prodl	equ	0xFF3
 18291                           intcon	equ	0xFF2
 18292                           postinc0	equ	0xFEE
 18293                           wreg	equ	0xFE8
 18294                           indf1	equ	0xFE7
 18295                           postdec1	equ	0xFE5
 18296                           fsr1h	equ	0xFE2
 18297                           fsr1l	equ	0xFE1
 18298                           indf2	equ	0xFDF
 18299                           postinc2	equ	0xFDE
 18300                           postdec2	equ	0xFDD
 18301                           plusw2	equ	0xFDB
 18302                           fsr2h	equ	0xFDA
 18303                           fsr2l	equ	0xFD9
 18304                           status	equ	0xFD8
 18305                           
 18306 ;; *************** function _MXK_InitTestButton *****************
 18307 ;; Defined at:
 18308 ;;		line 10 in file "Library/MXK.c"
 18309 ;; Parameters:    Size  Location     Type
 18310 ;;		None
 18311 ;; Auto vars:     Size  Location     Type
 18312 ;;		None
 18313 ;; Return value:  Size  Location     Type
 18314 ;;                  1    wreg      void 
 18315 ;; Registers used:
 18316 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18317 ;; Tracked objects:
 18318 ;;		On entry : 0/0
 18319 ;;		On exit  : 0/0
 18320 ;;		Unchanged: 0/0
 18321 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18322 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18323 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18324 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18325 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18326 ;;Total ram usage:        0 bytes
 18327 ;; Hardware stack levels used:    1
 18328 ;; Hardware stack levels required when called:   12
 18329 ;; This function calls:
 18330 ;;		_Port_SetPinType
 18331 ;; This function is called by:
 18332 ;;		_FunctInitButton
 18333 ;;		_Button_Init
 18334 ;; This function uses a non-reentrant model
 18335 ;;
 18336                           
 18337                           	psect	text100
 18338  014796                     __ptext100:
 18339                           	opt stack 0
 18340  014796                     _MXK_InitTestButton:
 18341                           	opt stack 16
 18342                           
 18343                           ;MXK.c: 12: Port_SetPinType(&PortB, eP4, eTypeInput);
 18344                           
 18345                           ;incstack = 0
 18346  014796  0E9C               	movlw	low _PortB
 18347  014798  0100               	movlb	0	; () banked
 18348  01479A  6FDB               	movwf	Port_SetPinType@pInput& (0+255),b
 18349  01479C  0E03               	movlw	high _PortB
 18350  01479E  0100               	movlb	0	; () banked
 18351  0147A0  6FDC               	movwf	(Port_SetPinType@pInput+1)& (0+255),b
 18352  0147A2  0E04               	movlw	4
 18353  0147A4  0100               	movlb	0	; () banked
 18354  0147A6  6FDD               	movwf	Port_SetPinType@pPin& (0+255),b
 18355  0147A8  0E00               	movlw	0
 18356  0147AA  0100               	movlb	0	; () banked
 18357  0147AC  6FDE               	movwf	Port_SetPinType@pType& (0+255),b
 18358  0147AE  EC3D  F08B         	call	_Port_SetPinType	;wreg free
 18359  0147B2  0012               	return		;funcret
 18360  0147B4                     __end_of_MXK_InitTestButton:
 18361                           	opt stack 0
 18362                           tosu	equ	0xFFF
 18363                           tosh	equ	0xFFE
 18364                           tosl	equ	0xFFD
 18365                           pclath	equ	0xFFA
 18366                           tblptru	equ	0xFF8
 18367                           tblptrh	equ	0xFF7
 18368                           tblptrl	equ	0xFF6
 18369                           tablat	equ	0xFF5
 18370                           prodh	equ	0xFF4
 18371                           prodl	equ	0xFF3
 18372                           intcon	equ	0xFF2
 18373                           postinc0	equ	0xFEE
 18374                           wreg	equ	0xFE8
 18375                           indf1	equ	0xFE7
 18376                           postdec1	equ	0xFE5
 18377                           fsr1h	equ	0xFE2
 18378                           fsr1l	equ	0xFE1
 18379                           indf2	equ	0xFDF
 18380                           postinc2	equ	0xFDE
 18381                           postdec2	equ	0xFDD
 18382                           plusw2	equ	0xFDB
 18383                           fsr2h	equ	0xFDA
 18384                           fsr2l	equ	0xFD9
 18385                           status	equ	0xFD8
 18386                           
 18387 ;; *************** function _Port_SetPinType *****************
 18388 ;; Defined at:
 18389 ;;		line 189 in file "Library/Port.c"
 18390 ;; Parameters:    Size  Location     Type
 18391 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 18392 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 18393 ;;		 -> PortD(10), PortC(10), PortF(10), 
 18394 ;;  pPin            1   40[BANK0 ] enum E6750
 18395 ;;  pType           1   41[BANK0 ] enum E6795
 18396 ;; Auto vars:     Size  Location     Type
 18397 ;;  Props           2   43[BANK0 ] PTR struct PortProperty
 18398 ;;		 -> PortG_Property(2), PortF_Property(2), PortE_Property(2), PortD_Property(2), 
 18399 ;;		 -> PortC_Property(2), PortB_Property(2), PortA_Property(2), NULL(0), 
 18400 ;;  Output          1   42[BANK0 ] enum E6475
 18401 ;; Return value:  Size  Location     Type
 18402 ;;                  1    wreg      enum E6475
 18403 ;; Registers used:
 18404 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18405 ;; Tracked objects:
 18406 ;;		On entry : 0/0
 18407 ;;		On exit  : 0/0
 18408 ;;		Unchanged: 0/0
 18409 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18410 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18411 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18412 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18413 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18414 ;;Total ram usage:        7 bytes
 18415 ;; Hardware stack levels used:    1
 18416 ;; Hardware stack levels required when called:   11
 18417 ;; This function calls:
 18418 ;;		_Byte_SetBit
 18419 ;;		_PortProperty_Valid
 18420 ;;		_Word_SetPair
 18421 ;; This function is called by:
 18422 ;;		_Configure_GPIOs
 18423 ;;		_LED_Init
 18424 ;;		_Port_Init
 18425 ;;		_SPI_Init
 18426 ;;		_MXK_InitTestButton
 18427 ;;		_MXK_Init
 18428 ;;		_I2C_Init
 18429 ;;		_Motor_Init
 18430 ;; This function uses a non-reentrant model
 18431 ;;
 18432                           
 18433                           	psect	text101
 18434  01167A                     __ptext101:
 18435                           	opt stack 0
 18436  01167A                     _Port_SetPinType:
 18437                           	opt stack 18
 18438                           
 18439                           ;Port.c: 191: PortProperty * Props = pInput->mProperties;
 18440                           
 18441                           ;incstack = 0
 18442  01167A  C0DB  FFD9         	movff	Port_SetPinType@pInput,fsr2l
 18443  01167E  C0DC  FFDA         	movff	Port_SetPinType@pInput+1,fsr2h
 18444  011682  CFDE F0E0          	movff	postinc2,Port_SetPinType@Props
 18445  011686  CFDD F0E1          	movff	postdec2,Port_SetPinType@Props+1
 18446                           
 18447                           ;Port.c: 192: ePinError Output = ePinErrorState;
 18448  01168A  0E05               	movlw	5
 18449  01168C  0100               	movlb	0	; () banked
 18450  01168E  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18451                           
 18452                           ;Port.c: 193: switch (pType)
 18453  011690  D0B5               	goto	l412
 18454  011692                     
 18455                           ; BSR set to: 0
 18456                           ;Port.c: 197: {
 18457                           ;Port.c: 199: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18458                           
 18459                           ; BSR set to: 0
 18460  011692  0100               	movlb	0	; () banked
 18461  011694  EE20 F002          	lfsr	2,2
 18462  011698  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18463  01169A  26D9               	addwf	fsr2l,f,c
 18464  01169C  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18465  01169E  22DA               	addwfc	fsr2h,f,c
 18466  0116A0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18467  0116A4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18468  0116A8  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18469  0116AC  0E01               	movlw	1
 18470  0116AE  0100               	movlb	0	; () banked
 18471  0116B0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18472  0116B2  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18473                           
 18474                           ;Port.c: 203: break;
 18475  0116B6  D0B0               	goto	l414
 18476  0116B8                     
 18477                           ;Port.c: 207: if ((Output = PortProperty_Valid(Props, eLow, pPin)) == ePinErrorNone)
 18478  0116B8  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18479  0116BC  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18480  0116C0  0E01               	movlw	1
 18481  0116C2  0100               	movlb	0	; () banked
 18482  0116C4  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18483  0116C6  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18484  0116CA  ECFF  F09A         	call	_PortProperty_Valid	;wreg free
 18485  0116CE  0100               	movlb	0	; () banked
 18486  0116D0  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18487  0116D2  0100               	movlb	0	; () banked
 18488  0116D4  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18489  0116D6  A4D8               	btfss	status,2,c
 18490  0116D8  0012               	return	
 18491                           
 18492                           ; BSR set to: 0
 18493                           ;Port.c: 208: {
 18494                           ;Port.c: 210: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18495  0116DA  0100               	movlb	0	; () banked
 18496  0116DC  EE20 F002          	lfsr	2,2
 18497  0116E0  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18498  0116E2  26D9               	addwf	fsr2l,f,c
 18499  0116E4  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18500  0116E6  22DA               	addwfc	fsr2h,f,c
 18501  0116E8  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18502  0116EC  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18503  0116F0  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18504  0116F4  0E00               	movlw	0
 18505  0116F6  0100               	movlb	0	; () banked
 18506  0116F8  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18507  0116FA  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18508                           
 18509                           ;Port.c: 213: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18510  0116FE  0100               	movlb	0	; () banked
 18511  011700  EE20 F004          	lfsr	2,4
 18512  011704  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18513  011706  26D9               	addwf	fsr2l,f,c
 18514  011708  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18515  01170A  22DA               	addwfc	fsr2h,f,c
 18516  01170C  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18517  011710  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18518  011714  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18519  011718  0E00               	movlw	0
 18520  01171A  0100               	movlb	0	; () banked
 18521  01171C  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18522  01171E  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18523                           
 18524                           ;Port.c: 214: break;
 18525  011722  D07A               	goto	l414
 18526  011724                     
 18527                           ;Port.c: 219: if ((Output = PortProperty_Valid(Props, eHigh, pPin)) == ePinErrorNone)
 18528                           
 18529                           ;Port.c: 218: case eTypeOutputOpenSource:
 18530  011724  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18531  011728  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18532  01172C  0E02               	movlw	2
 18533  01172E  0100               	movlb	0	; () banked
 18534  011730  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18535  011732  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18536  011736  ECFF  F09A         	call	_PortProperty_Valid	;wreg free
 18537  01173A  0100               	movlb	0	; () banked
 18538  01173C  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18539  01173E  0100               	movlb	0	; () banked
 18540  011740  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18541  011742  A4D8               	btfss	status,2,c
 18542  011744  0012               	return	
 18543                           
 18544                           ; BSR set to: 0
 18545                           ;Port.c: 220: {
 18546                           ;Port.c: 222: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)1);
 18547  011746  0100               	movlb	0	; () banked
 18548  011748  EE20 F002          	lfsr	2,2
 18549  01174C  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18550  01174E  26D9               	addwf	fsr2l,f,c
 18551  011750  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18552  011752  22DA               	addwfc	fsr2h,f,c
 18553  011754  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18554  011758  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18555  01175C  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18556  011760  0E01               	movlw	1
 18557  011762  0100               	movlb	0	; () banked
 18558  011764  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18559  011766  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18560                           
 18561                           ;Port.c: 225: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 1);
 18562  01176A  0100               	movlb	0	; () banked
 18563  01176C  EE20 F004          	lfsr	2,4
 18564  011770  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18565  011772  26D9               	addwf	fsr2l,f,c
 18566  011774  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18567  011776  22DA               	addwfc	fsr2h,f,c
 18568  011778  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18569  01177C  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18570  011780  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18571  011784  0E01               	movlw	1
 18572  011786  0100               	movlb	0	; () banked
 18573  011788  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18574  01178A  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18575                           
 18576                           ;Port.c: 226: break;
 18577  01178E  D044               	goto	l414
 18578  011790                     
 18579                           ;Port.c: 231: if ((Output = PortProperty_Valid(Props, eHL, pPin)) == ePinErrorNone)
 18580                           
 18581                           ;Port.c: 230: case eTypeOutputPushPull:
 18582  011790  C0E0  F0C4         	movff	Port_SetPinType@Props,PortProperty_Valid@pInput
 18583  011794  C0E1  F0C5         	movff	Port_SetPinType@Props+1,PortProperty_Valid@pInput+1
 18584  011798  0E00               	movlw	0
 18585  01179A  0100               	movlb	0	; () banked
 18586  01179C  6FC6               	movwf	PortProperty_Valid@pPinDrive& (0+255),b
 18587  01179E  C0DD  F0C7         	movff	Port_SetPinType@pPin,PortProperty_Valid@pPin
 18588  0117A2  ECFF  F09A         	call	_PortProperty_Valid	;wreg free
 18589  0117A6  0100               	movlb	0	; () banked
 18590  0117A8  6FDF               	movwf	Port_SetPinType@Output& (0+255),b
 18591  0117AA  0100               	movlb	0	; () banked
 18592  0117AC  51DF               	movf	Port_SetPinType@Output& (0+255),w,b
 18593  0117AE  A4D8               	btfss	status,2,c
 18594  0117B0  0012               	return	
 18595                           
 18596                           ; BSR set to: 0
 18597                           ;Port.c: 232: {
 18598                           ;Port.c: 234: Byte_SetBit(pInput->mDirection, (UINT8)pPin, (UINT8)0);
 18599  0117B2  0100               	movlb	0	; () banked
 18600  0117B4  EE20 F002          	lfsr	2,2
 18601  0117B8  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18602  0117BA  26D9               	addwf	fsr2l,f,c
 18603  0117BC  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18604  0117BE  22DA               	addwfc	fsr2h,f,c
 18605  0117C0  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18606  0117C4  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18607  0117C8  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18608  0117CC  0E00               	movlw	0
 18609  0117CE  0100               	movlb	0	; () banked
 18610  0117D0  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18611  0117D2  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18612                           
 18613                           ;Port.c: 237: Byte_SetBit(pInput->mOutput, (UINT8)pPin, 0);
 18614  0117D6  0100               	movlb	0	; () banked
 18615  0117D8  EE20 F004          	lfsr	2,4
 18616  0117DC  51DB               	movf	Port_SetPinType@pInput& (0+255),w,b
 18617  0117DE  26D9               	addwf	fsr2l,f,c
 18618  0117E0  51DC               	movf	(Port_SetPinType@pInput+1)& (0+255),w,b
 18619  0117E2  22DA               	addwfc	fsr2h,f,c
 18620  0117E4  CFDE F0B5          	movff	postinc2,Byte_SetBit@pInput
 18621  0117E8  CFDD F0B6          	movff	postdec2,Byte_SetBit@pInput+1
 18622  0117EC  C0DD  F0B7         	movff	Port_SetPinType@pPin,Byte_SetBit@pBit
 18623  0117F0  0E00               	movlw	0
 18624  0117F2  0100               	movlb	0	; () banked
 18625  0117F4  6FB8               	movwf	Byte_SetBit@pValue& (0+255),b
 18626  0117F6  EC77  F09E         	call	_Byte_SetBit	;wreg free
 18627                           
 18628                           ;Port.c: 239: }
 18629                           
 18630                           ;Port.c: 238: break;
 18631  0117FA  D00E               	goto	l414
 18632  0117FC                     l412:
 18633  0117FC  0100               	movlb	0	; () banked
 18634  0117FE  51DE               	movf	Port_SetPinType@pType& (0+255),w,b
 18635                           
 18636                           ; Switch size 1, requested type "space"
 18637                           ; Number of cases is 4, Range of values is 0 to 3
 18638                           ; switch strategies available:
 18639                           ; Name         Instructions Cycles
 18640                           ; simple_byte           13     7 (average)
 18641                           ;	Chosen strategy is simple_byte
 18642  011800  0A00               	xorlw	0	; case 0
 18643  011802  B4D8               	btfsc	status,2,c
 18644  011804  D746               	goto	l413
 18645  011806  0A01               	xorlw	1	; case 1
 18646  011808  B4D8               	btfsc	status,2,c
 18647  01180A  D756               	goto	l415
 18648  01180C  0A03               	xorlw	3	; case 2
 18649  01180E  B4D8               	btfsc	status,2,c
 18650  011810  D789               	goto	l417
 18651  011812  0A01               	xorlw	1	; case 3
 18652  011814  B4D8               	btfsc	status,2,c
 18653  011816  D7BC               	goto	l421
 18654  011818                     l414:
 18655                           
 18656                           ;Port.c: 244: Word_SetPair(&pInput->mType, (UINT8)pPin, (UINT8)pType);
 18657                           
 18658                           ; BSR set to: 0
 18659  011818  0E08               	movlw	8
 18660  01181A  0100               	movlb	0	; () banked
 18661  01181C  25DB               	addwf	Port_SetPinType@pInput& (0+255),w,b
 18662  01181E  0100               	movlb	0	; () banked
 18663  011820  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 18664  011822  0E00               	movlw	0
 18665  011824  0100               	movlb	0	; () banked
 18666  011826  21DC               	addwfc	(Port_SetPinType@pInput+1)& (0+255),w,b
 18667  011828  0100               	movlb	0	; () banked
 18668  01182A  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 18669  01182C  C0DD  F0C6         	movff	Port_SetPinType@pPin,Word_SetPair@pPair
 18670  011830  C0DE  F0C7         	movff	Port_SetPinType@pType,Word_SetPair@pValue
 18671  011834  EC10  F0A1         	call	_Word_SetPair	;wreg free
 18672  011838  0012               	return	
 18673  01183A                     __end_of_Port_SetPinType:
 18674                           	opt stack 0
 18675                           tosu	equ	0xFFF
 18676                           tosh	equ	0xFFE
 18677                           tosl	equ	0xFFD
 18678                           pclath	equ	0xFFA
 18679                           tblptru	equ	0xFF8
 18680                           tblptrh	equ	0xFF7
 18681                           tblptrl	equ	0xFF6
 18682                           tablat	equ	0xFF5
 18683                           prodh	equ	0xFF4
 18684                           prodl	equ	0xFF3
 18685                           intcon	equ	0xFF2
 18686                           postinc0	equ	0xFEE
 18687                           wreg	equ	0xFE8
 18688                           indf1	equ	0xFE7
 18689                           postdec1	equ	0xFE5
 18690                           fsr1h	equ	0xFE2
 18691                           fsr1l	equ	0xFE1
 18692                           indf2	equ	0xFDF
 18693                           postinc2	equ	0xFDE
 18694                           postdec2	equ	0xFDD
 18695                           plusw2	equ	0xFDB
 18696                           fsr2h	equ	0xFDA
 18697                           fsr2l	equ	0xFD9
 18698                           status	equ	0xFD8
 18699                           
 18700 ;; *************** function _Byte_SetBit *****************
 18701 ;; Defined at:
 18702 ;;		line 32 in file "Library/Types.c"
 18703 ;; Parameters:    Size  Location     Type
 18704 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 18705 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 18706 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 18707 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 18708 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 18709 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 18710 ;;		 -> NULL(0), 
 18711 ;;  pBit            1    2[BANK0 ] unsigned char 
 18712 ;;  pValue          1    3[BANK0 ] unsigned char 
 18713 ;; Auto vars:     Size  Location     Type
 18714 ;;		None
 18715 ;; Return value:  Size  Location     Type
 18716 ;;                  1    wreg      void 
 18717 ;; Registers used:
 18718 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 18719 ;; Tracked objects:
 18720 ;;		On entry : 0/0
 18721 ;;		On exit  : 0/0
 18722 ;;		Unchanged: 0/0
 18723 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18724 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18725 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18726 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18727 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18728 ;;Total ram usage:        7 bytes
 18729 ;; Hardware stack levels used:    1
 18730 ;; Hardware stack levels required when called:    7
 18731 ;; This function calls:
 18732 ;;		Nothing
 18733 ;; This function is called by:
 18734 ;;		_Port_SetPinType
 18735 ;;		_Port_SetPin
 18736 ;;		_SPI_Init
 18737 ;;		_SPI_MinSpeed
 18738 ;;		_SPI_MaxSpeed
 18739 ;;		_Word_SetBit
 18740 ;;		_I2C_Init
 18741 ;; This function uses a non-reentrant model
 18742 ;;
 18743                           
 18744                           	psect	text102
 18745  013CEE                     __ptext102:
 18746                           	opt stack 0
 18747  013CEE                     _Byte_SetBit:
 18748                           	opt stack 21
 18749                           
 18750                           ;Types.c: 34: pValue &= 1;
 18751                           
 18752                           ;incstack = 0
 18753  013CEE  0E01               	movlw	1
 18754  013CF0  0100               	movlb	0	; () banked
 18755  013CF2  17B8               	andwf	Byte_SetBit@pValue& (0+255),f,b
 18756                           
 18757                           ; BSR set to: 0
 18758                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 18759  013CF4  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18760  013CF8  0E01               	movlw	1
 18761  013CFA  0100               	movlb	0	; () banked
 18762  013CFC  6FBA               	movwf	(??_Byte_SetBit+1)& (0+255),b
 18763  013CFE  0100               	movlb	0	; () banked
 18764  013D00  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 18765  013D02  D003               	goto	u6554
 18766  013D04                     u6555:
 18767  013D04  0100               	movlb	0	; () banked
 18768  013D06  90D8               	bcf	status,0,c
 18769  013D08  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18770  013D0A                     u6554:
 18771  013D0A  0100               	movlb	0	; () banked
 18772  013D0C  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 18773  013D0E  D7FA               	goto	u6555
 18774  013D10  0100               	movlb	0	; () banked
 18775  013D12  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18776  013D14  0AFF               	xorlw	255
 18777  013D16  0100               	movlb	0	; () banked
 18778  013D18  6FBB               	movwf	(??_Byte_SetBit+2)& (0+255),b
 18779  013D1A  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18780  013D1E  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18781  013D22  0100               	movlb	0	; () banked
 18782  013D24  51BB               	movf	(??_Byte_SetBit+2)& (0+255),w,b
 18783  013D26  16DF               	andwf	indf2,f,c
 18784                           
 18785                           ; BSR set to: 0
 18786                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 18787  013D28  C0B7  F0B9         	movff	Byte_SetBit@pBit,??_Byte_SetBit
 18788  013D2C  C0B8  F0BA         	movff	Byte_SetBit@pValue,??_Byte_SetBit+1
 18789  013D30  0100               	movlb	0	; () banked
 18790  013D32  2BB9               	incf	??_Byte_SetBit& (0+255),f,b
 18791  013D34  D003               	goto	u6564
 18792  013D36                     u6565:
 18793  013D36  0100               	movlb	0	; () banked
 18794  013D38  90D8               	bcf	status,0,c
 18795  013D3A  37BA               	rlcf	(??_Byte_SetBit+1)& (0+255),f,b
 18796  013D3C                     u6564:
 18797  013D3C  0100               	movlb	0	; () banked
 18798  013D3E  2FB9               	decfsz	??_Byte_SetBit& (0+255),f,b
 18799  013D40  D7FA               	goto	u6565
 18800  013D42  C0B5  FFD9         	movff	Byte_SetBit@pInput,fsr2l
 18801  013D46  C0B6  FFDA         	movff	Byte_SetBit@pInput+1,fsr2h
 18802  013D4A  0100               	movlb	0	; () banked
 18803  013D4C  51BA               	movf	(??_Byte_SetBit+1)& (0+255),w,b
 18804  013D4E  12DF               	iorwf	indf2,f,c
 18805                           
 18806                           ; BSR set to: 0
 18807  013D50  0012               	return		;funcret
 18808  013D52                     __end_of_Byte_SetBit:
 18809                           	opt stack 0
 18810                           tosu	equ	0xFFF
 18811                           tosh	equ	0xFFE
 18812                           tosl	equ	0xFFD
 18813                           pclath	equ	0xFFA
 18814                           tblptru	equ	0xFF8
 18815                           tblptrh	equ	0xFF7
 18816                           tblptrl	equ	0xFF6
 18817                           tablat	equ	0xFF5
 18818                           prodh	equ	0xFF4
 18819                           prodl	equ	0xFF3
 18820                           intcon	equ	0xFF2
 18821                           postinc0	equ	0xFEE
 18822                           wreg	equ	0xFE8
 18823                           indf1	equ	0xFE7
 18824                           postdec1	equ	0xFE5
 18825                           fsr1h	equ	0xFE2
 18826                           fsr1l	equ	0xFE1
 18827                           indf2	equ	0xFDF
 18828                           postinc2	equ	0xFDE
 18829                           postdec2	equ	0xFDD
 18830                           plusw2	equ	0xFDB
 18831                           fsr2h	equ	0xFDA
 18832                           fsr2l	equ	0xFD9
 18833                           status	equ	0xFD8
 18834                           
 18835 ;; *************** function _Port_SetQuadType *****************
 18836 ;; Defined at:
 18837 ;;		line 399 in file "Library/Port.c"
 18838 ;; Parameters:    Size  Location     Type
 18839 ;;  pInput          2   54[BANK0 ] const PTR struct Port
 18840 ;;		 -> PortB(10), PortD(10), 
 18841 ;;  pQuad           1   56[BANK0 ] enum E6776
 18842 ;;  pType           1   57[BANK0 ] enum E6795
 18843 ;; Auto vars:     Size  Location     Type
 18844 ;;  Output          1   58[BANK0 ] enum E6475
 18845 ;; Return value:  Size  Location     Type
 18846 ;;                  1    wreg      enum E6475
 18847 ;; Registers used:
 18848 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 18849 ;; Tracked objects:
 18850 ;;		On entry : 0/0
 18851 ;;		On exit  : 0/0
 18852 ;;		Unchanged: 0/0
 18853 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 18854 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18855 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18856 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18857 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 18858 ;;Total ram usage:        5 bytes
 18859 ;; Hardware stack levels used:    1
 18860 ;; Hardware stack levels required when called:   13
 18861 ;; This function calls:
 18862 ;;		_Byte_SetQuad
 18863 ;;		_Port_CheckQuadType
 18864 ;;		_Word_SetPair
 18865 ;; This function is called by:
 18866 ;;		_MXK_InitDIPSwitch
 18867 ;;		_MXK_Init
 18868 ;; This function uses a non-reentrant model
 18869 ;;
 18870                           
 18871                           	psect	text103
 18872  010A5C                     __ptext103:
 18873                           	opt stack 0
 18874  010A5C                     _Port_SetQuadType:
 18875                           	opt stack 16
 18876                           
 18877                           ;Port.c: 401: ePinError Output = ePinErrorState;
 18878                           
 18879                           ; BSR set to: 0
 18880                           ;incstack = 0
 18881  010A5C  0E05               	movlw	5
 18882  010A5E  0100               	movlb	0	; () banked
 18883  010A60  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18884                           
 18885                           ;Port.c: 403: switch (pType)
 18886  010A62  D0C7               	goto	l476
 18887  010A64                     
 18888                           ; BSR set to: 0
 18889                           ;Port.c: 407: {
 18890                           ;Port.c: 409: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18891                           
 18892                           ; BSR set to: 0
 18893  010A64  0100               	movlb	0	; () banked
 18894  010A66  EE20 F002          	lfsr	2,2
 18895  010A6A  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18896  010A6C  26D9               	addwf	fsr2l,f,c
 18897  010A6E  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18898  010A70  22DA               	addwfc	fsr2h,f,c
 18899  010A72  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18900  010A76  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18901  010A7A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18902  010A7E  0E0F               	movlw	15
 18903  010A80  0100               	movlb	0	; () banked
 18904  010A82  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18905  010A84  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 18906                           
 18907                           ;Port.c: 412: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18908  010A88  0100               	movlb	0	; () banked
 18909  010A8A  EE20 F004          	lfsr	2,4
 18910  010A8E  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18911  010A90  26D9               	addwf	fsr2l,f,c
 18912  010A92  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18913  010A94  22DA               	addwfc	fsr2h,f,c
 18914  010A96  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18915  010A9A  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18916  010A9E  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18917  010AA2  0E00               	movlw	0
 18918  010AA4  0100               	movlb	0	; () banked
 18919  010AA6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18920  010AA8  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 18921                           
 18922                           ;Port.c: 413: }
 18923                           ;Port.c: 415: break;
 18924  010AAC  D0B0               	goto	l478
 18925  010AAE                     
 18926                           ;Port.c: 417: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18927  010AAE  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18928  010AB2  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18929  010AB6  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18930  010ABA  0E03               	movlw	3
 18931  010ABC  0100               	movlb	0	; () banked
 18932  010ABE  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18933  010AC0  EC39  F09F         	call	_Port_CheckQuadType	;wreg free
 18934  010AC4  0100               	movlb	0	; () banked
 18935  010AC6  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18936  010AC8  0100               	movlb	0	; () banked
 18937  010ACA  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 18938  010ACC  A4D8               	btfss	status,2,c
 18939  010ACE  0012               	return	
 18940                           
 18941                           ; BSR set to: 0
 18942                           ;Port.c: 418: {
 18943                           ;Port.c: 420: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 18944  010AD0  0100               	movlb	0	; () banked
 18945  010AD2  EE20 F002          	lfsr	2,2
 18946  010AD6  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18947  010AD8  26D9               	addwf	fsr2l,f,c
 18948  010ADA  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18949  010ADC  22DA               	addwfc	fsr2h,f,c
 18950  010ADE  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18951  010AE2  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18952  010AE6  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18953  010AEA  0E00               	movlw	0
 18954  010AEC  0100               	movlb	0	; () banked
 18955  010AEE  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18956  010AF0  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 18957                           
 18958                           ;Port.c: 423: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 18959  010AF4  0100               	movlb	0	; () banked
 18960  010AF6  EE20 F004          	lfsr	2,4
 18961  010AFA  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18962  010AFC  26D9               	addwf	fsr2l,f,c
 18963  010AFE  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18964  010B00  22DA               	addwfc	fsr2h,f,c
 18965  010B02  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 18966  010B06  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 18967  010B0A  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 18968  010B0E  0E00               	movlw	0
 18969  010B10  0100               	movlb	0	; () banked
 18970  010B12  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 18971  010B14  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 18972                           
 18973                           ;Port.c: 424: }
 18974  010B18  D07A               	goto	l478
 18975  010B1A                     
 18976                           ;Port.c: 428: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 18977  010B1A  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 18978  010B1E  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 18979  010B22  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 18980  010B26  0E03               	movlw	3
 18981  010B28  0100               	movlb	0	; () banked
 18982  010B2A  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 18983  010B2C  EC39  F09F         	call	_Port_CheckQuadType	;wreg free
 18984  010B30  0100               	movlb	0	; () banked
 18985  010B32  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 18986  010B34  0100               	movlb	0	; () banked
 18987  010B36  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 18988  010B38  A4D8               	btfss	status,2,c
 18989  010B3A  0012               	return	
 18990                           
 18991                           ; BSR set to: 0
 18992                           ;Port.c: 429: {
 18993                           ;Port.c: 431: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0xF);
 18994  010B3C  0100               	movlb	0	; () banked
 18995  010B3E  EE20 F002          	lfsr	2,2
 18996  010B42  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 18997  010B44  26D9               	addwf	fsr2l,f,c
 18998  010B46  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 18999  010B48  22DA               	addwfc	fsr2h,f,c
 19000  010B4A  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19001  010B4E  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19002  010B52  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19003  010B56  0E0F               	movlw	15
 19004  010B58  0100               	movlb	0	; () banked
 19005  010B5A  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19006  010B5C  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 19007                           
 19008                           ;Port.c: 434: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0xF);
 19009  010B60  0100               	movlb	0	; () banked
 19010  010B62  EE20 F004          	lfsr	2,4
 19011  010B66  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19012  010B68  26D9               	addwf	fsr2l,f,c
 19013  010B6A  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19014  010B6C  22DA               	addwfc	fsr2h,f,c
 19015  010B6E  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19016  010B72  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19017  010B76  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19018  010B7A  0E0F               	movlw	15
 19019  010B7C  0100               	movlb	0	; () banked
 19020  010B7E  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19021  010B80  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 19022                           
 19023                           ;Port.c: 435: }
 19024  010B84  D044               	goto	l478
 19025  010B86                     
 19026                           ;Port.c: 439: if ((Output = Port_CheckQuadType(pInput, pQuad, eNone)) == ePinErrorNone)
 19027  010B86  C0EB  F0E4         	movff	Port_SetQuadType@pInput,Port_CheckQuadType@pInput
 19028  010B8A  C0EC  F0E5         	movff	Port_SetQuadType@pInput+1,Port_CheckQuadType@pInput+1
 19029  010B8E  C0ED  F0E6         	movff	Port_SetQuadType@pQuad,Port_CheckQuadType@pQuad
 19030  010B92  0E03               	movlw	3
 19031  010B94  0100               	movlb	0	; () banked
 19032  010B96  6FE7               	movwf	Port_CheckQuadType@pDrive& (0+255),b
 19033  010B98  EC39  F09F         	call	_Port_CheckQuadType	;wreg free
 19034  010B9C  0100               	movlb	0	; () banked
 19035  010B9E  6FEF               	movwf	Port_SetQuadType@Output& (0+255),b
 19036  010BA0  0100               	movlb	0	; () banked
 19037  010BA2  51EF               	movf	Port_SetQuadType@Output& (0+255),w,b
 19038  010BA4  A4D8               	btfss	status,2,c
 19039  010BA6  0012               	return	
 19040                           
 19041                           ; BSR set to: 0
 19042                           ;Port.c: 440: {
 19043                           ;Port.c: 442: Byte_SetQuad(pInput->mDirection, (UINT8)pQuad, 0);
 19044  010BA8  0100               	movlb	0	; () banked
 19045  010BAA  EE20 F002          	lfsr	2,2
 19046  010BAE  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19047  010BB0  26D9               	addwf	fsr2l,f,c
 19048  010BB2  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19049  010BB4  22DA               	addwfc	fsr2h,f,c
 19050  010BB6  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19051  010BBA  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19052  010BBE  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19053  010BC2  0E00               	movlw	0
 19054  010BC4  0100               	movlb	0	; () banked
 19055  010BC6  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19056  010BC8  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 19057                           
 19058                           ;Port.c: 445: Byte_SetQuad(pInput->mOutput, (UINT8)pQuad, 0);
 19059  010BCC  0100               	movlb	0	; () banked
 19060  010BCE  EE20 F004          	lfsr	2,4
 19061  010BD2  51EB               	movf	Port_SetQuadType@pInput& (0+255),w,b
 19062  010BD4  26D9               	addwf	fsr2l,f,c
 19063  010BD6  51EC               	movf	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19064  010BD8  22DA               	addwfc	fsr2h,f,c
 19065  010BDA  CFDE F0C0          	movff	postinc2,Byte_SetQuad@pInput
 19066  010BDE  CFDD F0C1          	movff	postdec2,Byte_SetQuad@pInput+1
 19067  010BE2  C0ED  F0C2         	movff	Port_SetQuadType@pQuad,Byte_SetQuad@pQuad
 19068  010BE6  0E00               	movlw	0
 19069  010BE8  0100               	movlb	0	; () banked
 19070  010BEA  6FC3               	movwf	Byte_SetQuad@pValue& (0+255),b
 19071  010BEC  EC4E  F0A3         	call	_Byte_SetQuad	;wreg free
 19072                           
 19073                           ;Port.c: 446: }
 19074  010BF0  D00E               	goto	l478
 19075  010BF2                     l476:
 19076  010BF2  0100               	movlb	0	; () banked
 19077  010BF4  51EE               	movf	Port_SetQuadType@pType& (0+255),w,b
 19078                           
 19079                           ; Switch size 1, requested type "space"
 19080                           ; Number of cases is 4, Range of values is 0 to 3
 19081                           ; switch strategies available:
 19082                           ; Name         Instructions Cycles
 19083                           ; simple_byte           13     7 (average)
 19084                           ;	Chosen strategy is simple_byte
 19085  010BF6  0A00               	xorlw	0	; case 0
 19086  010BF8  B4D8               	btfsc	status,2,c
 19087  010BFA  D734               	goto	l477
 19088  010BFC  0A01               	xorlw	1	; case 1
 19089  010BFE  B4D8               	btfsc	status,2,c
 19090  010C00  D756               	goto	l479
 19091  010C02  0A03               	xorlw	3	; case 2
 19092  010C04  B4D8               	btfsc	status,2,c
 19093  010C06  D789               	goto	l483
 19094  010C08  0A01               	xorlw	1	; case 3
 19095  010C0A  B4D8               	btfsc	status,2,c
 19096  010C0C  D7BC               	goto	l486
 19097  010C0E                     l478:
 19098                           
 19099                           ;Port.c: 454: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4, (UINT8)pType);
 19100                           
 19101                           ; BSR set to: 0
 19102  010C0E  0E08               	movlw	8
 19103  010C10  0100               	movlb	0	; () banked
 19104  010C12  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19105  010C14  0100               	movlb	0	; () banked
 19106  010C16  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19107  010C18  0E00               	movlw	0
 19108  010C1A  0100               	movlb	0	; () banked
 19109  010C1C  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19110  010C1E  0100               	movlb	0	; () banked
 19111  010C20  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19112  010C22  0100               	movlb	0	; () banked
 19113  010C24  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19114  010C26  0D04               	mullw	4
 19115  010C28  CFF3 F0C6          	movff	prodl,Word_SetPair@pPair
 19116  010C2C  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19117  010C30  EC10  F0A1         	call	_Word_SetPair	;wreg free
 19118                           
 19119                           ;Port.c: 455: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 1, (UINT8)pType);
 19120  010C34  0E08               	movlw	8
 19121  010C36  0100               	movlb	0	; () banked
 19122  010C38  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19123  010C3A  0100               	movlb	0	; () banked
 19124  010C3C  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19125  010C3E  0E00               	movlw	0
 19126  010C40  0100               	movlb	0	; () banked
 19127  010C42  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19128  010C44  0100               	movlb	0	; () banked
 19129  010C46  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19130  010C48  0100               	movlb	0	; () banked
 19131  010C4A  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19132  010C4C  0D04               	mullw	4
 19133  010C4E  28F3               	incf	prodl,w,c
 19134  010C50  0100               	movlb	0	; () banked
 19135  010C52  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19136  010C54  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19137  010C58  EC10  F0A1         	call	_Word_SetPair	;wreg free
 19138                           
 19139                           ;Port.c: 456: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 2, (UINT8)pType);
 19140  010C5C  0E08               	movlw	8
 19141  010C5E  0100               	movlb	0	; () banked
 19142  010C60  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19143  010C62  0100               	movlb	0	; () banked
 19144  010C64  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19145  010C66  0E00               	movlw	0
 19146  010C68  0100               	movlb	0	; () banked
 19147  010C6A  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19148  010C6C  0100               	movlb	0	; () banked
 19149  010C6E  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19150  010C70  0100               	movlb	0	; () banked
 19151  010C72  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19152  010C74  0D04               	mullw	4
 19153  010C76  50F3               	movf	prodl,w,c
 19154  010C78  0F02               	addlw	2
 19155  010C7A  0100               	movlb	0	; () banked
 19156  010C7C  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19157  010C7E  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19158  010C82  EC10  F0A1         	call	_Word_SetPair	;wreg free
 19159                           
 19160                           ;Port.c: 457: Word_SetPair(&pInput->mType, (UINT8)pQuad * 4 + 3, (UINT8)pType);
 19161  010C86  0E08               	movlw	8
 19162  010C88  0100               	movlb	0	; () banked
 19163  010C8A  25EB               	addwf	Port_SetQuadType@pInput& (0+255),w,b
 19164  010C8C  0100               	movlb	0	; () banked
 19165  010C8E  6FC4               	movwf	Word_SetPair@pInput& (0+255),b
 19166  010C90  0E00               	movlw	0
 19167  010C92  0100               	movlb	0	; () banked
 19168  010C94  21EC               	addwfc	(Port_SetQuadType@pInput+1)& (0+255),w,b
 19169  010C96  0100               	movlb	0	; () banked
 19170  010C98  6FC5               	movwf	(Word_SetPair@pInput+1)& (0+255),b
 19171  010C9A  0100               	movlb	0	; () banked
 19172  010C9C  51ED               	movf	Port_SetQuadType@pQuad& (0+255),w,b
 19173  010C9E  0D04               	mullw	4
 19174  010CA0  50F3               	movf	prodl,w,c
 19175  010CA2  0F03               	addlw	3
 19176  010CA4  0100               	movlb	0	; () banked
 19177  010CA6  6FC6               	movwf	Word_SetPair@pPair& (0+255),b
 19178  010CA8  C0EE  F0C7         	movff	Port_SetQuadType@pType,Word_SetPair@pValue
 19179  010CAC  EC10  F0A1         	call	_Word_SetPair	;wreg free
 19180  010CB0  0012               	return	
 19181  010CB2                     __end_of_Port_SetQuadType:
 19182                           	opt stack 0
 19183                           tosu	equ	0xFFF
 19184                           tosh	equ	0xFFE
 19185                           tosl	equ	0xFFD
 19186                           pclath	equ	0xFFA
 19187                           tblptru	equ	0xFF8
 19188                           tblptrh	equ	0xFF7
 19189                           tblptrl	equ	0xFF6
 19190                           tablat	equ	0xFF5
 19191                           prodh	equ	0xFF4
 19192                           prodl	equ	0xFF3
 19193                           intcon	equ	0xFF2
 19194                           postinc0	equ	0xFEE
 19195                           wreg	equ	0xFE8
 19196                           indf1	equ	0xFE7
 19197                           postdec1	equ	0xFE5
 19198                           fsr1h	equ	0xFE2
 19199                           fsr1l	equ	0xFE1
 19200                           indf2	equ	0xFDF
 19201                           postinc2	equ	0xFDE
 19202                           postdec2	equ	0xFDD
 19203                           plusw2	equ	0xFDB
 19204                           fsr2h	equ	0xFDA
 19205                           fsr2l	equ	0xFD9
 19206                           status	equ	0xFD8
 19207                           
 19208 ;; *************** function _Word_SetPair *****************
 19209 ;; Defined at:
 19210 ;;		line 149 in file "Library/Types.c"
 19211 ;; Parameters:    Size  Location     Type
 19212 ;;  pInput          2   15[BANK0 ] PTR struct Word
 19213 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19214 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19215 ;;  pPair           1   17[BANK0 ] unsigned char 
 19216 ;;  pValue          1   18[BANK0 ] unsigned char 
 19217 ;; Auto vars:     Size  Location     Type
 19218 ;;		None
 19219 ;; Return value:  Size  Location     Type
 19220 ;;                  1    wreg      void 
 19221 ;; Registers used:
 19222 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19223 ;; Tracked objects:
 19224 ;;		On entry : 0/0
 19225 ;;		On exit  : 0/0
 19226 ;;		Unchanged: 0/0
 19227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19228 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19231 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19232 ;;Total ram usage:        4 bytes
 19233 ;; Hardware stack levels used:    1
 19234 ;; Hardware stack levels required when called:    9
 19235 ;; This function calls:
 19236 ;;		_Byte_SetPair
 19237 ;; This function is called by:
 19238 ;;		_Port_SetPinType
 19239 ;;		_Port_SetQuadType
 19240 ;;		_Port_SetType
 19241 ;;		_Port_SetPairType
 19242 ;;		_PortProperty_Init
 19243 ;; This function uses a non-reentrant model
 19244 ;;
 19245                           
 19246                           	psect	text104
 19247  014220                     __ptext104:
 19248                           	opt stack 0
 19249  014220                     _Word_SetPair:
 19250                           	opt stack 19
 19251                           
 19252                           ;Types.c: 151: if (pPair >= 4)
 19253                           
 19254                           ;incstack = 0
 19255  014220  0E03               	movlw	3
 19256  014222  0100               	movlb	0	; () banked
 19257  014224  65C6               	cpfsgt	Word_SetPair@pPair& (0+255),b
 19258  014226  D014               	goto	l776
 19259                           
 19260                           ; BSR set to: 0
 19261                           ;Types.c: 152: Byte_SetPair(&(pInput->MS_Byte), pPair - 4, pValue);
 19262  014228  0E01               	movlw	1
 19263  01422A  0100               	movlb	0	; () banked
 19264  01422C  25C4               	addwf	Word_SetPair@pInput& (0+255),w,b
 19265  01422E  0100               	movlb	0	; () banked
 19266  014230  6FC0               	movwf	Byte_SetPair@pInput& (0+255),b
 19267  014232  0E00               	movlw	0
 19268  014234  0100               	movlb	0	; () banked
 19269  014236  21C5               	addwfc	(Word_SetPair@pInput+1)& (0+255),w,b
 19270  014238  0100               	movlb	0	; () banked
 19271  01423A  6FC1               	movwf	(Byte_SetPair@pInput+1)& (0+255),b
 19272  01423C  0100               	movlb	0	; () banked
 19273  01423E  51C6               	movf	Word_SetPair@pPair& (0+255),w,b
 19274  014240  0FFC               	addlw	252
 19275  014242  0100               	movlb	0	; () banked
 19276  014244  6FC2               	movwf	Byte_SetPair@pPair& (0+255),b
 19277  014246  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19278  01424A  EC3D  F0A3         	call	_Byte_SetPair	;wreg free
 19279  01424E  0012               	return	
 19280  014250                     l776:
 19281                           
 19282                           ;Types.c: 153: else
 19283                           ;Types.c: 154: Byte_SetPair(&(pInput->LS_Byte), pPair, pValue);
 19284  014250  C0C4  F0C0         	movff	Word_SetPair@pInput,Byte_SetPair@pInput
 19285  014254  C0C5  F0C1         	movff	Word_SetPair@pInput+1,Byte_SetPair@pInput+1
 19286  014258  C0C6  F0C2         	movff	Word_SetPair@pPair,Byte_SetPair@pPair
 19287  01425C  C0C7  F0C3         	movff	Word_SetPair@pValue,Byte_SetPair@pValue
 19288  014260  EC3D  F0A3         	call	_Byte_SetPair	;wreg free
 19289  014264  0012               	return	
 19290  014266                     __end_of_Word_SetPair:
 19291                           	opt stack 0
 19292                           tosu	equ	0xFFF
 19293                           tosh	equ	0xFFE
 19294                           tosl	equ	0xFFD
 19295                           pclath	equ	0xFFA
 19296                           tblptru	equ	0xFF8
 19297                           tblptrh	equ	0xFF7
 19298                           tblptrl	equ	0xFF6
 19299                           tablat	equ	0xFF5
 19300                           prodh	equ	0xFF4
 19301                           prodl	equ	0xFF3
 19302                           intcon	equ	0xFF2
 19303                           postinc0	equ	0xFEE
 19304                           wreg	equ	0xFE8
 19305                           indf1	equ	0xFE7
 19306                           postdec1	equ	0xFE5
 19307                           fsr1h	equ	0xFE2
 19308                           fsr1l	equ	0xFE1
 19309                           indf2	equ	0xFDF
 19310                           postinc2	equ	0xFDE
 19311                           postdec2	equ	0xFDD
 19312                           plusw2	equ	0xFDB
 19313                           fsr2h	equ	0xFDA
 19314                           fsr2l	equ	0xFD9
 19315                           status	equ	0xFD8
 19316                           
 19317 ;; *************** function _Byte_SetPair *****************
 19318 ;; Defined at:
 19319 ;;		line 83 in file "Library/Types.c"
 19320 ;; Parameters:    Size  Location     Type
 19321 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 19322 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 19323 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 19324 ;;		 -> PortA(10), PortB(10), PortE(10), PortD(10), 
 19325 ;;		 -> TRISG(1), TRISF(1), TRISE(1), TRISD(1), 
 19326 ;;		 -> TRISC(1), TRISB(1), TRISA(1), PORTG(1), 
 19327 ;;		 -> PORTF(1), PORTE(1), PORTD(1), PORTC(1), 
 19328 ;;		 -> PORTB(1), PORTA(1), PortC(10), PortF(10), 
 19329 ;;		 -> NULL(0), 
 19330 ;;  pPair           1   13[BANK0 ] unsigned char 
 19331 ;;  pValue          1   14[BANK0 ] unsigned char 
 19332 ;; Auto vars:     Size  Location     Type
 19333 ;;		None
 19334 ;; Return value:  Size  Location     Type
 19335 ;;                  1    wreg      void 
 19336 ;; Registers used:
 19337 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19338 ;; Tracked objects:
 19339 ;;		On entry : 0/0
 19340 ;;		On exit  : 0/0
 19341 ;;		Unchanged: 0/0
 19342 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19343 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19344 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19345 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19346 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19347 ;;Total ram usage:        4 bytes
 19348 ;; Hardware stack levels used:    1
 19349 ;; Hardware stack levels required when called:    8
 19350 ;; This function calls:
 19351 ;;		_Byte_SetZone
 19352 ;; This function is called by:
 19353 ;;		_Word_SetPair
 19354 ;;		_Port_SetPairType
 19355 ;;		_Port_SetPair
 19356 ;; This function uses a non-reentrant model
 19357 ;;
 19358                           
 19359                           	psect	text105
 19360  01467A                     __ptext105:
 19361                           	opt stack 0
 19362  01467A                     _Byte_SetPair:
 19363                           	opt stack 19
 19364                           
 19365                           ;Types.c: 85: Byte_SetZone(pInput, 4, pPair, 2, pValue);
 19366                           
 19367                           ;incstack = 0
 19368  01467A  C0C0  F0B5         	movff	Byte_SetPair@pInput,Byte_SetZone@pInput
 19369  01467E  C0C1  F0B6         	movff	Byte_SetPair@pInput+1,Byte_SetZone@pInput+1
 19370  014682  0E04               	movlw	4
 19371  014684  0100               	movlb	0	; () banked
 19372  014686  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 19373  014688  C0C2  F0B8         	movff	Byte_SetPair@pPair,Byte_SetZone@pChunk
 19374  01468C  0E02               	movlw	2
 19375  01468E  0100               	movlb	0	; () banked
 19376  014690  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 19377  014692  C0C3  F0BA         	movff	Byte_SetPair@pValue,Byte_SetZone@pValue
 19378  014696  ECFA  F095         	call	_Byte_SetZone	;wreg free
 19379  01469A  0012               	return		;funcret
 19380  01469C                     __end_of_Byte_SetPair:
 19381                           	opt stack 0
 19382                           tosu	equ	0xFFF
 19383                           tosh	equ	0xFFE
 19384                           tosl	equ	0xFFD
 19385                           pclath	equ	0xFFA
 19386                           tblptru	equ	0xFF8
 19387                           tblptrh	equ	0xFF7
 19388                           tblptrl	equ	0xFF6
 19389                           tablat	equ	0xFF5
 19390                           prodh	equ	0xFF4
 19391                           prodl	equ	0xFF3
 19392                           intcon	equ	0xFF2
 19393                           postinc0	equ	0xFEE
 19394                           wreg	equ	0xFE8
 19395                           indf1	equ	0xFE7
 19396                           postdec1	equ	0xFE5
 19397                           fsr1h	equ	0xFE2
 19398                           fsr1l	equ	0xFE1
 19399                           indf2	equ	0xFDF
 19400                           postinc2	equ	0xFDE
 19401                           postdec2	equ	0xFDD
 19402                           plusw2	equ	0xFDB
 19403                           fsr2h	equ	0xFDA
 19404                           fsr2l	equ	0xFD9
 19405                           status	equ	0xFD8
 19406                           
 19407 ;; *************** function _Port_CheckQuadType *****************
 19408 ;; Defined at:
 19409 ;;		line 126 in file "Library/Port.c"
 19410 ;; Parameters:    Size  Location     Type
 19411 ;;  pInput          2   47[BANK0 ] const PTR struct Port
 19412 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19413 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19414 ;;  pQuad           1   49[BANK0 ] enum E6776
 19415 ;;  pDrive          1   50[BANK0 ] enum E6469
 19416 ;; Auto vars:     Size  Location     Type
 19417 ;;  Output          1   53[BANK0 ] enum E6475
 19418 ;;  Pair2           1   52[BANK0 ] enum E6760
 19419 ;;  Pair1           1   51[BANK0 ] enum E6760
 19420 ;; Return value:  Size  Location     Type
 19421 ;;                  1    wreg      enum E6475
 19422 ;; Registers used:
 19423 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19424 ;; Tracked objects:
 19425 ;;		On entry : 0/0
 19426 ;;		On exit  : 0/0
 19427 ;;		Unchanged: 0/0
 19428 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19429 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19430 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19431 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19432 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19433 ;;Total ram usage:        7 bytes
 19434 ;; Hardware stack levels used:    1
 19435 ;; Hardware stack levels required when called:   12
 19436 ;; This function calls:
 19437 ;;		_Port_CheckPairType
 19438 ;; This function is called by:
 19439 ;;		_Port_CheckPortType
 19440 ;;		_Port_SetQuadType
 19441 ;; This function uses a non-reentrant model
 19442 ;;
 19443                           
 19444                           	psect	text106
 19445  013E72                     __ptext106:
 19446                           	opt stack 0
 19447  013E72                     _Port_CheckQuadType:
 19448                           	opt stack 15
 19449                           
 19450                           ;Port.c: 128: ePinError Output = ePinErrorState;
 19451                           
 19452                           ;incstack = 0
 19453  013E72  0E05               	movlw	5
 19454  013E74  0100               	movlb	0	; () banked
 19455  013E76  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19456                           
 19457                           ; BSR set to: 0
 19458                           ;Port.c: 129: ePair Pair1 = (ePair)((int)pQuad * 2);
 19459  013E78  0100               	movlb	0	; () banked
 19460  013E7A  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19461  013E7C  0D02               	mullw	2
 19462  013E7E  CFF3 F0E8          	movff	prodl,Port_CheckQuadType@Pair1
 19463                           
 19464                           ; BSR set to: 0
 19465                           ;Port.c: 130: ePair Pair2 = (ePair)((int)pQuad * 2 + 1);
 19466  013E82  0100               	movlb	0	; () banked
 19467  013E84  51E6               	movf	Port_CheckQuadType@pQuad& (0+255),w,b
 19468  013E86  0D02               	mullw	2
 19469  013E88  28F3               	incf	prodl,w,c
 19470  013E8A  0100               	movlb	0	; () banked
 19471  013E8C  6FE9               	movwf	Port_CheckQuadType@Pair2& (0+255),b
 19472                           
 19473                           ; BSR set to: 0
 19474                           ;Port.c: 133: if ((Output = Port_CheckPairType(pInput, Pair1, pDrive)) == ePinErrorNone)
 19475  013E8E  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19476  013E92  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19477  013E96  C0E8  F0DD         	movff	Port_CheckQuadType@Pair1,Port_CheckPairType@pPair
 19478  013E9A  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19479  013E9E  ECAA  F09D         	call	_Port_CheckPairType	;wreg free
 19480  013EA2  0100               	movlb	0	; () banked
 19481  013EA4  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19482  013EA6  0100               	movlb	0	; () banked
 19483  013EA8  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19484  013EAA  A4D8               	btfss	status,2,c
 19485  013EAC  D00C               	goto	l393
 19486                           
 19487                           ; BSR set to: 0
 19488                           ;Port.c: 134: Output = Port_CheckPairType(pInput, Pair2, pDrive);
 19489  013EAE  C0E4  F0DB         	movff	Port_CheckQuadType@pInput,Port_CheckPairType@pInput
 19490  013EB2  C0E5  F0DC         	movff	Port_CheckQuadType@pInput+1,Port_CheckPairType@pInput+1
 19491  013EB6  C0E9  F0DD         	movff	Port_CheckQuadType@Pair2,Port_CheckPairType@pPair
 19492  013EBA  C0E7  F0DE         	movff	Port_CheckQuadType@pDrive,Port_CheckPairType@pDrive
 19493  013EBE  ECAA  F09D         	call	_Port_CheckPairType	;wreg free
 19494  013EC2  0100               	movlb	0	; () banked
 19495  013EC4  6FEA               	movwf	Port_CheckQuadType@Output& (0+255),b
 19496  013EC6                     l393:
 19497                           
 19498                           ; BSR set to: 0
 19499                           ;Port.c: 136: return Output;
 19500                           
 19501                           ; BSR set to: 0
 19502  013EC6  0100               	movlb	0	; () banked
 19503  013EC8  51EA               	movf	Port_CheckQuadType@Output& (0+255),w,b
 19504  013ECA  0012               	return	
 19505  013ECC                     __end_of_Port_CheckQuadType:
 19506                           	opt stack 0
 19507                           tosu	equ	0xFFF
 19508                           tosh	equ	0xFFE
 19509                           tosl	equ	0xFFD
 19510                           pclath	equ	0xFFA
 19511                           tblptru	equ	0xFF8
 19512                           tblptrh	equ	0xFF7
 19513                           tblptrl	equ	0xFF6
 19514                           tablat	equ	0xFF5
 19515                           prodh	equ	0xFF4
 19516                           prodl	equ	0xFF3
 19517                           intcon	equ	0xFF2
 19518                           postinc0	equ	0xFEE
 19519                           wreg	equ	0xFE8
 19520                           indf1	equ	0xFE7
 19521                           postdec1	equ	0xFE5
 19522                           fsr1h	equ	0xFE2
 19523                           fsr1l	equ	0xFE1
 19524                           indf2	equ	0xFDF
 19525                           postinc2	equ	0xFDE
 19526                           postdec2	equ	0xFDD
 19527                           plusw2	equ	0xFDB
 19528                           fsr2h	equ	0xFDA
 19529                           fsr2l	equ	0xFD9
 19530                           status	equ	0xFD8
 19531                           
 19532 ;; *************** function _Port_CheckPairType *****************
 19533 ;; Defined at:
 19534 ;;		line 112 in file "Library/Port.c"
 19535 ;; Parameters:    Size  Location     Type
 19536 ;;  pInput          2   38[BANK0 ] const PTR struct Port
 19537 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19538 ;;		 -> PortD(10), PortC(10), PortF(10), 
 19539 ;;  pPair           1   40[BANK0 ] enum E6760
 19540 ;;  pDrive          1   41[BANK0 ] enum E6469
 19541 ;; Auto vars:     Size  Location     Type
 19542 ;;  Props           2   45[BANK0 ] PTR struct PortProperty
 19543 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19544 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19545 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19546 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19547 ;;  Output          1   44[BANK0 ] enum E6475
 19548 ;;  Pin2            1   43[BANK0 ] enum E6750
 19549 ;;  Pin1            1   42[BANK0 ] enum E6750
 19550 ;; Return value:  Size  Location     Type
 19551 ;;                  1    wreg      enum E6475
 19552 ;; Registers used:
 19553 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19554 ;; Tracked objects:
 19555 ;;		On entry : 0/0
 19556 ;;		On exit  : 0/0
 19557 ;;		Unchanged: 0/0
 19558 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19559 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19560 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19561 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19562 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19563 ;;Total ram usage:        9 bytes
 19564 ;; Hardware stack levels used:    1
 19565 ;; Hardware stack levels required when called:   11
 19566 ;; This function calls:
 19567 ;;		_PortProperty_Valid
 19568 ;; This function is called by:
 19569 ;;		_Port_CheckQuadType
 19570 ;;		_Port_SetPairType
 19571 ;; This function uses a non-reentrant model
 19572 ;;
 19573                           
 19574                           	psect	text107
 19575  013B54                     __ptext107:
 19576                           	opt stack 0
 19577  013B54                     _Port_CheckPairType:
 19578                           	opt stack 15
 19579                           
 19580                           ;Port.c: 114: ePinError Output = ePinErrorState;
 19581                           
 19582                           ; BSR set to: 0
 19583                           ;incstack = 0
 19584  013B54  0E05               	movlw	5
 19585  013B56  0100               	movlb	0	; () banked
 19586  013B58  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19587                           
 19588                           ; BSR set to: 0
 19589                           ;Port.c: 116: PortPropertyPtr Props = (PortPropertyPtr)&(pInput->mProperties->mWord);
 19590  013B5A  C0DB  FFD9         	movff	Port_CheckPairType@pInput,fsr2l
 19591  013B5E  C0DC  FFDA         	movff	Port_CheckPairType@pInput+1,fsr2h
 19592  013B62  CFDE F0E2          	movff	postinc2,Port_CheckPairType@Props
 19593  013B66  CFDD F0E3          	movff	postdec2,Port_CheckPairType@Props+1
 19594                           
 19595                           ; BSR set to: 0
 19596                           ;Port.c: 117: ePin Pin1 = (ePin)((int)pPair * 2);
 19597  013B6A  0100               	movlb	0	; () banked
 19598  013B6C  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19599  013B6E  0D02               	mullw	2
 19600  013B70  CFF3 F0DF          	movff	prodl,Port_CheckPairType@Pin1
 19601                           
 19602                           ; BSR set to: 0
 19603                           ;Port.c: 118: ePin Pin2 = (ePin)((int)pPair * 2 + 1);
 19604  013B74  0100               	movlb	0	; () banked
 19605  013B76  51DD               	movf	Port_CheckPairType@pPair& (0+255),w,b
 19606  013B78  0D02               	mullw	2
 19607  013B7A  28F3               	incf	prodl,w,c
 19608  013B7C  0100               	movlb	0	; () banked
 19609  013B7E  6FE0               	movwf	Port_CheckPairType@Pin2& (0+255),b
 19610                           
 19611                           ; BSR set to: 0
 19612                           ;Port.c: 121: if ((Output = PortProperty_Valid(Props, pDrive, Pin1)) == ePinErrorNone)
 19613  013B80  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19614  013B84  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19615  013B88  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19616  013B8C  C0DF  F0C7         	movff	Port_CheckPairType@Pin1,PortProperty_Valid@pPin
 19617  013B90  ECFF  F09A         	call	_PortProperty_Valid	;wreg free
 19618  013B94  0100               	movlb	0	; () banked
 19619  013B96  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19620  013B98  0100               	movlb	0	; () banked
 19621  013B9A  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 19622  013B9C  A4D8               	btfss	status,2,c
 19623  013B9E  D00C               	goto	l389
 19624                           
 19625                           ; BSR set to: 0
 19626                           ;Port.c: 122: Output = PortProperty_Valid(Props, pDrive, Pin2);
 19627  013BA0  C0E2  F0C4         	movff	Port_CheckPairType@Props,PortProperty_Valid@pInput
 19628  013BA4  C0E3  F0C5         	movff	Port_CheckPairType@Props+1,PortProperty_Valid@pInput+1
 19629  013BA8  C0DE  F0C6         	movff	Port_CheckPairType@pDrive,PortProperty_Valid@pPinDrive
 19630  013BAC  C0E0  F0C7         	movff	Port_CheckPairType@Pin2,PortProperty_Valid@pPin
 19631  013BB0  ECFF  F09A         	call	_PortProperty_Valid	;wreg free
 19632  013BB4  0100               	movlb	0	; () banked
 19633  013BB6  6FE1               	movwf	Port_CheckPairType@Output& (0+255),b
 19634  013BB8                     l389:
 19635                           
 19636                           ; BSR set to: 0
 19637                           ;Port.c: 124: return Output;
 19638                           
 19639                           ; BSR set to: 0
 19640  013BB8  0100               	movlb	0	; () banked
 19641  013BBA  51E1               	movf	Port_CheckPairType@Output& (0+255),w,b
 19642  013BBC  0012               	return	
 19643  013BBE                     __end_of_Port_CheckPairType:
 19644                           	opt stack 0
 19645                           tosu	equ	0xFFF
 19646                           tosh	equ	0xFFE
 19647                           tosl	equ	0xFFD
 19648                           pclath	equ	0xFFA
 19649                           tblptru	equ	0xFF8
 19650                           tblptrh	equ	0xFF7
 19651                           tblptrl	equ	0xFF6
 19652                           tablat	equ	0xFF5
 19653                           prodh	equ	0xFF4
 19654                           prodl	equ	0xFF3
 19655                           intcon	equ	0xFF2
 19656                           postinc0	equ	0xFEE
 19657                           wreg	equ	0xFE8
 19658                           indf1	equ	0xFE7
 19659                           postdec1	equ	0xFE5
 19660                           fsr1h	equ	0xFE2
 19661                           fsr1l	equ	0xFE1
 19662                           indf2	equ	0xFDF
 19663                           postinc2	equ	0xFDE
 19664                           postdec2	equ	0xFDD
 19665                           plusw2	equ	0xFDB
 19666                           fsr2h	equ	0xFDA
 19667                           fsr2l	equ	0xFD9
 19668                           status	equ	0xFD8
 19669                           
 19670 ;; *************** function _PortProperty_Valid *****************
 19671 ;; Defined at:
 19672 ;;		line 220 in file "Library/Types.c"
 19673 ;; Parameters:    Size  Location     Type
 19674 ;;  pInput          2   15[BANK0 ] PTR struct PortProperty
 19675 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19676 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19677 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19678 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19679 ;;  pPinDrive       1   17[BANK0 ] enum E6469
 19680 ;;  pPin            1   18[BANK0 ] unsigned char 
 19681 ;; Auto vars:     Size  Location     Type
 19682 ;;  Errors         16   21[BANK0 ] const enum E6475[4][4]
 19683 ;;  Pair            1   37[BANK0 ] enum E6469
 19684 ;; Return value:  Size  Location     Type
 19685 ;;                  1    wreg      enum E6475
 19686 ;; Registers used:
 19687 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19688 ;; Tracked objects:
 19689 ;;		On entry : 0/0
 19690 ;;		On exit  : 0/0
 19691 ;;		Unchanged: 0/0
 19692 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19693 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19694 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19695 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19696 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19697 ;;Total ram usage:       23 bytes
 19698 ;; Hardware stack levels used:    1
 19699 ;; Hardware stack levels required when called:   10
 19700 ;; This function calls:
 19701 ;;		_Word_GetPair
 19702 ;; This function is called by:
 19703 ;;		_Port_CheckPairType
 19704 ;;		_Port_SetPinType
 19705 ;; This function uses a non-reentrant model
 19706 ;;
 19707                           
 19708                           	psect	text108
 19709  0135FE                     __ptext108:
 19710                           	opt stack 0
 19711  0135FE                     _PortProperty_Valid:
 19712                           	opt stack 15
 19713                           
 19714                           ;Types.c: 222: ePinDrive Pair;
 19715                           ;Types.c: 223: const ePinError Errors[4][4] =
 19716                           ;Types.c: 224: {
 19717                           ;Types.c: 226: { ePinErrorNone, ePinErrorCannotDriveHigh, ePinErrorCannotDriveLow, ePinE
      +                          rrorNone },
 19718                           ;Types.c: 227: { ePinErrorCannotDriveHigh, ePinErrorNone, ePinErrorCannotDriveHigh, ePin
      +                          ErrorNone },
 19719                           ;Types.c: 228: { ePinErrorCannotDriveLow, ePinErrorCannotDriveLow, ePinErrorNone, ePinEr
      +                          rorNone },
 19720                           ;Types.c: 229: { ePinErrorCannotDrive, ePinErrorCannotDrive, ePinErrorCannotDrive, ePinE
      +                          rrorNone }
 19721                           ;Types.c: 230: };
 19722                           
 19723                           ; BSR set to: 0
 19724                           ;incstack = 0
 19725  0135FE  0EA7               	movlw	low PortProperty_Valid@F6830
 19726  013600  6EF6               	movwf	tblptrl,c
 19727  013602                     	if	1	;There is more than 1 active tblptr byte
 19728  013602  0EFD               	movlw	high PortProperty_Valid@F6830
 19729  013604  6EF7               	movwf	tblptrh,c
 19730  013606                     	endif
 19731  013606                     	if	1	;There are 3 active tblptr bytes
 19732  013606  0E00               	movlw	low (PortProperty_Valid@F6830 shr (0+16))
 19733  013608  6EF8               	movwf	tblptru,c
 19734  01360A                     	endif
 19735  01360A  EE20  F0CA         	lfsr	2,PortProperty_Valid@Errors
 19736  01360E  0E0F               	movlw	15
 19737  013610                     u6520:
 19738  013610  0009               	tblrd		*+
 19739  013612  CFF5 FFDE          	movff	tablat,postinc2
 19740  013616  06E8               	decf	wreg,f,c
 19741  013618  E2FB               	bc	u6520
 19742                           
 19743                           ;Types.c: 232: Pair = (ePinDrive)Word_GetPair(&(pInput->mType), pPin);
 19744  01361A  C0C4  F0C1         	movff	PortProperty_Valid@pInput,Word_GetPair@pInput
 19745  01361E  C0C5  F0C2         	movff	PortProperty_Valid@pInput+1,Word_GetPair@pInput+1
 19746  013622  C0C7  F0C3         	movff	PortProperty_Valid@pPin,Word_GetPair@pPair
 19747  013626  ECF4  F0A1         	call	_Word_GetPair	;wreg free
 19748  01362A  0100               	movlb	0	; () banked
 19749  01362C  6FDA               	movwf	PortProperty_Valid@Pair& (0+255),b
 19750                           
 19751                           ; BSR set to: 0
 19752                           ;Types.c: 234: if (pPinDrive < 4 && Pair < 4)
 19753  01362E  0E04               	movlw	4
 19754  013630  0100               	movlb	0	; () banked
 19755  013632  61C6               	cpfslt	PortProperty_Valid@pPinDrive& (0+255),b
 19756  013634  D020               	goto	l819
 19757                           
 19758                           ; BSR set to: 0
 19759  013636  0E04               	movlw	4
 19760  013638  0100               	movlb	0	; () banked
 19761  01363A  61DA               	cpfslt	PortProperty_Valid@Pair& (0+255),b
 19762  01363C  D01C               	goto	l819
 19763                           
 19764                           ; BSR set to: 0
 19765                           ;Types.c: 235: return Errors[pPinDrive][Pair];
 19766  01363E  0100               	movlb	0	; () banked
 19767  013640  51C6               	movf	PortProperty_Valid@pPinDrive& (0+255),w,b
 19768  013642  0D04               	mullw	4
 19769  013644  0ECA               	movlw	low PortProperty_Valid@Errors
 19770  013646  0100               	movlb	0	; () banked
 19771  013648  6FC8               	movwf	??_PortProperty_Valid& (0+255),b
 19772  01364A  0E00               	movlw	high PortProperty_Valid@Errors
 19773  01364C  0100               	movlb	0	; () banked
 19774  01364E  6FC9               	movwf	(??_PortProperty_Valid+1)& (0+255),b
 19775  013650  50F3               	movf	prodl,w,c
 19776  013652  0100               	movlb	0	; () banked
 19777  013654  27C8               	addwf	??_PortProperty_Valid& (0+255),f,b
 19778  013656  50F4               	movf	prodh,w,c
 19779  013658  0100               	movlb	0	; () banked
 19780  01365A  23C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),f,b
 19781  01365C  0100               	movlb	0	; () banked
 19782  01365E  51DA               	movf	PortProperty_Valid@Pair& (0+255),w,b
 19783  013660  0D01               	mullw	1
 19784  013662  50F3               	movf	prodl,w,c
 19785  013664  0100               	movlb	0	; () banked
 19786  013666  25C8               	addwf	??_PortProperty_Valid& (0+255),w,b
 19787  013668  6ED9               	movwf	fsr2l,c
 19788  01366A  50F4               	movf	prodh,w,c
 19789  01366C  0100               	movlb	0	; () banked
 19790  01366E  21C9               	addwfc	(??_PortProperty_Valid+1)& (0+255),w,b
 19791  013670  6EDA               	movwf	fsr2h,c
 19792  013672  50DF               	movf	indf2,w,c
 19793                           
 19794                           ; BSR set to: 0
 19795  013674  0012               	return	
 19796  013676                     l819:
 19797                           
 19798                           ; BSR set to: 0
 19799                           ;Types.c: 237: return ePinErrorState;
 19800                           
 19801                           ; BSR set to: 0
 19802  013676  0E05               	movlw	5
 19803  013678  0012               	return	
 19804  01367A                     __end_of_PortProperty_Valid:
 19805                           	opt stack 0
 19806                           tosu	equ	0xFFF
 19807                           tosh	equ	0xFFE
 19808                           tosl	equ	0xFFD
 19809                           pclath	equ	0xFFA
 19810                           tblptru	equ	0xFF8
 19811                           tblptrh	equ	0xFF7
 19812                           tblptrl	equ	0xFF6
 19813                           tablat	equ	0xFF5
 19814                           prodh	equ	0xFF4
 19815                           prodl	equ	0xFF3
 19816                           intcon	equ	0xFF2
 19817                           postinc0	equ	0xFEE
 19818                           wreg	equ	0xFE8
 19819                           indf1	equ	0xFE7
 19820                           postdec1	equ	0xFE5
 19821                           fsr1h	equ	0xFE2
 19822                           fsr1l	equ	0xFE1
 19823                           indf2	equ	0xFDF
 19824                           postinc2	equ	0xFDE
 19825                           postdec2	equ	0xFDD
 19826                           plusw2	equ	0xFDB
 19827                           fsr2h	equ	0xFDA
 19828                           fsr2l	equ	0xFD9
 19829                           status	equ	0xFD8
 19830                           
 19831 ;; *************** function _Word_GetPair *****************
 19832 ;; Defined at:
 19833 ;;		line 156 in file "Library/Types.c"
 19834 ;; Parameters:    Size  Location     Type
 19835 ;;  pInput          2   12[BANK0 ] PTR struct Word
 19836 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 19837 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 19838 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 19839 ;;		 -> PortC(10), PortF(10), NULL(0), 
 19840 ;;  pPair           1   14[BANK0 ] unsigned char 
 19841 ;; Auto vars:     Size  Location     Type
 19842 ;;		None
 19843 ;; Return value:  Size  Location     Type
 19844 ;;                  1    wreg      unsigned char 
 19845 ;; Registers used:
 19846 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19847 ;; Tracked objects:
 19848 ;;		On entry : 0/0
 19849 ;;		On exit  : 0/0
 19850 ;;		Unchanged: 0/0
 19851 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19852 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19853 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19854 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19855 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19856 ;;Total ram usage:        3 bytes
 19857 ;; Hardware stack levels used:    1
 19858 ;; Hardware stack levels required when called:    9
 19859 ;; This function calls:
 19860 ;;		_Byte_GetPair
 19861 ;; This function is called by:
 19862 ;;		_Port_Init
 19863 ;;		_Port_SetPin
 19864 ;;		_Port_Set
 19865 ;;		_PortProperty_Valid
 19866 ;;		_Port_SetPair
 19867 ;;		_Port_SetQuad
 19868 ;; This function uses a non-reentrant model
 19869 ;;
 19870                           
 19871                           	psect	text109
 19872  0143E8                     __ptext109:
 19873                           	opt stack 0
 19874  0143E8                     _Word_GetPair:
 19875                           	opt stack 15
 19876                           
 19877                           ;Types.c: 158: if (pPair >= 4)
 19878                           
 19879                           ; BSR set to: 0
 19880                           ;incstack = 0
 19881  0143E8  0E03               	movlw	3
 19882  0143EA  0100               	movlb	0	; () banked
 19883  0143EC  65C3               	cpfsgt	Word_GetPair@pPair& (0+255),b
 19884  0143EE  D012               	goto	l781
 19885                           
 19886                           ; BSR set to: 0
 19887                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 19888  0143F0  0E01               	movlw	1
 19889  0143F2  0100               	movlb	0	; () banked
 19890  0143F4  25C1               	addwf	Word_GetPair@pInput& (0+255),w,b
 19891  0143F6  0100               	movlb	0	; () banked
 19892  0143F8  6FBE               	movwf	Byte_GetPair@pInput& (0+255),b
 19893  0143FA  0E00               	movlw	0
 19894  0143FC  0100               	movlb	0	; () banked
 19895  0143FE  21C2               	addwfc	(Word_GetPair@pInput+1)& (0+255),w,b
 19896  014400  0100               	movlb	0	; () banked
 19897  014402  6FBF               	movwf	(Byte_GetPair@pInput+1)& (0+255),b
 19898  014404  0100               	movlb	0	; () banked
 19899  014406  51C3               	movf	Word_GetPair@pPair& (0+255),w,b
 19900  014408  0FFC               	addlw	252
 19901  01440A  0100               	movlb	0	; () banked
 19902  01440C  6FC0               	movwf	Byte_GetPair@pPair& (0+255),b
 19903  01440E  ECDA  F0A3         	call	_Byte_GetPair	;wreg free
 19904  014412  0012               	return	
 19905  014414                     l781:
 19906                           
 19907                           ;Types.c: 160: else
 19908                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 19909  014414  C0C1  F0BE         	movff	Word_GetPair@pInput,Byte_GetPair@pInput
 19910  014418  C0C2  F0BF         	movff	Word_GetPair@pInput+1,Byte_GetPair@pInput+1
 19911  01441C  C0C3  F0C0         	movff	Word_GetPair@pPair,Byte_GetPair@pPair
 19912  014420  ECDA  F0A3         	call	_Byte_GetPair	;wreg free
 19913  014424  0012               	return	
 19914  014426                     __end_of_Word_GetPair:
 19915                           	opt stack 0
 19916                           tosu	equ	0xFFF
 19917                           tosh	equ	0xFFE
 19918                           tosl	equ	0xFFD
 19919                           pclath	equ	0xFFA
 19920                           tblptru	equ	0xFF8
 19921                           tblptrh	equ	0xFF7
 19922                           tblptrl	equ	0xFF6
 19923                           tablat	equ	0xFF5
 19924                           prodh	equ	0xFF4
 19925                           prodl	equ	0xFF3
 19926                           intcon	equ	0xFF2
 19927                           postinc0	equ	0xFEE
 19928                           wreg	equ	0xFE8
 19929                           indf1	equ	0xFE7
 19930                           postdec1	equ	0xFE5
 19931                           fsr1h	equ	0xFE2
 19932                           fsr1l	equ	0xFE1
 19933                           indf2	equ	0xFDF
 19934                           postinc2	equ	0xFDE
 19935                           postdec2	equ	0xFDD
 19936                           plusw2	equ	0xFDB
 19937                           fsr2h	equ	0xFDA
 19938                           fsr2l	equ	0xFD9
 19939                           status	equ	0xFD8
 19940                           
 19941 ;; *************** function _Byte_GetPair *****************
 19942 ;; Defined at:
 19943 ;;		line 87 in file "Library/Types.c"
 19944 ;; Parameters:    Size  Location     Type
 19945 ;;  pInput          2    9[BANK0 ] PTR struct Byte
 19946 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 19947 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 19948 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 19949 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 19950 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 19951 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 19952 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 19953 ;;		 -> NULL(0), 
 19954 ;;  pPair           1   11[BANK0 ] unsigned char 
 19955 ;; Auto vars:     Size  Location     Type
 19956 ;;		None
 19957 ;; Return value:  Size  Location     Type
 19958 ;;                  1    wreg      unsigned char 
 19959 ;; Registers used:
 19960 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 19961 ;; Tracked objects:
 19962 ;;		On entry : 0/0
 19963 ;;		On exit  : 0/0
 19964 ;;		Unchanged: 0/0
 19965 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 19966 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19967 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19968 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19969 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 19970 ;;Total ram usage:        3 bytes
 19971 ;; Hardware stack levels used:    1
 19972 ;; Hardware stack levels required when called:    8
 19973 ;; This function calls:
 19974 ;;		_Byte_GetZone
 19975 ;; This function is called by:
 19976 ;;		_Word_GetPair
 19977 ;; This function uses a non-reentrant model
 19978 ;;
 19979                           
 19980                           	psect	text110
 19981  0147B4                     __ptext110:
 19982                           	opt stack 0
 19983  0147B4                     _Byte_GetPair:
 19984                           	opt stack 15
 19985                           
 19986                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 19987                           
 19988                           ;incstack = 0
 19989  0147B4  C0BE  F0B5         	movff	Byte_GetPair@pInput,Byte_GetZone@pInput
 19990  0147B8  C0BF  F0B6         	movff	Byte_GetPair@pInput+1,Byte_GetZone@pInput+1
 19991  0147BC  0E04               	movlw	4
 19992  0147BE  0100               	movlb	0	; () banked
 19993  0147C0  6FB7               	movwf	Byte_GetZone@pMax& (0+255),b
 19994  0147C2  C0C0  F0B8         	movff	Byte_GetPair@pPair,Byte_GetZone@pChunk
 19995  0147C6  0E02               	movlw	2
 19996  0147C8  0100               	movlb	0	; () banked
 19997  0147CA  6FB9               	movwf	Byte_GetZone@pChunkSize& (0+255),b
 19998  0147CC  EC4A  F099         	call	_Byte_GetZone	;wreg free
 19999  0147D0  0012               	return	
 20000  0147D2                     __end_of_Byte_GetPair:
 20001                           	opt stack 0
 20002                           tosu	equ	0xFFF
 20003                           tosh	equ	0xFFE
 20004                           tosl	equ	0xFFD
 20005                           pclath	equ	0xFFA
 20006                           tblptru	equ	0xFF8
 20007                           tblptrh	equ	0xFF7
 20008                           tblptrl	equ	0xFF6
 20009                           tablat	equ	0xFF5
 20010                           prodh	equ	0xFF4
 20011                           prodl	equ	0xFF3
 20012                           intcon	equ	0xFF2
 20013                           postinc0	equ	0xFEE
 20014                           wreg	equ	0xFE8
 20015                           indf1	equ	0xFE7
 20016                           postdec1	equ	0xFE5
 20017                           fsr1h	equ	0xFE2
 20018                           fsr1l	equ	0xFE1
 20019                           indf2	equ	0xFDF
 20020                           postinc2	equ	0xFDE
 20021                           postdec2	equ	0xFDD
 20022                           plusw2	equ	0xFDB
 20023                           fsr2h	equ	0xFDA
 20024                           fsr2l	equ	0xFD9
 20025                           status	equ	0xFD8
 20026                           
 20027 ;; *************** function _Byte_GetZone *****************
 20028 ;; Defined at:
 20029 ;;		line 64 in file "Library/Types.c"
 20030 ;; Parameters:    Size  Location     Type
 20031 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20032 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 20033 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 20034 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 20035 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 20036 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 20037 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 20038 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 20039 ;;		 -> NULL(0), 
 20040 ;;  pMax            1    2[BANK0 ] unsigned char 
 20041 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20042 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20043 ;; Auto vars:     Size  Location     Type
 20044 ;;  Output          1    8[BANK0 ] unsigned char 
 20045 ;;  Offset          1    7[BANK0 ] unsigned char 
 20046 ;;  MASK            1    6[BANK0 ] unsigned char 
 20047 ;; Return value:  Size  Location     Type
 20048 ;;                  1    wreg      unsigned char 
 20049 ;; Registers used:
 20050 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20051 ;; Tracked objects:
 20052 ;;		On entry : 0/0
 20053 ;;		On exit  : 0/0
 20054 ;;		Unchanged: 0/0
 20055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20056 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20057 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20058 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20059 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20060 ;;Total ram usage:        9 bytes
 20061 ;; Hardware stack levels used:    1
 20062 ;; Hardware stack levels required when called:    7
 20063 ;; This function calls:
 20064 ;;		Nothing
 20065 ;; This function is called by:
 20066 ;;		_Byte_GetPair
 20067 ;;		_Byte_GetTriple
 20068 ;;		_Byte_GetQuad
 20069 ;; This function uses a non-reentrant model
 20070 ;;
 20071                           
 20072                           	psect	text111
 20073  013294                     __ptext111:
 20074                           	opt stack 0
 20075  013294                     _Byte_GetZone:
 20076                           	opt stack 15
 20077                           
 20078                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 20079                           
 20080                           ;incstack = 0
 20081  013294  C0B5  FFF6         	movff	Byte_GetZone@pInput,tblptrl
 20082  013298  C0B6  FFF7         	movff	Byte_GetZone@pInput+1,tblptrh
 20083  01329C  0E00               	movlw	low (__mediumconst shr (0+16))
 20084  01329E  6EF8               	movwf	tblptru,c
 20085  0132A0  0E0F               	movlw	(high __ramtop+-1)
 20086  0132A2  64F7               	cpfsgt	tblptrh,c
 20087  0132A4  D003               	bra	u6487
 20088  0132A6  0008               	tblrd		*
 20089  0132A8  50F5               	movf	tablat,w,c
 20090  0132AA  D005               	bra	u6480
 20091  0132AC                     u6487:
 20092  0132AC  CFF6 FFE9          	movff	tblptrl,fsr0l
 20093  0132B0  CFF7 FFEA          	movff	tblptrh,fsr0h
 20094  0132B4  50EF               	movf	indf0,w,c
 20095  0132B6                     u6480:
 20096  0132B6  0100               	movlb	0	; () banked
 20097  0132B8  6FBD               	movwf	Byte_GetZone@Output& (0+255),b
 20098                           
 20099                           ; BSR set to: 0
 20100                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 20101  0132BA  0100               	movlb	0	; () banked
 20102  0132BC  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20103  0132BE  0D01               	mullw	1
 20104  0132C0  0EC1               	movlw	low _MASKS
 20105  0132C2  24F3               	addwf	prodl,w,c
 20106  0132C4  6EF6               	movwf	tblptrl,c
 20107  0132C6  0EFD               	movlw	high _MASKS
 20108  0132C8  20F4               	addwfc	prodh,w,c
 20109  0132CA  6EF7               	movwf	tblptrh,c
 20110  0132CC                     	if	1	;There are 3 active tblptr bytes
 20111  0132CC  6AF8               	clrf	tblptru,c
 20112  0132CE  0E00               	movlw	low (__mediumconst shr (0+16))
 20113  0132D0  22F8               	addwfc	tblptru,f,c
 20114  0132D2                     	endif
 20115  0132D2  0008               	tblrd		*
 20116  0132D4  CFF5 F0BB          	movff	tablat,Byte_GetZone@MASK
 20117                           
 20118                           ; BSR set to: 0
 20119                           ;Types.c: 68: UINT8 Offset = 0;
 20120  0132D8  0E00               	movlw	0
 20121  0132DA  0100               	movlb	0	; () banked
 20122  0132DC  6FBC               	movwf	Byte_GetZone@Offset& (0+255),b
 20123                           
 20124                           ;Types.c: 70: while (pChunk >= pMax)
 20125  0132DE  D006               	goto	l732
 20126  0132E0                     
 20127                           ; BSR set to: 0
 20128                           ;Types.c: 71: {
 20129                           ;Types.c: 72: pChunk -= pMax;
 20130                           
 20131                           ; BSR set to: 0
 20132  0132E0  0100               	movlb	0	; () banked
 20133  0132E2  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 20134  0132E4  0100               	movlb	0	; () banked
 20135  0132E6  5FB8               	subwf	Byte_GetZone@pChunk& (0+255),f,b
 20136                           
 20137                           ; BSR set to: 0
 20138                           ;Types.c: 73: Offset += 1;
 20139  0132E8  0100               	movlb	0	; () banked
 20140  0132EA  2BBC               	incf	Byte_GetZone@Offset& (0+255),f,b
 20141  0132EC                     l732:
 20142                           
 20143                           ; BSR set to: 0
 20144                           
 20145                           ; BSR set to: 0
 20146  0132EC  0100               	movlb	0	; () banked
 20147  0132EE  51B7               	movf	Byte_GetZone@pMax& (0+255),w,b
 20148  0132F0  0100               	movlb	0	; () banked
 20149  0132F2  5DB8               	subwf	Byte_GetZone@pChunk& (0+255),w,b
 20150  0132F4  B0D8               	btfsc	status,0,c
 20151  0132F6  D7F4               	goto	l733
 20152                           
 20153                           ; BSR set to: 0
 20154                           ;Types.c: 74: }
 20155                           ;Types.c: 75: pChunk *= pChunkSize;
 20156                           
 20157                           ; BSR set to: 0
 20158  0132F8  0100               	movlb	0	; () banked
 20159  0132FA  51B9               	movf	Byte_GetZone@pChunkSize& (0+255),w,b
 20160  0132FC  0100               	movlb	0	; () banked
 20161  0132FE  03B8               	mulwf	Byte_GetZone@pChunk& (0+255),b
 20162  013300  50F3               	movf	prodl,w,c
 20163  013302  6FB8               	movwf	Byte_GetZone@pChunk& (0+255),b
 20164                           
 20165                           ; BSR set to: 0
 20166                           ;Types.c: 76: pChunk += Offset;
 20167  013304  0100               	movlb	0	; () banked
 20168  013306  51BC               	movf	Byte_GetZone@Offset& (0+255),w,b
 20169  013308  0100               	movlb	0	; () banked
 20170  01330A  27B8               	addwf	Byte_GetZone@pChunk& (0+255),f,b
 20171                           
 20172                           ; BSR set to: 0
 20173                           ;Types.c: 78: Output >>= pChunk;
 20174  01330C  0100               	movlb	0	; () banked
 20175  01330E  29B8               	incf	Byte_GetZone@pChunk& (0+255),w,b
 20176  013310  0100               	movlb	0	; () banked
 20177  013312  6FBA               	movwf	??_Byte_GetZone& (0+255),b
 20178  013314  D003               	goto	u6500
 20179  013316                     u6505:
 20180  013316  0100               	movlb	0	; () banked
 20181  013318  90D8               	bcf	status,0,c
 20182  01331A  33BD               	rrcf	Byte_GetZone@Output& (0+255),f,b
 20183  01331C                     u6500:
 20184  01331C  0100               	movlb	0	; () banked
 20185  01331E  2FBA               	decfsz	??_Byte_GetZone& (0+255),f,b
 20186  013320  D7FA               	goto	u6505
 20187                           
 20188                           ;Types.c: 79: Output &= MASK;
 20189  013322  0100               	movlb	0	; () banked
 20190  013324  51BB               	movf	Byte_GetZone@MASK& (0+255),w,b
 20191  013326  0100               	movlb	0	; () banked
 20192  013328  17BD               	andwf	Byte_GetZone@Output& (0+255),f,b
 20193                           
 20194                           ; BSR set to: 0
 20195                           ;Types.c: 80: return Output;
 20196  01332A  0100               	movlb	0	; () banked
 20197  01332C  51BD               	movf	Byte_GetZone@Output& (0+255),w,b
 20198  01332E  0012               	return	
 20199  013330                     __end_of_Byte_GetZone:
 20200                           	opt stack 0
 20201                           tosu	equ	0xFFF
 20202                           tosh	equ	0xFFE
 20203                           tosl	equ	0xFFD
 20204                           pclath	equ	0xFFA
 20205                           tblptru	equ	0xFF8
 20206                           tblptrh	equ	0xFF7
 20207                           tblptrl	equ	0xFF6
 20208                           tablat	equ	0xFF5
 20209                           prodh	equ	0xFF4
 20210                           prodl	equ	0xFF3
 20211                           intcon	equ	0xFF2
 20212                           indf0	equ	0xFEF
 20213                           postinc0	equ	0xFEE
 20214                           fsr0h	equ	0xFEA
 20215                           fsr0l	equ	0xFE9
 20216                           wreg	equ	0xFE8
 20217                           indf1	equ	0xFE7
 20218                           postdec1	equ	0xFE5
 20219                           fsr1h	equ	0xFE2
 20220                           fsr1l	equ	0xFE1
 20221                           indf2	equ	0xFDF
 20222                           postinc2	equ	0xFDE
 20223                           postdec2	equ	0xFDD
 20224                           plusw2	equ	0xFDB
 20225                           fsr2h	equ	0xFDA
 20226                           fsr2l	equ	0xFD9
 20227                           status	equ	0xFD8
 20228                           
 20229 ;; *************** function _Byte_SetQuad *****************
 20230 ;; Defined at:
 20231 ;;		line 101 in file "Library/Types.c"
 20232 ;; Parameters:    Size  Location     Type
 20233 ;;  pInput          2   11[BANK0 ] PTR struct Byte
 20234 ;;		 -> SSP2CON1(1), SSP1CON1(1), TRISG(1), TRISF(1), 
 20235 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20236 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20237 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20238 ;;		 -> NULL(0), 
 20239 ;;  pQuad           1   13[BANK0 ] unsigned char 
 20240 ;;  pValue          1   14[BANK0 ] unsigned char 
 20241 ;; Auto vars:     Size  Location     Type
 20242 ;;		None
 20243 ;; Return value:  Size  Location     Type
 20244 ;;                  1    wreg      void 
 20245 ;; Registers used:
 20246 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20247 ;; Tracked objects:
 20248 ;;		On entry : 0/0
 20249 ;;		On exit  : 0/0
 20250 ;;		Unchanged: 0/0
 20251 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20252 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20253 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20254 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20255 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20256 ;;Total ram usage:        4 bytes
 20257 ;; Hardware stack levels used:    1
 20258 ;; Hardware stack levels required when called:    8
 20259 ;; This function calls:
 20260 ;;		_Byte_SetZone
 20261 ;; This function is called by:
 20262 ;;		_Port_SetQuadType
 20263 ;;		_SPI_Init
 20264 ;;		_SPI_MinSpeed
 20265 ;;		_SPI_MaxSpeed
 20266 ;;		_Port_SetQuad
 20267 ;;		_Word_SetQuad
 20268 ;;		_I2C_Init
 20269 ;; This function uses a non-reentrant model
 20270 ;;
 20271                           
 20272                           	psect	text112
 20273  01469C                     __ptext112:
 20274                           	opt stack 0
 20275  01469C                     _Byte_SetQuad:
 20276                           	opt stack 20
 20277                           
 20278                           ;Types.c: 103: Byte_SetZone(pInput, 2, pQuad, 4, pValue);
 20279                           
 20280                           ; BSR set to: 0
 20281                           ;incstack = 0
 20282  01469C  C0C0  F0B5         	movff	Byte_SetQuad@pInput,Byte_SetZone@pInput
 20283  0146A0  C0C1  F0B6         	movff	Byte_SetQuad@pInput+1,Byte_SetZone@pInput+1
 20284  0146A4  0E02               	movlw	2
 20285  0146A6  0100               	movlb	0	; () banked
 20286  0146A8  6FB7               	movwf	Byte_SetZone@pMax& (0+255),b
 20287  0146AA  C0C2  F0B8         	movff	Byte_SetQuad@pQuad,Byte_SetZone@pChunk
 20288  0146AE  0E04               	movlw	4
 20289  0146B0  0100               	movlb	0	; () banked
 20290  0146B2  6FB9               	movwf	Byte_SetZone@pChunkSize& (0+255),b
 20291  0146B4  C0C3  F0BA         	movff	Byte_SetQuad@pValue,Byte_SetZone@pValue
 20292  0146B8  ECFA  F095         	call	_Byte_SetZone	;wreg free
 20293  0146BC  0012               	return		;funcret
 20294  0146BE                     __end_of_Byte_SetQuad:
 20295                           	opt stack 0
 20296                           tosu	equ	0xFFF
 20297                           tosh	equ	0xFFE
 20298                           tosl	equ	0xFFD
 20299                           pclath	equ	0xFFA
 20300                           tblptru	equ	0xFF8
 20301                           tblptrh	equ	0xFF7
 20302                           tblptrl	equ	0xFF6
 20303                           tablat	equ	0xFF5
 20304                           prodh	equ	0xFF4
 20305                           prodl	equ	0xFF3
 20306                           intcon	equ	0xFF2
 20307                           indf0	equ	0xFEF
 20308                           postinc0	equ	0xFEE
 20309                           fsr0h	equ	0xFEA
 20310                           fsr0l	equ	0xFE9
 20311                           wreg	equ	0xFE8
 20312                           indf1	equ	0xFE7
 20313                           postdec1	equ	0xFE5
 20314                           fsr1h	equ	0xFE2
 20315                           fsr1l	equ	0xFE1
 20316                           indf2	equ	0xFDF
 20317                           postinc2	equ	0xFDE
 20318                           postdec2	equ	0xFDD
 20319                           plusw2	equ	0xFDB
 20320                           fsr2h	equ	0xFDA
 20321                           fsr2l	equ	0xFD9
 20322                           status	equ	0xFD8
 20323                           
 20324 ;; *************** function _Byte_SetZone *****************
 20325 ;; Defined at:
 20326 ;;		line 47 in file "Library/Types.c"
 20327 ;; Parameters:    Size  Location     Type
 20328 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 20329 ;;		 -> PortF..(2), PortC..(2), PortD..(2), PortE..(2), 
 20330 ;;		 -> PortB..(2), PortA..(2), PortG..(2), PortG(10), 
 20331 ;;		 -> PortA(10), PortB(10), PortE(10), SSP2CON1(1), 
 20332 ;;		 -> PortD(10), SSP1CON1(1), TRISG(1), TRISF(1), 
 20333 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 20334 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 20335 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 20336 ;;		 -> PortC(10), PortF(10), NULL(0), 
 20337 ;;  pMax            1    2[BANK0 ] unsigned char 
 20338 ;;  pChunk          1    3[BANK0 ] unsigned char 
 20339 ;;  pChunkSize      1    4[BANK0 ] unsigned char 
 20340 ;;  pValue          1    5[BANK0 ] unsigned char 
 20341 ;; Auto vars:     Size  Location     Type
 20342 ;;  MASK            1   10[BANK0 ] unsigned char 
 20343 ;;  Offset          1    9[BANK0 ] unsigned char 
 20344 ;; Return value:  Size  Location     Type
 20345 ;;                  1    wreg      void 
 20346 ;; Registers used:
 20347 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 20348 ;; Tracked objects:
 20349 ;;		On entry : 0/0
 20350 ;;		On exit  : 0/0
 20351 ;;		Unchanged: 0/0
 20352 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20353 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20354 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20355 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20356 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20357 ;;Total ram usage:       11 bytes
 20358 ;; Hardware stack levels used:    1
 20359 ;; Hardware stack levels required when called:    7
 20360 ;; This function calls:
 20361 ;;		Nothing
 20362 ;; This function is called by:
 20363 ;;		_Byte_SetPair
 20364 ;;		_Byte_SetQuad
 20365 ;;		_Byte_SetTriple
 20366 ;; This function uses a non-reentrant model
 20367 ;;
 20368                           
 20369                           	psect	text113
 20370  012BF4                     __ptext113:
 20371                           	opt stack 0
 20372  012BF4                     _Byte_SetZone:
 20373                           	opt stack 19
 20374                           
 20375                           ;Types.c: 49: UINT8 MASK = MASKS[pChunkSize];
 20376                           
 20377                           ;incstack = 0
 20378  012BF4  0100               	movlb	0	; () banked
 20379  012BF6  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20380  012BF8  0D01               	mullw	1
 20381  012BFA  0EC1               	movlw	low _MASKS
 20382  012BFC  24F3               	addwf	prodl,w,c
 20383  012BFE  6EF6               	movwf	tblptrl,c
 20384  012C00  0EFD               	movlw	high _MASKS
 20385  012C02  20F4               	addwfc	prodh,w,c
 20386  012C04  6EF7               	movwf	tblptrh,c
 20387  012C06                     	if	1	;There are 3 active tblptr bytes
 20388  012C06  6AF8               	clrf	tblptru,c
 20389  012C08  0E00               	movlw	low (__mediumconst shr (0+16))
 20390  012C0A  22F8               	addwfc	tblptru,f,c
 20391  012C0C                     	endif
 20392  012C0C  0008               	tblrd		*
 20393  012C0E  CFF5 F0BF          	movff	tablat,Byte_SetZone@MASK
 20394                           
 20395                           ; BSR set to: 0
 20396                           ;Types.c: 50: UINT8 Offset = 0;
 20397  012C12  0E00               	movlw	0
 20398  012C14  0100               	movlb	0	; () banked
 20399  012C16  6FBE               	movwf	Byte_SetZone@Offset& (0+255),b
 20400                           
 20401                           ;Types.c: 52: while (pChunk >= pMax)
 20402  012C18  D006               	goto	l726
 20403  012C1A                     
 20404                           ; BSR set to: 0
 20405                           ;Types.c: 53: {
 20406                           ;Types.c: 54: pChunk -= pMax;
 20407                           
 20408                           ; BSR set to: 0
 20409  012C1A  0100               	movlb	0	; () banked
 20410  012C1C  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 20411  012C1E  0100               	movlb	0	; () banked
 20412  012C20  5FB8               	subwf	Byte_SetZone@pChunk& (0+255),f,b
 20413                           
 20414                           ; BSR set to: 0
 20415                           ;Types.c: 55: Offset += 1;
 20416  012C22  0100               	movlb	0	; () banked
 20417  012C24  2BBE               	incf	Byte_SetZone@Offset& (0+255),f,b
 20418  012C26                     l726:
 20419                           
 20420                           ; BSR set to: 0
 20421                           
 20422                           ; BSR set to: 0
 20423  012C26  0100               	movlb	0	; () banked
 20424  012C28  51B7               	movf	Byte_SetZone@pMax& (0+255),w,b
 20425  012C2A  0100               	movlb	0	; () banked
 20426  012C2C  5DB8               	subwf	Byte_SetZone@pChunk& (0+255),w,b
 20427  012C2E  B0D8               	btfsc	status,0,c
 20428  012C30  D7F4               	goto	l727
 20429                           
 20430                           ; BSR set to: 0
 20431                           ;Types.c: 56: }
 20432                           ;Types.c: 57: pChunk *= pChunkSize;
 20433                           
 20434                           ; BSR set to: 0
 20435  012C32  0100               	movlb	0	; () banked
 20436  012C34  51B9               	movf	Byte_SetZone@pChunkSize& (0+255),w,b
 20437  012C36  0100               	movlb	0	; () banked
 20438  012C38  03B8               	mulwf	Byte_SetZone@pChunk& (0+255),b
 20439  012C3A  50F3               	movf	prodl,w,c
 20440  012C3C  6FB8               	movwf	Byte_SetZone@pChunk& (0+255),b
 20441                           
 20442                           ; BSR set to: 0
 20443                           ;Types.c: 58: pChunk += Offset;
 20444  012C3E  0100               	movlb	0	; () banked
 20445  012C40  51BE               	movf	Byte_SetZone@Offset& (0+255),w,b
 20446  012C42  0100               	movlb	0	; () banked
 20447  012C44  27B8               	addwf	Byte_SetZone@pChunk& (0+255),f,b
 20448                           
 20449                           ; BSR set to: 0
 20450                           ;Types.c: 60: pValue &= MASK;
 20451  012C46  0100               	movlb	0	; () banked
 20452  012C48  51BF               	movf	Byte_SetZone@MASK& (0+255),w,b
 20453  012C4A  0100               	movlb	0	; () banked
 20454  012C4C  17BA               	andwf	Byte_SetZone@pValue& (0+255),f,b
 20455                           
 20456                           ; BSR set to: 0
 20457                           ;Types.c: 61: pInput->mBits &= ~(MASK << pChunk);
 20458  012C4E  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20459  012C52  C0BF  F0BC         	movff	Byte_SetZone@MASK,??_Byte_SetZone+1
 20460  012C56  0100               	movlb	0	; () banked
 20461  012C58  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 20462  012C5A  D003               	goto	u6584
 20463  012C5C                     u6585:
 20464  012C5C  0100               	movlb	0	; () banked
 20465  012C5E  90D8               	bcf	status,0,c
 20466  012C60  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20467  012C62                     u6584:
 20468  012C62  0100               	movlb	0	; () banked
 20469  012C64  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 20470  012C66  D7FA               	goto	u6585
 20471  012C68  0100               	movlb	0	; () banked
 20472  012C6A  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20473  012C6C  0AFF               	xorlw	255
 20474  012C6E  0100               	movlb	0	; () banked
 20475  012C70  6FBD               	movwf	(??_Byte_SetZone+2)& (0+255),b
 20476  012C72  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20477  012C76  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20478  012C7A  0100               	movlb	0	; () banked
 20479  012C7C  51BD               	movf	(??_Byte_SetZone+2)& (0+255),w,b
 20480  012C7E  16DF               	andwf	indf2,f,c
 20481                           
 20482                           ; BSR set to: 0
 20483                           ;Types.c: 62: pInput->mBits |= pValue << pChunk;
 20484  012C80  C0B8  F0BB         	movff	Byte_SetZone@pChunk,??_Byte_SetZone
 20485  012C84  C0BA  F0BC         	movff	Byte_SetZone@pValue,??_Byte_SetZone+1
 20486  012C88  0100               	movlb	0	; () banked
 20487  012C8A  2BBB               	incf	??_Byte_SetZone& (0+255),f,b
 20488  012C8C  D003               	goto	u6594
 20489  012C8E                     u6595:
 20490  012C8E  0100               	movlb	0	; () banked
 20491  012C90  90D8               	bcf	status,0,c
 20492  012C92  37BC               	rlcf	(??_Byte_SetZone+1)& (0+255),f,b
 20493  012C94                     u6594:
 20494  012C94  0100               	movlb	0	; () banked
 20495  012C96  2FBB               	decfsz	??_Byte_SetZone& (0+255),f,b
 20496  012C98  D7FA               	goto	u6595
 20497  012C9A  C0B5  FFD9         	movff	Byte_SetZone@pInput,fsr2l
 20498  012C9E  C0B6  FFDA         	movff	Byte_SetZone@pInput+1,fsr2h
 20499  012CA2  0100               	movlb	0	; () banked
 20500  012CA4  51BC               	movf	(??_Byte_SetZone+1)& (0+255),w,b
 20501  012CA6  12DF               	iorwf	indf2,f,c
 20502                           
 20503                           ; BSR set to: 0
 20504  012CA8  0012               	return		;funcret
 20505  012CAA                     __end_of_Byte_SetZone:
 20506                           	opt stack 0
 20507                           tosu	equ	0xFFF
 20508                           tosh	equ	0xFFE
 20509                           tosl	equ	0xFFD
 20510                           pclath	equ	0xFFA
 20511                           tblptru	equ	0xFF8
 20512                           tblptrh	equ	0xFF7
 20513                           tblptrl	equ	0xFF6
 20514                           tablat	equ	0xFF5
 20515                           prodh	equ	0xFF4
 20516                           prodl	equ	0xFF3
 20517                           intcon	equ	0xFF2
 20518                           indf0	equ	0xFEF
 20519                           postinc0	equ	0xFEE
 20520                           fsr0h	equ	0xFEA
 20521                           fsr0l	equ	0xFE9
 20522                           wreg	equ	0xFE8
 20523                           indf1	equ	0xFE7
 20524                           postdec1	equ	0xFE5
 20525                           fsr1h	equ	0xFE2
 20526                           fsr1l	equ	0xFE1
 20527                           indf2	equ	0xFDF
 20528                           postinc2	equ	0xFDE
 20529                           postdec2	equ	0xFDD
 20530                           plusw2	equ	0xFDB
 20531                           fsr2h	equ	0xFDA
 20532                           fsr2l	equ	0xFD9
 20533                           status	equ	0xFD8
 20534                           
 20535 ;; *************** function _Console_Render *****************
 20536 ;; Defined at:
 20537 ;;		line 377 in file "Library/Console.c"
 20538 ;; Parameters:    Size  Location     Type
 20539 ;;		None
 20540 ;; Auto vars:     Size  Location     Type
 20541 ;;  lCursor         4   38[BANK0 ] struct Point
 20542 ;;  y               1   43[BANK0 ] unsigned char 
 20543 ;;  x               1   42[BANK0 ] unsigned char 
 20544 ;;  temp            1   37[BANK0 ] unsigned char 
 20545 ;;  Temp            2    0        unsigned short 
 20546 ;; Return value:  Size  Location     Type
 20547 ;;                  1    wreg      void 
 20548 ;; Registers used:
 20549 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 20550 ;; Tracked objects:
 20551 ;;		On entry : 0/0
 20552 ;;		On exit  : 0/0
 20553 ;;		Unchanged: 0/0
 20554 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20555 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20556 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20557 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20558 ;;      Totals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20559 ;;Total ram usage:        9 bytes
 20560 ;; Hardware stack levels used:    1
 20561 ;; Hardware stack levels required when called:   11
 20562 ;; This function calls:
 20563 ;;		_Console_MakeField
 20564 ;;		_LCD_DrawField
 20565 ;;		_LCD_FillRectangle
 20566 ;; This function is called by:
 20567 ;;		_main
 20568 ;; This function uses a non-reentrant model
 20569 ;;
 20570                           
 20571                           	psect	text114
 20572  010EDC                     __ptext114:
 20573                           	opt stack 0
 20574  010EDC                     _Console_Render:
 20575                           	opt stack 19
 20576                           
 20577                           ;Console.c: 379: Colour Temp;
 20578                           ;Console.c: 380: if (change)
 20579                           
 20580                           ; BSR set to: 0
 20581                           ;incstack = 0
 20582  010EDC  0100               	movlb	0	; () banked
 20583  010EDE  51FF               	movf	_change& (0+255),w,b
 20584  010EE0  B4D8               	btfsc	status,2,c
 20585  010EE2  0012               	return	
 20586                           
 20587                           ; BSR set to: 0
 20588                           ;Console.c: 381: {
 20589                           ;Console.c: 382: UINT8 x, y, temp;
 20590                           ;Console.c: 383: Point lCursor = {6,6};
 20591  010EE4  C3D5  F0DB         	movff	Console_Render@F6956,Console_Render@lCursor
 20592  010EE8  C3D6  F0DC         	movff	Console_Render@F6956+1,Console_Render@lCursor+1
 20593  010EEC  C3D7  F0DD         	movff	Console_Render@F6956+2,Console_Render@lCursor+2
 20594  010EF0  C3D8  F0DE         	movff	Console_Render@F6956+3,Console_Render@lCursor+3
 20595                           
 20596                           ; BSR set to: 0
 20597                           ;Console.c: 385: if (clearall)
 20598  010EF4  0100               	movlb	0	; () banked
 20599  010EF6  518E               	movf	_clearall& (0+255),w,b
 20600  010EF8  B4D8               	btfsc	status,2,c
 20601  010EFA  D005               	goto	l1056
 20602                           
 20603                           ; BSR set to: 0
 20604                           ;Console.c: 386: {
 20605                           ;Console.c: 389: temp = lBufferY;
 20606  010EFC  C08C  F0DA         	movff	_lBufferY,Console_Render@temp
 20607                           
 20608                           ; BSR set to: 0
 20609                           ;Console.c: 390: lBufferY = (UINT8)((128-6)/8);
 20610  010F00  0E0F               	movlw	15
 20611  010F02  0100               	movlb	0	; () banked
 20612  010F04  6F8C               	movwf	_lBufferY& (0+255),b
 20613  010F06                     l1056:
 20614                           
 20615                           ; BSR set to: 0
 20616                           ;Console.c: 391: }
 20617                           ;Console.c: 393: for (y = 0; y <= lBufferY; y++)
 20618  010F06  0E00               	movlw	0
 20619  010F08  0100               	movlb	0	; () banked
 20620  010F0A  6FE0               	movwf	Console_Render@y& (0+255),b
 20621  010F0C  D0DF               	goto	l1057
 20622  010F0E                     
 20623                           ; BSR set to: 0
 20624                           ;Console.c: 394: {
 20625                           ;Console.c: 395: gForecolour = lCBuffer[y];
 20626                           
 20627                           ; BSR set to: 0
 20628  010F0E  0100               	movlb	0	; () banked
 20629  010F10  51E0               	movf	Console_Render@y& (0+255),w,b
 20630  010F12  0D02               	mullw	2
 20631  010F14  0E00               	movlw	low _lCBuffer
 20632  010F16  24F3               	addwf	prodl,w,c
 20633  010F18  6ED9               	movwf	fsr2l,c
 20634  010F1A  0E03               	movlw	high _lCBuffer
 20635  010F1C  20F4               	addwfc	prodh,w,c
 20636  010F1E  6EDA               	movwf	fsr2h,c
 20637  010F20  CFDE F0FD          	movff	postinc2,_gForecolour
 20638  010F24  CFDD F0FE          	movff	postdec2,_gForecolour+1
 20639                           
 20640                           ; BSR set to: 0
 20641                           ;Console.c: 396: for (x = 0; x < (UINT8)((128-6)/6); x++)
 20642  010F28  0E00               	movlw	0
 20643  010F2A  0100               	movlb	0	; () banked
 20644  010F2C  6FDF               	movwf	Console_Render@x& (0+255),b
 20645  010F2E                     l12271:
 20646                           
 20647                           ; BSR set to: 0
 20648  010F2E  0E13               	movlw	19
 20649  010F30  0100               	movlb	0	; () banked
 20650  010F32  65DF               	cpfsgt	Console_Render@x& (0+255),b
 20651  010F34  D001               	goto	l1059
 20652  010F36  D0BE               	goto	u8240
 20653  010F38                     l1059:
 20654                           
 20655                           ; BSR set to: 0
 20656                           ;Console.c: 397: {
 20657                           ;Console.c: 398: if ((lBuffer[y][x] & 0b10000000))
 20658                           
 20659                           ; BSR set to: 0
 20660  010F38  0100               	movlb	0	; () banked
 20661  010F3A  51E0               	movf	Console_Render@y& (0+255),w,b
 20662  010F3C  0D14               	mullw	20
 20663  010F3E  0EAA               	movlw	low _lBuffer
 20664  010F40  0100               	movlb	0	; () banked
 20665  010F42  6FD8               	movwf	??_Console_Render& (0+255),b
 20666  010F44  0E04               	movlw	high _lBuffer
 20667  010F46  0100               	movlb	0	; () banked
 20668  010F48  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20669  010F4A  50F3               	movf	prodl,w,c
 20670  010F4C  0100               	movlb	0	; () banked
 20671  010F4E  27D8               	addwf	??_Console_Render& (0+255),f,b
 20672  010F50  50F4               	movf	prodh,w,c
 20673  010F52  0100               	movlb	0	; () banked
 20674  010F54  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20675  010F56  0100               	movlb	0	; () banked
 20676  010F58  51DF               	movf	Console_Render@x& (0+255),w,b
 20677  010F5A  0D01               	mullw	1
 20678  010F5C  50F3               	movf	prodl,w,c
 20679  010F5E  0100               	movlb	0	; () banked
 20680  010F60  25D8               	addwf	??_Console_Render& (0+255),w,b
 20681  010F62  6ED9               	movwf	fsr2l,c
 20682  010F64  50F4               	movf	prodh,w,c
 20683  010F66  0100               	movlb	0	; () banked
 20684  010F68  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20685  010F6A  6EDA               	movwf	fsr2h,c
 20686  010F6C  AEDF               	btfss	indf2,7,c
 20687  010F6E  D09A               	goto	l1063
 20688                           
 20689                           ; BSR set to: 0
 20690                           ;Console.c: 399: {
 20691                           ;Console.c: 400: lBuffer[y][x] &= 0x7F;
 20692  010F70  0100               	movlb	0	; () banked
 20693  010F72  51E0               	movf	Console_Render@y& (0+255),w,b
 20694  010F74  0D14               	mullw	20
 20695  010F76  0EAA               	movlw	low _lBuffer
 20696  010F78  0100               	movlb	0	; () banked
 20697  010F7A  6FD8               	movwf	??_Console_Render& (0+255),b
 20698  010F7C  0E04               	movlw	high _lBuffer
 20699  010F7E  0100               	movlb	0	; () banked
 20700  010F80  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20701  010F82  50F3               	movf	prodl,w,c
 20702  010F84  0100               	movlb	0	; () banked
 20703  010F86  27D8               	addwf	??_Console_Render& (0+255),f,b
 20704  010F88  50F4               	movf	prodh,w,c
 20705  010F8A  0100               	movlb	0	; () banked
 20706  010F8C  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20707  010F8E  0100               	movlb	0	; () banked
 20708  010F90  51DF               	movf	Console_Render@x& (0+255),w,b
 20709  010F92  0D01               	mullw	1
 20710  010F94  50F3               	movf	prodl,w,c
 20711  010F96  0100               	movlb	0	; () banked
 20712  010F98  25D8               	addwf	??_Console_Render& (0+255),w,b
 20713  010F9A  6ED9               	movwf	fsr2l,c
 20714  010F9C  50F4               	movf	prodh,w,c
 20715  010F9E  0100               	movlb	0	; () banked
 20716  010FA0  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20717  010FA2  6EDA               	movwf	fsr2h,c
 20718  010FA4  0E7F               	movlw	127
 20719  010FA6  16DF               	andwf	indf2,f,c
 20720                           
 20721                           ;Console.c: 401: if (lBuffer[y][x])
 20722  010FA8  0100               	movlb	0	; () banked
 20723  010FAA  51E0               	movf	Console_Render@y& (0+255),w,b
 20724  010FAC  0D14               	mullw	20
 20725  010FAE  0EAA               	movlw	low _lBuffer
 20726  010FB0  0100               	movlb	0	; () banked
 20727  010FB2  6FD8               	movwf	??_Console_Render& (0+255),b
 20728  010FB4  0E04               	movlw	high _lBuffer
 20729  010FB6  0100               	movlb	0	; () banked
 20730  010FB8  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20731  010FBA  50F3               	movf	prodl,w,c
 20732  010FBC  0100               	movlb	0	; () banked
 20733  010FBE  27D8               	addwf	??_Console_Render& (0+255),f,b
 20734  010FC0  50F4               	movf	prodh,w,c
 20735  010FC2  0100               	movlb	0	; () banked
 20736  010FC4  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20737  010FC6  0100               	movlb	0	; () banked
 20738  010FC8  51DF               	movf	Console_Render@x& (0+255),w,b
 20739  010FCA  0D01               	mullw	1
 20740  010FCC  50F3               	movf	prodl,w,c
 20741  010FCE  0100               	movlb	0	; () banked
 20742  010FD0  25D8               	addwf	??_Console_Render& (0+255),w,b
 20743  010FD2  6ED9               	movwf	fsr2l,c
 20744  010FD4  50F4               	movf	prodh,w,c
 20745  010FD6  0100               	movlb	0	; () banked
 20746  010FD8  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20747  010FDA  6EDA               	movwf	fsr2h,c
 20748  010FDC  50DF               	movf	indf2,w,c
 20749  010FDE  B4D8               	btfsc	status,2,c
 20750  010FE0  D04A               	goto	l1062
 20751                           
 20752                           ; BSR set to: 0
 20753                           ;Console.c: 402: {
 20754                           ;Console.c: 403: LCD_FillRectangle(gBackcolour, lCursor, gCharSize);
 20755  010FE2  C081  F0BE         	movff	_gBackcolour,LCD_FillRectangle@pColour
 20756  010FE6  C082  F0BF         	movff	_gBackcolour+1,LCD_FillRectangle@pColour+1
 20757  010FEA  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20758  010FEE  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20759  010FF2  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20760  010FF6  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20761  010FFA  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 20762  010FFE  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20763  011002  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20764  011006  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20765  01100A  EC62  F09C         	call	_LCD_FillRectangle	;wreg free
 20766                           
 20767                           ;Console.c: 404: LCD_DrawField(Console_MakeField(lBuffer[y][x]), lCursor, gCharSize);
 20768  01100E  0100               	movlb	0	; () banked
 20769  011010  51E0               	movf	Console_Render@y& (0+255),w,b
 20770  011012  0D14               	mullw	20
 20771  011014  0EAA               	movlw	low _lBuffer
 20772  011016  0100               	movlb	0	; () banked
 20773  011018  6FD8               	movwf	??_Console_Render& (0+255),b
 20774  01101A  0E04               	movlw	high _lBuffer
 20775  01101C  0100               	movlb	0	; () banked
 20776  01101E  6FD9               	movwf	(??_Console_Render+1)& (0+255),b
 20777  011020  50F3               	movf	prodl,w,c
 20778  011022  0100               	movlb	0	; () banked
 20779  011024  27D8               	addwf	??_Console_Render& (0+255),f,b
 20780  011026  50F4               	movf	prodh,w,c
 20781  011028  0100               	movlb	0	; () banked
 20782  01102A  23D9               	addwfc	(??_Console_Render+1)& (0+255),f,b
 20783  01102C  0100               	movlb	0	; () banked
 20784  01102E  51DF               	movf	Console_Render@x& (0+255),w,b
 20785  011030  0D01               	mullw	1
 20786  011032  50F3               	movf	prodl,w,c
 20787  011034  0100               	movlb	0	; () banked
 20788  011036  25D8               	addwf	??_Console_Render& (0+255),w,b
 20789  011038  6ED9               	movwf	fsr2l,c
 20790  01103A  50F4               	movf	prodh,w,c
 20791  01103C  0100               	movlb	0	; () banked
 20792  01103E  21D9               	addwfc	(??_Console_Render+1)& (0+255),w,b
 20793  011040  6EDA               	movwf	fsr2h,c
 20794  011042  50DF               	movf	indf2,w,c
 20795  011044  ECB5  F093         	call	_Console_MakeField
 20796  011048  C0BA  F0C7         	movff	?_Console_MakeField,LCD_DrawField@pField
 20797  01104C  C0BB  F0C8         	movff	?_Console_MakeField+1,LCD_DrawField@pField+1
 20798  011050  C0DB  F0C9         	movff	Console_Render@lCursor,LCD_DrawField@pPoint
 20799  011054  C0DC  F0CA         	movff	Console_Render@lCursor+1,LCD_DrawField@pPoint+1
 20800  011058  C0DD  F0CB         	movff	Console_Render@lCursor+2,LCD_DrawField@pPoint+2
 20801  01105C  C0DE  F0CC         	movff	Console_Render@lCursor+3,LCD_DrawField@pPoint+3
 20802  011060  C0F9  F0CD         	movff	_gCharSize,LCD_DrawField@pSize
 20803  011064  C0FA  F0CE         	movff	_gCharSize+1,LCD_DrawField@pSize+1
 20804  011068  C0FB  F0CF         	movff	_gCharSize+2,LCD_DrawField@pSize+2
 20805  01106C  C0FC  F0D0         	movff	_gCharSize+3,LCD_DrawField@pSize+3
 20806  011070  ECA7  F098         	call	_LCD_DrawField	;wreg free
 20807                           
 20808                           ;Console.c: 405: }
 20809  011074  D017               	goto	l1063
 20810  011076                     l1062:
 20811                           
 20812                           ;Console.c: 406: else
 20813                           ;Console.c: 407: LCD_FillRectangle(0x0000, lCursor, gCharSize);
 20814  011076  0E00               	movlw	0
 20815  011078  0100               	movlb	0	; () banked
 20816  01107A  6FBF               	movwf	(LCD_FillRectangle@pColour+1)& (0+255),b
 20817  01107C  0E00               	movlw	0
 20818  01107E  6FBE               	movwf	LCD_FillRectangle@pColour& (0+255),b
 20819  011080  C0DB  F0C0         	movff	Console_Render@lCursor,LCD_FillRectangle@pPoint
 20820  011084  C0DC  F0C1         	movff	Console_Render@lCursor+1,LCD_FillRectangle@pPoint+1
 20821  011088  C0DD  F0C2         	movff	Console_Render@lCursor+2,LCD_FillRectangle@pPoint+2
 20822  01108C  C0DE  F0C3         	movff	Console_Render@lCursor+3,LCD_FillRectangle@pPoint+3
 20823  011090  C0F9  F0C4         	movff	_gCharSize,LCD_FillRectangle@pSize
 20824  011094  C0FA  F0C5         	movff	_gCharSize+1,LCD_FillRectangle@pSize+1
 20825  011098  C0FB  F0C6         	movff	_gCharSize+2,LCD_FillRectangle@pSize+2
 20826  01109C  C0FC  F0C7         	movff	_gCharSize+3,LCD_FillRectangle@pSize+3
 20827  0110A0  EC62  F09C         	call	_LCD_FillRectangle	;wreg free
 20828  0110A4                     l1063:
 20829                           
 20830                           ;Console.c: 408: }
 20831                           ;Console.c: 409: lCursor.x += (5 + 1);
 20832  0110A4  0E06               	movlw	6
 20833  0110A6  0100               	movlb	0	; () banked
 20834  0110A8  27DB               	addwf	Console_Render@lCursor& (0+255),f,b
 20835  0110AA  0E00               	movlw	0
 20836  0110AC  23DC               	addwfc	(Console_Render@lCursor+1)& (0+255),f,b
 20837                           
 20838                           ; BSR set to: 0
 20839  0110AE  0100               	movlb	0	; () banked
 20840  0110B0  2BDF               	incf	Console_Render@x& (0+255),f,b
 20841  0110B2  D73D               	goto	l12271
 20842  0110B4                     u8240:
 20843                           
 20844                           ; BSR set to: 0
 20845                           ;Console.c: 410: }
 20846                           ;Console.c: 411: lCursor.y += (7 + 1);
 20847                           
 20848                           ; BSR set to: 0
 20849  0110B4  0E08               	movlw	8
 20850  0110B6  0100               	movlb	0	; () banked
 20851  0110B8  27DD               	addwf	(Console_Render@lCursor+2)& (0+255),f,b
 20852  0110BA  0E00               	movlw	0
 20853  0110BC  23DE               	addwfc	(Console_Render@lCursor+3)& (0+255),f,b
 20854                           
 20855                           ; BSR set to: 0
 20856                           ;Console.c: 412: lCursor.x = 6;
 20857  0110BE  0E00               	movlw	0
 20858  0110C0  0100               	movlb	0	; () banked
 20859  0110C2  6FDC               	movwf	(Console_Render@lCursor+1)& (0+255),b
 20860  0110C4  0E06               	movlw	6
 20861  0110C6  6FDB               	movwf	Console_Render@lCursor& (0+255),b
 20862                           
 20863                           ; BSR set to: 0
 20864  0110C8  0100               	movlb	0	; () banked
 20865  0110CA  2BE0               	incf	Console_Render@y& (0+255),f,b
 20866  0110CC                     l1057:
 20867                           
 20868                           ; BSR set to: 0
 20869                           
 20870                           ; BSR set to: 0
 20871  0110CC  0100               	movlb	0	; () banked
 20872  0110CE  51E0               	movf	Console_Render@y& (0+255),w,b
 20873  0110D0  0100               	movlb	0	; () banked
 20874  0110D2  5D8C               	subwf	_lBufferY& (0+255),w,b
 20875  0110D4  B0D8               	btfsc	status,0,c
 20876  0110D6  D71B               	goto	l1058
 20877                           
 20878                           ; BSR set to: 0
 20879                           ;Console.c: 413: }
 20880                           ;Console.c: 415: if (clearall)
 20881                           
 20882                           ; BSR set to: 0
 20883  0110D8  0100               	movlb	0	; () banked
 20884  0110DA  518E               	movf	_clearall& (0+255),w,b
 20885  0110DC  B4D8               	btfsc	status,2,c
 20886  0110DE  0012               	return	
 20887                           
 20888                           ; BSR set to: 0
 20889                           ;Console.c: 416: {
 20890                           ;Console.c: 417: clearall = 0;
 20891  0110E0  0E00               	movlw	0
 20892  0110E2  0100               	movlb	0	; () banked
 20893  0110E4  6F8E               	movwf	_clearall& (0+255),b
 20894                           
 20895                           ; BSR set to: 0
 20896                           ;Console.c: 418: lBufferY = temp;
 20897  0110E6  C0DA  F08C         	movff	Console_Render@temp,_lBufferY
 20898                           
 20899                           ; BSR set to: 0
 20900  0110EA  0012               	return	
 20901  0110EC                     __end_of_Console_Render:
 20902                           	opt stack 0
 20903                           tosu	equ	0xFFF
 20904                           tosh	equ	0xFFE
 20905                           tosl	equ	0xFFD
 20906                           pclath	equ	0xFFA
 20907                           tblptru	equ	0xFF8
 20908                           tblptrh	equ	0xFF7
 20909                           tblptrl	equ	0xFF6
 20910                           tablat	equ	0xFF5
 20911                           prodh	equ	0xFF4
 20912                           prodl	equ	0xFF3
 20913                           intcon	equ	0xFF2
 20914                           indf0	equ	0xFEF
 20915                           postinc0	equ	0xFEE
 20916                           fsr0h	equ	0xFEA
 20917                           fsr0l	equ	0xFE9
 20918                           wreg	equ	0xFE8
 20919                           indf1	equ	0xFE7
 20920                           postdec1	equ	0xFE5
 20921                           fsr1h	equ	0xFE2
 20922                           fsr1l	equ	0xFE1
 20923                           indf2	equ	0xFDF
 20924                           postinc2	equ	0xFDE
 20925                           postdec2	equ	0xFDD
 20926                           plusw2	equ	0xFDB
 20927                           fsr2h	equ	0xFDA
 20928                           fsr2l	equ	0xFD9
 20929                           status	equ	0xFD8
 20930                           
 20931 ;; *************** function _LCD_FillRectangle *****************
 20932 ;; Defined at:
 20933 ;;		line 318 in file "Library/LCD.c"
 20934 ;; Parameters:    Size  Location     Type
 20935 ;;  pColour         2    9[BANK0 ] unsigned short 
 20936 ;;  pPoint          4   11[BANK0 ] struct Point
 20937 ;;  pSize           4   15[BANK0 ] struct Point
 20938 ;; Auto vars:     Size  Location     Type
 20939 ;;  j               1   22[BANK0 ] unsigned char 
 20940 ;;  i               1   21[BANK0 ] unsigned char 
 20941 ;; Return value:  Size  Location     Type
 20942 ;;                  1    wreg      void 
 20943 ;; Registers used:
 20944 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 20945 ;; Tracked objects:
 20946 ;;		On entry : 0/0
 20947 ;;		On exit  : 0/0
 20948 ;;		Unchanged: 0/0
 20949 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 20950 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20951 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20952 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20953 ;;      Totals:         0      14       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 20954 ;;Total ram usage:       14 bytes
 20955 ;; Hardware stack levels used:    1
 20956 ;; Hardware stack levels required when called:   10
 20957 ;; This function calls:
 20958 ;;		_LCD_Word_Write
 20959 ;;		_Set_Addr_Window
 20960 ;; This function is called by:
 20961 ;;		_Console_Render
 20962 ;;		_Console_ClearLine
 20963 ;; This function uses a non-reentrant model
 20964 ;;
 20965                           
 20966                           	psect	text115
 20967  0138C4                     __ptext115:
 20968                           	opt stack 0
 20969  0138C4                     _LCD_FillRectangle:
 20970                           	opt stack 19
 20971                           
 20972                           ;LCD.c: 320: UINT8 i = 0x00;
 20973                           
 20974                           ; BSR set to: 0
 20975                           ;incstack = 0
 20976  0138C4  0E00               	movlw	0
 20977  0138C6  0100               	movlb	0	; () banked
 20978  0138C8  6FCA               	movwf	LCD_FillRectangle@i& (0+255),b
 20979                           
 20980                           ;LCD.c: 321: UINT8 j = 0x00;
 20981  0138CA  0E00               	movlw	0
 20982  0138CC  0100               	movlb	0	; () banked
 20983  0138CE  6FCB               	movwf	LCD_FillRectangle@j& (0+255),b
 20984                           
 20985                           ; BSR set to: 0
 20986                           ;LCD.c: 330: Set_Addr_Window(pPoint.x, pPoint.y, pPoint.x + pSize.x - 1, pPoint.y + pSiz
      +                          e.y - 1);
 20987  0138D0  C0C2  F0BA         	movff	LCD_FillRectangle@pPoint+2,Set_Addr_Window@ys
 20988  0138D4  0100               	movlb	0	; () banked
 20989  0138D6  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 20990  0138D8  0100               	movlb	0	; () banked
 20991  0138DA  25C4               	addwf	LCD_FillRectangle@pSize& (0+255),w,b
 20992  0138DC  0100               	movlb	0	; () banked
 20993  0138DE  6FC8               	movwf	??_LCD_FillRectangle& (0+255),b
 20994  0138E0  0100               	movlb	0	; () banked
 20995  0138E2  05C8               	decf	??_LCD_FillRectangle& (0+255),w,b
 20996  0138E4  0100               	movlb	0	; () banked
 20997  0138E6  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 20998  0138E8  0100               	movlb	0	; () banked
 20999  0138EA  51C2               	movf	(LCD_FillRectangle@pPoint+2)& (0+255),w,b
 21000  0138EC  0100               	movlb	0	; () banked
 21001  0138EE  25C6               	addwf	(LCD_FillRectangle@pSize+2)& (0+255),w,b
 21002  0138F0  0100               	movlb	0	; () banked
 21003  0138F2  6FC9               	movwf	(??_LCD_FillRectangle+1)& (0+255),b
 21004  0138F4  0100               	movlb	0	; () banked
 21005  0138F6  05C9               	decf	(??_LCD_FillRectangle+1)& (0+255),w,b
 21006  0138F8  0100               	movlb	0	; () banked
 21007  0138FA  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 21008  0138FC  0100               	movlb	0	; () banked
 21009  0138FE  51C0               	movf	LCD_FillRectangle@pPoint& (0+255),w,b
 21010  013900  EC04  F097         	call	_Set_Addr_Window
 21011                           
 21012                           ;LCD.c: 331: for(j = pSize.y; j > 0; j--)
 21013  013904  C0C6  F0CB         	movff	LCD_FillRectangle@pSize+2,LCD_FillRectangle@j
 21014  013908                     l11835:
 21015  013908  0100               	movlb	0	; () banked
 21016  01390A  51CB               	movf	LCD_FillRectangle@j& (0+255),w,b
 21017  01390C  0100               	movlb	0	; () banked
 21018  01390E  B4D8               	btfsc	status,2,c
 21019  013910  0012               	return	
 21020                           
 21021                           ; BSR set to: 0
 21022                           ;LCD.c: 332: for(i = pSize.x; i > 0; i--)
 21023                           
 21024                           ; BSR set to: 0
 21025  013912  C0C4  F0CA         	movff	LCD_FillRectangle@pSize,LCD_FillRectangle@i
 21026  013916                     l11839:
 21027                           
 21028                           ; BSR set to: 0
 21029  013916  0100               	movlb	0	; () banked
 21030  013918  51CA               	movf	LCD_FillRectangle@i& (0+255),w,b
 21031  01391A  0100               	movlb	0	; () banked
 21032  01391C  B4D8               	btfsc	status,2,c
 21033  01391E  D009               	goto	u7700
 21034                           
 21035                           ; BSR set to: 0
 21036                           ;LCD.c: 333: LCD_Word_Write(pColour);
 21037                           
 21038                           ; BSR set to: 0
 21039                           
 21040                           ; BSR set to: 0
 21041  013920  C0BE  F0BA         	movff	LCD_FillRectangle@pColour,LCD_Word_Write@value
 21042  013924  C0BF  F0BB         	movff	LCD_FillRectangle@pColour+1,LCD_Word_Write@value+1
 21043  013928  ECE9  F0A3         	call	_LCD_Word_Write	;wreg free
 21044  01392C  0100               	movlb	0	; () banked
 21045  01392E  07CA               	decf	LCD_FillRectangle@i& (0+255),f,b
 21046  013930  D7F2               	goto	l11839
 21047  013932                     u7700:
 21048                           
 21049                           ; BSR set to: 0
 21050                           
 21051                           ; BSR set to: 0
 21052  013932  0100               	movlb	0	; () banked
 21053  013934  07CB               	decf	LCD_FillRectangle@j& (0+255),f,b
 21054  013936  D7E8               	goto	l11835
 21055  013938                     __end_of_LCD_FillRectangle:
 21056                           	opt stack 0
 21057                           tosu	equ	0xFFF
 21058                           tosh	equ	0xFFE
 21059                           tosl	equ	0xFFD
 21060                           pclath	equ	0xFFA
 21061                           tblptru	equ	0xFF8
 21062                           tblptrh	equ	0xFF7
 21063                           tblptrl	equ	0xFF6
 21064                           tablat	equ	0xFF5
 21065                           prodh	equ	0xFF4
 21066                           prodl	equ	0xFF3
 21067                           intcon	equ	0xFF2
 21068                           indf0	equ	0xFEF
 21069                           postinc0	equ	0xFEE
 21070                           fsr0h	equ	0xFEA
 21071                           fsr0l	equ	0xFE9
 21072                           wreg	equ	0xFE8
 21073                           indf1	equ	0xFE7
 21074                           postdec1	equ	0xFE5
 21075                           fsr1h	equ	0xFE2
 21076                           fsr1l	equ	0xFE1
 21077                           indf2	equ	0xFDF
 21078                           postinc2	equ	0xFDE
 21079                           postdec2	equ	0xFDD
 21080                           plusw2	equ	0xFDB
 21081                           fsr2h	equ	0xFDA
 21082                           fsr2l	equ	0xFD9
 21083                           status	equ	0xFD8
 21084                           
 21085 ;; *************** function _LCD_DrawField *****************
 21086 ;; Defined at:
 21087 ;;		line 393 in file "Library/LCD.c"
 21088 ;; Parameters:    Size  Location     Type
 21089 ;;  pField          2   18[BANK0 ] PTR unsigned short 
 21090 ;;		 -> Console_MakeField@Fill(70), 
 21091 ;;  pPoint          4   20[BANK0 ] struct Point
 21092 ;;  pSize           4   24[BANK0 ] struct Point
 21093 ;; Auto vars:     Size  Location     Type
 21094 ;;  count           2   30[BANK0 ] unsigned short 
 21095 ;;  i               1   34[BANK0 ] unsigned char 
 21096 ;;  ymax            1   33[BANK0 ] unsigned char 
 21097 ;;  xmax            1   32[BANK0 ] unsigned char 
 21098 ;; Return value:  Size  Location     Type
 21099 ;;                  1    wreg      void 
 21100 ;; Registers used:
 21101 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 21102 ;; Tracked objects:
 21103 ;;		On entry : 0/0
 21104 ;;		On exit  : 0/0
 21105 ;;		Unchanged: 0/0
 21106 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21107 ;;      Params:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21108 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21109 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21110 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21111 ;;Total ram usage:       17 bytes
 21112 ;; Hardware stack levels used:    1
 21113 ;; Hardware stack levels required when called:   10
 21114 ;; This function calls:
 21115 ;;		_LCD_Word_Write
 21116 ;;		_Set_Addr_Window
 21117 ;;		___wmul
 21118 ;; This function is called by:
 21119 ;;		_Console_Render
 21120 ;; This function uses a non-reentrant model
 21121 ;;
 21122                           
 21123                           	psect	text116
 21124  01314E                     __ptext116:
 21125                           	opt stack 0
 21126  01314E                     _LCD_DrawField:
 21127                           	opt stack 19
 21128                           
 21129                           ;LCD.c: 396: UINT8 i = 0x00;
 21130                           
 21131                           ; BSR set to: 0
 21132                           ;incstack = 0
 21133  01314E  0E00               	movlw	0
 21134  013150  0100               	movlb	0	; () banked
 21135  013152  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 21136                           
 21137                           ; BSR set to: 0
 21138                           ;LCD.c: 397: UINT8 xmax = pPoint.x + pSize.x;
 21139  013154  0100               	movlb	0	; () banked
 21140  013156  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 21141  013158  0100               	movlb	0	; () banked
 21142  01315A  25CD               	addwf	LCD_DrawField@pSize& (0+255),w,b
 21143  01315C  0100               	movlb	0	; () banked
 21144  01315E  6FD5               	movwf	LCD_DrawField@xmax& (0+255),b
 21145                           
 21146                           ; BSR set to: 0
 21147                           ;LCD.c: 398: UINT8 ymax = pPoint.y + pSize.y;
 21148  013160  0100               	movlb	0	; () banked
 21149  013162  51CB               	movf	(LCD_DrawField@pPoint+2)& (0+255),w,b
 21150  013164  0100               	movlb	0	; () banked
 21151  013166  25CF               	addwf	(LCD_DrawField@pSize+2)& (0+255),w,b
 21152  013168  0100               	movlb	0	; () banked
 21153  01316A  6FD6               	movwf	LCD_DrawField@ymax& (0+255),b
 21154                           
 21155                           ; BSR set to: 0
 21156                           ;LCD.c: 399: UINT16 count = pSize.x * pSize.y;
 21157  01316C  C0CF  F0B5         	movff	LCD_DrawField@pSize+2,___wmul@multiplier
 21158  013170  C0D0  F0B6         	movff	LCD_DrawField@pSize+3,___wmul@multiplier+1
 21159  013174  C0CD  F0B7         	movff	LCD_DrawField@pSize,___wmul@multiplicand
 21160  013178  C0CE  F0B8         	movff	LCD_DrawField@pSize+1,___wmul@multiplicand+1
 21161  01317C  EC4E  F0A2         	call	___wmul	;wreg free
 21162  013180  C0B5  F0D3         	movff	?___wmul,LCD_DrawField@count
 21163  013184  C0B6  F0D4         	movff	?___wmul+1,LCD_DrawField@count+1
 21164                           
 21165                           ;LCD.c: 401: Set_Addr_Window(pPoint.x, pPoint.y, (xmax - 1), (ymax - 1));
 21166  013188  C0CB  F0BA         	movff	LCD_DrawField@pPoint+2,Set_Addr_Window@ys
 21167  01318C  0100               	movlb	0	; () banked
 21168  01318E  05D5               	decf	LCD_DrawField@xmax& (0+255),w,b
 21169  013190  0100               	movlb	0	; () banked
 21170  013192  6FBB               	movwf	Set_Addr_Window@xe& (0+255),b
 21171  013194  0100               	movlb	0	; () banked
 21172  013196  05D6               	decf	LCD_DrawField@ymax& (0+255),w,b
 21173  013198  0100               	movlb	0	; () banked
 21174  01319A  6FBC               	movwf	Set_Addr_Window@ye& (0+255),b
 21175  01319C  0100               	movlb	0	; () banked
 21176  01319E  51C9               	movf	LCD_DrawField@pPoint& (0+255),w,b
 21177  0131A0  EC04  F097         	call	_Set_Addr_Window
 21178                           
 21179                           ;LCD.c: 403: for(i = 0; i < count; i++)
 21180  0131A4  0E00               	movlw	0
 21181  0131A6  0100               	movlb	0	; () banked
 21182  0131A8  6FD7               	movwf	LCD_DrawField@i& (0+255),b
 21183  0131AA  D013               	goto	l183
 21184  0131AC                     
 21185                           ; BSR set to: 0
 21186                           ;LCD.c: 404: LCD_Word_Write(pField[i]);
 21187                           
 21188                           ; BSR set to: 0
 21189  0131AC  0100               	movlb	0	; () banked
 21190  0131AE  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 21191  0131B0  0D02               	mullw	2
 21192  0131B2  50F3               	movf	prodl,w,c
 21193  0131B4  0100               	movlb	0	; () banked
 21194  0131B6  25C7               	addwf	LCD_DrawField@pField& (0+255),w,b
 21195  0131B8  6ED9               	movwf	fsr2l,c
 21196  0131BA  50F4               	movf	prodh,w,c
 21197  0131BC  0100               	movlb	0	; () banked
 21198  0131BE  21C8               	addwfc	(LCD_DrawField@pField+1)& (0+255),w,b
 21199  0131C0  6EDA               	movwf	fsr2h,c
 21200  0131C2  CFDE F0BA          	movff	postinc2,LCD_Word_Write@value
 21201  0131C6  CFDD F0BB          	movff	postdec2,LCD_Word_Write@value+1
 21202  0131CA  ECE9  F0A3         	call	_LCD_Word_Write	;wreg free
 21203  0131CE  0100               	movlb	0	; () banked
 21204  0131D0  2BD7               	incf	LCD_DrawField@i& (0+255),f,b
 21205  0131D2                     l183:
 21206                           
 21207                           ; BSR set to: 0
 21208                           
 21209                           ; BSR set to: 0
 21210  0131D2  0100               	movlb	0	; () banked
 21211  0131D4  51D7               	movf	LCD_DrawField@i& (0+255),w,b
 21212  0131D6  0100               	movlb	0	; () banked
 21213  0131D8  6FD1               	movwf	??_LCD_DrawField& (0+255),b
 21214  0131DA  6BD2               	clrf	(??_LCD_DrawField+1)& (0+255),b
 21215  0131DC  0100               	movlb	0	; () banked
 21216  0131DE  51D3               	movf	LCD_DrawField@count& (0+255),w,b
 21217  0131E0  0100               	movlb	0	; () banked
 21218  0131E2  5DD1               	subwf	??_LCD_DrawField& (0+255),w,b
 21219  0131E4  0100               	movlb	0	; () banked
 21220  0131E6  51D4               	movf	(LCD_DrawField@count+1)& (0+255),w,b
 21221  0131E8  0100               	movlb	0	; () banked
 21222  0131EA  59D2               	subwfb	(??_LCD_DrawField+1)& (0+255),w,b
 21223  0131EC  B0D8               	btfsc	status,0,c
 21224  0131EE  0012               	return	
 21225  0131F0  D7DD               	goto	l184
 21226  0131F2                     __end_of_LCD_DrawField:
 21227                           	opt stack 0
 21228                           tosu	equ	0xFFF
 21229                           tosh	equ	0xFFE
 21230                           tosl	equ	0xFFD
 21231                           pclath	equ	0xFFA
 21232                           tblptru	equ	0xFF8
 21233                           tblptrh	equ	0xFF7
 21234                           tblptrl	equ	0xFF6
 21235                           tablat	equ	0xFF5
 21236                           prodh	equ	0xFF4
 21237                           prodl	equ	0xFF3
 21238                           intcon	equ	0xFF2
 21239                           indf0	equ	0xFEF
 21240                           postinc0	equ	0xFEE
 21241                           fsr0h	equ	0xFEA
 21242                           fsr0l	equ	0xFE9
 21243                           wreg	equ	0xFE8
 21244                           indf1	equ	0xFE7
 21245                           postdec1	equ	0xFE5
 21246                           fsr1h	equ	0xFE2
 21247                           fsr1l	equ	0xFE1
 21248                           indf2	equ	0xFDF
 21249                           postinc2	equ	0xFDE
 21250                           postdec2	equ	0xFDD
 21251                           plusw2	equ	0xFDB
 21252                           fsr2h	equ	0xFDA
 21253                           fsr2l	equ	0xFD9
 21254                           status	equ	0xFD8
 21255                           
 21256 ;; *************** function ___wmul *****************
 21257 ;; Defined at:
 21258 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.43\sources\common\Umul16.c"
 21259 ;; Parameters:    Size  Location     Type
 21260 ;;  multiplier      2    0[BANK0 ] unsigned int 
 21261 ;;  multiplicand    2    2[BANK0 ] unsigned int 
 21262 ;; Auto vars:     Size  Location     Type
 21263 ;;  product         2    4[BANK0 ] unsigned int 
 21264 ;; Return value:  Size  Location     Type
 21265 ;;                  2    0[BANK0 ] unsigned int 
 21266 ;; Registers used:
 21267 ;;		wreg, status,2, status,0, prodl, prodh
 21268 ;; Tracked objects:
 21269 ;;		On entry : 0/0
 21270 ;;		On exit  : 0/0
 21271 ;;		Unchanged: 0/0
 21272 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21273 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21274 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21275 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21276 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21277 ;;Total ram usage:        6 bytes
 21278 ;; Hardware stack levels used:    1
 21279 ;; Hardware stack levels required when called:    7
 21280 ;; This function calls:
 21281 ;;		Nothing
 21282 ;; This function is called by:
 21283 ;;		_LCD_DrawField
 21284 ;; This function uses a non-reentrant model
 21285 ;;
 21286                           
 21287                           	psect	text117
 21288  01449C                     __ptext117:
 21289                           	opt stack 0
 21290  01449C                     ___wmul:
 21291                           	opt stack 21
 21292                           
 21293                           ; BSR set to: 0
 21294                           ;incstack = 0
 21295  01449C  0100               	movlb	0	; () banked
 21296  01449E  51B5               	movf	___wmul@multiplier& (0+255),w,b
 21297  0144A0  0100               	movlb	0	; () banked
 21298  0144A2  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 21299  0144A4  CFF3 F0B9          	movff	prodl,___wmul@product
 21300  0144A8  CFF4 F0BA          	movff	prodh,___wmul@product+1
 21301  0144AC  0100               	movlb	0	; () banked
 21302  0144AE  51B5               	movf	___wmul@multiplier& (0+255),w,b
 21303  0144B0  0100               	movlb	0	; () banked
 21304  0144B2  03B8               	mulwf	(___wmul@multiplicand+1)& (0+255),b
 21305  0144B4  50F3               	movf	prodl,w,c
 21306  0144B6  0100               	movlb	0	; () banked
 21307  0144B8  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 21308  0144BA  0100               	movlb	0	; () banked
 21309  0144BC  51B6               	movf	(___wmul@multiplier+1)& (0+255),w,b
 21310  0144BE  0100               	movlb	0	; () banked
 21311  0144C0  03B7               	mulwf	___wmul@multiplicand& (0+255),b
 21312  0144C2  50F3               	movf	prodl,w,c
 21313  0144C4  0100               	movlb	0	; () banked
 21314  0144C6  27BA               	addwf	(___wmul@product+1)& (0+255),f,b
 21315                           
 21316                           ; BSR set to: 0
 21317  0144C8  C0B9  F0B5         	movff	___wmul@product,?___wmul
 21318  0144CC  C0BA  F0B6         	movff	___wmul@product+1,?___wmul+1
 21319  0144D0  0012               	return	
 21320  0144D2                     __end_of___wmul:
 21321                           	opt stack 0
 21322                           tosu	equ	0xFFF
 21323                           tosh	equ	0xFFE
 21324                           tosl	equ	0xFFD
 21325                           pclath	equ	0xFFA
 21326                           tblptru	equ	0xFF8
 21327                           tblptrh	equ	0xFF7
 21328                           tblptrl	equ	0xFF6
 21329                           tablat	equ	0xFF5
 21330                           prodh	equ	0xFF4
 21331                           prodl	equ	0xFF3
 21332                           intcon	equ	0xFF2
 21333                           indf0	equ	0xFEF
 21334                           postinc0	equ	0xFEE
 21335                           fsr0h	equ	0xFEA
 21336                           fsr0l	equ	0xFE9
 21337                           wreg	equ	0xFE8
 21338                           indf1	equ	0xFE7
 21339                           postdec1	equ	0xFE5
 21340                           fsr1h	equ	0xFE2
 21341                           fsr1l	equ	0xFE1
 21342                           indf2	equ	0xFDF
 21343                           postinc2	equ	0xFDE
 21344                           postdec2	equ	0xFDD
 21345                           plusw2	equ	0xFDB
 21346                           fsr2h	equ	0xFDA
 21347                           fsr2l	equ	0xFD9
 21348                           status	equ	0xFD8
 21349                           
 21350 ;; *************** function _Set_Addr_Window *****************
 21351 ;; Defined at:
 21352 ;;		line 214 in file "Library/LCD.c"
 21353 ;; Parameters:    Size  Location     Type
 21354 ;;  xs              1    wreg     unsigned char 
 21355 ;;  ys              1    5[BANK0 ] unsigned char 
 21356 ;;  xe              1    6[BANK0 ] unsigned char 
 21357 ;;  ye              1    7[BANK0 ] unsigned char 
 21358 ;; Auto vars:     Size  Location     Type
 21359 ;;  xs              1    8[BANK0 ] unsigned char 
 21360 ;; Return value:  Size  Location     Type
 21361 ;;                  1    wreg      void 
 21362 ;; Registers used:
 21363 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21364 ;; Tracked objects:
 21365 ;;		On entry : 0/0
 21366 ;;		On exit  : 0/0
 21367 ;;		Unchanged: 0/0
 21368 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21369 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21370 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21372 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21373 ;;Total ram usage:        4 bytes
 21374 ;; Hardware stack levels used:    1
 21375 ;; Hardware stack levels required when called:    9
 21376 ;; This function calls:
 21377 ;;		_LCD_Write
 21378 ;; This function is called by:
 21379 ;;		_LCD_Fill
 21380 ;;		_LCD_FillRectangle
 21381 ;;		_LCD_DrawField
 21382 ;;		_RAM_Address_Set
 21383 ;;		_LCD_DrawPixel
 21384 ;; This function uses a non-reentrant model
 21385 ;;
 21386                           
 21387                           	psect	text118
 21388  012E08                     __ptext118:
 21389                           	opt stack 0
 21390  012E08                     _Set_Addr_Window:
 21391                           	opt stack 19
 21392                           
 21393                           ; BSR set to: 0
 21394                           ;incstack = 0
 21395                           ;Set_Addr_Window@xs stored from wreg
 21396  012E08  0100               	movlb	0	; () banked
 21397  012E0A  6FBD               	movwf	Set_Addr_Window@xs& (0+255),b
 21398                           
 21399                           ;LCD.c: 216: ys+=2;
 21400  012E0C  0E02               	movlw	2
 21401  012E0E  0100               	movlb	0	; () banked
 21402  012E10  27BA               	addwf	Set_Addr_Window@ys& (0+255),f,b
 21403                           
 21404                           ;LCD.c: 217: ye+=2;
 21405  012E12  0E02               	movlw	2
 21406  012E14  0100               	movlb	0	; () banked
 21407  012E16  27BC               	addwf	Set_Addr_Window@ye& (0+255),f,b
 21408                           
 21409                           ;LCD.c: 218: xs+=3;
 21410  012E18  0E03               	movlw	3
 21411  012E1A  0100               	movlb	0	; () banked
 21412  012E1C  27BD               	addwf	Set_Addr_Window@xs& (0+255),f,b
 21413                           
 21414                           ;LCD.c: 219: xe+=3;
 21415  012E1E  0E03               	movlw	3
 21416  012E20  0100               	movlb	0	; () banked
 21417  012E22  27BB               	addwf	Set_Addr_Window@xe& (0+255),f,b
 21418                           
 21419                           ; BSR set to: 0
 21420                           ;LCD.c: 221: LCD_Write(0x2A, 0x0);
 21421  012E24  0E00               	movlw	0
 21422  012E26  0100               	movlb	0	; () banked
 21423  012E28  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21424  012E2A  0E2A               	movlw	42
 21425  012E2C  EC5F  F0A3         	call	_LCD_Write
 21426                           
 21427                           ;LCD.c: 222: LCD_Write(0x00, 0x1);
 21428  012E30  0E01               	movlw	1
 21429  012E32  0100               	movlb	0	; () banked
 21430  012E34  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21431  012E36  0E00               	movlw	0
 21432  012E38  EC5F  F0A3         	call	_LCD_Write
 21433                           
 21434                           ;LCD.c: 223: LCD_Write(xs, 0x1);
 21435  012E3C  0E01               	movlw	1
 21436  012E3E  0100               	movlb	0	; () banked
 21437  012E40  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21438  012E42  0100               	movlb	0	; () banked
 21439  012E44  51BD               	movf	Set_Addr_Window@xs& (0+255),w,b
 21440  012E46  EC5F  F0A3         	call	_LCD_Write
 21441                           
 21442                           ;LCD.c: 224: LCD_Write(0x00, 0x1);
 21443  012E4A  0E01               	movlw	1
 21444  012E4C  0100               	movlb	0	; () banked
 21445  012E4E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21446  012E50  0E00               	movlw	0
 21447  012E52  EC5F  F0A3         	call	_LCD_Write
 21448                           
 21449                           ;LCD.c: 225: LCD_Write(xe, 0x1);
 21450  012E56  0E01               	movlw	1
 21451  012E58  0100               	movlb	0	; () banked
 21452  012E5A  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21453  012E5C  0100               	movlb	0	; () banked
 21454  012E5E  51BB               	movf	Set_Addr_Window@xe& (0+255),w,b
 21455  012E60  EC5F  F0A3         	call	_LCD_Write
 21456                           
 21457                           ;LCD.c: 226: LCD_Write(0x2B, 0x0);
 21458  012E64  0E00               	movlw	0
 21459  012E66  0100               	movlb	0	; () banked
 21460  012E68  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21461  012E6A  0E2B               	movlw	43
 21462  012E6C  EC5F  F0A3         	call	_LCD_Write
 21463                           
 21464                           ;LCD.c: 227: LCD_Write(0x00, 0x1);
 21465  012E70  0E01               	movlw	1
 21466  012E72  0100               	movlb	0	; () banked
 21467  012E74  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21468  012E76  0E00               	movlw	0
 21469  012E78  EC5F  F0A3         	call	_LCD_Write
 21470                           
 21471                           ;LCD.c: 228: LCD_Write(ys, 0x1);
 21472  012E7C  0E01               	movlw	1
 21473  012E7E  0100               	movlb	0	; () banked
 21474  012E80  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21475  012E82  0100               	movlb	0	; () banked
 21476  012E84  51BA               	movf	Set_Addr_Window@ys& (0+255),w,b
 21477  012E86  EC5F  F0A3         	call	_LCD_Write
 21478                           
 21479                           ;LCD.c: 229: LCD_Write(0x00, 0x1);
 21480  012E8A  0E01               	movlw	1
 21481  012E8C  0100               	movlb	0	; () banked
 21482  012E8E  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21483  012E90  0E00               	movlw	0
 21484  012E92  EC5F  F0A3         	call	_LCD_Write
 21485                           
 21486                           ;LCD.c: 230: LCD_Write(ye, 0x1);
 21487  012E96  0E01               	movlw	1
 21488  012E98  0100               	movlb	0	; () banked
 21489  012E9A  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21490  012E9C  0100               	movlb	0	; () banked
 21491  012E9E  51BC               	movf	Set_Addr_Window@ye& (0+255),w,b
 21492  012EA0  EC5F  F0A3         	call	_LCD_Write
 21493                           
 21494                           ;LCD.c: 231: LCD_Write(0x2C, 0x0);
 21495  012EA4  0E00               	movlw	0
 21496  012EA6  0100               	movlb	0	; () banked
 21497  012EA8  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21498  012EAA  0E2C               	movlw	44
 21499  012EAC  EC5F  F0A3         	call	_LCD_Write
 21500  012EB0  0012               	return		;funcret
 21501  012EB2                     __end_of_Set_Addr_Window:
 21502                           	opt stack 0
 21503                           tosu	equ	0xFFF
 21504                           tosh	equ	0xFFE
 21505                           tosl	equ	0xFFD
 21506                           pclath	equ	0xFFA
 21507                           tblptru	equ	0xFF8
 21508                           tblptrh	equ	0xFF7
 21509                           tblptrl	equ	0xFF6
 21510                           tablat	equ	0xFF5
 21511                           prodh	equ	0xFF4
 21512                           prodl	equ	0xFF3
 21513                           intcon	equ	0xFF2
 21514                           indf0	equ	0xFEF
 21515                           postinc0	equ	0xFEE
 21516                           fsr0h	equ	0xFEA
 21517                           fsr0l	equ	0xFE9
 21518                           wreg	equ	0xFE8
 21519                           indf1	equ	0xFE7
 21520                           postdec1	equ	0xFE5
 21521                           fsr1h	equ	0xFE2
 21522                           fsr1l	equ	0xFE1
 21523                           indf2	equ	0xFDF
 21524                           postinc2	equ	0xFDE
 21525                           postdec2	equ	0xFDD
 21526                           plusw2	equ	0xFDB
 21527                           fsr2h	equ	0xFDA
 21528                           fsr2l	equ	0xFD9
 21529                           status	equ	0xFD8
 21530                           
 21531 ;; *************** function _LCD_Word_Write *****************
 21532 ;; Defined at:
 21533 ;;		line 198 in file "Library/LCD.c"
 21534 ;; Parameters:    Size  Location     Type
 21535 ;;  value           2    5[BANK0 ] unsigned short 
 21536 ;; Auto vars:     Size  Location     Type
 21537 ;;		None
 21538 ;; Return value:  Size  Location     Type
 21539 ;;                  1    wreg      void 
 21540 ;; Registers used:
 21541 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21542 ;; Tracked objects:
 21543 ;;		On entry : 0/0
 21544 ;;		On exit  : 0/0
 21545 ;;		Unchanged: 0/0
 21546 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21547 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21548 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21549 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21550 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21551 ;;Total ram usage:        2 bytes
 21552 ;; Hardware stack levels used:    1
 21553 ;; Hardware stack levels required when called:    9
 21554 ;; This function calls:
 21555 ;;		_LCD_Write
 21556 ;; This function is called by:
 21557 ;;		_LCD_Fill
 21558 ;;		_LCD_FillRectangle
 21559 ;;		_LCD_DrawField
 21560 ;;		_LCD_DrawPixel
 21561 ;; This function uses a non-reentrant model
 21562 ;;
 21563                           
 21564                           	psect	text119
 21565  0147D2                     __ptext119:
 21566                           	opt stack 0
 21567  0147D2                     _LCD_Word_Write:
 21568                           	opt stack 19
 21569                           
 21570                           ;LCD.c: 200: LCD_Write(((value & 0xFF00) >> 0x08), 0x1);
 21571                           
 21572                           ;incstack = 0
 21573  0147D2  0E01               	movlw	1
 21574  0147D4  0100               	movlb	0	; () banked
 21575  0147D6  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21576  0147D8  0100               	movlb	0	; () banked
 21577  0147DA  51BB               	movf	(LCD_Word_Write@value+1)& (0+255),w,b
 21578  0147DC  EC5F  F0A3         	call	_LCD_Write
 21579                           
 21580                           ;LCD.c: 201: LCD_Write((value & 0x00FF), 0x1);
 21581  0147E0  0E01               	movlw	1
 21582  0147E2  0100               	movlb	0	; () banked
 21583  0147E4  6FB8               	movwf	LCD_Write@mode& (0+255),b
 21584  0147E6  0100               	movlb	0	; () banked
 21585  0147E8  51BA               	movf	LCD_Word_Write@value& (0+255),w,b
 21586  0147EA  EC5F  F0A3         	call	_LCD_Write
 21587  0147EE  0012               	return		;funcret
 21588  0147F0                     __end_of_LCD_Word_Write:
 21589                           	opt stack 0
 21590                           tosu	equ	0xFFF
 21591                           tosh	equ	0xFFE
 21592                           tosl	equ	0xFFD
 21593                           pclath	equ	0xFFA
 21594                           tblptru	equ	0xFF8
 21595                           tblptrh	equ	0xFF7
 21596                           tblptrl	equ	0xFF6
 21597                           tablat	equ	0xFF5
 21598                           prodh	equ	0xFF4
 21599                           prodl	equ	0xFF3
 21600                           intcon	equ	0xFF2
 21601                           indf0	equ	0xFEF
 21602                           postinc0	equ	0xFEE
 21603                           fsr0h	equ	0xFEA
 21604                           fsr0l	equ	0xFE9
 21605                           wreg	equ	0xFE8
 21606                           indf1	equ	0xFE7
 21607                           postdec1	equ	0xFE5
 21608                           fsr1h	equ	0xFE2
 21609                           fsr1l	equ	0xFE1
 21610                           indf2	equ	0xFDF
 21611                           postinc2	equ	0xFDE
 21612                           postdec2	equ	0xFDD
 21613                           plusw2	equ	0xFDB
 21614                           fsr2h	equ	0xFDA
 21615                           fsr2l	equ	0xFD9
 21616                           status	equ	0xFD8
 21617                           
 21618 ;; *************** function _LCD_Write *****************
 21619 ;; Defined at:
 21620 ;;		line 67 in file "Library/LCD.c"
 21621 ;; Parameters:    Size  Location     Type
 21622 ;;  value           1    wreg     unsigned char 
 21623 ;;  mode            1    3[BANK0 ] enum E6761
 21624 ;; Auto vars:     Size  Location     Type
 21625 ;;  value           1    4[BANK0 ] unsigned char 
 21626 ;; Return value:  Size  Location     Type
 21627 ;;                  1    wreg      void 
 21628 ;; Registers used:
 21629 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 21630 ;; Tracked objects:
 21631 ;;		On entry : 0/0
 21632 ;;		On exit  : 0/0
 21633 ;;		Unchanged: 0/0
 21634 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21635 ;;      Params:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21636 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21637 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21638 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21639 ;;Total ram usage:        2 bytes
 21640 ;; Hardware stack levels used:    1
 21641 ;; Hardware stack levels required when called:    8
 21642 ;; This function calls:
 21643 ;;		_Mode_Set
 21644 ;;		_SPI_Send
 21645 ;; This function is called by:
 21646 ;;		_LCD_Init
 21647 ;;		_LCD_Word_Write
 21648 ;;		_Set_Addr_Window
 21649 ;;		_Set_Rotation
 21650 ;;		_LCD_WriteCMD
 21651 ;;		_LCD_WriteData
 21652 ;;		_LCD_Data_Write
 21653 ;;		_LCD_Data_Write_4k
 21654 ;;		_Invert_Display
 21655 ;; This function uses a non-reentrant model
 21656 ;;
 21657                           
 21658                           	psect	text120
 21659  0146BE                     __ptext120:
 21660                           	opt stack 0
 21661  0146BE                     _LCD_Write:
 21662                           	opt stack 20
 21663                           
 21664                           ;incstack = 0
 21665                           ;LCD_Write@value stored from wreg
 21666  0146BE  0100               	movlb	0	; () banked
 21667  0146C0  6FB9               	movwf	LCD_Write@value& (0+255),b
 21668                           
 21669                           ;LCD.c: 89: Mode_Set(mode);
 21670  0146C2  0100               	movlb	0	; () banked
 21671  0146C4  51B8               	movf	LCD_Write@mode& (0+255),w,b
 21672  0146C6  EC9D  F0A4         	call	_Mode_Set
 21673                           
 21674                           ;LCD.c: 90: SPI_Send(&SPI2, value);
 21675  0146CA  0E73               	movlw	low _SPI2
 21676  0146CC  0100               	movlb	0	; () banked
 21677  0146CE  6FB5               	movwf	SPI_Send@pInput& (0+255),b
 21678  0146D0  0E03               	movlw	high _SPI2
 21679  0146D2  0100               	movlb	0	; () banked
 21680  0146D4  6FB6               	movwf	(SPI_Send@pInput+1)& (0+255),b
 21681  0146D6  C0B9  F0B7         	movff	LCD_Write@value,SPI_Send@pData
 21682  0146DA  EC0A  F09D         	call	_SPI_Send	;wreg free
 21683  0146DE  0012               	return		;funcret
 21684  0146E0                     __end_of_LCD_Write:
 21685                           	opt stack 0
 21686                           tosu	equ	0xFFF
 21687                           tosh	equ	0xFFE
 21688                           tosl	equ	0xFFD
 21689                           pclath	equ	0xFFA
 21690                           tblptru	equ	0xFF8
 21691                           tblptrh	equ	0xFF7
 21692                           tblptrl	equ	0xFF6
 21693                           tablat	equ	0xFF5
 21694                           prodh	equ	0xFF4
 21695                           prodl	equ	0xFF3
 21696                           intcon	equ	0xFF2
 21697                           indf0	equ	0xFEF
 21698                           postinc0	equ	0xFEE
 21699                           fsr0h	equ	0xFEA
 21700                           fsr0l	equ	0xFE9
 21701                           wreg	equ	0xFE8
 21702                           indf1	equ	0xFE7
 21703                           postdec1	equ	0xFE5
 21704                           fsr1h	equ	0xFE2
 21705                           fsr1l	equ	0xFE1
 21706                           indf2	equ	0xFDF
 21707                           postinc2	equ	0xFDE
 21708                           postdec2	equ	0xFDD
 21709                           plusw2	equ	0xFDB
 21710                           fsr2h	equ	0xFDA
 21711                           fsr2l	equ	0xFD9
 21712                           status	equ	0xFD8
 21713                           
 21714 ;; *************** function _SPI_Send *****************
 21715 ;; Defined at:
 21716 ;;		line 226 in file "Library/SPI.c"
 21717 ;; Parameters:    Size  Location     Type
 21718 ;;  pInput          2    0[BANK0 ] PTR struct SPI
 21719 ;;		 -> SPI1(11), SPI2(11), 
 21720 ;;  pData           1    2[BANK0 ] unsigned char 
 21721 ;; Auto vars:     Size  Location     Type
 21722 ;;		None
 21723 ;; Return value:  Size  Location     Type
 21724 ;;                  1    wreg      unsigned char 
 21725 ;; Registers used:
 21726 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 21727 ;; Tracked objects:
 21728 ;;		On entry : 0/0
 21729 ;;		On exit  : 0/0
 21730 ;;		Unchanged: 0/0
 21731 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21732 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21733 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21734 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21735 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21736 ;;Total ram usage:        3 bytes
 21737 ;; Hardware stack levels used:    1
 21738 ;; Hardware stack levels required when called:    7
 21739 ;; This function calls:
 21740 ;;		Nothing
 21741 ;; This function is called by:
 21742 ;;		_LCD_Write
 21743 ;;		_OutSeg
 21744 ;; This function uses a non-reentrant model
 21745 ;;
 21746                           
 21747                           	psect	text121
 21748  013A14                     __ptext121:
 21749                           	opt stack 0
 21750  013A14                     _SPI_Send:
 21751                           	opt stack 20
 21752                           
 21753                           ;SPI.c: 253: switch (pInput->mChannel)
 21754                           
 21755                           ;incstack = 0
 21756  013A14  D026               	goto	l678
 21757  013A16                     
 21758                           ;SPI.c: 256: PortC.mOutput->mBit2 = 0;
 21759  013A16  C0A7  FFD9         	movff	_PortC+4,fsr2l
 21760  013A1A  C0A8  FFDA         	movff	_PortC+5,fsr2h
 21761  013A1E  0100               	movlb	0	; () banked
 21762  013A20  94DF               	bcf	indf2,2,c
 21763                           
 21764                           ; BSR set to: 0
 21765                           ;SPI.c: 257: SSP1BUF = pData;
 21766  013A22  C0B7  FFC9         	movff	SPI_Send@pData,4041	;volatile
 21767  013A26                     
 21768                           ; BSR set to: 0
 21769  013A26  A0C7               	btfss	4039,0,c	;volatile
 21770  013A28  D7FE               	goto	l681
 21771                           
 21772                           ;SPI.c: 259: pData = SSP1BUF;
 21773  013A2A  CFC9 F0B7          	movff	4041,SPI_Send@pData	;volatile
 21774                           
 21775                           ;SPI.c: 260: PortC.mOutput->mBit2 = 1;
 21776  013A2E  C0A7  FFD9         	movff	_PortC+4,fsr2l
 21777  013A32  C0A8  FFDA         	movff	_PortC+5,fsr2h
 21778  013A36  0100               	movlb	0	; () banked
 21779  013A38  84DF               	bsf	indf2,2,c
 21780                           
 21781                           ; BSR set to: 0
 21782                           ;SPI.c: 261: return pData;
 21783                           ;	Return value of _SPI_Send is never used
 21784  013A3A  0012               	return	
 21785  013A3C                     
 21786                           ; BSR set to: 0
 21787                           ;SPI.c: 263: PortD.mOutput->mBit7 = 0;
 21788                           
 21789                           ; BSR set to: 0
 21790  013A3C  C09D  FFD9         	movff	_PortD+4,fsr2l
 21791  013A40  C09E  FFDA         	movff	_PortD+5,fsr2h
 21792  013A44  0100               	movlb	0	; () banked
 21793  013A46  9EDF               	bcf	indf2,7,c
 21794                           
 21795                           ; BSR set to: 0
 21796                           ;SPI.c: 264: SSP2BUF = pData;
 21797  013A48  C0B7  FF6F         	movff	SPI_Send@pData,3951	;volatile
 21798  013A4C                     
 21799                           ; BSR set to: 0
 21800  013A4C  A06D               	btfss	3949,0,c	;volatile
 21801  013A4E  D7FE               	goto	l686
 21802                           
 21803                           ;SPI.c: 266: pData = SSP2BUF;
 21804  013A50  CF6F F0B7          	movff	3951,SPI_Send@pData	;volatile
 21805                           
 21806                           ;SPI.c: 267: PortD.mOutput->mBit7 = 1;
 21807  013A54  C09D  FFD9         	movff	_PortD+4,fsr2l
 21808  013A58  C09E  FFDA         	movff	_PortD+5,fsr2h
 21809  013A5C  0100               	movlb	0	; () banked
 21810  013A5E  8EDF               	bsf	indf2,7,c
 21811                           
 21812                           ; BSR set to: 0
 21813                           ;SPI.c: 269: };
 21814                           
 21815                           ; BSR set to: 0
 21816                           ;SPI.c: 268: return pData;
 21817                           ;	Return value of _SPI_Send is never used
 21818  013A60  0012               	return	
 21819  013A62                     l678:
 21820                           
 21821                           ; BSR set to: 0
 21822  013A62  0100               	movlb	0	; () banked
 21823  013A64  EE20 F002          	lfsr	2,2
 21824  013A68  51B5               	movf	SPI_Send@pInput& (0+255),w,b
 21825  013A6A  26D9               	addwf	fsr2l,f,c
 21826  013A6C  51B6               	movf	(SPI_Send@pInput+1)& (0+255),w,b
 21827  013A6E  22DA               	addwfc	fsr2h,f,c
 21828  013A70  50DF               	movf	indf2,w,c
 21829                           
 21830                           ; Switch size 1, requested type "space"
 21831                           ; Number of cases is 2, Range of values is 0 to 1
 21832                           ; switch strategies available:
 21833                           ; Name         Instructions Cycles
 21834                           ; simple_byte            7     4 (average)
 21835                           ;	Chosen strategy is simple_byte
 21836  013A72  0A00               	xorlw	0	; case 0
 21837  013A74  B4D8               	btfsc	status,2,c
 21838  013A76  D7CF               	goto	l679
 21839  013A78  0A01               	xorlw	1	; case 1
 21840  013A7A  A4D8               	btfss	status,2,c
 21841  013A7C  0012               	return	
 21842  013A7E  D7DE               	goto	l684
 21843  013A80                     __end_of_SPI_Send:
 21844                           	opt stack 0
 21845                           tosu	equ	0xFFF
 21846                           tosh	equ	0xFFE
 21847                           tosl	equ	0xFFD
 21848                           pclath	equ	0xFFA
 21849                           tblptru	equ	0xFF8
 21850                           tblptrh	equ	0xFF7
 21851                           tblptrl	equ	0xFF6
 21852                           tablat	equ	0xFF5
 21853                           prodh	equ	0xFF4
 21854                           prodl	equ	0xFF3
 21855                           intcon	equ	0xFF2
 21856                           indf0	equ	0xFEF
 21857                           postinc0	equ	0xFEE
 21858                           fsr0h	equ	0xFEA
 21859                           fsr0l	equ	0xFE9
 21860                           wreg	equ	0xFE8
 21861                           indf1	equ	0xFE7
 21862                           postdec1	equ	0xFE5
 21863                           fsr1h	equ	0xFE2
 21864                           fsr1l	equ	0xFE1
 21865                           indf2	equ	0xFDF
 21866                           postinc2	equ	0xFDE
 21867                           postdec2	equ	0xFDD
 21868                           plusw2	equ	0xFDB
 21869                           fsr2h	equ	0xFDA
 21870                           fsr2l	equ	0xFD9
 21871                           status	equ	0xFD8
 21872                           
 21873 ;; *************** function _Mode_Set *****************
 21874 ;; Defined at:
 21875 ;;		line 40 in file "Library/LCD.c"
 21876 ;; Parameters:    Size  Location     Type
 21877 ;;  pMode           1    wreg     enum E6761
 21878 ;; Auto vars:     Size  Location     Type
 21879 ;;  pMode           1    0[BANK0 ] enum E6761
 21880 ;; Return value:  Size  Location     Type
 21881 ;;                  1    wreg      void 
 21882 ;; Registers used:
 21883 ;;		wreg
 21884 ;; Tracked objects:
 21885 ;;		On entry : 0/0
 21886 ;;		On exit  : 0/0
 21887 ;;		Unchanged: 0/0
 21888 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21889 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21890 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21891 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21892 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21893 ;;Total ram usage:        1 bytes
 21894 ;; Hardware stack levels used:    1
 21895 ;; Hardware stack levels required when called:    7
 21896 ;; This function calls:
 21897 ;;		Nothing
 21898 ;; This function is called by:
 21899 ;;		_LCD_Write
 21900 ;; This function uses a non-reentrant model
 21901 ;;
 21902                           
 21903                           	psect	text122
 21904  01493A                     __ptext122:
 21905                           	opt stack 0
 21906  01493A                     _Mode_Set:
 21907                           	opt stack 20
 21908                           
 21909                           ; BSR set to: 0
 21910                           ;incstack = 0
 21911                           ;Mode_Set@pMode stored from wreg
 21912  01493A  0100               	movlb	0	; () banked
 21913  01493C  6FB5               	movwf	Mode_Set@pMode& (0+255),b
 21914                           
 21915                           ;LCD.c: 42: PORTFbits.RF7 = (UINT8)pMode;
 21916  01493E  0100               	movlb	0	; () banked
 21917  014940  B1B5               	btfsc	Mode_Set@pMode& (0+255),0,b
 21918  014942  D002               	bra	u6755
 21919  014944  9E85               	bcf	3973,7,c	;volatile
 21920  014946  D001               	bra	u6756
 21921  014948                     u6755:
 21922  014948  8E85               	bsf	3973,7,c	;volatile
 21923  01494A                     u6756:
 21924  01494A  0012               	return		;funcret
 21925  01494C                     __end_of_Mode_Set:
 21926                           	opt stack 0
 21927                           tosu	equ	0xFFF
 21928                           tosh	equ	0xFFE
 21929                           tosl	equ	0xFFD
 21930                           pclath	equ	0xFFA
 21931                           tblptru	equ	0xFF8
 21932                           tblptrh	equ	0xFF7
 21933                           tblptrl	equ	0xFF6
 21934                           tablat	equ	0xFF5
 21935                           prodh	equ	0xFF4
 21936                           prodl	equ	0xFF3
 21937                           intcon	equ	0xFF2
 21938                           indf0	equ	0xFEF
 21939                           postinc0	equ	0xFEE
 21940                           fsr0h	equ	0xFEA
 21941                           fsr0l	equ	0xFE9
 21942                           wreg	equ	0xFE8
 21943                           indf1	equ	0xFE7
 21944                           postdec1	equ	0xFE5
 21945                           fsr1h	equ	0xFE2
 21946                           fsr1l	equ	0xFE1
 21947                           indf2	equ	0xFDF
 21948                           postinc2	equ	0xFDE
 21949                           postdec2	equ	0xFDD
 21950                           plusw2	equ	0xFDB
 21951                           fsr2h	equ	0xFDA
 21952                           fsr2l	equ	0xFD9
 21953                           status	equ	0xFD8
 21954                           
 21955 ;; *************** function _Console_MakeField *****************
 21956 ;; Defined at:
 21957 ;;		line 435 in file "Library/Console.c"
 21958 ;; Parameters:    Size  Location     Type
 21959 ;;  pInput          1    wreg     unsigned char 
 21960 ;; Auto vars:     Size  Location     Type
 21961 ;;  pInput          1   11[BANK0 ] unsigned char 
 21962 ;;  y               1   17[BANK0 ] unsigned char 
 21963 ;;  x               1   16[BANK0 ] unsigned char 
 21964 ;;  Column          2   12[BANK0 ] PTR struct Byte
 21965 ;;		 -> Font5x7(480), 
 21966 ;;  Index           2    9[BANK0 ] unsigned short 
 21967 ;; Return value:  Size  Location     Type
 21968 ;;                  2    5[BANK0 ] PTR unsigned short 
 21969 ;; Registers used:
 21970 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 21971 ;; Tracked objects:
 21972 ;;		On entry : 0/0
 21973 ;;		On exit  : 0/0
 21974 ;;		Unchanged: 0/0
 21975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 21976 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21977 ;;      Locals:         0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21978 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21979 ;;      Totals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 21980 ;;Total ram usage:       13 bytes
 21981 ;; Hardware stack levels used:    1
 21982 ;; Hardware stack levels required when called:    8
 21983 ;; This function calls:
 21984 ;;		_Byte_GetBit
 21985 ;; This function is called by:
 21986 ;;		_Console_Render
 21987 ;; This function uses a non-reentrant model
 21988 ;;
 21989                           
 21990                           	psect	text123
 21991  01276A                     __ptext123:
 21992                           	opt stack 0
 21993  01276A                     _Console_MakeField:
 21994                           	opt stack 21
 21995                           
 21996                           ;incstack = 0
 21997                           ;Console_MakeField@pInput stored from wreg
 21998  01276A  0100               	movlb	0	; () banked
 21999  01276C  6FC0               	movwf	Console_MakeField@pInput& (0+255),b
 22000                           
 22001                           ;Console.c: 437: static Colour Fill[7][5];
 22002                           ;Console.c: 438: pInput -= 32;
 22003  01276E  0E20               	movlw	32
 22004  012770  0100               	movlb	0	; () banked
 22005  012772  5FC0               	subwf	Console_MakeField@pInput& (0+255),f,b
 22006                           
 22007                           ; BSR set to: 0
 22008                           ;Console.c: 440: UINT16 Index = (UINT16) pInput*5;
 22009  012774  0100               	movlb	0	; () banked
 22010  012776  51C0               	movf	Console_MakeField@pInput& (0+255),w,b
 22011  012778  0D05               	mullw	5
 22012  01277A  CFF3 F0BE          	movff	prodl,Console_MakeField@Index
 22013  01277E  CFF4 F0BF          	movff	prodh,Console_MakeField@Index+1
 22014                           
 22015                           ; BSR set to: 0
 22016                           ;Console.c: 441: BytePtr Column = (BytePtr) &(Font5x7[ Index ]);
 22017  012782  0ED1               	movlw	low _Font5x7
 22018  012784  0100               	movlb	0	; () banked
 22019  012786  25BE               	addwf	Console_MakeField@Index& (0+255),w,b
 22020  012788  0100               	movlb	0	; () banked
 22021  01278A  6FC1               	movwf	Console_MakeField@Column& (0+255),b
 22022  01278C  0EFD               	movlw	high _Font5x7
 22023  01278E  0100               	movlb	0	; () banked
 22024  012790  21BF               	addwfc	(Console_MakeField@Index+1)& (0+255),w,b
 22025  012792  0100               	movlb	0	; () banked
 22026  012794  6FC2               	movwf	(Console_MakeField@Column+1)& (0+255),b
 22027                           
 22028                           ; BSR set to: 0
 22029                           ;Console.c: 443: for (UINT8 x = 0; x < 5; x++)
 22030  012796  0E00               	movlw	0
 22031  012798  0100               	movlb	0	; () banked
 22032  01279A  6FC5               	movwf	Console_MakeField@x& (0+255),b
 22033  01279C                     l11931:
 22034                           
 22035                           ; BSR set to: 0
 22036  01279C  0E04               	movlw	4
 22037  01279E  0100               	movlb	0	; () banked
 22038  0127A0  65C5               	cpfsgt	Console_MakeField@x& (0+255),b
 22039  0127A2  D001               	goto	l1077
 22040  0127A4  D043               	goto	u7790
 22041  0127A6                     l1077:
 22042                           
 22043                           ; BSR set to: 0
 22044                           ;Console.c: 444: {
 22045                           ;Console.c: 445: for (UINT8 y = 0; y < 7; y++)
 22046                           
 22047                           ; BSR set to: 0
 22048  0127A6  0E00               	movlw	0
 22049  0127A8  0100               	movlb	0	; () banked
 22050  0127AA  6FC6               	movwf	Console_MakeField@y& (0+255),b
 22051  0127AC                     l11937:
 22052                           
 22053                           ; BSR set to: 0
 22054  0127AC  0E06               	movlw	6
 22055  0127AE  0100               	movlb	0	; () banked
 22056  0127B0  65C6               	cpfsgt	Console_MakeField@y& (0+255),b
 22057  0127B2  D001               	goto	l1079
 22058  0127B4  D035               	goto	u7780
 22059  0127B6                     l1079:
 22060                           
 22061                           ; BSR set to: 0
 22062                           ;Console.c: 446: Fill[y][x] = ( Byte_GetBit( Column , y ) ) ? gForecolour : gBackcolour;
 22063                           
 22064                           ; BSR set to: 0
 22065  0127B6  C0C1  F0B5         	movff	Console_MakeField@Column,Byte_GetBit@pInput
 22066  0127BA  C0C2  F0B6         	movff	Console_MakeField@Column+1,Byte_GetBit@pInput+1
 22067  0127BE  C0C6  F0B7         	movff	Console_MakeField@y,Byte_GetBit@pBit
 22068  0127C2  EC84  F0A2         	call	_Byte_GetBit	;wreg free
 22069  0127C6  0900               	iorlw	0
 22070  0127C8  A4D8               	btfss	status,2,c
 22071  0127CA  D005               	goto	l1082
 22072  0127CC  C081  F0C3         	movff	_gBackcolour,_Console_MakeField$10974
 22073  0127D0  C082  F0C4         	movff	_gBackcolour+1,_Console_MakeField$10974+1
 22074  0127D4  D004               	goto	l1084
 22075  0127D6                     l1082:
 22076  0127D6  C0FD  F0C3         	movff	_gForecolour,_Console_MakeField$10974
 22077  0127DA  C0FE  F0C4         	movff	_gForecolour+1,_Console_MakeField$10974+1
 22078  0127DE                     l1084:
 22079  0127DE  0100               	movlb	0	; () banked
 22080  0127E0  51C6               	movf	Console_MakeField@y& (0+255),w,b
 22081  0127E2  0D0A               	mullw	10
 22082  0127E4  0E64               	movlw	low Console_MakeField@Fill
 22083  0127E6  0100               	movlb	0	; () banked
 22084  0127E8  6FBC               	movwf	??_Console_MakeField& (0+255),b
 22085  0127EA  0E04               	movlw	high Console_MakeField@Fill
 22086  0127EC  0100               	movlb	0	; () banked
 22087  0127EE  6FBD               	movwf	(??_Console_MakeField+1)& (0+255),b
 22088  0127F0  50F3               	movf	prodl,w,c
 22089  0127F2  0100               	movlb	0	; () banked
 22090  0127F4  27BC               	addwf	??_Console_MakeField& (0+255),f,b
 22091  0127F6  50F4               	movf	prodh,w,c
 22092  0127F8  0100               	movlb	0	; () banked
 22093  0127FA  23BD               	addwfc	(??_Console_MakeField+1)& (0+255),f,b
 22094  0127FC  0100               	movlb	0	; () banked
 22095  0127FE  51C5               	movf	Console_MakeField@x& (0+255),w,b
 22096  012800  0D02               	mullw	2
 22097  012802  50F3               	movf	prodl,w,c
 22098  012804  0100               	movlb	0	; () banked
 22099  012806  25BC               	addwf	??_Console_MakeField& (0+255),w,b
 22100  012808  6ED9               	movwf	fsr2l,c
 22101  01280A  50F4               	movf	prodh,w,c
 22102  01280C  0100               	movlb	0	; () banked
 22103  01280E  21BD               	addwfc	(??_Console_MakeField+1)& (0+255),w,b
 22104  012810  6EDA               	movwf	fsr2h,c
 22105  012812  C0C3  FFDE         	movff	_Console_MakeField$10974,postinc2
 22106  012816  C0C4  FFDD         	movff	_Console_MakeField$10974+1,postdec2
 22107                           
 22108                           ; BSR set to: 0
 22109  01281A  0100               	movlb	0	; () banked
 22110  01281C  2BC6               	incf	Console_MakeField@y& (0+255),f,b
 22111  01281E  D7C6               	goto	l11937
 22112  012820                     u7780:
 22113                           
 22114                           ; BSR set to: 0
 22115                           ;Console.c: 447: Column += 1;
 22116                           
 22117                           ; BSR set to: 0
 22118  012820  0100               	movlb	0	; () banked
 22119  012822  4BC1               	infsnz	Console_MakeField@Column& (0+255),f,b
 22120  012824  2BC2               	incf	(Console_MakeField@Column+1)& (0+255),f,b
 22121  012826  0100               	movlb	0	; () banked
 22122  012828  2BC5               	incf	Console_MakeField@x& (0+255),f,b
 22123  01282A  D7B8               	goto	l11931
 22124  01282C                     u7790:
 22125                           
 22126                           ; BSR set to: 0
 22127                           ;Console.c: 448: }
 22128                           ;Console.c: 449: return (ColourPtr)Fill;
 22129                           
 22130                           ; BSR set to: 0
 22131  01282C  0E64               	movlw	low Console_MakeField@Fill
 22132  01282E  0100               	movlb	0	; () banked
 22133  012830  6FBA               	movwf	?_Console_MakeField& (0+255),b
 22134  012832  0E04               	movlw	high Console_MakeField@Fill
 22135  012834  0100               	movlb	0	; () banked
 22136  012836  6FBB               	movwf	(?_Console_MakeField+1)& (0+255),b
 22137  012838  0012               	return	
 22138  01283A                     __end_of_Console_MakeField:
 22139                           	opt stack 0
 22140                           tosu	equ	0xFFF
 22141                           tosh	equ	0xFFE
 22142                           tosl	equ	0xFFD
 22143                           pclath	equ	0xFFA
 22144                           tblptru	equ	0xFF8
 22145                           tblptrh	equ	0xFF7
 22146                           tblptrl	equ	0xFF6
 22147                           tablat	equ	0xFF5
 22148                           prodh	equ	0xFF4
 22149                           prodl	equ	0xFF3
 22150                           intcon	equ	0xFF2
 22151                           indf0	equ	0xFEF
 22152                           postinc0	equ	0xFEE
 22153                           fsr0h	equ	0xFEA
 22154                           fsr0l	equ	0xFE9
 22155                           wreg	equ	0xFE8
 22156                           indf1	equ	0xFE7
 22157                           postdec1	equ	0xFE5
 22158                           fsr1h	equ	0xFE2
 22159                           fsr1l	equ	0xFE1
 22160                           indf2	equ	0xFDF
 22161                           postinc2	equ	0xFDE
 22162                           postdec2	equ	0xFDD
 22163                           plusw2	equ	0xFDB
 22164                           fsr2h	equ	0xFDA
 22165                           fsr2l	equ	0xFD9
 22166                           status	equ	0xFD8
 22167                           
 22168 ;; *************** function _Byte_GetBit *****************
 22169 ;; Defined at:
 22170 ;;		line 38 in file "Library/Types.c"
 22171 ;; Parameters:    Size  Location     Type
 22172 ;;  pInput          2    0[BANK0 ] PTR struct Byte
 22173 ;;		 -> Font5x7(480), 
 22174 ;;  pBit            1    2[BANK0 ] unsigned char 
 22175 ;; Auto vars:     Size  Location     Type
 22176 ;;  Output          1    4[BANK0 ] unsigned char 
 22177 ;; Return value:  Size  Location     Type
 22178 ;;                  1    wreg      unsigned char 
 22179 ;; Registers used:
 22180 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru
 22181 ;; Tracked objects:
 22182 ;;		On entry : 0/0
 22183 ;;		On exit  : 0/0
 22184 ;;		Unchanged: 0/0
 22185 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22186 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22187 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22188 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22189 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22190 ;;Total ram usage:        5 bytes
 22191 ;; Hardware stack levels used:    1
 22192 ;; Hardware stack levels required when called:    7
 22193 ;; This function calls:
 22194 ;;		Nothing
 22195 ;; This function is called by:
 22196 ;;		_Console_MakeField
 22197 ;;		_Word_GetBit
 22198 ;; This function uses a non-reentrant model
 22199 ;;
 22200                           
 22201                           	psect	text124
 22202  014508                     __ptext124:
 22203                           	opt stack 0
 22204  014508                     _Byte_GetBit:
 22205                           	opt stack 21
 22206                           
 22207                           ;Types.c: 40: UINT8 Output = pInput->mBits;
 22208                           
 22209                           ; BSR set to: 0
 22210                           ;incstack = 0
 22211  014508  C0B5  FFF6         	movff	Byte_GetBit@pInput,tblptrl
 22212  01450C  C0B6  FFF7         	movff	Byte_GetBit@pInput+1,tblptrh
 22213  014510                     	if	0	;tblptru may be non-zero
 22214  014510                     	endif
 22215  014510                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 22216  014510  0E00               	movlw	low (__mediumconst shr (0+16))
 22217  014512  6EF8               	movwf	tblptru,c
 22218  014514                     	endif
 22219  014514  0008               	tblrd		*
 22220  014516  CFF5 F0B9          	movff	tablat,Byte_GetBit@Output
 22221                           
 22222                           ;Types.c: 42: Output >>= pBit;
 22223  01451A  0100               	movlb	0	; () banked
 22224  01451C  29B7               	incf	Byte_GetBit@pBit& (0+255),w,b
 22225  01451E  0100               	movlb	0	; () banked
 22226  014520  6FB8               	movwf	??_Byte_GetBit& (0+255),b
 22227  014522  D003               	goto	u7370
 22228  014524                     u7375:
 22229  014524  0100               	movlb	0	; () banked
 22230  014526  90D8               	bcf	status,0,c
 22231  014528  33B9               	rrcf	Byte_GetBit@Output& (0+255),f,b
 22232  01452A                     u7370:
 22233  01452A  0100               	movlb	0	; () banked
 22234  01452C  2FB8               	decfsz	??_Byte_GetBit& (0+255),f,b
 22235  01452E  D7FA               	goto	u7375
 22236                           
 22237                           ;Types.c: 43: Output &= 1;
 22238  014530  0E01               	movlw	1
 22239  014532  0100               	movlb	0	; () banked
 22240  014534  17B9               	andwf	Byte_GetBit@Output& (0+255),f,b
 22241                           
 22242                           ; BSR set to: 0
 22243                           ;Types.c: 44: return Output;
 22244  014536  0100               	movlb	0	; () banked
 22245  014538  51B9               	movf	Byte_GetBit@Output& (0+255),w,b
 22246  01453A  0012               	return	
 22247  01453C                     __end_of_Byte_GetBit:
 22248                           	opt stack 0
 22249                           tosu	equ	0xFFF
 22250                           tosh	equ	0xFFE
 22251                           tosl	equ	0xFFD
 22252                           pclath	equ	0xFFA
 22253                           tblptru	equ	0xFF8
 22254                           tblptrh	equ	0xFF7
 22255                           tblptrl	equ	0xFF6
 22256                           tablat	equ	0xFF5
 22257                           prodh	equ	0xFF4
 22258                           prodl	equ	0xFF3
 22259                           intcon	equ	0xFF2
 22260                           indf0	equ	0xFEF
 22261                           postinc0	equ	0xFEE
 22262                           fsr0h	equ	0xFEA
 22263                           fsr0l	equ	0xFE9
 22264                           wreg	equ	0xFE8
 22265                           indf1	equ	0xFE7
 22266                           postdec1	equ	0xFE5
 22267                           fsr1h	equ	0xFE2
 22268                           fsr1l	equ	0xFE1
 22269                           indf2	equ	0xFDF
 22270                           postinc2	equ	0xFDE
 22271                           postdec2	equ	0xFDD
 22272                           plusw2	equ	0xFDB
 22273                           fsr2h	equ	0xFDA
 22274                           fsr2l	equ	0xFD9
 22275                           status	equ	0xFD8
 22276                           
 22277 ;; *************** function _Console_Init *****************
 22278 ;; Defined at:
 22279 ;;		line 157 in file "Library/Console.c"
 22280 ;; Parameters:    Size  Location     Type
 22281 ;;		None
 22282 ;; Auto vars:     Size  Location     Type
 22283 ;;  y               1    3[BANK0 ] unsigned char 
 22284 ;;  x               1    2[BANK0 ] unsigned char 
 22285 ;; Return value:  Size  Location     Type
 22286 ;;                  1    wreg      void 
 22287 ;; Registers used:
 22288 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 22289 ;; Tracked objects:
 22290 ;;		On entry : 0/0
 22291 ;;		On exit  : 0/0
 22292 ;;		Unchanged: 0/0
 22293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22294 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22295 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22296 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22297 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22298 ;;Total ram usage:        4 bytes
 22299 ;; Hardware stack levels used:    1
 22300 ;; Hardware stack levels required when called:    7
 22301 ;; This function calls:
 22302 ;;		Nothing
 22303 ;; This function is called by:
 22304 ;;		_main
 22305 ;; This function uses a non-reentrant model
 22306 ;;
 22307                           
 22308                           	psect	text125
 22309  013574                     __ptext125:
 22310                           	opt stack 0
 22311  013574                     _Console_Init:
 22312                           	opt stack 23
 22313                           
 22314                           ;Console.c: 160: lBufferX = 0;
 22315                           
 22316                           ; BSR set to: 0
 22317                           ;incstack = 0
 22318  013574  0E00               	movlw	0
 22319  013576  0100               	movlb	0	; () banked
 22320  013578  6F8D               	movwf	_lBufferX& (0+255),b
 22321                           
 22322                           ;Console.c: 161: lBufferY = 0;
 22323  01357A  0E00               	movlw	0
 22324  01357C  0100               	movlb	0	; () banked
 22325  01357E  6F8C               	movwf	_lBufferY& (0+255),b
 22326                           
 22327                           ;Console.c: 163: UINT8 x, y;
 22328                           ;Console.c: 164: for (x = 0; x < (UINT8)((128-6)/6); x++)
 22329  013580  0E00               	movlw	0
 22330  013582  0100               	movlb	0	; () banked
 22331  013584  6FB7               	movwf	Console_Init@x& (0+255),b
 22332  013586                     l12237:
 22333                           
 22334                           ; BSR set to: 0
 22335  013586  0E13               	movlw	19
 22336  013588  0100               	movlb	0	; () banked
 22337  01358A  65B7               	cpfsgt	Console_Init@x& (0+255),b
 22338  01358C  D001               	goto	l976
 22339  01358E  0012               	return	
 22340  013590                     l976:
 22341                           
 22342                           ; BSR set to: 0
 22343                           ;Console.c: 165: {
 22344                           ;Console.c: 166: for (y = 0; y < (UINT8)((128-6)/8); y++)
 22345                           
 22346                           ; BSR set to: 0
 22347  013590  0E00               	movlw	0
 22348  013592  0100               	movlb	0	; () banked
 22349  013594  6FB8               	movwf	Console_Init@y& (0+255),b
 22350  013596                     l12243:
 22351                           
 22352                           ; BSR set to: 0
 22353  013596  0E0E               	movlw	14
 22354  013598  0100               	movlb	0	; () banked
 22355  01359A  65B8               	cpfsgt	Console_Init@y& (0+255),b
 22356  01359C  D001               	goto	l978
 22357  01359E  D02C               	goto	u8170
 22358  0135A0                     l978:
 22359                           
 22360                           ; BSR set to: 0
 22361                           ;Console.c: 167: {
 22362                           ;Console.c: 168: lBuffer[y][x] = '\0';
 22363                           
 22364                           ; BSR set to: 0
 22365  0135A0  0100               	movlb	0	; () banked
 22366  0135A2  51B8               	movf	Console_Init@y& (0+255),w,b
 22367  0135A4  0D14               	mullw	20
 22368  0135A6  0EAA               	movlw	low _lBuffer
 22369  0135A8  0100               	movlb	0	; () banked
 22370  0135AA  6FB5               	movwf	??_Console_Init& (0+255),b
 22371  0135AC  0E04               	movlw	high _lBuffer
 22372  0135AE  0100               	movlb	0	; () banked
 22373  0135B0  6FB6               	movwf	(??_Console_Init+1)& (0+255),b
 22374  0135B2  50F3               	movf	prodl,w,c
 22375  0135B4  0100               	movlb	0	; () banked
 22376  0135B6  27B5               	addwf	??_Console_Init& (0+255),f,b
 22377  0135B8  50F4               	movf	prodh,w,c
 22378  0135BA  0100               	movlb	0	; () banked
 22379  0135BC  23B6               	addwfc	(??_Console_Init+1)& (0+255),f,b
 22380  0135BE  0100               	movlb	0	; () banked
 22381  0135C0  51B7               	movf	Console_Init@x& (0+255),w,b
 22382  0135C2  0D01               	mullw	1
 22383  0135C4  50F3               	movf	prodl,w,c
 22384  0135C6  0100               	movlb	0	; () banked
 22385  0135C8  25B5               	addwf	??_Console_Init& (0+255),w,b
 22386  0135CA  6ED9               	movwf	fsr2l,c
 22387  0135CC  50F4               	movf	prodh,w,c
 22388  0135CE  0100               	movlb	0	; () banked
 22389  0135D0  21B6               	addwfc	(??_Console_Init+1)& (0+255),w,b
 22390  0135D2  6EDA               	movwf	fsr2h,c
 22391  0135D4  0E00               	movlw	0
 22392  0135D6  6EDF               	movwf	indf2,c
 22393                           
 22394                           ;Console.c: 169: lCBuffer[y] = 0xFFFF;
 22395  0135D8  0100               	movlb	0	; () banked
 22396  0135DA  51B8               	movf	Console_Init@y& (0+255),w,b
 22397  0135DC  0D02               	mullw	2
 22398  0135DE  0E00               	movlw	low _lCBuffer
 22399  0135E0  24F3               	addwf	prodl,w,c
 22400  0135E2  6ED9               	movwf	fsr2l,c
 22401  0135E4  0E03               	movlw	high _lCBuffer
 22402  0135E6  20F4               	addwfc	prodh,w,c
 22403  0135E8  6EDA               	movwf	fsr2h,c
 22404  0135EA  0EFF               	movlw	255
 22405  0135EC  6EDE               	movwf	postinc2,c
 22406  0135EE  0EFF               	movlw	255
 22407  0135F0  6EDD               	movwf	postdec2,c
 22408                           
 22409                           ; BSR set to: 0
 22410  0135F2  0100               	movlb	0	; () banked
 22411  0135F4  2BB8               	incf	Console_Init@y& (0+255),f,b
 22412  0135F6  D7CF               	goto	l12243
 22413  0135F8                     u8170:
 22414                           
 22415                           ; BSR set to: 0
 22416                           
 22417                           ; BSR set to: 0
 22418  0135F8  0100               	movlb	0	; () banked
 22419  0135FA  2BB7               	incf	Console_Init@x& (0+255),f,b
 22420  0135FC  D7C4               	goto	l12237
 22421  0135FE                     __end_of_Console_Init:
 22422                           	opt stack 0
 22423                           tosu	equ	0xFFF
 22424                           tosh	equ	0xFFE
 22425                           tosl	equ	0xFFD
 22426                           pclath	equ	0xFFA
 22427                           tblptru	equ	0xFF8
 22428                           tblptrh	equ	0xFF7
 22429                           tblptrl	equ	0xFF6
 22430                           tablat	equ	0xFF5
 22431                           prodh	equ	0xFF4
 22432                           prodl	equ	0xFF3
 22433                           intcon	equ	0xFF2
 22434                           indf0	equ	0xFEF
 22435                           postinc0	equ	0xFEE
 22436                           fsr0h	equ	0xFEA
 22437                           fsr0l	equ	0xFE9
 22438                           wreg	equ	0xFE8
 22439                           indf1	equ	0xFE7
 22440                           postdec1	equ	0xFE5
 22441                           fsr1h	equ	0xFE2
 22442                           fsr1l	equ	0xFE1
 22443                           indf2	equ	0xFDF
 22444                           postinc2	equ	0xFDE
 22445                           postdec2	equ	0xFDD
 22446                           plusw2	equ	0xFDB
 22447                           fsr2h	equ	0xFDA
 22448                           fsr2l	equ	0xFD9
 22449                           status	equ	0xFD8
 22450                           
 22451 ;; *************** function _ISR_Function *****************
 22452 ;; Defined at:
 22453 ;;		line 38 in file "Library/ISR.c"
 22454 ;; Parameters:    Size  Location     Type
 22455 ;;		None
 22456 ;; Auto vars:     Size  Location     Type
 22457 ;;		None
 22458 ;; Return value:  Size  Location     Type
 22459 ;;                  1    wreg      void 
 22460 ;; Registers used:
 22461 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22462 ;; Tracked objects:
 22463 ;;		On entry : 0/0
 22464 ;;		On exit  : 0/0
 22465 ;;		Unchanged: 0/0
 22466 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22467 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22468 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22469 ;;      Temps:         18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22470 ;;      Totals:        18       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22471 ;;Total ram usage:       18 bytes
 22472 ;; Hardware stack levels used:    1
 22473 ;; Hardware stack levels required when called:    6
 22474 ;; This function calls:
 22475 ;;		_Timer0_ISR
 22476 ;; This function is called by:
 22477 ;;		Interrupt level 2
 22478 ;; This function uses a non-reentrant model
 22479 ;;
 22480                           
 22481                           	psect	intcode
 22482  001408                     __pintcode:
 22483                           	opt stack 0
 22484  001408                     _ISR_Function:
 22485                           	opt stack 14
 22486                           
 22487                           ; BSR set to: 0
 22488                           ;incstack = 0
 22489  001408  8251               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 22490  00140A  CFFA F017          	movff	pclath,??_ISR_Function
 22491  00140E  CFFB F018          	movff	pclatu,??_ISR_Function+1
 22492  001412  CFE9 F019          	movff	fsr0l,??_ISR_Function+2
 22493  001416  CFEA F01A          	movff	fsr0h,??_ISR_Function+3
 22494  00141A  CFE1 F01B          	movff	fsr1l,??_ISR_Function+4
 22495  00141E  CFE2 F01C          	movff	fsr1h,??_ISR_Function+5
 22496  001422  CFD9 F01D          	movff	fsr2l,??_ISR_Function+6
 22497  001426  CFDA F01E          	movff	fsr2h,??_ISR_Function+7
 22498  00142A  CFF3 F01F          	movff	prodl,??_ISR_Function+8
 22499  00142E  CFF4 F020          	movff	prodh,??_ISR_Function+9
 22500  001432  CFF6 F021          	movff	tblptrl,??_ISR_Function+10
 22501  001436  CFF7 F022          	movff	tblptrh,??_ISR_Function+11
 22502  00143A  CFF8 F023          	movff	tblptru,??_ISR_Function+12
 22503  00143E  CFF5 F024          	movff	tablat,??_ISR_Function+13
 22504  001442  C051  F025         	movff	btemp,??_ISR_Function+14
 22505  001446  C052  F026         	movff	btemp+1,??_ISR_Function+15
 22506  00144A  C053  F027         	movff	btemp+2,??_ISR_Function+16
 22507  00144E  C054  F028         	movff	btemp+3,??_ISR_Function+17
 22508                           
 22509                           ;ISR.c: 41: INTCONbits.INT0IF = 0;
 22510  001452  92F2               	bcf	intcon,1,c	;volatile
 22511                           
 22512                           ;ISR.c: 67: if (((INTCONbits.TMR0IF) && (INTCONbits.TMR0IE)))
 22513  001454  B4F2               	btfsc	intcon,2,c	;volatile
 22514  001456  AAF2               	btfss	intcon,5,c	;volatile
 22515  001458  D002               	goto	i2l1590
 22516                           
 22517                           ;ISR.c: 68: Timer0_ISR();
 22518  00145A  ECFD  F0A2         	call	_Timer0_ISR	;wreg free
 22519  00145E                     i2l1590:
 22520  00145E  C028  F054         	movff	??_ISR_Function+17,btemp+3
 22521  001462  C027  F053         	movff	??_ISR_Function+16,btemp+2
 22522  001466  C026  F052         	movff	??_ISR_Function+15,btemp+1
 22523  00146A  C025  F051         	movff	??_ISR_Function+14,btemp
 22524  00146E  C024  FFF5         	movff	??_ISR_Function+13,tablat
 22525  001472  C023  FFF8         	movff	??_ISR_Function+12,tblptru
 22526  001476  C022  FFF7         	movff	??_ISR_Function+11,tblptrh
 22527  00147A  C021  FFF6         	movff	??_ISR_Function+10,tblptrl
 22528  00147E  C020  FFF4         	movff	??_ISR_Function+9,prodh
 22529  001482  C01F  FFF3         	movff	??_ISR_Function+8,prodl
 22530  001486  C01E  FFDA         	movff	??_ISR_Function+7,fsr2h
 22531  00148A  C01D  FFD9         	movff	??_ISR_Function+6,fsr2l
 22532  00148E  C01C  FFE2         	movff	??_ISR_Function+5,fsr1h
 22533  001492  C01B  FFE1         	movff	??_ISR_Function+4,fsr1l
 22534  001496  C01A  FFEA         	movff	??_ISR_Function+3,fsr0h
 22535  00149A  C019  FFE9         	movff	??_ISR_Function+2,fsr0l
 22536  00149E  C018  FFFB         	movff	??_ISR_Function+1,pclatu
 22537  0014A2  C017  FFFA         	movff	??_ISR_Function,pclath
 22538  0014A6  9251               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 22539  0014A8  0011               	retfie		f
 22540  0014AA                     __end_of_ISR_Function:
 22541                           	opt stack 0
 22542                           tosu	equ	0xFFF
 22543                           tosh	equ	0xFFE
 22544                           tosl	equ	0xFFD
 22545                           pclatu	equ	0xFFB
 22546                           pclath	equ	0xFFA
 22547                           tblptru	equ	0xFF8
 22548                           tblptrh	equ	0xFF7
 22549                           tblptrl	equ	0xFF6
 22550                           tablat	equ	0xFF5
 22551                           prodh	equ	0xFF4
 22552                           prodl	equ	0xFF3
 22553                           intcon	equ	0xFF2
 22554                           indf0	equ	0xFEF
 22555                           postinc0	equ	0xFEE
 22556                           fsr0h	equ	0xFEA
 22557                           fsr0l	equ	0xFE9
 22558                           wreg	equ	0xFE8
 22559                           indf1	equ	0xFE7
 22560                           postdec1	equ	0xFE5
 22561                           fsr1h	equ	0xFE2
 22562                           fsr1l	equ	0xFE1
 22563                           indf2	equ	0xFDF
 22564                           postinc2	equ	0xFDE
 22565                           postdec2	equ	0xFDD
 22566                           plusw2	equ	0xFDB
 22567                           fsr2h	equ	0xFDA
 22568                           fsr2l	equ	0xFD9
 22569                           status	equ	0xFD8
 22570                           
 22571 ;; *************** function _Timer0_ISR *****************
 22572 ;; Defined at:
 22573 ;;		line 94 in file "Library/Timer0.c"
 22574 ;; Parameters:    Size  Location     Type
 22575 ;;		None
 22576 ;; Auto vars:     Size  Location     Type
 22577 ;;		None
 22578 ;; Return value:  Size  Location     Type
 22579 ;;                  1    wreg      void 
 22580 ;; Registers used:
 22581 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, pclath, tosl, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22582 ;; Tracked objects:
 22583 ;;		On entry : 0/0
 22584 ;;		On exit  : 0/0
 22585 ;;		Unchanged: 0/0
 22586 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22587 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22588 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22589 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22590 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22591 ;;Total ram usage:        0 bytes
 22592 ;; Hardware stack levels used:    1
 22593 ;; Hardware stack levels required when called:    5
 22594 ;; This function calls:
 22595 ;;		Absolute function
 22596 ;;		i2_Motor_Step
 22597 ;;		i2_Timer0_Stop
 22598 ;; This function is called by:
 22599 ;;		_ISR_Function
 22600 ;; This function uses a non-reentrant model
 22601 ;;
 22602                           
 22603                           	psect	text127
 22604  0145FA                     __ptext127:
 22605                           	opt stack 0
 22606  0145FA                     _Timer0_ISR:
 22607                           	opt stack 14
 22608                           
 22609                           ;Timer0.c: 96: Timer0_Stop();
 22610                           
 22611                           ;incstack = 0
 22612  0145FA  ECFF  F0A4         	call	i2_Timer0_Stop	;wreg free
 22613                           
 22614                           ;Timer0.c: 99: if (gISR != 0)
 22615  0145FE  0100               	movlb	0	; () banked
 22616  014600  516C               	movf	_gISR& (0+255),w,b
 22617  014602  0100               	movlb	0	; () banked
 22618  014604  116D               	iorwf	(_gISR+1)& (0+255),w,b
 22619  014606  0100               	movlb	0	; () banked
 22620  014608  116E               	iorwf	(_gISR+2)& (0+255),w,b
 22621  01460A  B4D8               	btfsc	status,2,c
 22622  01460C  0012               	return	
 22623                           
 22624                           ; BSR set to: 0
 22625                           ;Timer0.c: 100: gISR();
 22626  01460E  D801               	call	i2u928_48
 22627  014610  0012               	return	
 22628  014612                     i2u928_48:
 22629  014612  0005               	push	
 22630  014614  6EFA               	movwf	pclath,c
 22631  014616  0100               	movlb	0	; () banked
 22632  014618  516C               	movf	_gISR& (0+255),w,b
 22633  01461A  6EFD               	movwf	tosl,c
 22634  01461C  516D               	movf	(_gISR+1)& (0+255),w,b
 22635  01461E  6EFE               	movwf	tosh,c
 22636  014620  516E               	movf	(_gISR+2)& (0+255),w,b
 22637  014622  6EFF               	movwf	tosu,c
 22638  014624  50FA               	movf	pclath,w,c
 22639  014626  0012               	return		;indir
 22640  014628                     __end_of_Timer0_ISR:
 22641                           	opt stack 0
 22642                           tosu	equ	0xFFF
 22643                           tosh	equ	0xFFE
 22644                           tosl	equ	0xFFD
 22645                           pclatu	equ	0xFFB
 22646                           pclath	equ	0xFFA
 22647                           tblptru	equ	0xFF8
 22648                           tblptrh	equ	0xFF7
 22649                           tblptrl	equ	0xFF6
 22650                           tablat	equ	0xFF5
 22651                           prodh	equ	0xFF4
 22652                           prodl	equ	0xFF3
 22653                           intcon	equ	0xFF2
 22654                           indf0	equ	0xFEF
 22655                           postinc0	equ	0xFEE
 22656                           fsr0h	equ	0xFEA
 22657                           fsr0l	equ	0xFE9
 22658                           wreg	equ	0xFE8
 22659                           indf1	equ	0xFE7
 22660                           postdec1	equ	0xFE5
 22661                           fsr1h	equ	0xFE2
 22662                           fsr1l	equ	0xFE1
 22663                           indf2	equ	0xFDF
 22664                           postinc2	equ	0xFDE
 22665                           postdec2	equ	0xFDD
 22666                           plusw2	equ	0xFDB
 22667                           fsr2h	equ	0xFDA
 22668                           fsr2l	equ	0xFD9
 22669                           status	equ	0xFD8
 22670                           
 22671 ;; *************** function i2_Motor_Step *****************
 22672 ;; Defined at:
 22673 ;;		line 75 in file "Library/Motor.c"
 22674 ;; Parameters:    Size  Location     Type
 22675 ;;		None
 22676 ;; Auto vars:     Size  Location     Type
 22677 ;;		None
 22678 ;; Return value:  Size  Location     Type
 22679 ;;                  1    wreg      void 
 22680 ;; Registers used:
 22681 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 22682 ;; Tracked objects:
 22683 ;;		On entry : 0/0
 22684 ;;		On exit  : 0/0
 22685 ;;		Unchanged: 0/0
 22686 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22687 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22688 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22689 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22690 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22691 ;;Total ram usage:        2 bytes
 22692 ;; Hardware stack levels used:    1
 22693 ;; Hardware stack levels required when called:    4
 22694 ;; This function calls:
 22695 ;;		i2_MXK_Queue
 22696 ;;		i2_MXK_Release
 22697 ;;		i2_MXK_SwitchTo
 22698 ;;		i2_Port_SetPin
 22699 ;;		i2_Timer0_Restart
 22700 ;;		i2_Timer0_Stop
 22701 ;; This function is called by:
 22702 ;; This function uses a non-reentrant model
 22703 ;;
 22704                           
 22705                           	psect	text128
 22706  0123CE                     __ptext128:
 22707                           	opt stack 0
 22708  0123CE                     i2_Motor_Step:
 22709                           	opt stack 14
 22710                           
 22711                           ;Motor.c: 77: if (MXK_SwitchTo(lMotor->mAddress))
 22712                           
 22713                           ;incstack = 0
 22714  0123CE  0100               	movlb	0	; () banked
 22715  0123D0  EE20 F004          	lfsr	2,4
 22716  0123D4  517D               	movf	_lMotor& (0+255),w,b
 22717  0123D6  26D9               	addwf	fsr2l,f,c
 22718  0123D8  517E               	movf	(_lMotor+1)& (0+255),w,b
 22719  0123DA  22DA               	addwfc	fsr2h,f,c
 22720  0123DC  50DF               	movf	indf2,w,c
 22721  0123DE  EC69  F0A2         	call	i2_MXK_SwitchTo
 22722  0123E2  0900               	iorlw	0
 22723  0123E4  B4D8               	btfsc	status,2,c
 22724  0123E6  D06A               	goto	i2l1627
 22725                           
 22726                           ;Motor.c: 78: {
 22727                           ;Motor.c: 79: if (lMotor->mDelta != 0)
 22728  0123E8  C07D  FFD9         	movff	_lMotor,fsr2l
 22729  0123EC  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22730  0123F0  50DE               	movf	postinc2,w,c
 22731  0123F2  10DE               	iorwf	postinc2,w,c
 22732  0123F4  B4D8               	btfsc	status,2,c
 22733  0123F6  D05D               	goto	i2l1628
 22734                           
 22735                           ;Motor.c: 80: {
 22736                           ;Motor.c: 82: if (lMotor->mDelta > 0)
 22737  0123F8  C07D  FFD9         	movff	_lMotor,fsr2l
 22738  0123FC  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22739  012400  0E01               	movlw	1
 22740  012402  BEDB               	btfsc	plusw2,7,c
 22741  012404  D022               	goto	i2l1629
 22742  012406  0E01               	movlw	1
 22743  012408  50DB               	movf	plusw2,w,c
 22744  01240A  E103               	bnz	i2u494_40
 22745  01240C  04DE               	decf	postinc2,w,c
 22746  01240E  A0D8               	btfss	status,0,c
 22747  012410  D01C               	goto	i2l1629
 22748  012412                     i2u494_40:
 22749                           
 22750                           ;Motor.c: 83: {
 22751                           ;Motor.c: 84: if (lMotor->mDelta != 32767)
 22752  012412  C07D  FFD9         	movff	_lMotor,fsr2l
 22753  012416  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22754  01241A  28DE               	incf	postinc2,w,c
 22755  01241C  E104               	bnz	i2u495_40
 22756  01241E  0E7F               	movlw	127
 22757  012420  18DE               	xorwf	postinc2,w,c
 22758  012422  B4D8               	btfsc	status,2,c
 22759  012424  D007               	goto	i2l1630
 22760  012426                     i2u495_40:
 22761                           
 22762                           ;Motor.c: 85: lMotor->mDelta --;
 22763  012426  C07D  FFD9         	movff	_lMotor,fsr2l
 22764  01242A  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22765  01242E  06DE               	decf	postinc2,f,c
 22766  012430  0E00               	movlw	0
 22767  012432  5ADD               	subwfb	postdec2,f,c
 22768  012434                     i2l1630:
 22769                           
 22770                           ;Motor.c: 87: Port_SetPin(&PortE, eP0, 1);
 22771  012434  0E8F               	movlw	low _PortE
 22772  012436  6E10               	movwf	i2Port_SetPin@pInput,c
 22773  012438  0E00               	movlw	high _PortE
 22774  01243A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22775  01243C  0E00               	movlw	0
 22776  01243E  6E12               	movwf	i2Port_SetPin@pPin,c
 22777  012440  0E01               	movlw	1
 22778  012442  6E13               	movwf	i2Port_SetPin@pValue,c
 22779  012444  EC59  F097         	call	i2_Port_SetPin	;wreg free
 22780                           
 22781                           ;Motor.c: 88: }
 22782  012448  D01B               	goto	i2l1631
 22783  01244A                     i2l1629:
 22784                           
 22785                           ;Motor.c: 89: else
 22786                           ;Motor.c: 90: {
 22787                           ;Motor.c: 91: if (lMotor->mDelta != -32767)
 22788  01244A  C07D  FFD9         	movff	_lMotor,fsr2l
 22789  01244E  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22790  012452  04DE               	decf	postinc2,w,c
 22791  012454  E104               	bnz	i2u496_40
 22792  012456  0E80               	movlw	128
 22793  012458  18DE               	xorwf	postinc2,w,c
 22794  01245A  B4D8               	btfsc	status,2,c
 22795  01245C  D007               	goto	i2l1632
 22796  01245E                     i2u496_40:
 22797                           
 22798                           ;Motor.c: 92: lMotor->mDelta ++;
 22799  01245E  C07D  FFD9         	movff	_lMotor,fsr2l
 22800  012462  C07E  FFDA         	movff	_lMotor+1,fsr2h
 22801  012466  2ADE               	incf	postinc2,f,c
 22802  012468  0E00               	movlw	0
 22803  01246A  22DD               	addwfc	postdec2,f,c
 22804  01246C                     i2l1632:
 22805                           
 22806                           ;Motor.c: 94: Port_SetPin(&PortE, eP0, 0);
 22807  01246C  0E8F               	movlw	low _PortE
 22808  01246E  6E10               	movwf	i2Port_SetPin@pInput,c
 22809  012470  0E00               	movlw	high _PortE
 22810  012472  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22811  012474  0E00               	movlw	0
 22812  012476  6E12               	movwf	i2Port_SetPin@pPin,c
 22813  012478  0E00               	movlw	0
 22814  01247A  6E13               	movwf	i2Port_SetPin@pValue,c
 22815  01247C  EC59  F097         	call	i2_Port_SetPin	;wreg free
 22816  012480                     i2l1631:
 22817                           
 22818                           ;Motor.c: 95: }
 22819                           ;Motor.c: 98: Port_SetPin(&PortE, eP1, 1);
 22820  012480  0E8F               	movlw	low _PortE
 22821  012482  6E10               	movwf	i2Port_SetPin@pInput,c
 22822  012484  0E00               	movlw	high _PortE
 22823  012486  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22824  012488  0E01               	movlw	1
 22825  01248A  6E12               	movwf	i2Port_SetPin@pPin,c
 22826  01248C  0E01               	movlw	1
 22827  01248E  6E13               	movwf	i2Port_SetPin@pValue,c
 22828  012490  EC59  F097         	call	i2_Port_SetPin	;wreg free
 22829                           
 22830                           ;Motor.c: 99: Port_SetPin(&PortE, eP1, 0);
 22831  012494  0E8F               	movlw	low _PortE
 22832  012496  6E10               	movwf	i2Port_SetPin@pInput,c
 22833  012498  0E00               	movlw	high _PortE
 22834  01249A  6E11               	movwf	i2Port_SetPin@pInput+1,c
 22835  01249C  0E01               	movlw	1
 22836  01249E  6E12               	movwf	i2Port_SetPin@pPin,c
 22837  0124A0  0E00               	movlw	0
 22838  0124A2  6E13               	movwf	i2Port_SetPin@pValue,c
 22839  0124A4  EC59  F097         	call	i2_Port_SetPin	;wreg free
 22840                           
 22841                           ;Motor.c: 101: MXK_Release();
 22842  0124A8  EC02  F0A5         	call	i2_MXK_Release	;wreg free
 22843                           
 22844                           ;Motor.c: 102: Timer0_Restart();
 22845  0124AC  ECD6  F0A4         	call	i2_Timer0_Restart	;wreg free
 22846                           
 22847                           ;Motor.c: 103: return;
 22848  0124B0  0012               	return	
 22849  0124B2                     i2l1628:
 22850                           
 22851                           ;Motor.c: 104: }
 22852                           ;Motor.c: 105: MXK_Release();
 22853  0124B2  EC02  F0A5         	call	i2_MXK_Release	;wreg free
 22854                           
 22855                           ;Motor.c: 106: Timer0_Stop();
 22856  0124B6  ECFF  F0A4         	call	i2_Timer0_Stop	;wreg free
 22857                           
 22858                           ;Motor.c: 107: return;
 22859  0124BA  0012               	return	
 22860  0124BC                     i2l1627:
 22861                           
 22862                           ;Motor.c: 108: }
 22863                           ;Motor.c: 111: MXK_Queue(lStepFunction);
 22864  0124BC  C072  F001         	movff	_lStepFunction,i2MXK_Queue@pCallback
 22865  0124C0  C073  F002         	movff	_lStepFunction+1,i2MXK_Queue@pCallback+1
 22866  0124C4  C074  F003         	movff	_lStepFunction+2,i2MXK_Queue@pCallback+2
 22867  0124C8  ECC9  F0A4         	call	i2_MXK_Queue	;wreg free
 22868  0124CC  0012               	return		;funcret
 22869  0124CE                     __end_ofi2_Motor_Step:
 22870                           	opt stack 0
 22871                           tosu	equ	0xFFF
 22872                           tosh	equ	0xFFE
 22873                           tosl	equ	0xFFD
 22874                           pclatu	equ	0xFFB
 22875                           pclath	equ	0xFFA
 22876                           tblptru	equ	0xFF8
 22877                           tblptrh	equ	0xFF7
 22878                           tblptrl	equ	0xFF6
 22879                           tablat	equ	0xFF5
 22880                           prodh	equ	0xFF4
 22881                           prodl	equ	0xFF3
 22882                           intcon	equ	0xFF2
 22883                           indf0	equ	0xFEF
 22884                           postinc0	equ	0xFEE
 22885                           fsr0h	equ	0xFEA
 22886                           fsr0l	equ	0xFE9
 22887                           wreg	equ	0xFE8
 22888                           indf1	equ	0xFE7
 22889                           postdec1	equ	0xFE5
 22890                           fsr1h	equ	0xFE2
 22891                           fsr1l	equ	0xFE1
 22892                           indf2	equ	0xFDF
 22893                           postinc2	equ	0xFDE
 22894                           postdec2	equ	0xFDD
 22895                           plusw2	equ	0xFDB
 22896                           fsr2h	equ	0xFDA
 22897                           fsr2l	equ	0xFD9
 22898                           status	equ	0xFD8
 22899                           
 22900 ;; *************** function i2_Timer0_Stop *****************
 22901 ;; Defined at:
 22902 ;;		line 89 in file "Library/Timer0.c"
 22903 ;; Parameters:    Size  Location     Type
 22904 ;;		None
 22905 ;; Auto vars:     Size  Location     Type
 22906 ;;		None
 22907 ;; Return value:  Size  Location     Type
 22908 ;;                  1    wreg      void 
 22909 ;; Registers used:
 22910 ;;		None
 22911 ;; Tracked objects:
 22912 ;;		On entry : 0/0
 22913 ;;		On exit  : 0/0
 22914 ;;		Unchanged: 0/0
 22915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22916 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22917 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22918 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22919 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22920 ;;Total ram usage:        0 bytes
 22921 ;; Hardware stack levels used:    1
 22922 ;; This function calls:
 22923 ;;		Nothing
 22924 ;; This function is called by:
 22925 ;;		_Timer0_ISR
 22926 ;;		i2_Motor_Step
 22927 ;; This function uses a non-reentrant model
 22928 ;;
 22929                           
 22930                           	psect	text129
 22931  0149FE                     __ptext129:
 22932                           	opt stack 0
 22933  0149FE                     i2_Timer0_Stop:
 22934                           	opt stack 18
 22935                           
 22936                           ;Timer0.c: 91: INTCONbits.TMR0IE = 0;
 22937                           
 22938                           ;incstack = 0
 22939  0149FE  9AF2               	bcf	intcon,5,c	;volatile
 22940                           
 22941                           ;Timer0.c: 92: INTCONbits.TMR0IF = 0;
 22942  014A00  94F2               	bcf	intcon,2,c	;volatile
 22943  014A02  0012               	return		;funcret
 22944  014A04                     __end_ofi2_Timer0_Stop:
 22945                           	opt stack 0
 22946                           tosu	equ	0xFFF
 22947                           tosh	equ	0xFFE
 22948                           tosl	equ	0xFFD
 22949                           pclatu	equ	0xFFB
 22950                           pclath	equ	0xFFA
 22951                           tblptru	equ	0xFF8
 22952                           tblptrh	equ	0xFF7
 22953                           tblptrl	equ	0xFF6
 22954                           tablat	equ	0xFF5
 22955                           prodh	equ	0xFF4
 22956                           prodl	equ	0xFF3
 22957                           intcon	equ	0xFF2
 22958                           indf0	equ	0xFEF
 22959                           postinc0	equ	0xFEE
 22960                           fsr0h	equ	0xFEA
 22961                           fsr0l	equ	0xFE9
 22962                           wreg	equ	0xFE8
 22963                           indf1	equ	0xFE7
 22964                           postdec1	equ	0xFE5
 22965                           fsr1h	equ	0xFE2
 22966                           fsr1l	equ	0xFE1
 22967                           indf2	equ	0xFDF
 22968                           postinc2	equ	0xFDE
 22969                           postdec2	equ	0xFDD
 22970                           plusw2	equ	0xFDB
 22971                           fsr2h	equ	0xFDA
 22972                           fsr2l	equ	0xFD9
 22973                           status	equ	0xFD8
 22974                           
 22975 ;; *************** function i2_Timer0_Restart *****************
 22976 ;; Defined at:
 22977 ;;		line 83 in file "Library/Timer0.c"
 22978 ;; Parameters:    Size  Location     Type
 22979 ;;		None
 22980 ;; Auto vars:     Size  Location     Type
 22981 ;;		None
 22982 ;; Return value:  Size  Location     Type
 22983 ;;                  1    wreg      void 
 22984 ;; Registers used:
 22985 ;;		None
 22986 ;; Tracked objects:
 22987 ;;		On entry : 0/0
 22988 ;;		On exit  : 0/0
 22989 ;;		Unchanged: 0/0
 22990 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 22991 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22992 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22993 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22994 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 22995 ;;Total ram usage:        0 bytes
 22996 ;; Hardware stack levels used:    1
 22997 ;; This function calls:
 22998 ;;		Nothing
 22999 ;; This function is called by:
 23000 ;;		i2_Motor_Step
 23001 ;; This function uses a non-reentrant model
 23002 ;;
 23003                           
 23004                           	psect	text130
 23005  0149AC                     __ptext130:
 23006                           	opt stack 0
 23007  0149AC                     i2_Timer0_Restart:
 23008                           	opt stack 17
 23009                           
 23010                           ;Timer0.c: 85: TMR0 = COUNTER;
 23011                           
 23012                           ;incstack = 0
 23013  0149AC  C029  FFD6         	movff	_COUNTER,4054	;volatile
 23014  0149B0  C02A  FFD7         	movff	_COUNTER+1,4055	;volatile
 23015                           
 23016                           ;Timer0.c: 87: INTCONbits.TMR0IE = 1;
 23017  0149B4  8AF2               	bsf	intcon,5,c	;volatile
 23018  0149B6  0012               	return		;funcret
 23019  0149B8                     __end_ofi2_Timer0_Restart:
 23020                           	opt stack 0
 23021                           tosu	equ	0xFFF
 23022                           tosh	equ	0xFFE
 23023                           tosl	equ	0xFFD
 23024                           pclatu	equ	0xFFB
 23025                           pclath	equ	0xFFA
 23026                           tblptru	equ	0xFF8
 23027                           tblptrh	equ	0xFF7
 23028                           tblptrl	equ	0xFF6
 23029                           tablat	equ	0xFF5
 23030                           prodh	equ	0xFF4
 23031                           prodl	equ	0xFF3
 23032                           intcon	equ	0xFF2
 23033                           indf0	equ	0xFEF
 23034                           postinc0	equ	0xFEE
 23035                           fsr0h	equ	0xFEA
 23036                           fsr0l	equ	0xFE9
 23037                           wreg	equ	0xFE8
 23038                           indf1	equ	0xFE7
 23039                           postdec1	equ	0xFE5
 23040                           fsr1h	equ	0xFE2
 23041                           fsr1l	equ	0xFE1
 23042                           indf2	equ	0xFDF
 23043                           postinc2	equ	0xFDE
 23044                           postdec2	equ	0xFDD
 23045                           plusw2	equ	0xFDB
 23046                           fsr2h	equ	0xFDA
 23047                           fsr2l	equ	0xFD9
 23048                           status	equ	0xFD8
 23049                           
 23050 ;; *************** function i2_Port_SetPin *****************
 23051 ;; Defined at:
 23052 ;;		line 247 in file "Library/Port.c"
 23053 ;; Parameters:    Size  Location     Type
 23054 ;;  pInput          2   15[COMRAM] const PTR struct Port
 23055 ;;		 -> PortG(10), PortE(10), PortC(10), PortF(10), 
 23056 ;;  pPin            1   17[COMRAM] enum E6750
 23057 ;;  pValue          1   18[COMRAM] unsigned char 
 23058 ;; Auto vars:     Size  Location     Type
 23059 ;;  Port_SetPin     1   19[COMRAM] enum E6795
 23060 ;; Return value:  Size  Location     Type
 23061 ;;                  1    wreg      void 
 23062 ;; Registers used:
 23063 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23064 ;; Tracked objects:
 23065 ;;		On entry : 0/0
 23066 ;;		On exit  : 0/0
 23067 ;;		Unchanged: 0/0
 23068 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23069 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23070 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23071 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23072 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23073 ;;Total ram usage:        5 bytes
 23074 ;; Hardware stack levels used:    1
 23075 ;; Hardware stack levels required when called:    3
 23076 ;; This function calls:
 23077 ;;		i2_Byte_SetBit
 23078 ;;		i2_Word_GetPair
 23079 ;; This function is called by:
 23080 ;;		i2_Motor_Step
 23081 ;; This function uses a non-reentrant model
 23082 ;;
 23083                           
 23084                           	psect	text131
 23085  012EB2                     __ptext131:
 23086                           	opt stack 0
 23087  012EB2                     i2_Port_SetPin:
 23088                           	opt stack 14
 23089                           
 23090                           ;Port.c: 249: ePinType Type = (ePinType)Word_GetPair(&pInput->mType, (UINT8)pPin);
 23091                           
 23092                           ;incstack = 0
 23093  012EB2  0E08               	movlw	8
 23094  012EB4  2410               	addwf	i2Port_SetPin@pInput,w,c
 23095  012EB6  6E0D               	movwf	i2Word_GetPair@pInput,c
 23096  012EB8  0E00               	movlw	0
 23097  012EBA  2011               	addwfc	i2Port_SetPin@pInput+1,w,c
 23098  012EBC  6E0E               	movwf	i2Word_GetPair@pInput+1,c
 23099  012EBE  C012  F00F         	movff	i2Port_SetPin@pPin,i2Word_GetPair@pPair
 23100  012EC2  ECCE  F0A2         	call	i2_Word_GetPair	;wreg free
 23101  012EC6  6E14               	movwf	i2Port_SetPin@Type,c
 23102                           
 23103                           ;Port.c: 250: switch (Type)
 23104  012EC8  D03B               	goto	i2l427
 23105  012ECA                     
 23106                           ;Port.c: 256: pValue &= 1;
 23107  012ECA  0E01               	movlw	1
 23108  012ECC  1613               	andwf	i2Port_SetPin@pValue,f,c
 23109                           
 23110                           ;Port.c: 257: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23111  012ECE  EE20 F002          	lfsr	2,2
 23112  012ED2  5010               	movf	i2Port_SetPin@pInput,w,c
 23113  012ED4  26D9               	addwf	fsr2l,f,c
 23114  012ED6  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23115  012ED8  22DA               	addwfc	fsr2h,f,c
 23116  012EDA  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23117  012EDE  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23118  012EE2  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23119  012EE6  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23120  012EEA  EC37  F0A0         	call	i2_Byte_SetBit	;wreg free
 23121                           
 23122                           ;Port.c: 258: break;
 23123  012EEE  0012               	return	
 23124  012EF0                     
 23125                           ;Port.c: 261: pValue &= 1;
 23126  012EF0  0E01               	movlw	1
 23127  012EF2  1613               	andwf	i2Port_SetPin@pValue,f,c
 23128                           
 23129                           ;Port.c: 262: pValue ^= 1;
 23130  012EF4  0E01               	movlw	1
 23131  012EF6  1A13               	xorwf	i2Port_SetPin@pValue,f,c
 23132                           
 23133                           ;Port.c: 263: Byte_SetBit(pInput->mDirection, pPin, pValue);
 23134  012EF8  EE20 F002          	lfsr	2,2
 23135  012EFC  5010               	movf	i2Port_SetPin@pInput,w,c
 23136  012EFE  26D9               	addwf	fsr2l,f,c
 23137  012F00  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23138  012F02  22DA               	addwfc	fsr2h,f,c
 23139  012F04  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23140  012F08  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23141  012F0C  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23142  012F10  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23143  012F14  EC37  F0A0         	call	i2_Byte_SetBit	;wreg free
 23144                           
 23145                           ;Port.c: 264: break;
 23146  012F18  0012               	return	
 23147  012F1A                     
 23148                           ;Port.c: 266: pValue &= 1;
 23149  012F1A  0E01               	movlw	1
 23150  012F1C  1613               	andwf	i2Port_SetPin@pValue,f,c
 23151                           
 23152                           ;Port.c: 267: Byte_SetBit(pInput->mOutput, pPin, pValue);
 23153  012F1E  EE20 F004          	lfsr	2,4
 23154  012F22  5010               	movf	i2Port_SetPin@pInput,w,c
 23155  012F24  26D9               	addwf	fsr2l,f,c
 23156  012F26  5011               	movf	i2Port_SetPin@pInput+1,w,c
 23157  012F28  22DA               	addwfc	fsr2h,f,c
 23158  012F2A  CFDE F001          	movff	postinc2,i2Byte_SetBit@pInput
 23159  012F2E  CFDD F002          	movff	postdec2,i2Byte_SetBit@pInput+1
 23160  012F32  C012  F003         	movff	i2Port_SetPin@pPin,i2Byte_SetBit@pBit
 23161  012F36  C013  F004         	movff	i2Port_SetPin@pValue,i2Byte_SetBit@pValue
 23162  012F3A  EC37  F0A0         	call	i2_Byte_SetBit	;wreg free
 23163                           
 23164                           ;Port.c: 269: }
 23165                           
 23166                           ;Port.c: 268: break;
 23167  012F3E  0012               	return	
 23168  012F40                     i2l427:
 23169  012F40  5014               	movf	i2Port_SetPin@Type,w,c
 23170                           
 23171                           ; Switch size 1, requested type "space"
 23172                           ; Number of cases is 4, Range of values is 0 to 3
 23173                           ; switch strategies available:
 23174                           ; Name         Instructions Cycles
 23175                           ; simple_byte           13     7 (average)
 23176                           ;	Chosen strategy is simple_byte
 23177  012F42  0A00               	xorlw	0	; case 0
 23178  012F44  B4D8               	btfsc	status,2,c
 23179  012F46  0012               	return	
 23180  012F48  0A01               	xorlw	1	; case 1
 23181  012F4A  B4D8               	btfsc	status,2,c
 23182  012F4C  D7BE               	goto	i2l430
 23183  012F4E  0A03               	xorlw	3	; case 2
 23184  012F50  B4D8               	btfsc	status,2,c
 23185  012F52  D7CE               	goto	i2l432
 23186  012F54  0A01               	xorlw	1	; case 3
 23187  012F56  A4D8               	btfss	status,2,c
 23188  012F58  0012               	return	
 23189  012F5A  D7DF               	goto	i2l433
 23190  012F5C                     __end_ofi2_Port_SetPin:
 23191                           	opt stack 0
 23192                           tosu	equ	0xFFF
 23193                           tosh	equ	0xFFE
 23194                           tosl	equ	0xFFD
 23195                           pclatu	equ	0xFFB
 23196                           pclath	equ	0xFFA
 23197                           tblptru	equ	0xFF8
 23198                           tblptrh	equ	0xFF7
 23199                           tblptrl	equ	0xFF6
 23200                           tablat	equ	0xFF5
 23201                           prodh	equ	0xFF4
 23202                           prodl	equ	0xFF3
 23203                           intcon	equ	0xFF2
 23204                           indf0	equ	0xFEF
 23205                           postinc0	equ	0xFEE
 23206                           fsr0h	equ	0xFEA
 23207                           fsr0l	equ	0xFE9
 23208                           wreg	equ	0xFE8
 23209                           indf1	equ	0xFE7
 23210                           postdec1	equ	0xFE5
 23211                           fsr1h	equ	0xFE2
 23212                           fsr1l	equ	0xFE1
 23213                           indf2	equ	0xFDF
 23214                           postinc2	equ	0xFDE
 23215                           postdec2	equ	0xFDD
 23216                           plusw2	equ	0xFDB
 23217                           fsr2h	equ	0xFDA
 23218                           fsr2l	equ	0xFD9
 23219                           status	equ	0xFD8
 23220                           
 23221 ;; *************** function i2_Word_GetPair *****************
 23222 ;; Defined at:
 23223 ;;		line 156 in file "Library/Types.c"
 23224 ;; Parameters:    Size  Location     Type
 23225 ;;  pInput          2   12[COMRAM] PTR struct Word
 23226 ;;		 -> PortG(10), PortA(10), PortB(10), PortE(10), 
 23227 ;;		 -> PortD(10), PortG_Property(2), PortF_Property(2), PortE_Property(2), 
 23228 ;;		 -> PortD_Property(2), PortC_Property(2), PortB_Property(2), PortA_Property(2), 
 23229 ;;		 -> PortC(10), PortF(10), NULL(0), 
 23230 ;;  pPair           1   14[COMRAM] unsigned char 
 23231 ;; Auto vars:     Size  Location     Type
 23232 ;;		None
 23233 ;; Return value:  Size  Location     Type
 23234 ;;                  1    wreg      unsigned char 
 23235 ;; Registers used:
 23236 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23237 ;; Tracked objects:
 23238 ;;		On entry : 0/0
 23239 ;;		On exit  : 0/0
 23240 ;;		Unchanged: 0/0
 23241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23242 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23243 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23244 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23245 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23246 ;;Total ram usage:        3 bytes
 23247 ;; Hardware stack levels used:    1
 23248 ;; Hardware stack levels required when called:    2
 23249 ;; This function calls:
 23250 ;;		i2_Byte_GetPair
 23251 ;; This function is called by:
 23252 ;;		i2_Port_SetPin
 23253 ;; This function uses a non-reentrant model
 23254 ;;
 23255                           
 23256                           	psect	text132
 23257  01459C                     __ptext132:
 23258                           	opt stack 0
 23259  01459C                     i2_Word_GetPair:
 23260                           	opt stack 14
 23261                           
 23262                           ;Types.c: 158: if (pPair >= 4)
 23263                           
 23264                           ;incstack = 0
 23265  01459C  0E03               	movlw	3
 23266  01459E  640F               	cpfsgt	i2Word_GetPair@pPair,c
 23267  0145A0  D00C               	goto	i2l781
 23268                           
 23269                           ;Types.c: 159: return Byte_GetPair(&(pInput->MS_Byte), pPair - 4);
 23270  0145A2  0E01               	movlw	1
 23271  0145A4  240D               	addwf	i2Word_GetPair@pInput,w,c
 23272  0145A6  6E0A               	movwf	i2Byte_GetPair@pInput,c
 23273  0145A8  0E00               	movlw	0
 23274  0145AA  200E               	addwfc	i2Word_GetPair@pInput+1,w,c
 23275  0145AC  6E0B               	movwf	i2Byte_GetPair@pInput+1,c
 23276  0145AE  500F               	movf	i2Word_GetPair@pPair,w,c
 23277  0145B0  0FFC               	addlw	252
 23278  0145B2  6E0C               	movwf	i2Byte_GetPair@pPair,c
 23279  0145B4  EC14  F0A4         	call	i2_Byte_GetPair	;wreg free
 23280  0145B8  0012               	return	
 23281  0145BA                     i2l781:
 23282                           
 23283                           ;Types.c: 160: else
 23284                           ;Types.c: 161: return Byte_GetPair(&(pInput->LS_Byte), pPair);
 23285  0145BA  C00D  F00A         	movff	i2Word_GetPair@pInput,i2Byte_GetPair@pInput
 23286  0145BE  C00E  F00B         	movff	i2Word_GetPair@pInput+1,i2Byte_GetPair@pInput+1
 23287  0145C2  C00F  F00C         	movff	i2Word_GetPair@pPair,i2Byte_GetPair@pPair
 23288  0145C6  EC14  F0A4         	call	i2_Byte_GetPair	;wreg free
 23289  0145CA  0012               	return	
 23290  0145CC                     __end_ofi2_Word_GetPair:
 23291                           	opt stack 0
 23292                           tosu	equ	0xFFF
 23293                           tosh	equ	0xFFE
 23294                           tosl	equ	0xFFD
 23295                           pclatu	equ	0xFFB
 23296                           pclath	equ	0xFFA
 23297                           tblptru	equ	0xFF8
 23298                           tblptrh	equ	0xFF7
 23299                           tblptrl	equ	0xFF6
 23300                           tablat	equ	0xFF5
 23301                           prodh	equ	0xFF4
 23302                           prodl	equ	0xFF3
 23303                           intcon	equ	0xFF2
 23304                           indf0	equ	0xFEF
 23305                           postinc0	equ	0xFEE
 23306                           fsr0h	equ	0xFEA
 23307                           fsr0l	equ	0xFE9
 23308                           wreg	equ	0xFE8
 23309                           indf1	equ	0xFE7
 23310                           postdec1	equ	0xFE5
 23311                           fsr1h	equ	0xFE2
 23312                           fsr1l	equ	0xFE1
 23313                           indf2	equ	0xFDF
 23314                           postinc2	equ	0xFDE
 23315                           postdec2	equ	0xFDD
 23316                           plusw2	equ	0xFDB
 23317                           fsr2h	equ	0xFDA
 23318                           fsr2l	equ	0xFD9
 23319                           status	equ	0xFD8
 23320                           
 23321 ;; *************** function i2_Byte_GetPair *****************
 23322 ;; Defined at:
 23323 ;;		line 87 in file "Library/Types.c"
 23324 ;; Parameters:    Size  Location     Type
 23325 ;;  pInput          2    9[COMRAM] PTR struct Byte
 23326 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23327 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23328 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23329 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23330 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23331 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23332 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23333 ;;		 -> NULL(0), 
 23334 ;;  pPair           1   11[COMRAM] unsigned char 
 23335 ;; Auto vars:     Size  Location     Type
 23336 ;;		None
 23337 ;; Return value:  Size  Location     Type
 23338 ;;                  1    wreg      unsigned char 
 23339 ;; Registers used:
 23340 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 23341 ;; Tracked objects:
 23342 ;;		On entry : 0/0
 23343 ;;		On exit  : 0/0
 23344 ;;		Unchanged: 0/0
 23345 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23346 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23347 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23348 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23349 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23350 ;;Total ram usage:        3 bytes
 23351 ;; Hardware stack levels used:    1
 23352 ;; Hardware stack levels required when called:    1
 23353 ;; This function calls:
 23354 ;;		i2_Byte_GetZone
 23355 ;; This function is called by:
 23356 ;;		i2_Word_GetPair
 23357 ;; This function uses a non-reentrant model
 23358 ;;
 23359                           
 23360                           	psect	text133
 23361  014828                     __ptext133:
 23362                           	opt stack 0
 23363  014828                     i2_Byte_GetPair:
 23364                           	opt stack 14
 23365                           
 23366                           ;Types.c: 89: return Byte_GetZone(pInput, 4, pPair, 2);
 23367                           
 23368                           ;incstack = 0
 23369  014828  C00A  F001         	movff	i2Byte_GetPair@pInput,i2Byte_GetZone@pInput
 23370  01482C  C00B  F002         	movff	i2Byte_GetPair@pInput+1,i2Byte_GetZone@pInput+1
 23371  014830  0E04               	movlw	4
 23372  014832  6E03               	movwf	i2Byte_GetZone@pMax,c
 23373  014834  C00C  F004         	movff	i2Byte_GetPair@pPair,i2Byte_GetZone@pChunk
 23374  014838  0E02               	movlw	2
 23375  01483A  6E05               	movwf	i2Byte_GetZone@pChunkSize,c
 23376  01483C  EC79  F09B         	call	i2_Byte_GetZone	;wreg free
 23377  014840  0012               	return	
 23378  014842                     __end_ofi2_Byte_GetPair:
 23379                           	opt stack 0
 23380                           tosu	equ	0xFFF
 23381                           tosh	equ	0xFFE
 23382                           tosl	equ	0xFFD
 23383                           pclatu	equ	0xFFB
 23384                           pclath	equ	0xFFA
 23385                           tblptru	equ	0xFF8
 23386                           tblptrh	equ	0xFF7
 23387                           tblptrl	equ	0xFF6
 23388                           tablat	equ	0xFF5
 23389                           prodh	equ	0xFF4
 23390                           prodl	equ	0xFF3
 23391                           intcon	equ	0xFF2
 23392                           indf0	equ	0xFEF
 23393                           postinc0	equ	0xFEE
 23394                           fsr0h	equ	0xFEA
 23395                           fsr0l	equ	0xFE9
 23396                           wreg	equ	0xFE8
 23397                           indf1	equ	0xFE7
 23398                           postdec1	equ	0xFE5
 23399                           fsr1h	equ	0xFE2
 23400                           fsr1l	equ	0xFE1
 23401                           indf2	equ	0xFDF
 23402                           postinc2	equ	0xFDE
 23403                           postdec2	equ	0xFDD
 23404                           plusw2	equ	0xFDB
 23405                           fsr2h	equ	0xFDA
 23406                           fsr2l	equ	0xFD9
 23407                           status	equ	0xFD8
 23408                           
 23409 ;; *************** function i2_Byte_GetZone *****************
 23410 ;; Defined at:
 23411 ;;		line 64 in file "Library/Types.c"
 23412 ;; Parameters:    Size  Location     Type
 23413 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23414 ;;		 -> PortA_Property..(2), PortB_Property..(2), PortC_Property..(2), PortD_Property..(2), 
 23415 ;;		 -> PortE_Property..(2), PortF_Property..(2), PortG_Property..(2), PortF..(2), 
 23416 ;;		 -> PortC..(2), PortD..(2), PortE..(2), PortB..(2), 
 23417 ;;		 -> PortA..(2), PortG..(2), PortG(10), PortA(10), 
 23418 ;;		 -> PortB(10), PortE(10), PortD(10), PortG_Property(2), 
 23419 ;;		 -> PortF_Property(2), PortE_Property(2), PortD_Property(2), PortC_Property(2), 
 23420 ;;		 -> PortB_Property(2), PortA_Property(2), PortC(10), PortF(10), 
 23421 ;;		 -> NULL(0), 
 23422 ;;  pMax            1    2[COMRAM] unsigned char 
 23423 ;;  pChunk          1    3[COMRAM] unsigned char 
 23424 ;;  pChunkSize      1    4[COMRAM] unsigned char 
 23425 ;; Auto vars:     Size  Location     Type
 23426 ;;  Byte_GetZone    1    8[COMRAM] unsigned char 
 23427 ;;  Byte_GetZone    1    7[COMRAM] unsigned char 
 23428 ;;  Byte_GetZone    1    6[COMRAM] unsigned char 
 23429 ;; Return value:  Size  Location     Type
 23430 ;;                  1    wreg      unsigned char 
 23431 ;; Registers used:
 23432 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 23433 ;; Tracked objects:
 23434 ;;		On entry : 0/0
 23435 ;;		On exit  : 0/0
 23436 ;;		Unchanged: 0/0
 23437 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23438 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23439 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23440 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23441 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23442 ;;Total ram usage:        9 bytes
 23443 ;; Hardware stack levels used:    1
 23444 ;; This function calls:
 23445 ;;		Nothing
 23446 ;; This function is called by:
 23447 ;;		i2_Byte_GetPair
 23448 ;; This function uses a non-reentrant model
 23449 ;;
 23450                           
 23451                           	psect	text134
 23452  0136F2                     __ptext134:
 23453                           	opt stack 0
 23454  0136F2                     i2_Byte_GetZone:
 23455                           	opt stack 14
 23456                           
 23457                           ;Types.c: 66: UINT8 Output = pInput->mBits;
 23458                           
 23459                           ;incstack = 0
 23460  0136F2  C001  FFF6         	movff	i2Byte_GetZone@pInput,tblptrl
 23461  0136F6  C002  FFF7         	movff	i2Byte_GetZone@pInput+1,tblptrh
 23462  0136FA  0E00               	movlw	low (__mediumconst shr (0+16))
 23463  0136FC  6EF8               	movwf	tblptru,c
 23464  0136FE  0E0F               	movlw	(high __ramtop+-1)
 23465  013700  64F7               	cpfsgt	tblptrh,c
 23466  013702  D003               	bra	i2u355_47
 23467  013704  0008               	tblrd		*
 23468  013706  50F5               	movf	tablat,w,c
 23469  013708  D005               	bra	i2u355_40
 23470  01370A                     i2u355_47:
 23471  01370A  CFF6 FFE9          	movff	tblptrl,fsr0l
 23472  01370E  CFF7 FFEA          	movff	tblptrh,fsr0h
 23473  013712  50EF               	movf	indf0,w,c
 23474  013714                     i2u355_40:
 23475  013714  6E09               	movwf	i2Byte_GetZone@Output,c
 23476                           
 23477                           ;Types.c: 67: UINT8 MASK = MASKS[pChunkSize];
 23478  013716  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23479  013718  0D01               	mullw	1
 23480  01371A  0EC1               	movlw	low _MASKS
 23481  01371C  24F3               	addwf	prodl,w,c
 23482  01371E  6EF6               	movwf	tblptrl,c
 23483  013720  0EFD               	movlw	high _MASKS
 23484  013722  20F4               	addwfc	prodh,w,c
 23485  013724  6EF7               	movwf	tblptrh,c
 23486  013726                     	if	1	;There are 3 active tblptr bytes
 23487  013726  6AF8               	clrf	tblptru,c
 23488  013728  0E00               	movlw	low (__mediumconst shr (0+16))
 23489  01372A  22F8               	addwfc	tblptru,f,c
 23490  01372C                     	endif
 23491  01372C  0008               	tblrd		*
 23492  01372E  CFF5 F007          	movff	tablat,i2Byte_GetZone@MASK
 23493                           
 23494                           ;Types.c: 68: UINT8 Offset = 0;
 23495  013732  0E00               	movlw	0
 23496  013734  6E08               	movwf	i2Byte_GetZone@Offset,c
 23497                           
 23498                           ;Types.c: 70: while (pChunk >= pMax)
 23499  013736  D003               	goto	i2l732
 23500  013738                     
 23501                           ;Types.c: 71: {
 23502                           ;Types.c: 72: pChunk -= pMax;
 23503  013738  5003               	movf	i2Byte_GetZone@pMax,w,c
 23504  01373A  5E04               	subwf	i2Byte_GetZone@pChunk,f,c
 23505                           
 23506                           ;Types.c: 73: Offset += 1;
 23507  01373C  2A08               	incf	i2Byte_GetZone@Offset,f,c
 23508  01373E                     i2l732:
 23509  01373E  5003               	movf	i2Byte_GetZone@pMax,w,c
 23510  013740  5C04               	subwf	i2Byte_GetZone@pChunk,w,c
 23511  013742  B0D8               	btfsc	status,0,c
 23512  013744  D7F9               	goto	i2l733
 23513                           
 23514                           ;Types.c: 74: }
 23515                           ;Types.c: 75: pChunk *= pChunkSize;
 23516  013746  5005               	movf	i2Byte_GetZone@pChunkSize,w,c
 23517  013748  0204               	mulwf	i2Byte_GetZone@pChunk,c
 23518  01374A  50F3               	movf	prodl,w,c
 23519  01374C  6E04               	movwf	i2Byte_GetZone@pChunk,c
 23520                           
 23521                           ;Types.c: 76: pChunk += Offset;
 23522  01374E  5008               	movf	i2Byte_GetZone@Offset,w,c
 23523  013750  2604               	addwf	i2Byte_GetZone@pChunk,f,c
 23524                           
 23525                           ;Types.c: 78: Output >>= pChunk;
 23526  013752  2804               	incf	i2Byte_GetZone@pChunk,w,c
 23527  013754  6E06               	movwf	??i2_Byte_GetZone& (0+255),c
 23528  013756  D002               	goto	i2u357_40
 23529  013758                     i2u357_45:
 23530  013758  90D8               	bcf	status,0,c
 23531  01375A  3209               	rrcf	i2Byte_GetZone@Output,f,c
 23532  01375C                     i2u357_40:
 23533  01375C  2E06               	decfsz	??i2_Byte_GetZone& (0+255),f,c
 23534  01375E  D7FC               	goto	i2u357_45
 23535                           
 23536                           ;Types.c: 79: Output &= MASK;
 23537  013760  5007               	movf	i2Byte_GetZone@MASK,w,c
 23538  013762  1609               	andwf	i2Byte_GetZone@Output,f,c
 23539                           
 23540                           ;Types.c: 80: return Output;
 23541  013764  5009               	movf	i2Byte_GetZone@Output,w,c
 23542  013766  0012               	return	
 23543  013768                     __end_ofi2_Byte_GetZone:
 23544                           	opt stack 0
 23545                           tosu	equ	0xFFF
 23546                           tosh	equ	0xFFE
 23547                           tosl	equ	0xFFD
 23548                           pclatu	equ	0xFFB
 23549                           pclath	equ	0xFFA
 23550                           tblptru	equ	0xFF8
 23551                           tblptrh	equ	0xFF7
 23552                           tblptrl	equ	0xFF6
 23553                           tablat	equ	0xFF5
 23554                           prodh	equ	0xFF4
 23555                           prodl	equ	0xFF3
 23556                           intcon	equ	0xFF2
 23557                           indf0	equ	0xFEF
 23558                           postinc0	equ	0xFEE
 23559                           fsr0h	equ	0xFEA
 23560                           fsr0l	equ	0xFE9
 23561                           wreg	equ	0xFE8
 23562                           indf1	equ	0xFE7
 23563                           postdec1	equ	0xFE5
 23564                           fsr1h	equ	0xFE2
 23565                           fsr1l	equ	0xFE1
 23566                           indf2	equ	0xFDF
 23567                           postinc2	equ	0xFDE
 23568                           postdec2	equ	0xFDD
 23569                           plusw2	equ	0xFDB
 23570                           fsr2h	equ	0xFDA
 23571                           fsr2l	equ	0xFD9
 23572                           status	equ	0xFD8
 23573                           
 23574 ;; *************** function i2_Byte_SetBit *****************
 23575 ;; Defined at:
 23576 ;;		line 32 in file "Library/Types.c"
 23577 ;; Parameters:    Size  Location     Type
 23578 ;;  pInput          2    0[COMRAM] PTR struct Byte
 23579 ;;		 -> SSP2CON2(1), SSP1CON2(1), SSP2CON1(1), SSP2STAT(1), 
 23580 ;;		 -> SSP1CON1(1), SSP1STAT(1), TRISG(1), TRISF(1), 
 23581 ;;		 -> TRISE(1), TRISD(1), TRISC(1), TRISB(1), 
 23582 ;;		 -> TRISA(1), PORTG(1), PORTF(1), PORTE(1), 
 23583 ;;		 -> PORTD(1), PORTC(1), PORTB(1), PORTA(1), 
 23584 ;;		 -> NULL(0), 
 23585 ;;  pBit            1    2[COMRAM] unsigned char 
 23586 ;;  pValue          1    3[COMRAM] unsigned char 
 23587 ;; Auto vars:     Size  Location     Type
 23588 ;;		None
 23589 ;; Return value:  Size  Location     Type
 23590 ;;                  1    wreg      void 
 23591 ;; Registers used:
 23592 ;;		wreg, fsr2l, fsr2h, status,2, status,0
 23593 ;; Tracked objects:
 23594 ;;		On entry : 0/0
 23595 ;;		On exit  : 0/0
 23596 ;;		Unchanged: 0/0
 23597 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23598 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23599 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23600 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23601 ;;      Totals:         7       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23602 ;;Total ram usage:        7 bytes
 23603 ;; Hardware stack levels used:    1
 23604 ;; This function calls:
 23605 ;;		Nothing
 23606 ;; This function is called by:
 23607 ;;		i2_Port_SetPin
 23608 ;; This function uses a non-reentrant model
 23609 ;;
 23610                           
 23611                           	psect	text135
 23612  01406E                     __ptext135:
 23613                           	opt stack 0
 23614  01406E                     i2_Byte_SetBit:
 23615                           	opt stack 16
 23616                           
 23617                           ;Types.c: 34: pValue &= 1;
 23618                           
 23619                           ;incstack = 0
 23620  01406E  0E01               	movlw	1
 23621  014070  1604               	andwf	i2Byte_SetBit@pValue,f,c
 23622                           
 23623                           ;Types.c: 35: pInput->mBits &= ~(1 << pBit);
 23624  014072  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23625  014076  0E01               	movlw	1
 23626  014078  6E06               	movwf	(??i2_Byte_SetBit+1)& (0+255),c
 23627  01407A  2A05               	incf	??i2_Byte_SetBit,f,c
 23628  01407C  D002               	goto	i2u408_44
 23629  01407E                     i2u408_45:
 23630  01407E  90D8               	bcf	status,0,c
 23631  014080  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23632  014082                     i2u408_44:
 23633  014082  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23634  014084  D7FC               	goto	i2u408_45
 23635  014086  5006               	movf	??i2_Byte_SetBit+1,w,c
 23636  014088  0AFF               	xorlw	255
 23637  01408A  6E07               	movwf	(??i2_Byte_SetBit+2)& (0+255),c
 23638  01408C  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23639  014090  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23640  014094  5007               	movf	??i2_Byte_SetBit+2,w,c
 23641  014096  16DF               	andwf	indf2,f,c
 23642                           
 23643                           ;Types.c: 36: pInput->mBits |= pValue << pBit;
 23644  014098  C003  F005         	movff	i2Byte_SetBit@pBit,??i2_Byte_SetBit
 23645  01409C  C004  F006         	movff	i2Byte_SetBit@pValue,??i2_Byte_SetBit+1
 23646  0140A0  2A05               	incf	??i2_Byte_SetBit,f,c
 23647  0140A2  D002               	goto	i2u409_44
 23648  0140A4                     i2u409_45:
 23649  0140A4  90D8               	bcf	status,0,c
 23650  0140A6  3606               	rlcf	??i2_Byte_SetBit+1,f,c
 23651  0140A8                     i2u409_44:
 23652  0140A8  2E05               	decfsz	??i2_Byte_SetBit,f,c
 23653  0140AA  D7FC               	goto	i2u409_45
 23654  0140AC  C001  FFD9         	movff	i2Byte_SetBit@pInput,fsr2l
 23655  0140B0  C002  FFDA         	movff	i2Byte_SetBit@pInput+1,fsr2h
 23656  0140B4  5006               	movf	??i2_Byte_SetBit+1,w,c
 23657  0140B6  12DF               	iorwf	indf2,f,c
 23658  0140B8  0012               	return		;funcret
 23659  0140BA                     __end_ofi2_Byte_SetBit:
 23660                           	opt stack 0
 23661                           tosu	equ	0xFFF
 23662                           tosh	equ	0xFFE
 23663                           tosl	equ	0xFFD
 23664                           pclatu	equ	0xFFB
 23665                           pclath	equ	0xFFA
 23666                           tblptru	equ	0xFF8
 23667                           tblptrh	equ	0xFF7
 23668                           tblptrl	equ	0xFF6
 23669                           tablat	equ	0xFF5
 23670                           prodh	equ	0xFF4
 23671                           prodl	equ	0xFF3
 23672                           intcon	equ	0xFF2
 23673                           indf0	equ	0xFEF
 23674                           postinc0	equ	0xFEE
 23675                           fsr0h	equ	0xFEA
 23676                           fsr0l	equ	0xFE9
 23677                           wreg	equ	0xFE8
 23678                           indf1	equ	0xFE7
 23679                           postdec1	equ	0xFE5
 23680                           fsr1h	equ	0xFE2
 23681                           fsr1l	equ	0xFE1
 23682                           indf2	equ	0xFDF
 23683                           postinc2	equ	0xFDE
 23684                           postdec2	equ	0xFDD
 23685                           plusw2	equ	0xFDB
 23686                           fsr2h	equ	0xFDA
 23687                           fsr2l	equ	0xFD9
 23688                           status	equ	0xFD8
 23689                           
 23690 ;; *************** function i2_MXK_SwitchTo *****************
 23691 ;; Defined at:
 23692 ;;		line 105 in file "Library/MXK.c"
 23693 ;; Parameters:    Size  Location     Type
 23694 ;;  pModule         1    wreg     enum E6927
 23695 ;; Auto vars:     Size  Location     Type
 23696 ;;  pModule         1    7[COMRAM] enum E6927
 23697 ;;  MXK_SwitchTo    1    6[COMRAM] unsigned char 
 23698 ;; Return value:  Size  Location     Type
 23699 ;;                  1    wreg      unsigned char 
 23700 ;; Registers used:
 23701 ;;		wreg, status,2, status,0, cstack
 23702 ;; Tracked objects:
 23703 ;;		On entry : 0/0
 23704 ;;		On exit  : 0/0
 23705 ;;		Unchanged: 0/0
 23706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23708 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23710 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23711 ;;Total ram usage:        2 bytes
 23712 ;; Hardware stack levels used:    1
 23713 ;; Hardware stack levels required when called:    1
 23714 ;; This function calls:
 23715 ;;		i2_delay_us
 23716 ;; This function is called by:
 23717 ;;		i2_Motor_Step
 23718 ;; This function uses a non-reentrant model
 23719 ;;
 23720                           
 23721                           	psect	text136
 23722  0144D2                     __ptext136:
 23723                           	opt stack 0
 23724  0144D2                     i2_MXK_SwitchTo:
 23725                           	opt stack 16
 23726                           
 23727                           ;incstack = 0
 23728                           ;i2MXK_SwitchTo@pModule stored from wreg
 23729  0144D2  6E08               	movwf	i2MXK_SwitchTo@pModule,c
 23730                           
 23731                           ;MXK.c: 107: UINT8 CUR = 0xF & PORTG;
 23732  0144D4  5086               	movf	3974,w,c	;volatile
 23733  0144D6  0B0F               	andlw	15
 23734  0144D8  6E07               	movwf	i2MXK_SwitchTo@CUR,c
 23735                           
 23736                           ;MXK.c: 109: if (Bus_State == eMXK_Busy)
 23737  0144DA  504B               	movf	_Bus_State,w,c
 23738  0144DC  A4D8               	btfss	status,2,c
 23739  0144DE  D002               	goto	i2l1730
 23740                           
 23741                           ;MXK.c: 110: return 0;
 23742  0144E0  0E00               	movlw	0
 23743  0144E2  0012               	return	
 23744  0144E4                     i2l1730:
 23745                           
 23746                           ;MXK.c: 112: Bus_State = eMXK_Busy;
 23747  0144E4  0E00               	movlw	0
 23748  0144E6  6E4B               	movwf	_Bus_State,c
 23749                           
 23750                           ;MXK.c: 114: if (CUR != pModule)
 23751  0144E8  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23752  0144EA  1807               	xorwf	i2MXK_SwitchTo@CUR,w,c
 23753  0144EC  B4D8               	btfsc	status,2,c
 23754  0144EE  D00A               	goto	i2l1732
 23755                           
 23756                           ;MXK.c: 115: {
 23757                           ;MXK.c: 116: PORTG &= ~(0xF);
 23758  0144F0  0EF0               	movlw	240
 23759  0144F2  1686               	andwf	3974,f,c	;volatile
 23760                           
 23761                           ;MXK.c: 117: PORTG |= pModule;
 23762  0144F4  5008               	movf	i2MXK_SwitchTo@pModule,w,c
 23763  0144F6  1286               	iorwf	3974,f,c	;volatile
 23764                           
 23765                           ;MXK.c: 120: delay_us(10);
 23766  0144F8  0E00               	movlw	0
 23767  0144FA  6E02               	movwf	i2delay_us@us+1,c
 23768  0144FC  0E0A               	movlw	10
 23769  0144FE  6E01               	movwf	i2delay_us@us,c
 23770  014500  EC96  F0A1         	call	i2_delay_us	;wreg free
 23771  014504                     i2l1732:
 23772                           
 23773                           ;MXK.c: 121: }
 23774                           ;MXK.c: 122: return 1;
 23775  014504  0E01               	movlw	1
 23776  014506  0012               	return	
 23777  014508                     __end_ofi2_MXK_SwitchTo:
 23778                           	opt stack 0
 23779                           tosu	equ	0xFFF
 23780                           tosh	equ	0xFFE
 23781                           tosl	equ	0xFFD
 23782                           pclatu	equ	0xFFB
 23783                           pclath	equ	0xFFA
 23784                           tblptru	equ	0xFF8
 23785                           tblptrh	equ	0xFF7
 23786                           tblptrl	equ	0xFF6
 23787                           tablat	equ	0xFF5
 23788                           prodh	equ	0xFF4
 23789                           prodl	equ	0xFF3
 23790                           intcon	equ	0xFF2
 23791                           indf0	equ	0xFEF
 23792                           postinc0	equ	0xFEE
 23793                           fsr0h	equ	0xFEA
 23794                           fsr0l	equ	0xFE9
 23795                           wreg	equ	0xFE8
 23796                           indf1	equ	0xFE7
 23797                           postdec1	equ	0xFE5
 23798                           fsr1h	equ	0xFE2
 23799                           fsr1l	equ	0xFE1
 23800                           indf2	equ	0xFDF
 23801                           postinc2	equ	0xFDE
 23802                           postdec2	equ	0xFDD
 23803                           plusw2	equ	0xFDB
 23804                           fsr2h	equ	0xFDA
 23805                           fsr2l	equ	0xFD9
 23806                           status	equ	0xFD8
 23807                           
 23808 ;; *************** function i2_delay_us *****************
 23809 ;; Defined at:
 23810 ;;		line 255 in file "Library/Types.c"
 23811 ;; Parameters:    Size  Location     Type
 23812 ;;  us              2    0[COMRAM] unsigned short 
 23813 ;; Auto vars:     Size  Location     Type
 23814 ;;  delay_us        4    2[COMRAM] unsigned long 
 23815 ;; Return value:  Size  Location     Type
 23816 ;;                  1    wreg      void 
 23817 ;; Registers used:
 23818 ;;		wreg, status,2, status,0
 23819 ;; Tracked objects:
 23820 ;;		On entry : 0/0
 23821 ;;		On exit  : 0/0
 23822 ;;		Unchanged: 0/0
 23823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23824 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23825 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23826 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23827 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23828 ;;Total ram usage:        6 bytes
 23829 ;; Hardware stack levels used:    1
 23830 ;; This function calls:
 23831 ;;		Nothing
 23832 ;; This function is called by:
 23833 ;;		i2_MXK_SwitchTo
 23834 ;; This function uses a non-reentrant model
 23835 ;;
 23836                           
 23837                           	psect	text137
 23838  01432C                     __ptext137:
 23839                           	opt stack 0
 23840  01432C                     i2_delay_us:
 23841                           	opt stack 16
 23842                           
 23843                           ;Types.c: 256: unsigned long u;
 23844                           ;Types.c: 257: while (us--) {
 23845                           
 23846                           ;incstack = 0
 23847  01432C  D016               	goto	i2u412_40
 23848  01432E                     i2l7667:
 23849                           
 23850                           ;Types.c: 259: for (u = 0; u < ((((48*1000000L) / 4000UL) / 10UL)/1000UL); u++) {
 23851  01432E  0E00               	movlw	0
 23852  014330  6E03               	movwf	i2delay_us@u,c
 23853  014332  0E00               	movlw	0
 23854  014334  6E04               	movwf	i2delay_us@u+1,c
 23855  014336  0E00               	movlw	0
 23856  014338  6E05               	movwf	i2delay_us@u+2,c
 23857  01433A  0E00               	movlw	0
 23858  01433C  6E06               	movwf	i2delay_us@u+3,c
 23859  01433E                     i2l7669:
 23860  01433E  5003               	movf	i2delay_us@u,w,c
 23861  014340  1004               	iorwf	i2delay_us@u+1,w,c
 23862  014342  1005               	iorwf	i2delay_us@u+2,w,c
 23863  014344  1006               	iorwf	i2delay_us@u+3,w,c
 23864  014346  A4D8               	btfss	status,2,c
 23865  014348  D008               	goto	i2u412_40
 23866  01434A  F000               	nop		; ;# 
 23867  01434C  0E01               	movlw	1
 23868  01434E  2603               	addwf	i2delay_us@u,f,c
 23869  014350  0E00               	movlw	0
 23870  014352  2204               	addwfc	i2delay_us@u+1,f,c
 23871  014354  2205               	addwfc	i2delay_us@u+2,f,c
 23872  014356  2206               	addwfc	i2delay_us@u+3,f,c
 23873  014358  D7F2               	goto	i2l7669
 23874  01435A                     i2u412_40:
 23875  01435A  0601               	decf	i2delay_us@us,f,c
 23876  01435C  A0D8               	btfss	status,0,c
 23877  01435E  0602               	decf	i2delay_us@us+1,f,c
 23878  014360  2801               	incf	i2delay_us@us,w,c
 23879  014362  E1E5               	bnz	i2l7667
 23880  014364  2802               	incf	i2delay_us@us+1,w,c
 23881  014366  B4D8               	btfsc	status,2,c
 23882  014368  0012               	return	
 23883  01436A  D7E1               	goto	i2l832
 23884  01436C                     __end_ofi2_delay_us:
 23885                           	opt stack 0
 23886                           tosu	equ	0xFFF
 23887                           tosh	equ	0xFFE
 23888                           tosl	equ	0xFFD
 23889                           pclatu	equ	0xFFB
 23890                           pclath	equ	0xFFA
 23891                           tblptru	equ	0xFF8
 23892                           tblptrh	equ	0xFF7
 23893                           tblptrl	equ	0xFF6
 23894                           tablat	equ	0xFF5
 23895                           prodh	equ	0xFF4
 23896                           prodl	equ	0xFF3
 23897                           intcon	equ	0xFF2
 23898                           indf0	equ	0xFEF
 23899                           postinc0	equ	0xFEE
 23900                           fsr0h	equ	0xFEA
 23901                           fsr0l	equ	0xFE9
 23902                           wreg	equ	0xFE8
 23903                           indf1	equ	0xFE7
 23904                           postdec1	equ	0xFE5
 23905                           fsr1h	equ	0xFE2
 23906                           fsr1l	equ	0xFE1
 23907                           indf2	equ	0xFDF
 23908                           postinc2	equ	0xFDE
 23909                           postdec2	equ	0xFDD
 23910                           plusw2	equ	0xFDB
 23911                           fsr2h	equ	0xFDA
 23912                           fsr2l	equ	0xFD9
 23913                           status	equ	0xFD8
 23914                           
 23915 ;; *************** function i2_MXK_Release *****************
 23916 ;; Defined at:
 23917 ;;		line 130 in file "Library/MXK.c"
 23918 ;; Parameters:    Size  Location     Type
 23919 ;;		None
 23920 ;; Auto vars:     Size  Location     Type
 23921 ;;		None
 23922 ;; Return value:  Size  Location     Type
 23923 ;;                  1    wreg      unsigned char 
 23924 ;; Registers used:
 23925 ;;		wreg, status,2, status,0
 23926 ;; Tracked objects:
 23927 ;;		On entry : 0/0
 23928 ;;		On exit  : 0/0
 23929 ;;		Unchanged: 0/0
 23930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 23931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 23935 ;;Total ram usage:        0 bytes
 23936 ;; Hardware stack levels used:    1
 23937 ;; This function calls:
 23938 ;;		Nothing
 23939 ;; This function is called by:
 23940 ;;		i2_Motor_Step
 23941 ;; This function uses a non-reentrant model
 23942 ;;
 23943                           
 23944                           	psect	text138
 23945  014A04                     __ptext138:
 23946                           	opt stack 0
 23947  014A04                     i2_MXK_Release:
 23948                           	opt stack 17
 23949                           
 23950                           ;MXK.c: 132: Bus_State = eMXK_Idle;
 23951                           
 23952                           ;incstack = 0
 23953  014A04  0E01               	movlw	1
 23954  014A06  6E4B               	movwf	_Bus_State,c
 23955                           
 23956                           ;MXK.c: 135: return 1;
 23957                           ;	Return value of i2_MXK_Release is never used
 23958  014A08  0012               	return	
 23959  014A0A                     __end_ofi2_MXK_Release:
 23960                           	opt stack 0
 23961                           tosu	equ	0xFFF
 23962                           tosh	equ	0xFFE
 23963                           tosl	equ	0xFFD
 23964                           pclatu	equ	0xFFB
 23965                           pclath	equ	0xFFA
 23966                           tblptru	equ	0xFF8
 23967                           tblptrh	equ	0xFF7
 23968                           tblptrl	equ	0xFF6
 23969                           tablat	equ	0xFF5
 23970                           prodh	equ	0xFF4
 23971                           prodl	equ	0xFF3
 23972                           intcon	equ	0xFF2
 23973                           indf0	equ	0xFEF
 23974                           postinc0	equ	0xFEE
 23975                           fsr0h	equ	0xFEA
 23976                           fsr0l	equ	0xFE9
 23977                           wreg	equ	0xFE8
 23978                           indf1	equ	0xFE7
 23979                           postdec1	equ	0xFE5
 23980                           fsr1h	equ	0xFE2
 23981                           fsr1l	equ	0xFE1
 23982                           indf2	equ	0xFDF
 23983                           postinc2	equ	0xFDE
 23984                           postdec2	equ	0xFDD
 23985                           plusw2	equ	0xFDB
 23986                           fsr2h	equ	0xFDA
 23987                           fsr2l	equ	0xFD9
 23988                           status	equ	0xFD8
 23989                           
 23990 ;; *************** function i2_MXK_Queue *****************
 23991 ;; Defined at:
 23992 ;;		line 144 in file "Library/MXK.c"
 23993 ;; Parameters:    Size  Location     Type
 23994 ;;  pCallback       3    0[COMRAM] PTR FTN()void 
 23995 ;;		 -> Absolute function(1), Motor_Step(1), 
 23996 ;; Auto vars:     Size  Location     Type
 23997 ;;		None
 23998 ;; Return value:  Size  Location     Type
 23999 ;;                  1    wreg      void 
 24000 ;; Registers used:
 24001 ;;		wreg, status,2, status,0
 24002 ;; Tracked objects:
 24003 ;;		On entry : 0/0
 24004 ;;		On exit  : 0/0
 24005 ;;		Unchanged: 0/0
 24006 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 24007 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24008 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24009 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24010 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 24011 ;;Total ram usage:        3 bytes
 24012 ;; Hardware stack levels used:    1
 24013 ;; This function calls:
 24014 ;;		Nothing
 24015 ;; This function is called by:
 24016 ;;		i2_Motor_Step
 24017 ;; This function uses a non-reentrant model
 24018 ;;
 24019                           
 24020                           	psect	text139
 24021  014992                     __ptext139:
 24022                           	opt stack 0
 24023  014992                     i2_MXK_Queue:
 24024                           	opt stack 17
 24025                           
 24026                           ;MXK.c: 146: lQueue = pCallback;
 24027                           
 24028                           ;incstack = 0
 24029  014992  C001  F06F         	movff	i2MXK_Queue@pCallback,_lQueue	;volatile
 24030  014996  C002  F070         	movff	i2MXK_Queue@pCallback+1,_lQueue+1	;volatile
 24031  01499A  C003  F071         	movff	i2MXK_Queue@pCallback+2,_lQueue+2	;volatile
 24032  01499E  0012               	return		;funcret
 24033  0149A0                     __end_ofi2_MXK_Queue:
 24034                           	opt stack 0
 24035                           tosu	equ	0xFFF
 24036                           tosh	equ	0xFFE
 24037                           tosl	equ	0xFFD
 24038                           pclatu	equ	0xFFB
 24039                           pclath	equ	0xFFA
 24040                           tblptru	equ	0xFF8
 24041                           tblptrh	equ	0xFF7
 24042                           tblptrl	equ	0xFF6
 24043                           tablat	equ	0xFF5
 24044                           prodh	equ	0xFF4
 24045                           prodl	equ	0xFF3
 24046                           intcon	equ	0xFF2
 24047                           indf0	equ	0xFEF
 24048                           postinc0	equ	0xFEE
 24049                           fsr0h	equ	0xFEA
 24050                           fsr0l	equ	0xFE9
 24051                           wreg	equ	0xFE8
 24052                           indf1	equ	0xFE7
 24053                           postdec1	equ	0xFE5
 24054                           fsr1h	equ	0xFE2
 24055                           fsr1l	equ	0xFE1
 24056                           indf2	equ	0xFDF
 24057                           postinc2	equ	0xFDE
 24058                           postdec2	equ	0xFDD
 24059                           plusw2	equ	0xFDB
 24060                           fsr2h	equ	0xFDA
 24061                           fsr2l	equ	0xFD9
 24062                           status	equ	0xFD8
 24063                           tosu	equ	0xFFF
 24064                           tosh	equ	0xFFE
 24065                           tosl	equ	0xFFD
 24066                           pclatu	equ	0xFFB
 24067                           pclath	equ	0xFFA
 24068                           tblptru	equ	0xFF8
 24069                           tblptrh	equ	0xFF7
 24070                           tblptrl	equ	0xFF6
 24071                           tablat	equ	0xFF5
 24072                           prodh	equ	0xFF4
 24073                           prodl	equ	0xFF3
 24074                           intcon	equ	0xFF2
 24075                           indf0	equ	0xFEF
 24076                           postinc0	equ	0xFEE
 24077                           fsr0h	equ	0xFEA
 24078                           fsr0l	equ	0xFE9
 24079                           wreg	equ	0xFE8
 24080                           indf1	equ	0xFE7
 24081                           postdec1	equ	0xFE5
 24082                           fsr1h	equ	0xFE2
 24083                           fsr1l	equ	0xFE1
 24084                           indf2	equ	0xFDF
 24085                           postinc2	equ	0xFDE
 24086                           postdec2	equ	0xFDD
 24087                           plusw2	equ	0xFDB
 24088                           fsr2h	equ	0xFDA
 24089                           fsr2l	equ	0xFD9
 24090                           status	equ	0xFD8
 24091                           
 24092                           	psect	text140
 24093  000000                     __ptext140:
 24094                           	opt stack 0
 24095                           tosu	equ	0xFFF
 24096                           tosh	equ	0xFFE
 24097                           tosl	equ	0xFFD
 24098                           pclatu	equ	0xFFB
 24099                           pclath	equ	0xFFA
 24100                           tblptru	equ	0xFF8
 24101                           tblptrh	equ	0xFF7
 24102                           tblptrl	equ	0xFF6
 24103                           tablat	equ	0xFF5
 24104                           prodh	equ	0xFF4
 24105                           prodl	equ	0xFF3
 24106                           intcon	equ	0xFF2
 24107                           indf0	equ	0xFEF
 24108                           postinc0	equ	0xFEE
 24109                           fsr0h	equ	0xFEA
 24110                           fsr0l	equ	0xFE9
 24111                           wreg	equ	0xFE8
 24112                           indf1	equ	0xFE7
 24113                           postdec1	equ	0xFE5
 24114                           fsr1h	equ	0xFE2
 24115                           fsr1l	equ	0xFE1
 24116                           indf2	equ	0xFDF
 24117                           postinc2	equ	0xFDE
 24118                           postdec2	equ	0xFDD
 24119                           plusw2	equ	0xFDB
 24120                           fsr2h	equ	0xFDA
 24121                           fsr2l	equ	0xFD9
 24122                           status	equ	0xFD8
 24123                           
 24124                           	psect	rparam
 24125  0000                     tosu	equ	0xFFF
 24126                           tosh	equ	0xFFE
 24127                           tosl	equ	0xFFD
 24128                           pclatu	equ	0xFFB
 24129                           pclath	equ	0xFFA
 24130                           tblptru	equ	0xFF8
 24131                           tblptrh	equ	0xFF7
 24132                           tblptrl	equ	0xFF6
 24133                           tablat	equ	0xFF5
 24134                           prodh	equ	0xFF4
 24135                           prodl	equ	0xFF3
 24136                           intcon	equ	0xFF2
 24137                           indf0	equ	0xFEF
 24138                           postinc0	equ	0xFEE
 24139                           fsr0h	equ	0xFEA
 24140                           fsr0l	equ	0xFE9
 24141                           wreg	equ	0xFE8
 24142                           indf1	equ	0xFE7
 24143                           postdec1	equ	0xFE5
 24144                           fsr1h	equ	0xFE2
 24145                           fsr1l	equ	0xFE1
 24146                           indf2	equ	0xFDF
 24147                           postinc2	equ	0xFDE
 24148                           postdec2	equ	0xFDD
 24149                           plusw2	equ	0xFDB
 24150                           fsr2h	equ	0xFDA
 24151                           fsr2l	equ	0xFD9
 24152                           status	equ	0xFD8
 24153                           
 24154                           	psect	temp
 24155  000051                     btemp:
 24156                           	opt stack 0
 24157  000051                     	ds	1
 24158  0000                     int$flags	set	btemp
 24159  0000                     wtemp6	set	btemp+1
 24160                           tosu	equ	0xFFF
 24161                           tosh	equ	0xFFE
 24162                           tosl	equ	0xFFD
 24163                           pclatu	equ	0xFFB
 24164                           pclath	equ	0xFFA
 24165                           tblptru	equ	0xFF8
 24166                           tblptrh	equ	0xFF7
 24167                           tblptrl	equ	0xFF6
 24168                           tablat	equ	0xFF5
 24169                           prodh	equ	0xFF4
 24170                           prodl	equ	0xFF3
 24171                           intcon	equ	0xFF2
 24172                           indf0	equ	0xFEF
 24173                           postinc0	equ	0xFEE
 24174                           fsr0h	equ	0xFEA
 24175                           fsr0l	equ	0xFE9
 24176                           wreg	equ	0xFE8
 24177                           indf1	equ	0xFE7
 24178                           postdec1	equ	0xFE5
 24179                           fsr1h	equ	0xFE2
 24180                           fsr1l	equ	0xFE1
 24181                           indf2	equ	0xFDF
 24182                           postinc2	equ	0xFDE
 24183                           postdec2	equ	0xFDD
 24184                           plusw2	equ	0xFDB
 24185                           fsr2h	equ	0xFDA
 24186                           fsr2l	equ	0xFD9
 24187                           status	equ	0xFD8


Data Sizes:
    Strings     63
    Constant    730
    Data        25
    BSS         798
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94     40      80
    BANK0           160     68     160
    BANK1           256    256     256
    BANK2           256    256     256
    BANK3           256      6     227
    BANK4           256      0     170
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           64      0       0

Pointer List with Targets:

    ADC_AN0.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext.mNext	PTR struct ADC size(2) Largest target is 0
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    HMIBoard.mGetState	PTR FTN()unsigned char  size(3) Largest target is 0
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 0
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    I2C1_More$0	const PTR struct I2CT size(2) Largest target is 7
		 -> I2C1T(COMRAM[7]), 

    printf@f	PTR const unsigned char  size(2) Largest target is 46
		 -> STR_4(CODE[14]), STR_3(CODE[3]), STR_2(CODE[46]), STR_1(CODE[3]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__memset	PTR void  size(2) Largest target is 100
		 -> iRScriptStack(BANK4[100]), 

    load_iRScriptStack@loadByte	PTR void [1] size(2) Largest target is 1
		 -> ?_load_iRScriptStack(BANK0[1]), 

    irobot_query_and_update@packetIDs	PTR void [1] size(2) Largest target is 1
		 -> ?_irobot_query_and_update(BANK0[1]), 

    ADC_AN3.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN2.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN1.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_AN0.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    gISR	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    MXK_Queue@pCallback	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    lQueue	volatile PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    DIPSwitch.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    DIPSwitch.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    TestButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    TestButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    lMotor	PTR struct Motor size(2) Largest target is 0
		 -> NULL(NULL[0]), 

    lStepFunction	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), Motor_Step(), 

    I2C2_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C2_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_More	PTR FTN(const PTR struct I2CT,)unsigned char  size(3) Largest target is 1
		 -> Absolute function(), 

    I2C1_Done	PTR FTN()void  size(3) Largest target is 1
		 -> Absolute function(), 

    I2CT_WAddress@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Stop@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Continue@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Next@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsWrite@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_IsRead@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_At@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Put@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Get@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Reset@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitW@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_InitR@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2CT_Init@pInput.mData	PTR unsigned char  size(2) Largest target is 0

    I2C2T.mData	PTR unsigned char  size(2) Largest target is 0

    S11800I2CT$mData	PTR unsigned char  size(2) Largest target is 0

    I2C1T.mData	PTR unsigned char  size(2) Largest target is 0

    ADC_Voltage@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Start@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemB.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Sequence@pItemA.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    ADC_Init@pInput.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    S11482ADC$mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent.mNext	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), NULL(NULL[0]), 

    lCurrent	PTR struct ADC size(2) Largest target is 6
		 -> ADC_AN3(BANK3[5]), ADC_AN2(BANK3[5]), ADC_AN1(BANK3[5]), ADC_AN0(BANK3[5]), 
		 -> NULL(NULL[0]), 

    HMI_SetSegments@pString	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    HMIBoard.mDIP.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDIP.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mDown.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mDown.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mUp.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mUp.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mLeft.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mLeft.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    HMIBoard.mRight.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    HMIBoard.mRight.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Console_MakeField@Column	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    sp__Console_MakeField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    itos@destination	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    itos@Data	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@input	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    reverse@iterator	PTR unsigned char  size(2) Largest target is 58
		 -> HMIBoard..(BANK3[8]), HMIBoard(BANK3[58]), 

    PortProperty_Valid@pInput	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_GetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Word_SetPair@pInput	PTR struct Word size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Byte_SetByte@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_SetQuad@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON1(SFR_1[1]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    Byte_GetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetPair@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), 
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), PORTG(SFR_1[1]), 
		 -> PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), PORTC(SFR_1[1]), 
		 -> PORTB(SFR_1[1]), PORTA(SFR_1[1]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_GetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortA_Property..(CODE[2]), PortB_Property..(CODE[2]), PortC_Property..(CODE[2]), PortD_Property..(CODE[2]), 
		 -> PortE_Property..(CODE[2]), PortF_Property..(CODE[2]), PortG_Property..(CODE[2]), PortF..(BANK3[2]), 
		 -> PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), PortB..(BANK3[2]), 
		 -> PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), PortA(BANK3[10]), 
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortD(BANK0[10]), PortG_Property(CODE[2]), 
		 -> PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), PortC_Property(CODE[2]), 
		 -> PortB_Property(CODE[2]), PortA_Property(CODE[2]), PortC(BANK0[10]), PortF(BANK3[10]), 
		 -> NULL(NULL[0]), 

    Byte_SetZone@pInput	PTR struct Byte size(2) Largest target is 14
		 -> PortF..(BANK3[2]), PortC..(BANK0[2]), PortD..(BANK0[2]), PortE..(BANK0[2]), 
		 -> PortB..(BANK3[2]), PortA..(BANK3[2]), PortG..(BANK3[2]), PortG(BANK3[10]), 
		 -> PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), SSP2CON1(SFR_1[1]), 
		 -> PortD(BANK0[10]), SSP1CON1(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    Byte_GetBit@pInput	PTR struct Byte size(2) Largest target is 480
		 -> Font5x7(CODE[480]), 

    Byte_SetBit@pInput	PTR struct Byte size(2) Largest target is 1
		 -> SSP2CON2(SFR_1[1]), SSP1CON2(SFR_1[1]), SSP2CON1(SFR_1[1]), SSP2STAT(SFR_1[1]), 
		 -> SSP1CON1(SFR_1[1]), SSP1STAT(SFR_1[1]), TRISG(SFR_1[1]), TRISF(SFR_1[1]), 
		 -> TRISE(SFR_1[1]), TRISD(SFR_1[1]), TRISC(SFR_1[1]), TRISB(SFR_1[1]), 
		 -> TRISA(SFR_1[1]), PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), 
		 -> PORTD(SFR_1[1]), PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), 
		 -> NULL(NULL[0]), 

    SPI_Send9@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send9@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send9@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Send@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Send@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Send@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_DCS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DCS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DCS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DCS@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_CS@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_CS@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_CS@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MaxSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MaxSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MaxSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI2(BANK3[11]), 

    SPI_MinSpeed@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_MinSpeed@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_MinSpeed@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_MinSpeed@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), 

    SPI_DisableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_DisableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_DisableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_DisableISR@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI_EnableISR@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_EnableISR@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_EnableISR@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_SetFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_SetFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_ClearFlags@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_ClearFlags@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    sp__SPI_Buffer	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Buffer@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Buffer@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_BF@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_BF@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI_Init@pInput...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI_Init@pInput...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI_Init@pInput	PTR struct SPI size(2) Largest target is 12
		 -> SPI1(BANK3[11]), SPI2(BANK3[11]), 

    SPI1.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI1...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI1...SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI1...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    Port_Get@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Get@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Set@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Set@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_GetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetQuad@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortE(BANK0[10]), PortD(BANK0[10]), 

    Port_SetQuad@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuad@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetQuadType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortD(BANK0[10]), 

    Port_GetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPair@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPair@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_TogglePin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortC(BANK0[10]), 

    Port_GetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_GetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_GetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortB(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), 

    Port_SetPin@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPin@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPin@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortE(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_SetPinType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_SetPinType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_SetPinType@Props	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_Init@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_Init@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPortType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckQuadType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@pInput.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    Port_CheckPairType@pInput.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Port_CheckPairType@pInput	const PTR struct Port size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortC(BANK0[10]), PortF(BANK3[10]), 

    Port_CheckPairType@Props	PTR struct PortProperty size(2) Largest target is 14
		 -> PortG(BANK3[10]), PortA(BANK3[10]), PortB(BANK3[10]), PortE(BANK0[10]), 
		 -> PortD(BANK0[10]), PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), 
		 -> PortD_Property(CODE[2]), PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), 
		 -> PortC(BANK0[10]), PortF(BANK3[10]), NULL(NULL[0]), 

    sp__GetPortLAT	PTR struct Byte size(2) Largest target is 1
		 -> LATG(SFR_1[1]), LATF(SFR_1[1]), LATE(SFR_1[1]), LATD(SFR_1[1]), 
		 -> LATC(SFR_1[1]), LATB(SFR_1[1]), LATA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortTRIS	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortPORT	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    sp__GetPortProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortG.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortG.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortE.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortE.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortD.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortD.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortB.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortB.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortA.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortA.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortC.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortC.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    LCD_DrawField@pField	PTR unsigned short  size(2) Largest target is 70
		 -> Console_MakeField@Fill(BANK4[70]), 

    S509SPI$SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    SPI2.SSPBUF	PTR unsigned char  size(2) Largest target is 1
		 -> SSP2BUF(SFR_1[1]), SSP1BUF(SFR_1[1]), 

    S506$SSPCON1T	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPCON1T	PTR struct Byte size(2) Largest target is 0

    S479$SSPSTATTb	PTR struct . size(2) Largest target is 0

    SPI2...SSPSTATTb	PTR struct . size(2) Largest target is 0

    S479$SSPSTATT	PTR struct Byte size(2) Largest target is 0

    SPI2...SSPSTATT	PTR struct Byte size(2) Largest target is 0

    S139Port$mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mInput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mOutput	PTR struct Byte size(2) Largest target is 1
		 -> PORTG(SFR_1[1]), PORTF(SFR_1[1]), PORTE(SFR_1[1]), PORTD(SFR_1[1]), 
		 -> PORTC(SFR_1[1]), PORTB(SFR_1[1]), PORTA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    PortF.mDirection	PTR struct Byte size(2) Largest target is 1
		 -> TRISG(SFR_1[1]), TRISF(SFR_1[1]), TRISE(SFR_1[1]), TRISD(SFR_1[1]), 
		 -> TRISC(SFR_1[1]), TRISB(SFR_1[1]), TRISA(SFR_1[1]), NULL(NULL[0]), 

    S139Port$mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    PortF.mProperties	PTR struct PortProperty size(2) Largest target is 2
		 -> PortG_Property(CODE[2]), PortF_Property(CODE[2]), PortE_Property(CODE[2]), PortD_Property(CODE[2]), 
		 -> PortC_Property(CODE[2]), PortB_Property(CODE[2]), PortA_Property(CODE[2]), NULL(NULL[0]), 

    Button_Poll@pButton.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Poll@pButton.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Poll@pButton	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 

    S23Button$mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInput.mGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    S23Button$mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pInput.mFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pFunction	PTR FTN(unsigned char ,)void  size(3) Largest target is 1
		 -> Event_TestButton(), Event_DIPSwitch(), Event_NULL(), 

    Button_Init@pGetState	PTR FTN()unsigned char  size(3) Largest target is 1
		 -> MXK_DIPSwitch(), MXK_TestButton(), HMI_DIPSwitch(), HMI_DownSwitch(), 
		 -> HMI_UpSwitch(), HMI_RightSwitch(), HMI_LeftSwitch(), 

    Button_Init@pInitIO	PTR FTN()void  size(3) Largest target is 1
		 -> MXK_InitDIPSwitch(), MXK_InitTestButton(), HMI_InitButtons(), 

    Button_Init@pInput	const PTR struct Button size(2) Largest target is 58
		 -> DIPSwitch(BANK3[10]), TestButton(BANK3[10]), HMIBoard(BANK3[58]), 


Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR_Function in COMRAM

    _Timer0_ISR->i2_Motor_Step
    i2_Motor_Step->i2_Port_SetPin
    i2_Port_SetPin->i2_Word_GetPair
    i2_Word_GetPair->i2_Byte_GetPair
    i2_Byte_GetPair->i2_Byte_GetZone
    i2_MXK_SwitchTo->i2_delay_us

Critical Paths under _main in BANK0

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _irobot_query_and_update->_rx_assign
    _rx_assign->_sort_iRBumpDrop
    _printf->_putch
    _putch->_Console_PrintChar
    _Console_PrintChar->_Console_Tab
    _Console_Tab->___awdiv
    _Console_IncrementCursor->_Console_FormFeed
    _Console_Backspace->_Console_ClearCursor
    _irobot_stop_motion->_irobot_move
    _irobot_song_play->_eusart_putch
    _irobot_rotate->_irobot_move
    _irobot_move_straight->_irobot_move
    _irobot_move->_load_iRScriptStack
    _irobot_led_power_on->_irobot_leds
    _irobot_leds->_load_iRScriptStack
    _irobot_init_song_0->_eusart_putch
    _irobot_init->_eusart_putch
    _MXK_Init->_Port_Init
    _Port_Init->_Port_SetType
    _Port_SetType->_Port_CheckPortType
    _Port_CheckPortType->_Port_CheckQuadType
    _Port_Set->_Word_GetPair
    _LED_Init->_Port_SetPinType
    _LED_Set->_Port_SetPin
    _MXK_Dequeue->_Motor_Step
    _Motor_Step->_Port_SetPin
    _MXK_SwitchTo->_delay_us
    _MXK_BlockSwitchTo->_delay_us
    _Set_Rotation->_LCD_Write
    _LCD_Fill->_Set_Addr_Window
    _Configure_GPIOs->_SPI_Init
    _SPI_MaxSpeed->_Byte_SetQuad
    _LCD_Reset->_LED_Toggle
    _Reset_Low->_Port_SetPin
    _Reset_High->_Port_SetPin
    _HMI_Poll->_Button_Poll
    _Button_Poll->_Event_DIPSwitch
    _MXK_TestButton->_Port_GetPin
    _MXK_DIPSwitch->_Port_GetQuad
    _HMI_UpSwitch->_Port_GetPin
    _HMI_RightSwitch->_Port_GetPin
    _HMI_LeftSwitch->_Port_GetPin
    _HMI_DownSwitch->_Port_GetPin
    _HMI_DIPSwitch->_Port_GetQuad
    _Event_TestButton->_LED_Toggle
    _HMI_SetNumber->_itos
    _itos->___lwmod
    ___lwmod->___lwdiv
    _HMI_SetSegments->_ToSegment
    _Event_DIPSwitch->_LED_Toggle
    _LED_Toggle->_Port_TogglePin
    _Port_TogglePin->_Port_SetPin
    _Port_SetPin->_Word_GetPair
    _SPI_MinSpeed->_Byte_SetQuad
    _SPI_Init->_Port_SetPinType
    _Timer2_Init->___lldiv
    _MXK_InitTestButton->_Port_SetPinType
    _Port_SetPinType->_PortProperty_Valid
    _MXK_InitDIPSwitch->_Port_SetQuadType
    _Port_SetQuadType->_Port_CheckQuadType
    _Word_SetPair->_Byte_SetPair
    _Byte_SetPair->_Byte_SetZone
    _Port_CheckQuadType->_Port_CheckPairType
    _Port_CheckPairType->_PortProperty_Valid
    _PortProperty_Valid->_Word_GetPair
    _Word_GetPair->_Byte_GetPair
    _Byte_GetPair->_Byte_GetZone
    _Byte_SetQuad->_Byte_SetZone
    _Console_Render->_LCD_DrawField
    _LCD_FillRectangle->_Set_Addr_Window
    _LCD_DrawField->_Console_MakeField
    _Set_Addr_Window->_LCD_Write
    _LCD_Word_Write->_LCD_Write
    _LCD_Write->_SPI_Send
    _Console_MakeField->_Byte_GetBit

Critical Paths under _ISR_Function in BANK0

    None.

Critical Paths under _main in BANK1

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update
    _MXK_Init->_Port_Init
    _HMI_Init->_Button_Init

Critical Paths under _ISR_Function in BANK1

    None.

Critical Paths under _main in BANK2

    _update_distance->_irobot_query_and_update
    _update_bump_and_cliff->_irobot_query_and_update
    _update_angle->_irobot_query_and_update

Critical Paths under _ISR_Function in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR_Function in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR_Function in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR_Function in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR_Function in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR_Function in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _ISR_Function in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _ISR_Function in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _ISR_Function in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _ISR_Function in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _ISR_Function in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _ISR_Function in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _ISR_Function in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _ISR_Function in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0 1058339
                                              0 BANK3      6     6      0
                       _Console_Init
                     _Console_Render
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                           _HMI_Init
                     _HMI_LeftSwitch *
                           _HMI_Poll
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                           _LCD_Init
                  _MXK_BlockSwitchTo
                      _MXK_DIPSwitch *
                        _MXK_Dequeue
                           _MXK_Init
                        _MXK_Release
                       _MXK_SwitchTo
                     _MXK_TestButton *
                           _delay_ms
                        _eusart_init
                        _irobot_init
                 _irobot_init_song_0
                _irobot_led_power_on
               _irobot_move_straight
                      _irobot_rotate
                   _irobot_song_play
                 _irobot_stop_motion
                             _printf
                       _update_angle
              _update_bump_and_cliff
                    _update_distance
 ---------------------------------------------------------------------------------
 (1) _update_distance                                      0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (1) _update_bump_and_cliff                                0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (1) _update_angle                                         0     0      0    1737
            _irobot_query_and_update
 ---------------------------------------------------------------------------------
 (2) _irobot_query_and_update                            535   525     10    1737
                                              6 BANK0     23    13     10
                                              0 BANK1    256   256      0
                                              0 BANK2    256   256      0
                       _eusart_getch
                       _eusart_putch
                    _get_packet_size
                          _rx_assign
 ---------------------------------------------------------------------------------
 (3) _rx_assign                                            5     3      2     738
                                              1 BANK0      5     3      2
                    _sort_iRBumpDrop
 ---------------------------------------------------------------------------------
 (4) _sort_iRBumpDrop                                      1     1      0       0
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _get_packet_size                                      1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _eusart_getch                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _printf                                              25    17      8    4971
                                             21 BANK0     16     8      8
                            ___lwdiv
                            ___lwmod
                              _putch
 ---------------------------------------------------------------------------------
 (2) _putch                                                1     1      0    1972
                                             20 BANK0      1     1      0
                  _Console_PrintChar
 ---------------------------------------------------------------------------------
 (3) _Console_PrintChar                                    4     4      0    1941
                                             16 BANK0      4     4      0
                  _Console_Backspace
                   _Console_FormFeed
            _Console_IncrementCursor
                    _Console_NewLine
                _Console_ResetCursor
                        _Console_Tab
 ---------------------------------------------------------------------------------
 (4) _Console_Tab                                          8     8      0    1390
                                              8 BANK0      8     8      0
                _Console_ClearCursor
            _Console_IncrementCursor
                            ___awdiv
 ---------------------------------------------------------------------------------
 (5) ___awdiv                                              8     4      4    1053
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (5) _Console_IncrementCursor                              2     2      0     198
                                              4 BANK0      2     2      0
                   _Console_FormFeed
                    _Console_NewLine
 ---------------------------------------------------------------------------------
 (6) _Console_NewLine                                      2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (6) _Console_FormFeed                                     4     4      0     198
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (4) _Console_ResetCursor                                  0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _Console_Backspace                                    0     0      0       0
                _Console_ClearCursor
 ---------------------------------------------------------------------------------
 (5) _Console_ClearCursor                                  2     2      0       0
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _irobot_stop_motion                                   1     1      0    3206
                                             25 BANK0      1     1      0
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _irobot_song_play                                     1     1      0      62
                                              1 BANK0      1     1      0
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_rotate                                        5     1      4    3975
                                             25 BANK0      5     1      4
                        _irobot_move
 ---------------------------------------------------------------------------------
 (1) _irobot_move_straight                                 2     0      2    3358
                                             25 BANK0      2     0      2
                        _irobot_move
 ---------------------------------------------------------------------------------
 (2) _irobot_move                                          9     5      4    3175
                                             16 BANK0      9     5      4
                       _eusart_putch
                 _load_iRScriptStack
                 _twos_complement_of
 ---------------------------------------------------------------------------------
 (3) _twos_complement_of                                   2     0      2     806
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _irobot_led_power_on                                  1     1      0    1358
                                             20 BANK0      1     1      0
                        _irobot_leds
 ---------------------------------------------------------------------------------
 (2) _irobot_leds                                          4     1      3    1327
                                             16 BANK0      4     1      3
                       _eusart_putch
                 _load_iRScriptStack
 ---------------------------------------------------------------------------------
 (3) _load_iRScriptStack                                  16     6     10     167
                                              0 BANK0     16     6     10
 ---------------------------------------------------------------------------------
 (1) _irobot_init_song_0                                   0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (1) _irobot_init                                          0     0      0      31
                       _eusart_putch
 ---------------------------------------------------------------------------------
 (3) _eusart_putch                                         1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _eusart_init                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_Init                                             0     0      0  362312
                           _LED_Init
                          _Port_Init
                        _Port_SetPin
                    _Port_SetPinType
                   _Port_SetQuadType
                       _Port_SetType
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Port_Init                                            6     3      3  111429
                                             64 BANK0      4     1      3
                                              0 BANK1      2     2      0
                        _GetPortPORT
                  _GetPortProperties
                        _GetPortTRIS
                           _Port_Set
                    _Port_SetPinType
                       _Port_SetType
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_SetType                                         6     3      3   34613
                                             58 BANK0      6     3      3
                 _Port_CheckPortType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Port_CheckPortType                                   4     1      3   16921
                                             54 BANK0      4     1      3
                 _Port_CheckQuadType
 ---------------------------------------------------------------------------------
 (3) _Port_Set                                            24    21      3   10910
                                             15 BANK0     24    21      3
                       _Byte_SetByte
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetByte                                         3     0      3    1278
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (3) _GetPortTRIS                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortProperties                                    3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (3) _GetPortPORT                                          3     1      2      31
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (2) _LED_Init                                             1     1      0   85371
                                             45 BANK0      1     1      0
                            _LED_Set
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (3) _LED_Set                                              2     1      1   30528
                                             20 BANK0      2     1      1
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_Dequeue                                          0     0      0   30813
                   Absolute function *
                         _Motor_Step *
 ---------------------------------------------------------------------------------
 (2) _Motor_Step                                           2     2      0   30813
                                             20 BANK0      2     2      0
                          _MXK_Queue
                        _MXK_Release
                       _MXK_SwitchTo
                        _Port_SetPin
                     _Timer0_Restart
                        _Timer0_Stop
 ---------------------------------------------------------------------------------
 (3) _Timer0_Stop                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer0_Restart                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_SwitchTo                                         2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (1) _MXK_Release                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MXK_Queue                                            3     0      3     183
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MXK_BlockSwitchTo                                    2     2      0     499
                                              6 BANK0      2     2      0
                           _delay_us
 ---------------------------------------------------------------------------------
 (2) _delay_us                                             6     4      2     403
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (1) _LCD_Init                                             4     4      0  290820
                                             53 BANK0      4     4      0
                    _Configure_GPIOs
                           _LCD_Fill
                          _LCD_Write
                       _Set_Rotation
                           _delay_ms
 ---------------------------------------------------------------------------------
 (2) _Set_Rotation                                         2     2      0    6057
                                              5 BANK0      2     2      0
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (2) _LCD_Fill                                             4     2      2   15389
                                              9 BANK0      4     2      2
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _Configure_GPIOs                                      0     0      0  261813
                          _LCD_Reset
                    _Port_SetPinType
                           _SPI_Init
                       _SPI_MaxSpeed
 ---------------------------------------------------------------------------------
 (3) _SPI_MaxSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _LCD_Reset                                            0     0      0   94437
                         _LED_Toggle
                         _Reset_High
                          _Reset_Low
                           _delay_ms
 ---------------------------------------------------------------------------------
 (1) _delay_ms                                             6     4      2    1318
                                              0 BANK0      6     4      2
 ---------------------------------------------------------------------------------
 (4) _Reset_Low                                            0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (4) _Reset_High                                           0     0      0   30131
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_Poll                                             0     0      0   84405
                        _Button_Poll
 ---------------------------------------------------------------------------------
 (2) _Button_Poll                                          9     6      3   84405
                                             27 BANK0      9     6      3
                    _Event_DIPSwitch *
                         _Event_NULL *
                   _Event_TestButton *
                      _HMI_DIPSwitch *
                     _HMI_DownSwitch *
                     _HMI_LeftSwitch *
                    _HMI_RightSwitch *
                       _HMI_UpSwitch *
                      _MXK_DIPSwitch *
                     _MXK_TestButton *
 ---------------------------------------------------------------------------------
 (1) _MXK_TestButton                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _MXK_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (1) _HMI_UpSwitch                                         0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (1) _HMI_RightSwitch                                      0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_LeftSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DownSwitch                                       0     0      0    1926
                        _Port_GetPin
 ---------------------------------------------------------------------------------
 (3) _HMI_DIPSwitch                                        0     0      0    1014
                       _Port_GetQuad
 ---------------------------------------------------------------------------------
 (2) _Port_GetQuad                                         6     3      3    1014
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (3) _Event_TestButton                                     1     1      0   37037
                                             25 BANK0      1     1      0
                      _HMI_SetButton
                      _HMI_SetNumber
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _HMI_SetNumber                                        2     0      2    3942
                                             22 BANK0      2     0      2
                    _HMI_SetSegments
                               _itos
 ---------------------------------------------------------------------------------
 (5) _itos                                                10     6      4    3009
                                             12 BANK0     10     6      4
                            ___lwdiv
                            ___lwmod
                            _reverse
 ---------------------------------------------------------------------------------
 (6) _reverse                                              7     3      4     592
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              5     1      4     840
                                              7 BANK0      5     1      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              7     3      4     849
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (5) _HMI_SetSegments                                      5     3      2     446
                                              1 BANK0      5     3      2
                          _ToSegment
 ---------------------------------------------------------------------------------
 (6) _ToSegment                                            1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_SetButton                                        8     8      0     207
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 (3) _Event_NULL                                           1     1      0       0
 ---------------------------------------------------------------------------------
 (3) _Event_DIPSwitch                                      2     2      0   32959
                                             25 BANK0      2     2      0
                         _HMI_GetBar
                         _HMI_SetBar
                         _LED_Toggle
 ---------------------------------------------------------------------------------
 (4) _LED_Toggle                                           1     1      0   32857
                                             24 BANK0      1     1      0
                     _Port_TogglePin
 ---------------------------------------------------------------------------------
 (5) _Port_TogglePin                                       4     1      3   32826
                                             20 BANK0      4     1      3
                        _Port_GetPin
                        _Port_SetPin
 ---------------------------------------------------------------------------------
 (2) _Port_SetPin                                          5     1      4   30131
                                             15 BANK0      5     1      4
                        _Byte_SetBit
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (2) _Port_GetPin                                          6     3      3    1926
                                              0 BANK0      6     3      3
 ---------------------------------------------------------------------------------
 (4) _HMI_SetBar                                           1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (4) _HMI_GetBar                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _HMI_Init                                             2     2      0  217901
                                             59 BANK0      2     2      0
                        _Button_Init
                           _SPI_Init
                       _SPI_MinSpeed
 ---------------------------------------------------------------------------------
 (2) _SPI_MinSpeed                                         2     0      2   26456
                                             15 BANK0      2     0      2
                        _Byte_SetBit
                       _Byte_SetQuad
 ---------------------------------------------------------------------------------
 (3) _SPI_Init                                             8     2      6   86139
                                             45 BANK0      8     2      6
                        _Byte_SetBit
                       _Byte_SetQuad
                    _Port_SetPinType
                            _SPI_DCS
                     _SPI_DisableISR
                        _Timer2_Init
 ---------------------------------------------------------------------------------
 (4) _Timer2_Init                                         17    13      4    2964
                                             13 BANK0     17    13      4
                       _Timer2_Clear
                            ___lldiv
 ---------------------------------------------------------------------------------
 (5) ___lldiv                                             13     5      8    2673
                                              0 BANK0     13     5      8
 ---------------------------------------------------------------------------------
 (5) _Timer2_Clear                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (4) _SPI_DisableISR                                       2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (4) _SPI_DCS                                              2     0      2     183
                                              0 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _Button_Init                                         13     0     13  105207
                                              0 BANK1     13     0     13
                    _HMI_InitButtons *
                  _MXK_InitDIPSwitch *
                 _MXK_InitTestButton *
 ---------------------------------------------------------------------------------
 (3) _MXK_InitTestButton                                   0     0      0   54781
                    _Port_SetPinType
 ---------------------------------------------------------------------------------
 (2) _Port_SetPinType                                      7     3      4   54781
                                             38 BANK0      7     3      4
                        _Byte_SetBit
                 _PortProperty_Valid
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Byte_SetBit                                          7     3      4   15662
                                              0 BANK0      7     3      4
 ---------------------------------------------------------------------------------
 (3) _MXK_InitDIPSwitch                                    0     0      0   44669
                   _Port_SetQuadType
 ---------------------------------------------------------------------------------
 (2) _Port_SetQuadType                                     5     1      4   44669
                                             54 BANK0      5     1      4
                       _Byte_SetQuad
                 _Port_CheckQuadType
                       _Word_SetPair
 ---------------------------------------------------------------------------------
 (3) _Word_SetPair                                         4     0      4   16238
                                             15 BANK0      4     0      4
                       _Byte_SetPair
 ---------------------------------------------------------------------------------
 (4) _Byte_SetPair                                         4     0      4    8725
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (4) _Port_CheckQuadType                                   7     3      4   15845
                                             47 BANK0      7     3      4
                 _Port_CheckPairType
 ---------------------------------------------------------------------------------
 (5) _Port_CheckPairType                                   9     5      4   13271
                                             38 BANK0      9     5      4
                 _PortProperty_Valid
 ---------------------------------------------------------------------------------
 (6) _PortProperty_Valid                                  23    19      4   10663
                                             15 BANK0     23    19      4
                       _Word_GetPair
 ---------------------------------------------------------------------------------
 (7) _Word_GetPair                                         3     0      3    8154
                                             12 BANK0      3     0      3
                       _Byte_GetPair
 ---------------------------------------------------------------------------------
 (8) _Byte_GetPair                                         3     0      3    2831
                                              9 BANK0      3     0      3
                       _Byte_GetZone
 ---------------------------------------------------------------------------------
 (9) _Byte_GetZone                                         9     4      5    2161
                                              0 BANK0      9     4      5
 ---------------------------------------------------------------------------------
 (3) _Byte_SetQuad                                         4     0      4   10549
                                             11 BANK0      4     0      4
                       _Byte_SetZone
 ---------------------------------------------------------------------------------
 (5) _Byte_SetZone                                        11     5      6    2704
                                              0 BANK0     11     5      6
 ---------------------------------------------------------------------------------
 (3) _HMI_InitButtons                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Console_Render                                      11    11      0   35327
                                             35 BANK0      9     9      0
                  _Console_MakeField
                      _LCD_DrawField
                  _LCD_FillRectangle
 ---------------------------------------------------------------------------------
 (2) _LCD_FillRectangle                                   14     4     10   16865
                                              9 BANK0     14     4     10
                     _LCD_Word_Write
                    _Set_Addr_Window
 ---------------------------------------------------------------------------------
 (2) _LCD_DrawField                                       17     7     10   16520
                                             18 BANK0     17     7     10
                  _Console_MakeField (ARG)
                     _LCD_Word_Write
                    _Set_Addr_Window
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) ___wmul                                               6     2      4     536
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (3) _Set_Addr_Window                                      4     1      3    8405
                                              5 BANK0      4     1      3
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Word_Write                                       2     0      2    6659
                                              5 BANK0      2     0      2
                          _LCD_Write
 ---------------------------------------------------------------------------------
 (3) _LCD_Write                                            2     1      1    5989
                                              3 BANK0      2     1      1
                           _Mode_Set
                           _SPI_Send
 ---------------------------------------------------------------------------------
 (4) _SPI_Send                                             3     0      3    1032
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (4) _Mode_Set                                             1     1      0      31
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _Console_MakeField                                   13    11      2    1385
                                              5 BANK0     13    11      2
                        _Byte_GetBit
 ---------------------------------------------------------------------------------
 (3) _Byte_GetBit                                          5     2      3    1014
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _Console_Init                                         4     4      0     229
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 13
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (11) _ISR_Function                                       18    18      0    1778
                                             22 COMRAM    18    18      0
                         _Timer0_ISR
 ---------------------------------------------------------------------------------
 (12) _Timer0_ISR                                          0     0      0    1778
                   Absolute function *
                       i2_Motor_Step *
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Motor_Step                                        2     2      0    1778
                                             20 COMRAM     2     2      0
                        i2_MXK_Queue
                      i2_MXK_Release
                     i2_MXK_SwitchTo
                      i2_Port_SetPin
                   i2_Timer0_Restart
                      i2_Timer0_Stop
 ---------------------------------------------------------------------------------
 (13) i2_Timer0_Stop                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Timer0_Restart                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_Port_SetPin                                       5     1      4    1569
                                             15 COMRAM     5     1      4
                      i2_Byte_SetBit
                     i2_Word_GetPair
 ---------------------------------------------------------------------------------
 (15) i2_Word_GetPair                                      3     0      3     643
                                             12 COMRAM     3     0      3
                     i2_Byte_GetPair
 ---------------------------------------------------------------------------------
 (16) i2_Byte_GetPair                                      3     0      3     481
                                              9 COMRAM     3     0      3
                     i2_Byte_GetZone
 ---------------------------------------------------------------------------------
 (17) i2_Byte_GetZone                                      9     4      5     333
                                              0 COMRAM     9     4      5
 ---------------------------------------------------------------------------------
 (15) i2_Byte_SetBit                                       7     3      4     345
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (14) i2_MXK_SwitchTo                                      2     2      0     161
                                              6 COMRAM     2     2      0
                         i2_delay_us
 ---------------------------------------------------------------------------------
 (15) i2_delay_us                                          6     4      2      94
                                              0 COMRAM     6     4      2
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Release                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (14) i2_MXK_Queue                                         3     0      3      48
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (13) Absolute function(Fake)                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 17
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Console_Init
   _Console_Render
     _Console_MakeField
       _Byte_GetBit
     _LCD_DrawField
       _Console_MakeField (ARG)
         _Byte_GetBit
       _LCD_Word_Write (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window (ARG)
         _LCD_Write
           _Mode_Set
           _SPI_Send
       ___wmul (ARG)
     _LCD_FillRectangle
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
   _HMI_DIPSwitch *
     _Port_GetQuad
   _HMI_DownSwitch *
     _Port_GetPin
   _HMI_Init *
     _Button_Init
       _HMI_InitButtons *
       _MXK_InitDIPSwitch *
         _Port_SetQuadType
           _Byte_SetQuad
             _Byte_SetZone
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
       _MXK_InitTestButton *
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
     _SPI_Init
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_DCS
       _SPI_DisableISR
       _Timer2_Init
         _Timer2_Clear
         ___lldiv
     _SPI_MinSpeed
       _Byte_SetBit
       _Byte_SetQuad
         _Byte_SetZone
   _HMI_LeftSwitch *
     _Port_GetPin
   _HMI_Poll *
     _Button_Poll
       _Event_DIPSwitch *
         _HMI_GetBar
         _HMI_SetBar
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Event_NULL *
       _Event_TestButton *
         _HMI_SetButton
         _HMI_SetNumber
           _HMI_SetSegments
             _ToSegment
           _itos
             ___lwdiv
             ___lwmod
               ___lwdiv (ARG)
             _reverse
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _HMI_DIPSwitch *
         _Port_GetQuad
       _HMI_DownSwitch *
         _Port_GetPin
       _HMI_LeftSwitch *
         _Port_GetPin
       _HMI_RightSwitch *
         _Port_GetPin
       _HMI_UpSwitch *
         _Port_GetPin
       _MXK_DIPSwitch *
         _Port_GetQuad
       _MXK_TestButton *
         _Port_GetPin
   _HMI_RightSwitch *
     _Port_GetPin
   _HMI_UpSwitch *
     _Port_GetPin
   _LCD_Init *
     _Configure_GPIOs
       _LCD_Reset
         _LED_Toggle
           _Port_TogglePin
             _Port_GetPin
             _Port_SetPin
               _Byte_SetBit
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
         _Reset_High
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _Reset_Low
           _Port_SetPin
             _Byte_SetBit
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
         _delay_ms
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _SPI_Init
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
         _Port_SetPinType
           _Byte_SetBit
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
           _Word_SetPair
             _Byte_SetPair
               _Byte_SetZone
         _SPI_DCS
         _SPI_DisableISR
         _Timer2_Init
           _Timer2_Clear
           ___lldiv
       _SPI_MaxSpeed
         _Byte_SetBit
         _Byte_SetQuad
           _Byte_SetZone
     _LCD_Fill
       _LCD_Word_Write
         _LCD_Write
           _Mode_Set
           _SPI_Send
       _Set_Addr_Window
         _LCD_Write
           _Mode_Set
           _SPI_Send
     _LCD_Write
       _Mode_Set
       _SPI_Send
     _Set_Rotation
       _LCD_Write
         _Mode_Set
         _SPI_Send
     _delay_ms
   _MXK_BlockSwitchTo *
     _delay_us
   _MXK_DIPSwitch *
     _Port_GetQuad
   _MXK_Dequeue *
     Absolute function(Fake) *
     _Motor_Step *
       _MXK_Queue
       _MXK_Release
       _MXK_SwitchTo
         _delay_us
       _Port_SetPin
         _Byte_SetBit
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Timer0_Restart
       _Timer0_Stop
   _MXK_Init *
     _LED_Init
       _LED_Set
         _Port_SetPin
           _Byte_SetBit
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
     _Port_Init
       _GetPortPORT
       _GetPortProperties
       _GetPortTRIS
       _Port_Set
         _Byte_SetByte
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Port_SetPinType
         _Byte_SetBit
         _PortProperty_Valid
           _Word_GetPair
             _Byte_GetPair
               _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Port_SetType
         _Port_CheckPortType
           _Port_CheckQuadType
             _Port_CheckPairType
               _PortProperty_Valid
                 _Word_GetPair
                   _Byte_GetPair
                     _Byte_GetZone
         _Word_SetPair
           _Byte_SetPair
             _Byte_SetZone
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPin
       _Byte_SetBit
       _Word_GetPair
         _Byte_GetPair
           _Byte_GetZone
     _Port_SetPinType
       _Byte_SetBit
       _PortProperty_Valid
         _Word_GetPair
           _Byte_GetPair
             _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetQuadType
       _Byte_SetQuad
         _Byte_SetZone
       _Port_CheckQuadType
         _Port_CheckPairType
           _PortProperty_Valid
             _Word_GetPair
               _Byte_GetPair
                 _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _Port_SetType
       _Port_CheckPortType
         _Port_CheckQuadType
           _Port_CheckPairType
             _PortProperty_Valid
               _Word_GetPair
                 _Byte_GetPair
                   _Byte_GetZone
       _Word_SetPair
         _Byte_SetPair
           _Byte_SetZone
     _delay_ms
   _MXK_Release *
   _MXK_SwitchTo *
     _delay_us
   _MXK_TestButton *
     _Port_GetPin
   _delay_ms *
   _eusart_init *
   _irobot_init *
     _eusart_putch
   _irobot_init_song_0 *
     _eusart_putch
   _irobot_led_power_on *
     _irobot_leds
       _eusart_putch
       _load_iRScriptStack
   _irobot_move_straight *
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _irobot_rotate *
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _irobot_song_play *
     _eusart_putch
   _irobot_stop_motion *
     _irobot_move
       _eusart_putch
       _load_iRScriptStack
       _twos_complement_of
   _printf *
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)
     _putch
       _Console_PrintChar
         _Console_Backspace
           _Console_ClearCursor
         _Console_FormFeed
         _Console_IncrementCursor
           _Console_FormFeed
           _Console_NewLine
         _Console_NewLine
         _Console_ResetCursor
         _Console_Tab
           _Console_ClearCursor
           _Console_IncrementCursor
             _Console_FormFeed
             _Console_NewLine
           ___awdiv
   _update_angle *
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop
   _update_bump_and_cliff *
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop
   _update_distance *
     _irobot_query_and_update
       _eusart_getch
       _eusart_putch
       _get_packet_size
       _rx_assign
         _sort_iRBumpDrop

 _ISR_Function (ROOT)
   _Timer0_ISR
     Absolute function(Fake) *
     i2_Motor_Step *
       i2_MXK_Queue
       i2_MXK_Release
       i2_MXK_SwitchTo
         i2_delay_us
       i2_Port_SetPin
         i2_Byte_SetBit
         i2_Word_GetPair
           i2_Byte_GetPair
             i2_Byte_GetZone
       i2_Timer0_Restart
       i2_Timer0_Stop
     i2_Timer0_Stop *

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F3F      0     12C      37        7.7%
BITBANK14          100      0       0      33        0.0%
BANK14             100      0       0      34        0.0%
BITBANK13          100      0       0      31        0.0%
BANK13             100      0       0      32        0.0%
BITBANK12          100      0       0      29        0.0%
BANK12             100      0       0      30        0.0%
BITBANK11          100      0       0      27        0.0%
BANK11             100      0       0      28        0.0%
BITBANK10          100      0       0      25        0.0%
BANK10             100      0       0      26        0.0%
BITBANK9           100      0       0      23        0.0%
BANK9              100      0       0      24        0.0%
BITBANK8           100      0       0      21        0.0%
BANK8              100      0       0      22        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0      AA      14       66.4%
BITBANK3           100      0       0      10        0.0%
BANK3              100      6      E3      11       88.7%
BITBANK2           100      0       0       8        0.0%
BANK2              100    100     100       9      100.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100    100     100       7      100.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     44      A0       5      100.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E     28      50       1       85.1%
BITBANK15           40      0       0      35        0.0%
BANK15              40      0       0      36        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     47D      12        0.0%
DATA                 0      0     5A9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.43 build -156212558 
Symbol Table                                                                                   Fri Sep 08 18:47:12 2017

                                 _update_angle 4928                                  i2_Timer0_Stop 49FE  
                             SPI_Init@pChannel 00E6                     __size_of_MXK_BlockSwitchTo 003E  
                                 i2_Motor_Step 23CE                                              _A 004C  
                        __end_of_irobot_rotate 3CEE                                              l8 26E8  
                                            _a 004D                                              _i 0038  
                                            _j 0037                                              _l 004F  
                                            _u 0036                                              _w 0050  
                          _irobot_led_power_on 47F0                                             l11 2060  
                                           l12 204A                                             l90 1F96  
                                           l85 1E92                                             l87 1F00  
                                           l89 1F6C                                   ___awdiv@sign 00BA  
                          ___wmul@multiplicand 00B7                                  _HMI_DIPSwitch 4872  
                           LCD_DrawField@pSize 00CD                             LCD_DrawField@count 00D3  
                   __end_of_irobot_stop_motion 41DA                              ?_Event_TestButton 0001  
                             i2_Timer0_Restart 49AC                                            l120 3368  
                                          l121 337E                                            l122 3394  
                                          l220 3D94                                            l117 33AA  
                                          l221 3D58                                            l118 3352  
                                          l230 3FF0                                            l222 3DA4  
                                          l223 3D76                                    ?_LED_Toggle 0001  
                                          l234 4182                                            l235 4152  
                                          l227 400C                                            l403 1B20  
                                          l412 17FC                                            l228 3FD4  
                                          l340 3016                                            l404 1AC0  
                                          l421 1790                                            l413 1692  
                                          l237 416A                                            l341 3024  
                                          l405 1B50                                  ??_Console_Tab 00BD  
                                          l414 1818                                            l430 285C  
                                          l350 311E                                            l342 3032  
                                          l510 0CBA                                            l406 1AD8  
                                          l183 31D2                                            l415 16B8  
                                          l351 30AE                                            l343 3040  
                                          l511 0DCA                                            l407 1AF0  
                                          l184 31AC                                            l600 000C  
                                          l432 2886                                            l344 304E  
                                          l512 0CDC                                            l408 1B08  
                                          l417 1724                                            l601 01A0  
                                          l433 28B6                                            l353 30BC  
                                          l337 3078                                            l345 305C  
                                          l610 0228                                            l602 003E  
                                          l354 30CA                                            l346 306A  
                                          l338 3008                                            l370 2FA8  
                                          l611 0276                                            l603 01B2  
                                          l427 28E0                                            l355 30D8  
                                          l363 2FD2                                            l371 2FB6  
                                          l531 0774                                    ?_HMI_GetBar 0001  
                                          l612 02C4                                            l604 00EC  
                                          l356 30E6                                            l372 2FC4  
                                          l364 2F62                                            l532 0798  
                                          l516 0D24                                            l357 30F4  
                                          l509 0DAE                                            l614 03A6  
                                          l358 3102                                            l366 2F70  
                                          l526 07B8                                            l615 039E  
                                          l607 0312                                            l359 3110  
                                          l367 2F7E                                            l519 0D6C  
                                          l616 03B8                                            l608 01DA  
                                          l368 2F8C                                            l528 07D6  
                                          l393 3EC6                                            l617 03A2  
                                          l609 0330                                            l369 2F9A  
                                          l529 0754                                            l483 0B1A  
                                          l732 32EC                                            l476 0BF2  
                                          l900 0892                                            l733 32E0  
                                          l389 3BB8                                            l477 0A64  
                                          l901 0896                                            l397 4146  
                                          l726 2C26                                            l478 0C0E  
                                          l486 0B86                                            l654 465C  
                                          l910 08BA                                            l902 089A  
                                          l727 2C1A                                            l479 0AAE  
                                          l655 4654                                            l911 08BE  
                                          l903 089E                                            l912 08C2  
                                          l904 08A2                                            l824 3AEC  
                                          l832 3F7E                                            l681 3A26  
                                          l673 458E                                            l657 4658  
                                          l913 08C6                                            l905 08A6  
                                          l921 39F6                                            l914 08CA  
                                          l906 08AA                                            l922 39C2  
                                          l930 25FC                                            l819 3676  
                                          l915 08CE                                            l907 08AE  
                                          l684 3A3C                                            l916 08D2  
                                          l908 08B2                                            l860 07F2  
                                          l781 4414                                            l597 001A  
                                          l853 08DA                                            l917 08D6  
                                          l909 08B6                                            l861 07F6  
                                          l678 3A62                                            l686 3A4C  
                                          l598 0002                                            l870 081A  
                                          l862 07FA                                            l854 07DE  
                                          l679 3A16                                            l599 002A  
                                          l871 081E                                            l863 07FE  
                                          l776 4250                                            l880 0842  
                                          l872 0822                                            l864 0802  
                                          l856 07E2                                            l928 267C  
                                          l881 0846                                            l873 0826  
                                          l865 0806                                            l857 07E6  
                                          l929 264C                                            l890 086A  
                                          l882 084A                                            l874 082A  
                                          l866 080A                                            l858 07EA  
                                          l891 086E                                            l883 084E  
                                          l875 082E                                            l867 080E  
                                          l859 07EE                                            l892 0872  
                                          l884 0852                                            l876 0832  
                                          l868 0812                                            l893 0876  
                                          l885 0856                                            l877 0836  
                                          l869 0816                                            l894 087A  
                                          l886 085A                                            l878 083A  
                                          l990 3502                                            l895 087E  
                                          l887 085E                                            l879 083E  
                                          l983 3270                                            l976 3590  
                                          l896 0882                                            l888 0862  
                                          l992 3512                                            l984 31F4  
                                          l897 0886                                            l889 0866  
                                          l985 326C                                            l978 35A0  
                                          l898 088A                                            l899 088E  
                                          l997 3E2C                                            l999 3E50  
                                          _PR2 000FCB                                            _val 007B  
                                  ?_HMI_SetBar 0001                             ??_Event_TestButton 00CE  
                                 _Word_GetPair 43E8                                            prod 000FF3  
                          MXK_SwitchTo@pModule 00BC                                            tosl 000FFD  
                                          wreg 000FE8                             Console_MakeField@x 00C5  
                           Console_MakeField@y 00C6                                     _TXSTA1bits 000FAD  
                              _update_distance 4916                                   Console_Tab@c 00C4  
                                 Console_Tab@i 00C3                            LCD_DrawField@pField 00C7  
                                 Console_Tab@t 00C2                                     i2_delay_us 432C  
                         Port_Set@TypeRequired 00D7                              Console_FormFeed@x 00B7  
                            Console_FormFeed@y 00B8                            LCD_DrawField@pPoint 00C9  
                               ?_LCD_DrawField 00C7                          Port_SetPinType@Output 00DF  
                              Port_SetPin@Type 00C8                                Port_SetPin@pPin 00C6  
                         ?_irobot_led_power_on 0001                                  ?_Byte_GetPair 00BE  
                              __end_of_LED_Set 401E                        __size_ofi2_Word_GetPair 0030  
                                i2_Port_SetPin 2EB2                                   _Word_SetPair 4220  
                                         l1000 3E6C                                           l1010 2950  
                                         l1004 3C58                                  ?_Byte_GetZone 00B5  
                                         l1005 3C86                                           l1200 2B46  
                                         l1040 1846                                           l1201 2B9A  
                                         l1009 295C                                           l1041 184C  
                                         l1202 2BB6                                           l1042 1852  
                                         l1043 1858                                           l1204 2BE0  
                                         l1036 19A2                                           l1044 185E  
                                         l2020 3BC8                                           l2100 1C2C  
                                         l1205 2BC6                                           l1045 1864  
                                         l1037 1840                                           l2021 3BCC  
                                         l1062 1076                                           l2110 4294  
                                         l2022 3BD0                                           l1063 10A4  
                                         l1207 2BF2                                           l1047 190A  
                                         l2023 3BD4                                           l2031 2582  
                                         l1056 0F06                                           l2024 3BD8  
                                         l2040 2502                                           l2032 24D4  
                                         l1057 10CC                                           l1153 12E4  
                                         l2017 3BE8                                           l2025 3BDC  
                                         l1082 27D6                                           l1058 0F0E  
                                         l2114 3AD6                                           l2106 42A0  
                                         l2026 3BE0                                           l2018 3BC4  
                                         l2042 2516                                           l2034 24DE  
                                         l1059 0F38                                           l2115 3A98  
                                         l2027 3BE4                                           l2035 24E4  
                                         l1084 27DE                                           l2140 3F04  
                                         l2108 428C                                           l2036 24EA  
                                         l1077 27A6                                           l2045 2542  
                                         l2037 24F0                                           l2070 34DE  
                                         l2062 349A                                           l2054 3460  
                                         l2038 24F6                                           l1079 27B6  
                                         l2135 2D32                                           l2047 2556  
                                         l2039 24FC                                           l2152 3CAE  
                                         l2154 3CB4                                           l2066 34BE  
                                         l2058 347A                                           l2163 41BE  
                                         l2091 1BE2                                           l2156 3CD6  
                                         l2092 1B9C                                           l2260 148C  
                                         l2252 130E                                           l2261 1442  
                                         l2253 135C                                           l1630 2314  
                                         l2094 1C12                                           l2254 1394  
                                         l1631 2370                                           l2095 1BF6  
                                         l1632 2354                                           l2097 1CE2  
                                         l2257 13B0                                           l1730 42C0  
                                         l2290 1598                                           l2098 1C26  
                                         l1627 23BC                                           l2099 1C6E  
                                         l2259 14A8                                           l1724 43B6  
                                         l1732 42E8                                           l1628 23B2  
                                         l2284 1546                                           l1629 2332  
                                         l2285 14E2                                           l2277 14C6  
                                         l1726 43E4                                           l2470 2A1C  
                                         l2294 15EE                                           l2286 14FA  
                                         l2278 14DA                                           l2703 36A4  
                                         l1735 4824                                           l2471 2A10  
                                         l2295 164C                                           l2279 150A  
                                         l2287 1504                                           l2704 3698  
                                         l2296 15F4                                           l2288 157E  
                                         l2713 3DD4                                           l2650 2ABC  
                                         l2714 3DC8                                           l2474 2A52  
                                         l2651 2AAC                                           l1827 21B4  
                                         l2707 36DA                                           l2475 2A60  
                                         l2467 29DC                                           l1828 21D4  
                                         l2708 36E8                                           l2476 2A74  
                                         l2468 29F2                                           l2717 3DFE  
                                         l2654 2B16                                           l2718 3E0C  
                                         l2655 2B28                                           l1873 445A  
                               ??_Console_Init 00B5                          Port_SetPinType@pInput 00DB  
                                         STR_1 FFFB                                           STR_2 FFBF  
                                         STR_3 FFFB                                           STR_4 FFED  
                                         _LATA 000F89                                           _LATB 000F8A  
                                         _LATC 000F8B                                           _LATD 000F8C  
                                         _LATE 000F8D                                           _LATF 000F8E  
                  __size_of_MXK_InitTestButton 001E                                           _LATG 000F8F  
                          __end_of_GetPortPORT 314E                                           u7020 3B2A  
                                         u7110 2220                       __end_of_irobot_song_play 4916  
                                         u6500 331C                                           u7140 3FB6  
                                         u6520 3610                                           u7080 40F2  
                                         u6505 3316                                           u7305 047C  
                                         _PIR1 000F9E                                           u6610 420E  
                                         _PIR2 000FA1                                           u7315 049E  
                                         _PIR3 000FA4                                           u6700 36AA  
                                         u7500 4280                                           u7085 40EC  
                                         u7325 061E                                           u7095 216C  
                                         u6615 4208                                           u7335 069C  
                                         u8240 10B4                                           u6480 32B6  
                          __end_of_GetPortTRIS 3002                                           u7345 06DE  
                                         u8170 35F8                                           u7370 452A  
                                         u6554 3D0A                                           u7194 3424  
                                         u6730 3DDA                                           u6555 3D04  
                                         u7195 341E                                           u7355 0720  
                                         u7700 3932                                           u6564 3D3C  
                                         u6820 2668                                           u6565 3D36  
                                         u7285 044C                                           u6670 3556  
                                         u6830 3C54                                           u7375 4524  
                                         u6487 32AC                                           u7295 0464  
                                         u6584 2C62                                           u6680 355C  
                                         u6840 3C7E                                           u6920 2A22  
                                         u6585 2C5C                                           u6594 2C94  
                                         u6755 4948                                           u6595 2C8E  
                                         u6756 494A                                           u7660 3F76  
                                         u7820 22F2                                           u9308 4380  
                                         u7740 1B56                                           u9309 4396  
                                         u7638 2130                                           u7910 1E90  
                                         u7830 2306                                           u8390 3CA2  
                                         u8470 15DA                                           u6960 2AC2  
                                         u7840 2346                                           u9360 1388  
                                         u7578 2754                                           u8490 1658  
                                         u9370 13AA                                           u7780 2820  
                                         u7588 1FF4                                           u7589 2008  
                                         u7790 282C                                           u7950 1FA4  
                                         _SPI1 0368                                           _SPI2 0373  
                                         u9398 140E                                           u9399 1422  
                                         _TMR0 000FD6                 irobot_query_and_update@RXArray 0100  
                            rx_assign@packetID 00BA                                           _gISR 006C  
                           Event_DIPSwitch@Bar 00CF                 irobot_query_and_update@TXArray 0200  
                                ??_Byte_GetBit 00B8                                  _iRVirtualWall 002E  
                           SPI_MaxSpeed@pInput 00C4                                  ?_Byte_SetByte 00B5  
                                ?_Byte_SetPair 00C0                                __end_of_SPI_DCS 459C  
                                         _main 12E6                     irobot_leds@powerLuminosity 00C7  
                              ??i2_Byte_SetBit 0005                                  ?_Byte_SetQuad 00C0  
                                         _itos 25BE                                           fsr0h 000FEA  
                                         fsr1h 000FE2                                           indf0 000FEF  
                                         fsr2h 000FDA                                           fsr0l 000FE9  
                                         indf1 000FE7                                           indf2 000FDF  
                                         fsr1l 000FE1                                           fsr2l 000FD9  
                                ?_Byte_SetZone 00B5                                           btemp 0051  
                                         _zero 004E                                  ??_Byte_SetBit 00B9  
                           __size_of_LCD_Reset 0050                                           prodh 000FF4  
                                         prodl 000FF3                                           start 14AA  
                           __size_of_LCD_Write 0022                                  __CFG_IESO$OFF 000000  
                              ?_SPI_DisableISR 00B5                            HMI_SetButton@pValue 00BB  
                                Console_Init@x 00B7                                  Console_Init@y 00B8  
                               ?i2_Timer0_Stop 0001                              i2Byte_SetBit@pBit 0003  
                                 ___param_bank 000000                                __end_of_Font5x7 FFB1  
                         Set_Rotation@rotation 00BB                         __size_of_HMI_SetButton 0090  
                       __size_of_HMI_SetNumber 002A                             _irobot_init_song_0 46E0  
                 __size_of_Console_ClearCursor 0040                               __end_of_LCD_Fill 3F7C  
                             __end_of_LCD_Init 1FE2                                 ?_HMI_DIPSwitch 0001  
                                __CFG_PLLDIV$3 000000                               __end_of_LED_Init 3DB4  
                                 _BAUDCON1bits 000F7E                                  ??_Button_Init 00F0  
                      GetPortProperties@pInput 00B7                                  ??_Button_Poll 00D3  
                             __end_of_HMI_Init 12E6                                          l11031 21B4  
                                        l11071 3F90                                          l11069 3F7E  
                                        l12081 1F00                                          l12243 3596  
                                        l12091 1FA4                                          l12237 3586  
                                        l12333 12B8                                          l10661 3508  
                                        l12271 0F2E                                          l10655 34F8  
                                        l11811 3F4C                                          l10845 2BE0  
                                        l11815 3F5A                                          l11671 496C  
                                        l12527 159E                                          l10793 2668  
                                        l11931 279C                                          l11835 3908  
                                        l10965 3AEC                                          l10973 3B2A  
                                        l11839 3916                                          l10967 3AFE  
                                        l11937 27AC                                          l11895 1AB6  
                             __end_of_HMI_Poll 3850                                          _I2C1T 0040  
                                        _I2C2T 03BA                                          ?_main 0001  
                              __end_of___awdiv 2A7E                          irobot_rotate@isScript 00D2  
                                        ?_itos 00C1                                _Event_DIPSwitch 45CC  
                              __end_of___lldiv 2B3A                        __size_of_HMI_LeftSwitch 0018  
                              ___awdiv@divisor 00B7                                          _INDEX 003A  
                              __end_of___lwdiv 36F2                                          _MASKS FDC1  
                              __end_of___lwmod 3E16                                          i2l430 2ECA  
                                        i2l432 2EF0                                          i2l433 2F1A  
                                        i2l427 2F40                                          i2l732 373E  
                                        i2l733 3738                                          i2l832 432E  
                                        i2l781 45BA                                ___awdiv@counter 00B9  
                          ?_irobot_init_song_0 0001                                          _PORTA 000F80  
                                        _PORTB 000F81                                          _PORTC 000F82  
                                        _PORTD 000F83                                          _PORTE 000F84  
                                        _PORTF 000F85                                          _PORTG 000F86  
                      __size_of_HMI_DownSwitch 0018                                          _TRISA 000F92  
                                        _TRISB 000F93                                          _TRISC 000F94  
                                        _TRISD 000F95                                          _TRISE 000F96  
                                        _TRISF 000F97                                          _TRISG 000F98  
                             ??i2_Byte_GetPair 000D                               ??i2_Byte_GetZone 0006  
                           Port_TogglePin@pPin 00CB                                 __CFG_FCMEN$OFF 000000  
                                        _PortA 03A6                                          _PortB 039C  
                                        _PortC 00A3                                          _PortD 0099  
                                        _PortE 008F                                          _PortF 03B0  
                                        _PortG 0392                        __end_of_Port_SetPinType 183A  
                              _ADC_Initialised 003C                                 ??_Byte_GetPair 00C1  
                        ??_irobot_led_power_on 00C9                                 ?i2_Port_SetPin 0010  
                                  LED_Set@pLED 00CA                                __end_of_dpowers FDC1  
                               ??_Byte_GetZone 00BA                      irobot_move@moveTurnRadius 00C7  
                               Button_Poll@Pin 00D8                       __size_of_Set_Addr_Window 00AA  
                          __end_of_Console_Tab 29C0                               __end_of_MXK_Init 1E70  
                     __size_of_sort_iRBumpDrop 008E                                   ?_eusart_init 0001  
                         i2Byte_GetPair@pInput 000A                                          _putch 494C  
                             __end_of_SPI_Init 041E                               __end_of_SPI_Send 3A80  
                        __end_ofi2_MXK_Release 4A0A                                          pclath 000FFA  
                                        tablat 000FF5                                __end_of_reverse 3A14  
                           __size_of_MXK_Queue 000E                                 ??_Byte_SetByte 00B8  
                               ??_Byte_SetPair 00C4                                 ??_Byte_SetQuad 00C4  
                                        plusw2 000FDB                                 ??_Byte_SetZone 00BB  
                                        status 000FD8                                          wtemp6 0052  
                              _Configure_GPIOs 3938                           i2MXK_Queue@pCallback 0001  
                                  i2delay_us@u 0003                           ??_irobot_init_song_0 00B6  
                               _LCD_Word_Write 47D2                            __size_of_LED_Toggle 0048  
                          __size_of_HMI_GetBar 0006                                  ?_HMI_UpSwitch 0001  
                                   _Event_NULL 1404                    __size_of_Port_CheckPairType 006A  
                          __size_of_HMI_SetBar 000A                                   ?_irobot_leds 00C5  
                                 ?_irobot_init 0001                                __initialization 2D5A  
                                 ?_irobot_move 00C5                            __end_of_Byte_GetBit 453C  
                       irobot_leds@powerColour 00C6                                   __end_of_main 14B8  
             irobot_query_and_update@packetIDs 00CA                                   __end_of_itos 2696  
                         HMI_SetButton@reindex 00B7                                   SPI_Send9@dat 0083  
                          __end_of_Byte_SetBit 3D52                               __end_of_InitList FD97  
                  __size_of_Port_CheckQuadType 005A                               __end_of_Mode_Set 494C  
                      __end_of_update_distance 4928                    __size_of_Port_CheckPortType 0048  
                                       ??_main 00F9                                         ??_itos 00C5  
                      _Console_MakeField$10974 00C3                                  __activetblptr 000003  
                            Port_SetPin@pInput 00C4                              __end_of_LCD_Reset 406E  
                            Port_SetPin@pValue 00C7                                      ??_LED_Set 00CA  
                            _MXK_InitDIPSwitch 4778                              GetPortPORT@pInput 00B7  
                       Port_CheckPairType@Pin1 00DF                         Port_CheckPairType@Pin2 00E0  
                            __end_of_LCD_Write 46E0                                    _GetPortPORT 30A8  
                                 ?i2_MXK_Queue 0001                                    _GetPortTRIS 2F5C  
                              ??_LCD_DrawField 00D1                     __end_of_PortProperty_Valid 367A  
                             __end_of_Port_Set 07D8                                    ?i2_delay_us 0001  
             __size_of_Console_IncrementCursor 0066                            __end_of_Button_Init 276A  
                          __end_of_Button_Poll 2148                              Word_GetPair@pPair 00C3  
                      LCD_FillRectangle@pPoint 00C0                             ?_MXK_InitDIPSwitch 0001  
                                _HMI_SetButton 33C8                                      ??_SPI_DCS 00B7  
                                       _ADRESH 000FC4                                         _ADRESL 000FC3  
                                _HMI_SetNumber 4628                         Port_SetQuadType@Output 00EF  
                                       _ANCON0 000FC1                               ___awdiv@dividend 00B5  
                                       ?_putch 0001                               ??_Console_Render 00D8  
                                ToSegment@pCHR 00B5                               _Console_FormFeed 34E6  
                       Port_SetQuadType@pInput 00EB                                         i2l1630 2434  
                                       i2l1631 2480                                         i2l1632 246C  
                                       i2l1730 44E4                                         i2l1627 24BC  
                                       i2l1732 4504                                         i2l1628 24B2  
                                       i2l1629 244A                                         i2l1590 145E  
                               __CFG_WDTEN$OFF 000000                                         i2l7667 432E  
                                       i2l7669 433E                                         _RCREG1 000FAF  
                                       _RCSTA1 000FAC                         __end_of_LCD_Word_Write 47F0  
                               _Timer0_Restart 49A0                                         _SPBRG1 000FB0  
                          ??_MXK_InitDIPSwitch 00F0                                         _TXREG1 000FAE  
                               i2_MXK_SwitchTo 44D2                                         _TXSTA1 000FAD  
                              Byte_GetBit@pBit 00B7                                     _Reset_High 475A  
                           Console_Render@temp 00DA                                 ??_HMI_UpSwitch 00BB  
                              ??i2_Timer0_Stop 0001                            Port_TogglePin@Value 00CC  
                             __end_of_delay_ms 3B54                                   LED_Init@pLED 00E2  
                             __end_of_delay_us 3FCE                                  ??_Timer2_Init 00C6  
                                ??_Timer0_Stop 00B5                                     _Timer0_ISR 45FA  
                     __size_of_Console_NewLine 00A2                              Timer2_Init@DIVIDE 00CF  
                               __CFG_XINST$OFF 000000                       __size_of_HMI_InitButtons 0006  
                   __end_of_load_iRScriptStack 3AEA                                         _iRWall 0033  
                                   _Motor_Step 22A8                            rx_assign@byteNumber 00B7  
                      __end_of_Event_DIPSwitch 45FA                                         ___wmul 449C  
                              ??_HMI_DIPSwitch 00BB                  load_iRScriptStack@bytesToLoad 00C3  
                                    ??___awdiv 00B9                                 __CFG_STVREN$ON 000000  
                                       _change 00FF                                         _lMotor 007D  
                                    ??___lldiv 00BD                                         _lQueue 006F  
                                   _TestButton 0388                                      ??___lwdiv 00B9  
                           __size_of_ToSegment 0284                                      ??___lwmod 00C0  
                     __end_of_Port_SetQuadType 0CB2                       i2Byte_GetZone@pChunkSize 0005  
                                 HMI_GRender@a 002B                           __end_of_Console_Init 35FE  
                            GetPortTRIS@pInput 00B7                             __size_of_Reset_Low 001E  
                                       clear_0 2DC2                                         clear_1 2DD4  
                                       clear_2 2DE0                                         clear_3 2DEC  
                                       clear_4 2DF8                               ___awdiv@quotient 00BB  
                   irobot_stop_motion@isScript 00CE                                  ?_eusart_getch 0001  
                                   Port_Init@i 00F8                                     _iRDistance 0077  
                            __end_of_MXK_Queue 4992                     __end_ofHMI_SetButton@F7213 FDCE  
                                   _iRBumpLeft 0087                                         _printf 14B8  
                                   _iRBumpDrop 0034                      __end_of_MXK_InitDIPSwitch 4796  
                                   _iRDropLeft 0086                                 HMI_SetButton@v 00BC  
                                ?_eusart_putch 0001                         HMI_SetSegments@pString 00B6  
                                  _Console_Tab 28FE                            LCD_Word_Write@value 00BA  
                                 __pdataCOMRAM 0047                             __size_of_Port_Init 0192  
                                ??_Port_GetPin 00B8                       Port_CheckPortType@Output 00EE  
                           _twos_complement_of 4266                                ??i2_Port_SetPin 0014  
                                 __mediumconst FCE4                    __end_ofTimer2_Init@PRESCALE FDD1  
                     Port_CheckPortType@pDrive 00ED                                         tblptrh 000FF7  
                                       tblptrl 000FF6                                         tblptru 000FF8  
                                 ?_MXK_Dequeue 0001                                 ?_HMI_SetButton 0001  
                     Port_CheckPortType@pInput 00EB                                  ??_Port_SetPin 00C8  
                                    ??_reverse 00B9                          Console_MakeField@Fill 0464  
                             ?_Port_SetPinType 00DB                                         putch@c 00C9  
                               ?_HMI_SetNumber 00CB                                 i2_Word_GetPair 459C  
                      __end_of_Configure_GPIOs 39A8                            irobot_leds@isScript 00C8  
                             ??_MXK_TestButton 00BB                         __end_of_Timer0_Restart 49AC  
                                Set_Rotation@m 00BA                                   ?_MXK_Release 0001  
                          ?_twos_complement_of 00B5                  __size_of_irobot_move_straight 0018  
                              __CFG_FOSC$HSPLL 000000                         __end_ofi2_MXK_SwitchTo 4508  
                                 i2delay_us@us 0001                          _update_bump_and_cliff 4462  
                              ?_LCD_Word_Write 00BA                                     __accesstop 0060  
                      __end_of__initialization 2DFE                                      ?_LCD_Fill 00BE  
        irobot_query_and_update@packetVariable 00CE                                      ?_LCD_Init 0001  
                                SPI_Init@pMode 00E7                                    _Byte_GetBit 4508  
                                    ?_LED_Init 0001                       __end_ofi2_Timer0_Restart 49B8  
                                    ?_HMI_Init 0001                              ??_Set_Addr_Window 00BD  
                                    ?_HMI_Poll 0001               __size_of_irobot_query_and_update 0186  
                                ___rparam_used 000001                              ??_sort_iRBumpDrop 00B5  
                                  _Byte_SetBit 3CEE                                  __end_of_MASKS FDCA  
                               _PortA_Property FFBD                                    ?_Event_NULL 0001  
                                    LCD_Fill@i 00C0                                      LCD_Fill@j 00C1  
                          load_iRScriptStack@i 00C4                                      LCD_Init@i 00EC  
                               __pcstackCOMRAM 0001                                 _PortB_Property FFBB  
                          __size_ofi2_delay_us 0040                                   __pidataBANK0 49E4  
                                 __pidataBANK3 49CC              irobot_move_straight@straightSpeed 00CE  
                          i2Byte_SetBit@pInput 0001                           __end_of_Byte_GetPair 47D2  
                              Console_Render@x 00DF                                Console_Render@y 00E0  
                          i2Byte_SetBit@pValue 0004                                  ?_Set_Rotation 0001  
                          Timer0_Init@PRESCALE FD97                           __end_of_Byte_GetZone 3330  
                         ??_twos_complement_of 00B7                              irobot_leds@LEDBit 00C5  
                               _PortC_Property FFB9                                  __end_of_putch 495A  
                               ??_eusart_getch 00B5                                      ?_MXK_Init 0001  
                          __end_of_Timer2_Init 22A8                            __end_of_Timer0_Stop 49F2  
                                    ?_SPI_Init 00E2                               ?_update_distance 0001  
                                    ?_SPI_Send 00B5                                 ??_eusart_putch 00B5  
                                  _Button_Init 2696                              Port_SetType@pType 00F1  
                                  _Button_Poll 1FE2                           __end_of_Byte_SetByte 4984  
                         __end_of_Byte_SetPair 469C                                 _HMI_LeftSwitch 48D2  
                               _PortD_Property FFB7                           __end_of_Byte_SetQuad 46BE  
                                 ??_LED_Toggle 00CD                                   ??_HMI_GetBar 00B5  
                   eusart_putch@eusartSendChar 00B5                           __end_of_Byte_SetZone 2CAA  
                               _HMI_DownSwitch 488A                                  SPI_Send@pData 00B7  
                        __end_of_MXK_DIPSwitch 4872                                   ??_HMI_SetBar 00B5  
                     __size_of_get_packet_size 0066                                 _PortE_Property FFB5  
                     __size_of_HMI_SetSegments 00BA                         __end_ofi2_Word_GetPair 45CC  
                               main@angleTotal 03DF                                 _PortF_Property FFB3  
                      Port_CheckQuadType@Pair1 00E8                        Port_CheckQuadType@Pair2 00E9  
                     MXK_BlockSwitchTo@pModule 00BC                              _Console_Backspace 3E16  
                              ?_Timer0_Restart 0001                                        ??_putch 00C9  
                     __size_of_HMI_RightSwitch 0018                            _Console_ClearCursor 42EC  
                            __end_of_ToSegment 0A5C                                 _PortG_Property FFB1  
                                   __pbssBANK0 0060                                     __pbssBANK3 0300  
                                   __pbssBANK4 0400                            __end_of_Port_GetPin 4220  
                           _irobot_stop_motion 4194                        Port_CheckQuadType@pQuad 00E6  
                              reverse@iterator 00BA                               ??_SPI_DisableISR 00B7  
                              ?i2_MXK_SwitchTo 0001                              ?_irobot_song_play 0001  
                           ?_Console_Backspace 0001                              __end_of_Reset_Low 475A  
                    __size_of_Event_TestButton 003C                        __size_of_Port_TogglePin 0030  
                                   ??_LCD_Fill 00C0                                     ??_LCD_Init 00EA  
                         __size_of_eusart_init 001E                            __end_of_Port_SetPin 28FE  
                       __end_of_PortA_Property FFBF               irobot_led_power_on@powerOnColour 00C9  
                                    ?_Mode_Set 0001                             Byte_SetByte@pInput 00B5  
                                   ??_LED_Init 00E2                             Byte_SetByte@pValue 00B7  
                                ?_ISR_Function 0001                                    ?_Reset_High 0001  
                                   ??_HMI_Init 00F0                             ??_irobot_song_play 00B6  
                                   ??_HMI_Poll 00D9                                  ?_Timer2_Clear 0001  
                      Port_CheckPairType@Props 00E2                         __end_of_PortB_Property FFBD  
                          ?_irobot_stop_motion 0001                              __end_of_Port_Init 1B6A  
                                  ?_Timer0_ISR 0001                        Port_CheckPairType@pPair 00DD  
                           __end_of_LED_Toggle 4194                             __end_of_HMI_GetBar 49F8  
                     LCD_FillRectangle@pColour 00BE                            ??_Console_Backspace 00B7  
                            Set_Addr_Window@xe 00BB                              Set_Addr_Window@ye 00BC  
                            Set_Addr_Window@xs 00BD                              Set_Addr_Window@ys 00BA  
                           Byte_SetPair@pInput 00C0                                    ?_Motor_Step 0001  
                           Byte_SetPair@pValue 00C3                             __end_of_HMI_SetBar 49CC  
                       __end_of_PortC_Property FFBB                             Word_GetPair@pInput 00C1  
                               ??_Set_Rotation 00BA                                      ?_Port_Set 00C4  
                                      ?___wmul 00B5                               ?_Event_DIPSwitch 0001  
                            Port_GetPin@Output 00BA                   __size_of_Console_ResetCursor 001E  
                         __size_of_irobot_leds 0058                           __size_of_irobot_init 000E  
                         ?_Console_ClearCursor 0001                           __size_of_irobot_move 00B0  
                       __end_of_HMI_LeftSwitch 48EA                         __end_of_PortD_Property FFB9  
                                      _ADC_AN0 03D0                                        _ADC_AN1 03CB  
                                      _ADC_AN2 03C6                                        _ADC_AN3 03C1  
                                   ??_MXK_Init 00F9                              Port_GetPin@pInput 00B5  
                            _Console_MakeField 276A                              ??_Console_NewLine 00B5  
                       __end_of_HMI_DownSwitch 48A2                                     ??_SPI_Init 00E8  
                       Event_TestButton@pState 00CE                                     ??_SPI_Send 00B8  
                                      ?_printf 00CA                              ??_HMI_InitButtons 00B5  
                   __size_of_MXK_InitDIPSwitch 001E                         __end_of_PortE_Property FFB7  
                          Console_Render@F6956 03D5                             ?_Console_MakeField 00BA  
                                      _COUNTER 0029                                ??_HMI_SetButton 00B5  
                         __end_of_HMI_UpSwitch 48BA                           ??_irobot_stop_motion 00CE  
                                      _LED_Set 3FCE                        _Console_IncrementCursor 3C24  
                       __end_of_PortF_Property FFB5                                    _gBackcolour 0081  
                              ??_HMI_SetNumber 00CD                                      _I2C1_Done 032B  
                              ?i2_Word_GetPair 000D                                      _I2C2_Done 0328  
                                    _I2C1_More 0325                                      _I2C2_More 0322  
                                    ?_delay_ms 00B5                      __end_of_Console_Backspace 3E72  
                                    ?_delay_us 00B5                            __size_of_Event_NULL 0002  
                   __end_of_MXK_InitTestButton 47B4                                        _SSP1ADD 000FC8  
                                      _SSP1BUF 000FC9                                        _SSP2BUF 000F6F  
                           __size_of_rx_assign 00F0                         __end_of_PortG_Property FFB3  
                          ??_Console_MakeField 00BC                                        _SPI_DCS 456C  
                         __size_ofi2_MXK_Queue 000E                               ?_Configure_GPIOs 0001  
                       ?_update_bump_and_cliff 0001                         __size_of_irobot_rotate 0064  
                         i2Byte_GetZone@Offset 0008                                 ??_ISR_Function 0017  
                         i2Byte_GetZone@Output 0009                              Event_TestButton@j 0089  
                                   ??_Mode_Set 00B5                                 ??_Timer2_Clear 00B5  
                                      _Font5x7 FDD1                           i2Byte_GetZone@pChunk 0004  
                         i2Byte_GetZone@pInput 0001                           SPI_DisableISR@pInput 00B5  
                                ?_Port_GetQuad 00B5                                Byte_SetBit@pBit 00B7  
                         Port_TogglePin@pInput 00C9                          __end_ofi2_Byte_SetBit 40BA  
                                      __Hparam 0000                              Port_GetQuad@pQuad 00B7  
                                  _Timer2_Init 2148                                        __Lparam 0000  
                                  _Timer0_Stop 49EC                          __size_of_Console_Init 008A  
                                      OutSeg@a 003D                __end_ofPortProperty_Valid@F6830 FDB7  
                                      _iRAngle 0075                                  LCD_Write@mode 00B8  
                                   ??_Port_Set 00C7                      __end_of_Console_MakeField 283A  
                            _Console_PrintChar 183A                                  ?_Port_SetType 00EF  
                                      _gCursor 0047                                        ___awdiv 29C0  
                        ??_Console_ClearCursor 00B5                                        _lBuffer 04AA  
                                      ___lldiv 2A7E                                __size_of___wmul 0036  
                                      ___lwdiv 367A                                        ___lwmod 3DB4  
                              ?_HMI_LeftSwitch 0001                       __end_of_Console_FormFeed 3574  
                           ?_Console_PrintChar 0001                                        __pcinit 2D5A  
                              ?_HMI_DownSwitch 0001                                        __ramtop 1000  
                                      __ptext0 12E6                                        __ptext1 4916  
                                      __ptext2 4462                                        __ptext3 4928  
                                      __ptext4 1B6A                                        __ptext5 24CE  
                                      __ptext6 3458                                        __ptext7 3BBE  
                                      __ptext8 49D4                                        __ptext9 14B8  
                              __size_of_printf 01C2                                      _T0CONbits 000FD5  
                  __end_of_irobot_led_power_on 480C                              i2MXK_SwitchTo@CUR 0007  
                                      _dpowers FDB7                                      _T2CONbits 000FCA  
                                LED_Set@pValue 00C9                            __size_of_Reset_High 001E  
                        Event_DIPSwitch@pState 00CE                                   ?_GetPortPORT 00B5  
                                 ?_GetPortTRIS 00B5                            ??_Console_PrintChar 00C5  
                                  _Port_GetPin 41DA                              __CFG_MSSPMSK$MSK5 000000  
                          LCD_DrawRectangle@p2 00B1                            LCD_DrawRectangle@p4 00AD  
                                 ??i2_delay_us 0003                                     ??_delay_ms 00B7  
                                   ??_delay_us 00B7                                        _reverse 39A8  
                                    _DIPSwitch 037E                            __size_of_Timer0_ISR 002E  
                                  _Port_SetPin 283A                                    _iRBumpRight 0088  
                               LCD_DrawField@i 00D7                                      _LCD_Reset 401E  
                          __size_of_Motor_Step 0126                                      _LCD_Write 46BE  
                                  _iRDropRight 002D                           __size_of_MXK_Dequeue 003E  
                                   delay_ms@ms 00B5                           end_of_initialization 2DFE  
                            ??_get_packet_size 00B5  irobot_query_and_update@numberOfPacketRequests 00CD  
                                   delay_us@us 00B5                              ??_HMI_SetSegments 00B8  
                      Console_PrintChar@pInput 00C8                                   _Console_Init 3574  
                         __end_of_eusart_getch 49DC                        _irobot_query_and_update 1B6A  
                         __size_of_MXK_Release 001C                     __end_of_Port_CheckPairType 3BBE  
                         __end_of_eusart_putch 4976                                        itos@Out 00C9  
                               ??_Port_GetQuad 00B8                             _PortProperty_Valid 35FE  
                           Byte_SetQuad@pInput 00C0                             SPI_MinSpeed@pInput 00C4  
                           Byte_SetQuad@pValue 00C3                          __size_of_Byte_GetPair 001E  
                  __size_of_irobot_init_song_0 0020                                ___lldiv@divisor 00B9  
                        __size_of_Byte_GetZone 009C                              ??_HMI_RightSwitch 00BB  
                              ___lldiv@counter 00C1                      __end_of_Console_PrintChar 19D8  
                               ??_Port_SetType 00F2                     __end_of_Port_CheckQuadType 3ECC  
                                      printf@c 00D9                                        printf@f 00CA  
                               Port_Init@pPort 00F7                                        postdec1 000FE5  
                                      postdec2 000FDD                          __size_of_Byte_SetByte 000E  
                        __size_of_Byte_SetPair 0022                         Console_MakeField@Index 00BE  
                            __end_of_rx_assign 25BE                                        postinc0 000FEE  
                                      postinc2 000FDE                            ?_PortProperty_Valid 00C4  
                        __size_of_Byte_SetQuad 0022                     __end_of_Port_CheckPortType 414C  
                        __size_of_Byte_SetZone 00B6                             __end_ofi2_delay_us 436C  
                           Button_Init@pInitIO 0104                                  _irobot_rotate 3C8A  
                            ?_Port_SetQuadType 00EB                                    _gForecolour 00FD  
                    ??_Console_IncrementCursor 00B9                         __size_ofi2_MXK_Release 0006  
                                    _PORTFbits 000F85                             ??_Port_SetQuadType 00EF  
                                 ?_Console_Tab 0001                               Byte_GetZone@MASK 00BB  
                        Console_Render@lCursor 00DB                             _load_iRScriptStack 3A80  
                                    _MXK_Queue 4984                               __CFG_CPUDIV$OSC1 000000  
                             Byte_GetZone@pMax 00B7                     __size_of_Console_Backspace 005C  
                                    _TRISCbits 000F94                     load_iRScriptStack@loadByte 00C1  
                              _Set_Addr_Window 2E08                                 SPI_Init@pClock 00E2  
                             ??_LCD_Word_Write 00BC                                _sort_iRBumpDrop 3458  
                        __end_of_LCD_DrawField 31F2                                 Port_Set@pInput 00C4  
                               SPI_Init@pInput 00E8                           ??_PortProperty_Valid 00C8  
                               Port_Set@pValue 00C6                                     ?_LCD_Reset 0001  
                         __end_of_Set_Rotation 33C8                                     ?_LCD_Write 00B8  
                                 _Byte_GetPair 47B4                             HMI_SetButton@F7213 FDCA  
                          ?_load_iRScriptStack 00B5                                   _Byte_GetZone 3294  
                                ?_MXK_SwitchTo 0001                              LCD_DrawField@xmax 00D5  
                            LCD_DrawField@ymax 00D6                                 _Port_TogglePin 453C  
                             _Event_TestButton 4426                           Port_SetPinType@Props 00E0  
                                 ?_Byte_GetBit 00B5                        __size_ofi2_Byte_GetPair 001A  
                                 _Byte_SetByte 4976                                   _Byte_SetPair 467A  
                                 _Byte_SetQuad 469C                        __size_ofi2_Byte_GetZone 0076  
                                 _Byte_SetZone 2BF4                           Port_SetPinType@pType 00DE  
                            ?i2_Timer0_Restart 0001                                   ?_Byte_SetBit 00B5  
                                ?_SPI_MaxSpeed 00C4                              __size_of_LCD_Fill 0058  
                                 ??_Event_NULL 00B5                              __size_of_LCD_Init 0172  
                            __size_of_LED_Init 0062                                  ?_SPI_MinSpeed 00C4  
                        __end_ofi2_Timer0_Stop 4A04                             ??i2_Timer0_Restart 0001  
                            __size_of_HMI_Init 01FA                              __size_of_HMI_Poll 0074  
                                ?_update_angle 0001                                  ?i2_Motor_Step 0001  
                   __size_of_Console_MakeField 00D0                                 ?_irobot_rotate 00CE  
                         ??_load_iRScriptStack 00BF                   __end_of_irobot_move_straight 485A  
                        __size_of_HMI_UpSwitch 0018                                 __end_of___wmul 44D2  
                        __end_of_HMI_DIPSwitch 488A                                  __pidataCOMRAM 49B8  
                                 ?_Button_Init 0100                                   ?_Button_Poll 00D0  
                                    _Bus_State 004B                            i2Byte_GetPair@pPair 000C  
                         __end_of_ISR_Function 14AA                              __size_of_MXK_Init 0180  
                         __end_of_Timer2_Clear 49E4                                 __end_of_printf 167A  
                            __size_of_SPI_Init 041E                        get_packet_size@packetID 00B5  
                            __size_of_SPI_Send 006C                                  ?_Word_GetPair 00C1  
                             ??_Timer0_Restart 00B5                             Port_SetType@Output 00F4  
                          start_initialization 2D5A                                     ?_MXK_Queue 00B5  
                     PortProperty_Valid@Errors 00CA                               ??i2_MXK_SwitchTo 0007  
                            _LCD_FillRectangle 38C4                             Port_SetType@pInput 00EF  
                                   HMI_Init@in 00F0                            HMI_SetNumber@pInput 00CB  
                        __end_ofi2_Port_SetPin 2F5C                             __end_of_Event_NULL 1406  
                       rx_assign@packetIDValue 00B6                         __end_of_Port_TogglePin 456C  
                                ?_Word_SetPair 00C4                              Byte_SetBit@pInput 00B5  
                               ??_MXK_SwitchTo 00BB                              Byte_SetBit@pValue 00B8  
                           ?_LCD_FillRectangle 00BE                      ??_irobot_query_and_update 00C5  
                          _Console_ResetCursor 4700                    PortProperty_Valid@pPinDrive 00C6  
                         MXK_BlockSwitchTo@CUR 00BB                       PortProperty_Valid@pInput 00C4  
                                i2_MXK_Release 4A04                         LCD_FillRectangle@pSize 00C4  
                               SPI_Send@pInput 00B5                                   ??_Reset_High 00C9  
                     __size_of_Port_SetPinType 01C0                                 ??_SPI_MaxSpeed 00C6  
                        Port_SetQuadType@pQuad 00ED                                      _ToSegment 07D8  
                          ??_LCD_FillRectangle 00C8                          Port_SetQuadType@pType 00EE  
                              _Console_NewLine 31F2                                 ??_SPI_MinSpeed 00C6  
                                 _HMI_UpSwitch 48A2                                      _Reset_Low 473C  
                                 ??_Timer0_ISR 0017                                _HMI_InitButtons 49F8  
                            __size_of_Mode_Set 0012                     __size_of_Console_PrintChar 019E  
                               ??_update_angle 00D2                                      _gCharSize 00F9  
                             Timer2_Init@INDEX 008B                                      OutSeg@cur 003F  
                               ??i2_Motor_Step 0015                        __size_of_Console_Render 0210  
                                 ??_Motor_Step 00C9                                      _iRAngleSS 0060  
                                    _iRCliffFL 0031                                      _iRCliffFR 0030  
                           Byte_SetZone@Offset 00BE                                       ??___wmul 00B9  
                         ?_Console_ResetCursor 0001                                      _Port_Init 19D8  
                                  __pdataBANK0 00F9                                    __pdataBANK3 03D5  
                    __size_of_irobot_song_play 0014                    __size_of_twos_complement_of 0044  
                            __size_of_Port_Set 03BA                             Byte_SetZone@pChunk 00B8  
                             ??i2_Word_GetPair 0010                             Byte_SetZone@pInput 00B5  
                           Byte_SetZone@pValue 00BA                                  Mode_Set@pMode 00B5  
                                     ??_printf 00D2                        __end_of_Set_Addr_Window 2EB2  
                     Port_CheckQuadType@Output 00EA                        __end_of_sort_iRBumpDrop 34E6  
                                    _gLineSize 03D9                       Port_CheckQuadType@pDrive 00E7  
                               ??_Word_GetPair 00C4                       Port_CheckQuadType@pInput 00E4  
                         __end_of_Port_GetQuad 4104                      __end_of_LCD_FillRectangle 3938  
                                  __pbssBIGRAM 04AA                                       ?_LED_Set 00C9  
                                  __pbssCOMRAM 0029                             __end_of_Reset_High 4778  
                                __pcstackBANK0 00B5                                  __pcstackBANK1 0100  
                                __pcstackBANK2 0200                                  __pcstackBANK3 03DD  
                      ??_update_bump_and_cliff 00D2                                     itos@Length 00C7  
                        __size_of_eusart_getch 0008                                 ??_Word_SetPair 00C8  
                     __size_of_update_distance 0012                             __end_of_Timer0_ISR 4628  
                         __size_of_GetPortPORT 00A6                                    ??_LCD_Reset 00CE  
                         __size_of_GetPortTRIS 00A6                           __end_of_Port_SetType 0EDC  
                                     ?_SPI_DCS 00B5                          __size_of_eusart_putch 000E  
                              ?_Port_TogglePin 00C9                                  ??_eusart_init 00B5  
                                  ??_LCD_Write 00B9                              __size_of_delay_ms 006A  
                            __size_of_delay_us 0052                            __CFG_CCP2MX$DEFAULT 000000  
                           __end_of_Motor_Step 23CE                          Timer2_Init@pFrequency 00C2  
                               ?i2_MXK_Release 0001                       Port_CheckPairType@Output 00E1  
            twos_complement_of@complementValue 00B5                                     ?_ToSegment 0001  
                     Port_CheckPairType@pDrive 00DE                       Port_CheckPairType@pInput 00DB  
                               reverse@tempVar 00B9                             _MXK_InitTestButton 4796  
                                   ?_Reset_Low 0001                         __size_of_MXK_DIPSwitch 0018  
                                 ?_Timer2_Init 00C2                               ??_HMI_LeftSwitch 00BB  
                                 ?_Timer0_Stop 0001                               ___lwdiv@dividend 00B5  
                                ??_irobot_leds 00C8                                  ??_irobot_init 00B6  
                              ??_irobot_rotate 00D2                                  ??_irobot_move 00C9  
                                _lStepFunction 0072                        __size_of_MXK_TestButton 0018  
                            Byte_SetPair@pPair 00C2                               ??_HMI_DownSwitch 00BB  
                                    __pintcode 1408                                  __pmediumconst FCE4  
                        ??_Console_ResetCursor 00B5                                       ?___awdiv 00B5  
                                    __ptext100 4796                                      __ptext101 167A  
                                    __ptext110 47B4                                      __ptext102 3CEE  
                                    __ptext111 3294                                      __ptext103 0A5C  
                                    __ptext120 46BE                                      __ptext112 469C  
                                    __ptext104 4220                                      __ptext121 3A14  
                                    __ptext113 2BF4                                      __ptext105 467A  
                                    __ptext130 49AC                                      __ptext122 493A  
                                    __ptext114 0EDC                                      __ptext106 3E72  
                                    __ptext131 2EB2                                      __ptext123 276A  
                                    __ptext115 38C4                                      __ptext107 3B54  
                                    __ptext140 0000                                      __ptext132 459C  
                                    __ptext124 4508                                      __ptext116 314E  
                                    __ptext108 35FE                                      __ptext133 4828  
                                    __ptext125 3574                                      __ptext117 449C  
                                    __ptext109 43E8                                      __ptext134 36F2  
                                    __ptext118 2E08                                      __ptext135 406E  
                                    __ptext127 45FA                                      __ptext119 47D2  
                                    __ptext136 44D2                                      __ptext128 23CE  
                                    __ptext137 432C                                      __ptext129 49FE  
                                    __ptext138 4A04                                      __ptext139 4992  
              __end_of_irobot_query_and_update 1CF0                                      _pShiftVal 0079  
                                     ?___lldiv 00B5                                     ?_Port_Init 00F5  
                                     ?___lwdiv 00B5                                       ?___lwmod 00BC  
                          ?_MXK_InitTestButton 0001                              ?_Console_FormFeed 0001  
                            _GetPortProperties 3002                                   _eusart_getch 49D4  
                  __end_ofTimer0_Init@PRESCALE FDA7                                _get_packet_size 3BBE  
                                 _eusart_putch 4968                             ??_Console_FormFeed 00B5  
                              _HMI_SetSegments 2B3A                             ?_GetPortProperties 00B5  
                             Event_NULL@pState 0001                       __size_of_Event_DIPSwitch 002E  
                        __size_of_Set_Rotation 0098                                  ??i2_MXK_Queue 0004  
                                  ??_MXK_Queue 00B8                    __size_of_irobot_stop_motion 0046  
                                 ?_Port_GetPin 00B5                          __end_of_HMI_SetButton 3458  
                         __size_of_Console_Tab 00C2                                       ?_reverse 00B5  
                         irobot_move@moveSpeed 00C5                                   ?_Port_SetPin 00C4  
                            main@distanceTotal 03DD                          __end_of_HMI_SetNumber 4652  
                             ___lwdiv@quotient 00BA                                _HMI_RightSwitch 48BA  
                          ??_GetPortProperties 00B7                        __end_of_Console_NewLine 3294  
                         ??_MXK_InitTestButton 00E2                             Byte_GetPair@pInput 00BE  
                               __size_of_putch 000E                        __end_of_HMI_InitButtons 49FE  
                            i2Port_SetPin@Type 0014                           _irobot_move_straight 4842  
                            i2Port_SetPin@pPin 0012                                 i2_Byte_GetPair 4828  
                                     _LCD_Fill 3F24                                       _LCD_Init 1E70  
                               ___wmul@product 00B9                                       _HMIBoard 032E  
                               i2_Byte_GetZone 36F2                                       _LED_Init 3D52  
                                    delay_ms@u 00B7                             Button_Poll@pButton 00D0  
                                    delay_us@u 00B7                                       _HMI_Init 10EC  
                                     _HMI_Poll 37DC                             MXK_Queue@pCallback 00B5  
                                     _IPR1bits 000F9F                                       _IPR3bits 000FA5  
                                     _PIE1bits 000F9D                            __end_of_eusart_init 473C  
                                     _PIE3bits 000FA3                    __end_of_Console_ClearCursor 432C  
                     __size_of_Configure_GPIOs 0070                           __size_of_Byte_GetBit 0034  
                            Byte_SetQuad@pQuad 00C2                                       i2u412_40 435A  
                                     i2u408_44 4082                                       i2u408_45 407E  
                                     _PIR1bits 000F9E                                       i2u409_44 40A8  
                                     i2u409_45 40A4                                       i2u355_40 3714  
                                     i2u355_47 370A                                       i2u357_40 375C  
                                     _PIR3bits 000FA4                                       i2u357_45 3758  
                                     i2u494_40 2412                                       i2u495_40 2426  
                                     i2u496_40 245E                                       i2u928_48 4612  
                         __size_of_Byte_SetBit 0064                                       _RCONbits 000FD0  
                         i2Word_GetPair@pInput 000D                               __CFG_WDTPS$32768 000000  
                   irobot_song_play@songNumber 00B6                               HMI_SetBar@pValue 00B5  
                            Button_Init@pInput 0100                        __size_of_SPI_DisableISR 0028  
                                     _SSP1CON1 000FC6                              ??_Port_SetPinType 00DF  
                                     _SSP1CON2 000FC5                                       _SSP2CON1 000F6C  
                                     _SSP2CON2 000F6B                          __size_of_ISR_Function 00A2  
                                     _SSP1STAT 000FC7                      __end_of_GetPortProperties 30A8  
                                     _SSP2STAT 000F6D                                   _Set_Rotation 3330  
                        __size_of_Timer2_Clear 0008                           __end_of_MXK_SwitchTo 42EC  
                           _Port_CheckPairType 3B54                                       _MXK_Init 1CF0  
                              MXK_SwitchTo@CUR 00BB                            __end_of_irobot_leds 3F24  
                                     _SPI_Init 0000                            __end_of_irobot_init 4968  
                     __end_of_Event_TestButton 4462                                       _SPI_Send 3A14  
                          __end_of_irobot_move 2D5A                                      _rx_assign 24CE  
                                   _ADCON0bits 000FC2                                     _ADCON1bits 000FC1  
                             ?_Set_Addr_Window 00BA                              ___wmul@multiplier 00B5  
                             ?_sort_iRBumpDrop 0001                              Byte_GetBit@Output 00B9  
                                   printf@flag 00D4                           Timer2_Init@pCPUClock 00CB  
                   __size_of_LCD_FillRectangle 0074                           __size_of_Button_Init 00D4  
                         __end_of_SPI_MaxSpeed 37DC                                     printf@prec 00D3  
                            Byte_GetBit@pInput 00B5                            Port_SetPinType@pPin 00DD  
                         __size_of_Button_Poll 0166                             _Port_CheckQuadType 3E72  
                                _MXK_DIPSwitch 485A                            ?_Port_CheckPairType 00DB  
                         __end_of_SPI_MinSpeed 38C4                                  ??_MXK_Dequeue 00CB  
                             __size_of_LED_Set 0050                         __size_ofi2_Byte_SetBit 004C  
                           _Port_CheckPortType 4104                           __end_of_update_angle 493A  
                        Button_Poll@pIncrement 00D2                        PortProperty_Valid@F6830 FDA7  
                         __end_ofi2_Motor_Step 24CE                                ??i2_MXK_Release 0001  
                 __size_of_irobot_led_power_on 001C                                      copy_data0 2D6E  
                                    copy_data1 2D8E                                      copy_data2 2DAE  
                                ??_MXK_Release 00B5                         __end_ofi2_Byte_GetPair 4842  
                    __size_of_Port_SetQuadType 0256                               __size_of_SPI_DCS 0030  
                          ?_Port_CheckQuadType 00E4                          ?_irobot_move_straight 00CE  
                       __end_ofi2_Byte_GetZone 3768                            __end_ofi2_MXK_Queue 49A0  
                          ?_Port_CheckPortType 00EB                                itos@destination 00C3  
                                     _InitList FCE5                     __end_of_irobot_init_song_0 4700  
                         _Motor_Step$intlevel0 22AE                                       _Mode_Set 493A  
                           Port_GetQuad@Output 00BA                              ??_update_distance 00D2  
                                  ??_ToSegment 00B5                                   _ISR_Function 1408  
                           Port_GetQuad@pInput 00B5                                   _Timer2_Clear 49DC  
                         __end_of_Word_GetPair 4426                                       _lCBuffer 0300  
                         ??_Port_CheckPairType 00DF                                    ??_Reset_Low 00C9  
                                     __Hrparam 0000                                 _Console_Render 0EDC  
                                     __Lrparam 0000                                Timer2_Init@RDIV 00C7  
                                     _iRCliffL 0032                                       _iRCliffR 002F  
                               LCD_Write@value 00B9                                       _Port_Set 041E  
                                 OutSeg@segset 003E                                      rand@screw 003B  
                         __end_of_Word_SetPair 4266                        __end_of_get_packet_size 3C24  
                                  ??_Port_Init 0100                        __end_of_HMI_SetSegments 2BF4  
                         ??_Port_CheckQuadType 00E8                               _irobot_song_play 4902  
                        __size_of_Port_GetQuad 004A                               __size_of___awdiv 00BE  
                             __size_of___lldiv 00BC                              _MXK_BlockSwitchTo 43AA  
                             __size_of___lwdiv 0078                           ??_Port_CheckPortType 00EE  
                             __size_of___lwmod 0062                                       _lBufferX 008D  
                                     _lBufferY 008C                            Timer2_Init@PRESCALE FDCE  
                                   ?_rx_assign 00B6                                LCD_Fill@pColour 00BE  
                           ?_MXK_BlockSwitchTo 0001                      __size_ofi2_Timer0_Restart 000C  
                                     _lCurrent 007F                        __end_of_HMI_RightSwitch 48D2  
                       Byte_GetZone@pChunkSize 00B9                                 ?_MXK_DIPSwitch 0001  
                       Byte_SetZone@pChunkSize 00B9                          __size_of_Port_SetType 022A  
                                reverse@length 00B7                                      itos@input 00C1  
                        i2MXK_SwitchTo@pModule 0008                            irobot_move@isScript 00CD  
                                     _delay_ms 3AEA                                       _delay_us 3F7C  
                                     _clearall 008E                                ___lwdiv@divisor 00B7  
                              ___lwdiv@counter 00B9                                Port_GetPin@pPin 00B7  
                                     __ptext10 494C                                       __ptext11 183A  
                                     __ptext20 4194                                       __ptext12 28FE  
                                     __ptext21 4902                                       __ptext13 29C0  
                                     __ptext30 495A                                       __ptext22 3C8A  
                                     __ptext14 3C24                                       __ptext31 4968  
                                     __ptext23 4842                                       __ptext15 31F2  
                                     __ptext40 3002                                       __ptext32 471E  
                                     __ptext24 2CAA                                       __ptext16 34E6  
                                     __ptext41 30A8                                       __ptext33 1CF0  
                                     __ptext25 4266                                       __ptext17 4700  
                                     __ptext50 4984                                       __ptext42 3D52  
                                     __ptext34 19D8                                       __ptext26 47F0  
                                     __ptext18 3E16                                       __ptext51 43AA  
                                     __ptext43 3FCE                                       __ptext35 0CB2  
                                     __ptext27 3ECC                                       __ptext19 42EC  
                                     __ptext60 473C                                       __ptext52 3F7C  
                                     __ptext44 436C                                       __ptext36 4104  
                                     __ptext28 3A80                                       __ptext61 475A  
                                     __ptext53 1E70                                       __ptext45 22A8  
                                     __ptext37 041E                                       __ptext29 46E0  
                                     __ptext70 48EA                                       __ptext62 37DC  
                                     __ptext54 3330                                       __ptext46 49EC  
                                     __ptext38 4976                                       __ptext71 40BA  
                                     __ptext63 1FE2                                       __ptext55 3F24  
                                     __ptext47 49A0                                       __ptext39 2F5C  
                          ??_MXK_BlockSwitchTo 00BB                                       __ptext80 2B3A  
                                     __ptext72 45CC                                       __ptext64 485A  
                                     __ptext56 3938                                       __ptext48 42AA  
                                     __ptext81 07D8                                       __ptext73 1404  
                                     __ptext65 4872                                       __ptext57 3768  
                                     __ptext49 480C                                       __ptext90 3850  
                                     __ptext82 33C8                                       __ptext74 4426  
                                     __ptext66 488A                                       __ptext58 401E  
                                     __ptext91 0000                                       __ptext83 414C  
                                     __ptext75 4628                                       __ptext67 48A2  
                                     __ptext59 3AEA                                       __ptext92 2148  
                                     __ptext84 453C                                       __ptext76 25BE  
                                     __ptext68 48BA                                       __ptext93 2A7E  
                                     __ptext85 283A                                       __ptext77 39A8  
                                     __ptext69 48D2                                       __ptext94 49DC  
                                     __ptext86 41DA                                       __ptext78 3DB4  
                                     __ptext95 4652                                       __ptext87 49C2  
                                     __ptext79 367A                                       __ptext96 456C  
                                     __ptext88 49F2                                       __ptext97 2696  
                                     __ptext89 10EC                                       __ptext98 4778  
                                     __ptext99 49F8                                   _SSP1CON1bits 000FC6  
                             __size_of_reverse 006C                                   _SSP1CON2bits 000FC5  
                  __size_of_PortProperty_Valid 007C                             i2Byte_GetZone@MASK 0007  
                                 _SSP2CON1bits 000F6C                                   _SSP2CON2bits 000F6B  
                                  _eusart_init 471E                                ?i2_Byte_GetPair 000A  
                             ?_Console_NewLine 0001                              ??_Event_DIPSwitch 00CE  
                              ?i2_Byte_GetZone 0001                             i2Byte_GetZone@pMax 0003  
                             ?_HMI_InitButtons 0001                            __end_of_MXK_Dequeue 43AA  
                            HMI_SetSegments@in 00B9                          Button_Init@pThreshold 0102  
                                __size_of_main 01D2                                  __size_of_itos 00D8  
                            Byte_GetPair@pPair 00C0                         __end_of_Console_Render 10EC  
                          i2Port_SetPin@pInput 0010                            i2Port_SetPin@pValue 0013  
                                 _Port_GetQuad 40BA                            __end_of_MXK_Release 4828  
                               _MXK_TestButton 48EA                                  i2_Byte_SetBit 406E  
                                 _iRDistanceSS 0064                                    _irobot_leds 3ECC  
                                  _irobot_init 495A                            i2Word_GetPair@pPair 000F  
                                  _irobot_move 2CAA                      __end_of_MXK_BlockSwitchTo 43E8  
                     ?_Console_IncrementCursor 0001                           __size_of_Timer2_Init 0160  
                                     int$flags 0051                           __size_of_Timer0_Stop 0006  
                                 _Port_SetType 0CB2                                   Port_Set@Type 00DB  
                   __size_of_GetPortProperties 00A6                         __size_of_LCD_DrawField 00A4  
                                 _iRDropCaster 0085                    __size_of_load_iRScriptStack 006A  
                            ??_Configure_GPIOs 00EA                                      printf@val 00D7  
                                     main@dist 03E1                                   _SSP1STATbits 000FC7  
                               Timer0_Init@DIV 0068                                 Timer0_Init@PRE 0039  
                                 _SSP2STATbits 000F6D                                     _LED_Toggle 414C  
                                   _HMI_GetBar 49F2                           Button_Init@pGetState 0107  
                       PortProperty_Valid@Pair 00DA                               ??_Port_TogglePin 00CC  
                                  _OSCTUNEbits 000F9B                                     _INTCONbits 000FF2  
                       PortProperty_Valid@pPin 00C7                                     _HMI_SetBar 49C2  
                             Byte_SetZone@MASK 00BF                                    i2_MXK_Queue 4992  
                               Timer2_Init@DIV 031E                                 Timer2_Init@PRE 008A  
                             Byte_SetZone@pMax 00B7                         __size_ofi2_Timer0_Stop 0006  
                         __size_of_Port_GetPin 0046                         ??_irobot_move_straight 00D0  
               __size_of_update_bump_and_cliff 003A                           Button_Init@pFunction 010A  
                                     itos@Data 00C5                  __end_of_update_bump_and_cliff 449C  
                           LCD_FillRectangle@i 00CA                             LCD_FillRectangle@j 00CB  
                         __size_of_Port_SetPin 00C4                                       intlevel2 0000  
                                 reverse@input 00B5                         __size_of_HMI_DIPSwitch 0018  
                             ___lwmod@dividend 00BC                               ___lldiv@dividend 00B5  
                       __end_of_MXK_TestButton 4902                                ?_Console_Render 0001  
                                _iRScriptIndex 0035                        __size_of_LCD_Word_Write 001E  
                               ?i2_Byte_SetBit 0001                                  _iRScriptStack 0400  
                        __size_of_MXK_SwitchTo 0042                       irobot_query_and_update@i 00D1  
                     irobot_query_and_update@j 00CF                                 _SPI_DisableISR 4652  
                   __end_of_twos_complement_of 42AA                       irobot_rotate@rotateAngle 00CE  
                              Port_Init@pInput 00F5                                       printf@ap 00D5  
                             ?_get_packet_size 0001                         __size_ofi2_Port_SetPin 00AA  
                     irobot_rotate@rotateSpeed 00D0                               ?_HMI_SetSegments 00B6  
                      Console_MakeField@Column 00C1                          __size_of_SPI_MaxSpeed 0074  
                                SPI_DCS@pInput 00B5                          __size_of_SPI_MinSpeed 0074  
                              ??_MXK_DIPSwitch 00BB                                    ??_rx_assign 00B8  
                        __size_of_update_angle 0012                          __size_ofi2_Motor_Step 0100  
                      Console_MakeField@pInput 00C0                               ?_HMI_RightSwitch 0001  
                             ___lldiv@quotient 00BD                                  ??_GetPortPORT 00B7  
                              ___lwmod@divisor 00BE                                  ??_GetPortTRIS 00B7  
                           Word_SetPair@pInput 00C4                                ___lwmod@counter 00C0  
                           Word_SetPair@pValue 00C7                       ?_irobot_query_and_update 00BB  
                                  _MXK_Dequeue 436C                                 LED_Toggle@pLED 00CD  
                                _LCD_DrawField 314E                               _Port_SetQuadType 0A5C  
                                  _MXK_Release 480C                      __size_of_Console_FormFeed 008E  
                                 _MXK_SwitchTo 42AA                          __size_of_Word_GetPair 003E  
            irobot_query_and_update@startIndex 00D0                             Byte_GetZone@Offset 00BC  
                                ?_Console_Init 0001                              Word_SetPair@pPair 00C6  
                              _Port_SetPinType 167A                        __size_of_Timer0_Restart 000C  
                           Byte_GetZone@Output 00BD                             Byte_GetZone@pChunk 00B8  
                              ?_MXK_TestButton 0001                    __end_of_Console_ResetCursor 471E  
                           Byte_GetZone@pInput 00B5                        __size_ofi2_MXK_SwitchTo 0036  
              __end_of_Console_IncrementCursor 3C8A                          __size_of_Word_SetPair 0046  
                       __end_of_SPI_DisableISR 467A                                   _SPI_MaxSpeed 3768  
            irobot_query_and_update@streamSize 00CC                                   _SPI_MinSpeed 3850  
                           Port_Set@TypeActual 00D9  
